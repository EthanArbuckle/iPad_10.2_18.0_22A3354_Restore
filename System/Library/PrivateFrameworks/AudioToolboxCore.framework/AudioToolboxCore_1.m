void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*,false>(__int128 *a1, unint64_t a2, uint64_t a3, char a4)
{
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 *v25;
  __int128 *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _BOOL4 v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 *v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  BOOL v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _BOOL4 v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  BOOL v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  BOOL v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  __int128 v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  BOOL v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  __int128 *v112;
  __int128 v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  BOOL v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  _BOOL4 v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  __int128 v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  BOOL v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  __int128 *v148;
  __int128 v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  _BOOL4 v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  std::__shared_weak_count *v160;
  unint64_t *p_shared_owners;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _BOOL4 v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  _BOOL4 v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  BOOL v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  int64_t v197;
  int64_t v198;
  int64_t v199;
  uint64_t v200;
  __int128 *v201;
  uint64_t v202;
  __int128 v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  _BOOL4 v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  __int128 v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  BOOL v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  int64_t v234;
  unint64_t *v235;
  unint64_t v236;
  _BOOL4 v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  _QWORD *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  _BOOL4 v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  __int128 *v257;
  uint64_t v258;
  int64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  _BOOL4 v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  __int128 *v277;
  __int128 v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  _BOOL4 v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  __int128 v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  BOOL v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  _BOOL4 v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  __int128 v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  BOOL v329;
  unint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  int64_t v348;
  uint64_t v349;
  __int128 *v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;

void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*,false>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 *v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  unint64_t *v50;
  unint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  unint64_t *v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  __int128 *v71;
  __int128 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  __int128 v79;
  unint64_t *v80;
  unint64_t v81;
  BOOL v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  __int128 v92;
  unint64_t *v93;
  unint64_t v94;
  _BOOL4 v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  BOOL v104;
  uint64_t *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  __int128 v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  BOOL v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  __int128 *v133;
  __int128 v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  BOOL v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  _BOOL4 v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  __int128 v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  BOOL v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  __int128 *v178;
  __int128 v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  _BOOL4 v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t *v192;
  std::__shared_weak_count *v193;
  unint64_t *p_shared_owners;
  unint64_t v195;
  uint64_t *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  _BOOL4 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  _BOOL4 v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __int128 v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  BOOL v230;
  uint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  int64_t v239;
  int64_t v240;
  int64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  _BOOL4 v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  int64_t v258;
  unint64_t *v259;
  unint64_t v260;
  int64_t v261;
  uint64_t *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t **v266;
  uint64_t *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  BOOL v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  int64_t v276;
  unint64_t *v277;
  unint64_t v278;
  int64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  int64_t v286;
  uint64_t *v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  _BOOL4 v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  uint64_t *v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  __int128 v302;
  unint64_t *v303;
  unint64_t v304;
  _BOOL4 v305;
  uint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  uint64_t *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  _BOOL4 v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  uint64_t *v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  _BOOL4 v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t *v349;
  unint64_t v350;
  unint64_t *v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  __int128 v358;
  unint64_t *v359;
  unint64_t v360;
  BOOL v361;
  uint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  uint64_t v374;
  uint64_t v375;
  __int128 *v376;
  uint64_t *v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  uint64_t *v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  _BOOL4 v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  unint64_t *v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  __int128 v394;
  unint64_t *v395;
  unint64_t v396;
  uint64_t *v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  BOOL v401;
  uint64_t v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  unint64_t *v410;
  unint64_t v411;
  unint64_t *v412;
  unint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  int64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  __int128 v424;
  __int128 v425;

void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*,false>(__int128 *a1, unint64_t a2, uint64_t a3, char a4)
{
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 *v25;
  __int128 *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _BOOL4 v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 *v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  BOOL v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _BOOL4 v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  BOOL v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  BOOL v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  __int128 v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  BOOL v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  __int128 *v112;
  __int128 v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  BOOL v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  _BOOL4 v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  __int128 v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  BOOL v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  __int128 *v148;
  __int128 v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  _BOOL4 v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  std::__shared_weak_count *v160;
  unint64_t *p_shared_owners;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _BOOL4 v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  _BOOL4 v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  BOOL v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  int64_t v197;
  int64_t v198;
  int64_t v199;
  uint64_t v200;
  __int128 *v201;
  uint64_t v202;
  __int128 v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  _BOOL4 v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  __int128 v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  BOOL v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  int64_t v234;
  unint64_t *v235;
  unint64_t v236;
  _BOOL4 v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  _QWORD *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  _BOOL4 v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  __int128 *v257;
  uint64_t v258;
  int64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  _BOOL4 v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  __int128 *v277;
  __int128 v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  _BOOL4 v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  __int128 v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  BOOL v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  _BOOL4 v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  __int128 v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  BOOL v329;
  unint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  int64_t v348;
  uint64_t v349;
  __int128 *v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;

uint64_t HOA::getTDesign(HOA *this, _OWORD *__dst, float *a3, float *__C, float *a5)
{
  uint64_t v7;
  const void *v8;
  float *v9;
  size_t v10;
  __int128 *v11;
  __int128 v12;
  float __A;

  switch((int)this)
  {
    case 0:
      v7 = 1;
      if (__dst && a3)
      {
        *(_DWORD *)__dst = 0;
        *a3 = 0.0;
      }
      break;
    case 1:
      v7 = 4;
      if (__dst && a3)
      {
        *__dst = xmmword_18F117610;
        *(_OWORD *)a3 = xmmword_18F117620;
      }
      break;
    case 2:
      v7 = 12;
      if (__dst && a3)
      {
        *__dst = *(_OWORD *)"";
        __dst[1] = unk_18F0F9370;
        __dst[2] = xmmword_18F0F9380;
        v11 = &xmmword_18F0F9390;
        *((_OWORD *)a3 + 2) = xmmword_18F0F93B0;
        goto LABEL_20;
      }
      break;
    case 3:
      v7 = 24;
      if (__dst && a3)
      {
        __dst[2] = xmmword_18F0F93E0;
        __dst[3] = unk_18F0F93F0;
        __dst[4] = xmmword_18F0F9400;
        __dst[5] = unk_18F0F9410;
        *__dst = xmmword_18F0F93C0;
        __dst[1] = unk_18F0F93D0;
        *((_OWORD *)a3 + 2) = xmmword_18F0F9440;
        *((_OWORD *)a3 + 3) = unk_18F0F9450;
        *((_OWORD *)a3 + 4) = xmmword_18F0F9460;
        *((_OWORD *)a3 + 5) = unk_18F0F9470;
        *(_OWORD *)a3 = xmmword_18F0F9420;
        *((_OWORD *)a3 + 1) = unk_18F0F9430;
      }
      break;
    case 4:
      v7 = 36;
      if (__dst && a3)
      {
        __dst[2] = xmmword_18F0F94A0;
        __dst[3] = unk_18F0F94B0;
        __dst[8] = xmmword_18F0F9500;
        __dst[6] = xmmword_18F0F94E0;
        __dst[7] = unk_18F0F94F0;
        __dst[4] = xmmword_18F0F94C0;
        __dst[5] = unk_18F0F94D0;
        *__dst = xmmword_18F0F9480;
        __dst[1] = unk_18F0F9490;
        v11 = &xmmword_18F0F9510;
        *((_OWORD *)a3 + 6) = xmmword_18F0F9570;
        *((_OWORD *)a3 + 7) = unk_18F0F9580;
        *((_OWORD *)a3 + 8) = xmmword_18F0F9590;
        *((_OWORD *)a3 + 2) = xmmword_18F0F9530;
        *((_OWORD *)a3 + 3) = unk_18F0F9540;
        *((_OWORD *)a3 + 4) = xmmword_18F0F9550;
        *((_OWORD *)a3 + 5) = unk_18F0F9560;
LABEL_20:
        v12 = v11[1];
        *(_OWORD *)a3 = *v11;
        *((_OWORD *)a3 + 1) = v12;
      }
      break;
    case 5:
      v7 = 60;
      if (__dst && a3)
      {
        __dst[12] = xmmword_18F0F9660;
        __dst[13] = unk_18F0F9670;
        __dst[14] = xmmword_18F0F9680;
        __dst[8] = xmmword_18F0F9620;
        __dst[9] = unk_18F0F9630;
        __dst[10] = xmmword_18F0F9640;
        __dst[11] = unk_18F0F9650;
        __dst[4] = xmmword_18F0F95E0;
        __dst[5] = unk_18F0F95F0;
        __dst[6] = xmmword_18F0F9600;
        __dst[7] = unk_18F0F9610;
        *__dst = xmmword_18F0F95A0;
        __dst[1] = unk_18F0F95B0;
        __dst[2] = xmmword_18F0F95C0;
        __dst[3] = unk_18F0F95D0;
        *((_OWORD *)a3 + 12) = xmmword_18F0F9750;
        *((_OWORD *)a3 + 13) = unk_18F0F9760;
        *((_OWORD *)a3 + 14) = xmmword_18F0F9770;
        *((_OWORD *)a3 + 8) = xmmword_18F0F9710;
        *((_OWORD *)a3 + 9) = unk_18F0F9720;
        *((_OWORD *)a3 + 10) = xmmword_18F0F9730;
        *((_OWORD *)a3 + 11) = unk_18F0F9740;
        *((_OWORD *)a3 + 4) = xmmword_18F0F96D0;
        *((_OWORD *)a3 + 5) = unk_18F0F96E0;
        *((_OWORD *)a3 + 6) = xmmword_18F0F96F0;
        *((_OWORD *)a3 + 7) = unk_18F0F9700;
        *(_OWORD *)a3 = xmmword_18F0F9690;
        *((_OWORD *)a3 + 1) = unk_18F0F96A0;
        *((_OWORD *)a3 + 2) = xmmword_18F0F96B0;
        *((_OWORD *)a3 + 3) = unk_18F0F96C0;
      }
      break;
    case 6:
      v7 = 84;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F0F9780, 0x150uLL);
        v8 = &unk_18F0F98D0;
        v9 = a3;
        v10 = 336;
        goto LABEL_72;
      }
      break;
    case 7:
      v7 = 108;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F0F9A20, 0x1B0uLL);
        v8 = &unk_18F0F9BD0;
        v9 = a3;
        v10 = 432;
        goto LABEL_72;
      }
      break;
    case 8:
      v7 = 144;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F0F9D80, 0x240uLL);
        v8 = &unk_18F0F9FC0;
        v9 = a3;
        v10 = 576;
        goto LABEL_72;
      }
      break;
    case 9:
      v7 = 180;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F0FA200, 0x2D0uLL);
        v8 = &unk_18F0FA4D0;
        v9 = a3;
        v10 = 720;
        goto LABEL_72;
      }
      break;
    case 10:
      v7 = 216;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F0FA7A0, 0x360uLL);
        v8 = &unk_18F0FAB00;
        v9 = a3;
        v10 = 864;
        goto LABEL_72;
      }
      break;
    case 11:
      v7 = 266;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F0FAE60, 0x428uLL);
        v8 = &unk_18F0FB288;
        v9 = a3;
        v10 = 1064;
        goto LABEL_72;
      }
      break;
    case 12:
      v7 = 314;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F0FB6B0, 0x4E8uLL);
        v8 = &unk_18F0FBB98;
        v9 = a3;
        v10 = 1256;
        goto LABEL_72;
      }
      break;
    case 13:
      v7 = 366;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F0FC080, 0x5B8uLL);
        v8 = &unk_18F0FC638;
        v9 = a3;
        v10 = 1464;
        goto LABEL_72;
      }
      break;
    case 14:
      v7 = 422;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F0FCBF0, 0x698uLL);
        v8 = &unk_18F0FD288;
        v9 = a3;
        v10 = 1688;
        goto LABEL_72;
      }
      break;
    case 15:
      v7 = 482;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F0FD920, 0x788uLL);
        v8 = &unk_18F0FE0A8;
        v9 = a3;
        v10 = 1928;
        goto LABEL_72;
      }
      break;
    case 16:
      v7 = 546;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F0FE830, 0x888uLL);
        v8 = &unk_18F0FF0B8;
        v9 = a3;
        v10 = 2184;
        goto LABEL_72;
      }
      break;
    case 17:
      v7 = 614;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F0FF940, 0x998uLL);
        v8 = &unk_18F1002D8;
        v9 = a3;
        v10 = 2456;
        goto LABEL_72;
      }
      break;
    case 18:
      v7 = 686;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F100C70, 0xAB8uLL);
        v8 = &unk_18F101728;
        v9 = a3;
        v10 = 2744;
        goto LABEL_72;
      }
      break;
    case 19:
      v7 = 762;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F1021E0, 0xBE8uLL);
        v8 = &unk_18F102DC8;
        v9 = a3;
        v10 = 3048;
        goto LABEL_72;
      }
      break;
    case 20:
      v7 = 842;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F1039B0, 0xD28uLL);
        v8 = &unk_18F1046D8;
        v9 = a3;
        v10 = 3368;
        goto LABEL_72;
      }
      break;
    case 21:
      v7 = 926;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F105400, 0xE78uLL);
        v8 = &unk_18F106278;
        v9 = a3;
        v10 = 3704;
        goto LABEL_72;
      }
      break;
    default:
      v7 = 1014;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_18F1070F0, 0xFD8uLL);
        v8 = &unk_18F1080C8;
        v9 = a3;
        v10 = 4056;
LABEL_72:
        memcpy(v9, v8, v10);
      }
      break;
  }
  if (__C)
  {
    __A = 1.0;
    vDSP_vfill(&__A, __C, 1, v7);
  }
  return v7;
}

uint64_t CA::AudioMetadataDeserializer::Impl::decode_stream_format(uint64_t a1, _anonymous_namespace_ *a2, const unsigned __int8 *a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t **v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t **v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  unsigned __int8 *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  NSObject *v36;
  unsigned __int8 *v37;
  uint64_t **v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  NSObject *v48;
  int v49;
  uint64_t **v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  unsigned __int8 *v54;
  unint64_t *v55;
  unint64_t v56;
  NSObject *v57;
  uint64_t **v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int16 *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v70;
  uint64_t v71;
  unsigned __int16 *v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  uint64_t *v77[2];
  void *__p[2];
  uint64_t v79;
  uint64_t *v80[2];
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83[2];
  char __s[8];
  _BYTE v85[18];
  uint8_t v86[32];
  uint8_t buf[24];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  AudioMetadataMemoryPool::create<AudioMetadataStreamFormat>(&v81, *(_QWORD *)a1);
  snprintf(&__s[1], 0xCuLL, "AS_%04hx%04hx", *a5, a5[1]);
  v10 = *(uint64_t ***)a1;
  v11 = v81;
  v12 = (std::__shared_weak_count *)v82;
  v80[0] = v81;
  v80[1] = v82;
  if (v82)
  {
    v13 = (unint64_t *)(v82 + 1);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v10, v80, v11, &__s[1]);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v79 = 0;
  if ((_DWORD)v18)
  {
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      goto LABEL_90;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2442;
    v20 = "%25s:%-5d ...at stream format name";
    goto LABEL_89;
  }
  v21 = *(uint64_t ***)a1;
  v22 = v81;
  v23 = (std::__shared_weak_count *)v82;
  v77[0] = v81;
  v77[1] = v82;
  if (v82)
  {
    v24 = (unint64_t *)(v82 + 1);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if (v79 >= 0)
    v26 = (char *)__p;
  else
    v26 = (char *)__p[0];
  AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v21, v77, v22 + 1, v26);
  if (v23)
  {
    v28 = (unint64_t *)&v23->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v30 = v81;
  v31 = (std::__shared_weak_count *)v82;
  v75 = v81;
  v76 = (std::__shared_weak_count *)v82;
  if (v82)
  {
    v32 = (unint64_t *)(v82 + 1);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  __s[0] = 0;
  if ((_DWORD)v34)
  {
    v18 = v34;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1907;
      _os_log_impl(&dword_18EE07000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at format definition flags", buf, 0x12u);
    }
    goto LABEL_78;
  }
  if ((__s[0] & 0x80000000) == 0)
  {
    v38 = *(uint64_t ***)a1;
    *(_QWORD *)buf = v30;
    *(_QWORD *)&buf[8] = v31;
    if (v31)
    {
      v39 = (unint64_t *)&v31->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v38, (uint64_t **)buf, v30 + 2, "0001");
    if (v31)
    {
      v41 = (unint64_t *)&v31->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v43 = *(uint64_t ***)a1;
    *(_QWORD *)v86 = v75;
    *(_QWORD *)&v86[8] = v76;
    if (v76)
    {
      v44 = (unint64_t *)&v76->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v43, (uint64_t **)v86, v30 + 3, "PCM");
    if (v76)
    {
      v46 = (unint64_t *)&v76->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
LABEL_77:
    v18 = 0;
    goto LABEL_78;
  }
  memset(buf, 0, sizeof(buf));
  if ((_DWORD)v18)
  {
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v86 = 136315394;
      *(_QWORD *)&v86[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&v86[12] = 1024;
      *(_DWORD *)&v86[14] = 1915;
      _os_log_impl(&dword_18EE07000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at format label", v86, 0x12u);
    }
    v49 = 1;
  }
  else
  {
    v50 = *(uint64_t ***)a1;
    v83[0] = v30;
    v83[1] = (uint64_t *)v31;
    if (v31)
    {
      v51 = (unint64_t *)&v31->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    if ((buf[23] & 0x80u) == 0)
      v53 = (char *)buf;
    else
      v53 = *(char **)buf;
    AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v50, v83, v30 + 2, v53);
    if (v31)
    {
      v55 = (unint64_t *)&v31->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    memset(v86, 0, 24);
    if ((_DWORD)v18)
    {
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v85 = 136315394;
        *(_QWORD *)&v85[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&v85[12] = 1024;
        *(_DWORD *)&v85[14] = 1922;
        _os_log_impl(&dword_18EE07000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at format definition", v85, 0x12u);
      }
      v49 = 1;
    }
    else
    {
      v58 = *(uint64_t ***)a1;
      *(_QWORD *)v85 = v75;
      *(_QWORD *)&v85[8] = v76;
      if (v76)
      {
        v59 = (unint64_t *)&v76->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      if ((v86[23] & 0x80u) == 0)
        v61 = (char *)v86;
      else
        v61 = *(char **)v86;
      AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v58, (uint64_t **)v85, v30 + 3, v61);
      std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v85);
      v49 = 0;
    }
    if ((char)v86[23] < 0)
      operator delete(*(void **)v86);
  }
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  if (!v49)
    goto LABEL_77;
  if (!v76)
    goto LABEL_82;
LABEL_78:
  v62 = (unint64_t *)&v76->__shared_owners_;
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
    if ((_DWORD)v18)
      goto LABEL_83;
  }
  else
  {
LABEL_82:
    if ((_DWORD)v18)
    {
LABEL_83:
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        goto LABEL_90;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2448;
      v20 = "%25s:%-5d ...at stream format definition";
      goto LABEL_89;
    }
  }
  v85[0] = 0;
  if ((_DWORD)v64)
  {
    v18 = v64;
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      goto LABEL_90;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2454;
    v20 = "%25s:%-5d ...at stream format flags";
    goto LABEL_89;
  }
  if ((v85[0] & 0x80000000) == 0)
    goto LABEL_99;
  if ((_DWORD)v71)
  {
    v18 = v71;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2462;
      v20 = "%25s:%-5d ...at stream format channel format reference, major";
LABEL_89:
      _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
    }
  }
  else
  {
    if (!(_DWORD)v73)
    {
      *(_DWORD *)v74 = *(_DWORD *)v86;
LABEL_99:
      std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v70, (uint64_t)v81, (uint64_t)v82);
      v18 = 0;
      goto LABEL_90;
    }
    v18 = v73;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2467;
      v20 = "%25s:%-5d ...at stream format channel format reference, minor";
      goto LABEL_89;
    }
  }
LABEL_90:
  if (SHIBYTE(v79) < 0)
    operator delete(__p[0]);
  v66 = (std::__shared_weak_count *)v82;
  if (v82)
  {
    v67 = (unint64_t *)(v82 + 1);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  return v18;
}

void sub_18EE74168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t CA::AudioMetadataDeserializer::Impl::decode_block_format(uint64_t a1, _anonymous_namespace_ *a2, const unsigned __int8 *a3, unint64_t *a4, unsigned __int16 *a5, int a6)
{
  uint64_t **v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  int v30;
  int v31;
  int v32;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  unsigned __int16 *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int16 v60;
  NSObject *v61;
  const char *v62;
  unsigned int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  _BYTE *v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  float *v73;
  uint64_t v74;
  unsigned __int16 *v75;
  uint64_t v76;
  float *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  uint64_t **v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned __int8 *v100;
  unsigned int v101;
  unint64_t *v102;
  int v103;
  uint64_t v104;
  float *v105;
  uint64_t v106;
  float *v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  unsigned __int8 *v111;
  uint64_t **v112;
  unint64_t *v113;
  unint64_t v114;
  char *p_p;
  uint64_t v116;
  NSObject *v117;
  unsigned __int8 *v118;
  uint64_t **v119;
  unint64_t *v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  NSObject *v124;
  uint64_t **v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  unsigned __int16 *v130;
  uint64_t v131;
  uint64_t v132;
  float *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t *v143;
  void *v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  float *v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  NSObject *v158;
  uint64_t v159;
  unsigned __int8 *v160;
  uint64_t v161;
  int v162;
  unsigned __int8 *v163;
  uint64_t v164;
  NSObject *v165;
  NSObject *v166;
  const char *v167;
  char v168;
  uint64_t **v169;
  unint64_t *v170;
  unint64_t v171;
  char *v172;
  char *v173;
  float *v174;
  uint64_t v175;
  float *v176;
  NSObject *v177;
  NSObject *v178;
  uint64_t v179;
  float *v180;
  NSObject *v181;
  uint64_t v182;
  float *v183;
  NSObject *v184;
  uint64_t v185;
  float *v186;
  NSObject *v187;
  uint64_t v188;
  float *v189;
  NSObject *v190;
  uint64_t v191;
  float *v192;
  NSObject *v193;
  uint64_t v194;
  NSObject *v195;
  uint64_t v196;
  float *v197;
  NSObject *v198;
  uint64_t v199;
  NSObject *v200;
  uint64_t v201;
  int v202;
  int v203;
  NSObject *v204;
  uint64_t v205;
  NSObject *v206;
  uint64_t v208;
  uint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  char v212;
  unint64_t v213;
  int v214;
  unint64_t *v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  void *__p;
  uint64_t v223;
  uint64_t v224;
  unint64_t *v225[2];
  __int128 v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  __int128 v230;
  unsigned __int16 v231;
  unsigned __int8 v232;
  __int128 v233;
  __int128 v234;
  unsigned __int16 v235;
  unsigned __int16 v236;
  uint8_t v237[27];
  char __str[21];
  uint8_t buf[24];
  __int16 v240;
  int v241;
  __int16 v242;
  int v243;
  __int16 v244;
  int v245;
  __int16 v246;
  int v247;
  uint64_t v248;

  v248 = *MEMORY[0x1E0C80C00];
  v235 = *a5;
  v236 = a5[1];
  {
    v14 = 4294900724;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v30 = *a5;
      v31 = a5[1];
      v32 = *((_DWORD *)a5 + 1);
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1258;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v30;
      v240 = 1024;
      v241 = v31;
      v242 = 1024;
      v243 = v30;
      v244 = 1024;
      v245 = v31;
      v246 = 1024;
      v247 = v32;
      _os_log_impl(&dword_18EE07000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing channel format AC_%04hx%04hx for block format AB_%04hx%04hx_%08x", buf, 0x30u);
    }
    return v14;
  }
  AudioMetadataMemoryPool::create<AudioMetadataBlockFormat>(&v234, *(_QWORD *)a1);
  snprintf(__str, 0x15uLL, "AB_%04hx%04hx_%08x", *a5, a5[1], *((_DWORD *)a5 + 1));
  v12 = *(uint64_t ***)a1;
  v14 = *((_QWORD *)&v234 + 1);
  v13 = (_QWORD *)v234;
  v233 = v234;
  if (*((_QWORD *)&v234 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(v12, (uint64_t **)&v233, v13, __str);
  if (v14)
  {
    v18 = (unint64_t *)(v14 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v14);
    }
  }
  v232 = 0;
  if ((_DWORD)v20)
  {
    v14 = v20;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1268;
    v23 = "%25s:%-5d ...at block format flags first byte";
LABEL_13:
    v24 = v22;
    v25 = 18;
LABEL_14:
    _os_log_impl(&dword_18EE07000, v24, OS_LOG_TYPE_ERROR, v23, buf, v25);
    goto LABEL_15;
  }
  v34 = v232;
  v35 = v234;
  *(_BYTE *)(v234 + 157) = v232 >> 4;
  *(_BYTE *)(v35 + 158) = (v34 & 4) != 0;
  *(_BYTE *)(v35 + 40) = (v34 & 2) != 0;
  *(_BYTE *)(v35 + 41) = v34 & 1;
  if ((v34 & 8) != 0)
  {
    if ((_DWORD)v37)
    {
      v14 = v37;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        goto LABEL_15;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1279;
      v23 = "%25s:%-5d ...at block format flags second byte";
      goto LABEL_13;
    }
    v39 = v234;
    *(_BYTE *)(v234 + 156) = v232 >> 7;
    if ((_DWORD)v40)
    {
      v14 = v40;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        goto LABEL_15;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1285;
      v23 = "%25s:%-5d ...at block format gain";
      goto LABEL_13;
    }
    v35 = v234;
    if (!*(_BYTE *)(v234 + 41))
      goto LABEL_35;
  }
  else
  {
    *(_BYTE *)(v35 + 156) = 0;
    *(_DWORD *)(v35 + 32) = 1065353216;
    if ((v34 & 1) == 0)
      goto LABEL_35;
  }
  if ((_DWORD)v36)
  {
    v14 = v36;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1295;
    v23 = "%25s:%-5d ...at block format headphone virtualise DDR";
    goto LABEL_13;
  }
LABEL_35:
  switch(a6)
  {
    case 0:
    case 5:
      goto LABEL_36;
    case 1:
      v231 = 0;
      if ((_DWORD)v52)
      {
        v14 = v52;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1304;
        v23 = "%25s:%-5d ...at block format DirectSpeakers flags";
        goto LABEL_13;
      }
      v60 = v231;
      *(_BYTE *)(v234 + 108) = v231 >> 12;
      memset(buf, 0, sizeof(buf));
      if ((_DWORD)v14)
      {
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v237 = 136315394;
          *(_QWORD *)&v237[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&v237[12] = 1024;
          *(_DWORD *)&v237[14] = 1317;
          v62 = "%25s:%-5d ...at block format DirectSpeakers label";
LABEL_101:
          _os_log_impl(&dword_18EE07000, v61, OS_LOG_TYPE_ERROR, v62, v237, 0x12u);
        }
      }
      else
      {
        v81 = *(uint64_t ***)a1;
        v82 = v234;
        v230 = v234;
        if (*((_QWORD *)&v234 + 1))
        {
          v83 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
        v14 = (char)buf[23];
        if ((int)v14 >= 0)
          v85 = (char *)buf;
        else
          v85 = *(char **)buf;
        AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(v81, (uint64_t **)&v230, (_QWORD *)(v82 + 44), v85);
        std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v230);
        v86 = v234;
        *(_BYTE *)(v234 + 100) = 0;
        if (!(_DWORD)v87)
        {
          LODWORD(v226) = 0;
          if ((v60 & 0x800) != 0)
          {
            if ((_DWORD)v94)
            {
              v14 = v94;
              if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                goto LABEL_102;
              *(_DWORD *)v237 = 136315394;
              *(_QWORD *)&v237[4] = "AudioMetadataDeserializer.cpp";
              *(_WORD *)&v237[12] = 1024;
              *(_DWORD *)&v237[14] = 1331;
              v62 = "%25s:%-5d ...at block format DirectSpeakers max azimuth";
              goto LABEL_101;
            }
          }
          LODWORD(__p) = 0;
          if ((v60 & 0x400) != 0)
          {
            if ((_DWORD)v95)
            {
              v14 = v95;
              if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                goto LABEL_102;
              *(_DWORD *)v237 = 136315394;
              *(_QWORD *)&v237[4] = "AudioMetadataDeserializer.cpp";
              *(_WORD *)&v237[12] = 1024;
              *(_DWORD *)&v237[14] = 1339;
              v62 = "%25s:%-5d ...at block format DirectSpeakers min azimuth";
              goto LABEL_101;
            }
          }
          LODWORD(v225[0]) = 0;
          if ((v60 & 0x200) != 0)
          {
            if ((_DWORD)v134)
            {
              v14 = v134;
              if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                goto LABEL_102;
              *(_DWORD *)v237 = 136315394;
              *(_QWORD *)&v237[4] = "AudioMetadataDeserializer.cpp";
              *(_WORD *)&v237[12] = 1024;
              *(_DWORD *)&v237[14] = 1347;
              v62 = "%25s:%-5d ...at block format DirectSpeakers max elevation";
              goto LABEL_101;
            }
          }
          LODWORD(v228) = 0;
          if ((v60 & 0x100) != 0)
          {
            if ((_DWORD)v137)
            {
              v14 = v137;
              if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                goto LABEL_102;
              *(_DWORD *)v237 = 136315394;
              *(_QWORD *)&v237[4] = "AudioMetadataDeserializer.cpp";
              *(_WORD *)&v237[12] = 1024;
              *(_DWORD *)&v237[14] = 1355;
              v62 = "%25s:%-5d ...at block format DirectSpeakers min elevation";
              goto LABEL_101;
            }
          }
          HIDWORD(v229) = 0;
          if ((v60 & 0x80) != 0)
          {
            if ((_DWORD)v147)
            {
              v14 = v147;
              if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                goto LABEL_102;
              *(_DWORD *)v237 = 136315394;
              *(_QWORD *)&v237[4] = "AudioMetadataDeserializer.cpp";
              *(_WORD *)&v237[12] = 1024;
              *(_DWORD *)&v237[14] = 1363;
              v62 = "%25s:%-5d ...at block format DirectSpeakers max distance";
              goto LABEL_101;
            }
          }
          LODWORD(v229) = 0;
          v148 = 0;
          if ((v60 & 0x40) != 0)
          {
            if ((_DWORD)v149)
            {
              v14 = v149;
              if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                goto LABEL_102;
              *(_DWORD *)v237 = 136315394;
              *(_QWORD *)&v237[4] = "AudioMetadataDeserializer.cpp";
              *(_WORD *)&v237[12] = 1024;
              *(_DWORD *)&v237[14] = 1371;
              v62 = "%25s:%-5d ...at block format DirectSpeakers min distance";
              goto LABEL_101;
            }
            v148 = v229;
          }
          v88 = 0;
          v201 = v234;
          *(_BYTE *)(v234 + 68) = 0;
          v202 = (int)v225[0];
          *(_DWORD *)(v201 + 56) = v226;
          *(_DWORD *)(v201 + 60) = v202;
          *(_DWORD *)(v201 + 64) = HIDWORD(v229);
          *(_BYTE *)(v201 + 84) = 0;
          v203 = v228;
          *(_DWORD *)(v201 + 72) = (_DWORD)__p;
          *(_DWORD *)(v201 + 76) = v203;
          *(_DWORD *)(v201 + 80) = v148;
LABEL_103:
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          if (v88)
            goto LABEL_15;
          goto LABEL_36;
        }
        v14 = v87;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v237 = 136315394;
          *(_QWORD *)&v237[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&v237[12] = 1024;
          *(_DWORD *)&v237[14] = 1324;
          v62 = "%25s:%-5d ...at block format DirectSpeakers position";
          goto LABEL_101;
        }
      }
LABEL_102:
      v88 = 1;
      goto LABEL_103;
    case 2:
      BYTE4(v229) = 0;
      if ((_DWORD)v50)
      {
        v14 = v50;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1388;
        v23 = "%25s:%-5d ...at block format Matrix flags";
        goto LABEL_13;
      }
      if ((SBYTE4(v229) & 0x80000000) == 0)
        goto LABEL_62;
      if ((_DWORD)v74)
      {
        v14 = v74;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1396;
        v23 = "%25s:%-5d ...at block format output channel format ID, major";
        goto LABEL_13;
      }
      if ((_DWORD)v90)
      {
        v14 = v90;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1401;
        v23 = "%25s:%-5d ...at block format output channel format ID, minor";
        goto LABEL_13;
      }
      *(_DWORD *)v135 = *(_DWORD *)v237;
LABEL_62:
      if ((_DWORD)v58)
      {
        v14 = v58;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1408;
        v23 = "%25s:%-5d ...at block format jump position";
        goto LABEL_13;
      }
      v228 = 0;
      if ((_DWORD)v89)
      {
        v14 = v89;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1414;
        v23 = "%25s:%-5d ...at block format # matrix coefficients";
        goto LABEL_13;
      }
      memset(v237, 0, 24);
      v226 = 0uLL;
      v227 = 0;
      v96 = v228;
      if (!v228)
        goto LABEL_196;
      v97 = 0;
      v213 = v228;
      do
      {
        AudioMetadataMemoryPool::create<AudioMetadataMatrixCoefficient>(v225, *(_QWORD *)a1);
        LOBYTE(v229) = 0;
        if ((_DWORD)v99)
        {
          v205 = v99;
          if (os_log_type_enabled(v206, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1424;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v97 + 1;
            v240 = 1024;
            v241 = v213;
            v156 = "%25s:%-5d ...at block format Matrix coefficient #%d of %d flags";
            goto LABEL_310;
          }
          goto LABEL_311;
        }
        v101 = v229;
        v102 = v225[0];
        *((_BYTE *)v225[0] + 44) = v229 >> 7;
        v103 = (v101 >> 5) & 3;
        if (v103)
        {
          if (v103 == 2)
          {
            __p = 0;
            v223 = 0;
            v224 = 0;
            if ((_DWORD)v109)
            {
              v14 = v109;
              if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1445;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v97 + 1;
                v240 = 1024;
                v241 = v213;
                _os_log_impl(&dword_18EE07000, v110, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at block format Matrix coefficient #%d of %d gain variable", buf, 0x1Eu);
                v14 = v109;
              }
            }
            else
            {
              v112 = *(uint64_t ***)a1;
              v221 = v234;
              if (*((_QWORD *)&v234 + 1))
              {
                v113 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
                do
                  v114 = __ldxr(v113);
                while (__stxr(v114 + 1, v113));
              }
              if (v224 >= 0)
                p_p = (char *)&__p;
              else
                p_p = (char *)__p;
              AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(v112, (uint64_t **)&v221, (unint64_t *)((char *)v225[0] + 12), p_p);
              std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v221);
            }
            if (SHIBYTE(v224) < 0)
              operator delete(__p);
            if ((_DWORD)v109)
              goto LABEL_312;
            __p = 0;
            v223 = 0;
            v224 = 0;
            if ((_DWORD)v116)
            {
              v14 = v116;
              if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1469;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v97 + 1;
                v240 = 1024;
                v241 = v213;
                _os_log_impl(&dword_18EE07000, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at block format Matrix coefficient #%d of %d phase variable", buf, 0x1Eu);
                v14 = v116;
              }
            }
            else
            {
              v119 = *(uint64_t ***)a1;
              v220 = v234;
              if (*((_QWORD *)&v234 + 1))
              {
                v120 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
                do
                  v121 = __ldxr(v120);
                while (__stxr(v121 + 1, v120));
              }
              v122 = v224 >= 0 ? (char *)&__p : (char *)__p;
              AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(v119, (uint64_t **)&v220, (unint64_t *)((char *)v225[0] + 28), v122);
              std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v220);
            }
            if (SHIBYTE(v224) < 0)
              operator delete(__p);
            if ((_DWORD)v116)
              goto LABEL_312;
            __p = 0;
            v223 = 0;
            v224 = 0;
            if ((_DWORD)v123)
            {
              v14 = v123;
              if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1493;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v97 + 1;
                v240 = 1024;
                v241 = v213;
                _os_log_impl(&dword_18EE07000, v124, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at block format Matrix coefficient #%d of %d delay variable", buf, 0x1Eu);
                v14 = v123;
              }
            }
            else
            {
              v125 = *(uint64_t ***)a1;
              v219 = v234;
              if (*((_QWORD *)&v234 + 1))
              {
                v126 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
                do
                  v127 = __ldxr(v126);
                while (__stxr(v127 + 1, v126));
              }
              v128 = v224 >= 0 ? (char *)&__p : (char *)__p;
              AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(v125, (uint64_t **)&v219, (unint64_t *)((char *)v225[0] + 20), v128);
              std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v219);
            }
            if (SHIBYTE(v224) < 0)
              operator delete(__p);
            v96 = v213;
            if ((_DWORD)v123)
              goto LABEL_312;
          }
          else
          {
            if (v103 != 1)
            {
              v14 = 4294900722;
              if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136316162;
                *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1451;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v103;
                v240 = 1024;
                v241 = v97 + 1;
                v242 = 1024;
                v243 = v213;
                _os_log_impl(&dword_18EE07000, v204, OS_LOG_TYPE_ERROR, "%25s:%-5d Undefined gain type (%d) in block format Matrix coefficient #%d of %d", buf, 0x24u);
              }
              goto LABEL_312;
            }
            if ((_DWORD)v104)
            {
              v205 = v104;
              if (os_log_type_enabled(v206, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1437;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v97 + 1;
                v240 = 1024;
                v241 = v213;
                v156 = "%25s:%-5d ...at block format Matrix coefficient #%d of %d gain value";
                goto LABEL_310;
              }
LABEL_311:
              v14 = v205;
LABEL_312:
              std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v225);
              goto LABEL_313;
            }
            if ((_DWORD)v106)
            {
              v205 = v106;
              if (!os_log_type_enabled(v206, OS_LOG_TYPE_ERROR))
                goto LABEL_311;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1461;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v97 + 1;
              v240 = 1024;
              v241 = v213;
              v156 = "%25s:%-5d ...at block format Matrix coefficient #%d of %d phase value";
LABEL_310:
              _os_log_impl(&dword_18EE07000, v206, OS_LOG_TYPE_ERROR, v156, buf, 0x1Eu);
              goto LABEL_311;
            }
            if ((_DWORD)v108)
            {
              v205 = v108;
              if (!os_log_type_enabled(v206, OS_LOG_TYPE_ERROR))
                goto LABEL_311;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1485;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v97 + 1;
              v240 = 1024;
              v241 = v213;
              v156 = "%25s:%-5d ...at block format Matrix coefficient #%d of %d delay value";
              goto LABEL_310;
            }
          }
        }
        if ((_DWORD)v129)
        {
          v157 = v129;
          if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1506;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v97 + 1;
            v240 = 1024;
            v241 = v213;
LABEL_239:
            _os_log_impl(&dword_18EE07000, v158, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at block format Matrix coefficient #%d of %d channel format ID, major", buf, 0x1Eu);
          }
LABEL_240:
          std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v225);
          v14 = v157;
LABEL_313:
          if ((_QWORD)v226)
            operator delete((void *)v226);
          v145 = 1;
          goto LABEL_316;
        }
        if ((_DWORD)v131)
        {
          v157 = v131;
          if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1511;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v97 + 1;
            v240 = 1024;
            v241 = v213;
            goto LABEL_239;
          }
          goto LABEL_240;
        }
        *(unint64_t **)buf = v225[0];
        std::vector<AudioMetadataObject *>::push_back[abi:ne180100]((void **)v237, buf);
        std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v225);
        ++v97;
      }
      while (v97 != v96);
LABEL_196:
      v139 = *(_QWORD *)a1;
      v140 = v234;
      v218 = v234;
      if (*((_QWORD *)&v234 + 1))
      {
        v141 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
        do
          v142 = __ldxr(v141);
        while (__stxr(v142 + 1, v141));
      }
      AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataMatrixCoefficient,AudioMetadataMatrix,AudioMetadataBlockFormat>(v139, (uint64_t **)&v218, v140 + 60, v237);
      std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v218);
      v144 = (void *)*v143;
      if (*v143)
      {
        v143[1] = (uint64_t)v144;
        operator delete(v144);
        *v143 = 0;
        v143[1] = 0;
        v143[2] = 0;
      }
      v145 = 0;
      *(_OWORD *)v143 = v226;
      v143[2] = v227;
LABEL_316:
      if (*(_QWORD *)v237)
        operator delete(*(void **)v237);
      if ((v145 & 1) != 0)
        goto LABEL_15;
LABEL_36:
      while (*a4 < (unint64_t)a3)
      {
        LOBYTE(v226) = 0;
        if ((_DWORD)v41)
        {
          v14 = v41;
          if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            goto LABEL_15;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1730;
          v23 = "%25s:%-5d ...at block format optional variant code";
          goto LABEL_13;
        }
        v43 = v226;
        if (v226 == 1)
        {
          *(_QWORD *)v237 = 0;
          if ((_DWORD)v46)
          {
            v14 = v46;
            if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
              goto LABEL_15;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1748;
            v23 = "%25s:%-5d ...at block format duration";
            goto LABEL_13;
          }
          v47 = v234;
          *(_BYTE *)(v234 + 20) = 1;
          *(_QWORD *)(v47 + 24) = *(_QWORD *)v237;
        }
        else
        {
          if ((_BYTE)v226)
          {
            v14 = 4294900722;
            if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
              goto LABEL_15;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1755;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v43;
            v23 = "%25s:%-5d Unknown block format optional variant (%d)";
LABEL_57:
            v24 = v56;
            v25 = 24;
            goto LABEL_14;
          }
          *(_QWORD *)v237 = 0;
          if ((_DWORD)v44)
          {
            v14 = v44;
            if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
              goto LABEL_15;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1738;
            v23 = "%25s:%-5d ...at block format RTime";
            goto LABEL_13;
          }
          v45 = v234;
          *(_BYTE *)(v234 + 8) = 1;
          *(_QWORD *)(v45 + 12) = *(_QWORD *)v237;
        }
      }
      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v49, &v234);
      v14 = 0;
LABEL_15:
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
      if (*((_QWORD *)&v234 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      return v14;
    case 3:
      LOWORD(v228) = 0;
      if ((_DWORD)v57)
      {
        v14 = v57;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1524;
        v23 = "%25s:%-5d ...at block format Objects flags";
        goto LABEL_13;
      }
      v67 = (unsigned __int16)v228;
      v68 = (_BYTE *)v234;
      v69 = v234 + 44;
      v70 = ((unsigned __int16)v228 >> 11) & 1;
      *(_BYTE *)(v234 + 121) = (unsigned __int16)v228 >> 12;
      v68[120] = v70;
      v71 = (v67 >> 10) & 1;
      v68[72] = (v67 & 0x200) != 0;
      v68[84] = (v67 & 0x80) != 0;
      v68[96] = (v67 & 0x40) != 0;
      if ((_DWORD)v72)
      {
        v14 = v72;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1536;
        v23 = "%25s:%-5d ...at block format Objects position";
        goto LABEL_13;
      }
      v78 = v234;
      if (!*(_BYTE *)(v234 + 72))
        goto LABEL_215;
      *(_BYTE *)(v234 + 73) = v71;
      if ((_DWORD)v79)
      {
        v14 = v79;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1543;
        v23 = "%25s:%-5d ...at block format Objects width";
        goto LABEL_13;
      }
      if ((_DWORD)v132)
      {
        v14 = v132;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1548;
        v23 = "%25s:%-5d ...at block format Objects height";
        goto LABEL_13;
      }
      if ((_DWORD)v146)
      {
        v14 = v146;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1553;
        v23 = "%25s:%-5d ...at block format Objects depth";
        goto LABEL_13;
      }
      v78 = v234;
LABEL_215:
      if ((v67 & 0x100) == 0)
        goto LABEL_220;
      if ((_DWORD)v150)
      {
        v14 = v150;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1560;
        v23 = "%25s:%-5d ...at block format Objects diffuse";
        goto LABEL_13;
      }
      v78 = v234;
LABEL_220:
      if (!*(_BYTE *)(v78 + 84))
        goto LABEL_225;
      if ((_DWORD)v151)
      {
        v14 = v151;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1567;
        v23 = "%25s:%-5d ...at block format Objects channel lock max distance";
        goto LABEL_13;
      }
      v78 = v234;
LABEL_225:
      v152 = v67 & 0x400;
      if (!*(_BYTE *)(v78 + 96))
        goto LABEL_244;
      *(_BYTE *)(v78 + 97) = v71;
      if ((_DWORD)v153)
      {
        v14 = v153;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1575;
        v23 = "%25s:%-5d ...at block format Objects divergence";
        goto LABEL_13;
      }
      v14 = v155;
      if (v152)
      {
        if ((_DWORD)v155)
        {
          if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            goto LABEL_15;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1581;
          v23 = "%25s:%-5d ...at block format Objects divergence position range";
          goto LABEL_13;
        }
      }
      else if ((_DWORD)v155)
      {
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1587;
        v23 = "%25s:%-5d ...at block format Objects divergence azimuth range";
        goto LABEL_13;
      }
LABEL_244:
      if ((_DWORD)v159)
      {
        v14 = v159;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1594;
        v23 = "%25s:%-5d ...at block format Objects jump position";
        goto LABEL_13;
      }
      v214 = v152;
      v225[0] = 0;
      if ((_DWORD)v161)
      {
        v14 = v161;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1600;
        v23 = "%25s:%-5d ...at block format Objects # zone exclusions";
        goto LABEL_13;
      }
      memset(v237, 0, 24);
      v162 = (int)v225[0];
      if (!v225[0])
        goto LABEL_320;
      v215 = 0;
      break;
    case 4:
      LOBYTE(__p) = 0;
      if ((_DWORD)v54)
      {
        v14 = v54;
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1675;
        v23 = "%25s:%-5d ...at block format Matrix flags";
      }
      else
      {
        v63 = __p;
        v64 = (_BYTE *)v234;
        *(_BYTE *)(v234 + 96) = __p >> 7;
        v64[98] = (v63 >> 5) & 3;
        v64[52] = (v63 & 0x10) != 0;
        v64[53] = (v63 & 8) != 0;
        v64[54] = (v63 & 4) != 0;
        *(_QWORD *)v237 = 0;
        if ((_DWORD)v65)
        {
          v14 = v65;
          if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            goto LABEL_15;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1687;
          v23 = "%25s:%-5d ...at block format HOA order horizontal";
        }
        else
        {
          *(_DWORD *)(v234 + 44) = *(_DWORD *)v237;
          *(_QWORD *)&v226 = 0;
          if ((_DWORD)v76)
          {
            v14 = v76;
            if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
              goto LABEL_15;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1694;
            v23 = "%25s:%-5d ...at block format HOA order vertical";
          }
          else
          {
            v91 = v234;
            *(_DWORD *)(v234 + 48) = v226;
            if ((_DWORD)v92)
            {
              v14 = v92;
              if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                goto LABEL_15;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1700;
              v23 = "%25s:%-5d ...at block format HOA degree";
            }
            else if ((v63 & 2) != 0
            {
              v14 = v136;
              if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                goto LABEL_15;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1706;
              v23 = "%25s:%-5d ...at block format HOA near field compensation reference distance";
            }
            else
            {
              LOBYTE(v225[0]) = 0;
              if (!(_DWORD)v138)
              {
                *(_BYTE *)(v234 + 97) = v225[0];
                goto LABEL_36;
              }
              v14 = v138;
              if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                goto LABEL_15;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1713;
              v23 = "%25s:%-5d ...at block format HOA order";
            }
          }
        }
      }
      goto LABEL_13;
    default:
      v14 = 4294900722;
      if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        goto LABEL_15;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1722;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a6;
      v23 = "%25s:%-5d Unknown type definition (%d)";
      goto LABEL_57;
  }
  while (1)
  {
    AudioMetadataMemoryPool::create<AudioMetadataZone>(&__p, *(_QWORD *)a1);
    v226 = 0uLL;
    v227 = 0;
    if ((_DWORD)v164)
    {
      if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1609;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = (_DWORD)v215 + 1;
        v240 = 1024;
        v241 = v162;
        v166 = v165;
        v167 = "%25s:%-5d ...at block format Objects zone exclusion #%d of %d name";
        goto LABEL_255;
      }
      goto LABEL_256;
    }
    v169 = *(uint64_t ***)a1;
    v217 = v234;
    if (*((_QWORD *)&v234 + 1))
    {
      v170 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
    }
    if (v227 >= 0)
      v172 = (char *)&v226;
    else
      v172 = (char *)v226;
    AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(v169, (uint64_t **)&v217, __p, v172);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v217);
    v173 = (char *)__p;
    *((_BYTE *)__p + 32) = v71;
    v164 = v175;
    if (v214)
    {
      if ((_DWORD)v175)
      {
        if (os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1617;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = (_DWORD)v215 + 1;
          v240 = 1024;
          v241 = v162;
          v166 = v177;
          v167 = "%25s:%-5d ...at block format Objects zone exclusion #%d of %d max X";
          goto LABEL_255;
        }
        goto LABEL_256;
      }
      if ((_DWORD)v179)
      {
        v164 = v179;
        if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1622;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = (_DWORD)v215 + 1;
          v240 = 1024;
          v241 = v162;
          v166 = v181;
          v167 = "%25s:%-5d ...at block format Objects zone exclusion #%d of %d min X";
          goto LABEL_255;
        }
        goto LABEL_256;
      }
      if ((_DWORD)v185)
      {
        v164 = v185;
        if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1627;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = (_DWORD)v215 + 1;
          v240 = 1024;
          v241 = v162;
          v166 = v187;
          v167 = "%25s:%-5d ...at block format Objects zone exclusion #%d of %d max Y";
          goto LABEL_255;
        }
        goto LABEL_256;
      }
      if ((_DWORD)v191)
      {
        v164 = v191;
        if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1632;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = (_DWORD)v215 + 1;
          v240 = 1024;
          v241 = v162;
          v166 = v193;
          v167 = "%25s:%-5d ...at block format Objects zone exclusion #%d of %d min Y";
          goto LABEL_255;
        }
        goto LABEL_256;
      }
      if ((_DWORD)v196)
      {
        v164 = v196;
        if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1637;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = (_DWORD)v215 + 1;
          v240 = 1024;
          v241 = v162;
          v166 = v198;
          v167 = "%25s:%-5d ...at block format Objects zone exclusion #%d of %d max Z";
          goto LABEL_255;
        }
        goto LABEL_256;
      }
      if ((_DWORD)v199)
      {
        v164 = v199;
        if (os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1642;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = (_DWORD)v215 + 1;
          v240 = 1024;
          v241 = v162;
          v166 = v200;
          v167 = "%25s:%-5d ...at block format Objects zone exclusion #%d of %d min Z";
LABEL_255:
          _os_log_impl(&dword_18EE07000, v166, OS_LOG_TYPE_ERROR, v167, buf, 0x1Eu);
        }
LABEL_256:
        v168 = 0;
        v14 = v164;
        goto LABEL_257;
      }
    }
    else
    {
      if ((_DWORD)v175)
      {
        if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1648;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = (_DWORD)v215 + 1;
          v240 = 1024;
          v241 = v162;
          v166 = v178;
          v167 = "%25s:%-5d ...at block format Objects zone exclusion #%d of %d max azimuth";
          goto LABEL_255;
        }
        goto LABEL_256;
      }
      if ((_DWORD)v182)
      {
        v164 = v182;
        if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1653;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = (_DWORD)v215 + 1;
          v240 = 1024;
          v241 = v162;
          v166 = v184;
          v167 = "%25s:%-5d ...at block format Objects zone exclusion #%d of %d min azimuth";
          goto LABEL_255;
        }
        goto LABEL_256;
      }
      if ((_DWORD)v188)
      {
        v164 = v188;
        if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1658;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = (_DWORD)v215 + 1;
          v240 = 1024;
          v241 = v162;
          v166 = v190;
          v167 = "%25s:%-5d ...at block format Objects zone exclusion #%d of %d max elevation";
          goto LABEL_255;
        }
        goto LABEL_256;
      }
      if ((_DWORD)v194)
      {
        v164 = v194;
        if (os_log_type_enabled(v195, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1663;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = (_DWORD)v215 + 1;
          v240 = 1024;
          v241 = v162;
          v166 = v195;
          v167 = "%25s:%-5d ...at block format Objects zone exclusion #%d of %d min elevation";
          goto LABEL_255;
        }
        goto LABEL_256;
      }
    }
    *(_QWORD *)buf = __p;
    std::vector<AudioMetadataObject *>::push_back[abi:ne180100]((void **)v237, buf);
    v168 = 1;
LABEL_257:
    if (SHIBYTE(v227) < 0)
      operator delete((void *)v226);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if ((v168 & 1) == 0)
    {
      v212 = 1;
      goto LABEL_325;
    }
    v162 = (int)v225[0];
    v215 = (unint64_t *)((char *)v215 + 1);
    if (v215 >= v225[0])
    {
LABEL_320:
      v208 = *(_QWORD *)a1;
      v209 = v234;
      v216 = v234;
      if (*((_QWORD *)&v234 + 1))
      {
        v210 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
        do
          v211 = __ldxr(v210);
        while (__stxr(v211 + 1, v210));
      }
      AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataZone,AudioMetadataZoneExclusions,AudioMetadataBlockFormat>(v208, (uint64_t **)&v216, v209 + 108, v237);
      std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v216);
      v212 = 0;
LABEL_325:
      if (*(_QWORD *)v237)
        operator delete(*(void **)v237);
      if ((v212 & 1) != 0)
        goto LABEL_15;
      goto LABEL_36;
    }
  }
}

void sub_18EE76868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;
  void *v50;

  if (a13 < 0)
    operator delete(__p);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  v50 = *(void **)(v48 - 208);
  if (v50)
    operator delete(v50);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v48 - 232);
  _Unwind_Resume(a1);
}

uint64_t CA::AudioMetadataDeserializer::Impl::decode_track_uid(uint64_t a1, _anonymous_namespace_ *a2, const unsigned __int8 *a3, unint64_t *a4, unsigned __int16 *a5)
{
  uint64_t **v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned __int16 *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t *v62[2];
  uint64_t v63;
  uint64_t *v64;
  uint8_t buf[4];
  const char *v66;
  __int16 v67;
  int v68;
  char __str[13];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  AudioMetadataMemoryPool::create<AudioMetadataTrackUID>(&v63, *(_QWORD *)a1);
  snprintf(__str, 0xDuLL, "ATU_%04hx%04hx", *a5, a5[1]);
  v10 = *(uint64_t ***)a1;
  v11 = (_QWORD *)v63;
  v12 = (std::__shared_weak_count *)v64;
  v62[0] = (uint64_t *)v63;
  v62[1] = v64;
  if (v64)
  {
    v13 = (unint64_t *)(v64 + 1);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataTrackUID>(v10, v62, v11, __str);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  HIBYTE(v61) = 0;
  if (!(_DWORD)v18)
  {
    v27 = HIBYTE(v61);
    if (SHIBYTE(v61) < 0)
    {
      LODWORD(v61) = 0;
      if ((_DWORD)v36)
      {
        v20 = v36;
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          goto LABEL_13;
        *(_DWORD *)buf = 136315394;
        v66 = "AudioMetadataDeserializer.cpp";
        v67 = 1024;
        v68 = 2519;
        v22 = "%25s:%-5d ...at track UID sample rate";
        goto LABEL_12;
      }
      *(float *)(v63 + 8) = (float)v61;
    }
    if ((v27 & 0x40) != 0)
    {
      if ((_DWORD)v28)
      {
        v20 = v28;
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          goto LABEL_13;
        *(_DWORD *)buf = 136315394;
        v66 = "AudioMetadataDeserializer.cpp";
        v67 = 1024;
        v68 = 2527;
        v22 = "%25s:%-5d ...at track UID bit depth";
        goto LABEL_12;
      }
    }
    if ((v27 & 0x20) != 0)
    {
      if ((_DWORD)v37)
      {
        v20 = v37;
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          goto LABEL_13;
        *(_DWORD *)buf = 136315394;
        v66 = "AudioMetadataDeserializer.cpp";
        v67 = 1024;
        v68 = 2535;
        v22 = "%25s:%-5d ...at track UID track format reference, major";
        goto LABEL_12;
      }
      if ((_DWORD)v39)
      {
        v20 = v39;
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          goto LABEL_13;
        *(_DWORD *)buf = 136315394;
        v66 = "AudioMetadataDeserializer.cpp";
        v67 = 1024;
        v68 = 2540;
        v22 = "%25s:%-5d ...at track UID track format reference, minor";
        goto LABEL_12;
      }
      if ((_DWORD)v41)
      {
        v20 = v41;
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          goto LABEL_13;
        *(_DWORD *)buf = 136315394;
        v66 = "AudioMetadataDeserializer.cpp";
        v67 = 1024;
        v68 = 2545;
        v22 = "%25s:%-5d ...at track UID track format reference, sub";
        goto LABEL_12;
      }
      *(_DWORD *)v52 = v61;
      *((_WORD *)v52 + 2) = WORD2(v61);
      if ((v27 & 0x10) == 0)
      {
LABEL_26:
        if ((v27 & 8) == 0)
        {
LABEL_27:
          v30 = (uint64_t **)(a1 + 136);
          v29 = *(uint64_t **)(a1 + 136);
          if (!v29)
          {
            v33 = (uint64_t *)(a1 + 136);
LABEL_51:
            v42 = operator new(0x38uLL);
            *((_DWORD *)v42 + 8) = *(_DWORD *)a5;
            *((_QWORD *)v42 + 5) = 0;
            *((_QWORD *)v42 + 6) = 0;
            *(_QWORD *)v42 = 0;
            *((_QWORD *)v42 + 1) = 0;
            *((_QWORD *)v42 + 2) = v33;
            *v30 = (uint64_t *)v42;
            v43 = **(_QWORD **)(a1 + 128);
            v44 = (uint64_t *)v42;
            if (v43)
            {
              *(_QWORD *)(a1 + 128) = v43;
              v44 = *v30;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 136), v44);
            ++*(_QWORD *)(a1 + 144);
LABEL_54:
            v46 = v63;
            v45 = v64;
            if (v64)
            {
              v47 = (unint64_t *)(v64 + 1);
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
            v49 = (std::__shared_weak_count *)*((_QWORD *)v42 + 6);
            *((_QWORD *)v42 + 5) = v46;
            *((_QWORD *)v42 + 6) = v45;
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v20 = 0;
            goto LABEL_13;
          }
          v31 = *a5;
          v32 = a5[1];
          while (1)
          {
            while (1)
            {
              v33 = v29;
              v34 = *((unsigned __int16 *)v29 + 16);
              if (v31 >= v34)
                break;
LABEL_30:
              v29 = (uint64_t *)*v33;
              v30 = (uint64_t **)v33;
              if (!*v33)
                goto LABEL_51;
            }
            if (v31 <= v34)
            {
              v35 = *((unsigned __int16 *)v33 + 17);
              if (v32 < v35)
                goto LABEL_30;
              if (v35 >= v32)
              {
                v42 = v33;
                goto LABEL_54;
              }
            }
            v29 = (uint64_t *)v33[1];
            if (!v29)
            {
              v30 = (uint64_t **)(v33 + 1);
              goto LABEL_51;
            }
          }
        }
LABEL_71:
        if ((_DWORD)v57)
        {
          v20 = v57;
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            goto LABEL_13;
          *(_DWORD *)buf = 136315394;
          v66 = "AudioMetadataDeserializer.cpp";
          v67 = 1024;
          v68 = 2568;
          v22 = "%25s:%-5d ...at track UID pack format reference, major";
          goto LABEL_12;
        }
        if ((_DWORD)v59)
        {
          v20 = v59;
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            goto LABEL_13;
          *(_DWORD *)buf = 136315394;
          v66 = "AudioMetadataDeserializer.cpp";
          v67 = 1024;
          v68 = 2573;
          v22 = "%25s:%-5d ...at track UID pack format reference, minor";
          goto LABEL_12;
        }
        *(_DWORD *)v60 = v61;
        goto LABEL_27;
      }
    }
    else if ((v27 & 0x10) == 0)
    {
      goto LABEL_26;
    }
    if ((_DWORD)v53)
    {
      v20 = v53;
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        goto LABEL_13;
      *(_DWORD *)buf = 136315394;
      v66 = "AudioMetadataDeserializer.cpp";
      v67 = 1024;
      v68 = 2554;
      v22 = "%25s:%-5d ...at track UID channel format reference, major";
      goto LABEL_12;
    }
    if ((_DWORD)v55)
    {
      v20 = v55;
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        goto LABEL_13;
      *(_DWORD *)buf = 136315394;
      v66 = "AudioMetadataDeserializer.cpp";
      v67 = 1024;
      v68 = 2559;
      v22 = "%25s:%-5d ...at track UID channel format reference, minor";
      goto LABEL_12;
    }
    *(_DWORD *)v56 = v61;
    if ((v27 & 8) == 0)
      goto LABEL_27;
    goto LABEL_71;
  }
  v20 = v18;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v66 = "AudioMetadataDeserializer.cpp";
    v67 = 1024;
    v68 = 2507;
    v22 = "%25s:%-5d ...at track UID flags";
LABEL_12:
    _os_log_impl(&dword_18EE07000, v21, OS_LOG_TYPE_ERROR, v22, buf, 0x12u);
  }
LABEL_13:
  v23 = (std::__shared_weak_count *)v64;
  if (v64)
  {
    v24 = (unint64_t *)(v64 + 1);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v20;
}

void sub_18EE770E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void CA::ADMBuilder::Impl::xml_start_element_stub(CA::ADMBuilder::Impl *this, char *__s1, const unsigned __int8 **a3, const unsigned __int8 **a4)
{
  uint64_t v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const unsigned __int8 *v13;
  unsigned __int8 **v14;
  char *v15;
  int v16;
  std::string *v17;
  int v18;
  int v19;
  unsigned __int16 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  __n128 *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  char *v37;
  const unsigned __int8 *v38;
  unsigned __int8 **v39;
  unsigned __int8 *v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int16 v49;
  std::string *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  CA::ADMBuilder::Impl *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  CA::ADMBuilder::Impl *v78;
  CA::ADMBuilder::Impl *v79;
  CA::ADMBuilder::Impl *v80;
  CA::ADMBuilder::Impl *v81;
  CA::ADMBuilder::Impl *v82;
  std::string *v83;
  CA::ADMBuilder::Impl *v84;
  CA::ADMBuilder::Impl *v85;
  CA::ADMBuilder::Impl *v86;
  CA::ADMBuilder::Impl *v87;
  CA::ADMBuilder::Impl *v88;
  CA::ADMBuilder::Impl *v89;
  CA::ADMBuilder::Impl *v90;
  CA::ADMBuilder::Impl *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  CA::ADMBuilder::Impl *v96;
  unsigned __int8 **v97;
  const char *v98;
  unsigned __int8 *v99;
  CA::ADMBuilder::Impl *v100;
  CA::ADMBuilder::Impl *v101;
  NSObject *v102;
  _BYTE *v103;
  NSObject *v104;
  _BYTE *v105;
  NSObject *v106;
  NSObject *v107;
  _BYTE *v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  int v113;
  const unsigned __int8 *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  int v119;
  unsigned __int8 **v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unsigned __int8 *v126;
  unint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  unint64_t v134;
  __int128 v135;
  __int128 v136;
  const unsigned __int8 *v137;
  char v138;
  unsigned __int8 **v139;
  char *v140;
  CA::ADMBuilder::Impl *v141;
  BOOL v142;
  unsigned __int8 *v143;
  unint64_t v144;
  __int128 v145;
  __int128 v146;
  NSObject *v147;
  _BYTE *v148;
  const char *v149;
  const unsigned __int8 *v150;
  unsigned __int8 **v151;
  std::string::value_type *v152;
  unsigned __int8 *v153;
  uint64_t v154;
  void ***v155;
  uint64_t v156;
  _BYTE *v157;
  _QWORD *v158;
  uint64_t v159;
  _OWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  const unsigned __int8 *v163;
  unsigned __int8 **v164;
  char *v165;
  BOOL v166;
  unsigned __int8 *v167;
  NSObject *v168;
  _BYTE *v169;
  const char *v170;
  _QWORD *v171;
  uint64_t v172;
  _BYTE *v173;
  char v174;
  char v175;
  unsigned __int8 v176;
  char v177;
  unsigned __int8 v178;
  char v179;
  unsigned __int8 v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  char *v189;
  int v190;
  _QWORD *v191;
  uint64_t v192;
  char *v193;
  int v194;
  _QWORD *v195;
  uint64_t v196;
  char *v197;
  int v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  __n128 *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unsigned __int8 v211;
  char v212;
  unint64_t v213;
  unint64_t v214;
  unsigned __int8 v215;
  char v216;
  unsigned __int8 v217;
  uint64_t v218;
  uint64_t v219;
  const unsigned __int8 *v220;
  unsigned __int8 **v221;
  unsigned __int16 v222;
  unsigned __int8 *v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  _BYTE *v227;
  const unsigned __int8 *v228;
  unsigned __int8 **v229;
  unsigned __int16 v230;
  unsigned __int8 *v231;
  _QWORD *v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  unint64_t v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  char *v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  NSObject *v248;
  _BYTE *v249;
  int v250;
  uint64_t v251;
  int v252;
  const unsigned __int8 *v253;
  unsigned __int8 **v254;
  uint64_t v255;
  unsigned __int8 *v256;
  _BYTE *v257;
  NSObject *v258;
  _BYTE *v259;
  _QWORD *v260;
  uint64_t v261;
  unint64_t v262;
  __int128 v263;
  __int128 v264;
  int v265;
  __n128 *v266;
  uint64_t v267;
  char *v268;
  char *v269;
  char *v270;
  _QWORD *v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  char *v276;
  int v277;
  _QWORD *v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  char *v282;
  char *v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  char *v287;
  _QWORD *v288;
  uint64_t v289;
  int v290;
  unsigned __int8 **v291;
  char *v292;
  CA::ADMBuilder::Impl *v293;
  char v294;
  NSObject *v295;
  _BYTE *v296;
  CA::ADMBuilder::Impl *v297;
  NSObject *v298;
  _BYTE *v299;
  uint64_t v300;
  unsigned __int8 *v301;
  uint64_t v302;
  void **v303;
  __int128 v304;
  void **v305;
  void *v306;
  uint64_t v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  _BYTE *v312;
  _QWORD *v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  _BYTE *v317;
  NSObject *v318;
  char *v319;
  uint64_t v320;
  __int128 *v321;
  __int128 *v322;
  __int128 *v323;
  uint64_t v324;
  void ***v325;
  const unsigned __int8 *v326;
  unsigned __int8 **v327;
  std::string::value_type *v328;
  int v329;
  std::string *v330;
  int v331;
  int v332;
  unsigned __int8 *v333;
  char *v334;
  int v335;
  _QWORD *v336;
  uint64_t v337;
  _BYTE *v338;
  const unsigned __int8 *v339;
  CA::ADMBuilder::Impl *v340;
  CA::ADMBuilder::Impl *v341;
  unsigned __int8 **v342;
  char *v343;
  CA::ADMBuilder::Impl *v344;
  CA::ADMBuilder::Impl *v345;
  unsigned __int8 *v346;
  const unsigned __int8 *v347;
  unsigned __int8 **v348;
  char *v349;
  CA::ADMBuilder::Impl *v350;
  CA::ADMBuilder::Impl *v351;
  CA::ADMBuilder::Impl *v352;
  uint64_t v353;
  CA::ADMBuilder::Impl *v354;
  CA::ADMBuilder::Impl *v355;
  uint64_t v356;
  NSObject *v357;
  _BYTE *v358;
  NSObject *v359;
  uint64_t v360;
  CA::ADMBuilder::Impl *v361;
  CA::ADMBuilder::Impl *v362;
  uint64_t v363;
  char v364;
  CA::ADMBuilder::Impl *v365;
  CA::ADMBuilder::Impl *v366;
  NSObject *v367;
  _BYTE *v368;
  NSObject *v369;
  _BYTE *v370;
  NSObject *v371;
  _BYTE *v372;
  int v373;
  NSObject *v374;
  _BYTE *v375;
  NSObject *v376;
  _BYTE *v377;
  unsigned __int8 *v378;
  _QWORD *v379;
  uint64_t v380;
  uint64_t v381;
  const unsigned __int8 *v382;
  unsigned __int8 **v383;
  char *v384;
  uint64_t v385;
  unsigned __int8 *v386;
  _QWORD *v387;
  uint64_t v388;
  uint64_t v389;
  NSObject *v390;
  _BYTE *v391;
  NSObject *v392;
  _BYTE *v393;
  _QWORD *v394;
  uint64_t v395;
  uint64_t v396;
  _OWORD *v397;
  __int128 v398;
  __int128 v399;
  _QWORD *v400;
  uint64_t v401;
  const unsigned __int8 *v402;
  unsigned __int8 **v403;
  unsigned __int16 v404;
  unsigned __int8 *v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  char *v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  char *v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  BOOL v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  int64_t v428;
  char *v429;
  uint64_t v430;
  char *v431;
  char *v432;
  uint64_t v433;
  BOOL v434;
  void *v435;
  void *v436;
  unint64_t v437;
  char *v438;
  uint64_t v439;
  uint64_t v440;
  char *v441;
  __int128 v442;
  void *v443;
  __int128 v444;
  uint64_t v445;
  __int128 v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  char *v452;
  uint64_t v453;
  char *v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  char *v458;
  uint64_t v459;
  void *v460;
  unint64_t v461;
  char *v462;
  uint64_t v463;
  uint64_t *v464;
  char *v465;
  uint64_t v466;
  uint64_t v467;
  char *v468;
  uint64_t v469;
  void *v470;
  char *v471;
  char *v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  char *v481;
  int64_t v482;
  uint64_t v483;
  unint64_t v484;
  char *v485;
  uint64_t v486;
  uint64_t i;
  _QWORD *v488;
  char *v489;
  _BYTE *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  unint64_t v495;
  char *v496;
  uint64_t v497;
  char *v498;
  uint64_t v499;
  uint64_t v500;
  char *v501;
  uint64_t *v502;
  uint64_t v503;
  uint64_t v504;
  void *v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  char *v509;
  uint64_t v510;
  char *v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  char *v515;
  uint64_t v516;
  void *v517;
  _BYTE *v518;
  _QWORD *v519;
  uint64_t v520;
  __int128 v521;
  int v522;
  unsigned __int8 v523;
  unsigned __int8 **v524;
  char *v525;
  CA::ADMBuilder::Impl *v526;
  char v527;
  NSObject *v528;
  _BYTE *v529;
  int v530;
  CA::ADMBuilder::Impl *v531;
  NSObject *v532;
  _BYTE *v533;
  uint64_t v534;
  unsigned __int8 *v535;
  uint64_t v536;
  _BYTE *v537;
  NSObject *v538;
  std::string *v539;
  CA::ADMBuilder::Impl *v540;
  char v541;
  NSObject *v542;
  std::string *v543;
  int v544;
  unsigned int v545;
  NSObject *v546;
  std::string *v547;
  const unsigned __int8 *v548;
  unsigned __int8 **v549;
  uint64_t v550;
  unsigned __int8 *v551;
  _QWORD *v552;
  uint64_t v553;
  _QWORD *v554;
  uint64_t v555;
  NSObject *v556;
  _BYTE *v557;
  int v558;
  _BYTE *v559;
  NSObject *v560;
  std::string *v561;
  NSObject *v562;
  std::string *v563;
  NSObject *v564;
  _BYTE *v565;
  uint64_t v566;
  std::string::size_type size;
  std::string *v568;
  int data_low;
  int v570;
  std::string::size_type v572;
  std::string *v573;
  int data;
  int v575;
  __int16 *v577;
  __int16 v578;
  _BYTE *v579;
  _QWORD *v580;
  uint64_t v581;
  _QWORD *v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  unint64_t v586;
  unint64_t v587;
  unint64_t v588;
  char *v589;
  _QWORD *v590;
  uint64_t v591;
  _QWORD *v592;
  uint64_t v593;
  NSObject *v594;
  _BYTE *v595;
  _BYTE *v596;
  _QWORD *v597;
  uint64_t v598;
  NSObject *v599;
  _BYTE *v600;
  unint64_t *v601;
  unint64_t v602;
  std::string::size_type v603;
  std::string *v604;
  std::string::size_type v605;
  std::string *v606;
  int v607;
  int v608;
  int v610;
  __int16 *v611;
  __int16 v612;
  uint64_t v613;
  _BYTE *v614;
  std::string *v615;
  char *v616;
  char *v617;
  char *v618;
  char *v619;
  uint64_t v620;
  std::string *v621;
  char *v622;
  char *v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int16 v630;
  char *v631;
  _BYTE *v632;
  _QWORD *v633;
  uint64_t v634;
  _BYTE *v635;
  _QWORD *v636;
  uint64_t v637;
  const unsigned __int8 *v638;
  unsigned __int8 **v639;
  uint64_t v640;
  unsigned __int8 *v641;
  _QWORD *v642;
  uint64_t v643;
  _QWORD *v644;
  uint64_t v645;
  const unsigned __int8 *v646;
  int v647;
  int v648;
  unsigned __int8 **v649;
  char *v650;
  unint64_t v651;
  float v652;
  float v653;
  unsigned __int8 *v654;
  int v655;
  _QWORD *v656;
  uint64_t v657;
  int v658;
  _QWORD *v659;
  uint64_t v660;
  _QWORD *v661;
  uint64_t v662;
  _QWORD *v663;
  uint64_t v664;
  _QWORD *v665;
  uint64_t v666;
  NSObject *v667;
  _BYTE *v668;
  _QWORD *v669;
  uint64_t v670;
  uint64_t v671;
  unint64_t v672;
  unsigned __int8 v673;
  unsigned __int8 v674;
  unint64_t v675;
  unint64_t v676;
  char v677;
  CA::ADMBuilder::Impl *v678;
  unint64_t v679;
  unint64_t v680;
  char v681;
  unsigned __int8 v682;
  unsigned __int8 v683;
  unint64_t v684;
  unint64_t v685;
  unint64_t v686;
  int v687;
  __int128 v688;
  __int128 v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  unsigned __int8 v693;
  int v694;
  __int128 v695;
  uint64_t v696;
  __int128 v697;
  std::string v698;
  std::string v699;
  std::string v700;
  _BYTE __p[28];
  std::string buf[5];
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  void *v707;
  char v708;
  char v709;
  char v710;
  char v711;
  char v712;
  char v713;
  char v714;
  char v715;
  char v716;
  char v717;
  char v718;
  char v719;
  char v720;
  char v721;
  __int128 v722;
  _BYTE v723[48];
  __int16 v724;
  char v725;
  char v726;
  char v727;
  char v728;
  char v729;
  char v730;
  void *v731[3];
  void *v732;
  char v733;
  char v734;
  char v735;
  char v736;
  char v737;
  char v738;
  void *v739;
  char v740;
  char v741;
  char v742;
  char v743;
  uint64_t v744;

  v744 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 158))
  {
    v6 = *((_QWORD *)this + 6);
    if (!v6)
    {
LABEL_9:
      if (strcmp(__s1, "audioFormatExtended"))
      {
        v9 = 0;
        goto LABEL_926;
      }
      if (!*(_QWORD *)this)
      {
        v29 = operator new();
        *(_OWORD *)v29 = 0u;
        *(_OWORD *)(v29 + 16) = 0u;
        *(_OWORD *)(v29 + 32) = 0u;
        *(_OWORD *)(v29 + 48) = 0u;
        *(_OWORD *)(v29 + 64) = 0u;
        *(_OWORD *)(v29 + 80) = 0u;
        *(_OWORD *)(v29 + 96) = 0u;
        *(_OWORD *)(v29 + 112) = 0u;
        *(_OWORD *)(v29 + 128) = 0u;
        *(_OWORD *)(v29 + 144) = 0u;
        *(_OWORD *)(v29 + 160) = 0u;
        *(_OWORD *)(v29 + 176) = 0u;
        *(_OWORD *)(v29 + 192) = 0u;
        *(_OWORD *)(v29 + 208) = 0u;
        *(_OWORD *)(v29 + 224) = 0u;
        *(_OWORD *)(v29 + 240) = 0u;
        *(_OWORD *)(v29 + 256) = 0u;
        *(_OWORD *)(v29 + 272) = 0u;
        std::unique_ptr<CA::ADM>::reset[abi:ne180100]((char ***)this, (char **)v29);
        v9 = 2;
        goto LABEL_926;
      }
      goto LABEL_772;
    }
    v8 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2)
                               + (((unint64_t)(v6 + *((_QWORD *)this + 5) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v6 + *((_QWORD *)this + 5) - 1) & 0x3FF));
    v9 = 1;
    if (v8 > 32)
    {
      if (v8 <= 59)
      {
        switch(v8)
        {
          case '!':
            v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) - 16);
            if (!*(_BYTE *)(v10 + 372))
              goto LABEL_1419;
            v11 = v10 + 288;
            goto LABEL_109;
          case '"':
          case '#':
          case '%':
          case '\'':
          case '(':
            goto LABEL_926;
          case '$':
            v51 = *(_QWORD *)(*(_QWORD *)this + 56);
            v52 = *(_QWORD *)(*(_QWORD *)(v51 - 16) + 432);
            if (!strcmp(__s1, "audioObjectLabel"))
            {
              CA::ADMBuilder::Impl::label_from_attributes(buf, a3);
              v130 = *(_QWORD *)(v52 - 152);
              if (v130 >= *(_QWORD *)(v52 - 144))
              {
                v189 = std::vector<CA::ADMLabel>::__push_back_slow_path<CA::ADMLabel>((void **)(v52 - 160), (uint64_t)buf);
                v190 = buf[2].__r_.__value_.__s.__data_[7];
                *(_QWORD *)(v52 - 152) = v189;
                if (v190 < 0)
                  operator delete((void *)buf[1].__r_.__value_.__l.__size_);
              }
              else
              {
                *(_BYTE *)v130 = 0;
                *(_BYTE *)(v130 + 24) = 0;
                if (buf[1].__r_.__value_.__s.__data_[0])
                {
                  v131 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                  *(_QWORD *)(v130 + 16) = *((_QWORD *)&buf[0].__r_.__value_.__l + 2);
                  *(_OWORD *)v130 = v131;
                  memset(buf, 0, 24);
                  *(_BYTE *)(v130 + 24) = 1;
                }
                v132 = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
                *(_QWORD *)(v130 + 48) = buf[2].__r_.__value_.__l.__data_;
                *(_OWORD *)(v130 + 32) = v132;
                memset(&buf[1].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
                *(_QWORD *)(v52 - 152) = v130 + 56;
              }
              if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf[0].__r_.__value_.__l.__data_);
              v191 = (_QWORD *)operator new();
              *v191 = 0;
              v191[1] = 0;
              v191[2] = 0;
              v192 = *((_QWORD *)this + 78);
              *((_QWORD *)this + 78) = v191;
              if (v192)
                std::default_delete<std::string>::operator()[abi:ne180100](v192);
              v9 = 37;
              goto LABEL_926;
            }
            if (!strcmp(__s1, "audioObjectInteraction"))
            {
              CA::ADMBuilder::Impl::parse_interaction((CA::ADMBuilder::Impl *)buf, (const unsigned __int8 **)this, (const char **)a3);
              v160 = (_OWORD *)(v52 - 136);
              if (*(_BYTE *)(v52 - 52))
              {
                *(_OWORD *)(v52 - 104) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
                *(_OWORD *)(v52 - 88) = *(_OWORD *)&buf[2].__r_.__value_.__l.__data_;
                *(_OWORD *)(v52 - 72) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2];
                *(_WORD *)(v52 - 56) = buf[3].__r_.__value_.__r.__words[1];
                *v160 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                *(_OWORD *)(v52 - 120) = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
              }
              else
              {
                *(_OWORD *)(v52 - 104) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
                *(_OWORD *)(v52 - 88) = *(_OWORD *)&buf[2].__r_.__value_.__l.__data_;
                *(_OWORD *)(v52 - 72) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2];
                *(_DWORD *)(v52 - 56) = buf[3].__r_.__value_.__r.__words[1];
                *v160 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                *(_OWORD *)(v52 - 120) = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
                *(_BYTE *)(v52 - 52) = 1;
              }
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)this + 800);
              v9 = 38;
              goto LABEL_926;
            }
            if (!strcmp(__s1, "gain"))
            {
              if (!*(_BYTE *)(v52 - 40))
                *(_BYTE *)(v52 - 40) = 1;
              *(_QWORD *)(v52 - 48) = 0;
              if (a3)
              {
                v220 = *a3;
                if (*a3)
                {
                  v221 = (unsigned __int8 **)(a3 + 2);
                  do
                  {
                    if (!strcmp((const char *)v220, "gainUnit"))
                    {
                      std::string::basic_string[abi:ne180100]<0>(buf, (char *)*(v221 - 1));
                      v222 = CA::ADMBuilder::Impl::parse_gain_unit((uint64_t)this, (uint64_t *)buf);
                      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                        operator delete(buf[0].__r_.__value_.__l.__data_);
                      if (v222 >= 0x100u)
                        *(_BYTE *)(v52 - 44) = v222;
                    }
                    v223 = *v221;
                    v221 += 2;
                    v220 = v223;
                  }
                  while (v223);
                }
              }
              v224 = (_QWORD *)operator new();
              *v224 = 0;
              v224[1] = 0;
              v224[2] = 0;
              v225 = *((_QWORD *)this + 78);
              *((_QWORD *)this + 78) = v224;
              if (v225)
                std::default_delete<std::string>::operator()[abi:ne180100](v225);
              *((_QWORD *)this + 76) = v52 - 48;
              goto LABEL_523;
            }
            if (!strcmp(__s1, "headLocked"))
            {
              v245 = (_QWORD *)operator new();
              v245[1] = 0;
              v245[2] = 0;
              *v245 = 0;
              v246 = *((_QWORD *)this + 78);
              *((_QWORD *)this + 78) = v245;
              if (v246)
                std::default_delete<std::string>::operator()[abi:ne180100](v246);
              v9 = 39;
              goto LABEL_926;
            }
            v53 = (char *)strcmp(__s1, "positionOffset");
            if ((_DWORD)v53)
            {
              if (!strcmp(__s1, "mute"))
              {
                v54 = (_QWORD *)operator new();
                v54[1] = 0;
                v54[2] = 0;
                *v54 = 0;
                v55 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v54;
                if (v55)
                  std::default_delete<std::string>::operator()[abi:ne180100](v55);
                v9 = 40;
              }
              goto LABEL_926;
            }
            *((_QWORD *)this + 76) = 0;
            if (!a3)
              goto LABEL_889;
            v53 = (char *)*a3;
            if (!*a3)
              goto LABEL_889;
            v290 = 0;
            v693 = 0;
            v291 = (unsigned __int8 **)(a3 + 2);
            break;
          case '&':
            v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) - 16);
            v56 = *(_QWORD *)(v10 + 432);
            if (!*(_BYTE *)(v56 - 52))
LABEL_1419:
              std::__throw_bad_optional_access[abi:ne180100]();
            v11 = v56 - 136;
LABEL_109:
            v57 = CA::ADMBuilder::Impl::parse_interaction_subelement((uint64_t)this, v10, v11, __s1, (const char **)a3);
            goto LABEL_126;
          case ')':
            if (!strcmp(__s1, "audioChannelFormatIDRef"))
            {
              v30 = (_QWORD *)operator new();
              v30[1] = 0;
              v30[2] = 0;
              *v30 = 0;
              v31 = *((_QWORD *)this + 78);
              v9 = 42;
            }
            else if (!strcmp(__s1, "audioPackFormatIDRef"))
            {
              v30 = (_QWORD *)operator new();
              v30[1] = 0;
              v30[2] = 0;
              *v30 = 0;
              v31 = *((_QWORD *)this + 78);
              v9 = 43;
            }
            else if (!strcmp(__s1, "encodePackFormatIDRef"))
            {
              v30 = (_QWORD *)operator new();
              v30[1] = 0;
              v30[2] = 0;
              *v30 = 0;
              v31 = *((_QWORD *)this + 78);
              v9 = 44;
            }
            else if (!strcmp(__s1, "decodePackFormatIDRef"))
            {
              v30 = (_QWORD *)operator new();
              v30[1] = 0;
              v30[2] = 0;
              *v30 = 0;
              v31 = *((_QWORD *)this + 78);
              v9 = 45;
            }
            else if (!strcmp(__s1, "inputPackFormatIDRef"))
            {
              v30 = (_QWORD *)operator new();
              v30[1] = 0;
              v30[2] = 0;
              *v30 = 0;
              v31 = *((_QWORD *)this + 78);
              v9 = 46;
            }
            else if (!strcmp(__s1, "outputPackFormatIDRef"))
            {
              v30 = (_QWORD *)operator new();
              v30[1] = 0;
              v30[2] = 0;
              *v30 = 0;
              v31 = *((_QWORD *)this + 78);
              v9 = 47;
            }
            else if (!strcmp(__s1, "absoluteDistance"))
            {
              v30 = (_QWORD *)operator new();
              v30[1] = 0;
              v30[2] = 0;
              *v30 = 0;
              v31 = *((_QWORD *)this + 78);
              v9 = 48;
            }
            else if (!strcmp(__s1, "normalization"))
            {
              v30 = (_QWORD *)operator new();
              v30[1] = 0;
              v30[2] = 0;
              *v30 = 0;
              v31 = *((_QWORD *)this + 78);
              v9 = 49;
            }
            else if (!strcmp(__s1, "nfcRefDist"))
            {
              v30 = (_QWORD *)operator new();
              v30[1] = 0;
              v30[2] = 0;
              *v30 = 0;
              v31 = *((_QWORD *)this + 78);
              v9 = 50;
            }
            else
            {
              if (strcmp(__s1, "screenRef"))
                goto LABEL_926;
              v30 = (_QWORD *)operator new();
              v30[1] = 0;
              v30[2] = 0;
              *v30 = 0;
              v31 = *((_QWORD *)this + 78);
              v9 = 51;
            }
            goto LABEL_924;
          default:
            if (v8 == 52)
            {
              if (!strcmp(__s1, "audioMXFLookUp"))
              {
                v156 = *(_QWORD *)(*(_QWORD *)this + 272);
                memset(buf, 0, 96);
                v157 = *(_BYTE **)(v156 - 16);
                if (v157[144])
                {
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v157 + 48), (__n128 *)buf);
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v157 + 80), (__n128 *)&buf[1].__r_.__value_.__r.__words[1]);
                  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v157 + 112), (__n128 *)&buf[2].__r_.__value_.__r.__words[2]);
                  if (buf[3].__r_.__value_.__s.__data_[16] && buf[3].__r_.__value_.__s.__data_[15] < 0)
                    operator delete((void *)buf[2].__r_.__value_.__r.__words[2]);
                }
                else
                {
                  v157[48] = 0;
                  v157[72] = 0;
                  v157[80] = 0;
                  v157[104] = 0;
                  v157[112] = 0;
                  v157[136] = 0;
                  v157[144] = 1;
                }
                if (buf[2].__r_.__value_.__s.__data_[8] && buf[2].__r_.__value_.__s.__data_[7] < 0)
                  operator delete((void *)buf[1].__r_.__value_.__l.__size_);
                if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                v9 = 53;
              }
              else if (!strcmp(__s1, "audioTrackFormatIDRef"))
              {
                v185 = (_QWORD *)operator new();
                v185[1] = 0;
                v185[2] = 0;
                *v185 = 0;
                v186 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v185;
                if (v186)
                  std::default_delete<std::string>::operator()[abi:ne180100](v186);
                v9 = 57;
              }
              else if (!strcmp(__s1, "audioChannelFormatIDRef"))
              {
                v234 = (_QWORD *)operator new();
                v234[1] = 0;
                v234[2] = 0;
                *v234 = 0;
                v235 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v234;
                if (v235)
                  std::default_delete<std::string>::operator()[abi:ne180100](v235);
                v9 = 58;
              }
              else if (!strcmp(__s1, "audioPackFormatIDRef"))
              {
                v128 = (_QWORD *)operator new();
                v128[1] = 0;
                v128[2] = 0;
                *v128 = 0;
                v129 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v128;
                if (v129)
                  std::default_delete<std::string>::operator()[abi:ne180100](v129);
                v9 = 59;
              }
              goto LABEL_926;
            }
            if (v8 != 53)
              goto LABEL_926;
            if (!strcmp(__s1, "packageUIDRef"))
            {
              v30 = (_QWORD *)operator new();
              v30[1] = 0;
              v30[2] = 0;
              *v30 = 0;
              v31 = *((_QWORD *)this + 78);
              v9 = 54;
            }
            else if (!strcmp(__s1, "trackIDRef"))
            {
              v30 = (_QWORD *)operator new();
              v30[1] = 0;
              v30[2] = 0;
              *v30 = 0;
              v31 = *((_QWORD *)this + 78);
              v9 = 55;
            }
            else
            {
              if (strcmp(__s1, "channelIDRef"))
                goto LABEL_926;
              v30 = (_QWORD *)operator new();
              v30[1] = 0;
              v30[2] = 0;
              *v30 = 0;
              v31 = *((_QWORD *)this + 78);
              v9 = 56;
            }
            goto LABEL_924;
        }
        while (1)
        {
          v292 = (char *)*(v291 - 1);
          if (!strcmp(v53, "coordinate"))
          {
            std::string::basic_string[abi:ne180100]<0>(buf, v292);
            v293 = (CA::ADMBuilder::Impl *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)this + 840, (unsigned __int8 *)buf, (uint64_t)buf);
            v294 = (char)v293;
            if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf[0].__r_.__value_.__l.__data_);
            if ((v294 & 1) == 0)
            {
              v295 = CA::ADMBuilder::Impl::log(v293);
              if (os_log_type_enabled(v295, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v51 - 16), "");
                v296 = __p;
                if (__p[23] < 0)
                  v296 = *(_BYTE **)__p;
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 252;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v296;
                _os_log_impl(&dword_18EE07000, v295, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple coordinates for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
              }
              *((_DWORD *)this + 158) = -66589;
              goto LABEL_679;
            }
            if (!strcmp(v292, "azimuth"))
            {
              v693 = 0;
              *(_DWORD *)(v52 - 32) = 0;
              v290 = 1;
              *(_BYTE *)(v52 - 28) = 1;
              v300 = v52 - 32;
LABEL_678:
              *((_QWORD *)this + 76) = v300;
              goto LABEL_679;
            }
            if (!strcmp(v292, "elevation"))
            {
              v693 = 0;
              *(_DWORD *)(v52 - 24) = 0;
              v290 = 1;
              *(_BYTE *)(v52 - 20) = 1;
              v300 = v52 - 24;
              goto LABEL_678;
            }
            if (!strcmp(v292, "distance"))
            {
              v693 = 0;
              *(_DWORD *)(v52 - 16) = 0;
              v290 = 1;
              *(_BYTE *)(v52 - 12) = 1;
              v300 = v52 - 16;
              goto LABEL_678;
            }
            if (!strcmp(v292, "X"))
            {
              *(_DWORD *)(v52 - 32) = 0;
              v693 = 1;
              *(_BYTE *)(v52 - 28) = 1;
              v302 = v52 - 32;
            }
            else if (!strcmp(v292, "Y"))
            {
              *(_DWORD *)(v52 - 24) = 0;
              v693 = 1;
              *(_BYTE *)(v52 - 20) = 1;
              v302 = v52 - 24;
            }
            else
            {
              v297 = (CA::ADMBuilder::Impl *)strcmp(v292, "Z");
              if ((_DWORD)v297)
              {
                v298 = CA::ADMBuilder::Impl::log(v297);
                if (os_log_type_enabled(v298, OS_LOG_TYPE_ERROR))
                {
                  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v51 - 16), "");
                  v299 = __p;
                  if (__p[23] < 0)
                    v299 = *(_BYTE **)__p;
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 246;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v299;
                  _os_log_impl(&dword_18EE07000, v298, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown coordinate given for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                }
                *((_DWORD *)this + 158) = -66593;
                goto LABEL_679;
              }
              *(_DWORD *)(v52 - 16) = 0;
              v693 = 1;
              *(_BYTE *)(v52 - 12) = 1;
              v302 = v52 - 16;
            }
            *((_QWORD *)this + 76) = v302;
            v290 = 1;
          }
LABEL_679:
          v301 = *v291;
          v291 += 2;
          v53 = (char *)v301;
          if (!v301)
          {
            if (*((_DWORD *)this + 158))
              goto LABEL_772;
            if (*((_QWORD *)this + 76))
            {
              if (!v290)
              {
                v564 = CA::ADMBuilder::Impl::log(0);
                if (os_log_type_enabled(v564, OS_LOG_TYPE_ERROR))
                {
                  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v51 - 16), "");
                  v565 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 278;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v565;
                  _os_log_impl(&dword_18EE07000, v564, OS_LOG_TYPE_ERROR, "%25s:%-5d Ambiguous coordinate system for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                }
                v250 = -66597;
                goto LABEL_771;
              }
              v389 = *(_QWORD *)(v51 - 16);
              if (*(_BYTE *)(v389 + 417))
              {
                if (*(unsigned __int8 *)(v389 + 416) != v693)
                {
                  v390 = CA::ADMBuilder::Impl::log(0);
                  if (os_log_type_enabled(v390, OS_LOG_TYPE_ERROR))
                  {
                    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v51 - 16), "");
                    v391 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 269;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v391;
                    _os_log_impl(&dword_18EE07000, v390, OS_LOG_TYPE_ERROR, "%25s:%-5d Conflicting coordinate systems for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                    if ((__p[23] & 0x80000000) != 0)
                      operator delete(*(void **)__p);
                  }
                  v250 = -66603;
                  goto LABEL_771;
                }
              }
              else
              {
                *(_WORD *)(v389 + 416) = v693 | 0x100;
                if (*((_DWORD *)this + 158) || !*((_QWORD *)this + 76))
                  goto LABEL_772;
              }
              v582 = (_QWORD *)operator new();
              *v582 = 0;
              v582[1] = 0;
              v582[2] = 0;
              v583 = *((_QWORD *)this + 78);
              *((_QWORD *)this + 78) = v582;
              if (v583)
                std::default_delete<std::string>::operator()[abi:ne180100](v583);
              goto LABEL_523;
            }
LABEL_889:
            v392 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v53);
            if (os_log_type_enabled(v392, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v51 - 16), "");
              v393 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 261;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v393;
              _os_log_impl(&dword_18EE07000, v392, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing coordinate for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
            v250 = -66592;
            goto LABEL_771;
          }
        }
      }
      if (v8 <= 77)
      {
        if (v8 != 60)
        {
          if (v8 != 63)
          {
            if (v8 != 69)
              goto LABEL_926;
            v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152);
            if (strcmp(__s1, "coefficient"))
              goto LABEL_926;
            buf[0].__r_.__value_.__s.__data_[0] = 0;
            buf[0].__r_.__value_.__s.__data_[8] = 0;
            buf[0].__r_.__value_.__s.__data_[16] = 0;
            buf[1].__r_.__value_.__s.__data_[16] = 0;
            buf[2].__r_.__value_.__s.__data_[0] = 0;
            buf[2].__r_.__value_.__s.__data_[4] = 0;
            buf[2].__r_.__value_.__s.__data_[8] = 0;
            buf[3].__r_.__value_.__s.__data_[8] = 0;
            buf[3].__r_.__value_.__s.__data_[16] = 0;
            buf[3].__r_.__value_.__s.__data_[20] = 0;
            buf[4].__r_.__value_.__s.__data_[0] = 0;
            LOBYTE(v703) = 0;
            *((_QWORD *)&v703 + 1) = 0;
            *(_QWORD *)&v704 = 0;
            if (!a3 || (v13 = *a3) == 0)
            {
LABEL_44:
              v25 = *(__n128 **)(v12 - 192);
              v26 = *(_QWORD *)(v12 - 184);
              if ((unint64_t)v25 >= v26)
              {
                v201 = *(_QWORD *)(v12 - 200);
                v202 = 0x8E38E38E38E38E39 * (((uint64_t)v25 - v201) >> 4);
                if (v202 + 1 > 0x1C71C71C71C71C7)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v203 = 0x8E38E38E38E38E39 * ((uint64_t)(v26 - v201) >> 4);
                v204 = 2 * v203;
                if (2 * v203 <= v202 + 1)
                  v204 = v202 + 1;
                if (v203 >= 0xE38E38E38E38E3)
                  v205 = 0x1C71C71C71C71C7;
                else
                  v205 = v204;
                if (v205)
                {
                  v207 = (__n128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMMatrixCoefficient>>(v205);
                }
                else
                {
                  v207 = 0;
                  v206 = 0;
                }
                v266 = &v207[9 * v206];
                std::construct_at[abi:ne180100]<CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient*>(&v207[9 * v202], (uint64_t)buf);
                v28 = v267 + 144;
                v269 = *(char **)(v12 - 200);
                v268 = *(char **)(v12 - 192);
                if (v268 == v269)
                {
                  *(_QWORD *)(v12 - 200) = v267;
                  *(_QWORD *)(v12 - 192) = v28;
                  *(_QWORD *)(v12 - 184) = v266;
                }
                else
                {
                  do
                  {
                    v268 -= 144;
                    std::construct_at[abi:ne180100]<CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient*>((__n128 *)(v267 - 144), (uint64_t)v268);
                  }
                  while (v268 != v269);
                  v270 = *(char **)(v12 - 200);
                  v268 = *(char **)(v12 - 192);
                  *(_QWORD *)(v12 - 200) = v267;
                  *(_QWORD *)(v12 - 192) = v28;
                  *(_QWORD *)(v12 - 184) = v266;
                  if (v268 != v270)
                  {
                    do
                    {
                      v268 -= 144;
                      std::__destroy_at[abi:ne180100]<CA::ADMMatrixCoefficient,0>((uint64_t)v268);
                    }
                    while (v268 != v270);
                    v268 = v270;
                  }
                }
                if (v268)
                  operator delete(v268);
              }
              else
              {
                std::construct_at[abi:ne180100]<CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient*>(v25, (uint64_t)buf);
                v28 = v27 + 144;
                *(_QWORD *)(v12 - 192) = v27 + 144;
              }
              *(_QWORD *)(v12 - 192) = v28;
              v271 = (_QWORD *)operator new();
              *v271 = 0;
              v271[1] = 0;
              v271[2] = 0;
              v272 = *((_QWORD *)this + 78);
              *((_QWORD *)this + 78) = v271;
              if (v272)
                std::default_delete<std::string>::operator()[abi:ne180100](v272);
              v273 = (std::__shared_weak_count *)v704;
              if ((_QWORD)v704)
              {
                v274 = (unint64_t *)(v704 + 8);
                do
                  v275 = __ldaxr(v274);
                while (__stlxr(v275 - 1, v274));
                if (!v275)
                {
                  ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                  std::__shared_weak_count::__release_weak(v273);
                }
              }
              if ((_BYTE)v703 && SHIBYTE(buf[4].__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf[4].__r_.__value_.__l.__data_);
              if (buf[3].__r_.__value_.__s.__data_[8] && buf[3].__r_.__value_.__s.__data_[7] < 0)
                operator delete((void *)buf[2].__r_.__value_.__l.__size_);
              if (buf[1].__r_.__value_.__s.__data_[16] && buf[1].__r_.__value_.__s.__data_[15] < 0)
                operator delete((void *)buf[0].__r_.__value_.__r.__words[2]);
              v9 = 70;
              goto LABEL_926;
            }
            v14 = (unsigned __int8 **)(a3 + 2);
            while (1)
            {
              v15 = (char *)*(v14 - 1);
              if (!strcmp((const char *)v13, "gainUnit"))
              {
                if (!buf[0].__r_.__value_.__s.__data_[8])
                {
                  buf[0].__r_.__value_.__s.__data_[8] = 1;
                  buf[0].__r_.__value_.__r.__words[0] = 1065353216;
                }
                std::string::basic_string[abi:ne180100]<0>(__p, v15);
                v20 = CA::ADMBuilder::Impl::parse_gain_unit((uint64_t)this, (uint64_t *)__p);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
                if (v20 >= 0x100u)
                  buf[0].__r_.__value_.__s.__data_[4] = v20;
                goto LABEL_43;
              }
              if (!strcmp((const char *)v13, "gain"))
              {
                if (!buf[0].__r_.__value_.__s.__data_[8])
                {
                  buf[0].__r_.__value_.__s.__data_[8] = 1;
                  buf[0].__r_.__value_.__r.__words[0] = 0;
                }
                std::string::basic_string[abi:ne180100]<0>(__p, v15);
                v21 = CA::ADMBuilder::Impl::parse_float((int)this, (std::string *)__p);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
                if (HIDWORD(v21))
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = v21;
                goto LABEL_43;
              }
              v16 = strcmp((const char *)v13, "gainVar");
              v17 = (std::string *)&buf[0].__r_.__value_.__r.__words[2];
              if (!v16)
                goto LABEL_26;
              if (!strcmp((const char *)v13, "phase"))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, v15);
                v22 = CA::ADMBuilder::Impl::parse_float((int)this, (std::string *)__p);
                LODWORD(buf[2].__r_.__value_.__l.__data_) = v22;
                buf[2].__r_.__value_.__s.__data_[4] = BYTE4(v22);
                goto LABEL_41;
              }
              v18 = strcmp((const char *)v13, "phaseVar");
              v17 = (std::string *)&buf[2].__r_.__value_.__r.__words[1];
              if (!v18)
                goto LABEL_26;
              if (!strcmp((const char *)v13, "delay"))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, v15);
                v23 = CA::ADMBuilder::Impl::parse_float((int)this, (std::string *)__p);
                LODWORD(buf[3].__r_.__value_.__r.__words[2]) = v23;
                buf[3].__r_.__value_.__s.__data_[20] = BYTE4(v23);
LABEL_41:
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
                goto LABEL_43;
              }
              v19 = strcmp((const char *)v13, "delayVar");
              v17 = &buf[4];
              if (!v19)
LABEL_26:
                std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v17, v15);
LABEL_43:
              v24 = *v14;
              v14 += 2;
              v13 = v24;
              if (!v24)
                goto LABEL_44;
            }
          }
          v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152);
          v78 = (CA::ADMBuilder::Impl *)strcmp(__s1, "gain");
          if (!(_DWORD)v78)
          {
            if (!*(_BYTE *)(v77 - 376))
            {
              *(_BYTE *)(v77 - 376) = 1;
              *(_QWORD *)(v77 - 384) = 0;
              if (a3)
              {
                v228 = *a3;
                if (*a3)
                {
                  v229 = (unsigned __int8 **)(a3 + 2);
                  do
                  {
                    if (!strcmp((const char *)v228, "gainUnit"))
                    {
                      std::string::basic_string[abi:ne180100]<0>(buf, (char *)*(v229 - 1));
                      v230 = CA::ADMBuilder::Impl::parse_gain_unit((uint64_t)this, (uint64_t *)buf);
                      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                        operator delete(buf[0].__r_.__value_.__l.__data_);
                      if (v230 >= 0x100u)
                        *(_BYTE *)(v77 - 380) = v230;
                    }
                    v231 = *v229;
                    v229 += 2;
                    v228 = v231;
                  }
                  while (v231);
                }
              }
              v232 = (_QWORD *)operator new();
              *v232 = 0;
              v232[1] = 0;
              v232[2] = 0;
              v233 = *((_QWORD *)this + 78);
              *((_QWORD *)this + 78) = v232;
              if (v233)
                std::default_delete<std::string>::operator()[abi:ne180100](v233);
              *((_QWORD *)this + 76) = v77 - 384;
LABEL_523:
              v9 = 92;
              goto LABEL_926;
            }
            v147 = CA::ADMBuilder::Impl::log(v78);
            if (!os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
              goto LABEL_770;
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v77 - 480, "");
            if (__p[23] >= 0)
              v148 = __p;
            else
              v148 = *(_BYTE **)__p;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 19;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v148;
            v149 = "%25s:%-5d Multiple importance elements for block format '%s'";
            goto LABEL_768;
          }
          v79 = (CA::ADMBuilder::Impl *)strcmp(__s1, "importance");
          if (!(_DWORD)v79)
          {
            if (!*(_BYTE *)(v77 - 368))
            {
              v260 = (_QWORD *)operator new();
              v260[1] = 0;
              v260[2] = 0;
              *v260 = 0;
              v261 = *((_QWORD *)this + 78);
              *((_QWORD *)this + 78) = v260;
              if (v261)
                std::default_delete<std::string>::operator()[abi:ne180100](v261);
              v9 = 64;
              goto LABEL_926;
            }
            v147 = CA::ADMBuilder::Impl::log(v79);
            if (!os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
              goto LABEL_770;
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v77 - 480, "");
            if (__p[23] >= 0)
              v173 = __p;
            else
              v173 = *(_BYTE **)__p;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 43;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v173;
            v149 = "%25s:%-5d Multiple importance elements for block format '%s'";
            goto LABEL_768;
          }
          v80 = (CA::ADMBuilder::Impl *)strcmp(__s1, "headLocked");
          if (!(_DWORD)v80)
          {
            if (!*(_BYTE *)(v77 - 363))
            {
              v313 = (_QWORD *)operator new();
              v313[1] = 0;
              v313[2] = 0;
              *v313 = 0;
              v314 = *((_QWORD *)this + 78);
              *((_QWORD *)this + 78) = v313;
              if (v314)
                std::default_delete<std::string>::operator()[abi:ne180100](v314);
              v9 = 65;
              goto LABEL_926;
            }
            v147 = CA::ADMBuilder::Impl::log(v80);
            if (!os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
              goto LABEL_770;
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v77 - 480, "");
            if (__p[23] >= 0)
              v227 = __p;
            else
              v227 = *(_BYTE **)__p;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 52;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v227;
            v149 = "%25s:%-5d Multiple headLocked elements for block format '%s'";
            goto LABEL_768;
          }
          v81 = (CA::ADMBuilder::Impl *)strcmp(__s1, "headphoneVirtualise");
          if ((_DWORD)v81)
          {
            v82 = (CA::ADMBuilder::Impl *)strcmp(__s1, "speakerLabel");
            if (!(_DWORD)v82)
            {
              if (!*(_BYTE *)(v77 - 272))
              {
                v394 = (_QWORD *)operator new();
                v394[1] = 0;
                v394[2] = 0;
                *v394 = 0;
                v395 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v394;
                if (v395)
                  std::default_delete<std::string>::operator()[abi:ne180100](v395);
                v9 = 66;
                goto LABEL_926;
              }
              v147 = CA::ADMBuilder::Impl::log(v82);
              if (!os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                goto LABEL_770;
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v77 - 480, "");
              if (__p[23] >= 0)
                v312 = __p;
              else
                v312 = *(_BYTE **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 83;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v312;
              v149 = "%25s:%-5d Multiple speaker label elements for block format '%s'";
              goto LABEL_768;
            }
            v83 = (std::string *)strcmp(__s1, "position");
            if (!(_DWORD)v83)
            {
              *((_QWORD *)this + 76) = 0;
              memset(&v700, 0, sizeof(v700));
              memset(&v699, 0, sizeof(v699));
              buf[0].__r_.__value_.__s.__data_[0] = 0;
              buf[1].__r_.__value_.__s.__data_[0] = 0;
              if (!a3)
                goto LABEL_1142;
              v339 = *a3;
              if (!*a3)
                goto LABEL_1142;
              LODWORD(v340) = 0;
              v687 = 0;
              v694 = 0;
              LODWORD(v341) = 0;
              v342 = (unsigned __int8 **)(a3 + 2);
              while (1)
              {
                v343 = (char *)*(v342 - 1);
                if (!strcmp((const char *)v339, "bound"))
                {
                  std::string::basic_string[abi:ne180100]<0>(__p, v343);
                  v344 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_bound((uint64_t)this, (unsigned __int16 *)__p);
                  v341 = v344;
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                  if (!((unint64_t)v341 >> 32))
                  {
                    v538 = CA::ADMBuilder::Impl::log(v344);
                    v83 = (std::string *)os_log_type_enabled(v538, OS_LOG_TYPE_ERROR);
                    if ((_DWORD)v83)
                    {
                      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v698, v77 - 480, "");
                      v539 = (v698.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                           ? &v698
                           : (std::string *)v698.__r_.__value_.__r.__words[0];
                      *(_DWORD *)__p = 136315650;
                      *(_QWORD *)&__p[4] = "ADMBuilderParseBlockFormat.cpp";
                      *(_WORD *)&__p[12] = 1024;
                      *(_DWORD *)&__p[14] = 103;
                      *(_WORD *)&__p[18] = 2080;
                      *(_QWORD *)&__p[20] = v539;
                      _os_log_impl(&dword_18EE07000, v538, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown bound for position of block format '%s'", __p, 0x1Cu);
                      if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v698.__r_.__value_.__l.__data_);
                    }
                    *((_DWORD *)this + 158) = -66596;
                    v694 = BYTE4(v341);
LABEL_1083:
                    if (v687)
                    {
                      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)&v700.__r_.__value_.__l.__data_, (const void **)&v699.__r_.__value_.__l.__data_);
                      v540 = (CA::ADMBuilder::Impl *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)this + 800, __p, (uint64_t)__p);
                      v541 = (char)v540;
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                      if ((v541 & 1) == 0)
                      {
                        v542 = CA::ADMBuilder::Impl::log(v540);
                        if (os_log_type_enabled(v542, OS_LOG_TYPE_ERROR))
                        {
                          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v698, v77 - 480, "");
                          v543 = (v698.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                               ? &v698
                               : (std::string *)v698.__r_.__value_.__r.__words[0];
                          *(_DWORD *)__p = 136315650;
                          *(_QWORD *)&__p[4] = "ADMBuilderParseBlockFormat.cpp";
                          *(_WORD *)&__p[12] = 1024;
                          *(_DWORD *)&__p[14] = 244;
                          *(_WORD *)&__p[18] = 2080;
                          *(_QWORD *)&__p[20] = v543;
                          _os_log_impl(&dword_18EE07000, v542, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple coordinates for position of block format '%s'", __p, 0x1Cu);
                          if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v698.__r_.__value_.__l.__data_);
                        }
                        v544 = -66589;
                        goto LABEL_1150;
                      }
                      v545 = (_DWORD)v340 - 3;
                      if (*(_BYTE *)(v77 - 151))
                      {
                        if (*(_BYTE *)(v77 - 152) != v545 < 3)
                        {
                          v546 = CA::ADMBuilder::Impl::log(v540);
                          if (os_log_type_enabled(v546, OS_LOG_TYPE_ERROR))
                          {
                            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v698, v77 - 480, "");
                            v547 = (v698.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                                 ? &v698
                                 : (std::string *)v698.__r_.__value_.__r.__words[0];
                            *(_DWORD *)__p = 136315650;
                            *(_QWORD *)&__p[4] = "ADMBuilderParseBlockFormat.cpp";
                            *(_WORD *)&__p[12] = 1024;
                            *(_DWORD *)&__p[14] = 132;
                            *(_WORD *)&__p[18] = 2080;
                            *(_QWORD *)&__p[20] = v547;
                            _os_log_impl(&dword_18EE07000, v546, OS_LOG_TYPE_ERROR, "%25s:%-5d Conflicting coordinate systems for position of block format '%s'", __p, 0x1Cu);
                            if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v698.__r_.__value_.__l.__data_);
                          }
                          *((_DWORD *)this + 158) = -66603;
                        }
                      }
                      else
                      {
                        *(_WORD *)(v77 - 152) = (v545 < 3) | 0x100;
                      }
                      if (v694)
                      {
                        if ((_DWORD)v341 != 1)
                        {
                          if (!(_DWORD)v341 && v340 <= 5)
                          {
                            if (((1 << (char)v340) & 9) != 0)
                            {
                              *(_DWORD *)(v77 - 240) = 0;
                              v566 = v77 - 240;
                            }
                            else if (((1 << (char)v340) & 0x12) != 0)
                            {
                              *(_DWORD *)(v77 - 232) = 0;
                              v566 = v77 - 232;
                            }
                            else
                            {
                              *(_DWORD *)(v77 - 224) = 0;
                              v566 = v77 - 224;
                            }
                            goto LABEL_1315;
                          }
LABEL_1405:
                          v665 = (_QWORD *)operator new();
                          *v665 = 0;
                          v665[1] = 0;
                          v665[2] = 0;
                          v666 = *((_QWORD *)this + 78);
                          *((_QWORD *)this + 78) = v665;
                          if (v666)
                            std::default_delete<std::string>::operator()[abi:ne180100](v666);
                          v9 = 92;
LABEL_1152:
                          if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                            operator delete(buf[0].__r_.__value_.__l.__data_);
                          if (SHIBYTE(v699.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v699.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v700.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v700.__r_.__value_.__l.__data_);
                          goto LABEL_926;
                        }
                        if (v340 > 5)
                          goto LABEL_1405;
                        if (((1 << (char)v340) & 9) != 0)
                        {
                          v613 = v77 - 264;
                          *(_DWORD *)(v77 - 264) = 0;
                          v614 = (_BYTE *)(v77 - 260);
                        }
                        else
                        {
                          if (((1 << (char)v340) & 0x12) != 0)
                          {
                            *(_DWORD *)(v77 - 256) = 0;
                            v566 = v77 - 256;
                          }
                          else
                          {
                            *(_DWORD *)(v77 - 248) = 0;
                            v566 = v77 - 248;
                          }
LABEL_1315:
                          v614 = (_BYTE *)(v566 + 4);
                          v613 = v566;
                        }
LABEL_1404:
                        *v614 = 1;
                        *((_QWORD *)this + 76) = v613;
                        goto LABEL_1405;
                      }
                      if (v340 > 5)
                        goto LABEL_1405;
                      if (((1 << (char)v340) & 9) == 0)
                      {
                        if (((1 << (char)v340) & 0x12) == 0)
                        {
                          v613 = v77 - 328;
                          *(_DWORD *)(v77 - 328) = 0;
                          v614 = (_BYTE *)(v77 - 324);
                          goto LABEL_1404;
                        }
                        if (buf[1].__r_.__value_.__s.__data_[0])
                        {
                          size = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
                          if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                            size = buf[0].__r_.__value_.__l.__size_;
                          if (size != 3)
                            goto LABEL_1187;
                          v568 = buf;
                          if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                            v568 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
                          data_low = LOWORD(v568->__r_.__value_.__l.__data_);
                          v570 = v568->__r_.__value_.__s.__data_[2];
                          if (data_low == 28532 && v570 == 112)
                          {
                            v577 = (__int16 *)(v77 - 320);
                            if (!*(_BYTE *)(v77 - 319) || *(_BYTE *)(v77 - 320))
                            {
                              if (*(_BYTE *)(v77 - 319) && *(_BYTE *)(v77 - 320) == 1)
                                v578 = 261;
                              else
                                v578 = 258;
                            }
                            else
                            {
                              v578 = 260;
                            }
                          }
                          else
                          {
LABEL_1187:
                            v572 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
                            if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                              v572 = buf[0].__r_.__value_.__l.__size_;
                            if (v572 != 6)
                              goto LABEL_1403;
                            v573 = buf;
                            if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                              v573 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
                            data = (int)v573->__r_.__value_.__l.__data_;
                            v575 = WORD2(v573->__r_.__value_.__r.__words[0]);
                            if (data != 1953787746 || v575 != 28015)
                              goto LABEL_1403;
                            v577 = (__int16 *)(v77 - 320);
                            if (!*(_BYTE *)(v77 - 319) || *(_BYTE *)(v77 - 320))
                            {
                              if (*(_BYTE *)(v77 - 319) && *(_BYTE *)(v77 - 320) == 1)
                                v578 = 263;
                              else
                                v578 = 259;
                            }
                            else
                            {
                              v578 = 262;
                            }
                          }
                          *v577 = v578;
                        }
LABEL_1403:
                        v613 = v77 - 336;
                        *(_DWORD *)(v77 - 336) = 0;
                        v614 = (_BYTE *)(v77 - 332);
                        goto LABEL_1404;
                      }
                      if (buf[1].__r_.__value_.__s.__data_[0])
                      {
                        v603 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
                        if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v603 = buf[0].__r_.__value_.__l.__size_;
                        if (v603 != 4)
                          goto LABEL_1268;
                        v604 = buf;
                        if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v604 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
                        if (LODWORD(v604->__r_.__value_.__l.__data_) == 1952867692)
                        {
                          v611 = (__int16 *)(v77 - 320);
                          v658 = *(unsigned __int8 *)(v77 - 320);
                          if (*(_BYTE *)(v77 - 319) && v658 == 2)
                          {
                            v612 = 260;
                          }
                          else if (*(_BYTE *)(v77 - 319) && v658 == 3)
                          {
                            v612 = 262;
                          }
                          else
                          {
                            v612 = 256;
                          }
                        }
                        else
                        {
LABEL_1268:
                          v605 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
                          if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                            v605 = buf[0].__r_.__value_.__l.__size_;
                          if (v605 != 5)
                            goto LABEL_1400;
                          v606 = buf;
                          if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                            v606 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
                          v607 = (int)v606->__r_.__value_.__l.__data_;
                          v608 = v606->__r_.__value_.__s.__data_[4];
                          if (v607 != 1751607666 || v608 != 116)
                            goto LABEL_1400;
                          v611 = (__int16 *)(v77 - 320);
                          v610 = *(unsigned __int8 *)(v77 - 320);
                          if (*(_BYTE *)(v77 - 319) && v610 == 2)
                          {
                            v612 = 261;
                          }
                          else if (*(_BYTE *)(v77 - 319) && v610 == 3)
                          {
                            v612 = 263;
                          }
                          else
                          {
                            v612 = 257;
                          }
                        }
                        *v611 = v612;
                      }
LABEL_1400:
                      v613 = v77 - 344;
                      *(_DWORD *)(v77 - 344) = 0;
                      v614 = (_BYTE *)(v77 - 340);
                      goto LABEL_1404;
                    }
LABEL_1142:
                    if (!*((_DWORD *)this + 158))
                    {
                      v562 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v83);
                      if (os_log_type_enabled(v562, OS_LOG_TYPE_ERROR))
                      {
                        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v698, v77 - 480, "");
                        v563 = (v698.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                             ? &v698
                             : (std::string *)v698.__r_.__value_.__r.__words[0];
                        *(_DWORD *)__p = 136315650;
                        *(_QWORD *)&__p[4] = "ADMBuilderParseBlockFormat.cpp";
                        *(_WORD *)&__p[12] = 1024;
                        *(_DWORD *)&__p[14] = 249;
                        *(_WORD *)&__p[18] = 2080;
                        *(_QWORD *)&__p[20] = v563;
                        _os_log_impl(&dword_18EE07000, v562, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing coordinate for position of block format '%s'", __p, 0x1Cu);
                        if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v698.__r_.__value_.__l.__data_);
                      }
                      v544 = -66592;
LABEL_1150:
                      *((_DWORD *)this + 158) = v544;
                    }
                    v9 = 1;
                    goto LABEL_1152;
                  }
                  v83 = std::string::__assign_external(&v700, v343);
                  v694 = BYTE4(v341);
                }
                else if (!strcmp((const char *)v339, "coordinate"))
                {
                  std::string::basic_string[abi:ne180100]<0>(__p, v343);
                  v345 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_coordinate((uint64_t)this, __p);
                  v340 = v345;
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                  if (!((unint64_t)v340 >> 32))
                  {
                    v560 = CA::ADMBuilder::Impl::log(v345);
                    v83 = (std::string *)os_log_type_enabled(v560, OS_LOG_TYPE_ERROR);
                    if ((_DWORD)v83)
                    {
                      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v698, v77 - 480, "");
                      v561 = (v698.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                           ? &v698
                           : (std::string *)v698.__r_.__value_.__r.__words[0];
                      *(_DWORD *)__p = 136315650;
                      *(_QWORD *)&__p[4] = "ADMBuilderParseBlockFormat.cpp";
                      *(_WORD *)&__p[12] = 1024;
                      *(_DWORD *)&__p[14] = 113;
                      *(_WORD *)&__p[18] = 2080;
                      *(_QWORD *)&__p[20] = v561;
                      _os_log_impl(&dword_18EE07000, v560, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown coordinate for position of block format '%s'", __p, 0x1Cu);
                      if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v698.__r_.__value_.__l.__data_);
                    }
                    goto LABEL_1142;
                  }
                  v83 = std::string::__assign_external(&v699, v343);
                  v687 = BYTE4(v340);
                }
                else
                {
                  v83 = (std::string *)strcmp((const char *)v339, "screenEdgeLock");
                  if (!(_DWORD)v83)
                    v83 = std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(buf, v343);
                }
                v346 = *v342;
                v342 += 2;
                v339 = v346;
                if (!v346)
                  goto LABEL_1083;
              }
            }
            v84 = (CA::ADMBuilder::Impl *)strcmp(__s1, "outputChannelFormatIDRef");
            if (!(_DWORD)v84 || (v84 = (CA::ADMBuilder::Impl *)strcmp(__s1, "outputChannelIDRef"), !(_DWORD)v84))
            {
              if (!*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 71) - 16) - 8))
              {
                v400 = (_QWORD *)operator new();
                v400[1] = 0;
                v400[2] = 0;
                *v400 = 0;
                v401 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v400;
                if (v401)
                  std::default_delete<std::string>::operator()[abi:ne180100](v401);
                v9 = 67;
                goto LABEL_926;
              }
              v147 = CA::ADMBuilder::Impl::log(v84);
              if (!os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                goto LABEL_770;
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v77 - 480, "");
              if (__p[23] >= 0)
                v338 = __p;
              else
                v338 = *(_BYTE **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 256;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v338;
              v149 = "%25s:%-5d Multiple output channel formats for block format '%s'";
              goto LABEL_768;
            }
            v85 = (CA::ADMBuilder::Impl *)strcmp(__s1, "jumpPosition");
            if (!(_DWORD)v85)
            {
              if (!*(_BYTE *)(v77 - 304))
              {
                *(_DWORD *)(v77 - 308) = 0;
                *(_QWORD *)(v77 - 316) = 0;
                *(_BYTE *)(v77 - 304) = 1;
                if (a3)
                {
                  v548 = *a3;
                  if (*a3)
                  {
                    v549 = (unsigned __int8 **)(a3 + 2);
                    do
                    {
                      if (!strcmp((const char *)v548, "interpolationLength"))
                      {
                        std::string::basic_string[abi:ne180100]<0>(buf, (char *)*(v549 - 1));
                        v550 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
                        *(_DWORD *)(v77 - 312) = v550;
                        *(_BYTE *)(v77 - 308) = BYTE4(v550);
                        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                          operator delete(buf[0].__r_.__value_.__l.__data_);
                      }
                      v551 = *v549;
                      v549 += 2;
                      v548 = v551;
                    }
                    while (v551);
                  }
                }
                v552 = (_QWORD *)operator new();
                *v552 = 0;
                v552[1] = 0;
                v552[2] = 0;
                v553 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v552;
                if (v553)
                  std::default_delete<std::string>::operator()[abi:ne180100](v553);
                v9 = 68;
                goto LABEL_926;
              }
              v147 = CA::ADMBuilder::Impl::log(v85);
              if (!os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                goto LABEL_770;
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v77 - 480, "");
              if (__p[23] >= 0)
                v518 = __p;
              else
                v518 = *(_BYTE **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 265;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v518;
              v149 = "%25s:%-5d Multiple jump positions for block format '%s'";
              goto LABEL_768;
            }
            if (!strcmp(__s1, "matrix"))
            {
              v9 = 69;
              goto LABEL_926;
            }
            v86 = (CA::ADMBuilder::Impl *)strcmp(__s1, "width");
            if (!(_DWORD)v86)
            {
              if (!*(_BYTE *)(v77 - 172))
              {
                v580 = (_QWORD *)operator new();
                v580[1] = 0;
                v580[2] = 0;
                *v580 = 0;
                v581 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v580;
                if (v581)
                  std::default_delete<std::string>::operator()[abi:ne180100](v581);
                v9 = 71;
                goto LABEL_926;
              }
              v147 = CA::ADMBuilder::Impl::log(v86);
              if (!os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                goto LABEL_770;
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v77 - 480, "");
              if (__p[23] >= 0)
                v537 = __p;
              else
                v537 = *(_BYTE **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 287;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v537;
              v149 = "%25s:%-5d Multiple width elements for block format '%s'";
              goto LABEL_768;
            }
            v87 = (CA::ADMBuilder::Impl *)strcmp(__s1, "height");
            if (!(_DWORD)v87)
            {
              if (!*(_BYTE *)(v77 - 164))
              {
                v592 = (_QWORD *)operator new();
                v592[1] = 0;
                v592[2] = 0;
                *v592 = 0;
                v593 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v592;
                if (v593)
                  std::default_delete<std::string>::operator()[abi:ne180100](v593);
                v9 = 72;
                goto LABEL_926;
              }
              v147 = CA::ADMBuilder::Impl::log(v87);
              if (!os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                goto LABEL_770;
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v77 - 480, "");
              if (__p[23] >= 0)
                v559 = __p;
              else
                v559 = *(_BYTE **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 296;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v559;
              v149 = "%25s:%-5d Multiple height elements for block format '%s'";
              goto LABEL_768;
            }
            v88 = (CA::ADMBuilder::Impl *)strcmp(__s1, "depth");
            if (!(_DWORD)v88)
            {
              if (!*(_BYTE *)(v77 - 156))
              {
                v597 = (_QWORD *)operator new();
                v597[1] = 0;
                v597[2] = 0;
                *v597 = 0;
                v598 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v597;
                if (v598)
                  std::default_delete<std::string>::operator()[abi:ne180100](v598);
                v9 = 73;
                goto LABEL_926;
              }
              v147 = CA::ADMBuilder::Impl::log(v88);
              if (!os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                goto LABEL_770;
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v77 - 480, "");
              if (__p[23] >= 0)
                v579 = __p;
              else
                v579 = *(_BYTE **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 305;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v579;
              v149 = "%25s:%-5d Multiple depth elements for block format '%s'";
              goto LABEL_768;
            }
            if (!strcmp(__s1, "cartesian"))
            {
              v590 = (_QWORD *)operator new();
              v590[1] = 0;
              v590[2] = 0;
              *v590 = 0;
              v591 = *((_QWORD *)this + 78);
              *((_QWORD *)this + 78) = v590;
              if (v591)
                std::default_delete<std::string>::operator()[abi:ne180100](v591);
              v9 = 74;
              goto LABEL_926;
            }
            v89 = (CA::ADMBuilder::Impl *)strcmp(__s1, "diffuse");
            if (!(_DWORD)v89)
            {
              if (!*(_BYTE *)(v77 - 144))
              {
                v636 = (_QWORD *)operator new();
                v636[1] = 0;
                v636[2] = 0;
                *v636 = 0;
                v637 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v636;
                if (v637)
                  std::default_delete<std::string>::operator()[abi:ne180100](v637);
                v9 = 75;
                goto LABEL_926;
              }
              v147 = CA::ADMBuilder::Impl::log(v89);
              if (!os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                goto LABEL_770;
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v77 - 480, "");
              if (__p[23] >= 0)
                v596 = __p;
              else
                v596 = *(_BYTE **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 317;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v596;
              v149 = "%25s:%-5d Multiple diffuse elements for block format '%s'";
              goto LABEL_768;
            }
            v90 = (CA::ADMBuilder::Impl *)strcmp(__s1, "channelLock");
            if (!(_DWORD)v90)
            {
              if (!*(_BYTE *)(v77 - 128))
              {
                *(_DWORD *)(v77 - 132) = 0;
                *(_QWORD *)(v77 - 140) = 0;
                *(_BYTE *)(v77 - 128) = 1;
                if (a3)
                {
                  v638 = *a3;
                  if (*a3)
                  {
                    v639 = (unsigned __int8 **)(a3 + 2);
                    do
                    {
                      if (!strcmp((const char *)v638, "maxDistance"))
                      {
                        std::string::basic_string[abi:ne180100]<0>(buf, (char *)*(v639 - 1));
                        v640 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
                        *(_DWORD *)(v77 - 136) = v640;
                        *(_BYTE *)(v77 - 132) = BYTE4(v640);
                        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                          operator delete(buf[0].__r_.__value_.__l.__data_);
                      }
                      v641 = *v639;
                      v639 += 2;
                      v638 = v641;
                    }
                    while (v641);
                  }
                }
                v642 = (_QWORD *)operator new();
                *v642 = 0;
                v642[1] = 0;
                v642[2] = 0;
                v643 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v642;
                if (v643)
                  std::default_delete<std::string>::operator()[abi:ne180100](v643);
                v9 = 76;
                goto LABEL_926;
              }
              v147 = CA::ADMBuilder::Impl::log(v90);
              if (!os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                goto LABEL_770;
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v77 - 480, "");
              if (__p[23] >= 0)
                v632 = __p;
              else
                v632 = *(_BYTE **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 326;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v632;
              v149 = "%25s:%-5d Multiple channel lock elements for block format '%s'";
              goto LABEL_768;
            }
            v91 = (CA::ADMBuilder::Impl *)strcmp(__s1, "objectDivergence");
            if ((_DWORD)v91)
            {
              if (!strcmp(__s1, "zoneExclusion"))
              {
                v9 = 78;
              }
              else if (!strcmp(__s1, "screenRef"))
              {
                v644 = (_QWORD *)operator new();
                v644[1] = 0;
                v644[2] = 0;
                *v644 = 0;
                v645 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v644;
                if (v645)
                  std::default_delete<std::string>::operator()[abi:ne180100](v645);
                v9 = 85;
              }
              else if (!strcmp(__s1, "equation"))
              {
                v656 = (_QWORD *)operator new();
                v656[1] = 0;
                v656[2] = 0;
                *v656 = 0;
                v657 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v656;
                if (v657)
                  std::default_delete<std::string>::operator()[abi:ne180100](v657);
                v9 = 80;
              }
              else if (!strcmp(__s1, "order"))
              {
                v659 = (_QWORD *)operator new();
                v659[1] = 0;
                v659[2] = 0;
                *v659 = 0;
                v660 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v659;
                if (v660)
                  std::default_delete<std::string>::operator()[abi:ne180100](v660);
                v9 = 81;
              }
              else if (!strcmp(__s1, "degree"))
              {
                v661 = (_QWORD *)operator new();
                v661[1] = 0;
                v661[2] = 0;
                *v661 = 0;
                v662 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v661;
                if (v662)
                  std::default_delete<std::string>::operator()[abi:ne180100](v662);
                v9 = 82;
              }
              else if (!strcmp(__s1, "normalization"))
              {
                v663 = (_QWORD *)operator new();
                v663[1] = 0;
                v663[2] = 0;
                *v663 = 0;
                v664 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v663;
                if (v664)
                  std::default_delete<std::string>::operator()[abi:ne180100](v664);
                v9 = 83;
              }
              else if (!strcmp(__s1, "nfcRefDist"))
              {
                v92 = (_QWORD *)operator new();
                v92[1] = 0;
                v92[2] = 0;
                *v92 = 0;
                v93 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v92;
                if (v93)
                  std::default_delete<std::string>::operator()[abi:ne180100](v93);
                v9 = 84;
              }
              goto LABEL_926;
            }
            if (*(_BYTE *)(v77 - 116))
            {
              v147 = CA::ADMBuilder::Impl::log(v91);
              if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v77 - 480, "");
                if (__p[23] >= 0)
                  v635 = __p;
                else
                  v635 = *(_BYTE **)__p;
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 345;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v635;
                v149 = "%25s:%-5d Multiple channel lock elements for block format '%s'";
                goto LABEL_768;
              }
              goto LABEL_770;
            }
            *(_BYTE *)(v77 - 116) = 1;
            *(_QWORD *)(v77 - 124) = 0;
            if (!a3)
              goto LABEL_1416;
            v646 = *a3;
            if (!*a3)
              goto LABEL_1416;
            v647 = 0;
            v648 = 0;
            v649 = (unsigned __int8 **)(a3 + 2);
            while (1)
            {
              v650 = (char *)*(v649 - 1);
              v651 = strcmp((const char *)v646, "azimuthRange");
              if (!(_DWORD)v651)
                break;
              v651 = strcmp((const char *)v646, "positionRange");
              if (!(_DWORD)v651)
              {
                if (v647 && !v648)
                  goto LABEL_1394;
                std::string::basic_string[abi:ne180100]<0>(buf, v650);
                v651 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
                v652 = *(float *)&v651;
                if (!HIDWORD(v651))
                  v652 = 0.0;
                *(float *)(v77 - 120) = v652;
                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                v648 = 1;
LABEL_1358:
                v647 = 1;
              }
              v654 = *v649;
              v649 += 2;
              v646 = v654;
              if (!v654)
              {
                if (!v647)
                  goto LABEL_1416;
                v655 = 0;
LABEL_1395:
                if (*(_BYTE *)(v77 - 151))
                {
                  if (v648 != *(unsigned __int8 *)(v77 - 152))
                    v655 = 1;
                }
                else
                {
                  *(_WORD *)(v77 - 152) = v648 | 0x100;
                }
                if (!*((_DWORD *)this + 158) && v655)
                {
                  v667 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v651);
                  if (os_log_type_enabled(v667, OS_LOG_TYPE_ERROR))
                  {
                    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v77 - 480, "");
                    if (__p[23] >= 0)
                      v668 = __p;
                    else
                      v668 = *(_BYTE **)__p;
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 387;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v668;
                    v170 = "%25s:%-5d Conflicting coordinate systems used in block format '%s'";
                    v318 = v667;
                    goto LABEL_721;
                  }
                  goto LABEL_723;
                }
LABEL_1416:
                v669 = (_QWORD *)operator new();
                *v669 = 0;
                v669[1] = 0;
                v669[2] = 0;
                v670 = *((_QWORD *)this + 78);
                *((_QWORD *)this + 78) = v669;
                if (v670)
                  std::default_delete<std::string>::operator()[abi:ne180100](v670);
                v9 = 77;
                goto LABEL_926;
              }
            }
            if (v647 && v648 == 1)
            {
LABEL_1394:
              v655 = 1;
              goto LABEL_1395;
            }
            std::string::basic_string[abi:ne180100]<0>(buf, v650);
            v651 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
            v653 = *(float *)&v651;
            if (!HIDWORD(v651))
              v653 = 0.0;
            *(float *)(v77 - 120) = v653;
            if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf[0].__r_.__value_.__l.__data_);
            v648 = 0;
            goto LABEL_1358;
          }
          if (*(_BYTE *)(v77 - 348))
          {
            v147 = CA::ADMBuilder::Impl::log(v81);
            if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v77 - 480, "");
              if (__p[23] >= 0)
                v257 = __p;
              else
                v257 = *(_BYTE **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 63;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v257;
              v149 = "%25s:%-5d Multiple headphoneVirtualise values for block format '%s'";
LABEL_768:
              _os_log_impl(&dword_18EE07000, v147, OS_LOG_TYPE_ERROR, v149, (uint8_t *)buf, 0x1Cu);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
LABEL_770:
            v250 = -66586;
            goto LABEL_771;
          }
          v381 = v77 - 360;
          *(_DWORD *)(v381 + 8) = 0;
          *(_QWORD *)v381 = 0;
          *(_BYTE *)(v77 - 348) = 1;
          if (!a3)
            goto LABEL_926;
          v382 = *a3;
          if (!*a3)
            goto LABEL_926;
          v383 = (unsigned __int8 **)(a3 + 2);
          while (1)
          {
            v384 = (char *)*(v383 - 1);
            if (!strcmp((const char *)v382, "bypass"))
              break;
            if (!strcmp((const char *)v382, "DRR"))
            {
              std::string::basic_string[abi:ne180100]<0>(buf, v384);
              v385 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
              *(_DWORD *)(v77 - 356) = v385;
              *(_BYTE *)(v77 - 352) = BYTE4(v385);
              goto LABEL_867;
            }
LABEL_869:
            v386 = *v383;
            v383 += 2;
            v382 = v386;
            v9 = 1;
            if (!v386)
              goto LABEL_926;
          }
          std::string::basic_string[abi:ne180100]<0>(buf, v384);
          *(_WORD *)v381 = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, (unsigned __int8 *)buf);
LABEL_867:
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          goto LABEL_869;
        }
        v691 = *(_QWORD *)(*(_QWORD *)this + 128);
        if (!strcmp(__s1, "audioBlockFormat"))
        {
          buf[0].__r_.__value_.__s.__data_[0] = 0;
          buf[1].__r_.__value_.__s.__data_[0] = 0;
          buf[1].__r_.__value_.__s.__data_[8] = 0;
          buf[2].__r_.__value_.__s.__data_[8] = 0;
          buf[2].__r_.__value_.__s.__data_[16] = 0;
          buf[3].__r_.__value_.__s.__data_[16] = 0;
          buf[4].__r_.__value_.__s.__data_[0] = 0;
          buf[4].__r_.__value_.__s.__data_[8] = 0;
          buf[4].__r_.__value_.__s.__data_[12] = 0;
          buf[4].__r_.__value_.__s.__data_[16] = 0;
          WORD2(buf[4].__r_.__value_.__r.__words[2]) = 0;
          LOBYTE(v703) = 0;
          BYTE12(v703) = 0;
          LOBYTE(v704) = 0;
          BYTE4(v704) = 0;
          BYTE8(v704) = 0;
          BYTE12(v704) = 0;
          LOBYTE(v705) = 0;
          BYTE4(v705) = 0;
          WORD4(v705) = 0;
          BYTE12(v705) = 0;
          BYTE8(v706) = 0;
          WORD6(v706) = 0;
          LOBYTE(v707) = 0;
          v709 = 0;
          v710 = 0;
          v711 = 0;
          v712 = 0;
          v713 = 0;
          v714 = 0;
          v715 = 0;
          v716 = 0;
          v717 = 0;
          v718 = 0;
          v719 = 0;
          v720 = 0;
          v721 = 0;
          v723[28] = 0;
          v723[32] = 0;
          v723[36] = 0;
          v723[40] = 0;
          v723[44] = 0;
          v724 = 0;
          v725 = 0;
          v726 = 0;
          v727 = 0;
          v728 = 0;
          v729 = 0;
          v730 = 0;
          v734 = 0;
          v735 = 0;
          v736 = 0;
          v737 = 0;
          v738 = 0;
          LOBYTE(v739) = 0;
          v741 = 0;
          v742 = 0;
          v743 = 0;
          v722 = 0u;
          memset(v723, 0, 25);
          memset(v731, 0, sizeof(v731));
          LOBYTE(v732) = 0;
          if (a3)
          {
            v150 = *a3;
            if (*a3)
            {
              v151 = (unsigned __int8 **)(a3 + 2);
              do
              {
                v152 = (std::string::value_type *)*(v151 - 1);
                if (!strcmp((const char *)v150, "audioBlockFormatID"))
                {
                  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(buf, v152);
                }
                else if (!strcmp((const char *)v150, "rtime"))
                {
                  CA::ADMTime::parse((CA::ADMTime *)v152, (uint64_t)__p);
                  if (!__p[24])
                    *((_DWORD *)this + 158) = -66604;
                  *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = *(_OWORD *)__p;
                  *(_OWORD *)((char *)&buf[1].__r_.__value_.__r.__words[2] + 1) = *(_OWORD *)&__p[9];
                }
                else if (!strcmp((const char *)v150, "duration"))
                {
                  CA::ADMTime::parse((CA::ADMTime *)v152, (uint64_t)__p);
                  if (!__p[24])
                    *((_DWORD *)this + 158) = -66604;
                  *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2] = *(_OWORD *)__p;
                  *(_OWORD *)((char *)&buf[3].__r_.__value_.__l.__data_ + 1) = *(_OWORD *)&__p[9];
                }
                v153 = *v151;
                v151 += 2;
                v150 = v153;
              }
              while (v153);
            }
          }
          std::vector<CA::ADMBlockFormat>::push_back[abi:ne180100]((__int128 **)(*(_QWORD *)(v691 - 16) + 144), (__int128 *)buf);
          v154 = *((_QWORD *)this + 71) - 24;
          __p[0] = 0;
          __p[24] = 0;
          std::vector<std::optional<std::string>>::push_back[abi:ne180100](v154, (__int128 *)__p);
          if (__p[24] && (__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v155 = (void ***)(*((_QWORD *)this + 74) - 24);
          memset(__p, 0, 24);
          std::vector<std::vector<std::string>>::push_back[abi:ne180100](v155, (uint64_t)__p);
          v700.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v700);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)this + 800);
          if (v741 && v740 < 0)
            operator delete(v739);
          if (v734 && v733 < 0)
            operator delete(v732);
          *(_QWORD *)__p = v731;
          std::vector<CA::ADMZone>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          *(_QWORD *)__p = v723;
          std::vector<CA::ADMMatrixCoefficient>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (*((_QWORD *)&v722 + 1))
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v722 + 1));
          if (v709 && v708 < 0)
            operator delete(v707);
          if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          v9 = 63;
          goto LABEL_926;
        }
        v96 = (CA::ADMBuilder::Impl *)strcmp(__s1, "frequency");
        if ((_DWORD)v96)
          goto LABEL_926;
        if (!a3 || (v96 = (CA::ADMBuilder::Impl *)*a3) == 0)
        {
LABEL_578:
          v258 = CA::ADMBuilder::Impl::log(v96);
          if (os_log_type_enabled(v258, OS_LOG_TYPE_ERROR))
          {
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v691 - 16), "");
            v259 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseChannelFormat.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 74;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v259;
            _os_log_impl(&dword_18EE07000, v258, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing type definition for frequency of channel format '%s'", (uint8_t *)buf, 0x1Cu);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          v250 = -66587;
          goto LABEL_771;
        }
        v97 = (unsigned __int8 **)(a3 + 2);
        while (1)
        {
          v98 = (const char *)*(v97 - 1);
          if (!strcmp((const char *)v96, "typeDefinition"))
            break;
LABEL_191:
          v99 = *v97;
          v97 += 2;
          v96 = (CA::ADMBuilder::Impl *)v99;
          if (!v99)
          {
            if (v9 != 1)
              goto LABEL_926;
            goto LABEL_578;
          }
        }
        v100 = (CA::ADMBuilder::Impl *)strcmp(v98, "lowPass");
        if ((_DWORD)v100)
        {
          v101 = (CA::ADMBuilder::Impl *)strcmp(v98, "highPass");
          if ((_DWORD)v101)
          {
            v102 = CA::ADMBuilder::Impl::log(v101);
            if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v691 - 16), "");
              v103 = __p;
              if (__p[23] < 0)
                v103 = *(_BYTE **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseChannelFormat.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 66;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v98;
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v103;
              _os_log_impl(&dword_18EE07000, v102, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown type definition '%s' for frequency of channel format '%s'", (uint8_t *)buf, 0x26u);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
            *((_DWORD *)this + 158) = -66588;
            goto LABEL_191;
          }
          if (!*(_BYTE *)(*(_QWORD *)(v691 - 16) + 140))
          {
            v111 = (_QWORD *)operator new();
            *v111 = 0;
            v111[1] = 0;
            v111[2] = 0;
            v112 = *((_QWORD *)this + 78);
            *((_QWORD *)this + 78) = v111;
            if (v112)
              std::default_delete<std::string>::operator()[abi:ne180100](v112);
            v9 = 62;
            goto LABEL_191;
          }
          v107 = CA::ADMBuilder::Impl::log(v101);
          if (!os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
            goto LABEL_213;
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v691 - 16), "");
          v108 = __p;
          if (__p[23] < 0)
            v108 = *(_BYTE **)__p;
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseChannelFormat.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 56;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v108;
          v106 = v107;
        }
        else
        {
          if (!*(_BYTE *)(*(_QWORD *)(v691 - 16) + 132))
          {
            v109 = (_QWORD *)operator new();
            *v109 = 0;
            v109[1] = 0;
            v109[2] = 0;
            v110 = *((_QWORD *)this + 78);
            *((_QWORD *)this + 78) = v109;
            if (v110)
              std::default_delete<std::string>::operator()[abi:ne180100](v110);
            v9 = 61;
            goto LABEL_191;
          }
          v104 = CA::ADMBuilder::Impl::log(v100);
          if (!os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
            goto LABEL_213;
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v691 - 16), "");
          v105 = __p;
          if (__p[23] < 0)
            v105 = *(_BYTE **)__p;
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseChannelFormat.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 46;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v105;
          v106 = v104;
        }
        _os_log_impl(&dword_18EE07000, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple lowPass values for channel format '%s'", (uint8_t *)buf, 0x1Cu);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
LABEL_213:
        *((_DWORD *)this + 158) = -66586;
        goto LABEL_191;
      }
      if (v8 != 78)
      {
        if (v8 == 86)
        {
          if (!strcmp(__s1, "audioStreamFormatIDRef"))
          {
            v94 = (_QWORD *)operator new();
            v94[1] = 0;
            v94[2] = 0;
            *v94 = 0;
            v95 = *((_QWORD *)this + 78);
            *((_QWORD *)this + 78) = v94;
            if (v95)
              std::default_delete<std::string>::operator()[abi:ne180100](v95);
            v9 = 87;
          }
        }
        else
        {
          if (v8 != 88)
            goto LABEL_926;
          if (!strcmp(__s1, "audioChannelFormatIDRef"))
          {
            v30 = (_QWORD *)operator new();
            v30[1] = 0;
            v30[2] = 0;
            *v30 = 0;
            v31 = *((_QWORD *)this + 78);
            v9 = 89;
          }
          else if (!strcmp(__s1, "audioPackFormatIDRef"))
          {
            v30 = (_QWORD *)operator new();
            v30[1] = 0;
            v30[2] = 0;
            *v30 = 0;
            v31 = *((_QWORD *)this + 78);
            v9 = 90;
          }
          else
          {
            if (strcmp(__s1, "audioTrackFormatIDRef"))
              goto LABEL_926;
            v30 = (_QWORD *)operator new();
            v30[1] = 0;
            v30[2] = 0;
            *v30 = 0;
            v31 = *((_QWORD *)this + 78);
            v9 = 91;
          }
LABEL_924:
          *((_QWORD *)this + 78) = v30;
          if (v31)
            std::default_delete<std::string>::operator()[abi:ne180100](v31);
        }
LABEL_926:
        v409 = (char *)*((_QWORD *)this + 3);
        v410 = (char *)*((_QWORD *)this + 2);
        v411 = v409 - v410;
        if (v409 == v410)
          v412 = 0;
        else
          v412 = ((v409 - v410) << 7) - 1;
        v414 = *((_QWORD *)this + 5);
        v413 = *((_QWORD *)this + 6);
        v415 = v413 + v414;
        if (v412 != v413 + v414)
          goto LABEL_1009;
        if (v414 >= 0x400)
        {
          *((_QWORD *)this + 5) = v414 - 1024;
          v418 = *(_QWORD *)v410;
          v416 = v410 + 8;
          v417 = v418;
          *((_QWORD *)this + 2) = v416;
          if (*((char **)this + 4) == v409)
          {
            v419 = *((_QWORD *)this + 1);
            v420 = (uint64_t)&v416[-v419];
            if ((unint64_t)v416 <= v419)
            {
              v449 = (uint64_t)&v409[-v419];
              v142 = v449 == 0;
              v450 = v449 >> 2;
              if (v142)
                v451 = 1;
              else
                v451 = v450;
              v452 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v451);
              v454 = &v452[8 * (v451 >> 2)];
              v455 = (uint64_t *)*((_QWORD *)this + 2);
              v409 = v454;
              v456 = *((_QWORD *)this + 3) - (_QWORD)v455;
              if (v456)
              {
                v409 = &v454[v456 & 0xFFFFFFFFFFFFFFF8];
                v457 = 8 * (v456 >> 3);
                v458 = &v452[8 * (v451 >> 2)];
                do
                {
                  v459 = *v455++;
                  *(_QWORD *)v458 = v459;
                  v458 += 8;
                  v457 -= 8;
                }
                while (v457);
              }
              v460 = (void *)*((_QWORD *)this + 1);
              *((_QWORD *)this + 1) = v452;
              *((_QWORD *)this + 2) = v454;
              *((_QWORD *)this + 3) = v409;
              *((_QWORD *)this + 4) = &v452[8 * v453];
              if (v460)
              {
                operator delete(v460);
                v409 = (char *)*((_QWORD *)this + 3);
              }
            }
            else
            {
              v421 = v420 >> 3;
              v422 = v420 >> 3 < -1;
              v423 = (v420 >> 3) + 2;
              if (v422)
                v424 = v423;
              else
                v424 = v421 + 1;
              v425 = -(v424 >> 1);
              v426 = v424 >> 1;
              v427 = &v416[-8 * v426];
              v428 = v409 - v416;
              if (v409 == v416)
              {
                v429 = v409;
              }
              else
              {
                memmove(&v416[-8 * v426], v416, v409 - v416);
                v429 = (char *)*((_QWORD *)this + 2);
              }
              v409 = &v427[v428];
              *((_QWORD *)this + 2) = &v429[8 * v425];
              *((_QWORD *)this + 3) = &v427[v428];
            }
          }
          *(_QWORD *)v409 = v417;
LABEL_1007:
          *((_QWORD *)this + 3) += 8;
LABEL_1008:
          v410 = (char *)*((_QWORD *)this + 2);
          v413 = *((_QWORD *)this + 6);
          v415 = *((_QWORD *)this + 5) + v413;
LABEL_1009:
          *(_DWORD *)(*(_QWORD *)&v410[(v415 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v415 & 0x3FF)) = v9;
          *((_QWORD *)this + 6) = v413 + 1;
          return;
        }
        v430 = v411 >> 3;
        v431 = (char *)*((_QWORD *)this + 4);
        v432 = (char *)*((_QWORD *)this + 1);
        v433 = v431 - v432;
        if (v411 >> 3 < (unint64_t)((v431 - v432) >> 3))
        {
          v434 = v431 == v409;
          v435 = operator new(0x1000uLL);
          v436 = v435;
          if (v434)
          {
            if (v432 == v410)
            {
              if (v409 == v410)
                v461 = 1;
              else
                v461 = v433 >> 2;
              v462 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v461);
              v410 = &v462[8 * ((v461 + 3) >> 2)];
              v464 = (uint64_t *)*((_QWORD *)this + 2);
              v465 = v410;
              v466 = *((_QWORD *)this + 3) - (_QWORD)v464;
              if (v466)
              {
                v465 = &v410[v466 & 0xFFFFFFFFFFFFFFF8];
                v467 = 8 * (v466 >> 3);
                v468 = v410;
                do
                {
                  v469 = *v464++;
                  *(_QWORD *)v468 = v469;
                  v468 += 8;
                  v467 -= 8;
                }
                while (v467);
              }
              v470 = (void *)*((_QWORD *)this + 1);
              *((_QWORD *)this + 1) = v462;
              *((_QWORD *)this + 2) = v410;
              *((_QWORD *)this + 3) = v465;
              *((_QWORD *)this + 4) = &v462[8 * v463];
              if (v470)
              {
                operator delete(v470);
                v410 = (char *)*((_QWORD *)this + 2);
              }
            }
            *((_QWORD *)v410 - 1) = v436;
            v471 = (char *)*((_QWORD *)this + 2);
            v472 = (char *)*((_QWORD *)this + 3);
            *((_QWORD *)this + 2) = v471 - 8;
            v473 = *((_QWORD *)v471 - 1);
            *((_QWORD *)this + 2) = v471;
            if (v472 == *((char **)this + 4))
            {
              v474 = *((_QWORD *)this + 1);
              v475 = (uint64_t)&v471[-v474];
              if ((unint64_t)v471 <= v474)
              {
                v506 = (uint64_t)&v472[-v474];
                v142 = v506 == 0;
                v507 = v506 >> 2;
                if (v142)
                  v508 = 1;
                else
                  v508 = v507;
                v509 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v508);
                v511 = &v509[8 * (v508 >> 2)];
                v512 = (uint64_t *)*((_QWORD *)this + 2);
                v472 = v511;
                v513 = *((_QWORD *)this + 3) - (_QWORD)v512;
                if (v513)
                {
                  v472 = &v511[v513 & 0xFFFFFFFFFFFFFFF8];
                  v514 = 8 * (v513 >> 3);
                  v515 = &v509[8 * (v508 >> 2)];
                  do
                  {
                    v516 = *v512++;
                    *(_QWORD *)v515 = v516;
                    v515 += 8;
                    v514 -= 8;
                  }
                  while (v514);
                }
                v517 = (void *)*((_QWORD *)this + 1);
                *((_QWORD *)this + 1) = v509;
                *((_QWORD *)this + 2) = v511;
                *((_QWORD *)this + 3) = v472;
                *((_QWORD *)this + 4) = &v509[8 * v510];
                if (v517)
                {
                  operator delete(v517);
                  v472 = (char *)*((_QWORD *)this + 3);
                }
              }
              else
              {
                v476 = v475 >> 3;
                v422 = v475 >> 3 < -1;
                v477 = (v475 >> 3) + 2;
                if (v422)
                  v478 = v477;
                else
                  v478 = v476 + 1;
                v479 = -(v478 >> 1);
                v480 = v478 >> 1;
                v481 = &v471[-8 * v480];
                v482 = v472 - v471;
                if (v472 != v471)
                {
                  memmove(&v471[-8 * v480], v471, v472 - v471);
                  v471 = (char *)*((_QWORD *)this + 2);
                }
                v472 = &v481[v482];
                *((_QWORD *)this + 2) = &v471[8 * v479];
                *((_QWORD *)this + 3) = &v481[v482];
              }
            }
            *(_QWORD *)v472 = v473;
          }
          else
          {
            *(_QWORD *)v409 = v435;
          }
          goto LABEL_1007;
        }
        if (v431 == v432)
          v437 = 1;
        else
          v437 = v433 >> 2;
        v438 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v437);
        v440 = v439;
        v441 = &v438[8 * v430];
        *(_QWORD *)&v442 = v438;
        *((_QWORD *)&v442 + 1) = v441;
        v695 = v442;
        v443 = operator new(0x1000uLL);
        *(_QWORD *)&v444 = v441;
        *((_QWORD *)&v444 + 1) = &v438[8 * v440];
        if (v430 == v440)
        {
          v445 = 8 * v430;
          *(_QWORD *)&v446 = v695;
          if (v411 >= 1)
          {
            v447 = v445 >> 3;
            if (v447 >= -1)
              v448 = v447 + 1;
            else
              v448 = v447 + 2;
            v441 -= 8 * (v448 >> 1);
            *(_QWORD *)&v444 = v441;
            *((_QWORD *)&v446 + 1) = v441;
            goto LABEL_981;
          }
          v483 = v445 >> 2;
          if (v409 == v410)
            v484 = 1;
          else
            v484 = v483;
          v485 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v484);
          v441 = &v485[8 * (v484 >> 2)];
          *(_QWORD *)&v446 = v485;
          *((_QWORD *)&v446 + 1) = v441;
          *(_QWORD *)&v444 = v441;
          *((_QWORD *)&v444 + 1) = &v485[8 * v486];
          if (!v438)
            goto LABEL_981;
          v688 = v444;
          v695 = v446;
          operator delete(v438);
          v444 = v688;
        }
        v446 = v695;
LABEL_981:
        *(_QWORD *)v441 = v443;
        *(_QWORD *)&v444 = v444 + 8;
        for (i = *((_QWORD *)this + 3); i != *((_QWORD *)this + 2); i -= 8)
        {
          v488 = (_QWORD *)*((_QWORD *)&v446 + 1);
          if (*((_QWORD *)&v446 + 1) == (_QWORD)v446)
          {
            v490 = (_BYTE *)v444;
            if ((unint64_t)v444 >= *((_QWORD *)&v444 + 1))
            {
              if (*((_QWORD *)&v444 + 1) == *((_QWORD *)&v446 + 1))
                v495 = 1;
              else
                v495 = (uint64_t)(*((_QWORD *)&v444 + 1) - *((_QWORD *)&v446 + 1)) >> 2;
              v496 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v495);
              v489 = &v496[(2 * v495 + 6) & 0xFFFFFFFFFFFFFFF8];
              v498 = v489;
              v499 = v490 - (_BYTE *)v488;
              if (v490 != (_BYTE *)v488)
              {
                v498 = &v489[v499 & 0xFFFFFFFFFFFFFFF8];
                v500 = 8 * (v499 >> 3);
                v501 = v489;
                v502 = v488;
                do
                {
                  v503 = *v502++;
                  *(_QWORD *)v501 = v503;
                  v501 += 8;
                  v500 -= 8;
                }
                while (v500);
              }
              *(_QWORD *)&v446 = v496;
              *((_QWORD *)&v446 + 1) = v489;
              *(_QWORD *)&v444 = v498;
              *((_QWORD *)&v444 + 1) = &v496[8 * v497];
              if (v488)
              {
                v689 = v444;
                v697 = v446;
                operator delete(v488);
                v444 = v689;
                v446 = v697;
              }
            }
            else
            {
              v491 = (uint64_t)(*((_QWORD *)&v444 + 1) - v444) >> 3;
              if (v491 >= -1)
                v492 = v491 + 1;
              else
                v492 = v491 + 2;
              v493 = v492 >> 1;
              v494 = v444 + 8 * (v492 >> 1);
              v489 = (char *)(v494 - (v444 - *((_QWORD *)&v446 + 1)));
              if ((_QWORD)v444 == *((_QWORD *)&v446 + 1))
              {
                v490 = (_BYTE *)*((_QWORD *)&v446 + 1);
              }
              else
              {
                v690 = *((_QWORD *)&v444 + 1);
                v696 = v446;
                memmove((void *)(v494 - (v444 - *((_QWORD *)&v446 + 1))), *((const void **)&v446 + 1), v444 - *((_QWORD *)&v446 + 1));
                *((_QWORD *)&v444 + 1) = v690;
                *(_QWORD *)&v446 = v696;
              }
              *((_QWORD *)&v446 + 1) = v489;
              *(_QWORD *)&v444 = &v490[8 * v493];
            }
          }
          else
          {
            v489 = (char *)*((_QWORD *)&v446 + 1);
          }
          v504 = *(_QWORD *)(i - 8);
          *((_QWORD *)v489 - 1) = v504;
          *((_QWORD *)&v446 + 1) -= 8;
        }
        v505 = (void *)*((_QWORD *)this + 1);
        *(_OWORD *)((char *)this + 8) = v446;
        *(_OWORD *)((char *)this + 24) = v444;
        if (v505)
          operator delete(v505);
        goto LABEL_1008;
      }
      v692 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152);
      if (strcmp(__s1, "zone"))
        goto LABEL_926;
      if (!a3 || (v114 = *a3) == 0)
      {
        LOBYTE(v115) = 0;
        LOBYTE(v116) = 0;
        v174 = 0;
        LOBYTE(v117) = 0;
        v175 = 0;
        v176 = 0;
        v177 = 0;
        v178 = 0;
        v179 = 0;
        v180 = 0;
        v181 = 0;
        LODWORD(v686) = v113;
        LODWORD(v685) = v113;
        LODWORD(v684) = v113;
        LODWORD(v679) = v113;
        LODWORD(v675) = v113;
        goto LABEL_436;
      }
      LOBYTE(v115) = 0;
      LOBYTE(v116) = 0;
      LOBYTE(v676) = 0;
      v678 = 0;
      LOBYTE(v117) = 0;
      LOBYTE(v680) = 0;
      v682 = 0;
      v673 = 0;
      v674 = 0;
      v671 = 0;
      LOBYTE(v672) = 0;
      v118 = 0;
      v119 = 0;
      v120 = (unsigned __int8 **)(a3 + 2);
      LODWORD(v686) = v692 - 480;
      LODWORD(v685) = v692 - 480;
      LODWORD(v684) = v692 - 480;
      LODWORD(v679) = v692 - 480;
      LODWORD(v675) = v692 - 480;
      while (1)
      {
        v121 = (char *)*(v120 - 1);
        if (!strcmp((const char *)v114, "minX"))
        {
          if (v118 && !v119)
          {
LABEL_594:
            v265 = 1;
            goto LABEL_597;
          }
          std::string::basic_string[abi:ne180100]<0>(buf, v121);
          v116 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          v686 = v116 >> 8;
          v115 = HIDWORD(v116);
        }
        else if (!strcmp((const char *)v114, "maxX"))
        {
          if (v118 && !v119)
            goto LABEL_594;
          std::string::basic_string[abi:ne180100]<0>(buf, v121);
          v117 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          v685 = v117 >> 8;
          v678 = (CA::ADMBuilder::Impl *)HIDWORD(v117);
        }
        else if (!strcmp((const char *)v114, "minY"))
        {
          if (v118 && !v119)
            goto LABEL_594;
          std::string::basic_string[abi:ne180100]<0>(buf, v121);
          v123 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          v682 = v123;
          v684 = v123 >> 8;
          v680 = HIDWORD(v123);
        }
        else if (!strcmp((const char *)v114, "maxY"))
        {
          if (v118 && !v119)
            goto LABEL_594;
          std::string::basic_string[abi:ne180100]<0>(buf, v121);
          v124 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          v679 = v124 >> 8;
          v674 = v124;
          v676 = HIDWORD(v124);
        }
        else if (!strcmp((const char *)v114, "minZ"))
        {
          if (v118 && !v119)
            goto LABEL_594;
          std::string::basic_string[abi:ne180100]<0>(buf, v121);
          v125 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          v675 = v125 >> 8;
          v672 = HIDWORD(v125);
          v673 = v125;
        }
        else
        {
          if (strcmp((const char *)v114, "maxZ"))
          {
            if (!strcmp((const char *)v114, "minAzimuth"))
            {
              if (v118 && v119 == 1)
                goto LABEL_594;
              std::string::basic_string[abi:ne180100]<0>(buf, v121);
              v116 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
              if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf[0].__r_.__value_.__l.__data_);
              v119 = 0;
              v118 = 1;
              v686 = v116 >> 8;
              v115 = HIDWORD(v116);
            }
            else if (!strcmp((const char *)v114, "maxAzimuth"))
            {
              if (v118 && v119 == 1)
                goto LABEL_594;
              std::string::basic_string[abi:ne180100]<0>(buf, v121);
              v117 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
              if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf[0].__r_.__value_.__l.__data_);
              v119 = 0;
              v118 = 1;
              v685 = v117 >> 8;
              v678 = (CA::ADMBuilder::Impl *)HIDWORD(v117);
            }
            else if (!strcmp((const char *)v114, "minElevation"))
            {
              if (v118 && v119 == 1)
                goto LABEL_594;
              std::string::basic_string[abi:ne180100]<0>(buf, v121);
              v127 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
              if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf[0].__r_.__value_.__l.__data_);
              v119 = 0;
              v118 = 1;
              v680 = HIDWORD(v127);
              v682 = v127;
              v684 = v127 >> 8;
            }
            else if (!strcmp((const char *)v114, "maxElevation"))
            {
              if (v118 && v119 == 1)
                goto LABEL_594;
              std::string::basic_string[abi:ne180100]<0>(buf, v121);
              v122 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
              if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf[0].__r_.__value_.__l.__data_);
              v119 = 0;
              v118 = 1;
              v679 = v122 >> 8;
              v676 = HIDWORD(v122);
              v674 = v122;
            }
            goto LABEL_269;
          }
          if (v118 && !v119)
            goto LABEL_594;
          std::string::basic_string[abi:ne180100]<0>(buf, v121);
          v671 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
        }
        v119 = 1;
        v118 = 1;
LABEL_269:
        v126 = *v120;
        v120 += 2;
        v114 = v126;
        if (!v126)
        {
          if (v118)
          {
            v265 = 0;
LABEL_597:
            v175 = v680;
            v176 = v682;
            v177 = v676;
            v174 = (char)v678;
            if (*(_BYTE *)(v692 - 151))
            {
              if (v119 != *(unsigned __int8 *)(v692 - 152))
                v265 = 1;
            }
            else
            {
              *(_WORD *)(v692 - 152) = v119 | 0x100;
            }
            v180 = v673;
            v178 = v674;
            v181 = v671;
            v179 = v672;
            if (!*((_DWORD *)this + 158) && v265)
            {
              v168 = CA::ADMBuilder::Impl::log(v678);
              if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v692 - 480, "");
                if (__p[23] >= 0)
                  v317 = __p;
                else
                  v317 = *(_BYTE **)__p;
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 574;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v317;
                v170 = "%25s:%-5d Conflicting coordinate systems used in block format '%s'";
LABEL_720:
                v318 = v168;
LABEL_721:
                _os_log_impl(&dword_18EE07000, v318, OS_LOG_TYPE_ERROR, v170, (uint8_t *)buf, 0x1Cu);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
              }
LABEL_723:
              v250 = -66603;
LABEL_771:
              *((_DWORD *)this + 158) = v250;
LABEL_772:
              v9 = 1;
              goto LABEL_926;
            }
          }
          else
          {
            v181 = v671;
            v179 = v672;
            v180 = v673;
            v178 = v674;
            v175 = v680;
            v176 = v682;
            v177 = v676;
            v174 = (char)v678;
          }
LABEL_436:
          v182 = *(_QWORD *)(v692 - 104);
          v183 = *(_QWORD *)(v692 - 96);
          if (v182 >= v183)
          {
            v681 = v175;
            v683 = v176;
            v677 = v177;
            v208 = *(_QWORD *)(v692 - 112);
            v209 = 0x8E38E38E38E38E39 * ((uint64_t)(v182 - v208) >> 3);
            v210 = v209 + 1;
            if (v209 + 1 > 0x38E38E38E38E38ELL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v211 = v117;
            v212 = v174;
            v213 = 0x8E38E38E38E38E39 * ((uint64_t)(v183 - v208) >> 3);
            if (2 * v213 > v210)
              v210 = 2 * v213;
            if (v213 >= 0x1C71C71C71C71C7)
              v214 = 0x38E38E38E38E38ELL;
            else
              v214 = v210;
            if (v214)
            {
              v215 = v178;
              v216 = v179;
              v217 = v180;
              v218 = v181;
              v214 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMZone>>(v214);
              v181 = v218;
              v180 = v217;
              v179 = v216;
              v178 = v215;
            }
            else
            {
              v219 = 0;
            }
            v280 = v214 + 72 * v209;
            *(_BYTE *)(v280 + 4) = v115;
            *(_DWORD *)v280 = v116 | ((_DWORD)v686 << 8);
            *(_BYTE *)(v280 + 12) = v212;
            v281 = v214 + 72 * v219;
            *(_DWORD *)(v280 + 8) = v211 | ((_DWORD)v685 << 8);
            *(_BYTE *)(v280 + 20) = v681;
            *(_DWORD *)(v280 + 16) = v683 | ((_DWORD)v684 << 8);
            *(_BYTE *)(v280 + 28) = v677;
            *(_DWORD *)(v280 + 24) = v178 | ((_DWORD)v679 << 8);
            *(_BYTE *)(v280 + 36) = v179;
            *(_DWORD *)(v280 + 32) = v180 | ((_DWORD)v675 << 8);
            *(_BYTE *)(v280 + 44) = BYTE4(v181);
            *(_DWORD *)(v280 + 40) = v181;
            *(_QWORD *)(v280 + 56) = 0;
            *(_QWORD *)(v280 + 64) = 0;
            *(_QWORD *)(v280 + 48) = 0;
            v184 = v280 + 72;
            v282 = *(char **)(v692 - 112);
            v283 = *(char **)(v692 - 104);
            if (v283 == v282)
            {
              *(_QWORD *)(v692 - 112) = v280;
              *(_QWORD *)(v692 - 104) = v184;
              *(_QWORD *)(v692 - 96) = v281;
            }
            else
            {
              do
              {
                v284 = *(_OWORD *)(v283 - 72);
                v285 = *(_OWORD *)(v283 - 56);
                *(_OWORD *)(v280 - 43) = *(_OWORD *)(v283 - 43);
                *(_OWORD *)(v280 - 56) = v285;
                *(_OWORD *)(v280 - 72) = v284;
                v286 = *(_OWORD *)(v283 - 24);
                *(_QWORD *)(v280 - 8) = *((_QWORD *)v283 - 1);
                *(_OWORD *)(v280 - 24) = v286;
                v280 -= 72;
                *((_QWORD *)v283 - 2) = 0;
                *((_QWORD *)v283 - 1) = 0;
                *((_QWORD *)v283 - 3) = 0;
                v283 -= 72;
              }
              while (v283 != v282);
              v287 = *(char **)(v692 - 112);
              v283 = *(char **)(v692 - 104);
              *(_QWORD *)(v692 - 112) = v280;
              *(_QWORD *)(v692 - 104) = v184;
              *(_QWORD *)(v692 - 96) = v281;
              if (v283 != v287)
              {
                do
                {
                  if (*(v283 - 1) < 0)
                    operator delete(*((void **)v283 - 3));
                  v283 -= 72;
                }
                while (v283 != v287);
                v283 = v287;
              }
            }
            if (v283)
              operator delete(v283);
          }
          else
          {
            *(_DWORD *)v182 = v116 | ((_DWORD)v686 << 8);
            *(_BYTE *)(v182 + 4) = v115;
            *(_DWORD *)(v182 + 8) = v117 | ((_DWORD)v685 << 8);
            *(_BYTE *)(v182 + 12) = v174;
            *(_DWORD *)(v182 + 16) = v176 | ((_DWORD)v684 << 8);
            *(_BYTE *)(v182 + 20) = v175;
            *(_DWORD *)(v182 + 24) = v178 | ((_DWORD)v679 << 8);
            *(_BYTE *)(v182 + 28) = v177;
            *(_DWORD *)(v182 + 32) = v180 | ((_DWORD)v675 << 8);
            *(_BYTE *)(v182 + 36) = v179;
            *(_DWORD *)(v182 + 40) = v181;
            *(_BYTE *)(v182 + 44) = BYTE4(v181);
            *(_QWORD *)(v182 + 56) = 0;
            *(_QWORD *)(v182 + 64) = 0;
            *(_QWORD *)(v182 + 48) = 0;
            v184 = v182 + 72;
            *(_QWORD *)(v692 - 104) = v182 + 72;
          }
          *(_QWORD *)(v692 - 104) = v184;
          v288 = (_QWORD *)operator new();
          *v288 = 0;
          v288[1] = 0;
          v288[2] = 0;
          v289 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v288;
          if (v289)
            std::default_delete<std::string>::operator()[abi:ne180100](v289);
          v9 = 79;
          goto LABEL_926;
        }
      }
    }
    switch(v8)
    {
      case 0:
        goto LABEL_9;
      case 1:
      case 4:
      case 5:
      case 7:
      case 10:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
        goto LABEL_926;
      case 2:
        v57 = CA::ADMBuilder::Impl::parse_model((int64_t)this, __s1, (const char **)a3);
LABEL_126:
        v9 = v57;
        goto LABEL_926;
      case 3:
        v65 = *(_QWORD *)(*(_QWORD *)this + 8);
        if (!strcmp(__s1, "audioProgrammeLabel"))
        {
          CA::ADMBuilder::Impl::label_from_attributes(buf, a3);
          v144 = *(_QWORD *)(v65 - 192);
          if (v144 >= *(_QWORD *)(v65 - 184))
          {
            v197 = std::vector<CA::ADMLabel>::__push_back_slow_path<CA::ADMLabel>((void **)(v65 - 200), (uint64_t)buf);
            v198 = buf[2].__r_.__value_.__s.__data_[7];
            *(_QWORD *)(v65 - 192) = v197;
            if (v198 < 0)
              operator delete((void *)buf[1].__r_.__value_.__l.__size_);
          }
          else
          {
            *(_BYTE *)v144 = 0;
            *(_BYTE *)(v144 + 24) = 0;
            if (buf[1].__r_.__value_.__s.__data_[0])
            {
              v145 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
              *(_QWORD *)(v144 + 16) = *((_QWORD *)&buf[0].__r_.__value_.__l + 2);
              *(_OWORD *)v144 = v145;
              memset(buf, 0, 24);
              *(_BYTE *)(v144 + 24) = 1;
            }
            v146 = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
            *(_QWORD *)(v144 + 48) = buf[2].__r_.__value_.__l.__data_;
            *(_OWORD *)(v144 + 32) = v146;
            memset(&buf[1].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
            *(_QWORD *)(v65 - 192) = v144 + 56;
          }
          if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          v199 = (_QWORD *)operator new();
          *v199 = 0;
          v199[1] = 0;
          v199[2] = 0;
          v200 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v199;
          if (v200)
            std::default_delete<std::string>::operator()[abi:ne180100](v200);
          v9 = 4;
        }
        else if (!strcmp(__s1, "audioContentIDRef"))
        {
          v171 = (_QWORD *)operator new();
          v171[1] = 0;
          v171[2] = 0;
          *v171 = 0;
          v172 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v171;
          if (v172)
            std::default_delete<std::string>::operator()[abi:ne180100](v172);
          v9 = 5;
        }
        else
        {
          if (!strcmp(__s1, "loudnessMetadata"))
            goto LABEL_502;
          if (!strcmp(__s1, "audioProgrammeReferenceScreen"))
          {
            *(_OWORD *)(v65 - 128) = 0u;
            v251 = v65 - 128;
            v252 = *(unsigned __int8 *)(v65 - 84);
            *(_OWORD *)(v251 + 16) = 0u;
            *(_OWORD *)(v251 + 28) = 0u;
            if (!v252)
              *(_BYTE *)(v65 - 84) = 1;
            if (a3 && (v253 = *a3) != 0)
            {
              v254 = (unsigned __int8 **)(a3 + 2);
              v9 = 6;
              do
              {
                if (!strcmp((const char *)v253, "aspectRatio"))
                {
                  std::string::basic_string[abi:ne180100]<0>(buf, (char *)*(v254 - 1));
                  v255 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
                  *(_DWORD *)v251 = v255;
                  *(_BYTE *)(v251 + 4) = BYTE4(v255);
                  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf[0].__r_.__value_.__l.__data_);
                }
                v256 = *v254;
                v254 += 2;
                v253 = v256;
              }
              while (v256);
            }
            else
            {
              v9 = 6;
            }
          }
          else if (!strcmp(__s1, "authoringInformation"))
          {
            v303 = (void **)(v65 - 80);
            v304 = 0uLL;
            memset(buf, 0, 48);
            v305 = (void **)(v65 - 56);
            if (*(_BYTE *)(v65 - 32))
            {
              v306 = *v303;
              if (*v303)
              {
                v307 = *(_QWORD *)(v65 - 72);
                v308 = *v303;
                if ((void *)v307 != v306)
                {
                  do
                    v307 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v307 - 16);
                  while ((void *)v307 != v306);
                  v308 = *v303;
                }
                *(_QWORD *)(v65 - 72) = v306;
                operator delete(v308);
                *v303 = 0;
                *(_QWORD *)(v65 - 72) = 0;
                *(_QWORD *)(v65 - 64) = 0;
                v304 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
              }
              *(_OWORD *)(v65 - 80) = v304;
              *(_QWORD *)(v65 - 64) = *((_QWORD *)&buf[0].__r_.__value_.__l + 2);
              memset(buf, 0, 24);
              v309 = *(_QWORD *)(v65 - 56);
              if (v309)
              {
                v310 = *(_QWORD *)(v65 - 48);
                v311 = *(void **)(v65 - 56);
                if (v310 != v309)
                {
                  do
                  {
                    v310 -= 120;
                    std::__destroy_at[abi:ne180100]<CA::ADMRenderer,0>(v310);
                  }
                  while (v310 != v309);
                  v311 = *v305;
                }
                *(_QWORD *)(v65 - 48) = v309;
                operator delete(v311);
                *v305 = 0;
                *(_QWORD *)(v65 - 48) = 0;
                *(_QWORD *)(v65 - 40) = 0;
              }
              *(std::string *)(v65 - 56) = buf[1];
              memset(&buf[1], 0, sizeof(std::string));
            }
            else
            {
              *v303 = 0;
              *(_QWORD *)(v65 - 72) = 0;
              *(_QWORD *)(v65 - 64) = 0;
              *(_QWORD *)(v65 - 64) = *((_QWORD *)&buf[0].__r_.__value_.__l + 2);
              memset(buf, 0, 24);
              *v305 = 0;
              *(_QWORD *)(v65 - 48) = 0;
              *(_QWORD *)(v65 - 40) = 0;
              *(std::string *)(v65 - 56) = buf[1];
              memset(&buf[1], 0, sizeof(std::string));
              *(_BYTE *)(v65 - 32) = 1;
            }
            *(_QWORD *)__p = &buf[1];
            std::vector<CA::ADMRenderer>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            *(_QWORD *)__p = buf;
            std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            v9 = 8;
          }
          else
          {
            if (strcmp(__s1, "alternativeValueSetIDRef"))
              goto LABEL_772;
            v66 = (_QWORD *)operator new();
            v66[1] = 0;
            v66[2] = 0;
            *v66 = 0;
            v67 = *((_QWORD *)this + 78);
            *((_QWORD *)this + 78) = v66;
            if (v67)
              std::default_delete<std::string>::operator()[abi:ne180100](v67);
            v9 = 13;
          }
        }
        goto LABEL_926;
      case 6:
        v62 = *(_QWORD *)(*(_QWORD *)this + 8);
        if (strcmp(__s1, "screenCentrePosition"))
        {
          if (strcmp(__s1, "screenWidth"))
          {
            if (!strcmp(__s1, "aspectRatio"))
            {
              v63 = (_QWORD *)operator new();
              v63[1] = 0;
              v63[2] = 0;
              *v63 = 0;
              v64 = *((_QWORD *)this + 78);
              *((_QWORD *)this + 78) = v63;
              if (v64)
                std::default_delete<std::string>::operator()[abi:ne180100](v64);
              v9 = 7;
            }
            goto LABEL_926;
          }
          if (!a3)
            goto LABEL_926;
          v163 = *a3;
          if (!*a3)
            goto LABEL_926;
          v138 = 0;
          v164 = (unsigned __int8 **)(a3 + 2);
          while (1)
          {
            v165 = (char *)*(v164 - 1);
            v141 = (CA::ADMBuilder::Impl *)strcmp((const char *)v163, "azimuth");
            if (!(_DWORD)v141)
              break;
            v141 = (CA::ADMBuilder::Impl *)strcmp((const char *)v163, "X");
            if (!(_DWORD)v141)
            {
              if (!*(_BYTE *)(v62 - 119) || *(_BYTE *)(v62 - 120))
              {
                *(_WORD *)(v62 - 120) = 257;
                std::string::basic_string[abi:ne180100]<0>(buf, v165);
                v141 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
                goto LABEL_415;
              }
LABEL_417:
              v138 = 1;
            }
LABEL_418:
            v167 = *v164;
            v164 += 2;
            v163 = v167;
            if (!v167)
            {
LABEL_419:
              if ((v138 & 1) == 0)
                goto LABEL_772;
              v168 = CA::ADMBuilder::Impl::log(v141);
              if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v62 - 368, "");
                if (__p[23] >= 0)
                  v169 = __p;
                else
                  v169 = *(_BYTE **)__p;
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseProgramme.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 141;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v169;
                v170 = "%25s:%-5d Conflicting coordinate systems used in programme '%s' reference screen";
                goto LABEL_720;
              }
              goto LABEL_723;
            }
          }
          if (*(_BYTE *)(v62 - 119))
            v166 = *(_BYTE *)(v62 - 120) == 0;
          else
            v166 = 1;
          if (v166)
          {
            *(_WORD *)(v62 - 120) = 256;
            std::string::basic_string[abi:ne180100]<0>(buf, v165);
            v141 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
LABEL_415:
            *(_DWORD *)(v62 - 92) = (_DWORD)v141;
            *(_BYTE *)(v62 - 88) = BYTE4(v141);
            if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf[0].__r_.__value_.__l.__data_);
            goto LABEL_418;
          }
          goto LABEL_417;
        }
        if (!a3)
          goto LABEL_926;
        v137 = *a3;
        if (!*a3)
          goto LABEL_926;
        v138 = 0;
        v139 = (unsigned __int8 **)(a3 + 2);
        while (1)
        {
          v140 = (char *)*(v139 - 1);
          v141 = (CA::ADMBuilder::Impl *)strcmp((const char *)v137, "azimuth");
          if (!(_DWORD)v141)
            break;
          v141 = (CA::ADMBuilder::Impl *)strcmp((const char *)v137, "elevation");
          if (!(_DWORD)v141)
          {
            if (!*(_BYTE *)(v62 - 119) || !*(_BYTE *)(v62 - 120))
            {
              *(_WORD *)(v62 - 120) = 256;
              std::string::basic_string[abi:ne180100]<0>(buf, v140);
              v141 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
              goto LABEL_325;
            }
            goto LABEL_337;
          }
          v141 = (CA::ADMBuilder::Impl *)strcmp((const char *)v137, "distance");
          if (!(_DWORD)v141)
          {
            if (!*(_BYTE *)(v62 - 119) || !*(_BYTE *)(v62 - 120))
            {
              *(_WORD *)(v62 - 120) = 256;
              std::string::basic_string[abi:ne180100]<0>(buf, v140);
              v141 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
LABEL_329:
              *(_DWORD *)(v62 - 100) = (_DWORD)v141;
              *(_BYTE *)(v62 - 96) = BYTE4(v141);
LABEL_330:
              if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf[0].__r_.__value_.__l.__data_);
              goto LABEL_338;
            }
            goto LABEL_337;
          }
          v141 = (CA::ADMBuilder::Impl *)strcmp((const char *)v137, "X");
          if (!(_DWORD)v141)
          {
            if (!*(_BYTE *)(v62 - 119) || *(_BYTE *)(v62 - 120))
            {
              *(_WORD *)(v62 - 120) = 257;
              std::string::basic_string[abi:ne180100]<0>(buf, v140);
              v141 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
LABEL_321:
              *(_DWORD *)(v62 - 116) = (_DWORD)v141;
              *(_BYTE *)(v62 - 112) = BYTE4(v141);
              goto LABEL_330;
            }
            goto LABEL_337;
          }
          v141 = (CA::ADMBuilder::Impl *)strcmp((const char *)v137, "Y");
          if (!(_DWORD)v141)
          {
            if (!*(_BYTE *)(v62 - 119) || *(_BYTE *)(v62 - 120))
            {
              *(_WORD *)(v62 - 120) = 257;
              std::string::basic_string[abi:ne180100]<0>(buf, v140);
              v141 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
LABEL_325:
              *(_DWORD *)(v62 - 108) = (_DWORD)v141;
              *(_BYTE *)(v62 - 104) = BYTE4(v141);
              goto LABEL_330;
            }
            goto LABEL_337;
          }
          v141 = (CA::ADMBuilder::Impl *)strcmp((const char *)v137, "Z");
          if (!(_DWORD)v141)
          {
            if (!*(_BYTE *)(v62 - 119) || *(_BYTE *)(v62 - 120))
            {
              *(_WORD *)(v62 - 120) = 257;
              std::string::basic_string[abi:ne180100]<0>(buf, v140);
              v141 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
              goto LABEL_329;
            }
            goto LABEL_337;
          }
LABEL_338:
          v143 = *v139;
          v139 += 2;
          v137 = v143;
          if (!v143)
            goto LABEL_419;
        }
        if (*(_BYTE *)(v62 - 119))
          v142 = *(_BYTE *)(v62 - 120) == 0;
        else
          v142 = 1;
        if (v142)
        {
          *(_WORD *)(v62 - 120) = 256;
          std::string::basic_string[abi:ne180100]<0>(buf, v140);
          v141 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
          goto LABEL_321;
        }
LABEL_337:
        v138 = 1;
        goto LABEL_338;
      case 8:
        v72 = *(_QWORD *)(*(_QWORD *)this + 8);
        if (!strcmp(__s1, "referenceLayout"))
        {
          v9 = 9;
        }
        else
        {
          if (strcmp(__s1, "renderer"))
            goto LABEL_772;
          memset(buf, 0, sizeof(buf));
          v73 = *(_QWORD *)(v72 - 48);
          v74 = *(_QWORD *)(v72 - 40);
          if (v73 >= v74)
          {
            v239 = *(_QWORD *)(v72 - 56);
            v240 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v73 - v239) >> 3);
            if (v240 + 1 > 0x222222222222222)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v241 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v74 - v239) >> 3);
            v242 = 2 * v241;
            if (2 * v241 <= v240 + 1)
              v242 = v240 + 1;
            if (v241 >= 0x111111111111111)
              v243 = 0x222222222222222;
            else
              v243 = v242;
            if (v243)
            {
              if (v243 > 0x222222222222222)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v244 = (char *)operator new(120 * v243);
            }
            else
            {
              v244 = 0;
            }
            v319 = &v244[120 * v243];
            std::construct_at[abi:ne180100]<CA::ADMRenderer,CA::ADMRenderer,CA::ADMRenderer*>((uint64_t)&v244[120 * v240], (__int128 *)buf);
            v76 = v320 + 120;
            v322 = *(__int128 **)(v72 - 56);
            v321 = *(__int128 **)(v72 - 48);
            if (v321 == v322)
            {
              *(_QWORD *)(v72 - 56) = v320;
              *(_QWORD *)(v72 - 48) = v76;
              *(_QWORD *)(v72 - 40) = v319;
            }
            else
            {
              do
              {
                v321 = (__int128 *)((char *)v321 - 120);
                std::construct_at[abi:ne180100]<CA::ADMRenderer,CA::ADMRenderer,CA::ADMRenderer*>(v320 - 120, v321);
              }
              while (v321 != v322);
              v323 = *(__int128 **)(v72 - 56);
              v321 = *(__int128 **)(v72 - 48);
              *(_QWORD *)(v72 - 56) = v320;
              *(_QWORD *)(v72 - 48) = v76;
              *(_QWORD *)(v72 - 40) = v319;
              if (v321 != v323)
              {
                do
                {
                  v321 = (__int128 *)((char *)v321 - 120);
                  std::__destroy_at[abi:ne180100]<CA::ADMRenderer,0>((uint64_t)v321);
                }
                while (v321 != v323);
                v321 = v323;
              }
            }
            if (v321)
              operator delete(v321);
          }
          else
          {
            std::construct_at[abi:ne180100]<CA::ADMRenderer,CA::ADMRenderer,CA::ADMRenderer*>(v73, (__int128 *)buf);
            v76 = v75 + 120;
            *(_QWORD *)(v72 - 48) = v75 + 120;
          }
          *(_QWORD *)(v72 - 48) = v76;
          *(_QWORD *)__p = &buf[4];
          std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (buf[3].__r_.__value_.__s.__data_[16] && buf[3].__r_.__value_.__s.__data_[15] < 0)
            operator delete((void *)buf[2].__r_.__value_.__r.__words[2]);
          if (buf[2].__r_.__value_.__s.__data_[8] && buf[2].__r_.__value_.__s.__data_[7] < 0)
            operator delete((void *)buf[1].__r_.__value_.__l.__size_);
          if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          v324 = *(_QWORD *)(v72 - 48);
          v325 = (void ***)(*((_QWORD *)this + 47) - 24);
          memset(buf, 0, 24);
          std::vector<std::vector<std::string>>::push_back[abi:ne180100](v325, (uint64_t)buf);
          *(_QWORD *)__p = buf;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (a3 && (v326 = *a3) != 0)
          {
            v327 = (unsigned __int8 **)(a3 + 2);
            do
            {
              v328 = (std::string::value_type *)*(v327 - 1);
              v329 = strcmp((const char *)v326, "uri");
              v330 = (std::string *)(v324 - 120);
              if (!v329
                || (v331 = strcmp((const char *)v326, "name"), v330 = (std::string *)(v324 - 88), !v331)
                || (v332 = strcmp((const char *)v326, "version"), v330 = (std::string *)(v324 - 56), !v332))
              {
                std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v330, v328);
              }
              v333 = *v327;
              v327 += 2;
              v326 = v333;
              v9 = 11;
            }
            while (v333);
          }
          else
          {
            v9 = 11;
          }
        }
        goto LABEL_926;
      case 9:
        if (!strcmp(__s1, "audioPackFormatIDRef"))
        {
          v68 = (_QWORD *)operator new();
          v68[1] = 0;
          v68[2] = 0;
          *v68 = 0;
          v69 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v68;
          if (v69)
            std::default_delete<std::string>::operator()[abi:ne180100](v69);
          v9 = 10;
        }
        goto LABEL_926;
      case 11:
        if (!strcmp(__s1, "audioPackFormatIDRef"))
        {
          v70 = (_QWORD *)operator new();
          v70[1] = 0;
          v70[2] = 0;
          *v70 = 0;
          v71 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v70;
          if (v71)
            std::default_delete<std::string>::operator()[abi:ne180100](v71);
          v9 = 12;
        }
        goto LABEL_926;
      case 14:
        if (!strcmp(__s1, "integratedLoudness"))
        {
          v30 = (_QWORD *)operator new();
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          v31 = *((_QWORD *)this + 78);
          v9 = 15;
        }
        else if (!strcmp(__s1, "loudnessRange"))
        {
          v30 = (_QWORD *)operator new();
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          v31 = *((_QWORD *)this + 78);
          v9 = 16;
        }
        else if (!strcmp(__s1, "maxTruePeak"))
        {
          v30 = (_QWORD *)operator new();
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          v31 = *((_QWORD *)this + 78);
          v9 = 17;
        }
        else if (!strcmp(__s1, "maxMomentary"))
        {
          v30 = (_QWORD *)operator new();
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          v31 = *((_QWORD *)this + 78);
          v9 = 18;
        }
        else if (!strcmp(__s1, "maxShortTerm"))
        {
          v30 = (_QWORD *)operator new();
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          v31 = *((_QWORD *)this + 78);
          v9 = 19;
        }
        else
        {
          if (strcmp(__s1, "dialogueLoudness"))
            goto LABEL_926;
          v30 = (_QWORD *)operator new();
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          v31 = *((_QWORD *)this + 78);
          v9 = 20;
        }
        goto LABEL_924;
      case 21:
        v58 = *(_QWORD *)(*(_QWORD *)this + 32);
        if (!strcmp(__s1, "audioContentLabel"))
        {
          v133 = *(_QWORD *)(v58 - 16);
          CA::ADMBuilder::Impl::label_from_attributes(buf, a3);
          v134 = *(_QWORD *)(v133 + 104);
          if (v134 >= *(_QWORD *)(v133 + 112))
          {
            v193 = std::vector<CA::ADMLabel>::__push_back_slow_path<CA::ADMLabel>((void **)(v133 + 96), (uint64_t)buf);
            v194 = buf[2].__r_.__value_.__s.__data_[7];
            *(_QWORD *)(v133 + 104) = v193;
            if (v194 < 0)
              operator delete((void *)buf[1].__r_.__value_.__l.__size_);
          }
          else
          {
            *(_BYTE *)v134 = 0;
            *(_BYTE *)(v134 + 24) = 0;
            if (buf[1].__r_.__value_.__s.__data_[0])
            {
              v135 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
              *(_QWORD *)(v134 + 16) = *((_QWORD *)&buf[0].__r_.__value_.__l + 2);
              *(_OWORD *)v134 = v135;
              memset(buf, 0, 24);
              *(_BYTE *)(v134 + 24) = 1;
            }
            v136 = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
            *(_QWORD *)(v134 + 48) = buf[2].__r_.__value_.__l.__data_;
            *(_OWORD *)(v134 + 32) = v136;
            memset(&buf[1].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
            *(_QWORD *)(v133 + 104) = v134 + 56;
          }
          if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          v195 = (_QWORD *)operator new();
          *v195 = 0;
          v195[1] = 0;
          v195[2] = 0;
          v196 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v195;
          if (v196)
            std::default_delete<std::string>::operator()[abi:ne180100](v196);
          v9 = 22;
          goto LABEL_926;
        }
        if (!strcmp(__s1, "audioObjectIDRef"))
        {
          v161 = (_QWORD *)operator new();
          v161[1] = 0;
          v161[2] = 0;
          *v161 = 0;
          v162 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v161;
          if (v162)
            std::default_delete<std::string>::operator()[abi:ne180100](v162);
          v9 = 23;
          goto LABEL_926;
        }
        if (!strcmp(__s1, "loudnessMetadata"))
        {
LABEL_502:
          CA::ADMBuilder::Impl::loudness_metadata_from_attributes((CA::ADMBuilder::Impl *)buf, (const char **)a3);
          v226 = *((_QWORD *)this + 77);
          *((_QWORD *)this + 77) = buf[0].__r_.__value_.__r.__words[0];
          if (v226)
            std::default_delete<CA::ADMLoudnessMetadata>::operator()[abi:ne180100](v226);
          v9 = 14;
          goto LABEL_926;
        }
        v59 = (CA::ADMBuilder::Impl *)strcmp(__s1, "dialogue");
        if ((_DWORD)v59)
        {
          if (!strcmp(__s1, "alternativeValueSetIDRef"))
          {
            v60 = (_QWORD *)operator new();
            v60[1] = 0;
            v60[2] = 0;
            *v60 = 0;
            v61 = *((_QWORD *)this + 78);
            *((_QWORD *)this + 78) = v60;
            if (v61)
              std::default_delete<std::string>::operator()[abi:ne180100](v61);
            v9 = 25;
          }
          goto LABEL_926;
        }
        v247 = *(_QWORD *)(v58 - 16);
        if (*(_BYTE *)(v247 + 171))
        {
          v248 = CA::ADMBuilder::Impl::log(v59);
          if (os_log_type_enabled(v248, OS_LOG_TYPE_ERROR))
          {
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v58 - 16), "");
            v249 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseContent.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 29;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v249;
            _os_log_impl(&dword_18EE07000, v248, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple dialogue sub-elements for content '%s'", (uint8_t *)buf, 0x1Cu);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          v250 = -66590;
          goto LABEL_771;
        }
        *(_DWORD *)(v247 + 168) = 0x1000000;
        if (!a3)
          goto LABEL_857;
        v347 = *a3;
        if (!*a3)
          goto LABEL_857;
        v348 = (unsigned __int8 **)(a3 + 2);
        while (1)
        {
          v349 = (char *)*(v348 - 1);
          v350 = (CA::ADMBuilder::Impl *)strcmp((const char *)v347, "nonDialogueContentKind");
          if (!(_DWORD)v350)
            break;
          v351 = (CA::ADMBuilder::Impl *)strcmp((const char *)v347, "dialogueContentKind");
          if (!(_DWORD)v351)
          {
            v360 = *(_QWORD *)(v58 - 16);
            if (!*(_BYTE *)(v360 + 169) || *(_BYTE *)(v360 + 168) == 1)
            {
              *(_WORD *)(v360 + 168) = 257;
              std::string::basic_string[abi:ne180100]<0>(buf, v349);
              v361 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_uint((uint64_t)this, buf);
              v362 = v361;
              if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf[0].__r_.__value_.__l.__data_);
              if ((unint64_t)v362 >> 32)
              {
                switch((int)v362)
                {
                  case 0:
                    goto LABEL_819;
                  case 1:
                    goto LABEL_832;
                  case 2:
                    goto LABEL_831;
                  case 3:
LABEL_814:
                    v363 = *(_QWORD *)(v58 - 16);
                    v364 = 3;
                    goto LABEL_842;
                  default:
                    v374 = CA::ADMBuilder::Impl::log(v361);
                    if (os_log_type_enabled(v374, OS_LOG_TYPE_ERROR))
                    {
                      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v58 - 16), "");
                      v375 = __p;
                      if (__p[23] < 0)
                        v375 = *(_BYTE **)__p;
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseContent.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 119;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v375;
                      _os_log_impl(&dword_18EE07000, v374, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown dialogue kind in content '%s'", (uint8_t *)buf, 0x1Cu);
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                    }
                    v373 = -66600;
                    goto LABEL_855;
                }
              }
              goto LABEL_856;
            }
            v367 = CA::ADMBuilder::Impl::log(v351);
            if (!os_log_type_enabled(v367, OS_LOG_TYPE_ERROR))
              goto LABEL_830;
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v58 - 16), "");
            v368 = __p;
            if (__p[23] < 0)
              v368 = *(_BYTE **)__p;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseContent.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 93;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v368;
            v359 = v367;
LABEL_828:
            _os_log_impl(&dword_18EE07000, v359, OS_LOG_TYPE_ERROR, "%25s:%-5d Conflicting dialogue type in content '%s'", (uint8_t *)buf, 0x1Cu);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            goto LABEL_830;
          }
          v352 = (CA::ADMBuilder::Impl *)strcmp((const char *)v347, "mixedContentKind");
          if (!(_DWORD)v352)
          {
            v353 = *(_QWORD *)(v58 - 16);
            if (!*(_BYTE *)(v353 + 169) || *(_BYTE *)(v353 + 168) == 2)
            {
              *(_WORD *)(v353 + 168) = 258;
              std::string::basic_string[abi:ne180100]<0>(buf, v349);
              v354 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_uint((uint64_t)this, buf);
              v355 = v354;
              if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf[0].__r_.__value_.__l.__data_);
              if ((unint64_t)v355 >> 32)
              {
                switch((int)v355)
                {
                  case 0:
                    goto LABEL_819;
                  case 1:
                    goto LABEL_832;
                  case 2:
                    goto LABEL_831;
                  case 3:
                    goto LABEL_814;
                  default:
                    v376 = CA::ADMBuilder::Impl::log(v354);
                    if (os_log_type_enabled(v376, OS_LOG_TYPE_ERROR))
                    {
                      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v58 - 16), "");
                      v377 = __p;
                      if (__p[23] < 0)
                        v377 = *(_BYTE **)__p;
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseContent.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 156;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v377;
                      _os_log_impl(&dword_18EE07000, v376, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown dialogue kind in content '%s'", (uint8_t *)buf, 0x1Cu);
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                    }
                    v373 = -66599;
                    goto LABEL_855;
                }
              }
              goto LABEL_856;
            }
            v369 = CA::ADMBuilder::Impl::log(v352);
            if (os_log_type_enabled(v369, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v58 - 16), "");
              v370 = __p;
              if (__p[23] < 0)
                v370 = *(_BYTE **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseContent.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 130;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v370;
              v359 = v369;
              goto LABEL_828;
            }
LABEL_830:
            *((_DWORD *)this + 158) = -66602;
          }
LABEL_856:
          v378 = *v348;
          v348 += 2;
          v347 = v378;
          if (!v378)
          {
LABEL_857:
            v379 = (_QWORD *)operator new();
            *v379 = 0;
            v379[1] = 0;
            v379[2] = 0;
            v380 = *((_QWORD *)this + 78);
            *((_QWORD *)this + 78) = v379;
            if (v380)
              std::default_delete<std::string>::operator()[abi:ne180100](v380);
            v9 = 24;
            goto LABEL_926;
          }
        }
        v356 = *(_QWORD *)(v58 - 16);
        if (!*(_BYTE *)(v356 + 169) || !*(_BYTE *)(v356 + 168))
        {
          *(_WORD *)(v356 + 168) = 256;
          std::string::basic_string[abi:ne180100]<0>(buf, v349);
          v365 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_uint((uint64_t)this, buf);
          v366 = v365;
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          if ((unint64_t)v366 >> 32)
          {
            switch((int)v366)
            {
              case 0:
LABEL_819:
                *(_BYTE *)(*(_QWORD *)(v58 - 16) + 170) = 0;
                goto LABEL_856;
              case 1:
LABEL_832:
                v363 = *(_QWORD *)(v58 - 16);
                v364 = 1;
                goto LABEL_842;
              case 2:
LABEL_831:
                v363 = *(_QWORD *)(v58 - 16);
                v364 = 2;
                goto LABEL_842;
              case 4:
                v363 = *(_QWORD *)(v58 - 16);
                v364 = 4;
                goto LABEL_842;
              case 5:
                v363 = *(_QWORD *)(v58 - 16);
                v364 = 5;
                goto LABEL_842;
              case 6:
                v363 = *(_QWORD *)(v58 - 16);
                v364 = 6;
LABEL_842:
                *(_BYTE *)(v363 + 170) = v364;
                break;
              default:
                v371 = CA::ADMBuilder::Impl::log(v365);
                if (os_log_type_enabled(v371, OS_LOG_TYPE_ERROR))
                {
                  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v58 - 16), "");
                  v372 = __p;
                  if (__p[23] < 0)
                    v372 = *(_BYTE **)__p;
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseContent.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 82;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v372;
                  _os_log_impl(&dword_18EE07000, v371, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown non-dialogue kind in content '%s'", (uint8_t *)buf, 0x1Cu);
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                }
                v373 = -66601;
LABEL_855:
                *((_DWORD *)this + 158) = v373;
                break;
            }
          }
          goto LABEL_856;
        }
        v357 = CA::ADMBuilder::Impl::log(v350);
        if (!os_log_type_enabled(v357, OS_LOG_TYPE_ERROR))
          goto LABEL_830;
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(_QWORD *)(v58 - 16), "");
        v358 = __p;
        if (__p[23] < 0)
          v358 = *(_BYTE **)__p;
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseContent.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 42;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v358;
        v359 = v357;
        goto LABEL_828;
      default:
        if (v8 != 26)
          goto LABEL_926;
        v32 = *(_QWORD *)(*(_QWORD *)this + 56);
        v34 = *(_QWORD *)(v32 - 16);
        v33 = *(std::__shared_weak_count **)(v32 - 8);
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v36 = __ldxr(p_shared_owners);
          while (__stxr(v36 + 1, p_shared_owners));
        }
        if (!strcmp(__s1, "audioPackFormatIDRef"))
        {
          v158 = (_QWORD *)operator new();
          *v158 = 0;
          v158[1] = 0;
          v158[2] = 0;
          v159 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v158;
          if (v159)
            std::default_delete<std::string>::operator()[abi:ne180100](v159);
          v9 = 28;
          if (!v33)
            goto LABEL_926;
          goto LABEL_1257;
        }
        if (!strcmp(__s1, "audioObjectIDRef"))
        {
          v187 = (_QWORD *)operator new();
          *v187 = 0;
          v187[1] = 0;
          v187[2] = 0;
          v188 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v187;
          if (v188)
            std::default_delete<std::string>::operator()[abi:ne180100](v188);
          v9 = 27;
          if (!v33)
            goto LABEL_926;
          goto LABEL_1257;
        }
        if (!strcmp(__s1, "audioObjectLabel"))
        {
          CA::ADMBuilder::Impl::label_from_attributes(buf, a3);
          v236 = *(_QWORD *)(v34 + 200);
          if (v236 >= *(_QWORD *)(v34 + 208))
          {
            v276 = std::vector<CA::ADMLabel>::__push_back_slow_path<CA::ADMLabel>((void **)(v34 + 192), (uint64_t)buf);
            v277 = buf[2].__r_.__value_.__s.__data_[7];
            *(_QWORD *)(v34 + 200) = v276;
            if (v277 < 0)
              operator delete((void *)buf[1].__r_.__value_.__l.__size_);
          }
          else
          {
            *(_BYTE *)v236 = 0;
            *(_BYTE *)(v236 + 24) = 0;
            if (buf[1].__r_.__value_.__s.__data_[0])
            {
              v237 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
              *(_QWORD *)(v236 + 16) = *((_QWORD *)&buf[0].__r_.__value_.__l + 2);
              *(_OWORD *)v236 = v237;
              memset(buf, 0, 24);
              *(_BYTE *)(v236 + 24) = 1;
            }
            v238 = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
            *(_QWORD *)(v236 + 48) = buf[2].__r_.__value_.__l.__data_;
            *(_OWORD *)(v236 + 32) = v238;
            memset(&buf[1].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
            *(_QWORD *)(v34 + 200) = v236 + 56;
          }
          if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          v278 = (_QWORD *)operator new();
          *v278 = 0;
          v278[1] = 0;
          v278[2] = 0;
          v279 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v278;
          if (v279)
            std::default_delete<std::string>::operator()[abi:ne180100](v279);
          v9 = 29;
          if (!v33)
            goto LABEL_926;
          goto LABEL_1257;
        }
        if (!strcmp(__s1, "audioComplementaryObjectGroupLabel"))
        {
          CA::ADMBuilder::Impl::label_from_attributes(buf, a3);
          v262 = *(_QWORD *)(v34 + 224);
          if (v262 >= *(_QWORD *)(v34 + 232))
          {
            v334 = std::vector<CA::ADMLabel>::__push_back_slow_path<CA::ADMLabel>((void **)(v34 + 216), (uint64_t)buf);
            v335 = buf[2].__r_.__value_.__s.__data_[7];
            *(_QWORD *)(v34 + 224) = v334;
            if (v335 < 0)
              operator delete((void *)buf[1].__r_.__value_.__l.__size_);
          }
          else
          {
            *(_BYTE *)v262 = 0;
            *(_BYTE *)(v262 + 24) = 0;
            if (buf[1].__r_.__value_.__s.__data_[0])
            {
              v263 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
              *(_QWORD *)(v262 + 16) = *((_QWORD *)&buf[0].__r_.__value_.__l + 2);
              *(_OWORD *)v262 = v263;
              memset(buf, 0, 24);
              *(_BYTE *)(v262 + 24) = 1;
            }
            v264 = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
            *(_QWORD *)(v262 + 48) = buf[2].__r_.__value_.__l.__data_;
            *(_OWORD *)(v262 + 32) = v264;
            memset(&buf[1].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
            *(_QWORD *)(v34 + 224) = v262 + 56;
          }
          if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          v336 = (_QWORD *)operator new();
          *v336 = 0;
          v336[1] = 0;
          v336[2] = 0;
          v337 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v336;
          if (v337)
            std::default_delete<std::string>::operator()[abi:ne180100](v337);
          v9 = 30;
          if (!v33)
            goto LABEL_926;
          goto LABEL_1257;
        }
        if (!strcmp(__s1, "audioComplementaryObjectIDRef"))
        {
          v315 = (_QWORD *)operator new();
          *v315 = 0;
          v315[1] = 0;
          v315[2] = 0;
          v316 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v315;
          if (v316)
            std::default_delete<std::string>::operator()[abi:ne180100](v316);
          v9 = 31;
          if (!v33)
            goto LABEL_926;
          goto LABEL_1257;
        }
        if (!strcmp(__s1, "audioTrackUIDRef"))
        {
          v387 = (_QWORD *)operator new();
          *v387 = 0;
          v387[1] = 0;
          v387[2] = 0;
          v388 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v387;
          if (v388)
            std::default_delete<std::string>::operator()[abi:ne180100](v388);
          v9 = 32;
          if (!v33)
            goto LABEL_926;
          goto LABEL_1257;
        }
        if (!strcmp(__s1, "audioObjectInteraction"))
        {
          CA::ADMBuilder::Impl::parse_interaction((CA::ADMBuilder::Impl *)buf, (const unsigned __int8 **)this, (const char **)a3);
          v396 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) - 16);
          v397 = (_OWORD *)(v396 + 288);
          v398 = *(_OWORD *)&buf[2].__r_.__value_.__l.__data_;
          if (*(_BYTE *)(v396 + 372))
          {
            *(_OWORD *)(v396 + 320) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
            *(_OWORD *)(v396 + 336) = v398;
            *(_OWORD *)(v396 + 352) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2];
            *(_WORD *)(v396 + 368) = buf[3].__r_.__value_.__r.__words[1];
            v399 = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
            *v397 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
            *(_OWORD *)(v396 + 304) = v399;
          }
          else
          {
            *(_OWORD *)(v396 + 320) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
            *(_OWORD *)(v396 + 336) = v398;
            *(_OWORD *)(v396 + 352) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2];
            *(_DWORD *)(v396 + 368) = buf[3].__r_.__value_.__r.__words[1];
            v521 = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
            *v397 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
            *(_OWORD *)(v396 + 304) = v521;
            *(_BYTE *)(v396 + 372) = 1;
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)this + 800);
          v9 = 33;
          if (!v33)
            goto LABEL_926;
          goto LABEL_1257;
        }
        if (!strcmp(__s1, "gain"))
        {
          if (!*(_BYTE *)(v34 + 384))
            *(_BYTE *)(v34 + 384) = 1;
          *(_QWORD *)(v34 + 376) = 0;
          if (a3)
          {
            v402 = *a3;
            if (*a3)
            {
              v403 = (unsigned __int8 **)(a3 + 2);
              do
              {
                if (!strcmp((const char *)v402, "gainUnit"))
                {
                  std::string::basic_string[abi:ne180100]<0>(buf, (char *)*(v403 - 1));
                  v404 = CA::ADMBuilder::Impl::parse_gain_unit((uint64_t)this, (uint64_t *)buf);
                  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf[0].__r_.__value_.__l.__data_);
                  if (v404 >= 0x100u)
                    *(_BYTE *)(v34 + 380) = v404;
                }
                v405 = *v403;
                v403 += 2;
                v402 = v405;
              }
              while (v405);
            }
          }
          v406 = (_QWORD *)operator new();
          v407 = v34 + 376;
          *v406 = 0;
          v406[1] = 0;
          v406[2] = 0;
          v408 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v406;
          if (v408)
            std::default_delete<std::string>::operator()[abi:ne180100](v408);
          *((_QWORD *)this + 76) = v407;
        }
        else
        {
          if (!strcmp(__s1, "headLocked"))
          {
            v519 = (_QWORD *)operator new();
            *v519 = 0;
            v519[1] = 0;
            v519[2] = 0;
            v520 = *((_QWORD *)this + 78);
            *((_QWORD *)this + 78) = v519;
            if (v520)
              std::default_delete<std::string>::operator()[abi:ne180100](v520);
            v9 = 34;
            if (!v33)
              goto LABEL_926;
            goto LABEL_1257;
          }
          v37 = (char *)strcmp(__s1, "positionOffset");
          if ((_DWORD)v37)
          {
            if (strcmp(__s1, "mute"))
            {
              if (!strcmp(__s1, "alternativeValueSet"))
              {
                buf[0].__r_.__value_.__s.__data_[0] = 0;
                buf[1].__r_.__value_.__s.__data_[0] = 0;
                BYTE4(v704) = 0;
                BYTE8(v704) = 0;
                LOBYTE(v705) = 0;
                WORD2(v705) = 0;
                BYTE8(v705) = 0;
                BYTE12(v705) = 0;
                LOBYTE(v706) = 0;
                BYTE4(v706) = 0;
                BYTE8(v706) = 0;
                BYTE12(v706) = 0;
                LOWORD(v707) = 0;
                memset(&buf[1].__r_.__value_.__r.__words[1], 0, 25);
                if (a3)
                {
                  v38 = *a3;
                  if (*a3)
                  {
                    v39 = (unsigned __int8 **)(a3 + 2);
                    do
                    {
                      if (!strcmp((const char *)v38, "alternativeValueSetID"))
                        std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(buf, (std::string::value_type *)*(v39 - 1));
                      v40 = *v39;
                      v39 += 2;
                      v38 = v40;
                    }
                    while (v40);
                  }
                }
                v41 = *(_QWORD *)(v34 + 432);
                v42 = *(_QWORD *)(v34 + 440);
                if (v41 >= v42)
                {
                  v584 = *(_QWORD *)(v34 + 424);
                  v585 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - v584) >> 6);
                  v586 = v585 + 1;
                  if (v585 + 1 > 0x155555555555555)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v587 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v584) >> 6);
                  if (2 * v587 > v586)
                    v586 = 2 * v587;
                  if (v587 >= 0xAAAAAAAAAAAAAALL)
                    v588 = 0x155555555555555;
                  else
                    v588 = v586;
                  if (v588)
                  {
                    if (v588 > 0x155555555555555)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v589 = (char *)operator new(192 * v588);
                  }
                  else
                  {
                    v589 = 0;
                  }
                  v615 = (std::string *)&v589[192 * v585];
                  v615->__r_.__value_.__s.__data_[0] = 0;
                  v615[1].__r_.__value_.__s.__data_[0] = 0;
                  if (buf[1].__r_.__value_.__s.__data_[0])
                  {
                    *v615 = buf[0];
                    memset(buf, 0, 24);
                    v615[1].__r_.__value_.__s.__data_[0] = 1;
                  }
                  v616 = &v589[192 * v585];
                  *((_QWORD *)v616 + 6) = buf[2].__r_.__value_.__l.__data_;
                  *((_OWORD *)v616 + 2) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
                  v617 = &v589[192 * v588];
                  memset(&buf[1].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
                  *(_OWORD *)(v616 + 120) = v703;
                  *(_OWORD *)(v616 + 104) = *(_OWORD *)&buf[4].__r_.__value_.__r.__words[1];
                  *(_OWORD *)(v616 + 88) = *(_OWORD *)&buf[3].__r_.__value_.__r.__words[2];
                  *(_OWORD *)(v616 + 72) = *(_OWORD *)&buf[3].__r_.__value_.__l.__data_;
                  *((_WORD *)v616 + 92) = (_WORD)v707;
                  *(_OWORD *)(v616 + 168) = v706;
                  *(_OWORD *)(v616 + 152) = v705;
                  *(_OWORD *)(v616 + 136) = v704;
                  *(_OWORD *)(v616 + 56) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[1];
                  v50 = v615 + 8;
                  v618 = *(char **)(v34 + 424);
                  v619 = *(char **)(v34 + 432);
                  if (v619 == v618)
                  {
                    *(_QWORD *)(v34 + 424) = v615;
                    *(_QWORD *)(v34 + 432) = v50;
                    *(_QWORD *)(v34 + 440) = v617;
                  }
                  else
                  {
                    v620 = 0;
                    do
                    {
                      v621 = &v615[v620];
                      v615[v620 - 8].__r_.__value_.__s.__data_[0] = 0;
                      v622 = &v619[v620 * 24];
                      v615[v620 - 7].__r_.__value_.__s.__data_[0] = 0;
                      if (v619[v620 * 24 - 168])
                      {
                        v623 = v622 - 192;
                        v624 = *((_OWORD *)v622 - 12);
                        *((_QWORD *)&v615[v620 - 7] - 1) = *((_QWORD *)v622 - 22);
                        *(_OWORD *)&v615[v620 - 8].__r_.__value_.__l.__data_ = v624;
                        *((_QWORD *)v623 + 1) = 0;
                        *((_QWORD *)v623 + 2) = 0;
                        *(_QWORD *)v623 = 0;
                        v621[-7].__r_.__value_.__s.__data_[0] = 1;
                      }
                      v621[-7].__r_.__value_.__l.__size_ = 0;
                      v621[-7].__r_.__value_.__r.__words[2] = 0;
                      v621[-6].__r_.__value_.__r.__words[0] = 0;
                      *(_OWORD *)&v621[-7].__r_.__value_.__r.__words[1] = *((_OWORD *)v622 - 10);
                      v621[-6].__r_.__value_.__r.__words[0] = *((_QWORD *)v622 - 18);
                      *((_QWORD *)v622 - 19) = 0;
                      *((_QWORD *)v622 - 18) = 0;
                      *((_QWORD *)v622 - 20) = 0;
                      v625 = *(_OWORD *)(v622 - 104);
                      v626 = *(_OWORD *)(v622 - 88);
                      v627 = *(_OWORD *)(v622 - 72);
                      *(_OWORD *)&v621[-5].__r_.__value_.__l.__data_ = *(_OWORD *)(v622 - 120);
                      *(_OWORD *)&v621[-3].__r_.__value_.__l.__data_ = v627;
                      *(_OWORD *)&v621[-4].__r_.__value_.__r.__words[1] = v626;
                      *(_OWORD *)&v621[-5].__r_.__value_.__r.__words[2] = v625;
                      v628 = *(_OWORD *)(v622 - 40);
                      v629 = *(_OWORD *)(v622 - 24);
                      v630 = *((_WORD *)v622 - 4);
                      *(_OWORD *)&v621[-3].__r_.__value_.__r.__words[2] = *(_OWORD *)(v622 - 56);
                      LOWORD(v621[-1].__r_.__value_.__r.__words[2]) = v630;
                      *(_OWORD *)&v621[-1].__r_.__value_.__l.__data_ = v629;
                      *(_OWORD *)&v621[-2].__r_.__value_.__r.__words[1] = v628;
                      *(_OWORD *)&v621[-6].__r_.__value_.__r.__words[1] = *(_OWORD *)(v622 - 136);
                      v620 -= 8;
                    }
                    while (&v619[v620 * 24] != v618);
                    v631 = *(char **)(v34 + 424);
                    v619 = *(char **)(v34 + 432);
                    *(_QWORD *)(v34 + 424) = &v615[v620];
                    *(_QWORD *)(v34 + 432) = v50;
                    *(_QWORD *)(v34 + 440) = v617;
                    if (v619 != v631)
                    {
                      do
                      {
                        v619 -= 192;
                        std::__destroy_at[abi:ne180100]<CA::ADMAlternativeValueSet,0>((uint64_t)v619);
                      }
                      while (v619 != v631);
                      v619 = v631;
                    }
                  }
                  if (v619)
                    operator delete(v619);
                }
                else
                {
                  *(_BYTE *)v41 = 0;
                  *(_BYTE *)(v41 + 24) = 0;
                  if (buf[1].__r_.__value_.__s.__data_[0])
                  {
                    v43 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                    *(_QWORD *)(v41 + 16) = *((_QWORD *)&buf[0].__r_.__value_.__l + 2);
                    *(_OWORD *)v41 = v43;
                    memset(buf, 0, 24);
                    *(_BYTE *)(v41 + 24) = 1;
                  }
                  *(_QWORD *)(v41 + 32) = 0;
                  *(_QWORD *)(v41 + 40) = 0;
                  *(_QWORD *)(v41 + 48) = 0;
                  *(_OWORD *)(v41 + 32) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
                  *(_QWORD *)(v41 + 48) = buf[2].__r_.__value_.__l.__data_;
                  memset(&buf[1].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
                  *(_OWORD *)(v41 + 56) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[1];
                  v44 = *(_OWORD *)&buf[3].__r_.__value_.__r.__words[2];
                  v45 = *(_OWORD *)&buf[4].__r_.__value_.__r.__words[1];
                  v46 = v703;
                  *(_OWORD *)(v41 + 72) = *(_OWORD *)&buf[3].__r_.__value_.__l.__data_;
                  *(_OWORD *)(v41 + 120) = v46;
                  *(_OWORD *)(v41 + 104) = v45;
                  *(_OWORD *)(v41 + 88) = v44;
                  v47 = v705;
                  v48 = v706;
                  v49 = (__int16)v707;
                  *(_OWORD *)(v41 + 136) = v704;
                  *(_WORD *)(v41 + 184) = v49;
                  *(_OWORD *)(v41 + 168) = v48;
                  *(_OWORD *)(v41 + 152) = v47;
                  v50 = (std::string *)(v41 + 192);
                  *(_QWORD *)(v34 + 432) = v41 + 192;
                }
                *(_QWORD *)(v34 + 432) = v50;
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)this + 840);
                *(_QWORD *)__p = &buf[1].__r_.__value_.__l.__size_;
                std::vector<CA::ADMLabel>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                v9 = 36;
                if (!v33)
                  goto LABEL_926;
                goto LABEL_1257;
              }
LABEL_1256:
              v9 = 1;
              if (!v33)
                goto LABEL_926;
              goto LABEL_1257;
            }
            v554 = (_QWORD *)operator new();
            *v554 = 0;
            v554[1] = 0;
            v554[2] = 0;
            v555 = *((_QWORD *)this + 78);
            *((_QWORD *)this + 78) = v554;
            if (v555)
              std::default_delete<std::string>::operator()[abi:ne180100](v555);
            v9 = 35;
            if (!v33)
              goto LABEL_926;
LABEL_1257:
            v601 = (unint64_t *)&v33->__shared_owners_;
            do
              v602 = __ldaxr(v601);
            while (__stlxr(v602 - 1, v601));
            if (!v602)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
            goto LABEL_926;
          }
          *((_QWORD *)this + 76) = 0;
          if (a3)
          {
            v37 = (char *)*a3;
            if (*a3)
            {
              v522 = 0;
              v523 = 0;
              v524 = (unsigned __int8 **)(a3 + 2);
              while (1)
              {
                v525 = (char *)*(v524 - 1);
                if (!strcmp(v37, "coordinate"))
                {
                  std::string::basic_string[abi:ne180100]<0>(buf, v525);
                  v526 = (CA::ADMBuilder::Impl *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)this + 800, (unsigned __int8 *)buf, (uint64_t)buf);
                  v527 = (char)v526;
                  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf[0].__r_.__value_.__l.__data_);
                  if ((v527 & 1) != 0)
                  {
                    if (!strcmp(v525, "azimuth"))
                    {
                      v523 = 0;
                      *(_DWORD *)(v34 + 392) = 0;
                      v522 = 1;
                      *(_BYTE *)(v34 + 396) = 1;
                      v534 = v34 + 392;
LABEL_1063:
                      *((_QWORD *)this + 76) = v534;
                      goto LABEL_1064;
                    }
                    if (!strcmp(v525, "elevation"))
                    {
                      v523 = 0;
                      *(_DWORD *)(v34 + 400) = 0;
                      v522 = 1;
                      *(_BYTE *)(v34 + 404) = 1;
                      v534 = v34 + 400;
                      goto LABEL_1063;
                    }
                    if (!strcmp(v525, "distance"))
                    {
                      v523 = 0;
                      *(_DWORD *)(v34 + 408) = 0;
                      v522 = 1;
                      *(_BYTE *)(v34 + 412) = 1;
                      v534 = v34 + 408;
                      goto LABEL_1063;
                    }
                    if (!strcmp(v525, "X"))
                    {
                      *(_DWORD *)(v34 + 392) = 0;
                      v523 = 1;
                      *(_BYTE *)(v34 + 396) = 1;
                      v536 = v34 + 392;
LABEL_1069:
                      *((_QWORD *)this + 76) = v536;
                      v522 = 1;
                      goto LABEL_1064;
                    }
                    if (!strcmp(v525, "Y"))
                    {
                      *(_DWORD *)(v34 + 400) = 0;
                      v523 = 1;
                      *(_BYTE *)(v34 + 404) = 1;
                      v536 = v34 + 400;
                      goto LABEL_1069;
                    }
                    v531 = (CA::ADMBuilder::Impl *)strcmp(v525, "Z");
                    if (!(_DWORD)v531)
                    {
                      *(_DWORD *)(v34 + 408) = 0;
                      v523 = 1;
                      *(_BYTE *)(v34 + 412) = 1;
                      v536 = v34 + 408;
                      goto LABEL_1069;
                    }
                    v532 = CA::ADMBuilder::Impl::log(v531);
                    if (os_log_type_enabled(v532, OS_LOG_TYPE_ERROR))
                    {
                      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v34, "");
                      v533 = __p;
                      if (__p[23] < 0)
                        v533 = *(_BYTE **)__p;
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 100;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v533;
                      _os_log_impl(&dword_18EE07000, v532, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown coordinate given for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                    }
                    v530 = -66593;
                  }
                  else
                  {
                    v528 = CA::ADMBuilder::Impl::log(v526);
                    if (os_log_type_enabled(v528, OS_LOG_TYPE_ERROR))
                    {
                      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v34, "");
                      v529 = __p;
                      if (__p[23] < 0)
                        v529 = *(_BYTE **)__p;
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 106;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v529;
                      _os_log_impl(&dword_18EE07000, v528, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple coordinates for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                    }
                    v530 = -66589;
                  }
                  *((_DWORD *)this + 158) = v530;
                }
LABEL_1064:
                v535 = *v524;
                v524 += 2;
                v37 = (char *)v535;
                if (!v535)
                  goto LABEL_1118;
              }
            }
          }
          v523 = 0;
          v522 = 0;
LABEL_1118:
          if (*((_DWORD *)this + 158))
            goto LABEL_1256;
          if (!*((_QWORD *)this + 76))
          {
            v594 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v37);
            if (os_log_type_enabled(v594, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v34, "");
              v595 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 115;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v595;
              _os_log_impl(&dword_18EE07000, v594, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing coordinate for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
            v558 = -66592;
            goto LABEL_1255;
          }
          if (!v522)
          {
            v599 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v37);
            if (os_log_type_enabled(v599, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v34, "");
              v600 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 132;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v600;
              _os_log_impl(&dword_18EE07000, v599, OS_LOG_TYPE_ERROR, "%25s:%-5d Ambiguous coordinate system for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
            v558 = -66597;
            goto LABEL_1255;
          }
          if (*(_BYTE *)(v34 + 417))
          {
            if (*(unsigned __int8 *)(v34 + 416) != v523)
            {
              v556 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v37);
              if (os_log_type_enabled(v556, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v34, "");
                v557 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 123;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v557;
                _os_log_impl(&dword_18EE07000, v556, OS_LOG_TYPE_ERROR, "%25s:%-5d Conflicting coordinate systems for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
              }
              v558 = -66603;
LABEL_1255:
              *((_DWORD *)this + 158) = v558;
              goto LABEL_1256;
            }
          }
          else
          {
            *(_WORD *)(v34 + 416) = v523 | 0x100;
            if (*((_DWORD *)this + 158) || !*((_QWORD *)this + 76))
              goto LABEL_1256;
          }
          v633 = (_QWORD *)operator new();
          *v633 = 0;
          v633[1] = 0;
          v633[2] = 0;
          v634 = *((_QWORD *)this + 78);
          *((_QWORD *)this + 78) = v633;
          if (v634)
            std::default_delete<std::string>::operator()[abi:ne180100](v634);
        }
        v9 = 92;
        if (!v33)
          goto LABEL_926;
        goto LABEL_1257;
    }
  }
}

void sub_18EE7DC54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

void CA::ADMBuilder::Impl::xml_end_element_stub(CA::ADMBuilder::Impl *this, void *a2, const unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  __int128 *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  __int128 **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  std::string *v42;
  uint64_t v43;
  __int128 *v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  __int16 v60;
  _WORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  CA::ADMBuilder::Impl *v66;
  uint64_t v67;
  NSObject *v68;
  std::string *v69;
  int v70;
  unsigned __int16 v71;
  unint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  unint64_t v82;
  unint64_t v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  std::string *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::string *v102;
  __int128 v103;
  __int16 v104;
  NSObject *v105;
  std::string *v106;
  std::string *p_p;
  std::string *v108;
  std::string __p;
  std::__split_buffer<std::string> buf;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 158))
  {
    v5 = *((_QWORD *)this + 2);
    v4 = *((_QWORD *)this + 3);
    v6 = ((v4 - v5) << 7) - 1;
    if (v4 == v5)
      v6 = 0;
    v7 = *((_QWORD *)this + 6) - 1;
    v8 = v7 + *((_QWORD *)this + 5);
    v9 = *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF));
    *((_QWORD *)this + 6) = v7;
    if (v6 - v8 >= 0x800)
    {
      operator delete(*(void **)(v4 - 8));
      *((_QWORD *)this + 3) -= 8;
    }
    switch(v9)
    {
      case 4:
        v10 = (__int128 *)*((_QWORD *)this + 78);
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) - 192);
        goto LABEL_95;
      case 5:
        v19 = *((_QWORD *)this + 41);
        goto LABEL_114;
      case 7:
        v20 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v21 = *(_QWORD *)(*(_QWORD *)this + 8);
        *(_BYTE *)(v21 - 124) = BYTE4(v20);
        *(_DWORD *)(v21 - 128) = v20;
        goto LABEL_127;
      case 10:
        v19 = *((_QWORD *)this + 44);
        goto LABEL_114;
      case 12:
        v22 = *((_QWORD *)this + 47);
        goto LABEL_76;
      case 13:
        v19 = *(_QWORD *)(*(_QWORD *)this + 8);
        goto LABEL_114;
      case 14:
        v23 = *((_QWORD *)this + 6) + *((_QWORD *)this + 5) - 1;
        v24 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + ((v23 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v23 & 0x3FF));
        if (v24 == 21)
        {
          v25 = (__int128 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) - 16) + 144);
        }
        else
        {
          if (v24 != 3)
            goto LABEL_127;
          v25 = (__int128 **)(*(_QWORD *)(*(_QWORD *)this + 8) - 152);
        }
        std::vector<CA::ADMLoudnessMetadata>::push_back[abi:ne180100](v25, *((__int128 **)this + 77));
        v101 = *((_QWORD *)this + 77);
        *((_QWORD *)this + 77) = 0;
        if (v101)
          std::default_delete<CA::ADMLoudnessMetadata>::operator()[abi:ne180100](v101);
        goto LABEL_127;
      case 15:
        v26 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v27 = *((_QWORD *)this + 77);
        *(_DWORD *)(v27 + 96) = v26;
        *(_BYTE *)(v27 + 100) = BYTE4(v26);
        goto LABEL_127;
      case 16:
        v28 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v29 = *((_QWORD *)this + 77);
        *(_DWORD *)(v29 + 104) = v28;
        *(_BYTE *)(v29 + 108) = BYTE4(v28);
        goto LABEL_127;
      case 17:
        v30 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v31 = *((_QWORD *)this + 77);
        *(_DWORD *)(v31 + 112) = v30;
        *(_BYTE *)(v31 + 116) = BYTE4(v30);
        goto LABEL_127;
      case 18:
        v32 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v33 = *((_QWORD *)this + 77);
        *(_DWORD *)(v33 + 120) = v32;
        *(_BYTE *)(v33 + 124) = BYTE4(v32);
        goto LABEL_127;
      case 19:
        v34 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v35 = *((_QWORD *)this + 77);
        *(_DWORD *)(v35 + 128) = v34;
        *(_BYTE *)(v35 + 132) = BYTE4(v34);
        goto LABEL_127;
      case 20:
        v36 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v37 = *((_QWORD *)this + 77);
        *(_DWORD *)(v37 + 136) = v36;
        *(_BYTE *)(v37 + 140) = BYTE4(v36);
        goto LABEL_127;
      case 22:
        v10 = (__int128 *)*((_QWORD *)this + 78);
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) - 16) + 104);
        goto LABEL_95;
      case 23:
        v19 = *((_QWORD *)this + 8);
        goto LABEL_114;
      case 24:
        v38 = *(_QWORD *)(*(_QWORD *)this + 32);
        v39 = CA::ADMBuilder::Impl::parse_uint((uint64_t)this, *((std::string **)this + 78));
        if (!HIDWORD(v39))
          goto LABEL_127;
        if ((_DWORD)v39 == 2)
        {
          v40 = *(_QWORD *)(v38 - 16);
          if (!*(_BYTE *)(v40 + 169) || *(_BYTE *)(v40 + 168) == 2)
          {
            v104 = 258;
            goto LABEL_168;
          }
          v41 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v39);
          if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            goto LABEL_181;
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(v38 - 16), "");
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__first_) = 136315650;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"ADMBuilder.cpp";
          WORD2(buf.__begin_) = 1024;
          *(_DWORD *)((char *)&buf.__begin_ + 6) = 1497;
          WORD1(buf.__end_) = 2080;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__end_ + 4) = p_p;
        }
        else
        {
          if ((_DWORD)v39 != 1)
          {
            if ((_DWORD)v39)
            {
              v105 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v39);
              if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(v38 - 16), "");
                v106 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? &__p
                     : (std::string *)__p.__r_.__value_.__r.__words[0];
                LODWORD(buf.__first_) = 136315650;
                *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"ADMBuilder.cpp";
                WORD2(buf.__begin_) = 1024;
                *(_DWORD *)((char *)&buf.__begin_ + 6) = 1505;
                WORD1(buf.__end_) = 2080;
                *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__end_ + 4) = v106;
                _os_log_impl(&dword_18EE07000, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown dialogue type in content '%s'", (uint8_t *)&buf, 0x1Cu);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              v70 = -66598;
              goto LABEL_182;
            }
            v40 = *(_QWORD *)(v38 - 16);
            if (*(_BYTE *)(v40 + 169) && *(_BYTE *)(v40 + 168))
            {
              v41 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v39);
              if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(v38 - 16), "");
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v42 = &__p;
                else
                  v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
                LODWORD(buf.__first_) = 136315650;
                *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"ADMBuilder.cpp";
                WORD2(buf.__begin_) = 1024;
                *(_DWORD *)((char *)&buf.__begin_ + 6) = 1475;
                WORD1(buf.__end_) = 2080;
                *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__end_ + 4) = v42;
                goto LABEL_179;
              }
LABEL_181:
              v70 = -66602;
LABEL_182:
              *((_DWORD *)this + 158) = v70;
LABEL_127:
              v94 = *((_QWORD *)this + 78);
              if (v94)
              {
                *((_QWORD *)this + 78) = 0;
                std::default_delete<std::string>::operator()[abi:ne180100](v94);
              }
              return;
            }
            v104 = 256;
LABEL_168:
            *(_WORD *)(v40 + 168) = v104;
            goto LABEL_127;
          }
          v40 = *(_QWORD *)(v38 - 16);
          if (!*(_BYTE *)(v40 + 169) || *(_BYTE *)(v40 + 168) == 1)
          {
            v104 = 257;
            goto LABEL_168;
          }
          v41 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v39);
          if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            goto LABEL_181;
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(v38 - 16), "");
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v108 = &__p;
          else
            v108 = (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__first_) = 136315650;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"ADMBuilder.cpp";
          WORD2(buf.__begin_) = 1024;
          *(_DWORD *)((char *)&buf.__begin_ + 6) = 1487;
          WORD1(buf.__end_) = 2080;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__end_ + 4) = v108;
        }
LABEL_179:
        _os_log_impl(&dword_18EE07000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d Conflicting dialogue type in content '%s'", (uint8_t *)&buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_181;
      case 25:
        v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) - 16);
        v44 = (__int128 *)*((_QWORD *)this + 78);
        v45 = *(_QWORD *)(v43 + 184);
        v46 = *(_QWORD *)(v43 + 192);
        if (v45 < v46)
        {
          v47 = *v44;
          *(_QWORD *)(v45 + 16) = *((_QWORD *)v44 + 2);
          *(_OWORD *)v45 = v47;
          *((_QWORD *)v44 + 1) = 0;
          *((_QWORD *)v44 + 2) = 0;
          *(_QWORD *)v44 = 0;
          v48 = v45 + 24;
LABEL_152:
          *(_QWORD *)(v43 + 184) = v48;
          goto LABEL_127;
        }
        v95 = *(_QWORD *)(v43 + 176);
        v96 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - v95) >> 3);
        v97 = v96 + 1;
        if (v96 + 1 <= 0xAAAAAAAAAAAAAAALL)
        {
          v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - v95) >> 3);
          if (2 * v98 > v97)
            v97 = 2 * v98;
          if (v98 >= 0x555555555555555)
            v99 = 0xAAAAAAAAAAAAAAALL;
          else
            v99 = v97;
          buf.__end_cap_.__value_ = (std::allocator<std::string> *)(v43 + 192);
          if (v99)
            v99 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v99);
          else
            v100 = 0;
          v102 = (std::string *)(v99 + 24 * v96);
          buf.__first_ = (std::__split_buffer<std::string>::pointer)v99;
          buf.__begin_ = v102;
          buf.__end_cap_.__value_ = (std::string *)(v99 + 24 * v100);
          v103 = *v44;
          v102->__r_.__value_.__r.__words[2] = *((_QWORD *)v44 + 2);
          *(_OWORD *)&v102->__r_.__value_.__l.__data_ = v103;
          *((_QWORD *)v44 + 1) = 0;
          *((_QWORD *)v44 + 2) = 0;
          *(_QWORD *)v44 = 0;
          buf.__end_ = v102 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v43 + 176), &buf);
          v48 = *(_QWORD *)(v43 + 184);
          std::__split_buffer<std::string>::~__split_buffer(&buf);
          goto LABEL_152;
        }
        goto LABEL_183;
      case 27:
        v19 = *((_QWORD *)this + 11);
        goto LABEL_114;
      case 28:
        v19 = *((_QWORD *)this + 14);
        goto LABEL_114;
      case 29:
        v10 = (__int128 *)*((_QWORD *)this + 78);
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) - 16) + 200);
        goto LABEL_95;
      case 30:
        v10 = (__int128 *)*((_QWORD *)this + 78);
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) - 16) + 224);
        goto LABEL_95;
      case 31:
        v19 = *((_QWORD *)this + 17);
        goto LABEL_114;
      case 32:
        v19 = *((_QWORD *)this + 20);
        goto LABEL_114;
      case 34:
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) - 16) + 388) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        goto LABEL_127;
      case 35:
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) - 16) + 418) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        goto LABEL_127;
      case 37:
        v10 = (__int128 *)*((_QWORD *)this + 78);
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) - 16) + 432) - 152);
        goto LABEL_95;
      case 39:
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) - 16) + 432) - 36) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        goto LABEL_127;
      case 40:
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) - 16) + 432) - 8) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        goto LABEL_127;
      case 42:
        v19 = *((_QWORD *)this + 23);
        goto LABEL_114;
      case 43:
        v19 = *((_QWORD *)this + 26);
        goto LABEL_114;
      case 44:
        v19 = *((_QWORD *)this + 29);
        goto LABEL_114;
      case 45:
        v19 = *((_QWORD *)this + 32);
        goto LABEL_114;
      case 46:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v13 = *((_QWORD *)this + 35);
        goto LABEL_111;
      case 47:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v13 = *((_QWORD *)this + 38);
        goto LABEL_111;
      case 48:
        v49 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 80) - 16);
        *(_BYTE *)(v50 + 188) = BYTE4(v49);
        *(_DWORD *)(v50 + 184) = v49;
        goto LABEL_127;
      case 49:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 80) - 16) + 272;
        goto LABEL_112;
      case 50:
        v52 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 80) - 16);
        *(_BYTE *)(v53 + 308) = BYTE4(v52);
        *(_DWORD *)(v53 + 304) = v52;
        goto LABEL_127;
      case 51:
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 80) - 16) + 312) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        goto LABEL_127;
      case 54:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 272) - 16) + 48;
        goto LABEL_112;
      case 55:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 272) - 16) + 80;
        goto LABEL_112;
      case 56:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 272) - 16) + 112;
        goto LABEL_112;
      case 57:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v13 = *((_QWORD *)this + 68);
        goto LABEL_111;
      case 58:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v13 = *((_QWORD *)this + 62);
        goto LABEL_111;
      case 59:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v13 = *((_QWORD *)this + 65);
        goto LABEL_111;
      case 61:
        v54 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16);
        *(_BYTE *)(v55 + 132) = BYTE4(v54);
        *(_DWORD *)(v55 + 128) = v54;
        goto LABEL_127;
      case 62:
        v56 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16);
        *(_BYTE *)(v57 + 140) = BYTE4(v56);
        *(_DWORD *)(v57 + 136) = v56;
        goto LABEL_127;
      case 64:
        v58 = CA::ADMBuilder::Impl::parse_uint((uint64_t)this, *((std::string **)this + 78));
        v59 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152) - 372);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152) - 368) = BYTE4(v58);
        goto LABEL_132;
      case 65:
        v60 = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        v61 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152) - 364);
        goto LABEL_108;
      case 66:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152) - 296;
        goto LABEL_112;
      case 67:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v13 = *(_QWORD *)(*((_QWORD *)this + 71) - 16);
        goto LABEL_111;
      case 68:
        v14 = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        if (v14 >= 0x100u)
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152) - 316) = v14;
        goto LABEL_127;
      case 70:
        v22 = *((_QWORD *)this + 74);
LABEL_76:
        v19 = *(_QWORD *)(v22 - 16);
        goto LABEL_114;
      case 71:
        v62 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152);
        *(_BYTE *)(v63 - 172) = BYTE4(v62);
        *(_DWORD *)(v63 - 176) = v62;
        goto LABEL_127;
      case 72:
        v15 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152);
        *(_BYTE *)(v16 - 164) = BYTE4(v15);
        *(_DWORD *)(v16 - 168) = v15;
        goto LABEL_127;
      case 73:
        v64 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152);
        *(_BYTE *)(v65 - 156) = BYTE4(v64);
        *(_DWORD *)(v65 - 160) = v64;
        goto LABEL_127;
      case 74:
        v66 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        if (*((_DWORD *)this + 158))
          goto LABEL_127;
        v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152);
        if (!*(_BYTE *)(v67 - 151))
        {
          *(_WORD *)(v67 - 152) = (_WORD)v66;
          goto LABEL_127;
        }
        if ((unsigned __int16)v66 >= 0x100u && *(unsigned __int8 *)(v67 - 152) == v66)
          goto LABEL_127;
        v68 = CA::ADMBuilder::Impl::log(v66);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152) - 480, "");
          v69 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__first_) = 136315650;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"ADMBuilder.cpp";
          WORD2(buf.__begin_) = 1024;
          *(_DWORD *)((char *)&buf.__begin_ + 6) = 1636;
          WORD1(buf.__end_) = 2080;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__end_ + 4) = v69;
          _os_log_impl(&dword_18EE07000, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d Conflicting coordinate systems in block format '%s'", (uint8_t *)&buf, 0x1Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        v70 = -66603;
        goto LABEL_182;
      case 75:
        v17 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152);
        *(_BYTE *)(v18 - 144) = BYTE4(v17);
        *(_DWORD *)(v18 - 148) = v17;
        goto LABEL_127;
      case 76:
        v71 = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        if (v71 >= 0x100u)
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152) - 140) = v71;
        goto LABEL_127;
      case 77:
        v72 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        if (HIDWORD(v72))
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152) - 124) = v72;
        goto LABEL_127;
      case 79:
        v10 = (__int128 *)*((_QWORD *)this + 78);
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152) - 104);
LABEL_95:
        v73 = v11 - 24;
        if (*(char *)(v11 - 1) < 0)
          operator delete(*(void **)v73);
        v74 = *v10;
        *(_QWORD *)(v73 + 16) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v73 = v74;
        *((_BYTE *)v10 + 23) = 0;
        *(_BYTE *)v10 = 0;
        goto LABEL_127;
      case 80:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152) - 88;
        goto LABEL_112;
      case 81:
        v75 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152);
        if (*(unsigned __int8 *)(v76 - 52) == BYTE4(v75))
        {
          if (*(_BYTE *)(v76 - 52))
            *(_DWORD *)(v76 - 56) = *(float *)&v75;
        }
        else if (*(_BYTE *)(v76 - 52))
        {
          *(_BYTE *)(v76 - 52) = 0;
        }
        else
        {
          *(_DWORD *)(v76 - 56) = *(float *)&v75;
          *(_BYTE *)(v76 - 52) = 1;
        }
        goto LABEL_127;
      case 82:
        v77 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152);
        if (*(unsigned __int8 *)(v78 - 44) == BYTE4(v77))
        {
          if (*(_BYTE *)(v78 - 44))
            *(_DWORD *)(v78 - 48) = (int)*(float *)&v77;
        }
        else if (*(_BYTE *)(v78 - 44))
        {
          *(_BYTE *)(v78 - 44) = 0;
        }
        else
        {
          *(_DWORD *)(v78 - 48) = (int)*(float *)&v77;
          *(_BYTE *)(v78 - 44) = 1;
        }
        goto LABEL_127;
      case 83:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152) - 40;
        goto LABEL_112;
      case 84:
        v79 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152);
        *(_BYTE *)(v80 - 4) = BYTE4(v79);
        *(_DWORD *)(v80 - 8) = v79;
        goto LABEL_127;
      case 85:
        v60 = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        v61 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 128) - 16) + 152) - 300);
LABEL_108:
        *v61 = v60;
        goto LABEL_127;
      case 87:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v13 = *((_QWORD *)this + 59);
        goto LABEL_111;
      case 89:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v13 = *((_QWORD *)this + 50);
        goto LABEL_111;
      case 90:
        v12 = (__int128 *)*((_QWORD *)this + 78);
        v13 = *((_QWORD *)this + 53);
LABEL_111:
        v51 = v13 - 32;
LABEL_112:
        std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(v51, v12);
        goto LABEL_127;
      case 91:
        v19 = *((_QWORD *)this + 56);
LABEL_114:
        v81 = (__int128 *)*((_QWORD *)this + 78);
        v82 = *(_QWORD *)(v19 - 16);
        v83 = *(_QWORD *)(v19 - 8);
        if (v82 >= v83)
        {
          v86 = *(_QWORD *)(v19 - 24);
          v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - v86) >> 3);
          v88 = v87 + 1;
          if (v87 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_183:
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - v86) >> 3);
          if (2 * v89 > v88)
            v88 = 2 * v89;
          if (v89 >= 0x555555555555555)
            v90 = 0xAAAAAAAAAAAAAAALL;
          else
            v90 = v88;
          buf.__end_cap_.__value_ = (std::allocator<std::string> *)(v19 - 8);
          if (v90)
            v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v90);
          else
            v91 = 0;
          v92 = (std::string *)(v90 + 24 * v87);
          buf.__first_ = (std::__split_buffer<std::string>::pointer)v90;
          buf.__begin_ = v92;
          buf.__end_cap_.__value_ = (std::string *)(v90 + 24 * v91);
          v93 = *v81;
          v92->__r_.__value_.__r.__words[2] = *((_QWORD *)v81 + 2);
          *(_OWORD *)&v92->__r_.__value_.__l.__data_ = v93;
          *((_QWORD *)v81 + 1) = 0;
          *((_QWORD *)v81 + 2) = 0;
          *(_QWORD *)v81 = 0;
          buf.__end_ = v92 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v19 - 24), &buf);
          v85 = *(_QWORD *)(v19 - 16);
          std::__split_buffer<std::string>::~__split_buffer(&buf);
        }
        else
        {
          v84 = *v81;
          *(_QWORD *)(v82 + 16) = *((_QWORD *)v81 + 2);
          *(_OWORD *)v82 = v84;
          *((_QWORD *)v81 + 1) = 0;
          *((_QWORD *)v81 + 2) = 0;
          *(_QWORD *)v81 = 0;
          v85 = v82 + 24;
        }
        *(_QWORD *)(v19 - 16) = v85;
        goto LABEL_127;
      case 92:
        v58 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        if (HIDWORD(v58))
        {
          v59 = (_DWORD *)*((_QWORD *)this + 76);
LABEL_132:
          *v59 = v58;
        }
        goto LABEL_127;
      default:
        goto LABEL_127;
    }
  }
}

uint64_t CA::ADMBuilder::Impl::parse_float(int a1, std::string *__str)
{
  return COERCE_UNSIGNED_INT(std::stof(__str, 0)) | 0x100000000;
}

void sub_18EE7EF74(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  *(_DWORD *)(v1 + 632) = -66607;
  __cxa_end_catch();
  JUMPOUT(0x18EE7EF60);
}

void AudioMetadataTimeline::addEvent(uint64_t *a1, unsigned int **a2, double a3)
{
  char *v6;
  unint64_t *v7;
  char *v8;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  uint64_t *v24;
  std::__shared_count v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *shared_owners;
  unint64_t *v30;
  unint64_t v31;
  __n128 v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  __n128 *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  __n128 *v46;
  unint64_t v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t *v55;
  uint64_t **i;
  uint64_t *v57;
  std::__shared_count v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  __int128 v74;
  char *v75;
  unint64_t v76;
  char *v77;
  __int128 v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t *v92;
  uint64_t *v93;
  __int128 v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  __int128 v110;
  char *v111;
  unint64_t v112;
  char *v113;
  __int128 v114;
  uint64_t v115;
  void *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  unint64_t *v121;
  uint64_t *v122;
  __int128 v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  unint64_t v140;
  char *v141;
  __int128 v142;
  int64x2_t v143;
  uint64_t v144;
  void *v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  unint64_t *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  char *v165;
  __int128 v166;
  char *v167;
  unint64_t v168;
  char *v169;
  unint64_t v170;
  __int128 v171;
  int64x2_t v172;
  uint64_t v173;
  void *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t **v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  unint64_t *v192;
  char *v193;
  uint64_t *v194;
  std::__shared_count v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  _QWORD *v204;
  unint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  __int128 v213;
  char *v214;
  unint64_t v215;
  char *v216;
  __int128 v217;
  uint64_t v218;
  void *v219;
  unint64_t v220;
  char *v221;
  unint64_t *v222;
  uint64_t v223;
  uint64_t *v224;
  std::__shared_count v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  _QWORD *v235;
  unint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  __int128 v244;
  char *v245;
  unint64_t v246;
  char *v247;
  __int128 v248;
  uint64_t v249;
  void *v250;
  unint64_t v251;
  char *v252;
  uint64_t *v253;
  __int128 v254;
  uint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  char *v277;
  __int128 v278;
  uint64_t v279;
  void *v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  char *v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  __int128 *v308;
  _QWORD *v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  __int128 *v317;
  _QWORD *v318;
  unint64_t v319;
  uint64_t v320;
  char *v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  __int128 *v326;
  char *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  __int128 *v335;
  _QWORD *v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  __int128 *v344;
  _QWORD *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  __int128 *v353;
  _QWORD *v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  __int128 *v362;
  _QWORD *v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t *v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  __int128 *v371;
  _QWORD *v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t *v377;
  uint64_t *v378;
  uint64_t v379;
  uint64_t v380;
  __int128 *v381;
  unsigned int *v382;
  unint64_t v383;
  uint64_t *v384;
  uint64_t *v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t v388;
  unint64_t v389;
  char *v390;
  char *v391;
  char *v392;
  unint64_t v393;
  int64_t v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  unint64_t v398;
  _QWORD *v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  char *v407;
  uint64_t v408;
  _BOOL8 v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  BOOL v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  _QWORD *v426;
  char *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  BOOL v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  char *v436;
  int64_t v437;
  char *v438;
  unint64_t v439;
  char *v440;
  uint64_t v441;
  char *v442;
  uint64_t *v443;
  uint64_t v444;
  uint64_t v445;
  char *v446;
  uint64_t v447;
  void *v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  char *k;
  char *v455;
  void *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  char *v460;
  char *v461;
  unint64_t v462;
  char *v463;
  uint64_t v464;
  BOOL v465;
  uint64_t v466;
  uint64_t v467;
  char *v468;
  uint64_t v469;
  uint64_t *v470;
  char *v471;
  void *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  char *v477;
  unint64_t v478;
  char *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  char *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t *v486;
  char *v487;
  _QWORD *v488;
  char *v489;
  void *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  char *v494;
  char *v495;
  unint64_t v496;
  char *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  char *v501;
  uint64_t v502;
  uint64_t v503;
  char *v504;
  char *v505;
  char *v506;
  uint64_t v507;
  unint64_t v508;
  char *v509;
  size_t v510;
  unint64_t v511;
  char *v512;
  uint64_t v513;
  char *v514;
  uint64_t v515;
  uint64_t v516;
  char *v517;
  char *v518;
  uint64_t v519;
  uint64_t v520;
  void *v521;
  int64x2_t v522;
  __int128 v523;
  void *v524;
  uint64_t v525;
  char *v526;
  __int128 *v527;
  uint64_t *v528;
  uint64_t *v529;
  char *v530;
  __int128 *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t *v535;
  unint64_t v536;
  uint64_t v537;
  unint64_t v538;
  __int128 **v539;
  __int128 *v540;
  __int128 **v541;
  __int128 *v542;
  __int128 **v543;
  __int128 *v544;
  uint64_t v545;
  uint64_t v546;
  __int128 v547;
  __int128 **v548;
  __int128 *v549;
  __int128 *v550;
  __int128 **v551;
  __int128 **v552;
  __int128 *v553;
  __int128 *v554;
  __int128 *v555;
  char *v556;
  uint64_t v557;
  __int128 *v558;
  __int128 *v559;
  __int128 *v560;
  char *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t *v564;
  uint64_t v565;
  uint64_t v566;
  char *v567;
  uint64_t j;
  uint64_t v569;
  uint64_t v570;
  _QWORD *v571;
  char *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t *v578;
  uint64_t v579;
  char *v580;
  int64_t v581;
  char *v582;
  unint64_t v583;
  char *v584;
  uint64_t v585;
  char *v586;
  uint64_t *v587;
  uint64_t v588;
  uint64_t v589;
  char *v590;
  uint64_t v591;
  void *v592;
  char *v593;
  uint64_t v594;
  unint64_t v595;
  uint64_t *v596;
  uint64_t *v597;
  char *v598;
  _QWORD *v599;
  uint64_t v600;
  unint64_t *v601;
  unint64_t v602;
  _QWORD *v603;
  uint64_t v604;
  uint64_t *v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t *v608;
  uint64_t v609;
  _QWORD *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t *v613;
  uint64_t v614;
  unint64_t v615;
  uint64_t v616;
  uint64_t *v617;
  uint64_t v618;
  char *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t *v625;
  uint64_t v626;
  _QWORD *v627;
  _QWORD *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t *v631;
  unint64_t *v632;
  unint64_t v633;
  unint64_t v634;
  uint64_t v635;
  unint64_t v636;
  unint64_t v637;
  char *v638;
  char *v639;
  char *v640;
  int64_t v641;
  uint64_t v642;
  uint64_t *v643;
  uint64_t *v644;
  unint64_t v645;
  unint64_t v646;
  char *v647;
  uint64_t v648;
  unint64_t v649;
  int64x2_t *v650;
  unint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unint64_t v654;
  unint64_t v655;
  unint64_t v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  _BOOL8 v660;
  unint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  unint64_t v665;
  unint64_t v666;
  unint64_t v667;
  unint64_t v668;
  unint64_t v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t v674;
  uint64_t v675;
  _QWORD *v676;
  char *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  char *v684;
  int64_t v685;
  char *v686;
  unint64_t v687;
  char *v688;
  uint64_t v689;
  char *v690;
  uint64_t *v691;
  uint64_t v692;
  uint64_t v693;
  char *v694;
  uint64_t v695;
  void *v696;
  uint64_t v697;
  uint64_t v698;
  unint64_t v699;
  uint64_t v700;
  unint64_t v701;
  uint64_t v702;
  char *n;
  char *v704;
  void *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  char *v709;
  char *v710;
  unint64_t v711;
  char *v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  char *v716;
  uint64_t v717;
  uint64_t *v718;
  char *v719;
  void *v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  char *v724;
  char *v725;
  unint64_t v726;
  char *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  char *v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t *v734;
  char *v735;
  _QWORD *v736;
  char *v737;
  void *v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  char *v742;
  char *v743;
  unint64_t v744;
  char *v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  char *v749;
  uint64_t v750;
  uint64_t v751;
  char *v752;
  char *v753;
  char *v754;
  uint64_t v755;
  unint64_t v756;
  char *v757;
  size_t v758;
  unint64_t v759;
  char *v760;
  uint64_t v761;
  char *v762;
  uint64_t v763;
  uint64_t v764;
  char *v765;
  char *v766;
  uint64_t v767;
  uint64_t v768;
  void *v769;
  int64x2_t v770;
  __int128 v771;
  void *v772;
  uint64_t v773;
  char *v774;
  __int128 *v775;
  uint64_t *v776;
  uint64_t *v777;
  char *v778;
  __int128 *v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  unint64_t *v783;
  unint64_t v784;
  uint64_t v785;
  unint64_t v786;
  __int128 **v787;
  __int128 *v788;
  __int128 **v789;
  __int128 *v790;
  __int128 **v791;
  __int128 *v792;
  uint64_t v793;
  uint64_t v794;
  __int128 v795;
  __int128 **v796;
  __int128 *v797;
  __int128 *v798;
  __int128 **v799;
  __int128 **v800;
  __int128 *v801;
  __int128 *v802;
  __int128 *v803;
  char *v804;
  uint64_t v805;
  __int128 *v806;
  __int128 *v807;
  __int128 *v808;
  char *v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t *v812;
  uint64_t v813;
  uint64_t v814;
  char *v815;
  uint64_t m;
  uint64_t v817;
  uint64_t v818;
  _QWORD *v819;
  char *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  char *v827;
  int64_t v828;
  char *v829;
  unint64_t v830;
  char *v831;
  uint64_t v832;
  char *v833;
  uint64_t *v834;
  uint64_t v835;
  uint64_t v836;
  char *v837;
  uint64_t v838;
  void *v839;
  char *v840;
  uint64_t v841;
  unint64_t v842;
  uint64_t *v843;
  uint64_t *v844;
  char *v845;
  _QWORD *v846;
  uint64_t v847;
  unint64_t *v848;
  unint64_t v849;
  _QWORD *v850;
  uint64_t *v851;
  uint64_t v852;
  uint64_t *v853;
  uint64_t v854;
  uint64_t *v855;
  uint64_t v856;
  _QWORD *v857;
  uint64_t v858;
  uint64_t *v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t *v862;
  uint64_t v863;
  uint64_t *v864;
  uint64_t v865;
  uint64_t v866;
  char *v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t *v874;
  uint64_t v875;
  _QWORD *v876;
  _QWORD *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t *v880;
  unint64_t *v881;
  unint64_t v882;
  unint64_t v883;
  uint64_t v884;
  unint64_t v885;
  unint64_t v886;
  char *v887;
  char *v888;
  char *v889;
  int64_t v890;
  uint64_t v891;
  uint64_t *v892;
  char *v893;
  unint64_t v894;
  unint64_t v895;
  char *v896;
  uint64_t v897;
  unint64_t v898;
  int64x2_t *v899;
  unint64_t v900;
  uint64_t v901;
  uint64_t v902;
  unint64_t v903;
  unint64_t v904;
  unint64_t v905;
  unint64_t v906;
  uint64_t v907;
  uint64_t v908;
  _BOOL8 v909;
  unint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  unint64_t v914;
  unint64_t v915;
  unint64_t v916;
  unint64_t v917;
  unint64_t v918;
  unint64_t v919;
  uint64_t v920;
  uint64_t v921;
  unint64_t v922;
  uint64_t v923;
  uint64_t v924;
  _QWORD *v925;
  char *v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  char *v933;
  int64_t v934;
  char *v935;
  unint64_t v936;
  char *v937;
  uint64_t v938;
  char *v939;
  uint64_t *v940;
  uint64_t v941;
  uint64_t v942;
  char *v943;
  uint64_t v944;
  void *v945;
  uint64_t v946;
  uint64_t v947;
  unint64_t v948;
  uint64_t v949;
  unint64_t v950;
  uint64_t v951;
  char *jj;
  char *v953;
  void *v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  char *v958;
  char *v959;
  unint64_t v960;
  char *v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  char *v965;
  uint64_t v966;
  uint64_t *v967;
  char *v968;
  void *v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  char *v973;
  char *v974;
  unint64_t v975;
  char *v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  char *v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t *v983;
  char *v984;
  _QWORD *v985;
  char *v986;
  void *v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  char *v991;
  char *v992;
  unint64_t v993;
  char *v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  char *v998;
  uint64_t v999;
  uint64_t v1000;
  char *v1001;
  char *v1002;
  char *v1003;
  uint64_t v1004;
  unint64_t v1005;
  char *v1006;
  size_t v1007;
  unint64_t v1008;
  char *v1009;
  uint64_t v1010;
  char *v1011;
  uint64_t v1012;
  uint64_t v1013;
  char *v1014;
  char *v1015;
  uint64_t v1016;
  uint64_t v1017;
  void *v1018;
  int64x2_t v1019;
  __int128 v1020;
  void *v1021;
  uint64_t v1022;
  char *v1023;
  __int128 *v1024;
  uint64_t *v1025;
  uint64_t *v1026;
  char *v1027;
  __int128 *v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  unint64_t *v1032;
  unint64_t v1033;
  uint64_t v1034;
  unint64_t v1035;
  __int128 **v1036;
  __int128 *v1037;
  __int128 **v1038;
  __int128 *v1039;
  __int128 **v1040;
  __int128 *v1041;
  uint64_t v1042;
  uint64_t v1043;
  __int128 v1044;
  __int128 **v1045;
  __int128 *v1046;
  __int128 *v1047;
  __int128 **v1048;
  __int128 **v1049;
  __int128 *v1050;
  __int128 *v1051;
  __int128 *v1052;
  char *v1053;
  uint64_t v1054;
  __int128 *v1055;
  __int128 *v1056;
  __int128 *v1057;
  char *v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t *v1061;
  uint64_t v1062;
  uint64_t v1063;
  char *v1064;
  uint64_t ii;
  uint64_t v1066;
  uint64_t v1067;
  _QWORD *v1068;
  char *v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  char *v1076;
  int64_t v1077;
  char *v1078;
  unint64_t v1079;
  char *v1080;
  uint64_t v1081;
  char *v1082;
  uint64_t *v1083;
  uint64_t v1084;
  uint64_t v1085;
  char *v1086;
  uint64_t v1087;
  void *v1088;
  char *v1089;
  uint64_t v1090;
  unint64_t v1091;
  uint64_t *v1092;
  char *v1093;
  char *v1094;
  _QWORD *v1095;
  uint64_t v1096;
  unint64_t *v1097;
  unint64_t v1098;
  _QWORD *v1099;
  uint64_t *v1100;
  uint64_t v1101;
  uint64_t *v1102;
  uint64_t v1103;
  uint64_t *v1104;
  uint64_t v1105;
  _QWORD *v1106;
  uint64_t v1107;
  uint64_t *v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t *v1111;
  uint64_t v1112;
  uint64_t *v1113;
  uint64_t v1114;
  uint64_t v1115;
  char *v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t *v1123;
  uint64_t v1124;
  _QWORD *v1125;
  _QWORD *v1126;
  uint64_t v1127;
  int64_t v1128;
  uint64_t *v1129;
  unint64_t *v1130;
  unint64_t v1131;
  unint64_t v1132;
  uint64_t v1133;
  unint64_t v1134;
  unint64_t v1135;
  char *v1136;
  char *v1137;
  char *v1138;
  int64_t v1139;
  uint64_t v1140;
  uint64_t *v1141;
  uint64_t *v1142;
  unint64_t v1143;
  unint64_t v1144;
  char *v1145;
  uint64_t v1146;
  unint64_t v1147;
  int64x2_t *v1148;
  unint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  unint64_t v1152;
  unint64_t v1153;
  unint64_t v1154;
  unint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  _BOOL8 v1158;
  unint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  unint64_t v1163;
  unint64_t v1164;
  unint64_t v1165;
  unint64_t v1166;
  unint64_t v1167;
  unint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  unint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  _QWORD *v1174;
  char *v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  char *v1182;
  int64_t v1183;
  char *v1184;
  unint64_t v1185;
  char *v1186;
  uint64_t v1187;
  char *v1188;
  uint64_t *v1189;
  uint64_t v1190;
  uint64_t v1191;
  char *v1192;
  uint64_t v1193;
  void *v1194;
  uint64_t v1195;
  uint64_t v1196;
  unint64_t v1197;
  uint64_t v1198;
  unint64_t v1199;
  uint64_t v1200;
  char *mm;
  char *v1202;
  void *v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  char *v1207;
  char *v1208;
  unint64_t v1209;
  char *v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  char *v1214;
  uint64_t v1215;
  uint64_t *v1216;
  char *v1217;
  void *v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  char *v1222;
  char *v1223;
  unint64_t v1224;
  char *v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  char *v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t *v1232;
  char *v1233;
  _QWORD *v1234;
  char *v1235;
  void *v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  char *v1240;
  char *v1241;
  unint64_t v1242;
  char *v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  char *v1247;
  uint64_t v1248;
  uint64_t v1249;
  char *v1250;
  char *v1251;
  char *v1252;
  uint64_t v1253;
  unint64_t v1254;
  char *v1255;
  size_t v1256;
  unint64_t v1257;
  char *v1258;
  uint64_t v1259;
  char *v1260;
  uint64_t v1261;
  uint64_t v1262;
  char *v1263;
  char *v1264;
  uint64_t v1265;
  uint64_t v1266;
  void *v1267;
  int64x2_t v1268;
  __int128 v1269;
  void *v1270;
  uint64_t v1271;
  char *v1272;
  __int128 *v1273;
  uint64_t *v1274;
  uint64_t *v1275;
  char *v1276;
  __int128 *v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  unint64_t *v1281;
  unint64_t v1282;
  uint64_t v1283;
  unint64_t v1284;
  __int128 **v1285;
  __int128 *v1286;
  __int128 **v1287;
  __int128 *v1288;
  __int128 **v1289;
  __int128 *v1290;
  uint64_t v1291;
  uint64_t v1292;
  __int128 v1293;
  __int128 **v1294;
  __int128 *v1295;
  __int128 *v1296;
  __int128 **v1297;
  __int128 **v1298;
  __int128 *v1299;
  __int128 *v1300;
  __int128 *v1301;
  char *v1302;
  uint64_t v1303;
  __int128 *v1304;
  __int128 *v1305;
  __int128 *v1306;
  char *v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t *v1310;
  uint64_t v1311;
  uint64_t v1312;
  char *v1313;
  uint64_t kk;
  uint64_t v1315;
  uint64_t v1316;
  _QWORD *v1317;
  char *v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  char *v1325;
  int64_t v1326;
  char *v1327;
  unint64_t v1328;
  char *v1329;
  uint64_t v1330;
  char *v1331;
  uint64_t *v1332;
  uint64_t v1333;
  uint64_t v1334;
  char *v1335;
  uint64_t v1336;
  void *v1337;
  char *v1338;
  uint64_t v1339;
  unint64_t v1340;
  uint64_t *v1341;
  uint64_t *v1342;
  char *v1343;
  _QWORD *v1344;
  uint64_t v1345;
  unint64_t *v1346;
  unint64_t v1347;
  _QWORD *v1348;
  uint64_t *v1349;
  uint64_t v1350;
  uint64_t *v1351;
  uint64_t v1352;
  uint64_t *v1353;
  uint64_t v1354;
  _QWORD *v1355;
  uint64_t v1356;
  uint64_t *v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t *v1360;
  uint64_t v1361;
  uint64_t *v1362;
  uint64_t v1363;
  uint64_t v1364;
  char *v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t *v1372;
  uint64_t v1373;
  _QWORD *v1374;
  _QWORD *v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t *v1378;
  unint64_t *v1379;
  unint64_t v1380;
  unint64_t v1381;
  uint64_t v1382;
  unint64_t v1383;
  unint64_t v1384;
  char *v1385;
  char *v1386;
  char *v1387;
  int64_t v1388;
  uint64_t v1389;
  uint64_t *v1390;
  uint64_t *v1391;
  unint64_t v1392;
  unint64_t v1393;
  char *v1394;
  uint64_t v1395;
  unint64_t v1396;
  int64x2_t *v1397;
  unint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  unint64_t v1401;
  unint64_t v1402;
  unint64_t v1403;
  unint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  _BOOL8 v1408;
  unint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  unint64_t v1413;
  unint64_t v1414;
  unint64_t v1415;
  unint64_t v1416;
  unint64_t v1417;
  unint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  unint64_t v1421;
  char *v1422;
  uint64_t v1423;
  uint64_t v1424;
  _QWORD *v1425;
  char *v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  char *v1433;
  int64_t v1434;
  char *v1435;
  unint64_t v1436;
  char *v1437;
  uint64_t v1438;
  char *v1439;
  uint64_t *v1440;
  uint64_t v1441;
  uint64_t v1442;
  char *v1443;
  uint64_t v1444;
  void *v1445;
  uint64_t v1446;
  uint64_t v1447;
  unint64_t v1448;
  uint64_t v1449;
  unint64_t v1450;
  uint64_t v1451;
  char *i1;
  char *v1453;
  void *v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  char *v1458;
  char *v1459;
  unint64_t v1460;
  char *v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  char *v1465;
  uint64_t v1466;
  uint64_t *v1467;
  char *v1468;
  void *v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  char *v1473;
  char *v1474;
  unint64_t v1475;
  char *v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  char *v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t *v1483;
  char *v1484;
  _QWORD *v1485;
  char *v1486;
  void *v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  char *v1491;
  char *v1492;
  unint64_t v1493;
  char *v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  char *v1498;
  uint64_t v1499;
  uint64_t v1500;
  char *v1501;
  char *v1502;
  char *v1503;
  uint64_t v1504;
  unint64_t v1505;
  char *v1506;
  size_t v1507;
  unint64_t v1508;
  char *v1509;
  uint64_t v1510;
  char *v1511;
  uint64_t v1512;
  uint64_t v1513;
  char *v1514;
  char *v1515;
  uint64_t v1516;
  uint64_t v1517;
  void *v1518;
  int64x2_t v1519;
  __int128 v1520;
  void *v1521;
  uint64_t v1522;
  char *v1523;
  __int128 *v1524;
  uint64_t *v1525;
  uint64_t *v1526;
  char *v1527;
  __int128 *v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  unint64_t *v1532;
  unint64_t v1533;
  uint64_t v1534;
  unint64_t v1535;
  __int128 **v1536;
  __int128 *v1537;
  __int128 **v1538;
  __int128 *v1539;
  __int128 **v1540;
  __int128 *v1541;
  uint64_t v1542;
  uint64_t v1543;
  __int128 v1544;
  __int128 **v1545;
  __int128 *v1546;
  __int128 *v1547;
  __int128 **v1548;
  __int128 **v1549;
  __int128 *v1550;
  __int128 *v1551;
  __int128 *v1552;
  char *v1553;
  uint64_t v1554;
  __int128 *v1555;
  __int128 *v1556;
  __int128 *v1557;
  char *v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t *v1561;
  uint64_t v1562;
  uint64_t v1563;
  char *v1564;
  uint64_t nn;
  uint64_t v1566;
  uint64_t v1567;
  _QWORD *v1568;
  char *v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  char *v1576;
  int64_t v1577;
  char *v1578;
  unint64_t v1579;
  char *v1580;
  uint64_t v1581;
  char *v1582;
  uint64_t *v1583;
  uint64_t v1584;
  uint64_t v1585;
  char *v1586;
  uint64_t v1587;
  void *v1588;
  char *v1589;
  uint64_t v1590;
  unint64_t v1591;
  uint64_t *v1592;
  uint64_t *v1593;
  char *v1594;
  _QWORD *v1595;
  uint64_t v1596;
  unint64_t *v1597;
  unint64_t v1598;
  _QWORD *v1599;
  uint64_t *v1600;
  uint64_t v1601;
  uint64_t *v1602;
  uint64_t v1603;
  uint64_t *v1604;
  uint64_t v1605;
  _QWORD *v1606;
  uint64_t v1607;
  uint64_t *v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t *v1611;
  uint64_t v1612;
  uint64_t *v1613;
  uint64_t v1614;
  uint64_t v1615;
  char *v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t *v1623;
  uint64_t v1624;
  _QWORD *v1625;
  _QWORD *v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t *v1629;
  unint64_t *v1630;
  unint64_t v1631;
  unint64_t v1632;
  uint64_t v1633;
  unint64_t v1634;
  unint64_t v1635;
  char *v1636;
  char *v1637;
  char *v1638;
  unint64_t v1639;
  int64_t v1640;
  uint64_t v1641;
  uint64_t *v1642;
  uint64_t *v1643;
  unint64_t v1644;
  char *v1645;
  uint64_t v1646;
  unint64_t v1647;
  int64x2_t *v1648;
  unint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  unint64_t v1652;
  unint64_t v1653;
  unint64_t v1654;
  unint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  _BOOL8 v1659;
  unint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  unint64_t v1664;
  unint64_t v1665;
  unint64_t v1666;
  unint64_t v1667;
  unint64_t v1668;
  unint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  unint64_t v1672;
  char *v1673;
  uint64_t v1674;
  uint64_t v1675;
  _QWORD *v1676;
  char *v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  char *v1684;
  int64_t v1685;
  char *v1686;
  unint64_t v1687;
  char *v1688;
  uint64_t v1689;
  char *v1690;
  uint64_t *v1691;
  uint64_t v1692;
  uint64_t v1693;
  char *v1694;
  uint64_t v1695;
  void *v1696;
  uint64_t v1697;
  uint64_t v1698;
  unint64_t v1699;
  uint64_t v1700;
  unint64_t v1701;
  uint64_t v1702;
  char *i3;
  char *v1704;
  void *v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  char *v1709;
  char *v1710;
  unint64_t v1711;
  char *v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  char *v1716;
  uint64_t v1717;
  uint64_t *v1718;
  char *v1719;
  void *v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  char *v1724;
  char *v1725;
  unint64_t v1726;
  char *v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  char *v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t *v1734;
  char *v1735;
  _QWORD *v1736;
  char *v1737;
  void *v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  char *v1742;
  char *v1743;
  unint64_t v1744;
  char *v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  char *v1749;
  uint64_t v1750;
  uint64_t v1751;
  char *v1752;
  char *v1753;
  char *v1754;
  uint64_t v1755;
  unint64_t v1756;
  char *v1757;
  size_t v1758;
  unint64_t v1759;
  char *v1760;
  uint64_t v1761;
  char *v1762;
  uint64_t v1763;
  uint64_t v1764;
  char *v1765;
  char *v1766;
  uint64_t v1767;
  uint64_t v1768;
  void *v1769;
  int64x2_t v1770;
  __int128 v1771;
  void *v1772;
  uint64_t v1773;
  char *v1774;
  __int128 *v1775;
  uint64_t *v1776;
  uint64_t *v1777;
  char *v1778;
  __int128 *v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  unint64_t *v1783;
  unint64_t v1784;
  uint64_t v1785;
  unint64_t v1786;
  __int128 **v1787;
  __int128 *v1788;
  __int128 **v1789;
  __int128 *v1790;
  __int128 **v1791;
  __int128 *v1792;
  uint64_t v1793;
  uint64_t v1794;
  __int128 v1795;
  __int128 **v1796;
  __int128 *v1797;
  __int128 *v1798;
  __int128 **v1799;
  __int128 **v1800;
  __int128 *v1801;
  __int128 *v1802;
  __int128 *v1803;
  char *v1804;
  uint64_t v1805;
  __int128 *v1806;
  __int128 *v1807;
  __int128 *v1808;
  char *v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t *v1812;
  uint64_t v1813;
  uint64_t v1814;
  char *v1815;
  uint64_t i2;
  uint64_t v1817;
  uint64_t v1818;
  _QWORD *v1819;
  char *v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  char *v1827;
  int64_t v1828;
  char *v1829;
  unint64_t v1830;
  char *v1831;
  uint64_t v1832;
  char *v1833;
  uint64_t *v1834;
  uint64_t v1835;
  uint64_t v1836;
  char *v1837;
  uint64_t v1838;
  void *v1839;
  char *v1840;
  uint64_t v1841;
  unint64_t v1842;
  uint64_t *v1843;
  uint64_t *v1844;
  char *v1845;
  _QWORD *v1846;
  uint64_t v1847;
  unint64_t *v1848;
  unint64_t v1849;
  _QWORD *v1850;
  uint64_t *v1851;
  uint64_t v1852;
  uint64_t *v1853;
  uint64_t v1854;
  uint64_t *v1855;
  uint64_t v1856;
  _QWORD *v1857;
  uint64_t v1858;
  uint64_t *v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t *v1862;
  uint64_t v1863;
  uint64_t *v1864;
  uint64_t v1865;
  uint64_t v1866;
  char *v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t v1872;
  uint64_t v1873;
  uint64_t *v1874;
  uint64_t v1875;
  _QWORD *v1876;
  _QWORD *v1877;
  uint64_t v1878;
  uint64_t v1879;
  uint64_t *v1880;
  unint64_t *v1881;
  unint64_t v1882;
  unint64_t v1883;
  uint64_t v1884;
  unint64_t v1885;
  unint64_t v1886;
  char *v1887;
  char *v1888;
  char *v1889;
  int64_t v1890;
  uint64_t v1891;
  uint64_t *v1892;
  uint64_t *v1893;
  unint64_t v1894;
  unint64_t v1895;
  char *v1896;
  uint64_t v1897;
  unint64_t v1898;
  int64x2_t *v1899;
  unint64_t v1900;
  uint64_t v1901;
  uint64_t v1902;
  unint64_t v1903;
  unint64_t v1904;
  unint64_t v1905;
  unint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  uint64_t v1909;
  _BOOL8 v1910;
  unint64_t v1911;
  uint64_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  unint64_t v1915;
  unint64_t v1916;
  unint64_t v1917;
  unint64_t v1918;
  unint64_t v1919;
  unint64_t v1920;
  uint64_t v1921;
  uint64_t v1922;
  unint64_t v1923;
  char *v1924;
  uint64_t v1925;
  uint64_t v1926;
  _QWORD *v1927;
  char *v1928;
  uint64_t v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  char *v1935;
  int64_t v1936;
  char *v1937;
  unint64_t v1938;
  char *v1939;
  uint64_t v1940;
  char *v1941;
  uint64_t *v1942;
  uint64_t v1943;
  uint64_t v1944;
  char *v1945;
  uint64_t v1946;
  void *v1947;
  uint64_t v1948;
  uint64_t v1949;
  unint64_t v1950;
  uint64_t v1951;
  unint64_t v1952;
  uint64_t v1953;
  char *i5;
  char *v1955;
  void *v1956;
  uint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  char *v1960;
  char *v1961;
  unint64_t v1962;
  char *v1963;
  uint64_t v1964;
  uint64_t v1965;
  uint64_t v1966;
  char *v1967;
  uint64_t v1968;
  uint64_t *v1969;
  char *v1970;
  void *v1971;
  uint64_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  char *v1975;
  char *v1976;
  unint64_t v1977;
  char *v1978;
  uint64_t v1979;
  uint64_t v1980;
  uint64_t v1981;
  char *v1982;
  uint64_t v1983;
  uint64_t v1984;
  uint64_t *v1985;
  char *v1986;
  _QWORD *v1987;
  char *v1988;
  void *v1989;
  uint64_t v1990;
  uint64_t v1991;
  uint64_t v1992;
  char *v1993;
  char *v1994;
  unint64_t v1995;
  char *v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  char *v2000;
  uint64_t v2001;
  uint64_t v2002;
  char *v2003;
  char *v2004;
  char *v2005;
  uint64_t v2006;
  unint64_t v2007;
  char *v2008;
  size_t v2009;
  unint64_t v2010;
  char *v2011;
  uint64_t v2012;
  char *v2013;
  uint64_t v2014;
  uint64_t v2015;
  char *v2016;
  char *v2017;
  uint64_t v2018;
  uint64_t v2019;
  void *v2020;
  int64x2_t v2021;
  __int128 v2022;
  void *v2023;
  uint64_t v2024;
  char *v2025;
  __int128 *v2026;
  uint64_t *v2027;
  uint64_t *v2028;
  char *v2029;
  __int128 *v2030;
  uint64_t v2031;
  uint64_t v2032;
  uint64_t v2033;
  unint64_t *v2034;
  unint64_t v2035;
  uint64_t v2036;
  unint64_t v2037;
  __int128 **v2038;
  __int128 *v2039;
  __int128 **v2040;
  __int128 *v2041;
  __int128 **v2042;
  __int128 *v2043;
  uint64_t v2044;
  uint64_t v2045;
  __int128 v2046;
  __int128 **v2047;
  __int128 *v2048;
  __int128 *v2049;
  __int128 **v2050;
  __int128 **v2051;
  __int128 *v2052;
  __int128 *v2053;
  __int128 *v2054;
  char *v2055;
  uint64_t v2056;
  __int128 *v2057;
  __int128 *v2058;
  __int128 *v2059;
  char *v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t *v2063;
  uint64_t v2064;
  uint64_t v2065;
  char *v2066;
  uint64_t i4;
  uint64_t v2068;
  uint64_t v2069;
  _QWORD *v2070;
  char *v2071;
  uint64_t v2072;
  uint64_t v2073;
  uint64_t v2074;
  uint64_t v2075;
  uint64_t v2076;
  uint64_t v2077;
  char *v2078;
  int64_t v2079;
  char *v2080;
  unint64_t v2081;
  char *v2082;
  uint64_t v2083;
  char *v2084;
  uint64_t *v2085;
  uint64_t v2086;
  uint64_t v2087;
  char *v2088;
  uint64_t v2089;
  void *v2090;
  char *v2091;
  uint64_t v2092;
  unint64_t v2093;
  uint64_t *v2094;
  uint64_t *v2095;
  char *v2096;
  _QWORD *v2097;
  uint64_t v2098;
  unint64_t *v2099;
  unint64_t v2100;
  _QWORD *v2101;
  uint64_t *v2102;
  uint64_t v2103;
  uint64_t *v2104;
  uint64_t v2105;
  uint64_t *v2106;
  uint64_t v2107;
  _QWORD *v2108;
  uint64_t v2109;
  uint64_t *v2110;
  uint64_t v2111;
  uint64_t v2112;
  uint64_t *v2113;
  uint64_t v2114;
  uint64_t *v2115;
  uint64_t v2116;
  uint64_t v2117;
  char *v2118;
  uint64_t v2119;
  uint64_t v2120;
  uint64_t v2121;
  uint64_t v2122;
  uint64_t v2123;
  uint64_t v2124;
  uint64_t *v2125;
  uint64_t v2126;
  _QWORD *v2127;
  _QWORD *v2128;
  uint64_t v2129;
  uint64_t v2130;
  uint64_t *v2131;
  unint64_t *v2132;
  unint64_t v2133;
  unint64_t v2134;
  uint64_t v2135;
  unint64_t v2136;
  unint64_t v2137;
  char *v2138;
  char *v2139;
  char *v2140;
  int64_t v2141;
  uint64_t v2142;
  uint64_t *v2143;
  uint64_t *v2144;
  unint64_t v2145;
  unint64_t v2146;
  char *v2147;
  uint64_t v2148;
  unint64_t v2149;
  int64x2_t *v2150;
  unint64_t v2151;
  uint64_t v2152;
  uint64_t v2153;
  unint64_t v2154;
  unint64_t v2155;
  unint64_t v2156;
  unint64_t v2157;
  uint64_t v2158;
  uint64_t v2159;
  uint64_t v2160;
  _BOOL8 v2161;
  unint64_t v2162;
  uint64_t v2163;
  uint64_t v2164;
  uint64_t v2165;
  unint64_t v2166;
  unint64_t v2167;
  unint64_t v2168;
  unint64_t v2169;
  unint64_t v2170;
  unint64_t v2171;
  uint64_t v2172;
  uint64_t v2173;
  unint64_t v2174;
  char *v2175;
  uint64_t v2176;
  uint64_t v2177;
  _QWORD *v2178;
  char *v2179;
  uint64_t v2180;
  uint64_t v2181;
  uint64_t v2182;
  uint64_t v2183;
  uint64_t v2184;
  uint64_t v2185;
  char *v2186;
  int64_t v2187;
  char *v2188;
  unint64_t v2189;
  char *v2190;
  uint64_t v2191;
  char *v2192;
  uint64_t *v2193;
  uint64_t v2194;
  uint64_t v2195;
  char *v2196;
  uint64_t v2197;
  void *v2198;
  uint64_t v2199;
  uint64_t v2200;
  unint64_t v2201;
  uint64_t v2202;
  unint64_t v2203;
  uint64_t v2204;
  char *i7;
  char *v2206;
  void *v2207;
  uint64_t v2208;
  uint64_t v2209;
  uint64_t v2210;
  char *v2211;
  char *v2212;
  unint64_t v2213;
  char *v2214;
  uint64_t v2215;
  uint64_t v2216;
  uint64_t v2217;
  char *v2218;
  uint64_t v2219;
  uint64_t *v2220;
  char *v2221;
  void *v2222;
  uint64_t v2223;
  uint64_t v2224;
  uint64_t v2225;
  char *v2226;
  char *v2227;
  unint64_t v2228;
  char *v2229;
  uint64_t v2230;
  uint64_t v2231;
  uint64_t v2232;
  char *v2233;
  uint64_t v2234;
  uint64_t v2235;
  uint64_t *v2236;
  char *v2237;
  _QWORD *v2238;
  char *v2239;
  void *v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t v2243;
  char *v2244;
  char *v2245;
  unint64_t v2246;
  char *v2247;
  uint64_t v2248;
  uint64_t v2249;
  uint64_t v2250;
  char *v2251;
  uint64_t v2252;
  uint64_t v2253;
  char *v2254;
  char *v2255;
  char *v2256;
  uint64_t v2257;
  unint64_t v2258;
  char *v2259;
  size_t v2260;
  unint64_t v2261;
  char *v2262;
  uint64_t v2263;
  char *v2264;
  uint64_t v2265;
  uint64_t v2266;
  char *v2267;
  char *v2268;
  uint64_t v2269;
  uint64_t v2270;
  void *v2271;
  int64x2_t v2272;
  __int128 v2273;
  void *v2274;
  uint64_t v2275;
  char *v2276;
  __int128 *v2277;
  uint64_t *v2278;
  uint64_t *v2279;
  char *v2280;
  __int128 *v2281;
  uint64_t v2282;
  uint64_t v2283;
  uint64_t v2284;
  unint64_t *v2285;
  unint64_t v2286;
  uint64_t v2287;
  unint64_t v2288;
  __int128 **v2289;
  __int128 *v2290;
  __int128 **v2291;
  __int128 *v2292;
  __int128 **v2293;
  __int128 *v2294;
  uint64_t v2295;
  uint64_t v2296;
  __int128 v2297;
  __int128 **v2298;
  __int128 *v2299;
  __int128 *v2300;
  __int128 **v2301;
  __int128 **v2302;
  __int128 *v2303;
  __int128 *v2304;
  __int128 *v2305;
  char *v2306;
  uint64_t v2307;
  __int128 *v2308;
  __int128 *v2309;
  __int128 *v2310;
  char *v2311;
  uint64_t v2312;
  uint64_t v2313;
  uint64_t *v2314;
  uint64_t v2315;
  uint64_t v2316;
  char *v2317;
  uint64_t i6;
  uint64_t v2319;
  uint64_t v2320;
  _QWORD *v2321;
  char *v2322;
  uint64_t v2323;
  uint64_t v2324;
  uint64_t v2325;
  uint64_t v2326;
  uint64_t v2327;
  uint64_t v2328;
  char *v2329;
  int64_t v2330;
  char *v2331;
  unint64_t v2332;
  char *v2333;
  uint64_t v2334;
  char *v2335;
  uint64_t *v2336;
  uint64_t v2337;
  uint64_t v2338;
  char *v2339;
  uint64_t v2340;
  void *v2341;
  char *v2342;
  uint64_t v2343;
  unint64_t v2344;
  uint64_t *v2345;
  uint64_t *v2346;
  char *v2347;
  _QWORD *v2348;
  uint64_t v2349;
  unint64_t *v2350;
  unint64_t v2351;
  _QWORD *v2352;
  uint64_t *v2353;
  uint64_t v2354;
  uint64_t *v2355;
  uint64_t v2356;
  uint64_t *v2357;
  uint64_t v2358;
  _QWORD *v2359;
  uint64_t v2360;
  uint64_t *v2361;
  uint64_t v2362;
  uint64_t v2363;
  uint64_t *v2364;
  uint64_t v2365;
  uint64_t *v2366;
  uint64_t v2367;
  uint64_t v2368;
  char *v2369;
  uint64_t v2370;
  uint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  uint64_t v2374;
  uint64_t v2375;
  uint64_t *v2376;
  uint64_t v2377;
  _QWORD *v2378;
  _QWORD *v2379;
  uint64_t v2380;
  uint64_t v2381;
  uint64_t *v2382;
  unint64_t *v2383;
  unint64_t v2384;
  uint64_t v2385;
  unint64_t v2386;
  unint64_t v2387;
  char *v2388;
  unint64_t v2389;
  char *v2390;
  char *v2391;
  int64_t v2392;
  uint64_t v2393;
  uint64_t *v2394;
  uint64_t *v2395;
  unint64_t v2396;
  unint64_t v2397;
  char *v2398;
  uint64_t v2399;
  unint64_t v2400;
  int64x2_t *v2401;
  unint64_t v2402;
  uint64_t v2403;
  uint64_t v2404;
  unint64_t v2405;
  unint64_t v2406;
  unint64_t v2407;
  unint64_t v2408;
  uint64_t v2409;
  uint64_t v2410;
  uint64_t v2411;
  _BOOL8 v2412;
  unint64_t v2413;
  uint64_t v2414;
  uint64_t v2415;
  uint64_t v2416;
  unint64_t v2417;
  unint64_t v2418;
  unint64_t v2419;
  unint64_t v2420;
  unint64_t v2421;
  unint64_t v2422;
  uint64_t v2423;
  uint64_t v2424;
  unint64_t v2425;
  char *v2426;
  uint64_t v2427;
  uint64_t v2428;
  _QWORD *v2429;
  char *v2430;
  uint64_t v2431;
  uint64_t v2432;
  uint64_t v2433;
  uint64_t v2434;
  uint64_t v2435;
  uint64_t v2436;
  char *v2437;
  int64_t v2438;
  char *v2439;
  unint64_t v2440;
  char *v2441;
  uint64_t v2442;
  char *v2443;
  uint64_t *v2444;
  uint64_t v2445;
  uint64_t v2446;
  char *v2447;
  uint64_t v2448;
  void *v2449;
  uint64_t v2450;
  uint64_t v2451;
  unint64_t v2452;
  uint64_t v2453;
  unint64_t v2454;
  uint64_t v2455;
  char *i9;
  char *v2457;
  void *v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  char *v2462;
  char *v2463;
  unint64_t v2464;
  char *v2465;
  uint64_t v2466;
  uint64_t v2467;
  uint64_t v2468;
  char *v2469;
  uint64_t v2470;
  uint64_t *v2471;
  char *v2472;
  void *v2473;
  uint64_t v2474;
  uint64_t v2475;
  uint64_t v2476;
  char *v2477;
  char *v2478;
  unint64_t v2479;
  char *v2480;
  uint64_t v2481;
  uint64_t v2482;
  uint64_t v2483;
  char *v2484;
  uint64_t v2485;
  uint64_t v2486;
  uint64_t *v2487;
  char *v2488;
  _QWORD *v2489;
  char *v2490;
  void *v2491;
  uint64_t v2492;
  uint64_t v2493;
  uint64_t v2494;
  char *v2495;
  char *v2496;
  unint64_t v2497;
  char *v2498;
  uint64_t v2499;
  uint64_t v2500;
  uint64_t v2501;
  char *v2502;
  uint64_t v2503;
  uint64_t v2504;
  char *v2505;
  char *v2506;
  char *v2507;
  uint64_t v2508;
  unint64_t v2509;
  char *v2510;
  size_t v2511;
  unint64_t v2512;
  char *v2513;
  uint64_t v2514;
  char *v2515;
  uint64_t v2516;
  uint64_t v2517;
  char *v2518;
  char *v2519;
  uint64_t v2520;
  uint64_t v2521;
  void *v2522;
  int64x2_t v2523;
  __int128 v2524;
  void *v2525;
  char *v2526;
  __int128 *v2527;
  uint64_t *v2528;
  uint64_t *v2529;
  char *v2530;
  __int128 *v2531;
  uint64_t v2532;
  uint64_t v2533;
  uint64_t v2534;
  unint64_t *v2535;
  unint64_t v2536;
  unint64_t v2537;
  __int128 **v2538;
  __int128 *v2539;
  __int128 **v2540;
  __int128 *v2541;
  __int128 **v2542;
  __int128 *v2543;
  uint64_t v2544;
  uint64_t v2545;
  __int128 v2546;
  __int128 **v2547;
  __int128 *v2548;
  __int128 *v2549;
  __int128 **v2550;
  __int128 **v2551;
  __int128 *v2552;
  __int128 *v2553;
  __int128 *v2554;
  char *v2555;
  uint64_t v2556;
  __int128 *v2557;
  __int128 *v2558;
  __int128 *v2559;
  char *v2560;
  uint64_t v2561;
  uint64_t v2562;
  uint64_t *v2563;
  uint64_t v2564;
  uint64_t v2565;
  char *v2566;
  uint64_t i8;
  uint64_t v2568;
  uint64_t v2569;
  _QWORD *v2570;
  char *v2571;
  uint64_t v2572;
  uint64_t v2573;
  uint64_t v2574;
  uint64_t v2575;
  uint64_t v2576;
  uint64_t v2577;
  char *v2578;
  int64_t v2579;
  char *v2580;
  unint64_t v2581;
  char *v2582;
  uint64_t v2583;
  char *v2584;
  uint64_t *v2585;
  uint64_t v2586;
  uint64_t v2587;
  char *v2588;
  uint64_t v2589;
  void *v2590;
  char *v2591;
  uint64_t v2592;
  unint64_t v2593;
  uint64_t *v2594;
  uint64_t *v2595;
  char *v2596;
  _QWORD *v2597;
  uint64_t v2598;
  unint64_t *v2599;
  unint64_t v2600;
  _QWORD *v2601;
  uint64_t *v2602;
  uint64_t v2603;
  uint64_t *v2604;
  uint64_t v2605;
  uint64_t *v2606;
  uint64_t v2607;
  _QWORD *v2608;
  uint64_t v2609;
  uint64_t *v2610;
  uint64_t v2611;
  uint64_t v2612;
  uint64_t *v2613;
  uint64_t v2614;
  uint64_t *v2615;
  uint64_t v2616;
  uint64_t v2617;
  char *v2618;
  uint64_t v2619;
  uint64_t v2620;
  uint64_t v2621;
  uint64_t v2622;
  uint64_t v2623;
  uint64_t v2624;
  uint64_t *v2625;
  uint64_t v2626;
  _QWORD *v2627;
  _QWORD *v2628;
  uint64_t v2629;
  uint64_t v2630;
  unint64_t *v2631;
  unint64_t v2632;
  unint64_t v2633;
  const char *v2634;
  int v2635;
  char *v2636;
  unsigned int **v2637;
  unint64_t v2638;
  uint64_t v2639;
  uint64_t v2640;
  uint64_t v2641;
  uint64_t v2642;
  std::__shared_weak_count *v2643;
  uint64_t v2644;
  uint64_t **v2645;
  unint64_t v2646;
  std::__shared_weak_count *v2647;
  uint64_t v2648;
  uint64_t v2649;
  uint64_t v2650;
  uint64_t v2651;
  unint64_t v2652;
  std::__shared_weak_count *v2653;
  int64x2_t *v2654;
  unint64_t v2655;
  unint64_t v2656;
  unint64_t v2657;
  unint64_t v2658;
  uint64_t **v2659;
  unint64_t v2660;
  __int128 v2661;
  uint64_t v2662;
  unint64_t v2663;
  unint64_t v2664;
  unint64_t v2665;
  unint64_t v2666;
  unint64_t v2667;
  unint64_t v2668;
  unint64_t v2669;
  unint64_t v2670;
  unint64_t v2671;
  unint64_t v2672;
  unint64_t v2673;
  unint64_t v2674;
  unint64_t v2675;
  unint64_t v2676;
  unint64_t v2677;
  unint64_t v2678;
  unint64_t v2679;
  unint64_t v2680;
  std::__shared_weak_count *v2681;
  unint64_t v2682;
  unint64_t v2683;
  unint64_t v2684;
  unint64_t v2685;
  unint64_t v2686;
  unint64_t v2687;
  unint64_t v2688;
  unint64_t v2689;
  unint64_t v2690;
  unint64_t v2691;
  unint64_t v2692;
  unint64_t v2693;
  unint64_t v2694;
  unint64_t v2695;
  unint64_t v2696;
  unint64_t v2697;
  unint64_t v2698;
  unint64_t v2699;
  __n128 v2700;
  __n128 v2701;
  std::__shared_weak_count *v2702;
  std::__shared_weak_count *v2703;
  unint64_t v2704;
  unint64_t v2705;
  unint64_t v2706;
  unint64_t v2707;
  unint64_t v2708;
  unint64_t v2709;
  unint64_t v2710;
  unint64_t v2711;
  unint64_t v2712;
  unint64_t v2713;
  unint64_t v2714;
  unint64_t v2715;
  unint64_t v2716;
  unint64_t v2717;
  unint64_t v2718;
  unint64_t v2719;
  unint64_t v2720;
  unint64_t v2721;
  unint64_t v2722;
  unint64_t v2723;
  unint64_t v2724;
  unint64_t v2725;
  unint64_t v2726;
  unint64_t v2727;
  unint64_t v2728;
  unint64_t v2729;
  __int128 v2730;
  __int128 v2731;
  __int128 v2732;
  __n128 v2733;
  char *v2734;
  __n128 v2735;
  char *v2736;
  __n128 v2737;
  char *v2738;
  __int128 v2739;
  char *v2740;
  int64x2_t v2741;
  char *v2742;
  __n128 v2743;
  char *v2744;
  char *v2745;
  char *v2746;
  uint64_t v2747;
  __n128 v2748;
  char *v2749;
  __int128 v2750;
  char *v2751;
  __int128 v2752;
  __int128 v2753;
  __int8 *v2754;

  v2750 = 0uLL;
  v2751 = 0;
  v2748 = 0uLL;
  v2749 = 0;
  v2745 = 0;
  v2746 = 0;
  v2747 = 0;
  v2743 = 0uLL;
  v2744 = 0;
  v2741 = 0uLL;
  v2742 = 0;
  v2739 = 0uLL;
  v2740 = 0;
  v2737 = 0uLL;
  v2738 = 0;
  v2735 = 0uLL;
  v2736 = 0;
  v2733 = 0uLL;
  v2734 = 0;
  v6 = (char *)operator new(0x40uLL);
  *((_QWORD *)v6 + 1) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E29178A0;
  *(_OWORD *)(v6 + 24) = 0u;
  v8 = v6 + 24;
  *(_OWORD *)(v6 + 40) = 0u;
  *((_QWORD *)v6 + 7) = 0;
  v10 = *a2;
  v9 = a2[1];
  v2643 = (std::__shared_weak_count *)v6;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 2);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v13 = (std::__shared_weak_count *)*((_QWORD *)v6 + 4);
    *((_QWORD *)v6 + 3) = v10;
    *((_QWORD *)v6 + 4) = v9;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    *((_QWORD *)v6 + 3) = v10;
    *((_QWORD *)v6 + 4) = 0;
  }
  v16 = (std::__shared_weak_count *)v2643[2].__vftable;
  v2643[1].__shared_weak_owners_ = 0;
  v2643[2].__vftable = 0;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *a2;
  v2654 = (int64x2_t *)a1;
  if (**a2)
  {
    v20 = 0;
    v2650 = (uint64_t)(a1 + 74);
    v2659 = (uint64_t **)(a1 + 80);
    v2645 = (uint64_t **)(a1 + 77);
    v2636 = v8;
    v2637 = a2;
    do
    {
      v2639 = v20;
      v21 = *(_QWORD *)(*(_QWORD *)(v19 + 1) + 8 * v20);
      v22 = (std::__shared_weak_count *)operator new(0x40uLL);
      v22->__shared_owners_ = 0;
      v23 = (unint64_t *)&v22->__shared_owners_;
      v22->__shared_weak_owners_ = 0;
      v22->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917750;
      v22[1].std::__shared_count = 0u;
      v2642 = (uint64_t)&v22[1];
      *(_OWORD *)&v22[1].__shared_weak_owners_ = 0u;
      v22[2].__shared_owners_ = 0;
      *(_QWORD *)&v2752 = v21;
      if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v2659, v21, (uint64_t *)&v2752)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr");
      v24 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v2659, v21, (uint64_t *)&v2752);
      v25 = *(std::__shared_count *)(v24 + 5);
      v26 = v24[6];
      if (v26)
      {
        v27 = (unint64_t *)(v26 + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      shared_owners = (std::__shared_weak_count *)v22[1].__shared_owners_;
      v22[1].std::__shared_count = v25;
      if (shared_owners)
      {
        v30 = (unint64_t *)&shared_owners->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
          std::__shared_weak_count::__release_weak(shared_owners);
        }
      }
      v32.n128_u64[0] = (unint64_t)&v22[1];
      v32.n128_u64[1] = (unint64_t)v22;
      do
        v33 = __ldxr(v7);
      while (__stxr(v33 + 1, v7));
      v34 = (std::__shared_weak_count *)v22[2].__vftable;
      v22[1].__shared_weak_owners_ = (uint64_t)v8;
      v22[2].__vftable = (std::__shared_weak_count_vtbl *)v2643;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          v2700 = v32;
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          v32 = v2700;
        }
      }
      *(double *)&v22[2].__shared_owners_ = a3;
      v37 = (_QWORD *)*((_QWORD *)&v2750 + 1);
      if (*((_QWORD *)&v2750 + 1) >= (unint64_t)v2751)
      {
        v40 = (_QWORD *)v2750;
        v41 = (uint64_t)(*((_QWORD *)&v2750 + 1) - v2750) >> 4;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v2701 = v32;
        v43 = (uint64_t)&v2751[-v2750];
        if ((uint64_t)&v2751[-v2750] >> 3 > v42)
          v42 = v43 >> 3;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
          v44 = 0xFFFFFFFFFFFFFFFLL;
        else
          v44 = v42;
        if (v44 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v45 = (char *)operator new(16 * v44);
        v46 = (__n128 *)&v45[16 * v41];
        *v46 = v2701;
        do
          v47 = __ldxr(v23);
        while (__stxr(v47 + 1, v23));
        if (v37 == v40)
        {
          v32 = (__n128)vdupq_n_s64((unint64_t)v37);
          v48 = &v45[16 * v41];
        }
        else
        {
          v48 = &v45[16 * v41];
          do
          {
            v49 = *((_OWORD *)v37 - 1);
            v37 -= 2;
            *((_OWORD *)v48 - 1) = v49;
            v48 -= 16;
            *v37 = 0;
            v37[1] = 0;
          }
          while (v37 != v40);
          v32 = (__n128)v2750;
        }
        v39 = v46 + 1;
        *(_QWORD *)&v2750 = v48;
        *((_QWORD *)&v2750 + 1) = v46 + 1;
        v2751 = &v45[16 * v44];
        v50 = v32.n128_i64[1];
        v51 = (void *)v32.n128_u64[0];
        while ((void *)v50 != v51)
          v50 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v50 - 16);
        if (v51)
          operator delete(v51);
      }
      else
      {
        **((_QWORD **)&v2750 + 1) = v2642;
        v37[1] = v22;
        do
          v38 = __ldxr(v23);
        while (__stxr(v38 + 1, v23));
        v39 = (__n128 *)(v37 + 2);
      }
      *((_QWORD *)&v2750 + 1) = v39;
      if (*(_DWORD *)(v21 + 52))
      {
        v52 = 0;
        v2641 = (uint64_t)v22;
        v2638 = v21;
        do
        {
          v53 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v52);
          v54 = (char *)operator new(0x40uLL);
          *((_QWORD *)v54 + 1) = 0;
          v55 = (unint64_t *)(v54 + 8);
          *((_QWORD *)v54 + 2) = 0;
          *(_QWORD *)v54 = &off_1E29176E0;
          *(_OWORD *)(v54 + 24) = 0u;
          v2651 = (uint64_t)(v54 + 24);
          v2652 = v53;
          *(_OWORD *)(v54 + 40) = 0u;
          v2653 = (std::__shared_weak_count *)v54;
          *((_QWORD *)v54 + 7) = 0;
          *(_QWORD *)&v2752 = v53;
          i = v2659;
          if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v2659, v53, (uint64_t *)&v2752)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr");
          v57 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v2659, v53, (uint64_t *)&v2752);
          v2640 = v52;
          v58 = *(std::__shared_count *)(v57 + 5);
          v59 = v57[6];
          if (v59)
          {
            v60 = (unint64_t *)(v59 + 8);
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
          }
          v62 = (std::__shared_weak_count *)v2653[1].__shared_owners_;
          v2653[1].std::__shared_count = v58;
          if (v62)
          {
            v63 = (unint64_t *)&v62->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](&v2653[1].__shared_weak_owners_, v2642, v2641);
          *(double *)&v2653[2].__shared_owners_ = a3;
          v65 = (_QWORD *)v2748.n128_u64[1];
          if (v2748.n128_u64[1] >= (unint64_t)v2749)
          {
            v68 = (_QWORD *)v2748.n128_u64[0];
            v69 = (uint64_t)(v2748.n128_u64[1] - v2748.n128_u64[0]) >> 4;
            v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 60)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v71 = (uint64_t)&v2749[-v2748.n128_u64[0]];
            if ((uint64_t)&v2749[-v2748.n128_u64[0]] >> 3 > v70)
              v70 = v71 >> 3;
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0)
              v72 = 0xFFFFFFFFFFFFFFFLL;
            else
              v72 = v70;
            if (v72 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v73 = (char *)operator new(16 * v72);
            *(_QWORD *)&v74 = v2651;
            *((_QWORD *)&v74 + 1) = v2653;
            v75 = &v73[16 * v69];
            *(_OWORD *)v75 = v74;
            do
              v76 = __ldxr(v55);
            while (__stxr(v76 + 1, v55));
            if (v65 == v68)
            {
              v32 = (__n128)vdupq_n_s64((unint64_t)v65);
              v77 = &v73[16 * v69];
            }
            else
            {
              v77 = &v73[16 * v69];
              do
              {
                v78 = *((_OWORD *)v65 - 1);
                v65 -= 2;
                *((_OWORD *)v77 - 1) = v78;
                v77 -= 16;
                *v65 = 0;
                v65[1] = 0;
              }
              while (v65 != v68);
              v32 = v2748;
            }
            v67 = v75 + 16;
            v2748.n128_u64[0] = (unint64_t)v77;
            v2748.n128_u64[1] = (unint64_t)(v75 + 16);
            v2749 = &v73[16 * v72];
            v79 = v32.n128_i64[1];
            v80 = (void *)v32.n128_u64[0];
            while ((void *)v79 != v80)
              v79 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v79 - 16);
            if (v80)
              operator delete(v80);
          }
          else
          {
            *(_QWORD *)v2748.n128_u64[1] = v2651;
            v65[1] = v2653;
            do
              v66 = __ldxr(v55);
            while (__stxr(v66 + 1, v55));
            v67 = v65 + 2;
          }
          v2748.n128_u64[1] = (unint64_t)v67;
          v81 = v2652;
          if (*(_DWORD *)(v2652 + 24))
          {
            v82 = 0;
            do
            {
              v83 = *(_QWORD *)(*(_QWORD *)(v81 + 28) + 8 * v82);
              v84 = (char *)operator new(0x40uLL);
              *((_QWORD *)v84 + 1) = 0;
              *((_QWORD *)v84 + 2) = 0;
              *(_QWORD *)v84 = &off_1E29176A8;
              *(_OWORD *)(v84 + 24) = 0u;
              v85 = (uint64_t)(v84 + 24);
              *(_OWORD *)(v84 + 40) = 0u;
              *((_QWORD *)v84 + 7) = 0;
              *(_QWORD *)&v2732 = v84 + 24;
              *((_QWORD *)&v2732 + 1) = v84;
              AudioMetadataMemoryPool::lookup<AudioMetadataObject>(&v2752, v2650, v83);
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v85, &v2752);
              v86 = (std::__shared_weak_count *)*((_QWORD *)&v2752 + 1);
              if (*((_QWORD *)&v2752 + 1))
              {
                v87 = (unint64_t *)(*((_QWORD *)&v2752 + 1) + 8);
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 - 1, v87));
                if (!v88)
                {
                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                  std::__shared_weak_count::__release_weak(v86);
                }
              }
              v2644 = v82;
              v89 = v2732;
              std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)(v2732 + 16), v2651, (uint64_t)v2653);
              *(double *)(v89 + 32) = a3;
              std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100](&v2745, &v2732);
              v90 = *(_QWORD *)(v83 + 104);
              v2660 = v83;
              if (v90)
              {
                v91 = (char *)operator new(0x40uLL);
                *((_QWORD *)v91 + 1) = 0;
                v92 = (unint64_t *)(v91 + 8);
                *((_QWORD *)v91 + 2) = 0;
                *(_QWORD *)v91 = &off_1E2917788;
                *(_OWORD *)(v91 + 24) = 0u;
                v2648 = (uint64_t)(v91 + 24);
                *(_OWORD *)(v91 + 40) = 0u;
                *((_QWORD *)v91 + 7) = 0;
                *(_QWORD *)&v2752 = v90;
                if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(i, v90, (uint64_t *)&v2752)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr");
                v93 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(i, v90, (uint64_t *)&v2752);
                v2646 = v90;
                v94 = *(_OWORD *)(v93 + 5);
                v95 = v93[6];
                if (v95)
                {
                  v96 = (unint64_t *)(v95 + 8);
                  do
                    v97 = __ldxr(v96);
                  while (__stxr(v97 + 1, v96));
                }
                v98 = (std::__shared_weak_count *)*((_QWORD *)v91 + 4);
                *(_OWORD *)(v91 + 24) = v94;
                if (v98)
                {
                  v99 = (unint64_t *)&v98->__shared_owners_;
                  do
                    v100 = __ldaxr(v99);
                  while (__stlxr(v100 - 1, v99));
                  if (!v100)
                  {
                    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                    std::__shared_weak_count::__release_weak(v98);
                  }
                }
                std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)v91 + 5, v2732, *((uint64_t *)&v2732 + 1));
                *((double *)v91 + 7) = a3;
                v101 = (_QWORD *)v2743.n128_u64[1];
                v2647 = (std::__shared_weak_count *)v91;
                if (v2743.n128_u64[1] >= (unint64_t)v2744)
                {
                  v104 = (_QWORD *)v2743.n128_u64[0];
                  v105 = (uint64_t)(v2743.n128_u64[1] - v2743.n128_u64[0]) >> 4;
                  v106 = v105 + 1;
                  if ((unint64_t)(v105 + 1) >> 60)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v107 = (uint64_t)&v2744[-v2743.n128_u64[0]];
                  if ((uint64_t)&v2744[-v2743.n128_u64[0]] >> 3 > v106)
                    v106 = v107 >> 3;
                  if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0)
                    v108 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v108 = v106;
                  if (v108 >> 60)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v109 = (char *)operator new(16 * v108);
                  *(_QWORD *)&v110 = v2648;
                  *((_QWORD *)&v110 + 1) = v2647;
                  v111 = &v109[16 * v105];
                  *(_OWORD *)v111 = v110;
                  do
                    v112 = __ldxr(v92);
                  while (__stxr(v112 + 1, v92));
                  v83 = v2660;
                  if (v101 == v104)
                  {
                    v32 = (__n128)vdupq_n_s64((unint64_t)v101);
                    v113 = v111;
                  }
                  else
                  {
                    v113 = v111;
                    do
                    {
                      v114 = *((_OWORD *)v101 - 1);
                      v101 -= 2;
                      *((_OWORD *)v113 - 1) = v114;
                      v113 -= 16;
                      *v101 = 0;
                      v101[1] = 0;
                    }
                    while (v101 != v104);
                    v32 = v2743;
                  }
                  v103 = v111 + 16;
                  v2743.n128_u64[0] = (unint64_t)v113;
                  v2743.n128_u64[1] = (unint64_t)(v111 + 16);
                  v2744 = &v109[16 * v108];
                  v115 = v32.n128_i64[1];
                  v116 = (void *)v32.n128_u64[0];
                  while ((void *)v115 != v116)
                    v115 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v115 - 16);
                  if (v116)
                    operator delete(v116);
                }
                else
                {
                  *(_QWORD *)v2743.n128_u64[1] = v2648;
                  v101[1] = v91;
                  do
                    v102 = __ldxr(v92);
                  while (__stxr(v102 + 1, v92));
                  v103 = v101 + 2;
                }
                v2743.n128_u64[1] = (unint64_t)v103;
                v117 = v2646;
                if (*(_DWORD *)(v2646 + 28))
                {
                  v118 = 0;
                  do
                  {
                    v2649 = v118;
                    v119 = *(_QWORD *)(*(_QWORD *)(v117 + 32) + 8 * v118);
                    v120 = (char *)operator new(0x40uLL);
                    *((_QWORD *)v120 + 1) = 0;
                    v121 = (unint64_t *)(v120 + 8);
                    *((_QWORD *)v120 + 2) = 0;
                    *(_QWORD *)v120 = &off_1E2917868;
                    *(_OWORD *)(v120 + 24) = 0u;
                    *(_QWORD *)&v2661 = v120 + 24;
                    *((_QWORD *)&v2661 + 1) = v120;
                    *(_OWORD *)(v120 + 40) = 0u;
                    *((_QWORD *)v120 + 7) = 0;
                    *(_QWORD *)&v2752 = v119;
                    if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(i, v119, (uint64_t *)&v2752)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr");
                    v122 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(i, v119, (uint64_t *)&v2752);
                    v123 = *(_OWORD *)(v122 + 5);
                    v124 = v122[6];
                    if (v124)
                    {
                      v125 = (unint64_t *)(v124 + 8);
                      do
                        v126 = __ldxr(v125);
                      while (__stxr(v126 + 1, v125));
                    }
                    v127 = *(std::__shared_weak_count **)(*((_QWORD *)&v2661 + 1) + 32);
                    *(_OWORD *)(*((_QWORD *)&v2661 + 1) + 24) = v123;
                    if (v127)
                    {
                      v128 = (unint64_t *)&v127->__shared_owners_;
                      do
                        v129 = __ldaxr(v128);
                      while (__stlxr(v129 - 1, v128));
                      if (!v129)
                      {
                        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                        std::__shared_weak_count::__release_weak(v127);
                      }
                    }
                    std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)&v2661 + 1) + 40), v2648, (uint64_t)v2647);
                    *(double *)(*((_QWORD *)&v2661 + 1) + 56) = a3;
                    v130 = (_QWORD *)v2741.i64[1];
                    v2657 = v119;
                    if (v2741.i64[1] >= (unint64_t)v2742)
                    {
                      v133 = (_QWORD *)v2741.i64[0];
                      v134 = (v2741.i64[1] - v2741.i64[0]) >> 4;
                      v135 = v134 + 1;
                      if ((unint64_t)(v134 + 1) >> 60)
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      v136 = (uint64_t)&v2742[-v2741.i64[0]];
                      if ((uint64_t)&v2742[-v2741.i64[0]] >> 3 > v135)
                        v135 = v136 >> 3;
                      if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF0)
                        v137 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v137 = v135;
                      if (v137 >> 60)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v138 = (char *)operator new(16 * v137);
                      v139 = &v138[16 * v134];
                      *(_OWORD *)v139 = v2661;
                      do
                        v140 = __ldxr(v121);
                      while (__stxr(v140 + 1, v121));
                      i = v2659;
                      if (v130 == v133)
                      {
                        v143 = vdupq_n_s64((unint64_t)v130);
                        v141 = v139;
                      }
                      else
                      {
                        v141 = v139;
                        do
                        {
                          v142 = *((_OWORD *)v130 - 1);
                          v130 -= 2;
                          *((_OWORD *)v141 - 1) = v142;
                          v141 -= 16;
                          *v130 = 0;
                          v130[1] = 0;
                        }
                        while (v130 != v133);
                        v143 = v2741;
                      }
                      v132 = v139 + 16;
                      v2741.i64[0] = (uint64_t)v141;
                      v2741.i64[1] = (uint64_t)(v139 + 16);
                      v2742 = &v138[16 * v137];
                      v144 = v143.i64[1];
                      v145 = (void *)v143.i64[0];
                      while ((void *)v144 != v145)
                        v144 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v144 - 16);
                      v119 = v2657;
                      if (v145)
                        operator delete(v145);
                    }
                    else
                    {
                      *(_QWORD *)v2741.i64[1] = v2661;
                      v130[1] = *((_QWORD *)&v2661 + 1);
                      do
                        v131 = __ldxr(v121);
                      while (__stxr(v131 + 1, v121));
                      v132 = v130 + 2;
                    }
                    v2741.i64[1] = (uint64_t)v132;
                    v83 = v2660;
                    if (*(_DWORD *)(v119 + 24))
                    {
                      v146 = 0;
                      do
                      {
                        v147 = *(_QWORD *)(*(_QWORD *)(v119 + 28) + 8 * v146);
                        v148 = (char *)operator new(0x40uLL);
                        *((_QWORD *)v148 + 1) = 0;
                        v149 = (unint64_t *)(v148 + 8);
                        *((_QWORD *)v148 + 2) = 0;
                        *(_QWORD *)v148 = &off_1E29177C0;
                        *(_OWORD *)(v148 + 24) = 0u;
                        v150 = (uint64_t)(v148 + 24);
                        *(_OWORD *)(v148 + 40) = 0u;
                        v2702 = (std::__shared_weak_count *)v148;
                        *((_QWORD *)v148 + 7) = 0;
                        *(_QWORD *)&v2730 = v147;
                        if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(i, v147, (uint64_t *)&v2730)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr");
                        v151 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(i, v147, (uint64_t *)&v2730);
                        v152 = v151[6];
                        *(_QWORD *)&v2752 = v151[5];
                        *((_QWORD *)&v2752 + 1) = v152;
                        if (v152)
                        {
                          v153 = (unint64_t *)(v152 + 8);
                          do
                            v154 = __ldxr(v153);
                          while (__stxr(v154 + 1, v153));
                        }
                        std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v150, &v2752);
                        v155 = (std::__shared_weak_count *)*((_QWORD *)&v2752 + 1);
                        if (*((_QWORD *)&v2752 + 1))
                        {
                          v156 = (unint64_t *)(*((_QWORD *)&v2752 + 1) + 8);
                          do
                            v157 = __ldaxr(v156);
                          while (__stlxr(v157 - 1, v156));
                          if (!v157)
                          {
                            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                            std::__shared_weak_count::__release_weak(v155);
                          }
                        }
                        std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](&v2702[1].__shared_weak_owners_, v2661, *((uint64_t *)&v2661 + 1));
                        *(double *)&v2702[2].__shared_owners_ = a3;
                        v158 = (_QWORD *)*((_QWORD *)&v2739 + 1);
                        if (*((_QWORD *)&v2739 + 1) >= (unint64_t)v2740)
                        {
                          v2656 = v146;
                          v161 = (_QWORD *)v2739;
                          v162 = (uint64_t)(*((_QWORD *)&v2739 + 1) - v2739) >> 4;
                          v163 = v162 + 1;
                          if ((unint64_t)(v162 + 1) >> 60)
                            std::vector<float>::__throw_length_error[abi:ne180100]();
                          v164 = (uint64_t)&v2740[-v2739];
                          if ((uint64_t)&v2740[-v2739] >> 3 > v163)
                            v163 = v164 >> 3;
                          if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF0)
                            v163 = 0xFFFFFFFFFFFFFFFLL;
                          if (v163 >> 60)
                            std::__throw_bad_array_new_length[abi:ne180100]();
                          v2655 = v163;
                          v165 = (char *)operator new(16 * v163);
                          *(_QWORD *)&v166 = v150;
                          *((_QWORD *)&v166 + 1) = v2702;
                          v167 = &v165[16 * v162];
                          *(_OWORD *)v167 = v166;
                          do
                            v168 = __ldxr(v149);
                          while (__stxr(v168 + 1, v149));
                          v146 = v2656;
                          if (v158 == v161)
                          {
                            v172 = vdupq_n_s64((unint64_t)v158);
                            v169 = v167;
                            v170 = v2655;
                          }
                          else
                          {
                            v169 = v167;
                            v170 = v2655;
                            do
                            {
                              v171 = *((_OWORD *)v158 - 1);
                              v158 -= 2;
                              *((_OWORD *)v169 - 1) = v171;
                              v169 -= 16;
                              *v158 = 0;
                              v158[1] = 0;
                            }
                            while (v158 != v161);
                            v172 = (int64x2_t)v2739;
                          }
                          v160 = v167 + 16;
                          *(_QWORD *)&v2739 = v169;
                          *((_QWORD *)&v2739 + 1) = v167 + 16;
                          v2740 = &v165[16 * v170];
                          v173 = v172.i64[1];
                          v174 = (void *)v172.i64[0];
                          for (i = v2659;
                                (void *)v173 != v174;
                          if (v174)
                            operator delete(v174);
                          v119 = v2657;
                        }
                        else
                        {
                          **((_QWORD **)&v2739 + 1) = v150;
                          v158[1] = v2702;
                          do
                            v159 = __ldxr(v149);
                          while (__stxr(v159 + 1, v149));
                          v160 = v158 + 2;
                          v119 = v2657;
                          i = v2659;
                        }
                        *((_QWORD *)&v2739 + 1) = v160;
                        do
                          v175 = __ldaxr(v149);
                        while (__stlxr(v175 - 1, v149));
                        v83 = v2660;
                        if (!v175)
                        {
                          ((void (*)(std::__shared_weak_count *))v2702->__on_zero_shared)(v2702);
                          std::__shared_weak_count::__release_weak(v2702);
                        }
                        ++v146;
                      }
                      while (v146 < *(unsigned int *)(v119 + 24));
                    }
                    v2731 = v2661;
                    do
                      v176 = __ldxr(v121);
                    while (__stxr(v176 + 1, v121));
                    v177 = operator new[]();
                    std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v2752, v177);
                    v178 = 0;
                    *(_QWORD *)(v119 + 28) = v2752;
                    *(_DWORD *)(v119 + 24) = 0;
                    do
                    {
                      *(_QWORD *)(*(_QWORD *)(v119 + 28) + v178) = 0;
                      v178 += 8;
                    }
                    while (v178 != 0x8000);
                    *(_QWORD *)&v2730 = v2661;
                    v179 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v2645, v2661, (uint64_t **)&v2730);
                    std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v179 + 5, &v2752);
                    v180 = (std::__shared_weak_count *)*((_QWORD *)&v2752 + 1);
                    if (*((_QWORD *)&v2752 + 1))
                    {
                      v181 = (unint64_t *)(*((_QWORD *)&v2752 + 1) + 8);
                      do
                        v182 = __ldaxr(v181);
                      while (__stlxr(v182 - 1, v181));
                      if (!v182)
                      {
                        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                        std::__shared_weak_count::__release_weak(v180);
                      }
                    }
                    v183 = (std::__shared_weak_count *)*((_QWORD *)&v2731 + 1);
                    if (*((_QWORD *)&v2731 + 1))
                    {
                      v184 = (unint64_t *)(*((_QWORD *)&v2731 + 1) + 8);
                      do
                        v185 = __ldaxr(v184);
                      while (__stlxr(v185 - 1, v184));
                      if (!v185)
                      {
                        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                        std::__shared_weak_count::__release_weak(v183);
                      }
                    }
                    do
                      v186 = __ldaxr(v121);
                    while (__stlxr(v186 - 1, v121));
                    v117 = v2646;
                    if (!v186)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v2661 + 1) + 16))(*((_QWORD *)&v2661 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v2661 + 1));
                    }
                    v118 = v2649 + 1;
                  }
                  while (v2649 + 1 < (unint64_t)*(unsigned int *)(v2646 + 28));
                }
                do
                  v187 = __ldaxr(v92);
                while (__stlxr(v187 - 1, v92));
                if (!v187)
                {
                  ((void (*)(std::__shared_weak_count *))v2647->__on_zero_shared)(v2647);
                  std::__shared_weak_count::__release_weak(v2647);
                }
              }
              if (*(_DWORD *)(v83 + 136))
              {
                v188 = 0;
                do
                {
                  v189 = *(_QWORD *)(*(_QWORD *)(v83 + 140) + 8 * v188);
                  v190 = (char *)operator new(0x40uLL);
                  v191 = v188;
                  *((_QWORD *)v190 + 1) = 0;
                  v192 = (unint64_t *)(v190 + 8);
                  *((_QWORD *)v190 + 2) = 0;
                  *(_QWORD *)v190 = &off_1E2917718;
                  *(_OWORD *)(v190 + 24) = 0u;
                  v193 = v190 + 24;
                  *(_OWORD *)(v190 + 40) = 0u;
                  v2703 = (std::__shared_weak_count *)v190;
                  *((_QWORD *)v190 + 7) = 0;
                  *(_QWORD *)&v2752 = v189;
                  if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(i, v189, (uint64_t *)&v2752)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr");
                  v194 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(i, v189, (uint64_t *)&v2752);
                  v195 = *(std::__shared_count *)(v194 + 5);
                  v196 = v194[6];
                  if (v196)
                  {
                    v197 = (unint64_t *)(v196 + 8);
                    do
                      v198 = __ldxr(v197);
                    while (__stxr(v198 + 1, v197));
                  }
                  v199 = v2703;
                  v200 = (std::__shared_weak_count *)v2703[1].__shared_owners_;
                  v2703[1].std::__shared_count = v195;
                  if (v200)
                  {
                    v201 = (unint64_t *)&v200->__shared_owners_;
                    do
                      v202 = __ldaxr(v201);
                    while (__stlxr(v202 - 1, v201));
                    v199 = v2703;
                    if (!v202)
                    {
                      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                      std::__shared_weak_count::__release_weak(v200);
                      v199 = v2703;
                    }
                  }
                  v203 = v199;
                  std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](&v199[1].__shared_weak_owners_, v2732, *((uint64_t *)&v2732 + 1));
                  *(double *)&v203[2].__shared_owners_ = a3;
                  v204 = (_QWORD *)v2737.n128_u64[1];
                  v2662 = v191;
                  if (v2737.n128_u64[1] >= (unint64_t)v2738)
                  {
                    v207 = (_QWORD *)v2737.n128_u64[0];
                    v208 = (uint64_t)(v2737.n128_u64[1] - v2737.n128_u64[0]) >> 4;
                    v209 = v208 + 1;
                    if ((unint64_t)(v208 + 1) >> 60)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v210 = (uint64_t)&v2738[-v2737.n128_u64[0]];
                    if ((uint64_t)&v2738[-v2737.n128_u64[0]] >> 3 > v209)
                      v209 = v210 >> 3;
                    if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFF0)
                      v211 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v211 = v209;
                    if (v211 >> 60)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v212 = (char *)operator new(16 * v211);
                    *(_QWORD *)&v213 = v193;
                    *((_QWORD *)&v213 + 1) = v2703;
                    v214 = &v212[16 * v208];
                    *(_OWORD *)v214 = v213;
                    do
                      v215 = __ldxr(v192);
                    while (__stxr(v215 + 1, v192));
                    i = v2659;
                    if (v204 == v207)
                    {
                      v32 = (__n128)vdupq_n_s64((unint64_t)v204);
                      v216 = v214;
                    }
                    else
                    {
                      v216 = v214;
                      do
                      {
                        v217 = *((_OWORD *)v204 - 1);
                        v204 -= 2;
                        *((_OWORD *)v216 - 1) = v217;
                        v216 -= 16;
                        *v204 = 0;
                        v204[1] = 0;
                      }
                      while (v204 != v207);
                      v32 = v2737;
                    }
                    v206 = v214 + 16;
                    v2737.n128_u64[0] = (unint64_t)v216;
                    v2737.n128_u64[1] = (unint64_t)(v214 + 16);
                    v2738 = &v212[16 * v211];
                    v218 = v32.n128_i64[1];
                    v219 = (void *)v32.n128_u64[0];
                    while ((void *)v218 != v219)
                      v218 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v218 - 16);
                    if (v219)
                      operator delete(v219);
                  }
                  else
                  {
                    *(_QWORD *)v2737.n128_u64[1] = v193;
                    v204[1] = v203;
                    do
                      v205 = __ldxr(v192);
                    while (__stxr(v205 + 1, v192));
                    v206 = v204 + 2;
                  }
                  v2737.n128_u64[1] = (unint64_t)v206;
                  v220 = *(_QWORD *)(v189 + 12);
                  v83 = v2660;
                  if (v220)
                  {
                    v221 = (char *)operator new(0x40uLL);
                    *((_QWORD *)v221 + 1) = 0;
                    v222 = (unint64_t *)(v221 + 8);
                    *((_QWORD *)v221 + 2) = 0;
                    *(_QWORD *)v221 = &off_1E29177F8;
                    *(_OWORD *)(v221 + 24) = 0u;
                    v223 = (uint64_t)(v221 + 24);
                    *(_OWORD *)(v221 + 40) = 0u;
                    v2681 = (std::__shared_weak_count *)v221;
                    *((_QWORD *)v221 + 7) = 0;
                    *(_QWORD *)&v2752 = v220;
                    if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(i, v220, (uint64_t *)&v2752)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr");
                    v224 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(i, v220, (uint64_t *)&v2752);
                    v2658 = v220;
                    v225 = *(std::__shared_count *)(v224 + 5);
                    v226 = v224[6];
                    if (v226)
                    {
                      v227 = (unint64_t *)(v226 + 8);
                      do
                        v228 = __ldxr(v227);
                      while (__stxr(v228 + 1, v227));
                    }
                    v229 = v2681;
                    v230 = (std::__shared_weak_count *)v2681[1].__shared_owners_;
                    v2681[1].std::__shared_count = v225;
                    if (v230)
                    {
                      v231 = (unint64_t *)&v230->__shared_owners_;
                      do
                        v232 = __ldaxr(v231);
                      while (__stlxr(v232 - 1, v231));
                      v229 = v2681;
                      if (!v232)
                      {
                        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                        std::__shared_weak_count::__release_weak(v230);
                        v229 = v2681;
                      }
                    }
                    v233 = (uint64_t)v193;
                    v234 = v229;
                    std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](&v229[1].__shared_weak_owners_, v233, (uint64_t)v2703);
                    *(double *)&v234[2].__shared_owners_ = a3;
                    v235 = (_QWORD *)v2735.n128_u64[1];
                    if (v2735.n128_u64[1] >= (unint64_t)v2736)
                    {
                      v238 = (_QWORD *)v2735.n128_u64[0];
                      v239 = (uint64_t)(v2735.n128_u64[1] - v2735.n128_u64[0]) >> 4;
                      v240 = v239 + 1;
                      if ((unint64_t)(v239 + 1) >> 60)
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      v241 = (uint64_t)&v2736[-v2735.n128_u64[0]];
                      if ((uint64_t)&v2736[-v2735.n128_u64[0]] >> 3 > v240)
                        v240 = v241 >> 3;
                      if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF0)
                        v242 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v242 = v240;
                      if (v242 >> 60)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v243 = (char *)operator new(16 * v242);
                      *(_QWORD *)&v244 = v223;
                      *((_QWORD *)&v244 + 1) = v2681;
                      v245 = &v243[16 * v239];
                      *(_OWORD *)v245 = v244;
                      do
                        v246 = __ldxr(v222);
                      while (__stxr(v246 + 1, v222));
                      v83 = v2660;
                      if (v235 == v238)
                      {
                        v32 = (__n128)vdupq_n_s64((unint64_t)v235);
                        v247 = v245;
                      }
                      else
                      {
                        v247 = v245;
                        do
                        {
                          v248 = *((_OWORD *)v235 - 1);
                          v235 -= 2;
                          *((_OWORD *)v247 - 1) = v248;
                          v247 -= 16;
                          *v235 = 0;
                          v235[1] = 0;
                        }
                        while (v235 != v238);
                        v32 = v2735;
                      }
                      v237 = v245 + 16;
                      v2735.n128_u64[0] = (unint64_t)v247;
                      v2735.n128_u64[1] = (unint64_t)(v245 + 16);
                      v2736 = &v243[16 * v242];
                      v249 = v32.n128_i64[1];
                      v250 = (void *)v32.n128_u64[0];
                      while ((void *)v249 != v250)
                        v249 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v249 - 16);
                      if (v250)
                        operator delete(v250);
                    }
                    else
                    {
                      *(_QWORD *)v2735.n128_u64[1] = v223;
                      v235[1] = v234;
                      do
                        v236 = __ldxr(v222);
                      while (__stxr(v236 + 1, v222));
                      v237 = v235 + 2;
                    }
                    v2735.n128_u64[1] = (unint64_t)v237;
                    i = v2659;
                    v251 = *(_QWORD *)(v2658 + 32);
                    if (v251)
                    {
                      v252 = (char *)operator new(0x40uLL);
                      *((_QWORD *)v252 + 1) = 0;
                      *((_QWORD *)v252 + 2) = 0;
                      *(_QWORD *)v252 = &off_1E2917830;
                      *(_OWORD *)(v252 + 40) = 0u;
                      *((_QWORD *)v252 + 7) = 0;
                      *(_OWORD *)(v252 + 24) = 0u;
                      *(_QWORD *)&v2752 = v252 + 24;
                      *((_QWORD *)&v2752 + 1) = v252;
                      *(_QWORD *)&v2730 = v251;
                      if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v2659, v251, (uint64_t *)&v2730)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr");
                      v253 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v2659, v251, (uint64_t *)&v2730);
                      v254 = *(_OWORD *)(v253 + 5);
                      v255 = v253[6];
                      if (v255)
                      {
                        v256 = (unint64_t *)(v255 + 8);
                        do
                          v257 = __ldxr(v256);
                        while (__stxr(v257 + 1, v256));
                      }
                      v258 = (std::__shared_weak_count *)*((_QWORD *)v252 + 4);
                      *(_OWORD *)(v252 + 24) = v254;
                      if (v258)
                      {
                        v259 = (unint64_t *)&v258->__shared_owners_;
                        do
                          v260 = __ldaxr(v259);
                        while (__stlxr(v260 - 1, v259));
                        if (!v260)
                        {
                          ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                          std::__shared_weak_count::__release_weak(v258);
                        }
                      }
                      std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)(v2752 + 16), v223, (uint64_t)v2681);
                      v261 = v2752;
                      *(double *)(v2752 + 32) = a3;
                      v262 = (_QWORD *)v2733.n128_u64[1];
                      if (v2733.n128_u64[1] >= (unint64_t)v2734)
                      {
                        v267 = (_QWORD *)v2733.n128_u64[0];
                        v268 = (uint64_t)(v2733.n128_u64[1] - v2733.n128_u64[0]) >> 4;
                        v269 = v268 + 1;
                        if ((unint64_t)(v268 + 1) >> 60)
                          std::vector<float>::__throw_length_error[abi:ne180100]();
                        v270 = (uint64_t)&v2734[-v2733.n128_u64[0]];
                        if ((uint64_t)&v2734[-v2733.n128_u64[0]] >> 3 > v269)
                          v269 = v270 >> 3;
                        if ((unint64_t)v270 >= 0x7FFFFFFFFFFFFFF0)
                          v271 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v271 = v269;
                        if (v271 >> 60)
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        v272 = (char *)operator new(16 * v271);
                        v273 = &v272[16 * v268];
                        v274 = *((_QWORD *)&v2752 + 1);
                        *(_OWORD *)v273 = v2752;
                        v83 = v2660;
                        if (v274)
                        {
                          v275 = (unint64_t *)(v274 + 8);
                          do
                            v276 = __ldxr(v275);
                          while (__stxr(v276 + 1, v275));
                          v262 = (_QWORD *)v2733.n128_u64[1];
                        }
                        if (v262 == v267)
                        {
                          v32 = (__n128)vdupq_n_s64((unint64_t)v262);
                          v277 = v273;
                        }
                        else
                        {
                          v277 = v273;
                          do
                          {
                            v278 = *((_OWORD *)v262 - 1);
                            v262 -= 2;
                            *((_OWORD *)v277 - 1) = v278;
                            v277 -= 16;
                            *v262 = 0;
                            v262[1] = 0;
                          }
                          while (v262 != v267);
                          v32 = v2733;
                        }
                        v266 = v273 + 16;
                        v2733.n128_u64[0] = (unint64_t)v277;
                        v2733.n128_u64[1] = (unint64_t)(v273 + 16);
                        v2734 = &v272[16 * v271];
                        v279 = v32.n128_i64[1];
                        v280 = (void *)v32.n128_u64[0];
                        while ((void *)v279 != v280)
                          v279 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v279 - 16);
                        if (v280)
                          operator delete(v280);
                        v263 = (std::__shared_weak_count *)*((_QWORD *)&v2752 + 1);
                      }
                      else
                      {
                        *(_QWORD *)v2733.n128_u64[1] = v261;
                        v263 = (std::__shared_weak_count *)*((_QWORD *)&v2752 + 1);
                        v262[1] = *((_QWORD *)&v2752 + 1);
                        if (v263)
                        {
                          v264 = (unint64_t *)&v263->__shared_owners_;
                          do
                            v265 = __ldxr(v264);
                          while (__stxr(v265 + 1, v264));
                        }
                        v266 = v262 + 2;
                      }
                      v2733.n128_u64[1] = (unint64_t)v266;
                      if (v263)
                      {
                        v281 = (unint64_t *)&v263->__shared_owners_;
                        do
                          v282 = __ldaxr(v281);
                        while (__stlxr(v282 - 1, v281));
                        if (!v282)
                        {
                          ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                          std::__shared_weak_count::__release_weak(v263);
                        }
                      }
                    }
                    do
                      v283 = __ldaxr(v222);
                    while (__stlxr(v283 - 1, v222));
                    if (!v283)
                    {
                      ((void (*)(std::__shared_weak_count *))v2681->__on_zero_shared)(v2681);
                      std::__shared_weak_count::__release_weak(v2681);
                    }
                  }
                  do
                    v284 = __ldaxr(v192);
                  while (__stlxr(v284 - 1, v192));
                  if (!v284)
                  {
                    ((void (*)(std::__shared_weak_count *))v2703->__on_zero_shared)(v2703);
                    std::__shared_weak_count::__release_weak(v2703);
                  }
                  v188 = v2662 + 1;
                }
                while (v2662 + 1 < (unint64_t)*(unsigned int *)(v83 + 136));
              }
              if (*(_DWORD *)(v83 + 112))
              {
                v285 = 0;
                do
                {
                  v286 = *(_QWORD *)(*(_QWORD *)(v2652 + 28) + 8 * v285);
                  v287 = (char *)operator new(0x40uLL);
                  *((_QWORD *)v287 + 1) = 0;
                  *((_QWORD *)v287 + 2) = 0;
                  *(_QWORD *)v287 = &off_1E29176A8;
                  *(_OWORD *)(v287 + 24) = 0u;
                  v288 = (uint64_t)(v287 + 24);
                  *(_OWORD *)(v287 + 40) = 0u;
                  *((_QWORD *)v287 + 7) = 0;
                  *(_QWORD *)&v2752 = v287 + 24;
                  *((_QWORD *)&v2752 + 1) = v287;
                  AudioMetadataMemoryPool::lookup<AudioMetadataObject>(&v2730, v2650, v286);
                  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v288, &v2730);
                  v289 = (std::__shared_weak_count *)*((_QWORD *)&v2730 + 1);
                  if (*((_QWORD *)&v2730 + 1))
                  {
                    v290 = (unint64_t *)(*((_QWORD *)&v2730 + 1) + 8);
                    do
                      v291 = __ldaxr(v290);
                    while (__stlxr(v291 - 1, v290));
                    if (!v291)
                    {
                      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                      std::__shared_weak_count::__release_weak(v289);
                    }
                  }
                  v292 = v2752;
                  *(double *)(v2752 + 32) = a3;
                  std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)(v292 + 16), v2651, (uint64_t)v2653);
                  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100](&v2745, &v2752);
                  v293 = (std::__shared_weak_count *)*((_QWORD *)&v2752 + 1);
                  if (*((_QWORD *)&v2752 + 1))
                  {
                    v294 = (unint64_t *)(*((_QWORD *)&v2752 + 1) + 8);
                    do
                      v295 = __ldaxr(v294);
                    while (__stlxr(v295 - 1, v294));
                    if (!v295)
                    {
                      ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                      std::__shared_weak_count::__release_weak(v293);
                    }
                  }
                  ++v285;
                }
                while (v285 < *(unsigned int *)(v83 + 112));
              }
              v296 = (std::__shared_weak_count *)*((_QWORD *)&v2732 + 1);
              if (*((_QWORD *)&v2732 + 1))
              {
                v297 = (unint64_t *)(*((_QWORD *)&v2732 + 1) + 8);
                do
                  v298 = __ldaxr(v297);
                while (__stlxr(v298 - 1, v297));
                if (!v298)
                {
                  ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                  std::__shared_weak_count::__release_weak(v296);
                }
              }
              v82 = v2644 + 1;
              v81 = v2652;
            }
            while (v2644 + 1 < (unint64_t)*(unsigned int *)(v2652 + 24));
          }
          do
            v299 = __ldaxr(v55);
          while (__stlxr(v299 - 1, v55));
          if (!v299)
          {
            ((void (*)(std::__shared_weak_count *))v2653->__on_zero_shared)(v2653);
            std::__shared_weak_count::__release_weak(v2653);
          }
          v22 = (std::__shared_weak_count *)v2641;
          v52 = v2640 + 1;
          a2 = v2637;
          v21 = v2638;
          v8 = v2636;
        }
        while (v2640 + 1 < (unint64_t)*(unsigned int *)(v2638 + 52));
      }
      do
        v300 = __ldaxr(v23);
      while (__stlxr(v300 - 1, v23));
      if (!v300)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v32);
        std::__shared_weak_count::__release_weak(v22);
      }
      v20 = v2639 + 1;
      v19 = *a2;
      a1 = (uint64_t *)v2654;
    }
    while (v2639 + 1 < (unint64_t)**a2);
  }
  v301 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v2750 + 1) - v2750) >> 4);
  if (*((_QWORD *)&v2750 + 1) == (_QWORD)v2750)
    v302 = 0;
  else
    v302 = v301;
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*,false>(v2750, *((char **)&v2750 + 1), v302, 1);
  v303 = *((_QWORD *)&v2750 + 1);
  if ((_QWORD)v2750 != *((_QWORD *)&v2750 + 1))
  {
    v304 = (uint64_t *)(v2750 + 16);
    while (v304 != *((uint64_t **)&v2750 + 1))
    {
      v305 = v304 - 2;
      v306 = *(v304 - 2);
      v307 = *v304;
      v304 += 2;
      if (v306 == v307)
      {
        v308 = (__int128 *)(v305 + 4);
        if (v305 + 4 != *((uint64_t **)&v2750 + 1))
        {
          do
          {
            if (*v305 != *(_QWORD *)v308)
              v305 = (uint64_t *)std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v305 + 2), v308);
            ++v308;
          }
          while (v308 != (__int128 *)v303);
          v303 = *((_QWORD *)&v2750 + 1);
        }
        v309 = v305 + 2;
        if (v305 + 2 != (uint64_t *)v303)
        {
          while ((_QWORD *)v303 != v309)
          {
            v303 -= 16;
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v303);
          }
          *((_QWORD *)&v2750 + 1) = v309;
        }
        break;
      }
    }
  }
  v310 = 126 - 2 * __clz((uint64_t)(v2748.n128_u64[1] - v2748.n128_u64[0]) >> 4);
  if (v2748.n128_u64[1] == v2748.n128_u64[0])
    v311 = 0;
  else
    v311 = v310;
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*,false>((__int128 *)v2748.n128_u64[0], v2748.n128_u64[1], v311, 1);
  v312 = v2748.n128_i64[1];
  if (v2748.n128_u64[0] != v2748.n128_u64[1])
  {
    v313 = (uint64_t *)(v2748.n128_u64[0] + 16);
    while (v313 != (uint64_t *)v2748.n128_u64[1])
    {
      v314 = v313 - 2;
      v315 = *(v313 - 2);
      v316 = *v313;
      v313 += 2;
      if (v315 == v316)
      {
        v317 = (__int128 *)(v314 + 4);
        if (v314 + 4 != (uint64_t *)v2748.n128_u64[1])
        {
          do
          {
            if (*v314 != *(_QWORD *)v317)
              v314 = (uint64_t *)std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v314 + 2), v317);
            ++v317;
          }
          while (v317 != (__int128 *)v312);
          v312 = v2748.n128_i64[1];
        }
        v318 = v314 + 2;
        if (v314 + 2 != (uint64_t *)v312)
        {
          while ((_QWORD *)v312 != v318)
          {
            v312 -= 16;
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v312);
          }
          v2748.n128_u64[1] = (unint64_t)v318;
        }
        break;
      }
    }
  }
  v319 = 126 - 2 * __clz((v2746 - v2745) >> 4);
  if (v2746 == v2745)
    v320 = 0;
  else
    v320 = v319;
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*,false>((uint64_t)v2745, v2746, v320, 1);
  v321 = v2746;
  if (v2745 != v2746)
  {
    v322 = v2745 + 16;
    while (v322 != v2746)
    {
      v323 = (uint64_t)(v322 - 16);
      v324 = *((_QWORD *)v322 - 2);
      v325 = *(_QWORD *)v322;
      v322 += 16;
      if (v324 == v325)
      {
        v326 = (__int128 *)(v323 + 32);
        if ((char *)(v323 + 32) != v2746)
        {
          do
          {
            if (*(_QWORD *)v323 != *(_QWORD *)v326)
              v323 = std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v323 + 16, v326);
            ++v326;
          }
          while (v326 != (__int128 *)v321);
          v321 = v2746;
        }
        v327 = (char *)(v323 + 16);
        if ((char *)(v323 + 16) != v321)
        {
          while (v321 != v327)
          {
            v321 -= 16;
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v321);
          }
          v2746 = v327;
        }
        break;
      }
    }
  }
  v328 = 126 - 2 * __clz((uint64_t)(v2743.n128_u64[1] - v2743.n128_u64[0]) >> 4);
  if (v2743.n128_u64[1] == v2743.n128_u64[0])
    v329 = 0;
  else
    v329 = v328;
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*,false>((__int128 *)v2743.n128_u64[0], v2743.n128_u64[1], v329, 1);
  v330 = v2743.n128_i64[1];
  if (v2743.n128_u64[0] != v2743.n128_u64[1])
  {
    v331 = (uint64_t *)(v2743.n128_u64[0] + 16);
    while (v331 != (uint64_t *)v2743.n128_u64[1])
    {
      v332 = v331 - 2;
      v333 = *(v331 - 2);
      v334 = *v331;
      v331 += 2;
      if (v333 == v334)
      {
        v335 = (__int128 *)(v332 + 4);
        if (v332 + 4 != (uint64_t *)v2743.n128_u64[1])
        {
          do
          {
            if (*v332 != *(_QWORD *)v335)
              v332 = (uint64_t *)std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v332 + 2), v335);
            ++v335;
          }
          while (v335 != (__int128 *)v330);
          v330 = v2743.n128_i64[1];
        }
        v336 = v332 + 2;
        if (v332 + 2 != (uint64_t *)v330)
        {
          while ((_QWORD *)v330 != v336)
          {
            v330 -= 16;
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v330);
          }
          v2743.n128_u64[1] = (unint64_t)v336;
        }
        break;
      }
    }
  }
  v337 = 126 - 2 * __clz((v2741.i64[1] - v2741.i64[0]) >> 4);
  if (v2741.i64[1] == v2741.i64[0])
    v338 = 0;
  else
    v338 = v337;
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*,false>((__int128 *)v2741.i64[0], v2741.u64[1], v338, 1);
  v339 = v2741.i64[1];
  if (v2741.i64[0] != v2741.i64[1])
  {
    v340 = (uint64_t *)(v2741.i64[0] + 16);
    while (v340 != (uint64_t *)v2741.i64[1])
    {
      v341 = v340 - 2;
      v342 = *(v340 - 2);
      v343 = *v340;
      v340 += 2;
      if (v342 == v343)
      {
        v344 = (__int128 *)(v341 + 4);
        if (v341 + 4 != (uint64_t *)v2741.i64[1])
        {
          do
          {
            if (*v341 != *(_QWORD *)v344)
              v341 = (uint64_t *)std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v341 + 2), v344);
            ++v344;
          }
          while (v344 != (__int128 *)v339);
          v339 = v2741.i64[1];
        }
        v345 = v341 + 2;
        if (v341 + 2 != (uint64_t *)v339)
        {
          while ((_QWORD *)v339 != v345)
          {
            v339 -= 16;
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v339);
          }
          v2741.i64[1] = (uint64_t)v345;
        }
        break;
      }
    }
  }
  v346 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v2739 + 1) - v2739) >> 4);
  if (*((_QWORD *)&v2739 + 1) == (_QWORD)v2739)
    v347 = 0;
  else
    v347 = v346;
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,false>(v2739, *((char **)&v2739 + 1), v347, 1);
  v348 = *((_QWORD *)&v2739 + 1);
  if ((_QWORD)v2739 != *((_QWORD *)&v2739 + 1))
  {
    v349 = (uint64_t *)(v2739 + 16);
    while (v349 != *((uint64_t **)&v2739 + 1))
    {
      v350 = v349 - 2;
      v351 = *(v349 - 2);
      v352 = *v349;
      v349 += 2;
      if (v351 == v352)
      {
        v353 = (__int128 *)(v350 + 4);
        if (v350 + 4 != *((uint64_t **)&v2739 + 1))
        {
          do
          {
            if (*v350 != *(_QWORD *)v353)
              v350 = (uint64_t *)std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v350 + 2), v353);
            ++v353;
          }
          while (v353 != (__int128 *)v348);
          v348 = *((_QWORD *)&v2739 + 1);
        }
        v354 = v350 + 2;
        if (v350 + 2 != (uint64_t *)v348)
        {
          while ((_QWORD *)v348 != v354)
          {
            v348 -= 16;
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v348);
          }
          *((_QWORD *)&v2739 + 1) = v354;
        }
        break;
      }
    }
  }
  v355 = 126 - 2 * __clz((uint64_t)(v2737.n128_u64[1] - v2737.n128_u64[0]) >> 4);
  if (v2737.n128_u64[1] == v2737.n128_u64[0])
    v356 = 0;
  else
    v356 = v355;
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*,false>((__int128 *)v2737.n128_u64[0], v2737.n128_u64[1], v356, 1);
  v357 = v2737.n128_i64[1];
  if (v2737.n128_u64[0] != v2737.n128_u64[1])
  {
    v358 = (uint64_t *)(v2737.n128_u64[0] + 16);
    while (v358 != (uint64_t *)v2737.n128_u64[1])
    {
      v359 = v358 - 2;
      v360 = *(v358 - 2);
      v361 = *v358;
      v358 += 2;
      if (v360 == v361)
      {
        v362 = (__int128 *)(v359 + 4);
        if (v359 + 4 != (uint64_t *)v2737.n128_u64[1])
        {
          do
          {
            if (*v359 != *(_QWORD *)v362)
              v359 = (uint64_t *)std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v359 + 2), v362);
            ++v362;
          }
          while (v362 != (__int128 *)v357);
          v357 = v2737.n128_i64[1];
        }
        v363 = v359 + 2;
        if (v359 + 2 != (uint64_t *)v357)
        {
          while ((_QWORD *)v357 != v363)
          {
            v357 -= 16;
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v357);
          }
          v2737.n128_u64[1] = (unint64_t)v363;
        }
        break;
      }
    }
  }
  v364 = 126 - 2 * __clz((uint64_t)(v2735.n128_u64[1] - v2735.n128_u64[0]) >> 4);
  if (v2735.n128_u64[1] == v2735.n128_u64[0])
    v365 = 0;
  else
    v365 = v364;
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*,false>((__int128 *)v2735.n128_u64[0], v2735.n128_u64[1], v365, 1);
  v366 = v2735.n128_i64[1];
  if (v2735.n128_u64[0] != v2735.n128_u64[1])
  {
    v367 = (uint64_t *)(v2735.n128_u64[0] + 16);
    while (v367 != (uint64_t *)v2735.n128_u64[1])
    {
      v368 = v367 - 2;
      v369 = *(v367 - 2);
      v370 = *v367;
      v367 += 2;
      if (v369 == v370)
      {
        v371 = (__int128 *)(v368 + 4);
        if (v368 + 4 != (uint64_t *)v2735.n128_u64[1])
        {
          do
          {
            if (*v368 != *(_QWORD *)v371)
              v368 = (uint64_t *)std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v368 + 2), v371);
            ++v371;
          }
          while (v371 != (__int128 *)v366);
          v366 = v2735.n128_i64[1];
        }
        v372 = v368 + 2;
        if (v368 + 2 != (uint64_t *)v366)
        {
          while ((_QWORD *)v366 != v372)
          {
            v366 -= 16;
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v366);
          }
          v2735.n128_u64[1] = (unint64_t)v372;
        }
        break;
      }
    }
  }
  v373 = 126 - 2 * __clz((uint64_t)(v2733.n128_u64[1] - v2733.n128_u64[0]) >> 4);
  if (v2733.n128_u64[1] == v2733.n128_u64[0])
    v374 = 0;
  else
    v374 = v373;
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,false>((__int128 *)v2733.n128_u64[0], v2733.n128_u64[1], v374, 1);
  v375 = v2733.n128_i64[1];
  v376 = (_QWORD *)v2733.n128_u64[0];
  if (v2733.n128_u64[0] != v2733.n128_u64[1])
  {
    v377 = (uint64_t *)(v2733.n128_u64[0] + 16);
    do
    {
      if (v377 == (uint64_t *)v2733.n128_u64[1])
        goto LABEL_520;
      v378 = v377 - 2;
      v379 = *(v377 - 2);
      v380 = *v377;
      v377 += 2;
    }
    while (v379 != v380);
    v381 = (__int128 *)(v378 + 4);
    if (v378 + 4 != (uint64_t *)v2733.n128_u64[1])
    {
      do
      {
        if (*v378 != *(_QWORD *)v381)
          v378 = (uint64_t *)std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)(v378 + 2), v381);
        ++v381;
      }
      while (v381 != (__int128 *)v375);
      v375 = v2733.n128_i64[1];
    }
    v376 = v378 + 2;
    if (v378 + 2 == (uint64_t *)v375)
    {
LABEL_520:
      v376 = (_QWORD *)v375;
      goto LABEL_521;
    }
    while ((_QWORD *)v375 != v376)
    {
      v375 -= 16;
      std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v375);
    }
    v2733.n128_u64[1] = (unint64_t)v376;
  }
LABEL_521:
  v382 = *a2;
  v383 = **a2;
  v384 = (uint64_t *)*((_QWORD *)&v2750 + 1);
  v385 = (uint64_t *)v2750;
  if (v383 != (uint64_t)(*((_QWORD *)&v2750 + 1) - v2750) >> 4)
  {
    v2634 = "root->audioProgrammes.count == programmes.size()";
    v2635 = 285;
    goto LABEL_3149;
  }
  if (v382[3] != (uint64_t)(v2748.n128_u64[1] - v2748.n128_u64[0]) >> 4)
  {
    v2634 = "root->audioContents.count == contents.size()";
    v2635 = 286;
    goto LABEL_3149;
  }
  if (v382[6] != (v2746 - v2745) >> 4)
  {
    v2634 = "root->audioObjects.count == objects.size()";
    v2635 = 287;
    goto LABEL_3149;
  }
  if (v382[9] != (uint64_t)(v2743.n128_u64[1] - v2743.n128_u64[0]) >> 4)
  {
    v2634 = "root->audioPackFormats.count == packFormats.size()";
    v2635 = 288;
    goto LABEL_3149;
  }
  if (v382[12] != (v2741.i64[1] - v2741.i64[0]) >> 4)
  {
    v2634 = "root->audioChannelFormats.count == channelFormats.size()";
    v2635 = 289;
    goto LABEL_3149;
  }
  if (v382[21] != (uint64_t)(v2737.n128_u64[1] - v2737.n128_u64[0]) >> 4)
  {
    v2634 = "root->audioTrackUIDs.count == trackUIDs.size()";
    v2635 = 290;
    goto LABEL_3149;
  }
  if (v382[18] != (uint64_t)(v2735.n128_u64[1] - v2735.n128_u64[0]) >> 4)
  {
    v2634 = "root->audioTrackFormats.count == trackFormats.size()";
    v2635 = 291;
    goto LABEL_3149;
  }
  if (v382[15] != (uint64_t)((uint64_t)v376 - v2733.n128_u64[0]) >> 4)
  {
    v2634 = "root->audioStreamFormats.count == streamFormats.size()";
    v2635 = 292;
LABEL_3149:
    __assert_rtn("addEvent", "AudioMetadataTimeline.cpp", v2635, v2634);
  }
  v386 = a1[6];
  v387 = a1[7];
  v388 = v386 + v387;
  v389 = (v386 + v387) >> 8;
  v391 = (char *)a1[3];
  v390 = (char *)a1[4];
  v392 = &v391[8 * v389];
  v393 = v386 >> 8;
  v394 = v390 - v391;
  if (v390 == v391)
  {
    v395 = 0;
    v397 = 0;
    v396 = &v391[8 * v393];
  }
  else
  {
    v395 = *(_QWORD *)v392 + 16 * v388;
    v396 = &v391[8 * v393];
    v397 = *(_QWORD *)v396 + 16 * v386;
  }
  if (v395 == v397)
    v398 = 0;
  else
    v398 = ((v395 - *(_QWORD *)v392) >> 4) + 32 * (v392 - v396) - ((v397 - *(_QWORD *)v396) >> 4);
  v399 = a1 + 2;
  if (v398 >= v387 - v398)
  {
    v412 = 32 * v394 - 1;
    v413 = v390 - v391;
    if (v390 == v391)
      v412 = 0;
    v414 = v412 - v388;
    v415 = v383 >= v414;
    v416 = v383 - v414;
    if (v416 != 0 && v415)
    {
      v2683 = **a2;
      v2705 = v398;
      if (v390 == v391)
        v417 = v416 + 1;
      else
        v417 = v416;
      if ((_BYTE)v417)
        v418 = (v417 >> 8) + 1;
      else
        v418 = v417 >> 8;
      if (v418 >= v393)
        v419 = v386 >> 8;
      else
        v419 = v418;
      if (v418 <= v393)
      {
        for (a1[6] = v386 - (v419 << 8); v419; --v419)
        {
          v426 = (_QWORD *)a1[3];
          v429 = *v426;
          v427 = (char *)(v426 + 1);
          v428 = v429;
          a1[3] = (uint64_t)v427;
          if (v390 == (char *)a1[5])
          {
            v430 = (uint64_t)&v427[-*v399];
            if ((unint64_t)v427 <= *v399)
            {
              if (v390 == (char *)*v399)
                v439 = 1;
              else
                v439 = (uint64_t)&v390[-*v399] >> 2;
              v440 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v439);
              v442 = &v440[8 * (v439 >> 2)];
              v443 = (uint64_t *)a1[3];
              v390 = v442;
              v444 = a1[4] - (_QWORD)v443;
              if (v444)
              {
                v390 = &v442[v444 & 0xFFFFFFFFFFFFFFF8];
                v445 = 8 * (v444 >> 3);
                v446 = &v440[8 * (v439 >> 2)];
                do
                {
                  v447 = *v443++;
                  *(_QWORD *)v446 = v447;
                  v446 += 8;
                  v445 -= 8;
                }
                while (v445);
              }
              v448 = (void *)a1[2];
              a1[2] = (uint64_t)v440;
              a1[3] = (uint64_t)v442;
              a1[4] = (uint64_t)v390;
              a1[5] = (uint64_t)&v440[8 * v441];
              if (v448)
              {
                operator delete(v448);
                v390 = (char *)a1[4];
              }
            }
            else
            {
              v431 = v430 >> 3;
              v432 = v430 >> 3 < -1;
              v433 = (v430 >> 3) + 2;
              v434 = a1;
              if (v432)
                v435 = v433;
              else
                v435 = v431 + 1;
              v436 = &v427[-8 * (v435 >> 1)];
              v437 = v390 - v427;
              if (v390 != v427)
              {
                memmove(&v427[-8 * (v435 >> 1)], v427, v390 - v427);
                v390 = (char *)v434[3];
              }
              v438 = &v390[-8 * (v435 >> 1)];
              v390 = &v436[v437];
              v434[3] = (uint64_t)v438;
              v434[4] = (uint64_t)&v436[v437];
              a1 = v434;
            }
          }
          *(_QWORD *)v390 = v428;
          v390 = (char *)(a1[4] + 8);
          a1[4] = (uint64_t)v390;
        }
      }
      else
      {
        v420 = v418 - v419;
        v421 = a1[5] - a1[2];
        if (v420 <= (v421 >> 3) - (v413 >> 3))
        {
          if (v420)
          {
            while (a1[5] != a1[4])
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(a1 + 2, &v2752);
              if (!--v420)
              {
                v390 = (char *)a1[4];
                goto LABEL_755;
              }
            }
            for (j = 0; j != v420; ++j)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)(a1 + 2), &v2752);
              v390 = (char *)a1[4];
              if (&v390[-a1[3]] == (char *)8)
                v569 = 255;
              else
                v569 = 256;
              v570 = v569 + a1[6];
              a1[6] = v570;
            }
            v419 += v420;
          }
          else
          {
LABEL_755:
            v570 = a1[6];
          }
          for (a1[6] = v570 - (v419 << 8); v419; --v419)
          {
            v571 = (_QWORD *)a1[3];
            v574 = *v571;
            v572 = (char *)(v571 + 1);
            v573 = v574;
            a1[3] = (uint64_t)v572;
            if (v390 == (char *)a1[5])
            {
              v575 = (uint64_t)&v572[-*v399];
              if ((unint64_t)v572 <= *v399)
              {
                if (v390 == (char *)*v399)
                  v583 = 1;
                else
                  v583 = (uint64_t)&v390[-*v399] >> 2;
                v584 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v583);
                v586 = &v584[8 * (v583 >> 2)];
                v587 = (uint64_t *)a1[3];
                v390 = v586;
                v588 = a1[4] - (_QWORD)v587;
                if (v588)
                {
                  v390 = &v586[v588 & 0xFFFFFFFFFFFFFFF8];
                  v589 = 8 * (v588 >> 3);
                  v590 = &v584[8 * (v583 >> 2)];
                  do
                  {
                    v591 = *v587++;
                    *(_QWORD *)v590 = v591;
                    v590 += 8;
                    v589 -= 8;
                  }
                  while (v589);
                }
                v592 = (void *)a1[2];
                a1[2] = (uint64_t)v584;
                a1[3] = (uint64_t)v586;
                a1[4] = (uint64_t)v390;
                a1[5] = (uint64_t)&v584[8 * v585];
                if (v592)
                {
                  operator delete(v592);
                  v390 = (char *)a1[4];
                }
              }
              else
              {
                v576 = v575 >> 3;
                v432 = v575 >> 3 < -1;
                v577 = (v575 >> 3) + 2;
                v578 = a1;
                if (v432)
                  v579 = v577;
                else
                  v579 = v576 + 1;
                v580 = &v572[-8 * (v579 >> 1)];
                v581 = v390 - v572;
                if (v390 != v572)
                {
                  memmove(&v572[-8 * (v579 >> 1)], v572, v390 - v572);
                  v390 = (char *)v578[3];
                }
                v582 = &v390[-8 * (v579 >> 1)];
                v390 = &v580[v581];
                v578[3] = (uint64_t)v582;
                v578[4] = (uint64_t)&v580[v581];
                a1 = v578;
              }
            }
            *(_QWORD *)v390 = v573;
            v390 = (char *)(a1[4] + 8);
            a1[4] = (uint64_t)v390;
          }
        }
        else
        {
          v422 = v413 >> 3;
          if (v421 >> 2 <= v420 + (v413 >> 3))
            v423 = v420 + (v413 >> 3);
          else
            v423 = v421 >> 2;
          v2754 = (__int8 *)(a1 + 5);
          if (v423)
            v423 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v423);
          else
            v424 = 0;
          *(_QWORD *)&v2752 = v423;
          *((_QWORD *)&v2752 + 1) = v423 + 8 * (v422 - v419);
          *(_QWORD *)&v2753 = *((_QWORD *)&v2752 + 1);
          *((_QWORD *)&v2753 + 1) = v423 + 8 * v424;
          do
          {
            *(_QWORD *)&v2732 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
            --v420;
          }
          while (v420);
          v2664 = v419 << 8;
          v487 = (char *)v2753;
          if (v419)
          {
            v488 = (_QWORD *)v2654[1].i64[1];
            do
            {
              if (v487 == *((char **)&v2753 + 1))
              {
                v489 = (char *)*((_QWORD *)&v2752 + 1);
                v490 = (void *)v2752;
                if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
                {
                  if (v487 == (char *)v2752)
                    v496 = 1;
                  else
                    v496 = (uint64_t)&v487[-v2752] >> 2;
                  v497 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v496);
                  v499 = v487 - v489;
                  v465 = v487 == v489;
                  v487 = &v497[8 * (v496 >> 2)];
                  if (!v465)
                  {
                    v487 = &v497[8 * (v496 >> 2) + (v499 & 0xFFFFFFFFFFFFFFF8)];
                    v500 = 8 * (v499 >> 3);
                    v501 = &v497[8 * (v496 >> 2)];
                    do
                    {
                      v502 = *(_QWORD *)v489;
                      v489 += 8;
                      *(_QWORD *)v501 = v502;
                      v501 += 8;
                      v500 -= 8;
                    }
                    while (v500);
                  }
                  *(_QWORD *)&v2752 = v497;
                  *((_QWORD *)&v2752 + 1) = &v497[8 * (v496 >> 2)];
                  *(_QWORD *)&v2753 = v487;
                  *((_QWORD *)&v2753 + 1) = &v497[8 * v498];
                  if (v490)
                    operator delete(v490);
                }
                else
                {
                  v491 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                  if (v491 >= -1)
                    v492 = v491 + 1;
                  else
                    v492 = v491 + 2;
                  v493 = *((_QWORD *)&v2752 + 1) - 8 * (v492 >> 1);
                  v494 = &v487[-*((_QWORD *)&v2752 + 1)];
                  if (v487 != *((char **)&v2752 + 1))
                  {
                    memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v492 >> 1)), *((const void **)&v2752 + 1), (size_t)&v487[-*((_QWORD *)&v2752 + 1)]);
                    v487 = v489;
                  }
                  v495 = &v487[-8 * (v492 >> 1)];
                  v487 = &v494[v493];
                  *((_QWORD *)&v2752 + 1) = v495;
                  *(_QWORD *)&v2753 = &v494[v493];
                }
              }
              *(_QWORD *)v487 = *v488;
              v487 = (char *)(v2753 + 8);
              *(_QWORD *)&v2753 = v2753 + 8;
              v488 = (_QWORD *)(v2654[1].i64[1] + 8);
              v2654[1].i64[1] = (uint64_t)v488;
              --v419;
            }
            while (v419);
          }
          v503 = v2654[2].i64[0];
          v505 = (char *)*((_QWORD *)&v2752 + 1);
          v504 = (char *)v2752;
          v506 = (char *)*((_QWORD *)&v2753 + 1);
          while (v503 != v2654[1].i64[1])
          {
            if (v505 == v504)
            {
              if (v487 >= v506)
              {
                if (v506 == v504)
                  v511 = 1;
                else
                  v511 = (v506 - v504) >> 2;
                v512 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v511);
                v514 = v512;
                v505 = &v512[(2 * v511 + 6) & 0xFFFFFFFFFFFFFFF8];
                v515 = v487 - v504;
                v465 = v487 == v504;
                v487 = v505;
                if (!v465)
                {
                  v487 = &v505[v515 & 0xFFFFFFFFFFFFFFF8];
                  v516 = 8 * (v515 >> 3);
                  v517 = v505;
                  v518 = v504;
                  do
                  {
                    v519 = *(_QWORD *)v518;
                    v518 += 8;
                    *(_QWORD *)v517 = v519;
                    v517 += 8;
                    v516 -= 8;
                  }
                  while (v516);
                }
                v506 = &v512[8 * v513];
                if (v504)
                  operator delete(v504);
                v504 = v514;
              }
              else
              {
                v507 = (v506 - v487) >> 3;
                if (v507 >= -1)
                  v508 = v507 + 1;
                else
                  v508 = v507 + 2;
                v509 = &v487[8 * (v508 >> 1)];
                v505 = &v509[-(v487 - v504)];
                v510 = v487 - v504;
                v465 = v487 == v504;
                v487 = v509;
                if (!v465)
                  memmove(v505, v504, v510);
              }
            }
            v520 = *(_QWORD *)(v503 - 8);
            v503 -= 8;
            *((_QWORD *)v505 - 1) = v520;
            v505 -= 8;
          }
          *(_QWORD *)&v2752 = v504;
          *((_QWORD *)&v2752 + 1) = v505;
          *(_QWORD *)&v2753 = v487;
          *((_QWORD *)&v2753 + 1) = v506;
          a1 = (uint64_t *)v2654;
          v523 = v2752;
          v522 = (int64x2_t)v2753;
          *(_QWORD *)&v2752 = v2654[1].i64[0];
          v521 = (void *)v2752;
          *((_QWORD *)&v2752 + 1) = v503;
          v2654[1] = (int64x2_t)v523;
          v2654[2] = v522;
          v2654[3].i64[0] -= v2664;
          if (v521)
          {
            operator delete(v521);
            v390 = (char *)v2654[2].i64[0];
          }
          else
          {
            v390 = (char *)v522.i64[0];
          }
        }
      }
      v387 = a1[7];
      v391 = (char *)a1[3];
      v388 = a1[6] + v387;
      v389 = v388 >> 8;
      v383 = v2683;
      v398 = v2705;
    }
    v593 = &v391[8 * v389];
    if (v390 == v391)
      v594 = 0;
    else
      v594 = *(_QWORD *)v593 + 16 * v388;
    v595 = v387 - v398;
    if (v387 - v398 >= v383)
    {
      v599 = (_QWORD *)v594;
      v598 = v593;
      if (!v383)
        goto LABEL_826;
    }
    else
    {
      if (v595 >= v383 >> 1)
        v596 = &v384[2 * (v387 - v398 - v383)];
      else
        v596 = &v385[2 * v595];
      if (v596 == v384)
      {
        v599 = (_QWORD *)v594;
        v598 = v593;
      }
      else
      {
        v597 = v596;
        v598 = &v391[8 * v389];
        v599 = (_QWORD *)v594;
        do
        {
          *v599 = *v597;
          v600 = v597[1];
          v599[1] = v600;
          if (v600)
          {
            v601 = (unint64_t *)(v600 + 8);
            do
              v602 = __ldxr(v601);
            while (__stxr(v602 + 1, v601));
          }
          v599 += 2;
          if ((_QWORD *)((char *)v599 - *(_QWORD *)v598) == (_QWORD *)4096)
          {
            v603 = (_QWORD *)*((_QWORD *)v598 + 1);
            v598 += 8;
            v599 = v603;
          }
          v597 += 2;
          ++a1[7];
        }
        while (v597 != v384);
        v384 = v596;
      }
      v383 = v595;
      if (!v595)
        goto LABEL_826;
    }
    v604 = ((v594 - *(_QWORD *)v593) >> 4) - v383;
    if (v604 < 1)
    {
      v607 = 255 - v604;
      v605 = (uint64_t *)&v593[-8 * (v607 >> 8)];
      v606 = *v605 + 16 * ~(_BYTE)v607;
    }
    else
    {
      v605 = (uint64_t *)&v593[8 * ((unint64_t)v604 >> 8)];
      v606 = *v605 + 16 * v604;
    }
    if (v606 != v594)
    {
      v608 = v605;
      v609 = v606;
      do
      {
        *(_OWORD *)v599 = *(_OWORD *)v609;
        v599 += 2;
        *(_QWORD *)v609 = 0;
        *(_QWORD *)(v609 + 8) = 0;
        if ((_QWORD *)((char *)v599 - *(_QWORD *)v598) == (_QWORD *)4096)
        {
          v610 = (_QWORD *)*((_QWORD *)v598 + 1);
          v598 += 8;
          v599 = v610;
        }
        v609 += 16;
        if (v609 - *v608 == 4096)
        {
          v611 = v608[1];
          ++v608;
          v609 = v611;
        }
        ++v2654[3].i64[1];
      }
      while (v609 != v594);
    }
    if (v383 < v595)
    {
      v612 = ((v594 - *(_QWORD *)v593) >> 4) - v595;
      if (v612 < 1)
      {
        v615 = 255 - v612;
        v613 = (uint64_t *)&v593[-8 * (v615 >> 8)];
        v614 = *v613 + 16 * ~(_BYTE)v615;
      }
      else
      {
        v613 = (uint64_t *)&v593[8 * ((unint64_t)v612 >> 8)];
        v614 = *v613 + 16 * v612;
      }
      if (v613 == v605)
      {
        v621 = v614;
        v619 = v593;
      }
      else
      {
        v618 = *v605;
        v617 = v605 - 1;
        v616 = v618;
        v619 = v593;
        while (1)
        {
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v616, v606, v619, v594);
          v619 = (char *)*((_QWORD *)&v2752 + 1);
          v594 = v2753;
          if (v617 == v613)
            break;
          v620 = *v617--;
          v616 = v620;
          v606 = v620 + 4096;
        }
        v606 = *v613 + 4096;
        v621 = v614;
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v621, v606, v619, v594);
      v594 = v2753;
      v593 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v385 != v384)
    {
      v622 = *(_QWORD *)v593;
      while (1)
      {
        v623 = v594 - v622;
        if (((char *)v384 - (char *)v385) >> 4 >= v623 >> 4)
          v624 = v623 >> 4;
        else
          v624 = ((char *)v384 - (char *)v385) >> 4;
        if (v624)
        {
          v625 = v384 - 1;
          v626 = -16 * v624;
          v627 = (_QWORD *)(v594 - 16);
          do
          {
            v628 = std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v627, *(v625 - 1), *v625);
            v625 -= 2;
            v627 = v628 - 2;
            v626 += 16;
          }
          while (v626);
        }
        v384 -= 2 * v624;
        if (v384 == v385)
          break;
        v629 = *((_QWORD *)v593 - 1);
        v593 -= 8;
        v622 = v629;
        v594 = v629 + 4096;
      }
    }
    goto LABEL_826;
  }
  v400 = v383 - v386;
  v2704 = v398;
  if (v383 > v386)
  {
    v2682 = **a2;
    v401 = 32 * v394 - 1;
    v402 = v390 - v391;
    if (v390 == v391)
    {
      v401 = 0;
      ++v400;
    }
    if ((_BYTE)v400)
      v403 = (v400 >> 8) + 1;
    else
      v403 = v400 >> 8;
    v404 = v401 - v388;
    if (v403 >= v404 >> 8)
      v405 = v404 >> 8;
    else
      v405 = v403;
    if (v403 <= v404 >> 8)
    {
      for (a1[6] = v386 + (v405 << 8); v405; --v405)
      {
        v425 = a1[4];
        *(_QWORD *)&v2752 = *(_QWORD *)(v425 - 8);
        a1[4] = v425 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)(a1 + 2), &v2752);
      }
    }
    else
    {
      v406 = v403 - v405;
      v407 = (char *)a1[2];
      v408 = a1[5] - (_QWORD)v407;
      if (v403 - v405 <= (v408 >> 3) - (v402 >> 3))
      {
        if (v406)
        {
          if (v391 == v407)
          {
LABEL_604:
            v451 = v406;
            do
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(a1 + 2, &v2752);
              --v451;
            }
            while (v451);
            v405 += v406;
            v386 = a1[6];
          }
          else
          {
            while (1)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)(a1 + 2), &v2752);
              v449 = a1[3];
              v450 = a1[4] - v449 == 8 ? 255 : 256;
              v386 = v450 + a1[6];
              a1[6] = v386;
              if (!--v406)
                break;
              if (v449 == *v399)
                goto LABEL_604;
            }
          }
        }
        for (a1[6] = v386 + (v405 << 8); v405; --v405)
        {
          v452 = a1[4];
          *(_QWORD *)&v2752 = *(_QWORD *)(v452 - 8);
          a1[4] = v452 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)(a1 + 2), &v2752);
        }
      }
      else
      {
        v409 = v390 == v391;
        if (v408 >> 2 <= v406 + (v402 >> 3))
          v410 = v406 + (v402 >> 3);
        else
          v410 = v408 >> 2;
        v2754 = (__int8 *)(a1 + 5);
        if (v410)
          v410 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v410);
        else
          v411 = 0;
        *(_QWORD *)&v2752 = v410;
        *((_QWORD *)&v2752 + 1) = v410;
        *(_QWORD *)&v2753 = v410;
        *((_QWORD *)&v2753 + 1) = v410 + 8 * v411;
        do
        {
          *(_QWORD *)&v2732 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
          --v406;
        }
        while (v406);
        v2663 = (v403 << 8) - v409;
        v453 = a1[4];
        for (k = (char *)v2753; v405; --v405)
        {
          if (k == *((char **)&v2753 + 1))
          {
            v455 = (char *)*((_QWORD *)&v2752 + 1);
            v456 = (void *)v2752;
            if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
            {
              if (k == (char *)v2752)
                v462 = 1;
              else
                v462 = (uint64_t)&k[-v2752] >> 2;
              v463 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v462);
              v466 = k - v455;
              v465 = k == v455;
              k = &v463[8 * (v462 >> 2)];
              if (!v465)
              {
                k = &v463[8 * (v462 >> 2) + (v466 & 0xFFFFFFFFFFFFFFF8)];
                v467 = 8 * (v466 >> 3);
                v468 = &v463[8 * (v462 >> 2)];
                do
                {
                  v469 = *(_QWORD *)v455;
                  v455 += 8;
                  *(_QWORD *)v468 = v469;
                  v468 += 8;
                  v467 -= 8;
                }
                while (v467);
              }
              *(_QWORD *)&v2752 = v463;
              *((_QWORD *)&v2752 + 1) = &v463[8 * (v462 >> 2)];
              *(_QWORD *)&v2753 = k;
              *((_QWORD *)&v2753 + 1) = &v463[8 * v464];
              if (v456)
                operator delete(v456);
            }
            else
            {
              v457 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
              if (v457 >= -1)
                v458 = v457 + 1;
              else
                v458 = v457 + 2;
              v459 = *((_QWORD *)&v2752 + 1) - 8 * (v458 >> 1);
              v460 = &k[-*((_QWORD *)&v2752 + 1)];
              if (k != *((char **)&v2752 + 1))
              {
                memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v458 >> 1)), *((const void **)&v2752 + 1), (size_t)&k[-*((_QWORD *)&v2752 + 1)]);
                k = v455;
              }
              v461 = &k[-8 * (v458 >> 1)];
              k = &v460[v459];
              *((_QWORD *)&v2752 + 1) = v461;
              *(_QWORD *)&v2753 = &v460[v459];
            }
          }
          *(_QWORD *)k = *(_QWORD *)(v453 - 8);
          k = (char *)(v2753 + 8);
          *(_QWORD *)&v2753 = v2753 + 8;
          v453 = v2654[2].i64[0] - 8;
          v2654[2].i64[0] = v453;
        }
        v470 = (uint64_t *)v2654[1].i64[1];
        if (v470 == (uint64_t *)v453)
        {
          v470 = (uint64_t *)v453;
          v486 = (uint64_t *)v2654;
        }
        else
        {
          do
          {
            if (k == *((char **)&v2753 + 1))
            {
              v471 = (char *)*((_QWORD *)&v2752 + 1);
              v472 = (void *)v2752;
              if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
              {
                if (k == (char *)v2752)
                  v478 = 1;
                else
                  v478 = (uint64_t)&k[-v2752] >> 2;
                v479 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v478);
                v481 = k - v471;
                v465 = k == v471;
                k = &v479[8 * (v478 >> 2)];
                if (!v465)
                {
                  k = &v479[8 * (v478 >> 2) + (v481 & 0xFFFFFFFFFFFFFFF8)];
                  v482 = 8 * (v481 >> 3);
                  v483 = &v479[8 * (v478 >> 2)];
                  do
                  {
                    v484 = *(_QWORD *)v471;
                    v471 += 8;
                    *(_QWORD *)v483 = v484;
                    v483 += 8;
                    v482 -= 8;
                  }
                  while (v482);
                }
                *(_QWORD *)&v2752 = v479;
                *((_QWORD *)&v2752 + 1) = &v479[8 * (v478 >> 2)];
                *(_QWORD *)&v2753 = k;
                *((_QWORD *)&v2753 + 1) = &v479[8 * v480];
                if (v472)
                  operator delete(v472);
              }
              else
              {
                v473 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                if (v473 >= -1)
                  v474 = v473 + 1;
                else
                  v474 = v473 + 2;
                v475 = *((_QWORD *)&v2752 + 1) - 8 * (v474 >> 1);
                v476 = &k[-*((_QWORD *)&v2752 + 1)];
                if (k != *((char **)&v2752 + 1))
                {
                  memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v474 >> 1)), *((const void **)&v2752 + 1), (size_t)&k[-*((_QWORD *)&v2752 + 1)]);
                  k = v471;
                }
                v477 = &k[-8 * (v474 >> 1)];
                k = &v476[v475];
                *((_QWORD *)&v2752 + 1) = v477;
                *(_QWORD *)&v2753 = &v476[v475];
              }
            }
            v485 = *v470++;
            *(_QWORD *)k = v485;
            k = (char *)(v2753 + 8);
            *(_QWORD *)&v2753 = v2753 + 8;
          }
          while (v470 != (uint64_t *)v2654[2].i64[0]);
          v486 = (uint64_t *)v2654;
          v453 = v2654[1].i64[1];
        }
        v524 = (void *)v486[2];
        *((_OWORD *)v486 + 1) = v2752;
        *(_QWORD *)&v2752 = v524;
        *((_QWORD *)&v2752 + 1) = v453;
        *(_QWORD *)&v2753 = v470;
        v525 = *((_QWORD *)&v2753 + 1);
        v486[4] = (uint64_t)k;
        v486[5] = v525;
        v486[6] += v2663;
        a1 = v486;
        if (v524)
          operator delete(v524);
      }
    }
    v386 = a1[6];
    v391 = (char *)a1[3];
    v390 = (char *)a1[4];
    v393 = v386 >> 8;
    v383 = v2682;
    v398 = v2704;
  }
  v526 = &v391[8 * v393];
  if (v390 == v391)
    v527 = 0;
  else
    v527 = (__int128 *)(*(_QWORD *)v526 + 16 * v386);
  if (v383 <= v398)
  {
    v531 = v527;
    v530 = &v391[8 * v393];
    if (!v383)
      goto LABEL_826;
    goto LABEL_722;
  }
  v528 = &v385[2 * (v383 - v398)];
  if (v398 < v383 >> 1)
    v528 = &v384[-2 * v398];
  if (v528 == v385)
  {
    v531 = v527;
    v530 = &v391[8 * v393];
  }
  else
  {
    v529 = v528;
    v530 = v526;
    v531 = v527;
    do
    {
      if (v531 == *(__int128 **)v530)
      {
        v532 = *((_QWORD *)v530 - 1);
        v530 -= 8;
        v531 = (__int128 *)(v532 + 4096);
      }
      v533 = *(v529 - 2);
      v529 -= 2;
      *((_QWORD *)v531-- - 2) = v533;
      v534 = v529[1];
      *((_QWORD *)v531 + 1) = v534;
      if (v534)
      {
        v535 = (unint64_t *)(v534 + 8);
        do
          v536 = __ldxr(v535);
        while (__stxr(v536 + 1, v535));
        v386 = v2654[3].u64[0];
      }
      --v386;
      v537 = v2654[3].i64[1] + 1;
      v2654[3].i64[0] = v386;
      v2654[3].i64[1] = v537;
    }
    while (v529 != v385);
    v385 = v528;
  }
  v383 = v398;
  if (v398)
  {
LABEL_722:
    v538 = v383;
    v539 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v526, (uint64_t)v527, v383);
    v541 = v539;
    v542 = v540;
    if (v527 != v540)
    {
      v543 = v539;
      v544 = v540;
      do
      {
        if (v531 == *(__int128 **)v530)
        {
          v545 = *((_QWORD *)v530 - 1);
          v530 -= 8;
          v531 = (__int128 *)(v545 + 4096);
        }
        if (v544 == *v543)
        {
          v546 = (uint64_t)*--v543;
          v544 = (__int128 *)(v546 + 4096);
        }
        v547 = *--v544;
        *--v531 = v547;
        *(_QWORD *)v544 = 0;
        *((_QWORD *)v544 + 1) = 0;
        v2654[3] = vaddq_s64(v2654[3], (int64x2_t)xmmword_18F116EE0);
      }
      while (v544 != v527);
    }
    if (v538 < v2704)
    {
      v548 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v526, (uint64_t)v527, v2704);
      v550 = v549;
      if (v541 == v548)
      {
        v559 = v542;
        v560 = v550;
        v556 = v526;
        v557 = (uint64_t)v527;
      }
      else
      {
        v551 = v548;
        v553 = *v541;
        v552 = v541 + 1;
        v554 = v553 + 256;
        v555 = v542;
        v556 = v526;
        v557 = (uint64_t)v527;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v555, v554, v556, v557);
          v556 = (char *)*((_QWORD *)&v2752 + 1);
          v557 = v2753;
          if (v552 == v551)
            break;
          v558 = *v552++;
          v555 = v558;
          v554 = v558 + 256;
        }
        v559 = *v551;
        v560 = v550;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v559, v560, v556, v557);
      v527 = (__int128 *)v2753;
      v526 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v385 != v384)
    {
      v561 = *(char **)v526;
      while (1)
      {
        v562 = v561 - (char *)v527 + 4096;
        if (((char *)v384 - (char *)v385) >> 4 >= v562 >> 4)
          v563 = v562 >> 4;
        else
          v563 = ((char *)v384 - (char *)v385) >> 4;
        if (v563)
        {
          v564 = &v385[2 * v563];
          do
          {
            v565 = *v385;
            v566 = v385[1];
            v385 += 2;
            std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v527++, v565, v566);
          }
          while (v385 != v564);
          v385 = v564;
        }
        if (v385 == v384)
          break;
        v567 = (char *)*((_QWORD *)v526 + 1);
        v526 += 8;
        v561 = v567;
        v527 = (__int128 *)v567;
      }
    }
  }
LABEL_826:
  v630 = (uint64_t)(*((_QWORD *)&v2750 + 1) - v2750) >> 4;
  v631 = (uint64_t *)v2654;
  v632 = (unint64_t *)&v2654[4];
  do
    v633 = __ldaxr(v632);
  while (__stlxr(v633 + v630, v632));
  v634 = v2654[7].u64[0];
  v635 = v2654[7].i64[1];
  v636 = v634 + v635;
  v637 = (v634 + v635) >> 8;
  v639 = (char *)v2654[5].i64[1];
  v638 = (char *)v2654[6].i64[0];
  v640 = &v639[8 * v637];
  v641 = v638 - v639;
  if (v638 == v639)
  {
    v642 = 0;
    v648 = 0;
    v644 = (uint64_t *)v2748.n128_u64[1];
    v643 = (uint64_t *)v2748.n128_u64[0];
    v645 = (uint64_t)(v2748.n128_u64[1] - v2748.n128_u64[0]) >> 4;
    v646 = v634 >> 8;
    v647 = &v639[8 * (v634 >> 8)];
  }
  else
  {
    v642 = *(_QWORD *)v640 + 16 * v636;
    v644 = (uint64_t *)v2748.n128_u64[1];
    v643 = (uint64_t *)v2748.n128_u64[0];
    v645 = (uint64_t)(v2748.n128_u64[1] - v2748.n128_u64[0]) >> 4;
    v646 = v634 >> 8;
    v647 = &v639[8 * (v634 >> 8)];
    v648 = *(_QWORD *)v647 + 16 * v634;
  }
  if (v642 == v648)
    v649 = 0;
  else
    v649 = ((v642 - *(_QWORD *)v640) >> 4) + 32 * (v640 - v647) - ((v648 - *(_QWORD *)v647) >> 4);
  v650 = v2654 + 5;
  if (v649 >= v635 - v649)
  {
    v663 = 32 * v641 - 1;
    v664 = v638 - v639;
    if (v638 == v639)
      v663 = 0;
    v665 = v663 - v636;
    v415 = v645 >= v665;
    v666 = v645 - v665;
    if (v666 != 0 && v415)
    {
      v2685 = v649;
      v2707 = v645;
      if (v638 == v639)
        v667 = v666 + 1;
      else
        v667 = v666;
      if ((_BYTE)v667)
        v668 = (v667 >> 8) + 1;
      else
        v668 = v667 >> 8;
      if (v668 >= v646)
        v669 = v646;
      else
        v669 = v668;
      if (v668 <= v646)
      {
        for (v2654[7].i64[0] = v634 - (v669 << 8); v669; --v669)
        {
          v676 = (_QWORD *)v2654[5].i64[1];
          v679 = *v676;
          v677 = (char *)(v676 + 1);
          v678 = v679;
          v2654[5].i64[1] = (uint64_t)v677;
          if (v638 == (char *)v2654[6].i64[1])
          {
            v680 = (uint64_t)&v677[-v650->i64[0]];
            if ((unint64_t)v677 <= v650->i64[0])
            {
              if (v638 == (char *)v650->i64[0])
                v687 = 1;
              else
                v687 = (uint64_t)&v638[-v650->i64[0]] >> 2;
              v688 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v687);
              v690 = &v688[8 * (v687 >> 2)];
              v691 = (uint64_t *)v2654[5].i64[1];
              v638 = v690;
              v692 = v2654[6].i64[0] - (_QWORD)v691;
              if (v692)
              {
                v638 = &v690[v692 & 0xFFFFFFFFFFFFFFF8];
                v693 = 8 * (v692 >> 3);
                v694 = &v688[8 * (v687 >> 2)];
                do
                {
                  v695 = *v691++;
                  *(_QWORD *)v694 = v695;
                  v694 += 8;
                  v693 -= 8;
                }
                while (v693);
              }
              v696 = (void *)v2654[5].i64[0];
              v2654[5].i64[0] = (uint64_t)v688;
              v2654[5].i64[1] = (uint64_t)v690;
              v2654[6].i64[0] = (uint64_t)v638;
              v2654[6].i64[1] = (uint64_t)&v688[8 * v689];
              if (v696)
              {
                operator delete(v696);
                v638 = (char *)v2654[6].i64[0];
              }
            }
            else
            {
              v681 = v680 >> 3;
              v432 = v680 >> 3 < -1;
              v682 = (v680 >> 3) + 2;
              if (v432)
                v683 = v682;
              else
                v683 = v681 + 1;
              v684 = &v677[-8 * (v683 >> 1)];
              v685 = v638 - v677;
              if (v638 != v677)
              {
                memmove(&v677[-8 * (v683 >> 1)], v677, v638 - v677);
                v638 = (char *)v2654[5].i64[1];
              }
              v686 = &v638[-8 * (v683 >> 1)];
              v638 = &v684[v685];
              v2654[5].i64[1] = (uint64_t)v686;
              v2654[6].i64[0] = (uint64_t)&v684[v685];
            }
          }
          *(_QWORD *)v638 = v678;
          v638 = (char *)(v2654[6].i64[0] + 8);
          v2654[6].i64[0] = (uint64_t)v638;
        }
      }
      else
      {
        v670 = v668 - v669;
        v671 = v2654[6].i64[1] - v2654[5].i64[0];
        if (v670 <= (v671 >> 3) - (v664 >> 3))
        {
          if (v670)
          {
            while (v2654[6].i64[1] != v2654[6].i64[0])
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[5].i64, &v2752);
              if (!--v670)
              {
                v638 = (char *)v2654[6].i64[0];
                goto LABEL_1050;
              }
            }
            for (m = 0; m != v670; ++m)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[5].i64, &v2752);
              v638 = (char *)v2654[6].i64[0];
              if (&v638[-v2654[5].i64[1]] == (char *)8)
                v817 = 255;
              else
                v817 = 256;
              v818 = v817 + v2654[7].i64[0];
              v2654[7].i64[0] = v818;
            }
            v669 += v670;
          }
          else
          {
LABEL_1050:
            v818 = v2654[7].i64[0];
          }
          for (v2654[7].i64[0] = v818 - (v669 << 8); v669; --v669)
          {
            v819 = (_QWORD *)v2654[5].i64[1];
            v822 = *v819;
            v820 = (char *)(v819 + 1);
            v821 = v822;
            v2654[5].i64[1] = (uint64_t)v820;
            if (v638 == (char *)v2654[6].i64[1])
            {
              v823 = (uint64_t)&v820[-v650->i64[0]];
              if ((unint64_t)v820 <= v650->i64[0])
              {
                if (v638 == (char *)v650->i64[0])
                  v830 = 1;
                else
                  v830 = (uint64_t)&v638[-v650->i64[0]] >> 2;
                v831 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v830);
                v833 = &v831[8 * (v830 >> 2)];
                v834 = (uint64_t *)v2654[5].i64[1];
                v638 = v833;
                v835 = v2654[6].i64[0] - (_QWORD)v834;
                if (v835)
                {
                  v638 = &v833[v835 & 0xFFFFFFFFFFFFFFF8];
                  v836 = 8 * (v835 >> 3);
                  v837 = &v831[8 * (v830 >> 2)];
                  do
                  {
                    v838 = *v834++;
                    *(_QWORD *)v837 = v838;
                    v837 += 8;
                    v836 -= 8;
                  }
                  while (v836);
                }
                v839 = (void *)v2654[5].i64[0];
                v2654[5].i64[0] = (uint64_t)v831;
                v2654[5].i64[1] = (uint64_t)v833;
                v2654[6].i64[0] = (uint64_t)v638;
                v2654[6].i64[1] = (uint64_t)&v831[8 * v832];
                if (v839)
                {
                  operator delete(v839);
                  v638 = (char *)v2654[6].i64[0];
                }
              }
              else
              {
                v824 = v823 >> 3;
                v432 = v823 >> 3 < -1;
                v825 = (v823 >> 3) + 2;
                if (v432)
                  v826 = v825;
                else
                  v826 = v824 + 1;
                v827 = &v820[-8 * (v826 >> 1)];
                v828 = v638 - v820;
                if (v638 != v820)
                {
                  memmove(&v820[-8 * (v826 >> 1)], v820, v638 - v820);
                  v638 = (char *)v2654[5].i64[1];
                }
                v829 = &v638[-8 * (v826 >> 1)];
                v638 = &v827[v828];
                v2654[5].i64[1] = (uint64_t)v829;
                v2654[6].i64[0] = (uint64_t)&v827[v828];
              }
            }
            *(_QWORD *)v638 = v821;
            v638 = (char *)(v2654[6].i64[0] + 8);
            v2654[6].i64[0] = (uint64_t)v638;
          }
        }
        else
        {
          v672 = v664 >> 3;
          if (v671 >> 2 <= v670 + (v664 >> 3))
            v673 = v670 + (v664 >> 3);
          else
            v673 = v671 >> 2;
          v2754 = &v2654[6].i8[8];
          if (v673)
            v673 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v673);
          else
            v674 = 0;
          *(_QWORD *)&v2752 = v673;
          *((_QWORD *)&v2752 + 1) = v673 + 8 * (v672 - v669);
          *(_QWORD *)&v2753 = *((_QWORD *)&v2752 + 1);
          *((_QWORD *)&v2753 + 1) = v673 + 8 * v674;
          do
          {
            *(_QWORD *)&v2732 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
            --v670;
          }
          while (v670);
          v2666 = v669 << 8;
          v735 = (char *)v2753;
          if (v669)
          {
            v736 = (_QWORD *)v2654[5].i64[1];
            do
            {
              if (v735 == *((char **)&v2753 + 1))
              {
                v737 = (char *)*((_QWORD *)&v2752 + 1);
                v738 = (void *)v2752;
                if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
                {
                  if (v735 == (char *)v2752)
                    v744 = 1;
                  else
                    v744 = (uint64_t)&v735[-v2752] >> 2;
                  v745 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v744);
                  v747 = v735 - v737;
                  v465 = v735 == v737;
                  v735 = &v745[8 * (v744 >> 2)];
                  if (!v465)
                  {
                    v735 = &v745[8 * (v744 >> 2) + (v747 & 0xFFFFFFFFFFFFFFF8)];
                    v748 = 8 * (v747 >> 3);
                    v749 = &v745[8 * (v744 >> 2)];
                    do
                    {
                      v750 = *(_QWORD *)v737;
                      v737 += 8;
                      *(_QWORD *)v749 = v750;
                      v749 += 8;
                      v748 -= 8;
                    }
                    while (v748);
                  }
                  *(_QWORD *)&v2752 = v745;
                  *((_QWORD *)&v2752 + 1) = &v745[8 * (v744 >> 2)];
                  *(_QWORD *)&v2753 = v735;
                  *((_QWORD *)&v2753 + 1) = &v745[8 * v746];
                  if (v738)
                    operator delete(v738);
                }
                else
                {
                  v739 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                  if (v739 >= -1)
                    v740 = v739 + 1;
                  else
                    v740 = v739 + 2;
                  v741 = *((_QWORD *)&v2752 + 1) - 8 * (v740 >> 1);
                  v742 = &v735[-*((_QWORD *)&v2752 + 1)];
                  if (v735 != *((char **)&v2752 + 1))
                  {
                    memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v740 >> 1)), *((const void **)&v2752 + 1), (size_t)&v735[-*((_QWORD *)&v2752 + 1)]);
                    v735 = v737;
                  }
                  v743 = &v735[-8 * (v740 >> 1)];
                  v735 = &v742[v741];
                  *((_QWORD *)&v2752 + 1) = v743;
                  *(_QWORD *)&v2753 = &v742[v741];
                }
              }
              *(_QWORD *)v735 = *v736;
              v735 = (char *)(v2753 + 8);
              *(_QWORD *)&v2753 = v2753 + 8;
              v736 = (_QWORD *)(v2654[5].i64[1] + 8);
              v2654[5].i64[1] = (uint64_t)v736;
              --v669;
            }
            while (v669);
          }
          v751 = v2654[6].i64[0];
          v753 = (char *)*((_QWORD *)&v2752 + 1);
          v752 = (char *)v2752;
          v754 = (char *)*((_QWORD *)&v2753 + 1);
          while (v751 != v2654[5].i64[1])
          {
            if (v753 == v752)
            {
              if (v735 >= v754)
              {
                if (v754 == v752)
                  v759 = 1;
                else
                  v759 = (v754 - v752) >> 2;
                v760 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v759);
                v762 = v760;
                v753 = &v760[(2 * v759 + 6) & 0xFFFFFFFFFFFFFFF8];
                v763 = v735 - v752;
                v465 = v735 == v752;
                v735 = v753;
                if (!v465)
                {
                  v735 = &v753[v763 & 0xFFFFFFFFFFFFFFF8];
                  v764 = 8 * (v763 >> 3);
                  v765 = v753;
                  v766 = v752;
                  do
                  {
                    v767 = *(_QWORD *)v766;
                    v766 += 8;
                    *(_QWORD *)v765 = v767;
                    v765 += 8;
                    v764 -= 8;
                  }
                  while (v764);
                }
                v754 = &v760[8 * v761];
                if (v752)
                  operator delete(v752);
                v752 = v762;
              }
              else
              {
                v755 = (v754 - v735) >> 3;
                if (v755 >= -1)
                  v756 = v755 + 1;
                else
                  v756 = v755 + 2;
                v757 = &v735[8 * (v756 >> 1)];
                v753 = &v757[-(v735 - v752)];
                v758 = v735 - v752;
                v465 = v735 == v752;
                v735 = v757;
                if (!v465)
                  memmove(v753, v752, v758);
              }
            }
            v768 = *(_QWORD *)(v751 - 8);
            v751 -= 8;
            *((_QWORD *)v753 - 1) = v768;
            v753 -= 8;
          }
          *(_QWORD *)&v2752 = v752;
          *((_QWORD *)&v2752 + 1) = v753;
          *(_QWORD *)&v2753 = v735;
          *((_QWORD *)&v2753 + 1) = v754;
          v631 = (uint64_t *)v2654;
          v771 = v2752;
          v770 = (int64x2_t)v2753;
          *(_QWORD *)&v2752 = v2654[5].i64[0];
          v769 = (void *)v2752;
          *((_QWORD *)&v2752 + 1) = v751;
          v2654[5] = (int64x2_t)v771;
          v2654[6] = v770;
          v2654[7].i64[0] -= v2666;
          if (v769)
          {
            operator delete(v769);
            v638 = (char *)v2654[6].i64[0];
          }
          else
          {
            v638 = (char *)v770.i64[0];
          }
        }
      }
      v635 = v631[15];
      v639 = (char *)v631[11];
      v636 = v631[14] + v635;
      v637 = v636 >> 8;
      v649 = v2685;
      v645 = v2707;
    }
    v840 = &v639[8 * v637];
    if (v638 == v639)
      v841 = 0;
    else
      v841 = *(_QWORD *)v840 + 16 * v636;
    v842 = v635 - v649;
    if (v635 - v649 >= v645)
    {
      v846 = (_QWORD *)v841;
      v845 = &v639[8 * v637];
      if (!v645)
        goto LABEL_1114;
    }
    else
    {
      v843 = &v644[2 * (v635 - v649 - v645)];
      if (v842 < v645 >> 1)
        v843 = &v643[2 * v842];
      if (v843 == v644)
      {
        v846 = (_QWORD *)v841;
        v845 = &v639[8 * v637];
      }
      else
      {
        v844 = v843;
        v845 = &v639[8 * v637];
        v846 = (_QWORD *)v841;
        do
        {
          *v846 = *v844;
          v847 = v844[1];
          v846[1] = v847;
          if (v847)
          {
            v848 = (unint64_t *)(v847 + 8);
            do
              v849 = __ldxr(v848);
            while (__stxr(v849 + 1, v848));
          }
          v846 += 2;
          if ((_QWORD *)((char *)v846 - *(_QWORD *)v845) == (_QWORD *)4096)
          {
            v850 = (_QWORD *)*((_QWORD *)v845 + 1);
            v845 += 8;
            v846 = v850;
          }
          v844 += 2;
          ++v2654[7].i64[1];
        }
        while (v844 != v644);
        v644 = v843;
      }
      v645 = v842;
      if (!v842)
        goto LABEL_1114;
    }
    v2708 = v645;
    v851 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v840, v841, v645);
    v853 = v851;
    v854 = v852;
    if (v841 != v852)
    {
      v855 = v851;
      v856 = v852;
      do
      {
        *(_OWORD *)v846 = *(_OWORD *)v856;
        v846 += 2;
        *(_QWORD *)v856 = 0;
        *(_QWORD *)(v856 + 8) = 0;
        if ((_QWORD *)((char *)v846 - *(_QWORD *)v845) == (_QWORD *)4096)
        {
          v857 = (_QWORD *)*((_QWORD *)v845 + 1);
          v845 += 8;
          v846 = v857;
        }
        v856 += 16;
        if (v856 - *v855 == 4096)
        {
          v858 = v855[1];
          ++v855;
          v856 = v858;
        }
        ++v2654[7].i64[1];
      }
      while (v856 != v841);
    }
    if (v2708 < v842)
    {
      v859 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v840, v841, v842);
      v861 = v860;
      if (v859 == v853)
      {
        v870 = v854;
        v867 = v840;
        v868 = v841;
      }
      else
      {
        v862 = v859;
        v865 = *v853;
        v864 = v853 - 1;
        v863 = v865;
        v866 = v854;
        v867 = v840;
        v868 = v841;
        while (1)
        {
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v863, v866, v867, v868);
          v867 = (char *)*((_QWORD *)&v2752 + 1);
          v868 = v2753;
          if (v864 == v862)
            break;
          v869 = *v864--;
          v863 = v869;
          v866 = v869 + 4096;
        }
        v870 = *v862 + 4096;
        v860 = v861;
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v860, v870, v867, v868);
      v841 = v2753;
      v840 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v643 != v644)
    {
      v871 = *(_QWORD *)v840;
      while (1)
      {
        v872 = v841 - v871;
        if (((char *)v644 - (char *)v643) >> 4 >= v872 >> 4)
          v873 = v872 >> 4;
        else
          v873 = ((char *)v644 - (char *)v643) >> 4;
        if (v873)
        {
          v874 = v644 - 1;
          v875 = -16 * v873;
          v876 = (_QWORD *)(v841 - 16);
          do
          {
            v877 = std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v876, *(v874 - 1), *v874);
            v874 -= 2;
            v876 = v877 - 2;
            v875 += 16;
          }
          while (v875);
        }
        v644 -= 2 * v873;
        if (v644 == v643)
          break;
        v878 = *((_QWORD *)v840 - 1);
        v840 -= 8;
        v871 = v878;
        v841 = v878 + 4096;
      }
    }
    goto LABEL_1114;
  }
  v651 = v645 - v634;
  v2684 = v649;
  if (v645 > v634)
  {
    v2706 = v645;
    v652 = 32 * v641 - 1;
    v653 = v638 - v639;
    if (v638 == v639)
    {
      v652 = 0;
      ++v651;
    }
    if ((_BYTE)v651)
      v654 = (v651 >> 8) + 1;
    else
      v654 = v651 >> 8;
    v655 = v652 - v636;
    if (v654 >= v655 >> 8)
      v656 = v655 >> 8;
    else
      v656 = v654;
    if (v654 <= v655 >> 8)
    {
      for (v2654[7].i64[0] = v634 + (v656 << 8); v656; --v656)
      {
        v675 = v2654[6].i64[0];
        *(_QWORD *)&v2752 = *(_QWORD *)(v675 - 8);
        v2654[6].i64[0] = v675 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[5].i64, &v2752);
      }
    }
    else
    {
      v657 = v654 - v656;
      v658 = v2654[5].i64[0];
      v659 = v2654[6].i64[1] - v658;
      if (v654 - v656 <= (v659 >> 3) - (v653 >> 3))
      {
        if (v657)
        {
          if (v639 == (char *)v658)
          {
LABEL_900:
            v699 = v657;
            do
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[5].i64, &v2752);
              --v699;
            }
            while (v699);
            v656 += v657;
            v634 = v2654[7].u64[0];
          }
          else
          {
            while (1)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[5].i64, &v2752);
              v697 = v2654[5].i64[1];
              v698 = v2654[6].i64[0] - v697 == 8 ? 255 : 256;
              v634 = v698 + v2654[7].i64[0];
              v2654[7].i64[0] = v634;
              if (!--v657)
                break;
              if (v697 == v650->i64[0])
                goto LABEL_900;
            }
          }
        }
        for (v2654[7].i64[0] = v634 + (v656 << 8); v656; --v656)
        {
          v700 = v2654[6].i64[0];
          *(_QWORD *)&v2752 = *(_QWORD *)(v700 - 8);
          v2654[6].i64[0] = v700 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[5].i64, &v2752);
        }
      }
      else
      {
        v660 = v638 == v639;
        if (v659 >> 2 <= v657 + (v653 >> 3))
          v661 = v657 + (v653 >> 3);
        else
          v661 = v659 >> 2;
        v2754 = &v2654[6].i8[8];
        if (v661)
          v661 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v661);
        else
          v662 = 0;
        v701 = (v654 << 8) - v660;
        *(_QWORD *)&v2752 = v661;
        *((_QWORD *)&v2752 + 1) = v661;
        *(_QWORD *)&v2753 = v661;
        *((_QWORD *)&v2753 + 1) = v661 + 8 * v662;
        do
        {
          *(_QWORD *)&v2732 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
          --v657;
        }
        while (v657);
        v2665 = v701;
        v702 = v2654[6].i64[0];
        for (n = (char *)v2753; v656; --v656)
        {
          if (n == *((char **)&v2753 + 1))
          {
            v704 = (char *)*((_QWORD *)&v2752 + 1);
            v705 = (void *)v2752;
            if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
            {
              if (n == (char *)v2752)
                v711 = 1;
              else
                v711 = (uint64_t)&n[-v2752] >> 2;
              v712 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v711);
              v714 = n - v704;
              v465 = n == v704;
              n = &v712[8 * (v711 >> 2)];
              if (!v465)
              {
                n = &v712[8 * (v711 >> 2) + (v714 & 0xFFFFFFFFFFFFFFF8)];
                v715 = 8 * (v714 >> 3);
                v716 = &v712[8 * (v711 >> 2)];
                do
                {
                  v717 = *(_QWORD *)v704;
                  v704 += 8;
                  *(_QWORD *)v716 = v717;
                  v716 += 8;
                  v715 -= 8;
                }
                while (v715);
              }
              *(_QWORD *)&v2752 = v712;
              *((_QWORD *)&v2752 + 1) = &v712[8 * (v711 >> 2)];
              *(_QWORD *)&v2753 = n;
              *((_QWORD *)&v2753 + 1) = &v712[8 * v713];
              if (v705)
                operator delete(v705);
            }
            else
            {
              v706 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
              if (v706 >= -1)
                v707 = v706 + 1;
              else
                v707 = v706 + 2;
              v708 = *((_QWORD *)&v2752 + 1) - 8 * (v707 >> 1);
              v709 = &n[-*((_QWORD *)&v2752 + 1)];
              if (n != *((char **)&v2752 + 1))
              {
                memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v707 >> 1)), *((const void **)&v2752 + 1), (size_t)&n[-*((_QWORD *)&v2752 + 1)]);
                n = v704;
              }
              v710 = &n[-8 * (v707 >> 1)];
              n = &v709[v708];
              *((_QWORD *)&v2752 + 1) = v710;
              *(_QWORD *)&v2753 = &v709[v708];
            }
          }
          *(_QWORD *)n = *(_QWORD *)(v702 - 8);
          n = (char *)(v2753 + 8);
          *(_QWORD *)&v2753 = v2753 + 8;
          v702 = v2654[6].i64[0] - 8;
          v2654[6].i64[0] = v702;
        }
        v718 = (uint64_t *)v2654[5].i64[1];
        if (v718 == (uint64_t *)v702)
        {
          v718 = (uint64_t *)v702;
          v734 = (uint64_t *)v2654;
        }
        else
        {
          do
          {
            if (n == *((char **)&v2753 + 1))
            {
              v719 = (char *)*((_QWORD *)&v2752 + 1);
              v720 = (void *)v2752;
              if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
              {
                if (n == (char *)v2752)
                  v726 = 1;
                else
                  v726 = (uint64_t)&n[-v2752] >> 2;
                v727 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v726);
                v729 = n - v719;
                v465 = n == v719;
                n = &v727[8 * (v726 >> 2)];
                if (!v465)
                {
                  n = &v727[8 * (v726 >> 2) + (v729 & 0xFFFFFFFFFFFFFFF8)];
                  v730 = 8 * (v729 >> 3);
                  v731 = &v727[8 * (v726 >> 2)];
                  do
                  {
                    v732 = *(_QWORD *)v719;
                    v719 += 8;
                    *(_QWORD *)v731 = v732;
                    v731 += 8;
                    v730 -= 8;
                  }
                  while (v730);
                }
                *(_QWORD *)&v2752 = v727;
                *((_QWORD *)&v2752 + 1) = &v727[8 * (v726 >> 2)];
                *(_QWORD *)&v2753 = n;
                *((_QWORD *)&v2753 + 1) = &v727[8 * v728];
                if (v720)
                  operator delete(v720);
              }
              else
              {
                v721 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                if (v721 >= -1)
                  v722 = v721 + 1;
                else
                  v722 = v721 + 2;
                v723 = *((_QWORD *)&v2752 + 1) - 8 * (v722 >> 1);
                v724 = &n[-*((_QWORD *)&v2752 + 1)];
                if (n != *((char **)&v2752 + 1))
                {
                  memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v722 >> 1)), *((const void **)&v2752 + 1), (size_t)&n[-*((_QWORD *)&v2752 + 1)]);
                  n = v719;
                }
                v725 = &n[-8 * (v722 >> 1)];
                n = &v724[v723];
                *((_QWORD *)&v2752 + 1) = v725;
                *(_QWORD *)&v2753 = &v724[v723];
              }
            }
            v733 = *v718++;
            *(_QWORD *)n = v733;
            n = (char *)(v2753 + 8);
            *(_QWORD *)&v2753 = v2753 + 8;
          }
          while (v718 != (uint64_t *)v2654[6].i64[0]);
          v734 = (uint64_t *)v2654;
          v702 = v2654[5].i64[1];
        }
        v772 = (void *)v734[10];
        *((_OWORD *)v734 + 5) = v2752;
        *(_QWORD *)&v2752 = v772;
        *((_QWORD *)&v2752 + 1) = v702;
        *(_QWORD *)&v2753 = v718;
        v773 = *((_QWORD *)&v2753 + 1);
        v734[12] = (uint64_t)n;
        v734[13] = v773;
        v734[14] += v2665;
        v631 = v734;
        if (v772)
          operator delete(v772);
      }
    }
    v634 = v631[14];
    v639 = (char *)v631[11];
    v638 = (char *)v631[12];
    v646 = v634 >> 8;
    v649 = v2684;
    v645 = v2706;
  }
  v774 = &v639[8 * v646];
  if (v638 == v639)
    v775 = 0;
  else
    v775 = (__int128 *)(*(_QWORD *)v774 + 16 * v634);
  if (v645 <= v649)
  {
    v779 = v775;
    v778 = &v639[8 * v646];
    if (!v645)
      goto LABEL_1114;
    goto LABEL_1017;
  }
  v776 = &v643[2 * (v645 - v649)];
  if (v649 < v645 >> 1)
    v776 = &v644[-2 * v649];
  if (v776 == v643)
  {
    v779 = v775;
    v778 = &v639[8 * v646];
  }
  else
  {
    v777 = v776;
    v778 = v774;
    v779 = v775;
    do
    {
      if (v779 == *(__int128 **)v778)
      {
        v780 = *((_QWORD *)v778 - 1);
        v778 -= 8;
        v779 = (__int128 *)(v780 + 4096);
      }
      v781 = *(v777 - 2);
      v777 -= 2;
      *((_QWORD *)v779-- - 2) = v781;
      v782 = v777[1];
      *((_QWORD *)v779 + 1) = v782;
      if (v782)
      {
        v783 = (unint64_t *)(v782 + 8);
        do
          v784 = __ldxr(v783);
        while (__stxr(v784 + 1, v783));
        v634 = v2654[7].u64[0];
      }
      --v634;
      v785 = v2654[7].i64[1] + 1;
      v2654[7].i64[0] = v634;
      v2654[7].i64[1] = v785;
    }
    while (v777 != v643);
    v643 = v776;
  }
  v645 = v649;
  if (v649)
  {
LABEL_1017:
    v786 = v645;
    v787 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v774, (uint64_t)v775, v645);
    v789 = v787;
    v790 = v788;
    if (v775 != v788)
    {
      v791 = v787;
      v792 = v788;
      do
      {
        if (v779 == *(__int128 **)v778)
        {
          v793 = *((_QWORD *)v778 - 1);
          v778 -= 8;
          v779 = (__int128 *)(v793 + 4096);
        }
        if (v792 == *v791)
        {
          v794 = (uint64_t)*--v791;
          v792 = (__int128 *)(v794 + 4096);
        }
        v795 = *--v792;
        *--v779 = v795;
        *(_QWORD *)v792 = 0;
        *((_QWORD *)v792 + 1) = 0;
        v2654[7] = vaddq_s64(v2654[7], (int64x2_t)xmmword_18F116EE0);
      }
      while (v792 != v775);
    }
    if (v786 < v2684)
    {
      v796 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v774, (uint64_t)v775, v2684);
      v798 = v797;
      if (v789 == v796)
      {
        v807 = v790;
        v808 = v798;
        v804 = v774;
        v805 = (uint64_t)v775;
      }
      else
      {
        v799 = v796;
        v801 = *v789;
        v800 = v789 + 1;
        v802 = v801 + 256;
        v803 = v790;
        v804 = v774;
        v805 = (uint64_t)v775;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v803, v802, v804, v805);
          v804 = (char *)*((_QWORD *)&v2752 + 1);
          v805 = v2753;
          if (v800 == v799)
            break;
          v806 = *v800++;
          v803 = v806;
          v802 = v806 + 256;
        }
        v807 = *v799;
        v808 = v798;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v807, v808, v804, v805);
      v775 = (__int128 *)v2753;
      v774 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v643 != v644)
    {
      v809 = *(char **)v774;
      while (1)
      {
        v810 = v809 - (char *)v775 + 4096;
        if (((char *)v644 - (char *)v643) >> 4 >= v810 >> 4)
          v811 = v810 >> 4;
        else
          v811 = ((char *)v644 - (char *)v643) >> 4;
        if (v811)
        {
          v812 = &v643[2 * v811];
          do
          {
            v813 = *v643;
            v814 = v643[1];
            v643 += 2;
            std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v775++, v813, v814);
          }
          while (v643 != v812);
          v643 = v812;
        }
        if (v643 == v644)
          break;
        v815 = (char *)*((_QWORD *)v774 + 1);
        v774 += 8;
        v809 = v815;
        v775 = (__int128 *)v815;
      }
    }
  }
LABEL_1114:
  v879 = (uint64_t)(v2748.n128_u64[1] - v2748.n128_u64[0]) >> 4;
  v880 = (uint64_t *)v2654;
  v881 = (unint64_t *)&v2654[8];
  do
    v882 = __ldaxr(v881);
  while (__stlxr(v882 + v879, v881));
  v883 = v2654[11].u64[0];
  v884 = v2654[11].i64[1];
  v885 = v883 + v884;
  v886 = (v883 + v884) >> 8;
  v888 = (char *)v2654[9].i64[1];
  v887 = (char *)v2654[10].i64[0];
  v889 = &v888[8 * v886];
  v890 = v887 - v888;
  if (v887 == v888)
  {
    v891 = 0;
    v897 = 0;
    v892 = (uint64_t *)v2745;
    v893 = v2746;
    v894 = (v2746 - v2745) >> 4;
    v895 = v883 >> 8;
    v896 = &v888[8 * (v883 >> 8)];
  }
  else
  {
    v891 = *(_QWORD *)v889 + 16 * v885;
    v892 = (uint64_t *)v2745;
    v893 = v2746;
    v894 = (v2746 - v2745) >> 4;
    v895 = v883 >> 8;
    v896 = &v888[8 * (v883 >> 8)];
    v897 = *(_QWORD *)v896 + 16 * v883;
  }
  if (v891 == v897)
    v898 = 0;
  else
    v898 = ((v891 - *(_QWORD *)v889) >> 4) + 32 * (v889 - v896) - ((v897 - *(_QWORD *)v896) >> 4);
  v899 = v2654 + 9;
  if (v898 >= v884 - v898)
  {
    v912 = 32 * v890 - 1;
    v913 = v887 - v888;
    if (v887 == v888)
      v912 = 0;
    v914 = v912 - v885;
    v415 = v894 >= v914;
    v915 = v894 - v914;
    if (v915 != 0 && v415)
    {
      v2687 = v898;
      v2710 = v894;
      if (v887 == v888)
        v916 = v915 + 1;
      else
        v916 = v915;
      if ((_BYTE)v916)
        v917 = (v916 >> 8) + 1;
      else
        v917 = v916 >> 8;
      if (v917 >= v895)
        v918 = v895;
      else
        v918 = v917;
      if (v917 <= v895)
      {
        for (v2654[11].i64[0] = v883 - (v918 << 8); v918; --v918)
        {
          v925 = (_QWORD *)v2654[9].i64[1];
          v928 = *v925;
          v926 = (char *)(v925 + 1);
          v927 = v928;
          v2654[9].i64[1] = (uint64_t)v926;
          if (v887 == (char *)v2654[10].i64[1])
          {
            v929 = (uint64_t)&v926[-v899->i64[0]];
            if ((unint64_t)v926 <= v899->i64[0])
            {
              if (v887 == (char *)v899->i64[0])
                v936 = 1;
              else
                v936 = (uint64_t)&v887[-v899->i64[0]] >> 2;
              v937 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v936);
              v939 = &v937[8 * (v936 >> 2)];
              v940 = (uint64_t *)v2654[9].i64[1];
              v887 = v939;
              v941 = v2654[10].i64[0] - (_QWORD)v940;
              if (v941)
              {
                v887 = &v939[v941 & 0xFFFFFFFFFFFFFFF8];
                v942 = 8 * (v941 >> 3);
                v943 = &v937[8 * (v936 >> 2)];
                do
                {
                  v944 = *v940++;
                  *(_QWORD *)v943 = v944;
                  v943 += 8;
                  v942 -= 8;
                }
                while (v942);
              }
              v945 = (void *)v2654[9].i64[0];
              v2654[9].i64[0] = (uint64_t)v937;
              v2654[9].i64[1] = (uint64_t)v939;
              v2654[10].i64[0] = (uint64_t)v887;
              v2654[10].i64[1] = (uint64_t)&v937[8 * v938];
              if (v945)
              {
                operator delete(v945);
                v887 = (char *)v2654[10].i64[0];
              }
            }
            else
            {
              v930 = v929 >> 3;
              v432 = v929 >> 3 < -1;
              v931 = (v929 >> 3) + 2;
              if (v432)
                v932 = v931;
              else
                v932 = v930 + 1;
              v933 = &v926[-8 * (v932 >> 1)];
              v934 = v887 - v926;
              if (v887 != v926)
              {
                memmove(&v926[-8 * (v932 >> 1)], v926, v887 - v926);
                v887 = (char *)v2654[9].i64[1];
              }
              v935 = &v887[-8 * (v932 >> 1)];
              v887 = &v933[v934];
              v2654[9].i64[1] = (uint64_t)v935;
              v2654[10].i64[0] = (uint64_t)&v933[v934];
            }
          }
          *(_QWORD *)v887 = v927;
          v887 = (char *)(v2654[10].i64[0] + 8);
          v2654[10].i64[0] = (uint64_t)v887;
        }
      }
      else
      {
        v919 = v917 - v918;
        v920 = v2654[10].i64[1] - v2654[9].i64[0];
        if (v919 <= (v920 >> 3) - (v913 >> 3))
        {
          if (v919)
          {
            while (v2654[10].i64[1] != v2654[10].i64[0])
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[9].i64, &v2752);
              if (!--v919)
              {
                v887 = (char *)v2654[10].i64[0];
                goto LABEL_1338;
              }
            }
            for (ii = 0; ii != v919; ++ii)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[9].i64, &v2752);
              v887 = (char *)v2654[10].i64[0];
              if (&v887[-v2654[9].i64[1]] == (char *)8)
                v1066 = 255;
              else
                v1066 = 256;
              v1067 = v1066 + v2654[11].i64[0];
              v2654[11].i64[0] = v1067;
            }
            v918 += v919;
          }
          else
          {
LABEL_1338:
            v1067 = v2654[11].i64[0];
          }
          for (v2654[11].i64[0] = v1067 - (v918 << 8); v918; --v918)
          {
            v1068 = (_QWORD *)v2654[9].i64[1];
            v1071 = *v1068;
            v1069 = (char *)(v1068 + 1);
            v1070 = v1071;
            v2654[9].i64[1] = (uint64_t)v1069;
            if (v887 == (char *)v2654[10].i64[1])
            {
              v1072 = (uint64_t)&v1069[-v899->i64[0]];
              if ((unint64_t)v1069 <= v899->i64[0])
              {
                if (v887 == (char *)v899->i64[0])
                  v1079 = 1;
                else
                  v1079 = (uint64_t)&v887[-v899->i64[0]] >> 2;
                v1080 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1079);
                v1082 = &v1080[8 * (v1079 >> 2)];
                v1083 = (uint64_t *)v2654[9].i64[1];
                v887 = v1082;
                v1084 = v2654[10].i64[0] - (_QWORD)v1083;
                if (v1084)
                {
                  v887 = &v1082[v1084 & 0xFFFFFFFFFFFFFFF8];
                  v1085 = 8 * (v1084 >> 3);
                  v1086 = &v1080[8 * (v1079 >> 2)];
                  do
                  {
                    v1087 = *v1083++;
                    *(_QWORD *)v1086 = v1087;
                    v1086 += 8;
                    v1085 -= 8;
                  }
                  while (v1085);
                }
                v1088 = (void *)v2654[9].i64[0];
                v2654[9].i64[0] = (uint64_t)v1080;
                v2654[9].i64[1] = (uint64_t)v1082;
                v2654[10].i64[0] = (uint64_t)v887;
                v2654[10].i64[1] = (uint64_t)&v1080[8 * v1081];
                if (v1088)
                {
                  operator delete(v1088);
                  v887 = (char *)v2654[10].i64[0];
                }
              }
              else
              {
                v1073 = v1072 >> 3;
                v432 = v1072 >> 3 < -1;
                v1074 = (v1072 >> 3) + 2;
                if (v432)
                  v1075 = v1074;
                else
                  v1075 = v1073 + 1;
                v1076 = &v1069[-8 * (v1075 >> 1)];
                v1077 = v887 - v1069;
                if (v887 != v1069)
                {
                  memmove(&v1069[-8 * (v1075 >> 1)], v1069, v887 - v1069);
                  v887 = (char *)v2654[9].i64[1];
                }
                v1078 = &v887[-8 * (v1075 >> 1)];
                v887 = &v1076[v1077];
                v2654[9].i64[1] = (uint64_t)v1078;
                v2654[10].i64[0] = (uint64_t)&v1076[v1077];
              }
            }
            *(_QWORD *)v887 = v1070;
            v887 = (char *)(v2654[10].i64[0] + 8);
            v2654[10].i64[0] = (uint64_t)v887;
          }
        }
        else
        {
          v921 = v913 >> 3;
          if (v920 >> 2 <= v919 + (v913 >> 3))
            v922 = v919 + (v913 >> 3);
          else
            v922 = v920 >> 2;
          v2754 = &v2654[10].i8[8];
          if (v922)
            v922 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v922);
          else
            v923 = 0;
          *(_QWORD *)&v2752 = v922;
          *((_QWORD *)&v2752 + 1) = v922 + 8 * (v921 - v918);
          *(_QWORD *)&v2753 = *((_QWORD *)&v2752 + 1);
          *((_QWORD *)&v2753 + 1) = v922 + 8 * v923;
          do
          {
            *(_QWORD *)&v2732 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
            --v919;
          }
          while (v919);
          v2668 = v918 << 8;
          v984 = (char *)v2753;
          if (v918)
          {
            v985 = (_QWORD *)v2654[9].i64[1];
            do
            {
              if (v984 == *((char **)&v2753 + 1))
              {
                v986 = (char *)*((_QWORD *)&v2752 + 1);
                v987 = (void *)v2752;
                if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
                {
                  if (v984 == (char *)v2752)
                    v993 = 1;
                  else
                    v993 = (uint64_t)&v984[-v2752] >> 2;
                  v994 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v993);
                  v996 = v984 - v986;
                  v465 = v984 == v986;
                  v984 = &v994[8 * (v993 >> 2)];
                  if (!v465)
                  {
                    v984 = &v994[8 * (v993 >> 2) + (v996 & 0xFFFFFFFFFFFFFFF8)];
                    v997 = 8 * (v996 >> 3);
                    v998 = &v994[8 * (v993 >> 2)];
                    do
                    {
                      v999 = *(_QWORD *)v986;
                      v986 += 8;
                      *(_QWORD *)v998 = v999;
                      v998 += 8;
                      v997 -= 8;
                    }
                    while (v997);
                  }
                  *(_QWORD *)&v2752 = v994;
                  *((_QWORD *)&v2752 + 1) = &v994[8 * (v993 >> 2)];
                  *(_QWORD *)&v2753 = v984;
                  *((_QWORD *)&v2753 + 1) = &v994[8 * v995];
                  if (v987)
                    operator delete(v987);
                }
                else
                {
                  v988 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                  if (v988 >= -1)
                    v989 = v988 + 1;
                  else
                    v989 = v988 + 2;
                  v990 = *((_QWORD *)&v2752 + 1) - 8 * (v989 >> 1);
                  v991 = &v984[-*((_QWORD *)&v2752 + 1)];
                  if (v984 != *((char **)&v2752 + 1))
                  {
                    memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v989 >> 1)), *((const void **)&v2752 + 1), (size_t)&v984[-*((_QWORD *)&v2752 + 1)]);
                    v984 = v986;
                  }
                  v992 = &v984[-8 * (v989 >> 1)];
                  v984 = &v991[v990];
                  *((_QWORD *)&v2752 + 1) = v992;
                  *(_QWORD *)&v2753 = &v991[v990];
                }
              }
              *(_QWORD *)v984 = *v985;
              v984 = (char *)(v2753 + 8);
              *(_QWORD *)&v2753 = v2753 + 8;
              v985 = (_QWORD *)(v2654[9].i64[1] + 8);
              v2654[9].i64[1] = (uint64_t)v985;
              --v918;
            }
            while (v918);
          }
          v1000 = v2654[10].i64[0];
          v1002 = (char *)*((_QWORD *)&v2752 + 1);
          v1001 = (char *)v2752;
          v1003 = (char *)*((_QWORD *)&v2753 + 1);
          while (v1000 != v2654[9].i64[1])
          {
            if (v1002 == v1001)
            {
              if (v984 >= v1003)
              {
                if (v1003 == v1001)
                  v1008 = 1;
                else
                  v1008 = (v1003 - v1001) >> 2;
                v1009 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1008);
                v1011 = v1009;
                v1002 = &v1009[(2 * v1008 + 6) & 0xFFFFFFFFFFFFFFF8];
                v1012 = v984 - v1001;
                v465 = v984 == v1001;
                v984 = v1002;
                if (!v465)
                {
                  v984 = &v1002[v1012 & 0xFFFFFFFFFFFFFFF8];
                  v1013 = 8 * (v1012 >> 3);
                  v1014 = v1002;
                  v1015 = v1001;
                  do
                  {
                    v1016 = *(_QWORD *)v1015;
                    v1015 += 8;
                    *(_QWORD *)v1014 = v1016;
                    v1014 += 8;
                    v1013 -= 8;
                  }
                  while (v1013);
                }
                v1003 = &v1009[8 * v1010];
                if (v1001)
                  operator delete(v1001);
                v1001 = v1011;
              }
              else
              {
                v1004 = (v1003 - v984) >> 3;
                if (v1004 >= -1)
                  v1005 = v1004 + 1;
                else
                  v1005 = v1004 + 2;
                v1006 = &v984[8 * (v1005 >> 1)];
                v1002 = &v1006[-(v984 - v1001)];
                v1007 = v984 - v1001;
                v465 = v984 == v1001;
                v984 = v1006;
                if (!v465)
                  memmove(v1002, v1001, v1007);
              }
            }
            v1017 = *(_QWORD *)(v1000 - 8);
            v1000 -= 8;
            *((_QWORD *)v1002 - 1) = v1017;
            v1002 -= 8;
          }
          *(_QWORD *)&v2752 = v1001;
          *((_QWORD *)&v2752 + 1) = v1002;
          *(_QWORD *)&v2753 = v984;
          *((_QWORD *)&v2753 + 1) = v1003;
          v880 = (uint64_t *)v2654;
          v1020 = v2752;
          v1019 = (int64x2_t)v2753;
          *(_QWORD *)&v2752 = v2654[9].i64[0];
          v1018 = (void *)v2752;
          *((_QWORD *)&v2752 + 1) = v1000;
          v2654[9] = (int64x2_t)v1020;
          v2654[10] = v1019;
          v2654[11].i64[0] -= v2668;
          if (v1018)
          {
            operator delete(v1018);
            v887 = (char *)v2654[10].i64[0];
          }
          else
          {
            v887 = (char *)v1019.i64[0];
          }
        }
      }
      v884 = v880[23];
      v888 = (char *)v880[19];
      v885 = v880[22] + v884;
      v886 = v885 >> 8;
      v898 = v2687;
      v894 = v2710;
    }
    v1089 = &v888[8 * v886];
    if (v887 == v888)
      v1090 = 0;
    else
      v1090 = *(_QWORD *)v1089 + 16 * v885;
    v1091 = v884 - v898;
    if (v884 - v898 >= v894)
    {
      v1095 = (_QWORD *)v1090;
      v1094 = &v888[8 * v886];
      if (!v894)
        goto LABEL_1402;
    }
    else
    {
      v1092 = (uint64_t *)&v893[16 * (v884 - v898 - v894)];
      if (v1091 < v894 >> 1)
        v1092 = &v892[2 * v1091];
      if (v1092 == (uint64_t *)v893)
      {
        v1095 = (_QWORD *)v1090;
        v1094 = &v888[8 * v886];
      }
      else
      {
        v1093 = (char *)v1092;
        v1094 = &v888[8 * v886];
        v1095 = (_QWORD *)v1090;
        do
        {
          *v1095 = *(_QWORD *)v1093;
          v1096 = *((_QWORD *)v1093 + 1);
          v1095[1] = v1096;
          if (v1096)
          {
            v1097 = (unint64_t *)(v1096 + 8);
            do
              v1098 = __ldxr(v1097);
            while (__stxr(v1098 + 1, v1097));
          }
          v1095 += 2;
          if ((_QWORD *)((char *)v1095 - *(_QWORD *)v1094) == (_QWORD *)4096)
          {
            v1099 = (_QWORD *)*((_QWORD *)v1094 + 1);
            v1094 += 8;
            v1095 = v1099;
          }
          v1093 += 16;
          ++v2654[11].i64[1];
        }
        while (v1093 != v893);
        v893 = (char *)v1092;
      }
      v894 = v1091;
      if (!v1091)
        goto LABEL_1402;
    }
    v2711 = v894;
    v1100 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1089, v1090, v894);
    v1102 = v1100;
    v1103 = v1101;
    if (v1090 != v1101)
    {
      v1104 = v1100;
      v1105 = v1101;
      do
      {
        *(_OWORD *)v1095 = *(_OWORD *)v1105;
        v1095 += 2;
        *(_QWORD *)v1105 = 0;
        *(_QWORD *)(v1105 + 8) = 0;
        if ((_QWORD *)((char *)v1095 - *(_QWORD *)v1094) == (_QWORD *)4096)
        {
          v1106 = (_QWORD *)*((_QWORD *)v1094 + 1);
          v1094 += 8;
          v1095 = v1106;
        }
        v1105 += 16;
        if (v1105 - *v1104 == 4096)
        {
          v1107 = v1104[1];
          ++v1104;
          v1105 = v1107;
        }
        ++v2654[11].i64[1];
      }
      while (v1105 != v1090);
    }
    if (v2711 < v1091)
    {
      v1108 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1089, v1090, v1091);
      v1110 = v1109;
      if (v1108 == v1102)
      {
        v1119 = v1103;
        v1116 = v1089;
        v1117 = v1090;
      }
      else
      {
        v1111 = v1108;
        v1114 = *v1102;
        v1113 = v1102 - 1;
        v1112 = v1114;
        v1115 = v1103;
        v1116 = v1089;
        v1117 = v1090;
        while (1)
        {
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1112, v1115, v1116, v1117);
          v1116 = (char *)*((_QWORD *)&v2752 + 1);
          v1117 = v2753;
          if (v1113 == v1111)
            break;
          v1118 = *v1113--;
          v1112 = v1118;
          v1115 = v1118 + 4096;
        }
        v1119 = *v1111 + 4096;
        v1109 = v1110;
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1109, v1119, v1116, v1117);
      v1090 = v2753;
      v1089 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v892 != (uint64_t *)v893)
    {
      v1120 = *(_QWORD *)v1089;
      while (1)
      {
        v1121 = v1090 - v1120;
        if ((v893 - (char *)v892) >> 4 >= v1121 >> 4)
          v1122 = v1121 >> 4;
        else
          v1122 = (v893 - (char *)v892) >> 4;
        if (v1122)
        {
          v1123 = (uint64_t *)(v893 - 8);
          v1124 = -16 * v1122;
          v1125 = (_QWORD *)(v1090 - 16);
          do
          {
            v1126 = std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v1125, *(v1123 - 1), *v1123);
            v1123 -= 2;
            v1125 = v1126 - 2;
            v1124 += 16;
          }
          while (v1124);
        }
        v893 -= 16 * v1122;
        if (v893 == (char *)v892)
          break;
        v1127 = *((_QWORD *)v1089 - 1);
        v1089 -= 8;
        v1120 = v1127;
        v1090 = v1127 + 4096;
      }
    }
    goto LABEL_1402;
  }
  v900 = v894 - v883;
  v2686 = v898;
  if (v894 > v883)
  {
    v2709 = v894;
    v901 = 32 * v890 - 1;
    v902 = v887 - v888;
    if (v887 == v888)
    {
      v901 = 0;
      ++v900;
    }
    if ((_BYTE)v900)
      v903 = (v900 >> 8) + 1;
    else
      v903 = v900 >> 8;
    v904 = v901 - v885;
    if (v903 >= v904 >> 8)
      v905 = v904 >> 8;
    else
      v905 = v903;
    if (v903 <= v904 >> 8)
    {
      for (v2654[11].i64[0] = v883 + (v905 << 8); v905; --v905)
      {
        v924 = v2654[10].i64[0];
        *(_QWORD *)&v2752 = *(_QWORD *)(v924 - 8);
        v2654[10].i64[0] = v924 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[9].i64, &v2752);
      }
    }
    else
    {
      v906 = v903 - v905;
      v907 = v2654[9].i64[0];
      v908 = v2654[10].i64[1] - v907;
      if (v903 - v905 <= (v908 >> 3) - (v902 >> 3))
      {
        if (v906)
        {
          if (v888 == (char *)v907)
          {
LABEL_1188:
            v948 = v906;
            do
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[9].i64, &v2752);
              --v948;
            }
            while (v948);
            v905 += v906;
            v883 = v2654[11].u64[0];
          }
          else
          {
            while (1)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[9].i64, &v2752);
              v946 = v2654[9].i64[1];
              v947 = v2654[10].i64[0] - v946 == 8 ? 255 : 256;
              v883 = v947 + v2654[11].i64[0];
              v2654[11].i64[0] = v883;
              if (!--v906)
                break;
              if (v946 == v899->i64[0])
                goto LABEL_1188;
            }
          }
        }
        for (v2654[11].i64[0] = v883 + (v905 << 8); v905; --v905)
        {
          v949 = v2654[10].i64[0];
          *(_QWORD *)&v2752 = *(_QWORD *)(v949 - 8);
          v2654[10].i64[0] = v949 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[9].i64, &v2752);
        }
      }
      else
      {
        v909 = v887 == v888;
        if (v908 >> 2 <= v906 + (v902 >> 3))
          v910 = v906 + (v902 >> 3);
        else
          v910 = v908 >> 2;
        v2754 = &v2654[10].i8[8];
        if (v910)
          v910 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v910);
        else
          v911 = 0;
        v950 = (v903 << 8) - v909;
        *(_QWORD *)&v2752 = v910;
        *((_QWORD *)&v2752 + 1) = v910;
        *(_QWORD *)&v2753 = v910;
        *((_QWORD *)&v2753 + 1) = v910 + 8 * v911;
        do
        {
          *(_QWORD *)&v2732 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
          --v906;
        }
        while (v906);
        v2667 = v950;
        v951 = v2654[10].i64[0];
        for (jj = (char *)v2753; v905; --v905)
        {
          if (jj == *((char **)&v2753 + 1))
          {
            v953 = (char *)*((_QWORD *)&v2752 + 1);
            v954 = (void *)v2752;
            if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
            {
              if (jj == (char *)v2752)
                v960 = 1;
              else
                v960 = (uint64_t)&jj[-v2752] >> 2;
              v961 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v960);
              v963 = jj - v953;
              v465 = jj == v953;
              jj = &v961[8 * (v960 >> 2)];
              if (!v465)
              {
                jj = &v961[8 * (v960 >> 2) + (v963 & 0xFFFFFFFFFFFFFFF8)];
                v964 = 8 * (v963 >> 3);
                v965 = &v961[8 * (v960 >> 2)];
                do
                {
                  v966 = *(_QWORD *)v953;
                  v953 += 8;
                  *(_QWORD *)v965 = v966;
                  v965 += 8;
                  v964 -= 8;
                }
                while (v964);
              }
              *(_QWORD *)&v2752 = v961;
              *((_QWORD *)&v2752 + 1) = &v961[8 * (v960 >> 2)];
              *(_QWORD *)&v2753 = jj;
              *((_QWORD *)&v2753 + 1) = &v961[8 * v962];
              if (v954)
                operator delete(v954);
            }
            else
            {
              v955 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
              if (v955 >= -1)
                v956 = v955 + 1;
              else
                v956 = v955 + 2;
              v957 = *((_QWORD *)&v2752 + 1) - 8 * (v956 >> 1);
              v958 = &jj[-*((_QWORD *)&v2752 + 1)];
              if (jj != *((char **)&v2752 + 1))
              {
                memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v956 >> 1)), *((const void **)&v2752 + 1), (size_t)&jj[-*((_QWORD *)&v2752 + 1)]);
                jj = v953;
              }
              v959 = &jj[-8 * (v956 >> 1)];
              jj = &v958[v957];
              *((_QWORD *)&v2752 + 1) = v959;
              *(_QWORD *)&v2753 = &v958[v957];
            }
          }
          *(_QWORD *)jj = *(_QWORD *)(v951 - 8);
          jj = (char *)(v2753 + 8);
          *(_QWORD *)&v2753 = v2753 + 8;
          v951 = v2654[10].i64[0] - 8;
          v2654[10].i64[0] = v951;
        }
        v967 = (uint64_t *)v2654[9].i64[1];
        if (v967 == (uint64_t *)v951)
        {
          v967 = (uint64_t *)v951;
          v983 = (uint64_t *)v2654;
        }
        else
        {
          do
          {
            if (jj == *((char **)&v2753 + 1))
            {
              v968 = (char *)*((_QWORD *)&v2752 + 1);
              v969 = (void *)v2752;
              if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
              {
                if (jj == (char *)v2752)
                  v975 = 1;
                else
                  v975 = (uint64_t)&jj[-v2752] >> 2;
                v976 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v975);
                v978 = jj - v968;
                v465 = jj == v968;
                jj = &v976[8 * (v975 >> 2)];
                if (!v465)
                {
                  jj = &v976[8 * (v975 >> 2) + (v978 & 0xFFFFFFFFFFFFFFF8)];
                  v979 = 8 * (v978 >> 3);
                  v980 = &v976[8 * (v975 >> 2)];
                  do
                  {
                    v981 = *(_QWORD *)v968;
                    v968 += 8;
                    *(_QWORD *)v980 = v981;
                    v980 += 8;
                    v979 -= 8;
                  }
                  while (v979);
                }
                *(_QWORD *)&v2752 = v976;
                *((_QWORD *)&v2752 + 1) = &v976[8 * (v975 >> 2)];
                *(_QWORD *)&v2753 = jj;
                *((_QWORD *)&v2753 + 1) = &v976[8 * v977];
                if (v969)
                  operator delete(v969);
              }
              else
              {
                v970 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                if (v970 >= -1)
                  v971 = v970 + 1;
                else
                  v971 = v970 + 2;
                v972 = *((_QWORD *)&v2752 + 1) - 8 * (v971 >> 1);
                v973 = &jj[-*((_QWORD *)&v2752 + 1)];
                if (jj != *((char **)&v2752 + 1))
                {
                  memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v971 >> 1)), *((const void **)&v2752 + 1), (size_t)&jj[-*((_QWORD *)&v2752 + 1)]);
                  jj = v968;
                }
                v974 = &jj[-8 * (v971 >> 1)];
                jj = &v973[v972];
                *((_QWORD *)&v2752 + 1) = v974;
                *(_QWORD *)&v2753 = &v973[v972];
              }
            }
            v982 = *v967++;
            *(_QWORD *)jj = v982;
            jj = (char *)(v2753 + 8);
            *(_QWORD *)&v2753 = v2753 + 8;
          }
          while (v967 != (uint64_t *)v2654[10].i64[0]);
          v983 = (uint64_t *)v2654;
          v951 = v2654[9].i64[1];
        }
        v1021 = (void *)v983[18];
        *((_OWORD *)v983 + 9) = v2752;
        *(_QWORD *)&v2752 = v1021;
        *((_QWORD *)&v2752 + 1) = v951;
        *(_QWORD *)&v2753 = v967;
        v1022 = *((_QWORD *)&v2753 + 1);
        v983[20] = (uint64_t)jj;
        v983[21] = v1022;
        v983[22] += v2667;
        v880 = v983;
        if (v1021)
          operator delete(v1021);
      }
    }
    v883 = v880[22];
    v888 = (char *)v880[19];
    v887 = (char *)v880[20];
    v895 = v883 >> 8;
    v898 = v2686;
    v894 = v2709;
  }
  v1023 = &v888[8 * v895];
  if (v887 == v888)
    v1024 = 0;
  else
    v1024 = (__int128 *)(*(_QWORD *)v1023 + 16 * v883);
  if (v894 <= v898)
  {
    v1028 = v1024;
    v1027 = &v888[8 * v895];
    if (!v894)
      goto LABEL_1402;
    goto LABEL_1305;
  }
  v1025 = &v892[2 * (v894 - v898)];
  if (v898 < v894 >> 1)
    v1025 = (uint64_t *)&v893[-16 * v898];
  if (v1025 == v892)
  {
    v1028 = v1024;
    v1027 = &v888[8 * v895];
  }
  else
  {
    v1026 = v1025;
    v1027 = v1023;
    v1028 = v1024;
    do
    {
      if (v1028 == *(__int128 **)v1027)
      {
        v1029 = *((_QWORD *)v1027 - 1);
        v1027 -= 8;
        v1028 = (__int128 *)(v1029 + 4096);
      }
      v1030 = *(v1026 - 2);
      v1026 -= 2;
      *((_QWORD *)v1028-- - 2) = v1030;
      v1031 = v1026[1];
      *((_QWORD *)v1028 + 1) = v1031;
      if (v1031)
      {
        v1032 = (unint64_t *)(v1031 + 8);
        do
          v1033 = __ldxr(v1032);
        while (__stxr(v1033 + 1, v1032));
        v883 = v2654[11].u64[0];
      }
      --v883;
      v1034 = v2654[11].i64[1] + 1;
      v2654[11].i64[0] = v883;
      v2654[11].i64[1] = v1034;
    }
    while (v1026 != v892);
    v892 = v1025;
  }
  v894 = v898;
  if (v898)
  {
LABEL_1305:
    v1035 = v894;
    v1036 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1023, (uint64_t)v1024, v894);
    v1038 = v1036;
    v1039 = v1037;
    if (v1024 != v1037)
    {
      v1040 = v1036;
      v1041 = v1037;
      do
      {
        if (v1028 == *(__int128 **)v1027)
        {
          v1042 = *((_QWORD *)v1027 - 1);
          v1027 -= 8;
          v1028 = (__int128 *)(v1042 + 4096);
        }
        if (v1041 == *v1040)
        {
          v1043 = (uint64_t)*--v1040;
          v1041 = (__int128 *)(v1043 + 4096);
        }
        v1044 = *--v1041;
        *--v1028 = v1044;
        *(_QWORD *)v1041 = 0;
        *((_QWORD *)v1041 + 1) = 0;
        v2654[11] = vaddq_s64(v2654[11], (int64x2_t)xmmword_18F116EE0);
      }
      while (v1041 != v1024);
    }
    if (v1035 < v2686)
    {
      v1045 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1023, (uint64_t)v1024, v2686);
      v1047 = v1046;
      if (v1038 == v1045)
      {
        v1056 = v1039;
        v1057 = v1047;
        v1053 = v1023;
        v1054 = (uint64_t)v1024;
      }
      else
      {
        v1048 = v1045;
        v1050 = *v1038;
        v1049 = v1038 + 1;
        v1051 = v1050 + 256;
        v1052 = v1039;
        v1053 = v1023;
        v1054 = (uint64_t)v1024;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1052, v1051, v1053, v1054);
          v1053 = (char *)*((_QWORD *)&v2752 + 1);
          v1054 = v2753;
          if (v1049 == v1048)
            break;
          v1055 = *v1049++;
          v1052 = v1055;
          v1051 = v1055 + 256;
        }
        v1056 = *v1048;
        v1057 = v1047;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1056, v1057, v1053, v1054);
      v1024 = (__int128 *)v2753;
      v1023 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v892 != (uint64_t *)v893)
    {
      v1058 = *(char **)v1023;
      while (1)
      {
        v1059 = v1058 - (char *)v1024 + 4096;
        if ((v893 - (char *)v892) >> 4 >= v1059 >> 4)
          v1060 = v1059 >> 4;
        else
          v1060 = (v893 - (char *)v892) >> 4;
        if (v1060)
        {
          v1061 = &v892[2 * v1060];
          do
          {
            v1062 = *v892;
            v1063 = v892[1];
            v892 += 2;
            std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v1024++, v1062, v1063);
          }
          while (v892 != v1061);
          v892 = v1061;
        }
        if (v892 == (uint64_t *)v893)
          break;
        v1064 = (char *)*((_QWORD *)v1023 + 1);
        v1023 += 8;
        v1058 = v1064;
        v1024 = (__int128 *)v1064;
      }
    }
  }
LABEL_1402:
  v1128 = (v2746 - v2745) >> 4;
  v1129 = (uint64_t *)v2654;
  v1130 = (unint64_t *)&v2654[12];
  do
    v1131 = __ldaxr(v1130);
  while (__stlxr(v1131 + v1128, v1130));
  v1132 = v2654[15].u64[0];
  v1133 = v2654[15].i64[1];
  v1134 = v1132 + v1133;
  v1135 = (v1132 + v1133) >> 8;
  v1137 = (char *)v2654[13].i64[1];
  v1136 = (char *)v2654[14].i64[0];
  v1138 = &v1137[8 * v1135];
  v1139 = v1136 - v1137;
  if (v1136 == v1137)
  {
    v1140 = 0;
    v1146 = 0;
    v1142 = (uint64_t *)v2743.n128_u64[1];
    v1141 = (uint64_t *)v2743.n128_u64[0];
    v1143 = (uint64_t)(v2743.n128_u64[1] - v2743.n128_u64[0]) >> 4;
    v1144 = v1132 >> 8;
    v1145 = &v1137[8 * (v1132 >> 8)];
  }
  else
  {
    v1140 = *(_QWORD *)v1138 + 16 * v1134;
    v1142 = (uint64_t *)v2743.n128_u64[1];
    v1141 = (uint64_t *)v2743.n128_u64[0];
    v1143 = (uint64_t)(v2743.n128_u64[1] - v2743.n128_u64[0]) >> 4;
    v1144 = v1132 >> 8;
    v1145 = &v1137[8 * (v1132 >> 8)];
    v1146 = *(_QWORD *)v1145 + 16 * v1132;
  }
  if (v1140 == v1146)
    v1147 = 0;
  else
    v1147 = ((v1140 - *(_QWORD *)v1138) >> 4) + 32 * (v1138 - v1145) - ((v1146 - *(_QWORD *)v1145) >> 4);
  v1148 = v2654 + 13;
  if (v1147 >= v1133 - v1147)
  {
    v1161 = 32 * v1139 - 1;
    v1162 = v1136 - v1137;
    if (v1136 == v1137)
      v1161 = 0;
    v1163 = v1161 - v1134;
    v415 = v1143 >= v1163;
    v1164 = v1143 - v1163;
    if (v1164 != 0 && v415)
    {
      v2689 = v1147;
      v2713 = v1143;
      if (v1136 == v1137)
        v1165 = v1164 + 1;
      else
        v1165 = v1164;
      if ((_BYTE)v1165)
        v1166 = (v1165 >> 8) + 1;
      else
        v1166 = v1165 >> 8;
      if (v1166 >= v1144)
        v1167 = v1144;
      else
        v1167 = v1166;
      if (v1166 <= v1144)
      {
        for (v2654[15].i64[0] = v1132 - (v1167 << 8); v1167; --v1167)
        {
          v1174 = (_QWORD *)v2654[13].i64[1];
          v1177 = *v1174;
          v1175 = (char *)(v1174 + 1);
          v1176 = v1177;
          v2654[13].i64[1] = (uint64_t)v1175;
          if (v1136 == (char *)v2654[14].i64[1])
          {
            v1178 = (uint64_t)&v1175[-v1148->i64[0]];
            if ((unint64_t)v1175 <= v1148->i64[0])
            {
              if (v1136 == (char *)v1148->i64[0])
                v1185 = 1;
              else
                v1185 = (uint64_t)&v1136[-v1148->i64[0]] >> 2;
              v1186 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1185);
              v1188 = &v1186[8 * (v1185 >> 2)];
              v1189 = (uint64_t *)v2654[13].i64[1];
              v1136 = v1188;
              v1190 = v2654[14].i64[0] - (_QWORD)v1189;
              if (v1190)
              {
                v1136 = &v1188[v1190 & 0xFFFFFFFFFFFFFFF8];
                v1191 = 8 * (v1190 >> 3);
                v1192 = &v1186[8 * (v1185 >> 2)];
                do
                {
                  v1193 = *v1189++;
                  *(_QWORD *)v1192 = v1193;
                  v1192 += 8;
                  v1191 -= 8;
                }
                while (v1191);
              }
              v1194 = (void *)v2654[13].i64[0];
              v2654[13].i64[0] = (uint64_t)v1186;
              v2654[13].i64[1] = (uint64_t)v1188;
              v2654[14].i64[0] = (uint64_t)v1136;
              v2654[14].i64[1] = (uint64_t)&v1186[8 * v1187];
              if (v1194)
              {
                operator delete(v1194);
                v1136 = (char *)v2654[14].i64[0];
              }
            }
            else
            {
              v1179 = v1178 >> 3;
              v432 = v1178 >> 3 < -1;
              v1180 = (v1178 >> 3) + 2;
              if (v432)
                v1181 = v1180;
              else
                v1181 = v1179 + 1;
              v1182 = &v1175[-8 * (v1181 >> 1)];
              v1183 = v1136 - v1175;
              if (v1136 != v1175)
              {
                memmove(&v1175[-8 * (v1181 >> 1)], v1175, v1136 - v1175);
                v1136 = (char *)v2654[13].i64[1];
              }
              v1184 = &v1136[-8 * (v1181 >> 1)];
              v1136 = &v1182[v1183];
              v2654[13].i64[1] = (uint64_t)v1184;
              v2654[14].i64[0] = (uint64_t)&v1182[v1183];
            }
          }
          *(_QWORD *)v1136 = v1176;
          v1136 = (char *)(v2654[14].i64[0] + 8);
          v2654[14].i64[0] = (uint64_t)v1136;
        }
      }
      else
      {
        v1168 = v1166 - v1167;
        v1169 = v2654[14].i64[1] - v2654[13].i64[0];
        if (v1168 <= (v1169 >> 3) - (v1162 >> 3))
        {
          if (v1168)
          {
            while (v2654[14].i64[1] != v2654[14].i64[0])
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[13].i64, &v2752);
              if (!--v1168)
              {
                v1136 = (char *)v2654[14].i64[0];
                goto LABEL_1626;
              }
            }
            for (kk = 0; kk != v1168; ++kk)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[13].i64, &v2752);
              v1136 = (char *)v2654[14].i64[0];
              if (&v1136[-v2654[13].i64[1]] == (char *)8)
                v1315 = 255;
              else
                v1315 = 256;
              v1316 = v1315 + v2654[15].i64[0];
              v2654[15].i64[0] = v1316;
            }
            v1167 += v1168;
          }
          else
          {
LABEL_1626:
            v1316 = v2654[15].i64[0];
          }
          for (v2654[15].i64[0] = v1316 - (v1167 << 8); v1167; --v1167)
          {
            v1317 = (_QWORD *)v2654[13].i64[1];
            v1320 = *v1317;
            v1318 = (char *)(v1317 + 1);
            v1319 = v1320;
            v2654[13].i64[1] = (uint64_t)v1318;
            if (v1136 == (char *)v2654[14].i64[1])
            {
              v1321 = (uint64_t)&v1318[-v1148->i64[0]];
              if ((unint64_t)v1318 <= v1148->i64[0])
              {
                if (v1136 == (char *)v1148->i64[0])
                  v1328 = 1;
                else
                  v1328 = (uint64_t)&v1136[-v1148->i64[0]] >> 2;
                v1329 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1328);
                v1331 = &v1329[8 * (v1328 >> 2)];
                v1332 = (uint64_t *)v2654[13].i64[1];
                v1136 = v1331;
                v1333 = v2654[14].i64[0] - (_QWORD)v1332;
                if (v1333)
                {
                  v1136 = &v1331[v1333 & 0xFFFFFFFFFFFFFFF8];
                  v1334 = 8 * (v1333 >> 3);
                  v1335 = &v1329[8 * (v1328 >> 2)];
                  do
                  {
                    v1336 = *v1332++;
                    *(_QWORD *)v1335 = v1336;
                    v1335 += 8;
                    v1334 -= 8;
                  }
                  while (v1334);
                }
                v1337 = (void *)v2654[13].i64[0];
                v2654[13].i64[0] = (uint64_t)v1329;
                v2654[13].i64[1] = (uint64_t)v1331;
                v2654[14].i64[0] = (uint64_t)v1136;
                v2654[14].i64[1] = (uint64_t)&v1329[8 * v1330];
                if (v1337)
                {
                  operator delete(v1337);
                  v1136 = (char *)v2654[14].i64[0];
                }
              }
              else
              {
                v1322 = v1321 >> 3;
                v432 = v1321 >> 3 < -1;
                v1323 = (v1321 >> 3) + 2;
                if (v432)
                  v1324 = v1323;
                else
                  v1324 = v1322 + 1;
                v1325 = &v1318[-8 * (v1324 >> 1)];
                v1326 = v1136 - v1318;
                if (v1136 != v1318)
                {
                  memmove(&v1318[-8 * (v1324 >> 1)], v1318, v1136 - v1318);
                  v1136 = (char *)v2654[13].i64[1];
                }
                v1327 = &v1136[-8 * (v1324 >> 1)];
                v1136 = &v1325[v1326];
                v2654[13].i64[1] = (uint64_t)v1327;
                v2654[14].i64[0] = (uint64_t)&v1325[v1326];
              }
            }
            *(_QWORD *)v1136 = v1319;
            v1136 = (char *)(v2654[14].i64[0] + 8);
            v2654[14].i64[0] = (uint64_t)v1136;
          }
        }
        else
        {
          v1170 = v1162 >> 3;
          if (v1169 >> 2 <= v1168 + (v1162 >> 3))
            v1171 = v1168 + (v1162 >> 3);
          else
            v1171 = v1169 >> 2;
          v2754 = &v2654[14].i8[8];
          if (v1171)
            v1171 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1171);
          else
            v1172 = 0;
          *(_QWORD *)&v2752 = v1171;
          *((_QWORD *)&v2752 + 1) = v1171 + 8 * (v1170 - v1167);
          *(_QWORD *)&v2753 = *((_QWORD *)&v2752 + 1);
          *((_QWORD *)&v2753 + 1) = v1171 + 8 * v1172;
          do
          {
            *(_QWORD *)&v2732 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
            --v1168;
          }
          while (v1168);
          v2670 = v1167 << 8;
          v1233 = (char *)v2753;
          if (v1167)
          {
            v1234 = (_QWORD *)v2654[13].i64[1];
            do
            {
              if (v1233 == *((char **)&v2753 + 1))
              {
                v1235 = (char *)*((_QWORD *)&v2752 + 1);
                v1236 = (void *)v2752;
                if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
                {
                  if (v1233 == (char *)v2752)
                    v1242 = 1;
                  else
                    v1242 = (uint64_t)&v1233[-v2752] >> 2;
                  v1243 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1242);
                  v1245 = v1233 - v1235;
                  v465 = v1233 == v1235;
                  v1233 = &v1243[8 * (v1242 >> 2)];
                  if (!v465)
                  {
                    v1233 = &v1243[8 * (v1242 >> 2) + (v1245 & 0xFFFFFFFFFFFFFFF8)];
                    v1246 = 8 * (v1245 >> 3);
                    v1247 = &v1243[8 * (v1242 >> 2)];
                    do
                    {
                      v1248 = *(_QWORD *)v1235;
                      v1235 += 8;
                      *(_QWORD *)v1247 = v1248;
                      v1247 += 8;
                      v1246 -= 8;
                    }
                    while (v1246);
                  }
                  *(_QWORD *)&v2752 = v1243;
                  *((_QWORD *)&v2752 + 1) = &v1243[8 * (v1242 >> 2)];
                  *(_QWORD *)&v2753 = v1233;
                  *((_QWORD *)&v2753 + 1) = &v1243[8 * v1244];
                  if (v1236)
                    operator delete(v1236);
                }
                else
                {
                  v1237 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                  if (v1237 >= -1)
                    v1238 = v1237 + 1;
                  else
                    v1238 = v1237 + 2;
                  v1239 = *((_QWORD *)&v2752 + 1) - 8 * (v1238 >> 1);
                  v1240 = &v1233[-*((_QWORD *)&v2752 + 1)];
                  if (v1233 != *((char **)&v2752 + 1))
                  {
                    memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v1238 >> 1)), *((const void **)&v2752 + 1), (size_t)&v1233[-*((_QWORD *)&v2752 + 1)]);
                    v1233 = v1235;
                  }
                  v1241 = &v1233[-8 * (v1238 >> 1)];
                  v1233 = &v1240[v1239];
                  *((_QWORD *)&v2752 + 1) = v1241;
                  *(_QWORD *)&v2753 = &v1240[v1239];
                }
              }
              *(_QWORD *)v1233 = *v1234;
              v1233 = (char *)(v2753 + 8);
              *(_QWORD *)&v2753 = v2753 + 8;
              v1234 = (_QWORD *)(v2654[13].i64[1] + 8);
              v2654[13].i64[1] = (uint64_t)v1234;
              --v1167;
            }
            while (v1167);
          }
          v1249 = v2654[14].i64[0];
          v1251 = (char *)*((_QWORD *)&v2752 + 1);
          v1250 = (char *)v2752;
          v1252 = (char *)*((_QWORD *)&v2753 + 1);
          while (v1249 != v2654[13].i64[1])
          {
            if (v1251 == v1250)
            {
              if (v1233 >= v1252)
              {
                if (v1252 == v1250)
                  v1257 = 1;
                else
                  v1257 = (v1252 - v1250) >> 2;
                v1258 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1257);
                v1260 = v1258;
                v1251 = &v1258[(2 * v1257 + 6) & 0xFFFFFFFFFFFFFFF8];
                v1261 = v1233 - v1250;
                v465 = v1233 == v1250;
                v1233 = v1251;
                if (!v465)
                {
                  v1233 = &v1251[v1261 & 0xFFFFFFFFFFFFFFF8];
                  v1262 = 8 * (v1261 >> 3);
                  v1263 = v1251;
                  v1264 = v1250;
                  do
                  {
                    v1265 = *(_QWORD *)v1264;
                    v1264 += 8;
                    *(_QWORD *)v1263 = v1265;
                    v1263 += 8;
                    v1262 -= 8;
                  }
                  while (v1262);
                }
                v1252 = &v1258[8 * v1259];
                if (v1250)
                  operator delete(v1250);
                v1250 = v1260;
              }
              else
              {
                v1253 = (v1252 - v1233) >> 3;
                if (v1253 >= -1)
                  v1254 = v1253 + 1;
                else
                  v1254 = v1253 + 2;
                v1255 = &v1233[8 * (v1254 >> 1)];
                v1251 = &v1255[-(v1233 - v1250)];
                v1256 = v1233 - v1250;
                v465 = v1233 == v1250;
                v1233 = v1255;
                if (!v465)
                  memmove(v1251, v1250, v1256);
              }
            }
            v1266 = *(_QWORD *)(v1249 - 8);
            v1249 -= 8;
            *((_QWORD *)v1251 - 1) = v1266;
            v1251 -= 8;
          }
          *(_QWORD *)&v2752 = v1250;
          *((_QWORD *)&v2752 + 1) = v1251;
          *(_QWORD *)&v2753 = v1233;
          *((_QWORD *)&v2753 + 1) = v1252;
          v1129 = (uint64_t *)v2654;
          v1269 = v2752;
          v1268 = (int64x2_t)v2753;
          *(_QWORD *)&v2752 = v2654[13].i64[0];
          v1267 = (void *)v2752;
          *((_QWORD *)&v2752 + 1) = v1249;
          v2654[13] = (int64x2_t)v1269;
          v2654[14] = v1268;
          v2654[15].i64[0] -= v2670;
          if (v1267)
          {
            operator delete(v1267);
            v1136 = (char *)v2654[14].i64[0];
          }
          else
          {
            v1136 = (char *)v1268.i64[0];
          }
        }
      }
      v1133 = v1129[31];
      v1137 = (char *)v1129[27];
      v1134 = v1129[30] + v1133;
      v1135 = v1134 >> 8;
      v1147 = v2689;
      v1143 = v2713;
    }
    v1338 = &v1137[8 * v1135];
    if (v1136 == v1137)
      v1339 = 0;
    else
      v1339 = *(_QWORD *)v1338 + 16 * v1134;
    v1340 = v1133 - v1147;
    if (v1133 - v1147 >= v1143)
    {
      v1344 = (_QWORD *)v1339;
      v1343 = &v1137[8 * v1135];
      if (!v1143)
        goto LABEL_1690;
    }
    else
    {
      v1341 = &v1142[2 * (v1133 - v1147 - v1143)];
      if (v1340 < v1143 >> 1)
        v1341 = &v1141[2 * v1340];
      if (v1341 == v1142)
      {
        v1344 = (_QWORD *)v1339;
        v1343 = &v1137[8 * v1135];
      }
      else
      {
        v1342 = v1341;
        v1343 = &v1137[8 * v1135];
        v1344 = (_QWORD *)v1339;
        do
        {
          *v1344 = *v1342;
          v1345 = v1342[1];
          v1344[1] = v1345;
          if (v1345)
          {
            v1346 = (unint64_t *)(v1345 + 8);
            do
              v1347 = __ldxr(v1346);
            while (__stxr(v1347 + 1, v1346));
          }
          v1344 += 2;
          if ((_QWORD *)((char *)v1344 - *(_QWORD *)v1343) == (_QWORD *)4096)
          {
            v1348 = (_QWORD *)*((_QWORD *)v1343 + 1);
            v1343 += 8;
            v1344 = v1348;
          }
          v1342 += 2;
          ++v2654[15].i64[1];
        }
        while (v1342 != v1142);
        v1142 = v1341;
      }
      v1143 = v1340;
      if (!v1340)
        goto LABEL_1690;
    }
    v2714 = v1143;
    v1349 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1338, v1339, v1143);
    v1351 = v1349;
    v1352 = v1350;
    if (v1339 != v1350)
    {
      v1353 = v1349;
      v1354 = v1350;
      do
      {
        *(_OWORD *)v1344 = *(_OWORD *)v1354;
        v1344 += 2;
        *(_QWORD *)v1354 = 0;
        *(_QWORD *)(v1354 + 8) = 0;
        if ((_QWORD *)((char *)v1344 - *(_QWORD *)v1343) == (_QWORD *)4096)
        {
          v1355 = (_QWORD *)*((_QWORD *)v1343 + 1);
          v1343 += 8;
          v1344 = v1355;
        }
        v1354 += 16;
        if (v1354 - *v1353 == 4096)
        {
          v1356 = v1353[1];
          ++v1353;
          v1354 = v1356;
        }
        ++v2654[15].i64[1];
      }
      while (v1354 != v1339);
    }
    if (v2714 < v1340)
    {
      v1357 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1338, v1339, v1340);
      v1359 = v1358;
      if (v1357 == v1351)
      {
        v1368 = v1352;
        v1365 = v1338;
        v1366 = v1339;
      }
      else
      {
        v1360 = v1357;
        v1363 = *v1351;
        v1362 = v1351 - 1;
        v1361 = v1363;
        v1364 = v1352;
        v1365 = v1338;
        v1366 = v1339;
        while (1)
        {
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1361, v1364, v1365, v1366);
          v1365 = (char *)*((_QWORD *)&v2752 + 1);
          v1366 = v2753;
          if (v1362 == v1360)
            break;
          v1367 = *v1362--;
          v1361 = v1367;
          v1364 = v1367 + 4096;
        }
        v1368 = *v1360 + 4096;
        v1358 = v1359;
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1358, v1368, v1365, v1366);
      v1339 = v2753;
      v1338 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v1141 != v1142)
    {
      v1369 = *(_QWORD *)v1338;
      while (1)
      {
        v1370 = v1339 - v1369;
        if (((char *)v1142 - (char *)v1141) >> 4 >= v1370 >> 4)
          v1371 = v1370 >> 4;
        else
          v1371 = ((char *)v1142 - (char *)v1141) >> 4;
        if (v1371)
        {
          v1372 = v1142 - 1;
          v1373 = -16 * v1371;
          v1374 = (_QWORD *)(v1339 - 16);
          do
          {
            v1375 = std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v1374, *(v1372 - 1), *v1372);
            v1372 -= 2;
            v1374 = v1375 - 2;
            v1373 += 16;
          }
          while (v1373);
        }
        v1142 -= 2 * v1371;
        if (v1142 == v1141)
          break;
        v1376 = *((_QWORD *)v1338 - 1);
        v1338 -= 8;
        v1369 = v1376;
        v1339 = v1376 + 4096;
      }
    }
    goto LABEL_1690;
  }
  v1149 = v1143 - v1132;
  v2688 = v1147;
  if (v1143 > v1132)
  {
    v2712 = v1143;
    v1150 = 32 * v1139 - 1;
    v1151 = v1136 - v1137;
    if (v1136 == v1137)
    {
      v1150 = 0;
      ++v1149;
    }
    if ((_BYTE)v1149)
      v1152 = (v1149 >> 8) + 1;
    else
      v1152 = v1149 >> 8;
    v1153 = v1150 - v1134;
    if (v1152 >= v1153 >> 8)
      v1154 = v1153 >> 8;
    else
      v1154 = v1152;
    if (v1152 <= v1153 >> 8)
    {
      for (v2654[15].i64[0] = v1132 + (v1154 << 8); v1154; --v1154)
      {
        v1173 = v2654[14].i64[0];
        *(_QWORD *)&v2752 = *(_QWORD *)(v1173 - 8);
        v2654[14].i64[0] = v1173 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[13].i64, &v2752);
      }
    }
    else
    {
      v1155 = v1152 - v1154;
      v1156 = v2654[13].i64[0];
      v1157 = v2654[14].i64[1] - v1156;
      if (v1152 - v1154 <= (v1157 >> 3) - (v1151 >> 3))
      {
        if (v1155)
        {
          if (v1137 == (char *)v1156)
          {
LABEL_1476:
            v1197 = v1155;
            do
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[13].i64, &v2752);
              --v1197;
            }
            while (v1197);
            v1154 += v1155;
            v1132 = v2654[15].u64[0];
          }
          else
          {
            while (1)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[13].i64, &v2752);
              v1195 = v2654[13].i64[1];
              v1196 = v2654[14].i64[0] - v1195 == 8 ? 255 : 256;
              v1132 = v1196 + v2654[15].i64[0];
              v2654[15].i64[0] = v1132;
              if (!--v1155)
                break;
              if (v1195 == v1148->i64[0])
                goto LABEL_1476;
            }
          }
        }
        for (v2654[15].i64[0] = v1132 + (v1154 << 8); v1154; --v1154)
        {
          v1198 = v2654[14].i64[0];
          *(_QWORD *)&v2752 = *(_QWORD *)(v1198 - 8);
          v2654[14].i64[0] = v1198 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[13].i64, &v2752);
        }
      }
      else
      {
        v1158 = v1136 == v1137;
        if (v1157 >> 2 <= v1155 + (v1151 >> 3))
          v1159 = v1155 + (v1151 >> 3);
        else
          v1159 = v1157 >> 2;
        v2754 = &v2654[14].i8[8];
        if (v1159)
          v1159 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1159);
        else
          v1160 = 0;
        v1199 = (v1152 << 8) - v1158;
        *(_QWORD *)&v2752 = v1159;
        *((_QWORD *)&v2752 + 1) = v1159;
        *(_QWORD *)&v2753 = v1159;
        *((_QWORD *)&v2753 + 1) = v1159 + 8 * v1160;
        do
        {
          *(_QWORD *)&v2732 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
          --v1155;
        }
        while (v1155);
        v2669 = v1199;
        v1200 = v2654[14].i64[0];
        for (mm = (char *)v2753; v1154; --v1154)
        {
          if (mm == *((char **)&v2753 + 1))
          {
            v1202 = (char *)*((_QWORD *)&v2752 + 1);
            v1203 = (void *)v2752;
            if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
            {
              if (mm == (char *)v2752)
                v1209 = 1;
              else
                v1209 = (uint64_t)&mm[-v2752] >> 2;
              v1210 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1209);
              v1212 = mm - v1202;
              v465 = mm == v1202;
              mm = &v1210[8 * (v1209 >> 2)];
              if (!v465)
              {
                mm = &v1210[8 * (v1209 >> 2) + (v1212 & 0xFFFFFFFFFFFFFFF8)];
                v1213 = 8 * (v1212 >> 3);
                v1214 = &v1210[8 * (v1209 >> 2)];
                do
                {
                  v1215 = *(_QWORD *)v1202;
                  v1202 += 8;
                  *(_QWORD *)v1214 = v1215;
                  v1214 += 8;
                  v1213 -= 8;
                }
                while (v1213);
              }
              *(_QWORD *)&v2752 = v1210;
              *((_QWORD *)&v2752 + 1) = &v1210[8 * (v1209 >> 2)];
              *(_QWORD *)&v2753 = mm;
              *((_QWORD *)&v2753 + 1) = &v1210[8 * v1211];
              if (v1203)
                operator delete(v1203);
            }
            else
            {
              v1204 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
              if (v1204 >= -1)
                v1205 = v1204 + 1;
              else
                v1205 = v1204 + 2;
              v1206 = *((_QWORD *)&v2752 + 1) - 8 * (v1205 >> 1);
              v1207 = &mm[-*((_QWORD *)&v2752 + 1)];
              if (mm != *((char **)&v2752 + 1))
              {
                memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v1205 >> 1)), *((const void **)&v2752 + 1), (size_t)&mm[-*((_QWORD *)&v2752 + 1)]);
                mm = v1202;
              }
              v1208 = &mm[-8 * (v1205 >> 1)];
              mm = &v1207[v1206];
              *((_QWORD *)&v2752 + 1) = v1208;
              *(_QWORD *)&v2753 = &v1207[v1206];
            }
          }
          *(_QWORD *)mm = *(_QWORD *)(v1200 - 8);
          mm = (char *)(v2753 + 8);
          *(_QWORD *)&v2753 = v2753 + 8;
          v1200 = v2654[14].i64[0] - 8;
          v2654[14].i64[0] = v1200;
        }
        v1216 = (uint64_t *)v2654[13].i64[1];
        if (v1216 == (uint64_t *)v1200)
        {
          v1216 = (uint64_t *)v1200;
          v1232 = (uint64_t *)v2654;
        }
        else
        {
          do
          {
            if (mm == *((char **)&v2753 + 1))
            {
              v1217 = (char *)*((_QWORD *)&v2752 + 1);
              v1218 = (void *)v2752;
              if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
              {
                if (mm == (char *)v2752)
                  v1224 = 1;
                else
                  v1224 = (uint64_t)&mm[-v2752] >> 2;
                v1225 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1224);
                v1227 = mm - v1217;
                v465 = mm == v1217;
                mm = &v1225[8 * (v1224 >> 2)];
                if (!v465)
                {
                  mm = &v1225[8 * (v1224 >> 2) + (v1227 & 0xFFFFFFFFFFFFFFF8)];
                  v1228 = 8 * (v1227 >> 3);
                  v1229 = &v1225[8 * (v1224 >> 2)];
                  do
                  {
                    v1230 = *(_QWORD *)v1217;
                    v1217 += 8;
                    *(_QWORD *)v1229 = v1230;
                    v1229 += 8;
                    v1228 -= 8;
                  }
                  while (v1228);
                }
                *(_QWORD *)&v2752 = v1225;
                *((_QWORD *)&v2752 + 1) = &v1225[8 * (v1224 >> 2)];
                *(_QWORD *)&v2753 = mm;
                *((_QWORD *)&v2753 + 1) = &v1225[8 * v1226];
                if (v1218)
                  operator delete(v1218);
              }
              else
              {
                v1219 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                if (v1219 >= -1)
                  v1220 = v1219 + 1;
                else
                  v1220 = v1219 + 2;
                v1221 = *((_QWORD *)&v2752 + 1) - 8 * (v1220 >> 1);
                v1222 = &mm[-*((_QWORD *)&v2752 + 1)];
                if (mm != *((char **)&v2752 + 1))
                {
                  memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v1220 >> 1)), *((const void **)&v2752 + 1), (size_t)&mm[-*((_QWORD *)&v2752 + 1)]);
                  mm = v1217;
                }
                v1223 = &mm[-8 * (v1220 >> 1)];
                mm = &v1222[v1221];
                *((_QWORD *)&v2752 + 1) = v1223;
                *(_QWORD *)&v2753 = &v1222[v1221];
              }
            }
            v1231 = *v1216++;
            *(_QWORD *)mm = v1231;
            mm = (char *)(v2753 + 8);
            *(_QWORD *)&v2753 = v2753 + 8;
          }
          while (v1216 != (uint64_t *)v2654[14].i64[0]);
          v1232 = (uint64_t *)v2654;
          v1200 = v2654[13].i64[1];
        }
        v1270 = (void *)v1232[26];
        *((_OWORD *)v1232 + 13) = v2752;
        *(_QWORD *)&v2752 = v1270;
        *((_QWORD *)&v2752 + 1) = v1200;
        *(_QWORD *)&v2753 = v1216;
        v1271 = *((_QWORD *)&v2753 + 1);
        v1232[28] = (uint64_t)mm;
        v1232[29] = v1271;
        v1232[30] += v2669;
        v1129 = v1232;
        if (v1270)
          operator delete(v1270);
      }
    }
    v1132 = v1129[30];
    v1137 = (char *)v1129[27];
    v1136 = (char *)v1129[28];
    v1144 = v1132 >> 8;
    v1147 = v2688;
    v1143 = v2712;
  }
  v1272 = &v1137[8 * v1144];
  if (v1136 == v1137)
    v1273 = 0;
  else
    v1273 = (__int128 *)(*(_QWORD *)v1272 + 16 * v1132);
  if (v1143 <= v1147)
  {
    v1277 = v1273;
    v1276 = &v1137[8 * v1144];
    if (!v1143)
      goto LABEL_1690;
    goto LABEL_1593;
  }
  v1274 = &v1141[2 * (v1143 - v1147)];
  if (v1147 < v1143 >> 1)
    v1274 = &v1142[-2 * v1147];
  if (v1274 == v1141)
  {
    v1277 = v1273;
    v1276 = &v1137[8 * v1144];
  }
  else
  {
    v1275 = v1274;
    v1276 = v1272;
    v1277 = v1273;
    do
    {
      if (v1277 == *(__int128 **)v1276)
      {
        v1278 = *((_QWORD *)v1276 - 1);
        v1276 -= 8;
        v1277 = (__int128 *)(v1278 + 4096);
      }
      v1279 = *(v1275 - 2);
      v1275 -= 2;
      *((_QWORD *)v1277-- - 2) = v1279;
      v1280 = v1275[1];
      *((_QWORD *)v1277 + 1) = v1280;
      if (v1280)
      {
        v1281 = (unint64_t *)(v1280 + 8);
        do
          v1282 = __ldxr(v1281);
        while (__stxr(v1282 + 1, v1281));
        v1132 = v2654[15].u64[0];
      }
      --v1132;
      v1283 = v2654[15].i64[1] + 1;
      v2654[15].i64[0] = v1132;
      v2654[15].i64[1] = v1283;
    }
    while (v1275 != v1141);
    v1141 = v1274;
  }
  v1143 = v1147;
  if (v1147)
  {
LABEL_1593:
    v1284 = v1143;
    v1285 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1272, (uint64_t)v1273, v1143);
    v1287 = v1285;
    v1288 = v1286;
    if (v1273 != v1286)
    {
      v1289 = v1285;
      v1290 = v1286;
      do
      {
        if (v1277 == *(__int128 **)v1276)
        {
          v1291 = *((_QWORD *)v1276 - 1);
          v1276 -= 8;
          v1277 = (__int128 *)(v1291 + 4096);
        }
        if (v1290 == *v1289)
        {
          v1292 = (uint64_t)*--v1289;
          v1290 = (__int128 *)(v1292 + 4096);
        }
        v1293 = *--v1290;
        *--v1277 = v1293;
        *(_QWORD *)v1290 = 0;
        *((_QWORD *)v1290 + 1) = 0;
        v2654[15] = vaddq_s64(v2654[15], (int64x2_t)xmmword_18F116EE0);
      }
      while (v1290 != v1273);
    }
    if (v1284 < v2688)
    {
      v1294 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1272, (uint64_t)v1273, v2688);
      v1296 = v1295;
      if (v1287 == v1294)
      {
        v1305 = v1288;
        v1306 = v1296;
        v1302 = v1272;
        v1303 = (uint64_t)v1273;
      }
      else
      {
        v1297 = v1294;
        v1299 = *v1287;
        v1298 = v1287 + 1;
        v1300 = v1299 + 256;
        v1301 = v1288;
        v1302 = v1272;
        v1303 = (uint64_t)v1273;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1301, v1300, v1302, v1303);
          v1302 = (char *)*((_QWORD *)&v2752 + 1);
          v1303 = v2753;
          if (v1298 == v1297)
            break;
          v1304 = *v1298++;
          v1301 = v1304;
          v1300 = v1304 + 256;
        }
        v1305 = *v1297;
        v1306 = v1296;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1305, v1306, v1302, v1303);
      v1273 = (__int128 *)v2753;
      v1272 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v1141 != v1142)
    {
      v1307 = *(char **)v1272;
      while (1)
      {
        v1308 = v1307 - (char *)v1273 + 4096;
        if (((char *)v1142 - (char *)v1141) >> 4 >= v1308 >> 4)
          v1309 = v1308 >> 4;
        else
          v1309 = ((char *)v1142 - (char *)v1141) >> 4;
        if (v1309)
        {
          v1310 = &v1141[2 * v1309];
          do
          {
            v1311 = *v1141;
            v1312 = v1141[1];
            v1141 += 2;
            std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v1273++, v1311, v1312);
          }
          while (v1141 != v1310);
          v1141 = v1310;
        }
        if (v1141 == v1142)
          break;
        v1313 = (char *)*((_QWORD *)v1272 + 1);
        v1272 += 8;
        v1307 = v1313;
        v1273 = (__int128 *)v1313;
      }
    }
  }
LABEL_1690:
  v1377 = (uint64_t)(v2743.n128_u64[1] - v2743.n128_u64[0]) >> 4;
  v1378 = (uint64_t *)v2654;
  v1379 = (unint64_t *)&v2654[16];
  do
    v1380 = __ldaxr(v1379);
  while (__stlxr(v1380 + v1377, v1379));
  v1381 = v2654[19].u64[0];
  v1382 = v2654[19].i64[1];
  v1383 = v1381 + v1382;
  v1384 = (v1381 + v1382) >> 8;
  v1386 = (char *)v2654[17].i64[1];
  v1385 = (char *)v2654[18].i64[0];
  v1387 = &v1386[8 * v1384];
  v1388 = v1385 - v1386;
  if (v1385 == v1386)
  {
    v1389 = 0;
    v1395 = 0;
    v1391 = (uint64_t *)v2741.i64[1];
    v1390 = (uint64_t *)v2741.i64[0];
    v1392 = (v2741.i64[1] - v2741.i64[0]) >> 4;
    v1393 = v1381 >> 8;
    v1394 = &v1386[8 * (v1381 >> 8)];
  }
  else
  {
    v1389 = *(_QWORD *)v1387 + 16 * v1383;
    v1391 = (uint64_t *)v2741.i64[1];
    v1390 = (uint64_t *)v2741.i64[0];
    v1392 = (v2741.i64[1] - v2741.i64[0]) >> 4;
    v1393 = v1381 >> 8;
    v1394 = &v1386[8 * (v1381 >> 8)];
    v1395 = *(_QWORD *)v1394 + 16 * v1381;
  }
  if (v1389 == v1395)
    v1396 = 0;
  else
    v1396 = ((v1389 - *(_QWORD *)v1387) >> 4) + 32 * (v1387 - v1394) - ((v1395 - *(_QWORD *)v1394) >> 4);
  v1397 = v2654 + 17;
  if (v1396 >= v1382 - v1396)
  {
    v1411 = 32 * v1388 - 1;
    v1412 = v1385 - v1386;
    if (v1385 == v1386)
      v1411 = 0;
    v1413 = v1411 - v1383;
    v415 = v1392 >= v1413;
    v1414 = v1392 - v1413;
    if (v1414 != 0 && v415)
    {
      v2691 = v1396;
      v2716 = v1392;
      if (v1385 == v1386)
        v1415 = v1414 + 1;
      else
        v1415 = v1414;
      if ((_BYTE)v1415)
        v1416 = (v1415 >> 8) + 1;
      else
        v1416 = v1415 >> 8;
      if (v1416 >= v1393)
        v1417 = v1393;
      else
        v1417 = v1416;
      if (v1416 <= v1393)
      {
        for (v2654[19].i64[0] = v1381 - (v1417 << 8); v1417; --v1417)
        {
          v1425 = (_QWORD *)v2654[17].i64[1];
          v1428 = *v1425;
          v1426 = (char *)(v1425 + 1);
          v1427 = v1428;
          v2654[17].i64[1] = (uint64_t)v1426;
          if (v1385 == (char *)v2654[18].i64[1])
          {
            v1429 = (uint64_t)&v1426[-v1397->i64[0]];
            if ((unint64_t)v1426 <= v1397->i64[0])
            {
              if (v1385 == (char *)v1397->i64[0])
                v1436 = 1;
              else
                v1436 = (uint64_t)&v1385[-v1397->i64[0]] >> 2;
              v1437 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1436);
              v1439 = &v1437[8 * (v1436 >> 2)];
              v1440 = (uint64_t *)v2654[17].i64[1];
              v1385 = v1439;
              v1441 = v2654[18].i64[0] - (_QWORD)v1440;
              if (v1441)
              {
                v1385 = &v1439[v1441 & 0xFFFFFFFFFFFFFFF8];
                v1442 = 8 * (v1441 >> 3);
                v1443 = &v1437[8 * (v1436 >> 2)];
                do
                {
                  v1444 = *v1440++;
                  *(_QWORD *)v1443 = v1444;
                  v1443 += 8;
                  v1442 -= 8;
                }
                while (v1442);
              }
              v1445 = (void *)v2654[17].i64[0];
              v2654[17].i64[0] = (uint64_t)v1437;
              v2654[17].i64[1] = (uint64_t)v1439;
              v2654[18].i64[0] = (uint64_t)v1385;
              v2654[18].i64[1] = (uint64_t)&v1437[8 * v1438];
              if (v1445)
              {
                operator delete(v1445);
                v1385 = (char *)v2654[18].i64[0];
              }
            }
            else
            {
              v1430 = v1429 >> 3;
              v432 = v1429 >> 3 < -1;
              v1431 = (v1429 >> 3) + 2;
              if (v432)
                v1432 = v1431;
              else
                v1432 = v1430 + 1;
              v1433 = &v1426[-8 * (v1432 >> 1)];
              v1434 = v1385 - v1426;
              if (v1385 != v1426)
              {
                memmove(&v1426[-8 * (v1432 >> 1)], v1426, v1385 - v1426);
                v1385 = (char *)v2654[17].i64[1];
              }
              v1435 = &v1385[-8 * (v1432 >> 1)];
              v1385 = &v1433[v1434];
              v2654[17].i64[1] = (uint64_t)v1435;
              v2654[18].i64[0] = (uint64_t)&v1433[v1434];
            }
          }
          *(_QWORD *)v1385 = v1427;
          v1385 = (char *)(v2654[18].i64[0] + 8);
          v2654[18].i64[0] = (uint64_t)v1385;
        }
      }
      else
      {
        v1418 = v1416 - v1417;
        v1419 = v2654[18].i64[1] - v2654[17].i64[0];
        if (v1416 - v1417 <= (v1419 >> 3) - (v1412 >> 3))
        {
          if (v1418)
          {
            while (v2654[18].i64[1] != v2654[18].i64[0])
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[17].i64, &v2752);
              if (!--v1418)
              {
                v1385 = (char *)v2654[18].i64[0];
                goto LABEL_1914;
              }
            }
            for (nn = 0; nn != v1418; ++nn)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[17].i64, &v2752);
              v1385 = (char *)v2654[18].i64[0];
              if (&v1385[-v2654[17].i64[1]] == (char *)8)
                v1566 = 255;
              else
                v1566 = 256;
              v1567 = v1566 + v2654[19].i64[0];
              v2654[19].i64[0] = v1567;
            }
            v1417 += v1418;
          }
          else
          {
LABEL_1914:
            v1567 = v2654[19].i64[0];
          }
          for (v2654[19].i64[0] = v1567 - (v1417 << 8); v1417; --v1417)
          {
            v1568 = (_QWORD *)v2654[17].i64[1];
            v1571 = *v1568;
            v1569 = (char *)(v1568 + 1);
            v1570 = v1571;
            v2654[17].i64[1] = (uint64_t)v1569;
            if (v1385 == (char *)v2654[18].i64[1])
            {
              v1572 = (uint64_t)&v1569[-v1397->i64[0]];
              if ((unint64_t)v1569 <= v1397->i64[0])
              {
                if (v1385 == (char *)v1397->i64[0])
                  v1579 = 1;
                else
                  v1579 = (uint64_t)&v1385[-v1397->i64[0]] >> 2;
                v1580 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1579);
                v1582 = &v1580[8 * (v1579 >> 2)];
                v1583 = (uint64_t *)v2654[17].i64[1];
                v1385 = v1582;
                v1584 = v2654[18].i64[0] - (_QWORD)v1583;
                if (v1584)
                {
                  v1385 = &v1582[v1584 & 0xFFFFFFFFFFFFFFF8];
                  v1585 = 8 * (v1584 >> 3);
                  v1586 = &v1580[8 * (v1579 >> 2)];
                  do
                  {
                    v1587 = *v1583++;
                    *(_QWORD *)v1586 = v1587;
                    v1586 += 8;
                    v1585 -= 8;
                  }
                  while (v1585);
                }
                v1588 = (void *)v2654[17].i64[0];
                v2654[17].i64[0] = (uint64_t)v1580;
                v2654[17].i64[1] = (uint64_t)v1582;
                v2654[18].i64[0] = (uint64_t)v1385;
                v2654[18].i64[1] = (uint64_t)&v1580[8 * v1581];
                if (v1588)
                {
                  operator delete(v1588);
                  v1385 = (char *)v2654[18].i64[0];
                }
              }
              else
              {
                v1573 = v1572 >> 3;
                v432 = v1572 >> 3 < -1;
                v1574 = (v1572 >> 3) + 2;
                if (v432)
                  v1575 = v1574;
                else
                  v1575 = v1573 + 1;
                v1576 = &v1569[-8 * (v1575 >> 1)];
                v1577 = v1385 - v1569;
                if (v1385 != v1569)
                {
                  memmove(&v1569[-8 * (v1575 >> 1)], v1569, v1385 - v1569);
                  v1385 = (char *)v2654[17].i64[1];
                }
                v1578 = &v1385[-8 * (v1575 >> 1)];
                v1385 = &v1576[v1577];
                v2654[17].i64[1] = (uint64_t)v1578;
                v2654[18].i64[0] = (uint64_t)&v1576[v1577];
              }
            }
            *(_QWORD *)v1385 = v1570;
            v1385 = (char *)(v2654[18].i64[0] + 8);
            v2654[18].i64[0] = (uint64_t)v1385;
          }
        }
        else
        {
          v1420 = v1412 >> 3;
          v1421 = v1419 >> 2;
          if (v1421 <= v1418 + (v1412 >> 3))
            v1422 = (char *)(v1418 + (v1412 >> 3));
          else
            v1422 = (char *)v1421;
          v2754 = &v2654[18].i8[8];
          if (v1422)
            v1422 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>((unint64_t)v1422);
          else
            v1423 = 0;
          *(_QWORD *)&v2752 = v1422;
          *((_QWORD *)&v2752 + 1) = &v1422[8 * (v1420 - v1417)];
          *(_QWORD *)&v2753 = *((_QWORD *)&v2752 + 1);
          *((_QWORD *)&v2753 + 1) = &v1422[8 * v1423];
          do
          {
            *(_QWORD *)&v2732 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
            --v1418;
          }
          while (v1418);
          v2672 = v1417 << 8;
          v1484 = (char *)v2753;
          if (v1417)
          {
            v1485 = (_QWORD *)v2654[17].i64[1];
            do
            {
              if (v1484 == *((char **)&v2753 + 1))
              {
                v1486 = (char *)*((_QWORD *)&v2752 + 1);
                v1487 = (void *)v2752;
                if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
                {
                  if (v1484 == (char *)v2752)
                    v1493 = 1;
                  else
                    v1493 = (uint64_t)&v1484[-v2752] >> 2;
                  v1494 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1493);
                  v1496 = v1484 - v1486;
                  v465 = v1484 == v1486;
                  v1484 = &v1494[8 * (v1493 >> 2)];
                  if (!v465)
                  {
                    v1484 = &v1494[8 * (v1493 >> 2) + (v1496 & 0xFFFFFFFFFFFFFFF8)];
                    v1497 = 8 * (v1496 >> 3);
                    v1498 = &v1494[8 * (v1493 >> 2)];
                    do
                    {
                      v1499 = *(_QWORD *)v1486;
                      v1486 += 8;
                      *(_QWORD *)v1498 = v1499;
                      v1498 += 8;
                      v1497 -= 8;
                    }
                    while (v1497);
                  }
                  *(_QWORD *)&v2752 = v1494;
                  *((_QWORD *)&v2752 + 1) = &v1494[8 * (v1493 >> 2)];
                  *(_QWORD *)&v2753 = v1484;
                  *((_QWORD *)&v2753 + 1) = &v1494[8 * v1495];
                  if (v1487)
                    operator delete(v1487);
                }
                else
                {
                  v1488 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                  if (v1488 >= -1)
                    v1489 = v1488 + 1;
                  else
                    v1489 = v1488 + 2;
                  v1490 = *((_QWORD *)&v2752 + 1) - 8 * (v1489 >> 1);
                  v1491 = &v1484[-*((_QWORD *)&v2752 + 1)];
                  if (v1484 != *((char **)&v2752 + 1))
                  {
                    memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v1489 >> 1)), *((const void **)&v2752 + 1), (size_t)&v1484[-*((_QWORD *)&v2752 + 1)]);
                    v1484 = v1486;
                  }
                  v1492 = &v1484[-8 * (v1489 >> 1)];
                  v1484 = &v1491[v1490];
                  *((_QWORD *)&v2752 + 1) = v1492;
                  *(_QWORD *)&v2753 = &v1491[v1490];
                }
              }
              *(_QWORD *)v1484 = *v1485;
              v1484 = (char *)(v2753 + 8);
              *(_QWORD *)&v2753 = v2753 + 8;
              v1485 = (_QWORD *)(v2654[17].i64[1] + 8);
              v2654[17].i64[1] = (uint64_t)v1485;
              --v1417;
            }
            while (v1417);
          }
          v1500 = v2654[18].i64[0];
          v1502 = (char *)*((_QWORD *)&v2752 + 1);
          v1501 = (char *)v2752;
          v1503 = (char *)*((_QWORD *)&v2753 + 1);
          while (v1500 != v2654[17].i64[1])
          {
            if (v1502 == v1501)
            {
              if (v1484 >= v1503)
              {
                if (v1503 == v1501)
                  v1508 = 1;
                else
                  v1508 = (v1503 - v1501) >> 2;
                v1509 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1508);
                v1511 = v1509;
                v1502 = &v1509[(2 * v1508 + 6) & 0xFFFFFFFFFFFFFFF8];
                v1512 = v1484 - v1501;
                v465 = v1484 == v1501;
                v1484 = v1502;
                if (!v465)
                {
                  v1484 = &v1502[v1512 & 0xFFFFFFFFFFFFFFF8];
                  v1513 = 8 * (v1512 >> 3);
                  v1514 = v1502;
                  v1515 = v1501;
                  do
                  {
                    v1516 = *(_QWORD *)v1515;
                    v1515 += 8;
                    *(_QWORD *)v1514 = v1516;
                    v1514 += 8;
                    v1513 -= 8;
                  }
                  while (v1513);
                }
                v1503 = &v1509[8 * v1510];
                if (v1501)
                  operator delete(v1501);
                v1501 = v1511;
              }
              else
              {
                v1504 = (v1503 - v1484) >> 3;
                if (v1504 >= -1)
                  v1505 = v1504 + 1;
                else
                  v1505 = v1504 + 2;
                v1506 = &v1484[8 * (v1505 >> 1)];
                v1502 = &v1506[-(v1484 - v1501)];
                v1507 = v1484 - v1501;
                v465 = v1484 == v1501;
                v1484 = v1506;
                if (!v465)
                  memmove(v1502, v1501, v1507);
              }
            }
            v1517 = *(_QWORD *)(v1500 - 8);
            v1500 -= 8;
            *((_QWORD *)v1502 - 1) = v1517;
            v1502 -= 8;
          }
          *(_QWORD *)&v2752 = v1501;
          *((_QWORD *)&v2752 + 1) = v1502;
          *(_QWORD *)&v2753 = v1484;
          *((_QWORD *)&v2753 + 1) = v1503;
          v1378 = (uint64_t *)v2654;
          v1520 = v2752;
          v1519 = (int64x2_t)v2753;
          *(_QWORD *)&v2752 = v2654[17].i64[0];
          v1518 = (void *)v2752;
          *((_QWORD *)&v2752 + 1) = v1500;
          v2654[17] = (int64x2_t)v1520;
          v2654[18] = v1519;
          v2654[19].i64[0] -= v2672;
          if (v1518)
          {
            operator delete(v1518);
            v1385 = (char *)v2654[18].i64[0];
          }
          else
          {
            v1385 = (char *)v1519.i64[0];
          }
        }
      }
      v1382 = v1378[39];
      v1386 = (char *)v1378[35];
      v1383 = v1378[38] + v1382;
      v1384 = v1383 >> 8;
      v1396 = v2691;
      v1392 = v2716;
    }
    v1589 = &v1386[8 * v1384];
    if (v1385 == v1386)
      v1590 = 0;
    else
      v1590 = *(_QWORD *)v1589 + 16 * v1383;
    v1591 = v1382 - v1396;
    if (v1382 - v1396 >= v1392)
    {
      v1595 = (_QWORD *)v1590;
      v1594 = &v1386[8 * v1384];
      if (!v1392)
        goto LABEL_1978;
    }
    else
    {
      v1592 = &v1391[2 * (v1382 - v1396 - v1392)];
      if (v1591 < v1392 >> 1)
        v1592 = &v1390[2 * v1591];
      if (v1592 == v1391)
      {
        v1595 = (_QWORD *)v1590;
        v1594 = &v1386[8 * v1384];
      }
      else
      {
        v1593 = v1592;
        v1594 = &v1386[8 * v1384];
        v1595 = (_QWORD *)v1590;
        do
        {
          *v1595 = *v1593;
          v1596 = v1593[1];
          v1595[1] = v1596;
          if (v1596)
          {
            v1597 = (unint64_t *)(v1596 + 8);
            do
              v1598 = __ldxr(v1597);
            while (__stxr(v1598 + 1, v1597));
          }
          v1595 += 2;
          if ((_QWORD *)((char *)v1595 - *(_QWORD *)v1594) == (_QWORD *)4096)
          {
            v1599 = (_QWORD *)*((_QWORD *)v1594 + 1);
            v1594 += 8;
            v1595 = v1599;
          }
          v1593 += 2;
          ++v2654[19].i64[1];
        }
        while (v1593 != v1391);
        v1391 = v1592;
      }
      v1392 = v1591;
      if (!v1591)
        goto LABEL_1978;
    }
    v2717 = v1392;
    v1600 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1589, v1590, v1392);
    v1602 = v1600;
    v1603 = v1601;
    if (v1590 != v1601)
    {
      v1604 = v1600;
      v1605 = v1601;
      do
      {
        *(_OWORD *)v1595 = *(_OWORD *)v1605;
        v1595 += 2;
        *(_QWORD *)v1605 = 0;
        *(_QWORD *)(v1605 + 8) = 0;
        if ((_QWORD *)((char *)v1595 - *(_QWORD *)v1594) == (_QWORD *)4096)
        {
          v1606 = (_QWORD *)*((_QWORD *)v1594 + 1);
          v1594 += 8;
          v1595 = v1606;
        }
        v1605 += 16;
        if (v1605 - *v1604 == 4096)
        {
          v1607 = v1604[1];
          ++v1604;
          v1605 = v1607;
        }
        ++v2654[19].i64[1];
      }
      while (v1605 != v1590);
    }
    if (v2717 < v1591)
    {
      v1608 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1589, v1590, v1591);
      v1610 = v1609;
      if (v1608 == v1602)
      {
        v1619 = v1603;
        v1616 = v1589;
        v1617 = v1590;
      }
      else
      {
        v1611 = v1608;
        v1614 = *v1602;
        v1613 = v1602 - 1;
        v1612 = v1614;
        v1615 = v1603;
        v1616 = v1589;
        v1617 = v1590;
        while (1)
        {
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1612, v1615, v1616, v1617);
          v1616 = (char *)*((_QWORD *)&v2752 + 1);
          v1617 = v2753;
          if (v1613 == v1611)
            break;
          v1618 = *v1613--;
          v1612 = v1618;
          v1615 = v1618 + 4096;
        }
        v1619 = *v1611 + 4096;
        v1609 = v1610;
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1609, v1619, v1616, v1617);
      v1590 = v2753;
      v1589 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v1390 != v1391)
    {
      v1620 = *(_QWORD *)v1589;
      while (1)
      {
        v1621 = v1590 - v1620;
        if (((char *)v1391 - (char *)v1390) >> 4 >= v1621 >> 4)
          v1622 = v1621 >> 4;
        else
          v1622 = ((char *)v1391 - (char *)v1390) >> 4;
        if (v1622)
        {
          v1623 = v1391 - 1;
          v1624 = -16 * v1622;
          v1625 = (_QWORD *)(v1590 - 16);
          do
          {
            v1626 = std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v1625, *(v1623 - 1), *v1623);
            v1623 -= 2;
            v1625 = v1626 - 2;
            v1624 += 16;
          }
          while (v1624);
        }
        v1391 -= 2 * v1622;
        if (v1391 == v1390)
          break;
        v1627 = *((_QWORD *)v1589 - 1);
        v1589 -= 8;
        v1620 = v1627;
        v1590 = v1627 + 4096;
      }
    }
    goto LABEL_1978;
  }
  v1398 = v1392 - v1381;
  v2690 = v1396;
  if (v1392 > v1381)
  {
    v2715 = v1392;
    v1399 = 32 * v1388 - 1;
    v1400 = v1385 - v1386;
    if (v1385 == v1386)
    {
      v1399 = 0;
      ++v1398;
    }
    if ((_BYTE)v1398)
      v1401 = (v1398 >> 8) + 1;
    else
      v1401 = v1398 >> 8;
    v1402 = v1399 - v1383;
    if (v1401 >= v1402 >> 8)
      v1403 = v1402 >> 8;
    else
      v1403 = v1401;
    if (v1401 <= v1402 >> 8)
    {
      for (v2654[19].i64[0] = v1381 + (v1403 << 8); v1403; --v1403)
      {
        v1424 = v2654[18].i64[0];
        *(_QWORD *)&v2752 = *(_QWORD *)(v1424 - 8);
        v2654[18].i64[0] = v1424 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[17].i64, &v2752);
      }
    }
    else
    {
      v1404 = v1401 - v1403;
      v1405 = v2654[17].i64[0];
      v1406 = v2654[18].i64[1] - v1405;
      if (v1401 - v1403 <= (v1406 >> 3) - (v1400 >> 3))
      {
        if (v1404)
        {
          if (v1386 == (char *)v1405)
          {
LABEL_1764:
            v1448 = v1404;
            do
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[17].i64, &v2752);
              --v1448;
            }
            while (v1448);
            v1403 += v1404;
            v1381 = v2654[19].u64[0];
          }
          else
          {
            while (1)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[17].i64, &v2752);
              v1446 = v2654[17].i64[1];
              v1447 = v2654[18].i64[0] - v1446 == 8 ? 255 : 256;
              v1381 = v1447 + v2654[19].i64[0];
              v2654[19].i64[0] = v1381;
              if (!--v1404)
                break;
              if (v1446 == v1397->i64[0])
                goto LABEL_1764;
            }
          }
        }
        for (v2654[19].i64[0] = v1381 + (v1403 << 8); v1403; --v1403)
        {
          v1449 = v2654[18].i64[0];
          *(_QWORD *)&v2752 = *(_QWORD *)(v1449 - 8);
          v2654[18].i64[0] = v1449 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[17].i64, &v2752);
        }
      }
      else
      {
        v1407 = v1400 >> 3;
        v1408 = v1385 == v1386;
        if (v1406 >> 2 <= v1404 + v1407)
          v1409 = v1404 + v1407;
        else
          v1409 = v1406 >> 2;
        v2754 = &v2654[18].i8[8];
        if (v1409)
          v1409 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1409);
        else
          v1410 = 0;
        v1450 = (v1401 << 8) - v1408;
        *(_QWORD *)&v2752 = v1409;
        *((_QWORD *)&v2752 + 1) = v1409;
        *(_QWORD *)&v2753 = v1409;
        *((_QWORD *)&v2753 + 1) = v1409 + 8 * v1410;
        do
        {
          *(_QWORD *)&v2732 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
          --v1404;
        }
        while (v1404);
        v2671 = v1450;
        v1451 = v2654[18].i64[0];
        for (i1 = (char *)v2753; v1403; --v1403)
        {
          if (i1 == *((char **)&v2753 + 1))
          {
            v1453 = (char *)*((_QWORD *)&v2752 + 1);
            v1454 = (void *)v2752;
            if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
            {
              if (i1 == (char *)v2752)
                v1460 = 1;
              else
                v1460 = (uint64_t)&i1[-v2752] >> 2;
              v1461 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1460);
              v1463 = i1 - v1453;
              v465 = i1 == v1453;
              i1 = &v1461[8 * (v1460 >> 2)];
              if (!v465)
              {
                i1 = &v1461[8 * (v1460 >> 2) + (v1463 & 0xFFFFFFFFFFFFFFF8)];
                v1464 = 8 * (v1463 >> 3);
                v1465 = &v1461[8 * (v1460 >> 2)];
                do
                {
                  v1466 = *(_QWORD *)v1453;
                  v1453 += 8;
                  *(_QWORD *)v1465 = v1466;
                  v1465 += 8;
                  v1464 -= 8;
                }
                while (v1464);
              }
              *(_QWORD *)&v2752 = v1461;
              *((_QWORD *)&v2752 + 1) = &v1461[8 * (v1460 >> 2)];
              *(_QWORD *)&v2753 = i1;
              *((_QWORD *)&v2753 + 1) = &v1461[8 * v1462];
              if (v1454)
                operator delete(v1454);
            }
            else
            {
              v1455 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
              if (v1455 >= -1)
                v1456 = v1455 + 1;
              else
                v1456 = v1455 + 2;
              v1457 = *((_QWORD *)&v2752 + 1) - 8 * (v1456 >> 1);
              v1458 = &i1[-*((_QWORD *)&v2752 + 1)];
              if (i1 != *((char **)&v2752 + 1))
              {
                memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v1456 >> 1)), *((const void **)&v2752 + 1), (size_t)&i1[-*((_QWORD *)&v2752 + 1)]);
                i1 = v1453;
              }
              v1459 = &i1[-8 * (v1456 >> 1)];
              i1 = &v1458[v1457];
              *((_QWORD *)&v2752 + 1) = v1459;
              *(_QWORD *)&v2753 = &v1458[v1457];
            }
          }
          *(_QWORD *)i1 = *(_QWORD *)(v1451 - 8);
          i1 = (char *)(v2753 + 8);
          *(_QWORD *)&v2753 = v2753 + 8;
          v1451 = v2654[18].i64[0] - 8;
          v2654[18].i64[0] = v1451;
        }
        v1467 = (uint64_t *)v2654[17].i64[1];
        if (v1467 == (uint64_t *)v1451)
        {
          v1467 = (uint64_t *)v1451;
          v1483 = (uint64_t *)v2654;
        }
        else
        {
          do
          {
            if (i1 == *((char **)&v2753 + 1))
            {
              v1468 = (char *)*((_QWORD *)&v2752 + 1);
              v1469 = (void *)v2752;
              if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
              {
                if (i1 == (char *)v2752)
                  v1475 = 1;
                else
                  v1475 = (uint64_t)&i1[-v2752] >> 2;
                v1476 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1475);
                v1478 = i1 - v1468;
                v465 = i1 == v1468;
                i1 = &v1476[8 * (v1475 >> 2)];
                if (!v465)
                {
                  i1 = &v1476[8 * (v1475 >> 2) + (v1478 & 0xFFFFFFFFFFFFFFF8)];
                  v1479 = 8 * (v1478 >> 3);
                  v1480 = &v1476[8 * (v1475 >> 2)];
                  do
                  {
                    v1481 = *(_QWORD *)v1468;
                    v1468 += 8;
                    *(_QWORD *)v1480 = v1481;
                    v1480 += 8;
                    v1479 -= 8;
                  }
                  while (v1479);
                }
                *(_QWORD *)&v2752 = v1476;
                *((_QWORD *)&v2752 + 1) = &v1476[8 * (v1475 >> 2)];
                *(_QWORD *)&v2753 = i1;
                *((_QWORD *)&v2753 + 1) = &v1476[8 * v1477];
                if (v1469)
                  operator delete(v1469);
              }
              else
              {
                v1470 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                if (v1470 >= -1)
                  v1471 = v1470 + 1;
                else
                  v1471 = v1470 + 2;
                v1472 = *((_QWORD *)&v2752 + 1) - 8 * (v1471 >> 1);
                v1473 = &i1[-*((_QWORD *)&v2752 + 1)];
                if (i1 != *((char **)&v2752 + 1))
                {
                  memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v1471 >> 1)), *((const void **)&v2752 + 1), (size_t)&i1[-*((_QWORD *)&v2752 + 1)]);
                  i1 = v1468;
                }
                v1474 = &i1[-8 * (v1471 >> 1)];
                i1 = &v1473[v1472];
                *((_QWORD *)&v2752 + 1) = v1474;
                *(_QWORD *)&v2753 = &v1473[v1472];
              }
            }
            v1482 = *v1467++;
            *(_QWORD *)i1 = v1482;
            i1 = (char *)(v2753 + 8);
            *(_QWORD *)&v2753 = v2753 + 8;
          }
          while (v1467 != (uint64_t *)v2654[18].i64[0]);
          v1483 = (uint64_t *)v2654;
          v1451 = v2654[17].i64[1];
        }
        v1521 = (void *)v1483[34];
        *((_OWORD *)v1483 + 17) = v2752;
        *(_QWORD *)&v2752 = v1521;
        *((_QWORD *)&v2752 + 1) = v1451;
        *(_QWORD *)&v2753 = v1467;
        v1522 = *((_QWORD *)&v2753 + 1);
        v1483[36] = (uint64_t)i1;
        v1483[37] = v1522;
        v1483[38] += v2671;
        v1378 = v1483;
        if (v1521)
          operator delete(v1521);
      }
    }
    v1381 = v1378[38];
    v1386 = (char *)v1378[35];
    v1385 = (char *)v1378[36];
    v1393 = v1381 >> 8;
    v1396 = v2690;
    v1392 = v2715;
  }
  v1523 = &v1386[8 * v1393];
  if (v1385 == v1386)
    v1524 = 0;
  else
    v1524 = (__int128 *)(*(_QWORD *)v1523 + 16 * v1381);
  if (v1392 <= v1396)
  {
    v1528 = v1524;
    v1527 = &v1386[8 * v1393];
    if (!v1392)
      goto LABEL_1978;
    goto LABEL_1881;
  }
  v1525 = &v1390[2 * (v1392 - v1396)];
  if (v1396 < v1392 >> 1)
    v1525 = &v1391[-2 * v1396];
  if (v1525 == v1390)
  {
    v1528 = v1524;
    v1527 = &v1386[8 * v1393];
  }
  else
  {
    v1526 = v1525;
    v1527 = v1523;
    v1528 = v1524;
    do
    {
      if (v1528 == *(__int128 **)v1527)
      {
        v1529 = *((_QWORD *)v1527 - 1);
        v1527 -= 8;
        v1528 = (__int128 *)(v1529 + 4096);
      }
      v1530 = *(v1526 - 2);
      v1526 -= 2;
      *((_QWORD *)v1528-- - 2) = v1530;
      v1531 = v1526[1];
      *((_QWORD *)v1528 + 1) = v1531;
      if (v1531)
      {
        v1532 = (unint64_t *)(v1531 + 8);
        do
          v1533 = __ldxr(v1532);
        while (__stxr(v1533 + 1, v1532));
        v1381 = v2654[19].u64[0];
      }
      --v1381;
      v1534 = v2654[19].i64[1] + 1;
      v2654[19].i64[0] = v1381;
      v2654[19].i64[1] = v1534;
    }
    while (v1526 != v1390);
    v1390 = v1525;
  }
  v1392 = v1396;
  if (v1396)
  {
LABEL_1881:
    v1535 = v1392;
    v1536 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1523, (uint64_t)v1524, v1392);
    v1538 = v1536;
    v1539 = v1537;
    if (v1524 != v1537)
    {
      v1540 = v1536;
      v1541 = v1537;
      do
      {
        if (v1528 == *(__int128 **)v1527)
        {
          v1542 = *((_QWORD *)v1527 - 1);
          v1527 -= 8;
          v1528 = (__int128 *)(v1542 + 4096);
        }
        if (v1541 == *v1540)
        {
          v1543 = (uint64_t)*--v1540;
          v1541 = (__int128 *)(v1543 + 4096);
        }
        v1544 = *--v1541;
        *--v1528 = v1544;
        *(_QWORD *)v1541 = 0;
        *((_QWORD *)v1541 + 1) = 0;
        v2654[19] = vaddq_s64(v2654[19], (int64x2_t)xmmword_18F116EE0);
      }
      while (v1541 != v1524);
    }
    if (v1535 < v2690)
    {
      v1545 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1523, (uint64_t)v1524, v2690);
      v1547 = v1546;
      if (v1538 == v1545)
      {
        v1556 = v1539;
        v1557 = v1547;
        v1553 = v1523;
        v1554 = (uint64_t)v1524;
      }
      else
      {
        v1548 = v1545;
        v1550 = *v1538;
        v1549 = v1538 + 1;
        v1551 = v1550 + 256;
        v1552 = v1539;
        v1553 = v1523;
        v1554 = (uint64_t)v1524;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1552, v1551, v1553, v1554);
          v1553 = (char *)*((_QWORD *)&v2752 + 1);
          v1554 = v2753;
          if (v1549 == v1548)
            break;
          v1555 = *v1549++;
          v1552 = v1555;
          v1551 = v1555 + 256;
        }
        v1556 = *v1548;
        v1557 = v1547;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1556, v1557, v1553, v1554);
      v1524 = (__int128 *)v2753;
      v1523 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v1390 != v1391)
    {
      v1558 = *(char **)v1523;
      while (1)
      {
        v1559 = v1558 - (char *)v1524 + 4096;
        if (((char *)v1391 - (char *)v1390) >> 4 >= v1559 >> 4)
          v1560 = v1559 >> 4;
        else
          v1560 = ((char *)v1391 - (char *)v1390) >> 4;
        if (v1560)
        {
          v1561 = &v1390[2 * v1560];
          do
          {
            v1562 = *v1390;
            v1563 = v1390[1];
            v1390 += 2;
            std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v1524++, v1562, v1563);
          }
          while (v1390 != v1561);
          v1390 = v1561;
        }
        if (v1390 == v1391)
          break;
        v1564 = (char *)*((_QWORD *)v1523 + 1);
        v1523 += 8;
        v1558 = v1564;
        v1524 = (__int128 *)v1564;
      }
    }
  }
LABEL_1978:
  v1628 = (v2741.i64[1] - v2741.i64[0]) >> 4;
  v1629 = (uint64_t *)v2654;
  v1630 = (unint64_t *)&v2654[20];
  do
    v1631 = __ldaxr(v1630);
  while (__stlxr(v1631 + v1628, v1630));
  v1632 = v2654[23].u64[0];
  v1633 = v2654[23].i64[1];
  v1634 = v1632 + v1633;
  v1635 = (v1632 + v1633) >> 8;
  v1637 = (char *)v2654[21].i64[1];
  v1636 = (char *)v2654[22].i64[0];
  v1638 = &v1637[8 * v1635];
  v1639 = v1632 >> 8;
  v1640 = v1636 - v1637;
  if (v1636 == v1637)
  {
    v1641 = 0;
    v1646 = 0;
    v1643 = (uint64_t *)*((_QWORD *)&v2739 + 1);
    v1642 = (uint64_t *)v2739;
    v1644 = (uint64_t)(*((_QWORD *)&v2739 + 1) - v2739) >> 4;
    v1645 = &v1637[8 * v1639];
  }
  else
  {
    v1641 = *(_QWORD *)v1638 + 16 * v1634;
    v1643 = (uint64_t *)*((_QWORD *)&v2739 + 1);
    v1642 = (uint64_t *)v2739;
    v1644 = (uint64_t)(*((_QWORD *)&v2739 + 1) - v2739) >> 4;
    v1645 = &v1637[8 * v1639];
    v1646 = *(_QWORD *)v1645 + 16 * v1632;
  }
  if (v1641 == v1646)
    v1647 = 0;
  else
    v1647 = ((v1641 - *(_QWORD *)v1638) >> 4) + 32 * (v1638 - v1645) - ((v1646 - *(_QWORD *)v1645) >> 4);
  v1648 = v2654 + 21;
  if (v1647 >= v1633 - v1647)
  {
    v1662 = 32 * v1640 - 1;
    v1663 = v1636 - v1637;
    if (v1636 == v1637)
      v1662 = 0;
    v1664 = v1662 - v1634;
    v415 = v1644 >= v1664;
    v1665 = v1644 - v1664;
    if (v1665 != 0 && v415)
    {
      v2693 = v1647;
      v2719 = v1644;
      if (v1636 == v1637)
        v1666 = v1665 + 1;
      else
        v1666 = v1665;
      if ((_BYTE)v1666)
        v1667 = (v1666 >> 8) + 1;
      else
        v1667 = v1666 >> 8;
      if (v1667 >= v1639)
        v1668 = v1632 >> 8;
      else
        v1668 = v1667;
      if (v1667 <= v1639)
      {
        for (v2654[23].i64[0] = v1632 - (v1668 << 8); v1668; --v1668)
        {
          v1676 = (_QWORD *)v2654[21].i64[1];
          v1679 = *v1676;
          v1677 = (char *)(v1676 + 1);
          v1678 = v1679;
          v2654[21].i64[1] = (uint64_t)v1677;
          if (v1636 == (char *)v2654[22].i64[1])
          {
            v1680 = (uint64_t)&v1677[-v1648->i64[0]];
            if ((unint64_t)v1677 <= v1648->i64[0])
            {
              if (v1636 == (char *)v1648->i64[0])
                v1687 = 1;
              else
                v1687 = (uint64_t)&v1636[-v1648->i64[0]] >> 2;
              v1688 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1687);
              v1690 = &v1688[8 * (v1687 >> 2)];
              v1691 = (uint64_t *)v2654[21].i64[1];
              v1636 = v1690;
              v1692 = v2654[22].i64[0] - (_QWORD)v1691;
              if (v1692)
              {
                v1636 = &v1690[v1692 & 0xFFFFFFFFFFFFFFF8];
                v1693 = 8 * (v1692 >> 3);
                v1694 = &v1688[8 * (v1687 >> 2)];
                do
                {
                  v1695 = *v1691++;
                  *(_QWORD *)v1694 = v1695;
                  v1694 += 8;
                  v1693 -= 8;
                }
                while (v1693);
              }
              v1696 = (void *)v2654[21].i64[0];
              v2654[21].i64[0] = (uint64_t)v1688;
              v2654[21].i64[1] = (uint64_t)v1690;
              v2654[22].i64[0] = (uint64_t)v1636;
              v2654[22].i64[1] = (uint64_t)&v1688[8 * v1689];
              if (v1696)
              {
                operator delete(v1696);
                v1636 = (char *)v2654[22].i64[0];
              }
            }
            else
            {
              v1681 = v1680 >> 3;
              v432 = v1680 >> 3 < -1;
              v1682 = (v1680 >> 3) + 2;
              if (v432)
                v1683 = v1682;
              else
                v1683 = v1681 + 1;
              v1684 = &v1677[-8 * (v1683 >> 1)];
              v1685 = v1636 - v1677;
              if (v1636 != v1677)
              {
                memmove(&v1677[-8 * (v1683 >> 1)], v1677, v1636 - v1677);
                v1636 = (char *)v2654[21].i64[1];
              }
              v1686 = &v1636[-8 * (v1683 >> 1)];
              v1636 = &v1684[v1685];
              v2654[21].i64[1] = (uint64_t)v1686;
              v2654[22].i64[0] = (uint64_t)&v1684[v1685];
            }
          }
          *(_QWORD *)v1636 = v1678;
          v1636 = (char *)(v2654[22].i64[0] + 8);
          v2654[22].i64[0] = (uint64_t)v1636;
        }
      }
      else
      {
        v1669 = v1667 - v1668;
        v1670 = v2654[22].i64[1] - v2654[21].i64[0];
        if (v1667 - v1668 <= (v1670 >> 3) - (v1663 >> 3))
        {
          if (v1669)
          {
            while (v2654[22].i64[1] != v2654[22].i64[0])
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[21].i64, &v2752);
              if (!--v1669)
              {
                v1636 = (char *)v2654[22].i64[0];
                goto LABEL_2202;
              }
            }
            for (i2 = 0; i2 != v1669; ++i2)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[21].i64, &v2752);
              v1636 = (char *)v2654[22].i64[0];
              if (&v1636[-v2654[21].i64[1]] == (char *)8)
                v1817 = 255;
              else
                v1817 = 256;
              v1818 = v1817 + v2654[23].i64[0];
              v2654[23].i64[0] = v1818;
            }
            v1668 += v1669;
          }
          else
          {
LABEL_2202:
            v1818 = v2654[23].i64[0];
          }
          for (v2654[23].i64[0] = v1818 - (v1668 << 8); v1668; --v1668)
          {
            v1819 = (_QWORD *)v2654[21].i64[1];
            v1822 = *v1819;
            v1820 = (char *)(v1819 + 1);
            v1821 = v1822;
            v2654[21].i64[1] = (uint64_t)v1820;
            if (v1636 == (char *)v2654[22].i64[1])
            {
              v1823 = (uint64_t)&v1820[-v1648->i64[0]];
              if ((unint64_t)v1820 <= v1648->i64[0])
              {
                if (v1636 == (char *)v1648->i64[0])
                  v1830 = 1;
                else
                  v1830 = (uint64_t)&v1636[-v1648->i64[0]] >> 2;
                v1831 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1830);
                v1833 = &v1831[8 * (v1830 >> 2)];
                v1834 = (uint64_t *)v2654[21].i64[1];
                v1636 = v1833;
                v1835 = v2654[22].i64[0] - (_QWORD)v1834;
                if (v1835)
                {
                  v1636 = &v1833[v1835 & 0xFFFFFFFFFFFFFFF8];
                  v1836 = 8 * (v1835 >> 3);
                  v1837 = &v1831[8 * (v1830 >> 2)];
                  do
                  {
                    v1838 = *v1834++;
                    *(_QWORD *)v1837 = v1838;
                    v1837 += 8;
                    v1836 -= 8;
                  }
                  while (v1836);
                }
                v1839 = (void *)v2654[21].i64[0];
                v2654[21].i64[0] = (uint64_t)v1831;
                v2654[21].i64[1] = (uint64_t)v1833;
                v2654[22].i64[0] = (uint64_t)v1636;
                v2654[22].i64[1] = (uint64_t)&v1831[8 * v1832];
                if (v1839)
                {
                  operator delete(v1839);
                  v1636 = (char *)v2654[22].i64[0];
                }
              }
              else
              {
                v1824 = v1823 >> 3;
                v432 = v1823 >> 3 < -1;
                v1825 = (v1823 >> 3) + 2;
                if (v432)
                  v1826 = v1825;
                else
                  v1826 = v1824 + 1;
                v1827 = &v1820[-8 * (v1826 >> 1)];
                v1828 = v1636 - v1820;
                if (v1636 != v1820)
                {
                  memmove(&v1820[-8 * (v1826 >> 1)], v1820, v1636 - v1820);
                  v1636 = (char *)v2654[21].i64[1];
                }
                v1829 = &v1636[-8 * (v1826 >> 1)];
                v1636 = &v1827[v1828];
                v2654[21].i64[1] = (uint64_t)v1829;
                v2654[22].i64[0] = (uint64_t)&v1827[v1828];
              }
            }
            *(_QWORD *)v1636 = v1821;
            v1636 = (char *)(v2654[22].i64[0] + 8);
            v2654[22].i64[0] = (uint64_t)v1636;
          }
        }
        else
        {
          v1671 = v1663 >> 3;
          v1672 = v1670 >> 2;
          if (v1672 <= v1669 + (v1663 >> 3))
            v1673 = (char *)(v1669 + (v1663 >> 3));
          else
            v1673 = (char *)v1672;
          v2754 = &v2654[22].i8[8];
          if (v1673)
            v1673 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>((unint64_t)v1673);
          else
            v1674 = 0;
          *(_QWORD *)&v2752 = v1673;
          *((_QWORD *)&v2752 + 1) = &v1673[8 * (v1671 - v1668)];
          *(_QWORD *)&v2753 = *((_QWORD *)&v2752 + 1);
          *((_QWORD *)&v2753 + 1) = &v1673[8 * v1674];
          do
          {
            *(_QWORD *)&v2732 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
            --v1669;
          }
          while (v1669);
          v2674 = v1668 << 8;
          v1735 = (char *)v2753;
          if (v1668)
          {
            v1736 = (_QWORD *)v2654[21].i64[1];
            do
            {
              if (v1735 == *((char **)&v2753 + 1))
              {
                v1737 = (char *)*((_QWORD *)&v2752 + 1);
                v1738 = (void *)v2752;
                if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
                {
                  if (v1735 == (char *)v2752)
                    v1744 = 1;
                  else
                    v1744 = (uint64_t)&v1735[-v2752] >> 2;
                  v1745 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1744);
                  v1747 = v1735 - v1737;
                  v465 = v1735 == v1737;
                  v1735 = &v1745[8 * (v1744 >> 2)];
                  if (!v465)
                  {
                    v1735 = &v1745[8 * (v1744 >> 2) + (v1747 & 0xFFFFFFFFFFFFFFF8)];
                    v1748 = 8 * (v1747 >> 3);
                    v1749 = &v1745[8 * (v1744 >> 2)];
                    do
                    {
                      v1750 = *(_QWORD *)v1737;
                      v1737 += 8;
                      *(_QWORD *)v1749 = v1750;
                      v1749 += 8;
                      v1748 -= 8;
                    }
                    while (v1748);
                  }
                  *(_QWORD *)&v2752 = v1745;
                  *((_QWORD *)&v2752 + 1) = &v1745[8 * (v1744 >> 2)];
                  *(_QWORD *)&v2753 = v1735;
                  *((_QWORD *)&v2753 + 1) = &v1745[8 * v1746];
                  if (v1738)
                    operator delete(v1738);
                }
                else
                {
                  v1739 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                  if (v1739 >= -1)
                    v1740 = v1739 + 1;
                  else
                    v1740 = v1739 + 2;
                  v1741 = *((_QWORD *)&v2752 + 1) - 8 * (v1740 >> 1);
                  v1742 = &v1735[-*((_QWORD *)&v2752 + 1)];
                  if (v1735 != *((char **)&v2752 + 1))
                  {
                    memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v1740 >> 1)), *((const void **)&v2752 + 1), (size_t)&v1735[-*((_QWORD *)&v2752 + 1)]);
                    v1735 = v1737;
                  }
                  v1743 = &v1735[-8 * (v1740 >> 1)];
                  v1735 = &v1742[v1741];
                  *((_QWORD *)&v2752 + 1) = v1743;
                  *(_QWORD *)&v2753 = &v1742[v1741];
                }
              }
              *(_QWORD *)v1735 = *v1736;
              v1735 = (char *)(v2753 + 8);
              *(_QWORD *)&v2753 = v2753 + 8;
              v1736 = (_QWORD *)(v2654[21].i64[1] + 8);
              v2654[21].i64[1] = (uint64_t)v1736;
              --v1668;
            }
            while (v1668);
          }
          v1751 = v2654[22].i64[0];
          v1753 = (char *)*((_QWORD *)&v2752 + 1);
          v1752 = (char *)v2752;
          v1754 = (char *)*((_QWORD *)&v2753 + 1);
          while (v1751 != v2654[21].i64[1])
          {
            if (v1753 == v1752)
            {
              if (v1735 >= v1754)
              {
                if (v1754 == v1752)
                  v1759 = 1;
                else
                  v1759 = (v1754 - v1752) >> 2;
                v1760 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1759);
                v1762 = v1760;
                v1753 = &v1760[(2 * v1759 + 6) & 0xFFFFFFFFFFFFFFF8];
                v1763 = v1735 - v1752;
                v465 = v1735 == v1752;
                v1735 = v1753;
                if (!v465)
                {
                  v1735 = &v1753[v1763 & 0xFFFFFFFFFFFFFFF8];
                  v1764 = 8 * (v1763 >> 3);
                  v1765 = v1753;
                  v1766 = v1752;
                  do
                  {
                    v1767 = *(_QWORD *)v1766;
                    v1766 += 8;
                    *(_QWORD *)v1765 = v1767;
                    v1765 += 8;
                    v1764 -= 8;
                  }
                  while (v1764);
                }
                v1754 = &v1760[8 * v1761];
                if (v1752)
                  operator delete(v1752);
                v1752 = v1762;
              }
              else
              {
                v1755 = (v1754 - v1735) >> 3;
                if (v1755 >= -1)
                  v1756 = v1755 + 1;
                else
                  v1756 = v1755 + 2;
                v1757 = &v1735[8 * (v1756 >> 1)];
                v1753 = &v1757[-(v1735 - v1752)];
                v1758 = v1735 - v1752;
                v465 = v1735 == v1752;
                v1735 = v1757;
                if (!v465)
                  memmove(v1753, v1752, v1758);
              }
            }
            v1768 = *(_QWORD *)(v1751 - 8);
            v1751 -= 8;
            *((_QWORD *)v1753 - 1) = v1768;
            v1753 -= 8;
          }
          *(_QWORD *)&v2752 = v1752;
          *((_QWORD *)&v2752 + 1) = v1753;
          *(_QWORD *)&v2753 = v1735;
          *((_QWORD *)&v2753 + 1) = v1754;
          v1629 = (uint64_t *)v2654;
          v1771 = v2752;
          v1770 = (int64x2_t)v2753;
          *(_QWORD *)&v2752 = v2654[21].i64[0];
          v1769 = (void *)v2752;
          *((_QWORD *)&v2752 + 1) = v1751;
          v2654[21] = (int64x2_t)v1771;
          v2654[22] = v1770;
          v2654[23].i64[0] -= v2674;
          if (v1769)
          {
            operator delete(v1769);
            v1636 = (char *)v2654[22].i64[0];
          }
          else
          {
            v1636 = (char *)v1770.i64[0];
          }
        }
      }
      v1633 = v1629[47];
      v1637 = (char *)v1629[43];
      v1634 = v1629[46] + v1633;
      v1635 = v1634 >> 8;
      v1647 = v2693;
      v1644 = v2719;
    }
    v1840 = &v1637[8 * v1635];
    if (v1636 == v1637)
      v1841 = 0;
    else
      v1841 = *(_QWORD *)v1840 + 16 * v1634;
    v1842 = v1633 - v1647;
    if (v1633 - v1647 >= v1644)
    {
      v1846 = (_QWORD *)v1841;
      v1845 = &v1637[8 * v1635];
      if (!v1644)
        goto LABEL_2266;
    }
    else
    {
      v1843 = &v1643[2 * (v1633 - v1647 - v1644)];
      if (v1842 < v1644 >> 1)
        v1843 = &v1642[2 * v1842];
      if (v1843 == v1643)
      {
        v1846 = (_QWORD *)v1841;
        v1845 = &v1637[8 * v1635];
      }
      else
      {
        v1844 = v1843;
        v1845 = &v1637[8 * v1635];
        v1846 = (_QWORD *)v1841;
        do
        {
          *v1846 = *v1844;
          v1847 = v1844[1];
          v1846[1] = v1847;
          if (v1847)
          {
            v1848 = (unint64_t *)(v1847 + 8);
            do
              v1849 = __ldxr(v1848);
            while (__stxr(v1849 + 1, v1848));
          }
          v1846 += 2;
          if ((_QWORD *)((char *)v1846 - *(_QWORD *)v1845) == (_QWORD *)4096)
          {
            v1850 = (_QWORD *)*((_QWORD *)v1845 + 1);
            v1845 += 8;
            v1846 = v1850;
          }
          v1844 += 2;
          ++v2654[23].i64[1];
        }
        while (v1844 != v1643);
        v1643 = v1843;
      }
      v1644 = v1842;
      if (!v1842)
        goto LABEL_2266;
    }
    v2720 = v1644;
    v1851 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1840, v1841, v1644);
    v1853 = v1851;
    v1854 = v1852;
    if (v1841 != v1852)
    {
      v1855 = v1851;
      v1856 = v1852;
      do
      {
        *(_OWORD *)v1846 = *(_OWORD *)v1856;
        v1846 += 2;
        *(_QWORD *)v1856 = 0;
        *(_QWORD *)(v1856 + 8) = 0;
        if ((_QWORD *)((char *)v1846 - *(_QWORD *)v1845) == (_QWORD *)4096)
        {
          v1857 = (_QWORD *)*((_QWORD *)v1845 + 1);
          v1845 += 8;
          v1846 = v1857;
        }
        v1856 += 16;
        if (v1856 - *v1855 == 4096)
        {
          v1858 = v1855[1];
          ++v1855;
          v1856 = v1858;
        }
        ++v2654[23].i64[1];
      }
      while (v1856 != v1841);
    }
    if (v2720 < v1842)
    {
      v1859 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1840, v1841, v1842);
      v1861 = v1860;
      if (v1859 == v1853)
      {
        v1870 = v1854;
        v1867 = v1840;
        v1868 = v1841;
      }
      else
      {
        v1862 = v1859;
        v1865 = *v1853;
        v1864 = v1853 - 1;
        v1863 = v1865;
        v1866 = v1854;
        v1867 = v1840;
        v1868 = v1841;
        while (1)
        {
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1863, v1866, v1867, v1868);
          v1867 = (char *)*((_QWORD *)&v2752 + 1);
          v1868 = v2753;
          if (v1864 == v1862)
            break;
          v1869 = *v1864--;
          v1863 = v1869;
          v1866 = v1869 + 4096;
        }
        v1870 = *v1862 + 4096;
        v1860 = v1861;
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1860, v1870, v1867, v1868);
      v1841 = v2753;
      v1840 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v1642 != v1643)
    {
      v1871 = *(_QWORD *)v1840;
      while (1)
      {
        v1872 = v1841 - v1871;
        if (((char *)v1643 - (char *)v1642) >> 4 >= v1872 >> 4)
          v1873 = v1872 >> 4;
        else
          v1873 = ((char *)v1643 - (char *)v1642) >> 4;
        if (v1873)
        {
          v1874 = v1643 - 1;
          v1875 = -16 * v1873;
          v1876 = (_QWORD *)(v1841 - 16);
          do
          {
            v1877 = std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v1876, *(v1874 - 1), *v1874);
            v1874 -= 2;
            v1876 = v1877 - 2;
            v1875 += 16;
          }
          while (v1875);
        }
        v1643 -= 2 * v1873;
        if (v1643 == v1642)
          break;
        v1878 = *((_QWORD *)v1840 - 1);
        v1840 -= 8;
        v1871 = v1878;
        v1841 = v1878 + 4096;
      }
    }
    goto LABEL_2266;
  }
  v1649 = v1644 - v1632;
  v2692 = v1647;
  if (v1644 > v1632)
  {
    v2718 = v1644;
    v1650 = 32 * v1640 - 1;
    v1651 = v1636 - v1637;
    if (v1636 == v1637)
    {
      v1650 = 0;
      ++v1649;
    }
    if ((_BYTE)v1649)
      v1652 = (v1649 >> 8) + 1;
    else
      v1652 = v1649 >> 8;
    v1653 = v1650 - v1634;
    if (v1652 >= v1653 >> 8)
      v1654 = v1653 >> 8;
    else
      v1654 = v1652;
    if (v1652 <= v1653 >> 8)
    {
      for (v2654[23].i64[0] = v1632 + (v1654 << 8); v1654; --v1654)
      {
        v1675 = v2654[22].i64[0];
        *(_QWORD *)&v2752 = *(_QWORD *)(v1675 - 8);
        v2654[22].i64[0] = v1675 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[21].i64, &v2752);
      }
    }
    else
    {
      v1655 = v1652 - v1654;
      v1656 = v2654[21].i64[0];
      v1657 = v2654[22].i64[1] - v1656;
      if (v1652 - v1654 <= (v1657 >> 3) - (v1651 >> 3))
      {
        if (v1655)
        {
          if (v1637 == (char *)v1656)
          {
LABEL_2052:
            v1699 = v1655;
            do
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[21].i64, &v2752);
              --v1699;
            }
            while (v1699);
            v1654 += v1655;
            v1632 = v2654[23].u64[0];
          }
          else
          {
            while (1)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[21].i64, &v2752);
              v1697 = v2654[21].i64[1];
              v1698 = v2654[22].i64[0] - v1697 == 8 ? 255 : 256;
              v1632 = v1698 + v2654[23].i64[0];
              v2654[23].i64[0] = v1632;
              if (!--v1655)
                break;
              if (v1697 == v1648->i64[0])
                goto LABEL_2052;
            }
          }
        }
        for (v2654[23].i64[0] = v1632 + (v1654 << 8); v1654; --v1654)
        {
          v1700 = v2654[22].i64[0];
          *(_QWORD *)&v2752 = *(_QWORD *)(v1700 - 8);
          v2654[22].i64[0] = v1700 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[21].i64, &v2752);
        }
      }
      else
      {
        v1658 = v1651 >> 3;
        v1659 = v1636 == v1637;
        if (v1657 >> 2 <= v1655 + v1658)
          v1660 = v1655 + v1658;
        else
          v1660 = v1657 >> 2;
        v2754 = &v2654[22].i8[8];
        if (v1660)
          v1660 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1660);
        else
          v1661 = 0;
        v1701 = (v1652 << 8) - v1659;
        *(_QWORD *)&v2752 = v1660;
        *((_QWORD *)&v2752 + 1) = v1660;
        *(_QWORD *)&v2753 = v1660;
        *((_QWORD *)&v2753 + 1) = v1660 + 8 * v1661;
        do
        {
          *(_QWORD *)&v2732 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
          --v1655;
        }
        while (v1655);
        v2673 = v1701;
        v1702 = v2654[22].i64[0];
        for (i3 = (char *)v2753; v1654; --v1654)
        {
          if (i3 == *((char **)&v2753 + 1))
          {
            v1704 = (char *)*((_QWORD *)&v2752 + 1);
            v1705 = (void *)v2752;
            if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
            {
              if (i3 == (char *)v2752)
                v1711 = 1;
              else
                v1711 = (uint64_t)&i3[-v2752] >> 2;
              v1712 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1711);
              v1714 = i3 - v1704;
              v465 = i3 == v1704;
              i3 = &v1712[8 * (v1711 >> 2)];
              if (!v465)
              {
                i3 = &v1712[8 * (v1711 >> 2) + (v1714 & 0xFFFFFFFFFFFFFFF8)];
                v1715 = 8 * (v1714 >> 3);
                v1716 = &v1712[8 * (v1711 >> 2)];
                do
                {
                  v1717 = *(_QWORD *)v1704;
                  v1704 += 8;
                  *(_QWORD *)v1716 = v1717;
                  v1716 += 8;
                  v1715 -= 8;
                }
                while (v1715);
              }
              *(_QWORD *)&v2752 = v1712;
              *((_QWORD *)&v2752 + 1) = &v1712[8 * (v1711 >> 2)];
              *(_QWORD *)&v2753 = i3;
              *((_QWORD *)&v2753 + 1) = &v1712[8 * v1713];
              if (v1705)
                operator delete(v1705);
            }
            else
            {
              v1706 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
              if (v1706 >= -1)
                v1707 = v1706 + 1;
              else
                v1707 = v1706 + 2;
              v1708 = *((_QWORD *)&v2752 + 1) - 8 * (v1707 >> 1);
              v1709 = &i3[-*((_QWORD *)&v2752 + 1)];
              if (i3 != *((char **)&v2752 + 1))
              {
                memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v1707 >> 1)), *((const void **)&v2752 + 1), (size_t)&i3[-*((_QWORD *)&v2752 + 1)]);
                i3 = v1704;
              }
              v1710 = &i3[-8 * (v1707 >> 1)];
              i3 = &v1709[v1708];
              *((_QWORD *)&v2752 + 1) = v1710;
              *(_QWORD *)&v2753 = &v1709[v1708];
            }
          }
          *(_QWORD *)i3 = *(_QWORD *)(v1702 - 8);
          i3 = (char *)(v2753 + 8);
          *(_QWORD *)&v2753 = v2753 + 8;
          v1702 = v2654[22].i64[0] - 8;
          v2654[22].i64[0] = v1702;
        }
        v1718 = (uint64_t *)v2654[21].i64[1];
        if (v1718 == (uint64_t *)v1702)
        {
          v1718 = (uint64_t *)v1702;
          v1734 = (uint64_t *)v2654;
        }
        else
        {
          do
          {
            if (i3 == *((char **)&v2753 + 1))
            {
              v1719 = (char *)*((_QWORD *)&v2752 + 1);
              v1720 = (void *)v2752;
              if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
              {
                if (i3 == (char *)v2752)
                  v1726 = 1;
                else
                  v1726 = (uint64_t)&i3[-v2752] >> 2;
                v1727 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1726);
                v1729 = i3 - v1719;
                v465 = i3 == v1719;
                i3 = &v1727[8 * (v1726 >> 2)];
                if (!v465)
                {
                  i3 = &v1727[8 * (v1726 >> 2) + (v1729 & 0xFFFFFFFFFFFFFFF8)];
                  v1730 = 8 * (v1729 >> 3);
                  v1731 = &v1727[8 * (v1726 >> 2)];
                  do
                  {
                    v1732 = *(_QWORD *)v1719;
                    v1719 += 8;
                    *(_QWORD *)v1731 = v1732;
                    v1731 += 8;
                    v1730 -= 8;
                  }
                  while (v1730);
                }
                *(_QWORD *)&v2752 = v1727;
                *((_QWORD *)&v2752 + 1) = &v1727[8 * (v1726 >> 2)];
                *(_QWORD *)&v2753 = i3;
                *((_QWORD *)&v2753 + 1) = &v1727[8 * v1728];
                if (v1720)
                  operator delete(v1720);
              }
              else
              {
                v1721 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                if (v1721 >= -1)
                  v1722 = v1721 + 1;
                else
                  v1722 = v1721 + 2;
                v1723 = *((_QWORD *)&v2752 + 1) - 8 * (v1722 >> 1);
                v1724 = &i3[-*((_QWORD *)&v2752 + 1)];
                if (i3 != *((char **)&v2752 + 1))
                {
                  memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v1722 >> 1)), *((const void **)&v2752 + 1), (size_t)&i3[-*((_QWORD *)&v2752 + 1)]);
                  i3 = v1719;
                }
                v1725 = &i3[-8 * (v1722 >> 1)];
                i3 = &v1724[v1723];
                *((_QWORD *)&v2752 + 1) = v1725;
                *(_QWORD *)&v2753 = &v1724[v1723];
              }
            }
            v1733 = *v1718++;
            *(_QWORD *)i3 = v1733;
            i3 = (char *)(v2753 + 8);
            *(_QWORD *)&v2753 = v2753 + 8;
          }
          while (v1718 != (uint64_t *)v2654[22].i64[0]);
          v1734 = (uint64_t *)v2654;
          v1702 = v2654[21].i64[1];
        }
        v1772 = (void *)v1734[42];
        *((_OWORD *)v1734 + 21) = v2752;
        *(_QWORD *)&v2752 = v1772;
        *((_QWORD *)&v2752 + 1) = v1702;
        *(_QWORD *)&v2753 = v1718;
        v1773 = *((_QWORD *)&v2753 + 1);
        v1734[44] = (uint64_t)i3;
        v1734[45] = v1773;
        v1734[46] += v2673;
        v1629 = v1734;
        if (v1772)
          operator delete(v1772);
      }
    }
    v1632 = v1629[46];
    v1637 = (char *)v1629[43];
    v1636 = (char *)v1629[44];
    v1639 = v1632 >> 8;
    v1647 = v2692;
    v1644 = v2718;
  }
  v1774 = &v1637[8 * v1639];
  if (v1636 == v1637)
    v1775 = 0;
  else
    v1775 = (__int128 *)(*(_QWORD *)v1774 + 16 * v1632);
  if (v1644 <= v1647)
  {
    v1779 = v1775;
    v1778 = &v1637[8 * v1639];
    if (!v1644)
      goto LABEL_2266;
    goto LABEL_2169;
  }
  v1776 = &v1642[2 * (v1644 - v1647)];
  if (v1647 < v1644 >> 1)
    v1776 = &v1643[-2 * v1647];
  if (v1776 == v1642)
  {
    v1779 = v1775;
    v1778 = &v1637[8 * v1639];
  }
  else
  {
    v1777 = v1776;
    v1778 = v1774;
    v1779 = v1775;
    do
    {
      if (v1779 == *(__int128 **)v1778)
      {
        v1780 = *((_QWORD *)v1778 - 1);
        v1778 -= 8;
        v1779 = (__int128 *)(v1780 + 4096);
      }
      v1781 = *(v1777 - 2);
      v1777 -= 2;
      *((_QWORD *)v1779-- - 2) = v1781;
      v1782 = v1777[1];
      *((_QWORD *)v1779 + 1) = v1782;
      if (v1782)
      {
        v1783 = (unint64_t *)(v1782 + 8);
        do
          v1784 = __ldxr(v1783);
        while (__stxr(v1784 + 1, v1783));
        v1632 = v2654[23].u64[0];
      }
      --v1632;
      v1785 = v2654[23].i64[1] + 1;
      v2654[23].i64[0] = v1632;
      v2654[23].i64[1] = v1785;
    }
    while (v1777 != v1642);
    v1642 = v1776;
  }
  v1644 = v1647;
  if (v1647)
  {
LABEL_2169:
    v1786 = v1644;
    v1787 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1774, (uint64_t)v1775, v1644);
    v1789 = v1787;
    v1790 = v1788;
    if (v1775 != v1788)
    {
      v1791 = v1787;
      v1792 = v1788;
      do
      {
        if (v1779 == *(__int128 **)v1778)
        {
          v1793 = *((_QWORD *)v1778 - 1);
          v1778 -= 8;
          v1779 = (__int128 *)(v1793 + 4096);
        }
        if (v1792 == *v1791)
        {
          v1794 = (uint64_t)*--v1791;
          v1792 = (__int128 *)(v1794 + 4096);
        }
        v1795 = *--v1792;
        *--v1779 = v1795;
        *(_QWORD *)v1792 = 0;
        *((_QWORD *)v1792 + 1) = 0;
        v2654[23] = vaddq_s64(v2654[23], (int64x2_t)xmmword_18F116EE0);
      }
      while (v1792 != v1775);
    }
    if (v1786 < v2692)
    {
      v1796 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1774, (uint64_t)v1775, v2692);
      v1798 = v1797;
      if (v1789 == v1796)
      {
        v1807 = v1790;
        v1808 = v1798;
        v1804 = v1774;
        v1805 = (uint64_t)v1775;
      }
      else
      {
        v1799 = v1796;
        v1801 = *v1789;
        v1800 = v1789 + 1;
        v1802 = v1801 + 256;
        v1803 = v1790;
        v1804 = v1774;
        v1805 = (uint64_t)v1775;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1803, v1802, v1804, v1805);
          v1804 = (char *)*((_QWORD *)&v2752 + 1);
          v1805 = v2753;
          if (v1800 == v1799)
            break;
          v1806 = *v1800++;
          v1803 = v1806;
          v1802 = v1806 + 256;
        }
        v1807 = *v1799;
        v1808 = v1798;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v1807, v1808, v1804, v1805);
      v1775 = (__int128 *)v2753;
      v1774 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v1642 != v1643)
    {
      v1809 = *(char **)v1774;
      while (1)
      {
        v1810 = v1809 - (char *)v1775 + 4096;
        if (((char *)v1643 - (char *)v1642) >> 4 >= v1810 >> 4)
          v1811 = v1810 >> 4;
        else
          v1811 = ((char *)v1643 - (char *)v1642) >> 4;
        if (v1811)
        {
          v1812 = &v1642[2 * v1811];
          do
          {
            v1813 = *v1642;
            v1814 = v1642[1];
            v1642 += 2;
            std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v1775++, v1813, v1814);
          }
          while (v1642 != v1812);
          v1642 = v1812;
        }
        if (v1642 == v1643)
          break;
        v1815 = (char *)*((_QWORD *)v1774 + 1);
        v1774 += 8;
        v1809 = v1815;
        v1775 = (__int128 *)v1815;
      }
    }
  }
LABEL_2266:
  v1879 = (uint64_t)(*((_QWORD *)&v2739 + 1) - v2739) >> 4;
  v1880 = (uint64_t *)v2654;
  v1881 = (unint64_t *)&v2654[24];
  do
    v1882 = __ldaxr(v1881);
  while (__stlxr(v1882 + v1879, v1881));
  v1883 = v2654[27].u64[0];
  v1884 = v2654[27].i64[1];
  v1885 = v1883 + v1884;
  v1886 = (v1883 + v1884) >> 8;
  v1888 = (char *)v2654[25].i64[1];
  v1887 = (char *)v2654[26].i64[0];
  v1889 = &v1888[8 * v1886];
  v1890 = v1887 - v1888;
  if (v1887 == v1888)
  {
    v1891 = 0;
    v1897 = 0;
    v1893 = (uint64_t *)v2737.n128_u64[1];
    v1892 = (uint64_t *)v2737.n128_u64[0];
    v1894 = (uint64_t)(v2737.n128_u64[1] - v2737.n128_u64[0]) >> 4;
    v1895 = v1883 >> 8;
    v1896 = &v1888[8 * (v1883 >> 8)];
  }
  else
  {
    v1891 = *(_QWORD *)v1889 + 16 * v1885;
    v1893 = (uint64_t *)v2737.n128_u64[1];
    v1892 = (uint64_t *)v2737.n128_u64[0];
    v1894 = (uint64_t)(v2737.n128_u64[1] - v2737.n128_u64[0]) >> 4;
    v1895 = v1883 >> 8;
    v1896 = &v1888[8 * (v1883 >> 8)];
    v1897 = *(_QWORD *)v1896 + 16 * v1883;
  }
  if (v1891 == v1897)
    v1898 = 0;
  else
    v1898 = ((v1891 - *(_QWORD *)v1889) >> 4) + 32 * (v1889 - v1896) - ((v1897 - *(_QWORD *)v1896) >> 4);
  v1899 = v2654 + 25;
  if (v1898 >= v1884 - v1898)
  {
    v1913 = 32 * v1890 - 1;
    v1914 = v1887 - v1888;
    if (v1887 == v1888)
      v1913 = 0;
    v1915 = v1913 - v1885;
    v415 = v1894 >= v1915;
    v1916 = v1894 - v1915;
    if (v1916 != 0 && v415)
    {
      v2695 = v1898;
      v2722 = v1894;
      if (v1887 == v1888)
        v1917 = v1916 + 1;
      else
        v1917 = v1916;
      if ((_BYTE)v1917)
        v1918 = (v1917 >> 8) + 1;
      else
        v1918 = v1917 >> 8;
      if (v1918 >= v1895)
        v1919 = v1895;
      else
        v1919 = v1918;
      if (v1918 <= v1895)
      {
        for (v2654[27].i64[0] = v1883 - (v1919 << 8); v1919; --v1919)
        {
          v1927 = (_QWORD *)v2654[25].i64[1];
          v1930 = *v1927;
          v1928 = (char *)(v1927 + 1);
          v1929 = v1930;
          v2654[25].i64[1] = (uint64_t)v1928;
          if (v1887 == (char *)v2654[26].i64[1])
          {
            v1931 = (uint64_t)&v1928[-v1899->i64[0]];
            if ((unint64_t)v1928 <= v1899->i64[0])
            {
              if (v1887 == (char *)v1899->i64[0])
                v1938 = 1;
              else
                v1938 = (uint64_t)&v1887[-v1899->i64[0]] >> 2;
              v1939 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1938);
              v1941 = &v1939[8 * (v1938 >> 2)];
              v1942 = (uint64_t *)v2654[25].i64[1];
              v1887 = v1941;
              v1943 = v2654[26].i64[0] - (_QWORD)v1942;
              if (v1943)
              {
                v1887 = &v1941[v1943 & 0xFFFFFFFFFFFFFFF8];
                v1944 = 8 * (v1943 >> 3);
                v1945 = &v1939[8 * (v1938 >> 2)];
                do
                {
                  v1946 = *v1942++;
                  *(_QWORD *)v1945 = v1946;
                  v1945 += 8;
                  v1944 -= 8;
                }
                while (v1944);
              }
              v1947 = (void *)v2654[25].i64[0];
              v2654[25].i64[0] = (uint64_t)v1939;
              v2654[25].i64[1] = (uint64_t)v1941;
              v2654[26].i64[0] = (uint64_t)v1887;
              v2654[26].i64[1] = (uint64_t)&v1939[8 * v1940];
              if (v1947)
              {
                operator delete(v1947);
                v1887 = (char *)v2654[26].i64[0];
              }
            }
            else
            {
              v1932 = v1931 >> 3;
              v432 = v1931 >> 3 < -1;
              v1933 = (v1931 >> 3) + 2;
              if (v432)
                v1934 = v1933;
              else
                v1934 = v1932 + 1;
              v1935 = &v1928[-8 * (v1934 >> 1)];
              v1936 = v1887 - v1928;
              if (v1887 != v1928)
              {
                memmove(&v1928[-8 * (v1934 >> 1)], v1928, v1887 - v1928);
                v1887 = (char *)v2654[25].i64[1];
              }
              v1937 = &v1887[-8 * (v1934 >> 1)];
              v1887 = &v1935[v1936];
              v2654[25].i64[1] = (uint64_t)v1937;
              v2654[26].i64[0] = (uint64_t)&v1935[v1936];
            }
          }
          *(_QWORD *)v1887 = v1929;
          v1887 = (char *)(v2654[26].i64[0] + 8);
          v2654[26].i64[0] = (uint64_t)v1887;
        }
      }
      else
      {
        v1920 = v1918 - v1919;
        v1921 = v2654[26].i64[1] - v2654[25].i64[0];
        if (v1918 - v1919 <= (v1921 >> 3) - (v1914 >> 3))
        {
          if (v1920)
          {
            while (v2654[26].i64[1] != v2654[26].i64[0])
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[25].i64, &v2752);
              if (!--v1920)
              {
                v1887 = (char *)v2654[26].i64[0];
                goto LABEL_2490;
              }
            }
            for (i4 = 0; i4 != v1920; ++i4)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[25].i64, &v2752);
              v1887 = (char *)v2654[26].i64[0];
              if (&v1887[-v2654[25].i64[1]] == (char *)8)
                v2068 = 255;
              else
                v2068 = 256;
              v2069 = v2068 + v2654[27].i64[0];
              v2654[27].i64[0] = v2069;
            }
            v1919 += v1920;
          }
          else
          {
LABEL_2490:
            v2069 = v2654[27].i64[0];
          }
          for (v2654[27].i64[0] = v2069 - (v1919 << 8); v1919; --v1919)
          {
            v2070 = (_QWORD *)v2654[25].i64[1];
            v2073 = *v2070;
            v2071 = (char *)(v2070 + 1);
            v2072 = v2073;
            v2654[25].i64[1] = (uint64_t)v2071;
            if (v1887 == (char *)v2654[26].i64[1])
            {
              v2074 = (uint64_t)&v2071[-v1899->i64[0]];
              if ((unint64_t)v2071 <= v1899->i64[0])
              {
                if (v1887 == (char *)v1899->i64[0])
                  v2081 = 1;
                else
                  v2081 = (uint64_t)&v1887[-v1899->i64[0]] >> 2;
                v2082 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2081);
                v2084 = &v2082[8 * (v2081 >> 2)];
                v2085 = (uint64_t *)v2654[25].i64[1];
                v1887 = v2084;
                v2086 = v2654[26].i64[0] - (_QWORD)v2085;
                if (v2086)
                {
                  v1887 = &v2084[v2086 & 0xFFFFFFFFFFFFFFF8];
                  v2087 = 8 * (v2086 >> 3);
                  v2088 = &v2082[8 * (v2081 >> 2)];
                  do
                  {
                    v2089 = *v2085++;
                    *(_QWORD *)v2088 = v2089;
                    v2088 += 8;
                    v2087 -= 8;
                  }
                  while (v2087);
                }
                v2090 = (void *)v2654[25].i64[0];
                v2654[25].i64[0] = (uint64_t)v2082;
                v2654[25].i64[1] = (uint64_t)v2084;
                v2654[26].i64[0] = (uint64_t)v1887;
                v2654[26].i64[1] = (uint64_t)&v2082[8 * v2083];
                if (v2090)
                {
                  operator delete(v2090);
                  v1887 = (char *)v2654[26].i64[0];
                }
              }
              else
              {
                v2075 = v2074 >> 3;
                v432 = v2074 >> 3 < -1;
                v2076 = (v2074 >> 3) + 2;
                if (v432)
                  v2077 = v2076;
                else
                  v2077 = v2075 + 1;
                v2078 = &v2071[-8 * (v2077 >> 1)];
                v2079 = v1887 - v2071;
                if (v1887 != v2071)
                {
                  memmove(&v2071[-8 * (v2077 >> 1)], v2071, v1887 - v2071);
                  v1887 = (char *)v2654[25].i64[1];
                }
                v2080 = &v1887[-8 * (v2077 >> 1)];
                v1887 = &v2078[v2079];
                v2654[25].i64[1] = (uint64_t)v2080;
                v2654[26].i64[0] = (uint64_t)&v2078[v2079];
              }
            }
            *(_QWORD *)v1887 = v2072;
            v1887 = (char *)(v2654[26].i64[0] + 8);
            v2654[26].i64[0] = (uint64_t)v1887;
          }
        }
        else
        {
          v1922 = v1914 >> 3;
          v1923 = v1921 >> 2;
          if (v1923 <= v1920 + (v1914 >> 3))
            v1924 = (char *)(v1920 + (v1914 >> 3));
          else
            v1924 = (char *)v1923;
          v2754 = &v2654[26].i8[8];
          if (v1924)
            v1924 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>((unint64_t)v1924);
          else
            v1925 = 0;
          *(_QWORD *)&v2752 = v1924;
          *((_QWORD *)&v2752 + 1) = &v1924[8 * (v1922 - v1919)];
          *(_QWORD *)&v2753 = *((_QWORD *)&v2752 + 1);
          *((_QWORD *)&v2753 + 1) = &v1924[8 * v1925];
          do
          {
            *(_QWORD *)&v2732 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
            --v1920;
          }
          while (v1920);
          v2676 = v1919 << 8;
          v1986 = (char *)v2753;
          if (v1919)
          {
            v1987 = (_QWORD *)v2654[25].i64[1];
            do
            {
              if (v1986 == *((char **)&v2753 + 1))
              {
                v1988 = (char *)*((_QWORD *)&v2752 + 1);
                v1989 = (void *)v2752;
                if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
                {
                  if (v1986 == (char *)v2752)
                    v1995 = 1;
                  else
                    v1995 = (uint64_t)&v1986[-v2752] >> 2;
                  v1996 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1995);
                  v1998 = v1986 - v1988;
                  v465 = v1986 == v1988;
                  v1986 = &v1996[8 * (v1995 >> 2)];
                  if (!v465)
                  {
                    v1986 = &v1996[8 * (v1995 >> 2) + (v1998 & 0xFFFFFFFFFFFFFFF8)];
                    v1999 = 8 * (v1998 >> 3);
                    v2000 = &v1996[8 * (v1995 >> 2)];
                    do
                    {
                      v2001 = *(_QWORD *)v1988;
                      v1988 += 8;
                      *(_QWORD *)v2000 = v2001;
                      v2000 += 8;
                      v1999 -= 8;
                    }
                    while (v1999);
                  }
                  *(_QWORD *)&v2752 = v1996;
                  *((_QWORD *)&v2752 + 1) = &v1996[8 * (v1995 >> 2)];
                  *(_QWORD *)&v2753 = v1986;
                  *((_QWORD *)&v2753 + 1) = &v1996[8 * v1997];
                  if (v1989)
                    operator delete(v1989);
                }
                else
                {
                  v1990 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                  if (v1990 >= -1)
                    v1991 = v1990 + 1;
                  else
                    v1991 = v1990 + 2;
                  v1992 = *((_QWORD *)&v2752 + 1) - 8 * (v1991 >> 1);
                  v1993 = &v1986[-*((_QWORD *)&v2752 + 1)];
                  if (v1986 != *((char **)&v2752 + 1))
                  {
                    memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v1991 >> 1)), *((const void **)&v2752 + 1), (size_t)&v1986[-*((_QWORD *)&v2752 + 1)]);
                    v1986 = v1988;
                  }
                  v1994 = &v1986[-8 * (v1991 >> 1)];
                  v1986 = &v1993[v1992];
                  *((_QWORD *)&v2752 + 1) = v1994;
                  *(_QWORD *)&v2753 = &v1993[v1992];
                }
              }
              *(_QWORD *)v1986 = *v1987;
              v1986 = (char *)(v2753 + 8);
              *(_QWORD *)&v2753 = v2753 + 8;
              v1987 = (_QWORD *)(v2654[25].i64[1] + 8);
              v2654[25].i64[1] = (uint64_t)v1987;
              --v1919;
            }
            while (v1919);
          }
          v2002 = v2654[26].i64[0];
          v2004 = (char *)*((_QWORD *)&v2752 + 1);
          v2003 = (char *)v2752;
          v2005 = (char *)*((_QWORD *)&v2753 + 1);
          while (v2002 != v2654[25].i64[1])
          {
            if (v2004 == v2003)
            {
              if (v1986 >= v2005)
              {
                if (v2005 == v2003)
                  v2010 = 1;
                else
                  v2010 = (v2005 - v2003) >> 2;
                v2011 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2010);
                v2013 = v2011;
                v2004 = &v2011[(2 * v2010 + 6) & 0xFFFFFFFFFFFFFFF8];
                v2014 = v1986 - v2003;
                v465 = v1986 == v2003;
                v1986 = v2004;
                if (!v465)
                {
                  v1986 = &v2004[v2014 & 0xFFFFFFFFFFFFFFF8];
                  v2015 = 8 * (v2014 >> 3);
                  v2016 = v2004;
                  v2017 = v2003;
                  do
                  {
                    v2018 = *(_QWORD *)v2017;
                    v2017 += 8;
                    *(_QWORD *)v2016 = v2018;
                    v2016 += 8;
                    v2015 -= 8;
                  }
                  while (v2015);
                }
                v2005 = &v2011[8 * v2012];
                if (v2003)
                  operator delete(v2003);
                v2003 = v2013;
              }
              else
              {
                v2006 = (v2005 - v1986) >> 3;
                if (v2006 >= -1)
                  v2007 = v2006 + 1;
                else
                  v2007 = v2006 + 2;
                v2008 = &v1986[8 * (v2007 >> 1)];
                v2004 = &v2008[-(v1986 - v2003)];
                v2009 = v1986 - v2003;
                v465 = v1986 == v2003;
                v1986 = v2008;
                if (!v465)
                  memmove(v2004, v2003, v2009);
              }
            }
            v2019 = *(_QWORD *)(v2002 - 8);
            v2002 -= 8;
            *((_QWORD *)v2004 - 1) = v2019;
            v2004 -= 8;
          }
          *(_QWORD *)&v2752 = v2003;
          *((_QWORD *)&v2752 + 1) = v2004;
          *(_QWORD *)&v2753 = v1986;
          *((_QWORD *)&v2753 + 1) = v2005;
          v1880 = (uint64_t *)v2654;
          v2022 = v2752;
          v2021 = (int64x2_t)v2753;
          *(_QWORD *)&v2752 = v2654[25].i64[0];
          v2020 = (void *)v2752;
          *((_QWORD *)&v2752 + 1) = v2002;
          v2654[25] = (int64x2_t)v2022;
          v2654[26] = v2021;
          v2654[27].i64[0] -= v2676;
          if (v2020)
          {
            operator delete(v2020);
            v1887 = (char *)v2654[26].i64[0];
          }
          else
          {
            v1887 = (char *)v2021.i64[0];
          }
        }
      }
      v1884 = v1880[55];
      v1888 = (char *)v1880[51];
      v1885 = v1880[54] + v1884;
      v1886 = v1885 >> 8;
      v1898 = v2695;
      v1894 = v2722;
    }
    v2091 = &v1888[8 * v1886];
    if (v1887 == v1888)
      v2092 = 0;
    else
      v2092 = *(_QWORD *)v2091 + 16 * v1885;
    v2093 = v1884 - v1898;
    if (v1884 - v1898 >= v1894)
    {
      v2097 = (_QWORD *)v2092;
      v2096 = &v1888[8 * v1886];
      if (!v1894)
        goto LABEL_2554;
    }
    else
    {
      v2094 = &v1893[2 * (v1884 - v1898 - v1894)];
      if (v2093 < v1894 >> 1)
        v2094 = &v1892[2 * v2093];
      if (v2094 == v1893)
      {
        v2097 = (_QWORD *)v2092;
        v2096 = &v1888[8 * v1886];
      }
      else
      {
        v2095 = v2094;
        v2096 = &v1888[8 * v1886];
        v2097 = (_QWORD *)v2092;
        do
        {
          *v2097 = *v2095;
          v2098 = v2095[1];
          v2097[1] = v2098;
          if (v2098)
          {
            v2099 = (unint64_t *)(v2098 + 8);
            do
              v2100 = __ldxr(v2099);
            while (__stxr(v2100 + 1, v2099));
          }
          v2097 += 2;
          if ((_QWORD *)((char *)v2097 - *(_QWORD *)v2096) == (_QWORD *)4096)
          {
            v2101 = (_QWORD *)*((_QWORD *)v2096 + 1);
            v2096 += 8;
            v2097 = v2101;
          }
          v2095 += 2;
          ++v2654[27].i64[1];
        }
        while (v2095 != v1893);
        v1893 = v2094;
      }
      v1894 = v2093;
      if (!v2093)
        goto LABEL_2554;
    }
    v2723 = v1894;
    v2102 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v2091, v2092, v1894);
    v2104 = v2102;
    v2105 = v2103;
    if (v2092 != v2103)
    {
      v2106 = v2102;
      v2107 = v2103;
      do
      {
        *(_OWORD *)v2097 = *(_OWORD *)v2107;
        v2097 += 2;
        *(_QWORD *)v2107 = 0;
        *(_QWORD *)(v2107 + 8) = 0;
        if ((_QWORD *)((char *)v2097 - *(_QWORD *)v2096) == (_QWORD *)4096)
        {
          v2108 = (_QWORD *)*((_QWORD *)v2096 + 1);
          v2096 += 8;
          v2097 = v2108;
        }
        v2107 += 16;
        if (v2107 - *v2106 == 4096)
        {
          v2109 = v2106[1];
          ++v2106;
          v2107 = v2109;
        }
        ++v2654[27].i64[1];
      }
      while (v2107 != v2092);
    }
    if (v2723 < v2093)
    {
      v2110 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v2091, v2092, v2093);
      v2112 = v2111;
      if (v2110 == v2104)
      {
        v2121 = v2105;
        v2118 = v2091;
        v2119 = v2092;
      }
      else
      {
        v2113 = v2110;
        v2116 = *v2104;
        v2115 = v2104 - 1;
        v2114 = v2116;
        v2117 = v2105;
        v2118 = v2091;
        v2119 = v2092;
        while (1)
        {
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v2114, v2117, v2118, v2119);
          v2118 = (char *)*((_QWORD *)&v2752 + 1);
          v2119 = v2753;
          if (v2115 == v2113)
            break;
          v2120 = *v2115--;
          v2114 = v2120;
          v2117 = v2120 + 4096;
        }
        v2121 = *v2113 + 4096;
        v2111 = v2112;
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v2111, v2121, v2118, v2119);
      v2092 = v2753;
      v2091 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v1892 != v1893)
    {
      v2122 = *(_QWORD *)v2091;
      while (1)
      {
        v2123 = v2092 - v2122;
        if (((char *)v1893 - (char *)v1892) >> 4 >= v2123 >> 4)
          v2124 = v2123 >> 4;
        else
          v2124 = ((char *)v1893 - (char *)v1892) >> 4;
        if (v2124)
        {
          v2125 = v1893 - 1;
          v2126 = -16 * v2124;
          v2127 = (_QWORD *)(v2092 - 16);
          do
          {
            v2128 = std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v2127, *(v2125 - 1), *v2125);
            v2125 -= 2;
            v2127 = v2128 - 2;
            v2126 += 16;
          }
          while (v2126);
        }
        v1893 -= 2 * v2124;
        if (v1893 == v1892)
          break;
        v2129 = *((_QWORD *)v2091 - 1);
        v2091 -= 8;
        v2122 = v2129;
        v2092 = v2129 + 4096;
      }
    }
    goto LABEL_2554;
  }
  v1900 = v1894 - v1883;
  v2694 = v1898;
  if (v1894 > v1883)
  {
    v2721 = v1894;
    v1901 = 32 * v1890 - 1;
    v1902 = v1887 - v1888;
    if (v1887 == v1888)
    {
      v1901 = 0;
      ++v1900;
    }
    if ((_BYTE)v1900)
      v1903 = (v1900 >> 8) + 1;
    else
      v1903 = v1900 >> 8;
    v1904 = v1901 - v1885;
    if (v1903 >= v1904 >> 8)
      v1905 = v1904 >> 8;
    else
      v1905 = v1903;
    if (v1903 <= v1904 >> 8)
    {
      for (v2654[27].i64[0] = v1883 + (v1905 << 8); v1905; --v1905)
      {
        v1926 = v2654[26].i64[0];
        *(_QWORD *)&v2752 = *(_QWORD *)(v1926 - 8);
        v2654[26].i64[0] = v1926 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[25].i64, &v2752);
      }
    }
    else
    {
      v1906 = v1903 - v1905;
      v1907 = v2654[25].i64[0];
      v1908 = v2654[26].i64[1] - v1907;
      if (v1903 - v1905 <= (v1908 >> 3) - (v1902 >> 3))
      {
        if (v1906)
        {
          if (v1888 == (char *)v1907)
          {
LABEL_2340:
            v1950 = v1906;
            do
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[25].i64, &v2752);
              --v1950;
            }
            while (v1950);
            v1905 += v1906;
            v1883 = v2654[27].u64[0];
          }
          else
          {
            while (1)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[25].i64, &v2752);
              v1948 = v2654[25].i64[1];
              v1949 = v2654[26].i64[0] - v1948 == 8 ? 255 : 256;
              v1883 = v1949 + v2654[27].i64[0];
              v2654[27].i64[0] = v1883;
              if (!--v1906)
                break;
              if (v1948 == v1899->i64[0])
                goto LABEL_2340;
            }
          }
        }
        for (v2654[27].i64[0] = v1883 + (v1905 << 8); v1905; --v1905)
        {
          v1951 = v2654[26].i64[0];
          *(_QWORD *)&v2752 = *(_QWORD *)(v1951 - 8);
          v2654[26].i64[0] = v1951 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[25].i64, &v2752);
        }
      }
      else
      {
        v1909 = v1902 >> 3;
        v1910 = v1887 == v1888;
        if (v1908 >> 2 <= v1906 + v1909)
          v1911 = v1906 + v1909;
        else
          v1911 = v1908 >> 2;
        v2754 = &v2654[26].i8[8];
        if (v1911)
          v1911 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1911);
        else
          v1912 = 0;
        v1952 = (v1903 << 8) - v1910;
        *(_QWORD *)&v2752 = v1911;
        *((_QWORD *)&v2752 + 1) = v1911;
        *(_QWORD *)&v2753 = v1911;
        *((_QWORD *)&v2753 + 1) = v1911 + 8 * v1912;
        do
        {
          *(_QWORD *)&v2732 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
          --v1906;
        }
        while (v1906);
        v2675 = v1952;
        v1953 = v2654[26].i64[0];
        for (i5 = (char *)v2753; v1905; --v1905)
        {
          if (i5 == *((char **)&v2753 + 1))
          {
            v1955 = (char *)*((_QWORD *)&v2752 + 1);
            v1956 = (void *)v2752;
            if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
            {
              if (i5 == (char *)v2752)
                v1962 = 1;
              else
                v1962 = (uint64_t)&i5[-v2752] >> 2;
              v1963 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1962);
              v1965 = i5 - v1955;
              v465 = i5 == v1955;
              i5 = &v1963[8 * (v1962 >> 2)];
              if (!v465)
              {
                i5 = &v1963[8 * (v1962 >> 2) + (v1965 & 0xFFFFFFFFFFFFFFF8)];
                v1966 = 8 * (v1965 >> 3);
                v1967 = &v1963[8 * (v1962 >> 2)];
                do
                {
                  v1968 = *(_QWORD *)v1955;
                  v1955 += 8;
                  *(_QWORD *)v1967 = v1968;
                  v1967 += 8;
                  v1966 -= 8;
                }
                while (v1966);
              }
              *(_QWORD *)&v2752 = v1963;
              *((_QWORD *)&v2752 + 1) = &v1963[8 * (v1962 >> 2)];
              *(_QWORD *)&v2753 = i5;
              *((_QWORD *)&v2753 + 1) = &v1963[8 * v1964];
              if (v1956)
                operator delete(v1956);
            }
            else
            {
              v1957 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
              if (v1957 >= -1)
                v1958 = v1957 + 1;
              else
                v1958 = v1957 + 2;
              v1959 = *((_QWORD *)&v2752 + 1) - 8 * (v1958 >> 1);
              v1960 = &i5[-*((_QWORD *)&v2752 + 1)];
              if (i5 != *((char **)&v2752 + 1))
              {
                memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v1958 >> 1)), *((const void **)&v2752 + 1), (size_t)&i5[-*((_QWORD *)&v2752 + 1)]);
                i5 = v1955;
              }
              v1961 = &i5[-8 * (v1958 >> 1)];
              i5 = &v1960[v1959];
              *((_QWORD *)&v2752 + 1) = v1961;
              *(_QWORD *)&v2753 = &v1960[v1959];
            }
          }
          *(_QWORD *)i5 = *(_QWORD *)(v1953 - 8);
          i5 = (char *)(v2753 + 8);
          *(_QWORD *)&v2753 = v2753 + 8;
          v1953 = v2654[26].i64[0] - 8;
          v2654[26].i64[0] = v1953;
        }
        v1969 = (uint64_t *)v2654[25].i64[1];
        if (v1969 == (uint64_t *)v1953)
        {
          v1969 = (uint64_t *)v1953;
          v1985 = (uint64_t *)v2654;
        }
        else
        {
          do
          {
            if (i5 == *((char **)&v2753 + 1))
            {
              v1970 = (char *)*((_QWORD *)&v2752 + 1);
              v1971 = (void *)v2752;
              if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
              {
                if (i5 == (char *)v2752)
                  v1977 = 1;
                else
                  v1977 = (uint64_t)&i5[-v2752] >> 2;
                v1978 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1977);
                v1980 = i5 - v1970;
                v465 = i5 == v1970;
                i5 = &v1978[8 * (v1977 >> 2)];
                if (!v465)
                {
                  i5 = &v1978[8 * (v1977 >> 2) + (v1980 & 0xFFFFFFFFFFFFFFF8)];
                  v1981 = 8 * (v1980 >> 3);
                  v1982 = &v1978[8 * (v1977 >> 2)];
                  do
                  {
                    v1983 = *(_QWORD *)v1970;
                    v1970 += 8;
                    *(_QWORD *)v1982 = v1983;
                    v1982 += 8;
                    v1981 -= 8;
                  }
                  while (v1981);
                }
                *(_QWORD *)&v2752 = v1978;
                *((_QWORD *)&v2752 + 1) = &v1978[8 * (v1977 >> 2)];
                *(_QWORD *)&v2753 = i5;
                *((_QWORD *)&v2753 + 1) = &v1978[8 * v1979];
                if (v1971)
                  operator delete(v1971);
              }
              else
              {
                v1972 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                if (v1972 >= -1)
                  v1973 = v1972 + 1;
                else
                  v1973 = v1972 + 2;
                v1974 = *((_QWORD *)&v2752 + 1) - 8 * (v1973 >> 1);
                v1975 = &i5[-*((_QWORD *)&v2752 + 1)];
                if (i5 != *((char **)&v2752 + 1))
                {
                  memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v1973 >> 1)), *((const void **)&v2752 + 1), (size_t)&i5[-*((_QWORD *)&v2752 + 1)]);
                  i5 = v1970;
                }
                v1976 = &i5[-8 * (v1973 >> 1)];
                i5 = &v1975[v1974];
                *((_QWORD *)&v2752 + 1) = v1976;
                *(_QWORD *)&v2753 = &v1975[v1974];
              }
            }
            v1984 = *v1969++;
            *(_QWORD *)i5 = v1984;
            i5 = (char *)(v2753 + 8);
            *(_QWORD *)&v2753 = v2753 + 8;
          }
          while (v1969 != (uint64_t *)v2654[26].i64[0]);
          v1985 = (uint64_t *)v2654;
          v1953 = v2654[25].i64[1];
        }
        v2023 = (void *)v1985[50];
        *((_OWORD *)v1985 + 25) = v2752;
        *(_QWORD *)&v2752 = v2023;
        *((_QWORD *)&v2752 + 1) = v1953;
        *(_QWORD *)&v2753 = v1969;
        v2024 = *((_QWORD *)&v2753 + 1);
        v1985[52] = (uint64_t)i5;
        v1985[53] = v2024;
        v1985[54] += v2675;
        v1880 = v1985;
        if (v2023)
          operator delete(v2023);
      }
    }
    v1883 = v1880[54];
    v1888 = (char *)v1880[51];
    v1887 = (char *)v1880[52];
    v1895 = v1883 >> 8;
    v1898 = v2694;
    v1894 = v2721;
  }
  v2025 = &v1888[8 * v1895];
  if (v1887 == v1888)
    v2026 = 0;
  else
    v2026 = (__int128 *)(*(_QWORD *)v2025 + 16 * v1883);
  if (v1894 <= v1898)
  {
    v2030 = v2026;
    v2029 = &v1888[8 * v1895];
    if (!v1894)
      goto LABEL_2554;
    goto LABEL_2457;
  }
  v2027 = &v1892[2 * (v1894 - v1898)];
  if (v1898 < v1894 >> 1)
    v2027 = &v1893[-2 * v1898];
  if (v2027 == v1892)
  {
    v2030 = v2026;
    v2029 = &v1888[8 * v1895];
  }
  else
  {
    v2028 = v2027;
    v2029 = v2025;
    v2030 = v2026;
    do
    {
      if (v2030 == *(__int128 **)v2029)
      {
        v2031 = *((_QWORD *)v2029 - 1);
        v2029 -= 8;
        v2030 = (__int128 *)(v2031 + 4096);
      }
      v2032 = *(v2028 - 2);
      v2028 -= 2;
      *((_QWORD *)v2030-- - 2) = v2032;
      v2033 = v2028[1];
      *((_QWORD *)v2030 + 1) = v2033;
      if (v2033)
      {
        v2034 = (unint64_t *)(v2033 + 8);
        do
          v2035 = __ldxr(v2034);
        while (__stxr(v2035 + 1, v2034));
        v1883 = v2654[27].u64[0];
      }
      --v1883;
      v2036 = v2654[27].i64[1] + 1;
      v2654[27].i64[0] = v1883;
      v2654[27].i64[1] = v2036;
    }
    while (v2028 != v1892);
    v1892 = v2027;
  }
  v1894 = v1898;
  if (v1898)
  {
LABEL_2457:
    v2037 = v1894;
    v2038 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v2025, (uint64_t)v2026, v1894);
    v2040 = v2038;
    v2041 = v2039;
    if (v2026 != v2039)
    {
      v2042 = v2038;
      v2043 = v2039;
      do
      {
        if (v2030 == *(__int128 **)v2029)
        {
          v2044 = *((_QWORD *)v2029 - 1);
          v2029 -= 8;
          v2030 = (__int128 *)(v2044 + 4096);
        }
        if (v2043 == *v2042)
        {
          v2045 = (uint64_t)*--v2042;
          v2043 = (__int128 *)(v2045 + 4096);
        }
        v2046 = *--v2043;
        *--v2030 = v2046;
        *(_QWORD *)v2043 = 0;
        *((_QWORD *)v2043 + 1) = 0;
        v2654[27] = vaddq_s64(v2654[27], (int64x2_t)xmmword_18F116EE0);
      }
      while (v2043 != v2026);
    }
    if (v2037 < v2694)
    {
      v2047 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v2025, (uint64_t)v2026, v2694);
      v2049 = v2048;
      if (v2040 == v2047)
      {
        v2058 = v2041;
        v2059 = v2049;
        v2055 = v2025;
        v2056 = (uint64_t)v2026;
      }
      else
      {
        v2050 = v2047;
        v2052 = *v2040;
        v2051 = v2040 + 1;
        v2053 = v2052 + 256;
        v2054 = v2041;
        v2055 = v2025;
        v2056 = (uint64_t)v2026;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v2054, v2053, v2055, v2056);
          v2055 = (char *)*((_QWORD *)&v2752 + 1);
          v2056 = v2753;
          if (v2051 == v2050)
            break;
          v2057 = *v2051++;
          v2054 = v2057;
          v2053 = v2057 + 256;
        }
        v2058 = *v2050;
        v2059 = v2049;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v2058, v2059, v2055, v2056);
      v2026 = (__int128 *)v2753;
      v2025 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v1892 != v1893)
    {
      v2060 = *(char **)v2025;
      while (1)
      {
        v2061 = v2060 - (char *)v2026 + 4096;
        if (((char *)v1893 - (char *)v1892) >> 4 >= v2061 >> 4)
          v2062 = v2061 >> 4;
        else
          v2062 = ((char *)v1893 - (char *)v1892) >> 4;
        if (v2062)
        {
          v2063 = &v1892[2 * v2062];
          do
          {
            v2064 = *v1892;
            v2065 = v1892[1];
            v1892 += 2;
            std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v2026++, v2064, v2065);
          }
          while (v1892 != v2063);
          v1892 = v2063;
        }
        if (v1892 == v1893)
          break;
        v2066 = (char *)*((_QWORD *)v2025 + 1);
        v2025 += 8;
        v2060 = v2066;
        v2026 = (__int128 *)v2066;
      }
    }
  }
LABEL_2554:
  v2130 = (uint64_t)(v2737.n128_u64[1] - v2737.n128_u64[0]) >> 4;
  v2131 = (uint64_t *)v2654;
  v2132 = (unint64_t *)&v2654[28];
  do
    v2133 = __ldaxr(v2132);
  while (__stlxr(v2133 + v2130, v2132));
  v2134 = v2654[31].u64[0];
  v2135 = v2654[31].i64[1];
  v2136 = v2134 + v2135;
  v2137 = (v2134 + v2135) >> 8;
  v2139 = (char *)v2654[29].i64[1];
  v2138 = (char *)v2654[30].i64[0];
  v2140 = &v2139[8 * v2137];
  v2141 = v2138 - v2139;
  if (v2138 == v2139)
  {
    v2142 = 0;
    v2148 = 0;
    v2144 = (uint64_t *)v2735.n128_u64[1];
    v2143 = (uint64_t *)v2735.n128_u64[0];
    v2145 = (uint64_t)(v2735.n128_u64[1] - v2735.n128_u64[0]) >> 4;
    v2146 = v2134 >> 8;
    v2147 = &v2139[8 * (v2134 >> 8)];
  }
  else
  {
    v2142 = *(_QWORD *)v2140 + 16 * v2136;
    v2144 = (uint64_t *)v2735.n128_u64[1];
    v2143 = (uint64_t *)v2735.n128_u64[0];
    v2145 = (uint64_t)(v2735.n128_u64[1] - v2735.n128_u64[0]) >> 4;
    v2146 = v2134 >> 8;
    v2147 = &v2139[8 * (v2134 >> 8)];
    v2148 = *(_QWORD *)v2147 + 16 * v2134;
  }
  if (v2142 == v2148)
    v2149 = 0;
  else
    v2149 = ((v2142 - *(_QWORD *)v2140) >> 4) + 32 * (v2140 - v2147) - ((v2148 - *(_QWORD *)v2147) >> 4);
  v2150 = v2654 + 29;
  if (v2149 >= v2135 - v2149)
  {
    v2164 = 32 * v2141 - 1;
    v2165 = v2138 - v2139;
    if (v2138 == v2139)
      v2164 = 0;
    v2166 = v2164 - v2136;
    v415 = v2145 >= v2166;
    v2167 = v2145 - v2166;
    if (v2167 != 0 && v415)
    {
      v2697 = v2149;
      v2725 = v2145;
      if (v2138 == v2139)
        v2168 = v2167 + 1;
      else
        v2168 = v2167;
      if ((_BYTE)v2168)
        v2169 = (v2168 >> 8) + 1;
      else
        v2169 = v2168 >> 8;
      if (v2169 >= v2146)
        v2170 = v2146;
      else
        v2170 = v2169;
      if (v2169 <= v2146)
      {
        for (v2654[31].i64[0] = v2134 - (v2170 << 8); v2170; --v2170)
        {
          v2178 = (_QWORD *)v2654[29].i64[1];
          v2181 = *v2178;
          v2179 = (char *)(v2178 + 1);
          v2180 = v2181;
          v2654[29].i64[1] = (uint64_t)v2179;
          if (v2138 == (char *)v2654[30].i64[1])
          {
            v2182 = (uint64_t)&v2179[-v2150->i64[0]];
            if ((unint64_t)v2179 <= v2150->i64[0])
            {
              if (v2138 == (char *)v2150->i64[0])
                v2189 = 1;
              else
                v2189 = (uint64_t)&v2138[-v2150->i64[0]] >> 2;
              v2190 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2189);
              v2192 = &v2190[8 * (v2189 >> 2)];
              v2193 = (uint64_t *)v2654[29].i64[1];
              v2138 = v2192;
              v2194 = v2654[30].i64[0] - (_QWORD)v2193;
              if (v2194)
              {
                v2138 = &v2192[v2194 & 0xFFFFFFFFFFFFFFF8];
                v2195 = 8 * (v2194 >> 3);
                v2196 = &v2190[8 * (v2189 >> 2)];
                do
                {
                  v2197 = *v2193++;
                  *(_QWORD *)v2196 = v2197;
                  v2196 += 8;
                  v2195 -= 8;
                }
                while (v2195);
              }
              v2198 = (void *)v2654[29].i64[0];
              v2654[29].i64[0] = (uint64_t)v2190;
              v2654[29].i64[1] = (uint64_t)v2192;
              v2654[30].i64[0] = (uint64_t)v2138;
              v2654[30].i64[1] = (uint64_t)&v2190[8 * v2191];
              if (v2198)
              {
                operator delete(v2198);
                v2138 = (char *)v2654[30].i64[0];
              }
            }
            else
            {
              v2183 = v2182 >> 3;
              v432 = v2182 >> 3 < -1;
              v2184 = (v2182 >> 3) + 2;
              if (v432)
                v2185 = v2184;
              else
                v2185 = v2183 + 1;
              v2186 = &v2179[-8 * (v2185 >> 1)];
              v2187 = v2138 - v2179;
              if (v2138 != v2179)
              {
                memmove(&v2179[-8 * (v2185 >> 1)], v2179, v2138 - v2179);
                v2138 = (char *)v2654[29].i64[1];
              }
              v2188 = &v2138[-8 * (v2185 >> 1)];
              v2138 = &v2186[v2187];
              v2654[29].i64[1] = (uint64_t)v2188;
              v2654[30].i64[0] = (uint64_t)&v2186[v2187];
            }
          }
          *(_QWORD *)v2138 = v2180;
          v2138 = (char *)(v2654[30].i64[0] + 8);
          v2654[30].i64[0] = (uint64_t)v2138;
        }
      }
      else
      {
        v2171 = v2169 - v2170;
        v2172 = v2654[30].i64[1] - v2654[29].i64[0];
        if (v2169 - v2170 <= (v2172 >> 3) - (v2165 >> 3))
        {
          if (v2171)
          {
            while (v2654[30].i64[1] != v2654[30].i64[0])
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[29].i64, &v2752);
              if (!--v2171)
              {
                v2138 = (char *)v2654[30].i64[0];
                goto LABEL_2778;
              }
            }
            for (i6 = 0; i6 != v2171; ++i6)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[29].i64, &v2752);
              v2138 = (char *)v2654[30].i64[0];
              if (&v2138[-v2654[29].i64[1]] == (char *)8)
                v2319 = 255;
              else
                v2319 = 256;
              v2320 = v2319 + v2654[31].i64[0];
              v2654[31].i64[0] = v2320;
            }
            v2170 += v2171;
          }
          else
          {
LABEL_2778:
            v2320 = v2654[31].i64[0];
          }
          for (v2654[31].i64[0] = v2320 - (v2170 << 8); v2170; --v2170)
          {
            v2321 = (_QWORD *)v2654[29].i64[1];
            v2324 = *v2321;
            v2322 = (char *)(v2321 + 1);
            v2323 = v2324;
            v2654[29].i64[1] = (uint64_t)v2322;
            if (v2138 == (char *)v2654[30].i64[1])
            {
              v2325 = (uint64_t)&v2322[-v2150->i64[0]];
              if ((unint64_t)v2322 <= v2150->i64[0])
              {
                if (v2138 == (char *)v2150->i64[0])
                  v2332 = 1;
                else
                  v2332 = (uint64_t)&v2138[-v2150->i64[0]] >> 2;
                v2333 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2332);
                v2335 = &v2333[8 * (v2332 >> 2)];
                v2336 = (uint64_t *)v2654[29].i64[1];
                v2138 = v2335;
                v2337 = v2654[30].i64[0] - (_QWORD)v2336;
                if (v2337)
                {
                  v2138 = &v2335[v2337 & 0xFFFFFFFFFFFFFFF8];
                  v2338 = 8 * (v2337 >> 3);
                  v2339 = &v2333[8 * (v2332 >> 2)];
                  do
                  {
                    v2340 = *v2336++;
                    *(_QWORD *)v2339 = v2340;
                    v2339 += 8;
                    v2338 -= 8;
                  }
                  while (v2338);
                }
                v2341 = (void *)v2654[29].i64[0];
                v2654[29].i64[0] = (uint64_t)v2333;
                v2654[29].i64[1] = (uint64_t)v2335;
                v2654[30].i64[0] = (uint64_t)v2138;
                v2654[30].i64[1] = (uint64_t)&v2333[8 * v2334];
                if (v2341)
                {
                  operator delete(v2341);
                  v2138 = (char *)v2654[30].i64[0];
                }
              }
              else
              {
                v2326 = v2325 >> 3;
                v432 = v2325 >> 3 < -1;
                v2327 = (v2325 >> 3) + 2;
                if (v432)
                  v2328 = v2327;
                else
                  v2328 = v2326 + 1;
                v2329 = &v2322[-8 * (v2328 >> 1)];
                v2330 = v2138 - v2322;
                if (v2138 != v2322)
                {
                  memmove(&v2322[-8 * (v2328 >> 1)], v2322, v2138 - v2322);
                  v2138 = (char *)v2654[29].i64[1];
                }
                v2331 = &v2138[-8 * (v2328 >> 1)];
                v2138 = &v2329[v2330];
                v2654[29].i64[1] = (uint64_t)v2331;
                v2654[30].i64[0] = (uint64_t)&v2329[v2330];
              }
            }
            *(_QWORD *)v2138 = v2323;
            v2138 = (char *)(v2654[30].i64[0] + 8);
            v2654[30].i64[0] = (uint64_t)v2138;
          }
        }
        else
        {
          v2173 = v2165 >> 3;
          v2174 = v2172 >> 2;
          if (v2174 <= v2171 + (v2165 >> 3))
            v2175 = (char *)(v2171 + (v2165 >> 3));
          else
            v2175 = (char *)v2174;
          v2754 = &v2654[30].i8[8];
          if (v2175)
            v2175 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>((unint64_t)v2175);
          else
            v2176 = 0;
          *(_QWORD *)&v2752 = v2175;
          *((_QWORD *)&v2752 + 1) = &v2175[8 * (v2173 - v2170)];
          *(_QWORD *)&v2753 = *((_QWORD *)&v2752 + 1);
          *((_QWORD *)&v2753 + 1) = &v2175[8 * v2176];
          do
          {
            *(_QWORD *)&v2732 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
            --v2171;
          }
          while (v2171);
          v2678 = v2170 << 8;
          v2237 = (char *)v2753;
          if (v2170)
          {
            v2238 = (_QWORD *)v2654[29].i64[1];
            do
            {
              if (v2237 == *((char **)&v2753 + 1))
              {
                v2239 = (char *)*((_QWORD *)&v2752 + 1);
                v2240 = (void *)v2752;
                if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
                {
                  if (v2237 == (char *)v2752)
                    v2246 = 1;
                  else
                    v2246 = (uint64_t)&v2237[-v2752] >> 2;
                  v2247 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2246);
                  v2249 = v2237 - v2239;
                  v465 = v2237 == v2239;
                  v2237 = &v2247[8 * (v2246 >> 2)];
                  if (!v465)
                  {
                    v2237 = &v2247[8 * (v2246 >> 2) + (v2249 & 0xFFFFFFFFFFFFFFF8)];
                    v2250 = 8 * (v2249 >> 3);
                    v2251 = &v2247[8 * (v2246 >> 2)];
                    do
                    {
                      v2252 = *(_QWORD *)v2239;
                      v2239 += 8;
                      *(_QWORD *)v2251 = v2252;
                      v2251 += 8;
                      v2250 -= 8;
                    }
                    while (v2250);
                  }
                  *(_QWORD *)&v2752 = v2247;
                  *((_QWORD *)&v2752 + 1) = &v2247[8 * (v2246 >> 2)];
                  *(_QWORD *)&v2753 = v2237;
                  *((_QWORD *)&v2753 + 1) = &v2247[8 * v2248];
                  if (v2240)
                    operator delete(v2240);
                }
                else
                {
                  v2241 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                  if (v2241 >= -1)
                    v2242 = v2241 + 1;
                  else
                    v2242 = v2241 + 2;
                  v2243 = *((_QWORD *)&v2752 + 1) - 8 * (v2242 >> 1);
                  v2244 = &v2237[-*((_QWORD *)&v2752 + 1)];
                  if (v2237 != *((char **)&v2752 + 1))
                  {
                    memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v2242 >> 1)), *((const void **)&v2752 + 1), (size_t)&v2237[-*((_QWORD *)&v2752 + 1)]);
                    v2237 = v2239;
                  }
                  v2245 = &v2237[-8 * (v2242 >> 1)];
                  v2237 = &v2244[v2243];
                  *((_QWORD *)&v2752 + 1) = v2245;
                  *(_QWORD *)&v2753 = &v2244[v2243];
                }
              }
              *(_QWORD *)v2237 = *v2238;
              v2237 = (char *)(v2753 + 8);
              *(_QWORD *)&v2753 = v2753 + 8;
              v2238 = (_QWORD *)(v2654[29].i64[1] + 8);
              v2654[29].i64[1] = (uint64_t)v2238;
              --v2170;
            }
            while (v2170);
          }
          v2253 = v2654[30].i64[0];
          v2255 = (char *)*((_QWORD *)&v2752 + 1);
          v2254 = (char *)v2752;
          v2256 = (char *)*((_QWORD *)&v2753 + 1);
          while (v2253 != v2654[29].i64[1])
          {
            if (v2255 == v2254)
            {
              if (v2237 >= v2256)
              {
                if (v2256 == v2254)
                  v2261 = 1;
                else
                  v2261 = (v2256 - v2254) >> 2;
                v2262 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2261);
                v2264 = v2262;
                v2255 = &v2262[(2 * v2261 + 6) & 0xFFFFFFFFFFFFFFF8];
                v2265 = v2237 - v2254;
                v465 = v2237 == v2254;
                v2237 = v2255;
                if (!v465)
                {
                  v2237 = &v2255[v2265 & 0xFFFFFFFFFFFFFFF8];
                  v2266 = 8 * (v2265 >> 3);
                  v2267 = v2255;
                  v2268 = v2254;
                  do
                  {
                    v2269 = *(_QWORD *)v2268;
                    v2268 += 8;
                    *(_QWORD *)v2267 = v2269;
                    v2267 += 8;
                    v2266 -= 8;
                  }
                  while (v2266);
                }
                v2256 = &v2262[8 * v2263];
                if (v2254)
                  operator delete(v2254);
                v2254 = v2264;
              }
              else
              {
                v2257 = (v2256 - v2237) >> 3;
                if (v2257 >= -1)
                  v2258 = v2257 + 1;
                else
                  v2258 = v2257 + 2;
                v2259 = &v2237[8 * (v2258 >> 1)];
                v2255 = &v2259[-(v2237 - v2254)];
                v2260 = v2237 - v2254;
                v465 = v2237 == v2254;
                v2237 = v2259;
                if (!v465)
                  memmove(v2255, v2254, v2260);
              }
            }
            v2270 = *(_QWORD *)(v2253 - 8);
            v2253 -= 8;
            *((_QWORD *)v2255 - 1) = v2270;
            v2255 -= 8;
          }
          *(_QWORD *)&v2752 = v2254;
          *((_QWORD *)&v2752 + 1) = v2255;
          *(_QWORD *)&v2753 = v2237;
          *((_QWORD *)&v2753 + 1) = v2256;
          v2131 = (uint64_t *)v2654;
          v2273 = v2752;
          v2272 = (int64x2_t)v2753;
          *(_QWORD *)&v2752 = v2654[29].i64[0];
          v2271 = (void *)v2752;
          *((_QWORD *)&v2752 + 1) = v2253;
          v2654[29] = (int64x2_t)v2273;
          v2654[30] = v2272;
          v2654[31].i64[0] -= v2678;
          if (v2271)
          {
            operator delete(v2271);
            v2138 = (char *)v2654[30].i64[0];
          }
          else
          {
            v2138 = (char *)v2272.i64[0];
          }
        }
      }
      v2135 = v2131[63];
      v2139 = (char *)v2131[59];
      v2136 = v2131[62] + v2135;
      v2137 = v2136 >> 8;
      v2149 = v2697;
      v2145 = v2725;
    }
    v2342 = &v2139[8 * v2137];
    if (v2138 == v2139)
      v2343 = 0;
    else
      v2343 = *(_QWORD *)v2342 + 16 * v2136;
    v2344 = v2135 - v2149;
    if (v2135 - v2149 >= v2145)
    {
      v2348 = (_QWORD *)v2343;
      v2347 = &v2139[8 * v2137];
      if (!v2145)
        goto LABEL_2842;
    }
    else
    {
      v2345 = &v2144[2 * (v2135 - v2149 - v2145)];
      if (v2344 < v2145 >> 1)
        v2345 = &v2143[2 * v2344];
      if (v2345 == v2144)
      {
        v2348 = (_QWORD *)v2343;
        v2347 = &v2139[8 * v2137];
      }
      else
      {
        v2346 = v2345;
        v2347 = &v2139[8 * v2137];
        v2348 = (_QWORD *)v2343;
        do
        {
          *v2348 = *v2346;
          v2349 = v2346[1];
          v2348[1] = v2349;
          if (v2349)
          {
            v2350 = (unint64_t *)(v2349 + 8);
            do
              v2351 = __ldxr(v2350);
            while (__stxr(v2351 + 1, v2350));
          }
          v2348 += 2;
          if ((_QWORD *)((char *)v2348 - *(_QWORD *)v2347) == (_QWORD *)4096)
          {
            v2352 = (_QWORD *)*((_QWORD *)v2347 + 1);
            v2347 += 8;
            v2348 = v2352;
          }
          v2346 += 2;
          ++v2654[31].i64[1];
        }
        while (v2346 != v2144);
        v2144 = v2345;
      }
      v2145 = v2344;
      if (!v2344)
        goto LABEL_2842;
    }
    v2726 = v2145;
    v2353 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v2342, v2343, v2145);
    v2355 = v2353;
    v2356 = v2354;
    if (v2343 != v2354)
    {
      v2357 = v2353;
      v2358 = v2354;
      do
      {
        *(_OWORD *)v2348 = *(_OWORD *)v2358;
        v2348 += 2;
        *(_QWORD *)v2358 = 0;
        *(_QWORD *)(v2358 + 8) = 0;
        if ((_QWORD *)((char *)v2348 - *(_QWORD *)v2347) == (_QWORD *)4096)
        {
          v2359 = (_QWORD *)*((_QWORD *)v2347 + 1);
          v2347 += 8;
          v2348 = v2359;
        }
        v2358 += 16;
        if (v2358 - *v2357 == 4096)
        {
          v2360 = v2357[1];
          ++v2357;
          v2358 = v2360;
        }
        ++v2654[31].i64[1];
      }
      while (v2358 != v2343);
    }
    if (v2726 < v2344)
    {
      v2361 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v2342, v2343, v2344);
      v2363 = v2362;
      if (v2361 == v2355)
      {
        v2372 = v2356;
        v2369 = v2342;
        v2370 = v2343;
      }
      else
      {
        v2364 = v2361;
        v2367 = *v2355;
        v2366 = v2355 - 1;
        v2365 = v2367;
        v2368 = v2356;
        v2369 = v2342;
        v2370 = v2343;
        while (1)
        {
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v2365, v2368, v2369, v2370);
          v2369 = (char *)*((_QWORD *)&v2752 + 1);
          v2370 = v2753;
          if (v2366 == v2364)
            break;
          v2371 = *v2366--;
          v2365 = v2371;
          v2368 = v2371 + 4096;
        }
        v2372 = *v2364 + 4096;
        v2362 = v2363;
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v2362, v2372, v2369, v2370);
      v2343 = v2753;
      v2342 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v2143 != v2144)
    {
      v2373 = *(_QWORD *)v2342;
      while (1)
      {
        v2374 = v2343 - v2373;
        if (((char *)v2144 - (char *)v2143) >> 4 >= v2374 >> 4)
          v2375 = v2374 >> 4;
        else
          v2375 = ((char *)v2144 - (char *)v2143) >> 4;
        if (v2375)
        {
          v2376 = v2144 - 1;
          v2377 = -16 * v2375;
          v2378 = (_QWORD *)(v2343 - 16);
          do
          {
            v2379 = std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v2378, *(v2376 - 1), *v2376);
            v2376 -= 2;
            v2378 = v2379 - 2;
            v2377 += 16;
          }
          while (v2377);
        }
        v2144 -= 2 * v2375;
        if (v2144 == v2143)
          break;
        v2380 = *((_QWORD *)v2342 - 1);
        v2342 -= 8;
        v2373 = v2380;
        v2343 = v2380 + 4096;
      }
    }
    goto LABEL_2842;
  }
  v2151 = v2145 - v2134;
  v2696 = v2149;
  if (v2145 > v2134)
  {
    v2724 = v2145;
    v2152 = 32 * v2141 - 1;
    v2153 = v2138 - v2139;
    if (v2138 == v2139)
    {
      v2152 = 0;
      ++v2151;
    }
    if ((_BYTE)v2151)
      v2154 = (v2151 >> 8) + 1;
    else
      v2154 = v2151 >> 8;
    v2155 = v2152 - v2136;
    if (v2154 >= v2155 >> 8)
      v2156 = v2155 >> 8;
    else
      v2156 = v2154;
    if (v2154 <= v2155 >> 8)
    {
      for (v2654[31].i64[0] = v2134 + (v2156 << 8); v2156; --v2156)
      {
        v2177 = v2654[30].i64[0];
        *(_QWORD *)&v2752 = *(_QWORD *)(v2177 - 8);
        v2654[30].i64[0] = v2177 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[29].i64, &v2752);
      }
    }
    else
    {
      v2157 = v2154 - v2156;
      v2158 = v2654[29].i64[0];
      v2159 = v2654[30].i64[1] - v2158;
      if (v2154 - v2156 <= (v2159 >> 3) - (v2153 >> 3))
      {
        if (v2157)
        {
          if (v2139 == (char *)v2158)
          {
LABEL_2628:
            v2201 = v2157;
            do
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[29].i64, &v2752);
              --v2201;
            }
            while (v2201);
            v2156 += v2157;
            v2134 = v2654[31].u64[0];
          }
          else
          {
            while (1)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[29].i64, &v2752);
              v2199 = v2654[29].i64[1];
              v2200 = v2654[30].i64[0] - v2199 == 8 ? 255 : 256;
              v2134 = v2200 + v2654[31].i64[0];
              v2654[31].i64[0] = v2134;
              if (!--v2157)
                break;
              if (v2199 == v2150->i64[0])
                goto LABEL_2628;
            }
          }
        }
        for (v2654[31].i64[0] = v2134 + (v2156 << 8); v2156; --v2156)
        {
          v2202 = v2654[30].i64[0];
          *(_QWORD *)&v2752 = *(_QWORD *)(v2202 - 8);
          v2654[30].i64[0] = v2202 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[29].i64, &v2752);
        }
      }
      else
      {
        v2160 = v2153 >> 3;
        v2161 = v2138 == v2139;
        if (v2159 >> 2 <= v2157 + v2160)
          v2162 = v2157 + v2160;
        else
          v2162 = v2159 >> 2;
        v2754 = &v2654[30].i8[8];
        if (v2162)
          v2162 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2162);
        else
          v2163 = 0;
        v2203 = (v2154 << 8) - v2161;
        *(_QWORD *)&v2752 = v2162;
        *((_QWORD *)&v2752 + 1) = v2162;
        *(_QWORD *)&v2753 = v2162;
        *((_QWORD *)&v2753 + 1) = v2162 + 8 * v2163;
        do
        {
          *(_QWORD *)&v2732 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
          --v2157;
        }
        while (v2157);
        v2677 = v2203;
        v2204 = v2654[30].i64[0];
        for (i7 = (char *)v2753; v2156; --v2156)
        {
          if (i7 == *((char **)&v2753 + 1))
          {
            v2206 = (char *)*((_QWORD *)&v2752 + 1);
            v2207 = (void *)v2752;
            if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
            {
              if (i7 == (char *)v2752)
                v2213 = 1;
              else
                v2213 = (uint64_t)&i7[-v2752] >> 2;
              v2214 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2213);
              v2216 = i7 - v2206;
              v465 = i7 == v2206;
              i7 = &v2214[8 * (v2213 >> 2)];
              if (!v465)
              {
                i7 = &v2214[8 * (v2213 >> 2) + (v2216 & 0xFFFFFFFFFFFFFFF8)];
                v2217 = 8 * (v2216 >> 3);
                v2218 = &v2214[8 * (v2213 >> 2)];
                do
                {
                  v2219 = *(_QWORD *)v2206;
                  v2206 += 8;
                  *(_QWORD *)v2218 = v2219;
                  v2218 += 8;
                  v2217 -= 8;
                }
                while (v2217);
              }
              *(_QWORD *)&v2752 = v2214;
              *((_QWORD *)&v2752 + 1) = &v2214[8 * (v2213 >> 2)];
              *(_QWORD *)&v2753 = i7;
              *((_QWORD *)&v2753 + 1) = &v2214[8 * v2215];
              if (v2207)
                operator delete(v2207);
            }
            else
            {
              v2208 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
              if (v2208 >= -1)
                v2209 = v2208 + 1;
              else
                v2209 = v2208 + 2;
              v2210 = *((_QWORD *)&v2752 + 1) - 8 * (v2209 >> 1);
              v2211 = &i7[-*((_QWORD *)&v2752 + 1)];
              if (i7 != *((char **)&v2752 + 1))
              {
                memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v2209 >> 1)), *((const void **)&v2752 + 1), (size_t)&i7[-*((_QWORD *)&v2752 + 1)]);
                i7 = v2206;
              }
              v2212 = &i7[-8 * (v2209 >> 1)];
              i7 = &v2211[v2210];
              *((_QWORD *)&v2752 + 1) = v2212;
              *(_QWORD *)&v2753 = &v2211[v2210];
            }
          }
          *(_QWORD *)i7 = *(_QWORD *)(v2204 - 8);
          i7 = (char *)(v2753 + 8);
          *(_QWORD *)&v2753 = v2753 + 8;
          v2204 = v2654[30].i64[0] - 8;
          v2654[30].i64[0] = v2204;
        }
        v2220 = (uint64_t *)v2654[29].i64[1];
        if (v2220 == (uint64_t *)v2204)
        {
          v2220 = (uint64_t *)v2204;
          v2236 = (uint64_t *)v2654;
        }
        else
        {
          do
          {
            if (i7 == *((char **)&v2753 + 1))
            {
              v2221 = (char *)*((_QWORD *)&v2752 + 1);
              v2222 = (void *)v2752;
              if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
              {
                if (i7 == (char *)v2752)
                  v2228 = 1;
                else
                  v2228 = (uint64_t)&i7[-v2752] >> 2;
                v2229 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2228);
                v2231 = i7 - v2221;
                v465 = i7 == v2221;
                i7 = &v2229[8 * (v2228 >> 2)];
                if (!v465)
                {
                  i7 = &v2229[8 * (v2228 >> 2) + (v2231 & 0xFFFFFFFFFFFFFFF8)];
                  v2232 = 8 * (v2231 >> 3);
                  v2233 = &v2229[8 * (v2228 >> 2)];
                  do
                  {
                    v2234 = *(_QWORD *)v2221;
                    v2221 += 8;
                    *(_QWORD *)v2233 = v2234;
                    v2233 += 8;
                    v2232 -= 8;
                  }
                  while (v2232);
                }
                *(_QWORD *)&v2752 = v2229;
                *((_QWORD *)&v2752 + 1) = &v2229[8 * (v2228 >> 2)];
                *(_QWORD *)&v2753 = i7;
                *((_QWORD *)&v2753 + 1) = &v2229[8 * v2230];
                if (v2222)
                  operator delete(v2222);
              }
              else
              {
                v2223 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                if (v2223 >= -1)
                  v2224 = v2223 + 1;
                else
                  v2224 = v2223 + 2;
                v2225 = *((_QWORD *)&v2752 + 1) - 8 * (v2224 >> 1);
                v2226 = &i7[-*((_QWORD *)&v2752 + 1)];
                if (i7 != *((char **)&v2752 + 1))
                {
                  memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v2224 >> 1)), *((const void **)&v2752 + 1), (size_t)&i7[-*((_QWORD *)&v2752 + 1)]);
                  i7 = v2221;
                }
                v2227 = &i7[-8 * (v2224 >> 1)];
                i7 = &v2226[v2225];
                *((_QWORD *)&v2752 + 1) = v2227;
                *(_QWORD *)&v2753 = &v2226[v2225];
              }
            }
            v2235 = *v2220++;
            *(_QWORD *)i7 = v2235;
            i7 = (char *)(v2753 + 8);
            *(_QWORD *)&v2753 = v2753 + 8;
          }
          while (v2220 != (uint64_t *)v2654[30].i64[0]);
          v2236 = (uint64_t *)v2654;
          v2204 = v2654[29].i64[1];
        }
        v2274 = (void *)v2236[58];
        *((_OWORD *)v2236 + 29) = v2752;
        *(_QWORD *)&v2752 = v2274;
        *((_QWORD *)&v2752 + 1) = v2204;
        *(_QWORD *)&v2753 = v2220;
        v2275 = *((_QWORD *)&v2753 + 1);
        v2236[60] = (uint64_t)i7;
        v2236[61] = v2275;
        v2236[62] += v2677;
        v2131 = v2236;
        if (v2274)
          operator delete(v2274);
      }
    }
    v2134 = v2131[62];
    v2139 = (char *)v2131[59];
    v2138 = (char *)v2131[60];
    v2146 = v2134 >> 8;
    v2149 = v2696;
    v2145 = v2724;
  }
  v2276 = &v2139[8 * v2146];
  if (v2138 == v2139)
    v2277 = 0;
  else
    v2277 = (__int128 *)(*(_QWORD *)v2276 + 16 * v2134);
  if (v2145 <= v2149)
  {
    v2281 = v2277;
    v2280 = &v2139[8 * v2146];
    if (!v2145)
      goto LABEL_2842;
    goto LABEL_2745;
  }
  v2278 = &v2143[2 * (v2145 - v2149)];
  if (v2149 < v2145 >> 1)
    v2278 = &v2144[-2 * v2149];
  if (v2278 == v2143)
  {
    v2281 = v2277;
    v2280 = &v2139[8 * v2146];
  }
  else
  {
    v2279 = v2278;
    v2280 = v2276;
    v2281 = v2277;
    do
    {
      if (v2281 == *(__int128 **)v2280)
      {
        v2282 = *((_QWORD *)v2280 - 1);
        v2280 -= 8;
        v2281 = (__int128 *)(v2282 + 4096);
      }
      v2283 = *(v2279 - 2);
      v2279 -= 2;
      *((_QWORD *)v2281-- - 2) = v2283;
      v2284 = v2279[1];
      *((_QWORD *)v2281 + 1) = v2284;
      if (v2284)
      {
        v2285 = (unint64_t *)(v2284 + 8);
        do
          v2286 = __ldxr(v2285);
        while (__stxr(v2286 + 1, v2285));
        v2134 = v2654[31].u64[0];
      }
      --v2134;
      v2287 = v2654[31].i64[1] + 1;
      v2654[31].i64[0] = v2134;
      v2654[31].i64[1] = v2287;
    }
    while (v2279 != v2143);
    v2143 = v2278;
  }
  v2145 = v2149;
  if (v2149)
  {
LABEL_2745:
    v2288 = v2145;
    v2289 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v2276, (uint64_t)v2277, v2145);
    v2291 = v2289;
    v2292 = v2290;
    if (v2277 != v2290)
    {
      v2293 = v2289;
      v2294 = v2290;
      do
      {
        if (v2281 == *(__int128 **)v2280)
        {
          v2295 = *((_QWORD *)v2280 - 1);
          v2280 -= 8;
          v2281 = (__int128 *)(v2295 + 4096);
        }
        if (v2294 == *v2293)
        {
          v2296 = (uint64_t)*--v2293;
          v2294 = (__int128 *)(v2296 + 4096);
        }
        v2297 = *--v2294;
        *--v2281 = v2297;
        *(_QWORD *)v2294 = 0;
        *((_QWORD *)v2294 + 1) = 0;
        v2654[31] = vaddq_s64(v2654[31], (int64x2_t)xmmword_18F116EE0);
      }
      while (v2294 != v2277);
    }
    if (v2288 < v2696)
    {
      v2298 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v2276, (uint64_t)v2277, v2696);
      v2300 = v2299;
      if (v2291 == v2298)
      {
        v2309 = v2292;
        v2310 = v2300;
        v2306 = v2276;
        v2307 = (uint64_t)v2277;
      }
      else
      {
        v2301 = v2298;
        v2303 = *v2291;
        v2302 = v2291 + 1;
        v2304 = v2303 + 256;
        v2305 = v2292;
        v2306 = v2276;
        v2307 = (uint64_t)v2277;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v2305, v2304, v2306, v2307);
          v2306 = (char *)*((_QWORD *)&v2752 + 1);
          v2307 = v2753;
          if (v2302 == v2301)
            break;
          v2308 = *v2302++;
          v2305 = v2308;
          v2304 = v2308 + 256;
        }
        v2309 = *v2301;
        v2310 = v2300;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v2309, v2310, v2306, v2307);
      v2277 = (__int128 *)v2753;
      v2276 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v2143 != v2144)
    {
      v2311 = *(char **)v2276;
      while (1)
      {
        v2312 = v2311 - (char *)v2277 + 4096;
        if (((char *)v2144 - (char *)v2143) >> 4 >= v2312 >> 4)
          v2313 = v2312 >> 4;
        else
          v2313 = ((char *)v2144 - (char *)v2143) >> 4;
        if (v2313)
        {
          v2314 = &v2143[2 * v2313];
          do
          {
            v2315 = *v2143;
            v2316 = v2143[1];
            v2143 += 2;
            std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v2277++, v2315, v2316);
          }
          while (v2143 != v2314);
          v2143 = v2314;
        }
        if (v2143 == v2144)
          break;
        v2317 = (char *)*((_QWORD *)v2276 + 1);
        v2276 += 8;
        v2311 = v2317;
        v2277 = (__int128 *)v2317;
      }
    }
  }
LABEL_2842:
  v2381 = (uint64_t)(v2735.n128_u64[1] - v2735.n128_u64[0]) >> 4;
  v2382 = (uint64_t *)v2654;
  v2383 = (unint64_t *)&v2654[32];
  do
    v2384 = __ldaxr(v2383);
  while (__stlxr(v2384 + v2381, v2383));
  v2385 = v2654[35].i64[1];
  v2386 = v2654[35].u64[0];
  v2387 = v2386 + v2385;
  v2388 = (char *)v2654[33].i64[1];
  v2389 = (v2386 + v2385) >> 8;
  v2390 = &v2388[8 * v2389];
  v2391 = (char *)v2654[34].i64[0];
  v2392 = v2391 - v2388;
  if (v2391 == v2388)
  {
    v2393 = 0;
    v2399 = 0;
    v2395 = (uint64_t *)v2733.n128_u64[1];
    v2394 = (uint64_t *)v2733.n128_u64[0];
    v2396 = (uint64_t)(v2733.n128_u64[1] - v2733.n128_u64[0]) >> 4;
    v2397 = v2386 >> 8;
    v2398 = &v2388[8 * (v2386 >> 8)];
  }
  else
  {
    v2393 = *(_QWORD *)v2390 + 16 * v2387;
    v2395 = (uint64_t *)v2733.n128_u64[1];
    v2394 = (uint64_t *)v2733.n128_u64[0];
    v2396 = (uint64_t)(v2733.n128_u64[1] - v2733.n128_u64[0]) >> 4;
    v2397 = v2386 >> 8;
    v2398 = &v2388[8 * (v2386 >> 8)];
    v2399 = *(_QWORD *)v2398 + 16 * v2386;
  }
  if (v2393 == v2399)
    v2400 = 0;
  else
    v2400 = ((v2393 - *(_QWORD *)v2390) >> 4) + 32 * (v2390 - v2398) - ((v2399 - *(_QWORD *)v2398) >> 4);
  v2401 = v2654 + 33;
  if (v2400 >= v2385 - v2400)
  {
    v2415 = 32 * v2392 - 1;
    v2416 = v2391 - v2388;
    if (v2391 == v2388)
      v2415 = 0;
    v2417 = v2415 - v2387;
    v415 = v2396 >= v2417;
    v2418 = v2396 - v2417;
    if (v2418 != 0 && v415)
    {
      v2699 = v2400;
      v2728 = v2396;
      if (v2391 == v2388)
        v2419 = v2418 + 1;
      else
        v2419 = v2418;
      if ((_BYTE)v2419)
        v2420 = (v2419 >> 8) + 1;
      else
        v2420 = v2419 >> 8;
      if (v2420 >= v2397)
        v2421 = v2397;
      else
        v2421 = v2420;
      if (v2420 <= v2397)
      {
        for (v2654[35].i64[0] = v2386 - (v2421 << 8); v2421; --v2421)
        {
          v2429 = (_QWORD *)v2654[33].i64[1];
          v2432 = *v2429;
          v2430 = (char *)(v2429 + 1);
          v2431 = v2432;
          v2654[33].i64[1] = (uint64_t)v2430;
          if (v2391 == (char *)v2654[34].i64[1])
          {
            v2433 = (uint64_t)&v2430[-v2401->i64[0]];
            if ((unint64_t)v2430 <= v2401->i64[0])
            {
              if (v2391 == (char *)v2401->i64[0])
                v2440 = 1;
              else
                v2440 = (uint64_t)&v2391[-v2401->i64[0]] >> 2;
              v2441 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2440);
              v2443 = &v2441[8 * (v2440 >> 2)];
              v2444 = (uint64_t *)v2654[33].i64[1];
              v2391 = v2443;
              v2445 = v2654[34].i64[0] - (_QWORD)v2444;
              if (v2445)
              {
                v2391 = &v2443[v2445 & 0xFFFFFFFFFFFFFFF8];
                v2446 = 8 * (v2445 >> 3);
                v2447 = &v2441[8 * (v2440 >> 2)];
                do
                {
                  v2448 = *v2444++;
                  *(_QWORD *)v2447 = v2448;
                  v2447 += 8;
                  v2446 -= 8;
                }
                while (v2446);
              }
              v2449 = (void *)v2654[33].i64[0];
              v2654[33].i64[0] = (uint64_t)v2441;
              v2654[33].i64[1] = (uint64_t)v2443;
              v2654[34].i64[0] = (uint64_t)v2391;
              v2654[34].i64[1] = (uint64_t)&v2441[8 * v2442];
              if (v2449)
              {
                operator delete(v2449);
                v2391 = (char *)v2654[34].i64[0];
              }
            }
            else
            {
              v2434 = v2433 >> 3;
              v432 = v2433 >> 3 < -1;
              v2435 = (v2433 >> 3) + 2;
              if (v432)
                v2436 = v2435;
              else
                v2436 = v2434 + 1;
              v2437 = &v2430[-8 * (v2436 >> 1)];
              v2438 = v2391 - v2430;
              if (v2391 != v2430)
              {
                memmove(&v2430[-8 * (v2436 >> 1)], v2430, v2391 - v2430);
                v2391 = (char *)v2654[33].i64[1];
              }
              v2439 = &v2391[-8 * (v2436 >> 1)];
              v2391 = &v2437[v2438];
              v2654[34].i64[0] = (uint64_t)&v2437[v2438];
              v2654[33].i64[1] = (uint64_t)v2439;
            }
          }
          *(_QWORD *)v2391 = v2431;
          v2391 = (char *)(v2654[34].i64[0] + 8);
          v2654[34].i64[0] = (uint64_t)v2391;
        }
      }
      else
      {
        v2422 = v2420 - v2421;
        v2423 = v2654[34].i64[1] - v2654[33].i64[0];
        if (v2420 - v2421 <= (v2423 >> 3) - (v2416 >> 3))
        {
          if (v2422)
          {
            while (v2654[34].i64[1] != v2654[34].i64[0])
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[33].i64, &v2752);
              if (!--v2422)
              {
                v2391 = (char *)v2654[34].i64[0];
                goto LABEL_3066;
              }
            }
            for (i8 = 0; i8 != v2422; ++i8)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[33].i64, &v2752);
              v2391 = (char *)v2654[34].i64[0];
              if (&v2391[-v2654[33].i64[1]] == (char *)8)
                v2568 = 255;
              else
                v2568 = 256;
              v2569 = v2568 + v2654[35].i64[0];
              v2654[35].i64[0] = v2569;
            }
            v2421 += v2422;
          }
          else
          {
LABEL_3066:
            v2569 = v2654[35].i64[0];
          }
          for (v2654[35].i64[0] = v2569 - (v2421 << 8); v2421; --v2421)
          {
            v2570 = (_QWORD *)v2654[33].i64[1];
            v2573 = *v2570;
            v2571 = (char *)(v2570 + 1);
            v2572 = v2573;
            v2654[33].i64[1] = (uint64_t)v2571;
            if (v2391 == (char *)v2654[34].i64[1])
            {
              v2574 = (uint64_t)&v2571[-v2401->i64[0]];
              if ((unint64_t)v2571 <= v2401->i64[0])
              {
                if (v2391 == (char *)v2401->i64[0])
                  v2581 = 1;
                else
                  v2581 = (uint64_t)&v2391[-v2401->i64[0]] >> 2;
                v2582 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2581);
                v2584 = &v2582[8 * (v2581 >> 2)];
                v2585 = (uint64_t *)v2654[33].i64[1];
                v2391 = v2584;
                v2586 = v2654[34].i64[0] - (_QWORD)v2585;
                if (v2586)
                {
                  v2391 = &v2584[v2586 & 0xFFFFFFFFFFFFFFF8];
                  v2587 = 8 * (v2586 >> 3);
                  v2588 = &v2582[8 * (v2581 >> 2)];
                  do
                  {
                    v2589 = *v2585++;
                    *(_QWORD *)v2588 = v2589;
                    v2588 += 8;
                    v2587 -= 8;
                  }
                  while (v2587);
                }
                v2590 = (void *)v2654[33].i64[0];
                v2654[33].i64[0] = (uint64_t)v2582;
                v2654[33].i64[1] = (uint64_t)v2584;
                v2654[34].i64[0] = (uint64_t)v2391;
                v2654[34].i64[1] = (uint64_t)&v2582[8 * v2583];
                if (v2590)
                {
                  operator delete(v2590);
                  v2391 = (char *)v2654[34].i64[0];
                }
              }
              else
              {
                v2575 = v2574 >> 3;
                v432 = v2574 >> 3 < -1;
                v2576 = (v2574 >> 3) + 2;
                if (v432)
                  v2577 = v2576;
                else
                  v2577 = v2575 + 1;
                v2578 = &v2571[-8 * (v2577 >> 1)];
                v2579 = v2391 - v2571;
                if (v2391 != v2571)
                {
                  memmove(&v2571[-8 * (v2577 >> 1)], v2571, v2391 - v2571);
                  v2391 = (char *)v2654[33].i64[1];
                }
                v2580 = &v2391[-8 * (v2577 >> 1)];
                v2391 = &v2578[v2579];
                v2654[34].i64[0] = (uint64_t)&v2578[v2579];
                v2654[33].i64[1] = (uint64_t)v2580;
              }
            }
            *(_QWORD *)v2391 = v2572;
            v2391 = (char *)(v2654[34].i64[0] + 8);
            v2654[34].i64[0] = (uint64_t)v2391;
          }
        }
        else
        {
          v2424 = v2416 >> 3;
          v2425 = v2423 >> 2;
          if (v2425 <= v2422 + (v2416 >> 3))
            v2426 = (char *)(v2422 + (v2416 >> 3));
          else
            v2426 = (char *)v2425;
          v2754 = &v2654[34].i8[8];
          if (v2426)
            v2426 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>((unint64_t)v2426);
          else
            v2427 = 0;
          *(_QWORD *)&v2752 = v2426;
          *((_QWORD *)&v2752 + 1) = &v2426[8 * (v2424 - v2421)];
          *(_QWORD *)&v2753 = *((_QWORD *)&v2752 + 1);
          *((_QWORD *)&v2753 + 1) = &v2426[8 * v2427];
          do
          {
            *(_QWORD *)&v2732 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
            --v2422;
          }
          while (v2422);
          v2680 = v2421 << 8;
          v2488 = (char *)v2753;
          if (v2421)
          {
            v2489 = (_QWORD *)v2654[33].i64[1];
            do
            {
              if (v2488 == *((char **)&v2753 + 1))
              {
                v2490 = (char *)*((_QWORD *)&v2752 + 1);
                v2491 = (void *)v2752;
                if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
                {
                  if (v2488 == (char *)v2752)
                    v2497 = 1;
                  else
                    v2497 = (uint64_t)&v2488[-v2752] >> 2;
                  v2498 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2497);
                  v2500 = v2488 - v2490;
                  v465 = v2488 == v2490;
                  v2488 = &v2498[8 * (v2497 >> 2)];
                  if (!v465)
                  {
                    v2488 = &v2498[8 * (v2497 >> 2) + (v2500 & 0xFFFFFFFFFFFFFFF8)];
                    v2501 = 8 * (v2500 >> 3);
                    v2502 = &v2498[8 * (v2497 >> 2)];
                    do
                    {
                      v2503 = *(_QWORD *)v2490;
                      v2490 += 8;
                      *(_QWORD *)v2502 = v2503;
                      v2502 += 8;
                      v2501 -= 8;
                    }
                    while (v2501);
                  }
                  *(_QWORD *)&v2752 = v2498;
                  *((_QWORD *)&v2752 + 1) = &v2498[8 * (v2497 >> 2)];
                  *(_QWORD *)&v2753 = v2488;
                  *((_QWORD *)&v2753 + 1) = &v2498[8 * v2499];
                  if (v2491)
                    operator delete(v2491);
                }
                else
                {
                  v2492 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                  if (v2492 >= -1)
                    v2493 = v2492 + 1;
                  else
                    v2493 = v2492 + 2;
                  v2494 = *((_QWORD *)&v2752 + 1) - 8 * (v2493 >> 1);
                  v2495 = &v2488[-*((_QWORD *)&v2752 + 1)];
                  if (v2488 != *((char **)&v2752 + 1))
                  {
                    memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v2493 >> 1)), *((const void **)&v2752 + 1), (size_t)&v2488[-*((_QWORD *)&v2752 + 1)]);
                    v2488 = v2490;
                  }
                  v2496 = &v2488[-8 * (v2493 >> 1)];
                  v2488 = &v2495[v2494];
                  *((_QWORD *)&v2752 + 1) = v2496;
                  *(_QWORD *)&v2753 = &v2495[v2494];
                }
              }
              *(_QWORD *)v2488 = *v2489;
              v2488 = (char *)(v2753 + 8);
              *(_QWORD *)&v2753 = v2753 + 8;
              v2489 = (_QWORD *)(v2654[33].i64[1] + 8);
              v2654[33].i64[1] = (uint64_t)v2489;
              --v2421;
            }
            while (v2421);
          }
          v2504 = v2654[34].i64[0];
          v2506 = (char *)*((_QWORD *)&v2752 + 1);
          v2505 = (char *)v2752;
          v2507 = (char *)*((_QWORD *)&v2753 + 1);
          while (v2504 != v2654[33].i64[1])
          {
            if (v2506 == v2505)
            {
              if (v2488 >= v2507)
              {
                if (v2507 == v2505)
                  v2512 = 1;
                else
                  v2512 = (v2507 - v2505) >> 2;
                v2513 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2512);
                v2515 = v2513;
                v2506 = &v2513[(2 * v2512 + 6) & 0xFFFFFFFFFFFFFFF8];
                v2516 = v2488 - v2505;
                v465 = v2488 == v2505;
                v2488 = v2506;
                if (!v465)
                {
                  v2488 = &v2506[v2516 & 0xFFFFFFFFFFFFFFF8];
                  v2517 = 8 * (v2516 >> 3);
                  v2518 = v2506;
                  v2519 = v2505;
                  do
                  {
                    v2520 = *(_QWORD *)v2519;
                    v2519 += 8;
                    *(_QWORD *)v2518 = v2520;
                    v2518 += 8;
                    v2517 -= 8;
                  }
                  while (v2517);
                }
                v2507 = &v2513[8 * v2514];
                if (v2505)
                  operator delete(v2505);
                v2505 = v2515;
              }
              else
              {
                v2508 = (v2507 - v2488) >> 3;
                if (v2508 >= -1)
                  v2509 = v2508 + 1;
                else
                  v2509 = v2508 + 2;
                v2510 = &v2488[8 * (v2509 >> 1)];
                v2506 = &v2510[-(v2488 - v2505)];
                v2511 = v2488 - v2505;
                v465 = v2488 == v2505;
                v2488 = v2510;
                if (!v465)
                  memmove(v2506, v2505, v2511);
              }
            }
            v2521 = *(_QWORD *)(v2504 - 8);
            v2504 -= 8;
            *((_QWORD *)v2506 - 1) = v2521;
            v2506 -= 8;
          }
          *(_QWORD *)&v2752 = v2505;
          *((_QWORD *)&v2752 + 1) = v2506;
          *(_QWORD *)&v2753 = v2488;
          *((_QWORD *)&v2753 + 1) = v2507;
          v2382 = (uint64_t *)v2654;
          v2524 = v2752;
          v2523 = (int64x2_t)v2753;
          *(_QWORD *)&v2752 = v2654[33].i64[0];
          v2522 = (void *)v2752;
          *((_QWORD *)&v2752 + 1) = v2504;
          v2654[33] = (int64x2_t)v2524;
          v2654[34] = v2523;
          v2654[35].i64[0] -= v2680;
          if (v2522)
          {
            operator delete(v2522);
            v2391 = (char *)v2654[34].i64[0];
          }
          else
          {
            v2391 = (char *)v2523.i64[0];
          }
        }
      }
      v2385 = v2382[71];
      v2388 = (char *)v2382[67];
      v2387 = v2382[70] + v2385;
      v2389 = v2387 >> 8;
      v2400 = v2699;
      v2396 = v2728;
    }
    v2591 = &v2388[8 * v2389];
    if (v2391 == v2388)
      v2592 = 0;
    else
      v2592 = *(_QWORD *)v2591 + 16 * v2387;
    v2593 = v2385 - v2400;
    if (v2385 - v2400 >= v2396)
    {
      v2597 = (_QWORD *)v2592;
      v2596 = &v2388[8 * v2389];
      if (!v2396)
        goto LABEL_3130;
    }
    else
    {
      v2594 = &v2395[2 * (v2385 - v2400 - v2396)];
      if (v2593 < v2396 >> 1)
        v2594 = &v2394[2 * v2593];
      if (v2594 == v2395)
      {
        v2597 = (_QWORD *)v2592;
        v2596 = &v2388[8 * v2389];
      }
      else
      {
        v2595 = v2594;
        v2596 = &v2388[8 * v2389];
        v2597 = (_QWORD *)v2592;
        do
        {
          *v2597 = *v2595;
          v2598 = v2595[1];
          v2597[1] = v2598;
          if (v2598)
          {
            v2599 = (unint64_t *)(v2598 + 8);
            do
              v2600 = __ldxr(v2599);
            while (__stxr(v2600 + 1, v2599));
          }
          v2597 += 2;
          if ((_QWORD *)((char *)v2597 - *(_QWORD *)v2596) == (_QWORD *)4096)
          {
            v2601 = (_QWORD *)*((_QWORD *)v2596 + 1);
            v2596 += 8;
            v2597 = v2601;
          }
          v2595 += 2;
          ++v2654[35].i64[1];
        }
        while (v2595 != v2395);
        v2395 = v2594;
      }
      v2396 = v2593;
      if (!v2593)
        goto LABEL_3130;
    }
    v2729 = v2396;
    v2602 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v2591, v2592, v2396);
    v2604 = v2602;
    v2605 = v2603;
    if (v2592 != v2603)
    {
      v2606 = v2602;
      v2607 = v2603;
      do
      {
        *(_OWORD *)v2597 = *(_OWORD *)v2607;
        v2597 += 2;
        *(_QWORD *)v2607 = 0;
        *(_QWORD *)(v2607 + 8) = 0;
        if ((_QWORD *)((char *)v2597 - *(_QWORD *)v2596) == (_QWORD *)4096)
        {
          v2608 = (_QWORD *)*((_QWORD *)v2596 + 1);
          v2596 += 8;
          v2597 = v2608;
        }
        v2607 += 16;
        if (v2607 - *v2606 == 4096)
        {
          v2609 = v2606[1];
          ++v2606;
          v2607 = v2609;
        }
        ++v2654[35].i64[1];
      }
      while (v2607 != v2592);
    }
    if (v2729 < v2593)
    {
      v2610 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v2591, v2592, v2593);
      v2612 = v2611;
      if (v2610 == v2604)
      {
        v2621 = v2605;
        v2618 = v2591;
        v2619 = v2592;
      }
      else
      {
        v2613 = v2610;
        v2616 = *v2604;
        v2615 = v2604 - 1;
        v2614 = v2616;
        v2617 = v2605;
        v2618 = v2591;
        v2619 = v2592;
        while (1)
        {
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v2614, v2617, v2618, v2619);
          v2618 = (char *)*((_QWORD *)&v2752 + 1);
          v2619 = v2753;
          if (v2615 == v2613)
            break;
          v2620 = *v2615--;
          v2614 = v2620;
          v2617 = v2620 + 4096;
        }
        v2621 = *v2613 + 4096;
        v2611 = v2612;
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v2611, v2621, v2618, v2619);
      v2592 = v2753;
      v2591 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v2394 != v2395)
    {
      v2622 = *(_QWORD *)v2591;
      while (1)
      {
        v2623 = v2592 - v2622;
        if (((char *)v2395 - (char *)v2394) >> 4 >= v2623 >> 4)
          v2624 = v2623 >> 4;
        else
          v2624 = ((char *)v2395 - (char *)v2394) >> 4;
        if (v2624)
        {
          v2625 = v2395 - 1;
          v2626 = -16 * v2624;
          v2627 = (_QWORD *)(v2592 - 16);
          do
          {
            v2628 = std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v2627, *(v2625 - 1), *v2625);
            v2625 -= 2;
            v2627 = v2628 - 2;
            v2626 += 16;
          }
          while (v2626);
        }
        v2395 -= 2 * v2624;
        if (v2395 == v2394)
          break;
        v2629 = *((_QWORD *)v2591 - 1);
        v2591 -= 8;
        v2622 = v2629;
        v2592 = v2629 + 4096;
      }
    }
    goto LABEL_3130;
  }
  v2402 = v2396 - v2386;
  v2698 = v2400;
  if (v2396 > v2386)
  {
    v2727 = v2396;
    v2403 = 32 * v2392 - 1;
    v2404 = v2391 - v2388;
    if (v2391 == v2388)
    {
      v2403 = 0;
      ++v2402;
    }
    if ((_BYTE)v2402)
      v2405 = (v2402 >> 8) + 1;
    else
      v2405 = v2402 >> 8;
    v2406 = v2403 - v2387;
    if (v2405 >= v2406 >> 8)
      v2407 = v2406 >> 8;
    else
      v2407 = v2405;
    if (v2405 <= v2406 >> 8)
    {
      for (v2654[35].i64[0] = v2386 + (v2407 << 8); v2407; --v2407)
      {
        v2428 = v2654[34].i64[0];
        *(_QWORD *)&v2752 = *(_QWORD *)(v2428 - 8);
        v2654[34].i64[0] = v2428 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[33].i64, &v2752);
      }
    }
    else
    {
      v2408 = v2405 - v2407;
      v2409 = v2654[33].i64[0];
      v2410 = v2654[34].i64[1] - v2409;
      if (v2405 - v2407 <= (v2410 >> 3) - (v2404 >> 3))
      {
        if (v2408)
        {
          if (v2388 == (char *)v2409)
          {
LABEL_2916:
            v2452 = v2408;
            do
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back((int64x2_t *)v2654[33].i64, &v2752);
              --v2452;
            }
            while (v2452);
            v2407 += v2408;
            v2386 = v2654[35].u64[0];
          }
          else
          {
            while (1)
            {
              *(_QWORD *)&v2752 = operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[33].i64, &v2752);
              v2450 = v2654[33].i64[1];
              v2451 = v2654[34].i64[0] - v2450 == 8 ? 255 : 256;
              v2386 = v2451 + v2654[35].i64[0];
              v2654[35].i64[0] = v2386;
              if (!--v2408)
                break;
              if (v2450 == v2401->i64[0])
                goto LABEL_2916;
            }
          }
        }
        for (v2654[35].i64[0] = v2386 + (v2407 << 8); v2407; --v2407)
        {
          v2453 = v2654[34].i64[0];
          *(_QWORD *)&v2752 = *(_QWORD *)(v2453 - 8);
          v2654[34].i64[0] = v2453 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2654[33].i64, &v2752);
        }
      }
      else
      {
        v2411 = v2404 >> 3;
        v2412 = v2391 == v2388;
        if (v2410 >> 2 <= v2408 + v2411)
          v2413 = v2408 + v2411;
        else
          v2413 = v2410 >> 2;
        v2754 = &v2654[34].i8[8];
        if (v2413)
          v2413 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2413);
        else
          v2414 = 0;
        v2454 = (v2405 << 8) - v2412;
        *(_QWORD *)&v2752 = v2413;
        *((_QWORD *)&v2752 + 1) = v2413;
        *(_QWORD *)&v2753 = v2413;
        *((_QWORD *)&v2753 + 1) = v2413 + 8 * v2414;
        do
        {
          *(_QWORD *)&v2732 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2752, &v2732);
          --v2408;
        }
        while (v2408);
        v2679 = v2454;
        v2455 = v2654[34].i64[0];
        for (i9 = (char *)v2753; v2407; --v2407)
        {
          if (i9 == *((char **)&v2753 + 1))
          {
            v2457 = (char *)*((_QWORD *)&v2752 + 1);
            v2458 = (void *)v2752;
            if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
            {
              if (i9 == (char *)v2752)
                v2464 = 1;
              else
                v2464 = (uint64_t)&i9[-v2752] >> 2;
              v2465 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2464);
              v2467 = i9 - v2457;
              v465 = i9 == v2457;
              i9 = &v2465[8 * (v2464 >> 2)];
              if (!v465)
              {
                i9 = &v2465[8 * (v2464 >> 2) + (v2467 & 0xFFFFFFFFFFFFFFF8)];
                v2468 = 8 * (v2467 >> 3);
                v2469 = &v2465[8 * (v2464 >> 2)];
                do
                {
                  v2470 = *(_QWORD *)v2457;
                  v2457 += 8;
                  *(_QWORD *)v2469 = v2470;
                  v2469 += 8;
                  v2468 -= 8;
                }
                while (v2468);
              }
              *(_QWORD *)&v2752 = v2465;
              *((_QWORD *)&v2752 + 1) = &v2465[8 * (v2464 >> 2)];
              *(_QWORD *)&v2753 = i9;
              *((_QWORD *)&v2753 + 1) = &v2465[8 * v2466];
              if (v2458)
                operator delete(v2458);
            }
            else
            {
              v2459 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
              if (v2459 >= -1)
                v2460 = v2459 + 1;
              else
                v2460 = v2459 + 2;
              v2461 = *((_QWORD *)&v2752 + 1) - 8 * (v2460 >> 1);
              v2462 = &i9[-*((_QWORD *)&v2752 + 1)];
              if (i9 != *((char **)&v2752 + 1))
              {
                memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v2460 >> 1)), *((const void **)&v2752 + 1), (size_t)&i9[-*((_QWORD *)&v2752 + 1)]);
                i9 = v2457;
              }
              v2463 = &i9[-8 * (v2460 >> 1)];
              i9 = &v2462[v2461];
              *((_QWORD *)&v2752 + 1) = v2463;
              *(_QWORD *)&v2753 = &v2462[v2461];
            }
          }
          *(_QWORD *)i9 = *(_QWORD *)(v2455 - 8);
          i9 = (char *)(v2753 + 8);
          *(_QWORD *)&v2753 = v2753 + 8;
          v2455 = v2654[34].i64[0] - 8;
          v2654[34].i64[0] = v2455;
        }
        v2471 = (uint64_t *)v2654[33].i64[1];
        if (v2471 == (uint64_t *)v2455)
        {
          v2471 = (uint64_t *)v2455;
          v2487 = (uint64_t *)v2654;
        }
        else
        {
          do
          {
            if (i9 == *((char **)&v2753 + 1))
            {
              v2472 = (char *)*((_QWORD *)&v2752 + 1);
              v2473 = (void *)v2752;
              if (*((_QWORD *)&v2752 + 1) <= (unint64_t)v2752)
              {
                if (i9 == (char *)v2752)
                  v2479 = 1;
                else
                  v2479 = (uint64_t)&i9[-v2752] >> 2;
                v2480 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2479);
                v2482 = i9 - v2472;
                v465 = i9 == v2472;
                i9 = &v2480[8 * (v2479 >> 2)];
                if (!v465)
                {
                  i9 = &v2480[8 * (v2479 >> 2) + (v2482 & 0xFFFFFFFFFFFFFFF8)];
                  v2483 = 8 * (v2482 >> 3);
                  v2484 = &v2480[8 * (v2479 >> 2)];
                  do
                  {
                    v2485 = *(_QWORD *)v2472;
                    v2472 += 8;
                    *(_QWORD *)v2484 = v2485;
                    v2484 += 8;
                    v2483 -= 8;
                  }
                  while (v2483);
                }
                *(_QWORD *)&v2752 = v2480;
                *((_QWORD *)&v2752 + 1) = &v2480[8 * (v2479 >> 2)];
                *(_QWORD *)&v2753 = i9;
                *((_QWORD *)&v2753 + 1) = &v2480[8 * v2481];
                if (v2473)
                  operator delete(v2473);
              }
              else
              {
                v2474 = (uint64_t)(*((_QWORD *)&v2752 + 1) - v2752) >> 3;
                if (v2474 >= -1)
                  v2475 = v2474 + 1;
                else
                  v2475 = v2474 + 2;
                v2476 = *((_QWORD *)&v2752 + 1) - 8 * (v2475 >> 1);
                v2477 = &i9[-*((_QWORD *)&v2752 + 1)];
                if (i9 != *((char **)&v2752 + 1))
                {
                  memmove((void *)(*((_QWORD *)&v2752 + 1) - 8 * (v2475 >> 1)), *((const void **)&v2752 + 1), (size_t)&i9[-*((_QWORD *)&v2752 + 1)]);
                  i9 = v2472;
                }
                v2478 = &i9[-8 * (v2475 >> 1)];
                i9 = &v2477[v2476];
                *((_QWORD *)&v2752 + 1) = v2478;
                *(_QWORD *)&v2753 = &v2477[v2476];
              }
            }
            v2486 = *v2471++;
            *(_QWORD *)i9 = v2486;
            i9 = (char *)(v2753 + 8);
            *(_QWORD *)&v2753 = v2753 + 8;
          }
          while (v2471 != (uint64_t *)v2654[34].i64[0]);
          v2487 = (uint64_t *)v2654;
          v2455 = v2654[33].i64[1];
        }
        v2525 = (void *)v2487[66];
        *((_OWORD *)v2487 + 33) = v2752;
        *(_QWORD *)&v2752 = v2525;
        *((_QWORD *)&v2752 + 1) = v2455;
        v2487[68] = (uint64_t)i9;
        *(_QWORD *)&v2753 = v2471;
        v2487[69] = *((_QWORD *)&v2753 + 1);
        v2487[70] += v2679;
        v2382 = v2487;
        if (v2525)
          operator delete(v2525);
      }
    }
    v2388 = (char *)v2382[67];
    v2386 = v2382[70];
    v2391 = (char *)v2382[68];
    v2397 = v2386 >> 8;
    v2400 = v2698;
    v2396 = v2727;
  }
  v2526 = &v2388[8 * v2397];
  if (v2391 == v2388)
    v2527 = 0;
  else
    v2527 = (__int128 *)(*(_QWORD *)v2526 + 16 * v2386);
  if (v2396 <= v2400)
  {
    v2531 = v2527;
    v2530 = &v2388[8 * v2397];
    if (!v2396)
      goto LABEL_3130;
    goto LABEL_3033;
  }
  v2528 = &v2394[2 * (v2396 - v2400)];
  if (v2400 < v2396 >> 1)
    v2528 = &v2395[-2 * v2400];
  if (v2528 == v2394)
  {
    v2531 = v2527;
    v2530 = &v2388[8 * v2397];
  }
  else
  {
    v2529 = v2528;
    v2530 = v2526;
    v2531 = v2527;
    do
    {
      if (v2531 == *(__int128 **)v2530)
      {
        v2532 = *((_QWORD *)v2530 - 1);
        v2530 -= 8;
        v2531 = (__int128 *)(v2532 + 4096);
      }
      v2533 = *(v2529 - 2);
      v2529 -= 2;
      *((_QWORD *)v2531-- - 2) = v2533;
      v2534 = v2529[1];
      *((_QWORD *)v2531 + 1) = v2534;
      if (v2534)
      {
        v2535 = (unint64_t *)(v2534 + 8);
        do
          v2536 = __ldxr(v2535);
        while (__stxr(v2536 + 1, v2535));
        v2386 = v2654[35].u64[0];
      }
      v2654[35].i64[0] = --v2386;
      ++v2654[35].i64[1];
    }
    while (v2529 != v2394);
    v2394 = v2528;
  }
  v2396 = v2400;
  if (v2400)
  {
LABEL_3033:
    v2537 = v2396;
    v2538 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v2526, (uint64_t)v2527, v2396);
    v2540 = v2538;
    v2541 = v2539;
    if (v2527 != v2539)
    {
      v2542 = v2538;
      v2543 = v2539;
      do
      {
        if (v2531 == *(__int128 **)v2530)
        {
          v2544 = *((_QWORD *)v2530 - 1);
          v2530 -= 8;
          v2531 = (__int128 *)(v2544 + 4096);
        }
        if (v2543 == *v2542)
        {
          v2545 = (uint64_t)*--v2542;
          v2543 = (__int128 *)(v2545 + 4096);
        }
        v2546 = *--v2543;
        *--v2531 = v2546;
        *(_QWORD *)v2543 = 0;
        *((_QWORD *)v2543 + 1) = 0;
        v2654[35] = vaddq_s64(v2654[35], (int64x2_t)xmmword_18F116EE0);
      }
      while (v2543 != v2527);
    }
    if (v2537 < v2698)
    {
      v2547 = (__int128 **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v2526, (uint64_t)v2527, v2698);
      v2549 = v2548;
      if (v2540 == v2547)
      {
        v2558 = v2541;
        v2559 = v2549;
        v2555 = v2526;
        v2556 = (uint64_t)v2527;
      }
      else
      {
        v2550 = v2547;
        v2552 = *v2540;
        v2551 = v2540 + 1;
        v2553 = v2552 + 256;
        v2554 = v2541;
        v2555 = v2526;
        v2556 = (uint64_t)v2527;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v2554, v2553, v2555, v2556);
          v2555 = (char *)*((_QWORD *)&v2752 + 1);
          v2556 = v2753;
          if (v2551 == v2550)
            break;
          v2557 = *v2551++;
          v2554 = v2557;
          v2553 = v2557 + 256;
        }
        v2558 = *v2550;
        v2559 = v2549;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>((uint64_t)&v2752, v2558, v2559, v2555, v2556);
      v2527 = (__int128 *)v2753;
      v2526 = (char *)*((_QWORD *)&v2752 + 1);
    }
    if (v2394 != v2395)
    {
      v2560 = *(char **)v2526;
      while (1)
      {
        v2561 = v2560 - (char *)v2527 + 4096;
        if (((char *)v2395 - (char *)v2394) >> 4 >= v2561 >> 4)
          v2562 = v2561 >> 4;
        else
          v2562 = ((char *)v2395 - (char *)v2394) >> 4;
        if (v2562)
        {
          v2563 = &v2394[2 * v2562];
          do
          {
            v2564 = *v2394;
            v2565 = v2394[1];
            v2394 += 2;
            std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v2527++, v2564, v2565);
          }
          while (v2394 != v2563);
          v2394 = v2563;
        }
        if (v2394 == v2395)
          break;
        v2566 = (char *)*((_QWORD *)v2526 + 1);
        v2526 += 8;
        v2560 = v2566;
        v2527 = (__int128 *)v2566;
      }
    }
  }
LABEL_3130:
  v2630 = (uint64_t)(v2733.n128_u64[1] - v2733.n128_u64[0]) >> 4;
  v2631 = (unint64_t *)&v2654[36];
  do
    v2632 = __ldaxr(v2631);
  while (__stlxr(v2632 + v2630, v2631));
  do
    v2633 = __ldaxr(v7);
  while (__stlxr(v2633 - 1, v7));
  if (!v2633)
  {
    ((void (*)(std::__shared_weak_count *))v2643->__on_zero_shared)(v2643);
    std::__shared_weak_count::__release_weak(v2643);
  }
  *(_QWORD *)&v2752 = &v2733;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2752);
  *(_QWORD *)&v2752 = &v2735;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2752);
  *(_QWORD *)&v2752 = &v2737;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2752);
  *(_QWORD *)&v2752 = &v2739;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2752);
  *(_QWORD *)&v2752 = &v2741;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2752);
  *(_QWORD *)&v2752 = &v2743;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2752);
  *(_QWORD *)&v2752 = &v2745;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2752);
  *(_QWORD *)&v2752 = &v2748;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2752);
  *(_QWORD *)&v2752 = &v2750;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2752);
}

void sub_18EE899D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void ********a41,uint64_t a42,void *******a43,uint64_t a44,uint64_t a45,uint64_t a46,void ******a47,uint64_t a48,uint64_t a49,uint64_t a50,void *****a51,uint64_t a52,uint64_t a53,uint64_t a54,void ****a55,uint64_t a56,uint64_t a57,uint64_t a58,void ***a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  unint64_t *v63;
  uint64_t v64;
  unint64_t v66;

  if (*(_QWORD *)(v64 - 160))
    operator delete(*(void **)(v64 - 160));
  do
    v66 = __ldaxr(v63);
  while (__stlxr(v66 - 1, v63));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
    std::__shared_weak_count::__release_weak(a16);
  }
  a41 = &a43;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  a43 = &a47;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  a47 = &a51;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  a51 = &a55;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a51);
  a55 = &a59;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  a59 = &a63;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  a63 = (void **)(v64 - 248);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a63);
  *(_QWORD *)(v64 - 248) = v64 - 224;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v64 - 248));
  *(_QWORD *)(v64 - 224) = v64 - 192;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v64 - 224));
  _Unwind_Resume(a1);
}

void sub_18EE89F48(void *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v4;

  __cxa_begin_catch(a1);
  v2 = *(void ***)(v1 - 152);
  v3 = *(void ***)(v1 - 144);
  while (v2 != v3)
  {
    v4 = *v2++;
    operator delete(v4);
  }
  __cxa_rethrow();
}

void sub_18EE89F6C()
{
  __cxa_end_catch();
  JUMPOUT(0x18EE89F74);
}

void sub_18EE89F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  unint64_t *v20;
  unint64_t v21;

  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 16))(a20);
    JUMPOUT(0x18EE8A1B0);
  }
  JUMPOUT(0x18EE8A1B4);
}

void sub_18EE89FFC()
{
  JUMPOUT(0x18EE8A1B4);
}

void sub_18EE8A008()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)(v0 + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (v2)
    JUMPOUT(0x18EE8A1B4);
  JUMPOUT(0x18EE8A108);
}

void sub_18EE8A038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  do
    v41 = __ldaxr(v39);
  while (__stlxr(v41 - 1, v39));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
    std::__shared_weak_count::__release_weak(a34);
  }
  do
    v42 = __ldaxr(v40);
  while (__stlxr(v42 - 1, v40));
  if (!v42)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 16))(a20);
    JUMPOUT(0x18EE8A1B0);
  }
  JUMPOUT(0x18EE8A1B4);
}

void sub_18EE8A058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;

  do
    v36 = __ldaxr(v34);
  while (__stlxr(v36 - 1, v34));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
    std::__shared_weak_count::__release_weak(a34);
  }
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (!v37)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 16))(a20);
    JUMPOUT(0x18EE8A1B0);
  }
  JUMPOUT(0x18EE8A1B4);
}

void sub_18EE8A06C()
{
  JUMPOUT(0x18EE8A220);
}

void sub_18EE8A074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t ******a41,uint64_t a42,uint64_t *****a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t ****a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t ***a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t *v63;
  unint64_t *v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;

  do
    v68 = __ldaxr(v65);
  while (__stlxr(v68 - 1, v65));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
    std::__shared_weak_count::__release_weak(a26);
  }
  do
    v69 = __ldaxr(v63);
  while (__stlxr(v69 - 1, v63));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  do
    v70 = __ldaxr(v64);
  while (__stlxr(v70 - 1, v64));
  if (!v70)
  {
    ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
    std::__shared_weak_count::__release_weak(a16);
  }
  a41 = &a43;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a41);
  a43 = &a47;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a43);
  a47 = &a51;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a47);
  a51 = &a55;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a51);
  a55 = &a59;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a55);
  a59 = &a63;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a59);
  a63 = v66 - 248;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a63);
  *(_QWORD *)(v66 - 248) = v66 - 224;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](v66 - 248);
  *(_QWORD *)(v66 - 224) = v66 - 192;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](v66 - 224);
  _Unwind_Resume(a1);
}

void sub_18EE8A080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;

  do
    v36 = __ldaxr(v34);
  while (__stlxr(v36 - 1, v34));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
    std::__shared_weak_count::__release_weak(a34);
  }
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (!v37)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 16))(a20);
    JUMPOUT(0x18EE8A1B0);
  }
  JUMPOUT(0x18EE8A1B4);
}

void sub_18EE8A090()
{
  JUMPOUT(0x18EE8A188);
}

void sub_18EE8A09C()
{
  uint64_t v0;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v0 - 160);
  JUMPOUT(0x18EE8A0B8);
}

void sub_18EE8A0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;

  do
    v36 = __ldaxr(v34);
  while (__stlxr(v36 - 1, v34));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
    std::__shared_weak_count::__release_weak(a34);
  }
  do
    v37 = __ldaxr(v35);
  while (__stlxr(v37 - 1, v35));
  if (!v37)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 16))(a20);
    JUMPOUT(0x18EE8A1B0);
  }
  JUMPOUT(0x18EE8A1B4);
}

void sub_18EE8A0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,std::__shared_weak_count *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void ********a41,std::__shared_weak_count *a42,void *******a43,uint64_t a44,uint64_t a45,uint64_t a46,void ******a47,uint64_t a48,uint64_t a49,uint64_t a50,void *****a51,uint64_t a52,uint64_t a53,uint64_t a54,void ****a55,uint64_t a56,uint64_t a57,uint64_t a58,void ***a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  unint64_t *v63;
  unint64_t *v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t *v67;
  uint64_t v68;
  unint64_t v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;

  do
    v70 = __ldaxr(v63);
  while (__stlxr(v70 - 1, v63));
  if (!v70)
  {
    ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
    std::__shared_weak_count::__release_weak(a34);
  }
  do
    v71 = __ldaxr(v65);
  while (__stlxr(v71 - 1, v65));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))a35->__on_zero_shared)(a35);
    std::__shared_weak_count::__release_weak(a35);
  }
  v72 = a42;
  if (a42)
  {
    p_shared_owners = (unint64_t *)&a42->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  do
    v75 = __ldaxr(v67);
  while (__stlxr(v75 - 1, v67));
  if (!v75)
  {
    ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
    std::__shared_weak_count::__release_weak(a26);
  }
  do
    v76 = __ldaxr(v64);
  while (__stlxr(v76 - 1, v64));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  do
    v77 = __ldaxr(v66);
  while (__stlxr(v77 - 1, v66));
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
    std::__shared_weak_count::__release_weak(a16);
  }
  a41 = &a43;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  a43 = &a47;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  a47 = &a51;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  a51 = &a55;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a51);
  a55 = &a59;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  a59 = &a63;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  a63 = (void **)(v68 - 248);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a63);
  *(_QWORD *)(v68 - 248) = v68 - 224;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v68 - 248));
  *(_QWORD *)(v68 - 224) = v68 - 192;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v68 - 224));
  _Unwind_Resume(a1);
}

void sub_18EE8A120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,std::__shared_weak_count *a35)
{
  unint64_t *v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;

  do
    v38 = __ldaxr(v35);
  while (__stlxr(v38 - 1, v35));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))a35->__on_zero_shared)(a35);
    std::__shared_weak_count::__release_weak(a35);
  }
  do
    v39 = __ldaxr(v36);
  while (__stlxr(v39 - 1, v36));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
    std::__shared_weak_count::__release_weak(a34);
  }
  do
    v40 = __ldaxr(v37);
  while (__stlxr(v40 - 1, v37));
  if (!v40)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 16))(a20);
    JUMPOUT(0x18EE8A1B0);
  }
  JUMPOUT(0x18EE8A1B4);
}

uint64_t UnixFile_DataSource::SetSize(UnixFile_DataSource *this, off_t a2)
{
  uint64_t result;

  *((_QWORD *)this + 3) = -1;
  if (ftruncate(*((_DWORD *)this + 3), a2) == -1)
    return 1886547263;
  result = 0;
  *((_QWORD *)this + 3) = a2;
  return result;
}

__n128 MP4BoxInfoTable::Add(__n128 **a1, __n128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 *v7;
  __n128 result;
  unint64_t v9;
  __n128 v10;
  unint64_t v11;

  v10 = *a2;
  v3 = a2[1].n128_u64[1];
  v11 = a2[1].n128_u64[0];
  v4 = a2[2].n128_u64[0];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (__n128 *)operator new(0x38uLL);
  result = v10;
  v7[1] = v10;
  v7[2].n128_u64[0] = v11;
  v7[2].n128_u64[1] = v3;
  v7[3].n128_u64[0] = v4;
  v9 = (unint64_t)*a1;
  v7->n128_u64[0] = (unint64_t)*a1;
  v7->n128_u64[1] = (unint64_t)a1;
  *(_QWORD *)(v9 + 8) = v7;
  *a1 = v7;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

void sub_18EE8A3FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::decode_byte(_anonymous_namespace_ *this, const unsigned __int8 *a2, _QWORD *a3, unint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*a3 >= (unint64_t)a2)
  {
    v5 = 4294900721;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "AudioMetadataDeserializer.cpp";
      v10 = 1024;
      v11 = 155;
      _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Metadata serialized element truncated...", (uint8_t *)&v8, 0x12u);
    }
  }
  else
  {
    v5 = 0;
    *(_BYTE *)a4 = *((_BYTE *)this + (*a3)++);
  }
  return v5;
}

BOOL lessThan(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25[2];

  if (!a1)
    return 0;
  v2 = *a2;
  if (!*a2 || !*a1 || !*v2)
    return 0;
  v4 = (_QWORD *)a1[2];
  v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v2 = *a2;
  }
  v8 = (_QWORD *)v2[2];
  v9 = (std::__shared_weak_count *)v2[3];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v25[0] = v8;
  v25[1] = &v9->__vftable;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = lessThan(v4, v25);
    do
      v17 = __ldaxr(v14);
    while (__stlxr(v17 - 1, v14));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    v16 = lessThan(v4, v25);
  }
  if (v5)
  {
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9)
  {
    v21 = (unint64_t *)&v9->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v5)
  {
    v23 = (unint64_t *)&v5->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v16;
}

{
  _QWORD *v2;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25[2];

  if (!a1)
    return 0;
  v2 = *a2;
  if (!*a2 || !*a1 || !*v2)
    return 0;
  v4 = (_QWORD *)a1[2];
  v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v2 = *a2;
  }
  v8 = (_QWORD *)v2[2];
  v9 = (std::__shared_weak_count *)v2[3];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v25[0] = v8;
  v25[1] = &v9->__vftable;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = lessThan(v4, v25);
    do
      v17 = __ldaxr(v14);
    while (__stlxr(v17 - 1, v14));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    v16 = lessThan(v4, v25);
  }
  if (v5)
  {
    v19 = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9)
  {
    v21 = (unint64_t *)&v9->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v5)
  {
    v23 = (unint64_t *)&v5->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v16;
}

{
  _QWORD *v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  if (!a1)
    return 0;
  v2 = *a2;
  if (!*a2 || !*a1 || !*v2)
    return 0;
  v3 = (uint64_t *)a1[2];
  v4 = (std::__shared_weak_count *)a1[3];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v2 = *a2;
  }
  v7 = (uint64_t *)v2[2];
  v8 = (std::__shared_weak_count *)v2[3];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (v8)
  {
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = 0;
  if (v3 && v7)
  {
    v16 = *v3;
    v15 = v16 && (v17 = *v7) != 0 && *(double *)(v16 + 20) < *(double *)(v17 + 20);
  }
  if (v8)
  {
    v19 = (unint64_t *)&v8->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v4)
  {
    v21 = (unint64_t *)&v4->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8)
  {
    v23 = (unint64_t *)&v8->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v4)
  {
    v25 = (unint64_t *)&v4->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v15;
}

{
  _QWORD *v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  if (!a1)
    return 0;
  v2 = *a2;
  if (!*a2 || !*a1 || !*v2)
    return 0;
  v3 = (uint64_t *)a1[2];
  v4 = (std::__shared_weak_count *)a1[3];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v2 = *a2;
  }
  v7 = (uint64_t *)v2[2];
  v8 = (std::__shared_weak_count *)v2[3];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (v8)
  {
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = 0;
  if (v3 && v7)
  {
    v16 = *v3;
    v15 = v16 && (v17 = *v7) != 0 && *(double *)(v16 + 28) < *(double *)(v17 + 28);
  }
  if (v8)
  {
    v19 = (unint64_t *)&v8->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v4)
  {
    v21 = (unint64_t *)&v4->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8)
  {
    v23 = (unint64_t *)&v8->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v4)
  {
    v25 = (unint64_t *)&v4->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v15;
}

uint64_t AudioFormatProperty_EncapsulatedMagicCookieNameForCodingName(int *a1, _DWORD *a2, int *a3)
{
  uint64_t result;
  int v5;
  char v7;
  char v8;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;

  result = 1718449215;
  v5 = *a1;
  if (*a1 <= 1667327589)
  {
    if (v5 != 862416946 && v5 != 862417008)
    {
      if (v5 != 1299148630 || a1[1] != 4)
        return result;
      v7 = 0;
      do
      {
        v8 = v7;
        if ((v7 & 1) != 0)
          break;
        v7 = 1;
      }
      while (a1[2] != 1634754915);
      if ((v8 & 1) != 0)
        return result;
    }
LABEL_22:
    if (a3 && *a2 < 0xCu)
      return 561211770;
    v10 = 0;
    v11 = sPairedCodingNameAndConfigNames;
    while (1)
    {
      v12 = *v11;
      v11 += 2;
      if (v12 == a1[2])
        break;
      if (++v10 == 11)
        return result;
    }
    if (!a3)
      goto LABEL_32;
    v13 = sPairedCodingNameAndConfigNames[2 * v10 + 1];
    goto LABEL_31;
  }
  if (v5 > 1832149605)
  {
    if (v5 != 1832149606 && v5 != 1836069990)
      return result;
    goto LABEL_22;
  }
  if (v5 != 1667327590)
  {
    if (v5 != 1832149350)
      return result;
    goto LABEL_22;
  }
  result = 561211770;
  if (a1[1] != 4)
    return 561213539;
  if (!a3)
  {
LABEL_32:
    result = 0;
    *a2 = 12;
    return result;
  }
  if (*a2 >= 0xCu)
  {
    v13 = 1802857321;
    v5 = 1667327590;
LABEL_31:
    *a3 = v5;
    a3[1] = 4;
    a3[2] = v13;
    goto LABEL_32;
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::pack(uint64_t a1, uint64_t a2, int a3, __int16 *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *exception;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v20 = a2;
  v21 = a2;
  v5 = a2 + a3;
  v22 = v5;
  v23 = 0x2000000000;
  v6 = a2 & 3;
  v24 = v6;
  if (*((_BYTE *)a4 + 4) != 1 || (*((_BYTE *)a4 + 5) & 0xFE) != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v19 = "Metadata version mismatch";
    goto LABEL_28;
  }
  if (*a4 != -1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v19 = "metadata.header.syncWords has an incorrect value";
    goto LABEL_28;
  }
  if (a3 <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v19 = "Cannot pack metadata.header.syncWords";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v20, 0xFFFF, 0x10u);
  if (HIDWORD(v23) + 8 * ((int)v22 - (int)v21) - 32 <= 15)
  {
    exception = __cxa_allocate_exception(8uLL);
    v19 = "Cannot pack metadata.header.chunkSize";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v20, (unsigned __int16)a4[1], 0x10u);
  if (HIDWORD(v23) + 8 * ((int)v22 - (int)v21) - 32 <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v19 = "Cannot pack metadata.header.version.major";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v20, *((unsigned __int8 *)a4 + 4), 8u);
  if (HIDWORD(v23) + 8 * ((int)v22 - (int)v21) - 32 <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v19 = "Cannot pack metadata.header.version.minor";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v20, *((unsigned __int8 *)a4 + 5), 8u);
  if (HIDWORD(v23) + 8 * ((int)v22 - (int)v21) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v19 = "Cannot pack metadata.header.informationFrame";
    goto LABEL_28;
  }
  v9 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v20, *((unsigned __int8 *)a4 + 6), 1u);
  v10 = *((unsigned __int8 *)a4 + 5);
  if (v10 == 3)
  {
    APAC::MetadataBitStreamPacker::packMetadataFrame(a1, (uint64_t)(a4 + 725540), *((unsigned __int8 *)a4 + 6), &v20);
  }
  else if (v10 == 2)
  {
    if (*((_BYTE *)a4 + 6))
      APAC::MetadataBitStreamPacker::packStaticMetadata(v9, (unsigned __int8 *)a4 + 8, &v20);
    APAC::MetadataBitStreamPacker::packDynamicMetadata(a1, (unsigned __int8 *)a4 + 174192, &v20);
  }
  v12 = v20;
  v11 = v21;
  v13 = HIDWORD(v23);
  AT::TBitstreamWriter<unsigned int>::Flush((uint64_t)&v20);
  v20 = a2;
  v21 = a2;
  v22 = v5;
  v23 = 0x2000000000;
  v24 = v6;
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v20, (unsigned __int16)*a4, 0x10u);
  if (HIDWORD(v23) + 8 * ((int)v22 - (int)v21) - 32 <= 15)
  {
    exception = __cxa_allocate_exception(8uLL);
    v19 = "Cannot pack actualChunkSize";
LABEL_28:
    *exception = v19;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v14 = 8 * (v11 - v12) - v13;
  v15 = (v14 + 32) >> 3;
  if ((v14 & 7) != 0)
    v16 = v15 + 1;
  else
    v16 = v15;
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v20, (unsigned __int16)(v16 - 4), 0x10u);
  AT::TBitstreamWriter<unsigned int>::Flush((uint64_t)&v20);
  return v16;
}

uint64_t AT::TBitstreamWriter<unsigned int>::PutBits(uint64_t result, int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  char v8;
  _BYTE *v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  _DWORD *v14;
  int v15;

  if (a3 < 0x20)
    v3 = ~(-1 << a3);
  else
    v3 = -1;
  v4 = v3 & a2;
  v5 = *(_DWORD *)(result + 28);
  if (*(_DWORD *)(result + 32))
  {
    v6 = v5 - 24;
    if (v5 - 24 <= a3)
    {
      v7 = *(_DWORD *)(result + 24);
      do
      {
        a3 -= v6;
        v8 = (v7 << v6) | (v4 >> a3);
        v9 = *(_BYTE **)(result + 8);
        *(_QWORD *)(result + 8) = v9 + 1;
        *v9 = v8;
        v10 = *(_DWORD *)(result + 32) - 1;
        *(_DWORD *)(result + 32) = v10;
        *(_QWORD *)(result + 24) = 0x2000000000;
        v4 &= ~(-1 << a3);
        v5 = 32;
        if (a3 < 8)
          break;
        v7 = 0;
        v6 = 8;
      }
      while (v10);
    }
    if (a3)
    {
      *(_DWORD *)(result + 24) = (*(_DWORD *)(result + 24) << a3) | v4;
      *(_DWORD *)(result + 28) = v5 - a3;
    }
  }
  else
  {
    *(_DWORD *)(result + 28) = v5 - a3;
    if ((int)(v5 - a3) < 1)
    {
      v11 = *(_DWORD *)(result + 24);
      v12 = (v11 << v5) | (v4 >> (a3 - v5));
      v13 = (v11 << a3) | v4;
      if (v5 == a3)
        v12 = v13;
      *(_DWORD *)(result + 24) = v12;
      v14 = *(_DWORD **)(result + 8);
      if ((uint64_t)(*(_QWORD *)(result + 16) - (_QWORD)v14) >= 4)
      {
        *v14 = bswap32(v12);
        v15 = *(_DWORD *)(result + 28);
        *(_DWORD *)(result + 24) = v4 & ~(-1 << -(char)v15);
        *(_DWORD *)(result + 28) = v15 + 32;
        v14 = *(_DWORD **)(result + 8);
      }
      *(_QWORD *)(result + 8) = v14 + 1;
    }
    else
    {
      *(_DWORD *)(result + 24) = (*(_DWORD *)(result + 24) << a3) | v4;
    }
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packStaticMetadata(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  _BYTE *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2 + 424;
  v5 = a2 + 428;
  v6 = a2 + 27864;
  v7 = a2 + 173156;
  v8 = APAC::MetadataBitStreamPacker::packReferenceScreen(a1, a2, a3);
  v9 = APAC::MetadataBitStreamPacker::packCodeBookData(v8, v4, a3);
  v10 = APAC::MetadataBitStreamPacker::packGroupStaticData(v9, v5, a3);
  v11 = APAC::MetadataBitStreamPacker::packSceneComponenentStaticData(v10, v6, a3);
  return APAC::MetadataBitStreamPacker::packExtendedData(v11, v7, a3);
}

uint64_t APAC::MetadataBitStreamPacker::packDynamicMetadata(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v5 = a2 + 32516;
  v6 = a2 + 1271024;
  APAC::MetadataBitStreamPacker::packGroupDynamicData(a1, a2, a3);
  v7 = APAC::MetadataBitStreamPacker::packSceneComponenentDynamicData(a1, v5, a3);
  return APAC::MetadataBitStreamPacker::packExtendedData(v7, v6, a3);
}

uint64_t APAC::MetadataBitStreamPacker::packMetadataFrame(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  const char *v16;

  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v16 = "Cannot pack mdFrame.mRendererMetadataPresent";
    goto LABEL_15;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 1), 1u);
  if (*(_BYTE *)(a2 + 1))
  {
    if (a3)
    {
      if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v16 = "Cannot pack glbCfg.mHasData";
        goto LABEL_15;
      }
      v9 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 16), 1u);
      if (*(_BYTE *)(a2 + 16))
        APAC::MetadataBitStreamPacker::packGlobalConfig(v9, a2 + 16, a4);
      if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 10)
      {
        exception = __cxa_allocate_exception(8uLL);
        v16 = "Cannot pack mdFrame.mRendererMetadata.mGroupCount";
        goto LABEL_15;
      }
      v10 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int16 *)(a2 + 8), 0xBu);
      if (*(_WORD *)(a2 + 8))
      {
        v11 = 0;
        v12 = 0;
        v13 = 48 * *(unsigned __int16 *)(a2 + 8);
        while (1)
        {
          v14 = *(_QWORD *)(a2 + 4784);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 4792) - v14) >> 4) <= v12)
            break;
          v10 = APAC::MetadataBitStreamPacker::packGroupConfig(v10, (unsigned __int16 *)(v14 + v11), a4);
          ++v12;
          v11 += 48;
          if (v13 == v11)
            return APAC::MetadataBitStreamPacker::packRendererMetadata(a1, (unsigned __int16 *)(a2 + 8), a4);
        }
        exception = __cxa_allocate_exception(8uLL);
        v16 = "metadata.mMetadataFrame.mRendererMetadata.mGroupConfig does not have enough elements";
LABEL_15:
        *exception = v16;
        __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
      }
    }
    return APAC::MetadataBitStreamPacker::packRendererMetadata(a1, (unsigned __int16 *)(a2 + 8), a4);
  }
  return result;
}

uint64_t AT::TBitstreamWriter<unsigned int>::Flush(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;

  v1 = result;
  v2 = *(_DWORD *)(result + 28);
  if ((v2 & 7) != 0)
  {
    result = AT::TBitstreamWriter<unsigned int>::PutBits(result, 0, *(_DWORD *)(result + 28) & 7);
    v2 = *(_DWORD *)(v1 + 28);
  }
  if (v2 == 32)
  {
    v3 = *(_QWORD *)(v1 + 8);
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 8);
    v4 = 24 - v2;
    do
    {
      *(_BYTE *)v3 = *(_DWORD *)(v1 + 24) >> v4;
      v3 = *(_QWORD *)(v1 + 8) + 1;
      *(_QWORD *)(v1 + 8) = v3;
      v4 -= 8;
    }
    while (v4 != -8);
  }
  *(_DWORD *)(v1 + 28) = 32;
  *(_DWORD *)(v1 + 32) = v3 & 3;
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packGlobalConfig(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  _WORD *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *exception;
  const char *v12;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
  {
    exception = __cxa_allocate_exception(8uLL);
    v12 = "Cannot pack glbCfg.mNumParameters";
LABEL_37:
    *exception = v12;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int16 *)(a2 + 2), 0xBu);
  v6 = *(unsigned __int16 *)(a2 + 2);
  if (*(_WORD *)(a2 + 2))
  {
    v7 = (_WORD *)(a2 + 4);
    while (1)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack glbCfg.mParamIndexList[n]";
        goto LABEL_37;
      }
      result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, (unsigned __int16)*v7, 0xBu);
      switch(*v7)
      {
        case 0:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack glbCfg.mApplyPostProcReverb";
            goto LABEL_37;
          }
          v8 = *(unsigned __int8 *)(a2 + 4100);
          goto LABEL_12;
        case 1:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack glbCfg.mIs6DoF";
            goto LABEL_37;
          }
          v8 = *(unsigned __int8 *)(a2 + 4101);
          goto LABEL_12;
        case 2:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack glbCfg.mHasSceneRadiationPattern";
            goto LABEL_37;
          }
          v8 = *(unsigned __int8 *)(a2 + 4102);
LABEL_12:
          v9 = (uint64_t)a3;
          v10 = 1;
          goto LABEL_31;
        case 3:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 4)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack glbCfg.mTargetPlaybackSystemIndex";
            goto LABEL_37;
          }
          v8 = *(unsigned __int8 *)(a2 + 4103);
          v9 = (uint64_t)a3;
          v10 = 5;
          goto LABEL_31;
        case 4:
          result = APAC::MetadataBitStreamPacker::packAuthoringInformation(result, (unsigned __int8 *)(a2 + 4106), a3);
          goto LABEL_32;
        case 5:
          result = APAC::MetadataBitStreamPacker::packReferenceScreen(result, a2 + 4116, a3);
          goto LABEL_32;
        case 6:
          result = APAC::MetadataBitStreamPacker::packDBMD(result, (unsigned __int8 *)(a2 + 4156), a3);
          goto LABEL_32;
        case 7:
          result = APAC::MetadataBitStreamPacker::packBinauralization(result, (unsigned __int8 *)(a2 + 4480), a3);
          goto LABEL_32;
        case 8:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack glbCfg.mHCFilter.mDataLocationIndex";
            goto LABEL_37;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 4496), 2u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack glbCfg.mHCFilter.mCustomData_TableID";
            goto LABEL_37;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int16 *)(a2 + 4498), 9u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack glbCfg.mHCFilter.mCustomData_EntryID";
            goto LABEL_37;
          }
          v8 = *(unsigned __int16 *)(a2 + 4500);
          v9 = (uint64_t)a3;
          v10 = 9;
          goto LABEL_31;
        case 9:
          result = APAC::MetadataBitStreamPacker::packSPAD(result, (unsigned __int8 *)(a2 + 4504), a3);
          goto LABEL_32;
        case 0xA:
          result = APAC::MetadataBitStreamPacker::packDistanceAttenuation(result, (unsigned __int8 *)(a2 + 4648), a3);
          goto LABEL_32;
        case 0xB:
          result = APAC::MetadataBitStreamPacker::packPosition(result, (unsigned __int8 *)(a2 + 4668), a3);
          goto LABEL_32;
        case 0xC:
          result = APAC::MetadataBitStreamPacker::packGenericRenderingConfig(result, (unsigned __int8 *)(a2 + 4716), a3);
          goto LABEL_32;
        case 0xD:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 5)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack glbCfg.mContentKind";
            goto LABEL_37;
          }
          v8 = *(unsigned __int8 *)(a2 + 4104);
          v9 = (uint64_t)a3;
          v10 = 6;
          goto LABEL_31;
        case 0xE:
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, 0, 4u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack glbCfg.mMaxNumBlocks";
            goto LABEL_37;
          }
          v8 = *(unsigned __int8 *)(a2 + 4105);
          v9 = (uint64_t)a3;
          v10 = 8;
LABEL_31:
          result = AT::TBitstreamWriter<unsigned int>::PutBits(v9, v8, v10);
LABEL_32:
          ++v7;
          if (!--v6)
            return result;
          break;
        case 0xF:
          result = APAC::MetadataBitStreamPacker::packChannelBedHeadphoneMetadata(result, (unsigned __int8 *)(a2 + 4736), (uint64_t)a3);
          goto LABEL_32;
        default:
          goto LABEL_32;
      }
    }
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packGroupConfig(uint64_t a1, unsigned __int16 *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  const char *v12;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
  {
    exception = __cxa_allocate_exception(8uLL);
    v12 = "Cannot pack gpCfg.mGroupID";
    goto LABEL_46;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 0xBu);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v12 = "Cannot pack gpCfg.mIsGlobal";
    goto LABEL_46;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int8 *)a2 + 2), 1u);
  if (*((_BYTE *)a2 + 2))
    return result;
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v12 = "Cannot pack gpCfg.mIsPerASC";
    goto LABEL_46;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int8 *)a2 + 3), 1u);
  v6 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
  if (*((_BYTE *)a2 + 3))
  {
    if (v6 <= 10)
    {
      exception = __cxa_allocate_exception(8uLL);
      v12 = "Cannot pack gpCfg.mASCID";
      goto LABEL_46;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 0xBu);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      v12 = "Cannot pack gpCfg.mASCType";
      goto LABEL_46;
    }
    result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int8 *)a2 + 6), 3u);
    v7 = *((unsigned __int8 *)a2 + 6);
    if (v7 == 2)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 10)
      {
        v8 = a2 + 7;
        return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v8, 0xBu);
      }
      exception = __cxa_allocate_exception(8uLL);
      v12 = "Cannot pack gpCfg.mHOAID";
      goto LABEL_46;
    }
    if (v7 == 1)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack gpCfg.mObjectID";
        goto LABEL_46;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 0xBu);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack gpCfg.mIsObjectInBed";
        goto LABEL_46;
      }
      result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int8 *)a2 + 10), 1u);
      if (*((_BYTE *)a2 + 10))
      {
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 10)
        {
          v8 = a2 + 6;
          return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v8, 0xBu);
        }
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack gpCfg.mBedASCID";
        goto LABEL_46;
      }
    }
    else if (!*((_BYTE *)a2 + 6))
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 10)
      {
        v8 = a2 + 8;
        return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v8, 0xBu);
      }
      exception = __cxa_allocate_exception(8uLL);
      v12 = "Cannot pack gpCfg.mChBedID";
      goto LABEL_46;
    }
  }
  else
  {
    if (v6 <= 10)
    {
      exception = __cxa_allocate_exception(8uLL);
      v12 = "Cannot pack gpCfg.mMemberCount";
      goto LABEL_46;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[9], 0xBu);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v12 = "Cannot pack gpCfg.mHasConjunctMembers";
      goto LABEL_46;
    }
    result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int8 *)a2 + 20), 1u);
    if (*((_BYTE *)a2 + 20))
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 10)
      {
        v8 = a2 + 11;
        return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v8, 0xBu);
      }
      exception = __cxa_allocate_exception(8uLL);
      v12 = "Cannot pack gpCfg.mStartASCID";
LABEL_46:
      *exception = v12;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    if (a2[9])
    {
      v9 = 0;
      v10 = 2 * a2[9];
      while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 10)
      {
        result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int16 *)(*((_QWORD *)a2 + 3) + v9), 0xBu);
        v9 += 2;
        if (v10 == v9)
          return result;
      }
      exception = __cxa_allocate_exception(8uLL);
      v12 = "Cannot pack gpCfg.mASCIDList[n]";
      goto LABEL_46;
    }
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packRendererMetadata(uint64_t a1, unsigned __int16 *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Cannot pack rMd.mGroupCount";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 0xBu);
  if (*a2)
  {
    v7 = 0;
    v8 = 40200 * *a2;
    do
    {
      result = APAC::MetadataBitStreamPacker::packGroupData(a1, (unsigned __int8 *)(*((_QWORD *)a2 + 600) + v7), a3);
      v7 += 40200;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packGroupData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned __int16 *v8;
  _QWORD *exception;
  const char *v10;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack gpData.mHasData";
    goto LABEL_12;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2)
    return result;
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack gpData.mGroupID";
    goto LABEL_12;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 1), 0xBu);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 5)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack gpData.mNumBlocks";
LABEL_12:
    *exception = v10;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 6u);
  v7 = a2[4];
  if (a2[4])
  {
    v8 = (unsigned __int16 *)(a2 + 8);
    do
    {
      result = APAC::MetadataBitStreamPacker::packBlockData(a1, v8, a3);
      v8 += 628;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packBlockData(uint64_t a1, unsigned __int16 *a2, _DWORD *a3)
{
  uint64_t v5;
  _QWORD *exception;
  const char *v8;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 9)
  {
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack blkMd.mRtime";
    goto LABEL_10;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 0xAu);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack blkMd.mHasInterpolationLength";
    goto LABEL_10;
  }
  v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int8 *)a2 + 2), 1u);
  if (*((_BYTE *)a2 + 2))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 10)
    {
      v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 0xBu);
      return APAC::MetadataBitStreamPacker::packRendererData(v5, (uint64_t)(a2 + 4), a3);
    }
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack blkMd.mInterpolationLength";
LABEL_10:
    *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return APAC::MetadataBitStreamPacker::packRendererData(v5, (uint64_t)(a2 + 4), a3);
}

uint64_t APAC::MetadataBitStreamPacker::packRendererData(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  _WORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *exception;
  const char *v13;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
  {
    exception = __cxa_allocate_exception(8uLL);
    v13 = "Cannot pack rData.mNumParameters";
    goto LABEL_58;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int16 *)(a2 + 2), 0xBu);
  v6 = *(unsigned __int16 *)(a2 + 2);
  if (*(_WORD *)(a2 + 2))
  {
    v7 = (_WORD *)(a2 + 4);
    do
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
      {
        exception = __cxa_allocate_exception(8uLL);
        v13 = "Cannot pack rData.mParamIndexList[n]";
        goto LABEL_58;
      }
      result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, (unsigned __int16)*v7, 0xBu);
      switch(*v7)
      {
        case 0:
          v8 = (unsigned __int8 *)(a2 + 68);
          goto LABEL_43;
        case 1:
          result = APAC::MetadataBitStreamPacker::packObjectSpread(result, (unsigned __int8 *)(a2 + 116), a3);
          goto LABEL_52;
        case 2:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mGain";
            goto LABEL_58;
          }
          v9 = *(_DWORD *)(a2 + 132);
          goto LABEL_50;
        case 3:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mObjectDiffuse";
            goto LABEL_58;
          }
          v9 = *(_DWORD *)(a2 + 136);
          goto LABEL_50;
        case 4:
          result = APAC::MetadataBitStreamPacker::packObjectChannelLock(result, a2 + 140, a3);
          goto LABEL_52;
        case 5:
          result = APAC::MetadataBitStreamPacker::packObjectDivergence(result, a2 + 148, a3);
          goto LABEL_52;
        case 6:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mIsScreenSizeAdaptationEnabled";
            goto LABEL_58;
          }
          v9 = *(unsigned __int8 *)(a2 + 168);
          goto LABEL_46;
        case 7:
          result = APAC::MetadataBitStreamPacker::packZoneExclusion(result, (unsigned __int8 *)(a2 + 172), a3);
          goto LABEL_52;
        case 8:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mBinauralizationPreset";
            goto LABEL_58;
          }
          v9 = *(unsigned __int8 *)(a2 + 1037);
          goto LABEL_35;
        case 9:
          result = APAC::MetadataBitStreamPacker::packSceneReverb(result, (unsigned __int8 *)(a2 + 568), a3);
          goto LABEL_52;
        case 0xA:
          result = APAC::MetadataBitStreamPacker::packPostProcReverb(result, (unsigned __int8 *)(a2 + 780), a3);
          goto LABEL_52;
        case 0xB:
          result = APAC::MetadataBitStreamPacker::packRadiationPattern(result, (unsigned __int8 *)(a2 + 792), a3);
          goto LABEL_52;
        case 0xC:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mHPVirtualize.mBypass";
            goto LABEL_58;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 1024), 1u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mHPVirtualize.mHasDRR";
            goto LABEL_58;
          }
          result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 1025), 1u);
          if (!*(_BYTE *)(a2 + 1025))
            goto LABEL_52;
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mHPVirtualize.mDRR";
LABEL_58:
            *exception = v13;
            __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
          }
          v9 = *(_DWORD *)(a2 + 1028);
LABEL_50:
          v10 = (uint64_t)a3;
          v11 = 32;
          break;
        case 0xD:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mHeadLock.mHeadLocked";
            goto LABEL_58;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 1032), 1u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mHeadLock.mIsExternalized";
            goto LABEL_58;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 1033), 1u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mHeadLock.mReference";
            goto LABEL_58;
          }
          v9 = *(unsigned __int8 *)(a2 + 1034);
          goto LABEL_35;
        case 0xE:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mParallax";
            goto LABEL_58;
          }
          v9 = *(unsigned __int8 *)(a2 + 1035);
          goto LABEL_46;
        case 0xF:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mPreferredDoF.mDoFIndex";
            goto LABEL_58;
          }
          v9 = *(unsigned __int8 *)(a2 + 1036);
LABEL_35:
          v10 = (uint64_t)a3;
          v11 = 3;
          break;
        case 0x10:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mFieldOfView.mAzimuth";
            goto LABEL_58;
          }
          v9 = *(_DWORD *)(a2 + 1040);
          goto LABEL_50;
        case 0x11:
          result = APAC::MetadataBitStreamPacker::packMaskingZone(result, (unsigned __int8 *)(a2 + 1044), a3);
          goto LABEL_52;
        case 0x12:
          v8 = (unsigned __int8 *)(a2 + 1096);
          goto LABEL_43;
        case 0x13:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mHOA_Radius";
            goto LABEL_58;
          }
          v9 = *(_DWORD *)(a2 + 1144);
          goto LABEL_50;
        case 0x14:
          v8 = (unsigned __int8 *)(a2 + 1148);
LABEL_43:
          result = APAC::MetadataBitStreamPacker::packPosition(result, v8, a3);
          goto LABEL_52;
        case 0x15:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mHOA_InteriorOrExterior";
            goto LABEL_58;
          }
          v9 = *(unsigned __int8 *)(a2 + 1196);
LABEL_46:
          v10 = (uint64_t)a3;
          v11 = 1;
          break;
        case 0x16:
          result = APAC::MetadataBitStreamPacker::packHOARenderingMatrix(result, (unsigned __int8 *)(a2 + 1200), a3);
          goto LABEL_52;
        case 0x17:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mNFCRefDist";
            goto LABEL_58;
          }
          v9 = *(_DWORD *)(a2 + 1240);
          goto LABEL_50;
        case 0x18:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
          {
            exception = __cxa_allocate_exception(8uLL);
            v13 = "Cannot pack rData.mPropagationDelay.mProcessingIndex";
            goto LABEL_58;
          }
          v9 = *(unsigned __int8 *)(a2 + 1244);
          v10 = (uint64_t)a3;
          v11 = 2;
          break;
        default:
          goto LABEL_52;
      }
      result = AT::TBitstreamWriter<unsigned int>::PutBits(v10, v9, v11);
LABEL_52:
      ++v7;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packPosition(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  _QWORD *exception;
  const char *v10;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack pos.mPositionPresent";
    goto LABEL_21;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v10 = "Cannot pack pos.mIsCartesian";
      goto LABEL_21;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
    if (a2[1])
    {
      v5 = 0;
      while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)&a2[v5 + 20], 0x20u);
        v5 += 4;
        if (v5 == 12)
          goto LABEL_13;
      }
      exception = __cxa_allocate_exception(8uLL);
      v10 = "Cannot pack pos.mCoordinate[n]";
LABEL_21:
      *exception = v10;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v10 = "Cannot pack pos.mAzimuth";
      goto LABEL_21;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v10 = "Cannot pack pos.mElevation";
      goto LABEL_21;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v10 = "Cannot pack pos.mRadius";
      goto LABEL_21;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
  }
LABEL_13:
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack pos.mRotationPresent";
    goto LABEL_21;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[16], 1u);
  if (a2[16])
  {
    v7 = 0;
    v8 = a2 + 32;
    while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
    {
      result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)&v8[v7], 0x20u);
      v7 += 4;
      if (v7 == 16)
        return result;
    }
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack pos.mQuaternion[n]";
    goto LABEL_21;
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packObjectSpread(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v7;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack spread.mIsCartesian";
    goto LABEL_14;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack spread.mWidth";
    goto LABEL_14;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack spread.mHeight";
    goto LABEL_14;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack spread.mHasDepth";
    goto LABEL_14;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  if (a2[1])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
      return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack spread.mDepth";
LABEL_14:
    *exception = v7;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packObjectChannelLock(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v7;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack chLock.mHasMaxDistance";
    goto LABEL_8;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 1), 1u);
  if (*(_BYTE *)(a2 + 1))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
      return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 4), 0x20u);
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack chLock.mMaxDistance";
LABEL_8:
    *exception = v7;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packObjectDivergence(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v5;
  int *v6;
  _QWORD *exception;
  const char *v9;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack objDiv.mDivergence";
    goto LABEL_13;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)a2, 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack objDiv.mIsCartesian";
    goto LABEL_13;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 4), 1u);
  v5 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
  if (!*(_BYTE *)(a2 + 4))
  {
    if (v5 > 31)
    {
      v6 = (int *)(a2 + 16);
      return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v6, 0x20u);
    }
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack objDiv.mAzimuthRange";
LABEL_13:
    *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  if (v5 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack objDiv.mPositionRange";
    goto LABEL_13;
  }
  v6 = (int *)(a2 + 12);
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v6, 0x20u);
}

uint64_t APAC::MetadataBitStreamPacker::packZoneExclusion(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned __int8 *v7;
  int *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  _QWORD *exception;
  const char *v14;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v14 = "Cannot pack zoneExclusion.mIsZoneDefined";
    goto LABEL_45;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2)
    return result;
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v14 = "Cannot pack zoneExclusion.mKeepPreviousZone";
    goto LABEL_45;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  if (a2[1])
    return result;
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v14 = "Cannot pack zoneExclusion.mIsCartesian";
    goto LABEL_45;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 1u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
  {
    exception = __cxa_allocate_exception(8uLL);
    v14 = "Cannot pack zoneExclusion.mNumZones";
LABEL_45:
    *exception = v14;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[3], 4u);
  v6 = a2[3];
  if (a2[3])
  {
    v7 = a2 + 19;
    v8 = (int *)(a2 + 36);
    do
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v14 = "Cannot pack zoneExclusion.mUsePreDefinedZone[n]";
        goto LABEL_45;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(v7 - 15), 1u);
      if (*(v7 - 15))
      {
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
        {
          exception = __cxa_allocate_exception(8uLL);
          v14 = "Cannot pack zoneExclusion.mZoneIndex[n]";
          goto LABEL_45;
        }
        v9 = *v7;
        v10 = (uint64_t)a3;
        v11 = 4;
      }
      else
      {
        v12 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
        if (a2[2])
        {
          if (v12 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.cartesian.mMinX";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v8, 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.cartesian.mMaxX";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8[1], 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.cartesian.mMinY";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8[2], 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.cartesian.mMaxY";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8[3], 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.cartesian.mMinZ";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8[4], 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.cartesian.mMaxZ";
            goto LABEL_45;
          }
          v9 = v8[5];
        }
        else
        {
          if (v12 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.spherical.mMinAzimuth";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v8, 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.spherical.mMaxAzimuth";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8[1], 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.spherical.mMinElevation";
            goto LABEL_45;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8[2], 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v14 = "Cannot pack zoneExclusion.mZone[n].co_tu.spherical.mMaxElevation";
            goto LABEL_45;
          }
          v9 = v8[3];
        }
        v10 = (uint64_t)a3;
        v11 = 32;
      }
      result = AT::TBitstreamWriter<unsigned int>::PutBits(v10, v9, v11);
      ++v7;
      v8 += 6;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packMaskingZone(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  _QWORD *exception;
  const char *v12;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v12 = "Cannot pack maskingZone.mIsZoneDefined";
    goto LABEL_42;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v12 = "Cannot pack maskingZone.mUsePreDefinedZone";
      goto LABEL_42;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
    v6 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
    if (a2[1])
    {
      if (v6 > 3)
      {
        v7 = a2[3];
        v8 = (uint64_t)a3;
        v9 = 4;
        return AT::TBitstreamWriter<unsigned int>::PutBits(v8, v7, v9);
      }
      exception = __cxa_allocate_exception(8uLL);
      v12 = "Cannot pack maskingZone.mZoneIndex";
LABEL_42:
      *exception = v12;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    if (v6 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v12 = "Cannot pack maskingZone.mIsCartesian";
      goto LABEL_42;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 1u);
    v10 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
    if (a2[2])
    {
      if (v10 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack maskingZone.mZone.mMinX";
        goto LABEL_42;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack maskingZone.mZone.mMaxX";
        goto LABEL_42;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack maskingZone.mZone.mMinY";
        goto LABEL_42;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack maskingZone.mZone.mMaxY";
        goto LABEL_42;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 4), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack maskingZone.mZone.mMinZ";
        goto LABEL_42;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 5), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack maskingZone.mZone.mMaxZ";
        goto LABEL_42;
      }
      v7 = *((_DWORD *)a2 + 6);
    }
    else
    {
      if (v10 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack maskingZone.mZone.mMinAzimuth";
        goto LABEL_42;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 7), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack maskingZone.mZone.mMaxAzimuth";
        goto LABEL_42;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 8), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack maskingZone.mZone.mMinElevation";
        goto LABEL_42;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 9), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack maskingZone.mZone.mMaxElevation";
        goto LABEL_42;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 10), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack maskingZone.mZone.mMinDistance";
        goto LABEL_42;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 11), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack maskingZone.mZone.mMaxDistance";
        goto LABEL_42;
      }
      v7 = *((_DWORD *)a2 + 12);
    }
    v8 = (uint64_t)a3;
    v9 = 32;
    return AT::TBitstreamWriter<unsigned int>::PutBits(v8, v7, v9);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packSceneReverb(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *exception;
  const char *v11;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v11 = "Cannot pack reverb.mReverbProcIndex";
    goto LABEL_24;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 3u);
  v6 = *a2;
  switch(v6)
  {
    case 3:
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 1)
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 2u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 8)
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 3), 9u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 8)
          {
            v9 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 4), 9u);
            return APAC::MetadataBitStreamPacker::packFallbackRoomGeometry(v9, (uint64_t)(a2 + 12), a3);
          }
LABEL_21:
          exception = __cxa_allocate_exception(8uLL);
          v11 = "Cannot pack reverb.mCustomData_EntryID";
          goto LABEL_24;
        }
LABEL_20:
        exception = __cxa_allocate_exception(8uLL);
        v11 = "Cannot pack reverb.mCustomData_TableID";
        goto LABEL_24;
      }
LABEL_19:
      exception = __cxa_allocate_exception(8uLL);
      v11 = "Cannot pack reverb.mDataLocationIndex";
      goto LABEL_24;
    case 2:
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 1)
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 2u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 8)
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 3), 9u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 >= 9)
          {
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 4), 9u);
            if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 9)
            {
              v7 = *((unsigned __int16 *)a2 + 5);
              goto LABEL_12;
            }
            exception = __cxa_allocate_exception(8uLL);
            v11 = "Cannot pack reverb.mFallbackCustomeIR.mAUSMReverbPreset";
LABEL_24:
            *exception = v11;
            __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
          }
          goto LABEL_21;
        }
        goto LABEL_20;
      }
      goto LABEL_19;
    case 1:
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 9)
      {
        v7 = *((unsigned __int16 *)a2 + 1);
LABEL_12:
        v8 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7, 0xAu);
        return APAC::MetadataBitStreamPacker::packParametricReverb(v8, (uint64_t)(a2 + 144), a3);
      }
      exception = __cxa_allocate_exception(8uLL);
      v11 = "Cannot pack reverb.mAUSMReverbPreset";
      goto LABEL_24;
  }
  return result;
}

{
  uint64_t result;
  int v6;
  int v7;
  _QWORD *exception;
  const char *v9;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack sR.reverbProcIndex";
    goto LABEL_17;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 3u);
  v6 = *a2;
  if (v6 == 2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack sR.codeBookID";
      goto LABEL_17;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[5], 4u);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 9)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack sR.IRFilterID";
      goto LABEL_17;
    }
    v7 = *((unsigned __int16 *)a2 + 3);
LABEL_9:
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7, 0xAu);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 6)
      return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 7u);
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack sR.mixLevel";
LABEL_17:
    *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  if (v6 == 1)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 9)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack sR.reverbProcPreset";
      goto LABEL_17;
    }
    v7 = *((unsigned __int16 *)a2 + 1);
    goto LABEL_9;
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packPostProcReverb(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v7;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack ppReverb.mReverbProcIndex";
    goto LABEL_11;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 3u);
  if (*a2 == 1)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack ppReverb.mEarlyReflectionTimeProvided";
      goto LABEL_11;
    }
    result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
    if (a2[1])
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
        return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack ppReverb.mEarlyReflectionTime";
LABEL_11:
      *exception = v7;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packRadiationPattern(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  _QWORD *exception;
  const char *v8;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack radPattern.mAuSMProcIndex";
    goto LABEL_14;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 3u);
  switch(*a2)
  {
    case 1u:
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 9)
      {
        exception = __cxa_allocate_exception(8uLL);
        v8 = "Cannot pack radPattern.mSourceType";
LABEL_14:
        *exception = v8;
        __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
      }
      v6 = *((unsigned __int16 *)a2 + 1);
      return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6, 0xAu);
    case 2u:
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
      {
        exception = __cxa_allocate_exception(8uLL);
        v8 = "Cannot pack radPattern.mDataLocationIndex";
      }
      else
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 2u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
        {
          exception = __cxa_allocate_exception(8uLL);
          v8 = "Cannot pack radPattern.mCustomData_TableID";
        }
        else
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 3), 9u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 < 9)
          {
            exception = __cxa_allocate_exception(8uLL);
            v8 = "Cannot pack radPattern.mCustomData_EntryID";
          }
          else
          {
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 4), 9u);
            if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 9)
            {
              v6 = *((unsigned __int16 *)a2 + 5);
              return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6, 0xAu);
            }
            exception = __cxa_allocate_exception(8uLL);
            v8 = "Cannot pack radPattern.mFallbackCustomIR.mSourceType";
          }
        }
      }
      goto LABEL_14;
    case 3u:
      return APAC::MetadataBitStreamPacker::packParametricRadiationPattern(result, a2 + 16, a3);
    case 4u:
      return APAC::MetadataBitStreamPacker::packHOADirectivityModel(result, (_QWORD *)a2 + 22, a3);
    default:
      return result;
  }
}

{
  uint64_t result;
  _QWORD *exception;
  const char *v7;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack rP.isPHASE";
    goto LABEL_11;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack rP.AuSMProcIndex";
      goto LABEL_11;
    }
    result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 3u);
    if (a2[1] == 1)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 9)
        return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 1), 0xAu);
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack rP.sourceType";
LABEL_11:
      *exception = v7;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packHOARenderingMatrix(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  const char *v14;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v14 = "Cannot pack matrix.mDataLocationIndex";
    goto LABEL_17;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 2u);
  v6 = *a2;
  if (v6 == 2)
    goto LABEL_5;
  if (v6 == 1)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
    {
      exception = __cxa_allocate_exception(8uLL);
      v14 = "Cannot pack matrix.mHOAOrder";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[6], 4u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v14 = "Cannot pack matrix.mChannelLayoutTag";
      }
      else
      {
        result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
        v7 = 0;
        v8 = 0;
        v9 = (a2[6] + 1) * (a2[6] + 1);
        v10 = *((unsigned __int16 *)a2 + 4);
        while (1)
        {
          v11 = v7;
          v12 = v10;
          if ((_DWORD)v10)
            break;
LABEL_14:
          ++v8;
          v7 += 4 * v10;
          if (v8 == v9)
            return result;
        }
        while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
        {
          result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((_QWORD *)a2 + 2) + v11), 0x20u);
          v11 += 4;
          if (!--v12)
            goto LABEL_14;
        }
        exception = __cxa_allocate_exception(8uLL);
        v14 = "Cannot pack matrix.mCoeff[idx]";
      }
    }
    goto LABEL_17;
  }
  if (!*a2)
  {
LABEL_5:
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
    {
      exception = __cxa_allocate_exception(8uLL);
      v14 = "Cannot pack matrix.mCustomData_TableID";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 1), 9u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 8)
        return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 2), 9u);
      exception = __cxa_allocate_exception(8uLL);
      v14 = "Cannot pack matrix.mCustomData_EntryID";
    }
LABEL_17:
    *exception = v14;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packParametricRadiationPattern(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  const char *v14;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 4)
  {
    exception = __cxa_allocate_exception(8uLL);
    v14 = "Cannot pack parametric.mDirectivityModel";
    goto LABEL_31;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 5u);
  v6 = *a2;
  if (v6 == 3)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v14 = "Cannot pack parametric.mSphereRadius";
      goto LABEL_31;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 38), 0x20u);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v14 = "Cannot pack parametric.mCapOpeningAngle";
      goto LABEL_31;
    }
    return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 39), 0x20u);
  }
  if (v6 != 2)
  {
    if (v6 != 1)
      return result;
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 9)
    {
      v7 = *((unsigned int *)a2 + 1);
      result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, (unsigned __int16)(v7 - 1), 0xAu);
      if ((_DWORD)v7)
      {
        v8 = 0;
        v9 = 4 * v7;
        while (1)
        {
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 17)
            goto LABEL_25;
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((_QWORD *)a2 + 1) + v8) - 1, 0x12u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v14 = "Cannot pack parametric.mPattern[sb]";
            goto LABEL_31;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((_QWORD *)a2 + 4) + v8), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
            break;
          result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((_QWORD *)a2 + 7) + v8), 0x20u);
          v8 += 4;
          if (v9 == v8)
            return result;
        }
        exception = __cxa_allocate_exception(8uLL);
        v14 = "Cannot pack parametric.mSharpness[sb]";
        goto LABEL_31;
      }
      return result;
    }
LABEL_33:
    exception = __cxa_allocate_exception(8uLL);
    v14 = "Cannot pack tmpInt";
    goto LABEL_31;
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 17)
    goto LABEL_33;
  v10 = *((unsigned int *)a2 + 1);
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, (int)v10 - 1, 0x12u);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 4 * v10;
    while (1)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 17)
      {
LABEL_25:
        exception = __cxa_allocate_exception(8uLL);
        v14 = "Cannot pack tmpFreq";
        goto LABEL_31;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((_QWORD *)a2 + 1) + v11) - 1, 0x12u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v14 = "Cannot pack parametric.mInnerAngle[sb]";
        goto LABEL_31;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((_QWORD *)a2 + 10) + v11), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v14 = "Cannot pack parametric.mOuterAngle[sb]";
        goto LABEL_31;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((_QWORD *)a2 + 13) + v11), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
        break;
      result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((_QWORD *)a2 + 16) + v11), 0x20u);
      v11 += 4;
      if (v12 == v11)
        return result;
    }
    exception = __cxa_allocate_exception(8uLL);
    v14 = "Cannot pack parametric.mOuterGain[sb]";
LABEL_31:
    *exception = v14;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packHOADirectivityModel(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *exception;
  const char *v13;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 9)
  {
    exception = __cxa_allocate_exception(8uLL);
    v13 = "Cannot pack tmpUI10";
    goto LABEL_13;
  }
  v5 = *(unsigned __int16 *)a2;
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, (unsigned __int16)(v5 - 1), 0xAu);
  if ((_DWORD)v5)
  {
    v7 = 0;
    v8 = 2 * v5;
    while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 12)
    {
      result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, (unsigned __int16)(*(_WORD *)(a2[1] + v7) - 1), 0xDu);
      v7 += 2;
      if (v8 == v7)
        goto LABEL_6;
    }
    exception = __cxa_allocate_exception(8uLL);
    v13 = "Cannot pack tmpUI13";
LABEL_13:
    *exception = v13;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
LABEL_6:
  v9 = a2[4];
  if (a2[5] != v9)
  {
    v10 = 0;
    v11 = 1;
    while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
    {
      result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(v9 + 4 * v10), 0x20u);
      v10 = v11;
      v9 = a2[4];
      ++v11;
      if (v10 >= (a2[5] - v9) >> 2)
        return result;
    }
    exception = __cxa_allocate_exception(8uLL);
    v13 = "Cannot pack hoaModel.mCoeffs[n]";
    goto LABEL_13;
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packParametricReverb(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v7;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack reverbParams.mPreDelay.mHasData";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 4), 1u);
  if (*(_BYTE *)(a2 + 4))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack reverbParams.mPreDelay.mValue";
      goto LABEL_52;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)a2, 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack reverbParams.mRT60.mHasData";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 12), 1u);
  if (*(_BYTE *)(a2 + 12))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack reverbParams.mRT60.mValue";
      goto LABEL_52;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 8), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack reverbParams.mWetDryMix.mHasData";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 20), 1u);
  if (*(_BYTE *)(a2 + 20))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack reverbParams.mWetDryMix.mValue";
      goto LABEL_52;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 16), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack reverbParams.mReverbWidth.mHasData";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 28), 1u);
  if (*(_BYTE *)(a2 + 28))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack reverbParams.mReverbWidth.mValue";
      goto LABEL_52;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 24), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack reverbParams.mHFDampingCutoffFreq.mHasData";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 36), 1u);
  if (*(_BYTE *)(a2 + 36))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack reverbParams.mHFDampingCutoffFreq.mValue";
      goto LABEL_52;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 32), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack reverbParams.mEarlyReflectionOnly";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 40), 1u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack reverbParams.mEarlyReflectionLevel.mHasData";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 48), 1u);
  if (*(_BYTE *)(a2 + 48))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack reverbParams.mEarlyReflectionLevel.mValue";
      goto LABEL_52;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 44), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack reverbParams.mEarlyReflectionTime.mHasData";
    goto LABEL_52;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 56), 1u);
  if (*(_BYTE *)(a2 + 56))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack reverbParams.mEarlyReflectionTime.mValue";
      goto LABEL_52;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 52), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack reverbParams.mLateReverbLevel.mHasData";
    goto LABEL_52;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 64), 1u);
  if (*(_BYTE *)(a2 + 64))
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
      return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 60), 0x20u);
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack reverbParams.mLateReverbLevel.mValue";
LABEL_52:
    *exception = v7;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packFallbackRoomGeometry(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t i;
  _QWORD *exception;
  const char *v8;

  for (i = 0; i != 40; i += 4)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v8 = "Cannot pack fallbackRoomGeometry.mOctaveBandRt60[n]";
      goto LABEL_12;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + i + 4), 0x20u);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v8 = "Cannot pack fallbackRoomGeometry.mOctaveBandEarlyRoomEnergy[n]";
      goto LABEL_12;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + i + 44), 0x20u);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v8 = "Cannot pack fallbackRoomGeometry.mOctaveBandLateRoomEnergy[n]";
      goto LABEL_12;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + i + 84), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 < 32)
  {
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack fallbackRoomGeometry.mRoomVolume";
    goto LABEL_12;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 124), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack fallbackRoomGeometry.mRoomSurface";
LABEL_12:
    *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 128), 0x20u);
}

uint64_t APAC::MetadataBitStreamPacker::packAuthoringInformation(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  _QWORD *exception;
  const char *v7;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack authorInfo.mAuthoringToolNameIndex";
    goto LABEL_18;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 3u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack authorInfo.mAuthoringToolVersion.mMajor";
    goto LABEL_18;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 8u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack authorInfo.mAuthoringToolVersion.mMinor";
    goto LABEL_18;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 8u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack authorInfo.mAuthoringToolVersion.mPatch";
    goto LABEL_18;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[3], 8u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack authorInfo.mRendererNameIndex";
    goto LABEL_18;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 3u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack authorInfo.mRendererVersion.mMajor";
    goto LABEL_18;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[5], 8u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack authorInfo.mRendererVersion.mMinor";
    goto LABEL_18;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[6], 8u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack authorInfo.mRendererVersion.mPatch";
LABEL_18:
    *exception = v7;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[7], 8u);
}

uint64_t APAC::MetadataBitStreamPacker::packReferenceScreen(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v5;
  int *v6;
  _QWORD *exception;
  const char *v9;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack refScreen.mAspectRatio";
    goto LABEL_25;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)a2, 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack refScreen.mIsCartesian";
    goto LABEL_25;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 4), 1u);
  v5 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
  if (!*(_BYTE *)(a2 + 4))
  {
    if (v5 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack refScreen.mScreenCentrePosition.mAzimuth";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 20), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v9 = "Cannot pack refScreen.mScreenCentrePosition.mElevation";
      }
      else
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 24), 0x20u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v9 = "Cannot pack refScreen.mScreenCentrePosition.mRadius";
        }
        else
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 28), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
          {
            v6 = (int *)(a2 + 36);
            return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v6, 0x20u);
          }
          exception = __cxa_allocate_exception(8uLL);
          v9 = "Cannot pack refScreen.mScreenWidth.mAzimuth";
        }
      }
    }
LABEL_25:
    *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  if (v5 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack refScreen.mScreenCentrePosition.mX";
    goto LABEL_25;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 8), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack refScreen.mScreenCentrePosition.mY";
    goto LABEL_25;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 12), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack refScreen.mScreenCentrePosition.mZ";
    goto LABEL_25;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(a2 + 16), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack refScreen.mScreenWidth.mX";
    goto LABEL_25;
  }
  v6 = (int *)(a2 + 32);
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v6, 0x20u);
}

uint64_t APAC::MetadataBitStreamPacker::packDBMD(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int *v7;
  uint64_t v8;
  uint64_t result;
  unsigned __int8 *v10;
  int v11;
  _QWORD *exception;
  const char *v13;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v13 = "Cannot pack dbmd.mSurroundDownmix";
    goto LABEL_25;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 2u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 < 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v13 = "Cannot pack dbmd.mSurroundToStereoDownmix";
    goto LABEL_25;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 2u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v13 = "Cannot pack dbmd.mPositionAdjustment";
    goto LABEL_25;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 3u);
  v5 = 0;
  v6 = a2 + 3;
  v7 = (int *)(a2 + 16);
  do
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v13 = "Cannot pack dbmd.mIsAutoTrim[cfg]";
      goto LABEL_25;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v6[v5], 1u);
    if (!v6[v5])
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v13 = "Cannot pack dbmd.mMixingGains[cfg].mFrontGain";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(v7 - 1), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v13 = "Cannot pack dbmd.mMixingGains[cfg].mBackGain";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v7, 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v13 = "Cannot pack dbmd.mMixingGains[cfg].mTopGain";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7[1], 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v13 = "Cannot pack dbmd.mMixingGains[cfg].mEarLevelBalance";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7[2], 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v13 = "Cannot pack dbmd.mMixingGains[cfg].mHeightBalance";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7[3], 0x20u);
    }
    ++v5;
    v7 += 5;
  }
  while (v5 != 9);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 < 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v13 = "Cannot pack tmp";
LABEL_25:
    *exception = v13;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v8 = a2[192];
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, (v8 - 1), 7u);
  if ((_DWORD)v8)
  {
    v10 = a2 + 193;
    do
    {
      v11 = *v10++;
      result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v11, 1u);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packBinauralization(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  _QWORD *exception;
  const char *v10;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack binaural.mIsDirectBinauralization";
    goto LABEL_25;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v10 = "Cannot pack binaural.mChannelLayoutTag";
      goto LABEL_25;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack binaural.mHRTFType";
    goto LABEL_25;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[8], 3u);
  v6 = a2[8];
  if (v6 == 2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
    {
      exception = __cxa_allocate_exception(8uLL);
      v10 = "Cannot pack binaural.mDataLocationIndex";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[14], 2u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
      {
        exception = __cxa_allocate_exception(8uLL);
        v10 = "Cannot pack binaural.mCustomData_TableID";
      }
      else
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 5), 9u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
        {
          exception = __cxa_allocate_exception(8uLL);
          v10 = "Cannot pack binaural.mCustomData_EntryID";
        }
        else
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 6), 9u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 2)
          {
            v7 = a2 + 15;
            v8 = 3;
            return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v7, v8);
          }
          exception = __cxa_allocate_exception(8uLL);
          v10 = "Cannot pack binaural.mFallbackCustomHRTF.mHRTFType";
        }
      }
    }
LABEL_25:
    *exception = v10;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  if (v6 == 1)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 7)
    {
      v7 = a2 + 9;
      v8 = 8;
      return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v7, v8);
    }
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack binaural.mPredefinedIR_ID";
    goto LABEL_25;
  }
  return result;
}

{
  uint64_t result;
  _QWORD *exception;
  const char *v7;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack binaural.isDirectBinauralization";
    goto LABEL_14;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack binaural.channelLayoutTag";
      goto LABEL_14;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack binaural.HRTFType";
    goto LABEL_14;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[8], 3u);
  if (a2[8] == 1)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 3)
      return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[9], 4u);
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack binaural.codeBookID";
LABEL_14:
    *exception = v7;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packSPAD(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t v5;
  _QWORD *exception;
  const char *v8;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack spad.mDataLocationIndex";
    goto LABEL_8;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 2u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
  {
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack spad.mCustomData_TableID";
    goto LABEL_8;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 1), 9u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
  {
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack spad.mCustomData_EntryID";
LABEL_8:
    *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 2), 9u);
  return APAC::MetadataBitStreamPacker::packFallbackSPAD(v5, a2 + 8, a3);
}

uint64_t APAC::MetadataBitStreamPacker::packDistanceAttenuation(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  _QWORD *exception;
  const char *v7;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack distAttnParams.mAttnLawIndex";
    goto LABEL_12;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 3u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack distAttnParams.mDistNorm";
    goto LABEL_12;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack distAttnParams.mRefDistance";
    goto LABEL_12;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack distAttnParams.mMaxDistance";
    goto LABEL_12;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack distAttnParams.mAttnNormIndex";
LABEL_12:
    *exception = v7;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[16], 1u);
}

uint64_t APAC::MetadataBitStreamPacker::packGenericRenderingConfig(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *exception;
  const char *v11;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v11 = "Cannot pack cfg.mHasPreset";
    goto LABEL_19;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  v5 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
  if (!*a2)
  {
    if (v5 <= 1)
    {
      exception = __cxa_allocate_exception(8uLL);
      v11 = "Cannot pack cfg.mDataLocationIndex";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 2u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
      {
        exception = __cxa_allocate_exception(8uLL);
        v11 = "Cannot pack cfg.mCustomData_TableID";
      }
      else
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 3), 9u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 8)
        {
          exception = __cxa_allocate_exception(8uLL);
          v11 = "Cannot pack cfg.mCustomData_EntryID";
        }
        else
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 4), 9u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 10)
          {
            exception = __cxa_allocate_exception(8uLL);
            v11 = "Cannot pack cfg.mFallbackIndex";
          }
          else
          {
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 5), 0xBu);
            if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 16)
            {
              v6 = *((_DWORD *)a2 + 3);
              v7 = (uint64_t)a3;
              v8 = 17;
              return AT::TBitstreamWriter<unsigned int>::PutBits(v7, v6, v8);
            }
            exception = __cxa_allocate_exception(8uLL);
            v11 = "Cannot pack cfg.mDataByteSize";
          }
        }
      }
    }
LABEL_19:
    *exception = v11;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  if (v5 <= 10)
  {
    exception = __cxa_allocate_exception(8uLL);
    v11 = "Cannot pack cfg.mPresetIndex";
    goto LABEL_19;
  }
  v6 = *((unsigned __int16 *)a2 + 1);
  v7 = (uint64_t)a3;
  v8 = 11;
  return AT::TBitstreamWriter<unsigned int>::PutBits(v7, v6, v8);
}

uint64_t APAC::MetadataBitStreamPacker::packChannelBedHeadphoneMetadata(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  int v7;

  AT::TBitstreamWriter<unsigned int>::PutBits(a3, *a2 - 1, 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a3, a2[1] - 1, 8u);
  if (a2[1])
  {
    v5 = 0;
    do
    {
      AT::TBitstreamWriter<unsigned int>::PutBits(a3, *(unsigned __int8 *)(*((_QWORD *)a2 + 1) + v5++), 3u);
      v6 = a2[1];
    }
    while (v5 < v6);
    v7 = -3 * v6 - 8;
  }
  else
  {
    v7 = -8;
  }
  return AT::TBitstreamWriter<unsigned int>::PutBits(a3, 0, v7 + 8 * *a2);
}

uint64_t APAC::MetadataBitStreamPacker::packFallbackSPAD(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *exception;
  const char *v11;

  v5 = 2;
  do
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
    {
      exception = __cxa_allocate_exception(8uLL);
      v11 = "Cannot pack fallback.mDeviceID[n]";
      goto LABEL_25;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[v5], 8u);
    if (a2[v5])
      v6 = v5 == 9;
    else
      v6 = 1;
    ++v5;
  }
  while (!v6);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
  {
    exception = __cxa_allocate_exception(8uLL);
    v11 = "Cannot pack fallback.mOrientation";
    goto LABEL_25;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 4u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v11 = "Cannot pack fallback.mNumMicrophones";
    goto LABEL_25;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 8u);
  v8 = a2[1];
  if (a2[1])
  {
    v9 = 0;
    while (1)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
      {
        exception = __cxa_allocate_exception(8uLL);
        v11 = "Cannot pack fallback.mMicType[n]";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(*((_QWORD *)a2 + 2) + v9), 4u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v11 = "Cannot pack fallback.mMicPosAzimuth[n]";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v9), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v11 = "Cannot pack fallback.mMicPosElevation[n]";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((_QWORD *)a2 + 8) + 4 * v9), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v11 = "Cannot pack fallback.mMicPosRadius[n]";
        goto LABEL_25;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(_DWORD *)(*((_QWORD *)a2 + 11) + 4 * v9), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
        break;
      result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(*((_QWORD *)a2 + 14) + v9++), 3u);
      if (v8 == v9)
        return result;
    }
    exception = __cxa_allocate_exception(8uLL);
    v11 = "Cannot pack fallback.mMicDirection[n]";
LABEL_25:
    *exception = v11;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packGroupDynamicData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v6;
  unsigned __int8 *v7;
  _QWORD *exception;
  const char *v9;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack grpDD.hasData";
    goto LABEL_10;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2)
    return result;
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack grpDD.groupCount";
LABEL_10:
    *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 7u);
  if (a2[1])
  {
    v6 = 0;
    v7 = a2 + 4;
    do
    {
      result = APAC::MetadataBitStreamPacker::packDynamicGroup(result, v7, a3);
      ++v6;
      v7 += 256;
    }
    while (v6 < a2[1]);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packSceneComponenentDynamicData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *i;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  const char *v15;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v15 = "Cannot pack scDD.ASCCount";
LABEL_15:
    *exception = v15;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 7u);
  if (*a2)
  {
    v6 = 0;
    v7 = a2 + 8728;
    for (i = a2; ; i += 9752)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
      {
        exception = __cxa_allocate_exception(8uLL);
        v15 = "Cannot pack scDD.ASCData[n].ASCType";
        goto LABEL_15;
      }
      v9 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, i[4], 2u);
      v10 = i[4];
      if (v10 == 2)
        break;
      if (v10 == 1)
      {
        APAC::MetadataBitStreamPacker::packObjectMetadata(v9, i + 72, a3);
        goto LABEL_12;
      }
      if (!i[4])
      {
        v11 = i + 8;
LABEL_10:
        v9 = APAC::MetadataBitStreamPacker::packCommonDynamicMetadata(v9, v11, a3);
      }
LABEL_12:
      v12 = APAC::MetadataBitStreamPacker::packProprietaryDynamicData(v9, v7 - 1152, a3);
      v13 = APAC::MetadataBitStreamPacker::packExtendedData(v12, v7 - 1028, a3);
      result = APAC::MetadataBitStreamPacker::packExtendedData(v13, v7, a3);
      ++v6;
      v7 += 9752;
      if (v6 >= *a2)
        return result;
    }
    v11 = i + 40;
    goto LABEL_10;
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packExtendedData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  _QWORD *exception;
  const char *v10;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack extData.hasData";
    goto LABEL_9;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 9)
    {
      exception = __cxa_allocate_exception(8uLL);
      v10 = "Cannot pack extData.chunkSize";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)a2 + 1), 0xAu);
      v6 = *((unsigned __int16 *)a2 + 1) + 1;
      v7 = a2 + 4;
      while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 7)
      {
        v8 = *v7++;
        result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v8, 8u);
        if (!--v6)
          return result;
      }
      exception = __cxa_allocate_exception(8uLL);
      v10 = "Cannot pack extData.dataChunk[n]";
    }
LABEL_9:
    *exception = v10;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packCommonDynamicMetadata(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v7;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack cmmMd.hasADMMetadata";
    goto LABEL_29;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack cmmMd.absoluteDistance.hasData";
      goto LABEL_29;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 1u);
    if (a2[4])
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v7 = "Cannot pack cmmMd.absoluteDistance.distance";
        goto LABEL_29;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
    }
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack cmmMd.gain.hasData";
      goto LABEL_29;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[12], 1u);
    if (a2[12])
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v7 = "Cannot pack cmmMd.gain.isDB";
        goto LABEL_29;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[13], 1u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v7 = "Cannot pack cmmMd.gain.gain";
        goto LABEL_29;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 4), 0x20u);
    }
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack cmmMd.headLocked";
      goto LABEL_29;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[22], 1u);
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack cmmMd.headphoneVirtualize.hasData";
      goto LABEL_29;
    }
    result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[24], 1u);
    if (a2[24])
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v7 = "Cannot pack cmmMd.headphoneVirtualize.bypass";
      }
      else
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[25], 1u);
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
          return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 7), 0x20u);
        exception = __cxa_allocate_exception(8uLL);
        v7 = "Cannot pack cmmMd.headphoneVirtualize.DRR";
      }
LABEL_29:
      *exception = v7;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
  }
  return result;
}

void APAC::MetadataBitStreamPacker::packObjectMetadata(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  _QWORD *exception;
  const char *v9;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack objMd.objectID";
    goto LABEL_14;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 7u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack objMd.numBlocks";
LABEL_14:
    *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 4u);
  if (a2[1])
  {
    v5 = 0;
    v6 = a2 + 4;
    do
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v9 = "Cannot pack objMd.blockData[n].isNewBlk";
        goto LABEL_14;
      }
      v7 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v6, 1u);
      if (v5 && v5 < a2[1] - 1)
      {
        if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 9)
        {
          exception = __cxa_allocate_exception(8uLL);
          v9 = "Cannot pack objMd.blockData[n].rtime";
          goto LABEL_14;
        }
        v7 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int16 *)v6 + 1), 0xAu);
      }
      APAC::MetadataBitStreamPacker::packBlockData(v7, (uint64_t)v6, 513, a3);
      ++v5;
      v6 += 500;
    }
    while (v5 < a2[1]);
  }
}

uint64_t APAC::MetadataBitStreamPacker::packProprietaryDynamicData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *exception;
  const char *v12;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v12 = "Cannot pack pDD.hasData";
    goto LABEL_24;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2)
    return result;
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 4)
  {
    exception = __cxa_allocate_exception(8uLL);
    v12 = "Cannot pack pDD.numParameters";
LABEL_24:
    *exception = v12;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 5u);
  if (a2[1])
  {
    v6 = 0;
    v7 = a2 + 90;
    while (1)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 4)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack pDD.paramIndexList[n]";
        goto LABEL_24;
      }
      result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7[v6], 5u);
      switch(v7[v6])
      {
        case 0u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack pDD.lookDirection.azimuth";
            goto LABEL_24;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack pDD.lookDirection.elevation";
            goto LABEL_24;
          }
          v8 = *((_DWORD *)a2 + 2);
          v9 = (uint64_t)a3;
          v10 = 32;
          goto LABEL_20;
        case 1u:
          result = APAC::MetadataBitStreamPacker::packAudioSceneMaskingZone(result, a2 + 12, a3);
          goto LABEL_21;
        case 2u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack pDD.preferredDoF";
            goto LABEL_24;
          }
          v8 = a2[44];
          v9 = (uint64_t)a3;
          v10 = 3;
          goto LABEL_20;
        case 3u:
          result = APAC::MetadataBitStreamPacker::packParametricReverb(result, a2 + 48, a3);
          goto LABEL_21;
        case 4u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack pDD.headLocked";
            goto LABEL_24;
          }
          v8 = a2[88];
          goto LABEL_19;
        case 5u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack pDD.parallax";
            goto LABEL_24;
          }
          v8 = a2[89];
LABEL_19:
          v9 = (uint64_t)a3;
          v10 = 1;
LABEL_20:
          result = AT::TBitstreamWriter<unsigned int>::PutBits(v9, v8, v10);
LABEL_21:
          if (++v6 >= (unint64_t)a2[1])
            return result;
          break;
        default:
          goto LABEL_21;
      }
    }
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packAudioSceneMaskingZone(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  _QWORD *exception;
  const char *v12;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v12 = "Cannot pack mZ.isZoneDefined";
    goto LABEL_43;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2)
    return result;
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v12 = "Cannot pack mZ.keepPreviousZone";
    goto LABEL_43;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  if (!a2[1])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v12 = "Cannot pack mZ.usePreDefinedZone";
      goto LABEL_43;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 1u);
    v6 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
    if (a2[2])
    {
      if (v6 > 3)
      {
        v7 = a2[4];
        v8 = (uint64_t)a3;
        v9 = 4;
        return AT::TBitstreamWriter<unsigned int>::PutBits(v8, v7, v9);
      }
      exception = __cxa_allocate_exception(8uLL);
      v12 = "Cannot pack mZ.zoneIndex";
LABEL_43:
      *exception = v12;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    if (v6 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v12 = "Cannot pack mZ.cartesian";
      goto LABEL_43;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[3], 1u);
    v10 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
    if (a2[3])
    {
      if (v10 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack mZ.co_tu.cartesian.minX";
        goto LABEL_43;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack mZ.co_tu.cartesian.maxX";
        goto LABEL_43;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack mZ.co_tu.cartesian.minY";
        goto LABEL_43;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 4), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack mZ.co_tu.cartesian.maxY";
        goto LABEL_43;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 5), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack mZ.co_tu.cartesian.minZ";
        goto LABEL_43;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 6), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack mZ.co_tu.cartesian.maxZ";
        goto LABEL_43;
      }
    }
    else
    {
      if (v10 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack mZ.co_tu.spherical.minAzimuth";
        goto LABEL_43;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack mZ.co_tu.spherical.maxAzimuth";
        goto LABEL_43;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack mZ.co_tu.spherical.minElevation";
        goto LABEL_43;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 4), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack mZ.co_tu.spherical.maxElevation";
        goto LABEL_43;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 5), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack mZ.co_tu.spherical.minDistance";
        goto LABEL_43;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 6), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack mZ.co_tu.spherical.maxDistance";
        goto LABEL_43;
      }
    }
    v7 = *((_DWORD *)a2 + 7);
    v8 = (uint64_t)a3;
    v9 = 32;
    return AT::TBitstreamWriter<unsigned int>::PutBits(v8, v7, v9);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packParametricReverb(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v7;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack pR.hasPreDelay";
    goto LABEL_50;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack pR.preDelayMSec";
      goto LABEL_50;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack pR.hasEarlyReflectionLevel";
    goto LABEL_50;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  if (a2[1])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack pR.earlyReflectionLevel";
      goto LABEL_50;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack pR.hasRT60";
    goto LABEL_50;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 1u);
  if (a2[2])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack pR.RT60Msec";
      goto LABEL_50;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 4), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack pR.hasWetDryMix";
    goto LABEL_50;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[3], 1u);
  if (a2[3])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack pR.wetDryMix";
      goto LABEL_50;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 5), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack pR.hasReverbWidth";
    goto LABEL_50;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 1u);
  if (a2[4])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack pR.reverbWidth";
      goto LABEL_50;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 6), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack pR.hasHighFrequencyDamping";
    goto LABEL_50;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[5], 1u);
  if (a2[5])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack pR.highFrequencyDamping";
      goto LABEL_50;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 7), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack pR.hasEarlyReflectionOnly";
    goto LABEL_50;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[6], 1u);
  if (a2[6])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v7 = "Cannot pack pR.earlyReflectionOnly";
      goto LABEL_50;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[32], 1u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack pR.hasEarlyReflectionTime";
    goto LABEL_50;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[7], 1u);
  if (a2[7])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
      return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 9), 0x20u);
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack pR.earlyReflectionTimeMsec";
LABEL_50:
    *exception = v7;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return result;
}

void APAC::MetadataBitStreamPacker::packBlockData(uint64_t a1, uint64_t a2, __int16 a3, _DWORD *a4)
{
  int v7;
  _QWORD *exception;
  const char *v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  int *i;
  int v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unint64_t v25;

  if (!*(_BYTE *)a2)
    return;
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack blkData.cartesian";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 4), 1u);
  v7 = a4[7] + 8 * (a4[4] - a4[2]) - 32;
  if (*(_BYTE *)(a2 + 4))
  {
    if (v7 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.position.co_ut.cartesian.X";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 8), 0x20u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.position.co_ut.cartesian.Y";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 12), 0x20u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.position.co_ut.cartesian.Z";
      goto LABEL_156;
    }
  }
  else
  {
    if (v7 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.position.co_ut.spherical.azimuth";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 8), 0x20u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.position.co_ut.spherical.elevation";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 12), 0x20u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.position.co_ut.spherical.distance";
      goto LABEL_156;
    }
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 16), 0x20u);
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack blkData.hasADMMetadata";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 20), 1u);
  if (!*(_BYTE *)(a2 + 20))
    return;
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack blkData.absoluteDistance.hasData";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 24), 1u);
  if (*(_BYTE *)(a2 + 24))
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.absoluteDistance.distance";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 28), 0x20u);
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack blkData.spread.hasData";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 32), 1u);
  if (*(_BYTE *)(a2 + 32))
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.spread.width";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 36), 0x20u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.spread.height";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 40), 0x20u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.spread.depth";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 44), 0x20u);
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack blkData.gain.hasData";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 48), 1u);
  if (*(_BYTE *)(a2 + 48))
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.gain.isDB";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 49), 1u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.gain.gain";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 52), 0x20u);
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack blkData.diffuse.hasData";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 56), 1u);
  if (*(_BYTE *)(a2 + 56))
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.diffuse.diffuse";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 60), 0x20u);
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack blkData.channelLock.channelLock";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 64), 1u);
  if (*(_BYTE *)(a2 + 64))
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.channelLock.hasMaxDistance";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 65), 1u);
    if (*(_BYTE *)(a2 + 65))
    {
      if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
      {
        exception = __cxa_allocate_exception(8uLL);
        v9 = "Cannot pack blkData.channelLock.maxDistance";
        goto LABEL_156;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 68), 0x20u);
    }
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack blkData.objectDivergence.hasData";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 72), 1u);
  if (*(_BYTE *)(a2 + 72))
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.objectDivergence.objectDivergence";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 76), 0x20u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.objectDivergence.positionOrAzimuthRange";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 88), 0x20u);
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack blkData.screenRef";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 92), 1u);
  v10 = a3;
  v12 = a3 == 1;
  v11 = HIBYTE(a3);
  v12 = v12 && v11 == 1;
  v13 = v12;
  if (v12)
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.importance.hasData";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 93), 1u);
    if (*(_BYTE *)(a2 + 93))
    {
      if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 3)
      {
        exception = __cxa_allocate_exception(8uLL);
        v9 = "Cannot pack blkData.importance.importance";
        goto LABEL_156;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 94), 4u);
    }
  }
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack blkData.headLocked";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 95), 1u);
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack blkData.headphoneVirtualize.hasData";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 96), 1u);
  if (*(_BYTE *)(a2 + 96))
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.headphoneVirtualize.bypass";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 97), 1u);
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack blkData.headphoneVirtualize.DRR";
      goto LABEL_156;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(_DWORD *)(a2 + 100), 0x20u);
  }
  if (v13)
  {
    if (a4[7] + 8 * (a4[4] - a4[2]) - 32 > 3)
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 106), 4u);
      if (*(_BYTE *)(a2 + 106))
      {
        v14 = 0;
        for (i = (int *)(a2 + 140); ; i += 6)
        {
          v16 = a4[7] + 8 * (a4[4] - a4[2]) - 32;
          if (*(_BYTE *)(a2 + 4))
          {
            if (v16 <= 31)
              goto LABEL_110;
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *i, 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
              goto LABEL_111;
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, i[1], 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
              goto LABEL_112;
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, i[2], 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
              goto LABEL_113;
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, i[3], 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
              goto LABEL_114;
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, i[4], 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
              goto LABEL_115;
            v17 = (int *)(a2 + 24 * v14 + 160);
          }
          else
          {
            if (v16 <= 31)
              goto LABEL_116;
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *i, 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
              goto LABEL_117;
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, i[1], 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
              goto LABEL_118;
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, i[2], 0x20u);
            if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
              goto LABEL_119;
            v17 = i + 3;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *v17, 0x20u);
          if (++v14 >= (unint64_t)*(unsigned __int8 *)(a2 + 106))
            return;
        }
      }
      return;
    }
    goto LABEL_150;
  }
  if (v10 != 1 || v11 != 2)
    return;
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack blkData.zoneExclusion.isZoneDefined";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 104), 1u);
  if (!*(_BYTE *)(a2 + 104))
    return;
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack blkData.zoneExclusion.keepPreviousZone";
LABEL_156:
    *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 105), 1u);
  if (*(_BYTE *)(a2 + 105))
    return;
  if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 3)
  {
LABEL_150:
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack blkData.zoneExclusion.numZones";
    goto LABEL_156;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(a2 + 106), 4u);
  if (*(_BYTE *)(a2 + 106))
  {
    v18 = a2 + 160;
    v19 = (int *)(a2 + 140);
    v20 = 122;
    do
    {
      if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v9 = "Cannot pack blkData.zoneExclusion.usePreDefinedZone[w]";
        goto LABEL_156;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *(unsigned __int8 *)(v18 + v20 - 175), 1u);
      if (*(_BYTE *)(v18 + v20 - 175))
      {
        if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 3)
        {
          exception = __cxa_allocate_exception(8uLL);
          v9 = "Cannot pack blkData.zoneExclusion.zoneIndex[w]";
          goto LABEL_156;
        }
        v21 = *(unsigned __int8 *)(a2 + v20);
        v22 = (uint64_t)a4;
        v23 = 4;
      }
      else
      {
        v24 = a4[7] + 8 * (a4[4] - a4[2]) - 32;
        if (*(_BYTE *)(a2 + 4))
        {
          if (v24 <= 31)
          {
LABEL_110:
            exception = __cxa_allocate_exception(8uLL);
            v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.cartesian.minX";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *v19, 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_111:
            exception = __cxa_allocate_exception(8uLL);
            v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.cartesian.maxX";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, v19[1], 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_112:
            exception = __cxa_allocate_exception(8uLL);
            v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.cartesian.minY";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, v19[2], 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_113:
            exception = __cxa_allocate_exception(8uLL);
            v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.cartesian.maxY";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, v19[3], 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_114:
            exception = __cxa_allocate_exception(8uLL);
            v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.cartesian.minZ";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, v19[4], 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_115:
            exception = __cxa_allocate_exception(8uLL);
            v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.cartesian.maxZ";
            goto LABEL_156;
          }
          v21 = v19[5];
        }
        else
        {
          if (v24 <= 31)
          {
LABEL_116:
            exception = __cxa_allocate_exception(8uLL);
            v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.spherical.minAzimuth";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, *v19, 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_117:
            exception = __cxa_allocate_exception(8uLL);
            v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.spherical.maxAzimuth";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, v19[1], 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_118:
            exception = __cxa_allocate_exception(8uLL);
            v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.spherical.minElevation";
            goto LABEL_156;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a4, v19[2], 0x20u);
          if (a4[7] + 8 * (a4[4] - a4[2]) - 32 <= 31)
          {
LABEL_119:
            exception = __cxa_allocate_exception(8uLL);
            v9 = "Cannot pack blkData.zoneExclusion.zone[w].co_tu.spherical.maxElevation";
            goto LABEL_156;
          }
          v21 = v19[3];
        }
        v22 = (uint64_t)a4;
        v23 = 32;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits(v22, v21, v23);
      v25 = v20 - 121;
      ++v20;
      v19 += 6;
    }
    while (v25 < *(unsigned __int8 *)(a2 + 106));
  }
}

uint64_t APAC::MetadataBitStreamPacker::packDynamicGroup(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v6;
  _QWORD *exception;
  const char *v8;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack dG.groupID";
    goto LABEL_21;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 7u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack dG.isGlobal";
    goto LABEL_21;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  if (a2[1])
    return result;
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack dG.memberCount";
    goto LABEL_21;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 7u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack dG.hasConjunctMembers";
    goto LABEL_21;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[3], 1u);
  if (a2[3])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 6)
      return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 7u);
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack dG.startASCID";
LABEL_21:
    *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  if (a2[2])
  {
    v6 = 0;
    while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 6)
    {
      result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[v6++ + 5], 7u);
      if (v6 >= a2[2])
        return result;
    }
    exception = __cxa_allocate_exception(8uLL);
    v8 = "Cannot pack dG.ASCIDList[n]";
    goto LABEL_21;
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packReferenceScreen(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v6;
  unsigned __int8 *v7;
  _QWORD *exception;
  const char *v9;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack refScreen.hasData";
    goto LABEL_10;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2)
    return result;
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack refScreen.APCount";
LABEL_10:
    *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 4u);
  if (a2[1])
  {
    v6 = 0;
    v7 = a2 + 4;
    do
    {
      result = APAC::MetadataBitStreamPacker::packScreenData(result, v7, a3);
      ++v6;
      v7 += 28;
    }
    while (v6 < a2[1]);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packCodeBookData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  _QWORD *exception;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Cannot pack cbD.hasData";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
}

uint64_t APAC::MetadataBitStreamPacker::packGroupStaticData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v6;
  unsigned __int8 *v7;
  _QWORD *exception;
  const char *v9;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack grpSD.hasData";
    goto LABEL_10;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2)
    return result;
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack grpSD.groupCount";
LABEL_10:
    *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 7u);
  if (a2[1])
  {
    v6 = 0;
    v7 = a2 + 4;
    do
    {
      result = APAC::MetadataBitStreamPacker::packStaticGroup(result, v7, a3);
      ++v6;
      v7 += 216;
    }
    while (v6 < a2[1]);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packSceneComponenentStaticData(uint64_t a1, _BYTE *a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v6;
  unsigned __int8 *v7;
  _QWORD *exception;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Cannot pack scSD.ASCCount";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 7u);
  if (*a2)
  {
    v6 = 0;
    v7 = a2 + 4;
    do
    {
      result = APAC::MetadataBitStreamPacker::packASCStaticData(result, v7, a3);
      ++v6;
      v7 += 1144;
    }
    while (v6 < *a2);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packASCStaticData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *exception;
  const char *v10;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack sD.sceneComponentID";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 7u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack sD.sceneComponentType";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 2u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack sD.startChannelIndex";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 7u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack sD.rendererSubType";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[3], 3u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 7)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack sD.rendererVersion";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 8u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack sD.channelLayoutTag";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack sD.HOAOrder";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[12], 3u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 < 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack sD.HOAOrdering";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[13], 2u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack sD.HOANormalization";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[14], 2u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 < 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack sD.NFCRefDist.hasData";
    goto LABEL_28;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[16], 1u);
  if (a2[16])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v10 = "Cannot pack sD.NFCRefDist.nfcRefDist";
LABEL_28:
      *exception = v10;
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 5), 0x20u);
  }
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v10 = "Cannot pack sD.screenRef";
    goto LABEL_28;
  }
  v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[24], 1u);
  v6 = APAC::MetadataBitStreamPacker::packProprietaryStaticData(v5, a2 + 28, a3);
  v7 = APAC::MetadataBitStreamPacker::packDolbyStaticData(v6, a2 + 112, a3);
  return APAC::MetadataBitStreamPacker::packExtendedData(v7, a2 + 114, a3);
}

uint64_t APAC::MetadataBitStreamPacker::packProprietaryStaticData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *exception;
  const char *v12;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v12 = "Cannot pack pSD.hasData";
    goto LABEL_31;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (!*a2)
    return result;
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 4)
  {
    exception = __cxa_allocate_exception(8uLL);
    v12 = "Cannot pack pSD.numParameters";
LABEL_31:
    *exception = v12;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 5u);
  if (a2[1])
  {
    v6 = 0;
    v7 = a2 + 52;
    while (1)
    {
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 4)
      {
        exception = __cxa_allocate_exception(8uLL);
        v12 = "Cannot pack pSD.paramIndexList[n]";
        goto LABEL_31;
      }
      result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, v7[v6], 5u);
      switch(v7[v6])
      {
        case 0u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack pSD.isComplexSH";
            goto LABEL_31;
          }
          v8 = a2[2];
          goto LABEL_12;
        case 1u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack pSD.isCSPhase";
            goto LABEL_31;
          }
          v8 = a2[3];
LABEL_12:
          v9 = (uint64_t)a3;
          v10 = 1;
          goto LABEL_27;
        case 2u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack pSD.productionCoordinate";
            goto LABEL_31;
          }
          v8 = a2[4];
          goto LABEL_18;
        case 3u:
          result = APAC::MetadataBitStreamPacker::packSceneReverb(result, a2 + 6, a3);
          goto LABEL_28;
        case 4u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 1)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack pSD.postProcReverbIndex";
            goto LABEL_31;
          }
          v8 = a2[14];
LABEL_18:
          v9 = (uint64_t)a3;
          v10 = 2;
          goto LABEL_27;
        case 5u:
          result = APAC::MetadataBitStreamPacker::packRadiationPattern(result, a2 + 16, a3);
          goto LABEL_28;
        case 6u:
          result = APAC::MetadataBitStreamPacker::packBinauralization(result, a2 + 24, a3);
          goto LABEL_28;
        case 7u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 3)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack pSD.HCFilterCodeBookID";
            goto LABEL_31;
          }
          v8 = a2[36];
          v9 = (uint64_t)a3;
          v10 = 4;
          goto LABEL_27;
        case 8u:
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack pSD.hoaRotation.pitch";
            goto LABEL_31;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 10), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack pSD.hoaRotation.yaw";
            goto LABEL_31;
          }
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 11), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v12 = "Cannot pack pSD.hoaRotation.roll";
            goto LABEL_31;
          }
          v8 = *((_DWORD *)a2 + 12);
          v9 = (uint64_t)a3;
          v10 = 32;
LABEL_27:
          result = AT::TBitstreamWriter<unsigned int>::PutBits(v9, v8, v10);
LABEL_28:
          if (++v6 >= (unint64_t)a2[1])
            return result;
          break;
        default:
          goto LABEL_28;
      }
    }
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packDolbyStaticData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v7;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack pDolby.hasData";
    goto LABEL_8;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 1)
      return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 2u);
    exception = __cxa_allocate_exception(8uLL);
    v7 = "Cannot pack pDolby.headphoneRenderingData";
LABEL_8:
    *exception = v7;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packStaticGroup(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *exception;
  const char *v9;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack sG.groupID";
    goto LABEL_20;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 7u);
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack sG.isGlobal";
    goto LABEL_20;
  }
  v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
  if (!a2[1])
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 6)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack sG.memberCount";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[2], 7u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v9 = "Cannot pack sG.hasConjunctMembers";
      }
      else
      {
        v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[3], 1u);
        if (a2[3])
        {
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 6)
          {
            v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[4], 7u);
            return APAC::MetadataBitStreamPacker::packProprietaryStaticData(v5, a2 + 132, a3);
          }
          exception = __cxa_allocate_exception(8uLL);
          v9 = "Cannot pack sG.startASCID";
        }
        else
        {
          if (!a2[2])
            return APAC::MetadataBitStreamPacker::packProprietaryStaticData(v5, a2 + 132, a3);
          v6 = 0;
          while (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 6)
          {
            v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[v6++ + 5], 7u);
            if (v6 >= a2[2])
              return APAC::MetadataBitStreamPacker::packProprietaryStaticData(v5, a2 + 132, a3);
          }
          exception = __cxa_allocate_exception(8uLL);
          v9 = "Cannot pack sG.ASCIDList[m]";
        }
      }
    }
LABEL_20:
    *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return APAC::MetadataBitStreamPacker::packProprietaryStaticData(v5, a2 + 132, a3);
}

uint64_t APAC::MetadataBitStreamPacker::packScreenData(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  uint64_t result;
  int v6;
  int *v7;
  _QWORD *exception;
  const char *v9;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v9 = "Cannot pack sD.hasData";
    goto LABEL_29;
  }
  result = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *a2, 1u);
  if (*a2)
  {
    if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
    {
      exception = __cxa_allocate_exception(8uLL);
      v9 = "Cannot pack sD.aspectRatio";
    }
    else
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 1), 0x20u);
      if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        v9 = "Cannot pack sD.cartesian";
      }
      else
      {
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, a2[1], 1u);
        v6 = a3[7] + 8 * (a3[4] - a3[2]) - 32;
        if (a2[1])
        {
          if (v6 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v9 = "Cannot pack sD.screenCentrePosition.co_ut.cartesian.X";
          }
          else
          {
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
            if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
            {
              exception = __cxa_allocate_exception(8uLL);
              v9 = "Cannot pack sD.screenCentrePosition.co_ut.cartesian.Y";
            }
            else
            {
              AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
              if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
              {
                exception = __cxa_allocate_exception(8uLL);
                v9 = "Cannot pack sD.screenCentrePosition.co_ut.cartesian.Z";
              }
              else
              {
                AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 4), 0x20u);
                if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
                {
                  v7 = (int *)(a2 + 20);
                  return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v7, 0x20u);
                }
                exception = __cxa_allocate_exception(8uLL);
                v9 = "Cannot pack sD.screenWidth.X";
              }
            }
          }
        }
        else if (v6 <= 31)
        {
          exception = __cxa_allocate_exception(8uLL);
          v9 = "Cannot pack sD.screenCentrePosition.co_ut.spherical.azimuth";
        }
        else
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 2), 0x20u);
          if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
          {
            exception = __cxa_allocate_exception(8uLL);
            v9 = "Cannot pack sD.screenCentrePosition.co_ut.spherical.elevation";
          }
          else
          {
            AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 3), 0x20u);
            if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 31)
            {
              exception = __cxa_allocate_exception(8uLL);
              v9 = "Cannot pack sD.screenCentrePosition.co_ut.spherical.distance";
            }
            else
            {
              AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((_DWORD *)a2 + 4), 0x20u);
              if (a3[7] + 8 * (a3[4] - a3[2]) - 32 > 31)
              {
                v7 = (int *)(a2 + 24);
                return AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *v7, 0x20u);
              }
              exception = __cxa_allocate_exception(8uLL);
              v9 = "Cannot pack sD.screenWidth.azimuth";
            }
          }
        }
      }
    }
LABEL_29:
    *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return result;
}

uint64_t APAC::MetadataBitStreamPacker::packConfig(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v8 = a2;
  v9 = a2;
  v10 = a2 + a3;
  v11 = 0x2000000000;
  v12 = a2 & 3;
  APAC::MetadataBitStreamPacker::packMetadataConfig(a1, a4, &v8);
  v4 = 8 * (v9 - v8) - HIDWORD(v11);
  v5 = (v4 + 32) >> 3;
  if ((v4 & 7) != 0)
    v6 = v5 + 1;
  else
    v6 = v5;
  AT::TBitstreamWriter<unsigned int>::Flush((uint64_t)&v8);
  return v6;
}

void APAC::MetadataBitStreamPacker::packMetadataConfig(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  _QWORD *exception;

  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Cannot pack mdCfg.mRendererMetadataConfigPresent";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v5 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *(unsigned __int8 *)(a2 + 1), 1u);
  if (*(_BYTE *)(a2 + 1))
    APAC::MetadataBitStreamPacker::packRendererMetadataConfig(v5, (unsigned __int16 *)(a2 + 8), a3);
}

void APAC::MetadataBitStreamPacker::packRendererMetadataConfig(uint64_t a1, unsigned __int16 *a2, _DWORD *a3)
{
  _DWORD *v3;
  unsigned __int16 *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  APAC::Metadata::RendererData::RadiationPattern *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned __int16 *v21;
  APAC::Metadata::RendererData::RadiationPattern *v22;
  char *v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *exception;
  const char *v41;
  uint64_t v42;
  _BYTE __dst[792];
  _QWORD v44[3];
  char *v45;
  char *v46;
  char *v47;
  _QWORD v48[3];
  _QWORD v49[3];
  _QWORD v50[3];
  _QWORD v51[3];
  _QWORD v52[4];
  __int16 v53;
  char *v54;
  char *v55;
  char *v56;
  _QWORD v57[3];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[2];
  uint64_t v68;
  int v69;
  void *__p;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (a3[7] + 8 * (a3[4] - a3[2]) - 32 <= 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    v41 = "Cannot pack rMdCfg.mGlobalConfig.mHasData";
    goto LABEL_25;
  }
  v3 = a3;
  v4 = a2;
  v5 = a2 + 4;
  v6 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)a3, *((unsigned __int8 *)a2 + 8), 1u);
  if (*v5)
    APAC::MetadataBitStreamPacker::packGlobalConfig(v6, (uint64_t)v5, v3);
  if (v3[7] + 8 * (v3[4] - v3[2]) - 32 <= 10)
  {
    exception = __cxa_allocate_exception(8uLL);
    v41 = "Cannot pack rMdCfg.mGroupCount";
LABEL_25:
    *exception = v41;
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v7 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v3, *v4, 0xBu);
  if (*v4)
  {
    v8 = 0;
    v9 = 0;
    v10 = (APAC::Metadata::RendererData::RadiationPattern *)v44;
    v11 = 1248 * *v4;
    do
    {
      APAC::MetadataBitStreamPacker::packGroupConfig(v7, (unsigned __int16 *)(*((_QWORD *)v4 + 597) + v8), v3);
      if (v3[7] + 8 * (v3[4] - v3[2]) - 32 <= 0)
      {
        v39 = __cxa_allocate_exception(8uLL);
        *v39 = "Cannot pack rMdCfg.mRendererData[gp].mHasData";
        __cxa_throw(v39, MEMORY[0x1E0DE4E50], 0);
      }
      v7 = AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v3, *(unsigned __int8 *)(*((_QWORD *)v4 + 600) + v9), 1u);
      v12 = *((_QWORD *)v4 + 600);
      v13 = v12 + v9;
      if (*(_BYTE *)(v12 + v9))
      {
        memcpy(__dst, (const void *)(v12 + v9), 0x314uLL);
        v14 = *(_QWORD *)(v13 + 792);
        *((_DWORD *)v10 + 2) = *(_DWORD *)(v13 + 800);
        *(_QWORD *)v10 = v14;
        v44[2] = *(_QWORD *)(v13 + 808);
        v46 = 0;
        v47 = 0;
        v45 = 0;
        v15 = *(_BYTE **)(v13 + 816);
        v16 = *(_BYTE **)(v13 + 824);
        v17 = v16 - v15;
        if (v16 != v15)
        {
          v42 = v8;
          if (v17 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v18 = v12;
          v19 = v11;
          v20 = v3;
          v21 = v4;
          v22 = v10;
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v17 >> 2);
          v45 = v23;
          v46 = v23;
          v47 = &v23[4 * v24];
          memmove(v23, v15, v17);
          v46 = &v23[4 * (v17 >> 2)];
          v10 = v22;
          v4 = v21;
          v3 = v20;
          v11 = v19;
          v12 = v18;
          v8 = v42;
        }
        memset(v48, 0, sizeof(v48));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v48, *(const void **)(v12 + v9 + 840), *(_QWORD *)(v12 + v9 + 848), (uint64_t)(*(_QWORD *)(v12 + v9 + 848) - *(_QWORD *)(v12 + v9 + 840)) >> 2);
        memset(v49, 0, sizeof(v49));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v49, *(const void **)(v12 + v9 + 864), *(_QWORD *)(v12 + v9 + 872), (uint64_t)(*(_QWORD *)(v12 + v9 + 872) - *(_QWORD *)(v12 + v9 + 864)) >> 2);
        memset(v50, 0, sizeof(v50));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v50, *(const void **)(v12 + v9 + 888), *(_QWORD *)(v12 + v9 + 896), (uint64_t)(*(_QWORD *)(v12 + v9 + 896) - *(_QWORD *)(v12 + v9 + 888)) >> 2);
        memset(v51, 0, sizeof(v51));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v51, *(const void **)(v12 + v9 + 912), *(_QWORD *)(v12 + v9 + 920), (uint64_t)(*(_QWORD *)(v12 + v9 + 920) - *(_QWORD *)(v12 + v9 + 912)) >> 2);
        memset(v52, 0, 24);
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v52, *(const void **)(v12 + v9 + 936), *(_QWORD *)(v12 + v9 + 944), (uint64_t)(*(_QWORD *)(v12 + v9 + 944) - *(_QWORD *)(v12 + v9 + 936)) >> 2);
        v52[3] = *(_QWORD *)(v12 + v9 + 960);
        v53 = *(_WORD *)(v12 + v9 + 968);
        v55 = 0;
        v56 = 0;
        v54 = 0;
        v25 = *(_BYTE **)(v12 + v9 + 976);
        v26 = *(_BYTE **)(v12 + v9 + 984);
        v27 = v26 - v25;
        if (v26 != v25)
        {
          if (v27 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v54 = (char *)operator new(v26 - v25);
          v55 = v54;
          v28 = &v54[2 * (v27 >> 1)];
          v56 = v28;
          memmove(v54, v25, v27);
          v55 = v28;
        }
        memset(v57, 0, sizeof(v57));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v57, *(const void **)(v12 + v9 + 1000), *(_QWORD *)(v12 + v9 + 1008), (uint64_t)(*(_QWORD *)(v12 + v9 + 1008) - *(_QWORD *)(v12 + v9 + 1000)) >> 2);
        v29 = *(_OWORD *)(v12 + v9 + 1024);
        v30 = *(_OWORD *)(v12 + v9 + 1056);
        v59 = *(_OWORD *)(v12 + v9 + 1040);
        v60 = v30;
        v58 = v29;
        v31 = *(_OWORD *)(v12 + v9 + 1072);
        v32 = *(_OWORD *)(v12 + v9 + 1088);
        v33 = *(_OWORD *)(v12 + v9 + 1120);
        v63 = *(_OWORD *)(v12 + v9 + 1104);
        v64 = v33;
        v61 = v31;
        v62 = v32;
        v34 = *(_OWORD *)(v12 + v9 + 1136);
        v35 = *(_OWORD *)(v12 + v9 + 1152);
        v36 = *(_OWORD *)(v12 + v9 + 1168);
        *(_OWORD *)((char *)v67 + 13) = *(_OWORD *)(v12 + v9 + 1181);
        v66 = v35;
        v67[0] = v36;
        v65 = v34;
        v37 = *(_QWORD *)(v12 + v9 + 1200);
        v69 = *(_DWORD *)(v12 + v9 + 1208);
        v68 = v37;
        v71 = 0;
        v72 = 0;
        __p = 0;
        v38 = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(v12 + v9 + 1216), *(_QWORD *)(v12 + v9 + 1224), (uint64_t)(*(_QWORD *)(v12 + v9 + 1224) - *(_QWORD *)(v12 + v9 + 1216)) >> 2);
        v73 = *(_QWORD *)(v12 + v9 + 1240);
        APAC::MetadataBitStreamPacker::packRendererData((uint64_t)v38, (uint64_t)__dst, v3);
        if (__p)
        {
          v71 = __p;
          operator delete(__p);
        }
        APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern(v10);
      }
      v9 += 1248;
      v8 += 48;
    }
    while (v11 != v9);
  }
}

void sub_18EE93668(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)STACK[0x430];
  if (STACK[0x430])
  {
    STACK[0x438] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)STACK[0x408];
  if (STACK[0x408])
  {
    STACK[0x410] = (unint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v4;
    operator delete(v4);
  }
  v5 = (void *)STACK[0x3D8];
  if (STACK[0x3D8])
  {
    STACK[0x3E0] = (unint64_t)v5;
    operator delete(v5);
  }
  v6 = (void *)STACK[0x3C0];
  if (STACK[0x3C0])
  {
    STACK[0x3C8] = (unint64_t)v6;
    operator delete(v6);
  }
  v7 = (void *)STACK[0x3A8];
  if (STACK[0x3A8])
  {
    STACK[0x3B0] = (unint64_t)v7;
    operator delete(v7);
  }
  v8 = (void *)STACK[0x390];
  if (STACK[0x390])
  {
    STACK[0x398] = (unint64_t)v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18EE937A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern(APAC::Metadata::RendererData::RadiationPattern *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 23);
  if (v3)
  {
    *((_QWORD *)this + 24) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 18);
  if (v4)
  {
    *((_QWORD *)this + 19) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 15);
  if (v5)
  {
    *((_QWORD *)this + 16) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 12);
  if (v6)
  {
    *((_QWORD *)this + 13) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 7) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 4) = v9;
    operator delete(v9);
  }
}

void APAC::Metadata::RendererData::~RendererData(APAC::Metadata::RendererData *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 152);
  if (v2)
  {
    *((_QWORD *)this + 153) = v2;
    operator delete(v2);
  }
  APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern((APAC::Metadata::RendererData *)((char *)this + 792));
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_18EE93980(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void ___Z33_CASInitAudioConverterDeferredLogv_block_invoke()
{
  void *v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  __int128 v4;

  AudioConverterLog();
  caulk::deferred_logger::create_v((caulk::deferred_logger *)AudioConverterLog(void)::gLog, v0);
  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)&gAudioConverterDeferredLog, &v4);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void AALoudnessInfoAnalyzer::~AALoudnessInfoAnalyzer(AALoudnessInfoAnalyzer *this)
{
  AALoudnessInfoAnalyzer::~AALoudnessInfoAnalyzer(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E29087F8;
  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 12) = 0;
  }
  v3 = *((_QWORD *)this + 11);
  if (v3)
  {
    MEMORY[0x193FFE460](v3, 0x1000C4077774924);
    *((_QWORD *)this + 11) = 0;
  }
  *(_QWORD *)this = &off_1E2903E88;
  MEMORY[0x193FFDAD0]((char *)this + 48);
}

uint64_t AALoudnessInfoAnalyzer::Prepare(AALoudnessInfoAnalyzer *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  AudioStreamBasicDescription v11;

  v2 = *((_DWORD *)this + 26);
  if ((v2 & 5) != 0)
    v3 = 9;
  else
    v3 = 8;
  if ((v2 & 2) != 0)
    v4 = v3 | 6;
  else
    v4 = v3;
  v5 = operator new();
  *(_DWORD *)(v5 + 8) = v4;
  *(_QWORD *)v5 = &off_1E2909170;
  v6 = *((_QWORD *)this + 6);
  *(_QWORD *)&v11.mBitsPerChannel = *((_QWORD *)this + 5);
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 152) = 0;
  *(_DWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 176) = 0;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  v7 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&v11.mSampleRate = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)&v11.mBytesPerPacket = v7;
  v8 = BufferedSoundCheckAnalyzer::Start((BufferedSoundCheckAnalyzer *)v5, &v11, (const AudioChannelLayout *)(v6 + 16), 0, 0);
  if (!(_DWORD)v8)
  {
    v9 = *((_QWORD *)this + 12);
    if (v9 != v5)
    {
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      *((_QWORD *)this + 12) = v5;
    }
  }
  return v8;
}

uint64_t AALoudnessInfoAnalyzer::PushAudio(BufferedSoundCheckAnalyzer **this, unsigned int a2, const AudioBufferList *a3)
{
  uint64_t v5;
  uint64_t v6;

  BufferedSoundCheckAnalyzer::ProcessBuffer(this[12], a2, a3, 0);
  v5 = (uint64_t)this[9] + a2;
  v6 = (uint64_t)this[7];
  if (v5 >= v6)
    v5 = (uint64_t)this[7];
  this[9] = (BufferedSoundCheckAnalyzer *)v5;
  *((float *)this + 20) = (float)((float)v5 * 100.0) / (float)v6;
  return 0;
}

uint64_t AALoudnessInfoAnalyzer::CompleteFinal(AALoudnessInfoAnalyzer *this, float a2, float a3)
{
  int v4;
  __CFDictionary *v5;
  __CFDictionary *v6;
  __CFDictionary *v7;
  uint64_t v9;
  __CFDictionary *v10;
  int v11;
  int v12;
  uint64_t *v13;
  __CFDictionary *v14;
  CFMutableDictionaryRef Mutable;
  __int16 v16;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v16 = 257;
  (*(void (**)(_QWORD, CFMutableDictionaryRef *))(**((_QWORD **)this + 12) + 16))(*((_QWORD *)this + 12), &Mutable);
  v14 = 0;
  v11 = 0;
  v12 = 1;
  v4 = *((_DWORD *)this + 26);
  if ((v4 & 1) != 0)
  {
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("sound check info")))
    {
      CACFDictionary::GetDictionary((CACFDictionary *)&Mutable, CFSTR("sound check info"), &v14);
      v5 = v14;
    }
    else
    {
      v5 = 0;
      v14 = 0;
    }
    v9 = 8;
    v10 = v5;
    v13 = &v9;
    v11 = 1;
    (*(void (**)(AALoudnessInfoAnalyzer *, const __CFString *, int *, int *))(*(_QWORD *)this + 48))(this, CFSTR("sound check info"), &v12, &v11);
    v4 = *((_DWORD *)this + 26);
  }
  if ((v4 & 2) != 0)
  {
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("main loudness parameters")))
    {
      CACFDictionary::GetDictionary((CACFDictionary *)&Mutable, CFSTR("main loudness parameters"), &v14);
      v6 = v14;
    }
    else
    {
      v6 = 0;
      v14 = 0;
    }
    v9 = 8;
    v10 = v6;
    v13 = &v9;
    v11 = 1;
    (*(void (**)(AALoudnessInfoAnalyzer *, const __CFString *, int *, int *))(*(_QWORD *)this + 48))(this, CFSTR("main loudness parameters"), &v12, &v11);
    v4 = *((_DWORD *)this + 26);
  }
  if ((v4 & 4) != 0)
  {
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("additional loudness parameters")))
    {
      CACFDictionary::GetDictionary((CACFDictionary *)&Mutable, CFSTR("additional loudness parameters"), &v14);
      v7 = v14;
    }
    else
    {
      v7 = 0;
      v14 = 0;
    }
    v9 = 8;
    v10 = v7;
    v13 = &v9;
    v11 = 1;
    (*(void (**)(AALoudnessInfoAnalyzer *, const __CFString *, int *, int *))(*(_QWORD *)this + 48))(this, CFSTR("additional loudness parameters"), &v12, &v11);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return 0;
}

void sub_18EE93DF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  CACFDictionary::~CACFDictionary((CACFDictionary *)(v1 - 32));
  _Unwind_Resume(a1);
}

float AAAnalysisBase::GetProgress(AAAnalysisBase *this)
{
  return *((float *)this + 20);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t CA::AudioMetadataSerializer::serialize(int a1, unsigned int *a2, unsigned int a3, uint64_t a4, double a5, double a6, double a7, unint64_t **a8)
{
  double v8;
  unint64_t **v9;
  _BYTE *v10;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  __int16 v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  unsigned int v23;
  _WORD *v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t i;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t **v41;
  unsigned int v42;
  uint64_t **v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t **v52;
  unsigned int *v53;
  unint64_t v54;
  unint64_t j;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t k;
  uint64_t v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t **v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t *v71;
  uint64_t **v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  char v78;
  int v79;
  uint64_t *v80;
  uint64_t **v81;
  unint64_t v82;
  unint64_t m;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t **v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t *v93;
  uint64_t **v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  uint64_t *v100;
  uint64_t **v101;
  uint64_t **v102;
  uint64_t *v103;
  uint64_t **v104;
  uint64_t **v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  unint64_t *v134;
  uint64_t **v135;
  unint64_t *v136;
  __int16 v137;
  uint64_t *v138;
  char *v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  char **v143;
  unsigned int v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  __int16 v152;
  char *size;
  std::string::size_type v154;
  std::string::size_type v155;
  std::string::size_type v156;
  int64_t v157;
  std::string::size_type v158;
  size_t v159;
  std::string::size_type v160;
  std::string::size_type v161;
  _BYTE *v162;
  char *v163;
  char v164;
  char *v165;
  std::string::size_type v166;
  std::string::size_type v167;
  std::string::size_type v168;
  int64_t v169;
  std::string::size_type v170;
  size_t v171;
  std::string::size_type v172;
  std::string::size_type v173;
  _BYTE *v174;
  char *v175;
  char v176;
  char v177;
  char *v178;
  std::string::size_type v179;
  std::string::size_type v180;
  std::string::size_type v181;
  int64_t v182;
  std::string::size_type v183;
  size_t v184;
  std::string::size_type v185;
  std::string::size_type v186;
  char *v187;
  char *v188;
  char v189;
  char *v190;
  std::string::size_type v191;
  std::string::size_type v192;
  std::string::size_type v193;
  int64_t v194;
  std::string::size_type v195;
  size_t v196;
  std::string::size_type v197;
  std::string::size_type v198;
  _BYTE *v199;
  char *v200;
  char v201;
  char *v202;
  std::string::size_type v203;
  std::string::size_type v204;
  std::string::size_type v205;
  int64_t v206;
  std::string::size_type v207;
  size_t v208;
  std::string::size_type v209;
  std::string::size_type v210;
  _BYTE *v211;
  char *v212;
  char v213;
  char *v214;
  std::string::size_type v215;
  std::string::size_type v216;
  std::string::size_type v217;
  int64_t v218;
  std::string::size_type v219;
  size_t v220;
  std::string::size_type v221;
  std::string::size_type v222;
  _BYTE *v223;
  char *v224;
  char v225;
  char *v226;
  std::string::size_type v227;
  std::string::size_type v228;
  std::string::size_type v229;
  int64_t v230;
  std::string::size_type v231;
  size_t v232;
  std::string::size_type v233;
  std::string::size_type v234;
  _BYTE *v235;
  char *v236;
  char v237;
  _BOOL4 v238;
  uint64_t *v239;
  uint64_t **v240;
  unint64_t **v241;
  uint64_t *v242;
  unint64_t *v243;
  __int16 v244;
  uint64_t v245;
  char *v246;
  char *v247;
  unint64_t v248;
  unint64_t v249;
  char **v250;
  unsigned int v251;
  uint64_t *v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t **v255;
  unsigned int v256;
  uint64_t **v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  __int16 v265;
  char v266;
  char *v267;
  std::string::size_type v268;
  _BYTE *v269;
  std::string::size_type v270;
  std::string::size_type v271;
  int64_t v272;
  size_t v273;
  std::string::size_type v274;
  std::string::size_type v275;
  _BYTE *v276;
  char *v277;
  char v278;
  std::string::size_type v279;
  std::string::size_type v280;
  _BYTE *v281;
  int64_t v282;
  size_t v283;
  std::string::size_type v284;
  std::string::size_type v285;
  _BYTE *v286;
  char v287;
  _BOOL4 v288;
  uint64_t *v289;
  uint64_t **v290;
  uint64_t *v291;
  unint64_t *v292;
  __int16 v293;
  uint64_t v294;
  char **v295;
  unint64_t v296;
  _DWORD *v297;
  uint64_t v298;
  char *v299;
  char *v300;
  std::string::size_type v301;
  unint64_t v302;
  char **v303;
  unsigned int v304;
  std::string::size_type v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  __int16 v312;
  char *v313;
  char *v314;
  std::string::size_type v315;
  unint64_t v316;
  char **v317;
  unsigned int v318;
  std::string::size_type v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  __int16 v326;
  char *v327;
  char *v328;
  std::string::size_type v329;
  unint64_t v330;
  char **v331;
  unint64_t v332;
  std::string::size_type v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  char *v338;
  int v339;
  char v340;
  char v341;
  char v342;
  unsigned int v343;
  char v344;
  char *v345;
  std::string::size_type v346;
  std::string::size_type v347;
  std::string::size_type v348;
  int64_t v349;
  std::string::size_type v350;
  size_t v351;
  std::string::size_type v352;
  std::string::size_type v353;
  _BYTE *v354;
  char *v355;
  char v356;
  char v357;
  char v358;
  char *v359;
  char *v360;
  char *v361;
  std::string::size_type v362;
  std::string::size_type v363;
  int64_t v364;
  size_t v365;
  std::string::size_type v366;
  std::string::size_type v367;
  _BYTE *v368;
  char *v369;
  char v370;
  std::string::size_type v371;
  std::string::size_type v372;
  char *v373;
  int64_t v374;
  size_t v375;
  std::string::size_type v376;
  std::string::size_type v377;
  char *v378;
  char v379;
  char *v380;
  std::string::size_type v381;
  std::string::size_type v382;
  std::string::size_type v383;
  int64_t v384;
  std::string::size_type v385;
  size_t v386;
  std::string::size_type v387;
  std::string::size_type v388;
  _BYTE *v389;
  char *v390;
  char v391;
  char *v392;
  std::string::size_type v393;
  _BYTE *v394;
  std::string::size_type v395;
  std::string::size_type v396;
  int64_t v397;
  size_t v398;
  std::string::size_type v399;
  std::string::size_type v400;
  _BYTE *v401;
  char *v402;
  char v403;
  char v404;
  char v405;
  std::string::size_type v406;
  std::string::size_type v407;
  _BYTE *v408;
  int64_t v409;
  size_t v410;
  std::string::size_type v411;
  std::string::size_type v412;
  _BYTE *v413;
  char v414;
  int64_t v415;
  char *v416;
  std::string::size_type v417;
  std::string::size_type v418;
  std::string::size_type v419;
  int64_t v420;
  std::string::size_type v421;
  size_t v422;
  std::string::size_type v423;
  std::string::size_type v424;
  _BYTE *v425;
  char *v426;
  char v427;
  void *v428;
  uint64_t *v429;
  uint64_t **v430;
  uint64_t *v431;
  unint64_t *v432;
  int v433;
  char *v434;
  unint64_t *v435;
  _BYTE *v436;
  uint64_t v437;
  char *v438;
  char *v439;
  unint64_t v440;
  _DWORD *v441;
  std::string::size_type v442;
  std::string *v443;
  int v444;
  int v445;
  BOOL v446;
  char *v447;
  std::string::size_type v448;
  std::string::size_type v449;
  std::string::size_type v450;
  int64_t v451;
  std::string::size_type v452;
  size_t v453;
  std::string::size_type v454;
  std::string::size_type v455;
  _BYTE *v456;
  char *v457;
  char v458;
  _QWORD *v459;
  unint64_t v460;
  _BOOL4 v461;
  char v462;
  char *v463;
  std::string::size_type v464;
  std::string::size_type v465;
  std::string::size_type v466;
  int64_t v467;
  std::string::size_type v468;
  size_t v469;
  std::string::size_type v470;
  std::string::size_type v471;
  char *v472;
  char v473;
  _BOOL4 v474;
  uint64_t *v475;
  uint64_t **v476;
  char *v477;
  std::string::size_type v478;
  std::string::size_type v479;
  std::string::size_type v480;
  int64_t v481;
  std::string::size_type v482;
  size_t v483;
  std::string::size_type v484;
  std::string::size_type v485;
  _BYTE *v486;
  char *v487;
  char v488;
  unint64_t **v489;
  uint64_t *v490;
  unint64_t *v491;
  char *v492;
  unint64_t *v493;
  _BYTE *v494;
  char v495;
  uint64_t v496;
  char *v497;
  char *v498;
  unint64_t v499;
  _DWORD *p_p;
  std::string::size_type v501;
  std::string *v502;
  int data_low;
  int v504;
  char *v506;
  std::string::size_type v507;
  std::string::size_type v508;
  std::string::size_type v509;
  int64_t v510;
  std::string::size_type v511;
  size_t v512;
  std::string::size_type v513;
  std::string::size_type v514;
  char *v515;
  char v516;
  _BOOL4 v517;
  uint64_t *v518;
  uint64_t **v519;
  char *v520;
  std::string::size_type v521;
  std::string::size_type v522;
  std::string::size_type v523;
  int64_t v524;
  std::string::size_type v525;
  size_t v526;
  std::string::size_type v527;
  std::string::size_type v528;
  _BYTE *v529;
  char *v530;
  char v531;
  unint64_t v535;
  unint64_t v536;
  uint64_t v537;
  unint64_t v538;
  int v539;
  unsigned int *v540;
  char v541;
  unsigned int v542;
  unint64_t *v543;
  unint64_t *v544;
  unint64_t *v545;
  unsigned __int8 v547[8];
  uint64_t **v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t *v551;
  uint64_t *v552;
  uint64_t v553;
  uint64_t *v554;
  uint64_t *v555;
  uint64_t v556;
  uint64_t *v557;
  uint64_t *v558;
  uint64_t v559;
  uint64_t *v560;
  uint64_t *v561;
  uint64_t v562;
  uint64_t *v563;
  uint64_t *v564;
  uint64_t v565;
  uint64_t *v566;
  uint64_t *v567;
  uint64_t v568;
  uint64_t *v569;
  uint64_t *v570;
  uint64_t v571;
  _QWORD **v572;
  _QWORD *v573;
  uint64_t v574;
  void *__p;
  unint64_t v576;
  int64_t v577;
  char v578;
  std::string v579;
  std::string v580;
  std::string v581;
  std::string v582;
  std::string v583;
  std::string v584;
  std::string v585;

  v9 = a8;
  v10 = (_BYTE *)a4;
  v548 = &v549;
  v549 = 0;
  v552 = 0;
  v553 = 0;
  v550 = 0;
  v551 = (uint64_t *)&v552;
  v554 = (uint64_t *)&v555;
  v555 = 0;
  v558 = 0;
  v559 = 0;
  v556 = 0;
  v557 = (uint64_t *)&v558;
  v560 = (uint64_t *)&v561;
  v561 = 0;
  v564 = 0;
  v565 = 0;
  v562 = 0;
  v563 = (uint64_t *)&v564;
  v566 = (uint64_t *)&v567;
  v567 = 0;
  v570 = 0;
  v571 = 0;
  v568 = 0;
  v569 = (uint64_t *)&v570;
  v573 = 0;
  v574 = 0;
  v572 = &v573;
  if (*a2)
  {
    v14 = 0;
    v540 = a2;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 1) + 8 * v14);
      if (*(_QWORD *)v15)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "APR_");
        std::string::basic_string[abi:ne180100]<0>(&v585, *(char **)v15);
        if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v585.__r_.__value_.__l.__data_);
        if (SHIBYTE(v577) < 0)
          operator delete(__p);
        if (v16 >= 0x10000)
        {
          if (*(_BYTE *)(v15 + 24))
          {
            v537 = *(_QWORD *)(v15 + 28);
            v538 = v538 & 0xFFFFFFFFFFFFFF00 | 1;
          }
          else
          {
            v538 &= 0xFFFFFFFFFFFFFF00;
            v537 &= 0xFFFFFFFFFFFFFF00;
          }
          v17 = v536 & 0xFFFFFFFFFFFFFF00;
          if (*(_BYTE *)(v15 + 36))
          {
            v18 = *(_QWORD *)(v15 + 40);
            v17 |= 1uLL;
          }
          else
          {
            v18 = v535 & 0xFFFFFFFFFFFFFF00;
          }
          v535 = v18;
          v536 = v17;
          if (v539 != 3)
          {
            v19 = v16;
            v20 = v549;
            v21 = &v549;
LABEL_17:
            v22 = v21;
            if (v20)
            {
              while (1)
              {
                v21 = (uint64_t **)v20;
                v23 = *((unsigned __int16 *)v20 + 16);
                if (v23 > (unsigned __int16)v16)
                {
                  v20 = *v21;
                  goto LABEL_17;
                }
                if (v23 >= (unsigned __int16)v16)
                  break;
                v20 = v21[1];
                if (!v20)
                {
                  v22 = v21 + 1;
                  goto LABEL_24;
                }
              }
              v24 = v21;
            }
            else
            {
LABEL_24:
              v24 = operator new(0x40uLL);
              v24[16] = v19;
              *((_QWORD *)v24 + 6) = 0;
              *((_QWORD *)v24 + 7) = 0;
              *((_QWORD *)v24 + 5) = 0;
              *(_QWORD *)v24 = 0;
              *((_QWORD *)v24 + 1) = 0;
              *((_QWORD *)v24 + 2) = v21;
              *v22 = (uint64_t *)v24;
              v25 = (uint64_t *)v24;
              if (*v548)
              {
                v548 = (uint64_t **)*v548;
                v25 = *v22;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v549, v25);
              ++v550;
            }
            *((_BYTE *)v24 + 40) = v539;
            *((_QWORD *)v24 + 6) = v15;
            *((_QWORD *)v24 + 7) = 0;
            if (v539 != 2)
            {
              v26 = *(unsigned int *)(v15 + 52);
              if ((_DWORD)v26)
              {
                for (i = 0; i < v26; ++i)
                {
                  v28 = *(_QWORD *)(v15 + 56);
                  if (**(_QWORD **)(v28 + 8 * i))
                  {
                    std::string::basic_string[abi:ne180100]<0>(&__p, "ACO_");
                    std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v28 + 8 * i));
                    if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v585.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v577) < 0)
                      operator delete(__p);
                    if (v29 >= 0x10000)
                    {
                      v30 = *(_QWORD *)(v28 + 8 * i);
                      *v31 = v539;
                      *((_QWORD *)v31 + 1) = v30;
                      *((_QWORD *)v31 + 2) = 0;
                      v32 = *(_BYTE *)(v15 + 24) ? *(double *)(v15 + 28) : 0.0;
                      v33 = *(_QWORD *)(v28 + 8 * i);
                      v34 = *(unsigned int *)(v33 + 24);
                      if ((_DWORD)v34)
                      {
                        v35 = 0;
                        v541 = 0;
                        do
                        {
                          v36 = *(_QWORD *)(v33 + 28);
                          if (**(_QWORD **)(v36 + 8 * v35))
                          {
                            std::string::basic_string[abi:ne180100]<0>(&__p, "AO_");
                            std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v36 + 8 * v35));
                            if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v585.__r_.__value_.__l.__data_);
                            if (SHIBYTE(v577) < 0)
                              operator delete(__p);
                            if (v37 >= 0x10000)
                            {
                              v38 = v555;
                              if (!v555)
                                goto LABEL_56;
                              v39 = &v555;
                              do
                              {
                                v40 = v38;
                                v41 = v39;
                                v42 = *((unsigned __int16 *)v38 + 16);
                                v43 = (uint64_t **)(v38 + 1);
                                if (v42 >= (unsigned __int16)v37)
                                {
                                  v43 = (uint64_t **)v40;
                                  v39 = (uint64_t **)v40;
                                }
                                v38 = *v43;
                              }
                              while (v38);
                              if (v39 == &v555)
                                goto LABEL_56;
                              if (v42 < (unsigned __int16)v37)
                                v40 = (uint64_t *)v41;
                              if (*((unsigned __int16 *)v40 + 16) > (unsigned __int16)v37)
                              {
LABEL_56:
                                v44 = *(_QWORD *)(v36 + 8 * v35);
                                if (*(_BYTE *)(v44 + 16))
                                  v45 = *(double *)(v44 + 20);
                                else
                                  v45 = 0.0;
                                if (*(_BYTE *)(v44 + 28))
                                  v8 = *(double *)(v44 + 32);
                                else
                                  *(_QWORD *)&v8 &= 0xFFFFFFFFFFFFFF00;
                                v46 = v32 + v45;
                                v47 = v32 + v45;
                                v48 = v32 + v45 + v8;
                                if (*(_BYTE *)(v44 + 28))
                                  v49 = *(_QWORD *)&v48;
                                else
                                  v49 = 0;
                                if (v50 != 3)
                                {
                                  v51 = v50;
                                  if (v50 != 4)
                                    v541 = 1;
                                  *(_BYTE *)v52 = v51;
                                  v52[1] = (uint64_t *)v44;
                                  *((double *)v52 + 2) = v46;
                                  if (v51 != 2
                                  {
                                  }
                                }
                              }
                            }
                            v34 = *(unsigned int *)(v33 + 24);
                          }
                          ++v35;
                        }
                        while (v35 < v34);
                        if ((v541 & 1) != 0)
                      }
                    }
                    v26 = *(unsigned int *)(v15 + 52);
                  }
                }
                v9 = a8;
                v10 = (_BYTE *)a4;
              }
            }
          }
        }
      }
      ++v14;
      a2 = v540;
    }
    while (v14 < *v540);
  }
  if (!a3)
  {
    v53 = a2;
    v54 = a2[3];
    if ((_DWORD)v54)
    {
      for (j = 0; j < v54; ++j)
      {
        v56 = *((_QWORD *)v53 + 2);
        if (**(_QWORD **)(v56 + 8 * j))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ACO_");
          std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v56 + 8 * j));
          if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v585.__r_.__value_.__l.__data_);
          if (SHIBYTE(v577) < 0)
            operator delete(__p);
          if (v57 >= 0x10000)
          {
            v58 = *(_QWORD *)(v56 + 8 * j);
            *v59 = 0;
            *((_QWORD *)v59 + 1) = v58;
            *((_QWORD *)v59 + 2) = 0;
          }
          v54 = v53[3];
        }
      }
    }
    v60 = v53[6];
    if ((_DWORD)v60)
    {
      for (k = 0; k < v60; ++k)
      {
        v62 = *(_QWORD *)(v53 + 7);
        if (**(_QWORD **)(v62 + 8 * k))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "AO_");
          std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v62 + 8 * k));
          if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v585.__r_.__value_.__l.__data_);
          if (SHIBYTE(v577) < 0)
            operator delete(__p);
          if (v63 >= 0x10000)
          {
            v64 = *(uint64_t **)(v62 + 8 * k);
            *(_BYTE *)v65 = 0;
            v65[1] = v64;
            v65[2] = 0;
          }
          v60 = v53[6];
        }
      }
    }
    v66 = v53[15];
    if ((_DWORD)v66)
    {
      v67 = 0;
      while (1)
      {
        v68 = *((_QWORD *)v53 + 8);
        if (**(_QWORD **)(v68 + 8 * v67))
          break;
LABEL_119:
        if (++v67 >= v66)
          goto LABEL_120;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "AS_");
      std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v68 + 8 * v67));
      if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v585.__r_.__value_.__l.__data_);
      if (SHIBYTE(v577) < 0)
        operator delete(__p);
      if (HIDWORD(v69))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v68 + 8 * v67));
        if ((SHIBYTE(v577) & 0x80000000) == 0)
        {
          if (HIBYTE(v577) > 7u && HIBYTE(__p) == 48)
            goto LABEL_118;
          goto LABEL_117;
        }
        if (v576 <= 7)
        {
          operator delete(__p);
LABEL_117:
          v71 = *(uint64_t **)(v68 + 8 * v67);
          *(_BYTE *)v72 = 0;
          v72[1] = v71;
          v72[2] = 0;
          goto LABEL_118;
        }
        v70 = *((unsigned __int8 *)__p + 7);
        operator delete(__p);
        if (v70 != 48)
          goto LABEL_117;
      }
LABEL_118:
      v66 = v53[15];
      goto LABEL_119;
    }
LABEL_120:
    v73 = v53[18];
    if ((_DWORD)v73)
    {
      v74 = 0;
      while (1)
      {
        v75 = *(_QWORD *)(v53 + 19);
        if (**(_QWORD **)(v75 + 8 * v74))
          break;
LABEL_137:
        if (++v74 >= v73)
          goto LABEL_138;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "AT_");
      std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v75 + 8 * v74));
      v78 = v77;
      v584.__r_.__value_.__r.__words[0] = v76;
      LODWORD(v584.__r_.__value_.__r.__words[1]) = v77;
      if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v585.__r_.__value_.__l.__data_);
      if (SHIBYTE(v577) < 0)
        operator delete(__p);
      if (v78)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v75 + 8 * v74));
        if ((SHIBYTE(v577) & 0x80000000) == 0)
        {
          if (HIBYTE(v577) > 7u && HIBYTE(__p) == 48)
            goto LABEL_136;
          goto LABEL_135;
        }
        if (v576 <= 7)
        {
          operator delete(__p);
LABEL_135:
          v80 = *(uint64_t **)(v75 + 8 * v74);
          *(_BYTE *)v81 = 0;
          v81[1] = v80;
          v81[2] = 0;
          goto LABEL_136;
        }
        v79 = *((unsigned __int8 *)__p + 7);
        operator delete(__p);
        if (v79 != 48)
          goto LABEL_135;
      }
LABEL_136:
      v73 = v53[18];
      goto LABEL_137;
    }
LABEL_138:
    v82 = v53[21];
    if ((_DWORD)v82)
    {
      for (m = 0; m < v82; ++m)
      {
        v84 = *((_QWORD *)v53 + 11);
        if (**(_QWORD **)(v84 + 8 * m))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ATU_");
          std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v84 + 8 * m));
          if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v585.__r_.__value_.__l.__data_);
          if (SHIBYTE(v577) < 0)
            operator delete(__p);
          if (HIDWORD(v85))
          {
            v86 = *(uint64_t **)(v84 + 8 * m);
            *(_BYTE *)v87 = 0;
            v87[1] = v86;
            v87[2] = 0;
          }
          v82 = v53[21];
        }
      }
    }
    v88 = v53[9];
    if ((_DWORD)v88)
    {
      v89 = 0;
      while (1)
      {
        v90 = *((_QWORD *)v53 + 5);
        if (**(_QWORD **)(v90 + 8 * v89))
          break;
LABEL_166:
        if (++v89 >= v88)
          goto LABEL_167;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
      std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v90 + 8 * v89));
      if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v585.__r_.__value_.__l.__data_);
      if (SHIBYTE(v577) < 0)
        operator delete(__p);
      if (HIDWORD(v91))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v90 + 8 * v89));
        if ((SHIBYTE(v577) & 0x80000000) == 0)
        {
          if (HIBYTE(v577) > 7u && HIBYTE(__p) == 48)
            goto LABEL_165;
          goto LABEL_164;
        }
        if (v576 <= 7)
        {
          operator delete(__p);
LABEL_164:
          v93 = *(uint64_t **)(v90 + 8 * v89);
          *(_BYTE *)v94 = 0;
          v94[1] = v93;
          v94[2] = 0;
          goto LABEL_165;
        }
        v92 = *((unsigned __int8 *)__p + 7);
        operator delete(__p);
        if (v92 != 48)
          goto LABEL_164;
      }
LABEL_165:
      v88 = v53[9];
      goto LABEL_166;
    }
LABEL_167:
    v95 = v53[12];
    if ((_DWORD)v95)
    {
      v96 = 0;
      while (1)
      {
        v97 = *(_QWORD *)(v53 + 13);
        if (**(_QWORD **)(v97 + 8 * v96))
          break;
LABEL_184:
        if (++v96 >= v95)
          goto LABEL_185;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "AC_");
      std::string::basic_string[abi:ne180100]<0>(&v585, **(char ***)(v97 + 8 * v96));
      if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v585.__r_.__value_.__l.__data_);
      if (SHIBYTE(v577) < 0)
        operator delete(__p);
      if (HIDWORD(v98))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v97 + 8 * v96));
        if ((SHIBYTE(v577) & 0x80000000) == 0)
        {
          if (HIBYTE(v577) > 7u && HIBYTE(__p) == 48)
            goto LABEL_183;
          goto LABEL_182;
        }
        if (v576 <= 7)
        {
          operator delete(__p);
LABEL_182:
          v100 = *(uint64_t **)(v97 + 8 * v96);
          *(_BYTE *)v101 = 0;
          v101[1] = v100;
          v101[2] = 0;
          goto LABEL_183;
        }
        v99 = *((unsigned __int8 *)__p + 7);
        operator delete(__p);
        if (v99 != 48)
          goto LABEL_182;
      }
LABEL_183:
      v95 = v53[12];
      goto LABEL_184;
    }
  }
LABEL_185:
  v542 = -66576;
  if (!*v9)
    goto LABEL_1070;
  *(_QWORD *)v547 = 1;
  *v10 = a3;
  v102 = v548;
  if (v548 != &v549)
  {
    do
    {
      v103 = v102[1];
      if (*((unsigned __int8 *)v102 + 40) - 3 > 1)
      {
        if (v103)
        {
          do
          {
            v105 = (uint64_t **)v103;
            v103 = (uint64_t *)*v103;
          }
          while (v103);
        }
        else
        {
          do
          {
            v105 = (uint64_t **)v102[2];
            v446 = *v105 == (uint64_t *)v102;
            v102 = v105;
          }
          while (!v446);
        }
      }
      else
      {
        v104 = v102;
        if (v103)
        {
          do
          {
            v105 = (uint64_t **)v103;
            v103 = (uint64_t *)*v103;
          }
          while (v103);
        }
        else
        {
          do
          {
            v105 = (uint64_t **)v104[2];
            v446 = *v105 == (uint64_t *)v104;
            v104 = v105;
          }
          while (!v446);
        }
        if (v548 == v102)
          v548 = v105;
        --v550;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v549, (uint64_t *)v102);
        operator delete(v102);
      }
      v102 = v105;
    }
    while (v105 != &v549);
  }
  v106 = v551;
  if (v551 != (uint64_t *)&v552)
  {
    do
    {
      v107 = (uint64_t *)v106[1];
      if (*((unsigned __int8 *)v106 + 40) - 3 > 1)
      {
        if (v107)
        {
          do
          {
            v109 = v107;
            v107 = (uint64_t *)*v107;
          }
          while (v107);
        }
        else
        {
          do
          {
            v109 = (uint64_t *)v106[2];
            v446 = *v109 == (_QWORD)v106;
            v106 = v109;
          }
          while (!v446);
        }
      }
      else
      {
        v108 = v106;
        if (v107)
        {
          do
          {
            v109 = v107;
            v107 = (uint64_t *)*v107;
          }
          while (v107);
        }
        else
        {
          do
          {
            v109 = (uint64_t *)v108[2];
            v446 = *v109 == (_QWORD)v108;
            v108 = v109;
          }
          while (!v446);
        }
        if (v551 == v106)
          v551 = v109;
        --v553;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v552, v106);
        operator delete(v106);
      }
      v106 = v109;
    }
    while (v109 != (uint64_t *)&v552);
  }
  v110 = v554;
  if (v554 != (uint64_t *)&v555)
  {
    do
    {
      v111 = (uint64_t *)v110[1];
      if (*((unsigned __int8 *)v110 + 40) - 3 > 1)
      {
        if (v111)
        {
          do
          {
            v113 = v111;
            v111 = (uint64_t *)*v111;
          }
          while (v111);
        }
        else
        {
          do
          {
            v113 = (uint64_t *)v110[2];
            v446 = *v113 == (_QWORD)v110;
            v110 = v113;
          }
          while (!v446);
        }
      }
      else
      {
        v112 = v110;
        if (v111)
        {
          do
          {
            v113 = v111;
            v111 = (uint64_t *)*v111;
          }
          while (v111);
        }
        else
        {
          do
          {
            v113 = (uint64_t *)v112[2];
            v446 = *v113 == (_QWORD)v112;
            v112 = v113;
          }
          while (!v446);
        }
        if (v554 == v110)
          v554 = v113;
        --v556;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v555, v110);
        operator delete(v110);
      }
      v110 = v113;
    }
    while (v113 != (uint64_t *)&v555);
  }
  v114 = v563;
  if (v563 != (uint64_t *)&v564)
  {
    do
    {
      v115 = (uint64_t *)v114[1];
      if (*((unsigned __int8 *)v114 + 40) - 3 > 1)
      {
        if (v115)
        {
          do
          {
            v117 = v115;
            v115 = (uint64_t *)*v115;
          }
          while (v115);
        }
        else
        {
          do
          {
            v117 = (uint64_t *)v114[2];
            v446 = *v117 == (_QWORD)v114;
            v114 = v117;
          }
          while (!v446);
        }
      }
      else
      {
        v116 = v114;
        if (v115)
        {
          do
          {
            v117 = v115;
            v115 = (uint64_t *)*v115;
          }
          while (v115);
        }
        else
        {
          do
          {
            v117 = (uint64_t *)v116[2];
            v446 = *v117 == (_QWORD)v116;
            v116 = v117;
          }
          while (!v446);
        }
        if (v563 == v114)
          v563 = v117;
        --v565;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v564, v114);
        operator delete(v114);
      }
      v114 = v117;
    }
    while (v117 != (uint64_t *)&v564);
  }
  v118 = v566;
  if (v566 != (uint64_t *)&v567)
  {
    do
    {
      v119 = (uint64_t *)v118[1];
      if (*((unsigned __int8 *)v118 + 40) - 3 > 1)
      {
        if (v119)
        {
          do
          {
            v121 = v119;
            v119 = (uint64_t *)*v119;
          }
          while (v119);
        }
        else
        {
          do
          {
            v121 = (uint64_t *)v118[2];
            v446 = *v121 == (_QWORD)v118;
            v118 = v121;
          }
          while (!v446);
        }
      }
      else
      {
        v120 = v118;
        if (v119)
        {
          do
          {
            v121 = v119;
            v119 = (uint64_t *)*v119;
          }
          while (v119);
        }
        else
        {
          do
          {
            v121 = (uint64_t *)v120[2];
            v446 = *v121 == (_QWORD)v120;
            v120 = v121;
          }
          while (!v446);
        }
        if (v566 == v118)
          v566 = v121;
        --v568;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v567, v118);
        operator delete(v118);
      }
      v118 = v121;
    }
    while (v121 != (uint64_t *)&v567);
  }
  v122 = v557;
  if (v557 != (uint64_t *)&v558)
  {
    do
    {
      v123 = (uint64_t *)v122[1];
      if (*((unsigned __int8 *)v122 + 40) - 3 > 1)
      {
        if (v123)
        {
          do
          {
            v125 = v123;
            v123 = (uint64_t *)*v123;
          }
          while (v123);
        }
        else
        {
          do
          {
            v125 = (uint64_t *)v122[2];
            v446 = *v125 == (_QWORD)v122;
            v122 = v125;
          }
          while (!v446);
        }
      }
      else
      {
        v124 = v122;
        if (v123)
        {
          do
          {
            v125 = v123;
            v123 = (uint64_t *)*v123;
          }
          while (v123);
        }
        else
        {
          do
          {
            v125 = (uint64_t *)v124[2];
            v446 = *v125 == (_QWORD)v124;
            v124 = v125;
          }
          while (!v446);
        }
        if (v557 == v122)
          v557 = v125;
        --v559;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v558, v122);
        operator delete(v122);
      }
      v122 = v125;
    }
    while (v125 != (uint64_t *)&v558);
  }
  v126 = v560;
  if (v560 != (uint64_t *)&v561)
  {
    do
    {
      v127 = (uint64_t *)v126[1];
      if (*((unsigned __int8 *)v126 + 40) - 3 > 1)
      {
        if (v127)
        {
          do
          {
            v129 = v127;
            v127 = (uint64_t *)*v127;
          }
          while (v127);
        }
        else
        {
          do
          {
            v129 = (uint64_t *)v126[2];
            v446 = *v129 == (_QWORD)v126;
            v126 = v129;
          }
          while (!v446);
        }
      }
      else
      {
        v128 = v126;
        if (v127)
        {
          do
          {
            v129 = v127;
            v127 = (uint64_t *)*v127;
          }
          while (v127);
        }
        else
        {
          do
          {
            v129 = (uint64_t *)v128[2];
            v446 = *v129 == (_QWORD)v128;
            v128 = v129;
          }
          while (!v446);
        }
        if (v560 == v126)
          v560 = v129;
        --v562;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v561, v126);
        operator delete(v126);
      }
      v126 = v129;
    }
    while (v129 != (uint64_t *)&v561);
  }
  v130 = v569;
  if (v569 != (uint64_t *)&v570)
  {
    do
    {
      v131 = (uint64_t *)v130[1];
      if (*((unsigned __int8 *)v130 + 40) - 3 > 1)
      {
        if (v131)
        {
          do
          {
            v133 = v131;
            v131 = (uint64_t *)*v131;
          }
          while (v131);
        }
        else
        {
          do
          {
            v133 = (uint64_t *)v130[2];
            v446 = *v133 == (_QWORD)v130;
            v130 = v133;
          }
          while (!v446);
        }
      }
      else
      {
        v132 = v130;
        if (v131)
        {
          do
          {
            v133 = v131;
            v131 = (uint64_t *)*v131;
          }
          while (v131);
        }
        else
        {
          do
          {
            v133 = (uint64_t *)v132[2];
            v446 = *v133 == (_QWORD)v132;
            v132 = v133;
          }
          while (!v446);
        }
        if (v569 == v130)
          v569 = v133;
        --v571;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v570, v130);
        operator delete(v130);
      }
      v130 = v133;
    }
    while (v133 != (uint64_t *)&v570);
  }
  v134 = *v9;
  v135 = v548;
  if (v548 == &v549)
  {
    v241 = a8;
  }
  else
  {
    v543 = *v9;
    do
    {
      v136 = *(unint64_t **)v547;
      if (a3 == 2)
      {
        if (*(_QWORD *)v547 + 1 > (unint64_t)v134)
          goto LABEL_1070;
        *(_BYTE *)(a4 + *(_QWORD *)v547) = *((_BYTE *)v135 + 40) << 6;
        v136 = (unint64_t *)((char *)v136 + 1);
      }
      if ((unint64_t *)((char *)v136 + 1) > v134)
        goto LABEL_1070;
      v137 = *((_WORD *)v135 + 16);
      *((_BYTE *)v136 + a4) = 0;
      if ((unint64_t *)((char *)v136 + 3) >= v134)
        goto LABEL_1070;
      *((_BYTE *)v136 + a4 + 1) = HIBYTE(v137);
      *(_QWORD *)v547 = (char *)v136 + 3;
      *((_BYTE *)v136 + a4 + 2) = v137;
      if (*((_BYTE *)v135 + 40) == 2)
      {
          goto LABEL_1070;
      }
      else
      {
        v138 = v135[6];
        memset(&v583, 0, sizeof(v583));
        __p = 0;
        v576 = 0;
        v577 = 0;
        if (*((_DWORD *)v138 + 13))
        {
          v139 = 0;
          v140 = 0;
          v141 = 0;
          v142 = 0;
          do
          {
            v143 = *(char ***)(v138[7] + 8 * v142);
            std::string::basic_string[abi:ne180100]<0>(&v585, "ACO_");
            std::string::basic_string[abi:ne180100]<0>(&v584, *v143);
            if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v584.__r_.__value_.__l.__data_);
            if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v585.__r_.__value_.__l.__data_);
            if (v144 >= 0x10000)
            {
              if ((unint64_t)v139 >= v141)
              {
                v146 = v139 - v140;
                if (v139 - v140 <= -3)
                {
                  __p = v140;
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                v147 = v146 >> 1;
                if (v141 - (unint64_t)v140 <= (v146 >> 1) + 1)
                  v148 = v147 + 1;
                else
                  v148 = v141 - (_QWORD)v140;
                if (v141 - (unint64_t)v140 >= 0x7FFFFFFFFFFFFFFELL)
                  v149 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v149 = v148;
                if (v149)
                  v149 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v149);
                else
                  v150 = 0;
                v151 = (char *)(v149 + 2 * v147);
                *(_WORD *)v151 = v144;
                v145 = v151 + 2;
                while (v139 != v140)
                {
                  v152 = *((_WORD *)v139 - 1);
                  v139 -= 2;
                  *((_WORD *)v151 - 1) = v152;
                  v151 -= 2;
                }
                v141 = v149 + 2 * v150;
                v576 = (unint64_t)v145;
                if (v140)
                  operator delete(v140);
                v140 = v151;
              }
              else
              {
                *(_WORD *)v139 = v144;
                v145 = v139 + 2;
              }
              v576 = (unint64_t)v145;
              v139 = v145;
            }
            ++v142;
          }
          while (v142 < *((unsigned int *)v138 + 13));
          v577 = v141;
          __p = v140;
        }
        if (*((_BYTE *)v138 + 105))
        {
          size = (char *)v583.__r_.__value_.__l.__size_;
          if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
          {
            v155 = v583.__r_.__value_.__r.__words[0];
            v156 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
            v157 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
            if (v157 < 0)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v158 = v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0];
            if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v157)
              v157 = 2 * v158;
            if (v158 >= 0x3FFFFFFFFFFFFFFFLL)
              v159 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v159 = v157;
            if (v159)
              v160 = (std::string::size_type)operator new(v159);
            else
              v160 = 0;
            v161 = v160 + v156;
            v162 = (_BYTE *)(v160 + v156);
            *v162 = 0;
            v154 = (std::string::size_type)(v162 + 1);
            if (size != (char *)v155)
            {
              v163 = &size[~v155];
              do
              {
                v164 = *--size;
                (v163--)[v160] = v164;
              }
              while (size != (char *)v155);
              size = (char *)v583.__r_.__value_.__r.__words[0];
              v161 = v160;
            }
            v583.__r_.__value_.__r.__words[0] = v161;
            v583.__r_.__value_.__r.__words[2] = v160 + v159;
            if (size)
              operator delete(size);
          }
          else
          {
            *(_BYTE *)v583.__r_.__value_.__l.__size_ = 0;
            v154 = (std::string::size_type)(size + 1);
          }
          v583.__r_.__value_.__l.__size_ = v154;
        }
        if (*((_BYTE *)v138 + 148))
        {
          v165 = (char *)v583.__r_.__value_.__l.__size_;
          if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
          {
            v167 = v583.__r_.__value_.__r.__words[0];
            v168 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
            v169 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
            if (v169 < 0)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v170 = v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0];
            if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v169)
              v169 = 2 * v170;
            if (v170 >= 0x3FFFFFFFFFFFFFFFLL)
              v171 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v171 = v169;
            if (v171)
              v172 = (std::string::size_type)operator new(v171);
            else
              v172 = 0;
            v173 = v172 + v168;
            v174 = (_BYTE *)(v172 + v168);
            *v174 = 1;
            v166 = (std::string::size_type)(v174 + 1);
            if (v165 != (char *)v167)
            {
              v175 = &v165[~v167];
              do
              {
                v176 = *--v165;
                (v175--)[v172] = v176;
              }
              while (v165 != (char *)v167);
              v165 = (char *)v583.__r_.__value_.__r.__words[0];
              v173 = v172;
            }
            v583.__r_.__value_.__r.__words[0] = v173;
            v583.__r_.__value_.__r.__words[2] = v172 + v171;
            if (v165)
              operator delete(v165);
          }
          else
          {
            *(_BYTE *)v583.__r_.__value_.__l.__size_ = 1;
            v166 = (std::string::size_type)(v165 + 1);
          }
          v583.__r_.__value_.__l.__size_ = v166;
          if (*((_BYTE *)v138 + 140))
            v177 = 0x80;
          else
            v177 = 0;
          v178 = (char *)v583.__r_.__value_.__l.__size_;
          if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
          {
            v180 = v583.__r_.__value_.__r.__words[0];
            v181 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
            v182 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
            if (v182 < 0)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v183 = v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0];
            if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v182)
              v182 = 2 * v183;
            if (v183 >= 0x3FFFFFFFFFFFFFFFLL)
              v184 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v184 = v182;
            if (v184)
              v185 = (std::string::size_type)operator new(v184);
            else
              v185 = 0;
            v186 = v185 + v181;
            v187 = (char *)(v185 + v181);
            *v187 = v177;
            v179 = (std::string::size_type)(v187 + 1);
            if (v178 != (char *)v180)
            {
              v188 = &v178[~v180];
              do
              {
                v189 = *--v178;
                (v188--)[v185] = v189;
              }
              while (v178 != (char *)v180);
              v178 = (char *)v583.__r_.__value_.__r.__words[0];
              v186 = v185;
            }
            v583.__r_.__value_.__r.__words[0] = v186;
            v583.__r_.__value_.__r.__words[2] = v185 + v184;
            if (v178)
              operator delete(v178);
          }
          else
          {
            *(_BYTE *)v583.__r_.__value_.__l.__size_ = v177;
            v179 = (std::string::size_type)(v178 + 1);
          }
          v583.__r_.__value_.__l.__size_ = v179;
        }
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(v138 + 19)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(v138 + 21)))))) & 1) != 0)
        {
          v190 = (char *)v583.__r_.__value_.__l.__size_;
          if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
          {
            v192 = v583.__r_.__value_.__r.__words[0];
            v193 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
            v194 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
            if (v194 < 0)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v195 = v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0];
            if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v194)
              v194 = 2 * v195;
            if (v195 >= 0x3FFFFFFFFFFFFFFFLL)
              v196 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v196 = v194;
            if (v196)
              v197 = (std::string::size_type)operator new(v196);
            else
              v197 = 0;
            v198 = v197 + v193;
            v199 = (_BYTE *)(v197 + v193);
            *v199 = 2;
            v191 = (std::string::size_type)(v199 + 1);
            if (v190 != (char *)v192)
            {
              v200 = &v190[~v192];
              do
              {
                v201 = *--v190;
                (v200--)[v197] = v201;
              }
              while (v190 != (char *)v192);
              v190 = (char *)v583.__r_.__value_.__r.__words[0];
              v198 = v197;
            }
            v583.__r_.__value_.__r.__words[0] = v198;
            v583.__r_.__value_.__r.__words[2] = v197 + v196;
            if (v190)
              operator delete(v190);
          }
          else
          {
            *(_BYTE *)v583.__r_.__value_.__l.__size_ = 2;
            v191 = (std::string::size_type)(v190 + 1);
          }
          v583.__r_.__value_.__l.__size_ = v191;
        }
        if (*((_BYTE *)v138 + 24))
        {
          v202 = (char *)v583.__r_.__value_.__l.__size_;
          if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
          {
            v204 = v583.__r_.__value_.__r.__words[0];
            v205 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
            v206 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
            if (v206 < 0)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v207 = v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0];
            if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v206)
              v206 = 2 * v207;
            if (v207 >= 0x3FFFFFFFFFFFFFFFLL)
              v208 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v208 = v206;
            if (v208)
              v209 = (std::string::size_type)operator new(v208);
            else
              v209 = 0;
            v210 = v209 + v205;
            v211 = (_BYTE *)(v209 + v205);
            *v211 = 3;
            v203 = (std::string::size_type)(v211 + 1);
            if (v202 != (char *)v204)
            {
              v212 = &v202[~v204];
              do
              {
                v213 = *--v202;
                (v212--)[v209] = v213;
              }
              while (v202 != (char *)v204);
              v202 = (char *)v583.__r_.__value_.__r.__words[0];
              v210 = v209;
            }
            v583.__r_.__value_.__r.__words[0] = v210;
            v583.__r_.__value_.__r.__words[2] = v209 + v208;
            if (v202)
              operator delete(v202);
          }
          else
          {
            *(_BYTE *)v583.__r_.__value_.__l.__size_ = 3;
            v203 = (std::string::size_type)(v202 + 1);
          }
          v583.__r_.__value_.__l.__size_ = v203;
        }
        if (*((_BYTE *)v138 + 36))
        {
          v214 = (char *)v583.__r_.__value_.__l.__size_;
          if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
          {
            v216 = v583.__r_.__value_.__r.__words[0];
            v217 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
            v218 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
            if (v218 < 0)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v219 = v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0];
            if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v218)
              v218 = 2 * v219;
            if (v219 >= 0x3FFFFFFFFFFFFFFFLL)
              v220 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v220 = v218;
            if (v220)
              v221 = (std::string::size_type)operator new(v220);
            else
              v221 = 0;
            v222 = v221 + v217;
            v223 = (_BYTE *)(v221 + v217);
            *v223 = 4;
            v215 = (std::string::size_type)(v223 + 1);
            if (v214 != (char *)v216)
            {
              v224 = &v214[~v216];
              do
              {
                v225 = *--v214;
                (v224--)[v221] = v225;
              }
              while (v214 != (char *)v216);
              v214 = (char *)v583.__r_.__value_.__r.__words[0];
              v222 = v221;
            }
            v583.__r_.__value_.__r.__words[0] = v222;
            v583.__r_.__value_.__r.__words[2] = v221 + v220;
            if (v214)
              operator delete(v214);
          }
          else
          {
            *(_BYTE *)v583.__r_.__value_.__l.__size_ = 4;
            v215 = (std::string::size_type)(v214 + 1);
          }
          v583.__r_.__value_.__l.__size_ = v215;
        }
        if (*((float *)v138 + 12) != 0.0)
        {
          v226 = (char *)v583.__r_.__value_.__l.__size_;
          if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
          {
            v228 = v583.__r_.__value_.__r.__words[0];
            v229 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
            v230 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
            if (v230 < 0)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v231 = v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0];
            if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v230)
              v230 = 2 * v231;
            if (v231 >= 0x3FFFFFFFFFFFFFFFLL)
              v232 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v232 = v230;
            if (v232)
              v233 = (std::string::size_type)operator new(v232);
            else
              v233 = 0;
            v234 = v233 + v229;
            v235 = (_BYTE *)(v233 + v229);
            *v235 = 5;
            v227 = (std::string::size_type)(v235 + 1);
            if (v226 != (char *)v228)
            {
              v236 = &v226[~v228];
              do
              {
                v237 = *--v226;
                (v236--)[v233] = v237;
              }
              while (v226 != (char *)v228);
              v226 = (char *)v583.__r_.__value_.__r.__words[0];
              v234 = v233;
            }
            v583.__r_.__value_.__r.__words[0] = v234;
            v583.__r_.__value_.__r.__words[2] = v233 + v232;
            if (v226)
              operator delete(v226);
          }
          else
          {
            *(_BYTE *)v583.__r_.__value_.__l.__size_ = 5;
            v227 = (std::string::size_type)(v226 + 1);
          }
          v583.__r_.__value_.__l.__size_ = v227;
        }
        if (__p)
          operator delete(__p);
        if (v583.__r_.__value_.__r.__words[0])
          operator delete(v583.__r_.__value_.__l.__data_);
        if (!v238)
          goto LABEL_1070;
      }
      v239 = v135[1];
      if (v239)
      {
        do
        {
          v240 = (uint64_t **)v239;
          v239 = (uint64_t *)*v239;
        }
        while (v239);
      }
      else
      {
        do
        {
          v240 = (uint64_t **)v135[2];
          v446 = *v240 == (uint64_t *)v135;
          v135 = v240;
        }
        while (!v446);
      }
      v135 = v240;
      v134 = v543;
    }
    while (v240 != &v549);
    v241 = a8;
    v134 = *a8;
  }
  v242 = v551;
  if (v551 == (uint64_t *)&v552)
    goto LABEL_596;
  v544 = v134;
  do
  {
    v243 = *(unint64_t **)v547;
    if (a3 == 2)
    {
      if (*(_QWORD *)v547 + 1 > (unint64_t)v134)
        goto LABEL_1070;
      *(_BYTE *)(a4 + *(_QWORD *)v547) = *((_BYTE *)v242 + 40) << 6;
      v243 = (unint64_t *)((char *)v243 + 1);
    }
    if ((unint64_t *)((char *)v243 + 1) > v134)
      goto LABEL_1070;
    v244 = *((_WORD *)v242 + 16);
    *((_BYTE *)v243 + a4) = 16;
    if ((unint64_t *)((char *)v243 + 3) >= v134)
      goto LABEL_1070;
    *((_BYTE *)v243 + a4 + 1) = HIBYTE(v244);
    *(_QWORD *)v547 = (char *)v243 + 3;
    *((_BYTE *)v243 + a4 + 2) = v244;
    if (*((_BYTE *)v242 + 40) == 2)
    {
        goto LABEL_1070;
      goto LABEL_589;
    }
    v245 = v242[6];
    memset(&v583, 0, sizeof(v583));
    __p = 0;
    v576 = 0;
    v577 = 0;
    if (*(_DWORD *)(v245 + 24))
    {
      v246 = 0;
      v247 = 0;
      v248 = 0;
      v249 = 0;
      do
      {
        v250 = *(char ***)(*(_QWORD *)(v245 + 28) + 8 * v249);
        std::string::basic_string[abi:ne180100]<0>(&v585, "AO_");
        std::string::basic_string[abi:ne180100]<0>(&v584, *v250);
        if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v584.__r_.__value_.__l.__data_);
        if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v585.__r_.__value_.__l.__data_);
        if (v251 >= 0x10000)
        {
          v252 = v555;
          if (v555)
          {
            v253 = &v555;
            do
            {
              v254 = v252;
              v255 = v253;
              v256 = *((unsigned __int16 *)v252 + 16);
              v257 = (uint64_t **)(v252 + 1);
              if (v256 >= (unsigned __int16)v251)
              {
                v257 = (uint64_t **)v254;
                v253 = (uint64_t **)v254;
              }
              v252 = *v257;
            }
            while (v252);
            if (v253 != &v555)
            {
              if (v256 < (unsigned __int16)v251)
                v254 = (uint64_t *)v255;
              if (*((unsigned __int16 *)v254 + 16) <= (unsigned __int16)v251)
              {
                if ((unint64_t)v246 >= v248)
                {
                  v259 = v246 - v247;
                  if (v246 - v247 <= -3)
                  {
                    __p = v247;
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  v260 = v259 >> 1;
                  if (v248 - (unint64_t)v247 <= (v259 >> 1) + 1)
                    v261 = v260 + 1;
                  else
                    v261 = v248 - (_QWORD)v247;
                  if (v248 - (unint64_t)v247 >= 0x7FFFFFFFFFFFFFFELL)
                    v262 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v262 = v261;
                  if (v262)
                    v262 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v262);
                  else
                    v263 = 0;
                  v264 = (char *)(v262 + 2 * v260);
                  *(_WORD *)v264 = v251;
                  v258 = v264 + 2;
                  while (v246 != v247)
                  {
                    v265 = *((_WORD *)v246 - 1);
                    v246 -= 2;
                    *((_WORD *)v264 - 1) = v265;
                    v264 -= 2;
                  }
                  v248 = v262 + 2 * v263;
                  v576 = (unint64_t)v258;
                  if (v247)
                    operator delete(v247);
                  v247 = v264;
                }
                else
                {
                  *(_WORD *)v246 = v251;
                  v258 = v246 + 2;
                }
                v576 = (unint64_t)v258;
                v246 = v258;
              }
            }
          }
        }
        ++v249;
      }
      while (v249 < *(unsigned int *)(v245 + 24));
      v577 = v248;
      __p = v247;
      v241 = a8;
    }
    v266 = (*(_BYTE *)(v245 + 96) << 6) + 4 * *(_BYTE *)(v245 + 97);
    v268 = v583.__r_.__value_.__r.__words[2];
    v267 = (char *)v583.__r_.__value_.__l.__size_;
    if (v583.__r_.__value_.__l.__size_ >= v583.__r_.__value_.__r.__words[2])
    {
      v270 = v583.__r_.__value_.__r.__words[0];
      v271 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0];
      v272 = v583.__r_.__value_.__l.__size_ - v583.__r_.__value_.__r.__words[0] + 1;
      if (v272 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]) > v272)
        v272 = 2 * (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0]);
      if (v583.__r_.__value_.__r.__words[2] - v583.__r_.__value_.__r.__words[0] >= 0x3FFFFFFFFFFFFFFFLL)
        v273 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v273 = v272;
      if (v273)
        v274 = (std::string::size_type)operator new(v273);
      else
        v274 = 0;
      v275 = v274 + v271;
      v276 = (_BYTE *)(v274 + v271);
      *v276 = v266;
      v269 = v276 + 1;
      if (v267 != (char *)v270)
      {
        v277 = &v267[~v270];
        do
        {
          v278 = *--v267;
          (v277--)[v274] = v278;
        }
        while (v267 != (char *)v270);
        v267 = (char *)v583.__r_.__value_.__r.__words[0];
        v275 = v274;
      }
      v268 = v274 + v273;
      v583.__r_.__value_.__r.__words[0] = v275;
      v583.__r_.__value_.__r.__words[2] = v268;
      if (v267)
        operator delete(v267);
    }
    else
    {
      *(_BYTE *)v583.__r_.__value_.__l.__size_ = v266;
      v269 = v267 + 1;
    }
    v583.__r_.__value_.__l.__size_ = (std::string::size_type)v269;
    if (*(_BYTE *)(v245 + 77))
    {
      if ((unint64_t)v269 >= v268)
      {
        v280 = v583.__r_.__value_.__r.__words[0];
        v281 = &v269[-v583.__r_.__value_.__r.__words[0]];
        v282 = (int64_t)&v269[-v583.__r_.__value_.__r.__words[0] + 1];
        if (v282 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (2 * (v268 - v583.__r_.__value_.__r.__words[0]) > v282)
          v282 = 2 * (v268 - v583.__r_.__value_.__r.__words[0]);
        if (v268 - v583.__r_.__value_.__r.__words[0] >= 0x3FFFFFFFFFFFFFFFLL)
          v283 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v283 = v282;
        if (v283)
          v284 = (std::string::size_type)operator new(v283);
        else
          v284 = 0;
        v285 = v284 + v283;
        v281[v284] = 0;
        v279 = (std::string::size_type)&v281[v284 + 1];
        if (v269 == (_BYTE *)v280)
        {
          v583.__r_.__value_.__r.__words[0] = (std::string::size_type)&v281[v284];
          v583.__r_.__value_.__l.__size_ = (std::string::size_type)&v281[v284 + 1];
          v583.__r_.__value_.__r.__words[2] = v285;
        }
        else
        {
          v286 = &v269[~v280];
          do
          {
            v287 = *--v269;
            (v286--)[v284] = v287;
          }
          while (v269 != (_BYTE *)v280);
          v269 = (_BYTE *)v583.__r_.__value_.__r.__words[0];
          v583.__r_.__value_.__r.__words[0] = v284;
          v583.__r_.__value_.__l.__size_ = (std::string::size_type)&v281[v284 + 1];
          v583.__r_.__value_.__r.__words[2] = v285;
          if (!v269)
            goto LABEL_583;
        }
        operator delete(v269);
      }
      else
      {
        *v269 = 0;
        v279 = (std::string::size_type)(v269 + 1);
      }
LABEL_583:
      v583.__r_.__value_.__l.__size_ = v279;
    }
    if (__p)
      operator delete(__p);
    if (v583.__r_.__value_.__r.__words[0])
      operator delete(v583.__r_.__value_.__l.__data_);
    if (!v288)
      goto LABEL_1070;
LABEL_589:
    v289 = (uint64_t *)v242[1];
    if (v289)
    {
      do
      {
        v290 = (uint64_t **)v289;
        v289 = (uint64_t *)*v289;
      }
      while (v289);
    }
    else
    {
      do
      {
        v290 = (uint64_t **)v242[2];
        v446 = *v290 == v242;
        v242 = (uint64_t *)v290;
      }
      while (!v446);
    }
    v242 = (uint64_t *)v290;
    v134 = v544;
  }
  while (v290 != &v552);
  v134 = *v241;
LABEL_596:
  v291 = v554;
  if (v554 != (uint64_t *)&v555)
  {
    v545 = v134;
    while (1)
    {
      v292 = *(unint64_t **)v547;
      if (a3 == 2)
      {
        if (*(_QWORD *)v547 + 1 > (unint64_t)v134)
          goto LABEL_1070;
        *(_BYTE *)(a4 + *(_QWORD *)v547) = *((_BYTE *)v291 + 40) << 6;
        v292 = (unint64_t *)((char *)v292 + 1);
      }
      if ((unint64_t *)((char *)v292 + 1) > v134)
        goto LABEL_1070;
      v293 = *((_WORD *)v291 + 16);
      *((_BYTE *)v292 + a4) = 32;
      if ((unint64_t *)((char *)v292 + 3) >= v134)
        goto LABEL_1070;
      *((_BYTE *)v292 + a4 + 1) = HIBYTE(v293);
      *(_QWORD *)v547 = (char *)v292 + 3;
      *((_BYTE *)v292 + a4 + 2) = v293;
      if (*((_BYTE *)v291 + 40) == 2)
      {
          goto LABEL_1070;
        goto LABEL_866;
      }
      v294 = v291[6];
      memset(&v585, 0, sizeof(v585));
      memset(&v584, 0, sizeof(v584));
      v295 = *(char ***)(v294 + 104);
      if (v295)
      {
        std::string::basic_string[abi:ne180100]<0>(&v583, "AP_");
        std::string::basic_string[abi:ne180100]<0>(&v582, *v295);
        if (SHIBYTE(v582.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v582.__r_.__value_.__l.__data_);
        if (SHIBYTE(v583.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v583.__r_.__value_.__l.__data_);
        if (HIDWORD(v296))
        {
          v297 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(1uLL);
          *v297 = v296;
          v584.__r_.__value_.__l.__size_ = (std::string::size_type)(v297 + 1);
          v584.__r_.__value_.__r.__words[2] = (std::string::size_type)&v297[v298];
          v584.__r_.__value_.__r.__words[0] = (std::string::size_type)v297;
        }
      }
      memset(&v583, 0, sizeof(v583));
      if (*(_DWORD *)(v294 + 112))
      {
        v299 = 0;
        v300 = 0;
        v301 = 0;
        v302 = 0;
        do
        {
          v303 = *(char ***)(*(_QWORD *)(v294 + 116) + 8 * v302);
          std::string::basic_string[abi:ne180100]<0>(&v582, "AO_");
          std::string::basic_string[abi:ne180100]<0>(&v581, *v303);
          if (SHIBYTE(v581.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v581.__r_.__value_.__l.__data_);
          if (SHIBYTE(v582.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v582.__r_.__value_.__l.__data_);
          if (v304 >= 0x10000)
          {
            if ((unint64_t)v299 >= v301)
            {
              v306 = v299 - v300;
              if (v299 - v300 <= -3)
              {
                v583.__r_.__value_.__r.__words[2] = v301;
                v583.__r_.__value_.__r.__words[0] = (std::string::size_type)v300;
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              v307 = v306 >> 1;
              if (v301 - (unint64_t)v300 <= (v306 >> 1) + 1)
                v308 = v307 + 1;
              else
                v308 = v301 - (_QWORD)v300;
              if (v301 - (unint64_t)v300 >= 0x7FFFFFFFFFFFFFFELL)
                v309 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v309 = v308;
              if (v309)
                v309 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v309);
              else
                v310 = 0;
              v311 = (char *)(v309 + 2 * v307);
              *(_WORD *)v311 = v304;
              v305 = (std::string::size_type)(v311 + 2);
              while (v299 != v300)
              {
                v312 = *((_WORD *)v299 - 1);
                v299 -= 2;
                *((_WORD *)v311 - 1) = v312;
                v311 -= 2;
              }
              v301 = v309 + 2 * v310;
              v583.__r_.__value_.__l.__size_ = v305;
              if (v300)
                operator delete(v300);
              v300 = v311;
            }
            else
            {
              *(_WORD *)v299 = v304;
              v305 = (std::string::size_type)(v299 + 2);
            }
            v583.__r_.__value_.__l.__size_ = v305;
            v299 = (char *)v305;
          }
          ++v302;
        }
        while (v302 < *(unsigned int *)(v294 + 112));
        v583.__r_.__value_.__r.__words[2] = v301;
        v583.__r_.__value_.__r.__words[0] = (std::string::size_type)v300;
      }
      memset(&v582, 0, sizeof(v582));
      if (*(_DWORD *)(v294 + 124))
      {
        v313 = 0;
        v314 = 0;
        v315 = 0;
        v316 = 0;
        do
        {
          v317 = *(char ***)(*(_QWORD *)(v294 + 128) + 8 * v316);
          std::string::basic_string[abi:ne180100]<0>(&v581, "AO_");
          std::string::basic_string[abi:ne180100]<0>(&v580, *v317);
          if (SHIBYTE(v580.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v580.__r_.__value_.__l.__data_);
          if (SHIBYTE(v581.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v581.__r_.__value_.__l.__data_);
          if (v318 >= 0x10000)
          {
            if ((unint64_t)v313 >= v315)
            {
              v320 = v313 - v314;
              if (v313 - v314 <= -3)
              {
                v582.__r_.__value_.__r.__words[2] = v315;
                v582.__r_.__value_.__r.__words[0] = (std::string::size_type)v314;
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              v321 = v320 >> 1;
              if (v315 - (unint64_t)v314 <= (v320 >> 1) + 1)
                v322 = v321 + 1;
              else
                v322 = v315 - (_QWORD)v314;
              if (v315 - (unint64_t)v314 >= 0x7FFFFFFFFFFFFFFELL)
                v323 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v323 = v322;
              if (v323)
                v323 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v323);
              else
                v324 = 0;
              v325 = (char *)(v323 + 2 * v321);
              *(_WORD *)v325 = v318;
              v319 = (std::string::size_type)(v325 + 2);
              while (v313 != v314)
              {
                v326 = *((_WORD *)v313 - 1);
                v313 -= 2;
                *((_WORD *)v325 - 1) = v326;
                v325 -= 2;
              }
              v315 = v323 + 2 * v324;
              v582.__r_.__value_.__l.__size_ = v319;
              if (v314)
                operator delete(v314);
              v314 = v325;
            }
            else
            {
              *(_WORD *)v313 = v318;
              v319 = (std::string::size_type)(v313 + 2);
            }
            v582.__r_.__value_.__l.__size_ = v319;
            v313 = (char *)v319;
          }
          ++v316;
        }
        while (v316 < *(unsigned int *)(v294 + 124));
        v582.__r_.__value_.__r.__words[2] = v315;
        v582.__r_.__value_.__r.__words[0] = (std::string::size_type)v314;
      }
      memset(&v581, 0, sizeof(v581));
      if (*(_DWORD *)(v294 + 136))
      {
        v327 = 0;
        v328 = 0;
        v329 = 0;
        v330 = 0;
        do
        {
          v331 = *(char ***)(*(_QWORD *)(v294 + 140) + 8 * v330);
          std::string::basic_string[abi:ne180100]<0>(&v580, "ATU_");
          std::string::basic_string[abi:ne180100]<0>(&v579, *v331);
          if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v579.__r_.__value_.__l.__data_);
          if (SHIBYTE(v580.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v580.__r_.__value_.__l.__data_);
          if (HIDWORD(v332))
          {
            if ((unint64_t)v327 >= v329)
            {
              v334 = (v327 - v328) >> 2;
              v335 = v334 + 1;
              if ((unint64_t)(v334 + 1) >> 62)
              {
                v581.__r_.__value_.__r.__words[2] = v329;
                v581.__r_.__value_.__r.__words[0] = (std::string::size_type)v328;
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v329 - (_QWORD)v328) >> 1 > v335)
                v335 = (uint64_t)(v329 - (_QWORD)v328) >> 1;
              if (v329 - (unint64_t)v328 >= 0x7FFFFFFFFFFFFFFCLL)
                v336 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v336 = v335;
              if (v336)
                v336 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v336);
              else
                v337 = 0;
              v338 = (char *)(v336 + 4 * v334);
              *(_DWORD *)v338 = v332;
              v333 = (std::string::size_type)(v338 + 4);
              while (v327 != v328)
              {
                v339 = *((_DWORD *)v327 - 1);
                v327 -= 4;
                *((_DWORD *)v338 - 1) = v339;
                v338 -= 4;
              }
              v329 = v336 + 4 * v337;
              v581.__r_.__value_.__l.__size_ = v333;
              if (v328)
                operator delete(v328);
              v328 = v338;
            }
            else
            {
              *(_DWORD *)v327 = v332;
              v333 = (std::string::size_type)(v327 + 4);
            }
            v581.__r_.__value_.__l.__size_ = v333;
            v327 = (char *)v333;
          }
          ++v330;
        }
        while (v330 < *(unsigned int *)(v294 + 136));
        v581.__r_.__value_.__r.__words[2] = v329;
        v581.__r_.__value_.__r.__words[0] = (std::string::size_type)v328;
      }
      if (*(_BYTE *)(v294 + 174))
        v340 = ((*(_BYTE *)(v294 + 160) != 0) << 7) | 0x40;
      else
        v340 = (*(_BYTE *)(v294 + 160) != 0) << 7;
      v341 = v340 + 16 * *(_BYTE *)(v294 + 168) - 16;
      v342 = v340 | 0x20;
      if (*(_BYTE *)(v294 + 168))
        v342 = v341;
      v343 = *(unsigned __int8 *)(v294 + 169);
      if (v343 >= 0xA)
        LOBYTE(v343) = 10;
      v344 = v342 | v343;
      v345 = (char *)v585.__r_.__value_.__l.__size_;
      if (v585.__r_.__value_.__l.__size_ >= v585.__r_.__value_.__r.__words[2])
      {
        v347 = v585.__r_.__value_.__r.__words[0];
        v348 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0];
        v349 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0] + 1;
        if (v349 < 0)
          goto LABEL_1077;
        v350 = v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0];
        if (2 * (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0]) > v349)
          v349 = 2 * v350;
        if (v350 >= 0x3FFFFFFFFFFFFFFFLL)
          v351 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v351 = v349;
        if (v351)
          v352 = (std::string::size_type)operator new(v351);
        else
          v352 = 0;
        v353 = v352 + v348;
        v354 = (_BYTE *)(v352 + v348);
        *v354 = v344;
        v346 = (std::string::size_type)(v354 + 1);
        if (v345 != (char *)v347)
        {
          v355 = &v345[~v347];
          do
          {
            v356 = *--v345;
            (v355--)[v352] = v356;
          }
          while (v345 != (char *)v347);
          v345 = (char *)v585.__r_.__value_.__r.__words[0];
          v353 = v352;
        }
        v585.__r_.__value_.__r.__words[0] = v353;
        v585.__r_.__value_.__r.__words[2] = v352 + v351;
        if (v345)
          operator delete(v345);
      }
      else
      {
        *(_BYTE *)v585.__r_.__value_.__l.__size_ = v344;
        v346 = (std::string::size_type)(v345 + 1);
      }
      v585.__r_.__value_.__l.__size_ = v346;
      if (*(_BYTE *)(v294 + 171))
        v357 = ((*(_BYTE *)(v294 + 170) == 1) << 7) | 0x40;
      else
        v357 = (*(_BYTE *)(v294 + 170) == 1) << 7;
      if (*(_BYTE *)(v294 + 172))
        v357 |= 0x20u;
      v358 = *(_BYTE *)(v294 + 173) ? v357 | 0x10 : v357;
      v360 = (char *)v585.__r_.__value_.__r.__words[2];
      v359 = (char *)v585.__r_.__value_.__l.__size_;
      if (v585.__r_.__value_.__l.__size_ >= v585.__r_.__value_.__r.__words[2])
      {
        v362 = v585.__r_.__value_.__r.__words[0];
        v363 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0];
        v364 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0] + 1;
        if (v364 < 0)
          goto LABEL_1077;
        if (2 * (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0]) > v364)
          v364 = 2 * (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0]);
        if (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0] >= 0x3FFFFFFFFFFFFFFFLL)
          v365 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v365 = v364;
        if (v365)
          v366 = (std::string::size_type)operator new(v365);
        else
          v366 = 0;
        v367 = v366 + v363;
        v368 = (_BYTE *)(v366 + v363);
        *v368 = v358;
        v361 = v368 + 1;
        if (v359 != (char *)v362)
        {
          v369 = &v359[~v362];
          do
          {
            v370 = *--v359;
            (v369--)[v366] = v370;
          }
          while (v359 != (char *)v362);
          v359 = (char *)v585.__r_.__value_.__r.__words[0];
          v367 = v366;
        }
        v360 = (char *)(v366 + v365);
        v585.__r_.__value_.__r.__words[0] = v367;
        v585.__r_.__value_.__r.__words[2] = v366 + v365;
        if (v359)
          operator delete(v359);
      }
      else
      {
        *(_BYTE *)v585.__r_.__value_.__l.__size_ = v358;
        v361 = v359 + 1;
      }
      v585.__r_.__value_.__l.__size_ = (std::string::size_type)v361;
      if (*(_BYTE *)(v294 + 16))
        break;
LABEL_766:
      if (*(_BYTE *)(v294 + 28))
      {
        v380 = (char *)v585.__r_.__value_.__l.__size_;
        if (v585.__r_.__value_.__l.__size_ >= v585.__r_.__value_.__r.__words[2])
        {
          v382 = v585.__r_.__value_.__r.__words[0];
          v383 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0];
          v384 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0] + 1;
          if (v384 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v385 = v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0];
          if (2 * (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0]) > v384)
            v384 = 2 * v385;
          if (v385 >= 0x3FFFFFFFFFFFFFFFLL)
            v386 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v386 = v384;
          if (v386)
            v387 = (std::string::size_type)operator new(v386);
          else
            v387 = 0;
          v388 = v387 + v383;
          v389 = (_BYTE *)(v387 + v383);
          *v389 = 1;
          v381 = (std::string::size_type)(v389 + 1);
          if (v380 != (char *)v382)
          {
            v390 = &v380[~v382];
            do
            {
              v391 = *--v380;
              (v390--)[v387] = v391;
            }
            while (v380 != (char *)v382);
            v380 = (char *)v585.__r_.__value_.__r.__words[0];
            v388 = v387;
          }
          v585.__r_.__value_.__r.__words[0] = v388;
          v585.__r_.__value_.__r.__words[2] = v387 + v386;
          if (v380)
            operator delete(v380);
        }
        else
        {
          *(_BYTE *)v585.__r_.__value_.__l.__size_ = 1;
          v381 = (std::string::size_type)(v380 + 1);
        }
        v585.__r_.__value_.__l.__size_ = v381;
      }
      if (!*(_BYTE *)(v294 + 172))
        goto LABEL_834;
      v393 = v585.__r_.__value_.__r.__words[2];
      v392 = (char *)v585.__r_.__value_.__l.__size_;
      if (v585.__r_.__value_.__l.__size_ >= v585.__r_.__value_.__r.__words[2])
      {
        v395 = v585.__r_.__value_.__r.__words[0];
        v396 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0];
        v397 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0] + 1;
        if (v397 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (2 * (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0]) > v397)
          v397 = 2 * (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0]);
        if (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0] >= 0x3FFFFFFFFFFFFFFFLL)
          v398 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v398 = v397;
        if (v398)
          v399 = (std::string::size_type)operator new(v398);
        else
          v399 = 0;
        v400 = v399 + v396;
        v401 = (_BYTE *)(v399 + v396);
        *v401 = 2;
        v394 = v401 + 1;
        if (v392 != (char *)v395)
        {
          v402 = &v392[~v395];
          do
          {
            v403 = *--v392;
            (v402--)[v399] = v403;
          }
          while (v392 != (char *)v395);
          v392 = (char *)v585.__r_.__value_.__r.__words[0];
          v400 = v399;
        }
        v393 = v399 + v398;
        v585.__r_.__value_.__r.__words[0] = v400;
        v585.__r_.__value_.__r.__words[2] = v393;
        if (v392)
          operator delete(v392);
      }
      else
      {
        *(_BYTE *)v585.__r_.__value_.__l.__size_ = 2;
        v394 = v392 + 1;
      }
      v585.__r_.__value_.__l.__size_ = (std::string::size_type)v394;
      if (*(_BYTE *)(v294 + 85))
        v404 = 32 * *(_BYTE *)(v294 + 48) + ((*(_BYTE *)(v294 + 84) != 0) << 7) + 64;
      else
        v404 = (*(_BYTE *)(v294 + 84) != 0) << 7;
      if (*(_BYTE *)(v294 + 86))
      {
        if (*(unsigned __int8 *)(v294 + 64) != *(unsigned __int8 *)(v294 + 80))
          __assert_rtn("encode_object", "AudioMetadataSerializer.cpp", 951, "object.audioObjectInteraction.positionInteractionRange.min.isCartesian == object.audioObjectInteraction.positionInteractionRange.max.isCartesian");
        if (*(_BYTE *)(v294 + 64))
          v405 = 12;
        else
          v405 = 8;
        v404 |= v405;
      }
      if ((unint64_t)v394 >= v393)
      {
        v407 = v585.__r_.__value_.__r.__words[0];
        v408 = &v394[-v585.__r_.__value_.__r.__words[0]];
        v409 = (int64_t)&v394[-v585.__r_.__value_.__r.__words[0] + 1];
        if (v409 < 0)
LABEL_1077:
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (2 * (v393 - v585.__r_.__value_.__r.__words[0]) > v409)
          v409 = 2 * (v393 - v585.__r_.__value_.__r.__words[0]);
        if (v393 - v585.__r_.__value_.__r.__words[0] >= 0x3FFFFFFFFFFFFFFFLL)
          v410 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v410 = v409;
        if (v410)
          v411 = (std::string::size_type)operator new(v410);
        else
          v411 = 0;
        v412 = v411 + v410;
        v408[v411] = v404;
        v406 = (std::string::size_type)&v408[v411 + 1];
        if (v394 == (_BYTE *)v407)
        {
          v585.__r_.__value_.__r.__words[0] = (std::string::size_type)&v408[v411];
          v585.__r_.__value_.__l.__size_ = (std::string::size_type)&v408[v411 + 1];
          v585.__r_.__value_.__r.__words[2] = v412;
        }
        else
        {
          v413 = &v394[~v407];
          do
          {
            v414 = *--v394;
            (v413--)[v411] = v414;
          }
          while (v394 != (_BYTE *)v407);
          v394 = (_BYTE *)v585.__r_.__value_.__r.__words[0];
          v585.__r_.__value_.__r.__words[0] = v411;
          v585.__r_.__value_.__l.__size_ = (std::string::size_type)&v408[v411 + 1];
          v585.__r_.__value_.__r.__words[2] = v412;
          if (!v394)
            goto LABEL_830;
        }
        operator delete(v394);
      }
      else
      {
        *v394 = v404;
        v406 = (std::string::size_type)(v394 + 1);
      }
LABEL_830:
      v585.__r_.__value_.__l.__size_ = v406;
      if (*(_BYTE *)(v294 + 85))
      {
      }
      if (*(_BYTE *)(v294 + 86))
      {
      }
LABEL_834:
      v415 = v585.__r_.__value_.__r.__words[2];
      v416 = (char *)v585.__r_.__value_.__l.__size_;
      if (*(float *)(v294 + 148) != 0.0 || *(float *)(v294 + 152) != 0.0 || *(float *)(v294 + 156) != 0.0)
      {
        if (v585.__r_.__value_.__l.__size_ >= v585.__r_.__value_.__r.__words[2])
        {
          v418 = v585.__r_.__value_.__r.__words[0];
          v419 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0];
          v420 = v585.__r_.__value_.__l.__size_ - v585.__r_.__value_.__r.__words[0] + 1;
          if (v420 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v421 = v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0];
          if (2 * (v585.__r_.__value_.__r.__words[2] - v585.__r_.__value_.__r.__words[0]) > v420)
            v420 = 2 * v421;
          if (v421 >= 0x3FFFFFFFFFFFFFFFLL)
            v422 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v422 = v420;
          if (v422)
            v423 = (std::string::size_type)operator new(v422);
          else
            v423 = 0;
          v424 = v423 + v419;
          v425 = (_BYTE *)(v423 + v419);
          *v425 = 3;
          v417 = (std::string::size_type)(v425 + 1);
          if (v416 != (char *)v418)
          {
            v426 = &v416[~v418];
            do
            {
              v427 = *--v416;
              (v426--)[v423] = v427;
            }
            while (v416 != (char *)v418);
            v416 = (char *)v585.__r_.__value_.__r.__words[0];
            v424 = v423;
          }
          v585.__r_.__value_.__r.__words[0] = v424;
          v585.__r_.__value_.__r.__words[2] = v423 + v422;
          if (v416)
            operator delete(v416);
        }
        else
        {
          *(_BYTE *)v585.__r_.__value_.__l.__size_ = 3;
          v417 = (std::string::size_type)(v416 + 1);
        }
        v585.__r_.__value_.__l.__size_ = v417;
        v415 = v585.__r_.__value_.__r.__words[2];
        v416 = (char *)v585.__r_.__value_.__l.__size_;
      }
      v428 = (void *)v585.__r_.__value_.__r.__words[0];
      __p = (void *)v585.__r_.__value_.__r.__words[0];
      v576 = (unint64_t)v416;
      v577 = v415;
      memset(&v585, 0, sizeof(v585));
      v578 = 1;
      if (v581.__r_.__value_.__r.__words[0])
        operator delete(v581.__r_.__value_.__l.__data_);
      if (v582.__r_.__value_.__r.__words[0])
        operator delete(v582.__r_.__value_.__l.__data_);
      if (v583.__r_.__value_.__r.__words[0])
        operator delete(v583.__r_.__value_.__l.__data_);
      if (v584.__r_.__value_.__r.__words[0])
        operator delete(v584.__r_.__value_.__l.__data_);
      {
        if (v428)
          operator delete(v428);
        goto LABEL_1070;
      }
      if (v428)
        operator delete(v428);
LABEL_866:
      v429 = (uint64_t *)v291[1];
      if (v429)
      {
        do
        {
          v430 = (uint64_t **)v429;
          v429 = (uint64_t *)*v429;
        }
        while (v429);
      }
      else
      {
        do
        {
          v430 = (uint64_t **)v291[2];
          v446 = *v430 == v291;
          v291 = (uint64_t *)v430;
        }
        while (!v446);
      }
      v291 = (uint64_t *)v430;
      v134 = v545;
      if (v430 == &v555)
      {
        v134 = *a8;
        goto LABEL_873;
      }
    }
    if (v361 >= v360)
    {
      v372 = v585.__r_.__value_.__r.__words[0];
      v373 = &v361[-v585.__r_.__value_.__r.__words[0]];
      v374 = (int64_t)&v361[-v585.__r_.__value_.__r.__words[0] + 1];
      if (v374 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (2 * (uint64_t)&v360[-v585.__r_.__value_.__r.__words[0]] > (unint64_t)v374)
        v374 = 2 * (_QWORD)&v360[-v585.__r_.__value_.__r.__words[0]];
      if ((unint64_t)&v360[-v585.__r_.__value_.__r.__words[0]] >= 0x3FFFFFFFFFFFFFFFLL)
        v375 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v375 = v374;
      if (v375)
        v376 = (std::string::size_type)operator new(v375);
      else
        v376 = 0;
      v377 = v376 + v375;
      v373[v376] = 0;
      v371 = (std::string::size_type)&v373[v376 + 1];
      if (v361 == (char *)v372)
      {
        v585.__r_.__value_.__r.__words[0] = (std::string::size_type)&v373[v376];
        v585.__r_.__value_.__l.__size_ = (std::string::size_type)&v373[v376 + 1];
        v585.__r_.__value_.__r.__words[2] = v377;
      }
      else
      {
        v378 = &v361[~v372];
        do
        {
          v379 = *--v361;
          (v378--)[v376] = v379;
        }
        while (v361 != (char *)v372);
        v361 = (char *)v585.__r_.__value_.__r.__words[0];
        v585.__r_.__value_.__r.__words[0] = v376;
        v585.__r_.__value_.__l.__size_ = (std::string::size_type)&v373[v376 + 1];
        v585.__r_.__value_.__r.__words[2] = v377;
        if (!v361)
          goto LABEL_765;
      }
      operator delete(v361);
    }
    else
    {
      *v361 = 0;
      v371 = (std::string::size_type)(v361 + 1);
    }
LABEL_765:
    v585.__r_.__value_.__l.__size_ = v371;
    goto LABEL_766;
  }
LABEL_873:
  v431 = v557;
  if (v557 == (uint64_t *)&v558)
  {
    v489 = a8;
LABEL_985:
    v490 = v560;
    if (v560 == (uint64_t *)&v561)
    {
LABEL_1065:
      {
        v542 = 0;
        *v489 = *(unint64_t **)v547;
      }
    }
    else
    {
      while (1)
      {
        v491 = *(unint64_t **)v547;
        if (a3 == 2)
        {
          if (*(_QWORD *)v547 + 1 > (unint64_t)v134)
            break;
          *(_BYTE *)(a4 + *(_QWORD *)v547) = *((_BYTE *)v490 + 40) << 6;
          v491 = (unint64_t *)((char *)v491 + 1);
        }
        if ((unint64_t *)((char *)v491 + 1) > v134)
          break;
        *((_BYTE *)v491 + a4) = 64;
        v492 = (char *)v491 + 6;
        if ((unint64_t *)((char *)v491 + 6) >= v134)
          break;
        v493 = v134;
        *((_BYTE *)v491 + a4 + 1) = *((_BYTE *)v490 + 35);
        v494 = (char *)v491 + a4;
        v494[2] = *((_WORD *)v490 + 17);
        v494[3] = BYTE1(*((_DWORD *)v490 + 8));
        v494[4] = *((_DWORD *)v490 + 8);
        v495 = *((_BYTE *)v490 + 36);
        *(_QWORD *)v547 = v492;
        v494[5] = v495;
        if (*((_BYTE *)v490 + 40) == 2)
        {
            break;
        }
        else
        {
          v496 = v490[6];
          memset(&v584, 0, sizeof(v584));
          if (*(_QWORD *)(v496 + 16))
            v497 = *(char **)(v496 + 16);
          else
            v497 = "";
          std::string::basic_string[abi:ne180100]<0>(&__p, v497);
          if (*(_QWORD *)(v496 + 24))
            v498 = *(char **)(v496 + 24);
          else
            v498 = "";
          std::string::basic_string[abi:ne180100]<0>(&v585, v498);
          v499 = HIBYTE(v577);
          if (v577 < 0)
            v499 = v576;
          if (v499 != 4)
            goto LABEL_1015;
          p_p = &__p;
          if (v577 < 0)
            p_p = __p;
          if (*p_p != 825241648)
            goto LABEL_1015;
          v501 = HIBYTE(v585.__r_.__value_.__r.__words[2]);
          if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v501 = v585.__r_.__value_.__l.__size_;
          if (v501 != 3)
            goto LABEL_1015;
          v502 = &v585;
          if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v502 = (std::string *)v585.__r_.__value_.__r.__words[0];
          data_low = LOWORD(v502->__r_.__value_.__l.__data_);
          v504 = v502->__r_.__value_.__s.__data_[2];
          if (data_low == 17232 && v504 == 77)
          {
            v520 = (char *)v584.__r_.__value_.__l.__size_;
            if (v584.__r_.__value_.__l.__size_ >= v584.__r_.__value_.__r.__words[2])
            {
              v522 = v584.__r_.__value_.__r.__words[0];
              v523 = v584.__r_.__value_.__l.__size_ - v584.__r_.__value_.__r.__words[0];
              v524 = v584.__r_.__value_.__l.__size_ - v584.__r_.__value_.__r.__words[0] + 1;
              if (v524 < 0)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v525 = v584.__r_.__value_.__r.__words[2] - v584.__r_.__value_.__r.__words[0];
              if (2 * (v584.__r_.__value_.__r.__words[2] - v584.__r_.__value_.__r.__words[0]) > v524)
                v524 = 2 * v525;
              if (v525 >= 0x3FFFFFFFFFFFFFFFLL)
                v526 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v526 = v524;
              if (v526)
                v527 = (std::string::size_type)operator new(v526);
              else
                v527 = 0;
              v528 = v527 + v523;
              v529 = (_BYTE *)(v527 + v523);
              *v529 = 1;
              v521 = (std::string::size_type)(v529 + 1);
              if (v520 != (char *)v522)
              {
                v530 = &v520[~v522];
                do
                {
                  v531 = *--v520;
                  (v530--)[v527] = v531;
                }
                while (v520 != (char *)v522);
                v520 = (char *)v584.__r_.__value_.__r.__words[0];
                v528 = v527;
              }
              v584.__r_.__value_.__r.__words[0] = v528;
              v584.__r_.__value_.__r.__words[2] = v527 + v526;
              if (v520)
                operator delete(v520);
            }
            else
            {
              *(_BYTE *)v584.__r_.__value_.__l.__size_ = 1;
              v521 = (std::string::size_type)(v520 + 1);
            }
            v584.__r_.__value_.__l.__size_ = v521;
          }
          else
          {
LABEL_1015:
            v506 = (char *)v584.__r_.__value_.__l.__size_;
            if (v584.__r_.__value_.__l.__size_ >= v584.__r_.__value_.__r.__words[2])
            {
              v508 = v584.__r_.__value_.__r.__words[0];
              v509 = v584.__r_.__value_.__l.__size_ - v584.__r_.__value_.__r.__words[0];
              v510 = v584.__r_.__value_.__l.__size_ - v584.__r_.__value_.__r.__words[0] + 1;
              if (v510 < 0)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v511 = v584.__r_.__value_.__r.__words[2] - v584.__r_.__value_.__r.__words[0];
              if (2 * (v584.__r_.__value_.__r.__words[2] - v584.__r_.__value_.__r.__words[0]) > v510)
                v510 = 2 * v511;
              if (v511 >= 0x3FFFFFFFFFFFFFFFLL)
                v512 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v512 = v510;
              if (v512)
                v513 = (std::string::size_type)operator new(v512);
              else
                v513 = 0;
              v514 = v513 + v509;
              *(_BYTE *)(v513 + v509) = 0;
              v507 = v513 + v509 + 1;
              if (v506 != (char *)v508)
              {
                v515 = &v506[~v508];
                do
                {
                  v516 = *--v506;
                  (v515--)[v513] = v516;
                }
                while (v506 != (char *)v508);
                v506 = (char *)v584.__r_.__value_.__r.__words[0];
                v514 = v513;
              }
              v584.__r_.__value_.__r.__words[0] = v514;
              v584.__r_.__value_.__r.__words[2] = v513 + v512;
              if (v506)
                operator delete(v506);
            }
            else
            {
              *(_BYTE *)v584.__r_.__value_.__l.__size_ = 0;
              v507 = (std::string::size_type)(v506 + 1);
            }
            v584.__r_.__value_.__l.__size_ = v507;
          }
          if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v585.__r_.__value_.__l.__data_);
          if (SHIBYTE(v577) < 0)
            operator delete(__p);
          if (v584.__r_.__value_.__r.__words[0])
            operator delete(v584.__r_.__value_.__l.__data_);
          if (!v517)
            break;
        }
        v518 = (uint64_t *)v490[1];
        if (v518)
        {
          do
          {
            v519 = (uint64_t **)v518;
            v518 = (uint64_t *)*v518;
          }
          while (v518);
        }
        else
        {
          do
          {
            v519 = (uint64_t **)v490[2];
            v446 = *v519 == v490;
            v490 = (uint64_t *)v519;
          }
          while (!v446);
        }
        v490 = (uint64_t *)v519;
        v134 = v493;
        if (v519 == &v561)
        {
          v489 = a8;
          v134 = *a8;
          goto LABEL_1065;
        }
      }
    }
  }
  else
  {
    while (1)
    {
      v432 = *(unint64_t **)v547;
      if (a3 == 2)
      {
        if (*(_QWORD *)v547 + 1 > (unint64_t)v134)
          break;
        *(_BYTE *)(a4 + *(_QWORD *)v547) = *((_BYTE *)v431 + 40) << 6;
        v432 = (unint64_t *)((char *)v432 + 1);
      }
      if ((unint64_t *)((char *)v432 + 1) > v134)
        break;
      v433 = *((_DWORD *)v431 + 8);
      *((_BYTE *)v432 + a4) = 48;
      v434 = (char *)v432 + 5;
      if ((unint64_t *)((char *)v432 + 5) >= v134)
        break;
      v435 = v134;
      *((_BYTE *)v432 + a4 + 1) = HIBYTE(v433);
      v436 = (char *)v432 + a4;
      v436[2] = BYTE2(v433);
      v436[3] = BYTE1(v433);
      *(_QWORD *)v547 = v434;
      v436[4] = v433;
      if (*((_BYTE *)v431 + 40) == 2)
      {
          break;
      }
      else
      {
        v437 = v431[6];
        memset(&v582, 0, sizeof(v582));
        if (*(_QWORD *)(v437 + 16))
          v438 = *(char **)(v437 + 16);
        else
          v438 = "";
        std::string::basic_string[abi:ne180100]<0>(&__p, v438);
        if (*(_QWORD *)(v437 + 24))
          v439 = *(char **)(v437 + 24);
        else
          v439 = "";
        std::string::basic_string[abi:ne180100]<0>(&v585, v439);
        v440 = HIBYTE(v577);
        if (v577 < 0)
          v440 = v576;
        if (v440 != 4)
          goto LABEL_903;
        v441 = &__p;
        if (v577 < 0)
          v441 = __p;
        if (*v441 != 825241648)
          goto LABEL_903;
        v442 = HIBYTE(v585.__r_.__value_.__r.__words[2]);
        if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v442 = v585.__r_.__value_.__l.__size_;
        if (v442 != 3)
          goto LABEL_903;
        v443 = &v585;
        if ((v585.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v443 = (std::string *)v585.__r_.__value_.__r.__words[0];
        v444 = LOWORD(v443->__r_.__value_.__l.__data_);
        v445 = v443->__r_.__value_.__s.__data_[2];
        v446 = v444 == 17232 && v445 == 77;
        if (v446)
        {
          v477 = (char *)v582.__r_.__value_.__l.__size_;
          if (v582.__r_.__value_.__l.__size_ >= v582.__r_.__value_.__r.__words[2])
          {
            v479 = v582.__r_.__value_.__r.__words[0];
            v480 = v582.__r_.__value_.__l.__size_ - v582.__r_.__value_.__r.__words[0];
            v481 = v582.__r_.__value_.__l.__size_ - v582.__r_.__value_.__r.__words[0] + 1;
            if (v481 < 0)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v482 = v582.__r_.__value_.__r.__words[2] - v582.__r_.__value_.__r.__words[0];
            if (2 * (v582.__r_.__value_.__r.__words[2] - v582.__r_.__value_.__r.__words[0]) > v481)
              v481 = 2 * v482;
            if (v482 >= 0x3FFFFFFFFFFFFFFFLL)
              v483 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v483 = v481;
            if (v483)
              v484 = (std::string::size_type)operator new(v483);
            else
              v484 = 0;
            v485 = v484 + v480;
            v486 = (_BYTE *)(v484 + v480);
            *v486 = 1;
            v478 = (std::string::size_type)(v486 + 1);
            if (v477 != (char *)v479)
            {
              v487 = &v477[~v479];
              do
              {
                v488 = *--v477;
                (v487--)[v484] = v488;
              }
              while (v477 != (char *)v479);
              v477 = (char *)v582.__r_.__value_.__r.__words[0];
              v485 = v484;
            }
            v582.__r_.__value_.__r.__words[0] = v485;
            v582.__r_.__value_.__r.__words[2] = v484 + v483;
            if (v477)
              operator delete(v477);
          }
          else
          {
            *(_BYTE *)v582.__r_.__value_.__l.__size_ = 1;
            v478 = (std::string::size_type)(v477 + 1);
          }
          v582.__r_.__value_.__l.__size_ = v478;
        }
        else
        {
LABEL_903:
          v447 = (char *)v582.__r_.__value_.__l.__size_;
          if (v582.__r_.__value_.__l.__size_ >= v582.__r_.__value_.__r.__words[2])
          {
            v449 = v582.__r_.__value_.__r.__words[0];
            v450 = v582.__r_.__value_.__l.__size_ - v582.__r_.__value_.__r.__words[0];
            v451 = v582.__r_.__value_.__l.__size_ - v582.__r_.__value_.__r.__words[0] + 1;
            if (v451 < 0)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v452 = v582.__r_.__value_.__r.__words[2] - v582.__r_.__value_.__r.__words[0];
            if (2 * (v582.__r_.__value_.__r.__words[2] - v582.__r_.__value_.__r.__words[0]) > v451)
              v451 = 2 * v452;
            if (v452 >= 0x3FFFFFFFFFFFFFFFLL)
              v453 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v453 = v451;
            if (v453)
              v454 = (std::string::size_type)operator new(v453);
            else
              v454 = 0;
            v455 = v454 + v450;
            v456 = (_BYTE *)(v454 + v450);
            *v456 = 0;
            v448 = (std::string::size_type)(v456 + 1);
            if (v447 != (char *)v449)
            {
              v457 = &v447[~v449];
              do
              {
                v458 = *--v447;
                (v457--)[v454] = v458;
              }
              while (v447 != (char *)v449);
              v447 = (char *)v582.__r_.__value_.__r.__words[0];
              v455 = v454;
            }
            v582.__r_.__value_.__r.__words[0] = v455;
            v582.__r_.__value_.__r.__words[2] = v454 + v453;
            if (v447)
              operator delete(v447);
          }
          else
          {
            *(_BYTE *)v582.__r_.__value_.__l.__size_ = 0;
            v448 = (std::string::size_type)(v447 + 1);
          }
          v582.__r_.__value_.__l.__size_ = v448;
        }
        v459 = *(_QWORD **)(v437 + 32);
        if (v459 && *v459)
        {
          std::string::basic_string[abi:ne180100]<0>(&v584, "AC_");
          std::string::basic_string[abi:ne180100]<0>(&v583, **(char ***)(v437 + 32));
          if (SHIBYTE(v583.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v583.__r_.__value_.__l.__data_);
          if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v584.__r_.__value_.__l.__data_);
          v461 = HIDWORD(v460) != 0;
          if (HIDWORD(v460))
            v462 = 0x80;
          else
            v462 = 0;
        }
        else
        {
          v461 = 0;
          LODWORD(v460) = 0;
          v462 = 0;
        }
        v463 = (char *)v582.__r_.__value_.__l.__size_;
        if (v582.__r_.__value_.__l.__size_ >= v582.__r_.__value_.__r.__words[2])
        {
          v465 = v582.__r_.__value_.__r.__words[0];
          v466 = v582.__r_.__value_.__l.__size_ - v582.__r_.__value_.__r.__words[0];
          v467 = v582.__r_.__value_.__l.__size_ - v582.__r_.__value_.__r.__words[0] + 1;
          if (v467 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v468 = v582.__r_.__value_.__r.__words[2] - v582.__r_.__value_.__r.__words[0];
          if (2 * (v582.__r_.__value_.__r.__words[2] - v582.__r_.__value_.__r.__words[0]) > v467)
            v467 = 2 * v468;
          if (v468 >= 0x3FFFFFFFFFFFFFFFLL)
            v469 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v469 = v467;
          if (v469)
            v470 = (std::string::size_type)operator new(v469);
          else
            v470 = 0;
          v471 = v470 + v466;
          *(_BYTE *)(v470 + v466) = v462;
          v464 = v470 + v466 + 1;
          if (v463 != (char *)v465)
          {
            v472 = &v463[~v465];
            do
            {
              v473 = *--v463;
              (v472--)[v470] = v473;
            }
            while (v463 != (char *)v465);
            v463 = (char *)v582.__r_.__value_.__r.__words[0];
            v471 = v470;
          }
          v582.__r_.__value_.__r.__words[0] = v471;
          v582.__r_.__value_.__r.__words[2] = v470 + v469;
          if (v463)
            operator delete(v463);
        }
        else
        {
          *(_BYTE *)v582.__r_.__value_.__l.__size_ = v462;
          v464 = (std::string::size_type)(v463 + 1);
        }
        v582.__r_.__value_.__l.__size_ = v464;
        if (v461)
        if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v585.__r_.__value_.__l.__data_);
        if (SHIBYTE(v577) < 0)
          operator delete(__p);
        if (v582.__r_.__value_.__r.__words[0])
          operator delete(v582.__r_.__value_.__l.__data_);
        if (!v474)
          break;
      }
      v475 = (uint64_t *)v431[1];
      if (v475)
      {
        do
        {
          v476 = (uint64_t **)v475;
          v475 = (uint64_t *)*v475;
        }
        while (v475);
      }
      else
      {
        do
        {
          v476 = (uint64_t **)v431[2];
          v446 = *v476 == v431;
          v431 = (uint64_t *)v476;
        }
        while (!v446);
      }
      v431 = (uint64_t *)v476;
      v134 = v435;
      if (v476 == &v558)
      {
        v489 = a8;
        v134 = *a8;
        goto LABEL_985;
      }
    }
  }
LABEL_1070:
  return v542;
}

void sub_18EE97408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;
  void *v64;

  if (*(char *)(v62 - 137) < 0)
    operator delete(*(void **)(v62 - 160));
  if (a62 < 0)
    operator delete(__p);
  v64 = *(void **)(v62 - 184);
  if (v64)
    operator delete(v64);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t `anonymous namespace'::parse_content_id(unsigned __int8 *a1, const std::string *a2)
{
  unsigned __int8 *v4;
  uint64_t *v5;
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _BOOL4 v14;
  void *v15;
  std::string *v16;
  NSObject *v17;
  const std::string *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  std::string v24;
  __int16 v25;
  char v26;
  _BYTE v27[28];
  __int16 v28;
  unsigned __int8 *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 23;
  v5 = (uint64_t *)(a1 + 8);
  if ((a1[23] & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  v25 = 0;
  v7 = std::string::basic_string((std::string *)v27, a2, 0, v6, (std::allocator<char> *)&v24);
  v8 = v27[23];
  if (v27[23] >= 0)
    v9 = v27[23];
  else
    v9 = *(_QWORD *)&v27[8];
  v10 = *v4;
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *v5;
  if (v9 != v10)
    goto LABEL_19;
  if (v11 >= 0)
    v12 = a1;
  else
    v12 = *(unsigned __int8 **)a1;
  if ((v27[23] & 0x80000000) != 0)
  {
    v15 = *(void **)v27;
    if (memcmp(*(const void **)v27, v12, *(size_t *)&v27[8]))
    {
      operator delete(v15);
      goto LABEL_31;
    }
  }
  else if (v27[23])
  {
    v13 = v27;
    while (*v13 == *v12)
    {
      ++v13;
      ++v12;
      if (!--v8)
        goto LABEL_24;
    }
LABEL_19:
    v14 = 1;
    if ((v27[23] & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_30;
  }
LABEL_24:
  std::string::basic_string(&v24, a2, v6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v26);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v24;
  else
    v16 = (std::string *)v24.__r_.__value_.__r.__words[0];
  v7 = (std::string *)sscanf((const char *)v16, "%04hx", &v25);
  v14 = (_DWORD)v7 != 1;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if ((v27[23] & 0x80) == 0)
  {
LABEL_20:
    if (!v14)
      goto LABEL_40;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(*(void **)v27);
  if (!v14)
  {
LABEL_40:
    v21 = v25 & 0xFF00;
    v20 = v25;
    v22 = 0x10000;
    return v21 | v20 | v22;
  }
LABEL_31:
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = a2;
    else
      v18 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    if ((a1[23] & 0x80u) == 0)
      v19 = a1;
    else
      v19 = *(unsigned __int8 **)a1;
    *(_DWORD *)v27 = 136315906;
    *(_QWORD *)&v27[4] = "AudioMetadataSerializer.cpp";
    *(_WORD *)&v27[12] = 1024;
    *(_DWORD *)&v27[14] = 2119;
    *(_WORD *)&v27[18] = 2080;
    *(_QWORD *)&v27[20] = v18;
    v28 = 2080;
    v29 = v19;
    _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Content ID '%s' does not match expected pattern '%snnnn'", v27, 0x26u);
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  return v21 | v20 | v22;
}

void sub_18EE97BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::determine_element_status(int a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, double a8, double a9, double a10)
{
  unsigned __int8 v10;
  double v11;
  double v12;

  if (!a1)
    return 0;
  if (a3 && a8 + a9 <= *(double *)&a2)
    return 3;
  if (a5 && *(double *)&a4 < a8)
  {
    v11 = a8 - a10;
    if (v11 <= *(double *)&a4)
    {
      if (!a7)
      {
LABEL_23:
        if (a1 == 2)
          return 2;
        else
          return 3;
      }
    }
    else
    {
      v10 = 3;
      if (!a7 || v11 >= *(double *)&a6)
        return v10;
    }
    if (*(double *)&a6 >= a8)
      return (4 * (a1 == 2));
    goto LABEL_23;
  }
  v12 = 0.0;
  if (a3)
    v12 = *(double *)&a2;
  if (v12 < a8 && a1 == 2)
    return 4;
  else
    return 0;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

char *std::map<unsigned short,`anonymous namespace'::ElementRef<AudioMetadataContent>>::operator[](uint64_t **a1, unsigned __int16 a2)
{
  unsigned __int16 *v4;
  uint64_t **v5;
  _QWORD *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;

  v5 = a1 + 1;
  v4 = (unsigned __int16 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = v4[16];
        if (v7 <= a2)
          break;
        v4 = (unsigned __int16 *)*v6;
        v5 = (uint64_t **)v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= a2)
        break;
      v4 = (unsigned __int16 *)v6[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = v6;
    v6 = operator new(0x40uLL);
    *((_WORD *)v6 + 16) = a2;
    v6[6] = 0;
    v6[7] = 0;
    v6[5] = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = v6;
    v9 = (uint64_t *)**a1;
    v10 = v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (char *)(v6 + 5);
}

uint64_t **std::map<unsigned short,`anonymous namespace'::ElementRef<AudioMetadataObject>>::operator[](uint64_t **a1, unsigned __int16 a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unsigned int v7;
  _WORD *v8;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = *((unsigned __int16 *)v4 + 16);
        if (v7 <= a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = operator new(0x40uLL);
    v8[16] = a2;
    *((_QWORD *)v8 + 6) = 0;
    *((_QWORD *)v8 + 7) = 0;
    *((_QWORD *)v8 + 5) = 0;
    v6 = (uint64_t **)v8;
  }
  return v6 + 5;
}

uint64_t `anonymous namespace'::gather_elements_from_object(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, double a6, double a7, double a8)
{
  double v8;
  double v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int v31;
  char v32;
  std::string::value_type *v33;
  _QWORD *v34;
  _BOOL4 v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  BOOL v39;
  char v40;
  unsigned int v41;
  BOOL v42;
  BOOL v43;
  uint64_t *v44;
  unsigned int v45;
  BOOL v46;
  char v47;
  unsigned int v48;
  char v49;
  uint64_t *v50;
  uint64_t **v51;
  uint64_t v52;
  unint64_t v53;
  std::string::value_type *v54;
  _QWORD *v55;
  _BOOL4 v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned int v59;
  BOOL v60;
  uint64_t *v61;
  uint64_t **v62;
  _QWORD *v63;
  std::string::value_type *v64;
  _QWORD *v65;
  _BOOL4 v66;
  uint64_t v67;
  _QWORD *v68;
  unsigned int v69;
  BOOL v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t **v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  double v77;
  double v78;
  uint64_t v79;
  double v80;
  double v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t **v87;
  unsigned int v88;
  unsigned int v89;
  BOOL v90;
  char v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  _QWORD *v95;
  unint64_t v96;
  std::string::value_type *v97;
  _QWORD *v98;
  _BOOL4 v99;
  uint64_t v100;
  _QWORD *v101;
  unsigned int v102;
  BOOL v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t **v106;
  _QWORD *v107;
  unint64_t v108;
  std::string::value_type *v109;
  _QWORD *v110;
  _BOOL4 v111;
  uint64_t v112;
  _QWORD *v113;
  unsigned int v114;
  BOOL v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t **v118;
  _QWORD *v119;
  unint64_t v120;
  std::string::value_type *v121;
  _BOOL4 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t **v130;
  unint64_t v131;
  char v132;
  uint64_t **v133;
  uint64_t *v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  BOOL v141;
  uint64_t *v142;
  uint64_t v143;
  double v144;
  double v145;
  double v146;
  double v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t **v151;
  unint64_t v152;
  uint64_t **v153;
  uint64_t *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  BOOL v160;
  uint64_t *v161;
  double v162;
  double v163;
  double v164;
  double v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t **v169;
  uint64_t v171;
  char v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t **v182;
  _QWORD *v183;
  uint64_t **v184;
  uint64_t **v185;
  uint64_t **v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t **v191;
  uint64_t *v194[2];
  unint64_t v195;
  int v196;
  std::string v197;
  std::string v198;
  char v199;

  if (*(_BYTE *)(a2 + 24))
    v14 = *(double *)(a2 + 28);
  else
    v14 = 0.0;
  if (*(_BYTE *)(a3 + 16))
    v15 = *(double *)(a3 + 20);
  else
    v15 = 0.0;
  *(double *)v194 = v14 + v15;
  v194[1] = (uint64_t *)1;
  v16 = *(unsigned int *)(a3 + 136);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v191 = (uint64_t **)(a1 + 120);
    v18 = (_QWORD *)(a1 + 128);
    v189 = (_QWORD *)(a1 + 104);
    v183 = (_QWORD *)(a1 + 80);
    v182 = (uint64_t **)(a1 + 72);
    v188 = (_QWORD *)(a1 + 176);
    v185 = (uint64_t **)(a1 + 168);
    v186 = (uint64_t **)(a1 + 96);
    v181 = a1 + 200;
    v187 = (_QWORD *)(a1 + 152);
    v184 = (uint64_t **)(a1 + 144);
    while (1)
    {
      v19 = *(_QWORD *)(a3 + 140);
      if (**(_QWORD **)(v19 + 8 * v17))
        break;
LABEL_245:
      if (++v17 >= v16)
        goto LABEL_246;
    }
    std::string::basic_string[abi:ne180100]<0>(&v198, "ATU_");
    std::string::basic_string[abi:ne180100]<0>(&v197, **(char ***)(v19 + 8 * v17));
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v197.__r_.__value_.__l.__data_);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v198.__r_.__value_.__l.__data_);
    if (!HIDWORD(v20))
      goto LABEL_244;
    v21 = *v18;
    if (*v18)
    {
      v22 = v18;
      do
      {
        v23 = *(_DWORD *)(v21 + 32);
        v24 = v23 >= v20;
        if (v23 >= v20)
          v25 = (uint64_t *)v21;
        else
          v25 = (uint64_t *)(v21 + 8);
        if (v24)
          v22 = (_QWORD *)v21;
        v21 = *v25;
      }
      while (*v25);
      if (v22 != v18 && *((_DWORD *)v22 + 8) <= v20)
      {
LABEL_244:
        v16 = *(unsigned int *)(a3 + 136);
        goto LABEL_245;
      }
    }
    v26 = *(uint64_t **)(v19 + 8 * v17);
    v8 = *(double *)v194;
    *(_BYTE *)v27 = a4;
    v27[1] = v26;
    *((double *)v27 + 2) = v8;
    v28 = *(_QWORD *)(v19 + 8 * v17);
    v29 = *(_QWORD **)(v28 + 12);
    if (!v29 || !*v29)
      goto LABEL_182;
    std::string::basic_string[abi:ne180100]<0>(&v198, "AT_");
    std::string::basic_string[abi:ne180100]<0>(&v197, **(char ***)(v28 + 12));
    v32 = v31;
    v195 = v30;
    v196 = v31;
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v197.__r_.__value_.__l.__data_);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v198.__r_.__value_.__l.__data_);
    if (!v32)
      goto LABEL_182;
    std::string::basic_string[abi:ne180100]<0>(&v198, **(char ***)(v28 + 12));
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    {
      v34 = v189;
      if (v198.__r_.__value_.__l.__size_ < 8)
        goto LABEL_41;
      v33 = (std::string::value_type *)(v198.__r_.__value_.__r.__words[0] + 7);
    }
    else
    {
      v33 = &v198.__r_.__value_.__s.__data_[7];
      v34 = v189;
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 8)
        goto LABEL_41;
    }
    if (*v33 == 48)
    {
      v35 = 0;
      if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_74;
      goto LABEL_76;
    }
LABEL_41:
    v36 = *v34;
    if (!*v34)
      goto LABEL_72;
    v37 = v34;
    do
    {
      v38 = *(_DWORD *)(v36 + 32);
      v39 = v38 == (_DWORD)v30;
      if (v38 >= v30)
        v40 = 1;
      else
        v40 = -1;
      if (v39)
      {
        v41 = *(unsigned __int8 *)(v36 + 36);
        v42 = v41 == BYTE4(v30);
        v40 = v41 >= BYTE4(v30) ? 1 : -1;
        if (v42)
          v40 = 0;
      }
      v43 = (v40 & 0x80) == 0;
      if (v40 < 0)
        v44 = (uint64_t *)(v36 + 8);
      else
        v44 = (uint64_t *)v36;
      if (v43)
        v37 = (_QWORD *)v36;
      v36 = *v44;
    }
    while (*v44);
    v34 = v189;
    if (v37 == v189)
      goto LABEL_72;
    v45 = *((_DWORD *)v37 + 8);
    v46 = v45 == (_DWORD)v30;
    if (v45 <= v30)
      v47 = 1;
    else
      v47 = -1;
    if (v46)
    {
      v48 = *((unsigned __int8 *)v37 + 36);
      if (v48 <= BYTE4(v30))
        v49 = 1;
      else
        v49 = -1;
      if (v48 == BYTE4(v30))
        v47 = 0;
      else
        v47 = v49;
    }
    v34 = v189;
    if (v47 < 0)
LABEL_72:
      v37 = v34;
    v35 = v37 == v34;
    if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_74:
      if (!v35)
        goto LABEL_182;
LABEL_77:
      v50 = *(uint64_t **)(v28 + 12);
      v8 = *(double *)v194;
      *(_BYTE *)v51 = a4;
      v51[1] = v50;
      *((double *)v51 + 2) = v8;
      v52 = *(_QWORD *)(*(_QWORD *)(v28 + 12) + 32);
      if (!v52 || !*(_QWORD *)v52)
        goto LABEL_182;
      std::string::basic_string[abi:ne180100]<0>(&v198, "AS_");
      std::string::basic_string[abi:ne180100]<0>(&v197, *(char **)v52);
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v198.__r_.__value_.__l.__data_);
      if (!HIDWORD(v53))
        goto LABEL_182;
      std::string::basic_string[abi:ne180100]<0>(&v198, *(char **)v52);
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      {
        v55 = v183;
        if (v198.__r_.__value_.__l.__size_ < 8)
          goto LABEL_91;
        v54 = (std::string::value_type *)(v198.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        v54 = &v198.__r_.__value_.__s.__data_[7];
        v55 = v183;
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 8)
          goto LABEL_91;
      }
      if (*v54 == 48)
      {
        v56 = 0;
        goto LABEL_104;
      }
LABEL_91:
      v57 = *v55;
      if (!*v55)
        goto LABEL_102;
      v58 = v55;
      do
      {
        v59 = *(_DWORD *)(v57 + 32);
        v60 = v59 >= v53;
        if (v59 >= v53)
          v61 = (uint64_t *)v57;
        else
          v61 = (uint64_t *)(v57 + 8);
        if (v60)
          v58 = (_QWORD *)v57;
        v57 = *v61;
      }
      while (*v61);
      v55 = v183;
      if (v58 == v183 || *((_DWORD *)v58 + 8) > v53)
LABEL_102:
        v58 = v55;
      v56 = v58 == v55;
LABEL_104:
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v198.__r_.__value_.__l.__data_);
        if (!v56)
          goto LABEL_182;
      }
      else if (!v56)
      {
        goto LABEL_182;
      }
      v8 = *(double *)v194;
      *(_BYTE *)v62 = a4;
      v62[1] = (uint64_t *)v52;
      *((double *)v62 + 2) = v8;
      v63 = *(_QWORD **)(v52 + 32);
      if (v63 && *v63)
      {
        std::string::basic_string[abi:ne180100]<0>(&v198, "AC_");
        std::string::basic_string[abi:ne180100]<0>(&v197, **(char ***)(v52 + 32));
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v197.__r_.__value_.__l.__data_);
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v198.__r_.__value_.__l.__data_);
        if (HIDWORD(v180))
        {
          std::string::basic_string[abi:ne180100]<0>(&v198, **(char ***)(v52 + 32));
          if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
          {
            v65 = v188;
            if (v198.__r_.__value_.__l.__size_ < 8)
              goto LABEL_122;
            v64 = (std::string::value_type *)(v198.__r_.__value_.__r.__words[0] + 7);
          }
          else
          {
            v65 = v188;
            v64 = &v198.__r_.__value_.__s.__data_[7];
            if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 8)
              goto LABEL_122;
          }
          if (*v64 == 48)
          {
            v66 = 0;
            goto LABEL_135;
          }
LABEL_122:
          v67 = *v65;
          if (!*v65)
            goto LABEL_133;
          v68 = v65;
          do
          {
            v69 = *(_DWORD *)(v67 + 32);
            v70 = v69 >= v180;
            if (v69 >= v180)
              v71 = (uint64_t *)v67;
            else
              v71 = (uint64_t *)(v67 + 8);
            if (v70)
              v68 = (_QWORD *)v67;
            v67 = *v71;
          }
          while (*v71);
          v65 = v188;
          if (v68 == v188 || *((_DWORD *)v68 + 8) > v180)
LABEL_133:
            v68 = v65;
          v66 = v68 == v65;
LABEL_135:
          if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v198.__r_.__value_.__l.__data_);
          if (v66)
          {
            v72 = *(uint64_t **)(v52 + 32);
            v8 = *(double *)v194;
            *(_BYTE *)v73 = a4;
            v73[1] = v72;
            *((double *)v73 + 2) = v8;
            if (a4 == 4)
            {
              v74 = *(_QWORD *)(v52 + 32);
              v75 = v180;
              if (*(_DWORD *)(v74 + 24))
              {
                v76 = 0;
                v171 = v74;
                do
                {
                  v178 = *(_QWORD *)(*(_QWORD *)(v74 + 28) + 8 * v76);
                  if (*(_QWORD *)v178)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&v197, *(char **)v178);
                    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v197.__r_.__value_.__l.__data_);
                    if (HIDWORD(v179))
                    {
                      v77 = 0.0;
                      v78 = 0.0;
                      if (*(_BYTE *)(v178 + 8))
                        v78 = *(double *)(v178 + 12);
                      if (*(_BYTE *)(v178 + 20))
                        v77 = *(double *)(v178 + 24);
                      v177 = v176 & 0xFFFFFFFFFFFFFF00;
                      if (v76 + 1 >= *(unsigned int *)(v74 + 24))
                      {
                        v83 = v177;
                        v82 = v175 & 0xFFFFFFFFFFFFFF00;
                      }
                      else
                      {
                        v79 = *(_QWORD *)(*(_QWORD *)(v74 + 28) + 8 * (v76 + 1));
                        v80 = 0.0;
                        v81 = 0.0;
                        if (*(_BYTE *)(v79 + 8))
                          v81 = *(double *)(v79 + 12);
                        if (*(_BYTE *)(v79 + 20))
                          v80 = *(double *)(v79 + 24);
                        *(double *)&v82 = *(double *)v194 + v81 + v80;
                        v83 = v177 | 1;
                      }
                      v175 = v82;
                      v176 = v83;
                      if (v84 <= 2)
                      {
                        v174 = v76;
                        v172 = v199;
                        v173 = v84;
                        v85 = v181;
LABEL_158:
                        v86 = *(uint64_t **)v85;
                        v87 = (uint64_t **)v85;
                        if (*(_QWORD *)v85)
                        {
                          while (1)
                          {
                            v85 = (uint64_t)v86;
                            v88 = *((_DWORD *)v86 + 8);
                            if (v88 == (_DWORD)v180)
                            {
                              v89 = *(_DWORD *)(v85 + 36);
                              v90 = v89 == (_DWORD)v179;
                              if (v89 > v179)
                                goto LABEL_158;
                              if (v89 >= v179)
                                v91 = 1;
                              else
                                v91 = -1;
                              if (v90)
                                v91 = 0;
                            }
                            else
                            {
                              if (v88 > v180)
                                goto LABEL_158;
                              v91 = v88 >= v180 ? 1 : -1;
                            }
                            if ((v91 & 0x80) == 0)
                              break;
                            v86 = *(uint64_t **)(v85 + 8);
                            if (!v86)
                            {
                              v87 = (uint64_t **)(v85 + 8);
                              goto LABEL_174;
                            }
                          }
                          v92 = (uint64_t *)v85;
                        }
                        else
                        {
LABEL_174:
                          v92 = (uint64_t *)operator new(0x40uLL);
                          v92[4] = (v179 << 32) | v180;
                          v92[5] = 0;
                          v92[6] = 0;
                          v92[7] = 0;
                          *v92 = 0;
                          v92[1] = 0;
                          v92[2] = v85;
                          *v87 = v92;
                          v93 = **(_QWORD **)(a1 + 192);
                          v94 = v92;
                          if (v93)
                          {
                            *(_QWORD *)(a1 + 192) = v93;
                            v94 = *v87;
                          }
                          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 200), v94);
                          ++*(_QWORD *)(a1 + 208);
                        }
                        *((_BYTE *)v92 + 40) = v173;
                        v92[6] = v178;
                        *((_BYTE *)v92 + 56) = v172;
                        v75 = v180;
                        v74 = v171;
                        v76 = v174;
                      }
                    }
                  }
                  ++v76;
                }
                while (v76 < *(unsigned int *)(v74 + 24));
              }
              if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v198.__r_.__value_.__l.__data_);
            }
          }
        }
      }
LABEL_182:
      v95 = *(_QWORD **)(v28 + 20);
      if (!v95 || !*v95)
        goto LABEL_213;
      std::string::basic_string[abi:ne180100]<0>(&v198, "AC_");
      std::string::basic_string[abi:ne180100]<0>(&v197, **(char ***)(v28 + 20));
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v198.__r_.__value_.__l.__data_);
      if (!HIDWORD(v96))
      {
LABEL_213:
        v107 = *(_QWORD **)(v28 + 28);
        if (!v107 || !*v107)
          goto LABEL_244;
        std::string::basic_string[abi:ne180100]<0>(&v198, "AP_");
        std::string::basic_string[abi:ne180100]<0>(&v197, **(char ***)(v28 + 28));
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v197.__r_.__value_.__l.__data_);
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v198.__r_.__value_.__l.__data_);
        if (!HIDWORD(v108))
          goto LABEL_244;
        std::string::basic_string[abi:ne180100]<0>(&v198, **(char ***)(v28 + 28));
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        {
          v110 = v187;
          if (v198.__r_.__value_.__l.__size_ < 8)
            goto LABEL_228;
          v109 = (std::string::value_type *)(v198.__r_.__value_.__r.__words[0] + 7);
        }
        else
        {
          v109 = &v198.__r_.__value_.__s.__data_[7];
          v110 = v187;
          if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 8)
            goto LABEL_228;
        }
        if (*v109 == 48)
        {
          v111 = 0;
          if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_242;
          goto LABEL_241;
        }
LABEL_228:
        v112 = *v110;
        if (!*v110)
          goto LABEL_239;
        v113 = v110;
        do
        {
          v114 = *(_DWORD *)(v112 + 32);
          v115 = v114 >= v108;
          if (v114 >= v108)
            v116 = (uint64_t *)v112;
          else
            v116 = (uint64_t *)(v112 + 8);
          if (v115)
            v113 = (_QWORD *)v112;
          v112 = *v116;
        }
        while (*v116);
        v110 = v187;
        if (v113 == v187 || *((_DWORD *)v113 + 8) > v108)
LABEL_239:
          v113 = v110;
        v111 = v113 == v110;
        if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_242;
LABEL_241:
        operator delete(v198.__r_.__value_.__l.__data_);
LABEL_242:
        if (v111)
        {
          v117 = *(uint64_t **)(v28 + 28);
          v8 = *(double *)v194;
          *(_BYTE *)v118 = a4;
          v118[1] = v117;
          *((double *)v118 + 2) = v8;
        }
        goto LABEL_244;
      }
      std::string::basic_string[abi:ne180100]<0>(&v198, **(char ***)(v28 + 20));
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      {
        v98 = v188;
        if (v198.__r_.__value_.__l.__size_ < 8)
          goto LABEL_197;
        v97 = (std::string::value_type *)(v198.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        v98 = v188;
        v97 = &v198.__r_.__value_.__s.__data_[7];
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 8)
          goto LABEL_197;
      }
      if (*v97 == 48)
      {
        v99 = 0;
        if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_211;
        goto LABEL_210;
      }
LABEL_197:
      v100 = *v98;
      if (!*v98)
        goto LABEL_208;
      v101 = v98;
      do
      {
        v102 = *(_DWORD *)(v100 + 32);
        v103 = v102 >= v96;
        if (v102 >= v96)
          v104 = (uint64_t *)v100;
        else
          v104 = (uint64_t *)(v100 + 8);
        if (v103)
          v101 = (_QWORD *)v100;
        v100 = *v104;
      }
      while (*v104);
      v98 = v188;
      if (v101 == v188 || *((_DWORD *)v101 + 8) > v96)
LABEL_208:
        v101 = v98;
      v99 = v101 == v98;
      if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_211;
LABEL_210:
      operator delete(v198.__r_.__value_.__l.__data_);
LABEL_211:
      if (v99)
      {
        v105 = *(uint64_t **)(v28 + 20);
        v8 = *(double *)v194;
        *(_BYTE *)v106 = a4;
        v106[1] = v105;
        *((double *)v106 + 2) = v8;
      }
      goto LABEL_213;
    }
LABEL_76:
    operator delete(v198.__r_.__value_.__l.__data_);
    if (!v35)
      goto LABEL_182;
    goto LABEL_77;
  }
LABEL_246:
  v119 = *(_QWORD **)(a3 + 104);
  if (v119 && *v119)
  {
    std::string::basic_string[abi:ne180100]<0>(&v198, "AP_");
    std::string::basic_string[abi:ne180100]<0>(&v197, **(char ***)(a3 + 104));
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v197.__r_.__value_.__l.__data_);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v198.__r_.__value_.__l.__data_);
    if (HIDWORD(v120))
    {
      std::string::basic_string[abi:ne180100]<0>(&v198, **(char ***)(a3 + 104));
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v198.__r_.__value_.__l.__size_ < 8)
          goto LABEL_261;
        v121 = (std::string::value_type *)(v198.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 8)
          goto LABEL_261;
        v121 = &v198.__r_.__value_.__s.__data_[7];
      }
      if (*v121 == 48)
      {
        v122 = 0;
        if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_275;
        goto LABEL_274;
      }
LABEL_261:
      v123 = a1 + 152;
      v124 = *(_QWORD *)(a1 + 152);
      if (!v124)
        goto LABEL_272;
      v125 = a1 + 152;
      do
      {
        v126 = *(_DWORD *)(v124 + 32);
        v127 = v126 >= v120;
        if (v126 >= v120)
          v128 = (uint64_t *)v124;
        else
          v128 = (uint64_t *)(v124 + 8);
        if (v127)
          v125 = v124;
        v124 = *v128;
      }
      while (*v128);
      if (v125 == v123 || *(_DWORD *)(v125 + 32) > v120)
LABEL_272:
        v125 = a1 + 152;
      v122 = v125 == v123;
      if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_275;
LABEL_274:
      operator delete(v198.__r_.__value_.__l.__data_);
LABEL_275:
      if (v122)
      {
        v129 = *(uint64_t **)(a3 + 104);
        v8 = *(double *)v194;
        *(_BYTE *)v130 = a4;
        v130[1] = v129;
        *((double *)v130 + 2) = v8;
      }
    }
  }
  if (*(_DWORD *)(a3 + 112))
  {
    v131 = 0;
    v132 = 0;
    v133 = (uint64_t **)(a1 + 48);
    v134 = (uint64_t *)(a1 + 56);
    do
    {
      v135 = *(_QWORD *)(a3 + 116);
      v136 = *(_QWORD **)(v135 + 8 * v131);
      if (v136 && *v136)
      {
        std::string::basic_string[abi:ne180100]<0>(&v198, "AO_");
        std::string::basic_string[abi:ne180100]<0>(&v197, **(char ***)(v135 + 8 * v131));
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v197.__r_.__value_.__l.__data_);
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v198.__r_.__value_.__l.__data_);
        if (HIDWORD(v137))
        {
          v138 = *v134;
          if (!*v134)
            goto LABEL_297;
          v139 = a1 + 56;
          do
          {
            v140 = *(unsigned __int16 *)(v138 + 32);
            v141 = v140 >= (unsigned __int16)v137;
            if (v140 >= (unsigned __int16)v137)
              v142 = (uint64_t *)v138;
            else
              v142 = (uint64_t *)(v138 + 8);
            if (v141)
              v139 = v138;
            v138 = *v142;
          }
          while (*v142);
          if ((uint64_t *)v139 == v134 || *(unsigned __int16 *)(v139 + 32) > (unsigned __int16)v137)
          {
LABEL_297:
            v143 = *(_QWORD *)(v135 + 8 * v131);
            if (*(_BYTE *)(v143 + 16))
              v144 = *(double *)(v143 + 20);
            else
              v144 = 0.0;
            if (*(_BYTE *)(v143 + 28))
              v8 = *(double *)(v143 + 32);
            else
              *(_QWORD *)&v8 &= 0xFFFFFFFFFFFFFF00;
            v145 = v14 + v144;
            v146 = v14 + v144;
            v147 = v14 + v144 + v8;
            if (*(_BYTE *)(v143 + 28))
              v148 = *(_QWORD *)&v147;
            else
              v148 = 0;
            if ((_DWORD)v149 != 3)
            {
              v150 = v149;
              if ((_DWORD)v149 != 4)
                v132 = 1;
              *(_BYTE *)v151 = v150;
              v151[1] = (uint64_t *)v143;
              *((double *)v151 + 2) = v145;
              if ((_DWORD)v150 != 2
              {
              }
            }
          }
        }
      }
      ++v131;
    }
    while (v131 < *(unsigned int *)(a3 + 112));
  }
  else
  {
    v132 = 0;
  }
  if (*(_DWORD *)(a3 + 124))
  {
    v152 = 0;
    v153 = (uint64_t **)(a1 + 48);
    v154 = (uint64_t *)(a1 + 56);
    do
    {
      v155 = *(_QWORD *)(*(_QWORD *)(a3 + 128) + 8 * v152);
      if (v155 && *(_QWORD *)v155)
      {
        std::string::basic_string[abi:ne180100]<0>(&v198, "AO_");
        std::string::basic_string[abi:ne180100]<0>(&v197, *(char **)v155);
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v197.__r_.__value_.__l.__data_);
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v198.__r_.__value_.__l.__data_);
        if (HIDWORD(v156))
        {
          v157 = *v154;
          if (!*v154)
            goto LABEL_354;
          v158 = a1 + 56;
          do
          {
            v159 = *(unsigned __int16 *)(v157 + 32);
            v160 = v159 >= (unsigned __int16)v156;
            if (v159 >= (unsigned __int16)v156)
              v161 = (uint64_t *)v157;
            else
              v161 = (uint64_t *)(v157 + 8);
            if (v160)
              v158 = v157;
            v157 = *v161;
          }
          while (*v161);
          if ((uint64_t *)v158 == v154 || *(unsigned __int16 *)(v158 + 32) > (unsigned __int16)v156)
          {
LABEL_354:
            if (*(_BYTE *)(v155 + 16))
              v162 = *(double *)(v155 + 20);
            else
              v162 = 0.0;
            if (*(_BYTE *)(v155 + 28))
              v8 = *(double *)(v155 + 32);
            else
              *(_QWORD *)&v8 &= 0xFFFFFFFFFFFFFF00;
            v163 = v14 + v162;
            v164 = v14 + v162;
            v165 = v14 + v162 + v8;
            if (*(_BYTE *)(v155 + 28))
              v166 = *(_QWORD *)&v165;
            else
              v166 = 0;
            if ((_DWORD)v167 != 3)
            {
              v168 = v167;
              if ((_DWORD)v167 != 4)
                v132 = 1;
              *(_BYTE *)v169 = v168;
              v169[1] = (uint64_t *)v155;
              *((double *)v169 + 2) = v163;
              if ((_DWORD)v168 != 2
              {
              }
            }
          }
        }
      }
      ++v152;
    }
    while (v152 < *(unsigned int *)(a3 + 124));
  }
  return v132 & 1;
}

void sub_18EE98F3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::parse_format_id(unsigned __int8 *a1, const std::string *a2)
{
  unsigned __int8 *v4;
  uint64_t *v5;
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _BOOL4 v14;
  void *v15;
  std::string *v16;
  NSObject *v17;
  const std::string *v18;
  unsigned __int8 *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  std::string v24;
  int v25;
  char v26;
  _BYTE v27[28];
  __int16 v28;
  unsigned __int8 *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 23;
  v5 = (uint64_t *)(a1 + 8);
  if ((a1[23] & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  v25 = 0;
  v7 = std::string::basic_string((std::string *)v27, a2, 0, v6, (std::allocator<char> *)&v24);
  v8 = v27[23];
  if (v27[23] >= 0)
    v9 = v27[23];
  else
    v9 = *(_QWORD *)&v27[8];
  v10 = *v4;
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *v5;
  if (v9 != v10)
    goto LABEL_19;
  if (v11 >= 0)
    v12 = a1;
  else
    v12 = *(unsigned __int8 **)a1;
  if ((v27[23] & 0x80000000) != 0)
  {
    v15 = *(void **)v27;
    if (memcmp(*(const void **)v27, v12, *(size_t *)&v27[8]))
    {
      operator delete(v15);
      goto LABEL_31;
    }
  }
  else if (v27[23])
  {
    v13 = v27;
    while (*v13 == *v12)
    {
      ++v13;
      ++v12;
      if (!--v8)
        goto LABEL_24;
    }
LABEL_19:
    v14 = 1;
    if ((v27[23] & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_30;
  }
LABEL_24:
  std::string::basic_string(&v24, a2, v6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v26);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v24;
  else
    v16 = (std::string *)v24.__r_.__value_.__r.__words[0];
  v7 = (std::string *)sscanf((const char *)v16, "%08x", &v25);
  v14 = (_DWORD)v7 != 1;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if ((v27[23] & 0x80) == 0)
  {
LABEL_20:
    if (!v14)
      goto LABEL_40;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(*(void **)v27);
  if (!v14)
  {
LABEL_40:
    v21 = v25 & 0xFFFFFF00;
    v20 = v25;
    v22 = 0x100000000;
    return v22 | v21 | v20;
  }
LABEL_31:
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = a2;
    else
      v18 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    if ((a1[23] & 0x80u) == 0)
      v19 = a1;
    else
      v19 = *(unsigned __int8 **)a1;
    *(_DWORD *)v27 = 136315906;
    *(_QWORD *)&v27[4] = "AudioMetadataSerializer.cpp";
    *(_WORD *)&v27[12] = 1024;
    *(_DWORD *)&v27[14] = 2133;
    *(_WORD *)&v27[18] = 2080;
    *(_QWORD *)&v27[20] = v18;
    v28 = 2080;
    v29 = v19;
    _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Format ID '%s' does not match expected pattern '%sxxxxyyyy'", v27, 0x26u);
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  return v22 | v21 | v20;
}

void sub_18EE99214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::map<unsigned int,`anonymous namespace'::ElementRef<AudioMetadataStreamFormat>>::operator[](uint64_t **a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v6 + 8) = a2;
    v6[6] = 0;
    v6[7] = 0;
    v6[5] = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 5;
}

unint64_t `anonymous namespace'::parse_track_format_id(unsigned __int8 *a1, const std::string *a2)
{
  unsigned __int8 *v4;
  uint64_t *v5;
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _BOOL4 v14;
  void *v15;
  std::string *v16;
  NSObject *v17;
  const std::string *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t v21;
  std::string v23;
  unsigned __int8 v24;
  int v25;
  char v26;
  _BYTE v27[28];
  __int16 v28;
  unsigned __int8 *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 23;
  v5 = (uint64_t *)(a1 + 8);
  if ((a1[23] & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  v25 = 0;
  v24 = 0;
  v7 = std::string::basic_string((std::string *)v27, a2, 0, v6, (std::allocator<char> *)&v23);
  v8 = v27[23];
  if (v27[23] >= 0)
    v9 = v27[23];
  else
    v9 = *(_QWORD *)&v27[8];
  v10 = *v4;
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *v5;
  if (v9 != v10)
    goto LABEL_19;
  if (v11 >= 0)
    v12 = a1;
  else
    v12 = *(unsigned __int8 **)a1;
  if ((v27[23] & 0x80000000) != 0)
  {
    v15 = *(void **)v27;
    if (memcmp(*(const void **)v27, v12, *(size_t *)&v27[8]))
    {
      operator delete(v15);
      goto LABEL_31;
    }
  }
  else if (v27[23])
  {
    v13 = v27;
    while (*v13 == *v12)
    {
      ++v13;
      ++v12;
      if (!--v8)
        goto LABEL_24;
    }
LABEL_19:
    v14 = 1;
    if ((v27[23] & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_30;
  }
LABEL_24:
  std::string::basic_string(&v23, a2, v6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v26);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v23;
  else
    v16 = (std::string *)v23.__r_.__value_.__r.__words[0];
  v7 = (std::string *)sscanf((const char *)v16, "%08x_%02hhx", &v25, &v24);
  v14 = (_DWORD)v7 != 2;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if ((v27[23] & 0x80) == 0)
  {
LABEL_20:
    if (!v14)
      goto LABEL_40;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(*(void **)v27);
  if (!v14)
  {
LABEL_40:
    v21 = v25 & 0xFFFFFF00 | ((unint64_t)v24 << 32);
    v20 = v25;
    return v21 | v20;
  }
LABEL_31:
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = a2;
    else
      v18 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    if ((a1[23] & 0x80u) == 0)
      v19 = a1;
    else
      v19 = *(unsigned __int8 **)a1;
    *(_DWORD *)v27 = 136315906;
    *(_QWORD *)&v27[4] = "AudioMetadataSerializer.cpp";
    *(_WORD *)&v27[12] = 1024;
    *(_DWORD *)&v27[14] = 2148;
    *(_WORD *)&v27[18] = 2080;
    *(_QWORD *)&v27[20] = v18;
    v28 = 2080;
    v29 = v19;
    _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Format ID '%s' does not match expected pattern '%sxxxxyyyy_zz'", v27, 0x26u);
  }
  v20 = 0;
  v21 = 0;
  return v21 | v20;
}

void sub_18EE99568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::map<std::tuple<unsigned int,unsigned char>,`anonymous namespace'::ElementRef<AudioMetadataTrackFormat>>::operator[](uint64_t **a1, unsigned int *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  char v12;
  char v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = a1 + 1;
  v4 = a1[1];
  if (!v4)
  {
    v8 = a1 + 1;
    goto LABEL_22;
  }
  v6 = *a2;
  v7 = *((unsigned __int8 *)a2 + 4);
  do
  {
    while (1)
    {
      v8 = (uint64_t **)v4;
      v9 = *((_DWORD *)v4 + 8);
      if (v6 == v9)
        break;
      if (v6 >= v9)
      {
        if (v9 >= v6)
          v13 = 1;
        else
          v13 = -1;
        if ((v13 & 0x80) == 0)
          return v8 + 5;
        goto LABEL_19;
      }
LABEL_13:
      v4 = *v8;
      v5 = v8;
      if (!*v8)
        goto LABEL_22;
    }
    v10 = *((unsigned __int8 *)v8 + 36);
    if (v7 < v10)
      goto LABEL_13;
    v11 = v10 == v7;
    if (v10 >= v7)
      v12 = 1;
    else
      v12 = -1;
    if (v11)
      v12 = 0;
    if ((v12 & 0x80) == 0)
      return v8 + 5;
LABEL_19:
    v4 = v8[1];
  }
  while (v4);
  v5 = v8 + 1;
LABEL_22:
  v14 = (uint64_t *)v8;
  v8 = (uint64_t **)operator new(0x40uLL);
  v8[4] = *(uint64_t **)a2;
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *v8 = 0;
  v8[1] = 0;
  v8[2] = v14;
  *v5 = (uint64_t *)v8;
  v15 = (uint64_t *)**a1;
  v16 = (uint64_t *)v8;
  if (v15)
  {
    *a1 = v15;
    v16 = *v5;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8 + 5;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

BOOL `anonymous namespace'::encode_var_uint(unint64_t this, uint64_t a2, unsigned __int8 *a3, unint64_t *a4)
{
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  _BOOL8 v14;
  char v15;
  char v17;
  _OWORD v18[2];
  __int128 v19;

  v19 = 0u;
  memset(v18, 0, sizeof(v18));
  do
  {
    v17 = this & 0x7F;
    std::deque<unsigned char>::push_back(v18, &v17);
    v8 = this > 0x7F;
    this >>= 7;
  }
  while (v8);
  v9 = *((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    while (1)
    {
      v10 = v9 - 1;
      v11 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v18[0] + 1) + (((unint64_t)(v19 + v10) >> 9) & 0x7FFFFFFFFFFFF8))
                     + ((v19 + v10) & 0xFFF));
      *((_QWORD *)&v19 + 1) = v10;
      std::deque<unsigned char>::__maybe_remove_back_spare[abi:ne180100](v18);
      v12 = *(_QWORD *)a3;
      v13 = *(_QWORD *)a3 + 1;
      v14 = v13 <= (unint64_t)a4;
      if (v13 > (unint64_t)a4)
        break;
      v9 = *((_QWORD *)&v19 + 1);
      v15 = v11 | 0x80;
      if (!*((_QWORD *)&v19 + 1))
        v15 = v11;
      *(_QWORD *)a3 = v13;
      *(_BYTE *)(a2 + v12) = v15;
      if (!v9)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    v14 = 1;
  }
  std::deque<unsigned char>::~deque[abi:ne180100]((uint64_t)v18);
  return v14;
}

void sub_18EE99AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::deque<unsigned char>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::encode_string(const char *a1, unint64_t *a2)
{
  size_t v4;
  uint64_t v5;
  _BYTE *v6;
  char v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  char v19;

  if (a1)
  {
    v4 = strlen(a1);
    if (v4)
    {
      v5 = 0;
      v6 = (_BYTE *)a2[1];
      do
      {
        v7 = a1[v5];
        v8 = a2[2];
        if ((unint64_t)v6 >= v8)
        {
          v10 = *a2;
          v11 = &v6[-*a2];
          v12 = (unint64_t)(v11 + 1);
          if ((uint64_t)(v11 + 1) < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v13 = v8 - v10;
          if (2 * v13 > v12)
            v12 = 2 * v13;
          if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
            v14 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
            v15 = (char *)operator new(v14);
          else
            v15 = 0;
          v16 = &v11[(_QWORD)v15];
          v17 = &v11[(_QWORD)v15];
          *v17 = v7;
          v9 = v17 + 1;
          if (v6 != (_BYTE *)v10)
          {
            v18 = &v6[~v10];
            do
            {
              v19 = *--v6;
              (v18--)[(_QWORD)v15] = v19;
            }
            while (v6 != (_BYTE *)v10);
            v6 = (_BYTE *)*a2;
            v16 = v15;
          }
          *a2 = (unint64_t)v16;
          a2[1] = (unint64_t)v9;
          a2[2] = (unint64_t)&v15[v14];
          if (v6)
            operator delete(v6);
        }
        else
        {
          *v6 = v7;
          v9 = v6 + 1;
        }
        a2[1] = (unint64_t)v9;
        ++v5;
        v6 = v9;
      }
      while (v5 != v4);
    }
  }
  else
  {
  }
}

void `anonymous namespace'::encode_content_ids(__int16 **a1, unint64_t *a2)
{
  __int16 *v4;
  __int16 *v5;
  _BYTE *v6;
  __int16 v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  _BYTE *v28;
  char v29;

  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v6 = (_BYTE *)a2[1];
    do
    {
      v7 = *v4;
      v8 = a2[2];
      if ((unint64_t)v6 >= v8)
      {
        v10 = *a2;
        v11 = &v6[-*a2];
        v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0)
          goto LABEL_40;
        v13 = v8 - v10;
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
          v14 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
          v15 = (char *)operator new(v14);
        else
          v15 = 0;
        v16 = &v11[(_QWORD)v15];
        v17 = &v11[(_QWORD)v15];
        *v17 = HIBYTE(v7);
        v9 = v17 + 1;
        if (v6 != (_BYTE *)v10)
        {
          v18 = &v6[~v10];
          do
          {
            v19 = *--v6;
            (v18--)[(_QWORD)v15] = v19;
          }
          while (v6 != (_BYTE *)v10);
          v6 = (_BYTE *)*a2;
          v16 = v15;
        }
        *a2 = (unint64_t)v16;
        a2[1] = (unint64_t)v9;
        a2[2] = (unint64_t)&v15[v14];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *v6 = HIBYTE(v7);
        v9 = v6 + 1;
      }
      a2[1] = (unint64_t)v9;
      v20 = a2[2];
      if ((unint64_t)v9 >= v20)
      {
        v21 = *a2;
        v22 = &v9[-*a2];
        v23 = (unint64_t)(v22 + 1);
        if ((uint64_t)(v22 + 1) < 0)
LABEL_40:
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v24 = v20 - v21;
        if (2 * v24 > v23)
          v23 = 2 * v24;
        if (v24 >= 0x3FFFFFFFFFFFFFFFLL)
          v25 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
          v26 = (unint64_t)operator new(v25);
        else
          v26 = 0;
        v27 = (char *)(v26 + v25);
        v22[v26] = v7;
        v6 = &v22[v26 + 1];
        if (v9 == (_BYTE *)v21)
        {
          *a2 = (unint64_t)&v22[v26];
          a2[1] = (unint64_t)v6;
          a2[2] = (unint64_t)v27;
        }
        else
        {
          v28 = &v9[~v21];
          do
          {
            v29 = *--v9;
            (v28--)[v26] = v29;
          }
          while (v9 != (_BYTE *)v21);
          v9 = (_BYTE *)*a2;
          *a2 = v26;
          a2[1] = (unint64_t)v6;
          a2[2] = (unint64_t)v27;
          if (!v9)
            goto LABEL_38;
        }
        operator delete(v9);
      }
      else
      {
        *v9 = v7;
        v6 = v9 + 1;
      }
LABEL_38:
      a2[1] = (unint64_t)v6;
      ++v4;
    }
    while (v4 != v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a1);
}

void `anonymous namespace'::encode_loudness_metadata(uint64_t a1, unint64_t *a2)
{
  char v4;
  char v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  char v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;

  if (*(float *)(a1 + 16) == 0.0)
    v4 = *(_BYTE *)(a1 + 40) << 6;
  else
    v4 = (*(_BYTE *)(a1 + 40) << 6) | 0x20;
  if (*(float *)(a1 + 20) != 0.0)
    v4 |= 0x10u;
  if (*(float *)(a1 + 24) != 0.0)
    v4 |= 8u;
  if (*(float *)(a1 + 28) != 0.0)
    v4 += 4;
  if (*(float *)(a1 + 32) != 0.0)
    v4 += 2;
  if (*(float *)(a1 + 36) == 0.0)
    v5 = v4;
  else
    v5 = v4 + 1;
  v7 = (_BYTE *)a2[1];
  v6 = a2[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = *a2;
    v10 = &v7[-*a2];
    v11 = (unint64_t)(v10 + 1);
    if ((uint64_t)(v10 + 1) < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v6 - v9;
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (unint64_t)operator new(v13);
    else
      v14 = 0;
    v15 = (char *)(v14 + v13);
    v10[v14] = v5;
    v8 = (uint64_t)&v10[v14 + 1];
    if (v7 == (_BYTE *)v9)
    {
      v14 += (unint64_t)v10;
    }
    else
    {
      v16 = &v7[~v9];
      do
      {
        v17 = *--v7;
        (v16--)[v14] = v17;
      }
      while (v7 != (_BYTE *)v9);
      v7 = (_BYTE *)*a2;
    }
    *a2 = v14;
    a2[1] = v8;
    a2[2] = (unint64_t)v15;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v7 = v5;
    v8 = (uint64_t)(v7 + 1);
  }
  a2[1] = v8;
  v18 = *(float *)(a1 + 16);
  if (v18 != 0.0)
  v19 = *(float *)(a1 + 20);
  if (v19 != 0.0)
  v20 = *(float *)(a1 + 24);
  if (v20 != 0.0)
  v21 = *(float *)(a1 + 28);
  if (v21 != 0.0)
  v22 = *(float *)(a1 + 32);
  if (v22 != 0.0)
  v23 = *(float *)(a1 + 36);
  if (v23 != 0.0)
}

void `anonymous namespace'::encode_float_32(unint64_t *a1, float a2)
{
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  _BYTE *v25;
  char v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  char *v35;
  _BYTE *v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  unint64_t v45;
  char *v46;
  _BYTE *v47;
  char v48;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = &v5[-*a1];
    v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0)
      goto LABEL_74;
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    v8[v12] = HIBYTE(a2);
    v6 = &v8[v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
      v5 = (_BYTE *)*a1;
    }
    *a1 = v12;
    a1[1] = (unint64_t)v6;
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = HIBYTE(a2);
    v6 = v5 + 1;
  }
  a1[1] = (unint64_t)v6;
  v16 = a1[2];
  if ((unint64_t)v6 < v16)
  {
    *v6 = BYTE2(a2);
    v17 = v6 + 1;
    goto LABEL_37;
  }
  v18 = *a1;
  v19 = &v6[-*a1];
  v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0)
    goto LABEL_74;
  v21 = v16 - v18;
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
    v22 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v22 = v20;
  if (v22)
    v23 = (unint64_t)operator new(v22);
  else
    v23 = 0;
  v24 = (char *)(v23 + v22);
  v19[v23] = BYTE2(a2);
  v17 = &v19[v23 + 1];
  if (v6 == (_BYTE *)v18)
  {
    *a1 = (unint64_t)&v19[v23];
    a1[1] = (unint64_t)v17;
    a1[2] = (unint64_t)v24;
LABEL_36:
    operator delete(v6);
    goto LABEL_37;
  }
  v25 = &v6[~v18];
  do
  {
    v26 = *--v6;
    (v25--)[v23] = v26;
  }
  while (v6 != (_BYTE *)v18);
  v6 = (_BYTE *)*a1;
  *a1 = v23;
  a1[1] = (unint64_t)v17;
  a1[2] = (unint64_t)v24;
  if (v6)
    goto LABEL_36;
LABEL_37:
  a1[1] = (unint64_t)v17;
  v27 = a1[2];
  if ((unint64_t)v17 < v27)
  {
    *v17 = BYTE1(a2);
    v28 = v17 + 1;
    goto LABEL_55;
  }
  v29 = *a1;
  v30 = &v17[-*a1];
  v31 = (unint64_t)(v30 + 1);
  if ((uint64_t)(v30 + 1) < 0)
    goto LABEL_74;
  v32 = v27 - v29;
  if (2 * v32 > v31)
    v31 = 2 * v32;
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
    v33 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v33 = v31;
  if (v33)
    v34 = (unint64_t)operator new(v33);
  else
    v34 = 0;
  v35 = (char *)(v34 + v33);
  v30[v34] = BYTE1(a2);
  v28 = &v30[v34 + 1];
  if (v17 == (_BYTE *)v29)
  {
    *a1 = (unint64_t)&v30[v34];
    a1[1] = (unint64_t)v28;
    a1[2] = (unint64_t)v35;
LABEL_54:
    operator delete(v17);
    goto LABEL_55;
  }
  v36 = &v17[~v29];
  do
  {
    v37 = *--v17;
    (v36--)[v34] = v37;
  }
  while (v17 != (_BYTE *)v29);
  v17 = (_BYTE *)*a1;
  *a1 = v34;
  a1[1] = (unint64_t)v28;
  a1[2] = (unint64_t)v35;
  if (v17)
    goto LABEL_54;
LABEL_55:
  a1[1] = (unint64_t)v28;
  v38 = a1[2];
  if ((unint64_t)v28 < v38)
  {
    *v28 = LOBYTE(a2);
    v39 = (uint64_t)(v28 + 1);
    goto LABEL_73;
  }
  v40 = *a1;
  v41 = &v28[-*a1];
  v42 = (unint64_t)(v41 + 1);
  if ((uint64_t)(v41 + 1) < 0)
LABEL_74:
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v43 = v38 - v40;
  if (2 * v43 > v42)
    v42 = 2 * v43;
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (v44)
    v45 = (unint64_t)operator new(v44);
  else
    v45 = 0;
  v46 = (char *)(v45 + v44);
  v41[v45] = LOBYTE(a2);
  v39 = (uint64_t)&v41[v45 + 1];
  if (v28 == (_BYTE *)v40)
  {
    *a1 = (unint64_t)&v41[v45];
    a1[1] = v39;
    a1[2] = (unint64_t)v46;
LABEL_72:
    operator delete(v28);
    goto LABEL_73;
  }
  v47 = &v28[~v40];
  do
  {
    v48 = *--v28;
    (v47--)[v45] = v48;
  }
  while (v28 != (_BYTE *)v40);
  v28 = (_BYTE *)*a1;
  *a1 = v45;
  a1[1] = v39;
  a1[2] = (unint64_t)v46;
  if (v28)
    goto LABEL_72;
LABEL_73:
  a1[1] = v39;
}

void `anonymous namespace'::encode_float_64(unint64_t *a1, double a2)
{
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  _BYTE *v25;
  char v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  char *v35;
  _BYTE *v36;
  char v37;
  unint64_t v38;
  _BYTE *v39;
  unint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  unint64_t v45;
  char *v46;
  _BYTE *v47;
  char v48;
  unint64_t v49;
  _BYTE *v50;
  unint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  unint64_t v54;
  size_t v55;
  unint64_t v56;
  char *v57;
  _BYTE *v58;
  char v59;
  unint64_t v60;
  _BYTE *v61;
  unint64_t v62;
  _BYTE *v63;
  unint64_t v64;
  unint64_t v65;
  size_t v66;
  unint64_t v67;
  char *v68;
  _BYTE *v69;
  char v70;
  unint64_t v71;
  _BYTE *v72;
  unint64_t v73;
  _BYTE *v74;
  unint64_t v75;
  unint64_t v76;
  size_t v77;
  unint64_t v78;
  char *v79;
  _BYTE *v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  unint64_t v86;
  unint64_t v87;
  size_t v88;
  unint64_t v89;
  char *v90;
  _BYTE *v91;
  char v92;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = &v5[-*a1];
    v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0)
      goto LABEL_146;
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    v8[v12] = HIBYTE(a2);
    v6 = &v8[v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
      v5 = (_BYTE *)*a1;
    }
    *a1 = v12;
    a1[1] = (unint64_t)v6;
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = HIBYTE(a2);
    v6 = v5 + 1;
  }
  a1[1] = (unint64_t)v6;
  v16 = a1[2];
  if ((unint64_t)v6 < v16)
  {
    *v6 = BYTE6(a2);
    v17 = v6 + 1;
    goto LABEL_37;
  }
  v18 = *a1;
  v19 = &v6[-*a1];
  v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0)
    goto LABEL_146;
  v21 = v16 - v18;
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
    v22 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v22 = v20;
  if (v22)
    v23 = (unint64_t)operator new(v22);
  else
    v23 = 0;
  v24 = (char *)(v23 + v22);
  v19[v23] = BYTE6(a2);
  v17 = &v19[v23 + 1];
  if (v6 == (_BYTE *)v18)
  {
    *a1 = (unint64_t)&v19[v23];
    a1[1] = (unint64_t)v17;
    a1[2] = (unint64_t)v24;
LABEL_36:
    operator delete(v6);
    goto LABEL_37;
  }
  v25 = &v6[~v18];
  do
  {
    v26 = *--v6;
    (v25--)[v23] = v26;
  }
  while (v6 != (_BYTE *)v18);
  v6 = (_BYTE *)*a1;
  *a1 = v23;
  a1[1] = (unint64_t)v17;
  a1[2] = (unint64_t)v24;
  if (v6)
    goto LABEL_36;
LABEL_37:
  a1[1] = (unint64_t)v17;
  v27 = a1[2];
  if ((unint64_t)v17 < v27)
  {
    *v17 = BYTE5(a2);
    v28 = v17 + 1;
    goto LABEL_55;
  }
  v29 = *a1;
  v30 = &v17[-*a1];
  v31 = (unint64_t)(v30 + 1);
  if ((uint64_t)(v30 + 1) < 0)
    goto LABEL_146;
  v32 = v27 - v29;
  if (2 * v32 > v31)
    v31 = 2 * v32;
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
    v33 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v33 = v31;
  if (v33)
    v34 = (unint64_t)operator new(v33);
  else
    v34 = 0;
  v35 = (char *)(v34 + v33);
  v30[v34] = BYTE5(a2);
  v28 = &v30[v34 + 1];
  if (v17 == (_BYTE *)v29)
  {
    *a1 = (unint64_t)&v30[v34];
    a1[1] = (unint64_t)v28;
    a1[2] = (unint64_t)v35;
LABEL_54:
    operator delete(v17);
    goto LABEL_55;
  }
  v36 = &v17[~v29];
  do
  {
    v37 = *--v17;
    (v36--)[v34] = v37;
  }
  while (v17 != (_BYTE *)v29);
  v17 = (_BYTE *)*a1;
  *a1 = v34;
  a1[1] = (unint64_t)v28;
  a1[2] = (unint64_t)v35;
  if (v17)
    goto LABEL_54;
LABEL_55:
  a1[1] = (unint64_t)v28;
  v38 = a1[2];
  if ((unint64_t)v28 < v38)
  {
    *v28 = BYTE4(a2);
    v39 = v28 + 1;
    goto LABEL_73;
  }
  v40 = *a1;
  v41 = &v28[-*a1];
  v42 = (unint64_t)(v41 + 1);
  if ((uint64_t)(v41 + 1) < 0)
    goto LABEL_146;
  v43 = v38 - v40;
  if (2 * v43 > v42)
    v42 = 2 * v43;
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (v44)
    v45 = (unint64_t)operator new(v44);
  else
    v45 = 0;
  v46 = (char *)(v45 + v44);
  v41[v45] = BYTE4(a2);
  v39 = &v41[v45 + 1];
  if (v28 == (_BYTE *)v40)
  {
    *a1 = (unint64_t)&v41[v45];
    a1[1] = (unint64_t)v39;
    a1[2] = (unint64_t)v46;
LABEL_72:
    operator delete(v28);
    goto LABEL_73;
  }
  v47 = &v28[~v40];
  do
  {
    v48 = *--v28;
    (v47--)[v45] = v48;
  }
  while (v28 != (_BYTE *)v40);
  v28 = (_BYTE *)*a1;
  *a1 = v45;
  a1[1] = (unint64_t)v39;
  a1[2] = (unint64_t)v46;
  if (v28)
    goto LABEL_72;
LABEL_73:
  a1[1] = (unint64_t)v39;
  v49 = a1[2];
  if ((unint64_t)v39 < v49)
  {
    *v39 = BYTE3(a2);
    v50 = v39 + 1;
    goto LABEL_91;
  }
  v51 = *a1;
  v52 = &v39[-*a1];
  v53 = (unint64_t)(v52 + 1);
  if ((uint64_t)(v52 + 1) < 0)
    goto LABEL_146;
  v54 = v49 - v51;
  if (2 * v54 > v53)
    v53 = 2 * v54;
  if (v54 >= 0x3FFFFFFFFFFFFFFFLL)
    v55 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (v55)
    v56 = (unint64_t)operator new(v55);
  else
    v56 = 0;
  v57 = (char *)(v56 + v55);
  v52[v56] = BYTE3(a2);
  v50 = &v52[v56 + 1];
  if (v39 == (_BYTE *)v51)
  {
    *a1 = (unint64_t)&v52[v56];
    a1[1] = (unint64_t)v50;
    a1[2] = (unint64_t)v57;
LABEL_90:
    operator delete(v39);
    goto LABEL_91;
  }
  v58 = &v39[~v51];
  do
  {
    v59 = *--v39;
    (v58--)[v56] = v59;
  }
  while (v39 != (_BYTE *)v51);
  v39 = (_BYTE *)*a1;
  *a1 = v56;
  a1[1] = (unint64_t)v50;
  a1[2] = (unint64_t)v57;
  if (v39)
    goto LABEL_90;
LABEL_91:
  a1[1] = (unint64_t)v50;
  v60 = a1[2];
  if ((unint64_t)v50 < v60)
  {
    *v50 = BYTE2(a2);
    v61 = v50 + 1;
    goto LABEL_109;
  }
  v62 = *a1;
  v63 = &v50[-*a1];
  v64 = (unint64_t)(v63 + 1);
  if ((uint64_t)(v63 + 1) < 0)
    goto LABEL_146;
  v65 = v60 - v62;
  if (2 * v65 > v64)
    v64 = 2 * v65;
  if (v65 >= 0x3FFFFFFFFFFFFFFFLL)
    v66 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v66 = v64;
  if (v66)
    v67 = (unint64_t)operator new(v66);
  else
    v67 = 0;
  v68 = (char *)(v67 + v66);
  v63[v67] = BYTE2(a2);
  v61 = &v63[v67 + 1];
  if (v50 == (_BYTE *)v62)
  {
    *a1 = (unint64_t)&v63[v67];
    a1[1] = (unint64_t)v61;
    a1[2] = (unint64_t)v68;
LABEL_108:
    operator delete(v50);
    goto LABEL_109;
  }
  v69 = &v50[~v62];
  do
  {
    v70 = *--v50;
    (v69--)[v67] = v70;
  }
  while (v50 != (_BYTE *)v62);
  v50 = (_BYTE *)*a1;
  *a1 = v67;
  a1[1] = (unint64_t)v61;
  a1[2] = (unint64_t)v68;
  if (v50)
    goto LABEL_108;
LABEL_109:
  a1[1] = (unint64_t)v61;
  v71 = a1[2];
  if ((unint64_t)v61 < v71)
  {
    *v61 = BYTE1(a2);
    v72 = v61 + 1;
    goto LABEL_127;
  }
  v73 = *a1;
  v74 = &v61[-*a1];
  v75 = (unint64_t)(v74 + 1);
  if ((uint64_t)(v74 + 1) < 0)
    goto LABEL_146;
  v76 = v71 - v73;
  if (2 * v76 > v75)
    v75 = 2 * v76;
  if (v76 >= 0x3FFFFFFFFFFFFFFFLL)
    v77 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v77 = v75;
  if (v77)
    v78 = (unint64_t)operator new(v77);
  else
    v78 = 0;
  v79 = (char *)(v78 + v77);
  v74[v78] = BYTE1(a2);
  v72 = &v74[v78 + 1];
  if (v61 == (_BYTE *)v73)
  {
    *a1 = (unint64_t)&v74[v78];
    a1[1] = (unint64_t)v72;
    a1[2] = (unint64_t)v79;
LABEL_126:
    operator delete(v61);
    goto LABEL_127;
  }
  v80 = &v61[~v73];
  do
  {
    v81 = *--v61;
    (v80--)[v78] = v81;
  }
  while (v61 != (_BYTE *)v73);
  v61 = (_BYTE *)*a1;
  *a1 = v78;
  a1[1] = (unint64_t)v72;
  a1[2] = (unint64_t)v79;
  if (v61)
    goto LABEL_126;
LABEL_127:
  a1[1] = (unint64_t)v72;
  v82 = a1[2];
  if ((unint64_t)v72 < v82)
  {
    *v72 = LOBYTE(a2);
    v83 = (uint64_t)(v72 + 1);
    goto LABEL_145;
  }
  v84 = *a1;
  v85 = &v72[-*a1];
  v86 = (unint64_t)(v85 + 1);
  if ((uint64_t)(v85 + 1) < 0)
LABEL_146:
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v87 = v82 - v84;
  if (2 * v87 > v86)
    v86 = 2 * v87;
  if (v87 >= 0x3FFFFFFFFFFFFFFFLL)
    v88 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v88 = v86;
  if (v88)
    v89 = (unint64_t)operator new(v88);
  else
    v89 = 0;
  v90 = (char *)(v89 + v88);
  v85[v89] = LOBYTE(a2);
  v83 = (uint64_t)&v85[v89 + 1];
  if (v72 == (_BYTE *)v84)
  {
    *a1 = (unint64_t)&v85[v89];
    a1[1] = v83;
    a1[2] = (unint64_t)v90;
LABEL_144:
    operator delete(v72);
    goto LABEL_145;
  }
  v91 = &v72[~v84];
  do
  {
    v92 = *--v72;
    (v91--)[v89] = v92;
  }
  while (v72 != (_BYTE *)v84);
  v72 = (_BYTE *)*a1;
  *a1 = v89;
  a1[1] = v83;
  a1[2] = (unint64_t)v90;
  if (v72)
    goto LABEL_144;
LABEL_145:
  a1[1] = v83;
}

BOOL `anonymous namespace'::encode_bytes(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t *a4)
{
  unint64_t v8;
  _BOOL8 result;
  unint64_t v10;
  uint64_t v11;

  v8 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (result)
  {
    v10 = *(_QWORD *)a3 + v8;
    if (v10 <= (unint64_t)a4)
    {
      v11 = *(_QWORD *)(a1 + 8);
      if (v11 != *(_QWORD *)a1)
      {
        memmove((void *)(a2 + *(_QWORD *)a3), *(const void **)a1, v11 - *(_QWORD *)a1);
        v10 = *(_QWORD *)a3 + v8;
      }
      *(_QWORD *)a3 = v10;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void `anonymous namespace'::encode_format_ids(int **a1, unint64_t *a2)
{
  int *v4;
  int *v5;
  _BYTE *v6;
  int v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  char *v28;
  _BYTE *v29;
  char v30;
  unint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  unint64_t v38;
  char *v39;
  _BYTE *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  unint64_t v48;
  char *v49;
  _BYTE *v50;
  char v51;

  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v6 = (_BYTE *)a2[1];
    while (1)
    {
      v7 = *v4;
      v8 = a2[2];
      if ((unint64_t)v6 >= v8)
      {
        v10 = *a2;
        v11 = &v6[-*a2];
        v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0)
          goto LABEL_76;
        v13 = v8 - v10;
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
          v14 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
          v15 = (char *)operator new(v14);
        else
          v15 = 0;
        v16 = &v11[(_QWORD)v15];
        v17 = &v11[(_QWORD)v15];
        *v17 = HIBYTE(v7);
        v9 = v17 + 1;
        if (v6 != (_BYTE *)v10)
        {
          v18 = &v6[~v10];
          do
          {
            v19 = *--v6;
            (v18--)[(_QWORD)v15] = v19;
          }
          while (v6 != (_BYTE *)v10);
          v6 = (_BYTE *)*a2;
          v16 = v15;
        }
        *a2 = (unint64_t)v16;
        a2[1] = (unint64_t)v9;
        a2[2] = (unint64_t)&v15[v14];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *v6 = HIBYTE(v7);
        v9 = v6 + 1;
      }
      a2[1] = (unint64_t)v9;
      v20 = a2[2];
      if ((unint64_t)v9 < v20)
      {
        *v9 = BYTE2(v7);
        v21 = v9 + 1;
        goto LABEL_38;
      }
      v22 = *a2;
      v23 = &v9[-*a2];
      v24 = (unint64_t)(v23 + 1);
      if ((uint64_t)(v23 + 1) < 0)
        goto LABEL_76;
      v25 = v20 - v22;
      if (2 * v25 > v24)
        v24 = 2 * v25;
      v26 = v25 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v24;
      v27 = v26 ? (unint64_t)operator new(v26) : 0;
      v28 = (char *)(v27 + v26);
      v23[v27] = BYTE2(v7);
      v21 = &v23[v27 + 1];
      if (v9 == (_BYTE *)v22)
        break;
      v29 = &v9[~v22];
      do
      {
        v30 = *--v9;
        (v29--)[v27] = v30;
      }
      while (v9 != (_BYTE *)v22);
      v9 = (_BYTE *)*a2;
      *a2 = v27;
      a2[1] = (unint64_t)v21;
      a2[2] = (unint64_t)v28;
      if (v9)
        goto LABEL_37;
LABEL_38:
      a2[1] = (unint64_t)v21;
      v31 = a2[2];
      if ((unint64_t)v21 < v31)
      {
        *v21 = BYTE1(v7);
        v32 = v21 + 1;
        goto LABEL_56;
      }
      v33 = *a2;
      v34 = &v21[-*a2];
      v35 = (unint64_t)(v34 + 1);
      if ((uint64_t)(v34 + 1) < 0)
        goto LABEL_76;
      v36 = v31 - v33;
      if (2 * v36 > v35)
        v35 = 2 * v36;
      if (v36 >= 0x3FFFFFFFFFFFFFFFLL)
        v37 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
        v38 = (unint64_t)operator new(v37);
      else
        v38 = 0;
      v39 = (char *)(v38 + v37);
      v34[v38] = BYTE1(v7);
      v32 = &v34[v38 + 1];
      if (v21 == (_BYTE *)v33)
      {
        *a2 = (unint64_t)&v34[v38];
        a2[1] = (unint64_t)v32;
        a2[2] = (unint64_t)v39;
LABEL_55:
        operator delete(v21);
        goto LABEL_56;
      }
      v40 = &v21[~v33];
      do
      {
        v41 = *--v21;
        (v40--)[v38] = v41;
      }
      while (v21 != (_BYTE *)v33);
      v21 = (_BYTE *)*a2;
      *a2 = v38;
      a2[1] = (unint64_t)v32;
      a2[2] = (unint64_t)v39;
      if (v21)
        goto LABEL_55;
LABEL_56:
      a2[1] = (unint64_t)v32;
      v42 = a2[2];
      if ((unint64_t)v32 >= v42)
      {
        v43 = *a2;
        v44 = &v32[-*a2];
        v45 = (unint64_t)(v44 + 1);
        if ((uint64_t)(v44 + 1) < 0)
LABEL_76:
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v46 = v42 - v43;
        if (2 * v46 > v45)
          v45 = 2 * v46;
        if (v46 >= 0x3FFFFFFFFFFFFFFFLL)
          v47 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
          v48 = (unint64_t)operator new(v47);
        else
          v48 = 0;
        v49 = (char *)(v48 + v47);
        v44[v48] = v7;
        v6 = &v44[v48 + 1];
        if (v32 == (_BYTE *)v43)
        {
          *a2 = (unint64_t)&v44[v48];
          a2[1] = (unint64_t)v6;
          a2[2] = (unint64_t)v49;
        }
        else
        {
          v50 = &v32[~v43];
          do
          {
            v51 = *--v32;
            (v50--)[v48] = v51;
          }
          while (v32 != (_BYTE *)v43);
          v32 = (_BYTE *)*a2;
          *a2 = v48;
          a2[1] = (unint64_t)v6;
          a2[2] = (unint64_t)v49;
          if (!v32)
            goto LABEL_74;
        }
        operator delete(v32);
      }
      else
      {
        *v32 = v7;
        v6 = v32 + 1;
      }
LABEL_74:
      a2[1] = (unint64_t)v6;
      if (++v4 == v5)
        return;
    }
    *a2 = (unint64_t)&v23[v27];
    a2[1] = (unint64_t)v21;
    a2[2] = (unint64_t)v28;
LABEL_37:
    operator delete(v9);
    goto LABEL_38;
  }
}

void `anonymous namespace'::encode_string(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  _BYTE *v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;

  if (*(char *)(a1 + 23) >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (char *)a1;
  else
    v6 = *(char **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v7 = &v6[v5];
    v8 = (_BYTE *)a2[1];
    do
    {
      v9 = *v6;
      v10 = a2[2];
      if ((unint64_t)v8 >= v10)
      {
        v12 = *a2;
        v13 = &v8[-*a2];
        v14 = (unint64_t)(v13 + 1);
        if ((uint64_t)(v13 + 1) < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v15 = v10 - v12;
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v17 = (char *)operator new(v16);
        else
          v17 = 0;
        v18 = &v13[(_QWORD)v17];
        v19 = &v13[(_QWORD)v17];
        *v19 = v9;
        v11 = v19 + 1;
        if (v8 != (_BYTE *)v12)
        {
          v20 = &v8[~v12];
          do
          {
            v21 = *--v8;
            (v20--)[(_QWORD)v17] = v21;
          }
          while (v8 != (_BYTE *)v12);
          v8 = (_BYTE *)*a2;
          v18 = v17;
        }
        *a2 = (unint64_t)v18;
        a2[1] = (unint64_t)v11;
        a2[2] = (unint64_t)&v17[v16];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = v9;
        v11 = v8 + 1;
      }
      a2[1] = (unint64_t)v11;
      ++v6;
      v8 = v11;
    }
    while (v6 != v7);
  }
}

void `anonymous namespace'::encode_format_id(int a1, unint64_t *a2)
{
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  _BYTE *v25;
  char v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  char *v35;
  _BYTE *v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  unint64_t v45;
  char *v46;
  _BYTE *v47;
  char v48;

  v5 = (_BYTE *)a2[1];
  v4 = a2[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a2;
    v8 = &v5[-*a2];
    v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0)
      goto LABEL_74;
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    v8[v12] = HIBYTE(a1);
    v6 = &v8[v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
      v5 = (_BYTE *)*a2;
    }
    *a2 = v12;
    a2[1] = (unint64_t)v6;
    a2[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = HIBYTE(a1);
    v6 = v5 + 1;
  }
  a2[1] = (unint64_t)v6;
  v16 = a2[2];
  if ((unint64_t)v6 < v16)
  {
    *v6 = BYTE2(a1);
    v17 = v6 + 1;
    goto LABEL_37;
  }
  v18 = *a2;
  v19 = &v6[-*a2];
  v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0)
    goto LABEL_74;
  v21 = v16 - v18;
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
    v22 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v22 = v20;
  if (v22)
    v23 = (unint64_t)operator new(v22);
  else
    v23 = 0;
  v24 = (char *)(v23 + v22);
  v19[v23] = BYTE2(a1);
  v17 = &v19[v23 + 1];
  if (v6 == (_BYTE *)v18)
  {
    *a2 = (unint64_t)&v19[v23];
    a2[1] = (unint64_t)v17;
    a2[2] = (unint64_t)v24;
LABEL_36:
    operator delete(v6);
    goto LABEL_37;
  }
  v25 = &v6[~v18];
  do
  {
    v26 = *--v6;
    (v25--)[v23] = v26;
  }
  while (v6 != (_BYTE *)v18);
  v6 = (_BYTE *)*a2;
  *a2 = v23;
  a2[1] = (unint64_t)v17;
  a2[2] = (unint64_t)v24;
  if (v6)
    goto LABEL_36;
LABEL_37:
  a2[1] = (unint64_t)v17;
  v27 = a2[2];
  if ((unint64_t)v17 < v27)
  {
    *v17 = BYTE1(a1);
    v28 = v17 + 1;
    goto LABEL_55;
  }
  v29 = *a2;
  v30 = &v17[-*a2];
  v31 = (unint64_t)(v30 + 1);
  if ((uint64_t)(v30 + 1) < 0)
    goto LABEL_74;
  v32 = v27 - v29;
  if (2 * v32 > v31)
    v31 = 2 * v32;
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
    v33 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v33 = v31;
  if (v33)
    v34 = (unint64_t)operator new(v33);
  else
    v34 = 0;
  v35 = (char *)(v34 + v33);
  v30[v34] = BYTE1(a1);
  v28 = &v30[v34 + 1];
  if (v17 == (_BYTE *)v29)
  {
    *a2 = (unint64_t)&v30[v34];
    a2[1] = (unint64_t)v28;
    a2[2] = (unint64_t)v35;
LABEL_54:
    operator delete(v17);
    goto LABEL_55;
  }
  v36 = &v17[~v29];
  do
  {
    v37 = *--v17;
    (v36--)[v34] = v37;
  }
  while (v17 != (_BYTE *)v29);
  v17 = (_BYTE *)*a2;
  *a2 = v34;
  a2[1] = (unint64_t)v28;
  a2[2] = (unint64_t)v35;
  if (v17)
    goto LABEL_54;
LABEL_55:
  a2[1] = (unint64_t)v28;
  v38 = a2[2];
  if ((unint64_t)v28 < v38)
  {
    *v28 = a1;
    v39 = (uint64_t)(v28 + 1);
    goto LABEL_73;
  }
  v40 = *a2;
  v41 = &v28[-*a2];
  v42 = (unint64_t)(v41 + 1);
  if ((uint64_t)(v41 + 1) < 0)
LABEL_74:
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v43 = v38 - v40;
  if (2 * v43 > v42)
    v42 = 2 * v43;
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (v44)
    v45 = (unint64_t)operator new(v44);
  else
    v45 = 0;
  v46 = (char *)(v45 + v44);
  v41[v45] = a1;
  v39 = (uint64_t)&v41[v45 + 1];
  if (v28 == (_BYTE *)v40)
  {
    *a2 = (unint64_t)&v41[v45];
    a2[1] = v39;
    a2[2] = (unint64_t)v46;
LABEL_72:
    operator delete(v28);
    goto LABEL_73;
  }
  v47 = &v28[~v40];
  do
  {
    v48 = *--v28;
    (v47--)[v45] = v48;
  }
  while (v28 != (_BYTE *)v40);
  v28 = (_BYTE *)*a2;
  *a2 = v45;
  a2[1] = v39;
  a2[2] = (unint64_t)v46;
  if (v28)
    goto LABEL_72;
LABEL_73:
  a2[1] = v39;
}

uint64_t `anonymous namespace'::encode_track_uids(uint64_t a1, int a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  _QWORD *v5;
  int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  _BOOL4 v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  float v22;
  int v23;
  char *v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  void *v43;
  char *v44;
  _BYTE *v45;
  char *v46;
  char v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;
  void *v53;
  char *v54;
  _BYTE *v55;
  char *v56;
  char v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  size_t v63;
  void *v64;
  char *v65;
  char *v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  size_t v73;
  void *v74;
  char *v75;
  char *v76;
  char v77;
  _BOOL4 v78;
  _QWORD *v79;
  _QWORD *v80;
  BOOL v81;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  int v86;
  int v87;
  void *v88;
  char *v89;
  char *v90;
  std::string __p;
  void *v92[2];
  char v93;

  v5 = *(_QWORD **)(a1 + 120);
  v85 = (_QWORD *)(a1 + 128);
  if (v5 != (_QWORD *)(a1 + 128))
  {
    v9 = a2;
    while (1)
    {
      if (v9 == 2)
      {
        v10 = *a4;
        v11 = *a4 + 1;
        if (v11 > (unint64_t)a5)
          return 0;
        v12 = *((_BYTE *)v5 + 40) << 6;
        *a4 = v11;
        *(_BYTE *)(a3 + v10) = v12;
      }
      if (!(_DWORD)result)
        return result;
      if (*((_BYTE *)v5 + 40) == 2)
      {
          return 0;
        goto LABEL_147;
      }
      v14 = v5[6];
      v89 = 0;
      v90 = 0;
      v88 = 0;
      v15 = *(_QWORD **)(v14 + 12);
      if (v15 && *v15)
      {
        std::string::basic_string[abi:ne180100]<0>(v92, "AT_");
        std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v14 + 12));
        v18 = v17 != 0;
        if (v17)
          v19 = v16;
        else
          v19 = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v93 < 0)
          operator delete(v92[0]);
      }
      else
      {
        v19 = 0;
        v18 = 0;
      }
      v20 = *(_QWORD **)(v14 + 20);
      if (v20 && *v20)
      {
        std::string::basic_string[abi:ne180100]<0>(v92, "AC_");
        std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v14 + 20));
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v93 < 0)
          operator delete(v92[0]);
        v87 = BYTE4(v84);
      }
      else
      {
        LODWORD(v84) = 0;
        v87 = 0;
      }
      v21 = *(_QWORD **)(v14 + 28);
      if (v21 && *v21)
      {
        std::string::basic_string[abi:ne180100]<0>(v92, "AP_");
        std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v14 + 28));
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v93 < 0)
          operator delete(v92[0]);
        v86 = BYTE4(v83);
      }
      else
      {
        LODWORD(v83) = 0;
        v86 = 0;
      }
      v22 = *(float *)(v14 + 8);
      v23 = *(_DWORD *)(v14 + 36);
      v24 = (char *)operator new(1uLL);
      if (v23)
        v25 = ((v22 != 0.0) << 7) | 0x40;
      else
        v25 = (v22 != 0.0) << 7;
      if (v18)
        v25 |= 0x20u;
      if (v87)
        v25 |= 0x10u;
      if (v86)
        v25 += 8;
      *v24 = v25;
      v89 = v24 + 1;
      v90 = v24 + 1;
      v88 = v24;
      if (v22 != 0.0)
      {
        v23 = *(_DWORD *)(v14 + 36);
      }
      if (v23)
      if (v18)
        break;
LABEL_140:
      if (v87)
      if (v86)
      if (v88)
        operator delete(v88);
      if (!v78)
        return 0;
LABEL_147:
      v79 = (_QWORD *)v5[1];
      if (v79)
      {
        do
        {
          v80 = v79;
          v79 = (_QWORD *)*v79;
        }
        while (v79);
      }
      else
      {
        do
        {
          v80 = (_QWORD *)v5[2];
          v81 = *v80 == (_QWORD)v5;
          v5 = v80;
        }
        while (!v81);
      }
      v5 = v80;
      if (v80 == v85)
        return 1;
    }
    v26 = v89;
    v27 = v90;
    if (v89 >= v90)
    {
      v29 = (unint64_t)v88;
      v30 = v89 - (_BYTE *)v88;
      v31 = v89 - (_BYTE *)v88 + 1;
      if (v31 < 0)
        goto LABEL_156;
      if (2 * (v90 - (_BYTE *)v88) > (unint64_t)v31)
        v31 = 2 * (v90 - (_BYTE *)v88);
      if ((unint64_t)(v90 - (_BYTE *)v88) >= 0x3FFFFFFFFFFFFFFFLL)
        v32 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
        v33 = (char *)operator new(v32);
      else
        v33 = 0;
      v34 = &v33[v30];
      v35 = &v33[v30];
      *v35 = BYTE3(v19);
      v28 = v35 + 1;
      if (v26 != (char *)v29)
      {
        v36 = &v26[~v29];
        do
        {
          v37 = *--v26;
          (v36--)[(_QWORD)v33] = v37;
        }
        while (v26 != (char *)v29);
        v26 = (char *)v88;
        v34 = v33;
      }
      v27 = &v33[v32];
      v88 = v34;
      v90 = &v33[v32];
      if (v26)
        operator delete(v26);
    }
    else
    {
      *v89 = BYTE3(v19);
      v28 = v26 + 1;
    }
    v89 = v28;
    if (v28 < v27)
    {
      *v28 = BYTE2(v19);
      v38 = v28 + 1;
      goto LABEL_85;
    }
    v39 = (unint64_t)v88;
    v40 = v28 - (_BYTE *)v88;
    v41 = v28 - (_BYTE *)v88 + 1;
    if (v41 < 0)
      goto LABEL_156;
    if (2 * (v27 - (_BYTE *)v88) > (unint64_t)v41)
      v41 = 2 * (v27 - (_BYTE *)v88);
    if ((unint64_t)(v27 - (_BYTE *)v88) >= 0x3FFFFFFFFFFFFFFFLL)
      v42 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    if (v42)
      v43 = operator new(v42);
    else
      v43 = 0;
    v44 = (char *)v43 + v40;
    v27 = (char *)v43 + v42;
    v45 = (char *)v43 + v40;
    *v45 = BYTE2(v19);
    v38 = v45 + 1;
    if (v28 == (char *)v39)
    {
      v88 = v44;
      v89 = v38;
      v90 = (char *)v43 + v42;
    }
    else
    {
      v46 = &v28[~v39];
      do
      {
        v47 = *--v28;
        (v46--)[(_QWORD)v43] = v47;
      }
      while (v28 != (char *)v39);
      v28 = (char *)v88;
      v88 = v43;
      v89 = v38;
      v90 = (char *)v43 + v42;
      if (!v28)
      {
LABEL_85:
        v89 = v38;
        if (v38 < v27)
        {
          *v38 = BYTE1(v19);
          v48 = v38 + 1;
          v9 = a2;
          goto LABEL_103;
        }
        v49 = (unint64_t)v88;
        v50 = v38 - (_BYTE *)v88;
        v51 = v38 - (_BYTE *)v88 + 1;
        if (v51 < 0)
          goto LABEL_156;
        if (2 * (v27 - (_BYTE *)v88) > (unint64_t)v51)
          v51 = 2 * (v27 - (_BYTE *)v88);
        if ((unint64_t)(v27 - (_BYTE *)v88) >= 0x3FFFFFFFFFFFFFFFLL)
          v52 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v52 = v51;
        if (v52)
          v53 = operator new(v52);
        else
          v53 = 0;
        v9 = a2;
        v54 = (char *)v53 + v50;
        v55 = (char *)v53 + v50;
        *v55 = BYTE1(v19);
        v48 = v55 + 1;
        if (v38 == (char *)v49)
        {
          v88 = v54;
          v89 = v48;
          v90 = (char *)v53 + v52;
        }
        else
        {
          v56 = &v38[~v49];
          do
          {
            v57 = *--v38;
            (v56--)[(_QWORD)v53] = v57;
          }
          while (v38 != (char *)v49);
          v38 = (char *)v88;
          v88 = v53;
          v89 = v48;
          v90 = (char *)v53 + v52;
          if (!v38)
          {
LABEL_103:
            v89 = v48;
            if (v48 < v90)
            {
              *v48 = v19;
              v58 = v48 + 1;
              goto LABEL_121;
            }
            v59 = (unint64_t)v88;
            v60 = v48 - (_BYTE *)v88;
            v61 = v48 - (_BYTE *)v88 + 1;
            if (v61 < 0)
              goto LABEL_156;
            v62 = v90 - (_BYTE *)v88;
            if (2 * (v90 - (_BYTE *)v88) > (unint64_t)v61)
              v61 = 2 * v62;
            if (v62 >= 0x3FFFFFFFFFFFFFFFLL)
              v63 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v63 = v61;
            if (v63)
              v64 = operator new(v63);
            else
              v64 = 0;
            v65 = (char *)v64 + v63;
            *((_BYTE *)v64 + v60) = v19;
            v58 = (char *)v64 + v60 + 1;
            if (v48 == (char *)v59)
            {
              v88 = (char *)v64 + v60;
              v89 = (char *)v64 + v60 + 1;
              v90 = v65;
            }
            else
            {
              v66 = &v48[~v59];
              do
              {
                v67 = *--v48;
                (v66--)[(_QWORD)v64] = v67;
              }
              while (v48 != (char *)v59);
              v48 = (char *)v88;
              v88 = v64;
              v89 = (char *)v64 + v60 + 1;
              v90 = v65;
              if (!v48)
              {
LABEL_121:
                v89 = v58;
                if (v58 >= v90)
                {
                  v69 = (unint64_t)v88;
                  v70 = v58 - (_BYTE *)v88;
                  v71 = v58 - (_BYTE *)v88 + 1;
                  if (v71 < 0)
LABEL_156:
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v72 = v90 - (_BYTE *)v88;
                  if (2 * (v90 - (_BYTE *)v88) > (unint64_t)v71)
                    v71 = 2 * v72;
                  if (v72 >= 0x3FFFFFFFFFFFFFFFLL)
                    v73 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v73 = v71;
                  if (v73)
                    v74 = operator new(v73);
                  else
                    v74 = 0;
                  v75 = (char *)v74 + v73;
                  *((_BYTE *)v74 + v70) = BYTE4(v19);
                  v68 = (uint64_t)v74 + v70 + 1;
                  if (v58 == (char *)v69)
                  {
                    v88 = (char *)v74 + v70;
                    v89 = (char *)v74 + v70 + 1;
                    v90 = v75;
                  }
                  else
                  {
                    v76 = &v58[~v69];
                    do
                    {
                      v77 = *--v58;
                      (v76--)[(_QWORD)v74] = v77;
                    }
                    while (v58 != (char *)v69);
                    v58 = (char *)v88;
                    v88 = v74;
                    v89 = (char *)v74 + v70 + 1;
                    v90 = v75;
                    if (!v58)
                      goto LABEL_139;
                  }
                  operator delete(v58);
                }
                else
                {
                  *v58 = BYTE4(v19);
                  v68 = (uint64_t)(v58 + 1);
                }
LABEL_139:
                v89 = (char *)v68;
                goto LABEL_140;
              }
            }
            operator delete(v48);
            goto LABEL_121;
          }
        }
        operator delete(v38);
        goto LABEL_103;
      }
    }
    operator delete(v28);
    v27 = v90;
    goto LABEL_85;
  }
  return 1;
}

void sub_18EE9B918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::encode_pack_formats(uint64_t a1, int a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  char *v21;
  char v22;
  _DWORD *v23;
  int *v24;
  unint64_t v25;
  unint64_t v26;
  char **v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  char **v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  unsigned int v49;
  char v50;
  int v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char *v56;
  uint64_t v57;
  char **v58;
  char *v59;
  uint64_t v60;
  char **v61;
  int v62;
  char v63;
  char v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  size_t v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  size_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  size_t v83;
  char *v84;
  char *v85;
  char *v86;
  char v87;
  char *v88;
  char *v89;
  char v90;
  char *v91;
  char *v92;
  char v93;
  _DWORD *v94;
  _DWORD *v95;
  std::string::size_type v96;
  unint64_t v97;
  char **v98;
  unint64_t v99;
  std::string::size_type v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  int v106;
  unint64_t v107;
  _BYTE *v108;
  char **v109;
  unint64_t v110;
  std::string::size_type v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  int v117;
  float v118;
  _BOOL4 v119;
  _QWORD *v120;
  _QWORD *v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  _QWORD *v127;
  void *v132;
  char *v133;
  char *v134;
  std::string v135;
  std::string v136;
  std::string __p;
  void *v138;
  char *v139;
  unint64_t v140;
  int *v141;
  _DWORD *v142;
  unint64_t v143;
  std::string v144;
  char v145;

  v5 = *(_QWORD **)(a1 + 144);
  v127 = (_QWORD *)(a1 + 152);
  if (v5 == (_QWORD *)(a1 + 152))
    return 1;
  while (1)
  {
    if (a2 == 2)
    {
      v6 = *a4;
      v7 = *a4 + 1;
      if (v7 > (unint64_t)a5)
        return 0;
      v8 = *((_BYTE *)v5 + 40) << 6;
      *a4 = v7;
      *(_BYTE *)(a3 + v6) = v8;
    }
    if (!(_DWORD)result)
      return result;
    if (*((_BYTE *)v5 + 40) == 2)
    {
        return 0;
    }
    else
    {
      v10 = v5[6];
      v133 = 0;
      v134 = 0;
      v132 = 0;
      v11 = 32 * v145;
      v12 = v133;
      if (v133 >= v134)
      {
        v14 = (unint64_t)v132;
        v15 = v133 - (_BYTE *)v132;
        v16 = v133 - (_BYTE *)v132 + 1;
        if (v16 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v17 = v134 - (_BYTE *)v132;
        if (2 * (v134 - (_BYTE *)v132) > (unint64_t)v16)
          v16 = 2 * v17;
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
          v19 = (char *)operator new(v18);
        else
          v19 = 0;
        v20 = &v19[v15];
        v19[v15] = v11;
        v13 = (uint64_t)&v19[v15 + 1];
        if (v12 != (char *)v14)
        {
          v21 = &v12[~v14];
          do
          {
            v22 = *--v12;
            (v21--)[(_QWORD)v19] = v22;
          }
          while (v12 != (char *)v14);
          v12 = (char *)v132;
          v20 = v19;
        }
        v132 = v20;
        v134 = &v19[v18];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v133 = v11;
        v13 = (uint64_t)(v12 + 1);
      }
      v133 = (char *)v13;
      if (!v145)
      v141 = 0;
      v142 = 0;
      v143 = 0;
      if (*(_DWORD *)(v10 + 28))
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        do
        {
          v27 = *(char ***)(*(_QWORD *)(v10 + 32) + 8 * v26);
          std::string::basic_string[abi:ne180100]<0>(&v138, "AC_");
          std::string::basic_string[abi:ne180100]<0>(&__p, *v27);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v140) < 0)
            operator delete(v138);
          if (HIDWORD(v28))
          {
            if ((unint64_t)v23 >= v25)
            {
              v30 = v23 - v24;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62)
              {
                v143 = v25;
                v141 = v24;
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v25 - (_QWORD)v24) >> 1 > v31)
                v31 = (uint64_t)(v25 - (_QWORD)v24) >> 1;
              if (v25 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                v32 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v32 = v31;
              if (v32)
                v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v32);
              else
                v33 = 0;
              v34 = (int *)(v32 + 4 * v30);
              *v34 = v28;
              v29 = v34 + 1;
              while (v23 != v24)
              {
                v35 = *--v23;
                *--v34 = v35;
              }
              v25 = v32 + 4 * v33;
              v142 = v29;
              if (v24)
                operator delete(v24);
              v24 = v34;
            }
            else
            {
              *v23 = v28;
              v29 = v23 + 1;
            }
            v142 = v29;
            v23 = v29;
          }
          ++v26;
        }
        while (v26 < *(unsigned int *)(v10 + 28));
        v143 = v25;
        v141 = v24;
      }
      v138 = 0;
      v139 = 0;
      v140 = 0;
      if (*(_DWORD *)(v10 + 40))
      {
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        do
        {
          v40 = *(char ***)(*(_QWORD *)(v10 + 44) + 8 * v39);
          std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
          std::string::basic_string[abi:ne180100]<0>(&v136, *v40);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v136.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (HIDWORD(v41))
          {
            if ((unint64_t)v36 >= v38)
            {
              v43 = (v36 - v37) >> 2;
              v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62)
              {
                v140 = v38;
                v138 = v37;
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v38 - (_QWORD)v37) >> 1 > v44)
                v44 = (uint64_t)(v38 - (_QWORD)v37) >> 1;
              if (v38 - (unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                v45 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v45 = v44;
              if (v45)
                v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v45);
              else
                v46 = 0;
              v47 = (char *)(v45 + 4 * v43);
              *(_DWORD *)v47 = v41;
              v42 = v47 + 4;
              while (v36 != v37)
              {
                v48 = *((_DWORD *)v36 - 1);
                v36 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              v38 = v45 + 4 * v46;
              v139 = v42;
              if (v37)
                operator delete(v37);
              v37 = v47;
            }
            else
            {
              *(_DWORD *)v36 = v41;
              v42 = v36 + 4;
            }
            v139 = v42;
            v36 = v42;
          }
          ++v39;
        }
        while (v39 < *(unsigned int *)(v10 + 40));
        v140 = v38;
        v138 = v37;
      }
      v49 = *(unsigned __int8 *)(v10 + 96);
      if (v49 >= 0xA)
        LOBYTE(v49) = 10;
      v50 = (8 * v49) | ((*(float *)(v10 + 52) != 0.0) << 7);
      if (v145 == 2)
      {
        v58 = *(char ***)(v10 + 80);
        if (v58 && *v58)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
          std::string::basic_string[abi:ne180100]<0>(&v136, *v58);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v136.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v126 = BYTE4(v124);
        }
        else
        {
          LODWORD(v124) = 0;
          v126 = 0;
        }
        v61 = *(char ***)(v10 + 88);
        if (v61 && *v61)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
          std::string::basic_string[abi:ne180100]<0>(&v136, *v61);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v136.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v62 = BYTE4(v123);
        }
        else
        {
          LODWORD(v123) = 0;
          v62 = 0;
        }
        v63 = v50 | 4;
        if (!v126)
          v63 = v50;
        if (v62)
          v64 = v63 | 2;
        else
          v64 = v63;
        v65 = v133;
        v125 = v62;
        if (v133 >= v134)
        {
          v79 = (unint64_t)v132;
          v80 = v133 - (_BYTE *)v132;
          v81 = v133 - (_BYTE *)v132 + 1;
          if (v81 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v82 = v134 - (_BYTE *)v132;
          if (2 * (v134 - (_BYTE *)v132) > (unint64_t)v81)
            v81 = 2 * v82;
          if (v82 >= 0x3FFFFFFFFFFFFFFFLL)
            v83 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v83 = v81;
          if (v83)
            v84 = (char *)operator new(v83);
          else
            v84 = 0;
          v91 = &v84[v80];
          v84[v80] = v64;
          v66 = (uint64_t)&v84[v80 + 1];
          if (v65 != (char *)v79)
          {
            v92 = &v65[~v79];
            do
            {
              v93 = *--v65;
              (v92--)[(_QWORD)v84] = v93;
            }
            while (v65 != (char *)v79);
            v65 = (char *)v132;
            v91 = v84;
          }
          v132 = v91;
          v134 = &v84[v83];
          v62 = v125;
          if (v65)
            operator delete(v65);
        }
        else
        {
          *v133 = v64;
          v66 = (uint64_t)(v65 + 1);
        }
        v133 = (char *)v66;
        memset(&__p, 0, sizeof(__p));
        if (*(_DWORD *)(v10 + 56))
        {
          v94 = 0;
          v95 = 0;
          v96 = 0;
          v97 = 0;
          do
          {
            v98 = *(char ***)(*(_QWORD *)(v10 + 60) + 8 * v97);
            std::string::basic_string[abi:ne180100]<0>(&v136, "AP_");
            std::string::basic_string[abi:ne180100]<0>(&v135, *v98);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v135.__r_.__value_.__l.__data_);
            if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v136.__r_.__value_.__l.__data_);
            if (HIDWORD(v99))
            {
              if ((unint64_t)v94 >= v96)
              {
                v101 = v94 - v95;
                v102 = v101 + 1;
                if ((unint64_t)(v101 + 1) >> 62)
                {
                  __p.__r_.__value_.__r.__words[2] = v96;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)(v96 - (_QWORD)v95) >> 1 > v102)
                  v102 = (uint64_t)(v96 - (_QWORD)v95) >> 1;
                if (v96 - (unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
                  v103 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v103 = v102;
                if (v103)
                  v103 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v103);
                else
                  v104 = 0;
                v105 = (_DWORD *)(v103 + 4 * v101);
                *v105 = v99;
                v100 = (std::string::size_type)(v105 + 1);
                while (v94 != v95)
                {
                  v106 = *--v94;
                  *--v105 = v106;
                }
                v96 = v103 + 4 * v104;
                __p.__r_.__value_.__l.__size_ = v100;
                if (v95)
                  operator delete(v95);
                v95 = v105;
              }
              else
              {
                *v94 = v99;
                v100 = (std::string::size_type)(v94 + 1);
              }
              __p.__r_.__value_.__l.__size_ = v100;
              v94 = (_DWORD *)v100;
            }
            ++v97;
          }
          while (v97 < *(unsigned int *)(v10 + 56));
          __p.__r_.__value_.__r.__words[2] = v96;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
          v62 = v125;
        }
        else
        {
          v96 = 0;
          v95 = 0;
        }
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v95;
        if (*(_DWORD *)(v10 + 68))
        {
          v107 = 0;
          v108 = v95;
          do
          {
            v109 = *(char ***)(*(_QWORD *)(v10 + 72) + 8 * v107);
            std::string::basic_string[abi:ne180100]<0>(&v136, "AP_");
            std::string::basic_string[abi:ne180100]<0>(&v135, *v109);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v135.__r_.__value_.__l.__data_);
            if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v136.__r_.__value_.__l.__data_);
            if (HIDWORD(v110))
            {
              if ((unint64_t)v95 >= v96)
              {
                v112 = ((char *)v95 - v108) >> 2;
                v113 = v112 + 1;
                if ((unint64_t)(v112 + 1) >> 62)
                {
                  __p.__r_.__value_.__r.__words[2] = v96;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)(v96 - (_QWORD)v108) >> 1 > v113)
                  v113 = (uint64_t)(v96 - (_QWORD)v108) >> 1;
                if (v96 - (unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
                  v114 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v114 = v113;
                if (v114)
                  v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v114);
                else
                  v115 = 0;
                v116 = (_DWORD *)(v114 + 4 * v112);
                *v116 = v110;
                v111 = (std::string::size_type)(v116 + 1);
                while (v95 != (_DWORD *)v108)
                {
                  v117 = *--v95;
                  *--v116 = v117;
                }
                v96 = v114 + 4 * v115;
                __p.__r_.__value_.__l.__size_ = v111;
                if (v108)
                  operator delete(v108);
                v108 = v116;
              }
              else
              {
                *v95 = v110;
                v111 = (std::string::size_type)(v95 + 1);
              }
              __p.__r_.__value_.__l.__size_ = v111;
              v95 = (_DWORD *)v111;
            }
            ++v107;
          }
          while (v107 < *(unsigned int *)(v10 + 68));
          __p.__r_.__value_.__r.__words[2] = v96;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
          v95 = v108;
          v62 = v125;
        }
        if (v126)
        if (v62)
        if (v95)
        {
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v95;
          operator delete(v95);
        }
      }
      else if (v145 == 4)
      {
        v51 = *(unsigned __int8 *)(v10 + 60);
        v52 = v50 | 4;
        v53 = v50 | 2;
        if (v51 != 1)
          v53 = (8 * v49) | ((*(float *)(v10 + 52) != 0.0) << 7);
        if (v51 != 2)
          v52 = v53;
        if (v51 == 3)
          v54 = v50 | 6;
        else
          v54 = v52;
        v55 = *(_BYTE *)(v10 + 61) + v54;
        v56 = v133;
        if (v133 >= v134)
        {
          v67 = (unint64_t)v132;
          v68 = v133 - (_BYTE *)v132;
          v69 = v133 - (_BYTE *)v132 + 1;
          if (v69 < 0)
            goto LABEL_253;
          v70 = v134 - (_BYTE *)v132;
          if (2 * (v134 - (_BYTE *)v132) > (unint64_t)v69)
            v69 = 2 * v70;
          if (v70 >= 0x3FFFFFFFFFFFFFFFLL)
            v71 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
            v72 = (char *)operator new(v71);
          else
            v72 = 0;
          v85 = &v72[v68];
          v72[v68] = v55;
          v57 = (uint64_t)&v72[v68 + 1];
          if (v56 != (char *)v67)
          {
            v86 = &v56[~v67];
            do
            {
              v87 = *--v56;
              (v86--)[(_QWORD)v72] = v87;
            }
            while (v56 != (char *)v67);
            v56 = (char *)v132;
            v85 = v72;
          }
          v132 = v85;
          v134 = &v72[v71];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *v133 = v55;
          v57 = (uint64_t)(v56 + 1);
        }
        v133 = (char *)v57;
      }
      else
      {
        v59 = v133;
        if (v133 >= v134)
        {
          v73 = (unint64_t)v132;
          v74 = v133 - (_BYTE *)v132;
          v75 = v133 - (_BYTE *)v132 + 1;
          if (v75 < 0)
LABEL_253:
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v76 = v134 - (_BYTE *)v132;
          if (2 * (v134 - (_BYTE *)v132) > (unint64_t)v75)
            v75 = 2 * v76;
          if (v76 >= 0x3FFFFFFFFFFFFFFFLL)
            v77 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (v77)
            v78 = (char *)operator new(v77);
          else
            v78 = 0;
          v88 = &v78[v74];
          v78[v74] = v50;
          v60 = (uint64_t)&v78[v74 + 1];
          if (v59 != (char *)v73)
          {
            v89 = &v59[~v73];
            do
            {
              v90 = *--v59;
              (v89--)[(_QWORD)v78] = v90;
            }
            while (v59 != (char *)v73);
            v59 = (char *)v132;
            v88 = v78;
          }
          v132 = v88;
          v134 = &v78[v77];
          if (v59)
            operator delete(v59);
        }
        else
        {
          *v133 = v50;
          v60 = (uint64_t)(v59 + 1);
        }
        v133 = (char *)v60;
      }
      v118 = *(float *)(v10 + 52);
      if (v118 != 0.0)
      if (v138)
        operator delete(v138);
      if (v141)
        operator delete(v141);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      if (v132)
        operator delete(v132);
      if (!v119)
        return 0;
    }
    v120 = (_QWORD *)v5[1];
    if (v120)
    {
      do
      {
        v121 = v120;
        v120 = (_QWORD *)*v120;
      }
      while (v120);
    }
    else
    {
      do
      {
        v121 = (_QWORD *)v5[2];
        v122 = *v121 == (_QWORD)v5;
        v5 = v121;
      }
      while (!v122);
    }
    v5 = v121;
    if (v121 == v127)
      return 1;
  }
}

void sub_18EE9C504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  void *v43;

  if (__p)
    operator delete(__p);
  v43 = *(void **)(v41 - 144);
  if (v43)
  {
    *(_QWORD *)(v41 - 136) = v43;
    operator delete(v43);
  }
  if (*(char *)(v41 - 97) < 0)
    operator delete(*(void **)(v41 - 120));
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_18EE9C6F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)(v40 - 128) = v39;
  *(_QWORD *)(v40 - 144) = v38;
  if (a32 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  JUMPOUT(0x18EE9C6B0);
}

uint64_t `anonymous namespace'::encode_channel_formats(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, unint64_t *a5, double a6, double a7, double a8)
{
  double v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  int v22;
  double v23;
  char v24;
  char *v25;
  char *v26;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  char v40;
  float v41;
  char v42;
  uint64_t v43;
  float *v44;
  int v45;
  char v46;
  double v47;
  char *v48;
  unint64_t v49;
  int64_t v50;
  int64_t v51;
  unint64_t v52;
  size_t v53;
  char *v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  double v62;
  double v63;
  double v64;
  unint64_t v65;
  uint64_t v66;
  double v67;
  char v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  std::string::size_type size;
  std::string::size_type v76;
  _QWORD *v77;
  _QWORD *v78;
  __int128 v79;
  int64x2_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t i;
  _BYTE *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  int64_t v89;
  uint64_t v90;
  unint64_t v91;
  size_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char v97;
  char *v98;
  char *v99;
  char v100;
  char *v101;
  uint64_t v102;
  void *v103;
  _BOOL4 v104;
  _QWORD *v105;
  _QWORD *v106;
  BOOL v107;
  _QWORD *v108;
  void *v113;
  char *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  char v118;
  int64x2_t v119;
  char *v120;
  std::string v121;
  unsigned __int8 v122;
  std::string __p;
  char *v124;
  char **v125;

  v9 = *(_QWORD **)(a1 + 168);
  v10 = (_QWORD *)(a1 + 176);
  if (v9 == (_QWORD *)(a1 + 176))
    return 1;
  v14 = a5;
  v15 = (unint64_t *)a4;
  v16 = a3;
  v108 = (_QWORD *)(a1 + 176);
  while (1)
  {
    if (a2 == 2)
    {
      v17 = *v15;
      v18 = *v15 + 1;
      if (v18 > (unint64_t)v14)
        return 0;
      v19 = *((_BYTE *)v9 + 40) << 6;
      *v15 = v18;
      *(_BYTE *)(v16 + v17) = v19;
    }
    if (!(_DWORD)result)
      return result;
    if (*((_BYTE *)v9 + 40) == 2)
      break;
    v21 = v9[6];
    v22 = *((_DWORD *)v9 + 8);
    v23 = *((double *)v9 + 7);
    v114 = 0;
    v115 = 0;
    v113 = 0;
    v24 = 32 * v122;
    v25 = v114;
    if ((unint64_t)v114 >= v115)
    {
      v27 = (unint64_t)v113;
      v28 = v114 - (_BYTE *)v113;
      v29 = v114 - (_BYTE *)v113 + 1;
      if (v29 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v30 = v115 - (_QWORD)v113;
      if (2 * (v115 - (unint64_t)v113) > v29)
        v29 = 2 * v30;
      if (v30 >= 0x3FFFFFFFFFFFFFFFLL)
        v31 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
        v32 = (char *)operator new(v31);
      else
        v32 = 0;
      v33 = &v32[v28];
      v34 = &v32[v28];
      *v34 = v24;
      v26 = v34 + 1;
      if (v25 != (char *)v27)
      {
        v35 = &v25[~v27];
        do
        {
          v36 = *--v25;
          (v35--)[(_QWORD)v32] = v36;
        }
        while (v25 != (char *)v27);
        v25 = (char *)v113;
        v33 = v32;
      }
      v113 = v33;
      v115 = (unint64_t)&v32[v31];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v114 = v24;
      v26 = v25 + 1;
    }
    v114 = v26;
    if (!v122)
    v37 = 0;
    v38 = 0;
    v39 = 0;
    LODWORD(v8) = 0;
    v40 = 1;
    v41 = 0.0;
    do
    {
      v42 = v40;
      v43 = v21 + 8 * v37;
      v44 = (float *)(v43 + 36);
      v45 = *(unsigned __int8 *)(v43 + 40);
      if (v45 == 2)
      {
        v41 = *v44;
        v39 = 1;
      }
      else if (v45 == 1)
      {
        *(float *)&v8 = *v44;
        v38 = 1;
      }
      v40 = 0;
      v37 = 1;
    }
    while ((v42 & 1) != 0);
    if (v39)
      v46 = ((v38 != 0) << 7) | 0x40;
    else
      v46 = (v38 != 0) << 7;
    v47 = *(double *)&v114;
    if ((unint64_t)v114 >= v115)
    {
      v49 = (unint64_t)v113;
      v50 = v114 - (_BYTE *)v113;
      v51 = v114 - (_BYTE *)v113 + 1;
      if (v51 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v52 = v115 - (_QWORD)v113;
      if (2 * (v115 - (unint64_t)v113) > v51)
        v51 = 2 * v52;
      if (v52 >= 0x3FFFFFFFFFFFFFFFLL)
        v53 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v53 = v51;
      if (v53)
        v54 = (char *)operator new(v53);
      else
        v54 = 0;
      v55 = &v54[v50];
      v56 = &v54[v50];
      *v56 = v46;
      v48 = v56 + 1;
      if (*(_QWORD *)&v47 != v49)
      {
        v57 = ~v49 + *(_QWORD *)&v47;
        do
        {
          v58 = *(_BYTE *)--*(_QWORD *)&v47;
          v54[v57--] = v58;
        }
        while (*(_QWORD *)&v47 != v49);
        v47 = *(double *)&v113;
        v55 = v54;
      }
      v113 = v55;
      v115 = (unint64_t)&v54[v53];
      if (v47 != 0.0)
        operator delete(*(void **)&v47);
    }
    else
    {
      *v114 = v46;
      v48 = (char *)++*(_QWORD *)&v47;
    }
    v114 = v48;
    if (v38)
    if (v39)
    v119 = 0uLL;
    v120 = 0;
    if (!*(_DWORD *)(v21 + 24))
    {
      v82 = 0;
      goto LABEL_106;
    }
    v59 = 0;
    do
    {
      v60 = *(_QWORD *)(*(_QWORD *)(v21 + 28) + 8 * v59);
      std::string::basic_string[abi:ne180100]<0>(&__p, *(char **)v60);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(v60 + 8))
        v62 = *(double *)(v60 + 12);
      else
        v62 = 0.0;
      if (*(_BYTE *)(v60 + 20))
        v8 = *(double *)(v60 + 24);
      else
        *(_QWORD *)&v8 &= 0xFFFFFFFFFFFFFF00;
      v63 = v23 + v62;
      if (*(_BYTE *)(v60 + 20))
        v64 = v63 + v8;
      else
        v64 = 0.0;
      ++v59;
      v65 = *(unsigned int *)(v21 + 24);
      if (v59 >= v65)
      {
        v68 = 0;
        *(_QWORD *)&v47 &= 0xFFFFFFFFFFFFFF00;
      }
      else
      {
        v66 = *(_QWORD *)(*(_QWORD *)(v21 + 28) + 8 * v59);
        if (*(_BYTE *)(v66 + 8))
          v67 = *(double *)(v66 + 12);
        else
          v67 = 0.0;
        if (*(_BYTE *)(v66 + 20))
        {
          v47 = v23 + v67 + *(double *)(v66 + 24);
          v68 = 1;
        }
        else
        {
          v47 = 0.0;
          v68 = 0;
        }
      }
      if (HIDWORD(v61)
      {
        if (v118)
        {
          v69 = (_QWORD *)v119.i64[1];
          if (v119.i64[1] < (unint64_t)v120)
          {
            *(_QWORD *)v119.i64[1] = 0;
            v69[1] = 0;
            v69[2] = 0;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v69, v116, v117, v117 - (_QWORD)v116);
            v119.i64[1] = (uint64_t)(v69 + 3);
            goto LABEL_100;
          }
          v70 = 0xAAAAAAAAAAAAAAABLL * ((v119.i64[1] - v119.i64[0]) >> 3);
          v71 = v70 + 1;
          if (v70 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)&v120[-v119.i64[0]] >> 3) > v71)
            v71 = 0x5555555555555556 * ((uint64_t)&v120[-v119.i64[0]] >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v120[-v119.i64[0]] >> 3) >= 0x555555555555555)
            v72 = 0xAAAAAAAAAAAAAAALL;
          else
            v72 = v71;
          v125 = &v120;
          if (v72)
          {
            if (v72 > 0xAAAAAAAAAAAAAAALL)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v73 = (char *)operator new(24 * v72);
          }
          else
          {
            v73 = 0;
          }
          v74 = &v73[24 * v70];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v74;
          v124 = &v73[24 * v72];
          *((_QWORD *)v74 + 1) = 0;
          *((_QWORD *)v74 + 2) = 0;
          *(_QWORD *)v74 = 0;
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v74, v116, v117, v117 - (_QWORD)v116);
          size = __p.__r_.__value_.__l.__size_;
          v76 = __p.__r_.__value_.__r.__words[2] + 24;
          __p.__r_.__value_.__r.__words[2] += 24;
          v77 = (_QWORD *)v119.i64[1];
          v78 = (_QWORD *)v119.i64[0];
          if (v119.i64[1] == v119.i64[0])
          {
            v80 = vdupq_n_s64(v119.u64[1]);
          }
          else
          {
            do
            {
              *(_QWORD *)(size - 24) = 0;
              *(_QWORD *)(size - 16) = 0;
              size -= 24;
              *(_QWORD *)(size + 16) = 0;
              v79 = *(_OWORD *)(v77 - 3);
              v77 -= 3;
              *(_OWORD *)size = v79;
              *(_QWORD *)(size + 16) = v77[2];
              *v77 = 0;
              v77[1] = 0;
              v77[2] = 0;
            }
            while (v77 != v78);
            v80 = v119;
            v76 = __p.__r_.__value_.__r.__words[2];
          }
          v119.i64[0] = size;
          v119.i64[1] = v76;
          *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v80;
          v81 = v120;
          v120 = v124;
          v124 = v81;
          __p.__r_.__value_.__r.__words[0] = v80.i64[0];
          std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)&__p);
          v119.i64[1] = v76;
          if (v118)
          {
LABEL_100:
            if (v116)
              operator delete(v116);
          }
        }
        v65 = *(unsigned int *)(v21 + 24);
      }
    }
    while (v59 < v65);
    v82 = 0xAAAAAAAAAAAAAAABLL * ((v119.i64[1] - v119.i64[0]) >> 3);
LABEL_106:
    v83 = v119.i64[1];
    for (i = v119.i64[0]; i != v83; i += 24)
    {
      v86 = *(char **)i;
      v85 = *(_BYTE **)(i + 8);
      v87 = (uint64_t)&v85[-*(_QWORD *)i];
      if (v87 >= 1)
      {
        v88 = v114;
        if ((uint64_t)(v115 - (_QWORD)v114) >= v87)
        {
          if (v85 != v86)
            memmove(v114, *(const void **)i, v85 - v86);
          v114 = &v88[v85 - v86];
        }
        else
        {
          v89 = v114 - (_BYTE *)v113;
          v90 = v114 - (_BYTE *)v113 + v87;
          if (v90 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v91 = v115 - (_QWORD)v113;
          if (2 * (v115 - (unint64_t)v113) > v90)
            v90 = 2 * v91;
          if (v91 >= 0x3FFFFFFFFFFFFFFFLL)
            v92 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v92 = v90;
          if (v92)
            v93 = (char *)operator new(v92);
          else
            v93 = 0;
          v94 = &v93[v89];
          v95 = &v94[v87];
          v96 = v94;
          do
          {
            v97 = *v86++;
            *v96++ = v97;
            --v87;
          }
          while (v87);
          v98 = (char *)v113;
          if (v113 == v88)
          {
            v101 = v88;
          }
          else
          {
            v99 = v88;
            do
            {
              v100 = *--v99;
              *--v94 = v100;
            }
            while (v99 != v98);
            v101 = v114;
          }
          v102 = v101 - v88;
          if (v101 != v88)
            memmove(v95, v88, v101 - v88);
          v103 = v113;
          v113 = v94;
          v114 = &v95[v102];
          v115 = (unint64_t)&v93[v92];
          if (v103)
            operator delete(v103);
        }
      }
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
    std::vector<std::vector<unsigned char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    v16 = a3;
    v15 = (unint64_t *)a4;
    v14 = a5;
    v10 = v108;
    if (v113)
      operator delete(v113);
    if (!v104)
      return 0;
LABEL_139:
    v105 = (_QWORD *)v9[1];
    if (v105)
    {
      do
      {
        v106 = v105;
        v105 = (_QWORD *)*v105;
      }
      while (v105);
    }
    else
    {
      do
      {
        v106 = (_QWORD *)v9[2];
        v107 = *v106 == (_QWORD)v9;
        v9 = v106;
      }
      while (!v107);
    }
    v9 = v106;
    if (v106 == v10)
      return 1;
  }
    goto LABEL_139;
  return 0;
}

void sub_18EE9CFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a35 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::encode_block_formats_stand_alone(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  void *__p[3];
  char v31;

  v4 = *(_QWORD **)(a1 + 192);
  v5 = (_QWORD *)(a1 + 200);
  if (v4 == (_QWORD *)(a1 + 200))
    return 1;
  while (1)
  {
    v9 = *(_QWORD *)a3;
    v10 = *(_QWORD *)a3 + 1;
    if (v10 > (unint64_t)a4)
      break;
    v11 = *((_BYTE *)v4 + 40) << 6;
    *(_QWORD *)a3 = v10;
    *(_BYTE *)(a2 + v9) = v11;
    v12 = *(_QWORD *)a3;
    v13 = *(_QWORD *)a3 + 1;
    if (v13 > (unint64_t)a4)
      break;
    *(_QWORD *)a3 = v13;
    *(_BYTE *)(a2 + v12) = 0x80;
    v14 = *(_QWORD *)a3;
    if (*(_QWORD *)a3 + 8 >= (unint64_t)a4)
      break;
    v15 = *((_BYTE *)v4 + 35);
    *(_QWORD *)a3 = v14 + 1;
    *(_BYTE *)(a2 + v14) = v15;
    v16 = *((_WORD *)v4 + 17);
    v17 = (*(_QWORD *)a3)++;
    *(_BYTE *)(a2 + v17) = v16;
    v18 = *((_DWORD *)v4 + 8) >> 8;
    v19 = (*(_QWORD *)a3)++;
    *(_BYTE *)(a2 + v19) = v18;
    LOBYTE(v18) = *((_DWORD *)v4 + 8);
    v20 = (*(_QWORD *)a3)++;
    *(_BYTE *)(a2 + v20) = v18;
    LOBYTE(v18) = *((_BYTE *)v4 + 39);
    v21 = (*(_QWORD *)a3)++;
    *(_BYTE *)(a2 + v21) = v18;
    LOBYTE(v18) = *((_WORD *)v4 + 19);
    v22 = (*(_QWORD *)a3)++;
    *(_BYTE *)(a2 + v22) = v18;
    v23 = *((_DWORD *)v4 + 9) >> 8;
    v24 = (*(_QWORD *)a3)++;
    *(_BYTE *)(a2 + v24) = v23;
    LOBYTE(v23) = *((_DWORD *)v4 + 9);
    v25 = (*(_QWORD *)a3)++;
    *(_BYTE *)(a2 + v25) = v23;
    if (*((_BYTE *)v4 + 40) == 2)
    {
        return 0;
    }
    else
    {
      if (v31)
      {
        {
          if (__p[0])
            operator delete(__p[0]);
          return 0;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
    v26 = (_QWORD *)v4[1];
    if (v26)
    {
      do
      {
        v27 = v26;
        v26 = (_QWORD *)*v26;
      }
      while (v26);
    }
    else
    {
      do
      {
        v27 = (_QWORD *)v4[2];
        v28 = *v27 == (_QWORD)v4;
        v4 = v27;
      }
      while (!v28);
    }
    v4 = v27;
    if (v27 == v5)
      return 1;
  }
  return 0;
}

void sub_18EE9D28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::PacketBuilder::~PacketBuilder(_anonymous_namespace_::PacketBuilder *this)
{
}

void `anonymous namespace'::encode_block_format(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  char v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char v18;
  char v19;
  float v20;
  BOOL v21;
  int v22;
  char v23;
  char v24;
  char v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  size_t v32;
  void *v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  size_t v44;
  void *v45;
  char *v46;
  char *v47;
  char v48;
  char v49;
  char v50;
  char *v51;
  char *v52;
  char *v53;
  char v54;
  char v55;
  char *v56;
  char *v57;
  char *v58;
  char v59;
  int v60;
  char v61;
  char v62;
  char v63;
  char *v64;
  uint64_t v65;
  char **v66;
  unint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  size_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  size_t v80;
  void *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  size_t v86;
  void *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  size_t v92;
  void *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char v98;
  char *v99;
  char *v100;
  char v101;
  char *v102;
  char *v103;
  char v104;
  char v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  size_t v110;
  void *v111;
  float v112;
  char v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  size_t v118;
  void *v119;
  char *v120;
  char v121;
  char *v122;
  char v123;
  float v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  size_t v132;
  void *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  size_t v138;
  void *v139;
  char *v140;
  char *v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  size_t v149;
  void *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  size_t v155;
  void *v156;
  char *v157;
  char *v158;
  char v159;
  char *v160;
  char *v161;
  char v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  size_t v167;
  void *v168;
  char *v169;
  char *v170;
  char v171;
  unsigned int v172;
  uint64_t v173;
  char v174;
  int v175;
  char v176;
  uint64_t v177;
  char v178;
  char v179;
  uint64_t v180;
  char v181;
  char v182;
  char *v183;
  char *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  size_t v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char v194;
  _anonymous_namespace_ *v195;
  _QWORD *v196;
  _anonymous_namespace_ *v197;
  NSObject *v198;
  char *v199;
  char *v200;
  char v201;
  unint64_t v202;
  uint64_t v203;
  float v204;
  float *v205;
  unint64_t v206;
  _BYTE *v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  size_t v213;
  void *v214;
  char *v215;
  _BYTE *v216;
  char v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  size_t v223;
  void *v224;
  char *v225;
  _BYTE *v226;
  char v227;
  char *v228;
  char *v229;
  char v230;
  std::string v233;
  void *__p;
  char *v235;
  char *v236;
  _BYTE buf[12];
  __int16 v238;
  int v239;
  char v240;
  uint64_t v241;

  v241 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v235 = 0;
  v236 = 0;
  if ((a3 & 0xFF00000000) != 0)
  if (a5)
  {
    v7 = 32 * a4;
    v8 = v235;
    if (v235 >= v236)
    {
      v10 = (unint64_t)__p;
      v11 = v235 - (_BYTE *)__p;
      v12 = v235 - (_BYTE *)__p + 1;
      if (v12 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v13 = v236 - (_BYTE *)__p;
      if (2 * (v236 - (_BYTE *)__p) > (unint64_t)v12)
        v12 = 2 * v13;
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = operator new(v14);
      else
        v15 = 0;
      v16 = (char *)v15 + v14;
      *((_BYTE *)v15 + v11) = v7;
      v9 = (uint64_t)v15 + v11 + 1;
      if (v8 == (char *)v10)
      {
        v15 = (char *)v15 + v11;
      }
      else
      {
        v17 = &v8[~v10];
        do
        {
          v18 = *--v8;
          (v17--)[(_QWORD)v15] = v18;
        }
        while (v8 != (char *)v10);
        v8 = (char *)__p;
      }
      __p = v15;
      v236 = v16;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v235 = v7;
      v9 = (uint64_t)(v8 + 1);
    }
    v235 = (char *)v9;
  }
  v19 = 16 * *(_BYTE *)(a2 + 157);
  v20 = *(float *)(a2 + 32);
  if (*(_BYTE *)(a2 + 156))
    v21 = 1;
  else
    v21 = v20 == 1.0;
  if (!v21 || (v22 = 0, *(_BYTE *)(a2 + 156) == 1) && v20 != 0.0)
  {
    v19 |= 8u;
    v22 = 1;
  }
  if (*(_BYTE *)(a2 + 158))
    v19 += 4;
  if (*(_BYTE *)(a2 + 40))
    v23 = 3;
  else
    v23 = 1;
  if (*(_BYTE *)(a2 + 41))
    v24 = v23;
  else
    v24 = 0;
  v25 = v19 + v24;
  v26 = v235;
  if (v235 >= v236)
  {
    v28 = (unint64_t)__p;
    v29 = v235 - (_BYTE *)__p;
    v30 = v235 - (_BYTE *)__p + 1;
    if (v30 < 0)
      goto LABEL_454;
    v31 = v236 - (_BYTE *)__p;
    if (2 * (v236 - (_BYTE *)__p) > (unint64_t)v30)
      v30 = 2 * v31;
    if (v31 >= 0x3FFFFFFFFFFFFFFFLL)
      v32 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
      v33 = operator new(v32);
    else
      v33 = 0;
    v34 = (char *)v33 + v32;
    *((_BYTE *)v33 + v29) = v25;
    v27 = (char *)v33 + v29 + 1;
    if (v26 == (char *)v28)
    {
      v33 = (char *)v33 + v29;
    }
    else
    {
      v35 = &v26[~v28];
      do
      {
        v36 = *--v26;
        (v35--)[(_QWORD)v33] = v36;
      }
      while (v26 != (char *)v28);
      v26 = (char *)__p;
    }
    __p = v33;
    v236 = v34;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v235 = v25;
    v27 = v26 + 1;
  }
  v235 = v27;
  v37 = a2;
  if (!v22)
    goto LABEL_77;
  v38 = *(_BYTE *)(a2 + 156) << 7;
  if (v27 >= v236)
  {
    v40 = (unint64_t)__p;
    v41 = v27 - (_BYTE *)__p;
    v42 = v27 - (_BYTE *)__p + 1;
    if (v42 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v43 = v236 - (_BYTE *)__p;
    if (2 * (v236 - (_BYTE *)__p) > (unint64_t)v42)
      v42 = 2 * v43;
    if (v43 >= 0x3FFFFFFFFFFFFFFFLL)
      v44 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
      v45 = operator new(v44);
    else
      v45 = 0;
    v46 = (char *)v45 + v44;
    *((_BYTE *)v45 + v41) = v38;
    v39 = (uint64_t)v45 + v41 + 1;
    if (v27 == (char *)v40)
    {
      __p = (char *)v45 + v41;
      v236 = v46;
    }
    else
    {
      v47 = &v27[~v40];
      do
      {
        v48 = *--v27;
        (v47--)[(_QWORD)v45] = v48;
      }
      while (v27 != (char *)v40);
      v27 = (char *)__p;
      __p = v45;
      v236 = v46;
      if (!v27)
        goto LABEL_76;
    }
    operator delete(v27);
  }
  else
  {
    *v27 = v38;
    v39 = (uint64_t)(v27 + 1);
  }
LABEL_76:
  v235 = (char *)v39;
  v37 = a2;
LABEL_77:
  if (*(_BYTE *)(v37 + 41))
  switch(a4)
  {
    case 1:
      if (*(_BYTE *)(a2 + 52))
        v49 = (16 * *(_BYTE *)(a2 + 108)) | 0xA;
      else
        v49 = 16 * *(_BYTE *)(a2 + 108);
      if (*(_BYTE *)(a2 + 53))
        v50 = v49 | 5;
      else
        v50 = v49;
      v51 = v235;
      if (v235 >= v236)
      {
        v82 = (unint64_t)__p;
        v83 = v235 - (_BYTE *)__p;
        v84 = v235 - (_BYTE *)__p + 1;
        if (v84 < 0)
          goto LABEL_454;
        v85 = v236 - (_BYTE *)__p;
        if (2 * (v236 - (_BYTE *)__p) > (unint64_t)v84)
          v84 = 2 * v85;
        if (v85 >= 0x3FFFFFFFFFFFFFFFLL)
          v86 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v86 = v84;
        if (v86)
          v87 = operator new(v86);
        else
          v87 = 0;
        v102 = (char *)v87 + v83;
        v52 = (char *)v87 + v86;
        *v102 = v50;
        v53 = v102 + 1;
        if (v51 == (char *)v82)
        {
          v87 = v102;
        }
        else
        {
          v103 = &v51[~v82];
          do
          {
            v104 = *--v51;
            (v103--)[(_QWORD)v87] = v104;
          }
          while (v51 != (char *)v82);
          v51 = (char *)__p;
        }
        __p = v87;
        v236 = v52;
        if (v51)
          operator delete(v51);
      }
      else
      {
        *v235 = v50;
        v52 = v236;
        v53 = v51 + 1;
      }
      v235 = v53;
      if (*(_BYTE *)(a2 + 53))
        v113 = ((*(_BYTE *)(a2 + 52) != 0) << 7) | 0x40;
      else
        v113 = (*(_BYTE *)(a2 + 52) != 0) << 7;
      if (v53 < v52)
      {
        *v53 = v113;
        v114 = (uint64_t)(v53 + 1);
        goto LABEL_252;
      }
      v115 = (unint64_t)__p;
      v116 = v53 - (_BYTE *)__p;
      v117 = v53 - (_BYTE *)__p + 1;
      if (v117 < 0)
        goto LABEL_454;
      if (2 * (v52 - (_BYTE *)__p) > (unint64_t)v117)
        v117 = 2 * (v52 - (_BYTE *)__p);
      if ((unint64_t)(v52 - (_BYTE *)__p) >= 0x3FFFFFFFFFFFFFFFLL)
        v118 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v118 = v117;
      if (v118)
        v119 = operator new(v118);
      else
        v119 = 0;
      *((_BYTE *)v119 + v116) = v113;
      v114 = (uint64_t)v119 + v116 + 1;
      if (v53 == (char *)v115)
      {
        __p = (char *)v119 + v116;
        v236 = (char *)v119 + v118;
      }
      else
      {
        v122 = &v53[~v115];
        do
        {
          v123 = *--v53;
          (v122--)[(_QWORD)v119] = v123;
        }
        while (v53 != (char *)v115);
        v53 = (char *)__p;
        __p = v119;
        v236 = (char *)v119 + v118;
        if (!v53)
          goto LABEL_252;
      }
      operator delete(v53);
LABEL_252:
      v235 = (char *)v114;
      v37 = a2;
      if (*(_BYTE *)(a2 + 52))
      if (*(_BYTE *)(a2 + 53))
      if (*(_BYTE *)(a2 + 52))
      if (*(_BYTE *)(a2 + 53))
      if (*(_BYTE *)(a2 + 52))
      if (!*(_BYTE *)(a2 + 53))
        goto LABEL_403;
      v112 = *(float *)(a2 + 80);
LABEL_264:
LABEL_403:
      v207 = v235;
      v206 = (unint64_t)v236;
      if (*(_BYTE *)(v37 + 8))
      {
        if (v235 >= v236)
        {
          v209 = (unint64_t)__p;
          v210 = v235 - (_BYTE *)__p;
          v211 = v235 - (_BYTE *)__p + 1;
          if (v211 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v212 = v236 - (_BYTE *)__p;
          if (2 * (v236 - (_BYTE *)__p) > (unint64_t)v211)
            v211 = 2 * v212;
          if (v212 >= 0x3FFFFFFFFFFFFFFFLL)
            v213 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v213 = v211;
          if (v213)
            v214 = operator new(v213);
          else
            v214 = 0;
          v215 = (char *)v214 + v213;
          *((_BYTE *)v214 + v210) = 0;
          v208 = (uint64_t)v214 + v210 + 1;
          if (v207 == (_BYTE *)v209)
          {
            v214 = (char *)v214 + v210;
          }
          else
          {
            v216 = &v207[~v209];
            do
            {
              v217 = *--v207;
              (v216--)[(_QWORD)v214] = v217;
            }
            while (v207 != (_BYTE *)v209);
            v207 = __p;
          }
          __p = v214;
          v235 = (char *)v208;
          v236 = v215;
          if (v207)
            operator delete(v207);
        }
        else
        {
          *v235 = 0;
          v208 = (uint64_t)(v207 + 1);
        }
        v235 = (char *)v208;
        v207 = v235;
        v206 = (unint64_t)v236;
      }
      if (*(_BYTE *)(a2 + 20))
      {
        if ((unint64_t)v207 >= v206)
        {
          v219 = (unint64_t)__p;
          v220 = v207 - (_BYTE *)__p;
          v221 = v207 - (_BYTE *)__p + 1;
          if (v221 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v222 = v206 - (_QWORD)__p;
          if (2 * v222 > v221)
            v221 = 2 * v222;
          if (v222 >= 0x3FFFFFFFFFFFFFFFLL)
            v223 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v223 = v221;
          if (v223)
            v224 = operator new(v223);
          else
            v224 = 0;
          v225 = (char *)v224 + v223;
          *((_BYTE *)v224 + v220) = 1;
          v218 = (uint64_t)v224 + v220 + 1;
          if (v207 == (_BYTE *)v219)
          {
            v224 = (char *)v224 + v220;
          }
          else
          {
            v226 = &v207[~v219];
            do
            {
              v227 = *--v207;
              (v226--)[(_QWORD)v224] = v227;
            }
            while (v207 != (_BYTE *)v219);
            v207 = __p;
          }
          __p = v224;
          v235 = (char *)v218;
          v236 = v225;
          if (v207)
            operator delete(v207);
        }
        else
        {
          *v207 = 1;
          v218 = (uint64_t)(v207 + 1);
        }
        v235 = (char *)v218;
        v207 = v235;
        v206 = (unint64_t)v236;
      }
      *(_QWORD *)a1 = __p;
      *(_QWORD *)(a1 + 8) = v207;
      *(_QWORD *)(a1 + 16) = v206;
      *(_BYTE *)(a1 + 24) = 1;
      return;
    case 2:
      v66 = *(char ***)(a2 + 44);
      if (!v66 || !*v66)
        goto LABEL_127;
      std::string::basic_string[abi:ne180100]<0>(buf, "AC_");
      std::string::basic_string[abi:ne180100]<0>(&v233, *v66);
      if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v233.__r_.__value_.__l.__data_);
      if (v240 < 0)
        operator delete(*(void **)buf);
      if (HIDWORD(v67))
      {
        v94 = v235;
        if (v235 >= v236)
        {
          v163 = (unint64_t)__p;
          v164 = v235 - (_BYTE *)__p;
          v165 = v235 - (_BYTE *)__p + 1;
          if (v165 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v166 = v236 - (_BYTE *)__p;
          if (2 * (v236 - (_BYTE *)__p) > (unint64_t)v165)
            v165 = 2 * v166;
          if (v166 >= 0x3FFFFFFFFFFFFFFFLL)
            v167 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v167 = v165;
          if (v167)
            v168 = operator new(v167);
          else
            v168 = 0;
          v228 = (char *)v168 + v167;
          *((_BYTE *)v168 + v164) = 0x80;
          v95 = (uint64_t)v168 + v164 + 1;
          if (v94 == (char *)v163)
          {
            v168 = (char *)v168 + v164;
          }
          else
          {
            v229 = &v94[~v163];
            do
            {
              v230 = *--v94;
              (v229--)[(_QWORD)v168] = v230;
            }
            while (v94 != (char *)v163);
            v94 = (char *)__p;
          }
          __p = v168;
          v235 = (char *)v95;
          v236 = v228;
          if (v94)
            operator delete(v94);
        }
        else
        {
          *v235 = 0x80;
          v95 = (uint64_t)(v94 + 1);
        }
        v235 = (char *)v95;
        v69 = v235;
      }
      else
      {
LABEL_127:
        v68 = v235;
        if (v235 >= v236)
        {
          v88 = (unint64_t)__p;
          v89 = v235 - (_BYTE *)__p;
          v90 = v235 - (_BYTE *)__p + 1;
          if (v90 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v91 = v236 - (_BYTE *)__p;
          if (2 * (v236 - (_BYTE *)__p) > (unint64_t)v90)
            v90 = 2 * v91;
          if (v91 >= 0x3FFFFFFFFFFFFFFFLL)
            v92 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v92 = v90;
          if (v92)
            v93 = operator new(v92);
          else
            v93 = 0;
          v140 = (char *)v93 + v92;
          *((_BYTE *)v93 + v89) = 0;
          v69 = (char *)v93 + v89 + 1;
          if (v68 == (char *)v88)
          {
            v93 = (char *)v93 + v89;
          }
          else
          {
            v141 = &v68[~v88];
            do
            {
              v142 = *--v68;
              (v141--)[(_QWORD)v93] = v142;
            }
            while (v68 != (char *)v88);
            v68 = (char *)__p;
          }
          __p = v93;
          v235 = v69;
          v236 = v140;
          if (v68)
            operator delete(v68);
        }
        else
        {
          *v235 = 0;
          v69 = v68 + 1;
        }
        v235 = v69;
      }
      if (*(_BYTE *)(a2 + 56))
      {
        if (v69 >= v236)
        {
          v145 = (unint64_t)__p;
          v146 = v69 - (_BYTE *)__p;
          v147 = v69 - (_BYTE *)__p + 1;
          if (v147 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v148 = v236 - (_BYTE *)__p;
          if (2 * (v236 - (_BYTE *)__p) > (unint64_t)v147)
            v147 = 2 * v148;
          if (v148 >= 0x3FFFFFFFFFFFFFFFLL)
            v149 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v149 = v147;
          if (v149)
            v150 = operator new(v149);
          else
            v150 = 0;
          v157 = (char *)v150 + v149;
          *((_BYTE *)v150 + v146) = -64;
          v143 = (uint64_t)v150 + v146 + 1;
          if (v69 == (char *)v145)
          {
            v150 = (char *)v150 + v146;
          }
          else
          {
            v158 = &v69[~v145];
            do
            {
              v159 = *--v69;
              (v158--)[(_QWORD)v150] = v159;
            }
            while (v69 != (char *)v145);
            v69 = (char *)__p;
          }
          __p = v150;
          v235 = (char *)v143;
          v236 = v157;
          if (v69)
            operator delete(v69);
        }
        else
        {
          *v69 = -64;
          v143 = (uint64_t)(v69 + 1);
        }
        v235 = (char *)v143;
        v37 = a2;
      }
      else
      {
        if (v69 >= v236)
        {
          v151 = (unint64_t)__p;
          v152 = v69 - (_BYTE *)__p;
          v153 = v69 - (_BYTE *)__p + 1;
          if (v153 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v154 = v236 - (_BYTE *)__p;
          if (2 * (v236 - (_BYTE *)__p) > (unint64_t)v153)
            v153 = 2 * v154;
          if (v154 >= 0x3FFFFFFFFFFFFFFFLL)
            v155 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v155 = v153;
          if (v155)
            v156 = operator new(v155);
          else
            v156 = 0;
          v169 = (char *)v156 + v155;
          *((_BYTE *)v156 + v152) = 0;
          v144 = (uint64_t)v156 + v152 + 1;
          if (v69 == (char *)v151)
          {
            v156 = (char *)v156 + v152;
          }
          else
          {
            v170 = &v69[~v151];
            do
            {
              v171 = *--v69;
              (v170--)[(_QWORD)v156] = v171;
            }
            while (v69 != (char *)v151);
            v69 = (char *)__p;
          }
          __p = v156;
          v235 = (char *)v144;
          v236 = v169;
          if (v69)
            operator delete(v69);
        }
        else
        {
          *v69 = 0;
          v144 = (uint64_t)(v69 + 1);
        }
        v235 = (char *)v144;
        v37 = a2;
      }
      if (!*(_DWORD *)(v37 + 60))
        goto LABEL_403;
      v172 = 0;
      while (1)
      {
        v173 = *(_QWORD *)(*(_QWORD *)(v37 + 64) + 8 * v172);
        if (*(_QWORD *)(v173 + 12))
        {
          v174 = 0;
          v175 = 2;
        }
        else
        {
          v174 = *(_BYTE *)(v173 + 44) << 7;
          v175 = 1;
        }
        v176 = v174 | (32 * v175);
        v177 = *(_QWORD *)(v173 + 28);
        v178 = v177 ? 16 : 8;
        v179 = v178 | v176;
        v180 = *(_QWORD *)(v173 + 20);
        v181 = v180 ? 4 : 2;
        v182 = v181 | v179;
        v183 = v235;
        if (v235 >= v236)
        {
          v185 = (unint64_t)__p;
          v186 = v235 - (_BYTE *)__p;
          v187 = v235 - (_BYTE *)__p + 1;
          if (v187 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v188 = v236 - (_BYTE *)__p;
          if (2 * (v236 - (_BYTE *)__p) > (unint64_t)v187)
            v187 = 2 * v188;
          if (v188 >= 0x3FFFFFFFFFFFFFFFLL)
            v189 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v189 = v187;
          if (v189)
            v190 = (char *)operator new(v189);
          else
            v190 = 0;
          v191 = &v190[v186];
          v192 = &v190[v186];
          *v192 = v182;
          v184 = v192 + 1;
          if (v183 != (char *)v185)
          {
            v193 = &v183[~v185];
            do
            {
              v194 = *--v183;
              (v193--)[(_QWORD)v190] = v194;
            }
            while (v183 != (char *)v185);
            v183 = (char *)__p;
            v191 = v190;
          }
          __p = v191;
          v235 = v184;
          v236 = &v190[v189];
          if (v183)
            operator delete(v183);
        }
        else
        {
          *v235 = v182;
          v184 = v183 + 1;
        }
        v235 = v184;
        if (v175 == 1)
        else
        if (v177)
        else
        if (v180)
        else
        v196 = *(_QWORD **)(v173 + 36);
        if (!v196 || !*v196)
          break;
        std::string::basic_string[abi:ne180100]<0>(buf, "AC_");
        std::string::basic_string[abi:ne180100]<0>(&v233, **(char ***)(v173 + 36));
        v197 = v195;
        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v233.__r_.__value_.__l.__data_);
        if (v240 < 0)
          operator delete(*(void **)buf);
        if (!((unint64_t)v197 >> 32))
          break;
        ++v172;
        v37 = a2;
        if (!*(_DWORD *)(a2 + 60))
          goto LABEL_403;
      }
      if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataSerializer.cpp";
        v238 = 1024;
        v239 = 387;
        _os_log_impl(&dword_18EE07000, v198, OS_LOG_TYPE_ERROR, "%25s:%-5d Encountered Matrix block format with missing coefficient input channel", buf, 0x12u);
      }
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      if (__p)
      {
        v235 = (char *)__p;
        operator delete(__p);
      }
      return;
    case 3:
      if (*(_BYTE *)(a2 + 120))
        v54 = (16 * *(_BYTE *)(a2 + 121)) | 8;
      else
        v54 = 16 * *(_BYTE *)(a2 + 121);
      if (*(_BYTE *)(a2 + 56))
        v54 |= 4u;
      if (*(_BYTE *)(a2 + 72))
        v54 |= 2u;
      if (*(float *)(a2 + 76) == 0.0)
        v55 = v54;
      else
        v55 = v54 + 1;
      v56 = v235;
      if (v235 >= v236)
      {
        v70 = (unint64_t)__p;
        v71 = v235 - (_BYTE *)__p;
        v72 = v235 - (_BYTE *)__p + 1;
        if (v72 < 0)
          goto LABEL_454;
        v73 = v236 - (_BYTE *)__p;
        if (2 * (v236 - (_BYTE *)__p) > (unint64_t)v72)
          v72 = 2 * v73;
        if (v73 >= 0x3FFFFFFFFFFFFFFFLL)
          v74 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v74 = v72;
        if (v74)
          v75 = operator new(v74);
        else
          v75 = 0;
        v96 = (char *)v75 + v71;
        v57 = (char *)v75 + v74;
        *v96 = v55;
        v58 = v96 + 1;
        if (v56 == (char *)v70)
        {
          v75 = v96;
        }
        else
        {
          v97 = &v56[~v70];
          do
          {
            v98 = *--v56;
            (v97--)[(_QWORD)v75] = v98;
          }
          while (v56 != (char *)v70);
          v56 = (char *)__p;
        }
        __p = v75;
        v236 = v57;
        if (v56)
          operator delete(v56);
      }
      else
      {
        *v235 = v55;
        v57 = v236;
        v58 = v56 + 1;
      }
      v235 = v58;
      if (*(_BYTE *)(a2 + 96))
        v105 = ((*(_BYTE *)(a2 + 84) != 0) << 7) | 0x40;
      else
        v105 = (*(_BYTE *)(a2 + 84) != 0) << 7;
      if (v58 >= v57)
      {
        v107 = (unint64_t)__p;
        v108 = v58 - (_BYTE *)__p;
        v109 = v58 - (_BYTE *)__p + 1;
        if (v109 < 0)
LABEL_454:
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (2 * (v57 - (_BYTE *)__p) > (unint64_t)v109)
          v109 = 2 * (v57 - (_BYTE *)__p);
        if ((unint64_t)(v57 - (_BYTE *)__p) >= 0x3FFFFFFFFFFFFFFFLL)
          v110 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v110 = v109;
        if (v110)
          v111 = operator new(v110);
        else
          v111 = 0;
        *((_BYTE *)v111 + v108) = v105;
        v106 = (uint64_t)v111 + v108 + 1;
        if (v58 == (char *)v107)
        {
          __p = (char *)v111 + v108;
          v236 = (char *)v111 + v110;
        }
        else
        {
          v120 = &v58[~v107];
          do
          {
            v121 = *--v58;
            (v120--)[(_QWORD)v111] = v121;
          }
          while (v58 != (char *)v107);
          v58 = (char *)__p;
          __p = v111;
          v236 = (char *)v111 + v110;
          if (!v58)
            goto LABEL_229;
        }
        operator delete(v58);
      }
      else
      {
        *v58 = v105;
        v106 = (uint64_t)(v58 + 1);
      }
LABEL_229:
      v235 = (char *)v106;
      if (*(_BYTE *)(a2 + 72))
      {
      }
      v124 = *(float *)(a2 + 76);
      if (v124 != 0.0)
      if (*(_BYTE *)(a2 + 84))
      if (*(_BYTE *)(a2 + 96))
      {
      }
      v125 = v235;
      if (*(_BYTE *)(a2 + 104))
      {
        if (v235 >= v236)
        {
          v128 = (unint64_t)__p;
          v129 = v235 - (_BYTE *)__p;
          v130 = v235 - (_BYTE *)__p + 1;
          if (v130 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v131 = v236 - (_BYTE *)__p;
          if (2 * (v236 - (_BYTE *)__p) > (unint64_t)v130)
            v130 = 2 * v131;
          if (v131 >= 0x3FFFFFFFFFFFFFFFLL)
            v132 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v132 = v130;
          if (v132)
            v133 = operator new(v132);
          else
            v133 = 0;
          v160 = (char *)v133 + v132;
          *((_BYTE *)v133 + v129) = -64;
          v126 = (uint64_t)v133 + v129 + 1;
          if (v125 == (char *)v128)
          {
            v133 = (char *)v133 + v129;
          }
          else
          {
            v161 = &v125[~v128];
            do
            {
              v162 = *--v125;
              (v161--)[(_QWORD)v133] = v162;
            }
            while (v125 != (char *)v128);
            v125 = (char *)__p;
          }
          __p = v133;
          v236 = v160;
          if (v125)
            operator delete(v125);
        }
        else
        {
          *v235 = -64;
          v126 = (uint64_t)(v125 + 1);
        }
        v235 = (char *)v126;
        v37 = a2;
      }
      else
      {
        if (v235 >= v236)
        {
          v134 = (unint64_t)__p;
          v135 = v235 - (_BYTE *)__p;
          v136 = v235 - (_BYTE *)__p + 1;
          if (v136 < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v137 = v236 - (_BYTE *)__p;
          if (2 * (v236 - (_BYTE *)__p) > (unint64_t)v136)
            v136 = 2 * v137;
          if (v137 >= 0x3FFFFFFFFFFFFFFFLL)
            v138 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v138 = v136;
          if (v138)
            v139 = operator new(v138);
          else
            v139 = 0;
          v199 = (char *)v139 + v138;
          *((_BYTE *)v139 + v135) = 0;
          v127 = (uint64_t)v139 + v135 + 1;
          if (v125 == (char *)v134)
          {
            v139 = (char *)v139 + v135;
          }
          else
          {
            v200 = &v125[~v134];
            do
            {
              v201 = *--v125;
              (v200--)[(_QWORD)v139] = v201;
            }
            while (v125 != (char *)v134);
            v125 = (char *)__p;
          }
          __p = v139;
          v236 = v199;
          if (v125)
            operator delete(v125);
        }
        else
        {
          *v235 = 0;
          v127 = (uint64_t)(v125 + 1);
        }
        v235 = (char *)v127;
        v37 = a2;
      }
      if (*(_DWORD *)(v37 + 116))
      {
        v202 = 0;
        do
        {
          v203 = *(_QWORD *)(*(_QWORD *)(v37 + 108) + 8 * v202);
          v204 = *(float *)(v203 + 12);
          if (*(_BYTE *)(v203 + 32))
          {
            v205 = (float *)(v203 + 24);
          }
          else
          {
            v205 = (float *)(v203 + 16);
          }
          ++v202;
          v37 = a2;
        }
        while (v202 < *(unsigned int *)(a2 + 116));
      }
      goto LABEL_403;
    case 4:
      if (*(_BYTE *)(a2 + 96))
        v59 = 0x80;
      else
        v59 = 0;
      v60 = *(unsigned __int8 *)(a2 + 98);
      v61 = v59 | 0x60;
      v62 = v59 | 0x40;
      if (v60 == 1)
        v59 |= 0x20u;
      if (v60 == 2)
        v59 = v62;
      if (v60 == 3)
        v59 = v61;
      if (*(_BYTE *)(a2 + 52))
        v59 += 16;
      if (*(_BYTE *)(a2 + 53))
        v59 += 8;
      if (*(_BYTE *)(a2 + 54))
        v59 += 4;
      if (*(float *)(a2 + 92) == 0.0)
        v63 = v59;
      else
        v63 = v59 + 2;
      v64 = v235;
      if (v235 >= v236)
      {
        v76 = (unint64_t)__p;
        v77 = v235 - (_BYTE *)__p;
        v78 = v235 - (_BYTE *)__p + 1;
        if (v78 < 0)
          goto LABEL_454;
        v79 = v236 - (_BYTE *)__p;
        if (2 * (v236 - (_BYTE *)__p) > (unint64_t)v78)
          v78 = 2 * v79;
        if (v79 >= 0x3FFFFFFFFFFFFFFFLL)
          v80 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v80 = v78;
        if (v80)
          v81 = operator new(v80);
        else
          v81 = 0;
        v99 = (char *)v81 + v80;
        *((_BYTE *)v81 + v77) = v63;
        v65 = (uint64_t)v81 + v77 + 1;
        if (v64 == (char *)v76)
        {
          v81 = (char *)v81 + v77;
        }
        else
        {
          v100 = &v64[~v76];
          do
          {
            v101 = *--v64;
            (v100--)[(_QWORD)v81] = v101;
          }
          while (v64 != (char *)v76);
          v64 = (char *)__p;
        }
        __p = v81;
        v236 = v99;
        if (v64)
          operator delete(v64);
      }
      else
      {
        *v235 = v63;
        v65 = (uint64_t)(v64 + 1);
      }
      v235 = (char *)v65;
      v37 = a2;
      v112 = *(float *)(a2 + 92);
      if (v112 == 0.0)
        goto LABEL_403;
      goto LABEL_264;
    default:
      goto LABEL_403;
  }
}

void sub_18EE9E764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::encode_var_uint(unint64_t a1, unint64_t *a2)
{
  BOOL v4;
  uint64_t i;
  uint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;
  char v23;
  _OWORD v24[2];
  __int128 v25;

  v25 = 0u;
  memset(v24, 0, sizeof(v24));
  do
  {
    v23 = a1 & 0x7F;
    std::deque<unsigned char>::push_back(v24, &v23);
    v4 = a1 > 0x7F;
    a1 >>= 7;
  }
  while (v4);
  for (i = *((_QWORD *)&v25 + 1); *((_QWORD *)&v25 + 1); i = *((_QWORD *)&v25 + 1))
  {
    v6 = i - 1;
    v7 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v24[0] + 1) + (((unint64_t)(v25 + v6) >> 9) & 0x7FFFFFFFFFFFF8))
                  + ((v25 + v6) & 0xFFF));
    *((_QWORD *)&v25 + 1) = v6;
    std::deque<unsigned char>::__maybe_remove_back_spare[abi:ne180100](v24);
    if (*((_QWORD *)&v25 + 1))
      v8 = v7 | 0x80;
    else
      v8 = v7;
    v10 = (_BYTE *)a2[1];
    v9 = a2[2];
    if ((unint64_t)v10 >= v9)
    {
      v12 = *a2;
      v13 = &v10[-*a2];
      v14 = (unint64_t)(v13 + 1);
      if ((uint64_t)(v13 + 1) < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v15 = v9 - v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v13[(_QWORD)v17];
      v19 = &v13[(_QWORD)v17];
      *v19 = v8;
      v11 = v19 + 1;
      if (v10 != (_BYTE *)v12)
      {
        v20 = &v10[~v12];
        do
        {
          v21 = *--v10;
          (v20--)[(_QWORD)v17] = v21;
        }
        while (v10 != (_BYTE *)v12);
        v10 = (_BYTE *)*a2;
        v18 = v17;
      }
      *a2 = (unint64_t)v18;
      a2[1] = (unint64_t)v11;
      a2[2] = (unint64_t)&v17[v16];
      if (v10)
        operator delete(v10);
    }
    else
    {
      *v10 = v8;
      v11 = v10 + 1;
    }
    a2[1] = (unint64_t)v11;
  }
  return std::deque<unsigned char>::~deque[abi:ne180100]((uint64_t)v24);
}

void sub_18EE9E980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::deque<unsigned char>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::log(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;

  v2 = &unk_1EE168000;
  if ((v1 & 1) == 0)
  {
    v2 = (_QWORD *)&unk_1EE168000;
    if (v4)
    {
      v2 = (_QWORD *)&unk_1EE168000;
    }
  }
  return v2[101];
}

void std::deque<unsigned char>::push_back(_QWORD *a1, _BYTE *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  _QWORD *v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 9) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x1000)
    {
      a1[4] = v8 - 4096;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v4[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v4 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5)
            v51 = 1;
          else
            v51 = v26 >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v51);
          v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v5;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v5;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25)
      v29 = 1;
    else
      v29 = v26 >> 2;
    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v29);
    v32 = v31;
    v33 = &v30[8 * v23];
    *(_QWORD *)&v34 = v30;
    *((_QWORD *)&v34 + 1) = v33;
    v109 = v34;
    v35 = operator new(0x1000uLL);
    *(_QWORD *)&v36 = v33;
    *((_QWORD *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      v37 = 8 * v23;
      *(_QWORD *)&v38 = v109;
      if (v6 >= 1)
      {
        v39 = v37 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v33 -= 8 * (v40 >> 1);
        *(_QWORD *)&v36 = v33;
        *((_QWORD *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      v73 = v37 >> 2;
      if (v4 == v5)
        v74 = 1;
      else
        v74 = v73;
      v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v74);
      v33 = &v75[8 * (v74 >> 2)];
      *(_QWORD *)&v38 = v75;
      *((_QWORD *)&v38 + 1) = v33;
      *(_QWORD *)&v36 = v33;
      *((_QWORD *)&v36 + 1) = &v75[8 * v76];
      if (!v30)
        goto LABEL_56;
      v106 = v36;
      v109 = v38;
      operator delete(v30);
      v36 = v106;
    }
    v38 = v109;
LABEL_56:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)&v36 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      {
        v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
        {
          if (*((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
            v85 = 1;
          else
            v85 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v38 + 1)) >> 2;
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              v93 = *v92++;
              *(_QWORD *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(_QWORD *)&v38 = v86;
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = v88;
          *((_QWORD *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            v107 = v36;
            v111 = v38;
            operator delete(v78);
            v36 = v107;
            v38 = v111;
          }
        }
        else
        {
          v81 = (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1)
            v82 = v81 + 1;
          else
            v82 = v81 + 2;
          v83 = v82 >> 1;
          v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((_QWORD *)&v38 + 1)));
          if ((_QWORD)v36 == *((_QWORD *)&v38 + 1))
          {
            v80 = (_BYTE *)*((_QWORD *)&v38 + 1);
          }
          else
          {
            v108 = *((_QWORD *)&v36 + 1);
            v110 = v38;
            memmove((void *)(v84 - (v36 - *((_QWORD *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((_QWORD *)&v38 + 1));
            *((_QWORD *)&v36 + 1) = v108;
            *(_QWORD *)&v38 = v110;
          }
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((_QWORD *)&v38 + 1);
      }
      v94 = *(_QWORD *)(i - 8);
      *((_QWORD *)v79 - 1) = v94;
      *((_QWORD *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95)
      operator delete(v95);
    goto LABEL_83;
  }
LABEL_84:
  *(_BYTE *)(*(_QWORD *)&v5[(v9 >> 9) & 0x7FFFFFFFFFFFF8] + (v9 & 0xFFF)) = *a2;
  ++a1[5];
}

void sub_18EE9EF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void std::deque<unsigned char>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = ((v1 - v2) << 9) - 1;
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x2000)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<unsigned char>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 4096;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

uint64_t `anonymous namespace'::encode_format_element_id(char a1, int a2, uint64_t a3, unint64_t *a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *a4;
  v6 = *a4 + 1;
  if (v6 > a5)
    return 0;
  *a4 = v6;
  *(_BYTE *)(a3 + v5) = 16 * a1;
  v7 = *a4;
  if (*a4 + 4 >= a5)
    return 0;
  *a4 = v7 + 1;
  *(_BYTE *)(a3 + v7) = HIBYTE(a2);
  v8 = (*a4)++;
  *(_BYTE *)(a3 + v8) = BYTE2(a2);
  v9 = (*a4)++;
  *(_BYTE *)(a3 + v9) = BYTE1(a2);
  v10 = (*a4)++;
  *(_BYTE *)(a3 + v10) = a2;
  return 1;
}

std::string *`anonymous namespace'::determine_channel_type(std::string *this, const std::string::value_type *a2, std::string::value_type *a3)
{
  std::string *v4;
  std::string::size_type size;
  int v6;
  std::string *v7;
  int v8;
  char v14;

  v4 = this;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2)
    this = std::string::__assign_external(this, a2);
  if (*a3)
    v4[1].__r_.__value_.__s.__data_[0] = *a3;
  size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  v6 = (char)size;
  if ((size & 0x80u) != 0)
    size = v4->__r_.__value_.__l.__size_;
  if (size == 4)
  {
    v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
    if (v6 >= 0)
      v7 = v4;
    v8 = v4[1].__r_.__value_.__s.__data_[0];
    if (LODWORD(v7->__r_.__value_.__l.__data_) == 825241648 && v8 == 1)
    {
      v14 = 1;
      goto LABEL_36;
    }
    if (LODWORD(v7->__r_.__value_.__l.__data_) == 842018864 && v8 == 2)
    {
      v14 = 2;
      goto LABEL_36;
    }
    if (LODWORD(v7->__r_.__value_.__l.__data_) == 858796080 && v8 == 3)
    {
      v14 = 3;
      goto LABEL_36;
    }
    if (LODWORD(v7->__r_.__value_.__l.__data_) == 875573296 && v8 == 4)
    {
      v14 = 4;
      goto LABEL_36;
    }
    if (LODWORD(v7->__r_.__value_.__l.__data_) == 892350512 && v8 == 5)
    {
      v14 = 5;
      goto LABEL_36;
    }
  }
  v14 = 0;
LABEL_36:
  v4[1].__r_.__value_.__s.__data_[1] = v14;
  return this;
}

void sub_18EE9F278(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::parse_block_format_id(int a1, const std::string *a2)
{
  std::string *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  _BOOL4 v10;
  NSObject *v11;
  const std::string *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  std::string *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  const std::string *v21;
  std::string v23;
  int v24;
  int v25;
  char v26;
  _BYTE v27[28];
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = 0;
  v4 = std::string::basic_string((std::string *)v27, a2, 0, 3uLL, (std::allocator<char> *)&v23);
  v5 = v27[23];
  if (v27[23] < 0)
    v5 = *(_QWORD *)&v27[8];
  if (v5 != 3)
    goto LABEL_10;
  v6 = *(unsigned __int16 **)v27;
  if (v27[23] >= 0)
    v6 = (unsigned __int16 *)v27;
  v7 = *v6;
  v8 = *((unsigned __int8 *)v6 + 2);
  if (v7 == 16961 && v8 == 95)
  {
    std::string::basic_string(&v23, a2, 3uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v26);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v23;
    else
      v16 = (std::string *)v23.__r_.__value_.__r.__words[0];
    v4 = (std::string *)sscanf((const char *)v16, "%08x_%08x", &v25, &v24);
    v10 = (_DWORD)v4 != 2;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if ((v27[23] & 0x80) == 0)
    {
LABEL_11:
      if (v10)
        goto LABEL_12;
      goto LABEL_24;
    }
  }
  else
  {
LABEL_10:
    v10 = 1;
    if ((v27[23] & 0x80) == 0)
      goto LABEL_11;
  }
  operator delete(*(void **)v27);
  if (v10)
  {
LABEL_12:
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = a2;
      else
        v12 = (const std::string *)a2->__r_.__value_.__r.__words[0];
      *(_DWORD *)v27 = 136315650;
      *(_QWORD *)&v27[4] = "AudioMetadataSerializer.cpp";
      *(_WORD *)&v27[12] = 1024;
      *(_DWORD *)&v27[14] = 2100;
      *(_WORD *)&v27[18] = 2080;
      *(_QWORD *)&v27[20] = v12;
      v13 = "%25s:%-5d Block format ID '%s' does not match expected pattern 'AB_xxxxyyyy_zz'";
      v14 = v11;
      v15 = 28;
LABEL_31:
      _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_ERROR, v13, v27, v15);
      goto LABEL_32;
    }
    goto LABEL_32;
  }
LABEL_24:
  if (v25 != a1)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = a2;
      else
        v21 = (const std::string *)a2->__r_.__value_.__r.__words[0];
      *(_DWORD *)v27 = 136315906;
      *(_QWORD *)&v27[4] = "AudioMetadataSerializer.cpp";
      *(_WORD *)&v27[12] = 1024;
      *(_DWORD *)&v27[14] = 2105;
      *(_WORD *)&v27[18] = 2080;
      *(_QWORD *)&v27[20] = v21;
      v28 = 1024;
      v29 = a1;
      v13 = "%25s:%-5d Block format ID '%s' does not match containing channel format ID 'AC_%08x'";
      v14 = v20;
      v15 = 34;
      goto LABEL_31;
    }
LABEL_32:
    v18 = 0;
    v17 = 0;
    v19 = 0;
    return v19 | v17 | v18;
  }
  v17 = v24 & 0xFFFFFF00;
  v18 = v24;
  v19 = 0x100000000;
  return v19 | v17 | v18;
}

void sub_18EE9F500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18EE9F580(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<unsigned char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::vector<unsigned char>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_18EE9F704(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

void `anonymous namespace'::gather_elements_from_pack_format(uint64_t a1, uint64_t a2, char a3, uint64_t **a4)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t v10;
  unint64_t v11;
  std::string::value_type *v12;
  _BOOL4 v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  std::string::value_type *v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t **v37;
  std::string::value_type *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  char **v42;
  unint64_t v43;
  std::string::value_type *v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t *v47;
  unsigned int v48;
  BOOL v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t **v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  char **v56;
  unint64_t v57;
  std::string::value_type *v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t *v61;
  unsigned int v62;
  BOOL v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t **v66;
  char **v67;
  unint64_t v68;
  std::string::value_type *v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  BOOL v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t **v78;
  char **v79;
  unint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  BOOL v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t **v90;
  std::string v93;
  std::string v94;
  char v95;
  std::string __p;

  v6 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = (_QWORD *)(a1 + 176);
    v9 = (uint64_t **)(a1 + 168);
    while (1)
    {
      v10 = *(_QWORD *)(a2 + 32);
      if (**(_QWORD **)(v10 + 8 * v7))
        break;
LABEL_34:
      if (++v7 >= v6)
        goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(&v94, "AC_");
    std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v10 + 8 * v7));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    if (!HIDWORD(v11))
    {
LABEL_33:
      v6 = *(unsigned int *)(a2 + 28);
      goto LABEL_34;
    }
    std::string::basic_string[abi:ne180100]<0>(&v94, **(char ***)(v10 + 8 * v7));
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v94.__r_.__value_.__l.__size_ < 8)
        goto LABEL_17;
      v12 = (std::string::value_type *)(v94.__r_.__value_.__r.__words[0] + 7);
    }
    else
    {
      v12 = &v94.__r_.__value_.__s.__data_[7];
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 8)
        goto LABEL_17;
    }
    if (*v12 == 48)
    {
      v13 = 0;
      if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_30;
    }
LABEL_17:
    v14 = *v8;
    if (!*v8)
      goto LABEL_28;
    v15 = v8;
    do
    {
      v16 = *(_DWORD *)(v14 + 32);
      v17 = v16 >= v11;
      if (v16 >= v11)
        v18 = (uint64_t *)v14;
      else
        v18 = (uint64_t *)(v14 + 8);
      if (v17)
        v15 = (_QWORD *)v14;
      v14 = *v18;
    }
    while (*v18);
    if (v15 == v8 || *((_DWORD *)v15 + 8) > v11)
LABEL_28:
      v15 = v8;
    v13 = v15 == v8;
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
LABEL_30:
    operator delete(v94.__r_.__value_.__l.__data_);
LABEL_31:
    if (v13)
    {
      v19 = *(uint64_t **)(v10 + 8 * v7);
      v20 = *a4;
      *(_BYTE *)v21 = a3;
      v21[1] = v19;
      v21[2] = v20;
    }
    goto LABEL_33;
  }
LABEL_35:
  v22 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v22)
  {
    v23 = 0;
    v24 = (uint64_t *)(a1 + 152);
    while (1)
    {
      v25 = *(_QWORD *)(a2 + 44);
      if (**(_QWORD **)(v25 + 8 * v23))
        break;
LABEL_68:
      if (++v23 >= v22)
        goto LABEL_69;
    }
    std::string::basic_string[abi:ne180100]<0>(&v94, "AP_");
    std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v25 + 8 * v23));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    if (!HIDWORD(v26))
    {
LABEL_67:
      v22 = *(unsigned int *)(a2 + 40);
      goto LABEL_68;
    }
    std::string::basic_string[abi:ne180100]<0>(&v94, **(char ***)(v25 + 8 * v23));
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v94.__r_.__value_.__l.__size_ < 8)
        goto LABEL_51;
      v27 = (std::string::value_type *)(v94.__r_.__value_.__r.__words[0] + 7);
    }
    else
    {
      v27 = &v94.__r_.__value_.__s.__data_[7];
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 8)
        goto LABEL_51;
    }
    if (*v27 == 48)
    {
      v28 = 0;
      if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_65;
      goto LABEL_64;
    }
LABEL_51:
    v29 = *v24;
    if (!*v24)
      goto LABEL_62;
    v30 = (uint64_t *)(a1 + 152);
    do
    {
      v31 = *(_DWORD *)(v29 + 32);
      v32 = v31 >= v26;
      if (v31 >= v26)
        v33 = (uint64_t *)v29;
      else
        v33 = (uint64_t *)(v29 + 8);
      if (v32)
        v30 = (uint64_t *)v29;
      v29 = *v33;
    }
    while (*v33);
    if (v30 == v24 || *((_DWORD *)v30 + 8) > v26)
LABEL_62:
      v30 = (uint64_t *)(a1 + 152);
    v28 = v30 == v24;
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_65;
LABEL_64:
    operator delete(v94.__r_.__value_.__l.__data_);
LABEL_65:
    if (v28)
    {
      v34 = *(uint64_t **)(v25 + 8 * v23);
      v35 = *a4;
      *(_BYTE *)v36 = a3;
      v36[1] = v34;
      v36[2] = v35;
    }
    goto LABEL_67;
  }
LABEL_69:
  if (v95 != 2)
    goto LABEL_206;
  v37 = a4;
  v38 = &__p.__r_.__value_.__s.__data_[7];
  v39 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v39)
  {
    v40 = 0;
    v41 = (uint64_t *)(a1 + 152);
    do
    {
      v42 = *(char ***)(*(_QWORD *)(a2 + 60) + 8 * v40);
      if (!v42 || !*v42)
        goto LABEL_105;
      std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
      std::string::basic_string[abi:ne180100]<0>(&v93, *v42);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!HIDWORD(v43))
        goto LABEL_104;
      std::string::basic_string[abi:ne180100]<0>(&__p, *v42);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ < 8)
          goto LABEL_87;
        v44 = (std::string::value_type *)(__p.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        v44 = &__p.__r_.__value_.__s.__data_[7];
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 8)
          goto LABEL_87;
      }
      if (*v44 != 48)
      {
LABEL_87:
        v46 = *v41;
        if (!*v41)
          goto LABEL_98;
        v47 = (uint64_t *)(a1 + 152);
        do
        {
          v48 = *(_DWORD *)(v46 + 32);
          v49 = v48 >= v43;
          if (v48 >= v43)
            v50 = (uint64_t *)v46;
          else
            v50 = (uint64_t *)(v46 + 8);
          if (v49)
            v47 = (uint64_t *)v46;
          v46 = *v50;
        }
        while (*v50);
        if (v47 == v41 || *((_DWORD *)v47 + 8) > v43)
LABEL_98:
          v47 = (uint64_t *)(a1 + 152);
        v45 = v47 == v41;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_100:
          if (!v45)
            goto LABEL_104;
LABEL_103:
          v51 = *a4;
          *(_BYTE *)v52 = a3;
          v52[1] = (uint64_t *)v42;
          v52[2] = v51;
          goto LABEL_104;
        }
        goto LABEL_102;
      }
      v45 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_100;
LABEL_102:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v45)
        goto LABEL_103;
LABEL_104:
      v39 = *(unsigned int *)(a2 + 56);
LABEL_105:
      ++v40;
    }
    while (v40 < v39);
  }
  v53 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v53)
  {
    v54 = 0;
    v55 = (uint64_t *)(a1 + 152);
    do
    {
      v56 = *(char ***)(*(_QWORD *)(a2 + 72) + 8 * v54);
      if (!v56 || !*v56)
        goto LABEL_141;
      std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
      std::string::basic_string[abi:ne180100]<0>(&v93, *v56);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!HIDWORD(v57))
        goto LABEL_140;
      std::string::basic_string[abi:ne180100]<0>(&__p, *v56);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ < 8)
          goto LABEL_123;
        v58 = (std::string::value_type *)(__p.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        v58 = &__p.__r_.__value_.__s.__data_[7];
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 8)
          goto LABEL_123;
      }
      if (*v58 != 48)
      {
LABEL_123:
        v60 = *v55;
        if (!*v55)
          goto LABEL_134;
        v61 = (uint64_t *)(a1 + 152);
        do
        {
          v62 = *(_DWORD *)(v60 + 32);
          v63 = v62 >= v57;
          if (v62 >= v57)
            v64 = (uint64_t *)v60;
          else
            v64 = (uint64_t *)(v60 + 8);
          if (v63)
            v61 = (uint64_t *)v60;
          v60 = *v64;
        }
        while (*v64);
        if (v61 == v55 || *((_DWORD *)v61 + 8) > v57)
LABEL_134:
          v61 = (uint64_t *)(a1 + 152);
        v59 = v61 == v55;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_136:
          if (!v59)
            goto LABEL_140;
LABEL_139:
          v65 = *a4;
          *(_BYTE *)v66 = a3;
          v66[1] = (uint64_t *)v56;
          v66[2] = v65;
          goto LABEL_140;
        }
        goto LABEL_138;
      }
      v59 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_136;
LABEL_138:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v59)
        goto LABEL_139;
LABEL_140:
      v53 = *(unsigned int *)(a2 + 68);
LABEL_141:
      ++v54;
    }
    while (v54 < v53);
  }
  v67 = *(char ***)(a2 + 80);
  if (v67 && *v67)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
    std::string::basic_string[abi:ne180100]<0>(&v93, *v67);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (HIDWORD(v68))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, *v67);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ < 8)
          goto LABEL_156;
        v69 = (std::string::value_type *)(__p.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        v69 = &__p.__r_.__value_.__s.__data_[7];
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 8)
          goto LABEL_156;
      }
      if (*v69 == 48)
      {
        v70 = 0;
        goto LABEL_169;
      }
LABEL_156:
      v71 = a1 + 152;
      v72 = *(_QWORD *)(a1 + 152);
      if (!v72)
        goto LABEL_167;
      v73 = a1 + 152;
      do
      {
        v74 = *(_DWORD *)(v72 + 32);
        v75 = v74 >= v68;
        if (v74 >= v68)
          v76 = (uint64_t *)v72;
        else
          v76 = (uint64_t *)(v72 + 8);
        if (v75)
          v73 = v72;
        v72 = *v76;
      }
      while (*v76);
      if (v73 == v71 || *(_DWORD *)(v73 + 32) > v68)
LABEL_167:
        v73 = a1 + 152;
      v70 = v73 == v71;
LABEL_169:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v70)
          goto LABEL_174;
      }
      else if (!v70)
      {
        goto LABEL_174;
      }
      v77 = *v37;
      *(_BYTE *)v78 = a3;
      v78[1] = (uint64_t *)v67;
      v78[2] = v77;
    }
  }
LABEL_174:
  v79 = *(char ***)(a2 + 88);
  if (v79 && *v79)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
    std::string::basic_string[abi:ne180100]<0>(&v93, *v79);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (HIDWORD(v80))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, *v79);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v81 = a1;
        if (__p.__r_.__value_.__l.__size_ < 8)
          goto LABEL_188;
        v38 = (std::string::value_type *)(__p.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        v81 = a1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 8)
          goto LABEL_188;
      }
      if (*v38 == 48)
      {
        v82 = 0;
        goto LABEL_201;
      }
LABEL_188:
      v83 = v81 + 152;
      v84 = *(_QWORD *)(v81 + 152);
      if (!v84)
        goto LABEL_199;
      v85 = v81 + 152;
      do
      {
        v86 = *(_DWORD *)(v84 + 32);
        v87 = v86 >= v80;
        if (v86 >= v80)
          v88 = (uint64_t *)v84;
        else
          v88 = (uint64_t *)(v84 + 8);
        if (v87)
          v85 = v84;
        v84 = *v88;
      }
      while (*v88);
      if (v85 == v83 || *(_DWORD *)(v85 + 32) > v80)
LABEL_199:
        v85 = v83;
      v82 = v85 == v83;
LABEL_201:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v82)
          goto LABEL_206;
      }
      else if (!v82)
      {
        goto LABEL_206;
      }
      v89 = *v37;
      *(_BYTE *)v90 = a3;
      v90[1] = (uint64_t *)v79;
      v90[2] = v89;
    }
  }
LABEL_206:
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
}

void sub_18EEA0064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18EEA029C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18EEA0480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EEA0530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EEA06F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_18EEA073C()
{
  JUMPOUT(0x18EEA0728);
}

void sub_18EEA0744()
{
  JUMPOUT(0x18EEA072CLL);
}

void sub_18EEA074C()
{
  JUMPOUT(0x18EEA0730);
}

void sub_18EEA0A0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_18EEA0BCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EEA0D58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18EEA0F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_18EEA121C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18EEA13D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_18EEA14C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void MP4AudioESDS::SetDecoderConfigDescriptor(MP4AudioESDS *this, const DecoderConfigDescr *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  if ((MP4AudioESDS *)((char *)this + 296) != a2)
  {
    v4 = *(_OWORD *)a2;
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)((char *)this + 324) = *(_OWORD *)((char *)a2 + 28);
    *(_OWORD *)((char *)this + 296) = v4;
    *(_OWORD *)((char *)this + 312) = v5;
    *((_DWORD *)this + 85) = *((_DWORD *)a2 + 11);
    v6 = *((_QWORD *)a2 + 6);
    *((_DWORD *)this + 88) = *((_DWORD *)a2 + 14);
    *((_QWORD *)this + 43) = v6;
    *((_DWORD *)this + 89) = *((_DWORD *)a2 + 15);
    v7 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 47) = *((_QWORD *)a2 + 10);
    *(_OWORD *)((char *)this + 360) = v7;
    *((_QWORD *)this + 48) = *((_QWORD *)a2 + 11);
    *((_DWORD *)this + 98) = *((_DWORD *)a2 + 24);
    memcpy((char *)this + 396, (char *)a2 + 100, 0x440uLL);
    v8 = *((_QWORD *)a2 + 149);
    v9 = *((_QWORD *)a2 + 150);
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *((_QWORD *)this + 186) = v8;
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 187);
    *((_QWORD *)this + 187) = v9;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = *((_QWORD *)a2 + 151);
    v16 = *((_QWORD *)a2 + 152);
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *((_QWORD *)this + 188) = v15;
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 189);
    *((_QWORD *)this + 189) = v16;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

uint64_t std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *CADeprecated::CAAutoFree<AudioFormatListItem>::CAAutoFree(_QWORD *a1, uint64_t a2, int a3)
{
  size_t v5;
  void *v6;
  void *v7;
  void *v8;
  std::bad_alloc *exception;
  std::bad_alloc *v11;

  *a1 = 0;
  v5 = 48 * a2;
  if (a3)
  {
    v6 = malloc_type_malloc(48 * a2, 0x2C8E6D5CuLL);
    v7 = v6;
    if (!a2 || v6)
    {
      bzero(v6, v5);
      goto LABEL_7;
    }
LABEL_8:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
  }
  v8 = malloc_type_malloc(48 * a2, 0x7C51E058uLL);
  v7 = v8;
  if (a2 && !v8)
    goto LABEL_8;
LABEL_7:
  *a1 = v7;
  return a1;
}

unint64_t caulk::numeric::exceptional_cast<unsigned int,unsigned long>(unint64_t result)
{
  std::runtime_error *exception;

  if (HIDWORD(result))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "numerical cast overflow: could not retain value in conversion type");
  }
  return result;
}

void sub_18EEA1798(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<ID3FrameInfo>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t AudioFormatEncryptedFormatTranslator::DecryptFormatID(uint64_t result, int *a2)
{
  uint64_t v2;
  int v3;

  v2 = 1633772320;
  *a2 = 1969977198;
  if ((int)result > 1902211170)
  {
    if ((int)result > 2053202274)
    {
      if ((int)result > 2053202799)
      {
        if ((int)result <= 2053464882)
        {
          if ((_DWORD)result != 2053202800)
          {
            if ((_DWORD)result != 2053319475)
              return result;
            v3 = 2053467747;
            goto LABEL_47;
          }
          v2 = 1633772400;
LABEL_63:
          v3 = 2053467747;
          goto LABEL_64;
        }
        if ((_DWORD)result == 2053464883)
        {
          v2 = 1700998451;
          goto LABEL_63;
        }
        if ((_DWORD)result != 2053923171)
          return result;
        v3 = 2053467747;
LABEL_57:
        v2 = 1634492771;
        goto LABEL_64;
      }
      if ((_DWORD)result == 2053202275)
        goto LABEL_63;
      if ((_DWORD)result != 2053202739)
      {
        if ((_DWORD)result != 2053202792)
          return result;
        v2 = 1633772392;
        goto LABEL_63;
      }
      v3 = 2053467747;
LABEL_59:
      v2 = 1633889587;
      goto LABEL_64;
    }
    if ((int)result <= 1902537826)
    {
      switch((_DWORD)result)
      {
        case 0x71617063:
          v2 = 1634754915;
          break;
        case 0x71632B33:
          v3 = 1667392371;
LABEL_47:
          v2 = 1700997939;
LABEL_64:
          *a2 = v3;
          return v2;
        case 0x71656333:
          v2 = 1700998451;
          break;
        default:
          return result;
      }
      goto LABEL_61;
    }
    if ((_DWORD)result == 1902537827)
    {
      v2 = 1718378851;
      goto LABEL_61;
    }
    if ((_DWORD)result == 1902928227)
    {
      v3 = 1667392371;
      goto LABEL_57;
    }
    if ((_DWORD)result != 1903522657)
      return result;
    v3 = 1667392371;
LABEL_50:
    v2 = 1970495843;
    goto LABEL_64;
  }
  if ((int)result <= 1885692722)
  {
    if ((int)result > 1885430639)
    {
      switch((_DWORD)result)
      {
        case 0x70616370:
          v2 = 1633772400;
          break;
        case 0x70617063:
          v2 = 1634754915;
          break;
        case 0x70632B33:
          v3 = 1885695587;
          goto LABEL_47;
        default:
          return result;
      }
    }
    else if ((_DWORD)result != 1885430115)
    {
      if ((_DWORD)result == 1885430579)
      {
        v3 = 1885695587;
        goto LABEL_59;
      }
      if ((_DWORD)result != 1885430632)
        return result;
      v2 = 1633772392;
    }
LABEL_54:
    v3 = 1885695587;
    goto LABEL_64;
  }
  if ((int)result > 1902207794)
  {
    switch((_DWORD)result)
    {
      case 0x71616333:
        v3 = 1667392371;
        goto LABEL_59;
      case 0x71616368:
        v2 = 1633772392;
        break;
      case 0x71616370:
        v2 = 1633772400;
        break;
      default:
        return result;
    }
LABEL_61:
    v3 = 1667392371;
    goto LABEL_64;
  }
  switch((_DWORD)result)
  {
    case 0x70656333:
      v2 = 1700998451;
      goto LABEL_54;
    case 0x70757361:
      v3 = 1885695587;
      goto LABEL_50;
    case 0x71616163:
      goto LABEL_61;
  }
  return result;
}

uint64_t AudioFormatEncryptedFormatTranslator::EncryptFormatInFlavor(signed int a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  NSObject *v8;
  _BYTE v9[16];
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 == 1667392371)
  {
    result = 1902207331;
    if (a1 > 1634754914)
    {
      if (a1 <= 1700998450)
      {
        if (a1 == 1634754915)
          return (result + 3840);
        if (a1 == 1700997939)
          return 1902324531;
      }
      else
      {
        switch(a1)
        {
          case 1700998451:
            return 1902469939;
          case 1718378851:
            return 1902537827;
          case 1970495843:
            return 1903522657;
        }
      }
    }
    else if (a1 <= 1633772399)
    {
      if (a1 == 1633772320)
        return result;
      if (a1 == 1633772392)
        return (result + 517);
    }
    else
    {
      switch(a1)
      {
        case 1633772400:
          return (result + 525);
        case 1633889587:
          return (result + 464);
        case 1634492771:
          return 1902928227;
      }
    }
    v8 = CADefaultLog();
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    CAX4CCString::CAX4CCString((CAX4CCString *)v9, a1);
    *(_DWORD *)buf = 136315650;
    v11 = "AudioFormatEncryptedFormatTranslator.h";
    v12 = 1024;
    v13 = 222;
    v14 = 2080;
    v15 = v9;
    v5 = "%25s:%-5d Unknown format ID: %s";
    goto LABEL_62;
  }
  if (a2 != 2053467747)
  {
    if (a2 != 1885695587)
    {
      v4 = CADefaultLog();
      result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)buf = 136315394;
      v11 = "AudioFormatEncryptedFormatTranslator.h";
      v12 = 1024;
      v13 = 229;
      v5 = "%25s:%-5d Invalid encryption flavor";
      v6 = v4;
      v7 = 18;
      goto LABEL_63;
    }
    result = 1885430115;
    if (a1 <= 1634754914)
    {
      if (a1 <= 1633772399)
      {
        if (a1 == 1633772320)
          return result;
        if (a1 != 1633772392)
          goto LABEL_56;
        return (result + 517);
      }
      if (a1 != 1633772400)
      {
        if (a1 != 1633889587)
        {
LABEL_56:
          v8 = CADefaultLog();
          result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
          if (!(_DWORD)result)
            return result;
          CAX4CCString::CAX4CCString((CAX4CCString *)v9, a1);
          *(_DWORD *)buf = 136315650;
          v11 = "AudioFormatEncryptedFormatTranslator.h";
          v12 = 1024;
          v13 = 191;
          v14 = 2080;
          v15 = v9;
          v5 = "%25s:%-5d Unknown format ID: %s";
          goto LABEL_62;
        }
        return (result + 464);
      }
      return (result + 525);
    }
    if (a1 > 1700998450)
    {
      if (a1 == 1700998451)
        return 1885692723;
      if (a1 == 1970495843)
        return 1886745441;
      goto LABEL_56;
    }
    if (a1 != 1634754915)
    {
      if (a1 == 1700997939)
        return 1885547315;
      goto LABEL_56;
    }
    return (result + 3840);
  }
  result = 2053202275;
  if (a1 <= 1633889586)
  {
    switch(a1)
    {
      case 1633772320:
        return result;
      case 1633772392:
        return (result + 517);
      case 1633772400:
        return (result + 525);
    }
  }
  else if (a1 > 1700997938)
  {
    if (a1 == 1700997939)
      return 2053319475;
    if (a1 == 1700998451)
      return 2053464883;
  }
  else
  {
    if (a1 == 1633889587)
      return (result + 464);
    if (a1 == 1634492771)
      return 2053923171;
  }
  v8 = CADefaultLog();
  result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (!(_DWORD)result)
    return result;
  CAX4CCString::CAX4CCString((CAX4CCString *)v9, a1);
  *(_DWORD *)buf = 136315650;
  v11 = "AudioFormatEncryptedFormatTranslator.h";
  v12 = 1024;
  v13 = 204;
  v14 = 2080;
  v15 = v9;
  v5 = "%25s:%-5d Unknown format ID: %s";
LABEL_62:
  v6 = v8;
  v7 = 28;
LABEL_63:
  _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_ERROR, v5, buf, v7);
  return 0;
}

void CAX4CCString::CAX4CCString(CAX4CCString *this, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v4 = bswap32(a2);
  *(_DWORD *)((char *)this + 1) = v4;
  v5 = MEMORY[0x1E0C80978];
  if ((v4 & 0x80) != 0)
  {
    if (!__maskrune((char)v4, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * (char)v4 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  v6 = *((char *)this + 2);
  if ((v6 & 0x80000000) != 0)
  {
    if (!__maskrune(v6, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  v7 = *((char *)this + 3);
  if ((v7 & 0x80000000) != 0)
  {
    if (!__maskrune(v7, 0x40000uLL))
      goto LABEL_17;
LABEL_13:
    v8 = *((char *)this + 4);
    if ((v8 & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x40000uLL))
        goto LABEL_17;
    }
    else if ((*(_DWORD *)(v5 + 4 * v8 + 60) & 0x40000) == 0)
    {
      goto LABEL_17;
    }
    *(_WORD *)((char *)this + 5) = 39;
    *(_BYTE *)this = 39;
    return;
  }
  if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x40000) != 0)
    goto LABEL_13;
LABEL_17:
  if (a2 + 199999 > 0x61A7E)
    snprintf((char *)this, 0x10uLL, "0x%x");
  else
    snprintf((char *)this, 0x10uLL, "%d");
}

std::runtime_error *std::overflow_error::overflow_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5030] + 16);
  return result;
}

void IPCAUClient::RemoteAUServer::~RemoteAUServer(IPCAUClient::RemoteAUServer *this)
{
  IPCAUClient::RemoteAUServer::~RemoteAUServer(this);
  JUMPOUT(0x193FFE460);
}

{
  NSObject *v2;
  const void *v3;
  void *v4;
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  IPCAUClient::RemoteAUServer *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E2909D90;
  if (kInterAppAudioScope)
  {
    v2 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_7;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v6 = 136315650;
    v7 = "IPCAUClient.cpp";
    v8 = 1024;
    v9 = 392;
    v10 = 2048;
    v11 = this;
    _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d destruct %p", (uint8_t *)&v6, 0x1Cu);
  }
LABEL_7:
  v3 = (const void *)*((_QWORD *)this + 21);
  if (v3)
    CFRelease(v3);
  v4 = (void *)*((_QWORD *)this + 25);
  if (v4)
  {
    *((_QWORD *)this + 26) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 22);
  if (v5)
  {
    *((_QWORD *)this + 23) = v5;
    operator delete(v5);
  }
  CADeprecated::XRemoteMachServer::~XRemoteMachServer(this);
}

uint64_t CADeprecated::XRemoteMachServer::GetDebugName(CADeprecated::XRemoteMachServer *this)
{
  return *((_QWORD *)this + 4);
}

void IPCAUClient::RemoteAUServer::ServerPortDied(IPCAUClient::RemoteAUServer *this)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  IPCAUClient::RemoteAUServer *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = CADeprecated::TSingleton<IPCAUClient>::instance();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  if (kInterAppAudioScope)
  {
    v4 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_7;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v7 = 136315650;
    v8 = "IPCAUClient.cpp";
    v9 = 1024;
    v10 = 400;
    v11 = 2048;
    v12 = this;
    _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p", (uint8_t *)&v7, 0x1Cu);
  }
LABEL_7:
  v6 = *((_QWORD *)this + 22);
  v5 = *((_QWORD *)this + 23);
  while (v6 != v5)
  {
    RemoteAUPropertyListeners::Notify(*(RemoteAUPropertyListeners **)(*(_QWORD *)v6 + 104), *(OpaqueAudioComponentInstance **)(*(_QWORD *)v6 + 112), *(_QWORD *)(*(_QWORD *)v6 + 72), 101, 0, 0);
    v6 += 8;
  }
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_18EEA234C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t CADeprecated::TSingleton<IPCAUClient>::instance()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&CADeprecated::TSingleton<IPCAUClient>::sOnce);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&CADeprecated::TSingleton<IPCAUClient>::sOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<IPCAUClient>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<IPCAUClient>::sInstance;
}

void RemoteAUPropertyListeners::Notify(RemoteAUPropertyListeners *this, OpaqueAudioComponentInstance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v6;
  unint64_t v7;
  char *v13;
  char *v14;

  v6 = a2 - this;
  if (a2 != this)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(0xAAAAAAAAAAAAAAABLL * (v6 >> 3));
    memmove(v13, this, v6);
    if (8 * (v6 >> 3))
    {
      v14 = v13;
      do
      {
        if (*(_DWORD *)v14 == (_DWORD)a4)
          (*((void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))v14 + 1))(*((_QWORD *)v14 + 2), a3, a4, a5, a6);
        v14 += 24;
      }
      while (v14 != &v13[24 * v7]);
    }
    if (v13)
      operator delete(v13);
  }
}

void sub_18EEA24D0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<IPCAUClient>::instance(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  _QWORD *v1;
  NSObject *v2;
  int MachPort;
  NSObject *v4;
  NSObject *global_queue;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int64x2_t v19;
  _QWORD *v20;
  uint64_t v21;
  AudioToolboxSoftLink *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _BYTE buf[24];
  char *v26;
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  MEMORY[0x193FFD830](v0, "IPCAUClient");
  MEMORY[0x193FFD818](v0 + 88, "");
  *(_QWORD *)(v0 + 232) = &off_1E2909DF8;
  *(_DWORD *)(v0 + 224) = 0;
  *(_QWORD *)(v0 + 240) = "IPCAUClient";
  *(_QWORD *)(v0 + 248) = IPCAUCallbackReceiver_IPCAudioUnitCallbacks_subsystem;
  *(_QWORD *)(v0 + 256) = IPCAudioUnitCallbacks_server;
  *(_QWORD *)(v0 + 264) = 40;
  v1 = operator new(0x20uLL);
  v1[1] = 0;
  v1[2] = 0;
  *v1 = &off_1E2917590;
  *((_DWORD *)v1 + 6) = 0;
  *(_QWORD *)(v0 + 272) = v1 + 3;
  *(_QWORD *)(v0 + 280) = v1;
  *(_QWORD *)(v0 + 288) = 0;
  *(_QWORD *)(v0 + 296) = 0;
  *(_BYTE *)(v0 + 304) = 0;
  *(_QWORD *)(v0 + 328) = 0;
  *(_QWORD *)(v0 + 336) = 0;
  *(_QWORD *)(v0 + 312) = v0 + 320;
  *(_QWORD *)(v0 + 320) = 0;
  *(_QWORD *)(v0 + 344) = 0;
  *(_QWORD *)(v0 + 352) = 0;
  if (initInterAppAudioLogging::once != -1)
    dispatch_once(&initInterAppAudioLogging::once, &__block_literal_global_10577);
  if (kInterAppAudioScope)
  {
    v2 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 40;
    _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUClient: constructing", buf, 0x12u);
  }
LABEL_9:
  MachPort = CADeprecated::XMachReceivePort::CreateMachPort(*(CADeprecated::XMachReceivePort **)(v0 + 272));
  if (!MachPort)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    v6 = global_queue;
    if (global_queue)
      dispatch_retain(global_queue);
    *(_QWORD *)buf = v6;
    CADeprecated::XBasicMIGServer::SetServerDispatchQueue();
    if (*(_QWORD *)buf)
      dispatch_release(*(dispatch_object_t *)buf);
    v7 = (_QWORD *)CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
    v8 = v7;
    v23[0] = &off_1E2913950;
    v23[1] = v0;
    v24 = v23;
    v9 = v7[23];
    v10 = v7[22];
    if (v10 >= v9)
    {
      v12 = v7[21];
      v13 = (uint64_t)(v10 - v12) >> 5;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 59)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v9 - v12) >> 4 > v14)
        v14 = (uint64_t)(v9 - v12) >> 4;
      if (v9 - v12 >= 0x7FFFFFFFFFFFFFE0)
        v15 = 0x7FFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      v27 = v7 + 23;
      if (v15)
      {
        if (v15 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = (char *)operator new(32 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[32 * v13];
      *(_QWORD *)buf = v16;
      *(_QWORD *)&buf[8] = v17;
      v18 = &v16[32 * v15];
      *(_QWORD *)&buf[16] = v17;
      v26 = v18;
      *((_QWORD *)v17 + 3) = v17;
      std::__function::__func<IPCAUClient::IPCAUClient(void)::$_0,std::allocator<IPCAUClient::IPCAUClient(void)::$_0>,void ()(void)>::__clone((uint64_t)v23, v17);
      v11 = v17 + 32;
      *(_QWORD *)&buf[16] = v17 + 32;
      if (v10 == v12)
      {
        v19 = vdupq_n_s64(v10);
      }
      else
      {
        do
        {
          v17 -= 32;
          v10 -= 32;
          std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v17, v10);
        }
        while (v10 != v12);
        v19 = *(int64x2_t *)(v8 + 21);
        v9 = v8[23];
        v11 = *(_QWORD **)&buf[16];
        v18 = v26;
      }
      v8[21] = v17;
      v8[22] = v11;
      *(int64x2_t *)&buf[8] = v19;
      v8[23] = v18;
      v26 = (char *)v9;
      *(_QWORD *)buf = v19.i64[0];
      std::__split_buffer<std::function<void ()(void)>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *(_QWORD *)(v10 + 24) = v10;
      (*(void (**)(_QWORD *, unint64_t))(*v24 + 24))(v24, v10);
      v11 = (_QWORD *)(v10 + 32);
      v8[22] = v10 + 32;
    }
    v8[22] = v11;
    v20 = v24;
    if (v24 == v23)
    {
      v21 = 4;
      v20 = v23;
    }
    else
    {
      if (!v24)
      {
LABEL_42:
        IPCAUClient::ConnectToRegistrationServer((unsigned int **)v0);
        AudioToolboxSoftLink::instance(v22);
        AudioToolboxSoftLink::instance(void)::global(v0, IPCAUClient::InterruptionListener);
        goto LABEL_43;
      }
      v21 = 5;
    }
    (*(void (**)(void))(*v20 + 8 * v21))();
    goto LABEL_42;
  }
  if (kInterAppAudioScope)
  {
    v4 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_43;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 46;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = MachPort;
    _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d IPCAUClient: can't create callback port (%d)", buf, 0x18u);
  }
LABEL_43:
  __dmb(0xBu);
  CADeprecated::TSingleton<IPCAUClient>::sInstance = v0;
}

void sub_18EEA295C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, dispatch_object_t object)
{
  CADeprecated::CAMutex *v15;
  uint64_t v16;
  CADeprecated::XBasicMIGServer *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD **v20;
  uint64_t v21;
  char *v23;
  uint64_t v24;
  void *v25;

  v21 = v19;
  *(_QWORD *)(v18 + 176) = v21;
  v23 = a14;
  if (a14 == &a11)
  {
    v24 = 4;
    v23 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = (void *)*((_QWORD *)v15 + 42);
  if (v25)
  {
    *((_QWORD *)v15 + 43) = v25;
    operator delete(v25);
  }
  CADeprecated::XBasicMIGServer::~XBasicMIGServer(v17);
  MEMORY[0x193FFD824](v16);
  CADeprecated::CAMutex::~CAMutex(v15);
  MEMORY[0x193FFE460](v15, 0x10F0C40230246F9);
  _Unwind_Resume(a1);
}

uint64_t CADeprecated::TSingleton<AURegistrationServerConnection>::instance()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&CADeprecated::TSingleton<AURegistrationServerConnection>::sOnce);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&CADeprecated::TSingleton<AURegistrationServerConnection>::sOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AURegistrationServerConnection>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<AURegistrationServerConnection>::sInstance;
}

void IPCAUClient::ConnectToRegistrationServer(unsigned int **this)
{
  int v2;
  __CFBundle *MainBundle;
  __CFBundle *v4;
  CFTypeRef ValueForInfoDictionaryKey;
  mach_port_name_t v6;
  unsigned int v7;
  int Length;
  const UInt8 *BytePtr;
  NSObject *v10;
  const char *v11;
  mach_port_name_t reply_port;
  mach_msg_return_t v13;
  mach_port_name_t v14;
  mach_port_name_t v15;
  NSObject *v16;
  CFDataRef theData;
  CFTypeRef v18;
  CFStringRef Identifier;
  uint8_t buf[4];
  mach_port_name_t rcv_name[9];
  const UInt8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = (*((uint64_t (**)(unsigned int **))*this + 2))(this);
  MainBundle = CFBundleGetMainBundle();
  v4 = MainBundle;
  if (!MainBundle)
  {
    v18 = 0;
    Identifier = 0;
    goto LABEL_8;
  }
  Identifier = CFBundleGetIdentifier(MainBundle);
  ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(v4, (CFStringRef)*MEMORY[0x1E0C9AAC8]);
  v18 = ValueForInfoDictionaryKey;
  if (!Identifier)
  {
LABEL_8:
    if (kInterAppAudioScope)
    {
      v10 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        goto LABEL_51;
    }
    else
    {
      v10 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_51;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)rcv_name = "IPCAUClient.cpp";
    LOWORD(rcv_name[2]) = 1024;
    *(mach_port_name_t *)((char *)&rcv_name[2] + 2) = 125;
    v11 = "%25s:%-5d IPCAUClient: main bundle ID is nil";
LABEL_14:
    _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
    goto LABEL_51;
  }
  if (ValueForInfoDictionaryKey)
  {
    CASerializer::CASerializer((CASerializer *)&theData, 0);
    operator<<();
    operator<<();
    v6 = *(_DWORD *)(CADeprecated::TSingleton<AURegistrationServerConnection>::instance() + 48);
    v7 = atomic_load(this[34]);
    Length = (int)theData;
    if (theData)
    {
      BytePtr = CFDataGetBytePtr(theData);
      Length = (int)theData;
      if (theData)
        Length = CFDataGetLength(theData);
    }
    else
    {
      BytePtr = 0;
    }
    memset(rcv_name, 0, 32);
    rcv_name[5] = 2;
    rcv_name[6] = v7;
    rcv_name[8] = 1245184;
    v22 = BytePtr;
    v23 = 16777472;
    v24 = Length;
    v25 = *MEMORY[0x1E0C804E8];
    v26 = Length;
    reply_port = mig_get_reply_port();
    rcv_name[1] = v6;
    rcv_name[2] = reply_port;
    *(_DWORD *)buf = -2147478253;
    *(_QWORD *)&rcv_name[3] = 0x15F9600000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set((mach_msg_header_t *)buf);
      reply_port = rcv_name[2];
    }
    v13 = mach_msg((mach_msg_header_t *)buf, 275, 0x44u, 0x2Cu, reply_port, gMediaServerTimeout, 0);
    v14 = v13;
    if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(rcv_name[2]);
    }
    else
    {
      if (!v13)
      {
        if (rcv_name[4] == 71)
        {
          v15 = -308;
        }
        else if (rcv_name[4] == 90106)
        {
          v15 = -300;
          if ((*(_DWORD *)buf & 0x80000000) == 0 && rcv_name[0] == 36 && !rcv_name[1])
          {
            v15 = rcv_name[7];
            if (!rcv_name[7])
              goto LABEL_40;
          }
        }
        else
        {
          v15 = -301;
        }
LABEL_43:
        mach_msg_destroy((mach_msg_header_t *)buf);
        v14 = v15;
LABEL_44:
        if (kInterAppAudioScope)
        {
          v16 = *(NSObject **)kInterAppAudioScope;
          if (!*(_QWORD *)kInterAppAudioScope)
            goto LABEL_50;
        }
        else
        {
          v16 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)rcv_name = "IPCAUClient.cpp";
          LOWORD(rcv_name[2]) = 1024;
          *(mach_port_name_t *)((char *)&rcv_name[2] + 2) = 139;
          HIWORD(rcv_name[3]) = 1024;
          rcv_name[4] = v14;
          _os_log_impl(&dword_18EE07000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d IPCAUClient: can't connect to server (%d)", buf, 0x18u);
        }
        goto LABEL_50;
      }
      mig_dealloc_reply_port(rcv_name[2]);
    }
    v15 = 268435460;
    if (v14 == 268435460)
    {
      if ((*(_WORD *)buf & 0x1F00) == 0x1100)
        mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name[2]);
      goto LABEL_43;
    }
    if (v14)
      goto LABEL_44;
LABEL_40:
    IPCAUClient::RefreshRemoteAUList((IPCAUClient *)this);
LABEL_50:
    MEMORY[0x193FFD878](&theData);
    goto LABEL_51;
  }
  if (!kInterAppAudioScope)
  {
    v10 = MEMORY[0x1E0C81028];
    goto LABEL_33;
  }
  v10 = *(NSObject **)kInterAppAudioScope;
  if (*(_QWORD *)kInterAppAudioScope)
  {
LABEL_33:
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_51;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)rcv_name = "IPCAUClient.cpp";
    LOWORD(rcv_name[2]) = 1024;
    *(mach_port_name_t *)((char *)&rcv_name[2] + 2) = 129;
    v11 = "%25s:%-5d IPCAUClient: bundle display name is nil";
    goto LABEL_14;
  }
LABEL_51:
  if (v2)
    (*((void (**)(unsigned int **))*this + 3))(this);
}

void sub_18EEA2EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  int v11;

  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  _Unwind_Resume(exception_object);
}

void AudioToolboxSoftLink::instance(AudioToolboxSoftLink *this)
{
  unsigned __int8 v1;
  AudioToolboxSoftLink *v2;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      AudioToolboxSoftLink::AudioToolboxSoftLink(v2);
    }
  }
}

void sub_18EEA2F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void IPCAUClient::InterruptionListener(IPCAUClient *this, void *a2, unsigned int a3, _DWORD *a4, const void *a5)
{
  int v6;
  IPCAUClient *v7;
  IPCAUClient::AUInstance *v8;
  IPCAUClient *v9;
  IPCAUClient *v10;
  BOOL v11;

  if (*a4 == 1)
  {
    v6 = (*(uint64_t (**)(IPCAUClient *, void *))(*(_QWORD *)this + 16))(this, a2);
    v7 = (IPCAUClient *)*((_QWORD *)this + 39);
    if (v7 != (IPCAUClient *)((char *)this + 320))
    {
      do
      {
        v8 = (IPCAUClient::AUInstance *)*((_QWORD *)v7 + 5);
        if (*((_BYTE *)v8 + 84))
          IPCAUClient::AUInstance::Uninitialize(v8);
        v9 = (IPCAUClient *)*((_QWORD *)v7 + 1);
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = *(IPCAUClient **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (IPCAUClient *)*((_QWORD *)v7 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v7;
            v7 = v10;
          }
          while (!v11);
        }
        v7 = v10;
      }
      while (v10 != (IPCAUClient *)((char *)this + 320));
    }
    if (v6)
      (*(void (**)(IPCAUClient *))(*(_QWORD *)this + 24))(this);
  }
}

void sub_18EEA3020(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v2;

  if ((v2 & 1) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void CADeprecated::XBasicMIGServer::~XBasicMIGServer(CADeprecated::XBasicMIGServer *this)
{
  const void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E2909DF8;
  v2 = (const void *)*((_QWORD *)this + 8);
  if (v2)
    CFRelease(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  CADeprecated::XBasicMIGServer::~XBasicMIGServer(this);
  JUMPOUT(0x193FFE460);
}

void IPCAUClient::AUInstance::Uninitialize(IPCAUClient::AUInstance *this)
{
  uint64_t v2;
  mach_msg_timeout_t v3;
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 84))
  {
    *((_BYTE *)this + 84) = 0;
    *((_QWORD *)this + 59) = 0;
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], *((_DWORD *)this + 6));
    *((_DWORD *)this + 6) = 0;
    v2 = *((_QWORD *)this + 2);
    if (*(_DWORD *)(v2 + 48))
    {
      v11 = 0;
      IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v9, v2, &v11);
      if (v11)
      {
LABEL_16:
        IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v9);
        return;
      }
      if (v10)
        v3 = 0x7FFFFFFF;
      else
        v3 = 10000;
      v4 = IPCAUClient_Uninitialize(*(_DWORD *)(*((_QWORD *)this + 2) + 48), v3, *((_DWORD *)this + 20));
      v5 = v4;
      if (v4 == 268435459 || v4 == -308)
      {
        if (kInterAppAudioScope)
        {
          v6 = *(NSObject **)kInterAppAudioScope;
          if (!*(_QWORD *)kInterAppAudioScope)
            goto LABEL_15;
        }
        else
        {
          v6 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          v13 = "IPCAUClient.cpp";
          v14 = 1024;
          v15 = 433;
          v16 = 1024;
          v17 = v5;
          v18 = 1024;
          v19 = -66749;
          _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", buf, 0x1Eu);
        }
      }
LABEL_15:
      v7 = *((_QWORD *)this + 2);
      v8 = CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
      IPCAURegClient_SetProcessWakeState(*(_DWORD *)(v8 + 48), *(_DWORD *)(v7 + 52), 3, buf);
      goto LABEL_16;
    }
  }
}

void sub_18EEA326C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)va);
  _Unwind_Resume(a1);
}

uint64_t *IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v11;

  *a1 = a2;
  v5 = CADeprecated::TSingleton<IPCAUClient>::instance();
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v7 = *a1;
  *((_BYTE *)a1 + 8) = 0;
  v8 = CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
  v11 = 0;
  v9 = IPCAURegClient_SetProcessWakeState(*(_DWORD *)(v8 + 48), *(_DWORD *)(v7 + 52), 0, &v11);
  *((_BYTE *)a1 + 8) = v11 != 0;
  *a3 = v9;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return a1;
}

void sub_18EEA3330(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker(IPCAUClient::RemoteAUServer::TransientWaker *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = CADeprecated::TSingleton<IPCAUClient>::instance();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v4 = *(_QWORD *)this;
  v5 = CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
  IPCAURegClient_SetProcessWakeState(*(_DWORD *)(v5 + 48), *(_DWORD *)(v4 + 52), 1, &v6);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void AudioToolboxSoftLink::AudioToolboxSoftLink(AudioToolboxSoftLink *this)
{
  void *v1;
  void *v2;

  AudioToolboxSoftLink::instance(void)::global = 0;
  off_1EE165B10 = 0;
  v1 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox", 1);
  if (!v1)
    __assert_rtn("AudioToolboxSoftLink", "AudioToolboxSoftLink.h", 27, "lib != nullptr");
  v2 = v1;
  AudioToolboxSoftLink::instance(void)::global = dlsym(v1, "AudioSessionAddInterruptionListenerOnPrimarySession");
  if (!AudioToolboxSoftLink::instance(void)::global || (off_1EE165B10 = dlsym(v2, "AudioSessionCheckActive")) == 0)
    __assert_rtn("init", "DLSymbol.h", 23, "mImpl != nullptr");
}

void IPCAUClient::RefreshRemoteAUList(IPCAUClient *this)
{
  int v1;
  int v2;
  uint64_t (*v3)(_QWORD);
  unsigned int v4;
  mach_port_name_t reply_port;
  mach_msg_return_t v6;
  unsigned int v7;
  const char **v9;
  const void *v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  void *begin;
  void *v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t *v31;
  uint64_t *v32;
  int v33;
  const void *v34;
  uint64_t v35;
  const void *v36;
  int v37;
  std::__shared_weak_count_vtbl *v38;
  AudioComponentVector *p_buf;
  uint64_t v40;
  void (__cdecl *v41)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v45;
  unint64_t *p_shared_weak_owners;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::recursive_mutex *v57;
  int v59;
  std::__shared_weak_count *v60;
  std::recursive_mutex *v61[2];
  uint64_t (**v62)();
  void *__p;
  uint64_t *v64;
  uint64_t *v65;
  AudioComponentVector v66;
  CFTypeRef v67;
  CFTypeRef v68;
  __int128 v69;
  AudioComponentVector cf;
  _QWORD msg[8];
  AudioComponentVector buf;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v1 = 268435460;
  v59 = (*(uint64_t (**)(IPCAUClient *))(*(_QWORD *)this + 16))(this);
  v2 = 5;
  v3 = MEMORY[0x1E0C85B60];
  while (1)
  {
    v4 = *(_DWORD *)(CADeprecated::TSingleton<AURegistrationServerConnection>::instance() + 48);
    memset((char *)&msg[4] + 4, 0, 28);
    memset((char *)msg + 4, 0, 32);
    reply_port = mig_get_reply_port();
    msg[1] = __PAIR64__(reply_port, v4);
    LODWORD(msg[0]) = 5395;
    msg[2] = 0x15F9700000000;
    if (v3)
    {
      voucher_mach_msg_set((mach_msg_header_t *)msg);
      reply_port = HIDWORD(msg[1]);
    }
    v6 = mach_msg((mach_msg_header_t *)msg, 275, 0x18u, 0x40u, reply_port, gMediaServerTimeout, 0);
    v7 = v6;
    if ((v6 - 268435458) <= 0xE && ((1 << (v6 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(HIDWORD(msg[1]));
      goto LABEL_19;
    }
    if (!v6)
    {
      if (HIDWORD(msg[2]) == 71)
      {
        v7 = -308;
      }
      else
      {
        if (HIDWORD(msg[2]) == 90107)
        {
          if ((msg[0] & 0x80000000) == 0)
          {
            if (HIDWORD(msg[0]) == 36 && LODWORD(msg[4]))
            {
              if (LODWORD(msg[1]))
                v7 = -300;
              else
                v7 = msg[4];
              goto LABEL_28;
            }
            goto LABEL_27;
          }
          v7 = -300;
          if (LODWORD(msg[3]) != 1 || *(_QWORD *)((char *)msg + 4) != 56 || HIBYTE(msg[4]) != 1)
            goto LABEL_28;
          v7 = msg[5];
          if (LODWORD(msg[5]) != HIDWORD(msg[6]))
          {
LABEL_27:
            v7 = -300;
            goto LABEL_28;
          }
          v10 = *(const void **)((char *)&msg[3] + 4);
LABEL_34:
          CADeserializer::CADeserializer((CADeserializer *)msg, v10);
          v64 = 0;
          v65 = 0;
          v62 = &off_1E29049B0;
          __p = 0;
          LODWORD(v69) = 0;
          CADeserializer::Read((CADeserializer *)msg, &v69);
          if ((_DWORD)v69)
          {
            v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v69);
            __p = &v11[(unint64_t)v64 & 0xFFFFFFFFFFFFFFF8];
            v64 = (uint64_t *)__p;
            v65 = (uint64_t *)&v11[8 * v12];
          }
          if ((_DWORD)v69)
          {
            v13 = 0;
            do
            {
              LODWORD(v61[0]) = 0;
              cf.__begin_ = 0;
              v66.__begin_ = 0;
              LODWORD(v68) = 0;
              CADeserializer::Read((CADeserializer *)msg, v61);
              operator>>();
              CADeserializer::Read((CADeserializer *)msg, &buf);
              CADeserializer::Read((CADeserializer *)msg, (char *)&buf.__begin_ + 4);
              CADeserializer::Read((CADeserializer *)msg, &buf.__end_);
              CADeserializer::Read((CADeserializer *)msg, (char *)&buf.__end_ + 4);
              CADeserializer::Read((CADeserializer *)msg, &buf.__end_cap_);
              operator>>();
              CADeserializer::Read((CADeserializer *)msg, &v68);
              v14 = operator new();
              v15 = (int)v61[0];
              begin = v66.__begin_;
              v17 = cf.__begin_;
              v18 = (int)v68;
              *(_QWORD *)v14 = &off_1E29010F0;
              *(_DWORD *)(v14 + 8) = v15;
              *(_QWORD *)(v14 + 16) = begin;
              *(_OWORD *)(v14 + 24) = *(_OWORD *)&buf.__begin_;
              *(_DWORD *)(v14 + 40) = buf.__end_cap_.__value_;
              *(_QWORD *)(v14 + 48) = v17;
              *(_DWORD *)(v14 + 56) = v18;
              CFRetain(v17);
              CFRetain(*(CFTypeRef *)(v14 + 16));
              v19 = v64;
              if (v64 >= v65)
              {
                v21 = ((char *)v64 - (_BYTE *)__p) >> 3;
                if ((unint64_t)(v21 + 1) >> 61)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v22 = ((char *)v65 - (_BYTE *)__p) >> 2;
                if (v22 <= v21 + 1)
                  v22 = v21 + 1;
                if ((unint64_t)((char *)v65 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                  v23 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v23 = v22;
                if (v23)
                  v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v23);
                else
                  v24 = 0;
                v25 = (uint64_t *)(v23 + 8 * v21);
                *v25 = v14;
                v20 = v25 + 1;
                v27 = (char *)__p;
                v26 = (char *)v64;
                if (v64 != __p)
                {
                  do
                  {
                    v28 = *((_QWORD *)v26 - 1);
                    v26 -= 8;
                    *--v25 = v28;
                  }
                  while (v26 != v27);
                  v26 = (char *)__p;
                }
                __p = v25;
                v64 = v20;
                v65 = (uint64_t *)(v23 + 8 * v24);
                if (v26)
                  operator delete(v26);
              }
              else
              {
                *v64 = v14;
                v20 = v19 + 1;
              }
              v64 = v20;
              CFRelease(cf.__begin_);
              CFRelease(v66.__begin_);
              ++v13;
            }
            while (v13 < v69);
          }
          mig_deallocate((vm_address_t)v10, v7);
          if (kInterAppAudioScope)
          {
            v29 = *(NSObject **)kInterAppAudioScope;
            if (!*(_QWORD *)kInterAppAudioScope)
              goto LABEL_71;
          }
          else
          {
            v29 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf.__begin_) = 136315650;
            *(void **)((char *)&buf.__begin_ + 4) = "IPCAUClient.cpp";
            WORD2(buf.__end_) = 1024;
            *(_DWORD *)((char *)&buf.__end_ + 6) = 175;
            WORD1(buf.__end_cap_.__value_) = 1024;
            HIDWORD(buf.__end_cap_.__value_) = (unint64_t)((char *)v64 - (_BYTE *)__p) >> 3;
            _os_log_impl(&dword_18EE07000, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d Fetched %d remote AU's", (uint8_t *)&buf, 0x18u);
          }
LABEL_71:
          GlobalComponentPluginMgr((uint64_t *)v61);
          v57 = v61[1];
          memset(&cf, 0, 24);
          cf.mSorted = 1;
          v31 = (uint64_t *)__p;
          v32 = v64;
          if (__p == v64)
          {
LABEL_112:
            AudioComponentVector::subtract(&buf, &cf, (AudioComponentVector *)&v57->__m_.__opaque[40]);
            AudioComponentVector::subtract(&v66, (AudioComponentVector *)&v57->__m_.__opaque[40], &cf);
            AudioComponentMgr_Base::addAndRemoveComponents((char **)v57, &buf, (const AudioComponentVector *)v66.__begin_, (const AudioComponentVector *)v66.__end_);
            if (&v57->__m_.__opaque[40] != (char *)&cf)
              std::vector<std::shared_ptr<APComponent>>::__assign_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>((uint64_t)&v57->__m_.__opaque[40], (uint64_t *)cf.__begin_, (uint64_t *)cf.__end_, ((char *)cf.__end_ - (char *)cf.__begin_) >> 4);
            v57[1].__m_.__opaque[0] = cf.mSorted;
            *(_QWORD *)&v69 = &v66;
            std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
            v66.__begin_ = &buf;
            std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
            buf.__begin_ = &cf;
            std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            if (v61[0])
              std::recursive_mutex::unlock(v61[0]);
            dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_482);
            OwnedPtrVector<PublishedAU *>::~OwnedPtrVector(&v62);
            MEMORY[0x193FFD95C](msg);
            goto LABEL_117;
          }
          while (1)
          {
            v33 = *(_DWORD *)(*v31 + 8);
            if (v33 != getpid())
              break;
LABEL_111:
            if (++v31 == v32)
              goto LABEL_112;
          }
          v34 = *(const void **)(*v31 + 16);
          if (v34)
            CFRetain(*(CFTypeRef *)(*v31 + 16));
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v68, v34);
          v35 = *v31;
          v36 = *(const void **)(*v31 + 48);
          if (v36)
            CFRetain(*(CFTypeRef *)(*v31 + 48));
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v67, v36);
          v37 = *(_DWORD *)(*v31 + 56);
          v38 = (std::__shared_weak_count_vtbl *)operator new();
          buf.__begin_ = &off_1E29135A8;
          buf.__end_ = IPCAUClient::IPCAUFactoryFunction;
          *(_QWORD *)&buf.mSorted = &buf;
          APComponent::APComponent((uint64_t)v38, 2, 69, v35 + 24, 0, &v67, v37, (uint64_t)&buf);
          p_buf = *(AudioComponentVector **)&buf.mSorted;
          if (*(AudioComponentVector **)&buf.mSorted == &buf)
          {
            p_buf = &buf;
            v40 = 4;
          }
          else
          {
            if (!*(_QWORD *)&buf.mSorted)
              goto LABEL_82;
            v40 = 5;
          }
          (*((void (**)(void))p_buf->__begin_ + v40))();
LABEL_82:
          v38->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_1E2907EE8;
          v41 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v68;
          if (v68)
            CFRetain(v68);
          v38[4].~__shared_weak_count = v41;
          *(_QWORD *)&v69 = v38;
          v42 = (std::__shared_weak_count *)operator new();
          v42->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v42->__shared_owners_;
          v42->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917DE0;
          v42->__shared_weak_owners_ = 0;
          v42[1].__vftable = v38;
          *((_QWORD *)&v69 + 1) = v42;
          on_zero_shared = (std::__shared_weak_count *)v38->__on_zero_shared;
          if (on_zero_shared)
          {
            if (on_zero_shared->__shared_owners_ != -1)
            {
LABEL_97:
              v60 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
              *(_OWORD *)&v66.__begin_ = v69;
              v69 = 0uLL;
              AudioComponentVector::add((int64x2_t *)&cf, (__int128 *)&v66);
              if (v60)
              {
                v52 = (unint64_t *)&v60->__shared_owners_;
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              v54 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
              if (*((_QWORD *)&v69 + 1))
              {
                v55 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              if (v67)
                CFRelease(v67);
              if (v68)
                CFRelease(v68);
              goto LABEL_111;
            }
            do
              v45 = __ldxr(p_shared_owners);
            while (__stxr(v45 + 1, p_shared_owners));
            p_shared_weak_owners = (unint64_t *)&v42->__shared_weak_owners_;
            do
              v47 = __ldxr(p_shared_weak_owners);
            while (__stxr(v47 + 1, p_shared_weak_owners));
            v38->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v38;
            v38->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v42;
            std::__shared_weak_count::__release_weak(on_zero_shared);
          }
          else
          {
            do
              v48 = __ldxr(p_shared_owners);
            while (__stxr(v48 + 1, p_shared_owners));
            v49 = (unint64_t *)&v42->__shared_weak_owners_;
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
            v38->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v38;
            v38->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v42;
          }
          do
            v51 = __ldaxr(p_shared_owners);
          while (__stlxr(v51 - 1, p_shared_owners));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
          goto LABEL_97;
        }
        v7 = -301;
      }
LABEL_28:
      mach_msg_destroy((mach_msg_header_t *)msg);
      goto LABEL_29;
    }
    mig_dealloc_reply_port(HIDWORD(msg[1]));
LABEL_19:
    if (v7 == 268435460)
    {
      if ((msg[0] & 0x1F00) == 0x1100)
        mach_port_deallocate(*MEMORY[0x1E0C83DA0], HIDWORD(msg[1]));
      mach_msg_destroy((mach_msg_header_t *)msg);
      goto LABEL_62;
    }
LABEL_29:
    if (v7 != 268435459)
      break;
    sleep(1u);
    v9 = (const char **)CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
    AURegistrationServerConnection::Connect(v9);
    if (!--v2)
    {
      v1 = 268435459;
      goto LABEL_62;
    }
  }
  if (!v7)
  {
    v10 = 0;
    goto LABEL_34;
  }
  v1 = v7;
LABEL_62:
  if (kInterAppAudioScope)
  {
    v30 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_117;
  }
  else
  {
    v30 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    LODWORD(msg[0]) = 136315650;
    *(_QWORD *)((char *)msg + 4) = "IPCAUClient.cpp";
    WORD2(msg[1]) = 1024;
    *(_DWORD *)((char *)&msg[1] + 6) = 165;
    WORD1(msg[2]) = 1024;
    HIDWORD(msg[2]) = v1;
    _os_log_impl(&dword_18EE07000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d IPCAUClient: error fetching list (%d)", (uint8_t *)msg, 0x18u);
  }
LABEL_117:
  if (v59)
    (*(void (**)(IPCAUClient *))(*(_QWORD *)this + 24))(this);
}

void sub_18EEA3E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, std::recursive_mutex *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  a22 = (char *)(v37 - 160);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = &a33;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (a16)
    std::recursive_mutex::unlock(a16);
  OwnedPtrVector<PublishedAU *>::~OwnedPtrVector(&a18);
  MEMORY[0x193FFD95C](&a37);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  _Unwind_Resume(a1);
}

_QWORD *OwnedPtrVector<PublishedAU *>::~OwnedPtrVector(_QWORD *a1)
{
  char *v2;
  char *v3;
  char *v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;

  *a1 = &off_1E29049B0;
  v2 = (char *)a1[1];
  v3 = (char *)a1[2];
  if (v2 != v3)
  {
    v4 = (char *)a1[1];
    do
    {
      if (*(_QWORD *)v4)
        (*(void (**)(_QWORD))(**(_QWORD **)v4 + 8))(*(_QWORD *)v4);
      v4 += 8;
    }
    while (v4 != v3);
    v5 = (_BYTE *)a1[2];
    v6 = v5 - v3;
    if (v5 != v3)
      memmove(v2, v3, v5 - v3);
    v7 = (char *)a1[1];
    a1[2] = &v2[v6];
    v2 = v7;
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void ___ZN11IPCAUClient19RefreshRemoteAUListEv_block_invoke()
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("com.apple.coreaudio.AudioComponentRegistrationsChanged"), 0, 0, 1u);
}

void OwnedPtrVector<PublishedAU *>::~OwnedPtrVector(_QWORD *a1)
{
  OwnedPtrVector<PublishedAU *>::~OwnedPtrVector(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__split_buffer<std::function<void ()(void)>>::~__split_buffer(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      v5 = (_QWORD *)*(v2 - 1);
      if (v5 == v4)
        break;
      if (v5)
      {
        v4 = v5;
        v6 = 5;
LABEL_6:
        (*(void (**)(void))(*v4 + 8 * v6))();
        v4 = *(_QWORD **)(a1 + 16);
      }
      v2 = v4;
      if (v4 == v3)
        goto LABEL_8;
    }
    v6 = 4;
    goto LABEL_6;
  }
LABEL_8:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__function::__func<IPCAUClient::IPCAUClient(void)::$_0,std::allocator<IPCAUClient::IPCAUClient(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<IPCAUClient::IPCAUClient(void)::$_0,std::allocator<IPCAUClient::IPCAUClient(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2913950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<IPCAUClient::IPCAUClient(void)::$_0,std::allocator<IPCAUClient::IPCAUClient(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2913950;
  a2[1] = v2;
  return result;
}

void std::__function::__func<IPCAUClient::IPCAUClient(void)::$_0,std::allocator<IPCAUClient::IPCAUClient(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  IPCAUClient::ConnectToRegistrationServer(*(unsigned int ***)(a1 + 8));
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AURegistrationServerConnection>::instance(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  unsigned int v1;
  NSObject *v2;
  NSObject *global_queue;
  NSObject *v4;
  _BYTE object[12];
  __int16 v6;
  int v7;
  __int16 v8;
  unsigned int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  CADeprecated::XRemoteMachServer::XRemoteMachServer((CADeprecated::XRemoteMachServer *)v0, "AURegistrationServerConnection", "com.apple.audio.AudioUnitServer");
  *(_QWORD *)(v0 + 168) = 0;
  *(_QWORD *)v0 = &off_1E29096E0;
  *(_QWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  *(_DWORD *)(v0 + 192) = 0;
  if (CADeprecated::TSingleton<IPCAURegistrar>::sInstance)
  {
    v1 = atomic_load(*(unsigned int **)(CADeprecated::TSingleton<IPCAURegistrar>::sInstance + 40));
    if (kInterAppAudioScope)
    {
      v2 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
      {
LABEL_12:
        getpid();
        CADeprecated::XRemoteMachServer::SetServerPort((CADeprecated::XRemoteMachServer *)v0);
        goto LABEL_13;
      }
    }
    else
    {
      v2 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)object = 136315650;
      *(_QWORD *)&object[4] = "IPCAURegistrar.mm";
      v6 = 1024;
      v7 = 1191;
      v8 = 1024;
      v9 = v1;
      _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AURegistrationServerConnection: in server, using port 0x%x", object, 0x18u);
    }
    goto LABEL_12;
  }
  AURegistrationServerConnection::Connect((const char **)v0);
  global_queue = dispatch_get_global_queue(0, 0);
  v4 = global_queue;
  if (global_queue)
    dispatch_retain(global_queue);
  *(_QWORD *)object = v4;
  CADeprecated::XMachPortDeathListener::SetDeathNotificationDispatchQueue();
  if (v4)
    dispatch_release(v4);
LABEL_13:
  __dmb(0xBu);
  CADeprecated::TSingleton<AURegistrationServerConnection>::sInstance = v0;
}

void sub_18EEA4430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  CADeprecated::XRemoteMachServer *v9;

  if (object)
    dispatch_release(object);
  MEMORY[0x193FFD7B8]((char *)v9 + 192);
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&object);
  CADeprecated::XRemoteMachServer::~XRemoteMachServer(v9);
  MEMORY[0x193FFE460](v9, 0x10F1C405F9E03EALL);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CADeprecated::XMachReceivePort>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CADeprecated::XMachReceivePort>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<CADeprecated::XMachReceivePort>::__on_zero_shared()
{
  JUMPOUT(0x193FFD7B8);
}

void sub_18EEA4620(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void IPCAUClient::AUInstance::~AUInstance(IPCAUClient::AUInstance *this)
{
  IPCAUClient::AUInstance::~AUInstance(this);
  JUMPOUT(0x193FFE460);
}

{
  const void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E2909D60;
  v2 = (const void *)*((_QWORD *)this + 65);
  if (v2)
    _Block_release(v2);
  CADeprecated::CAMutex::~CAMutex((IPCAUClient::AUInstance *)((char *)this + 384));
  *((_QWORD *)this + 35) = &off_1E29085E0;
  v4 = (void **)((char *)this + 344);
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v4);
  SharableMemoryBlock::~SharableMemoryBlock((xpc_object_t *)this + 35);
  TThreadSafeList<IPCAUClient::RenderCallback>::~TThreadSafeList((uint64_t)this + 128);
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

BOOL TOpaqueObject<IPCAUClient::AUInstance,unsigned int,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<IPCAUClient::AUInstance>::sRTTI || a2 == (void *)MEMORY[0x1E0DDEC88];
}

void std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void SharableMemoryBlock::~SharableMemoryBlock(xpc_object_t *this)
{
  uint64_t v2;

  v2 = MEMORY[0x1E0DDF090];
  *this = (xpc_object_t)(MEMORY[0x1E0DDF090] + 16);
  (*(void (**)(void))(v2 + 32))();
  xpc_release(this[6]);
  this[6] = 0;
}

uint64_t TThreadSafeList<IPCAUClient::RenderCallback>::~TThreadSafeList(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    do
    {
      *(_QWORD *)a1 = *v2;
      MEMORY[0x193FFE460]();
      v2 = *(_QWORD **)a1;
    }
    while (*(_QWORD *)a1);
  }
  while (1)
  {
    v3 = *(_QWORD **)(a1 + 8);
    if (!v3)
      break;
    *(_QWORD *)(a1 + 8) = *v3;
    MEMORY[0x193FFE460]();
  }
  while (1)
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (!v4)
      break;
    *(_QWORD *)(a1 + 16) = *v4;
    MEMORY[0x193FFE460]();
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v2);
  v3 = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v3);
}

void std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  if (v2)
    MEMORY[0x193FFE43C](v2, 0x1000C8077774924);
  operator delete(__p);
}

void IPCAUSharedMemoryBase::~IPCAUSharedMemoryBase(xpc_object_t *this)
{
  void **v2;

  *this = &off_1E29085E0;
  v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);
}

{
  void **v2;

  *this = &off_1E29085E0;
  v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);
  JUMPOUT(0x193FFE460);
}

void IPCAUSharedMemoryBase::Free(IPCAUSharedMemoryBase *this)
{
  uint64_t i;
  uint64_t v3;

  SharableMemoryBlock::Free(this);
  if (!*((_BYTE *)this + 92))
  {
    v3 = *((_QWORD *)this + 8);
    for (i = *((_QWORD *)this + 9); i != v3; std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>(i))
      i -= 56;
    *((_QWORD *)this + 9) = v3;
  }
}

OSStatus AudioOutputUnitPublish(const AudioComponentDescription *inDesc, CFStringRef inName, UInt32 inVersion, AudioUnit inOutputUnit)
{
  uint64_t v5;

  v5 = *(_QWORD *)&inVersion;
  SystemAUsSoftLink::instance((SystemAUsSoftLink *)inDesc);
  return off_1ECEF4ED8(inDesc, inName, v5, inOutputUnit);
}

uint64_t (*IPCAUClient::AUInstance::LookupMethod_Music(IPCAUClient::AUInstance *this))(void *)
{
  if ((_DWORD)this == 257)
    return (uint64_t (*)(void *))IPCAU_MIDIEvent;
  if ((_DWORD)this == 258)
    return (uint64_t (*)(void *))IPCAU_SysEx;
  if (((_DWORD)this - 1) > 0x13)
    return 0;
  return off_1E2919008[(int)this - 1];
}

uint64_t (*IPCAUClient::AUInstance::LookupMethod(IPCAUClient::AUInstance *this))(void *)
{
  if (((_DWORD)this - 1) > 0x13)
    return 0;
  else
    return off_1E2919008[(int)this - 1];
}

uint64_t IPCAUClient::AUInstance::OpenMethod(IPCAUClient::AUInstance *this, const UInt8 *a2, OpaqueAudioComponentInstance *a3)
{
  uint64_t v3;
  uint64_t v4;
  CFBundleRef MainBundle;
  __CFBundle *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  mach_msg_timeout_t v12;
  unsigned int v13;
  int v14;
  int Length;
  const UInt8 *BytePtr;
  NSObject *v17;
  __int128 v18;
  mach_port_name_t reply_port;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __int128 v48;
  int v49;
  CFDataRef theData[2];
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint8_t buf[4];
  _BYTE rcv_name[36];
  const UInt8 *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  int v61;
  int v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v3 = 4294900547;
  v4 = *((_QWORD *)this + 4);
  if (*(_DWORD *)(*(_QWORD *)(v4 + 16) + 48))
  {
    MainBundle = CFBundleGetMainBundle();
    if (MainBundle)
    {
      v8 = MainBundle;
      v53 = 0;
      IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v51, *(_QWORD *)(v4 + 16), &v53);
      v9 = v53;
      if (v53)
      {
LABEL_93:
        IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v51);
        return v9;
      }
      theData[1] = (CFDataRef)CFBundleGetIdentifier(v8);
      CASerializer::CASerializer((CASerializer *)theData, 0);
      v10 = operator<<();
      v11 = *(_DWORD *)(*(_QWORD *)(v4 + 16) + 48);
      if (v52)
        v12 = 0x7FFFFFFF;
      else
        v12 = 10000;
      v13 = atomic_load(*(unsigned int **)(CADeprecated::TSingleton<IPCAUClient>::instance(v10) + 272));
      v14 = *(_DWORD *)(v4 + 8);
      v48 = *(_OWORD *)(v4 + 28);
      v49 = *(_DWORD *)(v4 + 44);
      Length = (int)theData[0];
      if (theData[0])
      {
        BytePtr = CFDataGetBytePtr(theData[0]);
        Length = (int)theData[0];
        if (theData[0])
          Length = CFDataGetLength(theData[0]);
      }
      else
      {
        BytePtr = 0;
      }
      v18 = *(_OWORD *)(v4 + 56);
      memset(rcv_name, 0, 32);
      *(_DWORD *)&rcv_name[20] = 2;
      *(_DWORD *)&rcv_name[24] = v13;
      *(_DWORD *)&rcv_name[32] = 1245184;
      v56 = BytePtr;
      LODWORD(v57) = 16777472;
      HIDWORD(v57) = Length;
      v58 = *MEMORY[0x1E0C804E8];
      v60 = v48;
      v59 = v14;
      v61 = v49;
      v62 = Length;
      v63 = v18;
      reply_port = mig_get_reply_port();
      *(_DWORD *)&rcv_name[4] = v11;
      *(_DWORD *)&rcv_name[8] = reply_port;
      *(_DWORD *)buf = -2147478253;
      *(_QWORD *)&rcv_name[12] = 0x1605800000000;
      if (MEMORY[0x1E0C85B60])
      {
        voucher_mach_msg_set((mach_msg_header_t *)buf);
        reply_port = *(_DWORD *)&rcv_name[8];
      }
      v20 = mach_msg((mach_msg_header_t *)buf, 275, 0x6Cu, 0x30u, reply_port, v12, 0);
      v21 = v20;
      if ((v20 - 268435458) <= 0xE && ((1 << (v20 - 2)) & 0x4003) != 0)
      {
        mig_put_reply_port(*(mach_port_t *)&rcv_name[8]);
        goto LABEL_36;
      }
      if ((_DWORD)v20)
      {
        mig_dealloc_reply_port(*(mach_port_t *)&rcv_name[8]);
LABEL_36:
        if ((_DWORD)v21 == 268435460)
        {
          if ((*(_WORD *)buf & 0x1F00) == 0x1100)
            mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&rcv_name[8]);
          mach_msg_destroy((mach_msg_header_t *)buf);
          v3 = 268435460;
          goto LABEL_54;
        }
LABEL_45:
        if ((_DWORD)v21 == 268435459 || (_DWORD)v21 == -308)
        {
          if (kInterAppAudioScope)
          {
            v23 = *(NSObject **)kInterAppAudioScope;
            if (!*(_QWORD *)kInterAppAudioScope)
            {
LABEL_92:
              MEMORY[0x193FFD878](theData);
              v9 = v3;
              goto LABEL_93;
            }
          }
          else
          {
            v23 = MEMORY[0x1E0C81028];
          }
          v20 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v20)
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)rcv_name = "IPCAUClient.cpp";
            *(_WORD *)&rcv_name[8] = 1024;
            *(_DWORD *)&rcv_name[10] = 433;
            *(_WORD *)&rcv_name[14] = 1024;
            *(_DWORD *)&rcv_name[16] = v21;
            *(_WORD *)&rcv_name[20] = 1024;
            *(_DWORD *)&rcv_name[22] = -66749;
            _os_log_impl(&dword_18EE07000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", buf, 0x1Eu);
          }
        }
        else
        {
          v3 = v21;
        }
LABEL_54:
        v53 = v3;
        if (kInterAppAudioScope)
        {
          v24 = *(NSObject **)kInterAppAudioScope;
          if (!*(_QWORD *)kInterAppAudioScope)
            goto LABEL_60;
        }
        else
        {
          v24 = MEMORY[0x1E0C81028];
        }
        v20 = os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v20)
        {
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)rcv_name = "IPCAUClient.cpp";
          *(_WORD *)&rcv_name[8] = 1024;
          *(_DWORD *)&rcv_name[10] = 488;
          *(_WORD *)&rcv_name[14] = 2048;
          *(_QWORD *)&rcv_name[16] = this;
          *(_WORD *)&rcv_name[24] = 2048;
          *(_QWORD *)&rcv_name[26] = v4;
          *(_WORD *)&rcv_name[34] = 2048;
          v56 = a2;
          LOWORD(v57) = 1024;
          *(_DWORD *)((char *)&v57 + 2) = v3;
          _os_log_impl(&dword_18EE07000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d self %p This %p instance %p err %d", buf, 0x36u);
        }
LABEL_60:
        if (!(_DWORD)v3)
        {
          *(_QWORD *)(v4 + 72) = a2;
          v25 = CADeprecated::TSingleton<IPCAUClient>::instance(v20);
          v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
          v27 = *(_QWORD *)(v4 + 72);
          v28 = *(_QWORD **)(v25 + 320);
          if (v28)
          {
            while (1)
            {
              while (1)
              {
                v29 = v28;
                v30 = v28[4];
                if (v27 >= v30)
                  break;
                v28 = (_QWORD *)*v29;
                v31 = v29;
                if (!*v29)
                  goto LABEL_69;
              }
              if (v30 >= v27)
                break;
              v28 = (_QWORD *)v29[1];
              if (!v28)
              {
                v31 = v29 + 1;
                goto LABEL_69;
              }
            }
          }
          else
          {
            v31 = (_QWORD *)(v25 + 320);
            v29 = (_QWORD *)(v25 + 320);
LABEL_69:
            v32 = operator new(0x30uLL);
            *(_QWORD *)&v33 = v27;
            *((_QWORD *)&v33 + 1) = v4;
            v32[2] = v33;
            *(_QWORD *)v32 = 0;
            *((_QWORD *)v32 + 1) = 0;
            *((_QWORD *)v32 + 2) = v29;
            *v31 = v32;
            v34 = **(_QWORD **)(v25 + 312);
            if (v34)
            {
              *(_QWORD *)(v25 + 312) = v34;
              v32 = (_OWORD *)*v31;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v25 + 320), (uint64_t *)v32);
            ++*(_QWORD *)(v25 + 328);
          }
          v35 = *(_QWORD **)(v4 + 16);
          v37 = (_QWORD *)v35[23];
          v36 = v35[24];
          if ((unint64_t)v37 >= v36)
          {
            v39 = (_QWORD *)v35[22];
            v40 = v37 - v39;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v42 = v36 - (_QWORD)v39;
            if (v42 >> 2 > v41)
              v41 = v42 >> 2;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
              v43 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v43 = v41;
            if (v43)
            {
              if (v43 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v44 = (char *)operator new(8 * v43);
            }
            else
            {
              v44 = 0;
            }
            v45 = &v44[8 * v40];
            *(_QWORD *)v45 = v4;
            v38 = v45 + 8;
            if (v37 != v39)
            {
              do
              {
                v46 = *--v37;
                *((_QWORD *)v45 - 1) = v46;
                v45 -= 8;
              }
              while (v37 != v39);
              v37 = (_QWORD *)v35[22];
            }
            v35[22] = v45;
            v35[23] = v38;
            v35[24] = &v44[8 * v43];
            if (v37)
              operator delete(v37);
          }
          else
          {
            *v37 = v4;
            v38 = v37 + 1;
          }
          v35[23] = v38;
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
          v3 = 0;
        }
        goto LABEL_92;
      }
      if (*(_DWORD *)&rcv_name[16] == 71)
      {
        v21 = 4294966988;
      }
      else if (*(_DWORD *)&rcv_name[16] == 90300)
      {
        if ((*(_DWORD *)buf & 0x80000000) == 0)
        {
          if (*(_DWORD *)rcv_name == 40)
          {
            if (!*(_DWORD *)&rcv_name[4])
            {
              v21 = *(unsigned int *)&rcv_name[28];
              if (!*(_DWORD *)&rcv_name[28])
              {
                v3 = 0;
                *(_DWORD *)(v4 + 80) = *(_DWORD *)&rcv_name[32];
                goto LABEL_54;
              }
              goto LABEL_44;
            }
          }
          else if (*(_DWORD *)rcv_name == 36)
          {
            if (*(_DWORD *)&rcv_name[4])
              v22 = 1;
            else
              v22 = *(_DWORD *)&rcv_name[28] == 0;
            if (v22)
              v21 = 4294966996;
            else
              v21 = *(unsigned int *)&rcv_name[28];
            goto LABEL_44;
          }
        }
        v21 = 4294966996;
      }
      else
      {
        v21 = 4294966995;
      }
LABEL_44:
      mach_msg_destroy((mach_msg_header_t *)buf);
      goto LABEL_45;
    }
    if (kInterAppAudioScope)
    {
      v17 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        return 4294967246;
    }
    else
    {
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)rcv_name = "IPCAUClient.cpp";
      *(_WORD *)&rcv_name[8] = 1024;
      *(_DWORD *)&rcv_name[10] = 475;
      _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d IPCAUClient: main bundle is nil", buf, 0x12u);
    }
    return 4294967246;
  }
  return v3;
}

void sub_18EEA5110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t IPCAUClient::AUInstance::CloseMethod(IPCAUClient::AUInstance *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t (*v28)(_QWORD);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  mach_port_name_t v38;
  mach_msg_return_t v39;
  mach_msg_return_t v40;
  int v41;
  mach_msg_timeout_t v42;
  int v43;
  mach_port_name_t reply_port;
  uint64_t v45;
  uint64_t v46;
  NSObject *v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  _BYTE buf[48];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 4);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
  v6 = IPCAURegClient_SetProcessWakeState(*(_DWORD *)(v5 + 48), *(_DWORD *)(v4 + 52), 3, buf);
  if (!kInterAppAudioScope)
  {
    v7 = MEMORY[0x1E0C81028];
LABEL_5:
    v6 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)v6)
    {
      v8 = *(_QWORD *)(v3 + 72);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 501;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = this;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v3;
      *(_WORD *)&buf[38] = 2048;
      *(_QWORD *)&buf[40] = v8;
      _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d self %p This %p instance %p", buf, 0x30u);
    }
    goto LABEL_7;
  }
  v7 = *(NSObject **)kInterAppAudioScope;
  if (*(_QWORD *)kInterAppAudioScope)
    goto LABEL_5;
LABEL_7:
  v9 = (uint64_t *)CADeprecated::TSingleton<IPCAUClient>::instance(v6);
  v10 = (*(uint64_t (**)(uint64_t *))(*v9 + 16))(v9);
  v11 = (uint64_t *)v9[40];
  if (v11)
  {
    v12 = *(_QWORD *)(v3 + 72);
    v13 = v9 + 40;
    v14 = (_QWORD *)v9[40];
    do
    {
      v15 = v14[4];
      v16 = v15 >= v12;
      if (v15 >= v12)
        v17 = v14;
      else
        v17 = v14 + 1;
      if (v16)
        v13 = v14;
      v14 = (_QWORD *)*v17;
    }
    while (*v17);
    if (v13 != v9 + 40 && v12 >= v13[4])
    {
      v18 = (uint64_t *)v13[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        v20 = v13;
        do
        {
          v19 = (uint64_t *)v20[2];
          v21 = *v19 == (_QWORD)v20;
          v20 = v19;
        }
        while (!v21);
      }
      if ((uint64_t *)v9[39] == v13)
        v9[39] = (uint64_t)v19;
      --v9[41];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v13);
      operator delete(v13);
    }
  }
  v22 = *(_QWORD *)(v3 + 16);
  v24 = *(char **)(v22 + 176);
  v23 = *(char **)(v22 + 184);
  while (v24 != v23)
  {
    if (*(_QWORD *)v24 == v3)
    {
      v25 = v23 - (v24 + 8);
      if (v23 != v24 + 8)
        memmove(v24, v24 + 8, v23 - (v24 + 8));
      *(_QWORD *)(v22 + 184) = &v24[v25];
      break;
    }
    v24 += 8;
  }
  if (v10)
    (*(void (**)(uint64_t *))(*v9 + 24))(v9);
  v51 = 0;
  IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v49, *(_QWORD *)(v3 + 16), &v51);
  v26 = v51;
  v27 = (_QWORD *)MEMORY[0x1E0C804E8];
  v28 = MEMORY[0x1E0C85B60];
  if (v51)
    goto LABEL_37;
  v41 = *(_DWORD *)(*(_QWORD *)(v3 + 16) + 48);
  if (v50)
    v42 = 0x7FFFFFFF;
  else
    v42 = 10000;
  v43 = *(_DWORD *)(v3 + 80);
  memset(&buf[4], 0, 40);
  *(_QWORD *)&buf[24] = *MEMORY[0x1E0C804E8];
  *(_DWORD *)&buf[32] = v43;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&buf[8] = v41;
  *(_DWORD *)&buf[12] = reply_port;
  *(_DWORD *)buf = 5395;
  *(_QWORD *)&buf[16] = 0x1605900000000;
  if (v28)
  {
    voucher_mach_msg_set((mach_msg_header_t *)buf);
    reply_port = *(_DWORD *)&buf[12];
  }
  v45 = mach_msg((mach_msg_header_t *)buf, 275, 0x24u, 0x2Cu, reply_port, v42, 0);
  v46 = v45;
  if ((v45 - 268435458) <= 0xE && ((1 << (v45 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&buf[12]);
  }
  else
  {
    if (!(_DWORD)v45)
    {
      if (*(_DWORD *)&buf[20] == 71)
      {
        v46 = 4294966988;
      }
      else if (*(_DWORD *)&buf[20] == 90301)
      {
        v46 = 4294966996;
        if ((*(_DWORD *)buf & 0x80000000) == 0 && *(_DWORD *)&buf[4] == 36 && !*(_DWORD *)&buf[8])
        {
          v46 = *(unsigned int *)&buf[32];
          if (!*(_DWORD *)&buf[32])
          {
            v26 = 0;
            goto LABEL_37;
          }
        }
      }
      else
      {
        v46 = 4294966995;
      }
      goto LABEL_84;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&buf[12]);
  }
  if ((_DWORD)v46 != 268435460)
    goto LABEL_85;
  if ((*(_WORD *)buf & 0x1F00) == 0x1100)
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&buf[12]);
  v46 = 268435460;
LABEL_84:
  mach_msg_destroy((mach_msg_header_t *)buf);
LABEL_85:
  if ((_DWORD)v46 != 268435459 && (_DWORD)v46 != -308)
  {
    v26 = v46;
    goto LABEL_37;
  }
  v26 = 4294900547;
  if (kInterAppAudioScope)
  {
    v48 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_37;
  }
  else
  {
    v48 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 433;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v46;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = -66749;
    _os_log_impl(&dword_18EE07000, v48, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", buf, 0x1Eu);
  }
LABEL_37:
  v29 = sleep(1u);
  v30 = CADeprecated::TSingleton<IPCAUClient>::instance(v29);
  v31 = *(_QWORD *)(v30 + 344) - *(_QWORD *)(v30 + 336);
  if ((int)(v31 >> 3) >= 1)
  {
    v32 = (v31 >> 3) + 1;
    do
    {
      v33 = *(_QWORD *)(v30 + 336) + 8 * (v32 - 2);
      v34 = *(_QWORD **)v33;
      if (*(_QWORD *)(*(_QWORD *)v33 + 176) == *(_QWORD *)(*(_QWORD *)v33 + 184) && v34[25] == v34[26])
      {
        v35 = *(_QWORD *)(v30 + 344);
        v36 = v35 - (v33 + 8);
        if (v35 != v33 + 8)
          memmove((void *)(*(_QWORD *)(v30 + 336) + 8 * (v32 - 2)), (const void *)(v33 + 8), v35 - (v33 + 8));
        *(_QWORD *)(v30 + 344) = v33 + v36;
        (*(void (**)(_QWORD *))(*v34 + 8))(v34);
      }
      --v32;
    }
    while (v32 > 1);
  }
  v37 = *(_DWORD *)(CADeprecated::TSingleton<AURegistrationServerConnection>::instance() + 48);
  *(_QWORD *)&buf[24] = *v27;
  *(_OWORD *)&buf[32] = *(_OWORD *)(v3 + 56);
  v38 = mig_get_reply_port();
  *(_QWORD *)buf = 5395;
  *(_DWORD *)&buf[8] = v37;
  *(_DWORD *)&buf[12] = v38;
  *(_QWORD *)&buf[16] = 0x15F9A00000000;
  if (v28)
  {
    voucher_mach_msg_set((mach_msg_header_t *)buf);
    v38 = *(_DWORD *)&buf[12];
  }
  v39 = mach_msg((mach_msg_header_t *)buf, 275, 0x30u, 0x2Cu, v38, gMediaServerTimeout, 0);
  v40 = v39;
  if ((v39 - 268435458) <= 0xE && ((1 << (v39 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&buf[12]);
    goto LABEL_66;
  }
  if (v39)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&buf[12]);
LABEL_66:
    if (v40 == 268435460)
    {
      if ((*(_WORD *)buf & 0x1F00) == 0x1100)
        mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&buf[12]);
      goto LABEL_69;
    }
    goto LABEL_70;
  }
  if (*(_DWORD *)&buf[20] != 90110
    || (*(_DWORD *)buf & 0x80000000) != 0
    || *(_DWORD *)&buf[4] != 36
    || *(_DWORD *)&buf[8]
    || *(_DWORD *)&buf[32])
  {
LABEL_69:
    mach_msg_destroy((mach_msg_header_t *)buf);
  }
LABEL_70:
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v49);
  return v26;
}

void sub_18EEA57C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void IPCAUSharedMemory::~IPCAUSharedMemory(xpc_object_t *this)
{
  void **v2;

  *this = &off_1E29085E0;
  v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);
}

{
  void **v2;

  *this = &off_1E29085E0;
  v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);
  JUMPOUT(0x193FFE460);
}

uint64_t IPCAUSharedMemory::RecomputeHeaderSize(uint64_t this, int a2)
{
  int v2;

  v2 = 4 * a2 + 2275;
  if (!a2)
    v2 = 2279;
  *(_DWORD *)(this + 56) = (v2 + *(_DWORD *)(this + 96)) & 0xFFFFFFF0;
  return this;
}

uint64_t IPCAU_Initialize(_BOOL8 a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  int v9;
  mach_msg_timeout_t v10;
  int v11;
  mach_port_name_t reply_port;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  double *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  void (**v23)(SharableMemoryBlock::MachClientToken *__hidden);
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  char v28;
  _QWORD v29[2];
  double v30;
  unsigned int v31;
  _BYTE buf[36];
  __int128 v33;
  __int128 v34;
  _DWORD v35[25];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (!kInterAppAudioScope)
  {
    v2 = MEMORY[0x1E0C81028];
LABEL_5:
    a1 = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
    if (a1)
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 987;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v1;
      _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p", buf, 0x1Cu);
    }
    goto LABEL_7;
  }
  v2 = *(NSObject **)kInterAppAudioScope;
  if (*(_QWORD *)kInterAppAudioScope)
    goto LABEL_5;
LABEL_7:
  v30 = 0.0;
  AudioToolboxSoftLink::instance((AudioToolboxSoftLink *)a1);
  v3 = off_1EE165B10(&v30);
  if (!(_DWORD)v3)
  {
    if (*(_BYTE *)(v1 + 84))
      return 0;
    inited = 4294900547;
    v6 = *(_QWORD *)(v1 + 16);
    if (!*(_DWORD *)(v6 + 48))
      return 4294900547;
    v7 = CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
    v3 = IPCAURegClient_SetProcessWakeState(*(_DWORD *)(v7 + 48), *(_DWORD *)(v6 + 52), 2, buf);
    v31 = v3;
    if (!(_DWORD)v3)
    {
      v29[0] = &v31;
      v29[1] = v1;
      v8 = *(_QWORD *)(v1 + 520) != 0;
      IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v27, *(_QWORD *)(v1 + 16), &v31);
      v3 = v31;
      if (v31)
      {
LABEL_72:
        IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v27);
        applesauce::raii::v1::detail::ScopeGuard<IPCAUClient::AUInstance::Initialize(void)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)v29);
        return v3;
      }
      v23 = &off_1E2909F48;
      v24 = 0;
      v25 = 0;
      v26 = 1;
      v9 = *(_DWORD *)(*(_QWORD *)(v1 + 16) + 48);
      if (v28)
        v10 = 0x7FFFFFFF;
      else
        v10 = 10000;
      v11 = *(_DWORD *)(v1 + 80);
      v33 = 0u;
      memset(v35, 0, 96);
      v34 = 0u;
      memset(&buf[4], 0, 32);
      *(_QWORD *)&buf[24] = *MEMORY[0x1E0C804E8];
      *(_DWORD *)&buf[32] = v11;
      LODWORD(v33) = v8;
      reply_port = mig_get_reply_port();
      *(_DWORD *)&buf[8] = v9;
      *(_DWORD *)&buf[12] = reply_port;
      *(_DWORD *)buf = 5395;
      *(_QWORD *)&buf[16] = 0x1605A00000000;
      if (MEMORY[0x1E0C85B60])
      {
        voucher_mach_msg_set((mach_msg_header_t *)buf);
        reply_port = *(_DWORD *)&buf[12];
      }
      v13 = mach_msg((mach_msg_header_t *)buf, 275, 0x28u, 0xA4u, reply_port, v10, 0);
      v14 = v13;
      if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
      {
        mig_put_reply_port(*(mach_port_t *)&buf[12]);
        goto LABEL_33;
      }
      if ((_DWORD)v13)
      {
        mig_dealloc_reply_port(*(mach_port_t *)&buf[12]);
LABEL_33:
        if ((_DWORD)v14 == 268435460)
        {
          if ((*(_WORD *)buf & 0x1F00) == 0x1100)
            mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&buf[12]);
          mach_msg_destroy((mach_msg_header_t *)buf);
          v31 = 268435460;
          inited = 268435460;
          goto LABEL_71;
        }
        goto LABEL_55;
      }
      if (*(_DWORD *)&buf[20] == 71)
      {
        v14 = 4294966988;
      }
      else if (*(_DWORD *)&buf[20] == 90302)
      {
        if ((*(_DWORD *)buf & 0x80000000) != 0)
        {
          v14 = 4294966996;
          if (*(_DWORD *)&buf[24] != 2
            || *(_DWORD *)&buf[4] < 0x4Cu
            || *(_DWORD *)&buf[4] > 0x9Cu
            || *(_DWORD *)&buf[8]
            || WORD1(v33) << 16 != 1114112
            || HIWORD(v33) << 16 != 1114112)
          {
            goto LABEL_54;
          }
          v14 = v35[1];
          if (v35[1] <= 2u && v35[1] <= (buf[4] - 76) / 0x28u)
          {
            v15 = 40 * v35[1];
            if (*(_DWORD *)&buf[4] == 40 * v35[1] + 76)
            {
              *(_QWORD *)(v1 + 88) = *((_QWORD *)&v34 + 1);
              *(_DWORD *)(v1 + 96) = v35[0];
              memcpy((void *)(v1 + 200), &v35[2], v15);
              v25 = *(_DWORD *)&buf[28];
              *(_DWORD *)(v1 + 24) = DWORD1(v33);
              v31 = 0;
              *(_QWORD *)buf = &v31;
              *(_QWORD *)&buf[8] = v1;
              *(_QWORD *)&buf[16] = &v27;
              if ((_DWORD)v14)
              {
                v16 = (double *)(v1 + 200);
                v17 = v14;
                while (*v16 == v30)
                {
                  v16 += 5;
                  if (!--v17)
                    goto LABEL_62;
                }
                inited = 4294900550;
                goto LABEL_76;
              }
LABEL_62:
              HIDWORD(v24) = IPCAUSharedMemoryBase::InitPhase1((IPCAUSharedMemoryBase *)(v1 + 280), (const AudioStreamBasicDescription *)(v1 + 200), v14, *(_DWORD *)(v1 + 88));
              *(_BYTE *)(v1 + 372) = 1;
              inited = SharableMemoryBlock::InitClient();
              *(_BYTE *)(v1 + 372) = 0;
              if ((_DWORD)inited)
              {
                v20 = *(_QWORD *)(v1 + 344);
                v19 = *(_QWORD *)(v1 + 352);
                if (v19 != v20)
                {
                  do
                  {
                    v19 -= 56;
                    std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>(v19);
                  }
                  while (v19 != v20);
                  *(_QWORD *)(v1 + 352) = v20;
                }
                v31 = inited;
              }
              else
              {
                IPCAUSharedMemoryBase::InitPhase2((IPCAUSharedMemoryBase *)(v1 + 280));
                v31 = 0;
                v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 384) + 16))(v1 + 384);
                v22 = *(_DWORD **)(v1 + 304);
                *v22 = 0;
                *((_BYTE *)v22 + *(unsigned int *)(v1 + 376) + 2176) = 0;
                if (v21)
                  (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 384) + 24))(v1 + 384);
                *(_BYTE *)(v1 + 84) = 1;
                *(_BYTE *)(v1 + 153) = 0;
                *(_QWORD *)(v1 + 472) = 0;
                inited = v31;
              }
LABEL_76:
              applesauce::raii::v1::detail::ScopeGuard<IPCAUClient::AUInstance::Initialize(void)::$_1,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)buf);
              goto LABEL_71;
            }
          }
        }
        else if (*(_DWORD *)&buf[4] == 36)
        {
          v14 = 4294966996;
          if (*(_DWORD *)&buf[32])
          {
            if (*(_DWORD *)&buf[8])
              v14 = 4294966996;
            else
              v14 = *(unsigned int *)&buf[32];
          }
          goto LABEL_54;
        }
        v14 = 4294966996;
      }
      else
      {
        v14 = 4294966995;
      }
LABEL_54:
      mach_msg_destroy((mach_msg_header_t *)buf);
LABEL_55:
      if ((_DWORD)v14 == 268435459 || (_DWORD)v14 == -308)
      {
        if (kInterAppAudioScope)
        {
          v18 = *(NSObject **)kInterAppAudioScope;
          if (!*(_QWORD *)kInterAppAudioScope)
          {
LABEL_70:
            v31 = -66749;
            goto LABEL_71;
          }
        }
        else
        {
          v18 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 433;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v14;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = -66749;
          _os_log_impl(&dword_18EE07000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", buf, 0x1Eu);
        }
        goto LABEL_70;
      }
      v31 = v14;
      inited = v14;
      if ((_DWORD)v14)
      {
LABEL_71:
        SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)&v23);
        v3 = inited;
        goto LABEL_72;
      }
      *(_QWORD *)buf = &v31;
      *(_QWORD *)&buf[8] = v1;
      *(_QWORD *)&buf[16] = &v27;
      goto LABEL_62;
    }
  }
  return v3;
}

void sub_18EEA5EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t IPCAU_Uninitialize(_QWORD *a1)
{
  IPCAUClient::AUInstance *v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  IPCAUClient::AUInstance *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = (IPCAUClient::AUInstance *)a1[4];
  if (kInterAppAudioScope)
  {
    v2 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_7;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v4 = 136315650;
    v5 = "IPCAUClient.cpp";
    v6 = 1024;
    v7 = 994;
    v8 = 2048;
    v9 = v1;
    _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p", (uint8_t *)&v4, 0x1Cu);
  }
LABEL_7:
  IPCAUClient::AUInstance::Uninitialize(v1);
  return 0;
}

uint64_t IPCAU_GetPropertyInfo(_QWORD *a1, int a2, unsigned int a3, int a4, unsigned int *a5, unsigned __int8 *a6)
{
  uint64_t v11;
  unsigned __int8 v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  mach_msg_timeout_t v19;
  int v20;
  mach_port_name_t reply_port;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  NSObject *v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  _BYTE msg[36];
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  if (a2 <= 26)
  {
    v11 = 0;
    v12 = 1;
    v13 = 16;
    if (a2 != 1 && a2 != 23)
      goto LABEL_15;
LABEL_10:
    if (!a5)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (a2 == 102)
  {
    v11 = 0;
    v12 = 0;
    v13 = 8;
    goto LABEL_10;
  }
  if (a2 == 27)
  {
    v11 = 0;
    v12 = 1;
    v13 = 40;
    if (!a5)
      goto LABEL_12;
LABEL_11:
    *a5 = v13;
    goto LABEL_12;
  }
LABEL_15:
  v11 = 4294900547;
  v15 = a1[4];
  v16 = *(_QWORD *)(v15 + 16);
  if (!*(_DWORD *)(v16 + 48))
    return v11;
  IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v26, v16, &v28);
  v17 = v28;
  if (v28)
  {
    IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v26);
    return v17;
  }
  v18 = *(_DWORD *)(*(_QWORD *)(v15 + 16) + 48);
  if (v27)
    v19 = 0x7FFFFFFF;
  else
    v19 = 10000;
  v20 = *(_DWORD *)(v15 + 80);
  v30 = 0u;
  memset(&msg[4], 0, 32);
  *(_QWORD *)&msg[24] = *MEMORY[0x1E0C804E8];
  *(_DWORD *)&msg[32] = v20;
  *(_QWORD *)&v30 = __PAIR64__(a3, a2);
  DWORD2(v30) = a4;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = v18;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x1605D00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    reply_port = *(_DWORD *)&msg[12];
  }
  v22 = mach_msg((mach_msg_header_t *)msg, 275, 0x30u, 0x34u, reply_port, v19, 0);
  v23 = v22;
  if ((v22 - 268435458) <= 0xE && ((1 << (v22 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
    goto LABEL_39;
  }
  if (!(_DWORD)v22)
  {
    if (*(_DWORD *)&msg[20] == 71)
    {
      v23 = 4294966988;
    }
    else if (*(_DWORD *)&msg[20] == 90305)
    {
      if ((*(_DWORD *)msg & 0x80000000) == 0)
      {
        if (*(_DWORD *)&msg[4] == 44)
        {
          if (!*(_DWORD *)&msg[8])
          {
            v23 = *(unsigned int *)&msg[32];
            if (!*(_DWORD *)&msg[32])
            {
              v13 = v30;
              v12 = BYTE4(v30);
              goto LABEL_58;
            }
            goto LABEL_47;
          }
        }
        else if (*(_DWORD *)&msg[4] == 36)
        {
          if (*(_DWORD *)&msg[8])
            v24 = 1;
          else
            v24 = *(_DWORD *)&msg[32] == 0;
          if (v24)
            v23 = 4294966996;
          else
            v23 = *(unsigned int *)&msg[32];
          goto LABEL_47;
        }
      }
      v23 = 4294966996;
    }
    else
    {
      v23 = 4294966995;
    }
LABEL_47:
    mach_msg_destroy((mach_msg_header_t *)msg);
    goto LABEL_48;
  }
  mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
LABEL_39:
  if ((_DWORD)v23 != 268435460)
  {
LABEL_48:
    if ((_DWORD)v23 != 268435459 && (_DWORD)v23 != -308)
    {
      v13 = 0;
      v12 = 0;
      goto LABEL_58;
    }
    if (kInterAppAudioScope)
    {
      v25 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
      {
LABEL_57:
        v13 = 0;
        v12 = 0;
        v23 = 4294900547;
        goto LABEL_58;
      }
    }
    else
    {
      v25 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)msg = 136315906;
      *(_QWORD *)&msg[4] = "IPCAUClient.cpp";
      *(_WORD *)&msg[12] = 1024;
      *(_DWORD *)&msg[14] = 433;
      *(_WORD *)&msg[18] = 1024;
      *(_DWORD *)&msg[20] = v23;
      *(_WORD *)&msg[24] = 1024;
      *(_DWORD *)&msg[26] = -66749;
      _os_log_impl(&dword_18EE07000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", msg, 0x1Eu);
    }
    goto LABEL_57;
  }
  if ((*(_WORD *)msg & 0x1F00) == 0x1100)
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
  mach_msg_destroy((mach_msg_header_t *)msg);
  v13 = 0;
  v12 = 0;
  v23 = 268435460;
LABEL_58:
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v26);
  v11 = v23;
  if (a5)
    goto LABEL_11;
LABEL_12:
  if (a6)
    *a6 = v12;
  return v11;
}

uint64_t IPCAU_GetProperty(_QWORD *a1, int a2, unsigned int a3, int a4, CFURLRef *a5, unsigned int *a6)
{
  unsigned int v11;
  uint64_t v12;
  const __CFUUID *v13;
  const __CFUUID *v14;
  CFStringRef v15;
  CFStringRef v16;
  const __CFString *v17;
  const __CFString *v18;
  CFURLRef v19;
  NSObject *v20;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  mach_msg_timeout_t v27;
  int v28;
  mach_port_name_t reply_port;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  void *v33;
  unsigned int v34;
  _BYTE *v35;
  _BYTE *v36;
  int v37;
  NSObject *v38;
  const void *v39;
  void *__dst;
  _DWORD *v41;
  const void **v42;
  int *v43;
  void *v44;
  char v45;
  unsigned int v46;
  void *v47;
  _BYTE buf[18];
  __int16 v49;
  _BYTE v50[20];
  const void **v51;
  int *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  _BYTE v57[36];
  __int128 v58;
  _OWORD __n[17];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v47 = a5;
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1080;
      v49 = 2080;
      *(_QWORD *)v50 = "AudioUnitGetProperty: null size pointer";
      v20 = MEMORY[0x1E0C81028];
LABEL_14:
      _os_log_impl(&dword_18EE07000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_debug_string: %s", buf, 0x1Cu);
    }
    return 4294967246;
  }
  if (!a5)
    return IPCAU_GetPropertyInfo(a1, a2, a3, a4, a6, 0);
  v11 = *a6;
  if (!*a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1087;
      v49 = 2080;
      *(_QWORD *)v50 = "AudioUnitGetProperty: zero size on entry";
      v20 = MEMORY[0x1E0C81028];
      goto LABEL_14;
    }
    return 4294967246;
  }
  v12 = a1[4];
  v46 = 0;
  if (a2 == 102)
  {
    v13 = CFUUIDCreateFromUUIDBytes(0, *(CFUUIDBytes *)(v12 + 56));
    if (v13)
    {
      v14 = v13;
      v15 = CFUUIDCreateString(0, v13);
      if (v15)
      {
        v16 = v15;
        v17 = CFStringCreateWithFormat(0, 0, CFSTR("com-apple-audiounit:%@/%c"), v15, 78);
        if (v17)
        {
          v18 = v17;
          v19 = CFURLCreateWithString(0, v17, 0);
          CFRelease(v18);
        }
        else
        {
          v19 = 0;
        }
        CFRelease(v16);
      }
      else
      {
        v19 = 0;
      }
      CFRelease(v14);
    }
    else
    {
      v19 = 0;
    }
    *a5 = v19;
    if (v19)
      v22 = 0;
    else
      v22 = 4294967246;
LABEL_42:
    if (kInterAppAudioScope)
    {
      v32 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        return v22;
    }
    else
    {
      v32 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      AUPropertyValueFormatter::AUPropertyValueFormatter((AUPropertyValueFormatter *)&v44, a2, a3, a4, (const AudioStreamBasicDescription *)v47, *a6);
      v33 = v44;
      CAX4CCString::CAX4CCString((CAX4CCString *)v57, v22);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1122;
      v49 = 2048;
      *(_QWORD *)v50 = v12;
      *(_WORD *)&v50[8] = 2080;
      *(_QWORD *)&v50[10] = v33;
      *(_WORD *)&v50[18] = 2080;
      v51 = (const void **)v57;
      _os_log_impl(&dword_18EE07000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d <- %p %s (%s)", buf, 0x30u);
      if (v44)
        free(v44);
    }
    return v22;
  }
  v22 = 4294900547;
  v23 = *(_QWORD *)(v12 + 16);
  if (*(_DWORD *)(v23 + 48))
  {
    buf[16] = 1;
    *(_QWORD *)buf = &off_1E2908A00;
    *(_QWORD *)&buf[8] = 256;
    *(_QWORD *)&v50[4] = &v53;
    *(_QWORD *)&v50[12] = &v54;
    v51 = (const void **)&v55;
    v52 = &v56;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    if (kInterAppAudioScope)
    {
      v24 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        goto LABEL_26;
    }
    else
    {
      v24 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v57 = 136315650;
      *(_QWORD *)&v57[4] = "IPCAUClient.cpp";
      *(_WORD *)&v57[12] = 1024;
      *(_DWORD *)&v57[14] = 1109;
      *(_WORD *)&v57[18] = 2048;
      *(_QWORD *)&v57[20] = v12;
      _os_log_impl(&dword_18EE07000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d -> %p", v57, 0x1Cu);
      v23 = *(_QWORD *)(v12 + 16);
    }
LABEL_26:
    IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker((uint64_t *)&v44, v23, &v46);
    v25 = v46;
    if (v46)
    {
      IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v44);
      MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)buf);
      return v25;
    }
    v26 = *(_DWORD *)(*(_QWORD *)(v12 + 16) + 48);
    if (v45)
      v27 = 0x7FFFFFFF;
    else
      v27 = 10000;
    v28 = *(_DWORD *)(v12 + 80);
    __dst = *(void **)&v50[4];
    v41 = *(_DWORD **)&v50[12];
    v42 = v51;
    v43 = v52;
    memset(__n, 0, sizeof(__n));
    v58 = 0u;
    memset(&v57[4], 0, 32);
    *(_QWORD *)&v57[24] = *MEMORY[0x1E0C804E8];
    *(_DWORD *)&v57[32] = v28;
    *(_QWORD *)&v58 = __PAIR64__(a3, a2);
    *((_QWORD *)&v58 + 1) = __PAIR64__(v11, a4);
    reply_port = mig_get_reply_port();
    *(_DWORD *)&v57[12] = reply_port;
    *(_DWORD *)v57 = 5395;
    *(_DWORD *)&v57[8] = v26;
    *(_QWORD *)&v57[16] = 0x1605E00000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set((mach_msg_header_t *)v57);
      reply_port = *(_DWORD *)&v57[12];
    }
    v30 = mach_msg((mach_msg_header_t *)v57, 275, 0x34u, 0x144u, reply_port, v27, 0);
    v31 = v30;
    if ((v30 - 268435458) <= 0xE && ((1 << (v30 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(*(mach_port_t *)&v57[12]);
    }
    else
    {
      if (!(_DWORD)v30)
      {
        if (*(_DWORD *)&v57[20] == 71)
        {
          v31 = 4294966988;
        }
        else if (*(_DWORD *)&v57[20] == 90306)
        {
          if ((*(_DWORD *)v57 & 0x80000000) != 0)
          {
            v31 = 4294966996;
            if (*(_DWORD *)&v57[24] == 1
              && *(_DWORD *)&v57[4] >= 0x3Cu
              && *(_DWORD *)&v57[4] <= 0x13Cu
              && !*(_DWORD *)&v57[8]
              && BYTE3(v58) == 1
              && LODWORD(__n[0]) <= 0x100
              && (*(_DWORD *)&v57[4] - 60) >= LODWORD(__n[0]))
            {
              v34 = (LODWORD(__n[0]) + 3) & 0xFFFFFFFC;
              if (*(_DWORD *)&v57[4] == v34 + 60)
              {
                v35 = &v57[v34];
                if (DWORD1(v58) == *((_DWORD *)v35 + 14))
                {
                  v36 = v35 - 256;
                  v37 = __n[0];
                  memcpy(__dst, (char *)__n + 4, LODWORD(__n[0]));
                  v31 = 0;
                  *v41 = v37;
                  *v42 = *(const void **)&v57[28];
                  *v43 = *((_DWORD *)v36 + 78);
                  goto LABEL_82;
                }
              }
            }
          }
          else if (*(_DWORD *)&v57[4] == 36)
          {
            v31 = 4294966996;
            if (*(_DWORD *)&v57[32])
            {
              if (*(_DWORD *)&v57[8])
                v31 = 4294966996;
              else
                v31 = *(unsigned int *)&v57[32];
            }
          }
          else
          {
            v31 = 4294966996;
          }
        }
        else
        {
          v31 = 4294966995;
        }
        mach_msg_destroy((mach_msg_header_t *)v57);
LABEL_77:
        if ((_DWORD)v31 == 268435459 || (_DWORD)v31 == -308)
        {
          if (kInterAppAudioScope)
          {
            v38 = *(NSObject **)kInterAppAudioScope;
            if (!*(_QWORD *)kInterAppAudioScope)
            {
LABEL_90:
              IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v44);
              MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)buf);
              goto LABEL_42;
            }
          }
          else
          {
            v38 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v57 = 136315906;
            *(_QWORD *)&v57[4] = "IPCAUClient.cpp";
            *(_WORD *)&v57[12] = 1024;
            *(_DWORD *)&v57[14] = 433;
            *(_WORD *)&v57[18] = 1024;
            *(_DWORD *)&v57[20] = v31;
            *(_WORD *)&v57[24] = 1024;
            *(_DWORD *)&v57[26] = -66749;
            _os_log_impl(&dword_18EE07000, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", v57, 0x1Eu);
          }
          goto LABEL_90;
        }
LABEL_82:
        v22 = v31;
        if (!(_DWORD)v31)
        {
          if (*v51)
            v39 = *v51;
          else
            v39 = *(const void **)&v50[4];
          PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v57, v39);
          *(_QWORD *)v57 = &off_1E2909450;
          v22 = PropertyMarshaller::Deserialize();
          PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)v57);
        }
        goto LABEL_90;
      }
      mig_dealloc_reply_port(*(mach_port_t *)&v57[12]);
    }
    if ((_DWORD)v31 == 268435460)
    {
      if ((*(_WORD *)v57 & 0x1F00) == 0x1100)
        mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&v57[12]);
      mach_msg_destroy((mach_msg_header_t *)v57);
      v31 = 268435460;
      goto LABEL_82;
    }
    goto LABEL_77;
  }
  return v22;
}

void sub_18EEA6BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)&a61);
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&a15);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)&a19);
  _Unwind_Resume(a1);
}

uint64_t IPCAU_SetProperty(_QWORD *a1, int a2, unsigned int a3, int a4, const AudioStreamBasicDescription *__src, size_t __n)
{
  unsigned int v6;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Property;
  mach_port_t v16;
  mach_msg_timeout_t v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  Float64 mSampleRate;
  const UInt8 *BytePtr;
  unsigned int Length;
  int v26;
  int v27;
  unsigned int v28;
  OpaqueAudioComponentInstance *v29;
  int v30;
  mach_msg_timeout_t v31;
  int v32;
  uint64_t v33;
  mach_msg_size_t v34;
  mach_port_name_t reply_port;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  mach_port_t v39;
  mach_msg_timeout_t v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v48;
  char v49;
  __int128 outData;
  __int128 v51;
  uint64_t v52;
  unsigned int v53;
  _BYTE v54[12];
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  CFDataRef *v59;
  _BYTE buf[64];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[28];
  uint64_t v77;

  v6 = __n;
  v77 = *MEMORY[0x1E0C80C00];
  v11 = a1[4];
  if (kInterAppAudioScope)
  {
    v12 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_8;
  }
  else
  {
    v12 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    AUPropertyValueFormatter::AUPropertyValueFormatter((AUPropertyValueFormatter *)v54, a2, a3, a4, __src, v6);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1129;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v11;
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = *(_QWORD *)v54;
    _os_log_impl(&dword_18EE07000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d -> %p: %s", buf, 0x26u);
    if (*(_QWORD *)v54)
      free(*(void **)v54);
  }
LABEL_8:
  v13 = 4294900547;
  v52 = 0;
  outData = 0u;
  v51 = 0u;
  v14 = *(_QWORD *)(v11 + 16);
  if (!*(_DWORD *)(v14 + 48))
  {
    Property = 4294900547;
    goto LABEL_107;
  }
  v53 = 0;
  if (a2 > 26)
  {
    if (a2 == 27)
    {
      if (*(_BYTE *)(v11 + 84))
        goto LABEL_35;
      if (v6 < 0x28)
        goto LABEL_40;
      memcpy((void *)(v11 + 480), __src, v6);
    }
    else
    {
      if (a2 != 100)
        goto LABEL_36;
      if (v6 != 8)
        goto LABEL_40;
      v22 = *(const void **)(v11 + 520);
      if (v22)
        _Block_release(v22);
      mSampleRate = __src->mSampleRate;
      *(Float64 *)(v11 + 520) = __src->mSampleRate;
      if (mSampleRate != 0.0)
      {
        Property = 0;
        *(_QWORD *)(v11 + 520) = _Block_copy(*(const void **)&mSampleRate);
        goto LABEL_107;
      }
    }
    Property = 0;
    goto LABEL_107;
  }
  if (a2 == 1)
  {
    if (!*(_BYTE *)(v11 + 84))
    {
      if (v6 >= 0x10)
      {
        if (!a4)
        {
          v29 = *(OpaqueAudioComponentInstance **)&__src->mSampleRate;
          if (*(_QWORD *)&__src->mSampleRate)
          {
            *(_DWORD *)buf = 40;
            Property = AudioUnitGetProperty(v29, 8u, 2u, __src->mFormatID, &outData, (UInt32 *)buf);
            v53 = Property;
            if ((_DWORD)Property)
              goto LABEL_107;
            v14 = *(_QWORD *)(v11 + 16);
          }
          IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v48, v14, &v53);
          Property = v53;
          if (!v53)
          {
            v39 = *(_DWORD *)(*(_QWORD *)(v11 + 16) + 48);
            if (v49)
              v40 = 0x7FFFFFFF;
            else
              v40 = 10000;
            v41 = *(_DWORD *)(v11 + 80);
            v42 = *(_QWORD *)&__src->mSampleRate != 0;
            *(_OWORD *)buf = outData;
            *(_OWORD *)&buf[16] = v51;
            *(_QWORD *)&buf[32] = v52;
            v43 = IPCAUClient_ConnectInput(v39, v40, v41, v42, (__int128 *)buf);
            v21 = v43;
            if ((_DWORD)v43 == 268435459)
              goto LABEL_82;
            if (!(_DWORD)v43)
            {
              v13 = 0;
              *(_DWORD *)(v11 + 160) = *(_QWORD *)&__src->mSampleRate != 0;
              *(_OWORD *)(v11 + 184) = *(_OWORD *)&__src->mSampleRate;
              goto LABEL_115;
            }
LABEL_81:
            if ((_DWORD)v21 != -308)
            {
              v13 = v21;
              goto LABEL_115;
            }
LABEL_82:
            if (kInterAppAudioScope)
            {
              v44 = *(NSObject **)kInterAppAudioScope;
              if (!*(_QWORD *)kInterAppAudioScope)
                goto LABEL_115;
            }
            else
            {
              v44 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v54 = 136315906;
              *(_QWORD *)&v54[4] = "IPCAUClient.cpp";
              v55 = 1024;
              v56 = 433;
              v57 = 1024;
              v58 = v21;
              LOWORD(v59) = 1024;
              *(_DWORD *)((char *)&v59 + 2) = -66749;
              _os_log_impl(&dword_18EE07000, v44, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", v54, 0x1Eu);
            }
            goto LABEL_115;
          }
LABEL_59:
          IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v48);
          goto LABEL_107;
        }
LABEL_33:
        Property = 4294956419;
        goto LABEL_107;
      }
LABEL_40:
      Property = 4294956445;
      goto LABEL_107;
    }
LABEL_35:
    Property = 4294956447;
    goto LABEL_107;
  }
  if (a2 != 23)
  {
LABEL_36:
    PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v54, 0);
    *(_QWORD *)v54 = &off_1E2909450;
    Property = PropertyMarshaller::Serialize();
    v53 = Property;
    if ((_DWORD)Property)
    {
LABEL_106:
      PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)v54);
      goto LABEL_107;
    }
    IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v48, *(_QWORD *)(v11 + 16), &v53);
    Property = v53;
    if (v53)
    {
      IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v48);
      goto LABEL_106;
    }
    if (v59 && *v59)
    {
      BytePtr = CFDataGetBytePtr(*v59);
      if (v59 && *v59)
      {
        Length = CFDataGetLength(*v59);
        goto LABEL_50;
      }
    }
    else
    {
      BytePtr = 0;
    }
    Length = 0;
LABEL_50:
    if (v49)
      v26 = 0x7FFFFFFF;
    else
      v26 = 10000;
    v27 = *(_DWORD *)(v11 + 80);
    if (v6 > 0x100)
    {
      v28 = 0;
    }
    else
    {
      v28 = Length;
      BytePtr = 0;
      Length = 0;
    }
    v30 = *(_DWORD *)(*(_QWORD *)(v11 + 16) + 48);
    v75 = 0u;
    memset(v76, 0, sizeof(v76));
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    memset(&buf[32], 0, 32);
    memset(buf, 0, 24);
    *(_DWORD *)&buf[24] = 1;
    *(_QWORD *)&buf[28] = BytePtr;
    *(_DWORD *)&buf[36] = 16777472;
    *(_DWORD *)&buf[40] = Length;
    *(_QWORD *)&buf[44] = *MEMORY[0x1E0C804E8];
    *(_DWORD *)&buf[52] = v27;
    *(_DWORD *)&buf[56] = a2;
    *(_DWORD *)&buf[60] = a3;
    LODWORD(v61) = a4;
    if (v28 > 0x100)
    {
      v13 = 4294966989;
      goto LABEL_105;
    }
    v31 = v26;
    v32 = v30;
    __memcpy_chk();
    DWORD1(v61) = v28;
    v33 = (v28 + 3) & 0xFFFFFFFC;
    v34 = v33 + 76;
    *(_DWORD *)&buf[v33 + 72] = Length;
    reply_port = mig_get_reply_port();
    *(_DWORD *)&buf[8] = v32;
    *(_DWORD *)&buf[12] = reply_port;
    *(_DWORD *)buf = -2147478253;
    *(_QWORD *)&buf[16] = 0x1605F00000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set((mach_msg_header_t *)buf);
      reply_port = *(_DWORD *)&buf[12];
    }
    v36 = mach_msg((mach_msg_header_t *)buf, 275, v34, 0x2Cu, reply_port, v31, 0);
    v37 = v36;
    if ((v36 - 268435458) <= 0xE && ((1 << (v36 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(*(mach_port_t *)&buf[12]);
    }
    else
    {
      if (!(_DWORD)v36)
      {
        if (*(_DWORD *)&buf[20] == 71)
        {
          v38 = 4294966988;
        }
        else if (*(_DWORD *)&buf[20] == 90307)
        {
          v38 = 4294966996;
          if ((*(_DWORD *)buf & 0x80000000) == 0 && *(_DWORD *)&buf[4] == 36 && !*(_DWORD *)&buf[8])
          {
            v38 = *(unsigned int *)&buf[32];
            if (!*(_DWORD *)&buf[32])
            {
              v13 = 0;
              goto LABEL_105;
            }
          }
        }
        else
        {
          v38 = 4294966995;
        }
        goto LABEL_95;
      }
      mig_dealloc_reply_port(*(mach_port_t *)&buf[12]);
    }
    v38 = 268435460;
    if ((_DWORD)v37 != 268435460)
      goto LABEL_96;
    if ((*(_WORD *)buf & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&buf[12]);
LABEL_95:
    mach_msg_destroy((mach_msg_header_t *)buf);
    v37 = v38;
LABEL_96:
    if ((_DWORD)v37 == 268435459 || (_DWORD)v37 == -308)
    {
      if (kInterAppAudioScope)
      {
        v45 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
          goto LABEL_105;
      }
      else
      {
        v45 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 433;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v37;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = -66749;
        _os_log_impl(&dword_18EE07000, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", buf, 0x1Eu);
      }
      goto LABEL_105;
    }
    v13 = v37;
LABEL_105:
    IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v48);
    Property = v13;
    goto LABEL_106;
  }
  if (*(_BYTE *)(v11 + 84))
    goto LABEL_35;
  if (v6 < 0x10)
    goto LABEL_40;
  if (a4)
    goto LABEL_33;
  IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v48, v14, &v53);
  Property = v53;
  if (v53)
    goto LABEL_59;
  v16 = *(_DWORD *)(*(_QWORD *)(v11 + 16) + 48);
  if (v49)
    v17 = 0x7FFFFFFF;
  else
    v17 = 10000;
  v18 = *(_DWORD *)(v11 + 80);
  v19 = *(_QWORD *)&__src->mSampleRate != 0;
  *(_OWORD *)buf = outData;
  *(_OWORD *)&buf[16] = v51;
  *(_QWORD *)&buf[32] = v52;
  v20 = IPCAUClient_ConnectInput(v16, v17, v18, v19, (__int128 *)buf);
  v21 = v20;
  if ((_DWORD)v20 == 268435459)
    goto LABEL_82;
  if ((_DWORD)v20)
    goto LABEL_81;
  v13 = 0;
  *(_DWORD *)(v11 + 160) = 2 * (*(_QWORD *)&__src->mSampleRate != 0);
  *(_OWORD *)(v11 + 168) = *(_OWORD *)&__src->mSampleRate;
LABEL_115:
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v48);
  Property = v13;
LABEL_107:
  if (kInterAppAudioScope)
  {
    v46 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      return Property;
  }
  else
  {
    v46 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
  {
    CAX4CCString::CAX4CCString((CAX4CCString *)v54, Property);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1131;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v11;
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v54;
    _os_log_impl(&dword_18EE07000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d <- %p (%s)", buf, 0x26u);
  }
  return Property;
}

void sub_18EEA74BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&a9);
  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)&a17);
  _Unwind_Resume(a1);
}

uint64_t IPCAU_GetParameter(_QWORD *a1, int a2, int a3, int a4, float *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  mach_port_t v14;
  mach_msg_timeout_t v15;
  unsigned int v16;
  mach_port_t reply_port;
  uint64_t v18;
  BOOL v19;
  NSObject *v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  mach_msg_header_t msg;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a5)
    return 4294967246;
  v6 = 4294900547;
  v7 = a1[4];
  v8 = *(_QWORD *)(v7 + 16);
  if (*(_DWORD *)(v8 + 48))
  {
    v23 = 0;
    IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v21, v8, &v23);
    v12 = v23;
    if (v23)
    {
LABEL_4:
      IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v21);
      return v12;
    }
    v14 = *(_DWORD *)(*(_QWORD *)(v7 + 16) + 48);
    if (v22)
      v15 = 0x7FFFFFFF;
    else
      v15 = 10000;
    v16 = *(_DWORD *)(v7 + 80);
    v25 = *MEMORY[0x1E0C804E8];
    v26 = v16;
    v27 = a2;
    v28 = a3;
    v29 = a4;
    reply_port = mig_get_reply_port();
    *(_QWORD *)&msg.msgh_bits = 5395;
    msg.msgh_remote_port = v14;
    msg.msgh_local_port = reply_port;
    *(_QWORD *)&msg.msgh_voucher_port = 0x1606300000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set(&msg);
      reply_port = msg.msgh_local_port;
    }
    v18 = mach_msg(&msg, 275, 0x30u, 0x30u, reply_port, v15, 0);
    v12 = v18;
    if ((v18 - 268435458) <= 0xE && ((1 << (v18 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(msg.msgh_local_port);
      goto LABEL_28;
    }
    if ((_DWORD)v18)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
LABEL_28:
      if ((_DWORD)v12 == 268435460)
      {
        if ((msg.msgh_bits & 0x1F00) == 0x1100)
          mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
        mach_msg_destroy(&msg);
        v12 = 268435460;
        goto LABEL_4;
      }
LABEL_37:
      if ((_DWORD)v12 != 268435459 && (_DWORD)v12 != -308)
        goto LABEL_4;
      if (kInterAppAudioScope)
      {
        v20 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
        {
LABEL_45:
          v12 = 4294900547;
          goto LABEL_4;
        }
      }
      else
      {
        v20 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        msg.msgh_bits = 136315906;
        *(_QWORD *)&msg.msgh_size = "IPCAUClient.cpp";
        LOWORD(msg.msgh_local_port) = 1024;
        *(mach_port_t *)((char *)&msg.msgh_local_port + 2) = 433;
        HIWORD(msg.msgh_voucher_port) = 1024;
        msg.msgh_id = v12;
        LOWORD(v25) = 1024;
        *(_DWORD *)((char *)&v25 + 2) = -66749;
        _os_log_impl(&dword_18EE07000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", (uint8_t *)&msg, 0x1Eu);
      }
      goto LABEL_45;
    }
    if (msg.msgh_id == 71)
    {
      v12 = 4294966988;
    }
    else if (msg.msgh_id == 90311)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 40)
        {
          if (!msg.msgh_remote_port)
          {
            v12 = v26;
            if (!v26)
            {
              *(_DWORD *)a5 = v27;
              goto LABEL_4;
            }
            goto LABEL_36;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port)
            v19 = 1;
          else
            v19 = v26 == 0;
          if (v19)
            v12 = 4294966996;
          else
            v12 = v26;
          goto LABEL_36;
        }
      }
      v12 = 4294966996;
    }
    else
    {
      v12 = 4294966995;
    }
LABEL_36:
    mach_msg_destroy(&msg);
    goto LABEL_37;
  }
  return v6;
}

uint64_t IPCAU_SetParameter(_QWORD *a1, mach_msg_size_t a2, int a3, int a4, float a5, mach_port_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _opaque_pthread_t *v14;
  uint64_t v15;
  mach_port_t v16;
  mach_msg_timeout_t v17;
  unsigned int v18;
  mach_port_t reply_port;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v24;
  char v25;
  unsigned int v26;
  mach_msg_header_t msg;
  uint64_t v28;
  unsigned int v29;
  mach_msg_size_t v30;
  int v31;
  int v32;
  float v33;
  mach_port_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v7 = 4294900547;
  v8 = a1[4];
  v9 = *(_QWORD *)(v8 + 16);
  if (*(_DWORD *)(v9 + 48))
  {
    v14 = *(_opaque_pthread_t **)(v8 + 472);
    if (!v14)
      goto LABEL_5;
    if (v14 != pthread_self())
    {
      v9 = *(_QWORD *)(v8 + 16);
LABEL_5:
      v26 = 0;
      IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v24, v9, &v26);
      v15 = v26;
      if (!v26)
      {
        v16 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 48);
        if (v25)
          v17 = 0x7FFFFFFF;
        else
          v17 = 10000;
        v18 = *(_DWORD *)(v8 + 80);
        v28 = *MEMORY[0x1E0C804E8];
        v29 = v18;
        v30 = a2;
        v31 = a3;
        v32 = a4;
        v33 = a5;
        v34 = a6;
        reply_port = mig_get_reply_port();
        *(_QWORD *)&msg.msgh_bits = 5395;
        msg.msgh_remote_port = v16;
        msg.msgh_local_port = reply_port;
        *(_QWORD *)&msg.msgh_voucher_port = 0x1606400000000;
        if (MEMORY[0x1E0C85B60])
        {
          voucher_mach_msg_set(&msg);
          reply_port = msg.msgh_local_port;
        }
        v20 = mach_msg(&msg, 275, 0x38u, 0x2Cu, reply_port, v17, 0);
        v15 = v20;
        if ((v20 - 268435458) <= 0xE && ((1 << (v20 - 2)) & 0x4003) != 0)
        {
          mig_put_reply_port(msg.msgh_local_port);
LABEL_24:
          v21 = 268435460;
          if ((_DWORD)v15 != 268435460)
          {
LABEL_30:
            if ((_DWORD)v15 != 268435459 && (_DWORD)v15 != -308)
              goto LABEL_39;
            if (kInterAppAudioScope)
            {
              v22 = *(NSObject **)kInterAppAudioScope;
              if (!*(_QWORD *)kInterAppAudioScope)
              {
LABEL_38:
                v15 = 4294900547;
                goto LABEL_39;
              }
            }
            else
            {
              v22 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              msg.msgh_bits = 136315906;
              *(_QWORD *)&msg.msgh_size = "IPCAUClient.cpp";
              LOWORD(msg.msgh_local_port) = 1024;
              *(mach_port_t *)((char *)&msg.msgh_local_port + 2) = 433;
              HIWORD(msg.msgh_voucher_port) = 1024;
              msg.msgh_id = v15;
              LOWORD(v28) = 1024;
              *(_DWORD *)((char *)&v28 + 2) = -66749;
              _os_log_impl(&dword_18EE07000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", (uint8_t *)&msg, 0x1Eu);
            }
            goto LABEL_38;
          }
          if ((msg.msgh_bits & 0x1F00) == 0x1100)
            mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
LABEL_29:
          mach_msg_destroy(&msg);
          v15 = v21;
          goto LABEL_30;
        }
        if ((_DWORD)v20)
        {
          mig_dealloc_reply_port(msg.msgh_local_port);
          goto LABEL_24;
        }
        if (msg.msgh_id == 71)
        {
          v21 = 4294966988;
          goto LABEL_29;
        }
        if (msg.msgh_id != 90312)
        {
          v21 = 4294966995;
          goto LABEL_29;
        }
        v21 = 4294966996;
        if ((msg.msgh_bits & 0x80000000) != 0)
          goto LABEL_29;
        if (msg.msgh_size != 36)
          goto LABEL_29;
        if (msg.msgh_remote_port)
          goto LABEL_29;
        v21 = v29;
        if (v29)
          goto LABEL_29;
        v15 = 0;
      }
LABEL_39:
      IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v24);
      return v15;
    }
    LOBYTE(msg.msgh_bits) = 2;
    BYTE1(msg.msgh_bits) = a3;
    HIWORD(msg.msgh_bits) = a4;
    msg.msgh_size = a2;
    *(float *)&msg.msgh_remote_port = a5;
    msg.msgh_local_port = a6;
    return IPCAUClient::AUInstance::ControlMessage((IPCAUClient::AUInstance *)v8, &msg, 0x10uLL, 0, 0);
  }
  return v7;
}

uint64_t IPCAU_Reset(_QWORD *a1, int a2, int a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  mach_msg_timeout_t v12;
  unsigned int v13;
  mach_port_name_t reply_port;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  _BYTE buf[12];
  _BYTE rcv_name[20];
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a1[4];
  if (kInterAppAudioScope)
  {
    v6 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_7;
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
    *(_WORD *)rcv_name = 1024;
    *(_DWORD *)&rcv_name[2] = 1002;
    *(_WORD *)&rcv_name[6] = 2048;
    *(_QWORD *)&rcv_name[8] = v5;
    _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p", buf, 0x1Cu);
  }
LABEL_7:
  v7 = 4294900547;
  v8 = *(_QWORD *)(v5 + 16);
  if (*(_DWORD *)(v8 + 48))
  {
    v21 = 0;
    IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v19, v8, &v21);
    v9 = v21;
    if (v21)
    {
LABEL_9:
      IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v19);
      return v9;
    }
    v11 = *(_DWORD *)(*(_QWORD *)(v5 + 16) + 48);
    if (v20)
      v12 = 0x7FFFFFFF;
    else
      v12 = 10000;
    v13 = *(_DWORD *)(v5 + 80);
    *(_QWORD *)&rcv_name[12] = *MEMORY[0x1E0C804E8];
    v24 = v13;
    v25 = a2;
    v26 = a3;
    reply_port = mig_get_reply_port();
    *(_QWORD *)buf = 5395;
    *(_DWORD *)&buf[8] = v11;
    *(_DWORD *)rcv_name = reply_port;
    *(_QWORD *)&rcv_name[4] = 0x1605C00000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set((mach_msg_header_t *)buf);
      reply_port = *(_DWORD *)rcv_name;
    }
    v15 = mach_msg((mach_msg_header_t *)buf, 275, 0x2Cu, 0x2Cu, reply_port, v12, 0);
    v9 = v15;
    if ((v15 - 268435458) <= 0xE && ((1 << (v15 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(*(mach_port_t *)rcv_name);
    }
    else
    {
      if (!(_DWORD)v15)
      {
        if (*(_DWORD *)&rcv_name[8] == 71)
        {
          v16 = 4294966988;
        }
        else if (*(_DWORD *)&rcv_name[8] == 90304)
        {
          v16 = 4294966996;
          if ((*(_DWORD *)buf & 0x80000000) == 0 && *(_DWORD *)&buf[4] == 36 && !*(_DWORD *)&buf[8])
          {
            v16 = v24;
            if (!v24)
            {
              v9 = 0;
              goto LABEL_43;
            }
          }
        }
        else
        {
          v16 = 4294966995;
        }
        goto LABEL_33;
      }
      mig_dealloc_reply_port(*(mach_port_t *)rcv_name);
    }
    v16 = 268435460;
    if ((_DWORD)v9 != 268435460)
    {
LABEL_34:
      if ((_DWORD)v9 == 268435459 || (_DWORD)v9 == -308)
      {
        if (kInterAppAudioScope)
        {
          v17 = *(NSObject **)kInterAppAudioScope;
          if (!*(_QWORD *)kInterAppAudioScope)
          {
LABEL_42:
            v9 = 4294900547;
            goto LABEL_43;
          }
        }
        else
        {
          v17 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
          *(_WORD *)rcv_name = 1024;
          *(_DWORD *)&rcv_name[2] = 433;
          *(_WORD *)&rcv_name[6] = 1024;
          *(_DWORD *)&rcv_name[8] = v9;
          *(_WORD *)&rcv_name[12] = 1024;
          *(_DWORD *)&rcv_name[14] = -66749;
          _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", buf, 0x1Eu);
        }
        goto LABEL_42;
      }
LABEL_43:
      v21 = v9;
      if (*(_BYTE *)(v5 + 84))
      {
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 384) + 16))(v5 + 384);
        **(_DWORD **)(v5 + 304) = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 384) + 24))(v5 + 384);
      }
      goto LABEL_9;
    }
    if ((*(_WORD *)buf & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)rcv_name);
LABEL_33:
    mach_msg_destroy((mach_msg_header_t *)buf);
    v9 = v16;
    goto LABEL_34;
  }
  return v7;
}

void sub_18EEA7EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t IPCAU_AddPropertyListener(_QWORD *a1, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  int v29;
  mach_msg_timeout_t v30;
  int v31;
  mach_port_name_t reply_port;
  mach_msg_return_t v33;
  mach_msg_return_t v34;
  int v35;
  NSObject *v36;
  uint64_t v38;
  char v39;
  unsigned int v40;
  _BYTE msg[36];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = 4294900547;
  v5 = a1[4];
  if (*(_DWORD *)(*(_QWORD *)(v5 + 16) + 48))
  {
    v9 = *(_QWORD *)(v5 + 104);
    v10 = *(_QWORD *)(v5 + 112);
    if (v9 == v10)
    {
      v13 = 1;
    }
    else
    {
      v11 = v9 + 24;
      do
      {
        v12 = *(_DWORD *)(v11 - 24);
        v13 = v12 != a2;
        v14 = v12 == a2 || v11 == v10;
        v11 += 24;
      }
      while (!v14);
    }
    v15 = *(_QWORD *)(v5 + 120);
    if (v10 >= v15)
    {
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v9) >> 3);
      v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v9) >> 3);
      if (2 * v19 > v18)
        v18 = 2 * v19;
      if (v19 >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      else
        v20 = v18;
      if (v20)
        v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v20);
      else
        v21 = 0;
      v22 = v20 + 24 * v17;
      v23 = v20 + 24 * v21;
      *(_DWORD *)v22 = a2;
      *(_QWORD *)(v22 + 8) = a3;
      *(_QWORD *)(v22 + 16) = a4;
      v16 = v22 + 24;
      v25 = *(char **)(v5 + 104);
      v24 = *(char **)(v5 + 112);
      if (v24 != v25)
      {
        do
        {
          v26 = *(_OWORD *)(v24 - 24);
          *(_QWORD *)(v22 - 8) = *((_QWORD *)v24 - 1);
          *(_OWORD *)(v22 - 24) = v26;
          v22 -= 24;
          v24 -= 24;
        }
        while (v24 != v25);
        v24 = *(char **)(v5 + 104);
      }
      *(_QWORD *)(v5 + 104) = v22;
      *(_QWORD *)(v5 + 112) = v16;
      *(_QWORD *)(v5 + 120) = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_DWORD *)v10 = a2;
      v16 = v10 + 24;
      *(_QWORD *)(v10 + 8) = a3;
      *(_QWORD *)(v10 + 16) = a4;
    }
    *(_QWORD *)(v5 + 112) = v16;
    v27 = !v13;
    if ((a2 & 0xFFFFFFFE) == 0x64)
      v27 = 1;
    if ((v27 & 1) != 0)
      return 0;
    v40 = 0;
    IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v38, *(_QWORD *)(v5 + 16), &v40);
    v28 = v40;
    if (v40)
    {
      IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v38);
      return v28;
    }
    v29 = *(_DWORD *)(*(_QWORD *)(v5 + 16) + 48);
    if (v39)
      v30 = 0x7FFFFFFF;
    else
      v30 = 10000;
    v31 = *(_DWORD *)(v5 + 80);
    v42 = 0;
    memset(&msg[4], 0, 32);
    *(_QWORD *)&msg[24] = *MEMORY[0x1E0C804E8];
    *(_DWORD *)&msg[32] = v31;
    LODWORD(v42) = a2;
    reply_port = mig_get_reply_port();
    *(_DWORD *)&msg[8] = v29;
    *(_DWORD *)&msg[12] = reply_port;
    *(_DWORD *)msg = 5395;
    *(_QWORD *)&msg[16] = 0x1606000000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set((mach_msg_header_t *)msg);
      reply_port = *(_DWORD *)&msg[12];
    }
    v33 = mach_msg((mach_msg_header_t *)msg, 275, 0x28u, 0x2Cu, reply_port, v30, 0);
    v34 = v33;
    if ((v33 - 268435458) <= 0xE && ((1 << (v33 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(*(mach_port_t *)&msg[12]);
    }
    else
    {
      if (!v33)
      {
        if (*(_DWORD *)&msg[20] == 71)
        {
          v35 = -308;
        }
        else if (*(_DWORD *)&msg[20] == 90308)
        {
          v35 = -300;
          if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
          {
            v35 = *(_DWORD *)&msg[32];
            if (!*(_DWORD *)&msg[32])
              goto LABEL_63;
          }
        }
        else
        {
          v35 = -301;
        }
        goto LABEL_54;
      }
      mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
    }
    v35 = 268435460;
    if (v34 != 268435460)
    {
LABEL_55:
      if (v34 != 268435459 && v34 != -308)
        goto LABEL_63;
      if (kInterAppAudioScope)
      {
        v36 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
        {
LABEL_63:
          IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v38);
          return 0;
        }
      }
      else
      {
        v36 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)msg = 136315906;
        *(_QWORD *)&msg[4] = "IPCAUClient.cpp";
        *(_WORD *)&msg[12] = 1024;
        *(_DWORD *)&msg[14] = 433;
        *(_WORD *)&msg[18] = 1024;
        *(_DWORD *)&msg[20] = v34;
        *(_WORD *)&msg[24] = 1024;
        *(_DWORD *)&msg[26] = -66749;
        _os_log_impl(&dword_18EE07000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", msg, 0x1Eu);
      }
      goto LABEL_63;
    }
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
LABEL_54:
    mach_msg_destroy((mach_msg_header_t *)msg);
    v34 = v35;
    goto LABEL_55;
  }
  return v4;
}

uint64_t IPCAU_RemovePropertyListener(IPCAUClient::AUInstance **a1, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int))
{
  return IPCAUClient::AUInstance::RemovePropertyListener(a1[4], a2, a3, 0, 0);
}

uint64_t IPCAU_Render(IPCAUClient::AUInstance **a1, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5, AudioBufferList *a6)
{
  if (a2 && a3 && a6)
    return IPCAUClient::AUInstance::RenderOrProcess(a1[4], 0, a2, a3, a4, a5, a6);
  else
    return 4294967246;
}

uint64_t IPCAU_AddRenderNotify(_QWORD *a1, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  v5 = a1[4];
  *(_BYTE *)(v5 + 152) = 1;
  TThreadSafeList<IPCAUClient::RenderCallback>::AllocNode(v5 + 128);
  *(_DWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v7 = (unint64_t *)(v5 + 136);
LABEL_2:
  v8 = *v7;
  *(_QWORD *)v6 = *v7;
  do
  {
    v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_2;
    }
  }
  while (__stlxr(v6, v7));
  return 0;
}

uint64_t IPCAU_RemoveRenderNotify(_QWORD *a1, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  v5 = a1[4];
  TThreadSafeList<IPCAUClient::RenderCallback>::AllocNode(v5 + 128);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v7 = (unint64_t *)(v5 + 136);
LABEL_2:
  v8 = *v7;
  *(_QWORD *)v6 = *v7;
  do
  {
    v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_2;
    }
  }
  while (__stlxr(v6, v7));
  return 0;
}

uint64_t IPCAU_RemovePropertyListenerWithUserData(IPCAUClient::AUInstance **a1, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4)
{
  return IPCAUClient::AUInstance::RemovePropertyListener(a1[4], a2, a3, a4, 1);
}

uint64_t IPCAU_Process(IPCAUClient::AUInstance **a1, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, AudioBufferList *a5)
{
  if (a2 && a3 && a5)
    return IPCAUClient::AUInstance::RenderOrProcess(a1[4], 1, a2, a3, 0, a4, a5);
  else
    return 4294967246;
}

uint64_t IPCAUClient::AUInstance::RenderOrProcess(IPCAUClient::AUInstance *this, char a2, unsigned int *a3, const AudioTimeStamp *a4, uint64_t a5, uint64_t a6, AudioBufferList *a7)
{
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(_QWORD, uint64_t, uint64_t);
  unsigned int (*v21)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v22)(_QWORD, _BYTE *, char *, __int16 *, uint64_t, char *, uint64_t, uint64_t);
  unsigned int (*v23)(_QWORD, _BYTE *, __int16 *, uint64_t, char *, uint64_t, uint64_t);
  int v24;
  int v25;
  int v26;
  char *v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  _QWORD *v34;
  int v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  AudioBufferList *v53;
  uint64_t v54;
  int v56;
  int v57;
  CADeprecated::CAPThread *v58;
  _opaque_pthread_t *v59;
  auoop *ScheduledPriority;
  int v61;
  int v62;
  uint64_t mSampleTime;
  UInt64 mHostTime;
  Float64 mRateScalar;
  AudioTimeStampFlags v66;
  AudioUnitRenderActionFlags v67;
  mach_port_name_t reply_port;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  NSObject *v72;
  char *j;
  unint64_t v74;
  unint64_t v75;
  unint64_t k;
  size_t v77;
  void *mData;
  void *v79;
  int v80;
  int v81;
  char v83;
  __int16 v84;
  unsigned int i;
  _BYTE msg[36];
  unsigned int v87;
  uint64_t v88;
  int v89;
  AudioUnitRenderActionFlags v90;
  uint64_t v91;
  UInt64 v92;
  Float64 v93;
  AudioTimeStampFlags v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 84))
    return 4294956429;
  if (!*((_QWORD *)this + 59))
    *((_QWORD *)this + 59) = pthread_self();
  v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 48) + 16))((char *)this + 384);
  i = 0;
  v14 = (unsigned int *)IPCAUSharedMemoryBase::mutableAudioBufferList((IPCAUClient::AUInstance *)((char *)this + 280), *((_DWORD *)this + 23), a6);
  if (!v14)
    goto LABEL_97;
  v15 = v14;
  if (a7->mNumberBuffers != *v14)
  {
    v18 = 4294967246;
    goto LABEL_98;
  }
  v16 = *((_QWORD *)this + 38);
  if (!v16)
    goto LABEL_33;
  v17 = v16 + *((unsigned int *)this + 94);
  if (*(_BYTE *)(v17 + 2176))
  {
    v18 = 4294900549;
    goto LABEL_98;
  }
  v80 = v13;
  v19 = v17 + 2048;
  *(_DWORD *)(v17 + 2120) = 0;
  v20 = (unsigned int (*)(_QWORD, uint64_t, uint64_t))*((_QWORD *)this + 61);
  if (v20 && !v20(*((_QWORD *)this + 60), v17 + 2104, v17 + 2112))
    *(_DWORD *)(v19 + 72) |= 0x100u;
  v21 = (unsigned int (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)this + 62);
  if (v21 && !v21(*((_QWORD *)this + 60), v19 + 76, v19 + 80, v19 + 84, v19 + 88))
    *(_DWORD *)(v19 + 72) |= 0x200u;
  msg[0] = 0;
  v84 = 0;
  v83 = 0;
  v22 = (unsigned int (*)(_QWORD, _BYTE *, char *, __int16 *, uint64_t, char *, uint64_t, uint64_t))*((_QWORD *)this + 64);
  if (v22 && !v22(*((_QWORD *)this + 60), msg, (char *)&v84 + 1, &v84, v19 + 96, &v83, v19 + 104, v19 + 112))
  {
    v26 = *(_DWORD *)(v19 + 72);
    v25 = v26 | 0x400;
    *(_DWORD *)(v19 + 72) = v26 | 0x400;
    if (msg[0])
    {
      v25 = v26 | 0x402;
      *(_DWORD *)(v19 + 72) = v26 | 0x402;
    }
    if (!HIBYTE(v84))
      goto LABEL_28;
    v25 |= 4u;
    goto LABEL_27;
  }
  v23 = (unsigned int (*)(_QWORD, _BYTE *, __int16 *, uint64_t, char *, uint64_t, uint64_t))*((_QWORD *)this + 63);
  if (v23 && !v23(*((_QWORD *)this + 60), msg, &v84, v19 + 96, &v83, v19 + 104, v19 + 112))
  {
    v24 = *(_DWORD *)(v19 + 72);
    v25 = v24 | 0x400;
    *(_DWORD *)(v19 + 72) = v24 | 0x400;
    if (!msg[0])
    {
LABEL_28:
      if ((_BYTE)v84)
      {
        v25 |= 1u;
        *(_DWORD *)(v19 + 72) = v25;
      }
      if (v83)
        *(_DWORD *)(v19 + 72) = v25 | 8;
      goto LABEL_32;
    }
    v25 = v24 | 0x402;
LABEL_27:
    *(_DWORD *)(v19 + 72) = v25;
    goto LABEL_28;
  }
LABEL_32:
  *(_QWORD *)(v19 + 120) = mach_absolute_time();
  v13 = v80;
LABEL_33:
  if ((a2 & 1) != 0)
  {
    v18 = 4294967292;
    if (!v13)
      return v18;
    goto LABEL_99;
  }
  if (*((_BYTE *)this + 152))
  {
    v27 = (char *)this + 128;
    v28 = (unint64_t *)((char *)this + 136);
    while (1)
    {
      v29 = (_QWORD *)*v28;
      if (!*v28)
        break;
      while (1)
      {
        v30 = __ldaxr(v28);
        if ((_QWORD *)v30 != v29)
          break;
        if (!__stlxr(0, v28))
        {
          v31 = 0;
          do
          {
            v32 = (_QWORD *)v31;
            v31 = (unint64_t)v29;
            v29 = (_QWORD *)*v29;
            *(_QWORD *)v31 = v32;
          }
          while (v29);
          v33 = (unint64_t *)((char *)this + 144);
          while (1)
          {
            v34 = v32;
            v35 = *(_DWORD *)(v31 + 8);
            if (v35)
              break;
            v41 = *(unint64_t **)v27;
            v42 = (unint64_t *)((char *)this + 128);
            if (*(_QWORD *)v27)
            {
              do
              {
                v42 = v41;
                if (v41[2] == *(_QWORD *)(v31 + 16) && v41[3] == *(_QWORD *)(v31 + 24))
                {
                  while (1)
                  {
                    v49 = *v33;
                    *(_QWORD *)v31 = *v33;
                    while (1)
                    {
                      v50 = __ldaxr(v33);
                      if (v50 != v49)
                        break;
                      if (!__stlxr(v31, v33))
                        goto LABEL_63;
                    }
                    __clrex();
                  }
                }
                v41 = (unint64_t *)*v41;
              }
              while (*v42);
            }
            *v42 = v31;
            *(_QWORD *)v31 = 0;
LABEL_63:
            if (!v34)
              goto LABEL_89;
            v32 = (_QWORD *)*v34;
            v31 = (unint64_t)v34;
          }
          if (v35 != 2)
          {
            if (v35 == 1)
            {
              v36 = *(unint64_t **)v27;
              if (*(_QWORD *)v27)
              {
                v37 = (unint64_t *)((char *)this + 128);
                do
                {
                  v38 = v36;
                  if (v36[2] == *(_QWORD *)(v31 + 16) && v36[3] == *(_QWORD *)(v31 + 24))
                  {
                    *v37 = *v36;
                    while (1)
                    {
                      v51 = *v33;
                      *v36 = *v33;
                      while (1)
                      {
                        v52 = __ldaxr(v33);
                        if (v52 != v51)
                          break;
                        if (!__stlxr((unint64_t)v36, v33))
                          goto LABEL_53;
                      }
                      __clrex();
                    }
                  }
                  v36 = (unint64_t *)*v36;
                  v37 = v38;
                }
                while (*v38);
              }
              while (1)
              {
LABEL_53:
                v39 = *v33;
                *(_QWORD *)v31 = *v33;
                while (1)
                {
                  v40 = __ldaxr(v33);
                  if (v40 != v39)
                    break;
                  if (!__stlxr(v31, v33))
                    goto LABEL_63;
                }
                __clrex();
              }
            }
            goto LABEL_63;
          }
          v43 = *(unint64_t **)v27;
          if (!*(_QWORD *)v27)
            goto LABEL_73;
LABEL_66:
          v44 = (unint64_t *)*v43;
          while (1)
          {
            v45 = *v33;
            *v43 = *v33;
            while (1)
            {
              v46 = __ldaxr(v33);
              if (v46 != v45)
                break;
              if (!__stlxr((unint64_t)v43, v33))
              {
                v43 = v44;
                if (!v44)
                {
                  while (1)
                  {
LABEL_73:
                    v47 = *v33;
                    *(_QWORD *)v31 = *v33;
                    while (1)
                    {
                      v48 = __ldaxr(v33);
                      if (v48 != v47)
                        break;
                      if (!__stlxr(v31, v33))
                        goto LABEL_63;
                    }
                    __clrex();
                  }
                }
                goto LABEL_66;
              }
            }
            __clrex();
          }
        }
      }
      __clrex();
    }
LABEL_89:
    for (i = *a3 | 4;
          ;
          (*((void (**)(_QWORD, unsigned int *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *))v27
           + 2))(*((_QWORD *)v27 + 3), &i, a4, a5, a6, a7))
    {
      v27 = *(char **)v27;
      if (!v27)
        break;
    }
  }
  if (!*((_DWORD *)this + 23))
    goto LABEL_104;
  if (!*((_DWORD *)this + 40))
  {
    v18 = 4294956420;
    goto LABEL_98;
  }
  v53 = (AudioBufferList *)IPCAUSharedMemoryBase::mutableAudioBufferList((IPCAUClient::AUInstance *)((char *)this + 280), 0, a6);
  if (!v53)
  {
LABEL_97:
    v18 = 4294956421;
    goto LABEL_98;
  }
  if (*((_DWORD *)this + 40) == 2)
    v54 = (*((uint64_t (**)(_QWORD, unsigned int *, const AudioTimeStamp *, _QWORD, uint64_t, AudioBufferList *))this
           + 21))(*((_QWORD *)this + 22), a3, a4, 0, a6, v53);
  else
    v54 = AudioUnitRender(*((AudioUnit *)this + 23), a3, a4, *((_DWORD *)this + 48), a6, v53);
  v18 = v54;
  if ((_DWORD)v54)
    goto LABEL_98;
LABEL_104:
  v81 = v13;
  if (*((_BYTE *)this + 153))
  {
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v58 = (CADeprecated::CAPThread *)pthread_self();
    ScheduledPriority = (auoop *)CADeprecated::CAPThread::GetScheduledPriority(v58, v59);
    v56 = (int)ScheduledPriority;
    auoop::gWorkgroupManager(ScheduledPriority);
    v57 = *(_DWORD *)auoop::tlsWorkgroupPort();
    *((_BYTE *)this + 153) = 1;
  }
  v61 = *((_DWORD *)this + 6);
  v62 = *((_DWORD *)this + 20);
  mSampleTime = (uint64_t)a4->mSampleTime;
  mHostTime = a4->mHostTime;
  mRateScalar = a4->mRateScalar;
  v66 = a4->mFlags & 7;
  memset(&msg[4], 0, 32);
  *(_DWORD *)&msg[24] = 1;
  *(_DWORD *)&msg[28] = v57;
  v87 = 1245184;
  v88 = *MEMORY[0x1E0C804E8];
  v67 = *a3;
  v89 = v62;
  v90 = v67;
  v91 = mSampleTime;
  v92 = mHostTime;
  v93 = mRateScalar;
  v94 = v66;
  v95 = 0;
  v96 = a5;
  v97 = a6;
  v98 = v56;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = v61;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = -2147478253;
  *(_QWORD *)&msg[16] = 0x1606600000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    reply_port = *(_DWORD *)&msg[12];
  }
  v69 = mach_msg((mach_msg_header_t *)msg, 275, 0x64u, 0x30u, reply_port, gMediaServerTimeout, 0);
  v70 = v69;
  v13 = v81;
  if ((v69 - 268435458) <= 0xE && ((1 << (v69 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
    goto LABEL_125;
  }
  if (!(_DWORD)v69)
  {
    if (*(_DWORD *)&msg[20] == 71)
    {
      v70 = 4294966988;
    }
    else if (*(_DWORD *)&msg[20] == 90314)
    {
      if ((*(_DWORD *)msg & 0x80000000) == 0)
      {
        if (*(_DWORD *)&msg[4] == 40)
        {
          if (!*(_DWORD *)&msg[8])
          {
            v70 = *(unsigned int *)&msg[32];
            if (!*(_DWORD *)&msg[32])
            {
              *a3 = v87;
              goto LABEL_146;
            }
            goto LABEL_133;
          }
        }
        else if (*(_DWORD *)&msg[4] == 36)
        {
          if (*(_DWORD *)&msg[8])
            v71 = 1;
          else
            v71 = *(_DWORD *)&msg[32] == 0;
          if (v71)
            v70 = 4294966996;
          else
            v70 = *(unsigned int *)&msg[32];
          goto LABEL_133;
        }
      }
      v70 = 4294966996;
    }
    else
    {
      v70 = 4294966995;
    }
LABEL_133:
    mach_msg_destroy((mach_msg_header_t *)msg);
    goto LABEL_134;
  }
  mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
LABEL_125:
  v18 = 268435460;
  if ((_DWORD)v70 == 268435460)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    mach_msg_destroy((mach_msg_header_t *)msg);
    goto LABEL_98;
  }
LABEL_134:
  if ((_DWORD)v70 != 268435459)
  {
    if ((_DWORD)v70)
    {
      if ((_DWORD)v70 != -308)
      {
        v18 = v70;
        goto LABEL_98;
      }
      goto LABEL_137;
    }
LABEL_146:
    if (*((_BYTE *)this + 152))
    {
      i = *a3 | 8;
      for (j = (char *)this + 128;
            ;
            (*((void (**)(_QWORD, unsigned int *, const AudioTimeStamp *, uint64_t, uint64_t, unsigned int *))j
             + 2))(*((_QWORD *)j + 3), &i, a4, a5, a6, v15))
      {
        j = *(char **)j;
        if (!j)
          break;
      }
    }
    v74 = *v15;
    if ((_DWORD)v74)
    {
      v75 = 0;
      for (k = 0; k < v74; ++k)
      {
        v77 = v15[v75 / 4 + 3];
        a7->mBuffers[v75 / 0x10].mDataByteSize = v77;
        mData = a7->mBuffers[v75 / 0x10].mData;
        v79 = *(void **)&v15[v75 / 4 + 4];
        if (mData)
        {
          memcpy(mData, v79, v77);
          v74 = *v15;
        }
        else
        {
          a7->mBuffers[v75 / 0x10].mData = v79;
        }
        v18 = 0;
        v75 += 16;
      }
    }
    else
    {
      v18 = 0;
    }
    goto LABEL_98;
  }
LABEL_137:
  v18 = 4294900547;
  if (kInterAppAudioScope)
  {
    v72 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_98;
  }
  else
  {
    v72 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)msg = 136315906;
    *(_QWORD *)&msg[4] = "IPCAUClient.cpp";
    *(_WORD *)&msg[12] = 1024;
    *(_DWORD *)&msg[14] = 433;
    *(_WORD *)&msg[18] = 1024;
    *(_DWORD *)&msg[20] = v70;
    *(_WORD *)&msg[24] = 1024;
    *(_DWORD *)&msg[26] = -66749;
    _os_log_impl(&dword_18EE07000, v72, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", msg, 0x1Eu);
  }
LABEL_98:
  **((_DWORD **)this + 38) = 0;
  if (v13)
LABEL_99:
    (*(void (**)(char *))(*((_QWORD *)this + 48) + 24))((char *)this + 384);
  return v18;
}

void sub_18EEA8D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  uint64_t v11;
  int v12;

  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  _Unwind_Resume(exception_object);
}

void *IPCAUSharedMemoryBase::mutableAudioBufferList(IPCAUSharedMemoryBase *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int v9;
  BOOL v10;
  const void *v11;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  void *v15;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 8);
  if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 9) - v3) >> 3) <= (unint64_t)a2)
    return 0;
  v5 = *((_DWORD *)this + 22);
  if (v5 >= a3)
    v5 = a3;
  v6 = v3 + 56 * a2;
  v7 = v5 * *(_DWORD *)(v6 + 24);
  v8 = *(_DWORD **)(v6 + 40);
  v9 = v8[4];
  if (v9)
    v10 = v9 >= v7;
  else
    v10 = 1;
  if (!v10)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      v18 = 136315394;
      v19 = "CABufferList.h";
      v20 = 1024;
      v21 = 246;
      _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE [(mBufferCapacity == 0 || nBytes <= mBufferCapacity) != 0 is false]: ", (uint8_t *)&v18, 0x12u);
    }
    __break(1u);
  }
  v11 = v8 + 6;
  v12 = v8[6];
  if ((_DWORD)v12)
  {
    v13 = v8 + 9;
    v14 = v12;
    do
    {
      *v13 = v7;
      v13 += 4;
      --v14;
    }
    while (v14);
  }
  v15 = (void *)(*(_QWORD *)(v3 + 56 * a2 + 48) + 24);
  memcpy(v15, v11, (16 * v12) | 8);
  return v15;
}

uint64_t IPCAUClient::AUInstance::RemovePropertyListener(IPCAUClient::AUInstance *this, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  BOOL v15;
  int v16;
  mach_msg_timeout_t v17;
  int v18;
  mach_port_name_t reply_port;
  mach_msg_return_t v20;
  mach_msg_return_t v21;
  int v22;
  NSObject *v23;
  uint64_t v25;
  char v26;
  unsigned int v27;
  _BYTE msg[36];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(*((_QWORD *)this + 2) + 48))
    return 4294900547;
  v8 = *((_QWORD *)this + 13);
  v7 = *((_QWORD *)this + 14);
  if (v8 == v7)
    goto LABEL_22;
  v9 = *((_QWORD *)this + 13);
  while (*(_DWORD *)v9 != a2
       || *(void (**)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int))(v9 + 8) != a3
       || a5 && *(void **)(v9 + 16) != a4)
  {
    v9 += 24;
    if (v9 == v7)
      goto LABEL_14;
  }
  v11 = v7 - (v9 + 24);
  if (v7 != v9 + 24)
  {
    memmove((void *)v9, (const void *)(v9 + 24), v7 - (v9 + 24));
    v8 = *((_QWORD *)this + 13);
  }
  v7 = v9 + v11;
  *((_QWORD *)this + 14) = v9 + v11;
LABEL_14:
  if (v8 == v7)
  {
LABEL_22:
    v14 = 1;
  }
  else
  {
    v12 = v8 + 24;
    do
    {
      v13 = *(_DWORD *)(v12 - 24);
      v15 = v13 == a2;
      v14 = v13 != a2;
      v15 = v15 || v12 == v7;
      v12 += 24;
    }
    while (!v15);
  }
  v10 = 0;
  if ((a2 & 0xFFFFFFFE) != 0x64 && v14)
  {
    v27 = 0;
    IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v25, *((_QWORD *)this + 2), &v27);
    v10 = v27;
    if (v27)
    {
      IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v25);
      return v10;
    }
    v16 = *(_DWORD *)(*((_QWORD *)this + 2) + 48);
    if (v26)
      v17 = 0x7FFFFFFF;
    else
      v17 = 10000;
    v18 = *((_DWORD *)this + 20);
    v29 = 0;
    memset(&msg[4], 0, 32);
    *(_QWORD *)&msg[24] = *MEMORY[0x1E0C804E8];
    *(_DWORD *)&msg[32] = v18;
    LODWORD(v29) = a2;
    reply_port = mig_get_reply_port();
    *(_DWORD *)&msg[8] = v16;
    *(_DWORD *)&msg[12] = reply_port;
    *(_DWORD *)msg = 5395;
    *(_QWORD *)&msg[16] = 0x1606100000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set((mach_msg_header_t *)msg);
      reply_port = *(_DWORD *)&msg[12];
    }
    v20 = mach_msg((mach_msg_header_t *)msg, 275, 0x28u, 0x2Cu, reply_port, v17, 0);
    v21 = v20;
    if ((v20 - 268435458) <= 0xE && ((1 << (v20 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(*(mach_port_t *)&msg[12]);
    }
    else
    {
      if (!v20)
      {
        if (*(_DWORD *)&msg[20] == 71)
        {
          v22 = -308;
        }
        else if (*(_DWORD *)&msg[20] == 90309)
        {
          v22 = -300;
          if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
          {
            v22 = *(_DWORD *)&msg[32];
            if (!*(_DWORD *)&msg[32])
              goto LABEL_58;
          }
        }
        else
        {
          v22 = -301;
        }
        goto LABEL_49;
      }
      mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
    }
    v22 = 268435460;
    if (v21 != 268435460)
    {
LABEL_50:
      if (v21 != 268435459 && v21 != -308)
        goto LABEL_58;
      if (kInterAppAudioScope)
      {
        v23 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
        {
LABEL_58:
          IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v25);
          return 0;
        }
      }
      else
      {
        v23 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)msg = 136315906;
        *(_QWORD *)&msg[4] = "IPCAUClient.cpp";
        *(_WORD *)&msg[12] = 1024;
        *(_DWORD *)&msg[14] = 433;
        *(_WORD *)&msg[18] = 1024;
        *(_DWORD *)&msg[20] = v21;
        *(_WORD *)&msg[24] = 1024;
        *(_DWORD *)&msg[26] = -66749;
        _os_log_impl(&dword_18EE07000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", msg, 0x1Eu);
      }
      goto LABEL_58;
    }
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
LABEL_49:
    mach_msg_destroy((mach_msg_header_t *)msg);
    v21 = v22;
    goto LABEL_50;
  }
  return v10;
}

double TThreadSafeList<IPCAUClient::RenderCallback>::AllocNode(uint64_t a1)
{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  double result;

  v1 = (unint64_t *)(a1 + 16);
LABEL_2:
  v2 = (unint64_t *)*v1;
  if (*v1)
  {
    do
    {
      v3 = __ldaxr(v1);
      if ((unint64_t *)v3 != v2)
      {
        __clrex();
        goto LABEL_2;
      }
    }
    while (__stlxr(0, v1));
    v4 = *v2;
    if (*v2)
    {
      v5 = (unint64_t *)*v2;
      do
      {
        v6 = v5;
        v5 = (unint64_t *)*v5;
      }
      while (v5);
      while (1)
      {
        v7 = *v1;
        *v6 = *v1;
        while (1)
        {
          v8 = __ldaxr(v1);
          if (v8 != v7)
            break;
          if (!__stlxr(v4, v1))
            return result;
        }
        __clrex();
      }
    }
  }
  else
  {
    v9 = (_OWORD *)operator new();
    result = 0.0;
    *v9 = 0u;
    v9[1] = 0u;
  }
  return result;
}

uint64_t IPCAUClient::AUInstance::ControlMessage(IPCAUClient::AUInstance *this, const void *a2, size_t a3, const void *a4, size_t a5)
{
  char *v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  int v15;
  mach_port_name_t reply_port;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  NSObject *v21;
  _DWORD *v22;
  char *v23;
  int v25;
  _BYTE rcv_name[32];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 84))
    return 4294956429;
  v10 = (char *)this + 384;
  v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 48) + 16))((char *)this + 384);
  v12 = (unsigned int *)*((_QWORD *)this + 38);
  v13 = 2044;
  if (v12)
    v13 = 2044 - *v12;
  if (v13 >= (int)a5 + (int)a3)
    goto LABEL_30;
  v14 = *((_DWORD *)this + 6);
  v15 = *((_DWORD *)this + 20);
  *(_OWORD *)&rcv_name[16] = 0u;
  v27 = 0;
  *(_OWORD *)rcv_name = 0u;
  *(_QWORD *)&rcv_name[20] = *MEMORY[0x1E0C804E8];
  *(_DWORD *)&rcv_name[28] = v15;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&rcv_name[4] = v14;
  *(_DWORD *)&rcv_name[8] = reply_port;
  v25 = 5395;
  *(_QWORD *)&rcv_name[12] = 0x1606700000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v25);
    reply_port = *(_DWORD *)&rcv_name[8];
  }
  v17 = mach_msg((mach_msg_header_t *)&v25, 275, 0x24u, 0x2Cu, reply_port, gMediaServerTimeout, 0);
  v18 = v17;
  if ((v17 - 268435458) <= 0xE && ((1 << (v17 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&rcv_name[8]);
LABEL_20:
    v19 = 268435460;
    if ((_DWORD)v18 != 268435460)
    {
LABEL_26:
      if ((_DWORD)v18 != -308 && (_DWORD)v18 != 268435459)
      {
        if ((_DWORD)v18)
          goto LABEL_42;
        goto LABEL_29;
      }
      if (kInterAppAudioScope)
      {
        v21 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
          goto LABEL_48;
      }
      else
      {
        v21 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v25 = 136315906;
        *(_QWORD *)rcv_name = "IPCAUClient.cpp";
        *(_WORD *)&rcv_name[8] = 1024;
        *(_DWORD *)&rcv_name[10] = 433;
        *(_WORD *)&rcv_name[14] = 1024;
        *(_DWORD *)&rcv_name[16] = v18;
        *(_WORD *)&rcv_name[20] = 1024;
        *(_DWORD *)&rcv_name[22] = -66749;
        _os_log_impl(&dword_18EE07000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", (uint8_t *)&v25, 0x1Eu);
      }
LABEL_48:
      v18 = 4294900547;
      if (!v11)
        return v18;
      goto LABEL_43;
    }
    if ((v25 & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&rcv_name[8]);
LABEL_25:
    mach_msg_destroy((mach_msg_header_t *)&v25);
    v18 = v19;
    goto LABEL_26;
  }
  if ((_DWORD)v17)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&rcv_name[8]);
    goto LABEL_20;
  }
  if (*(_DWORD *)&rcv_name[16] == 71)
  {
    v19 = 4294966988;
    goto LABEL_25;
  }
  if (*(_DWORD *)&rcv_name[16] != 90315)
  {
    v19 = 4294966995;
    goto LABEL_25;
  }
  v19 = 4294966996;
  if (v25 < 0)
    goto LABEL_25;
  if (*(_DWORD *)rcv_name != 36)
    goto LABEL_25;
  if (*(_DWORD *)&rcv_name[4])
    goto LABEL_25;
  v19 = *(unsigned int *)&rcv_name[28];
  if (*(_DWORD *)&rcv_name[28])
    goto LABEL_25;
LABEL_29:
  v12 = (unsigned int *)*((_QWORD *)this + 38);
LABEL_30:
  if (v12)
    v20 = *v12;
  else
    v20 = 0;
  if (v12)
    v22 = v12 + 1;
  else
    v22 = 0;
  v23 = (char *)v22 + v20;
  memcpy(v23, a2, a3);
  if (a4)
    memcpy(&v23[a3], a4, a5);
  v18 = 0;
  **((_DWORD **)this + 38) = v20 + a5 + a3;
LABEL_42:
  if (v11)
LABEL_43:
    (*(void (**)(char *))(*(_QWORD *)v10 + 24))(v10);
  return v18;
}

void sub_18EEA9650(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AUPropertyValueFormatter::AUPropertyValueFormatter(AUPropertyValueFormatter *this, int a2, unsigned int a3, int a4, const AudioStreamBasicDescription *a5, int a6)
{
  FILE *v12;
  FILE *v13;
  FILE *v14;
  void *v15;
  FILE *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)this = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v12 = funopen(&v16, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  v13 = v12;
  v16 = v12;
  if (a3 > 7)
    fprintf(v12, "scope %d", a3);
  else
    fputs(gScopeNames[a3], v12);
  fprintf(v13, ", el %d: ", a4);
  if (a2 == 8)
  {
    CAFormatter::CAFormatter((CAFormatter *)&v15, a5);
    fprintf(v13, "stream format: %s", (const char *)v15);
    if (v15)
      free(v15);
  }
  else
  {
    fprintf(v13, "prop %d, %d bytes @ %p", a2, a6, a5);
  }
  v14 = CAMemoryStream::cstr(&v16);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  *(_QWORD *)this = v14;
  fclose(v16);
  free(v17);
}

void sub_18EEA97AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, FILE *a13, void *a14)
{
  void **v14;

  fclose(a13);
  free(a14);
  if (*v14)
    free(*v14);
  _Unwind_Resume(a1);
}

void PropertyMarshaller::PropertyMarshaller(PropertyMarshaller *this, const void *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v5;
  CADeserializer *v7;
  CASerializer *v8;

  *(_OWORD *)((char *)this + 8) = 0u;
  v3 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = off_1E2907950;
  v4 = (uint64_t *)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (char *)this + 24;
  *((_QWORD *)this + 5) = 0;
  if (a2)
  {
    v7 = (CADeserializer *)operator new();
    CADeserializer::CADeserializer(v7, a2);
    v5 = (char *)this + 32;
    std::unique_ptr<CADeserializer>::reset[abi:ne180100](v4, (uint64_t)v7);
  }
  else
  {
    v8 = (CASerializer *)operator new();
    CASerializer::CASerializer(v8, 0);
    std::unique_ptr<CASerializer>::reset[abi:ne180100](v3, (uint64_t)v8);
    v4 = v3;
  }
  *(_QWORD *)v5 = *v4;
}

void sub_18EEA98C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;

  MEMORY[0x193FFE460](v4, 0x20C4093837F09);
  v6 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::unique_ptr<CADeserializer>::reset[abi:ne180100](v2, 0);
  std::unique_ptr<CASerializer>::reset[abi:ne180100](v3, 0);
  _Unwind_Resume(a1);
}

void PropertyMarshaller::~PropertyMarshaller(PropertyMarshaller *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2907950;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<CADeserializer>::reset[abi:ne180100]((uint64_t *)this + 2, 0);
  std::unique_ptr<CASerializer>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

uint64_t std::unique_ptr<CADeserializer>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x193FFD95C]();
    JUMPOUT(0x193FFE460);
  }
  return result;
}

uint64_t std::unique_ptr<CASerializer>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x193FFD878]();
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void AudioUnitPropertyMarshaller::~AudioUnitPropertyMarshaller(AudioUnitPropertyMarshaller *this)
{
  PropertyMarshaller::~PropertyMarshaller(this);
  JUMPOUT(0x193FFE460);
}

uint64_t AudioUnitPropertyMarshaller::GetMarshaller(AudioUnitPropertyMarshaller *this, AudioUnitPropertyMarshaller *a2)
{
  return AudioUnitPropertyMarshaller::CreateMarshaller(a2);
}

uint64_t AudioUnitPropertyMarshaller::UnknownPropertyError(AudioUnitPropertyMarshaller *this)
{
  return 4294956417;
}

uint64_t AudioUnitPropertyMarshaller::InvalidPropertySizeError(AudioUnitPropertyMarshaller *this)
{
  return 4294956445;
}

void MIGVariableLengthRefs::~MIGVariableLengthRefs(MIGVariableLengthRefs *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E2908610;
  if (*((_BYTE *)this + 16))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 5);
    if (v2)
    {
      if (*v2)
      {
        MEMORY[0x193FFF5C4](*MEMORY[0x1E0C83DA0], *v2, **((unsigned int **)this + 6));
        **((_QWORD **)this + 5) = 0;
        **((_DWORD **)this + 6) = 0;
      }
    }
  }
}

{
  MIGVariableLengthRefs::~MIGVariableLengthRefs(this);
  JUMPOUT(0x193FFE460);
}

void MIGVariableLengthVars2<unsigned char [256]>::~MIGVariableLengthVars2(MIGVariableLengthRefs *a1)
{
  MIGVariableLengthRefs::~MIGVariableLengthRefs(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<IPCAUClient::AUInstance::Initialize(void)::$_1,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t a1)
{
  mach_msg_timeout_t v2;

  if (**(_DWORD **)a1)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 8))
      v2 = 0x7FFFFFFF;
    else
      v2 = 10000;
    IPCAUClient_Uninitialize(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 48), v2, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 80));
  }
  return a1;
}

void SharableMemoryBlock::MachClientToken::~MachClientToken(SharableMemoryBlock::MachClientToken *this)
{
  *(_QWORD *)this = &off_1E2909F48;
  if (*((_BYTE *)this + 20))
    SharableMemoryBlock::MachClientToken::Reset(this);
}

{
  SharableMemoryBlock::MachClientToken::~MachClientToken(this);
  JUMPOUT(0x193FFE460);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<IPCAUClient::AUInstance::Initialize(void)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;

  if (**(_DWORD **)a1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
    v3 = CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
    IPCAURegClient_SetProcessWakeState(*(_DWORD *)(v3 + 48), *(_DWORD *)(v2 + 52), 3, &v5);
  }
  return a1;
}

uint64_t IPCAUSharedMemoryBase::InitPhase1(IPCAUSharedMemoryBase *this, const AudioStreamBasicDescription *a2, uint64_t a3, int a4)
{
  unsigned int v5;
  char *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;

  v5 = a3;
  (*(void (**)(IPCAUSharedMemoryBase *, uint64_t))(*(_QWORD *)this + 24))(this, a3);
  *((_DWORD *)this + 22) = a4;
  v9 = (_BYTE *)*((_QWORD *)this + 8);
  v8 = (char *)*((_QWORD *)this + 9);
  v10 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v9) >> 3);
  v11 = v5 - v10;
  if (v5 > v10)
  {
    v12 = *((_QWORD *)this + 10);
    if (0x6DB6DB6DB6DB6DB7 * ((v12 - (uint64_t)v8) >> 3) >= v11)
    {
      bzero(*((void **)this + 9), 56 * ((56 * v11 - 56) / 0x38) + 56);
      *((_QWORD *)this + 9) = &v8[56 * ((56 * v11 - 56) / 0x38) + 56];
      goto LABEL_24;
    }
    v13 = 0x6DB6DB6DB6DB6DB7 * ((v12 - (uint64_t)v9) >> 3);
    v14 = 0xDB6DB6DB6DB6DB6ELL * ((v12 - (uint64_t)v9) >> 3);
    if (v14 <= v5)
      v14 = v5;
    if (v13 >= 0x249249249249249)
      v15 = 0x492492492492492;
    else
      v15 = v14;
    if (v15 > 0x492492492492492)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = 56 * v15;
    v17 = (char *)operator new(56 * v15);
    v18 = &v17[8 * ((v8 - v9) >> 3)];
    v19 = &v17[v16];
    bzero(v18, 56 * ((56 * v11 - 56) / 0x38) + 56);
    v20 = &v18[56 * ((56 * v11 - 56) / 0x38) + 56];
    if (v8 == v9)
    {
      *((_QWORD *)this + 8) = v18;
      *((_QWORD *)this + 9) = v20;
      *((_QWORD *)this + 10) = v19;
      if (!v8)
        goto LABEL_24;
    }
    else
    {
      do
      {
        v21 = *(_OWORD *)(v8 - 56);
        v22 = *(_OWORD *)(v8 - 40);
        *((_QWORD *)v18 - 3) = *((_QWORD *)v8 - 3);
        *(_OWORD *)(v18 - 40) = v22;
        *(_OWORD *)(v18 - 56) = v21;
        v23 = *((_QWORD *)v8 - 2);
        *((_QWORD *)v8 - 2) = 0;
        *((_QWORD *)v18 - 2) = v23;
        v24 = *((_QWORD *)v8 - 1);
        *((_QWORD *)v8 - 1) = 0;
        *((_QWORD *)v18 - 1) = v24;
        v18 -= 56;
        v8 -= 56;
      }
      while (v8 != v9);
      v25 = (char *)*((_QWORD *)this + 8);
      v8 = (char *)*((_QWORD *)this + 9);
      *((_QWORD *)this + 8) = v18;
      *((_QWORD *)this + 9) = v20;
      *((_QWORD *)this + 10) = v19;
      if (v8 != v25)
      {
        do
        {
          v8 -= 56;
          std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>((uint64_t)v8);
        }
        while (v8 != v25);
        v8 = v25;
      }
      if (!v8)
        goto LABEL_24;
    }
    operator delete(v8);
    goto LABEL_24;
  }
  if (v5 < v10)
  {
    v26 = &v9[56 * v5];
    while (v8 != v26)
    {
      v8 -= 56;
      std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>((uint64_t)v8);
    }
    *((_QWORD *)this + 9) = v26;
  }
LABEL_24:
  result = *((unsigned int *)this + 14);
  if (v5)
  {
    v28 = 0;
    do
    {
      v29 = *((_QWORD *)this + 8) + v28;
      v31 = *(_OWORD *)&a2->mSampleRate;
      v30 = *(_OWORD *)&a2->mBytesPerPacket;
      *(_QWORD *)(v29 + 32) = *(_QWORD *)&a2->mBitsPerChannel;
      *(_OWORD *)v29 = v31;
      *(_OWORD *)(v29 + 16) = v30;
      if ((*(_BYTE *)(v29 + 12) & 0x20) != 0)
        v32 = *(_DWORD *)(v29 + 28);
      else
        v32 = 1;
      result += ((*((_DWORD *)this + 22) * *(_DWORD *)(v29 + 24) + 15) & 0xFFFFFFF0) * v32;
      v28 += 56;
      ++a2;
    }
    while (56 * v5 != v28);
  }
  return result;
}

void IPCAUSharedMemoryBase::InitPhase2(IPCAUSharedMemoryBase *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;

  v1 = *((_QWORD *)this + 8);
  v2 = *((_QWORD *)this + 9);
  if (v1 != v2)
  {
    v4 = *((_QWORD *)this + 3) + *((unsigned int *)this + 14);
    do
    {
      v5 = *(_DWORD *)(v1 + 12);
      if ((v5 & 0x20) != 0)
        v6 = *(_DWORD *)(v1 + 28);
      else
        v6 = 1;
      v7 = *(_DWORD *)(v1 + 24);
      v8 = *((_DWORD *)this + 22);
      v9 = CADeprecated::CABufferList::New((uint64_t)"", v5, *(_DWORD *)(v1 + 28));
      v10 = *(_QWORD **)(v1 + 40);
      *(_QWORD *)(v1 + 40) = v9;
      if (v10)
        std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v10);
      v11 = CADeprecated::CABufferList::New((uint64_t)"", *(_DWORD *)(v1 + 12), *(_DWORD *)(v1 + 28));
      v12 = *(_QWORD **)(v1 + 48);
      *(_QWORD *)(v1 + 48) = v11;
      if (v12)
        std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v12);
      v13 = *(_QWORD *)(v1 + 40);
      *(_DWORD *)(v13 + 24) = v6;
      if (v6)
      {
        v14 = (v8 * v7 + 15) & 0xFFFFFFF0;
        v15 = *(_DWORD *)(v1 + 12);
        v16 = v6;
        v17 = (_QWORD *)(v13 + 40);
        do
        {
          v18 = *(_DWORD *)(v1 + 28);
          if ((v15 & 0x20) != 0)
            v18 = 1;
          *v17 = v4;
          *((_DWORD *)v17 - 2) = v18;
          *((_DWORD *)v17 - 1) = v14;
          v4 += v14;
          v17 += 2;
          --v16;
        }
        while (v16);
      }
      v1 += 56;
    }
    while (v1 != v2);
  }
  __dmb(0xBu);
}

_QWORD *CADeprecated::CABufferList::New(uint64_t a1, char a2, unsigned int a3)
{
  unsigned int v4;
  int v5;
  _QWORD *result;
  char *v7;

  if ((a2 & 0x20) != 0)
    v4 = a3;
  else
    v4 = 1;
  if ((a2 & 0x20) != 0)
    v5 = 1;
  else
    v5 = a3;
  result = operator new(16 * v4 + 32);
  *result = a1;
  result[1] = 0;
  *((_DWORD *)result + 4) = 0;
  *((_DWORD *)result + 6) = v4;
  if (v4)
  {
    v7 = (char *)(result + 4);
    do
    {
      *(_DWORD *)v7 = v5;
      *((_DWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 1) = 0;
      v7 += 16;
      --v4;
    }
    while (v4);
  }
  return result;
}

BOOL SharableMemoryBlock::MachClientToken::IsValid(SharableMemoryBlock::MachClientToken *this)
{
  return *((_DWORD *)this + 4) != 0;
}

uint64_t IPCAU_SysEx(_QWORD *a1, const unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  mach_port_t v5;
  int v7;
  mach_port_t reply_port;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  mach_msg_header_t v13;
  _BYTE v14[12];
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  if (!*(_BYTE *)(v3 + 84))
    return 4294956429;
  v4 = 4294900547;
  v5 = *(_DWORD *)(*(_QWORD *)(v3 + 16) + 48);
  if (v5)
  {
    if (a3 <= 0x7F7)
    {
      LOWORD(v13.msgh_bits) = 1;
      HIWORD(v13.msgh_bits) = a3;
      return IPCAUClient::AUInstance::ControlMessage((IPCAUClient::AUInstance *)v3, &v13, 4uLL, a2, a3);
    }
    v7 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)&v14[4] = a2;
    v15 = 16777472;
    v16 = a3;
    v17 = *MEMORY[0x1E0C804E8];
    v18 = v7;
    v19 = a3;
    reply_port = mig_get_reply_port();
    *(_QWORD *)&v13.msgh_bits = 2147489043;
    v13.msgh_remote_port = v5;
    v13.msgh_local_port = reply_port;
    *(_QWORD *)&v13.msgh_voucher_port = 0x1606800000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set(&v13);
      reply_port = v13.msgh_local_port;
    }
    v9 = mach_msg(&v13, 275, 0x3Cu, 0x2Cu, reply_port, gMediaServerTimeout, 0);
    v10 = v9;
    if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(v13.msgh_local_port);
    }
    else
    {
      if (!(_DWORD)v9)
      {
        if (v13.msgh_id == 71)
        {
          v11 = 4294966988;
        }
        else if (v13.msgh_id == 90316)
        {
          v11 = 4294966996;
          if ((v13.msgh_bits & 0x80000000) == 0 && *(_QWORD *)&v13.msgh_size == 36)
          {
            v11 = *(unsigned int *)&v14[8];
            if (!*(_DWORD *)&v14[8])
              return 0;
          }
        }
        else
        {
          v11 = 4294966995;
        }
        goto LABEL_25;
      }
      mig_dealloc_reply_port(v13.msgh_local_port);
    }
    v11 = 268435460;
    if ((_DWORD)v10 != 268435460)
    {
LABEL_26:
      if ((_DWORD)v10 != 268435459 && (_DWORD)v10 != -308)
        return v10;
      if (kInterAppAudioScope)
      {
        v12 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
          return v4;
      }
      else
      {
        v12 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13.msgh_bits = 136315906;
        *(_QWORD *)&v13.msgh_size = "IPCAUClient.cpp";
        LOWORD(v13.msgh_local_port) = 1024;
        *(mach_port_t *)((char *)&v13.msgh_local_port + 2) = 433;
        HIWORD(v13.msgh_voucher_port) = 1024;
        v13.msgh_id = v10;
        *(_WORD *)v14 = 1024;
        *(_DWORD *)&v14[2] = -66749;
        _os_log_impl(&dword_18EE07000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", (uint8_t *)&v13, 0x1Eu);
      }
      return v4;
    }
    if ((v13.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v13.msgh_local_port);
LABEL_25:
    mach_msg_destroy(&v13);
    v10 = v11;
    goto LABEL_26;
  }
  return v4;
}

uint64_t IPCAU_MIDIEvent(_QWORD *a1, char a2, char a3, char a4, int a5)
{
  IPCAUClient::AUInstance *v5;
  _BYTE v7[4];
  int v8;

  v5 = (IPCAUClient::AUInstance *)a1[4];
  v7[0] = 0;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  v8 = a5;
  return IPCAUClient::AUInstance::ControlMessage(v5, v7, 8uLL, 0, 0);
}

uint64_t MP4::AudioSpecificConfig::Deserialize(_DWORD *a1, int *a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  _BYTE v21[296];
  _DWORD v22[10];
  uint64_t v23;
  uint64_t v24;
  _DWORD v25[276];
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = a2[2];
  v7 = *a2;
  v8 = a2[5];
  v22[2] = 0;
  v23 = 0;
  v24 = 0;
  v25[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v25);
  v27 = 0u;
  v26 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v22);
  bzero(v21, 0x5F0uLL);
  v9 = DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig((uint64_t)v22, (uint64_t)a2, a3);
  if ((_DWORD)v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v17 = 136315394;
      v18 = "LATMHeader.cpp";
      v19 = 1024;
      v20 = 86;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioSpecificConfig::Deserialize: cannot parse AudioSpecificConfig", (uint8_t *)&v17, 0x12u);
    }
  }
  else
  {
    *a1 = v8 - a2[5] + 8 * (*a2 - a2[2] + v6 - v7);
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v9;
}

void sub_18EEAA56C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2 + 1504);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t MP4::LATMHeader::PutVariableSizeValue(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;

  v6 = a2;
  if (HIBYTE(a2))
    v3 = 3;
  else
    v3 = 0;
  if ((a2 & 0xFF00) != 0)
    v3 = 1;
  if ((a2 & 0xFF0000) != 0)
    v4 = 2;
  else
    v4 = v3;
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, v4, 2u);
  do
    result = AT::TBitstreamWriter<unsigned int>::PutBits(a1, *((unsigned __int8 *)&v6 + v4--), 8u);
  while (v4 != -1);
  return result;
}

uint64_t MP4::LATMHeader::GetVariableSizeValue(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = v2 >> 30;
  v4 = *(_DWORD *)(a1 + 20) - 2;
  *(_DWORD *)(a1 + 20) = v4;
  if (v4 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
    v7 = *(_DWORD *)(a1 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    v4 = v6 + 32;
    v8 = v6 == -32;
    *(_QWORD *)a1 += 4;
    v3 |= v7 >> v6;
    v5 = v7 << -(char)v6;
    if (v8)
      v5 = 0;
    *(_DWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 20) = v4;
    if (v3 == -1)
      return 0;
  }
  else
  {
    v5 = 4 * v2;
    *(_DWORD *)(a1 + 16) = v5;
  }
  LODWORD(v9) = 0;
  v10 = v3 + 1;
  do
  {
    v11 = HIBYTE(v5);
    v4 -= 8;
    *(_DWORD *)(a1 + 20) = v4;
    if (v4 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
      *(_QWORD *)a1 += 4;
      v12 = *(_DWORD *)(a1 + 16);
      v13 = *(_DWORD *)(a1 + 20);
      v11 |= v12 >> v13;
      v4 = v13 + 32;
      *(_DWORD *)(a1 + 20) = v13 + 32;
      if (v13 == -32)
        v5 = 0;
      else
        v5 = v12 << -(char)v13;
    }
    else
    {
      v5 <<= 8;
    }
    *(_DWORD *)(a1 + 16) = v5;
    v9 = v11 + ((_DWORD)v9 << 8);
    --v10;
  }
  while (v10);
  return v9;
}

uint64_t MP4::LATMHeader::StreamFormatInfo(uint64_t a1, unsigned __int8 *a2, int a3, std::vector<char> *a4, std::vector<char> *a5, AudioStreamBasicDescription *a6, unsigned int *a7)
{
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  std::vector<char>::pointer begin;
  unint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  std::vector<char>::pointer v25;
  unint64_t v26;
  char *v27;
  int v28;
  std::vector<char>::pointer v29;
  int v30;
  std::vector<char>::pointer v31;
  NSObject *v33;
  const char *v34;
  double v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  AudioStreamBasicDescription *v43;
  unsigned int *v44;
  _QWORD v45[2];
  uint64_t v46;
  _QWORD v47[4];
  int v48;
  unsigned __int8 *v49[2];
  char v50;
  int v51;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  int v55;
  _BYTE v56[296];
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD v62[276];
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  LODWORD(v58) = 0;
  v60 = 0;
  v61 = 0;
  v62[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v62);
  v64 = 0u;
  v63 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)&v57);
  v14 = 0;
  if (!*(_BYTE *)(a1 + 1))
  {
    if (!*(_BYTE *)(a1 + 11))
    {
      v43 = a6;
      v44 = a7;
      v15 = *(_DWORD *)(a1 + 28);
      v16 = *(_DWORD *)(a1 + 4);
      v17 = *(_DWORD *)(a1 + 20);
      v18 = v15 >> 3;
      if ((v15 & 7) != 0)
        v19 = v18 + 1;
      else
        v19 = v18;
      begin = a4->__begin_;
      v21 = a4->__end_ - a4->__begin_;
      v22 = v19;
      if (v19 <= v21)
      {
        if (v19 < v21)
          a4->__end_ = &begin[v19];
      }
      else
      {
        std::vector<unsigned char>::__append(a4, v19 - v21);
        begin = a4->__begin_;
      }
      v49[0] = a2;
      v49[1] = &a2[a3];
      v50 = 0;
      v51 = 0;
      MP4::LATMHeader::CopyBitsToByteAlignedBuffer(v49, v17 + v16, v15, begin);
      bzero(v56, 0x5F0uLL);
      v59 = 6144;
      v58 = 0x500000040;
      v23 = v22;
      if (!v22)
        v23 = DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount((DecoderConfigDescr *)&v57);
      v24 = (v23 + 37);
      v25 = a5->__begin_;
      v26 = a5->__end_ - a5->__begin_;
      if (v24 <= v26)
      {
        if (v24 < v26)
          a5->__end_ = &v25[v24];
      }
      else
      {
        std::vector<unsigned char>::__append(a5, v24 - v26);
        v25 = a5->__begin_;
      }
      v47[0] = v25;
      v47[1] = v25;
      v27 = &v25[v24];
      v47[2] = &v25[v24];
      v47[3] = 0x2000000000;
      v48 = v25 & 3;
      v45[0] = v25;
      v45[1] = &v25[v24];
      v46 = 0;
      if ((v25 & 3) != 0)
      {
        v28 = 0;
        v29 = v25 + 1;
        v30 = -8;
        v31 = v29;
        do
        {
          HIDWORD(v46) = v30 + 16;
          v45[0] = v31;
          v28 = *(v31 - 1) | (v28 << 8);
          LODWORD(v46) = v28;
          v30 += 8;
          if ((v29 & 3) == 0)
            break;
          LOBYTE(v29) = (_BYTE)v29 + 1;
        }
        while (v31++ < v27);
        LODWORD(v46) = v28 << (24 - v30);
      }
      if (MP4AudioESDS::Serialize((uint64_t)v56, (uint64_t)v47, v22, (unsigned __int8 *)a4->__begin_))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v53 = "LATMHeader.cpp";
          v54 = 1024;
          v55 = 332;
          v33 = MEMORY[0x1E0C81028];
          v34 = "%25s:%-5d  MP4AudioESDS::Serialize Failed";
LABEL_34:
          _os_log_impl(&dword_18EE07000, v33, OS_LOG_TYPE_ERROR, v34, buf, 0x12u);
        }
      }
      else if (MP4AudioESDS::Deserialize((uint64_t)v56, (uint64_t)v45, 0, 0))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v53 = "LATMHeader.cpp";
          v54 = 1024;
          v55 = 340;
          v33 = MEMORY[0x1E0C81028];
          v34 = "%25s:%-5d  MP4AudioESDS::Deserialize Failed";
          goto LABEL_34;
        }
      }
      else
      {
        if (!DecoderConfigDescr::MakeStreamDescription((DecoderConfigDescr *)&v57, v43, v35))
        {
          if (!DecoderConfigDescr::GetChannelLayoutTag((DecoderConfigDescr *)&v57, v44))
          {
            v14 = 1;
            goto LABEL_36;
          }
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_35;
          *(_DWORD *)buf = 136315394;
          v53 = "LATMHeader.cpp";
          v54 = 1024;
          v55 = 346;
          v33 = MEMORY[0x1E0C81028];
          v34 = "%25s:%-5d  MP4AudioESDS::DecoderConfigDescr::GetChannelLayoutTag Failed";
          goto LABEL_34;
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v53 = "LATMHeader.cpp";
          v54 = 1024;
          v55 = 343;
          v33 = MEMORY[0x1E0C81028];
          v34 = "%25s:%-5d  MP4AudioESDS::DecoderConfigDescr::MakeStreamDescription Failed";
          goto LABEL_34;
        }
      }
    }
LABEL_35:
    v14 = 0;
  }
LABEL_36:
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return v14;
}

void sub_18EEAAB78(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x670]);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1 + 1488);
  _Unwind_Resume(a1);
}

unsigned __int8 **MP4::LATMHeader::CopyBitsToByteAlignedBuffer(unsigned __int8 **result, int a2, unsigned int a3, _BYTE *a4)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;

  v4 = *((_DWORD *)result + 5);
  v5 = a2 - v4;
  if (a2 > v4)
  {
    *((_DWORD *)result + 5) = 0;
    *((_BYTE *)result + 16) = 0;
    v4 = 0;
    if (v5 >= 8)
    {
      *result += v5 >> 3;
      a2 = v5 & 7;
    }
    else
    {
      a2 = v5;
    }
  }
  if ((a2 - 9) >= 0xFFFFFFF8)
  {
    v6 = *((unsigned __int8 *)result + 16);
    v7 = v4 - a2;
    *((_DWORD *)result + 5) = v7;
    if (v7 < 0)
    {
      v9 = *result;
      if (result[1] - *result < 1)
        v10 = 255;
      else
        v10 = *v9;
      v11 = v10 << -(char)v7;
      v12 = v7 + 8;
      *((_DWORD *)result + 5) = v12;
      *result = v9 + 1;
      if (v12)
        LOBYTE(v8) = v11;
      else
        LOBYTE(v8) = 0;
    }
    else
    {
      v8 = v6 << a2;
    }
    *((_BYTE *)result + 16) = v8;
  }
  if (a3 >= 8)
  {
    do
    {
      v13 = *((unsigned __int8 *)result + 16);
      v14 = *((_DWORD *)result + 5);
      *((_DWORD *)result + 5) = v14 - 8;
      if (v14 - 8 < 0)
      {
        v16 = *result;
        if (result[1] - *result < 1)
          v17 = 255;
        else
          v17 = *v16;
        *((_DWORD *)result + 5) = v14;
        *result = v16 + 1;
        v13 |= v17 >> v14;
        if (v14)
          v15 = v17 << (8 - v14);
        else
          v15 = 0;
      }
      else
      {
        v15 = 0;
      }
      *((_BYTE *)result + 16) = v15;
      *a4++ = v13;
      a3 -= 8;
    }
    while (a3 > 7);
  }
  if (a3)
  {
    v18 = *((unsigned __int8 *)result + 16);
    v19 = v18 >> (8 - a3);
    v20 = *((_DWORD *)result + 5) - a3;
    *((_DWORD *)result + 5) = v20;
    if (v20 < 0)
    {
      v22 = *result;
      if (result[1] - *result < 1)
        v23 = 255;
      else
        v23 = *v22;
      v24 = v23 << -(char)v20;
      v25 = v20 + 8;
      *((_DWORD *)result + 5) = v25;
      *result = v22 + 1;
      v19 |= v23 >> v25;
      if (v25)
        LOBYTE(v21) = v24;
      else
        LOBYTE(v21) = 0;
    }
    else
    {
      v21 = v18 << a3;
    }
    *((_BYTE *)result + 16) = v21;
    *a4 = v19 << (8 - a3);
  }
  return result;
}

uint64_t MP4::LOASHeader::Deserialize(unsigned int *a1, uint64_t a2)
{
  int v3;
  unsigned int *v4;
  int v5;
  int v6;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v19;
  int v20;
  int v21;
  int Bit;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  BOOL v32;
  int v33;
  char v34;
  int v35;
  signed int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  unsigned int VariableSizeValue;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  NSObject *v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  const char *v94;
  __int16 v95;
  int v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(unsigned int **)a2;
  v5 = v3 - (_DWORD)v4;
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 + 8 * v5) < 0x18)
    return 0xFFFFFFFFLL;
  v8 = *(_DWORD *)(a2 + 16);
  v9 = v8 >> 21;
  v10 = v6 - 11;
  *(_DWORD *)(a2 + 20) = v10;
  if (v10 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v4);
    v4 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v4;
    v12 = *(_DWORD *)(a2 + 16);
    v13 = *(_DWORD *)(a2 + 20);
    v9 |= v12 >> v13;
    v10 = v13 + 32;
    *(_DWORD *)(a2 + 20) = v13 + 32;
    v11 = v13 == -32 ? 0 : v12 << -(char)v13;
  }
  else
  {
    v11 = v8 << 11;
  }
  *(_DWORD *)(a2 + 16) = v11;
  if (v9 != 695)
    return 0xFFFFFFFFLL;
  v14 = v11 >> 19;
  v15 = v10 - 13;
  *(_DWORD *)(a2 + 20) = v15;
  if (v15 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v4);
    v4 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v4;
    v19 = *(_DWORD *)(a2 + 16);
    v20 = *(_DWORD *)(a2 + 20);
    v14 |= v19 >> v20;
    v15 = v20 + 32;
    *(_DWORD *)(a2 + 20) = v20 + 32;
    if (v20 == -32)
      v16 = 0;
    else
      v16 = v19 << -(char)v20;
  }
  else
  {
    v16 = v11 << 13;
  }
  *(_DWORD *)(a2 + 16) = v16;
  *a1 = v14;
  v21 = v15 + 8 * (*(_DWORD *)(a2 + 8) - (_DWORD)v4);
  if (!*((_BYTE *)a1 + 4) || (Bit = TBitstreamReader<unsigned int>::GetBit(a2), *((_BYTE *)a1 + 5) = Bit != 0, Bit))
  {
    v23 = 0;
    goto LABEL_18;
  }
  v38 = *(_DWORD *)(a2 + 8);
  v39 = *(_DWORD *)a2;
  v40 = *(_DWORD *)(a2 + 20);
  a1[2] = v21 - v40 + 8 * (*(_DWORD *)a2 - v38);
  v41 = TBitstreamReader<unsigned int>::GetBit(a2);
  *((_BYTE *)a1 + 12) = v41 != 0;
  if (v41)
  {
    v42 = TBitstreamReader<unsigned int>::GetBit(a2);
    *((_BYTE *)a1 + 13) = v42 != 0;
    if (v42)
      goto LABEL_40;
    if (*((_BYTE *)a1 + 12))
      MP4::LATMHeader::GetVariableSizeValue(a2);
  }
  else
  {
    *((_BYTE *)a1 + 13) = 0;
  }
  v44 = TBitstreamReader<unsigned int>::GetBit(a2);
  *((_BYTE *)a1 + 14) = v44 != 0;
  if (!v44)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v93 = 136315394;
      v94 = "LATMHeader.cpp";
      v95 = 1024;
      v96 = 150;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  allStreamsSameTimeFraming == false not supported", (uint8_t *)&v93, 0x12u);
    }
    v17 = 4294967293;
    goto LABEL_74;
  }
  v45 = *(_DWORD *)(a2 + 16);
  v46 = v45 >> 26;
  v47 = *(_DWORD *)(a2 + 20) - 6;
  *(_DWORD *)(a2 + 20) = v47;
  if (v47 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v49 = *(_DWORD *)(a2 + 16);
    v50 = *(_DWORD *)(a2 + 20);
    v46 |= v49 >> v50;
    v47 = v50 + 32;
    *(_DWORD *)(a2 + 20) = v50 + 32;
    if (v50 == -32)
      v48 = 0;
    else
      v48 = v49 << -(char)v50;
  }
  else
  {
    v48 = v45 << 6;
  }
  *(_DWORD *)(a2 + 16) = v48;
  *((_BYTE *)a1 + 16) = v46;
  if ((_BYTE)v46)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v93 = 136315394;
      v94 = "LATMHeader.cpp";
      v95 = 1024;
      v96 = 153;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  multiple subframes not supported", (uint8_t *)&v93, 0x12u);
    }
    v17 = 4294967292;
LABEL_74:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v93 = 136315394;
      v94 = "LATMHeader.cpp";
      v95 = 1024;
      v96 = 254;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Can't deserialize StreamMuxConfig", (uint8_t *)&v93, 0x12u);
    }
    return v17;
  }
  v54 = v48 >> 28;
  v55 = v47 - 4;
  *(_DWORD *)(a2 + 20) = v55;
  if (v55 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v57 = *(_DWORD *)(a2 + 16);
    v58 = *(_DWORD *)(a2 + 20);
    v54 |= v57 >> v58;
    v55 = v58 + 32;
    *(_DWORD *)(a2 + 20) = v58 + 32;
    if (v58 == -32)
      v56 = 0;
    else
      v56 = v57 << -(char)v58;
  }
  else
  {
    v56 = 16 * v48;
  }
  *(_DWORD *)(a2 + 16) = v56;
  *((_BYTE *)a1 + 17) = v54;
  if ((_BYTE)v54)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v93 = 136315394;
      v94 = "LATMHeader.cpp";
      v95 = 1024;
      v96 = 156;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  multiple programs not supported", (uint8_t *)&v93, 0x12u);
    }
    v17 = 4294967291;
    goto LABEL_74;
  }
  v59 = v40 + 8 * (v38 - v39);
  v60 = -1;
  do
  {
    v61 = v56 >> 29;
    v62 = v55 - 3;
    *(_DWORD *)(a2 + 20) = v62;
    if (v62 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v64 = *(_DWORD *)(a2 + 16);
      v65 = *(_DWORD *)(a2 + 20);
      v61 |= v64 >> v65;
      *(_DWORD *)(a2 + 20) = v65 + 32;
      if (v65 == -32)
        v63 = 0;
      else
        v63 = v64 << -(char)v65;
    }
    else
    {
      v63 = 8 * v56;
    }
    *(_DWORD *)(a2 + 16) = v63;
    if ((_BYTE)v61)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v93 = 136315394;
        v94 = "LATMHeader.cpp";
        v95 = 1024;
        v96 = 161;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  multiple layers not supported", (uint8_t *)&v93, 0x12u);
      }
      v17 = 4294967290;
      goto LABEL_74;
    }
    if (v60 == -1)
    {
      *((_BYTE *)a1 + 15) = 0;
    }
    else
    {
      v66 = TBitstreamReader<unsigned int>::GetBit(a2);
      *((_BYTE *)a1 + 15) = v66 != 0;
      if (v66)
        goto LABEL_92;
    }
    if (!*((_BYTE *)a1 + 12))
    {
      a1[6] = v59 - *(_DWORD *)(a2 + 20) + 8 * (*(_DWORD *)a2 - *(_DWORD *)(a2 + 8));
      if (!MP4::AudioSpecificConfig::Deserialize(a1 + 8, (int *)a2, 0))
        goto LABEL_92;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v93 = 136315394;
        v94 = "LATMHeader.cpp";
        v95 = 1024;
        v96 = 176;
        v81 = MEMORY[0x1E0C81028];
        goto LABEL_124;
      }
LABEL_125:
      v17 = 4294967289;
      goto LABEL_74;
    }
    VariableSizeValue = MP4::LATMHeader::GetVariableSizeValue(a2);
    v68 = *(_DWORD *)(a2 + 20) + 8 * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2);
    a1[6] = v59 - v68;
    if (MP4::AudioSpecificConfig::Deserialize(a1 + 8, (int *)a2, VariableSizeValue))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v93 = 136315394;
        v94 = "LATMHeader.cpp";
        v95 = 1024;
        v96 = 185;
        v81 = MEMORY[0x1E0C81028];
LABEL_124:
        _os_log_impl(&dword_18EE07000, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d  Can't deserialize AudioSpecificConfig", (uint8_t *)&v93, 0x12u);
        goto LABEL_125;
      }
      goto LABEL_125;
    }
    v69 = v68 - *(_DWORD *)(a2 + 20) + 8 * (*(_DWORD *)a2 - *(_DWORD *)(a2 + 8));
    if (VariableSizeValue < v69)
    {
      v17 = 4294967288;
      goto LABEL_74;
    }
    TBitstreamReader<unsigned int>::SkipBits(a2, VariableSizeValue - v69);
LABEL_92:
    v70 = *(_DWORD *)(a2 + 16);
    v71 = v70 >> 29;
    v72 = *(_DWORD *)(a2 + 20) - 3;
    *(_DWORD *)(a2 + 20) = v72;
    if (v72 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v74 = *(_DWORD *)(a2 + 16);
      v75 = *(_DWORD *)(a2 + 20);
      v71 |= v74 >> v75;
      v72 = v75 + 32;
      *(_DWORD *)(a2 + 20) = v75 + 32;
      if (v75 == -32)
        v73 = 0;
      else
        v73 = v74 << -(char)v75;
    }
    else
    {
      v73 = 8 * v70;
    }
    *(_DWORD *)(a2 + 16) = v73;
    if (v71 == 1)
    {
      *((_BYTE *)a1 + 18) = 1;
      v76 = v73 >> 23;
      v55 = v72 - 9;
      *(_DWORD *)(a2 + 20) = v55;
      if (v55 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(_QWORD *)a2 += 4;
        v78 = *(_DWORD *)(a2 + 16);
        v79 = *(_DWORD *)(a2 + 20);
        v76 |= v78 >> v79;
        v55 = v79 + 32;
        *(_DWORD *)(a2 + 20) = v79 + 32;
        if (v79 == -32)
          v56 = 0;
        else
          v56 = v78 << -(char)v79;
      }
      else
      {
        v56 = v73 << 9;
      }
      *(_DWORD *)(a2 + 16) = v56;
      a1[5] = v76 + 20;
    }
    else
    {
      if (v71)
      {
        v17 = 4294967287;
        goto LABEL_74;
      }
      *((_BYTE *)a1 + 18) = 0;
      v55 = v72 - 8;
      *(_DWORD *)(a2 + 20) = v55;
      if (v55 >= 0)
      {
        v56 = v73 << 8;
LABEL_105:
        *(_DWORD *)(a2 + 16) = v56;
        goto LABEL_111;
      }
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      v77 = *(_DWORD *)(a2 + 20);
      *(_QWORD *)a2 += 4;
      v55 = v77 + 32;
      *(_DWORD *)(a2 + 20) = v77 + 32;
      if (v77 != -32)
      {
        v56 = *(_DWORD *)(a2 + 16) << -(char)v77;
        goto LABEL_105;
      }
      v56 = 0;
      *(_DWORD *)(a2 + 16) = 0;
    }
LABEL_111:
    ++v60;
  }
  while (v60 < *((unsigned __int8 *)a1 + 17));
  if (TBitstreamReader<unsigned int>::GetBit(a2))
  {
    if (*((_BYTE *)a1 + 12))
    {
      v80 = MP4::LATMHeader::GetVariableSizeValue(a2);
    }
    else
    {
      v82 = 0;
      v84 = *(_DWORD *)(a2 + 16);
      v83 = *(_DWORD *)(a2 + 20);
      v85 = 4;
      do
      {
        v86 = v84 >> 23;
        v83 -= 9;
        *(_DWORD *)(a2 + 20) = v83;
        if (v83 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(_QWORD *)a2 += 4;
          v87 = *(_DWORD *)(a2 + 16);
          v88 = *(_DWORD *)(a2 + 20);
          v86 |= v87 >> v88;
          v83 = v88 + 32;
          *(_DWORD *)(a2 + 20) = v88 + 32;
          if (v88 == -32)
            v84 = 0;
          else
            v84 = v87 << -(char)v88;
        }
        else
        {
          v84 <<= 9;
        }
        *(_DWORD *)(a2 + 16) = v84;
        v80 = v86 | (v82 << 8);
        v82 = v80;
        --v85;
      }
      while (v85);
    }
    a1[7] = v80;
  }
  if (TBitstreamReader<unsigned int>::GetBit(a2))
  {
    v89 = *(_DWORD *)(a2 + 16);
    v90 = *(_DWORD *)(a2 + 20) - 8;
    *(_DWORD *)(a2 + 20) = v90;
    if (v90 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      v92 = *(_DWORD *)(a2 + 20);
      *(_QWORD *)a2 += 4;
      *(_DWORD *)(a2 + 20) = v92 + 32;
      if (v92 == -32)
        v91 = 0;
      else
        v91 = *(_DWORD *)(a2 + 16) << -(char)v92;
    }
    else
    {
      v91 = v89 << 8;
    }
    *(_DWORD *)(a2 + 16) = v91;
  }
LABEL_40:
  v23 = a1[7];
LABEL_18:
  if (*((_BYTE *)a1 + 13))
    return 4294967294;
  v24 = 0;
  do
  {
    a1[9] = 0;
    if (*((_BYTE *)a1 + 18))
    {
      a1[9] = a1[5];
      v25 = *(_DWORD *)(a2 + 20);
    }
    else
    {
      v26 = *(_DWORD *)(a2 + 16);
      v25 = *(_DWORD *)(a2 + 20);
      do
      {
        v27 = HIBYTE(v26);
        v25 -= 8;
        *(_DWORD *)(a2 + 20) = v25;
        if (v25 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(_QWORD *)a2 += 4;
          v28 = *(_DWORD *)(a2 + 16);
          v29 = *(_DWORD *)(a2 + 20);
          v27 |= v28 >> v29;
          v25 = v29 + 32;
          *(_DWORD *)(a2 + 20) = v29 + 32;
          if (v29 == -32)
            v26 = 0;
          else
            v26 = v28 << -(char)v29;
        }
        else
        {
          v26 <<= 8;
        }
        *(_DWORD *)(a2 + 16) = v26;
        a1[9] += v27;
      }
      while (v27 == 255 && v25 + 8 * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2) > 8);
    }
    a1[10] = v21 - v25 + 8 * (*(_DWORD *)a2 - *(_DWORD *)(a2 + 8));
    if (v23)
      TBitstreamReader<unsigned int>::SkipBits(a2, v23);
    v30 = *((unsigned __int8 *)a1 + 16);
    v32 = __OFSUB__(v24, v30);
  }
  while (v24++ < v30);
  v33 = *(_DWORD *)(a2 + 20);
  v34 = v33 & 7;
  if ((v33 & 7) != 0)
  {
    v35 = *(_DWORD *)(a2 + 16);
    v36 = v33 & 0xFFFFFFF8;
    *(_DWORD *)(a2 + 20) = v36;
    if (v36 < 0 != v32)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      v43 = *(_DWORD *)(a2 + 20);
      *(_QWORD *)a2 += 4;
      *(_DWORD *)(a2 + 20) = v43 + 32;
      if (v43 == -32)
        v37 = 0;
      else
        v37 = *(_DWORD *)(a2 + 16) << -(char)v43;
    }
    else
    {
      v37 = v35 << v34;
    }
    *(_DWORD *)(a2 + 16) = v37;
  }
  v51 = a1[10];
  v52 = a1[9] + (v51 >> 3);
  v53 = *a1;
  if (v52 > *a1)
    return 4294967285;
  v17 = 0;
  if ((v51 & 7) != 0 && v52 == v53)
    return 4294967285;
  return v17;
}

uint64_t MP4::LOASHeader::IsLOASSyncWord(MP4::LOASHeader *this, const unsigned __int8 *a2, _DWORD *a3, unsigned int *a4)
{
  unsigned int *v5;
  int v6;
  char v7;
  int v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD v16[2];
  uint64_t v17;

  v5 = (unsigned int *)this;
  v16[0] = this;
  v16[1] = (char *)this + a2;
  v17 = 0;
  if ((this & 3) == 0 || !(_DWORD)a2)
  {
    result = 0;
    *a3 = 0;
    if (a2 < 3)
      return result;
    v13 = 0;
    HIDWORD(v17) = -11;
    goto LABEL_11;
  }
  v6 = 0;
  v7 = (_BYTE)this + 1;
  v8 = -8;
  do
  {
    v9 = *(unsigned __int8 *)v5;
    v5 = (unsigned int *)((char *)v5 + 1);
    v6 = v9 | (v6 << 8);
    v8 += 8;
    if ((v7 & 3) == 0)
      break;
    ++v7;
  }
  while (v5 < (unsigned int *)((char *)this + a2));
  result = 0;
  v16[0] = v5;
  v11 = v6 << (24 - v8);
  LODWORD(v17) = v11;
  *a3 = 0;
  if (a2 > 2)
  {
    v12 = v8 - 3;
    v13 = v11 >> 21;
    HIDWORD(v17) = v8 - 3;
    if (((v8 - 3) & 0x80000000) == 0)
    {
      v14 = v11 << 11;
      goto LABEL_14;
    }
LABEL_11:
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v16, v5);
    v5 = (unsigned int *)(v16[0] + 4);
    v16[0] += 4;
    v13 |= v17 >> SBYTE4(v17);
    v12 = HIDWORD(v17) + 32;
    if (HIDWORD(v17) == -32)
      v14 = 0;
    else
      v14 = (_DWORD)v17 << -BYTE4(v17);
LABEL_14:
    LODWORD(v17) = v14;
    if (v13 == 695)
    {
      v15 = v14 >> 19;
      HIDWORD(v17) = v12 - 13;
      if (v12 - 13 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v16, v5);
        v15 |= v17 >> SBYTE4(v17);
      }
      *a3 = v15 + 3;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MP4::LOASHeader::CopyByteAlignedAccessUnitsFromAudioSyncStream(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, unsigned int a6, _DWORD *a7)
{
  _DWORD *v7;
  unsigned int v8;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v19;
  char v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  std::vector<char>::size_type v30;
  std::vector<char>::pointer begin;
  int v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  _DWORD *v38;
  char v41;
  uint64_t v42;
  _DWORD *v44;
  unsigned int v45;
  unsigned __int8 *v46[2];
  char v47;
  int v48;
  unsigned __int8 *v49[2];
  char v50;
  int v51;
  std::vector<char> v52;
  _QWORD v53[2];
  uint64_t v54;
  unsigned int v55;
  __int16 v56;
  _DWORD v57[3];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v7 = a1;
  if (*a1)
  {
    v8 = a6;
    v38 = a7;
    v11 = 0;
    v12 = 0;
    v41 = a3 + 1;
    v42 = a3;
    while (1)
    {
      v13 = *(_QWORD *)(a2 + 16 * v11);
      v14 = a2 + 16 * v11;
      v15 = *(unsigned int *)(v14 + 12);
      v44 = (_DWORD *)(v14 + 12);
      v16 = (unsigned __int8 *)(a3 + v13);
      v55 = 0;
      v56 = 1;
      memset(v57, 0, 11);
      v59 = 0;
      v60 = 0;
      v58 = 0;
      v17 = (unsigned __int8 *)(a3 + v13 + v15);
      v53[0] = a3 + v13;
      v53[1] = v17;
      v54 = 0;
      if (((a3 + v13) & 3) != 0 && (_DWORD)v15 != 0)
      {
        v19 = 0;
        v20 = v41 + v13;
        v21 = -8;
        v22 = v16;
        do
        {
          v23 = v21;
          v24 = *v22++;
          v19 = v24 | (v19 << 8);
          v21 += 8;
          if ((v20 & 3) == 0)
            break;
          ++v20;
        }
        while (v22 < v17);
        v53[0] = v22;
        LODWORD(v54) = v19 << (24 - v21);
        HIDWORD(v54) = v23 + 16;
      }
      v25 = MP4::LOASHeader::Deserialize(&v55, (uint64_t)v53);
      if ((_DWORD)v25)
        goto LABEL_36;
      v45 = v12;
      if (a4 && !HIBYTE(v56) && !HIBYTE(v57[1]))
      {
        v26 = HIDWORD(v59);
        v27 = v57[0];
        v28 = HIDWORD(v58);
        v29 = HIDWORD(v59) >> 3;
        memset(&v52, 0, sizeof(v52));
        if ((v59 & 0x700000000) != 0)
          v30 = v29 + 1;
        else
          v30 = v29;
        if ((_DWORD)v30)
        {
          std::vector<unsigned char>::__append(&v52, v30);
          begin = v52.__begin_;
        }
        else
        {
          begin = 0;
        }
        v49[0] = v16;
        v49[1] = v17;
        v50 = 0;
        v51 = 0;
        MP4::LATMHeader::CopyBitsToByteAlignedBuffer(v49, v27 + v28 + 24, v26, begin);
        if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 == v30)
        {
          v32 = memcmp(begin, *(const void **)a4, v30);
          v33 = v32 == 0;
          if (v32)
            v25 = 4294967288;
          else
            v25 = 0;
        }
        else
        {
          v33 = 0;
          v25 = 4294967288;
        }
        v7 = a1;
        if (begin)
          operator delete(begin);
        if (!v33)
        {
LABEL_38:
          a7 = v38;
          v12 = v45;
          goto LABEL_39;
        }
        v8 = a6;
      }
      v34 = v60;
      v35 = v60 + v45;
      if (v60 + v45 > v8)
        goto LABEL_38;
      v36 = HIDWORD(v60) + 24;
      if ((v60 & 0x700000000) != 0)
      {
        v46[0] = v16;
        v46[1] = v17;
        v47 = 0;
        v48 = 0;
        MP4::LATMHeader::CopyBitsToByteAlignedBuffer(v46, v36, 8 * v60, a5);
      }
      else
      {
        memcpy(a5, &v16[v36 >> 3], v60);
      }
      a3 = v42;
      *(_QWORD *)(a2 + 16 * v11) = v45;
      *v44 = v34;
      *(_DWORD *)(a2 + 16 * v11 + 8) = 0;
      a5 += v34;
      ++v11;
      v12 = v35;
      if (v11 >= *v7)
      {
        v12 = v35;
LABEL_36:
        a7 = v38;
        goto LABEL_39;
      }
    }
  }
  LODWORD(v11) = 0;
  v12 = 0;
  v25 = 0;
LABEL_39:
  *a7 = v12;
  *v7 = v11;
  return v25;
}

void sub_18EEABC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SoundCheckAnalyzer::~SoundCheckAnalyzer(SoundCheckAnalyzer *this)
{
  SoundCheckAnalyzer::~SoundCheckAnalyzer(this);
  JUMPOUT(0x193FFE460);
}

{
  _BYTE *v2;
  _BYTE *v3;
  void *v4;

  *(_QWORD *)this = &off_1E2907988;
  removeGatedLoudness((_QWORD **)this + 7);
  v2 = (_BYTE *)*((_QWORD *)this + 11);
  if (v2)
  {
    v3 = (_BYTE *)*((_QWORD *)this + 12);
    if (v3 != v2)
      *((_QWORD *)this + 12) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v2);
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 9) = v4;
    operator delete(v4);
  }
}

uint64_t SoundCheckAnalyzer::Finish(SoundCheckAnalyzer *this, CACFDictionary *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  float v7;
  const char *v8;
  float v9;
  const char *v10;
  const CFDictionaryKeyCallBacks *v11;
  const CFDictionaryValueCallBacks *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  __CFDictionary *v18;
  __int16 v19;
  __CFDictionary *Mutable;
  __int16 v21;
  char __str[8];
  __int16 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 8) & 8) != 0)
  {
    v11 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    *(_QWORD *)__str = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v23 = 257;
    Mutable = CFDictionaryCreateMutable(0, 0, v11, v12);
    v21 = 257;
    v18 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v19 = 257;
    if ((*((_BYTE *)this + 8) & 2) != 0)
    {
      v13 = *((_QWORD *)this + 7);
      if (v13)
      {
        computeItuLoudnessValue(v13);
        computeEbuLoudnessRange(*((_QWORD *)this + 7));
        v14 = *((_QWORD *)this + 7);
        if (*(_BYTE *)(v14 + 2148))
        {
          CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, CFSTR("aa itu loudness"), *(float *)(v14 + 2144));
          v14 = *((_QWORD *)this + 7);
        }
        if (*(_BYTE *)(v14 + 2156))
        {
          CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, CFSTR("aa ebu loudness range"), *(float *)(v14 + 2152));
          v14 = *((_QWORD *)this + 7);
        }
        if (*(_BYTE *)(v14 + 2164))
        {
          CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, CFSTR("aa ebu top of loudness range"), *(float *)(v14 + 2160));
          v14 = *((_QWORD *)this + 7);
        }
        if (*(_BYTE *)(v14 + 2172))
        {
          CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, CFSTR("aa ebu max momentary loudness"), *(float *)(v14 + 2168));
          v14 = *((_QWORD *)this + 7);
        }
        if (*(_BYTE *)(v14 + 2180))
          CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, CFSTR("aa ebu max short-term loudness"), *(float *)(v14 + 2176));
      }
    }
    if ((*((_BYTE *)this + 8) & 4) != 0
      && TruePeakAnalyzer::PeakValue((SoundCheckAnalyzer *)((char *)this + 64)) >= *((float *)this + 26))
    {
      v15 = TruePeakAnalyzer::PeakValue((SoundCheckAnalyzer *)((char *)this + 64));
      CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, CFSTR("aa itu true peak"), v15);
      v16 = TruePeakAnalyzer::SamplePeakValue((SoundCheckAnalyzer *)((char *)this + 64));
      CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, CFSTR("aa itu sample peak"), v16);
    }
    if (CACFDictionary::Size((CACFDictionary *)__str))
      CACFDictionary::AddDictionary(a2, CFSTR("sound check info"), *(const __CFDictionary **)__str);
    if (CACFDictionary::Size((CACFDictionary *)&Mutable))
      CACFDictionary::AddDictionary(a2, CFSTR("main loudness parameters"), Mutable);
    if (CACFDictionary::Size((CACFDictionary *)&v18))
      CACFDictionary::AddDictionary(a2, CFSTR("additional loudness parameters"), v18);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v18);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
    CACFDictionary::~CACFDictionary((CACFDictionary *)__str);
  }
  else
  {
    snprintf(__str, 0x20uLL, "%u", 0);
    CACFDictionary::AddCString(a2, CFSTR("aa version"), __str);
    if ((*((_BYTE *)this + 8) & 2) != 0)
    {
      v4 = *((_QWORD *)this + 7);
      if (v4)
      {
        computeItuLoudnessValue(v4);
        computeEbuLoudnessRange(*((_QWORD *)this + 7));
        v6 = *((_QWORD *)this + 7);
        if (*(_BYTE *)(v6 + 2148))
        {
          AddToDictionaryVA(a2, CFSTR("aa itu loudness"), v5, *(float *)(v6 + 2144));
          v6 = *((_QWORD *)this + 7);
        }
        if (*(_BYTE *)(v6 + 2156))
        {
          AddToDictionaryVA(a2, CFSTR("aa ebu loudness range"), v5, *(float *)(v6 + 2152));
          v6 = *((_QWORD *)this + 7);
        }
        if (*(_BYTE *)(v6 + 2164))
        {
          AddToDictionaryVA(a2, CFSTR("aa ebu top of loudness range"), v5, *(float *)(v6 + 2160));
          v6 = *((_QWORD *)this + 7);
        }
        if (*(_BYTE *)(v6 + 2172))
        {
          AddToDictionaryVA(a2, CFSTR("aa ebu max momentary loudness"), v5, *(float *)(v6 + 2168));
          v6 = *((_QWORD *)this + 7);
        }
        if (*(_BYTE *)(v6 + 2180))
          AddToDictionaryVA(a2, CFSTR("aa ebu max short-term loudness"), v5, *(float *)(v6 + 2176));
      }
    }
    if ((*((_BYTE *)this + 8) & 4) != 0
      && TruePeakAnalyzer::PeakValue((SoundCheckAnalyzer *)((char *)this + 64)) >= *((float *)this + 26))
    {
      v7 = TruePeakAnalyzer::PeakValue((SoundCheckAnalyzer *)((char *)this + 64));
      AddToDictionaryVA(a2, CFSTR("aa itu true peak"), v8, v7);
      v9 = TruePeakAnalyzer::SamplePeakValue((SoundCheckAnalyzer *)((char *)this + 64));
      AddToDictionaryVA(a2, CFSTR("aa itu sample peak"), v10, v9);
    }
  }
  return 0;
}

void sub_18EEAC05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  _Unwind_Resume(a1);
}

uint64_t AddToDictionaryVA(CACFDictionary *a1, const __CFString *a2, const char *a3, ...)
{
  uint64_t result;
  char __str[64];
  uint64_t v7;
  va_list va;

  va_start(va, a3);
  v7 = *MEMORY[0x1E0C80C00];
  result = vsnprintf(__str, 0x40uLL, "%6.2f", va);
  if ((result & 0x80000000) == 0)
    return CACFDictionary::AddCString(a1, a2, __str);
  return result;
}

uint64_t SoundCheckAnalyzer::Start(int32x2_t *this, const AudioStreamBasicDescription *a2, const AudioChannelLayout *a3)
{
  __int128 v5;
  __int128 v6;
  __int32 v7;
  AudioChannelLayoutTag mChannelLayoutTag;
  CAAudioChannelLayout *mChannelsPerFrame;
  float mSampleRate;
  uint64_t result;
  unint64_t v12;
  TruePeak *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  TruePeak *v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  int32x2_t v30;
  unint64_t v31;
  _BYTE *v32;
  int32x2_t v33;
  uint64_t v34;
  unint64_t v35;
  int32x2_t v36;
  int32x2_t v37;

  if ((a2->mFormatFlags & 0x23) != 1)
    return 4294967246;
  v5 = *(_OWORD *)&a2->mSampleRate;
  v6 = *(_OWORD *)&a2->mBytesPerPacket;
  this[6] = *(int32x2_t *)&a2->mBitsPerChannel;
  *(_OWORD *)this[2].i8 = v5;
  *(_OWORD *)this[4].i8 = v6;
  v7 = this[1].i32[0];
  if ((v7 & 2) == 0)
    goto LABEL_7;
  if (a3)
  {
    mChannelLayoutTag = a3->mChannelLayoutTag;
    mChannelsPerFrame = (CAAudioChannelLayout *)a2->mChannelsPerFrame;
  }
  else
  {
    mChannelsPerFrame = (CAAudioChannelLayout *)a2->mChannelsPerFrame;
    if ((_DWORD)mChannelsPerFrame == 1)
    {
      mChannelLayoutTag = 6553601;
    }
    else
    {
      if ((_DWORD)mChannelsPerFrame != 2)
        return 1718449215;
      mChannelLayoutTag = 6619138;
    }
  }
  mSampleRate = a2->mSampleRate;
  result = initGatedLoudness(mChannelsPerFrame, mChannelLayoutTag, &this[7], mSampleRate);
  if (!(_DWORD)result)
  {
    v7 = this[1].i32[0];
LABEL_7:
    if ((v7 & 4) == 0)
      return 0;
    v12 = (int)a2->mChannelsPerFrame;
    v13 = (TruePeak *)this[8];
    this[9] = (int32x2_t)v13;
    if ((_DWORD)v12)
    {
      v14 = *(_QWORD *)&this[10] - (_QWORD)v13;
      if (v12 <= v14 >> 7)
      {
        v29 = v12 << 7;
        v20 = (TruePeak *)((char *)v13 + 128 * v12);
        do
        {
          TruePeak::TruePeak(v13);
          v13 = (TruePeak *)((char *)v13 + 128);
          v29 -= 128;
        }
        while (v29);
        this[9] = (int32x2_t)v20;
      }
      else
      {
        if ((v12 & 0x80000000) != 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v15 = v14 >> 6;
        if (v14 >> 6 <= v12)
          v15 = v12;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFF80)
          v16 = 0x1FFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16 >> 57)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v17 = (char *)operator new(v16 << 7);
        v18 = 0;
        v19 = &v17[128 * v16];
        v20 = (TruePeak *)&v17[128 * v12];
        do
        {
          TruePeak::TruePeak((TruePeak *)&v17[v18]);
          v18 += 128;
        }
        while (v12 << 7 != v18);
        v22 = (char *)this[8];
        v21 = (char *)this[9];
        if (v21 != v22)
        {
          do
          {
            v23 = *((_OWORD *)v21 - 8);
            v24 = *((_OWORD *)v21 - 7);
            v25 = *((_OWORD *)v21 - 5);
            *((_OWORD *)v17 - 6) = *((_OWORD *)v21 - 6);
            *((_OWORD *)v17 - 5) = v25;
            *((_OWORD *)v17 - 8) = v23;
            *((_OWORD *)v17 - 7) = v24;
            v26 = *((_OWORD *)v21 - 4);
            v27 = *((_OWORD *)v21 - 3);
            v28 = *((_OWORD *)v21 - 2);
            *((_WORD *)v17 - 8) = *((_WORD *)v21 - 8);
            *((_OWORD *)v17 - 3) = v27;
            *((_OWORD *)v17 - 2) = v28;
            *((_OWORD *)v17 - 4) = v26;
            v17 -= 128;
            v21 -= 128;
          }
          while (v21 != v22);
          v21 = v22;
        }
        this[8] = (int32x2_t)v17;
        this[9] = (int32x2_t)v20;
        this[10] = (int32x2_t)v19;
        if (v21)
        {
          operator delete(v21);
          v20 = (TruePeak *)this[9];
        }
      }
    }
    else
    {
      v20 = v13;
    }
    v30 = this[8];
    if (v20 != (TruePeak *)v30)
    {
      v31 = ((uint64_t)v20 - *(_QWORD *)&v30) >> 7;
      if (v31 <= 1)
        v31 = 1;
      v32 = (_BYTE *)(*(_QWORD *)&v30 + 112);
      do
      {
        *v32 = 0;
        v32 += 128;
        --v31;
      }
      while (v31);
    }
    if ((int)v12 > 1)
    {
      std::valarray<float>::resize((uint64_t)&this[11], 0x8000);
      v20 = (TruePeak *)this[9];
    }
    v33 = this[8];
    if (v20 == (TruePeak *)v33)
      return 0;
    v34 = 0;
    v35 = 0;
    do
    {
      TruePeak::Reset((TruePeak *)(*(_QWORD *)&v33 + v34));
      ++v35;
      v33 = this[8];
      v36 = this[9];
      v34 += 128;
    }
    while (v35 < (uint64_t)(*(_QWORD *)&v36 - *(_QWORD *)&v33) >> 7);
    if (*(_QWORD *)&v36 == *(_QWORD *)&v33)
    {
      return 0;
    }
    else
    {
      TruePeak::GetStats();
      result = 0;
      this[13] = vrev64_s32(v37);
    }
  }
  return result;
}

void sub_18EEAC410(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 72) = v2;
  _Unwind_Resume(exception_object);
}

void parseInfoStringsChunk(unsigned __int8 *a1, uint64_t a2, CACFDictionary *a3)
{
  int v5;
  unsigned __int8 *v6;
  const UInt8 *v7;
  const __CFAllocator *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  CFStringRef v12;
  unsigned __int8 *v13;
  const __CFString *v14;
  unint64_t v15;
  const __CFString *v17;
  const __CFString *v18;
  unsigned __int8 *v19;
  unsigned int v20;

  if ((unint64_t)a2 >= 4 && *(_DWORD *)a1 && a2 >= 5)
  {
    v5 = 0;
    v6 = &a1[a2];
    v20 = bswap32(*(_DWORD *)a1);
    v7 = a1 + 4;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = &a1[a2 - 1];
    v19 = &a1[a2 - 2];
    while (!*v7)
    {
      v10 = 0;
LABEL_15:
      v12 = CFStringCreateWithBytes(v8, v7, v10, 0x8000100u, 0);
      if (v12)
      {
        v13 = (unsigned __int8 *)&v7[v10 + 1];
        if (v13 >= v6)
          return;
        v14 = v12;
        if (*v13)
        {
          v15 = 0;
          while (&v19[-v10] - v7 != v15)
          {
            if (!v7[v10 + 2 + v15++])
            {
              if (v15 < v6 - v13)
                goto LABEL_24;
              return;
            }
          }
          return;
        }
        v15 = 0;
LABEL_24:
        v17 = CFStringCreateWithBytes(v8, &v7[v10 + 1], v15, 0x8000100u, 0);
        if (v17)
        {
          v18 = v17;
          if (CFStringGetLength(v17) && CFStringGetLength(v14))
            CACFDictionary::AddString(a3, v14, v18);
          v13 += v15 + 1;
          CFRelease(v18);
        }
        CFRelease(v14);
        v7 = v13;
      }
      if (++v5 >= v20 || v7 >= v6)
        return;
    }
    v10 = 0;
    while (v9 - v7 != v10)
    {
      if (!v7[++v10])
      {
        if (v10 < v6 - v7)
          goto LABEL_15;
        return;
      }
    }
  }
}

uint64_t CAFtoAF_FormatListItem(uint64_t result, AudioFormatListItem *a2)
{
  AudioFormatID v2;
  UInt32 v3;
  UInt32 v4;
  UInt32 v5;
  UInt32 v6;
  AudioFormatFlags v7;
  int v8;
  int v9;
  AudioFormatFlags v10;

  *(_QWORD *)&a2->mASBD.mBitsPerChannel = 0;
  *(_OWORD *)&a2->mASBD.mSampleRate = 0u;
  *(_OWORD *)&a2->mASBD.mBytesPerPacket = 0u;
  a2->mASBD.mSampleRate = *(Float64 *)result;
  v2 = *(_DWORD *)(result + 8);
  a2->mASBD.mFormatID = v2;
  v3 = *(_DWORD *)(result + 16);
  v4 = *(_DWORD *)(result + 20);
  a2->mASBD.mBytesPerPacket = v3;
  a2->mASBD.mFramesPerPacket = v4;
  v5 = *(_DWORD *)(result + 24);
  v6 = *(_DWORD *)(result + 28);
  a2->mASBD.mChannelsPerFrame = v5;
  a2->mASBD.mBitsPerChannel = v6;
  if (v4 == 1)
    a2->mASBD.mBytesPerFrame = v3;
  v7 = *(_DWORD *)(result + 12);
  if (v2 == 1819304813)
  {
    if ((v7 & 1) != 0)
      v8 = 1;
    else
      v8 = 4;
    v9 = (v8 | *(_DWORD *)(result + 12) & 2) ^ 2;
    if ((v6 & 7) != 0 || (v6 >> 3) * v5 != v3)
      v10 = v9 | 0x10;
    else
      v10 = v9 | 8;
    a2->mASBD.mFormatFlags = v10;
  }
  else
  {
    a2->mASBD.mFormatFlags = v7;
  }
  a2->mChannelLayoutTag = *(_DWORD *)(result + 32);
  return result;
}

BOOL CAFRegionChunk_BtoN(CAFRegionChunk *a1, unint64_t a2)
{
  UInt32 mNumberRegions;
  UInt32 v3;
  UInt32 v4;
  int8x8_t *mRegions;
  _BOOL8 v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int8x8_t *v11;
  uint64_t v12;

  mNumberRegions = a1->mNumberRegions;
  v3 = bswap32(mNumberRegions);
  a1->mSMPTE_TimeType = bswap32(a1->mSMPTE_TimeType);
  a1->mNumberRegions = v3;
  if (!mNumberRegions)
    return 0;
  v4 = 0;
  mRegions = (int8x8_t *)a1->mRegions;
  while (1)
  {
    v6 = (char *)mRegions - (char *)a1 + 40 > a2;
    if ((char *)mRegions - (char *)a1 + 40 > a2)
      break;
    v7 = a2 - ((char *)mRegions - (char *)a1);
    v8 = v7 - 12;
    if (v7 < 0xC)
      break;
    *mRegions = vrev32_s8(*mRegions);
    v9 = mRegions[1].u32[0];
    v10 = bswap32(v9);
    mRegions[1].i32[0] = v10;
    if (v10 > (v8 / 0x1C))
      break;
    if (v9)
    {
      v11 = mRegions + 2;
      v12 = v10;
      do
      {
        v11[-1].i32[1] = bswap32(v11[-1].u32[1]);
        *v11 = (int8x8_t)bswap64((unint64_t)*v11);
        v11[1].i32[0] = bswap32(v11[1].u32[0]);
        v11[2] = vrev32_s8(v11[2]);
        v11 = (int8x8_t *)((char *)v11 + 28);
        --v12;
      }
      while (v12);
    }
    mRegions = (int8x8_t *)((char *)mRegions + 28 * v10 + 12);
    if (++v4 == v3)
      return 0;
  }
  a1->mNumberRegions = v4;
  return v6;
}

void std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<CAFStringsWrapper::CAFStringWrapper>::__construct_one_at_end[abi:ne180100]<CAFStringsWrapper::CAFStringWrapper const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::string *v4;
  __int128 v5;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v3 = *(_DWORD *)a2;
  v4 = (std::string *)(v3 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_QWORD *)(a1 + 8) = v3 + 32;
}

void sub_18EEAC858(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<CAFStringsWrapper::CAFStringWrapper>::__push_back_slow_path<CAFStringsWrapper::CAFStringWrapper const&>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  std::string *v12;
  char *v13;
  int v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  unint64_t v18;
  char *v20;
  int64x2_t v21;
  char *v22;
  unint64_t *v23;

  v3 = *a1;
  v2 = a1[1];
  v4 = (uint64_t)(v2 - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v23 = a1 + 2;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v4];
  v20 = v10;
  v21.i64[0] = (uint64_t)v11;
  v21.i64[1] = (uint64_t)v11;
  v22 = &v10[32 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  v12 = (std::string *)(v11 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v3 = *a1;
    v2 = a1[1];
    v13 = (char *)v21.i64[1];
    v11 = (char *)v21.i64[0];
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
    v13 = v11;
  }
  if (v2 == v3)
  {
    v16 = vdupq_n_s64(v3);
  }
  else
  {
    do
    {
      v14 = *(_DWORD *)(v2 - 32);
      v2 -= 32;
      *((_DWORD *)v11 - 8) = v14;
      v11 -= 32;
      v15 = *(_OWORD *)(v2 + 8);
      *((_QWORD *)v11 + 3) = *(_QWORD *)(v2 + 24);
      *(_OWORD *)(v11 + 8) = v15;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    while (v2 != v3);
    v16 = *(int64x2_t *)a1;
  }
  v17 = v13 + 32;
  *a1 = (unint64_t)v11;
  a1[1] = (unint64_t)(v13 + 32);
  v21 = v16;
  v18 = a1[2];
  a1[2] = (unint64_t)v22;
  v22 = (char *)v18;
  v20 = (char *)v16.i64[0];
  std::__split_buffer<CAFStringsWrapper::CAFStringWrapper>::~__split_buffer((uint64_t)&v20);
  return v17;
}

void sub_18EEAC9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CAFStringsWrapper::CAFStringWrapper>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<CAFStringsWrapper::CAFStringWrapper>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void CADeprecated::CAAutoFree<CAFStrings>::allocBytes(void **a1, size_t size)
{
  void *v4;
  void *v5;
  void *v6;
  std::bad_alloc *exception;
  std::bad_alloc *v8;

  v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  v5 = malloc_type_malloc(size, 0x2C8E6D5CuLL);
  v6 = v5;
  if (size && !v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v8 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v5, size);
  *a1 = v6;
}

char *CAFStringsWrapper::Get(CAFStringsWrapper *this, uint64_t a2, int a3)
{
  uint64_t v3;
  CAFStringsWrapper *v4;
  int v5;
  char *result;
  char *v7;

  if (((a2 - (_QWORD)this) & 0x1FFFFFFFE0) == 0)
    return 0;
  v3 = 0;
  v4 = this;
  while (1)
  {
    v5 = *(_DWORD *)v4;
    v4 = (CAFStringsWrapper *)((char *)v4 + 32);
    if (v5 == a3)
      break;
    if (((unint64_t)(a2 - (_QWORD)this) >> 5) == ++v3)
      return 0;
  }
  v7 = (char *)this + 32 * v3;
  result = v7 + 8;
  if (v7[31] < 0)
    return *(char **)result;
  return result;
}

void CAFStringsWrapper::Put(CAFStringsWrapper *this, int a2, std::string::value_type *__s)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  char *v11;
  uint64_t v12;
  int v13;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v13 = a2;
  std::string::__assign_external(&__p, __s);
  v5 = *((_QWORD *)this + 1);
  v6 = v5 - *(_QWORD *)this;
  if ((v6 & 0x1FFFFFFFE0) != 0)
  {
    v7 = 0;
    v8 = (v6 >> 5);
    v9 = *(int **)this;
    while (1)
    {
      v10 = *v9;
      v9 += 8;
      if (v10 == a2)
        break;
      if (v8 == ++v7)
        goto LABEL_5;
    }
    v12 = *(_QWORD *)this + 32 * v7;
    *(_DWORD *)v12 = v13;
    std::string::operator=((std::string *)(v12 + 8), &__p);
  }
  else
  {
LABEL_5:
    if (v5 >= *((_QWORD *)this + 2))
    {
      v11 = std::vector<CAFStringsWrapper::CAFStringWrapper>::__push_back_slow_path<CAFStringsWrapper::CAFStringWrapper const&>((unint64_t *)this, (uint64_t)&v13);
    }
    else
    {
      std::vector<CAFStringsWrapper::CAFStringWrapper>::__construct_one_at_end[abi:ne180100]<CAFStringsWrapper::CAFStringWrapper const&>((uint64_t)this, (uint64_t)&v13);
      v11 = (char *)(v5 + 32);
    }
    *((_QWORD *)this + 1) = v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_18EEACBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int32x4_t *UpmixMonoToStereoInterleaved32_ARM(int32x4_t *result, __int32 *a2, unsigned int a3)
{
  char v3;
  __int32 v4;
  __int32 *v5;
  unsigned int v6;
  unsigned int v7;
  int32x4_t v8;
  __int32 *v9;
  int32x4_t *v10;
  int i;
  __int32 v12;
  float32x2x2_t v13;

  if ((a2 & 0xF) != 0 && a3)
  {
    v3 = (_BYTE)a2 + 8;
    do
    {
      v4 = result->i32[0];
      result = (int32x4_t *)((char *)result + 4);
      v5 = a2 + 2;
      *a2 = v4;
      a2[1] = v4;
      v6 = a3 - 1;
      if ((v3 & 0xF) == 0)
        break;
      v3 += 8;
      a2 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    v5 = a2;
    v6 = a3;
  }
  if (v6 >= 4)
  {
    v7 = v6 >> 2;
    do
    {
      v8 = *result++;
      v13.val[0] = (float32x2_t)v8.i64[0];
      v13.val[1] = (float32x2_t)v8.i64[0];
      v9 = v5 + 8;
      vst2_f32((float *)v5, v13);
      v10 = (int32x4_t *)(v5 + 4);
      *v10 = vzip2q_s32(v8, v8);
      v5 = v9;
      --v7;
    }
    while (v7);
    v5 = v9;
  }
  for (i = v6 & 3; i; --i)
  {
    v12 = result->i32[0];
    result = (int32x4_t *)((char *)result + 4);
    *v5 = v12;
    v5[1] = v12;
    v5 += 2;
  }
  return result;
}

int16x8_t *UpmixMonoToStereoInterleaved16_ARM(int16x8_t *result, __int16 *a2, unsigned int a3)
{
  char v3;
  __int16 v4;
  __int16 *v5;
  unsigned int v6;
  unsigned int v7;
  int16x8_t v8;
  __int16 *v9;
  int16x8_t *v10;
  int i;
  __int16 v12;
  int16x4x2_t v13;

  if ((a2 & 0xF) != 0 && a3)
  {
    v3 = (_BYTE)a2 + 4;
    do
    {
      v4 = result->i16[0];
      result = (int16x8_t *)((char *)result + 2);
      *a2 = v4;
      v5 = a2 + 2;
      a2[1] = v4;
      v6 = a3 - 1;
      if ((v3 & 0xF) == 0)
        break;
      v3 += 4;
      a2 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    v5 = a2;
    v6 = a3;
  }
  if (v6 >= 8)
  {
    v7 = v6 >> 3;
    do
    {
      v8 = *result++;
      v13.val[0] = (int16x4_t)v8.i64[0];
      v13.val[1] = (int16x4_t)v8.i64[0];
      v9 = v5 + 16;
      vst2_s16(v5, v13);
      v10 = (int16x8_t *)(v5 + 8);
      *v10 = vzip2q_s16(v8, v8);
      v5 = v9;
      --v7;
    }
    while (v7);
    v5 = v9;
  }
  for (i = v6 & 7; i; --i)
  {
    v12 = result->i16[0];
    result = (int16x8_t *)((char *)result + 2);
    *v5 = v12;
    v5[1] = v12;
    v5 += 2;
  }
  return result;
}

__int16 *DownmixStereoInterleavedInt16ToMono_ARM(__int16 *result, int16x8_t *a2, unsigned int a3)
{
  char v3;
  int16x8_t *v4;
  int v5;
  int v6;
  int v7;
  __int16 v8;
  unsigned int v9;
  unsigned int v10;
  int32x4_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int i;
  int v15;
  int v16;
  int v17;
  __int16 v18;

  if ((a2 & 0xF) != 0 && a3)
  {
    v3 = (_BYTE)a2 + 2;
    do
    {
      v4 = (int16x8_t *)(result + 2);
      v5 = result[1] + *result;
      v6 = (23170 * v5) >> 15;
      v7 = ((23170 * v5) >> 31) ^ v6;
      if (v5 > 1)
        v8 = 0x7FFF;
      else
        v8 = 0x8000;
      if (v7 < 0x8000)
        v8 = v6;
      a2->i16[0] = v8;
      a2 = (int16x8_t *)((char *)a2 + 2);
      v9 = a3 - 1;
      if ((v3 & 0xF) == 0)
        break;
      v3 += 2;
      result += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    v9 = a3;
    v4 = (int16x8_t *)result;
  }
  if (v9 >= 8)
  {
    v10 = v9 >> 3;
    v11 = vdupq_n_s32(0x5A82u);
    do
    {
      v12 = *v4;
      v13 = v4[1];
      v4 += 2;
      *a2++ = vqrshrn_high_n_s32(vqrshrn_n_s32(vmulq_s32(vpaddlq_s16(v12), v11), 0xFuLL), vmulq_s32(vpaddlq_s16(v13), v11), 0xFuLL);
      --v10;
    }
    while (v10);
  }
  for (i = v9 & 7; i; --i)
  {
    v15 = v4->i16[1] + v4->i16[0];
    v16 = (23170 * v15) >> 15;
    v17 = ((23170 * v15) >> 31) ^ v16;
    if (v15 > 1)
      v18 = 0x7FFF;
    else
      v18 = 0x8000;
    if (v17 < 0x8000)
      v18 = v16;
    a2->i16[0] = v18;
    a2 = (int16x8_t *)((char *)a2 + 2);
    v4 = (int16x8_t *)((char *)v4 + 4);
  }
  return result;
}

_OWORD *SwapPCM16_ARM(_OWORD *result, int8x16_t *a2, unsigned int a3)
{
  char v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int8x16_t v7;
  int8x16_t v8;
  int i;
  unsigned int v10;

  if ((a2 & 0xF) != 0 && a3)
  {
    v3 = (_BYTE)a2 + 2;
    do
    {
      v4 = *(unsigned __int16 *)result;
      result = (_OWORD *)((char *)result + 2);
      a2->i16[0] = bswap32(v4) >> 16;
      a2 = (int8x16_t *)((char *)a2 + 2);
      v5 = a3 - 1;
      if ((v3 & 0xF) == 0)
        break;
      v3 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    v5 = a3;
  }
  if (v5 >= 0x10)
  {
    v6 = v5 >> 4;
    do
    {
      v7 = *(int8x16_t *)result;
      v8 = *((int8x16_t *)result + 1);
      result += 2;
      *a2 = vrev16q_s8(v7);
      a2[1] = vrev16q_s8(v8);
      a2 += 2;
      --v6;
    }
    while (v6);
  }
  for (i = v5 & 0xF; i; --i)
  {
    v10 = *(unsigned __int16 *)result;
    result = (_OWORD *)((char *)result + 2);
    a2->i16[0] = bswap32(v10) >> 16;
    a2 = (int8x16_t *)((char *)a2 + 2);
  }
  return result;
}

int16x8_t *NativeInt16ToNativeInt32_ARM(int16x8_t *result, uint32x4_t *a2, unsigned int a3, char a4)
{
  char v4;
  int v5;
  unsigned int v6;
  uint32x4_t v7;
  unsigned int v8;
  int16x8_t v9;
  int i;
  int v11;

  if ((a2 & 0xF) != 0 && a3)
  {
    v4 = (_BYTE)a2 + 4;
    do
    {
      v5 = result->i16[0];
      result = (int16x8_t *)((char *)result + 2);
      a2->i32[0] = v5 << a4;
      a2 = (uint32x4_t *)((char *)a2 + 4);
      v6 = a3 - 1;
      if ((v4 & 0xF) == 0)
        break;
      v4 += 4;
      --a3;
    }
    while (a3);
  }
  else
  {
    v6 = a3;
  }
  if (v6 >= 8)
  {
    v7 = (uint32x4_t)vdupq_n_s32(a4);
    v8 = v6 >> 3;
    do
    {
      v9 = *result++;
      *a2 = vshlq_u32((uint32x4_t)vmovl_s16(*(int16x4_t *)v9.i8), v7);
      a2[1] = vshlq_u32((uint32x4_t)vmovl_high_s16(v9), v7);
      a2 += 2;
      --v8;
    }
    while (v8);
  }
  for (i = v6 & 7; i; --i)
  {
    v11 = result->i16[0];
    result = (int16x8_t *)((char *)result + 2);
    a2->i32[0] = v11 << a4;
    a2 = (uint32x4_t *)((char *)a2 + 4);
  }
  return result;
}

int32x4_t *NativeInt32ToNativeInt16_ARM(int32x4_t *result, int16x8_t *a2, unsigned int a3, int a4)
{
  char v4;
  char v5;
  int v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  int32x4_t v11;
  unsigned int v12;
  int16x8_t v13;
  int v14;
  char v15;
  int v16;
  int v17;
  int v18;
  __int16 v19;

  if ((a2 & 0xF) != 0 && a3)
  {
    v4 = a4 - 1;
    v5 = (_BYTE)a2 + 2;
    do
    {
      v6 = result->i32[0];
      result = (int32x4_t *)((char *)result + 4);
      v7 = ((v6 >> v4) + 1) >> 1;
      v8 = (((v6 >> v4) + 1) >> 31) ^ v7;
      if (v6 >> v4 > 0)
        v9 = 0x7FFF;
      else
        v9 = 0x8000;
      if (v8 < 0x8000)
        v9 = v7;
      a2->i16[0] = v9;
      a2 = (int16x8_t *)((char *)a2 + 2);
      v10 = a3 - 1;
      if ((v5 & 0xF) == 0)
        break;
      v5 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    v10 = a3;
  }
  if (v10 >= 0x10)
  {
    v11 = vdupq_n_s32(-a4);
    v12 = v10 >> 4;
    do
    {
      v13 = vqmovn_high_s32(vqmovn_s32(vqrshlq_s32(result[2], v11)), vqrshlq_s32(result[3], v11));
      *a2 = vqmovn_high_s32(vqmovn_s32(vqrshlq_s32(*result, v11)), vqrshlq_s32(result[1], v11));
      a2[1] = v13;
      a2 += 2;
      result += 4;
      --v12;
    }
    while (v12);
  }
  v14 = v10 & 0xF;
  if (v14)
  {
    v15 = a4 - 1;
    do
    {
      v16 = result->i32[0];
      result = (int32x4_t *)((char *)result + 4);
      v17 = ((v16 >> v15) + 1) >> 1;
      v18 = (((v16 >> v15) + 1) >> 31) ^ v17;
      if (v16 >> v15 > 0)
        v19 = 0x7FFF;
      else
        v19 = 0x8000;
      if (v18 < 0x8000)
        v19 = v17;
      a2->i16[0] = v19;
      a2 = (int16x8_t *)((char *)a2 + 2);
      --v14;
    }
    while (v14);
  }
  return result;
}

int32x4_t *NativeInt32ToNativeInt24_ARM(int32x4_t *result, uint64_t a2, unsigned int a3, int a4)
{
  char v4;
  char v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int8x16_t *v11;
  unsigned int v12;
  int32x4_t v13;
  unsigned int v14;
  int8x16_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  int32x2_t v21;
  __int32 v22;
  uint64_t v23;
  uint64_t v24;
  __int32 v25;
  unint64_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int v30;
  char v31;
  int v32;
  int v33;
  int v34;
  int v35;

  if ((a2 & 0xF) != 0 && a3)
  {
    v4 = a4 - 1;
    v5 = a2 + 3;
    do
    {
      v6 = result->i32[0];
      result = (int32x4_t *)((char *)result + 4);
      v7 = ((v6 >> v4) + 1) >> 1;
      v8 = (((v6 >> v4) + 1) >> 31) ^ v7;
      if (v6 >> v4 > 0)
        v9 = 0x7FFFFF;
      else
        v9 = -8388608;
      if (v8 < 0x800000)
        v9 = v7;
      *(_WORD *)a2 = v9;
      v10 = HIWORD(v9);
      v11 = (int8x16_t *)(a2 + 3);
      *(_BYTE *)(a2 + 2) = v10;
      v12 = a3 - 1;
      if ((v5 & 0xF) == 0)
        break;
      v5 += 3;
      a2 += 3;
      --a3;
    }
    while (a3);
  }
  else
  {
    v12 = a3;
    v11 = (int8x16_t *)a2;
  }
  if (v12 >= 8)
  {
    v13 = vdupq_n_s32(-a4);
    v14 = v12 >> 3;
    v15.i64[0] = 0xFFFF000000;
    v15.i64[1] = 0xFFFF000000;
    do
    {
      v16 = *result;
      v17 = result[1];
      result += 2;
      v18 = (int8x16_t)vqrshlq_s32(v16, v13);
      v19 = (int8x16_t)vqrshlq_s32(v17, v13);
      v20 = v19.u32[1];
      v21 = vzip2_s32(*(int32x2_t *)v18.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
      v22 = v18.i32[0];
      v23 = v18.u8[10];
      v24 = v19.u32[3];
      v25 = v19.i32[2];
      v18.i64[0] = v18.i32[2];
      v26 = (unint64_t)(v19.i32[0] & 0xFFFFFF) << 24;
      v19.i64[0] = 0xFFFF000000;
      v19.i64[1] = v26;
      v18.i64[1] = v20;
      v27 = (int8x16_t)vshlq_u64((uint64x2_t)v18, (uint64x2_t)xmmword_18F116E60);
      v28.i64[0] = vandq_s8(v27, v15).u64[0];
      v28.i64[1] = vorrq_s8(v27, v19).i64[1];
      *(_QWORD *)&v21 &= 0xFFFFFF00FFFFFFuLL;
      v29.i64[0] = v21.u32[0];
      v29.i64[1] = v21.u32[1];
      v19.i64[0] = v22 & 0xFFFFFF;
      v19.i64[1] = v23;
      *v11 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vorrq_s8(v28, v29), (uint64x2_t)xmmword_18F116E70), v19);
      v11[1].i64[0] = (v24 << 40) | ((unint64_t)(v25 & 0xFFFFFF) << 16) | (unsigned __int16)(v20 >> 8);
      v11 = (int8x16_t *)((char *)v11 + 24);
      --v14;
    }
    while (v14);
  }
  v30 = v12 & 7;
  if (v30)
  {
    v31 = a4 - 1;
    do
    {
      v32 = result->i32[0];
      result = (int32x4_t *)((char *)result + 4);
      v33 = ((v32 >> v31) + 1) >> 1;
      v34 = (((v32 >> v31) + 1) >> 31) ^ v33;
      if (v32 >> v31 > 0)
        v35 = 0x7FFFFF;
      else
        v35 = -8388608;
      if (v34 < 0x800000)
        v35 = v33;
      v11->i16[0] = v35;
      v11->i8[2] = BYTE2(v35);
      v11 = (int8x16_t *)((char *)v11 + 3);
      --v30;
    }
    while (v30);
  }
  return result;
}

unsigned __int8 *NativeInt24ToNativeInt32_ARM(unsigned __int8 *result, uint64_t a2, unsigned int a3, char a4)
{
  char v4;
  char v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint32x2_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int i;
  int v15;

  v4 = 8 - a4;
  if ((result & 7) != 0 && a3)
  {
    v5 = (_BYTE)result + 3;
    do
    {
      v6 = (*result << 8) | (result[1] << 16) | (result[2] << 24);
      result += 3;
      *(_DWORD *)a2 = v6 >> v4;
      a2 += 4;
      v7 = a3 - 1;
      if ((v5 & 7) == 0)
        break;
      v5 += 3;
      --a3;
    }
    while (a3);
  }
  else
  {
    v7 = a3;
  }
  if (v7 >= 8)
  {
    v8 = v7 >> 3;
    v9 = (uint32x2_t)vdup_n_s32(a4);
    do
    {
      v10 = *(_QWORD *)result;
      v11 = *((_QWORD *)result + 1);
      v12 = *((_QWORD *)result + 2);
      result += 24;
      *(uint32x2_t *)a2 = vshl_u32((uint32x2_t)vmovn_s64(vshrq_n_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v10), (uint64x2_t)xmmword_18F116E80), 0x28uLL)), v9);
      *(_DWORD *)(a2 + 8) = (((char)v11 << 16) | HIWORD(v10)) << a4;
      *(uint32x2_t *)(a2 + 12) = vshl_u32((uint32x2_t)vmovn_s64(vshrq_n_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v11), (uint64x2_t)xmmword_18F116E90), 0x28uLL)), v9);
      *(_DWORD *)(a2 + 20) = (((__int16)v12 << 8) | HIBYTE(v11)) << a4;
      *(_DWORD *)(a2 + 24) = (int)((unint64_t)v12 >> 8) >> 8 << a4;
      v13 = a2 + 32;
      *(_DWORD *)(a2 + 28) = (v12 >> 40) << a4;
      a2 += 32;
      --v8;
    }
    while (v8);
    a2 = v13;
  }
  for (i = v7 & 7; i; --i)
  {
    v15 = (*result << 8) | (result[1] << 16) | (result[2] << 24);
    result += 3;
    *(_DWORD *)a2 = v15 >> v4;
    a2 += 4;
  }
  return result;
}

int32x4_t *NativeInt32ToNativeInt32_ARM(int32x4_t *result, int32x4_t *a2, unsigned int a3, signed int a4)
{
  char v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int32x4_t v9;
  unsigned int v10;
  int32x4_t v11;
  int32x4_t v12;
  int i;
  int v14;
  int v15;
  int v16;

  if ((a2 & 0xF) != 0 && a3)
  {
    v4 = (_BYTE)a2 + 4;
    do
    {
      v5 = result->i32[0];
      result = (int32x4_t *)((char *)result + 4);
      v6 = v5 >> -(char)a4;
      v7 = v5 << a4;
      if (a4 < 0)
        v7 = v6;
      a2->i32[0] = v7;
      a2 = (int32x4_t *)((char *)a2 + 4);
      v8 = a3 - 1;
      if ((v4 & 0xF) == 0)
        break;
      v4 += 4;
      --a3;
    }
    while (a3);
  }
  else
  {
    v8 = a3;
  }
  if (v8 >= 8)
  {
    v9 = vdupq_n_s32(a4);
    v10 = v8 >> 3;
    do
    {
      v11 = *result;
      v12 = result[1];
      result += 2;
      *a2 = vshlq_s32(v11, v9);
      a2[1] = vshlq_s32(v12, v9);
      a2 += 2;
      --v10;
    }
    while (v10);
  }
  for (i = v8 & 7; i; --i)
  {
    v14 = result->i32[0];
    result = (int32x4_t *)((char *)result + 4);
    v15 = v14 >> -(char)a4;
    v16 = v14 << a4;
    if (a4 < 0)
      v16 = v15;
    a2->i32[0] = v16;
    a2 = (int32x4_t *)((char *)a2 + 4);
  }
  return result;
}

float Native824FixedToLowAlignedInt32_ARM(int32x4_t *a1, int8x16_t *a2, unsigned int a3, int a4, int32x4_t a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int8x16_t v8;
  int32x4_t v9;
  unsigned int v10;
  int32x4_t v11;
  int32x4_t v12;
  int v13;
  int v14;

  v5 = a4 - 25;
  v6 = ~(-1 << a4);
  v7 = 32 - a4;
  if (a3 >= 4)
  {
    a5 = vdupq_n_s32(v5);
    v8 = (int8x16_t)vdupq_n_s32(v6);
    v9 = vdupq_n_s32(v7);
    v10 = a3 >> 2;
    v11 = vnegq_s32(v9);
    do
    {
      v12 = *a1++;
      *a2++ = vandq_s8((int8x16_t)vshlq_s32(vqshlq_s32(vqrshlq_s32(v12, a5), v9), v11), v8);
      --v10;
    }
    while (v10);
  }
  v13 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      v14 = a1->i32[0];
      a1 = (int32x4_t *)((char *)a1 + 4);
      a5.i32[0] = vqshls_s32(vqrshls_s32(v14, v5), v7);
      a2->i32[0] = (a5.i32[0] >> v7) & v6;
      a2 = (int8x16_t *)((char *)a2 + 4);
      --v13;
    }
    while (v13);
  }
  return *(float *)a5.i32;
}

int16x8_t *NativeLowAlignedInt32ToInt16_ARM(int16x8_t *result, int16x8_t *a2, unsigned int a3)
{
  char v3;
  __int32 v4;
  unsigned int v5;
  unsigned int v6;
  int16x8_t v7;
  int16x8_t v8;
  int i;
  __int32 v10;

  if ((a2 & 0xF) != 0 && a3)
  {
    v3 = (_BYTE)a2 + 2;
    do
    {
      v4 = result->i32[0];
      result = (int16x8_t *)((char *)result + 4);
      a2->i16[0] = v4;
      a2 = (int16x8_t *)((char *)a2 + 2);
      v5 = a3 - 1;
      if ((v3 & 0xF) == 0)
        break;
      v3 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    v5 = a3;
  }
  if (v5 >= 8)
  {
    v6 = v5 >> 3;
    do
    {
      v7 = *result;
      v8 = result[1];
      result += 2;
      *a2++ = vuzp1q_s16(v7, v8);
      --v6;
    }
    while (v6);
  }
  for (i = v5 & 7; i; --i)
  {
    v10 = result->i32[0];
    result = (int16x8_t *)((char *)result + 4);
    a2->i16[0] = v10;
    a2 = (int16x8_t *)((char *)a2 + 2);
  }
  return result;
}

_OWORD *NativeInt16ToLowAlignedInt32_ARM(_OWORD *result, uint32x4_t *a2, unsigned int a3)
{
  char v3;
  __int32 v4;
  unsigned int v5;
  unsigned int v6;
  uint16x8_t v7;
  uint16x8_t v8;
  int i;
  __int32 v10;

  if ((a2 & 0xF) != 0 && a3)
  {
    v3 = (_BYTE)a2 + 4;
    do
    {
      v4 = *(unsigned __int16 *)result;
      result = (_OWORD *)((char *)result + 2);
      a2->i32[0] = v4;
      a2 = (uint32x4_t *)((char *)a2 + 4);
      v5 = a3 - 1;
      if ((v3 & 0xF) == 0)
        break;
      v3 += 4;
      --a3;
    }
    while (a3);
  }
  else
  {
    v5 = a3;
  }
  if (v5 >= 0x10)
  {
    v6 = v5 >> 4;
    do
    {
      v7 = *(uint16x8_t *)result;
      v8 = *((uint16x8_t *)result + 1);
      result += 2;
      *a2 = vmovl_u16(*(uint16x4_t *)v7.i8);
      a2[1] = vmovl_high_u16(v7);
      a2[2] = vmovl_u16(*(uint16x4_t *)v8.i8);
      a2[3] = vmovl_high_u16(v8);
      a2 += 4;
      --v6;
    }
    while (v6);
  }
  for (i = v5 & 0xF; i; --i)
  {
    v10 = *(unsigned __int16 *)result;
    result = (_OWORD *)((char *)result + 2);
    a2->i32[0] = v10;
    a2 = (uint32x4_t *)((char *)a2 + 4);
  }
  return result;
}

const __int16 *StereoDeinterleaveNativeInt16ToScaledFloat32_ARM(const __int16 *result, float32x4_t **a2, unsigned int a3, float a4)
{
  float32x4_t *v4;
  float *f32;
  unsigned int v8;
  unint64_t v9;
  float v10;
  char v11;
  unsigned int v12;
  int v13;
  float v14;
  int16x8x2_t v15;

  v4 = *a2;
  f32 = (float *)a2[1];
  if (((f32 ^ *a2) & 0xF) != 0 || ((unint64_t)*a2 & 0xF) == 0 || a3 == 0)
  {
    v8 = a3;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = (float)result[v9 / 2 + 1] * a4;
      v4->f32[v9 / 4] = (float)result[v9 / 2] * a4;
      f32[v9 / 4] = v10;
      v8 = a3 - 1;
      v11 = (_BYTE)v4 + 4 + v9;
      v9 += 4;
      if ((v11 & 0xF) == 0)
        break;
      --a3;
    }
    while (a3);
    f32 = (float *)((char *)f32 + v9);
    result = (const __int16 *)((char *)result + v9);
    v4 = (float32x4_t *)((char *)v4 + v9);
    *a2 = v4;
    a2[1] = (float32x4_t *)f32;
  }
  if (v8 >= 8)
  {
    v12 = v8 >> 3;
    do
    {
      v15 = vld2q_s16(result);
      result += 16;
      *v4 = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v15.val[0].i8)), a4);
      (*a2)[1] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v15.val[0])), a4);
      *a2[1] = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v15.val[1].i8)), a4);
      a2[1][1] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v15.val[1])), a4);
      v4 = *a2 + 2;
      f32 = a2[1][2].f32;
      *a2 = v4;
      a2[1] = (float32x4_t *)f32;
      --v12;
    }
    while (v12);
  }
  v13 = v8 & 7;
  if (v13)
  {
    do
    {
      v14 = (float)result[1] * a4;
      v4->f32[0] = (float)*result * a4;
      v4 = (float32x4_t *)((char *)v4 + 4);
      *f32++ = v14;
      result += 2;
      --v13;
    }
    while (v13);
    *a2 = v4;
    a2[1] = (float32x4_t *)f32;
  }
  return result;
}

float32x4_t **StereoInterleaveFloat32ToNativeInt16Scaled_ARM(float32x4_t **result, __int16 *a2, unsigned int a3, float a4)
{
  unint64_t v4;
  float32x4_t *v5;
  float32x4_t *v6;
  __int16 *v7;
  unsigned int v8;
  unsigned int v9;
  int8x8_t v10;
  unsigned int v11;
  unsigned int v12;
  float32x4_t *v13;
  float32x4_t *v14;
  int v15;
  float32x4_t *v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  int8x8_t v23;
  int16x8x2_t v24;

  if ((a2 & 0xF) != 0 && a3)
  {
    v4 = 0;
    v5 = *result;
    v6 = result[1];
    do
    {
      v7 = &a2[v4 / 2];
      v8 = llroundf(v5->f32[v4 / 4] * a4);
      v9 = llroundf(v6->f32[v4 / 4] * a4);
      v10 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x800000008000, (int32x2_t)veor_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(v9, v8)), (int8x8_t)__PAIR64__(v9, v8))), (int8x8_t)__PAIR64__(v9, v8), vbsl_s8((int8x8_t)vcgtz_s32((int32x2_t)__PAIR64__(v9, v8)), (int8x8_t)0x7F0000007FLL, (int8x8_t)0x800000008000));
      v7[1] = v10.i16[2];
      *v7 = v10.i16[0];
      v11 = a3 - 1;
      LOBYTE(v8) = (_BYTE)a2 + 4 + v4;
      v4 += 4;
      if ((v8 & 0xF) == 0)
        break;
      --a3;
    }
    while (a3);
    a2 = (__int16 *)((char *)a2 + v4);
    *result = (float32x4_t *)((char *)v5 + v4);
    result[1] = (float32x4_t *)((char *)v6 + v4);
  }
  else
  {
    v11 = a3;
  }
  if (v11 >= 8)
  {
    v12 = v11 >> 3;
    v13 = *result;
    v14 = result[1];
    do
    {
      v24.val[0] = vqmovn_high_s32(vqmovn_s32(vcvtaq_s32_f32(vmulq_n_f32(*v13, a4))), vcvtaq_s32_f32(vmulq_n_f32(v13[1], a4)));
      v24.val[1] = vqmovn_high_s32(vqmovn_s32(vcvtaq_s32_f32(vmulq_n_f32(*v14, a4))), vcvtaq_s32_f32(vmulq_n_f32(v14[1], a4)));
      vst2q_s16(a2, v24);
      a2 += 16;
      v13 = *result + 2;
      v14 = result[1] + 2;
      *result = v13;
      result[1] = v14;
      --v12;
    }
    while (v12);
  }
  v15 = v11 & 7;
  if (v15)
  {
    v16 = *result;
    v17 = (float *)result[1];
    do
    {
      v18 = v16->f32[0];
      v16 = (float32x4_t *)((char *)v16 + 4);
      v19 = v18;
      v20 = *v17++;
      v21 = llroundf(v19 * a4);
      v22 = llroundf(v20 * a4);
      v23 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x800000008000, (int32x2_t)veor_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(v22, v21)), (int8x8_t)__PAIR64__(v22, v21))), (int8x8_t)__PAIR64__(v22, v21), vbsl_s8((int8x8_t)vcgtz_s32((int32x2_t)__PAIR64__(v22, v21)), (int8x8_t)0x7F0000007FLL, (int8x8_t)0x800000008000));
      a2[1] = v23.i16[2];
      *a2 = v23.i16[0];
      a2 += 2;
      --v15;
    }
    while (v15);
    *result = v16;
    result[1] = (float32x4_t *)v17;
  }
  return result;
}

float32_t StereoDeinterleaveInt824ToFloat32_ARM(int *a1, float32x4_t *a2, float32x4_t *a3, unsigned int a4)
{
  unsigned int v6;
  uint64_t v7;
  int *v8;
  float32x4_t v9;
  float v10;
  char v11;
  unsigned int v12;
  float32x4_t v13;
  int i;
  int v15;
  int v16;
  float32x4x2_t v18;

  if (((a3 ^ a2) & 0xF) != 0 || (a2 & 0xF) == 0 || a4 == 0)
  {
    v6 = a4;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a1 + 2;
      v9.f32[0] = vcvts_n_f32_s32(*a1, 0x18uLL);
      v10 = vcvts_n_f32_s32(a1[1], 0x18uLL);
      a2->i32[v7] = v9.i32[0];
      a3->f32[v7] = v10;
      v6 = a4 - 1;
      v11 = (_BYTE)a2 + 4 + v7 * 4;
      ++v7;
      if ((v11 & 0xF) == 0)
        break;
      a1 += 2;
      --a4;
    }
    while (a4);
    a2 = (float32x4_t *)((char *)a2 + v7 * 4);
    a3 = (float32x4_t *)((char *)a3 + v7 * 4);
    a1 = v8;
  }
  if (v6 >= 4)
  {
    v12 = v6 >> 2;
    do
    {
      v18 = vld2q_f32((const float *)a1);
      a1 += 8;
      v13 = vcvtq_n_f32_s32((int32x4_t)v18.val[0], 0x18uLL);
      v9 = vcvtq_n_f32_s32((int32x4_t)v18.val[1], 0x18uLL);
      *a2++ = v13;
      *a3++ = v9;
      --v12;
    }
    while (v12);
  }
  for (i = v6 & 3; i; --i)
  {
    v15 = *a1;
    v16 = a1[1];
    a1 += 2;
    v9.f32[0] = vcvts_n_f32_s32(v15, 0x18uLL);
    a2->i32[0] = v9.i32[0];
    a2 = (float32x4_t *)((char *)a2 + 4);
    a3->f32[0] = vcvts_n_f32_s32(v16, 0x18uLL);
    a3 = (float32x4_t *)((char *)a3 + 4);
  }
  return v9.f32[0];
}

float32_t StereoInterleaveFloat32ToInt824_ARM(float32x4_t *a1, float32x4_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  char v5;
  float32x4_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  float32x4_t v10;
  float32x4_t v11;
  int i;
  float v13;
  float v14;
  float v15;
  int v16;
  float32x4x2_t v18;

  if ((a3 & 0xF) != 0 && a4)
  {
    v4 = 0;
    v5 = a3 + 8;
    do
    {
      v6.i32[0] = vcvts_n_s32_f32(a2->f32[v4], 0x18uLL);
      v7 = a3 + 8;
      *(_DWORD *)a3 = vcvts_n_s32_f32(a1->f32[v4], 0x18uLL);
      *(_DWORD *)(a3 + 4) = v6.i32[0];
      v8 = a4 - 1;
      ++v4;
      if ((v5 & 0xF) == 0)
        break;
      v5 += 8;
      a3 += 8;
      --a4;
    }
    while (a4);
    a1 = (float32x4_t *)((char *)a1 + v4 * 4);
    a2 = (float32x4_t *)((char *)a2 + v4 * 4);
    a3 = v7;
  }
  else
  {
    v8 = a4;
  }
  if (v8 >= 4)
  {
    v9 = v8 >> 2;
    do
    {
      v10 = *a1++;
      v6 = v10;
      v11 = *a2++;
      v18.val[0] = (float32x4_t)vcvtq_n_s32_f32(v6, 0x18uLL);
      v18.val[1] = (float32x4_t)vcvtq_n_s32_f32(v11, 0x18uLL);
      vst2q_f32((float *)a3, v18);
      a3 += 32;
      --v9;
    }
    while (v9);
  }
  for (i = v8 & 3; i; --i)
  {
    v13 = a1->f32[0];
    a1 = (float32x4_t *)((char *)a1 + 4);
    v14 = v13;
    v15 = a2->f32[0];
    a2 = (float32x4_t *)((char *)a2 + 4);
    v16 = vcvts_n_s32_f32(v14, 0x18uLL);
    v6.i32[0] = vcvts_n_s32_f32(v15, 0x18uLL);
    *(_DWORD *)a3 = v16;
    *(_DWORD *)(a3 + 4) = v6.i32[0];
    a3 += 8;
  }
  return v6.f32[0];
}

_OWORD *StereoInterleaveInt824ToInt16_ARM(_OWORD *result, _OWORD *a2, __int16 *a3, unsigned int a4)
{
  unint64_t v4;
  __int16 *v5;
  int v6;
  int v7;
  int v8;
  __int16 v9;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int i;
  int v22;
  int v23;
  int v24;
  __int16 v25;
  int v26;
  int v27;
  int v28;
  __int16 v29;
  int16x8x2_t v30;

  if ((a3 & 0xF) != 0 && a4)
  {
    v4 = 0;
    do
    {
      v5 = &a3[v4 / 2];
      v6 = *(_DWORD *)((char *)result + v4);
      v7 = v6 >> 9;
      v8 = (v6 >> 31) ^ (v6 >> 9);
      if (v6 > 511)
        v9 = 0x7FFF;
      else
        v9 = 0x8000;
      if (v8 < 0x8000)
        v9 = v7;
      *v5 = v9;
      v10 = *(_DWORD *)((char *)a2 + v4);
      v11 = v10 >> 9;
      v12 = (v10 >> 31) ^ (v10 >> 9);
      if (v10 > 511)
        v13 = 0x7FFF;
      else
        v13 = 0x8000;
      if (v12 < 0x8000)
        v13 = v11;
      v5[1] = v13;
      v14 = a4 - 1;
      v15 = (_BYTE)a3 + 4 + v4;
      v4 += 4;
      if ((v15 & 0xF) == 0)
        break;
      --a4;
    }
    while (a4);
    result = (_OWORD *)((char *)result + v4);
    a2 = (_OWORD *)((char *)a2 + v4);
    a3 = (__int16 *)((char *)a3 + v4);
  }
  else
  {
    v14 = a4;
  }
  if (v14 >= 8)
  {
    v16 = v14 >> 3;
    do
    {
      v17 = *(int32x4_t *)result;
      v18 = *((int32x4_t *)result + 1);
      result += 2;
      v19 = *(int32x4_t *)a2;
      v20 = *((int32x4_t *)a2 + 1);
      a2 += 2;
      v30.val[0] = vqshrn_high_n_s32(vqshrn_n_s32(v17, 9uLL), v18, 9uLL);
      v30.val[1] = vqshrn_high_n_s32(vqshrn_n_s32(v19, 9uLL), v20, 9uLL);
      vst2q_s16(a3, v30);
      a3 += 16;
      --v16;
    }
    while (v16);
  }
  for (i = v14 & 7; i; --i)
  {
    v22 = *(_DWORD *)result;
    result = (_OWORD *)((char *)result + 4);
    v23 = v22 >> 9;
    v24 = (v22 >> 31) ^ (v22 >> 9);
    if (v22 > 511)
      v25 = 0x7FFF;
    else
      v25 = 0x8000;
    if (v24 < 0x8000)
      v25 = v23;
    *a3 = v25;
    v26 = *(_DWORD *)a2;
    a2 = (_OWORD *)((char *)a2 + 4);
    v27 = v26 >> 9;
    v28 = (v26 >> 31) ^ (v26 >> 9);
    if (v26 > 511)
      v29 = 0x7FFF;
    else
      v29 = 0x8000;
    if (v28 < 0x8000)
      v29 = v27;
    a3[1] = v29;
    a3 += 2;
  }
  return result;
}

const __int16 *StereoDeinterleaveInt16ToInt824_ARM(const __int16 *result, int32x4_t *a2, int32x4_t *a3, unsigned int a4)
{
  unint64_t v4;
  int v6;
  unsigned int v7;
  int v8;
  int16x8x2_t v9;

  if ((a2 & 0xF) != 0)
  {
    v4 = 0;
    do
    {
      if ((((_BYTE)a3 + (_BYTE)v4) & 0xF) == 0 || a4 == 0)
        break;
      v6 = result[v4 / 2 + 1];
      a2->i32[v4 / 4] = result[v4 / 2] << 9;
      a3->i32[v4 / 4] = v6 << 9;
      --a4;
      LOBYTE(v6) = (_BYTE)a2 + 4 + v4;
      v4 += 4;
    }
    while ((v6 & 0xF) != 0);
    result = (const __int16 *)((char *)result + v4);
    a2 = (int32x4_t *)((char *)a2 + v4);
    a3 = (int32x4_t *)((char *)a3 + v4);
  }
  if (a4 >= 8)
  {
    v7 = a4 >> 3;
    do
    {
      v9 = vld2q_s16(result);
      result += 16;
      *a2 = vshll_n_s16(*(int16x4_t *)v9.val[0].i8, 9uLL);
      a2[1] = vshll_high_n_s16(v9.val[0], 9uLL);
      a2 += 2;
      *a3 = vshll_n_s16(*(int16x4_t *)v9.val[1].i8, 9uLL);
      a3[1] = vshll_high_n_s16(v9.val[1], 9uLL);
      a3 += 2;
      --v7;
    }
    while (v7);
  }
  v8 = a4 & 7;
  if ((a4 & 7) != 0)
  {
    do
    {
      a2->i32[0] = *result << 9;
      a2 = (int32x4_t *)((char *)a2 + 4);
      a3->i32[0] = result[1] << 9;
      a3 = (int32x4_t *)((char *)a3 + 4);
      result += 2;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint32x4_t *NativeLowAlignedInt32To824Fixed_ARM(uint32x4_t *result, int32x4_t *a2, unsigned int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  uint32x4_t v6;
  uint32x4_t *v7;
  int32x4_t v8;
  int32x4_t v9;
  uint32x4_t v10;
  uint32x4_t v11;
  unsigned int v12;
  uint32x4_t v13;
  __int32 v14;

  v4 = 32 - a4;
  v5 = a3 - 12;
  if (a3 >= 0xC)
  {
    v6 = (uint32x4_t)vdupq_n_s32(v4);
    v7 = result + 3;
    a3 &= 3u;
    v8 = vshrq_n_s32((int32x4_t)vshlq_u32(*result, v6), 7uLL);
    v9 = (int32x4_t)vshlq_u32(result[1], v6);
    v10 = result[2];
    if (v5 >= 4)
    {
      v12 = v5 >> 2;
      do
      {
        *a2++ = v8;
        v13 = *v7++;
        v11 = v13;
        v8 = vshrq_n_s32(v9, 7uLL);
        v9 = (int32x4_t)vshlq_u32(v10, v6);
        v10 = v13;
        --v12;
      }
      while (v12);
    }
    else
    {
      v11 = result[2];
    }
    *a2 = v8;
    a2[1] = vshrq_n_s32(v9, 7uLL);
    a2[2] = vshrq_n_s32((int32x4_t)vshlq_u32(v11, v6), 7uLL);
    a2 += 3;
    result = v7;
  }
  for (; a3; --a3)
  {
    v14 = result->i32[0];
    result = (uint32x4_t *)((char *)result + 4);
    a2->i32[0] = v14 << v4 >> 7;
    a2 = (int32x4_t *)((char *)a2 + 4);
  }
  return result;
}

int32x4_t *NativeInt32ToFloat32Scaled_ARM(int32x4_t *result, float32x4_t *a2, int a3, float a4)
{
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  unsigned int v7;
  float32x4_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  BOOL v11;
  int v12;

  if (a3 >= 16)
  {
    v4 = vmulq_n_f32(vcvtq_f32_s32(*result), a4);
    v5 = vcvtq_f32_s32(result[1]);
    v6 = result[2];
    result += 3;
    v7 = a3 - 12;
    do
    {
      v8 = a2;
      *a2++ = v4;
      v4 = vmulq_n_f32(v5, a4);
      v5 = vcvtq_f32_s32(v6);
      v9 = *result++;
      v6 = v9;
      v7 -= 4;
    }
    while (v7 > 3);
    *a2 = v4;
    a2[1] = vmulq_n_f32(v5, a4);
    a2[2] = vmulq_n_f32(vcvtq_f32_s32(v6), a4);
    a2 = v8 + 4;
    if (!v7)
      return result;
    goto LABEL_9;
  }
  if (a3 < 4)
  {
    v7 = a3;
    if (!a3)
      return result;
    goto LABEL_9;
  }
  do
  {
    v10 = *result++;
    *a2++ = vmulq_n_f32(vcvtq_f32_s32(v10), a4);
    v7 = a3 - 4;
    v11 = a3 > 7;
    a3 -= 4;
  }
  while (v11);
  for (; v7; --v7)
  {
LABEL_9:
    v12 = result->i32[0];
    result = (int32x4_t *)((char *)result + 4);
    a2->f32[0] = (float)(int)llroundf((float)v12) * a4;
    a2 = (float32x4_t *)((char *)a2 + 4);
  }
  return result;
}

float32x4_t *Float32ToNativeInt32Scaled_ARM(float32x4_t *result, int32x4_t *a2, unsigned int a3, float a4)
{
  char v4;
  float v5;
  unsigned int v6;
  unsigned int v7;
  float32x4_t v8;
  float32x4_t v9;
  int i;
  float v11;

  if ((a2 & 0xF) != 0 && a3)
  {
    v4 = (_BYTE)a2 + 4;
    do
    {
      v5 = result->f32[0];
      result = (float32x4_t *)((char *)result + 4);
      a2->i32[0] = llroundf(v5 * a4);
      a2 = (int32x4_t *)((char *)a2 + 4);
      v6 = a3 - 1;
      if ((v4 & 0xF) == 0)
        break;
      v4 += 4;
      --a3;
    }
    while (a3);
  }
  else
  {
    v6 = a3;
  }
  if (v6 >= 8)
  {
    v7 = v6 >> 3;
    do
    {
      v8 = *result;
      v9 = result[1];
      result += 2;
      *a2 = vcvtaq_s32_f32(vmulq_n_f32(v8, a4));
      a2[1] = vcvtaq_s32_f32(vmulq_n_f32(v9, a4));
      a2 += 2;
      --v7;
    }
    while (v7);
  }
  for (i = v6 & 7; i; --i)
  {
    v11 = result->f32[0];
    result = (float32x4_t *)((char *)result + 4);
    a2->i32[0] = llroundf(v11 * a4);
    a2 = (int32x4_t *)((char *)a2 + 4);
  }
  return result;
}

float32x4_t *Float32ToNativeLowAlignedInt32_ARM(float32x4_t *result, uint32x4_t *a2, unsigned int a3, int a4, double a5)
{
  float32x4_t v5;
  uint32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  uint32x4_t v9;
  uint32x4_t v10;
  int32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  uint32x4_t *v15;
  float32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float v21;
  unsigned int v22;

  LODWORD(a5) = 1065353216 - (a4 << 23);
  v5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
  v6 = (uint32x4_t)vdupq_n_s32(a4 - 32);
  if (a3 < 0x18)
  {
    if (a3 >= 4)
    {
      do
      {
        v19 = *result++;
        v20 = vcvtq_n_s32_f32(vaddq_f32(v5, v19), 0x1FuLL);
        *a2++ = vshlq_u32((uint32x4_t)vqaddq_s32(v20, vcltzq_s32(v20)), v6);
        a3 -= 4;
      }
      while (a3 > 3);
    }
  }
  else
  {
    a3 -= 20;
    v7 = vcvtq_n_s32_f32(vaddq_f32(v5, *result), 0x1FuLL);
    v8 = vcvtq_n_s32_f32(vaddq_f32(v5, result[1]), 0x1FuLL);
    v9 = vshlq_u32((uint32x4_t)vqaddq_s32(v7, vcltzq_s32(v7)), v6);
    v10 = (uint32x4_t)vqaddq_s32(v8, vcltzq_s32(v8));
    v11 = vcvtq_n_s32_f32(vaddq_f32(v5, result[2]), 0x1FuLL);
    v12 = vaddq_f32(v5, result[3]);
    v13 = result[4];
    result += 5;
    v14 = vcltzq_s32(v11);
    do
    {
      v15 = a2;
      *a2++ = v9;
      v9 = vshlq_u32(v10, v6);
      v10 = (uint32x4_t)vqaddq_s32(v11, v14);
      v11 = vcvtq_n_s32_f32(v12, 0x1FuLL);
      v12 = vaddq_f32(v5, v13);
      v16 = *result++;
      v13 = v16;
      v14 = vcltzq_s32(v11);
      a3 -= 4;
    }
    while (a3 > 3);
    v17 = vcvtq_n_s32_f32(v12, 0x1FuLL);
    *a2 = v9;
    a2[1] = vshlq_u32(v10, v6);
    v18 = vcvtq_n_s32_f32(vaddq_f32(v5, v13), 0x1FuLL);
    a2[2] = vshlq_u32((uint32x4_t)vqaddq_s32(v11, v14), v6);
    a2[3] = vshlq_u32((uint32x4_t)vqaddq_s32(v17, vcltzq_s32(v17)), v6);
    a2[4] = vshlq_u32((uint32x4_t)vqaddq_s32(v18, vcltzq_s32(v18)), v6);
    a2 = v15 + 6;
  }
  for (; a3; --a3)
  {
    v21 = result->f32[0];
    result = (float32x4_t *)((char *)result + 4);
    v22 = vcvts_n_s32_f32(v21 + *(float *)&a5, 0x1FuLL);
    a2->i32[0] = (v22 - (v22 > 0x80000000)) >> (32 - a4);
    a2 = (uint32x4_t *)((char *)a2 + 4);
  }
  return result;
}

float32x4_t *MultiChannelInterleaveFloat32ToNativeLowAlignedInt32_ARM(float32x4_t *result, uint32x4_t *a2, unsigned int a3, int a4, double a5)
{
  unsigned int v6;
  uint32x4_t *v7;
  float32x4_t *v8;
  uint64_t v9;
  uint64_t *v10;
  float32x4_t v11;
  uint32x4_t v12;
  uint64_t v13;
  unsigned int i;
  float32x4_t *v15;
  float32x4_t *v16;
  int32x4_t *v17;
  float32x4_t *v18;
  unsigned int v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  __int32 *v36;
  __int32 *v37;
  __int32 *v38;
  __int32 v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t *v42;
  float32x4_t *v43;
  uint64_t v44;
  uint32x4_t *v45;
  unsigned int j;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t *v54;
  __int32 *v55;
  int32x2_t *v56;
  __int32 *v57;
  __int32 *v58;
  float32x2_t v59;
  __int32 v60;
  float32x2_t v61;
  int32x2_t v62;
  float32x4_t *v63;
  uint64_t v64;
  uint32x4_t *v65;
  float32x4_t v66;
  int32x4_t v67;
  uint32x4_t v68;
  __int32 *v69;
  __int32 *v70;
  float v71;
  int v72;
  unsigned int v73;

  v6 = a3;
  v7 = a2;
  v8 = result;
  v9 = result->u32[0];
  if ((_DWORD)v9 == 1)
    result = Float32ToNativeLowAlignedInt32_ARM((float32x4_t *)result[1].i64[0], a2, a3, a4, a5);
  v10 = &v8->i64[1];
  LODWORD(a5) = 1065353216 - (a4 << 23);
  v11 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
  v12 = (uint32x4_t)vdupq_n_s32(a4 - 32);
  if (v9 < 4)
  {
    i = v9;
  }
  else
  {
    v13 = v9;
    for (i = v9; i > 3; i -= 4)
    {
      v15 = (float32x4_t *)v10[1];
      v16 = (float32x4_t *)v10[3];
      v17 = (int32x4_t *)v7;
      v18 = (float32x4_t *)v10[5];
      v19 = v6;
      result = (float32x4_t *)v7;
      v20 = (float32x4_t *)v10[7];
      if (v6 >= 4)
      {
        do
        {
          v21 = *v15++;
          v22 = v21;
          v23 = *v16++;
          v24 = v23;
          v25 = *v18++;
          v26 = v25;
          v27 = *v20++;
          v28 = vcvtq_n_s32_f32(vaddq_f32(v11, v22), 0x1FuLL);
          v29 = vcvtq_n_s32_f32(vaddq_f32(v11, v24), 0x1FuLL);
          v30 = vcvtq_n_s32_f32(vaddq_f32(v11, v26), 0x1FuLL);
          v31 = vcvtq_n_s32_f32(vaddq_f32(v11, v27), 0x1FuLL);
          v32 = vshlq_u32((uint32x4_t)vqaddq_s32(v28, vcltzq_s32(v28)), v12);
          v33 = vshlq_u32((uint32x4_t)vqaddq_s32(v29, vcltzq_s32(v29)), v12);
          v34 = vshlq_u32((uint32x4_t)vqaddq_s32(v30, vcltzq_s32(v30)), v12);
          v35 = vshlq_u32((uint32x4_t)vqaddq_s32(v31, vcltzq_s32(v31)), v12);
          result->i32[0] = v32.i32[0];
          result->i32[1] = v33.i32[0];
          result->i32[2] = v34.i32[0];
          result->i32[3] = v35.i32[0];
          v17 = (int32x4_t *)&result[v9];
          v36 = (__int32 *)((char *)result + v13 * 4);
          *v36 = v32.i32[1];
          v36[1] = v33.i32[1];
          v36[2] = v34.i32[1];
          v36[3] = v35.i32[1];
          v37 = &v36[v13];
          *v37 = v32.i32[2];
          v37[1] = v33.i32[2];
          v37[2] = v34.i32[2];
          v37[3] = v35.i32[2];
          v38 = &v37[v13];
          *v38 = v32.i32[3];
          v38[1] = v33.i32[3];
          v38[2] = v34.i32[3];
          v38[3] = v35.i32[3];
          result = (float32x4_t *)&v38[v13];
          v19 -= 4;
        }
        while (v19 > 3);
      }
      for (; v19; --v19)
      {
        v39 = v15->i32[0];
        v15 = (float32x4_t *)((char *)v15 + 4);
        v40.i32[0] = v39;
        v40.i32[1] = v16->i32[0];
        v16 = (float32x4_t *)((char *)v16 + 4);
        v40.i32[2] = v18->i32[0];
        v18 = (float32x4_t *)((char *)v18 + 4);
        v40.i32[3] = v20->i32[0];
        v20 = (float32x4_t *)((char *)v20 + 4);
        v41 = vcvtq_n_s32_f32(vaddq_f32(v11, v40), 0x1FuLL);
        *v17 = vqaddq_s32(v41, vcltzq_s32(v41));
        v17 = (int32x4_t *)((char *)v17 + v13 * 4);
      }
      v10 += 8;
      ++v7;
    }
  }
  if (i > 1)
  {
    v42 = (float32x4_t *)v10[1];
    v43 = (float32x4_t *)v10[3];
    v44 = v9;
    if (v6 < 4)
    {
      v56 = (int32x2_t *)v7;
      j = v6;
      if (!v6)
      {
LABEL_21:
        i -= 2;
        v10 += 4;
        v7 = (uint32x4_t *)((char *)v7 + 8);
        goto LABEL_22;
      }
    }
    else
    {
      v45 = v7;
      for (j = v6; j > 3; j -= 4)
      {
        v47 = *v42++;
        v48 = v47;
        v49 = *v43++;
        v50 = vcvtq_n_s32_f32(vaddq_f32(v11, v48), 0x1FuLL);
        v51 = vcvtq_n_s32_f32(vaddq_f32(v11, v49), 0x1FuLL);
        v52 = vshlq_u32((uint32x4_t)vqaddq_s32(v50, vcltzq_s32(v50)), v12);
        v53 = vshlq_u32((uint32x4_t)vqaddq_s32(v51, vcltzq_s32(v51)), v12);
        v54 = v45;
        v55 = &v45->i32[v44];
        v54->i32[0] = v52.i32[0];
        v54->i32[1] = v53.i32[0];
        v56 = (int32x2_t *)&v54[v9];
        *v55 = v52.i32[1];
        v55[1] = v53.i32[1];
        v57 = &v55[v44];
        *v57 = v52.i32[2];
        v57[1] = v53.i32[2];
        v58 = &v57[v44];
        *v58 = v52.i32[3];
        v58[1] = v53.i32[3];
        v45 = (uint32x4_t *)&v58[v44];
      }
      if (!j)
        goto LABEL_21;
    }
    v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    do
    {
      v60 = v42->i32[0];
      v42 = (float32x4_t *)((char *)v42 + 4);
      v61.i32[0] = v60;
      v61.i32[1] = v43->i32[0];
      v43 = (float32x4_t *)((char *)v43 + 4);
      v62 = vcvt_n_s32_f32(vadd_f32(v59, v61), 0x1FuLL);
      *v56 = vqadd_s32(v62, vcltz_s32(v62));
      v56 = (int32x2_t *)((char *)v56 + v44 * 4);
      --j;
    }
    while (j);
    goto LABEL_21;
  }
LABEL_22:
  if (i)
  {
    v63 = (float32x4_t *)v10[1];
    v64 = v9;
    if (v6 >= 4)
    {
      do
      {
        v65 = v7;
        v66 = *v63++;
        v67 = vcvtq_n_s32_f32(vaddq_f32(v11, v66), 0x1FuLL);
        v68 = vshlq_u32((uint32x4_t)vqaddq_s32(v67, vcltzq_s32(v67)), v12);
        v7->i32[0] = v68.i32[0];
        v7->i32[v9] = v68.i32[1];
        v69 = &v7->i32[v64 + v64];
        *v69 = v68.i32[2];
        v70 = &v69[v64];
        *v70 = v68.i32[3];
        v6 -= 4;
        v7 = (uint32x4_t *)&v70[v64];
      }
      while (v6 > 3);
      v7 = &v65[v9];
    }
    for (; v6; --v6)
    {
      v71 = v63->f32[0];
      v63 = (float32x4_t *)((char *)v63 + 4);
      v72 = vcvts_n_s32_f32(v71 + *(float *)&a5, 0x1FuLL);
      if (v72 == 0x80000000)
        v73 = 0x80000000;
      else
        v73 = v72 + (v72 >> 31);
      v7->i32[0] = v73 >> (32 - a4);
      v7 = (uint32x4_t *)((char *)v7 + v64 * 4);
    }
  }
  return result;
}

float32x4_t *Float32ToNativeLowAlignedInt64_ARM(float32x4_t *a1, int32x4_t *a2, unsigned int a3, int a4, double a5)
{
  int32x4_t *v6;
  uint32x4_t *v7;
  float32x4_t *result;
  unsigned int v9;
  int32x4_t v10;
  int v11;
  unsigned __int32 v12;

  v6 = a2;
  v7 = (uint32x4_t *)((char *)a2 + 4 * a3);
  result = Float32ToNativeLowAlignedInt32_ARM(a1, v7, a3, a4, a5);
  if (a3 >= 4)
  {
    v9 = a3 >> 2;
    do
    {
      v10 = *(int32x4_t *)v7++;
      *v6 = vzip1q_s32(v10, (int32x4_t)0);
      v6[1] = vzip2q_s32(v10, (int32x4_t)0);
      v6 += 2;
      --v9;
    }
    while (v9);
  }
  v11 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      v12 = v7->i32[0];
      v7 = (uint32x4_t *)((char *)v7 + 4);
      v6->i64[0] = v12;
      v6 = (int32x4_t *)((char *)v6 + 8);
      --v11;
    }
    while (v11);
  }
  return result;
}

uint32x4_t *NativeLowAlignedInt64ToFloat32_ARM(const float *a1, uint32x4_t *a2, unsigned int a3, int a4)
{
  unsigned __int128 *v4;
  unsigned int v5;
  unsigned __int128 v6;
  int v7;
  float v8;

  if (a3 >= 4)
  {
    v5 = a3 >> 2;
    v4 = (unsigned __int128 *)a2;
    do
    {
      v6 = (unsigned __int128)vld2q_f32(a1);
      a1 += 8;
      *v4++ = v6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v4 = (unsigned __int128 *)a2;
  }
  v7 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      v8 = *a1;
      a1 += 2;
      *(float *)v4 = v8;
      v4 = (unsigned __int128 *)((char *)v4 + 4);
      --v7;
    }
    while (v7);
  }
  return NativeLowAlignedInt32ToFloat32_ARM(a2, (float32x4_t *)a2, a3, a4);
}

void removeGatedLoudness(_QWORD **a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  vDSP_biquad_SetupStruct *v8;
  _BYTE *v9;
  _BYTE *v10;

  if (a1)
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = (void *)v2[266];
      if (v3)
      {
        free(v3);
        v2 = *a1;
      }
      v4 = (void *)v2[267];
      if (v4)
      {
        free(v4);
        v2 = *a1;
      }
      v5 = (void *)v2[6];
      if (v5)
      {
        free(v5);
        v2 = *a1;
      }
      v6 = (void *)v2[3];
      if (v6)
      {
        free(v6);
        v2 = *a1;
      }
      v7 = (_QWORD *)v2[273];
      if (v7)
      {
        v8 = (vDSP_biquad_SetupStruct *)v7[2];
        if (v8)
          vDSP_biquad_DestroySetup(v8);
        v9 = (_BYTE *)v7[3];
        if (v9)
        {
          v10 = (_BYTE *)v7[4];
          if (v10 != v9)
            v7[4] = &v10[(v9 - v10 + 3) & 0xFFFFFFFFFFFFFFFCLL];
          operator delete(v9);
          v7[3] = 0;
          v7[4] = 0;
        }
        MEMORY[0x193FFE460](v7, 0x10A0C40B6373B8BLL);
        v2[273] = 0;
        v2 = *a1;
      }
      free(v2);
      *a1 = 0;
    }
  }
}

uint64_t initGatedLoudness(CAAudioChannelLayout *a1, int a2, _QWORD *a3, float a4)
{
  CAAudioChannelLayout *v5;
  uint64_t v6;
  int32x4_t v7;
  int32x4_t v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  uint32x2_t v13;
  float32x2_t v14;
  float v15;
  int32x2_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  long double v22;
  long double v23;
  long double v24;
  long double v25;
  long double v26;
  long double v27;
  long double v28;
  long double v29;
  long double v30;
  long double v31;
  long double v32;
  long double v33;
  long double v34;
  vDSP_biquad_Setup Setup;
  void *v36;
  uint64_t v37;
  int v38;
  unsigned int *v39;
  CAAudioChannelLayout *v40;
  int v41;
  uint64_t v42;
  int v43;
  char v45;
  BOOL v46;
  uint64_t result;
  uint64_t v48;
  int inSpecifier;
  _QWORD *v51;
  _DWORD __b[256];
  _DWORD __src[256];
  double __Coefficients[5];
  __int128 v55;
  uint64_t v56;
  long double v57;
  long double v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  inSpecifier = a2;
  if (a1 > 0x200)
    return 4294967246;
  v5 = a1;
  memset_pattern16(__b, &unk_18F1175F0, 0x400uLL);
  v6 = 0;
  v7 = (int32x4_t)xmmword_18F116EA0;
  v8.i64[0] = 0x400000004;
  v8.i64[1] = 0x400000004;
  do
  {
    *(int32x4_t *)&__src[v6] = v7;
    v7 = vaddq_s32(v7, v8);
    v6 += 4;
  }
  while (v6 != 256);
  if (v5 < 3)
  {
    v9 = v5;
    goto LABEL_6;
  }
  v38 = caulk::numeric::exceptional_mul<unsigned int>(v5, 0x14u);
  LODWORD(__Coefficients[0]) = caulk::numeric::exceptional_add<unsigned int>(12, v38);
  v39 = (unsigned int *)CAAudioChannelLayout::Create(v5);
  if (AudioFormatGetProperty(0x636D706Cu, 4u, &inSpecifier, (UInt32 *)__Coefficients, v39))
  {
    MEMORY[0x193FFDAAC](v39);
    return 4294967246;
  }
  v5 = (CAAudioChannelLayout *)v39[2];
  if (!(_DWORD)v5)
  {
    MEMORY[0x193FFDAAC](v39);
    LODWORD(v5) = 0;
    v9 = 0;
LABEL_6:
    if (!a3 || *a3)
      return 4294967246;
    *a3 = 0;
    v10 = malloc_type_calloc(1uLL, 0x890uLL, 0x10900409F0D3898uLL);
    v11 = v10;
    v51 = v10;
    if (!v9)
      goto LABEL_49;
    if (!v10)
      goto LABEL_49;
    *(_DWORD *)v10 = (_DWORD)v5;
    *((_DWORD *)v10 + 1) = v9;
    v12 = 4 * v9;
    memcpy(v10 + 7, __src, v12);
    memcpy(v11 + 135, __b, v12);
    v13 = vcvt_u32_f32(vmla_n_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x404000003ECCCCCDLL, a4));
    v14 = vcvt_f32_u32(v13);
    v15 = vmlas_n_f32(0.5, 0.25, v14.f32[0]);
    *((_DWORD *)v11 + 4) = v15;
    *(float *)v16.i32 = (float)v15;
    v11[1] = v13;
    *(uint32x2_t *)((char *)v11 + 36) = vcvt_u32_f32(vadd_f32(vdiv_f32(v14, (float32x2_t)vdup_lane_s32(v16, 0)), (float32x2_t)0x3F0000003F000000));
    *((_DWORD *)v11 + 8) = 0;
    *(_OWORD *)(v11 + 263) = xmmword_18F116EB0;
    *((_DWORD *)v11 + 530) = 715;
    v17 = malloc_type_calloc(0x2CBuLL, 4uLL, 0x100004052888210uLL);
    v11[266] = v17;
    if (!v17
      || (v18 = malloc_type_calloc(*((unsigned int *)v11 + 530), 4uLL, 0x100004052888210uLL), (v11[267] = v18) == 0)
      || (v19 = malloc_type_malloc(8 * (*((_DWORD *)v11 + 10) * (_DWORD)v5), 0x100004000313F17uLL),
          (v11[6] = v19) == 0)
      || (v20 = malloc_type_malloc(4 * (*((_DWORD *)v11 + 4) * (_DWORD)v5), 0x100004052888210uLL),
          (v11[3] = v20) == 0))
    {
LABEL_49:
      removeGatedLoudness(&v51);
      return 4294967246;
    }
    *((_DWORD *)v11 + 5) = 0;
    *((_BYTE *)v11 + 2148) = 0;
    *((_BYTE *)v11 + 2156) = 0;
    *((_BYTE *)v11 + 2164) = 0;
    *((_BYTE *)v11 + 2180) = 0;
    *((_BYTE *)v11 + 2172) = 0;
    *((_DWORD *)v11 + 544) = -525502228;
    *((_DWORD *)v11 + 542) = -525502228;
    v21 = operator new();
    *(_QWORD *)v21 = 0;
    *(_DWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 32) = 0;
    v11[273] = v21;
    if (a4 > 0.0)
    {
      v22 = tan(5284.07858 / a4);
      v23 = v22 / 0.707175237;
      v24 = v22 * v22;
      v25 = 1.0 / (v24 + v23 + 1.0);
      v26 = (v24 + v23 * 1.25872093 + 1.5848647) * v25;
      v27 = (v24 + -1.5848647 + v24 + -1.5848647) * v25;
      v28 = (v24 + v23 * -1.25872093 + 1.5848647) * v25;
      v29 = (v24 + -1.0 + v24 + -1.0) * v25;
      v30 = (v24 + 1.0 - v23) * v25;
      v31 = tan(119.806115 / a4);
      v32 = v31 / 0.500327037;
      v33 = v31 * v31;
      v34 = v33 + v32 + 1.0;
      __Coefficients[0] = v26;
      __Coefficients[1] = v27;
      __Coefficients[2] = v28;
      __Coefficients[3] = v29;
      __Coefficients[4] = v30;
      v55 = xmmword_18F116EC0;
      v56 = 0x3FF0000000000000;
      v57 = (v33 + -1.0 + v33 + -1.0) / v34;
      v58 = (v33 + 1.0 - v32) / v34;
      Setup = vDSP_biquad_CreateSetup(__Coefficients, 2uLL);
      *(_QWORD *)(v21 + 16) = Setup;
      if (Setup)
      {
        if (*(_DWORD *)(v21 + 8) != (_DWORD)v5)
          std::valarray<float>::resize(v21 + 24, (6 * (_DWORD)v5));
        *(float *)(v21 + 4) = a4;
        v36 = *(void **)(v21 + 24);
        v37 = *(_QWORD *)(v21 + 32);
        *(_DWORD *)(v21 + 8) = (_DWORD)v5;
        *(_DWORD *)v21 = 1065353216;
        v48 = v37 - (_QWORD)v36;
        if (v48 >= 1)
          bzero(v36, 4 * (((unint64_t)v48 >> 2) - ((unint64_t)v48 > 3)) + 4);
      }
    }
    result = 0;
    *a3 = v11;
    return result;
  }
  v40 = 0;
  v9 = 0;
  v41 = 0;
  v42 = 3;
  do
  {
    v43 = v39[v42];
    if (v43 <= 300)
    {
      v45 = v43 + 1;
      if ((v43 + 1) <= 0x2E)
      {
        if (((1 << v45) & 0x30000018C0) != 0)
        {
          __b[v9] = 1068792545;
LABEL_33:
          __src[v9++] = (_DWORD)v40;
          goto LABEL_46;
        }
        if (((1 << v45) & 0x400000000003) != 0)
          goto LABEL_45;
        if (((1 << v45) & 0x4000000020) != 0)
          goto LABEL_46;
      }
      if ((v43 - 200) >= 8 && v43 != 100)
        goto LABEL_33;
    }
    else if (v43 < 0x10000)
    {
      v46 = (v43 - 301) > 3 || v43 == 303;
      if (v46 && v43 != 400)
        goto LABEL_33;
    }
    else if ((v43 - 0x10000) >= 0x10 && v43 != 0x1FFFF)
    {
      goto LABEL_33;
    }
LABEL_45:
    v41 = 1;
LABEL_46:
    v40 = (CAAudioChannelLayout *)((char *)v40 + 1);
    v42 += 5;
  }
  while (v5 != v40);
  MEMORY[0x193FFDAAC](v39);
  if (!v41)
    goto LABEL_6;
  return 4294967246;
}

void computeItuLoudnessValue(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  double v5;
  float v6;
  float v7;
  float v8;
  unsigned int v9;
  float v10;
  float v11;
  unint64_t v12;
  unsigned int v13;
  float v14;
  double v15;
  float v16;
  float v17;
  float v18;
  unsigned int v19;
  float v20;
  float v21;

  v2 = *(unsigned int *)(a1 + 2120);
  if (!(_DWORD)v2)
    goto LABEL_14;
  v3 = 0;
  v4 = 0;
  v5 = 0.0;
  do
  {
    v6 = *(float *)(a1 + 2112);
    v7 = *(float *)(a1 + 2104);
    if ((float)(v6 + (float)((float)v3 * v7)) > -70.0)
    {
      v8 = __exp10f((float)((float)(v6 + (float)((float)((float)v3 + 0.5) * v7)) + 0.691) * 0.1);
      v9 = *(_DWORD *)(*(_QWORD *)(a1 + 2128) + 4 * v3);
      v5 = v5 + (float)(v8 * (float)v9);
      v4 += v9;
      v2 = *(unsigned int *)(a1 + 2120);
    }
    ++v3;
  }
  while (v3 < v2);
  if (!v4)
  {
LABEL_14:
    v21 = -70.0;
    goto LABEL_15;
  }
  v10 = v5;
  v11 = log10f(v10 / (float)v4);
  if (v2)
  {
    v12 = 0;
    v13 = 0;
    v14 = (float)((float)(v11 * 10.0) + -0.691) + -10.0;
    v15 = 0.0;
    do
    {
      v16 = *(float *)(a1 + 2112);
      v17 = *(float *)(a1 + 2104);
      if ((float)(v16 + (float)((float)v12 * v17)) > v14)
      {
        v18 = __exp10f((float)((float)(v16 + (float)((float)((float)v12 + 0.5) * v17)) + 0.691) * 0.1);
        v19 = *(_DWORD *)(*(_QWORD *)(a1 + 2128) + 4 * v12);
        v15 = v15 + (float)(v18 * (float)v19);
        v13 += v19;
        v2 = *(unsigned int *)(a1 + 2120);
      }
      ++v12;
    }
    while (v12 < v2);
    if (v13)
    {
      v20 = v15;
      v21 = (float)(log10f(v20 / (float)v13) * 10.0) + -0.691;
LABEL_15:
      *(float *)(a1 + 2144) = v21;
      *(_BYTE *)(a1 + 2148) = 1;
    }
  }
}

void computeEbuLoudnessRange(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  unsigned int v4;
  double v5;
  float v6;
  float v7;
  float v8;
  unsigned int v9;
  float v10;
  float v11;
  uint64_t v12;
  unsigned int v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  float v21;
  int v22;
  int v23;
  double v24;
  double v25;
  float v26;
  float v27;

  v1 = *(unsigned int *)(a1 + 2120);
  if ((_DWORD)v1)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0.0;
    do
    {
      v6 = *(float *)(a1 + 2112);
      v7 = *(float *)(a1 + 2104);
      if ((float)(v6 + (float)((float)v3 * v7)) > -70.0)
      {
        v8 = __exp10f((float)((float)(v6 + (float)((float)((float)v3 + 0.5) * v7)) + 0.691) * 0.1);
        v9 = *(_DWORD *)(*(_QWORD *)(a1 + 2136) + 4 * v3);
        v5 = v5 + (float)(v8 * (float)v9);
        v4 += v9;
        v1 = *(unsigned int *)(a1 + 2120);
      }
      ++v3;
    }
    while (v3 < v1);
    if (v4)
    {
      v10 = v5;
      v11 = log10f(v10 / (float)v4);
      if (v1)
      {
        v12 = 0;
        v13 = 0;
        v14 = (float)((float)(v11 * 10.0) + -0.691) + -20.0;
        v15 = *(float *)(a1 + 2112);
        v16 = *(float *)(a1 + 2104);
        do
        {
          if ((float)(v15 + (float)((float)v12 * v16)) > v14)
            v13 += *(_DWORD *)(*(_QWORD *)(a1 + 2136) + 4 * v12);
          ++v12;
        }
        while (v1 != v12);
        if (v13)
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v21 = (float)v13;
          v22 = (int)(float)((float)((float)v13 * 0.1) + 0.5);
          v23 = (int)(float)((float)(v21 * 0.95) + 0.5);
          v24 = 0.0;
          v25 = 0.0;
          do
          {
            if ((float)(v15 + (float)((float)v17 * v16)) > v14)
            {
              v20 += *(_DWORD *)(*(_QWORD *)(a1 + 2136) + 4 * v17);
              if (!((v20 < v22) | v19 & 1))
                v25 = (float)(v15 + (float)((float)((float)v17 + 0.5) * v16));
              v19 |= ((v20 < v22) | v19) ^ 1;
              if (!((v20 < v23) | v18 & 1))
                v24 = (float)(v15 + (float)((float)((float)v17 + 0.5) * v16));
              v18 |= v20 >= v23;
            }
            ++v17;
          }
          while (v1 != v17);
          if ((v19 & v18 & 1) != 0)
          {
            v26 = v24 - v25;
            *(float *)(a1 + 2152) = v26;
            *(_BYTE *)(a1 + 2156) = 1;
            v27 = v24;
            *(float *)(a1 + 2160) = v27;
            *(_BYTE *)(a1 + 2164) = 1;
          }
        }
      }
    }
  }
}

void loudnessMeasurementGenerateBlocks(int *a1, unsigned int a2, char *__src)
{
  char *v3;
  unsigned int v4;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int *v9;
  float v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  unsigned int v21;
  vDSP_Length v22;
  uint64_t i;
  uint64_t v24;
  int v25;
  int v26;
  double v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  float v32;
  unsigned int v33;
  double v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  unsigned int v39;
  uint64_t v40;
  float v41;
  unsigned int v42;
  double v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  unsigned int v48;
  int v49;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  float __C;
  float __Y[256];
  uint64_t v59;

  v3 = __src;
  v4 = a2;
  v59 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = a1[1];
  v8 = a1[4];
  v52 = a1[9];
  v53 = a1[10];
  v54 = ((v53 - 1) * v7);
  v9 = a1 + 14;
  v10 = (float)a1[2];
  v11 = a2;
  v55 = v8;
  v49 = *a1;
  do
  {
    v12 = a1[5];
    if (v12)
      v13 = 1;
    else
      v13 = v8 > v4;
    if (!v13)
    {
      v17 = &v3[4 * (v4 - v11) * v6];
      v56 = v11 - v8;
LABEL_15:
      memmove(*((void **)a1 + 6), (const void *)(*((_QWORD *)a1 + 6) + 8 * v7), 8 * ((v53 - 1) * v7));
      v18 = *((_QWORD *)a1 + 273);
      if (v18)
      {
        v19 = *((_QWORD *)a1 + 6);
        v20 = (double *)(v19 + 8 * v54);
        if ((_DWORD)v7)
          bzero((void *)(v19 + 8 * v54), 8 * v7);
        if (v8)
        {
          v21 = v55;
          do
          {
            if (v21 >= 0x100)
              v22 = 256;
            else
              v22 = v21;
            if ((_DWORD)v7)
            {
              for (i = 0; i != v7; ++i)
              {
                v24 = 0;
                __C = 0.0;
                v25 = v9[i];
                v26 = *(_DWORD *)(v18 + 8);
                do
                {
                  __Y[v24++] = *(float *)&v17[4 * v25];
                  v25 += v26;
                }
                while (v22 != v24);
                vDSP_biquad(*(const vDSP_biquad_SetupStruct **)(v18 + 16), (float *)(*(_QWORD *)(v18 + 24) + 4 * (6 * i)), __Y, 1, __Y, 1, v22);
                vDSP_svesq(__Y, 1, &__C, v22);
                v20[i] = v20[i] + __C;
              }
            }
            v17 += 4 * (*(_DWORD *)(v18 + 8) * v22);
            v21 -= v22;
          }
          while (v21);
        }
        if (*(float *)v18 != 1.0 && (_DWORD)v7 != 0)
        {
          v28 = (float)(*(float *)v18 * *(float *)v18);
          v29 = v7;
          do
          {
            *v20 = *v20 * v28;
            ++v20;
            --v29;
          }
          while (v29);
        }
        v3 = __src;
        v6 = v49;
        v4 = a2;
        v8 = v55;
      }
      v30 = a1[8];
      if (v30 < v53)
        a1[8] = ++v30;
      if (v30 >= v52)
      {
        if ((_DWORD)v7)
        {
          v31 = 0;
          v32 = 0.0;
          do
          {
            if ((_DWORD)v52)
            {
              v33 = 0;
              v34 = 0.0;
              v35 = v52;
              do
              {
                v34 = v34 + *(double *)(*((_QWORD *)a1 + 6) + 8 * v54 + 8 * v31 - 8 * v33);
                v33 += v7;
                --v35;
              }
              while (v35);
            }
            else
            {
              v34 = 0.0;
            }
            v36 = v34;
            v32 = v32 + (float)(*(float *)&a1[v31++ + 270] * v36);
          }
          while (v31 != v7);
        }
        else
        {
          v32 = 0.0;
        }
        v37 = (float)(log10f(v32 / v10) * 10.0) + -0.691;
        v38 = v37 - *((float *)a1 + 528);
        if (v38 >= 0.0)
        {
          v39 = (float)(v38 * *((float *)a1 + 527));
          if (a1[530] > v39)
            ++*(_DWORD *)(*((_QWORD *)a1 + 266) + 4 * v39);
        }
        if (*((float *)a1 + 542) < v37)
        {
          *((float *)a1 + 542) = v37;
          *((_BYTE *)a1 + 2172) = 1;
        }
      }
      if (a1[8] >= v53)
      {
        if ((_DWORD)v7)
        {
          v40 = 0;
          v41 = 0.0;
          do
          {
            if ((_DWORD)v53)
            {
              v42 = 0;
              v43 = 0.0;
              v44 = v53;
              do
              {
                v43 = v43 + *(double *)(*((_QWORD *)a1 + 6) + 8 * v54 + 8 * v40 - 8 * v42);
                v42 += v7;
                --v44;
              }
              while (v44);
            }
            else
            {
              v43 = 0.0;
            }
            v45 = v43;
            v41 = v41 + (float)(*(float *)&a1[v40++ + 270] * v45);
          }
          while (v40 != v7);
        }
        else
        {
          v41 = 0.0;
        }
        v46 = (float)(log10f(v41 / (float)a1[3]) * 10.0) + -0.691;
        v47 = v46 - *((float *)a1 + 528);
        if (v47 >= 0.0)
        {
          v48 = (float)(v47 * *((float *)a1 + 527));
          if (a1[530] > v48)
            ++*(_DWORD *)(*((_QWORD *)a1 + 267) + 4 * v48);
        }
        v11 = v56;
        if (*((float *)a1 + 544) < v46)
        {
          *((float *)a1 + 544) = v46;
          *((_BYTE *)a1 + 2180) = 1;
        }
      }
      else
      {
        v11 = v56;
      }
      continue;
    }
    if (v8 - v12 >= v4)
      v14 = v4;
    else
      v14 = v8 - v12;
    memcpy((void *)(*((_QWORD *)a1 + 3) + 4 * (v12 * v6)), v3, 4 * v14 * v6);
    v11 = v4 - v14;
    v15 = a1[5] + v14;
    v8 = v55;
    v16 = v15 >= v55;
    if (v15 >= v55)
      v15 = 0;
    a1[5] = v15;
    if (v16)
    {
      v56 = v11;
      v17 = (char *)*((_QWORD *)a1 + 3);
      goto LABEL_15;
    }
  }
  while (v11 >= v8);
  if (v11)
  {
    memcpy((void *)(*((_QWORD *)a1 + 3) + 4 * (a1[5] * v6)), &v3[4 * (v4 - v11) * v6], 4 * v11 * v6);
    a1[5] += v11;
  }
}

void acv2::SampleRateConverter::~SampleRateConverter(std::pmr **this)
{
  std::pmr *v2;

  *this = (std::pmr *)&off_1E290ADC8;
  ACAudioSpan::~ACAudioSpan(this + 21);
  v2 = this[20];
  this[20] = 0;
  if (v2)
    (*(void (**)(std::pmr *))(*(_QWORD *)v2 + 8))(v2);
  acv2::AudioConverterBase::~AudioConverterBase((acv2::AudioConverterBase *)this);
}

{
  std::pmr *v2;

  *this = (std::pmr *)&off_1E290ADC8;
  ACAudioSpan::~ACAudioSpan(this + 21);
  v2 = this[20];
  this[20] = 0;
  if (v2)
    (*(void (**)(std::pmr *))(*(_QWORD *)v2 + 8))(v2);
  acv2::AudioConverterBase::~AudioConverterBase((acv2::AudioConverterBase *)this);
  JUMPOUT(0x193FFE460);
}

const __CFString *acv2::SampleRateConverter::ConverterName(acv2::SampleRateConverter *this)
{
  return CFSTR("SampleRateConverter");
}

uint64_t acv2::SampleRateConverter::description@<X0>(int16x8_t *this@<X0>, _QWORD *a2@<X8>)
{
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  _QWORD *v10;
  void *__p[2];
  unsigned __int8 v13;
  uint64_t v14;
  _QWORD v15[10];
  char v16;
  uint64_t v17;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  acv2::AudioConverterBase::description(this, __p);
  if ((v13 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v5 = v13;
  else
    v5 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)v4, v5);
  if ((char)v13 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"    Algorithm ", 14);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", quality ", 10);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)this[10].i64[0] + 104))(this[10].i64[0]);
  v9 = strlen(v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" @ ", 3);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v15);
  v14 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x193FFE3A0](&v17);
}

void sub_18EEAF3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t acv2::SampleRateConverter::GetPropertyInfo(acv2::SampleRateConverter *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t result;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 v10;

  result = 1886547824;
  if (a2 <= 1886547308)
  {
    if (a2 <= 1835626095)
    {
      if (a2 != 1667850867)
      {
        v7 = 1668244083;
LABEL_9:
        if (a2 != v7)
          return result;
      }
LABEL_10:
      if (!a3)
        goto LABEL_21;
      v8 = 4;
      goto LABEL_20;
    }
    if (a2 != 1835626096)
    {
      if (a2 != 1886546285)
        return result;
      if (!a3)
      {
LABEL_21:
        v10 = 0;
        if (!a4)
          return 0;
LABEL_32:
        result = 0;
        *a4 = v10;
        return result;
      }
      v8 = 8;
LABEL_20:
      *a3 = v8;
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  if (a2 > 1936876400)
  {
    if (a2 != 1936876401)
    {
      if (a2 != 2020569203)
      {
        v7 = 2020175987;
        goto LABEL_9;
      }
      goto LABEL_10;
    }
LABEL_23:
    if (!a3)
      goto LABEL_26;
    v9 = 4;
    goto LABEL_25;
  }
  if (a2 == 1886547309)
  {
    if (a3)
      *a3 = 4;
    if (!a4)
      return 0;
    v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 20) + 32))(*((_QWORD *)this + 20));
    goto LABEL_32;
  }
  if (a2 != 1936876400)
    return result;
  if (a3)
  {
    v9 = 8;
LABEL_25:
    *a3 = v9;
  }
LABEL_26:
  if (a4)
  {
    v10 = 1;
    goto LABEL_32;
  }
  return 0;
}

uint64_t acv2::SampleRateConverter::NeedsBufferedInput(acv2::SampleRateConverter *this)
{
  return 1;
}

uint64_t acv2::SampleRateConverter::HasPropertySettings(acv2::SampleRateConverter *this)
{
  return 1;
}

void acv2::SampleRateConverter::GetPropertySettings(acv2::SampleRateConverter *this@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  __CFBundle *v4;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  const void *v7;
  const void *v8;
  const void *v9;
  CFNumberRef v10;
  int TypeID;
  uint64_t v12;
  const CFDictionaryKeyCallBacks *v13;
  const CFDictionaryValueCallBacks *v14;
  __CFDictionary *v15;
  CFNumberRef v16;
  void *v17;
  const void *v18;
  __CFDictionary *v19;
  CFNumberRef v20;
  void *v21;
  CFArrayRef v22;
  uint64_t i;
  unsigned int v24;
  int v25;
  CFNumberRef v26;
  const void *v27;
  const void *v28;
  void *v29;
  const void *v30;
  __CFDictionary *v31;
  CFNumberRef v32;
  void *v33;
  CFArrayRef v34;
  uint64_t j;
  CFNumberRef v36;
  const void *v37;
  const void *v38;
  void *v39;
  const void *v40;
  __CFDictionary *v41;
  CFNumberRef v42;
  void *v43;
  CFArrayRef v44;
  uint64_t k;
  int v46;
  int v47;
  CFNumberRef v48;
  const void *v49;
  const void *v50;
  CFArrayRef v51;
  __CFDictionary *v52;
  int valuePtr;
  char v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *values[2];
  __int128 v63;
  void *v64;
  CFMutableDictionaryRef theDict;
  CFMutableDictionaryRef v66;
  CFMutableDictionaryRef v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  CABundleLocker::CABundleLocker((CABundleLocker *)&v54);
  v4 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v4 = (__CFBundle *)sAudioToolboxBundle;
  }
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    *(_QWORD *)a2 = 0;
    goto LABEL_64;
  }
  applesauce::CF::DictionaryRef::DictionaryRef(a2, Mutable);
  valuePtr = 0;
  if (v4)
    v7 = CFBundleCopyLocalizedString(v4, CFSTR("Sample Rate Converter"), CFSTR("Sample Rate Converter"), CFSTR("ConverterNames"));
  else
    v7 = CFRetain(CFSTR("Sample Rate Converter"));
  v8 = v7;
  CFDictionaryAddValue(Mutable, CFSTR("name"), v7);
  CFRelease(v8);
  v9 = (const void *)(*(uint64_t (**)(acv2::SampleRateConverter *))(*(_QWORD *)this + 56))(this);
  CFDictionaryAddValue(Mutable, CFSTR("converter"), v9);
  valuePtr = 0;
  v10 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(Mutable, CFSTR("version"), v10);
  CFRelease(v10);
  v52 = Mutable;
  theDict = 0;
  v66 = 0;
  v67 = 0;
  TypeID = CFNumberGetTypeID();
  v12 = 0;
  v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  valuePtr = TypeID;
  v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  do
  {
    v15 = CFDictionaryCreateMutable(v5, 0, v13, v14);
    *(CFMutableDictionaryRef *)((char *)&theDict + v12) = v15;
    v16 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
    CFDictionaryAddValue(v15, CFSTR("value type"), v16);
    CFRelease(v16);
    v12 += 8;
  }
  while (v12 != 24);
  if (v4)
    v17 = (void *)CFBundleCopyLocalizedString(v4, CFSTR("Quality"), CFSTR("Quality"), CFSTR("ConverterSettings"));
  else
    v17 = (void *)CFRetain(CFSTR("Quality"));
  v18 = v17;
  v19 = theDict;
  CFDictionaryAddValue(theDict, CFSTR("key"), CFSTR("Quality"));
  CFDictionaryAddValue(v19, CFSTR("name"), v18);
  CFRelease(v18);
  valuePtr = 0;
  v20 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(v19, CFSTR("hint"), v20);
  CFRelease(v20);
  v64 = 0;
  *(_OWORD *)values = 0u;
  v63 = 0u;
  if (v4)
  {
    values[0] = (void *)CFBundleCopyLocalizedString(v4, CFSTR("Faster"), CFSTR("Faster"), CFSTR("ConverterSettings"));
    values[1] = (void *)CFBundleCopyLocalizedString(v4, CFSTR("Fast"), CFSTR("Fast"), CFSTR("ConverterSettings"));
    *(_QWORD *)&v63 = CFBundleCopyLocalizedString(v4, CFSTR("Normal"), CFSTR("Normal"), CFSTR("ConverterSettings"));
    *((_QWORD *)&v63 + 1) = CFBundleCopyLocalizedString(v4, CFSTR("Better"), CFSTR("Better"), CFSTR("ConverterSettings"));
    v21 = (void *)CFBundleCopyLocalizedString(v4, CFSTR("Best"), CFSTR("Best"), CFSTR("ConverterSettings"));
  }
  else
  {
    values[0] = (void *)CFRetain(CFSTR("Faster"));
    values[1] = (void *)CFRetain(CFSTR("Fast"));
    *(_QWORD *)&v63 = CFRetain(CFSTR("Normal"));
    *((_QWORD *)&v63 + 1) = CFRetain(CFSTR("Better"));
    v21 = (void *)CFRetain(CFSTR("Best"));
  }
  v64 = v21;
  v22 = CFArrayCreate(v5, (const void **)values, 5, MEMORY[0x1E0C9B378]);
  CFDictionaryAddValue(v19, CFSTR("available values"), v22);
  for (i = 0; i != 5; ++i)
    CFRelease(values[i]);
  CFRelease(v22);
  v24 = *((_DWORD *)this + 69);
  if (v24 > 0xF)
  {
    if (v24 > 0x2F)
    {
      if (v24 > 0x4F)
      {
        if (v24 > 0x6E)
          v25 = 4;
        else
          v25 = 3;
      }
      else
      {
        v25 = 2;
      }
    }
    else
    {
      v25 = 1;
    }
    valuePtr = v25;
  }
  else
  {
    valuePtr = 0;
  }
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(v19, CFSTR("current value"), v26);
  CFRelease(v26);
  if (v4)
    v27 = CFBundleCopyLocalizedString(v4, CFSTR("Quality setting for the sample rate converter."), CFSTR("Quality setting for the sample rate converter."), CFSTR("ConverterSettings"));
  else
    v27 = CFRetain(CFSTR("Quality setting for the sample rate converter."));
  v28 = v27;
  CFDictionaryAddValue(v19, CFSTR("summary"), v27);
  CFRelease(v28);
  if (v4)
    v29 = (void *)CFBundleCopyLocalizedString(v4, CFSTR("Priming Method"), CFSTR("Priming Method"), CFSTR("ConverterSettings"));
  else
    v29 = (void *)CFRetain(CFSTR("Priming Method"));
  v30 = v29;
  v31 = v66;
  CFDictionaryAddValue(v66, CFSTR("key"), CFSTR("Priming Method"));
  CFDictionaryAddValue(v31, CFSTR("name"), v30);
  CFRelease(v30);
  valuePtr = 2;
  v32 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(v31, CFSTR("hint"), v32);
  CFRelease(v32);
  v59 = 0;
  v60 = 0;
  v61 = 0;
  if (v4)
  {
    v59 = (void *)CFBundleCopyLocalizedString(v4, CFSTR("Pre"), CFSTR("Pre"), CFSTR("ConverterSettings"));
    v60 = (void *)CFBundleCopyLocalizedString(v4, CFSTR("Normal"), CFSTR("Normal"), CFSTR("ConverterSettings"));
    v33 = (void *)CFBundleCopyLocalizedString(v4, CFSTR("None"), CFSTR("None"), CFSTR("ConverterSettings"));
  }
  else
  {
    v59 = (void *)CFRetain(CFSTR("Pre"));
    v60 = (void *)CFRetain(CFSTR("Normal"));
    v33 = (void *)CFRetain(CFSTR("None"));
  }
  v61 = v33;
  v34 = CFArrayCreate(v5, (const void **)&v59, 3, MEMORY[0x1E0C9B378]);
  CFDictionaryAddValue(v31, CFSTR("available values"), v34);
  for (j = 0; j != 24; j += 8)
    CFRelease(*(void **)((char *)&v59 + j));
  CFRelease(v34);
  valuePtr = *((_DWORD *)this + 70);
  v36 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(v31, CFSTR("current value"), v36);
  CFRelease(v36);
  if (v4)
    v37 = CFBundleCopyLocalizedString(v4, CFSTR("Priming method for the sample rate converter."), CFSTR("Priming method for the sample rate converter."), CFSTR("ConverterSettings"));
  else
    v37 = CFRetain(CFSTR("Priming method for the sample rate converter."));
  v38 = v37;
  CFDictionaryAddValue(v31, CFSTR("summary"), v37);
  CFRelease(v38);
  if (v4)
    v39 = (void *)CFBundleCopyLocalizedString(v4, CFSTR("Complexity"), CFSTR("Complexity"), CFSTR("ConverterSettings"));
  else
    v39 = (void *)CFRetain(CFSTR("Complexity"));
  v40 = v39;
  v41 = v67;
  CFDictionaryAddValue(v67, CFSTR("key"), CFSTR("Complexity"));
  CFDictionaryAddValue(v41, CFSTR("name"), v40);
  CFRelease(v40);
  valuePtr = 1;
  v42 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(v41, CFSTR("hint"), v42);
  CFRelease(v42);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  if (v4)
  {
    v55 = (void *)CFBundleCopyLocalizedString(v4, CFSTR("Linear"), CFSTR("Linear"), CFSTR("ConverterSettings"));
    v56 = (void *)CFBundleCopyLocalizedString(v4, CFSTR("Normal"), CFSTR("Normal"), CFSTR("ConverterSettings"));
    v57 = (void *)CFBundleCopyLocalizedString(v4, CFSTR("Mastering"), CFSTR("Mastering"), CFSTR("ConverterSettings"));
    v43 = (void *)CFBundleCopyLocalizedString(v4, CFSTR("Minimum Phase"), CFSTR("Minimum Phase"), CFSTR("ConverterSettings"));
  }
  else
  {
    v55 = (void *)CFRetain(CFSTR("Linear"));
    v56 = (void *)CFRetain(CFSTR("Normal"));
    v57 = (void *)CFRetain(CFSTR("Mastering"));
    v43 = (void *)CFRetain(CFSTR("Minimum Phase"));
  }
  v58 = v43;
  v44 = CFArrayCreate(v5, (const void **)&v59, 3, MEMORY[0x1E0C9B378]);
  CFDictionaryAddValue(v41, CFSTR("available values"), v44);
  for (k = 0; k != 24; k += 8)
    CFRelease(*(void **)((char *)&v55 + k));
  CFRelease(v44);
  v46 = *((_DWORD *)this + 68);
  if (v46 <= 1835626095)
  {
    if (v46 != 1650553971)
    {
      if (v46 == 1818848869)
        valuePtr = 0;
      goto LABEL_60;
    }
    v47 = 2;
    goto LABEL_59;
  }
  if (v46 == 1835626096)
  {
    v47 = 3;
    goto LABEL_59;
  }
  if (v46 == 1852797549)
  {
    v47 = 1;
LABEL_59:
    valuePtr = v47;
  }
LABEL_60:
  v48 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(v41, CFSTR("current value"), v48);
  CFRelease(v48);
  if (v4)
    v49 = CFBundleCopyLocalizedString(v4, CFSTR("sample rate converter complexity setting."), CFSTR("sample rate converter complexity setting."), CFSTR("ConverterSettings"));
  else
    v49 = CFRetain(CFSTR("sample rate converter complexity setting."));
  v50 = v49;
  CFDictionaryAddValue(v41, CFSTR("summary"), v49);
  CFRelease(v50);
  v51 = CFArrayCreate(v5, (const void **)&theDict, 2, MEMORY[0x1E0C9B378]);
  CFRelease(theDict);
  CFRelease(v66);
  CFDictionaryAddValue(v52, CFSTR("parameters"), v51);
  CFRelease(v51);
LABEL_64:
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v54);
}

void sub_18EEAFF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a14);
  _Unwind_Resume(a1);
}

uint64_t acv2::SampleRateConverter::SetPropertySettings(acv2::SampleRateConverter *this, CFDictionaryRef theDict)
{
  const __CFArray *Value;
  const __CFArray *v4;
  const void *ValueAtIndex;
  uint64_t v6;
  int v7;
  const void *v8;
  const void *v9;
  int v10;
  int v12;
  const void *v13;
  __int16 v14;
  const void *v15;
  __int16 v16;
  int v17;
  const void *v18;
  __int16 v19;
  unsigned int v20;

  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("parameters"));
  if (!Value)
    return 4294967246;
  v4 = Value;
  ValueAtIndex = CFArrayGetValueAtIndex(Value, 0);
  if (!ValueAtIndex)
    return 4294967246;
  v20 = 0;
  v18 = ValueAtIndex;
  v19 = 0;
  if ((CACFDictionary::GetUInt32((CACFDictionary *)&v18, CFSTR("current value"), &v20) & 1) != 0)
  {
    switch(v20)
    {
      case 0u:
        v17 = 0;
        goto LABEL_12;
      case 1u:
        v7 = 32;
        goto LABEL_11;
      case 3u:
        v7 = 96;
        goto LABEL_11;
      case 4u:
        v7 = 127;
        goto LABEL_11;
      default:
        v7 = 64;
LABEL_11:
        v17 = v7;
LABEL_12:
        v6 = (*(uint64_t (**)(acv2::SampleRateConverter *, uint64_t, uint64_t, int *))(*(_QWORD *)this + 96))(this, 1936876401, 4, &v17);
        if ((_DWORD)v6)
          break;
        v8 = CFArrayGetValueAtIndex(v4, 1);
        if (!v8)
          goto LABEL_21;
        v15 = v8;
        v16 = 256;
        if ((CACFDictionary::GetUInt32((CACFDictionary *)&v15, CFSTR("current value"), &v20) & 1) == 0)
        {
          v6 = 4294967246;
          goto LABEL_32;
        }
        v6 = (*(uint64_t (**)(acv2::SampleRateConverter *, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)this + 96))(this, 1886547309, 4, &v20);
        if ((_DWORD)v6)
          goto LABEL_32;
        if (CFArrayGetCount(v4) < 3)
          goto LABEL_31;
        v9 = CFArrayGetValueAtIndex(v4, 2);
        if (!v9)
          goto LABEL_31;
        v13 = v9;
        v14 = 256;
        if ((CACFDictionary::GetUInt32((CACFDictionary *)&v13, CFSTR("current value"), &v20) & 1) == 0)
          goto LABEL_30;
        switch(v20)
        {
          case 0u:
            v10 = 1818848869;
            break;
          case 2u:
            v10 = 1650553971;
            break;
          case 3u:
            v10 = 1835626096;
            break;
          default:
            v10 = 1852797549;
            break;
        }
        v12 = v10;
        v6 = (*(uint64_t (**)(acv2::SampleRateConverter *, uint64_t, uint64_t, int *))(*(_QWORD *)this + 96))(this, 1936876385, 4, &v12);
        if ((_DWORD)v6)
        {
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v13);
        }
        else
        {
LABEL_30:
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v13);
LABEL_31:
          v6 = 0;
        }
LABEL_32:
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v15);
        break;
    }
  }
  else
  {
LABEL_21:
    v6 = 4294967246;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v18);
  return v6;
}

void sub_18EEB0214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va2);
  _Unwind_Resume(a1);
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_18EEB034C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x193FFE3A0](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int64_t v16;
  std::locale *v17;
  uint64_t v18;
  _BYTE v20[16];
  std::locale __b;
  char v22;

  MEMORY[0x193FFE13C](v20, a1);
  if (v20[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_23;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_23;
    }
    if (v16 >= 1)
    {
      std::string::basic_string[abi:ne180100](&__b, v16, (char)v9);
      v17 = v22 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v18 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(_QWORD *)v7 + 96))(v7, v17, v16);
      if (v22 < 0)
        operator delete(__b.__locale_);
      if (v18 != v16)
        goto LABEL_23;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_23:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x193FFE148](v20);
  return a1;
}

void sub_18EEB0538(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x193FFE148](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x18EEB0514);
}

void sub_18EEB0598(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::stringbuf::str[abi:ne180100]<std::allocator<char>>(_QWORD *__dst, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = __dst;
  v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a2 + 88);
    v6 = *(_QWORD *)(a2 + 48);
    if (v5 < v6)
    {
      *(_QWORD *)(a2 + 88) = v6;
      v5 = v6;
    }
    v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_16;
    }
    v7 = (const void **)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 32);
  }
  v8 = *v7;
  v4 = v5 - (_QWORD)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    *v2 = v11;
    v2 = v11;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v4;
    if (!v4)
      goto LABEL_16;
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((_BYTE *)v2 + v4) = 0;
  return __dst;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x193FFE3A0](a1 + 112);
  return a1;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

const std::__fs::filesystem::path **std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100](const std::__fs::filesystem::path **result, const std::__fs::filesystem::path *a2)
{
  const std::__fs::filesystem::path *v2;
  OpaqueAudioFileID *size;
  OpaqueExtAudioFile *v4;
  NSObject *v5;
  const std::__fs::filesystem::path *v6;
  std::string::size_type v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const std::__fs::filesystem::path *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *result;
  *result = a2;
  if (v2)
  {
    size = (OpaqueAudioFileID *)v2[4].__pn_.__r_.__value_.__l.__size_;
    if (size)
    {
      AudioFileClose(size);
      v4 = (OpaqueExtAudioFile *)v2[4].__pn_.__r_.__value_.__r.__words[2];
      if (v4)
        ExtAudioFileDispose(v4);
      if (!v2[5].__pn_.__r_.__value_.__r.__words[0])
      {
        std::__fs::filesystem::__remove(v2, 0);
        AudioConverterLog();
        v5 = AudioConverterLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_INFO))
        {
          v6 = v2;
          if (SHIBYTE(v2->__pn_.__r_.__value_.__r.__words[2]) < 0)
            v6 = (const std::__fs::filesystem::path *)v2->__pn_.__r_.__value_.__r.__words[0];
          v8 = 136315650;
          v9 = "AudioConverterCapturer.cpp";
          v10 = 1024;
          v11 = 86;
          v12 = 2080;
          v13 = v6;
          _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d delete empty capture file %s", (uint8_t *)&v8, 0x1Cu);
        }
      }
    }
    v7 = v2[6].__pn_.__r_.__value_.__l.__size_;
    v2[6].__pn_.__r_.__value_.__l.__size_ = 0;
    if (v7)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v7 + 8))(v7);
    std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v2[5].__pn_.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v2->__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v2->__pn_.__r_.__value_.__l.__data_);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void sub_18EEB091C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18EEB0800);
  }
  _Unwind_Resume(a1);
}

std::pmr **std::unique_ptr<ACAudioSpan>::reset[abi:ne180100](std::pmr ***a1, std::pmr **a2)
{
  std::pmr **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ACAudioSpan::~ACAudioSpan(result);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void std::default_delete<ACSpanningInputBuffer>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  std::__optional_destruct_base<caulk::rt_vector<AudioStreamPacketDescription>,false>::~__optional_destruct_base[abi:ne180100](a1 + 256);
  v2 = *(void **)(a1 + 232);
  if (v2)
  {
    *(_QWORD *)(a1 + 240) = v2;
    operator delete(v2);
  }
  ACAudioSpan::~ACAudioSpan((std::pmr **)(a1 + 128));
  ACAudioSpan::~ACAudioSpan((std::pmr **)(a1 + 24));
  ExtendedAudioBufferList_Destroy(*(std::pmr **)(a1 + 16));
  JUMPOUT(0x193FFE460);
}

uint64_t std::__optional_destruct_base<caulk::rt_vector<AudioStreamPacketDescription>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  caulk::rt_safe_memory_resource *v2;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(caulk::rt_safe_memory_resource **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v2;
      std::allocator_traits<caulk::rt_allocator<AudioStreamPacketDescription>>::deallocate[abi:ne180100](v2, (uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 4);
    }
  }
  return a1;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AudioStreamPacketDescription>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (!(a2 >> 60))
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

uint64_t _ZNSt3__18optionalI19ACMetadataContainerE7emplaceB8ne180100IJEvEERS1_DpOT_(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v2;
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v2);
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

void CA::AudioBuffers::~AudioBuffers(std::pmr **this)
{
  ExtendedAudioBufferList_Destroy(*this);
}

void VorbisComment::Clear(VorbisComment *this)
{
  const void *v2;
  uint64_t i;
  uint64_t v4;

  v2 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v2)
    CFRelease(v2);
  v4 = *((_QWORD *)this + 1);
  for (i = *((_QWORD *)this + 2);
        i != v4;
        std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>,0>(i))
  {
    i -= 16;
  }
  *((_QWORD *)this + 2) = v4;
}

void VorbisComment::SetVendorString(const void **a1, const void *a2)
{
  const void *v2;

  v2 = *a1;
  *a1 = a2;
  if (a2)
    CFRetain(a2);
  if (v2)
    CFRelease(v2);
}

_QWORD *std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (a2 > (uint64_t)(result[2] - *result) >> 4)
  {
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__swap_out_circular_buffer(v2, v5);
    return (_QWORD *)std::__split_buffer<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

_QWORD *VorbisComment::AddUserComment(_QWORD *this, CFTypeRef cf, const void **a3)
{
  _QWORD *v5;
  const void *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[5];

  if (cf && *a3)
  {
    v5 = this;
    this = CFRetain(cf);
    v6 = *a3;
    if (v6)
      this = CFRetain(v6);
    v7 = v5[3];
    v8 = (_QWORD *)v5[2];
    if ((unint64_t)v8 >= v7)
    {
      v10 = v5[1];
      v11 = ((uint64_t)v8 - v10) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v13 = v7 - v10;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      v18[4] = v5 + 3;
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v14);
      v16 = &v15[16 * v11];
      v18[0] = v15;
      v18[1] = v16;
      v18[3] = &v15[16 * v17];
      *(_QWORD *)v16 = cf;
      *((_QWORD *)v16 + 1) = v6;
      v18[2] = v16 + 16;
      std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__swap_out_circular_buffer(v5 + 1, v18);
      v9 = (_QWORD *)v5[2];
      this = (_QWORD *)std::__split_buffer<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::~__split_buffer((uint64_t)v18);
    }
    else
    {
      *v8 = cf;
      v8[1] = v6;
      v9 = v8 + 2;
    }
    v5[2] = v9;
  }
  return this;
}

void sub_18EEB0D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

_QWORD *std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(v2 - 2);
    v2 -= 2;
    *(_QWORD *)(v4 - 16) = v5;
    v4 -= 16;
    *v2 = 0;
    *(_QWORD *)(v4 + 8) = v2[1];
    v2[1] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>,0>(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>::~pair(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>,0>(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void VorbisComment::VorbisComment(VorbisComment *this, DataSource *a2, uint64_t a3, unsigned int a4)
{
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  const UInt8 *v14;
  CFStringRef v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  _BYTE *v21;
  NSObject *v22;
  const char *v23;
  char v24;
  const UInt8 *v25;
  char *v26;
  char *v27;
  char *v28;
  CFStringRef v29;
  _BYTE *v30;
  CFStringRef v31;
  const __CFAllocator *alloc;
  CFTypeRef v33;
  unsigned int v34;
  CFTypeRef cf;
  unsigned int v36;
  CFIndex numBytes;
  _BYTE buf[12];
  __int16 v39;
  int v40;
  _BYTE __p[12];
  __int16 v42;
  int v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  numBytes = 0;
  v36 = 0;
  VorbisComment::Clear(this);
  if (a2 && a4)
  {
    if ((*(unsigned int (**)(DataSource *, _QWORD, uint64_t, uint64_t, CFIndex *, char *))(*(_QWORD *)a2 + 48))(a2, 0, a3, 4, &numBytes, (char *)&numBytes + 4))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "VorbisComment.cpp";
        v42 = 1024;
        v43 = 111;
        v8 = MEMORY[0x1E0C81028];
        v9 = "%25s:%-5d  VorbisComment::VorbisComment: Read vendor string length failed";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    v10 = numBytes;
    if ((unint64_t)numBytes + 4 > a4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "VorbisComment.cpp";
        v42 = 1024;
        v43 = 115;
        v8 = MEMORY[0x1E0C81028];
        v9 = "%25s:%-5d  VorbisComment::VorbisComment: exceed total metadata block size";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    v11 = a3 + 4;
    if ((_DWORD)numBytes)
    {
      std::string::basic_string[abi:ne180100](__p, (numBytes + 1), 48);
      v12 = v44 >= 0 ? __p : *(_BYTE **)__p;
      v13 = (*(uint64_t (**)(DataSource *, _QWORD, uint64_t, _QWORD, _BYTE *, char *))(*(_QWORD *)a2 + 48))(a2, 0, v11, numBytes, v12, (char *)&numBytes + 4);
      if (v13)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "VorbisComment.cpp";
          v39 = 1024;
          v40 = 120;
          _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  VorbisComment::VorbisComment: Read vendor string failed", buf, 0x12u);
        }
      }
      else
      {
        if (v44 >= 0)
          v14 = __p;
        else
          v14 = *(const UInt8 **)__p;
        v15 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v14, numBytes, 0x8000100u, 1u);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v15);
        VorbisComment::SetVendorString((const void **)this, cf);
        if (cf)
          CFRelease(cf);
        v11 += numBytes;
      }
      if (v44 < 0)
        operator delete(*(void **)__p);
      if (v13)
        goto LABEL_32;
    }
    if ((*(unsigned int (**)(DataSource *, _QWORD, uint64_t, uint64_t, unsigned int *, char *))(*(_QWORD *)a2 + 48))(a2, 0, v11, 4, &v36, (char *)&numBytes + 4))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "VorbisComment.cpp";
        v42 = 1024;
        v43 = 126;
        v8 = MEMORY[0x1E0C81028];
        v9 = "%25s:%-5d  VorbisComment::VorbisComment: Read number of user comments failed";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    v16 = a4;
    v17 = v10 + 8;
    if (v10 + 8 > (unint64_t)a4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "VorbisComment.cpp";
        v42 = 1024;
        v43 = 130;
        v8 = MEMORY[0x1E0C81028];
        v9 = "%25s:%-5d  VorbisComment::VorbisComment: exceed total metadata block size";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::reserve((_QWORD *)this + 1, v36);
    if (v36)
    {
      v18 = 0;
      v19 = v11 + 4;
      alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v20 = MEMORY[0x1E0C81028];
      while (1)
      {
        v34 = 0;
        if ((*(unsigned int (**)(DataSource *, _QWORD, uint64_t, uint64_t, unsigned int *, char *))(*(_QWORD *)a2 + 48))(a2, 0, v19, 4, &v34, (char *)&numBytes + 4))
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_32;
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "VorbisComment.cpp";
          v42 = 1024;
          v43 = 136;
          v8 = MEMORY[0x1E0C81028];
          v9 = "%25s:%-5d  VorbisComment::VorbisComment: Read user comment string length failed";
          goto LABEL_31;
        }
        v17 += v34 + 4;
        if (v17 > v16)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_32;
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "VorbisComment.cpp";
          v42 = 1024;
          v43 = 140;
          v8 = MEMORY[0x1E0C81028];
          v9 = "%25s:%-5d  VorbisComment::VorbisComment: exceed total metadata block size";
LABEL_31:
          _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_ERROR, v9, __p, 0x12u);
LABEL_32:
          VorbisComment::Clear(this);
          return;
        }
        std::string::basic_string[abi:ne180100](__p, v34 + 1, 48);
        v19 += 4;
        v21 = v44 >= 0 ? __p : *(_BYTE **)__p;
        if ((*(unsigned int (**)(DataSource *, _QWORD, uint64_t, _QWORD, _BYTE *, char *))(*(_QWORD *)a2 + 48))(a2, 0, v19, v34, v21, (char *)&numBytes + 4))
        {
          break;
        }
        v19 += v34;
        if (v44 < 0)
        {
          v25 = *(const UInt8 **)__p;
          v26 = *(char **)__p;
        }
        else
        {
          v25 = __p;
          v26 = __p;
        }
        v27 = strchr(v26, 61);
        if (!v27)
        {
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "VorbisComment.cpp";
            v39 = 1024;
            v40 = 147;
            v22 = v20;
            v23 = "%25s:%-5d  VorbisComment::VorbisComment: could not find equal sign in user comment";
LABEL_44:
            _os_log_impl(&dword_18EE07000, v22, OS_LOG_TYPE_ERROR, v23, buf, 0x12u);
          }
LABEL_45:
          v24 = 0;
          goto LABEL_58;
        }
        v28 = v27;
        v29 = CFStringCreateWithBytes(alloc, v25, v27 - (char *)v25, 0x8000100u, 1u);
        if (v44 >= 0)
          v30 = __p;
        else
          v30 = *(_BYTE **)__p;
        v31 = CFStringCreateWithBytes(alloc, (const UInt8 *)v28 + 1, v30 - (v28 + 1) + v34, 0x8000100u, 1u);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v29);
        v20 = MEMORY[0x1E0C81028];
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v33, v31);
        VorbisComment::AddUserComment(this, *(CFTypeRef *)buf, &v33);
        if (v33)
          CFRelease(v33);
        if (*(_QWORD *)buf)
          CFRelease(*(CFTypeRef *)buf);
        v24 = 1;
LABEL_58:
        if (v44 < 0)
          operator delete(*(void **)__p);
        if ((v24 & 1) == 0)
          goto LABEL_32;
        if (++v18 >= v36)
          return;
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "VorbisComment.cpp";
        v39 = 1024;
        v40 = 144;
        v22 = v20;
        v23 = "%25s:%-5d  VorbisComment::VorbisComment: Read user comment string failed";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
  }
}

void sub_18EEB1600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t VorbisComment::GetVorbisCommentFieldList(const void **a1, unsigned int *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  const void *v5;
  BOOL v6;
  unint64_t v8;
  unsigned int v9;
  uint64_t result;
  unsigned int v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  const void **v17;
  const void *v18;
  void *keys;

  v3 = (char *)a1[1];
  v4 = (char *)a1[2];
  v5 = *a1;
  if (*a1)
    v6 = 0;
  else
    v6 = v4 == v3;
  if (v6)
    return 0;
  v8 = (unint64_t)(v4 - v3) >> 4;
  v9 = 24 * v8 + 16;
  if (*a2 < v9)
    return 561211770;
  if (24 * (_DWORD)v8 == -16)
    return 0;
  v18 = *a1;
  keys = CFSTR("VENDOR");
  if (v5)
  {
    *(_QWORD *)a3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, &v18, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v3 = (char *)a1[1];
    v4 = (char *)a1[2];
  }
  *(_DWORD *)(a3 + 8) = v8;
  if (v3 != v4)
  {
    v13 = 0;
    do
    {
      v14 = a3 + 24 * v13;
      v16 = *(const void **)v3;
      v15 = (const void *)*((_QWORD *)v3 + 1);
      *(_QWORD *)(v14 + 24) = v15;
      v17 = (const void **)(v14 + 24);
      *(v17 - 1) = v16;
      if (v16)
      {
        CFRetain(v16);
        v15 = *v17;
      }
      if (v15)
        CFRetain(v15);
      *(_QWORD *)(a3 + 24 * v13++ + 32) = 0;
      v3 += 16;
    }
    while (v3 != v4);
  }
  result = 0;
  *a2 = v9;
  return result;
}

void VorbisComment::SetVendorString(const void **this, const __CFString *a2)
{
  CFStringRef Copy;
  CFTypeRef cf;

  Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, Copy);
  VorbisComment::SetVendorString(this, cf);
  if (cf)
    CFRelease(cf);
}

CFCharacterSetRef CreateEqualCharSet(void *a1)
{
  CFCharacterSetRef result;

  result = CFCharacterSetCreateWithCharactersInString(0, CFSTR("="));
  sEqualCharSet = (uint64_t)result;
  return result;
}

void VorbisComment::RemoveUserCommentsWithFieldName(VorbisComment *this, const __CFString *a2)
{
  CFStringRef *v2;
  const __CFString *v5;
  CFStringRef *v6;
  uint64_t v7;
  CFStringRef *v8;
  CFStringRef *v9;
  __int128 v10;
  const __CFString *v11;
  const __CFString *v12;
  CFStringRef *v13;
  CFRange v14;

  v2 = (CFStringRef *)*((_QWORD *)this + 1);
  if (v2 != *((CFStringRef **)this + 2))
  {
    do
    {
      v5 = *v2;
      v14.length = CFStringGetLength(*v2);
      v14.location = 0;
      if (CFStringCompareWithOptions(v5, a2, v14, 1uLL))
      {
        v2 += 2;
        v6 = (CFStringRef *)*((_QWORD *)this + 2);
      }
      else
      {
        v7 = (uint64_t)(v2 + 2);
        v8 = (CFStringRef *)*((_QWORD *)this + 2);
        if (v2 + 2 == v8)
        {
          v6 = v2;
        }
        else
        {
          v9 = v2;
          v6 = v2;
          do
          {
            v10 = *((_OWORD *)v6 + 1);
            v6 += 2;
            v11 = *v9;
            v12 = v9[1];
            *(_OWORD *)v9 = v10;
            *v6 = v11;
            v9[3] = v12;
            v13 = v9 + 4;
            v9 = v6;
          }
          while (v13 != v8);
          v7 = *((_QWORD *)this + 2);
        }
        while ((CFStringRef *)v7 != v6)
        {
          v7 -= 16;
          std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>,0>(v7);
        }
        *((_QWORD *)this + 2) = v6;
      }
    }
    while (v2 != v6);
  }
}

void VorbisComment::FillInfoDictionary(const __CFString **this, CACFDictionary *a2)
{
  CFStringRef *v4;
  CFStringRef *v5;
  const __CFDictionary *v6;
  const __CFAllocator *v7;
  CFIndex Length;
  __CFString *MutableCopy;
  const __CFString *Value;
  void *key;

  if (*this)
  {
    CACFDictionary::AddString(a2, CFSTR("source encoder"), *this);
  }
  else if (this[2] == this[1])
  {
    return;
  }
  if (sInitKeyDictionariesOnce != -1)
    dispatch_once_f(&sInitKeyDictionariesOnce, 0, (dispatch_function_t)InitializeKeyDictionaries);
  v4 = (CFStringRef *)this[1];
  v5 = (CFStringRef *)this[2];
  if (v4 != v5)
  {
    v6 = (const __CFDictionary *)sVorbisCommentKeysToInfoDictionaryKeys;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      Length = CFStringGetLength(*v4);
      MutableCopy = CFStringCreateMutableCopy(v7, Length, *v4);
      CFStringUppercase(MutableCopy, 0);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, MutableCopy);
      Value = (const __CFString *)CFDictionaryGetValue(v6, key);
      if (Value && (CACFDictionary::HasKey(a2, Value) & 1) == 0)
        CACFDictionary::AddString(a2, Value, v4[1]);
      if (key)
        CFRelease(key);
      v4 += 2;
    }
    while (v4 != v5);
  }
}

void sub_18EEB1A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

CFDictionaryRef InitializeKeyDictionaries(void *a1)
{
  CFDictionaryRef result;

  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&sVorbisCommentKeys, (const void **)&sInfoDictionaryKeys, 9, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  sVorbisCommentKeysToInfoDictionaryKeys = (uint64_t)result;
  return result;
}

uint64_t VorbisComment::FillLoudnessInfoDictionary(VorbisComment *this, CACFDictionary *a2)
{
  CFStringRef *v4;
  CFStringRef *v5;
  int v6;
  char v7;
  const __CFString *v8;
  int v9;
  void **v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  CFTypeID v14;
  CFTypeRef v15;
  BOOL v16;
  std::runtime_error *exception;
  int v18;
  CFDictionaryRef theDict;
  void *__p[2];
  unsigned __int8 v22;
  __CFDictionary *Mutable;
  __int16 v24;
  CFTypeRef cf;
  _QWORD v26[3];
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CFRange v32;

  if (__PAIR128__(*((_QWORD *)this + 2), 0) == *(_OWORD *)this)
    return 2003334207;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v24 = 257;
  v4 = (CFStringRef *)*((_QWORD *)this + 1);
  v5 = (CFStringRef *)*((_QWORD *)this + 2);
  if (v4 != v5)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = *v4;
      v32.length = CFStringGetLength(*v4);
      v32.location = 0;
      if (CFStringCompareWithOptions(v8, CFSTR("LOUDNESS"), v32, 1uLL))
      {
        AddTextToReplayGainDict((uint64_t)v8, v4[1], (CACFDictionary *)&Mutable);
        if ((v7 & 1) != 0)
          goto LABEL_28;
      }
      else
      {
        if ((v7 & 1) != 0)
          goto LABEL_28;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v4[1]);
        v9 = (char)v22;
        v10 = (void **)__p[0];
        if ((v22 & 0x80u) == 0)
          v11 = v22;
        else
          v11 = (unint64_t)__p[1];
        v12 = operator new[]();
        LODWORD(v26[0]) = 0;
        if (v9 >= 0)
          v13 = __p;
        else
          v13 = v10;
        v26[1] = 0;
        v26[2] = v13;
        v27 = v12;
        v28 = v11;
        v29 = 0;
        v30 = 0;
        v31 = v12;
        applesauce::CF::details::parse_object<minijson::const_buffer_context>((CFDictionaryRef *)&cf, v26);
        if (cf)
        {
          v14 = CFGetTypeID(cf);
          if (v14 != CFDictionaryGetTypeID())
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          v15 = cf;
          if (cf)
            CFRetain(cf);
        }
        else
        {
          v15 = 0;
        }
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&theDict, v15);
        if (cf)
          CFRelease(cf);
        if (v27)
          MEMORY[0x193FFE43C](v27, 0x1000C8077774924);
        v16 = theDict != 0;
        if (theDict)
        {
          CACFDictionary::SetCFMutableDictionaryFromCopy(a2, theDict, 1);
          v6 += CFDictionaryGetCount(theDict);
          if (theDict)
            CFRelease(theDict);
        }
        if ((char)v22 < 0)
        {
          operator delete(__p[0]);
          if (v16)
          {
LABEL_28:
            if (CACFDictionary::Size((CACFDictionary *)&Mutable) == 4)
              goto LABEL_36;
            v7 = 1;
            goto LABEL_32;
          }
        }
        else if (v16)
        {
          goto LABEL_28;
        }
      }
      v7 = 0;
LABEL_32:
      v4 += 2;
      if (v4 == v5)
        goto LABEL_36;
    }
  }
  v6 = 0;
LABEL_36:
  if (CACFDictionary::Size((CACFDictionary *)&Mutable))
  {
    v18 = CACFDictionary::Size((CACFDictionary *)&Mutable);
    CACFDictionary::AddDictionary(a2, CFSTR("REPLAYGAIN"), Mutable);
    v6 += v18;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  if (!v6)
    return 2003334207;
  else
    return 0;
}

void sub_18EEB1DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a17);
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef CACFDictionary::SetCFMutableDictionaryFromCopy(CACFDictionary *this, CFDictionaryRef theDict, char a3)
{
  const void *v6;
  CFMutableDictionaryRef result;

  if (*((_BYTE *)this + 8))
  {
    v6 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v6);
  }
  result = CFDictionaryCreateMutableCopy(0, 0, theDict);
  *(_QWORD *)this = result;
  *((_BYTE *)this + 9) = 1;
  *((_BYTE *)this + 8) = a3;
  return result;
}

void applesauce::CF::details::parse_object<minijson::const_buffer_context>(CFDictionaryRef *a1, _QWORD *a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  char v6;
  int v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  char v16;
  uint64_t **v17;
  const __CFArray *v18;
  uint64_t **v19;
  const __CFArray *v20;
  const __CFArray *v21;
  uint64_t **v22;
  uint64_t **v23;
  const __CFArray *v24;
  uint64_t **v25;
  const __CFArray *v26;
  uint64_t **v27;
  std::runtime_error *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  int64x2_t v37;
  unint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  int64x2_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  BOOL v53;
  CFDictionaryRef CFDictionaryRef;
  _QWORD *exception;
  int v56;
  uint64_t v57;
  const __CFArray *v58;
  const __CFArray *v59;
  uint64_t *v61;
  _QWORD *v62;
  unint64_t v63;
  unsigned __int8 v64;
  char v65;
  int64x2_t *p_valuePtr;
  char *v67[2];
  unint64_t v68;
  unint64_t *v69;
  int64x2_t valuePtr;
  unint64_t v71;
  uint64_t *v72;

  v62 = 0;
  v63 = 0;
  v61 = (uint64_t *)&v62;
  v3 = a2[1];
  if (v3 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_1E2913350;
    v8 = a2 + 5;
    v56 = 12;
LABEL_108:
    v57 = *v8 - 1;
    if (!*v8)
      v57 = 0;
    exception[1] = v57;
    *((_DWORD *)exception + 4) = v56;
  }
  LOBYTE(v4) = 0;
  v64 = 0;
  v5 = *(unsigned __int8 *)a2;
  if (v5 <= 2)
  {
    v6 = 8 * v5;
    v4 = 0x5B7B00u >> v6;
    v64 = 1u >> v6;
  }
  v7 = 0;
  *(_DWORD *)a2 = 0;
  v8 = a2 + 5;
  v59 = (const __CFArray *)*MEMORY[0x1E0C9AE50];
  v58 = (const __CFArray *)*MEMORY[0x1E0C9AE40];
  v9 = "";
  v10 = MEMORY[0x1E0C80978];
LABEL_5:
  if (v7 != 6)
  {
    v11 = v64;
    while (1)
    {
      if (a2[1] != v3)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *exception = &off_1E2913350;
        v56 = 11;
        goto LABEL_108;
      }
      if (v11)
      {
        v12 = a2[5];
        if (v12 >= a2[4])
        {
          v14 = 0;
          LOBYTE(v4) = 0;
LABEL_14:
          v15 = *(_DWORD *)(v10 + 4 * v14 + 60) & 0x4000;
          goto LABEL_15;
        }
        v13 = a2[2];
        a2[5] = v12 + 1;
        LOBYTE(v4) = *(_BYTE *)(v13 + v12);
      }
      v14 = (char)v4;
      if ((v4 & 0x80) == 0)
        goto LABEL_14;
      v15 = __maskrune((char)v4, 0x4000uLL);
LABEL_15:
      v11 = 1;
      if (!v15)
      {
        v64 = 1;
        v65 = v4;
        switch(v7)
        {
          case 0:
            if (v4 == 123)
            {
              v7 = 1;
              v16 = 44;
              LOBYTE(v4) = 123;
              goto LABEL_69;
            }
            exception = __cxa_allocate_exception(0x18uLL);
            *exception = &off_1E2913350;
            v56 = 8;
            goto LABEL_108;
          case 1:
            if (v4 == 34)
              goto LABEL_30;
            if (v4 != 125)
            {
LABEL_112:
              exception = __cxa_allocate_exception(0x18uLL);
              *exception = &off_1E2913350;
              v56 = 1;
              goto LABEL_108;
            }
            v7 = 6;
            v16 = 44;
            goto LABEL_69;
          case 2:
            if (v4 != 34)
              goto LABEL_112;
LABEL_30:
            a2[7] = a2[3] + a2[6];
            minijson::detail::read_quoted_string<minijson::const_buffer_context>((minijson::detail::buffer_context_base *)a2);
            v9 = (char *)a2[7];
            v7 = 3;
            goto LABEL_67;
          case 3:
            if (v4 != 58)
            {
              exception = __cxa_allocate_exception(0x18uLL);
              *exception = &off_1E2913350;
              v56 = 9;
              goto LABEL_108;
            }
            v7 = 4;
            v16 = 44;
            LOBYTE(v4) = 58;
            goto LABEL_69;
          case 4:
            minijson::detail::parse_value_helper<minijson::const_buffer_context>((uint64_t)&p_valuePtr, (minijson::detail::buffer_context_base *)a2, &v65, &v64);
            switch((int)p_valuePtr)
            {
              case 0:
                applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v72, v67[0]);
                std::string::basic_string[abi:ne180100]<0>(&valuePtr, v9);
                v17 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v61, &valuePtr, (uint64_t)&valuePtr);
                v18 = (const __CFArray *)v17[7];
                v17[7] = v72;
                v72 = (uint64_t *)v18;
                if (SHIBYTE(v71) < 0)
                {
                  operator delete((void *)valuePtr.i64[0]);
                  v18 = (const __CFArray *)v72;
                  if (!v72)
                    goto LABEL_66;
                }
                else if (!v18)
                {
                  goto LABEL_66;
                }
                CFRelease(v18);
                goto LABEL_66;
              case 1:
                valuePtr.i64[0] = v68;
                v24 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
                v72 = (uint64_t *)v24;
                if (!v24)
                {
                  v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v28, "Could not construct");
LABEL_71:
                }
                std::string::basic_string[abi:ne180100]<0>(&valuePtr, v9);
                v25 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v61, &valuePtr, (uint64_t)&valuePtr);
                v26 = (const __CFArray *)v25[7];
                v25[7] = (uint64_t *)v24;
                v72 = (uint64_t *)v26;
                if (SHIBYTE(v71) < 0)
                {
                  operator delete((void *)valuePtr.i64[0]);
                  if (!v26)
                    goto LABEL_66;
                }
                else if (!v26)
                {
                  goto LABEL_66;
                }
                CFRelease(v26);
LABEL_66:
                v7 = 5;
LABEL_67:
                LOBYTE(v4) = v65;
                break;
              case 2:
                if (v67[1])
                  v21 = v59;
                else
                  v21 = v58;
                v72 = (uint64_t *)v21;
                std::string::basic_string[abi:ne180100]<0>(&valuePtr, v9);
                v22 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v61, &valuePtr, (uint64_t)&valuePtr);
                v20 = (const __CFArray *)v22[7];
                v22[7] = (uint64_t *)v21;
                v72 = (uint64_t *)v20;
                if ((SHIBYTE(v71) & 0x80000000) == 0)
                {
                  if (v20)
                    goto LABEL_61;
                  goto LABEL_66;
                }
                operator delete((void *)valuePtr.i64[0]);
                if (!v20)
                  goto LABEL_66;
                goto LABEL_61;
              case 3:
                applesauce::CF::details::parse_object<minijson::const_buffer_context>(&v72, a2);
                std::string::basic_string[abi:ne180100]<0>(&valuePtr, v9);
                v23 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v61, &valuePtr, (uint64_t)&valuePtr);
                v20 = (const __CFArray *)v23[7];
                v23[7] = v72;
                v72 = (uint64_t *)v20;
                if ((SHIBYTE(v71) & 0x80000000) == 0)
                {
                  if (v20)
                    goto LABEL_61;
                  goto LABEL_66;
                }
                operator delete((void *)valuePtr.i64[0]);
                if (!v20)
                  goto LABEL_66;
                goto LABEL_61;
              case 4:
                applesauce::CF::details::parse_array<minijson::const_buffer_context>((CFArrayRef *)&v72, a2);
                std::string::basic_string[abi:ne180100]<0>(&valuePtr, v9);
                v19 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v61, &valuePtr, (uint64_t)&valuePtr);
                v20 = (const __CFArray *)v19[7];
                v19[7] = v72;
                v72 = (uint64_t *)v20;
                if ((SHIBYTE(v71) & 0x80000000) == 0)
                {
                  if (v20)
                    goto LABEL_61;
                  goto LABEL_66;
                }
                operator delete((void *)valuePtr.i64[0]);
                if (!v20)
                  goto LABEL_66;
                goto LABEL_61;
              case 5:
                v72 = 0;
                std::string::basic_string[abi:ne180100]<0>(&valuePtr, v9);
                v27 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v61, &valuePtr, (uint64_t)&valuePtr);
                v20 = (const __CFArray *)v27[7];
                v27[7] = 0;
                v72 = (uint64_t *)v20;
                if (SHIBYTE(v71) < 0)
                {
                  operator delete((void *)valuePtr.i64[0]);
                  if (!v20)
                    goto LABEL_66;
                }
                else if (!v20)
                {
                  goto LABEL_66;
                }
LABEL_61:
                CFRelease(v20);
                goto LABEL_66;
              default:
                goto LABEL_66;
            }
            goto LABEL_68;
          case 5:
            if (v4 == 44)
            {
              v7 = 2;
LABEL_68:
              v16 = v4;
            }
            else
            {
              if (v4 != 125)
              {
                exception = __cxa_allocate_exception(0x18uLL);
                *exception = &off_1E2913350;
                v56 = 10;
                goto LABEL_108;
              }
              v7 = 6;
              v16 = 44;
              LOBYTE(v4) = 125;
            }
LABEL_69:
            if (!v16)
            {
              v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v28, "This line should never be reached, please file a bug report");
              goto LABEL_71;
            }
            break;
          default:
            goto LABEL_67;
        }
        goto LABEL_5;
      }
    }
  }
  v29 = a2[1];
  if (v29)
    a2[1] = v29 - 1;
  valuePtr = 0uLL;
  v71 = 0;
  if (v63)
  {
    if (v63 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v69 = &v71;
    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v63);
    v32 = &v30[16 * v31];
    v67[1] = v30;
    v68 = (unint64_t)v32;
    v33 = (_QWORD *)valuePtr.i64[1];
    v34 = (_QWORD *)valuePtr.i64[0];
    if (valuePtr.i64[1] == valuePtr.i64[0])
    {
      v37 = vdupq_n_s64(valuePtr.u64[1]);
      v35 = v30;
    }
    else
    {
      v35 = v30;
      do
      {
        v36 = *(v33 - 2);
        v33 -= 2;
        *((_QWORD *)v35 - 2) = v36;
        v35 -= 16;
        *v33 = 0;
        *((_QWORD *)v35 + 1) = v33[1];
        v33[1] = 0;
      }
      while (v33 != v34);
      v37 = valuePtr;
      v30 = v67[1];
      v32 = (char *)v68;
    }
    valuePtr.i64[0] = (uint64_t)v35;
    valuePtr.i64[1] = (uint64_t)v30;
    *(int64x2_t *)v67 = v37;
    v38 = v71;
    v71 = (unint64_t)v32;
    v68 = v38;
    p_valuePtr = (int64x2_t *)v37.i64[0];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&p_valuePtr);
  }
  v39 = v61;
  if (v61 != (uint64_t *)&v62)
  {
    v40 = (char *)valuePtr.i64[1];
    do
    {
      if ((unint64_t)v40 >= v71)
      {
        v41 = (uint64_t)&v40[-valuePtr.i64[0]] >> 4;
        if ((unint64_t)(v41 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v42 = (uint64_t)(v71 - valuePtr.i64[0]) >> 3;
        if (v42 <= v41 + 1)
          v42 = v41 + 1;
        if (v71 - valuePtr.i64[0] >= 0x7FFFFFFFFFFFFFF0)
          v43 = 0xFFFFFFFFFFFFFFFLL;
        else
          v43 = v42;
        v69 = &v71;
        if (v43)
          v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v43);
        else
          v44 = 0;
        p_valuePtr = (int64x2_t *)v43;
        v67[0] = (char *)(v43 + 16 * v41);
        v67[1] = v67[0];
        v68 = v43 + 16 * v44;
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>((CFStringRef *)v67[0], (const UInt8 *)v39 + 32, (const void **)v39 + 7);
        v45 = v67[0];
        v40 = v67[1] + 16;
        v67[1] += 16;
        v46 = (_QWORD *)valuePtr.i64[1];
        v47 = (_QWORD *)valuePtr.i64[0];
        if (valuePtr.i64[1] == valuePtr.i64[0])
        {
          v49 = vdupq_n_s64(valuePtr.u64[1]);
        }
        else
        {
          do
          {
            v48 = *(v46 - 2);
            v46 -= 2;
            *((_QWORD *)v45 - 2) = v48;
            v45 -= 16;
            *v46 = 0;
            *((_QWORD *)v45 + 1) = v46[1];
            v46[1] = 0;
          }
          while (v46 != v47);
          v49 = valuePtr;
          v40 = v67[1];
        }
        valuePtr.i64[0] = (uint64_t)v45;
        valuePtr.i64[1] = (uint64_t)v40;
        *(int64x2_t *)v67 = v49;
        v50 = v71;
        v71 = v68;
        v68 = v50;
        p_valuePtr = (int64x2_t *)v49.i64[0];
        std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&p_valuePtr);
      }
      else
      {
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>((CFStringRef *)v40, (const UInt8 *)v39 + 32, (const void **)v39 + 7);
        v40 += 16;
      }
      valuePtr.i64[1] = (uint64_t)v40;
      v51 = (uint64_t *)v39[1];
      if (v51)
      {
        do
        {
          v52 = v51;
          v51 = (uint64_t *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (uint64_t *)v39[2];
          v53 = *v52 == (_QWORD)v39;
          v39 = v52;
        }
        while (!v53);
      }
      v39 = v52;
    }
    while (v52 != (uint64_t *)&v62);
  }
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)&valuePtr);
  p_valuePtr = &valuePtr;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_valuePtr);
  *a1 = CFDictionaryRef;
  std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(v62);
}

void sub_18EEB26A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  __cxa_free_exception(v26);
  std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(a13);
  _Unwind_Resume(a1);
}

void applesauce::CF::TypeRef::~TypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

std::runtime_error *applesauce::CF::construct_error(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not construct");
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(void ***a1)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void *v16;
  void **v17;
  void **v18;
  void **v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  void *v26;
  void **v27;
  void **v28;
  CFDictionaryRef v29;
  std::runtime_error *exception;
  std::runtime_error *v32;
  void **values;
  void **v34;
  unint64_t v35;
  void **keys;
  void **v37;
  unint64_t v38;

  v2 = ((char *)a1[1] - (char *)*a1) >> 4;
  keys = 0;
  v37 = 0;
  v38 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  v34 = 0;
  v35 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v5 = *v3;
      if (!*v3 || !v3[1])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      v6 = v37;
      if ((unint64_t)v37 >= v38)
      {
        v8 = keys;
        v9 = v37 - keys;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v11 = v38 - (_QWORD)keys;
        if ((uint64_t)(v38 - (_QWORD)keys) >> 2 > v10)
          v10 = v11 >> 2;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v12);
        else
          v13 = 0;
        v14 = (void **)(v12 + 8 * v9);
        *v14 = v5;
        v7 = v14 + 1;
        if (v6 != v8)
        {
          do
          {
            v15 = *--v6;
            *--v14 = v15;
          }
          while (v6 != v8);
          v6 = keys;
        }
        keys = v14;
        v38 = v12 + 8 * v13;
        if (v6)
          operator delete(v6);
      }
      else
      {
        *v37 = v5;
        v7 = v6 + 1;
      }
      v37 = v7;
      v16 = v3[1];
      v17 = v34;
      if ((unint64_t)v34 >= v35)
      {
        v19 = values;
        v20 = v34 - values;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v22 = v35 - (_QWORD)values;
        if ((uint64_t)(v35 - (_QWORD)values) >> 2 > v21)
          v21 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
          v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v23);
        else
          v24 = 0;
        v25 = (void **)(v23 + 8 * v20);
        *v25 = v16;
        v18 = v25 + 1;
        if (v17 != v19)
        {
          do
          {
            v26 = *--v17;
            *--v25 = v26;
          }
          while (v17 != v19);
          v17 = values;
        }
        values = v25;
        v35 = v23 + 8 * v24;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v34 = v16;
        v18 = v17 + 1;
      }
      v34 = v18;
      v3 += 2;
    }
    while (v3 != v4);
  }
  v27 = keys;
  v28 = values;
  v29 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v29)
  {
    v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
  }
  if (v28)
    operator delete(v28);
  if (v27)
    operator delete(v27);
  return v29;
}

void sub_18EEB2A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  __cxa_free_exception(v12);
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,applesauce::CF::TypeRef>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,applesauce::CF::TypeRef>,0>(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>(CFStringRef *a1, const UInt8 *a2, const void **a3)
{
  CFIndex v5;
  CFIndex v6;
  CFStringRef v7;
  const __CFString *v8;
  std::runtime_error *exception;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v8 = (const __CFString *)*a3;
  if (v8)
    CFRetain(v8);
  a1[1] = v8;
  return a1;
}

void sub_18EEB2C8C(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<void const*>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *minijson::detail::read_quoted_string<minijson::const_buffer_context>(minijson::detail::buffer_context_base *this)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  minijson::detail::buffer_context_base *v9;
  char v10;
  uint64_t i;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *exception;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  int v40;
  int v41;
  char v42;

  v42 = 0;
  v41 = 0;
  v2 = *((_QWORD *)this + 5);
  if (v2 >= *((_QWORD *)this + 4))
  {
LABEL_66:
    exception = __cxa_allocate_exception(0x18uLL);
    v24 = *((_QWORD *)this + 5);
    v25 = v24 != 0;
    v26 = v24 - 1;
    if (!v25)
      v26 = 0;
    *exception = &off_1E2913350;
    exception[1] = v26;
    v27 = 5;
    goto LABEL_69;
  }
  v3 = 0;
  v4 = 0;
  v5 = 1;
  v6 = MEMORY[0x1E0C80978];
  while (1)
  {
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 5) = v2 + 1;
    v8 = *(char *)(v7 + v2);
    if (!v8)
      goto LABEL_66;
    if (v5 != 3)
      break;
    *((_BYTE *)&v41 + v3) = v8;
    if (v3 == 3)
    {
      for (i = 0; i != 4; ++i)
      {
        if (*((char *)&v41 + i) < 0 || (*(_DWORD *)(v6 + 4 * *((unsigned __int8 *)&v41 + i) + 60) & 0x10000) == 0)
        {
          v29 = __cxa_allocate_exception(1uLL);
        }
      }
      v12 = minijson::detail::parse_long((minijson::detail *)&v41, (const char *)0x10);
      if (!((unsigned __int16)v12 | v4))
      {
        v32 = __cxa_allocate_exception(0x18uLL);
        v33 = *((_QWORD *)this + 5);
        v25 = v33 != 0;
        v34 = v33 - 1;
        if (!v25)
          v34 = 0;
        *v32 = &off_1E2913350;
        v32[1] = v34;
        *((_DWORD *)v32 + 4) = 13;
      }
      if (v4)
      {
        if ((unsigned __int16)((unsigned __int16)(v4 + 0x2000) >> 11) > 0x1Eu)
        {
          if ((unsigned __int16)(v4 >> 10) > 0x36u
            || (unsigned __int16)((unsigned __int16)(v12 + 0x2000) >> 10) <= 0x3Eu)
          {
LABEL_78:
            v35 = __cxa_allocate_exception(1uLL);
          }
          v17 = (unsigned __int16)(v12 + 9216) | ((unsigned __int16)(v4 + 10240) << 10);
          v13 = ((v17 + 0x10000) >> 18) | 0xF0;
          v16 = ((v17 + 0x10000) >> 12) & 0x3F | 0x80;
          v15 = (v17 >> 6) & 0x3F | 0x80;
          v14 = (((v12 + 9216) & 0x3F) << 24) | 0x80000000;
        }
        else
        {
          if ((_WORD)v12)
            goto LABEL_78;
          v13 = v4;
          if (v4 >= 0x80u)
          {
            v16 = v4 & 0x3F | 0x80;
            v14 = 0;
            if (v4 > 0x7FFu)
            {
              v15 = v4 & 0x3F | 0x80;
              v16 = (v4 >> 6) & 0x3F | 0x80;
              v13 = (v4 >> 12) | 0xE0;
            }
            else
            {
              v15 = 0;
              v13 = (v4 >> 6) | 0xC0;
            }
          }
          else
          {
            v14 = 0;
            v15 = 0;
            v16 = 0;
          }
        }
        v18 = 0;
        v40 = v14 | (v15 << 16) | (v16 << 8) | v13;
        do
        {
          if (v18 && !*((_BYTE *)&v40 + v18))
            break;
          minijson::detail::buffer_context_base::write(this, *((_BYTE *)&v40 + v18++));
        }
        while (v18 != 4);
LABEL_62:
        v3 = 0;
LABEL_63:
        v4 = 0;
LABEL_64:
        v5 = 1;
        goto LABEL_65;
      }
      if ((unsigned __int16)v12 >> 10 != 54)
      {
        if ((unsigned __int16)((unsigned __int16)(v12 + 0x2000) >> 11) > 0x1Eu)
        {
          v38 = __cxa_allocate_exception(1uLL);
        }
        v19 = (unsigned __int16)v12;
        if ((unsigned __int16)v12 >= 0x80u)
        {
          if ((unsigned __int16)v12 > 0x7FFu)
          {
            v19 = ((unsigned __int16)v12 >> 12) | 0xE0;
            v21 = (v12 >> 6) & 0x3F | 0x80;
            v20 = v12 & 0x3F | 0x80;
          }
          else
          {
            v20 = 0;
            v19 = ((unsigned __int16)v12 >> 6) | 0xC0;
            v21 = v12 & 0x3F | 0x80;
          }
        }
        else
        {
          v20 = 0;
          v21 = 0;
        }
        v22 = 0;
        v39 = (v20 << 16) | (v21 << 8) | v19;
        do
        {
          if (v22 && !*((_BYTE *)&v39 + v22))
            break;
          minijson::detail::buffer_context_base::write(this, *((_BYTE *)&v39 + v22++));
        }
        while (v22 != 4);
        goto LABEL_62;
      }
      v3 = 0;
      v5 = 1;
      v4 = v12;
    }
    else
    {
      v5 = 3;
      ++v3;
    }
LABEL_65:
    v2 = *((_QWORD *)this + 5);
    if (v2 >= *((_QWORD *)this + 4))
      goto LABEL_66;
  }
  if (v5 == 2)
  {
    if (v8 > 97)
    {
      v5 = 3;
      switch(v8)
      {
        case 'n':
          v9 = this;
          v10 = 10;
          break;
        case 'o':
        case 'p':
        case 'q':
        case 's':
          goto LABEL_79;
        case 'r':
          v9 = this;
          v10 = 13;
          break;
        case 't':
          v9 = this;
          v10 = 9;
          break;
        case 'u':
          goto LABEL_65;
        default:
          if (v8 == 98)
          {
            v9 = this;
            v10 = 8;
          }
          else
          {
            if (v8 != 102)
            {
LABEL_79:
              exception = __cxa_allocate_exception(0x18uLL);
              v36 = *((_QWORD *)this + 5);
              v25 = v36 != 0;
              v37 = v36 - 1;
              if (!v25)
                v37 = 0;
              *exception = &off_1E2913350;
              exception[1] = v37;
              v27 = 3;
LABEL_69:
              *((_DWORD *)exception + 4) = v27;
            }
            v9 = this;
            v10 = 12;
          }
          break;
      }
    }
    else
    {
      switch(v8)
      {
        case '"':
          v9 = this;
          v10 = 34;
          break;
        case '/':
          v9 = this;
          v10 = 47;
          break;
        case '\\':
          v9 = this;
          v10 = 92;
          break;
        default:
          goto LABEL_79;
      }
    }
    minijson::detail::buffer_context_base::write(v9, v10);
    goto LABEL_64;
  }
  if (v8 == 92)
  {
    v5 = 2;
    goto LABEL_65;
  }
  if (v4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v30 = *((_QWORD *)this + 5);
    v25 = v30 != 0;
    v31 = v30 - 1;
    if (!v25)
      v31 = 0;
    *exception = &off_1E2913350;
    exception[1] = v31;
    v27 = 2;
    goto LABEL_69;
  }
  if (v8 != 34)
  {
    minijson::detail::buffer_context_base::write(this, v8);
    goto LABEL_63;
  }
  return minijson::detail::buffer_context_base::write(this, 0);
}

void sub_18EEB32A4(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  _QWORD *exception;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    exception = __cxa_allocate_exception(0x18uLL);
    v4 = *(_QWORD *)(v2 + 40);
    v5 = v4 != 0;
    v6 = v4 - 1;
    if (!v5)
      v6 = 0;
    *exception = &off_1E2913350;
    exception[1] = v6;
    *((_DWORD *)exception + 4) = 4;
  }
  _Unwind_Resume(exception_object);
}

void sub_18EEB330C()
{
  __cxa_end_catch();
  JUMPOUT(0x18EEB3314);
}

uint64_t minijson::detail::parse_value_helper<minijson::const_buffer_context>(uint64_t result, minijson::detail::buffer_context_base *this, _BYTE *a3, _BYTE *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *exception;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  double v21;
  char v22;
  char v23;
  int v24;

  v5 = result;
  v6 = *a3;
  switch(v6)
  {
    case '"':
      *((_QWORD *)this + 7) = *((_QWORD *)this + 3) + *((_QWORD *)this + 6);
      result = (uint64_t)minijson::detail::read_quoted_string<minijson::const_buffer_context>(this);
      v8 = *((_QWORD *)this + 7);
      *(_DWORD *)v5 = 0;
      *(_WORD *)(v5 + 4) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 8) = v8;
      return result;
    case '[':
      *(_DWORD *)result = 4;
      *(_WORD *)(result + 4) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 8) = "";
      v7 = 2;
      goto LABEL_6;
    case '{':
      *(_DWORD *)result = 3;
      *(_WORD *)(result + 4) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 8) = "";
      v7 = 1;
LABEL_6:
      *(_DWORD *)this = v7;
      ++*((_QWORD *)this + 1);
      return result;
  }
  *((_QWORD *)this + 7) = *((_QWORD *)this + 3) + *((_QWORD *)this + 6);
  if (v6)
    minijson::detail::buffer_context_base::write(this, v6);
  v11 = *((_QWORD *)this + 5);
  if (v11 >= *((_QWORD *)this + 4))
    goto LABEL_23;
  v12 = MEMORY[0x1E0C80978];
  while (1)
  {
    v13 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 5) = v11 + 1;
    v14 = *(unsigned __int8 *)(v13 + v11);
    v15 = (char)v14;
    if (v14 <= 92)
    {
      if (v14 == 44)
        goto LABEL_27;
      if (!v14)
        goto LABEL_23;
    }
    else if (v14 == 93 || v14 == 125)
    {
      goto LABEL_27;
    }
    if (((char)v14 & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(v12 + 4 * (char)v14 + 60) & 0x4000) != 0)
        break;
      goto LABEL_22;
    }
    if (__maskrune((char)v14, 0x4000uLL))
      break;
LABEL_22:
    minijson::detail::buffer_context_base::write(this, v15);
    v11 = *((_QWORD *)this + 5);
    if (v11 >= *((_QWORD *)this + 4))
      goto LABEL_23;
  }
  if (!v15)
  {
LABEL_23:
    exception = __cxa_allocate_exception(0x18uLL);
    v17 = *((_QWORD *)this + 5);
    v18 = v17 != 0;
    v19 = v17 - 1;
    if (!v18)
      v19 = 0;
    *exception = &off_1E2913350;
    exception[1] = v19;
    *((_DWORD *)exception + 4) = 7;
  }
LABEL_27:
  minijson::detail::buffer_context_base::write(this, 0);
  v20 = (char *)*((_QWORD *)this + 7);
  if (!strcmp(v20, "true"))
  {
    v24 = 2;
    result = 1;
    v21 = 1.0;
LABEL_33:
    v23 = 1;
    v22 = 1;
    goto LABEL_34;
  }
  v21 = 0.0;
  if (!strcmp(v20, "false"))
  {
    result = 0;
    v24 = 2;
    goto LABEL_33;
  }
  if (!strcmp(v20, "null"))
  {
    result = 0;
    v23 = 0;
    v22 = 0;
    v24 = 5;
  }
  else
  {
    result = minijson::detail::parse_long((minijson::detail *)v20, (const char *)0xA);
    v21 = (double)result;
    v22 = 1;
    v23 = 1;
    v24 = 1;
  }
LABEL_34:
  *(_DWORD *)v5 = v24;
  *(_BYTE *)(v5 + 4) = v22;
  *(_BYTE *)(v5 + 5) = v23;
  *(_QWORD *)(v5 + 8) = v20;
  *(_QWORD *)(v5 + 16) = result;
  *(double *)(v5 + 24) = v21;
  *a3 = v15;
  *a4 = 0;
  return result;
}

void sub_18EEB35CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10)
{
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int *v16;
  int v17;
  void *exception;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  __cxa_begin_catch(exception_object);
  if (v10)
  {
    v12 = *(unsigned __int8 *)v10;
    if (*v10)
    {
      v13 = 1;
      do
      {
        if ((v12 & 0x80) != 0 || (*(_DWORD *)(v11 + 4 * v12 + 60) & 0x400) == 0)
        {
          v14 = v12 - 43;
          if (v14 > 0x3A || ((1 << v14) & 0x40000000400000DLL) == 0)
            goto LABEL_13;
        }
        v12 = v10[v13++];
      }
      while (v12);
      v15 = *__error();
      *__error() = 0;
      a10 = 0;
      strtod(v10, &a10);
      v16 = __error();
      v17 = *v16;
      *v16 = v15;
      if (!*a10 && v17 != 34)
      {
        __cxa_end_catch();
        JUMPOUT(0x18EEB354CLL);
      }
    }
  }
LABEL_13:
  exception = __cxa_allocate_exception(1uLL);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRef::TypeRef(applesauce::CF::TypeRef *this, char *a2)
{
  void **v3;
  CFIndex v4;
  CFStringRef v5;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v9;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v9 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v4 = v9;
  else
    v4 = (CFIndex)__p[1];
  v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(_QWORD *)this = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if ((char)v9 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_18EEB37C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = v5 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) == 0)
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a2) & 0x80) == 0)
        return v6;
      v9 = v6 + 1;
      v5 = v6[1];
    }
    while (v5);
  }
  else
  {
    v9 = a1 + 1;
  }
LABEL_9:
  v10 = (uint64_t *)v6;
  v6 = (uint64_t **)operator new(0x40uLL);
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  v11 = *(uint64_t **)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6[6] = v11;
  v6[7] = 0;
  *v6 = 0;
  v6[1] = 0;
  v6[2] = v10;
  *v9 = (uint64_t *)v6;
  v12 = (uint64_t *)**a1;
  v13 = (uint64_t *)v6;
  if (v12)
  {
    *a1 = v12;
    v13 = *v9;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v6;
}

void applesauce::CF::details::parse_array<minijson::const_buffer_context>(CFArrayRef *a1, _QWORD *a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  char v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  double v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  int64x2_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  const void *v73;
  _QWORD *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  int64x2_t v78;
  unint64_t v79;
  int64x2_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  _QWORD *v85;
  uint64_t v86;
  CFArrayRef CFArray;
  _QWORD *exception;
  int v89;
  uint64_t v90;
  std::runtime_error *v91;
  _QWORD *v92;
  uint64_t v94;
  uint64_t v95;
  int64x2_t v96;
  _QWORD v97[2];
  int v98;
  char *v99;
  uint64_t v100;
  double v101;
  unsigned __int8 v102;
  char v103;
  const void *v104;
  void *__p;
  int64x2_t v106;
  unint64_t v107;
  _QWORD *v108;

  v96 = 0uLL;
  v97[0] = 0;
  v3 = a2[1];
  if (v3 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &off_1E2913350;
    v92 = a2 + 5;
    v89 = 12;
LABEL_138:
    v90 = *v92 - 1;
    if (!*v92)
      v90 = 0;
    exception[1] = v90;
    *((_DWORD *)exception + 4) = v89;
  }
  LOBYTE(v4) = 0;
  v102 = 0;
  v5 = *(unsigned __int8 *)a2;
  if (v5 <= 2)
  {
    v6 = 8 * v5;
    v4 = 0x5B7B00u >> v6;
    v102 = 1u >> v6;
  }
  v7 = 0;
  *(_DWORD *)a2 = 0;
  v92 = a2 + 5;
  v95 = *MEMORY[0x1E0C9AE50];
  v94 = *MEMORY[0x1E0C9AE40];
  v8 = MEMORY[0x1E0C80978];
LABEL_5:
  if (v7 != 4)
  {
    v9 = v102;
    while (1)
    {
      if (a2[1] != v3)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *exception = &off_1E2913350;
        v89 = 11;
        goto LABEL_138;
      }
      if (v9)
      {
        v10 = a2[5];
        if (v10 >= a2[4])
        {
          v12 = 0;
          LOBYTE(v4) = 0;
LABEL_14:
          v13 = *(_DWORD *)(v8 + 4 * v12 + 60) & 0x4000;
          goto LABEL_15;
        }
        v11 = a2[2];
        a2[5] = v10 + 1;
        LOBYTE(v4) = *(_BYTE *)(v11 + v10);
      }
      v12 = (char)v4;
      if ((v4 & 0x80) == 0)
        goto LABEL_14;
      v13 = __maskrune((char)v4, 0x4000uLL);
LABEL_15:
      v9 = 1;
      if (!v13)
      {
        v102 = 1;
        v103 = v4;
        switch(v7)
        {
          case 0:
            if (v4 != 91)
            {
              exception = __cxa_allocate_exception(0x18uLL);
              *exception = &off_1E2913350;
              v89 = 8;
              goto LABEL_138;
            }
            v7 = 1;
            v14 = 44;
            LOBYTE(v4) = 91;
LABEL_113:
            if (!v14)
            {
              v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v91, "This line should never be reached, please file a bug report");
            }
            goto LABEL_5;
          case 1:
            if (v4 != 93)
              break;
            goto LABEL_25;
          case 2:
            break;
          case 3:
            if (v4 == 44)
            {
              v7 = 2;
LABEL_112:
              v14 = v4;
              goto LABEL_113;
            }
            if (v4 == 93)
            {
LABEL_25:
              v7 = 4;
              v14 = 44;
              LOBYTE(v4) = 93;
              goto LABEL_113;
            }
            exception = __cxa_allocate_exception(0x18uLL);
            *exception = &off_1E2913350;
            v89 = 10;
            goto LABEL_138;
          default:
            goto LABEL_111;
        }
        minijson::detail::parse_value_helper<minijson::const_buffer_context>((uint64_t)&v98, (minijson::detail::buffer_context_base *)a2, &v103, &v102);
        switch(v98)
        {
          case 0:
            v15 = v99;
            if (v96.i64[1] < v97[0])
            {
              applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v96.i64[1], v99);
              v16 = v96.i64[1] + 8;
LABEL_109:
              v96.i64[1] = v16;
LABEL_110:
              v7 = 3;
LABEL_111:
              LOBYTE(v4) = v103;
              goto LABEL_112;
            }
            v35 = (v96.i64[1] - v96.i64[0]) >> 3;
            if ((unint64_t)(v35 + 1) >> 61)
              goto LABEL_143;
            v36 = (v97[0] - v96.i64[0]) >> 2;
            if (v36 <= v35 + 1)
              v36 = v35 + 1;
            if (v97[0] - v96.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
              v37 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v37 = v36;
            v108 = v97;
            if (v37)
              v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v37);
            else
              v38 = 0;
            __p = (void *)v37;
            v106.i64[0] = v37 + 8 * v35;
            v106.i64[1] = v106.i64[0];
            v107 = v37 + 8 * v38;
            applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v106.i64[0], v15);
            v60 = v106.i64[0];
            v16 = v106.i64[1] + 8;
            v106.i64[1] += 8;
            v61 = (_QWORD *)v96.i64[1];
            v62 = (_QWORD *)v96.i64[0];
            if (v96.i64[1] == v96.i64[0])
              goto LABEL_100;
            do
            {
              v63 = *--v61;
              *(_QWORD *)(v60 - 8) = v63;
              v60 -= 8;
              *v61 = 0;
            }
            while (v61 != v62);
            goto LABEL_99;
          case 1:
            v27 = v101;
            if (v96.i64[1] < v97[0])
            {
              std::construct_at[abi:ne180100]<applesauce::CF::TypeRef,double,applesauce::CF::TypeRef*>((CFNumberRef *)v96.i64[1], v101);
              v16 = v96.i64[1] + 8;
              goto LABEL_109;
            }
            v39 = (v96.i64[1] - v96.i64[0]) >> 3;
            if ((unint64_t)(v39 + 1) >> 61)
LABEL_143:
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v40 = (v97[0] - v96.i64[0]) >> 2;
            if (v40 <= v39 + 1)
              v40 = v39 + 1;
            if (v97[0] - v96.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
              v41 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v41 = v40;
            v108 = v97;
            if (v41)
              v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v41);
            else
              v42 = 0;
            __p = (void *)v41;
            v106.i64[0] = v41 + 8 * v39;
            v106.i64[1] = v106.i64[0];
            v107 = v41 + 8 * v42;
            std::construct_at[abi:ne180100]<applesauce::CF::TypeRef,double,applesauce::CF::TypeRef*>((CFNumberRef *)v106.i64[0], v27);
            v60 = v106.i64[0];
            v16 = v106.i64[1] + 8;
            v106.i64[1] += 8;
            v61 = (_QWORD *)v96.i64[1];
            v64 = (_QWORD *)v96.i64[0];
            if (v96.i64[1] == v96.i64[0])
            {
LABEL_100:
              v66 = vdupq_n_s64((unint64_t)v61);
            }
            else
            {
              do
              {
                v65 = *--v61;
                *(_QWORD *)(v60 - 8) = v65;
                v60 -= 8;
                *v61 = 0;
              }
              while (v61 != v64);
LABEL_99:
              v66 = v96;
              v16 = v106.i64[1];
            }
            v96.i64[0] = v60;
            v96.i64[1] = v16;
            v106 = v66;
            v67 = v97[0];
            v97[0] = v107;
LABEL_108:
            v107 = v67;
            __p = (void *)v66.i64[0];
            std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer((uint64_t)&__p);
            goto LABEL_109;
          case 2:
            v24 = v100;
            v25 = (_QWORD *)v96.i64[1];
            if (v96.i64[1] < v97[0])
            {
              v26 = v95;
              if (!v100)
                v26 = v94;
              *(_QWORD *)v96.i64[1] = v26;
              v16 = (uint64_t)(v25 + 1);
              goto LABEL_109;
            }
            v29 = (_QWORD *)v96.i64[0];
            v30 = (v96.i64[1] - v96.i64[0]) >> 3;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61)
              goto LABEL_143;
            v32 = v97[0] - v96.i64[0];
            if ((v97[0] - v96.i64[0]) >> 2 > v31)
              v31 = v32 >> 2;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            v108 = v97;
            if (v33)
            {
              v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
              v25 = (_QWORD *)v96.i64[1];
              v29 = (_QWORD *)v96.i64[0];
            }
            else
            {
              v34 = 0;
            }
            v55 = (_QWORD *)(v33 + 8 * v30);
            v56 = v33 + 8 * v34;
            v107 = v56;
            v57 = v94;
            if (v24)
              v57 = v95;
            *v55 = v57;
            v58 = v55 + 1;
            v106.i64[1] = (uint64_t)(v55 + 1);
            if (v25 == v29)
              goto LABEL_106;
            do
            {
              v59 = *--v25;
              *--v55 = v59;
              *v25 = 0;
            }
            while (v25 != v29);
            goto LABEL_105;
          case 3:
            applesauce::CF::details::parse_object<minijson::const_buffer_context>(&v104, a2);
            v17 = (_QWORD *)v96.i64[1];
            if (v96.i64[1] < v97[0])
              goto LABEL_41;
            v49 = (_QWORD *)v96.i64[0];
            v50 = (v96.i64[1] - v96.i64[0]) >> 3;
            v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v52 = v97[0] - v96.i64[0];
            if ((v97[0] - v96.i64[0]) >> 2 > v51)
              v51 = v52 >> 2;
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
              v53 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v53 = v51;
            v108 = v97;
            if (v53)
            {
              v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v53);
              v17 = (_QWORD *)v96.i64[1];
              v49 = (_QWORD *)v96.i64[0];
            }
            else
            {
              v54 = 0;
            }
            v74 = (_QWORD *)(v53 + 8 * v50);
            v75 = v53 + 8 * v54;
            v107 = v75;
            *v74 = v104;
            v76 = v74 + 1;
            v104 = 0;
            v106.i64[1] = (uint64_t)(v74 + 1);
            if (v17 == v49)
            {
              v73 = 0;
            }
            else
            {
              do
              {
                v77 = *--v17;
                *--v74 = v77;
                *v17 = 0;
              }
              while (v17 != v49);
              v76 = (_QWORD *)v106.i64[1];
              v75 = v107;
              v73 = v104;
            }
            v80 = v96;
            v96.i64[0] = (uint64_t)v74;
            v106 = v80;
            v81 = v97[0];
            v97[0] = v75;
            v107 = v81;
            __p = (void *)v80.i64[0];
            std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer((uint64_t)&__p);
            v96.i64[1] = (uint64_t)v76;
            if (v73)
              goto LABEL_125;
            goto LABEL_110;
          case 4:
            applesauce::CF::details::parse_array<minijson::const_buffer_context>(&v104, a2);
            v17 = (_QWORD *)v96.i64[1];
            if (v96.i64[1] < v97[0])
            {
LABEL_41:
              *v17 = v104;
              v96.i64[1] = (uint64_t)(v17 + 1);
            }
            else
            {
              v18 = (_QWORD *)v96.i64[0];
              v19 = (v96.i64[1] - v96.i64[0]) >> 3;
              v20 = v19 + 1;
              if ((unint64_t)(v19 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v21 = v97[0] - v96.i64[0];
              if ((v97[0] - v96.i64[0]) >> 2 > v20)
                v20 = v21 >> 2;
              if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
                v22 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v22 = v20;
              v108 = v97;
              if (v22)
              {
                v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v22);
                v17 = (_QWORD *)v96.i64[1];
                v18 = (_QWORD *)v96.i64[0];
              }
              else
              {
                v23 = 0;
              }
              v69 = (_QWORD *)(v22 + 8 * v19);
              v70 = v22 + 8 * v23;
              v107 = v70;
              *v69 = v104;
              v71 = v69 + 1;
              v104 = 0;
              v106.i64[1] = (uint64_t)(v69 + 1);
              if (v17 == v18)
              {
                v73 = 0;
              }
              else
              {
                do
                {
                  v72 = *--v17;
                  *--v69 = v72;
                  *v17 = 0;
                }
                while (v17 != v18);
                v71 = (_QWORD *)v106.i64[1];
                v70 = v107;
                v73 = v104;
              }
              v78 = v96;
              v96.i64[0] = (uint64_t)v69;
              v106 = v78;
              v79 = v97[0];
              v97[0] = v70;
              v107 = v79;
              __p = (void *)v78.i64[0];
              std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer((uint64_t)&__p);
              v96.i64[1] = (uint64_t)v71;
              if (v73)
LABEL_125:
                CFRelease(v73);
            }
            goto LABEL_110;
          case 5:
            v28 = (_QWORD *)v96.i64[1];
            if (v96.i64[1] < v97[0])
            {
              *(_QWORD *)v96.i64[1] = 0;
              v16 = (uint64_t)(v28 + 1);
              goto LABEL_109;
            }
            v43 = (_QWORD *)v96.i64[0];
            v44 = (v96.i64[1] - v96.i64[0]) >> 3;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 61)
              goto LABEL_143;
            v46 = v97[0] - v96.i64[0];
            if ((v97[0] - v96.i64[0]) >> 2 > v45)
              v45 = v46 >> 2;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
              v47 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v47 = v45;
            v108 = v97;
            if (v47)
            {
              v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v47);
              v28 = (_QWORD *)v96.i64[1];
              v43 = (_QWORD *)v96.i64[0];
            }
            else
            {
              v48 = 0;
            }
            v55 = (_QWORD *)(v47 + 8 * v44);
            v56 = v47 + 8 * v48;
            v107 = v56;
            *v55 = 0;
            v58 = v55 + 1;
            v106.i64[1] = (uint64_t)(v55 + 1);
            if (v28 == v43)
            {
LABEL_106:
              v16 = (uint64_t)v58;
            }
            else
            {
              do
              {
                v68 = *--v28;
                *--v55 = v68;
                *v28 = 0;
              }
              while (v28 != v43);
LABEL_105:
              v16 = v106.i64[1];
              v56 = v107;
            }
            v66 = v96;
            v96.i64[0] = (uint64_t)v55;
            v96.i64[1] = v16;
            v106 = v66;
            v67 = v97[0];
            v97[0] = v56;
            goto LABEL_108;
          default:
            goto LABEL_110;
        }
      }
    }
  }
  v82 = a2[1];
  if (v82)
    a2[1] = v82 - 1;
  std::vector<void const*>::vector(&__p, (v96.i64[1] - v96.i64[0]) >> 3);
  v84 = (uint64_t *)v96.i64[1];
  v83 = (uint64_t *)v96.i64[0];
  if (v96.i64[0] != v96.i64[1])
  {
    v85 = __p;
    do
    {
      v86 = *v83++;
      *v85++ = v86;
    }
    while (v83 != v84);
  }
  CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((const void **)__p, v106.i64[0]);
  if (__p)
  {
    v106.i64[0] = (uint64_t)__p;
    operator delete(__p);
  }
  *a1 = CFArray;
  __p = &v96;
  std::vector<applesauce::CF::TypeRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_18EEB417C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,const void *a22,void *__p,uint64_t a24)
{
  applesauce::CF::TypeRef::~TypeRef(&a22);
  a16 = &a13;
  std::vector<applesauce::CF::TypeRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void std::vector<applesauce::CF::TypeRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  const void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v4 - 1);
        v4 -= 8;
        std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRef,0>(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRef,0>(const void *a1)
{
  if (a1)
    CFRelease(a1);
}

_QWORD *std::vector<void const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(a2);
    *a1 = v4;
    a1[2] = &v4[8 * v5];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_18EEB430C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<void const*>(const void **values, uint64_t a2)
{
  CFArrayRef result;
  std::runtime_error *exception;

  result = CFArrayCreate(0, values, (a2 - (uint64_t)values) >> 3, MEMORY[0x1E0C9B378]);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_18EEB438C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFNumberRef *std::construct_at[abi:ne180100]<applesauce::CF::TypeRef,double,applesauce::CF::TypeRef*>(CFNumberRef *a1, double a2)
{
  CFNumberRef v3;
  std::runtime_error *exception;
  double valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_18EEB4420(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  const void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(const void **)(i - 8);
    *(_QWORD *)(a1 + 16) = i - 8;
    std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRef,0>(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, _QWORD *a2)
{
  size_t v2;
  size_t v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (_QWORD *)*a1;
    v3 = v2;
  }
  v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v5 = v4;
  }
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (v3 == v5)
      return 0;
    if (v3 >= v5)
      return 1;
  }
  return 255;
}

uint64_t minijson::detail::parse_long(minijson::detail *this, const char *a2)
{
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  int *v7;
  int v8;
  void *exception;
  char *__endptr;

  if (!this)
    goto LABEL_11;
  v3 = *(char *)this;
  if (!v3)
    goto LABEL_11;
  v4 = (int)a2;
  if ((v3 & 0x80000000) != 0)
  {
    if (__maskrune(v3, 0x4000uLL))
      goto LABEL_11;
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v3 + 60) & 0x4000) != 0)
  {
    goto LABEL_11;
  }
  v5 = *__error();
  *__error() = 0;
  __endptr = 0;
  v6 = strtol((const char *)this, &__endptr, v4);
  v7 = __error();
  v8 = *v7;
  *v7 = v5;
  if (*__endptr || v8 == 34 && (unint64_t)(v6 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
  {
LABEL_11:
    exception = __cxa_allocate_exception(1uLL);
  }
  return v6;
}

_QWORD *minijson::detail::buffer_context_base::write(_QWORD *this, char a2)
{
  unint64_t v2;
  uint64_t v3;
  std::runtime_error *exception;

  v2 = this[6];
  if (v2 >= this[5])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid write call, please file a bug report");
  }
  v3 = this[3];
  this[6] = v2 + 1;
  *(_BYTE *)(v3 + v2) = a2;
  return this;
}

void sub_18EEB4654(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void minijson::parse_error::~parse_error(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x193FFE460);
}

const char *minijson::parse_error::what(minijson::parse_error *this)
{
  uint64_t v1;

  v1 = *((unsigned int *)this + 4);
  if (v1 > 0xD)
    return "";
  else
    return off_1E2919138[v1];
}

std::runtime_error *applesauce::CF::convert_error(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not convert");
}

void applesauce::CF::details::to_description_json_style_helper(uint64_t a1, CFTypeRef *a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v8;
  CFTypeID TypeID;
  const __CFBoolean *v10;
  CFTypeID v11;
  int v12;
  CFTypeID v13;
  CFTypeID v14;
  CFTypeRef v15;
  float v16;
  const __CFNumber *v17;
  CFTypeID v18;
  int Value;
  CFTypeID v20;
  unsigned __int16 v21;
  CFTypeID v22;
  std::string *v23;
  std::string::size_type size;
  int v25;
  unsigned int v26;
  std::string::size_type v27;
  std::string::size_type v28;
  CFTypeID v29;
  CFTypeID v30;
  _BYTE *v31;
  uint64_t v32;
  CFTypeID v33;
  CFTypeRef v34;
  uint64_t v35;
  std::string::size_type v36;
  std::string *p_valuePtr;
  int v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  std::string::size_type v47;
  std::string::size_type v48;
  _BYTE *v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  std::string::size_type v53;
  std::string::size_type v54;
  std::string *p_p;
  std::string::size_type v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  void *v61;
  CFTypeID v62;
  uint64_t v63;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  void *v70;
  std::string *v71;
  std::string::size_type v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  CFTypeID v77;
  CFTypeID v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned __int8 v87;
  uint64_t data_low;
  int v89;
  unsigned __int8 v90;
  uint64_t v92;
  unint64_t v93;
  std::runtime_error *exception;
  std::runtime_error *v95;
  std::string __p;
  std::string v97;
  CFTypeRef cf;
  CFTypeRef v99;
  std::string valuePtr;
  void *v101;
  uint64_t v102;
  unsigned __int8 v103;
  std::string v104;
  std::string v105;
  std::string v106;
  _BYTE v107[24];
  _BYTE *v108;
  _BYTE v109[24];
  _BYTE *v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  if (!*a2)
    goto LABEL_36;
  v8 = CFGetTypeID(*a2);
  TypeID = CFBooleanGetTypeID();
  v10 = (const __CFBoolean *)*a2;
  if (v8 == TypeID)
  {
    if (v10)
    {
      v11 = CFBooleanGetTypeID();
      if (v11 == CFGetTypeID(v10))
      {
        if (CFBooleanGetValue(v10))
        {
LABEL_6:
          *(_BYTE *)(a1 + 23) = 4;
          v12 = 1702195828;
LABEL_69:
          *(_DWORD *)a1 = v12;
          *(_BYTE *)(a1 + 4) = 0;
          return;
        }
LABEL_18:
        *(_BYTE *)(a1 + 23) = 5;
        strcpy((char *)a1, "false");
        return;
      }
      v20 = CFNumberGetTypeID();
      if (v20 == CFGetTypeID(v10))
      {
        v21 = applesauce::CF::details::number_convert_as<BOOL>(v10);
        if (v21 > 0xFFu)
        {
          if ((_BYTE)v21)
            goto LABEL_6;
          goto LABEL_18;
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::convert_error(exception);
LABEL_189:
    }
LABEL_188:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_189;
  }
  if (!v10)
    goto LABEL_37;
  v13 = CFGetTypeID(*a2);
  v14 = CFNumberGetTypeID();
  v15 = *a2;
  if (v13 != v14)
  {
    if (v15)
    {
      v22 = CFGetTypeID(v15);
      if (v22 == CFStringGetTypeID())
      {
        *((_BYTE *)&v106.__r_.__value_.__s + 23) = 1;
        LOWORD(v106.__r_.__value_.__l.__data_) = 34;
        if (!*a2)
        {
          v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v95, "Could not construct");
        }
        v23 = &v104;
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v104, (const __CFString *)*a2);
        memset(&v105, 0, sizeof(v105));
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        {
          size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        }
        else
        {
          size = v104.__r_.__value_.__l.__size_;
          v23 = (std::string *)v104.__r_.__value_.__r.__words[0];
        }
        if (size)
        {
          do
          {
            v25 = v23->__r_.__value_.__s.__data_[0];
            if (v25 == 92 || v25 == 34)
            {
              std::string::push_back(&v105, 92);
              LOBYTE(v25) = v23->__r_.__value_.__s.__data_[0];
            }
            std::string::push_back(&v105, v25);
            v23 = (std::string *)((char *)v23 + 1);
            --size;
          }
          while (size);
          v26 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
          v27 = v105.__r_.__value_.__l.__size_;
          v28 = v105.__r_.__value_.__r.__words[0];
        }
        else
        {
          v27 = 0;
          v28 = 0;
          v26 = 0;
        }
        if ((v26 & 0x80u) == 0)
          v71 = &v105;
        else
          v71 = (std::string *)v28;
        if ((v26 & 0x80u) == 0)
          v72 = v26;
        else
          v72 = v27;
        v73 = std::string::append(&v106, (const std::string::value_type *)v71, v72);
        v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        valuePtr.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        v75 = std::string::append(&valuePtr, "\"", 1uLL);
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)&v75->__r_.__value_.__l + 2);
        *(_OWORD *)a1 = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
          operator delete(valuePtr.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v70 = (void *)v106.__r_.__value_.__r.__words[0];
        goto LABEL_120;
      }
      if (*a2)
      {
        v29 = CFGetTypeID(*a2);
        v30 = CFArrayGetTypeID();
        v10 = (const __CFBoolean *)*a2;
        if (v29 == v30)
        {
          std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v109, a4);
          applesauce::CF::details::to_description_json_style_array((std::string *)a1, v10, a3, (uint64_t)v109);
          v31 = v110;
          if (v110 == v109)
          {
            v32 = 4;
            v31 = v109;
            goto LABEL_141;
          }
LABEL_139:
          if (!v31)
            return;
          v32 = 5;
LABEL_141:
          (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
          return;
        }
        if (v10)
        {
          v77 = CFGetTypeID(*a2);
          v78 = CFDictionaryGetTypeID();
          v10 = (const __CFBoolean *)*a2;
          if (v77 == v78)
          {
            std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v107, a4);
            applesauce::CF::details::to_description_json_style_object(a1, v10, a3, (uint64_t)v107);
            v31 = v108;
            if (v108 == v107)
            {
              v32 = 4;
              v31 = v107;
              goto LABEL_141;
            }
            goto LABEL_139;
          }
        }
LABEL_37:
        v33 = CFGetTypeID(v10);
        if (v33 == CFNullGetTypeID() || (v34 = *a2) == 0)
        {
          *(_BYTE *)(a1 + 23) = 4;
          v12 = 1819047278;
          goto LABEL_69;
        }
        if (!*(_QWORD *)(a4 + 24))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Error, not a json style CFDictionary");
          goto LABEL_189;
        }
        v99 = 0;
        CFRetain(v34);
        v35 = *(_QWORD *)(a4 + 24);
        cf = v34;
        if (!v35)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(std::string *__return_ptr, uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)v35 + 48))(&valuePtr, v35, &v99, &cf);
        if (cf)
          CFRelease(cf);
        if (v99)
          CFRelease(v99);
        if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
        else
          v36 = valuePtr.__r_.__value_.__l.__size_;
        if (v36)
        {
          memset(&v97, 0, sizeof(v97));
          if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_valuePtr = &valuePtr;
          else
            p_valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
          do
          {
            v38 = p_valuePtr->__r_.__value_.__s.__data_[0];
            if (v38 == 92 || v38 == 34)
            {
              std::string::push_back(&v97, 92);
              LOBYTE(v38) = p_valuePtr->__r_.__value_.__s.__data_[0];
            }
            std::string::push_back(&v97, v38);
            p_valuePtr = (std::string *)((char *)p_valuePtr + 1);
            --v36;
          }
          while (v36);
          v39 = std::string::insert(&v97, 0, "{ \"", 3uLL);
          v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v104.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          v41 = std::string::append(&v104, "\" : \"", 5uLL);
          v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v105.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          memset(&__p, 0, sizeof(__p));
          if ((v103 & 0x80u) == 0)
            v43 = &v101;
          else
            v43 = v101;
          if ((v103 & 0x80u) == 0)
            v44 = v103;
          else
            v44 = v102;
          if (v44)
          {
            do
            {
              v45 = *v43;
              if (v45 == 92 || v45 == 34)
              {
                std::string::push_back(&__p, 92);
                LOBYTE(v45) = *v43;
              }
              std::string::push_back(&__p, v45);
              ++v43;
              --v44;
            }
            while (v44);
            v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            v47 = __p.__r_.__value_.__l.__size_;
            v48 = __p.__r_.__value_.__r.__words[0];
          }
          else
          {
            v47 = 0;
            v48 = 0;
            v46 = 0;
          }
          if ((v46 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)v48;
          if ((v46 & 0x80u) == 0)
            v56 = v46;
          else
            v56 = v47;
          v57 = std::string::append(&v105, (const std::string::value_type *)p_p, v56);
          v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          v106.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          v59 = std::string::append(&v106, "\" }", 3uLL);
          v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          *(_QWORD *)(a1 + 16) = *((_QWORD *)&v59->__r_.__value_.__l + 2);
          *(_OWORD *)a1 = v60;
          v59->__r_.__value_.__l.__size_ = 0;
          v59->__r_.__value_.__r.__words[2] = 0;
          v59->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v106.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v105.__r_.__value_.__l.__data_);
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v104.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_116;
          v61 = (void *)v97.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&v105.__r_.__value_.__s + 23) = 1;
          LOWORD(v105.__r_.__value_.__l.__data_) = 34;
          memset(&v104, 0, sizeof(v104));
          if ((v103 & 0x80u) == 0)
            v49 = &v101;
          else
            v49 = v101;
          if ((v103 & 0x80u) == 0)
            v50 = v103;
          else
            v50 = v102;
          if (v50)
          {
            do
            {
              v51 = *v49;
              if (v51 == 92 || v51 == 34)
              {
                std::string::push_back(&v104, 92);
                LOBYTE(v51) = *v49;
              }
              std::string::push_back(&v104, v51);
              ++v49;
              --v50;
            }
            while (v50);
            v52 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
            v53 = v104.__r_.__value_.__l.__size_;
            v54 = v104.__r_.__value_.__r.__words[0];
          }
          else
          {
            v53 = 0;
            v54 = 0;
            v52 = 0;
          }
          if ((v52 & 0x80u) == 0)
            v64 = &v104;
          else
            v64 = (std::string *)v54;
          if ((v52 & 0x80u) == 0)
            v65 = v52;
          else
            v65 = v53;
          v66 = std::string::append(&v105, (const std::string::value_type *)v64, v65);
          v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
          v106.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v67;
          v66->__r_.__value_.__l.__size_ = 0;
          v66->__r_.__value_.__r.__words[2] = 0;
          v66->__r_.__value_.__r.__words[0] = 0;
          v68 = std::string::append(&v106, "\"", 1uLL);
          v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
          *(_QWORD *)(a1 + 16) = *((_QWORD *)&v68->__r_.__value_.__l + 2);
          *(_OWORD *)a1 = v69;
          v68->__r_.__value_.__l.__size_ = 0;
          v68->__r_.__value_.__r.__words[2] = 0;
          v68->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v106.__r_.__value_.__l.__data_);
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v104.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_116;
          v61 = (void *)v105.__r_.__value_.__r.__words[0];
        }
        operator delete(v61);
LABEL_116:
        if ((char)v103 < 0)
          operator delete(v101);
        if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v70 = (void *)valuePtr.__r_.__value_.__r.__words[0];
LABEL_120:
        operator delete(v70);
        return;
      }
    }
LABEL_36:
    v10 = 0;
    goto LABEL_37;
  }
  if (!v15)
    goto LABEL_188;
  v16 = applesauce::CF::convert_to<float,0>((uint64_t)v15);
  if (vabds_f32(floorf(v16), v16) >= 0.00000011921)
  {
    std::to_string((std::string *)a1, v16);
    return;
  }
  v17 = (const __CFNumber *)*a2;
  if (!*a2)
    goto LABEL_188;
  v18 = CFNumberGetTypeID();
  if (v18 == CFGetTypeID(v17))
  {
    switch(CFNumberGetType(v17))
    {
      case kCFNumberSInt8Type:
        valuePtr.__r_.__value_.__s.__data_[0] = 0;
        Value = CFNumberGetValue(v17, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_158;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        v85 = CFNumberGetValue(v17, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_153;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        v84 = CFNumberGetValue(v17, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_177;
      case kCFNumberSInt64Type:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        v79 = CFNumberGetValue(v17, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_170;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        v80 = CFNumberGetValue(v17, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_145;
      case kCFNumberFloat64Type:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        v83 = CFNumberGetValue(v17, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_155;
      case kCFNumberCharType:
        valuePtr.__r_.__value_.__s.__data_[0] = 0;
        Value = CFNumberGetValue(v17, kCFNumberCharType, &valuePtr);
LABEL_158:
        v89 = Value;
        if (Value)
          v90 = valuePtr.__r_.__value_.__s.__data_[0];
        else
          v90 = 0;
        if (valuePtr.__r_.__value_.__s.__data_[0] >= 0 || Value == 0)
          v92 = 0;
        else
          v92 = -256;
        if (!v89)
          goto LABEL_182;
        v63 = v92 & 0xFFFFFFFFFFFFFF00 | v90;
        goto LABEL_175;
      case kCFNumberShortType:
        LOWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        v85 = CFNumberGetValue(v17, kCFNumberShortType, &valuePtr);
LABEL_153:
        v86 = v85;
        v87 = valuePtr.__r_.__value_.__s.__data_[0];
        data_low = SLOWORD(valuePtr.__r_.__value_.__l.__data_);
        goto LABEL_178;
      case kCFNumberIntType:
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        v84 = CFNumberGetValue(v17, kCFNumberIntType, &valuePtr);
LABEL_177:
        v86 = v84;
        v87 = valuePtr.__r_.__value_.__s.__data_[0];
        data_low = SLODWORD(valuePtr.__r_.__value_.__l.__data_);
LABEL_178:
        v93 = data_low & 0xFFFFFFFFFFFFFF00 | v87;
        if (v86)
          v63 = v93;
        else
          v63 = 0;
        if (!v86)
          goto LABEL_182;
        goto LABEL_175;
      case kCFNumberLongType:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        v79 = CFNumberGetValue(v17, kCFNumberLongType, &valuePtr);
        goto LABEL_170;
      case kCFNumberLongLongType:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        v79 = CFNumberGetValue(v17, kCFNumberLongLongType, &valuePtr);
        goto LABEL_170;
      case kCFNumberFloatType:
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        v80 = CFNumberGetValue(v17, kCFNumberFloatType, &valuePtr);
LABEL_145:
        v81 = v80;
        v82 = (uint64_t)*(float *)&valuePtr.__r_.__value_.__l.__data_;
        goto LABEL_171;
      case kCFNumberDoubleType:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        v83 = CFNumberGetValue(v17, kCFNumberDoubleType, &valuePtr);
        goto LABEL_155;
      case kCFNumberCFIndexType:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        v79 = CFNumberGetValue(v17, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_170;
      case kCFNumberNSIntegerType:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        v79 = CFNumberGetValue(v17, kCFNumberNSIntegerType, &valuePtr);
LABEL_170:
        v81 = v79;
        v82 = valuePtr.__r_.__value_.__r.__words[0];
        goto LABEL_171;
      case kCFNumberCGFloatType:
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        v83 = CFNumberGetValue(v17, kCFNumberCGFloatType, &valuePtr);
LABEL_155:
        v81 = v83;
        v82 = (uint64_t)*(double *)&valuePtr.__r_.__value_.__l.__data_;
LABEL_171:
        if (v81)
          v63 = v82;
        else
          v63 = 0;
        if (v81)
          goto LABEL_175;
        goto LABEL_182;
      default:
        goto LABEL_182;
    }
  }
  v62 = CFBooleanGetTypeID();
  if (v62 != CFGetTypeID(v17))
  {
LABEL_182:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    goto LABEL_189;
  }
  v63 = CFBooleanGetValue(v17);
LABEL_175:
  std::to_string((std::string *)a1, v63);
}

void sub_18EEB51C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v50;
  uint64_t v51;

  v50 = *(_QWORD **)(v48 - 112);
  if (v50 == v47)
  {
    v51 = 4;
    v50 = (_QWORD *)(v48 - 136);
  }
  else
  {
    if (!v50)
      goto LABEL_6;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

float applesauce::CF::convert_to<float,0>(uint64_t a1)
{
  unint64_t v1;
  std::runtime_error *exception;

  v1 = applesauce::CF::convert_as<float,0>(a1);
  if (!HIDWORD(v1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  return *(float *)&v1;
}

void sub_18EEB5420(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *applesauce::CF::details::to_description_json_style_array(std::string *this, CFArrayRef theArray, uint64_t a3, uint64_t a4)
{
  CFIndex Count;
  CFIndex v9;
  unint64_t v10;
  uint64_t v11;
  CFIndex v12;
  char v13;
  const void *ValueAtIndex;
  const void *v15;
  void **v16;
  std::string::size_type v17;
  _QWORD *v18;
  uint64_t v19;
  std::runtime_error *exception;
  const void *v23;
  void *__p[2];
  unsigned __int8 v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)&this->__r_.__value_.__s + 23) = 1;
  LOWORD(this->__r_.__value_.__l.__data_) = 91;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v9 = CFArrayGetCount(theArray);
    if (Count)
    {
      if (v9)
      {
        v10 = 0;
        v11 = a3 + 2;
        v12 = v9 - 1;
        v13 = 1;
        while (1)
        {
          if ((v13 & 1) == 0)
          {
            std::string::append(this, ",", 1uLL);
            std::string::append(this, " ", 1uLL);
          }
          if (CFArrayGetCount(theArray) <= v10
            || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10), (v15 = ValueAtIndex) == 0))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not find item");
          }
          CFRetain(ValueAtIndex);
          v23 = v15;
          std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v26, a4);
          applesauce::CF::details::to_description_json_style_helper(__p, &v23, v11, v26);
          if ((v25 & 0x80u) == 0)
            v16 = __p;
          else
            v16 = (void **)__p[0];
          if ((v25 & 0x80u) == 0)
            v17 = v25;
          else
            v17 = (std::string::size_type)__p[1];
          std::string::append(this, (const std::string::value_type *)v16, v17);
          if ((char)v25 < 0)
            operator delete(__p[0]);
          v18 = v27;
          if (v27 == v26)
          {
            v18 = v26;
            v19 = 4;
          }
          else
          {
            if (!v27)
              goto LABEL_22;
            v19 = 5;
          }
          (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_22:
          CFRelease(v15);
          if (Count - 1 != v10)
          {
            v13 = 0;
            if (v12 != v10++)
              continue;
          }
          return std::string::append(this, "]", 1uLL);
        }
      }
    }
  }
  return std::string::append(this, "]", 1uLL);
}

void sub_18EEB5644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void applesauce::CF::details::to_description_json_style_object(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  CFTypeID v11;
  _BOOL4 v12;
  const void *v13;
  std::string *p_p;
  std::string::size_type size;
  int v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  CFTypeRef *v21;
  std::string::size_type v22;
  CFTypeRef *v23;
  std::string::size_type v24;
  _QWORD *v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  char *v29;
  CFTypeRef *v30;
  int v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  unint64_t v37;
  int v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::string::size_type v49;
  std::runtime_error *v50;
  std::runtime_error *exception;
  std::runtime_error *v52;
  std::string v53;
  std::string v54;
  std::string v55;
  CFTypeRef v56;
  CFTypeRef v57;
  CFTypeRef cf[2];
  int64_t v59;
  void *v60[2];
  unsigned __int8 v61;
  std::string __p;
  std::string v63;
  std::string v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  _BYTE *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  void *v75;
  void *v76;
  _BYTE v77[24];
  _BYTE *v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v7 = 1;
  *(_BYTE *)(a1 + 23) = 1;
  *(_WORD *)a1 = 123;
  v8 = a3 + 2;
  applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator((uint64_t)&v71, a2);
  applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator((uint64_t)&v65, a2);
  v66 = (v68 - (_BYTE *)v67) >> 3;
  while (1)
  {
    if (v71 && v72 != (v74 - v73) >> 3)
    {
      v9 = v65;
      goto LABEL_8;
    }
    v9 = v65;
    if (!v65 || v66 == (v68 - (_BYTE *)v67) >> 3)
      break;
LABEL_8:
    if (v71 == v9 && v72 == v66)
      break;
    if ((v7 & 1) == 0)
    {
      std::string::append((std::string *)a1, ",", 1uLL);
      std::string::append((std::string *)a1, " ", 1uLL);
    }
    applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(cf, &v71);
    v10 = cf[0];
    v12 = 0;
    if (cf[0])
    {
      v11 = CFGetTypeID(cf[0]);
      if (v11 == CFStringGetTypeID())
        v12 = 1;
    }
    if (cf[1])
      CFRelease(cf[1]);
    if (v10)
      CFRelease(v10);
    if (v12)
    {
      applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(&v55, &v71);
      v13 = (const void *)v55.__r_.__value_.__r.__words[0];
      if (!v55.__r_.__value_.__r.__words[0])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)v55.__r_.__value_.__l.__data_);
      memset(&v63, 0, sizeof(v63));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      for (; size; --size)
      {
        v16 = p_p->__r_.__value_.__s.__data_[0];
        if (v16 == 92 || v16 == 34)
        {
          std::string::push_back(&v63, 92);
          LOBYTE(v16) = p_p->__r_.__value_.__s.__data_[0];
        }
        std::string::push_back(&v63, v16);
        p_p = (std::string *)((char *)p_p + 1);
      }
      v17 = std::string::insert(&v63, 0, "\"", 1uLL);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v64, "\" : ", 4uLL);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v59 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)cf = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (v59 >= 0)
        v21 = cf;
      else
        v21 = (CFTypeRef *)cf[0];
      if (v59 >= 0)
        v22 = HIBYTE(v59);
      else
        v22 = (std::string::size_type)cf[1];
      std::string::append((std::string *)a1, (const std::string::value_type *)v21, v22);
      if (SHIBYTE(v59) < 0)
        operator delete((void *)cf[0]);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v55.__r_.__value_.__l.__size_)
        CFRelease((CFTypeRef)v55.__r_.__value_.__l.__size_);
      CFRelease(v13);
      applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(&v64, &v71);
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v77, a4);
      applesauce::CF::details::to_description_json_style_helper(cf, &v64.__r_.__value_.__r.__words[1], v8, v77);
      if (v59 >= 0)
        v23 = cf;
      else
        v23 = (CFTypeRef *)cf[0];
      if (v59 >= 0)
        v24 = HIBYTE(v59);
      else
        v24 = (std::string::size_type)cf[1];
      std::string::append((std::string *)a1, (const std::string::value_type *)v23, v24);
      if (SHIBYTE(v59) < 0)
        operator delete((void *)cf[0]);
      v25 = v78;
      if (v78 == v77)
      {
        v25 = v77;
        v26 = 4;
LABEL_96:
        (*(void (**)(void))(*v25 + 8 * v26))();
      }
      else if (v78)
      {
        v26 = 5;
        goto LABEL_96;
      }
      if (v64.__r_.__value_.__l.__size_)
        CFRelease((CFTypeRef)v64.__r_.__value_.__l.__size_);
      if (v64.__r_.__value_.__r.__words[0])
        CFRelease(v64.__r_.__value_.__l.__data_);
      goto LABEL_130;
    }
    if (!*(_QWORD *)(a4 + 24))
    {
      v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v50, "Error, not a json style CFDictionary");
    }
    applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(&v64, &v71);
    v27 = (const void *)v64.__r_.__value_.__r.__words[0];
    if (v64.__r_.__value_.__r.__words[0])
      CFRetain(v64.__r_.__value_.__l.__data_);
    v56 = 0;
    v57 = v27;
    v28 = *(_QWORD *)(a4 + 24);
    if (!v28)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)v28 + 48))(cf, v28, &v57, &v56);
    if (v56)
      CFRelease(v56);
    if (v57)
      CFRelease(v57);
    if (v64.__r_.__value_.__l.__size_)
      CFRelease((CFTypeRef)v64.__r_.__value_.__l.__size_);
    if (v27)
      CFRelease(v27);
    if (v59 >= 0)
      v29 = (char *)HIBYTE(v59);
    else
      v29 = (char *)cf[1];
    if (!v29)
    {
      v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v52, "Error, not a json style CFDictionary");
    }
    memset(&v54, 0, sizeof(v54));
    if (v59 >= 0)
      v30 = cf;
    else
      v30 = (CFTypeRef *)cf[0];
    do
    {
      v31 = *(unsigned __int8 *)v30;
      if (v31 == 92 || v31 == 34)
      {
        std::string::push_back(&v54, 92);
        LOBYTE(v31) = *(_BYTE *)v30;
      }
      std::string::push_back(&v54, v31);
      v30 = (CFTypeRef *)((char *)v30 + 1);
      --v29;
    }
    while (v29);
    v32 = std::string::insert(&v54, 0, "\"", 1uLL);
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v55, "\" : \"", 5uLL);
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    memset(&v53, 0, sizeof(v53));
    if ((v61 & 0x80u) == 0)
      v36 = v60;
    else
      v36 = (void **)v60[0];
    if ((v61 & 0x80u) == 0)
      v37 = v61;
    else
      v37 = (unint64_t)v60[1];
    if (v37)
    {
      do
      {
        v38 = *(unsigned __int8 *)v36;
        if (v38 == 92 || v38 == 34)
        {
          std::string::push_back(&v53, 92);
          LOBYTE(v38) = *(_BYTE *)v36;
        }
        std::string::push_back(&v53, v38);
        v36 = (void **)((char *)v36 + 1);
        --v37;
      }
      while (v37);
      v39 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      v40 = v53.__r_.__value_.__l.__size_;
      v41 = v53.__r_.__value_.__r.__words[0];
    }
    else
    {
      v40 = 0;
      v41 = 0;
      v39 = 0;
    }
    if ((v39 & 0x80u) == 0)
      v42 = &v53;
    else
      v42 = (std::string *)v41;
    if ((v39 & 0x80u) == 0)
      v43 = v39;
    else
      v43 = v40;
    v44 = std::string::append(&__p, (const std::string::value_type *)v42, v43);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = std::string::append(&v63, "\"", 1uLL);
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v64;
    else
      v48 = (std::string *)v64.__r_.__value_.__r.__words[0];
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
    else
      v49 = v64.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a1, (const std::string::value_type *)v48, v49);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if ((char)v61 < 0)
      operator delete(v60[0]);
    if (SHIBYTE(v59) < 0)
      operator delete((void *)cf[0]);
LABEL_130:
    v7 = 0;
    ++v72;
  }
  std::string::append((std::string *)a1, "}", 1uLL);
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
}

void sub_18EEB5E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  uint64_t v64;

  std::pair<std::string,std::string>::~pair((uint64_t)&a33);
  applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::~DictionaryRef_iterator(&a63);
  applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::~DictionaryRef_iterator((_QWORD *)(v64 - 192));
  if (*(char *)(v63 + 23) < 0)
    operator delete(*(void **)v63);
  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, std::string *a2, char *__s)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, char *__s, std::string *a3)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::insert(a3, 0, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x193FFE460);
}

uint64_t applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator(uint64_t a1, CFDictionaryRef theDict)
{
  char **v3;
  CFIndex Count;

  *(_QWORD *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  v3 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if (theDict)
  {
    Count = CFDictionaryGetCount(theDict);
    std::vector<void const*>::resize((char **)(a1 + 16), Count);
    std::vector<void const*>::resize(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }
  return a1;
}

void applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  const void *v6;
  uint64_t v7;
  const void *v8;
  std::logic_error *exception;

  v2 = a2[1];
  if ((v2 & 0x8000000000000000) != 0 || (v4 = a2[2], v2 >= (a2[3] - v4) >> 3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "DictionaryRef_iterator iterator out of range.");
  }
  v6 = *(const void **)(v4 + 8 * v2);
  if (v6)
  {
    CFRetain(*(CFTypeRef *)(v4 + 8 * v2));
    v2 = a2[1];
  }
  v7 = a2[5];
  v8 = *(const void **)(v7 + 8 * v2);
  if (v8)
    CFRetain(*(CFTypeRef *)(v7 + 8 * v2));
  if (v6)
    CFRetain(v6);
  *a1 = v6;
  if (v8)
  {
    CFRetain(v8);
    a1[1] = v8;
    CFRelease(v8);
    if (!v6)
      return;
  }
  else
  {
    a1[1] = 0;
    if (!v6)
      return;
  }
  CFRelease(v6);
}

void sub_18EEB6350(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::iterator_proxy::~iterator_proxy(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  return a1;
}

_QWORD *applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::~DictionaryRef_iterator(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<void const*>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_17:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v10);
  v12 = &v11[8 * v5];
  v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  v15 = &v12[8 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      *((_QWORD *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

std::runtime_error *applesauce::CF::not_found(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not find item");
}

uint64_t applesauce::CF::convert_as<float,0>(uint64_t result)
{
  const __CFNumber *v1;
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  float v9;
  uint64_t v10;
  double valuePtr;

  if (result)
  {
    v1 = (const __CFNumber *)result;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          Value = CFNumberGetValue(v1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_15;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          Value = CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_17;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          Value = CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_20;
        case kCFNumberSInt64Type:
          valuePtr = 0.0;
          Value = CFNumberGetValue(v1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_28;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          Value = CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_24;
        case kCFNumberFloat64Type:
          valuePtr = 0.0;
          Value = CFNumberGetValue(v1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_30;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          Value = CFNumberGetValue(v1, kCFNumberCharType, &valuePtr);
LABEL_15:
          v8 = SLOBYTE(valuePtr);
          goto LABEL_18;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          Value = CFNumberGetValue(v1, kCFNumberShortType, &valuePtr);
LABEL_17:
          v8 = SLOWORD(valuePtr);
LABEL_18:
          v9 = (float)v8;
          goto LABEL_31;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          Value = CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
LABEL_20:
          v9 = (float)SLODWORD(valuePtr);
          goto LABEL_31;
        case kCFNumberLongType:
          valuePtr = 0.0;
          Value = CFNumberGetValue(v1, kCFNumberLongType, &valuePtr);
          goto LABEL_28;
        case kCFNumberLongLongType:
          valuePtr = 0.0;
          Value = CFNumberGetValue(v1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_28;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          Value = CFNumberGetValue(v1, kCFNumberFloatType, &valuePtr);
LABEL_24:
          v10 = LODWORD(valuePtr);
          goto LABEL_32;
        case kCFNumberDoubleType:
          valuePtr = 0.0;
          Value = CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_30;
        case kCFNumberCFIndexType:
          valuePtr = 0.0;
          Value = CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_28;
        case kCFNumberNSIntegerType:
          valuePtr = 0.0;
          Value = CFNumberGetValue(v1, kCFNumberNSIntegerType, &valuePtr);
LABEL_28:
          v9 = (float)*(uint64_t *)&valuePtr;
          goto LABEL_31;
        case kCFNumberCGFloatType:
          valuePtr = 0.0;
          Value = CFNumberGetValue(v1, kCFNumberCGFloatType, &valuePtr);
LABEL_30:
          v9 = valuePtr;
LABEL_31:
          v10 = LODWORD(v9);
LABEL_32:
          v7 = v10 | 0x100000000;
          if (!Value)
            v7 = 0;
          v5 = v7 & 0xFFFFFF00;
          v6 = v7 & 0x100000000;
          break;
        default:
          v5 = 0;
          v6 = 0;
          LOBYTE(v7) = 0;
          break;
      }
      return v6 | v5 & 0xFFFFFF00 | v7;
    }
    else
    {
      v4 = CFBooleanGetTypeID();
      if (v4 == CFGetTypeID(v1))
        return COERCE_UNSIGNED_INT((float)CFBooleanGetValue(v1)) | 0x100000000;
      else
        return 0;
    }
  }
  return result;
}

uint64_t applesauce::CF::details::number_convert_as<BOOL>(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  int v4;
  const __CFNumber *v5;
  CFNumberType v6;
  const __CFNumber *v7;
  CFNumberType v8;
  const __CFNumber *v9;
  CFNumberType v10;
  const __CFNumber *v11;
  CFNumberType v12;
  const __CFNumber *v13;
  CFNumberType v14;
  int Value;
  BOOL v16;
  int v17;
  BOOL v18;
  BOOL v19;
  int v20;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v5 = a1;
      v6 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberSInt64Type;
      goto LABEL_25;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloat32Type;
      goto LABEL_21;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberFloat64Type;
      goto LABEL_29;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      v16 = Value == 0;
      v17 = LOBYTE(valuePtr);
      goto LABEL_15;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v5 = a1;
      v6 = kCFNumberShortType;
LABEL_12:
      Value = CFNumberGetValue(v5, v6, &valuePtr);
      v16 = Value == 0;
      v17 = LOWORD(valuePtr);
      goto LABEL_15;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberIntType;
LABEL_14:
      Value = CFNumberGetValue(v7, v8, &valuePtr);
      v16 = Value == 0;
      v17 = LODWORD(valuePtr);
LABEL_15:
      v18 = v16 || v17 == 0;
      goto LABEL_33;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongType;
      goto LABEL_25;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongLongType;
      goto LABEL_25;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloatType;
LABEL_21:
      Value = CFNumberGetValue(v11, v12, &valuePtr);
      v19 = *(float *)&valuePtr == 0.0;
      goto LABEL_30;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberDoubleType;
      goto LABEL_29;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberCFIndexType;
      goto LABEL_25;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberNSIntegerType;
LABEL_25:
      Value = CFNumberGetValue(v9, v10, &valuePtr);
      if (Value)
        v18 = *(_QWORD *)&valuePtr == 0;
      else
        v18 = 1;
      goto LABEL_33;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberCGFloatType;
LABEL_29:
      Value = CFNumberGetValue(v13, v14, &valuePtr);
      v19 = valuePtr == 0.0;
LABEL_30:
      v18 = v19 || Value == 0;
LABEL_33:
      v4 = !v18;
      if (!Value)
        goto LABEL_38;
      v20 = 256;
      break;
    default:
      v4 = 0;
LABEL_38:
      v20 = 0;
      break;
  }
  return v20 | v4;
}

void std::__function::__func<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0,std::allocator<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0>,std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0,std::allocator<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0>,std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E28FFDE0;
  return result;
}

void std::__function::__func<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0,std::allocator<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0>,std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E28FFDE0;
}

void std::__function::__func<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0,std::allocator<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0>,std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::operator()(const void **a1@<X1>, const void **a2@<X2>, std::string *a3@<X8>)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  CFTypeID v7;
  std::runtime_error *exception;
  std::string v9;

  v4 = *a1;
  *a1 = 0;
  v5 = *a2;
  *a2 = 0;
  if (!v4)
  {
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Error, neither key nor value is valid in JSON handler function");
    }
    v7 = CFGetTypeID(v5);
    std::to_string(&v9, v7);
    std::string::basic_string[abi:ne180100]<0>(a3, "Unsupported CoreFoundation type");
    a3[1] = v9;
LABEL_6:
    CFRelease(v5);
    if (!v4)
      return;
    goto LABEL_7;
  }
  v6 = CFGetTypeID(v4);
  std::to_string(&v9, v6);
  std::string::basic_string[abi:ne180100]<0>(a3, "bad key");
  a3[1] = v9;
  if (v5)
    goto LABEL_6;
LABEL_7:
  CFRelease(v4);
}

void sub_18EEB6AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_18EEB6C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x193FFE3A0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x193FFE3A0](a1 + 128);
  return a1;
}

uint64_t VorbisComment::GetWAVEChannelMask(VorbisComment *this, VorbisComment *a2, _DWORD *a3)
{
  uint64_t v3;
  VorbisComment *v6;
  const __CFString *v7;
  const __CFString *v8;
  void **v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  int v20;
  CFRange v21;

  v3 = 2003334207;
  if (this != a2)
  {
    v6 = this;
    while (1)
    {
      v7 = *(const __CFString **)v6;
      v21.length = CFStringGetLength(*(CFStringRef *)v6);
      v21.location = 0;
      if (CFStringCompareWithOptions(v7, CFSTR("WAVEFORMATEXTENSIBLE_CHANNEL_MASK"), v21, 1uLL) == kCFCompareEqualTo)
        break;
      v6 = (VorbisComment *)((char *)v6 + 16);
      if (v6 == a2)
        return v3;
    }
    v8 = (const __CFString *)*((_QWORD *)v6 + 1);
    v20 = 0;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
    *(_DWORD *)((char *)&v17[1] + *(_QWORD *)(v17[0] - 24)) = *(_DWORD *)((_BYTE *)&v17[1] + *(_QWORD *)(v17[0] - 24)) & 0xFFFFFFB5 | 8;
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v8);
    if ((v15 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v10 = v15;
    else
      v10 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v9, v10);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    MEMORY[0x193FFE130](v16, &v20);
    v11 = v20;
    v16[0] = *MEMORY[0x1E0DE4F50];
    v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v17[0] = v12;
    v17[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v18 < 0)
      operator delete((void *)v17[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x193FFE3A0](&v19);
    v3 = 0;
    *a3 = v11;
  }
  return v3;
}

void sub_18EEB6E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v36;

  a16 = *MEMORY[0x1E0DE4F50];
  v36 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(uint64_t *)((char *)&a16 + *(_QWORD *)(a16 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  a18 = v36;
  a19 = MEMORY[0x1E0DE4FB8] + 16;
  if (a32 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x193FFE3A0](&a35);
  _Unwind_Resume(a1);
}

uint64_t VorbisComment::SetWAVEChannelMask(const void **this)
{
  void **v2;
  std::string::size_type v3;
  std::string *v4;
  __int128 v5;
  void **v6;
  CFIndex v7;
  CFStringRef v8;
  uint64_t v9;
  std::runtime_error *exception;
  std::string __dst;
  void *__p[2];
  int64_t v14;
  CFStringRef v15;
  CFTypeRef cf;
  void *v17[2];
  unsigned __int8 v18;
  _QWORD v19[2];
  uint64_t v20;
  _QWORD v21[10];
  char v22;
  uint64_t v23;

  if (!*this && this[2] == this[1])
    VorbisComment::SetVendorString(this, CFSTR("Apple"));
  VorbisComment::RemoveUserCommentsWithFieldName((VorbisComment *)this, CFSTR("WAVEFORMATEXTENSIBLE_CHANNEL_MASK"));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  *(_DWORD *)((char *)v21 + *(_QWORD *)(v20 - 24)) = *(_DWORD *)((_BYTE *)v21 + *(_QWORD *)(v20 - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::string::basic_string[abi:ne180100]<0>(v17, "0x");
  CFRetain(CFSTR("WAVEFORMATEXTENSIBLE_CHANNEL_MASK"));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, CFSTR("WAVEFORMATEXTENSIBLE_CHANNEL_MASK"));
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&__dst, (uint64_t)v21);
  if ((v18 & 0x80u) == 0)
    v2 = v17;
  else
    v2 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v3 = v18;
  else
    v3 = (std::string::size_type)v17[1];
  v4 = std::string::insert(&__dst, 0, (const std::string::value_type *)v2, v3);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v14 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v14 >= 0)
    v7 = HIBYTE(v14);
  else
    v7 = (CFIndex)__p[1];
  v8 = CFStringCreateWithBytes(0, (const UInt8 *)v6, v7, 0x8000100u, 0);
  v15 = v8;
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  VorbisComment::AddUserComment(this, cf, (const void **)&v15);
  CFRelease(v8);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (cf)
    CFRelease(cf);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  v19[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v20 = v9;
  v21[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x193FFE3A0](&v23);
}

void sub_18EEB712C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,int a24,const void *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  applesauce::CF::StringRef::~StringRef(&a25);
  if (a31 < 0)
    operator delete(a26);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void DSPGraph::VolumeCurveBox::~VolumeCurveBox(DSPGraph::VolumeCurveBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::VolumeCurveBox::ClassName(DSPGraph::VolumeCurveBox *this)
{
  return "VolumeCurveBox";
}

uint64_t DSPGraph::Box::canBypass(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::isBypassed(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::VolumeCurveBox::canProcessInPlace(DSPGraph::VolumeCurveBox *this)
{
  return 1;
}

uint64_t DSPGraph::Box::selfLatencyInTicks(DSPGraph::Box *this)
{
  return 0;
}

void DSPGraph::VolumeCurveBox::setParameter(DSPGraph::VolumeCurveBox *this, int a2, int a3, float a4)
{
  unsigned int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_VolumeCurveBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v19, "");
    DSPGraph::ThrowException(-10878, &v21, 208, &v20, &v19);
  }
  switch(a2)
  {
    case 0:
      v6 = a4;
      *((_DWORD *)this + 193) = a4;
      v7 = 1.0;
      v8 = 2.0;
      v9 = 1.0;
      if (v6 <= 0xF)
      {
        v8 = flt_18F0F8218[v6];
        v9 = flt_18F0F8258[v6];
      }
      *((float *)this + 194) = v8;
      *((float *)this + 195) = v9;
      v10 = *((float *)this + 198);
      if (v10 < 0.0)
        v10 = 0.0;
      if (v10 <= 1.0)
        v7 = v10;
      goto LABEL_21;
    case 1:
      v16 = *((float *)this + 197);
      if (v16 < a4)
      {
        std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_VolumeCurveBox.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v20, "setParameter");
        std::string::basic_string[abi:ne180100]<0>(&v19, "MinVolume must be less than MaxVolume");
        DSPGraph::ThrowException(-10878, &v21, 222, &v20, &v19);
      }
      *((float *)this + 196) = a4;
      v17 = *((float *)this + 198);
      if (v17 < 0.0)
        v17 = 0.0;
      if (v17 > 1.0)
        v17 = 1.0;
      v18 = powf(v17, *((float *)this + 194) / *((float *)this + 195));
      *((float *)this + 199) = v18;
      v14 = a4 + (float)(v18 * (float)(v16 - a4));
      goto LABEL_28;
    case 2:
      v11 = *((float *)this + 196);
      if (v11 > a4)
      {
        std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_VolumeCurveBox.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v20, "setParameter");
        std::string::basic_string[abi:ne180100]<0>(&v19, "MaxVolume must be greater than MinVolume");
        DSPGraph::ThrowException(-10878, &v21, 231, &v20, &v19);
      }
      *((float *)this + 197) = a4;
      v12 = *((float *)this + 198);
      if (v12 < 0.0)
        v12 = 0.0;
      if (v12 > 1.0)
        v12 = 1.0;
      v13 = powf(v12, *((float *)this + 194) / *((float *)this + 195));
      *((float *)this + 199) = v13;
      v14 = v11 + (float)(v13 * (float)(a4 - v11));
      goto LABEL_28;
    case 3:
      v7 = 0.0;
      if (a4 >= 0.0)
        v7 = a4;
      if (v7 > 1.0)
        v7 = 1.0;
      *((float *)this + 198) = v7;
      v8 = *((float *)this + 194);
      v9 = *((float *)this + 195);
LABEL_21:
      v15 = powf(v7, v8 / v9);
      *((float *)this + 199) = v15;
      v14 = *((float *)this + 196) + (float)(v15 * (float)(*((float *)this + 197) - *((float *)this + 196)));
LABEL_28:
      *((float *)this + 200) = v14;
      return;
    default:
      std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_VolumeCurveBox.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v20, "setParameter");
      std::string::basic_string[abi:ne180100]<0>(&v19, "");
      DSPGraph::ThrowException(-10878, &v21, 246, &v20, &v19);
  }
}

void sub_18EEB74E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

float DSPGraph::VolumeCurveBox::getParameter(DSPGraph::VolumeCurveBox *this, int a2, int a3)
{
  float result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_VolumeCurveBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v4, "");
    DSPGraph::ThrowException(-10878, &v6, 257, &v5, &v4);
  }
  switch(a2)
  {
    case 0:
      result = (float)*((unsigned int *)this + 193);
      break;
    case 1:
      result = *((float *)this + 196);
      break;
    case 2:
      result = *((float *)this + 197);
      break;
    case 3:
      result = *((float *)this + 198);
      break;
    case 4:
      result = *((float *)this + 199);
      break;
    case 5:
      result = *((float *)this + 200);
      break;
    default:
      std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_VolumeCurveBox.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v5, "getParameter");
      std::string::basic_string[abi:ne180100]<0>(&v4, "");
      DSPGraph::ThrowException(-10878, &v6, 283, &v5, &v4);
  }
  return result;
}

void sub_18EEB7660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int> *DSPGraph::VolumeCurveBox::getParameterList@<X0>(std::vector<unsigned int> *this@<X0>, int a2@<W1>, std::vector<unsigned int> *a3@<X8>)
{
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  unsigned int v6;

  if (a2)
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
  }
  else
  {
    DSPGraph::VolumeCurveBox::parameterInfos((DSPGraph::VolumeCurveBox *)this);
    this = std::vector<unsigned int>::vector(a3, 0x4EC4EC4EC4EC4EC5* ((qword_1EE168370 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3));
    begin = a3->__begin_;
    end = a3->__end_;
    if (a3->__begin_ != end)
    {
      v6 = 0;
      do
        *begin++ = v6++;
      while (begin != end);
    }
  }
  return this;
}

void DSPGraph::VolumeCurveBox::getParameterInfo(DSPGraph::VolumeCurveBox *this@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  char v5;
  int v6;
  DSPGraph::VolumeCurveBox *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a2)
  {
    v5 = 0;
    v6 = -10866;
LABEL_6:
    *(_DWORD *)a4 = v6;
    goto LABEL_7;
  }
  DSPGraph::VolumeCurveBox::parameterInfos(this);
  if (0x4EC4EC4EC4EC4EC5 * ((qword_1EE168370 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3) <= (unint64_t)a3)
  {
    v5 = 0;
    v6 = -10878;
    goto LABEL_6;
  }
  DSPGraph::VolumeCurveBox::parameterInfos(v8);
  v9 = DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos + 104 * a3;
  v10 = *(_OWORD *)(v9 + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(v9 + 64);
  *(_OWORD *)(a4 + 80) = v10;
  *(_QWORD *)(a4 + 96) = *(_QWORD *)(v9 + 96);
  v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)a4 = *(_OWORD *)v9;
  *(_OWORD *)(a4 + 16) = v11;
  v12 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(a4 + 48) = v12;
  v5 = 1;
LABEL_7:
  *(_BYTE *)(a4 + 104) = v5;
}

void sub_18EEB77EC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  *(_DWORD *)v1 = -1;
  *(_BYTE *)(v1 + 104) = 0;
  __cxa_end_catch();
  JUMPOUT(0x18EEB77E0);
}

uint64_t DSPGraph::Box::usesFixedBlockSize(DSPGraph::Box *this)
{
  return 0;
}

double DSPGraph::VolumeCurveBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.29504994e171;
  *(_OWORD *)a1 = xmmword_18F116ED0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::Box::asBoxProxy(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asSRCBox(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asFreqSRCBox(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asOperativeSRCBox(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asOperativeFreqSRCBox(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::hasPresetData(DSPGraph::Box *this)
{
  return 1;
}

void DSPGraph::Box::getComponentName(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t DSPGraph::Box::isLatencyDelay(DSPGraph::Box *this)
{
  return 0;
}

void DSPGraph::VolumeCurveBox::parameterInfos(DSPGraph::VolumeCurveBox *this)
{
  unsigned __int8 v1;
  DSPGraph::VolumeCurveBox::ParameterInfos *v2;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      DSPGraph::VolumeCurveBox::ParameterInfos::ParameterInfos(v2);
    }
  }
}

void sub_18EEB78C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void DSPGraph::VolumeCurveBox::ParameterInfos::ParameterInfos(DSPGraph::VolumeCurveBox::ParameterInfos *this)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _BYTE v156[24];
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  qword_1EE168370 = 0;
  qword_1EE168378 = 0;
  DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos = 0;
  v155 = 0u;
  memset(v156, 0, sizeof(v156));
  v153 = 0u;
  v154 = 0u;
  v151 = 0u;
  v152 = 0u;
  *(_DWORD *)v156 = 1;
  *(_DWORD *)&v156[8] = 1097859072;
  strlcpy((char *)&v151, "Transfer function", 0x34uLL);
  *((_QWORD *)&v155 + 1) = CFSTR("Transfer function");
  *(_DWORD *)&v156[16] |= 0xC8000000;
  v1 = qword_1EE168370;
  if (qword_1EE168370 >= (unint64_t)qword_1EE168378)
  {
    v8 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
    v9 = 0x4EC4EC4EC4EC4EC5
       * ((qword_1EE168370 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) > 0x276276276276276)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x9D89D89D89D89D8ALL
       * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3) > v10)
      v10 = 0x9D89D89D89D89D8ALL
          * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                          * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3)) >= 0x13B13B13B13B13BLL)
      v11 = 0x276276276276276;
    else
      v11 = v10;
    if (v11)
    {
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterInfo>>(v11);
      v8 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
      v1 = qword_1EE168370;
    }
    else
    {
      v12 = 0;
    }
    v13 = v11 + 104 * v9;
    v14 = v11 + 104 * v12;
    v15 = v151;
    v16 = v153;
    *(_OWORD *)(v13 + 16) = v152;
    *(_OWORD *)(v13 + 32) = v16;
    *(_OWORD *)v13 = v15;
    v17 = v154;
    v18 = v155;
    v19 = *(_OWORD *)v156;
    *(_QWORD *)(v13 + 96) = *(_QWORD *)&v156[16];
    *(_OWORD *)(v13 + 64) = v18;
    *(_OWORD *)(v13 + 80) = v19;
    *(_OWORD *)(v13 + 48) = v17;
    v7 = v13 + 104;
    if ((void *)v1 == v8)
    {
      v25 = v13;
    }
    else
    {
      do
      {
        v20 = *(_OWORD *)(v1 - 104);
        v21 = *(_OWORD *)(v1 - 88);
        *(_OWORD *)(v13 - 72) = *(_OWORD *)(v1 - 72);
        *(_OWORD *)(v13 - 88) = v21;
        *(_OWORD *)(v13 - 104) = v20;
        v22 = *(_OWORD *)(v1 - 56);
        v23 = *(_OWORD *)(v1 - 40);
        v24 = *(_OWORD *)(v1 - 24);
        v25 = v13 - 104;
        *(_QWORD *)(v13 - 8) = *(_QWORD *)(v1 - 8);
        *(_OWORD *)(v13 - 24) = v24;
        *(_OWORD *)(v13 - 40) = v23;
        *(_OWORD *)(v13 - 56) = v22;
        v1 -= 104;
        v13 -= 104;
      }
      while ((void *)v1 != v8);
    }
    DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos = v25;
    qword_1EE168370 = v7;
    qword_1EE168378 = v14;
    if (v8)
      operator delete(v8);
  }
  else
  {
    v2 = v151;
    v3 = v153;
    *(_OWORD *)(qword_1EE168370 + 16) = v152;
    *(_OWORD *)(v1 + 32) = v3;
    *(_OWORD *)v1 = v2;
    v4 = v154;
    v5 = v155;
    v6 = *(_OWORD *)v156;
    *(_QWORD *)(v1 + 96) = *(_QWORD *)&v156[16];
    *(_OWORD *)(v1 + 64) = v5;
    *(_OWORD *)(v1 + 80) = v6;
    *(_OWORD *)(v1 + 48) = v4;
    v7 = v1 + 104;
  }
  qword_1EE168370 = v7;
  *(_QWORD *)&v156[16] = 0;
  v155 = 0u;
  v153 = 0u;
  v154 = 0u;
  v151 = 0u;
  v152 = 0u;
  *(_DWORD *)v156 = 13;
  *(_QWORD *)&v156[4] = 0x7F800000FF800000;
  *(_DWORD *)&v156[12] = -1032847360;
  strlcpy((char *)&v151, "Minimum volume", 0x34uLL);
  *((_QWORD *)&v155 + 1) = CFSTR("Minimum volume");
  *(_DWORD *)&v156[16] |= 0xC8000000;
  v26 = qword_1EE168370;
  if (qword_1EE168370 >= (unint64_t)qword_1EE168378)
  {
    v33 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
    v34 = 0x4EC4EC4EC4EC4EC5
        * ((qword_1EE168370 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) > 0x276276276276276)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x9D89D89D89D89D8ALL
       * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3) > v35)
      v35 = 0x9D89D89D89D89D8ALL
          * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                          * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3)) >= 0x13B13B13B13B13BLL)
      v36 = 0x276276276276276;
    else
      v36 = v35;
    if (v36)
    {
      v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterInfo>>(v36);
      v33 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
      v26 = qword_1EE168370;
    }
    else
    {
      v37 = 0;
    }
    v38 = v36 + 104 * v34;
    v39 = v36 + 104 * v37;
    v40 = v151;
    v41 = v153;
    *(_OWORD *)(v38 + 16) = v152;
    *(_OWORD *)(v38 + 32) = v41;
    *(_OWORD *)v38 = v40;
    v42 = v154;
    v43 = v155;
    v44 = *(_OWORD *)v156;
    *(_QWORD *)(v38 + 96) = *(_QWORD *)&v156[16];
    *(_OWORD *)(v38 + 64) = v43;
    *(_OWORD *)(v38 + 80) = v44;
    *(_OWORD *)(v38 + 48) = v42;
    v32 = v38 + 104;
    if ((void *)v26 == v33)
    {
      v50 = v38;
    }
    else
    {
      do
      {
        v45 = *(_OWORD *)(v26 - 104);
        v46 = *(_OWORD *)(v26 - 88);
        *(_OWORD *)(v38 - 72) = *(_OWORD *)(v26 - 72);
        *(_OWORD *)(v38 - 88) = v46;
        *(_OWORD *)(v38 - 104) = v45;
        v47 = *(_OWORD *)(v26 - 56);
        v48 = *(_OWORD *)(v26 - 40);
        v49 = *(_OWORD *)(v26 - 24);
        v50 = v38 - 104;
        *(_QWORD *)(v38 - 8) = *(_QWORD *)(v26 - 8);
        *(_OWORD *)(v38 - 24) = v49;
        *(_OWORD *)(v38 - 40) = v48;
        *(_OWORD *)(v38 - 56) = v47;
        v26 -= 104;
        v38 -= 104;
      }
      while ((void *)v26 != v33);
    }
    DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos = v50;
    qword_1EE168370 = v32;
    qword_1EE168378 = v39;
    if (v33)
      operator delete(v33);
  }
  else
  {
    v27 = v151;
    v28 = v153;
    *(_OWORD *)(qword_1EE168370 + 16) = v152;
    *(_OWORD *)(v26 + 32) = v28;
    *(_OWORD *)v26 = v27;
    v29 = v154;
    v30 = v155;
    v31 = *(_OWORD *)v156;
    *(_QWORD *)(v26 + 96) = *(_QWORD *)&v156[16];
    *(_OWORD *)(v26 + 64) = v30;
    *(_OWORD *)(v26 + 80) = v31;
    *(_OWORD *)(v26 + 48) = v29;
    v32 = v26 + 104;
  }
  qword_1EE168370 = v32;
  *(_DWORD *)&v156[20] = 0;
  v155 = 0u;
  *(_QWORD *)&v156[12] = 0;
  v153 = 0u;
  v154 = 0u;
  v151 = 0u;
  v152 = 0u;
  *(_DWORD *)v156 = 13;
  *(_QWORD *)&v156[4] = 0x7F800000FF800000;
  strlcpy((char *)&v151, "Maximum volume", 0x34uLL);
  *((_QWORD *)&v155 + 1) = CFSTR("Maximum volume");
  *(_DWORD *)&v156[16] |= 0xC8000000;
  v51 = qword_1EE168370;
  if (qword_1EE168370 >= (unint64_t)qword_1EE168378)
  {
    v58 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
    v59 = 0x4EC4EC4EC4EC4EC5
        * ((qword_1EE168370 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) > 0x276276276276276)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x9D89D89D89D89D8ALL
       * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3) > v60)
      v60 = 0x9D89D89D89D89D8ALL
          * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                          * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3)) >= 0x13B13B13B13B13BLL)
      v61 = 0x276276276276276;
    else
      v61 = v60;
    if (v61)
    {
      v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterInfo>>(v61);
      v58 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
      v51 = qword_1EE168370;
    }
    else
    {
      v62 = 0;
    }
    v63 = v61 + 104 * v59;
    v64 = v61 + 104 * v62;
    v65 = v151;
    v66 = v153;
    *(_OWORD *)(v63 + 16) = v152;
    *(_OWORD *)(v63 + 32) = v66;
    *(_OWORD *)v63 = v65;
    v67 = v154;
    v68 = v155;
    v69 = *(_OWORD *)v156;
    *(_QWORD *)(v63 + 96) = *(_QWORD *)&v156[16];
    *(_OWORD *)(v63 + 64) = v68;
    *(_OWORD *)(v63 + 80) = v69;
    *(_OWORD *)(v63 + 48) = v67;
    v57 = v63 + 104;
    if ((void *)v51 == v58)
    {
      v75 = v63;
    }
    else
    {
      do
      {
        v70 = *(_OWORD *)(v51 - 104);
        v71 = *(_OWORD *)(v51 - 88);
        *(_OWORD *)(v63 - 72) = *(_OWORD *)(v51 - 72);
        *(_OWORD *)(v63 - 88) = v71;
        *(_OWORD *)(v63 - 104) = v70;
        v72 = *(_OWORD *)(v51 - 56);
        v73 = *(_OWORD *)(v51 - 40);
        v74 = *(_OWORD *)(v51 - 24);
        v75 = v63 - 104;
        *(_QWORD *)(v63 - 8) = *(_QWORD *)(v51 - 8);
        *(_OWORD *)(v63 - 24) = v74;
        *(_OWORD *)(v63 - 40) = v73;
        *(_OWORD *)(v63 - 56) = v72;
        v51 -= 104;
        v63 -= 104;
      }
      while ((void *)v51 != v58);
    }
    DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos = v75;
    qword_1EE168370 = v57;
    qword_1EE168378 = v64;
    if (v58)
      operator delete(v58);
  }
  else
  {
    v52 = v151;
    v53 = v153;
    *(_OWORD *)(qword_1EE168370 + 16) = v152;
    *(_OWORD *)(v51 + 32) = v53;
    *(_OWORD *)v51 = v52;
    v54 = v154;
    v55 = v155;
    v56 = *(_OWORD *)v156;
    *(_QWORD *)(v51 + 96) = *(_QWORD *)&v156[16];
    *(_OWORD *)(v51 + 64) = v55;
    *(_OWORD *)(v51 + 80) = v56;
    *(_OWORD *)(v51 + 48) = v54;
    v57 = v51 + 104;
  }
  qword_1EE168370 = v57;
  *(_QWORD *)&v156[16] = 0;
  v155 = 0u;
  *(_QWORD *)v156 = 0;
  v153 = 0u;
  v154 = 0u;
  v151 = 0u;
  v152 = 0u;
  *(_QWORD *)&v156[8] = 0x3E8000003F800000;
  strlcpy((char *)&v151, "Raw slider value", 0x34uLL);
  *((_QWORD *)&v155 + 1) = CFSTR("Raw slider value");
  *(_DWORD *)&v156[16] |= 0xC8000000;
  v76 = qword_1EE168370;
  if (qword_1EE168370 >= (unint64_t)qword_1EE168378)
  {
    v83 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
    v84 = 0x4EC4EC4EC4EC4EC5
        * ((qword_1EE168370 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    v85 = v84 + 1;
    if ((unint64_t)(v84 + 1) > 0x276276276276276)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x9D89D89D89D89D8ALL
       * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3) > v85)
      v85 = 0x9D89D89D89D89D8ALL
          * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                          * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3)) >= 0x13B13B13B13B13BLL)
      v86 = 0x276276276276276;
    else
      v86 = v85;
    if (v86)
    {
      v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterInfo>>(v86);
      v83 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
      v76 = qword_1EE168370;
    }
    else
    {
      v87 = 0;
    }
    v88 = v86 + 104 * v84;
    v89 = v86 + 104 * v87;
    v90 = v151;
    v91 = v153;
    *(_OWORD *)(v88 + 16) = v152;
    *(_OWORD *)(v88 + 32) = v91;
    *(_OWORD *)v88 = v90;
    v92 = v154;
    v93 = v155;
    v94 = *(_OWORD *)v156;
    *(_QWORD *)(v88 + 96) = *(_QWORD *)&v156[16];
    *(_OWORD *)(v88 + 64) = v93;
    *(_OWORD *)(v88 + 80) = v94;
    *(_OWORD *)(v88 + 48) = v92;
    v82 = v88 + 104;
    if ((void *)v76 == v83)
    {
      v100 = v88;
    }
    else
    {
      do
      {
        v95 = *(_OWORD *)(v76 - 104);
        v96 = *(_OWORD *)(v76 - 88);
        *(_OWORD *)(v88 - 72) = *(_OWORD *)(v76 - 72);
        *(_OWORD *)(v88 - 88) = v96;
        *(_OWORD *)(v88 - 104) = v95;
        v97 = *(_OWORD *)(v76 - 56);
        v98 = *(_OWORD *)(v76 - 40);
        v99 = *(_OWORD *)(v76 - 24);
        v100 = v88 - 104;
        *(_QWORD *)(v88 - 8) = *(_QWORD *)(v76 - 8);
        *(_OWORD *)(v88 - 24) = v99;
        *(_OWORD *)(v88 - 40) = v98;
        *(_OWORD *)(v88 - 56) = v97;
        v76 -= 104;
        v88 -= 104;
      }
      while ((void *)v76 != v83);
    }
    DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos = v100;
    qword_1EE168370 = v82;
    qword_1EE168378 = v89;
    if (v83)
      operator delete(v83);
  }
  else
  {
    v77 = v151;
    v78 = v153;
    *(_OWORD *)(qword_1EE168370 + 16) = v152;
    *(_OWORD *)(v76 + 32) = v78;
    *(_OWORD *)v76 = v77;
    v79 = v154;
    v80 = v155;
    v81 = *(_OWORD *)v156;
    *(_QWORD *)(v76 + 96) = *(_QWORD *)&v156[16];
    *(_OWORD *)(v76 + 64) = v80;
    *(_OWORD *)(v76 + 80) = v81;
    *(_OWORD *)(v76 + 48) = v79;
    v82 = v76 + 104;
  }
  qword_1EE168370 = v82;
  *(_QWORD *)&v156[16] = 0;
  v155 = 0u;
  *(_QWORD *)v156 = 0;
  v153 = 0u;
  v154 = 0u;
  v151 = 0u;
  v152 = 0u;
  *(_QWORD *)&v156[8] = 0x3E8000003F800000;
  strlcpy((char *)&v151, "Mapped slider value", 0x34uLL);
  *((_QWORD *)&v155 + 1) = CFSTR("Mapped slider value");
  *(_DWORD *)&v156[16] |= 0x48000000u;
  v101 = qword_1EE168370;
  if (qword_1EE168370 >= (unint64_t)qword_1EE168378)
  {
    v108 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
    v109 = 0x4EC4EC4EC4EC4EC5
         * ((qword_1EE168370 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    v110 = v109 + 1;
    if ((unint64_t)(v109 + 1) > 0x276276276276276)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x9D89D89D89D89D8ALL
       * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3) > v110)
      v110 = 0x9D89D89D89D89D8ALL
           * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                          * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3)) >= 0x13B13B13B13B13BLL)
      v111 = 0x276276276276276;
    else
      v111 = v110;
    if (v111)
    {
      v111 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterInfo>>(v111);
      v108 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
      v101 = qword_1EE168370;
    }
    else
    {
      v112 = 0;
    }
    v113 = v111 + 104 * v109;
    v114 = v111 + 104 * v112;
    v115 = v151;
    v116 = v153;
    *(_OWORD *)(v113 + 16) = v152;
    *(_OWORD *)(v113 + 32) = v116;
    *(_OWORD *)v113 = v115;
    v117 = v154;
    v118 = v155;
    v119 = *(_OWORD *)v156;
    *(_QWORD *)(v113 + 96) = *(_QWORD *)&v156[16];
    *(_OWORD *)(v113 + 64) = v118;
    *(_OWORD *)(v113 + 80) = v119;
    *(_OWORD *)(v113 + 48) = v117;
    v107 = v113 + 104;
    if ((void *)v101 == v108)
    {
      v125 = v113;
    }
    else
    {
      do
      {
        v120 = *(_OWORD *)(v101 - 104);
        v121 = *(_OWORD *)(v101 - 88);
        *(_OWORD *)(v113 - 72) = *(_OWORD *)(v101 - 72);
        *(_OWORD *)(v113 - 88) = v121;
        *(_OWORD *)(v113 - 104) = v120;
        v122 = *(_OWORD *)(v101 - 56);
        v123 = *(_OWORD *)(v101 - 40);
        v124 = *(_OWORD *)(v101 - 24);
        v125 = v113 - 104;
        *(_QWORD *)(v113 - 8) = *(_QWORD *)(v101 - 8);
        *(_OWORD *)(v113 - 24) = v124;
        *(_OWORD *)(v113 - 40) = v123;
        *(_OWORD *)(v113 - 56) = v122;
        v101 -= 104;
        v113 -= 104;
      }
      while ((void *)v101 != v108);
    }
    DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos = v125;
    qword_1EE168370 = v107;
    qword_1EE168378 = v114;
    if (v108)
      operator delete(v108);
  }
  else
  {
    v102 = v151;
    v103 = v153;
    *(_OWORD *)(qword_1EE168370 + 16) = v152;
    *(_OWORD *)(v101 + 32) = v103;
    *(_OWORD *)v101 = v102;
    v104 = v154;
    v105 = v155;
    v106 = *(_OWORD *)v156;
    *(_QWORD *)(v101 + 96) = *(_QWORD *)&v156[16];
    *(_OWORD *)(v101 + 64) = v105;
    *(_OWORD *)(v101 + 80) = v106;
    *(_OWORD *)(v101 + 48) = v104;
    v107 = v101 + 104;
  }
  qword_1EE168370 = v107;
  *(_QWORD *)&v156[16] = 0;
  v155 = 0u;
  v153 = 0u;
  v154 = 0u;
  v151 = 0u;
  v152 = 0u;
  *(_DWORD *)v156 = 13;
  *(_QWORD *)&v156[4] = 0x7F800000FF800000;
  *(_DWORD *)&v156[12] = -1036779520;
  strlcpy((char *)&v151, "Decibel gain", 0x34uLL);
  *((_QWORD *)&v155 + 1) = CFSTR("Decibel gain");
  *(_DWORD *)&v156[16] |= 0x48000000u;
  v126 = qword_1EE168370;
  if (qword_1EE168370 >= (unint64_t)qword_1EE168378)
  {
    v133 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
    v134 = 0x4EC4EC4EC4EC4EC5
         * ((qword_1EE168370 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    v135 = v134 + 1;
    if ((unint64_t)(v134 + 1) > 0x276276276276276)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x9D89D89D89D89D8ALL
       * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3) > v135)
      v135 = 0x9D89D89D89D89D8ALL
           * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                          * ((qword_1EE168378 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3)) >= 0x13B13B13B13B13BLL)
      v136 = 0x276276276276276;
    else
      v136 = v135;
    if (v136)
    {
      v136 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterInfo>>(v136);
      v133 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
      v126 = qword_1EE168370;
    }
    else
    {
      v137 = 0;
    }
    v138 = v136 + 104 * v134;
    v139 = v136 + 104 * v137;
    v140 = v151;
    v141 = v153;
    *(_OWORD *)(v138 + 16) = v152;
    *(_OWORD *)(v138 + 32) = v141;
    *(_OWORD *)v138 = v140;
    v142 = v154;
    v143 = v155;
    v144 = *(_OWORD *)v156;
    *(_QWORD *)(v138 + 96) = *(_QWORD *)&v156[16];
    *(_OWORD *)(v138 + 64) = v143;
    *(_OWORD *)(v138 + 80) = v144;
    *(_OWORD *)(v138 + 48) = v142;
    v132 = v138 + 104;
    if ((void *)v126 == v133)
    {
      v150 = v138;
    }
    else
    {
      do
      {
        v145 = *(_OWORD *)(v126 - 104);
        v146 = *(_OWORD *)(v126 - 88);
        *(_OWORD *)(v138 - 72) = *(_OWORD *)(v126 - 72);
        *(_OWORD *)(v138 - 88) = v146;
        *(_OWORD *)(v138 - 104) = v145;
        v147 = *(_OWORD *)(v126 - 56);
        v148 = *(_OWORD *)(v126 - 40);
        v149 = *(_OWORD *)(v126 - 24);
        v150 = v138 - 104;
        *(_QWORD *)(v138 - 8) = *(_QWORD *)(v126 - 8);
        *(_OWORD *)(v138 - 24) = v149;
        *(_OWORD *)(v138 - 40) = v148;
        *(_OWORD *)(v138 - 56) = v147;
        v126 -= 104;
        v138 -= 104;
      }
      while ((void *)v126 != v133);
    }
    DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos = v150;
    qword_1EE168370 = v132;
    qword_1EE168378 = v139;
    if (v133)
      operator delete(v133);
  }
  else
  {
    v127 = v151;
    v128 = v153;
    *(_OWORD *)(qword_1EE168370 + 16) = v152;
    *(_OWORD *)(v126 + 32) = v128;
    *(_OWORD *)v126 = v127;
    v129 = v154;
    v130 = v155;
    v131 = *(_OWORD *)v156;
    *(_QWORD *)(v126 + 96) = *(_QWORD *)&v156[16];
    *(_OWORD *)(v126 + 64) = v130;
    *(_OWORD *)(v126 + 80) = v131;
    *(_OWORD *)(v126 + 48) = v129;
    v132 = v126 + 104;
  }
  qword_1EE168370 = v132;
}

void sub_18EEB8390(_Unwind_Exception *exception_object)
{
  if (DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos)
  {
    qword_1EE168370 = DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
    operator delete((void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterInfo>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a1);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_18EEB8468(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::streamToString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[10];
  char v8;
  uint64_t v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v6);
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v6);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v7);
  v6 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v7[-1] + *(_QWORD *)(v6 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x193FFE3A0](&v9);
}

void sub_18EEB854C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::MakeFloatNoninterleavedFormat@<X0>(uint64_t this@<X0>, double a2@<D0>, unsigned int a3@<W1>, uint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 16) = a3 >> 3;
  *(_DWORD *)(a4 + 20) = 1;
  *(double *)a4 = a2;
  *(_QWORD *)(a4 + 8) = 0x296C70636DLL;
  *(_DWORD *)(a4 + 24) = a3 >> 3;
  *(_DWORD *)(a4 + 28) = this;
  *(_DWORD *)(a4 + 32) = a3;
  *(_DWORD *)(a4 + 36) = 0;
  return this;
}

uint64_t DSPGraph::MakeFloatInterleavedFormat@<X0>(uint64_t this@<X0>, double a2@<D0>, int a3@<W1>, uint64_t a4@<X8>)
{
  unsigned int v4;

  v4 = (a3 * this) >> 3;
  *(_DWORD *)(a4 + 16) = v4;
  *(_DWORD *)(a4 + 20) = 1;
  *(double *)a4 = a2;
  *(_QWORD *)(a4 + 8) = 0x96C70636DLL;
  *(_DWORD *)(a4 + 24) = v4;
  *(_DWORD *)(a4 + 28) = this;
  *(_DWORD *)(a4 + 32) = a3;
  *(_DWORD *)(a4 + 36) = 0;
  return this;
}

uint64_t DSPGraph::MakeCBRFormat@<X0>(uint64_t this@<X0>, double a2@<D0>, int a3@<W1>, int a4@<W2>, int a5@<W3>, int a6@<W4>, uint64_t a7@<X8>)
{
  *(double *)a7 = a2;
  *(_DWORD *)(a7 + 8) = this;
  *(_DWORD *)(a7 + 12) = a6;
  *(_DWORD *)(a7 + 16) = a5;
  *(_DWORD *)(a7 + 20) = a4;
  *(_DWORD *)(a7 + 24) = 0;
  *(_DWORD *)(a7 + 28) = a3;
  *(_QWORD *)(a7 + 32) = 0;
  return this;
}

uint64_t DSPGraph::printi(_QWORD *a1, unsigned int a2, char *__s, ...)
{
  unsigned int v4;
  const char *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  void *v10;
  unsigned int v11;
  size_t v12;
  va_list va;

  va_start(va, __s);
  v4 = a2;
  if (a2 >= 0x40)
  {
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"                                                                ", 64);
      v4 -= 64;
    }
    while (v4 > 0x3F);
  }
  if (v4)
  {
    v6 = &asc_18F14294D[-v4 + 64];
    v7 = strlen(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v6, v7);
  }
  v8 = strlen(__s);
  if (v8 + 1 > 0x100)
    v9 = v8 + 1;
  else
    v9 = 256;
  while (1)
  {
    v10 = (void *)operator new[]();
    bzero(v10, v9);
    strlcpy((char *)v10, __s, v9);
    v11 = vsnprintf((char *)v10, v9, __s, va);
    if ((v11 & 0x80000000) != 0)
      break;
    if (v9 > v11)
    {
      v12 = strlen((const char *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v10, v12);
      return MEMORY[0x193FFE43C](v10, 0x1000C8077774924);
    }
    v9 = v11 + 1;
    MEMORY[0x193FFE43C](v10, 0x1000C8077774924);
  }
  return MEMORY[0x193FFE43C](v10, 0x1000C8077774924);
}

void sub_18EEB8724(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE43C](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

DSPGraph *DSPGraph::OSTypeToStr(DSPGraph *this, char *a2, unsigned int a3)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  int v9;
  int v11;
  char *v12;
  unsigned int v14;

  if (a2)
  {
    v4 = &a2[(_QWORD)this];
    v14 = bswap32(a3);
    if ((uint64_t)a2 <= 0)
    {
      v12 = v4 - 1;
    }
    else
    {
      v5 = 0;
      v6 = MEMORY[0x1E0C80978];
      v7 = (char *)this;
      do
      {
        v8 = *((char *)&v14 + v5);
        if ((v8 & 0x80000000) != 0)
          v9 = __maskrune(*((char *)&v14 + v5), 0x40000uLL);
        else
          v9 = *(_DWORD *)(v6 + 4 * v8 + 60) & 0x40000;
        if (v8 == 92 || v9 == 0)
        {
          v11 = snprintf(v7, v4 - v7, "\\x%02x", v8);
          v7 += v11 & ~(v11 >> 31);
        }
        else
        {
          *v7++ = v8;
        }
        if (v5 > 2)
          break;
        ++v5;
      }
      while (v7 < v4);
      if (v7 >= v4)
        v12 = v4 - 1;
      else
        v12 = v7;
    }
    *v12 = 0;
  }
  return this;
}

uint64_t DSPGraph::StrToOSType(DSPGraph *this, char *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  DSPGraph *v6;
  int v7;
  DSPGraph *v8;
  char v9;
  uint64_t v10;
  char v11;
  __darwin_ct_rune_t v12;
  unsigned int v15;
  unsigned int v16;

  v4 = 0;
  v16 = 0;
  v5 = MEMORY[0x1E0C80978];
  v6 = this;
  while (1)
  {
    v7 = *(unsigned __int8 *)v6;
    if (v7 == 92)
      break;
    if (!*(_BYTE *)v6)
    {
      v8 = v6;
LABEL_18:
      *(_DWORD *)a2 = bswap32(v16);
      return v8 - this;
    }
    v8 = (DSPGraph *)((char *)v6 + 1);
LABEL_14:
    *((_BYTE *)&v16 + v4++) = v7;
    v6 = v8;
    if (v4 == 4)
      goto LABEL_18;
  }
  if (*((_BYTE *)v6 + 1) == 120 && strlen((const char *)v6 + 2) >= 2)
  {
    v9 = 0;
    v8 = (DSPGraph *)((char *)v6 + 4);
    v10 = 2;
    while (1)
    {
      v11 = v9;
      v12 = __tolower(*((char *)v6 + v10));
      if (v12 << 24 < 0
        || (*(_DWORD *)(v5 + 4 * v12 + 60) & 0x400) == 0
        && ((v12 << 24) - 1610612737) >= 0x6FFFFFF)
      {
        break;
      }
      v9 = 1;
      v10 = 3;
      if ((v11 & 1) != 0)
      {
        v15 = 0;
        if (sscanf((const char *)v6 + 2, "%02X", &v15) != 1)
          return 0;
        LOBYTE(v7) = v15;
        if (v15 >= 0x100)
          return 0;
        goto LABEL_14;
      }
    }
  }
  return 0;
}

_QWORD *DSPGraph::print4cc(_QWORD *a1, unsigned int a2)
{
  size_t v3;
  char __s[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)__s = 0;
  v6 = 0;
  DSPGraph::OSTypeToStr((DSPGraph *)__s, (char *)0x10, a2);
  v3 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v3);
}

_QWORD *DSPGraph::printACD(_QWORD *a1, unsigned int *a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *result;
  char v10;

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" (", 2);
  DSPGraph::print4cc(v6, *a2);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  DSPGraph::print4cc(v7, a2[1]);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  DSPGraph::print4cc(v8, a2[2]);
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)") ", 3);
  if (a3)
  {
    v10 = 10;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v10, 1);
  }
  return result;
}

uint64_t DSPGraph::strprintf@<X0>(DSPGraph *this@<X0>, _QWORD *a2@<X8>, ...)
{
  size_t v5;
  size_t v6;
  void *v7;
  unsigned int v8;
  va_list va;

  va_start(va, a2);
  v5 = strlen((const char *)this);
  if (v5 + 1 > 0x100)
    v6 = v5 + 1;
  else
    v6 = 256;
  while (1)
  {
    v7 = (void *)operator new[]();
    bzero(v7, v6);
    strlcpy((char *)v7, (const char *)this, v6);
    v8 = vsnprintf((char *)v7, v6, (const char *)this, va);
    if ((v8 & 0x80000000) != 0)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      return MEMORY[0x193FFE43C](v7, 0x1000C8077774924);
    }
    if (v6 > v8)
      break;
    v6 = v8 + 1;
    MEMORY[0x193FFE43C](v7, 0x1000C8077774924);
  }
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)v7);
  return MEMORY[0x193FFE43C](v7, 0x1000C8077774924);
}

void sub_18EEB8BC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE43C](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

const char *DSPGraph::errstring(DSPGraph *this)
{
  if ((int)this <= 1718775072)
  {
    if ((int)this > 1667788320)
    {
      if ((int)this <= 1718188064)
      {
        if ((_DWORD)this == 1667788321)
          return "channel counts error";
        if ((_DWORD)this == 1701602593)
          return "element count error";
      }
      else
      {
        switch((_DWORD)this)
        {
          case 0x66697821:
            return "requires fixed block size";
          case 0x666D6321:
            return "format conflict";
          case 0x666D743F:
            return "format not supported";
        }
      }
    }
    else if ((int)this <= 1633906208)
    {
      if ((_DWORD)this == 561211770)
        return "wrong property size";
      if ((_DWORD)this == 1633903905)
        return "already connected";
    }
    else
    {
      switch((_DWORD)this)
      {
        case 0x61636E21:
          return "AudioComponent not found";
        case 0x616E7321:
          return "AudioUnit not supported";
        case 0x63666721:
          return "configured state error";
      }
    }
  }
  else if ((int)this <= 1869640254)
  {
    if ((int)this <= 1768975392)
    {
      if ((_DWORD)this == 1718775073)
        return "frame count error";
      if ((_DWORD)this == 1768843553)
        return "initialized state error";
    }
    else
    {
      switch((_DWORD)this)
      {
        case 0x69706C21:
          return "cannot process in place";
        case 0x6D706C21:
          return "must process in place";
        case 0x6E666421:
          return "not found";
      }
    }
  }
  else if ((int)this > 1953460256)
  {
    switch((_DWORD)this)
    {
      case 0x746F7021:
        return "illegal topology";
      case 0x75637021:
        return "unconnected property";
      case 0x756E6321:
        return "unconnected port";
    }
  }
  else
  {
    switch((_DWORD)this)
    {
      case 0x6F70723F:
        return "operation not supported";
      case 0x70727321:
        return "parse failed";
      case 0x726E6721:
        return "range error";
    }
  }
  return "";
}

double DSPGraph::decompileFormat@<D0>(DSPGraph *this@<X0>, const AudioStreamBasicDescription *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  int v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  char v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  double result;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *p_p;
  std::string::size_type size;
  std::string *v28;
  std::string::size_type v29;
  char v30;
  uint64_t v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string __p;
  std::string v37;
  std::string v38;
  std::string v39;
  _QWORD v40[3];

  v3 = a2;
  v40[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *((_DWORD *)this + 2);
  if (v6 == 1819304813)
  {
    if ((~*((_DWORD *)this + 3) & 0x21) == 0 && *((_DWORD *)this + 8) == 32)
    {
      std::to_string(&v37, (int)*(double *)this);
      v22 = std::string::insert(&v37, 0, "(", 1uLL);
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v24 = std::string::append(&v38, " ", 1uLL);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&__p, *((_DWORD *)this + 7));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v28 = std::string::append(&v39, (const std::string::value_type *)p_p, size);
      v29 = v28->__r_.__value_.__r.__words[0];
      v40[0] = v28->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v40 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
      v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      v31 = v40[0];
      *(_QWORD *)a3 = v29;
      *(_QWORD *)(a3 + 8) = v31;
      *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v40 + 7);
      *(_BYTE *)(a3 + 23) = v30;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (v3 >= 2)
      {
        std::to_string(&v38, v3);
        v32 = std::string::insert(&v38, 0, " ", 1uLL);
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = &v39;
        else
          v34 = (std::string *)v39.__r_.__value_.__r.__words[0];
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        else
          v35 = v39.__r_.__value_.__l.__size_;
        std::string::append((std::string *)a3, (const std::string::value_type *)v34, v35);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
      }
      goto LABEL_29;
    }
  }
  else if (v6 == 1718773105)
  {
    std::to_string(&v37, (int)*(double *)this);
    v7 = std::string::insert(&v37, 0, "(freq ", 6uLL);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v38, " ", 1uLL);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *((_DWORD *)this + 7));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &__p;
    else
      v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v12 = __p.__r_.__value_.__l.__size_;
    v13 = std::string::append(&v39, (const std::string::value_type *)v11, v12);
    v14 = v13->__r_.__value_.__r.__words[0];
    v40[0] = v13->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v40 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    v16 = v40[0];
    *(_QWORD *)a3 = v14;
    *(_QWORD *)(a3 + 8) = v16;
    *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v40 + 7);
    *(_BYTE *)(a3 + 23) = v15;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    std::to_string(&v38, v3);
    v17 = std::string::insert(&v38, 0, " ", 1uLL);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v39;
    else
      v19 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      v20 = v39.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a3, (const std::string::value_type *)v19, v20);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
LABEL_29:
    std::string::append((std::string *)a3, ")", 1uLL);
    return result;
  }
  DSPGraph::ToText(this, &v39);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  result = *(double *)&v39.__r_.__value_.__l.__data_;
  *(std::string *)a3 = v39;
  return result;
}

void sub_18EEB92FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a33 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  _Unwind_Resume(exception_object);
}

void DSPGraph::ToText(DSPGraph *this@<X0>, std::string *a2@<X8>)
{
  int v5;
  int v6;
  const char *v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type size;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  std::string *v18;
  std::string::size_type v19;
  unsigned int v20;
  BOOL v21;
  std::string::size_type v22;
  char v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  BOOL v29;
  char *v30;
  std::string::value_type v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  std::string::value_type v38;
  std::string v39;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = *((_DWORD *)this + 2);
  if (v5 != 1819304813)
  {
    v12 = 24;
    v13 = MEMORY[0x1E0C80978];
    while (1)
    {
      v14 = *((_DWORD *)this + 2);
      v15 = v14 >> v12;
      v16 = (v14 >> v12);
      if (v16 < 0x80)
      {
        v17 = *(_DWORD *)(v13 + 4 * (v14 >> v12) + 60);
        if ((v17 & 0x500) != 0 || (v17 & 0x2000) != 0)
          goto LABEL_28;
      }
      else if (__maskrune((v14 >> v12), 0x500uLL) || __maskrune(v16, 0x2000uLL))
      {
        goto LABEL_28;
      }
      std::string::append(a2, "\\x", 2uLL);
      std::string::push_back(a2, a0123456789abcd[v15 >> 4]);
      LOBYTE(v15) = a0123456789abcd[v15 & 0xF];
LABEL_28:
      std::string::push_back(a2, v15);
      v12 -= 8;
      if (v12 == -8)
        goto LABEL_29;
    }
  }
  v6 = *((_DWORD *)this + 3);
  if ((v6 & 2) != 0)
  {
    std::string::append(a2, "BE", 2uLL);
    v6 = *((_DWORD *)this + 3);
  }
  v7 = "F";
  if ((v6 & 1) == 0)
    v7 = "UI";
  if ((v6 & 4) != 0)
    v8 = "I";
  else
    v8 = v7;
  if ((v6 & 5) != 0)
    v9 = 1;
  else
    v9 = 2;
  std::string::append(a2, v8, v9);
  std::to_string(&v39, *((_DWORD *)this + 8));
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v39;
  else
    v10 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    size = v39.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v10, size);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
LABEL_29:
  std::string::push_back(a2, 64);
  std::to_string(&v39, (int)*(double *)this);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v39;
  else
    v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    v19 = v39.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v18, v19);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (v5 != 1819304813 && *((_DWORD *)this + 3))
  {
    std::string::append(a2, "/", 1uLL);
    v20 = *((_DWORD *)this + 3);
    if (v20)
    {
      memset(&v39, 0, sizeof(v39));
      do
      {
        std::string::push_back(&v39, a0123456789abcd[v20 & 0xF]);
        v21 = v20 >= 0x10;
        v20 >>= 4;
      }
      while (v21);
      v22 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      v23 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      v25 = v39.__r_.__value_.__l.__size_;
      v24 = v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v39;
      else
        v26 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v27 = v39.__r_.__value_.__l.__size_;
      v28 = (std::string *)((char *)v26 + v27 - 1);
      if (v27)
        v29 = v28 > v26;
      else
        v29 = 0;
      if (v29)
      {
        v30 = &v26->__r_.__value_.__s.__data_[1];
        do
        {
          v31 = *(v30 - 1);
          *(v30 - 1) = v28->__r_.__value_.__s.__data_[0];
          v28->__r_.__value_.__s.__data_[0] = v31;
          v28 = (std::string *)((char *)v28 - 1);
          v21 = v30++ >= (char *)v28;
        }
        while (!v21);
        v22 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        v25 = v39.__r_.__value_.__l.__size_;
        v24 = v39.__r_.__value_.__r.__words[0];
        v23 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      if (v23 >= 0)
        v32 = &v39;
      else
        v32 = (std::string *)v24;
      if (v23 >= 0)
        v33 = v22;
      else
        v33 = v25;
      std::string::append(a2, (const std::string::value_type *)v32, v33);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::append(a2, "0", 1uLL);
    }
  }
  if (*((_DWORD *)this + 5) != 1)
  {
    std::string::push_back(a2, 35);
    std::to_string(&v39, *((_DWORD *)this + 5));
    v34 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    v35 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v34, v35);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 7) >= 2u)
  {
    std::string::push_back(a2, 44);
    std::to_string(&v39, *((_DWORD *)this + 7));
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v39;
    else
      v36 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      v37 = v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v36, v37);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (v5 == 1819304813)
    {
      if ((*((_DWORD *)this + 3) & 0x20) != 0)
        v38 = 68;
      else
        v38 = 73;
      std::string::push_back(a2, v38);
    }
  }
}

void sub_18EEB97BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void DSPGraph::asDecompileString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  const std::string::value_type *v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  std::string::size_type v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const std::string::value_type *v12;
  unsigned int v13;
  void *v14;
  unint64_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;

  v3 = a2;
  LODWORD(a2) = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(_QWORD *)(a1 + 8))
    {
      a2 = 0;
      v3->__r_.__value_.__r.__words[0] = 0;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      goto LABEL_31;
    }
    v4 = *(const std::string::value_type **)a1;
    goto LABEL_6;
  }
  v4 = (const std::string::value_type *)a1;
  if (*(_BYTE *)(a1 + 23))
  {
LABEL_6:
    v5 = *v4;
    if ((v5 & 0x80000000) != 0)
    {
      v6 = __maskrune(*v4, 0x500uLL);
      LODWORD(a2) = *(unsigned __int8 *)(a1 + 23);
    }
    else
    {
      v6 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v5 + 60) & 0x500;
    }
    if (v5 != 95 && !v6)
    {
LABEL_11:
      v3->__r_.__value_.__r.__words[0] = 0;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      if ((a2 & 0x80) != 0)
      {
        a2 = *(std::string **)(a1 + 8);
        goto LABEL_31;
      }
      goto LABEL_12;
    }
    v7 = (char)a2 < 0;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = a2;
    if ((char)a2 < 0)
      v9 = *(_QWORD *)(a1 + 8);
    if (v9 < 2)
    {
LABEL_27:
      if ((a2 & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a1, v8);
      }
      else
      {
        *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      }
      return;
    }
    v10 = 1;
    v11 = MEMORY[0x1E0C80978];
    while (1)
    {
      v12 = *(const std::string::value_type **)a1;
      if (!v7)
        v12 = (const std::string::value_type *)a1;
      v13 = v12[v10];
      if ((v13 & 0x80000000) != 0)
      {
        if (!__maskrune(v12[v10], 0x500uLL))
        {
LABEL_23:
          v14 = memchr("_-+=|./:!@#$%^&*<>?~", v13, 0x15uLL);
          LODWORD(a2) = *(unsigned __int8 *)(a1 + 23);
          if (!v14)
            goto LABEL_11;
          goto LABEL_24;
        }
      }
      else if ((*(_DWORD *)(v11 + 4 * v13 + 60) & 0x500) == 0)
      {
        goto LABEL_23;
      }
      LODWORD(a2) = *(unsigned __int8 *)(a1 + 23);
LABEL_24:
      ++v10;
      v7 = (char)a2 < 0;
      v8 = *(_QWORD *)(a1 + 8);
      v15 = a2;
      if ((char)a2 < 0)
        v15 = *(_QWORD *)(a1 + 8);
      if (v10 >= v15)
        goto LABEL_27;
    }
  }
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
LABEL_12:
  a2 = (std::string *)a2;
LABEL_31:
  std::string::reserve(v3, (std::string::size_type)a2->__r_.__value_.__r.__words + 2);
  std::string::push_back(v3, 34);
  v16 = *(char *)(a1 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)a1;
  else
    v17 = *(const std::string::value_type **)a1;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a1 + 23);
  else
    v18 = *(_QWORD *)(a1 + 8);
  std::string::append(v3, v17, v18);
  std::string::push_back(v3, 34);
}

void sub_18EEB9A10(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::SimpleABL::SimpleABL(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 8) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 8) = 0;
  return this;
}

uint64_t DSPGraph::SimpleABL::SimpleABL(uint64_t this, AudioBufferList *a2)
{
  *(_QWORD *)this = a2;
  *(_BYTE *)(this + 8) = 0;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_BYTE *)(this + 8) = 0;
  return this;
}

void DSPGraph::SimpleABL::~SimpleABL(DSPGraph::SimpleABL *this)
{
  DSPGraph::SimpleABL::free(this);
}

{
  DSPGraph::SimpleABL::free(this);
}

uint64_t DSPGraph::SimpleABL::set(uint64_t this, AudioBufferList *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  if (*(_BYTE *)(this + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v4, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v3, "set");
    std::string::basic_string[abi:ne180100]<0>(&v2, "setting a buffer list which is already allocated.");
    DSPGraph::ThrowException(1869640255, &v4, 578, &v3, &v2);
  }
  *(_BYTE *)(this + 8) = 0;
  *(_QWORD *)this = a2;
  return this;
}

void sub_18EEB9B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::SimpleABL::zero(DSPGraph::SimpleABL *this, unsigned int a2, unsigned int a3)
{
  _DWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  v3 = *(_DWORD **)this;
  if (*(_QWORD *)this && *v3)
  {
    v5 = 0;
    v6 = a2;
    v7 = 4;
    v8 = a3;
    do
    {
      bzero((void *)(*(_QWORD *)&v3[v7] + v6), v8);
      ++v5;
      v3 = *(_DWORD **)this;
      v7 += 4;
    }
    while (v5 < **(unsigned int **)this);
  }
}

void DSPGraph::SimpleABL::zero(DSPGraph::SimpleABL *this)
{
  _DWORD *v1;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_DWORD **)this;
  if (*(_QWORD *)this && *v1)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      bzero(*(void **)&v1[v3 + 4], v1[v3 + 3]);
      ++v4;
      v1 = *(_DWORD **)this;
      v3 += 4;
    }
    while (v4 < **(unsigned int **)this);
  }
}

_QWORD *DSPGraph::SimpleABL::copy(_QWORD *this, DSPGraph::SimpleABL *a2, int a3)
{
  _DWORD *v3;
  _DWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  _DWORD *v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = (_DWORD *)*this;
  if (!*this)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v13, "copy");
    std::string::basic_string[abi:ne180100]<0>(&v12, "null internal ABL");
    DSPGraph::ThrowException(1768843553, &v14, 635, &v13, &v12);
  }
  v4 = *(_DWORD **)a2;
  if (!*(_QWORD *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v13, "copy");
    std::string::basic_string[abi:ne180100]<0>(&v12, "null destination ABL");
    DSPGraph::ThrowException(1768843553, &v14, 639, &v13, &v12);
  }
  if (*v3 != *v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v13, "copy");
    std::string::basic_string[abi:ne180100]<0>(&v12, "mABL->mNumberBuffers != toABL->mNumberBuffers");
    DSPGraph::ThrowException(1718444833, &v14, 642, &v13, &v12);
  }
  if (*v3)
  {
    v6 = this;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = v3[v7 + 3];
      v10 = &v4[v7];
      if (v9 > v4[v7 + 3])
      {
        std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v13, "copy");
        DSPGraph::strprintf((DSPGraph *)"mABL->mBuffers[%u].mDataByteSize (%u) > toABL->mBuffers[%u].mDataByteSize (%u)", &v12, v8, *(unsigned int *)(*v6 + 16 * v8 + 12), v8, v10[3]);
        DSPGraph::ThrowException(1718775073, &v14, 648, &v13, &v12);
      }
      v11 = *(_QWORD **)&v3[v7 + 4];
      this = (_QWORD *)*((_QWORD *)v10 + 2);
      if (v11 != this)
      {
        this = memcpy(this, v11, v9);
        v3 = (_DWORD *)*v6;
      }
      if (a3)
        v10[3] = v3[v7 + 3];
      ++v8;
      v7 += 4;
    }
    while (v8 < *v3);
  }
  return this;
}

void sub_18EEB9E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (*(char *)(v25 - 49) < 0)
    operator delete(*(void **)(v25 - 72));
  _Unwind_Resume(exception_object);
}

void DSPGraph::RingBuffer::~RingBuffer(DSPGraph::RingBuffer *this)
{
  DSPGraph::SimpleABL::free(this);
  DSPGraph::SimpleABL::free(this);
}

{
  DSPGraph::SimpleABL::free(this);
  DSPGraph::SimpleABL::free(this);
}

unsigned int **DSPGraph::RingBuffer::write(DSPGraph::RingBuffer *this, uint64_t a2, unsigned int **a3)
{
  return DSPGraph::RingBuffer::write(this, a2, a2, a3);
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

unsigned int **DSPGraph::RingBuffer::read(DSPGraph::RingBuffer *this, unsigned int a2, DSPGraph::SimpleABL *a3)
{
  return DSPGraph::RingBuffer::read(this, a2, a2, a3);
}

void MP4BoxParser_SampleDescription::~MP4BoxParser_SampleDescription(MP4BoxParser_SampleDescription *this)
{
  MP4BoxParser_SampleDescription::~MP4BoxParser_SampleDescription(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E2909730;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
    free(v2);
  std::unique_ptr<MP4AudioESDS>::reset[abi:ne180100]((uint64_t *)this + 23, 0);
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  CACFDictionary::~CACFDictionary((MP4BoxParser_SampleDescription *)((char *)this + 104));
  v5 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t MP4BoxParser_SampleDescription::Init(MP4BoxParser_SampleDescription *this)
{
  uint64_t result;

  result = MP4BoxParser_Full::Initialize(this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) == 1937011556)
      return MP4BoxParser_SampleDescription::DeserializeBoxFieldsFromDataSource((MP4BoxParser **)this);
    else
      return 4294967294;
  }
  return result;
}

uint64_t MP4BoxParser_Full::GetBoxHeaderSize(MP4BoxParser_Full *this)
{
  return (*((_DWORD *)this + 9) + 4);
}

uint64_t MP4BoxParser_SampleDescription::DeserializeBoxFieldsFromDataSource(MP4BoxParser **this)
{
  unsigned int v2;
  uint64_t DataSourceSize;
  unsigned int v4;
  uint64_t v6;
  uint64_t DataSourceBytes;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void **v29;
  void *v30;
  int v31;
  char v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v37;
  size_t v38;
  MP4BoxParser *v39;
  uint64_t v40;
  int v41;
  const __CFString *v42;
  const __CFString *v43;
  std::vector<char>::size_type v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  size_t v48;
  MP4BoxParser *v49;
  void *v50;
  uint64_t v51;
  char *v52;
  MP4BoxParser *v53;
  MP4BoxParser *v54;
  const __CFString *v55;
  const __CFData *v56;
  int v57;
  MP4BoxParser *v58;
  uint64_t v59;
  BOOL v60;
  size_t v61;
  MP4BoxParser *v62;
  uint64_t v63;
  const UInt8 *v64;
  CACFDictionary *v65;
  _QWORD *v66;
  CFAllocatorRef v67;
  void **v68;
  std::vector<char> *v69;
  unsigned int v70;
  unsigned int outPropertyData;
  __int128 inSpecifier;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  UInt32 outPropertyDataSize[2];
  uint64_t v77;
  uint64_t v78;
  void *v79[3];
  uint64_t v80;
  unsigned int v81[2];
  uint64_t v82;
  unsigned __int16 v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v2 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
  v82 = 0;
  DataSourceSize = MP4BoxParser::GetDataSourceSize(this[1], &v82);
  if (!(_DWORD)DataSourceSize)
  {
    DataSourceSize = MP4BoxParser::ReadDataSourceBytes(this[1], v2, 4uLL, (char *)this + 60);
    v4 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 15) = bswap32(v4);
    if (!(_DWORD)DataSourceSize)
    {
      if (!v4)
        return 0;
      DataSourceSize = MP4BoxParser::ReadDataSourceBytes(this[1], v2 + 4, 8uLL, v81);
      if (!(_DWORD)DataSourceSize)
      {
        DataSourceSize = 1667787583;
        v6 = bswap32(v81[0]);
        if (v82 - (v2 + 4) + 8 >= v6)
        {
          *((_DWORD *)this + 16) = bswap32(v81[1]);
          if ((v6 + 2147483640) >= 0x8000001C)
          {
            DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v2 + 20, 8uLL, &v83);
            if ((_DWORD)DataSourceBytes)
              return DataSourceBytes;
            DataSourceBytes = 1718449215;
            v8 = bswap32(v83) >> 16;
            *((_DWORD *)this + 17) = v8;
            if (v8 != *((unsigned __int8 *)this + 56))
              return DataSourceBytes;
            v9 = *((_DWORD *)this + 16);
            if (v9 == 1768973165 || v9 == 1718641517)
            {
              LOWORD(v79[0]) = 0;
              DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v2 + 28, 2uLL, v79);
              *((_WORD *)this + 60) = bswap32(LOWORD(v79[0])) >> 16;
              if ((_DWORD)DataSourceBytes)
                return DataSourceBytes;
              LOWORD(outPropertyDataSize[0]) = 0;
              DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v2 + 30, 2uLL, outPropertyDataSize);
              if ((_DWORD)DataSourceBytes)
                return DataSourceBytes;
              *((_WORD *)this + 61) = bswap32(LOWORD(outPropertyDataSize[0])) >> 16;
              LOWORD(v80) = 0;
              DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v2 + 32, 2uLL, &v80);
              if ((_DWORD)DataSourceBytes)
                return DataSourceBytes;
              LODWORD(inSpecifier) = 0;
              DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v2 + 36, 4uLL, &inSpecifier);
              if ((_DWORD)DataSourceBytes)
                return DataSourceBytes;
              *((_DWORD *)this + 31) = bswap32(inSpecifier) >> 16;
            }
            v10 = v6 - 36;
            if ((v6 - 36) >= 9)
            {
              DataSourceSize = 0;
              v70 = v2 + 40;
              v64 = (const UInt8 *)&v80 + 4;
              v67 = (CFAllocatorRef)*MEMORY[0x1E0C9AE00];
              v69 = (std::vector<char> *)(this + 20);
              v66 = this + 16;
              v68 = (void **)(this + 23);
              v65 = (CACFDictionary *)(this + 13);
              while (1)
              {
                v11 = v70;
                DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v70, 8uLL, &v80);
                if ((_DWORD)DataSourceBytes)
                  return DataSourceBytes;
                v12 = bswap32(v80);
                v13 = v10 - v12;
                if (v10 < v12 || v12 <= 7)
                  return 0;
                v15 = HIDWORD(v80);
                std::vector<unsigned char>::vector(v79, v12);
                v16 = (unsigned int *)v79[0];
                v17 = MP4BoxParser::ReadDataSourceBytes(this[1], v11, v12, v79[0]);
                v18 = v17;
                if ((_DWORD)v17)
                {
                  v19 = 0;
                  DataSourceSize = v17;
                  goto LABEL_146;
                }
                v20 = bswap32(v15);
                v21 = (v12 - 8);
                v22 = v16 + 2;
                v70 += v12;
                if (v20 > 1702061170)
                {
                  if (v20 <= 1935767393)
                  {
                    if (v20 <= 1885564226)
                    {
                      if (v20 != 1702061171 && v20 != 1832149349)
                        goto LABEL_121;
                      v18 = 0;
                      if (v21 >= 5 && !this[11])
                      {
                        v28 = operator new();
                        DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)(v28 + 296));
                        v29 = v68;
                        std::unique_ptr<MP4AudioESDS>::reset[abi:ne180100]((uint64_t *)v68, v28);
                        v30 = *v29;
                        if (!*v29)
                          goto LABEL_99;
                        *(_QWORD *)outPropertyDataSize = v16 + 3;
                        v77 = (uint64_t)v16 + (v12 - 12) + 12;
                        v78 = 0;
                        if (((unint64_t)(v16 + 3) & 3) != 0)
                        {
                          v31 = 0;
                          v32 = (_BYTE)v16 + 13;
                          v33 = -8;
                          v34 = (unint64_t)v16 + 13;
                          do
                          {
                            LODWORD(v78) = v31 << 8;
                            HIDWORD(v78) = v33 + 16;
                            *(_QWORD *)outPropertyDataSize = v34;
                            v35 = *(unsigned __int8 *)(v34 - 1) | (v31 << 8);
                            LODWORD(v78) = v35;
                            v33 += 8;
                            if ((v32 & 3) == 0)
                              break;
                            ++v32;
                            v31 = v35;
                          }
                          while (v34++ < (unint64_t)v16 + (v12 - 12) + 12);
                          LODWORD(v78) = v35 << (24 - v33);
                        }
                        bzero(v30, 0x5F0uLL);
                        v18 = MP4AudioESDS::Deserialize((uint64_t)*v68, (uint64_t)outPropertyDataSize, 0, 0);
                        if (!(_DWORD)v18)
                        {
                          v37 = (uint64_t)*v68;
                          if ((*((_DWORD *)*v68 + 76) - 105) >= 0xFFFFFFFD)
                          {
                            *(_DWORD *)(v37 + 304) = 64;
                            v38 = DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount((DecoderConfigDescr *)(v37 + 296))
                                + 37;
                            *((_DWORD *)this + 24) = v38;
                            CA_calloc(v38);
                            this[11] = v39;
                            v40 = *((unsigned int *)this + 24);
                            *(_QWORD *)&inSpecifier = v39;
                            *((_QWORD *)&inSpecifier + 1) = v39;
                            *(_QWORD *)&v73 = (char *)v39 + v40;
                            *((_QWORD *)&v73 + 1) = 0x2000000000;
                            LODWORD(v74) = v39 & 3;
                            MP4AudioESDS::Serialize((uint64_t)this[23], (uint64_t)&inSpecifier, 0, 0);
                            goto LABEL_133;
                          }
                        }
                      }
LABEL_100:
                      if (v21 >= 5 && !this[11])
                      {
                        v48 = (v12 - 12);
                        *((_DWORD *)this + 24) = v48;
                        CA_calloc(v48);
                        this[11] = v49;
                        memcpy(v49, v16 + 3, *((unsigned int *)this + 24));
                      }
                      if (*((_DWORD *)this + 16) == 1685220723)
                        *((_DWORD *)this + 18) = v20;
                      goto LABEL_134;
                    }
                    if (v20 == 1885564227)
                    {
                      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v66, (char *)v79[0], (char *)v79[0] + v12, v12);
                      goto LABEL_133;
                    }
                    if (v20 != 1935764850)
                      goto LABEL_121;
                  }
                  else
                  {
                    if (v20 > 1936289381)
                    {
                      switch(v20)
                      {
                        case 1936289382:
                          v18 = 0;
                          v19 = 1;
                          if (v21 >= 0x20 && *((_DWORD *)this + 16) == 1701733217)
                          {
                            if (bswap32(v16[2]) >= 0xC && v16[3] == 1634562662)
                              *((_DWORD *)this + 19) = bswap32(v16[4]);
                            v18 = 0;
                            if (bswap32(v16[5]) >= 0x14 && v16[6] == 1835557747)
                            {
                              v18 = 0;
                              *((_DWORD *)this + 20) = bswap32(v16[8]);
                            }
                          }
                          goto LABEL_135;
                        case 1936875892:
                          v18 = 0;
                          v19 = 1;
                          if (v21 >= 8 && *((_DWORD *)this + 17))
                          {
                            v18 = 0;
                            *((_DWORD *)this + 31) = bswap32(v16[3]);
                          }
                          goto LABEL_135;
                        case 2002876005:
                          if (v21 < 8)
                            goto LABEL_133;
                          v23 = 0;
                          v24 = (unint64_t)v16 + v21 + 8;
                          v25 = v16 + 4;
                          while (1)
                          {
                            v26 = bswap32(*v22);
                            v19 = v26 > 7;
                            if (v26 < 8)
                            {
                              v18 = 0;
                              DataSourceSize = 1718449215;
                              goto LABEL_135;
                            }
                            v27 = v22[1];
                            v18 = bswap32(v27);
                            if ((_DWORD)v18 == 1718775137)
                            {
                              v22 += 3;
                              if (v24 < (unint64_t)v22)
                                goto LABEL_133;
                              v23 = bswap32(*v25);
                            }
                            else
                            {
                              if (!(_DWORD)v18)
                                goto LABEL_134;
                              if (v27 == 1935962981 && v23 == 1836069985)
                              {
                                v60 = v26 >= 0xC && this[11] == 0;
                                if (v60 && (int)v26 - 8 <= (int)v24 - (int)v25)
                                {
                                  v61 = (v26 - 12);
                                  *((_DWORD *)this + 24) = v61;
                                  CA_calloc(v61);
                                  this[11] = v62;
                                  memcpy(v62, v22 + 3, *((unsigned int *)this + 24));
                                }
                                goto LABEL_133;
                              }
                              v22 = (unsigned int *)((char *)v22 + v26);
                            }
                            v25 = v22 + 2;
                            v19 = 1;
                            if (v24 < (unint64_t)(v22 + 2))
                              goto LABEL_120;
                          }
                      }
                      goto LABEL_121;
                    }
                    if (v20 != 1935767394)
                    {
                      if (v20 == 1935832164)
                      {
                        if (v21 >= 5)
                        {
                          v42 = CFStringCreateWithBytes(v67, (const UInt8 *)v16 + 12, (v12 - 12), 0x8000100u, 0);
                          v43 = v42;
                          if (v42)
                          {
                            *((_DWORD *)this + 38) = BitDepthFromCFString(v42);
                            CFRelease(v43);
                          }
                        }
                        goto LABEL_133;
                      }
                      goto LABEL_121;
                    }
                  }
                  if (this[11])
                    goto LABEL_133;
                  *((_DWORD *)this + 24) = 47;
                  CA_calloc(0x2FuLL);
                  this[11] = (MP4BoxParser *)v46;
                  v47 = *((unsigned int *)this + 24);
                  if (v47 >= 0x2F && v21 + 38 <= v47)
                  {
                    *(_QWORD *)v46 = 0x616D72660C000000;
                    *(_DWORD *)(v46 + 8) = v15;
                    *(_QWORD *)(v46 + 12) = 0x61646E650A000000;
                    *(_WORD *)(v46 + 20) = 0;
                    HIDWORD(v80) = 1919770980;
                    *(_QWORD *)(v46 + 22) = v80;
                    v59 = v46 + 30;
                    memcpy((void *)(v46 + 30), v22, (v12 - 8));
                    v18 = 0;
                    *(_QWORD *)(v59 + v21) = 0x8000000;
                    goto LABEL_134;
                  }
                  v19 = 0;
                  v18 = 0xFFFFFFFFLL;
                  DataSourceSize = 0xFFFFFFFFLL;
                  goto LABEL_135;
                }
                if (v20 > 1684103986)
                {
                  if (v20 > 1684425824)
                  {
                    if (v20 == 1684425825)
                      goto LABEL_88;
                    v41 = 1700998451;
                  }
                  else
                  {
                    if (v20 == 1684103987)
                      goto LABEL_88;
                    v41 = 1684366131;
                  }
                  if (v20 != v41)
                    goto LABEL_121;
                }
                else
                {
                  if (v20 > 1667785069)
                  {
                    if (v20 == 1667785070)
                    {
                      std::vector<unsigned char>::resize(v69, (v12 - 8));
                      v50 = memcpy(this[20], v16 + 2, (v12 - 8));
                      if (*((_DWORD *)this + 16) != 1634492771 || !this[11])
                        goto LABEL_133;
                      MEMORY[0x1E0C80A78](v50);
                      v52 = (char *)&v63 - ((v51 + 15) & 0x1FFFFFFF0);
                      v53 = this[11];
                      memcpy(v52, v53, *((unsigned int *)this + 24));
                      free(v53);
                      LODWORD(v53) = *((_DWORD *)this + 24) + v12;
                      CA_calloc(v53);
                      this[11] = v54;
                      memcpy(v54, v52, *((unsigned int *)this + 24));
                      memcpy((char *)this[11] + *((unsigned int *)this + 24), v79[0], v12);
                      *((_DWORD *)this + 24) = (_DWORD)v53;
                      v19 = 1;
LABEL_120:
                      v18 = 0;
                      goto LABEL_135;
                    }
                    if (v20 == 1667788396)
                    {
                      v73 = 0u;
                      v74 = 0u;
                      inSpecifier = 0u;
                      outPropertyDataSize[0] = 0;
                      HIDWORD(v73) = *((unsigned __int16 *)this + 60);
                      *((void **)&v74 + 1) = v79[0];
                      v75 = v12;
                      if (!AudioFormatGetPropertyInfo(0x6463636Cu, 0x38u, &inSpecifier, outPropertyDataSize))
                      {
                        std::vector<unsigned char>::resize(v69, outPropertyDataSize[0]);
                        if (AudioFormatGetProperty(0x6463636Cu, 0x38u, &inSpecifier, outPropertyDataSize, v69->__begin_))
                        {
                          v44 = 0;
                        }
                        else
                        {
                          v44 = outPropertyDataSize[0];
                        }
                        std::vector<unsigned char>::resize(v69, v44);
                      }
LABEL_133:
                      v18 = 0;
LABEL_134:
                      v19 = 1;
LABEL_135:
                      v10 = v13;
                      goto LABEL_146;
                    }
LABEL_121:
                    outPropertyData = 0;
                    if (IsConfigBoxForCodingName(*((_DWORD *)this + 16), v20, &outPropertyData))
                    {
                      if (!this[11])
                        MP4BoxParser_SampleDescription::GetMagicCookieAndAudioChannelLayoutFromConfigBox((MP4BoxParser_SampleDescription *)this, *((_DWORD *)this + 16), outPropertyData, v20, v12, v79[0]);
                    }
                    else
                    {
                      v55 = CFStringCreateWithBytes(v67, v64, 4, 0x8000100u, 0);
                      if (v55)
                      {
                        *(_QWORD *)&inSpecifier = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
                        WORD4(inSpecifier) = 257;
                        *(_QWORD *)outPropertyDataSize = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
                        LOWORD(v77) = 257;
                        if (CACFDictionary::HasKey(v65, v55))
                        {
                          CACFDictionary::GetCACFArray(v65, v55, (CACFArray *)&inSpecifier);
                          if (*((_BYTE *)this + 113))
                          {
                            if (*(_QWORD *)v65)
                              CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)v65, v55);
                          }
                        }
                        CACFArray::SetCFMutableArrayFromCopy((CACFArray *)outPropertyDataSize, (CFArrayRef)inSpecifier);
                        v56 = CFDataCreate(0, (const UInt8 *)v22, (v12 - 8));
                        CACFArray::AppendData((CACFArray *)outPropertyDataSize, v56);
                        CFRelease(v56);
                        CACFDictionary::AddArray(v65, v55, *(const __CFArray **)outPropertyDataSize);
                        CFRelease(v55);
                        CACFArray::~CACFArray((CACFArray *)outPropertyDataSize);
                        CACFArray::~CACFArray((CACFArray *)&inSpecifier);
                      }
                    }
                    goto LABEL_133;
                  }
                  if (v20 != 1633889587)
                  {
                    if (v20 != 1634492771)
                      goto LABEL_121;
LABEL_99:
                    v18 = 0;
                    goto LABEL_100;
                  }
                }
LABEL_88:
                if (this[11])
                  goto LABEL_140;
                v45 = *((_DWORD *)this + 16);
                if (v45 > 1700998450)
                {
                  if (v45 != 1716281667)
                  {
                    if (v45 != 1701733217)
                    {
                      v10 = v13;
                      if (v45 != 1700998451)
                        goto LABEL_141;
                      if (v15 != 862152036)
                        goto LABEL_144;
                    }
                    goto LABEL_139;
                  }
                  v57 = 1632396900;
LABEL_138:
                  if (v15 != v57)
                  {
                    v10 = v13;
LABEL_144:
                    v18 = 0;
                    goto LABEL_145;
                  }
LABEL_139:
                  *((_DWORD *)this + 24) = v12;
                  CA_calloc(v12);
                  this[11] = v58;
                  memcpy(v58, v79[0], *((unsigned int *)this + 24));
LABEL_140:
                  v45 = *((_DWORD *)this + 16);
                  v10 = v13;
                  goto LABEL_141;
                }
                if (v45 == 1633889587)
                {
                  v57 = 862151012;
                  goto LABEL_138;
                }
                v10 = v13;
                if (v45 == 1685220723)
                  goto LABEL_139;
LABEL_141:
                if (v45 != 1685220723)
                  goto LABEL_144;
                v18 = 0;
                *((_DWORD *)this + 18) = v20;
LABEL_145:
                v19 = 1;
LABEL_146:
                if (v79[0])
                {
                  v79[1] = v79[0];
                  operator delete(v79[0]);
                }
                if (!v19)
                  return DataSourceSize;
                if (v10 < 9)
                  return v18;
              }
            }
            return 0;
          }
        }
      }
    }
  }
  return DataSourceSize;
}

void sub_18EEBAD48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 184);
  if (v3)
  {
    *(_QWORD *)(v1 - 176) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<MP4AudioESDS>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2 + 1504);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2 + 1488);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void CA_calloc(size_t a1)
{
  void *v2;
  std::bad_alloc *exception;
  std::bad_alloc *v4;

  v2 = malloc_type_malloc(a1, 0x2C8E6D5CuLL);
  if (a1 && !v2)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v2, a1);
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void std::vector<unsigned char>::resize(std::vector<char> *this, std::vector<char>::size_type __sz)
{
  std::vector<char>::size_type v2;
  BOOL v3;
  std::vector<char>::size_type v4;

  v2 = this->__end_ - this->__begin_;
  v3 = __sz >= v2;
  v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<unsigned char>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

BOOL IsConfigBoxForCodingName(int a1, int a2, unsigned int *outPropertyData)
{
  BOOL v5;
  UInt32 v6;
  UInt32 v10;
  UInt32 ioPropertyDataSize[2];
  int v12;
  uint64_t inSpecifier;
  int v14;

  if (a1 == 1685220723)
  {
    inSpecifier = 0x46D703466;
    v14 = a2;
    ioPropertyDataSize[0] = 4;
    v5 = AudioFormatGetProperty(0x6964656Eu, 0xCu, &inSpecifier, ioPropertyDataSize, outPropertyData) == 0;
    v6 = ioPropertyDataSize[0];
  }
  else
  {
    inSpecifier = 0x46D703466;
    v14 = a1;
    v12 = 0;
    *(_QWORD *)ioPropertyDataSize = 0;
    v10 = 12;
    if (AudioFormatGetProperty(0x656E636Eu, 0xCu, &inSpecifier, &v10, ioPropertyDataSize))
      return 0;
    if (v10 != 12 || v12 != a2)
      return 0;
    v10 = 4;
    v5 = AudioFormatGetProperty(0x6964636Eu, 0xCu, &inSpecifier, &v10, outPropertyData) == 0;
    v6 = v10;
  }
  return v5 && v6 == 4;
}

void MP4BoxParser_SampleDescription::GetMagicCookieAndAudioChannelLayoutFromConfigBox(MP4BoxParser_SampleDescription *this, int a2, int a3, int a4, unsigned int a5, void *a6)
{
  void *v10;
  size_t v11;
  void *v12;
  UInt32 v13;
  _DWORD *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::bad_alloc *exception;
  std::bad_alloc *v22;
  UInt32 ioPropertyDataSize;
  _OWORD outPropertyData[2];
  __int128 v25;
  UInt32 v26;
  UInt32 outPropertyDataSize;
  _DWORD inSpecifier[2];
  void *v29;
  uint64_t v30;
  _DWORD buf[8];
  uint64_t v32;
  void *v33;
  UInt32 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  inSpecifier[0] = a3;
  inSpecifier[1] = 1836069990;
  v29 = a6;
  v30 = a5;
  outPropertyDataSize = 0;
  if (AudioFormatGetPropertyInfo(0x6D636563u, 0x18u, inSpecifier, &outPropertyDataSize))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(_QWORD *)&buf[1] = "MP4_BoxParser_SampleDescription.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 452;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  CanonicalMagicCookieFromEncapsulatedMagicCookie not supported for specifier", (uint8_t *)buf, 0x12u);
    }
LABEL_4:
    v10 = 0;
    goto LABEL_5;
  }
  v11 = outPropertyDataSize;
  v12 = malloc_type_malloc(outPropertyDataSize, 0x2C8E6D5CuLL);
  v10 = v12;
  if ((_DWORD)v11 && !v12)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v22 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v12, v11);
  if (AudioFormatGetProperty(0x6D636563u, 0x18u, inSpecifier, &outPropertyDataSize, v10))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(_QWORD *)&buf[1] = "MP4_BoxParser_SampleDescription.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 456;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Couldn't extract magic cookie", (uint8_t *)buf, 0x12u);
    }
  }
  else
  {
    v13 = outPropertyDataSize;
    *((_DWORD *)this + 24) = outPropertyDataSize;
    *((_QWORD *)this + 11) = v10;
    if (a2 == 1685220723)
      *((_DWORD *)this + 18) = a4;
    if (v10)
    {
      v32 = 0;
      v35 = 0;
      memset(buf, 0, sizeof(buf));
      v33 = v10;
      v34 = v13;
      v26 = 0;
      buf[2] = a3;
      if (AudioFormatGetPropertyInfo(0x636C6669u, 0x38u, buf, &v26))
      {
        v25 = 0u;
        memset(outPropertyData, 0, sizeof(outPropertyData));
        ioPropertyDataSize = 48;
        if (!AudioFormatGetProperty(0x666C7374u, 0x38u, buf, &ioPropertyDataSize, outPropertyData))
        {
          v14 = (_DWORD *)*((_QWORD *)this + 20);
          v15 = *((_QWORD *)this + 21) - (_QWORD)v14;
          if (v15 > 0x1F)
          {
            if (v15 != 32)
              *((_QWORD *)this + 21) = v14 + 8;
          }
          else
          {
            std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 160), 32 - v15);
            v14 = (_DWORD *)*((_QWORD *)this + 20);
          }
          *v14 = DWORD2(v25);
        }
      }
      else
      {
        v16 = (char *)*((_QWORD *)this + 20);
        v17 = *((_QWORD *)this + 21) - (_QWORD)v16;
        if (v26 <= v17)
        {
          if (v26 < v17)
            *((_QWORD *)this + 21) = &v16[v26];
        }
        else
        {
          std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 160), v26 - v17);
          v16 = (char *)*((_QWORD *)this + 20);
        }
        if (AudioFormatGetProperty(0x636C6669u, 0x38u, buf, &v26, v16))
          v18 = 0;
        else
          v18 = v26;
        v19 = *((_QWORD *)this + 20);
        v20 = *((_QWORD *)this + 21) - v19;
        if (v18 <= v20)
        {
          if (v18 < v20)
            *((_QWORD *)this + 21) = v19 + v18;
        }
        else
        {
          std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 160), v18 - v20);
        }
      }
      goto LABEL_4;
    }
  }
LABEL_5:
  free(v10);
}

CFMutableArrayRef CACFArray::SetCFMutableArrayFromCopy(CACFArray *this, CFArrayRef theArray)
{
  const void *v4;
  CFMutableArrayRef result;

  if (*((_BYTE *)this + 8))
  {
    v4 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v4);
  }
  result = CFArrayCreateMutableCopy(0, 0, theArray);
  *(_QWORD *)this = result;
  *((_WORD *)this + 4) = 257;
  return result;
}

void CACFArray::~CACFArray(CACFArray *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

uint64_t MP4BoxParser_SampleDescription::MP4BoxParser_SampleDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &off_1E2902718;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a3);
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 8;
  *(_QWORD *)a1 = &off_1E2909730;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 104) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_WORD *)(a1 + 112) = 257;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  return a1;
}

void sub_18EEBB5B4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2;
  v5 = v1[1];
  *v1 = v3;
  v1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_SampleDescription::GetASBD(MP4BoxParser_SampleDescription *this, AudioStreamBasicDescription *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, unsigned int *a8)
{
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t Property;
  uint64_t v15;
  uint64_t StreamDescription;
  unsigned __int8 v17;
  unint64_t v18;
  AudioFormatFlags mFormatFlags;
  int v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t mFormatID;
  UInt32 v25;
  UInt32 v26;
  AudioFormatFlags v27;
  UInt32 v28;
  const void *v29;
  UInt32 v30;
  UInt32 *p_inSpecifier;
  AudioFormatPropertyID v32;
  int SourceBitDepthFromASBD;
  Float64 v34;
  int v35;
  int v36;
  unsigned int v38;
  unsigned int *v39;
  uint64_t inSpecifier;
  BOOL *v41;
  unsigned int *v42;
  UInt32 v43;

  v43 = 40;
  HIDWORD(v10) = 0;
  *(_OWORD *)&a2->mSampleRate = 0u;
  *(_OWORD *)&a2->mBytesPerPacket = 0u;
  *(_QWORD *)&a2->mBitsPerChannel = 0;
  v11 = *((_DWORD *)this + 16);
  if (v11 == 1701733217)
  {
    v11 = *((_DWORD *)this + 19);
  }
  else if (v11 == 1685220723)
  {
    v12 = *((_DWORD *)this + 18);
    if (v12 != 1684103987)
    {
      if (v12 != 1684366131)
      {
        if (v12 != 1702061171)
        {
          v11 = 1685220723;
          goto LABEL_36;
        }
        goto LABEL_30;
      }
LABEL_18:
      Property = ParseEAC3MP4Cookie(*((unsigned int **)this + 11), *((_DWORD *)this + 24), (BOOL *)a2, 0, 0, 0, a7, a8, v39, inSpecifier, v41, v42);
LABEL_50:
      StreamDescription = Property;
      goto LABEL_51;
    }
LABEL_25:
    v20 = (*(uint64_t (**)(MP4BoxParser_SampleDescription *))(*(_QWORD *)this + 24))(this);
    StreamDescription = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), (v20 + 4), 0x2FuLL, &inSpecifier);
    if ((_DWORD)StreamDescription)
      goto LABEL_51;
    *(_QWORD *)&a2->mBitsPerChannel = 0;
    *(_OWORD *)&a2->mSampleRate = 0u;
    *(_OWORD *)&a2->mBytesPerPacket = 0u;
    Property = ParseAC3MP4Cookie(*((unsigned __int8 **)this + 11), *((_DWORD *)this + 24), a2, 0, v21, v22);
    goto LABEL_50;
  }
  if (v11 > 1768973164)
  {
    if (v11 > 1836069984)
    {
      if (v11 == 1935767394)
      {
        a2->mFormatID = 1935767394;
        a2->mChannelsPerFrame = 1;
        v34 = 16000.0;
      }
      else
      {
        if (v11 != 1935764850)
        {
          v13 = 1836069985;
          goto LABEL_29;
        }
        a2->mFormatID = 1935764850;
        a2->mChannelsPerFrame = 1;
        v34 = 8000.0;
      }
      a2->mSampleRate = v34;
LABEL_48:
      v30 = *((_DWORD *)this + 24);
      v29 = (const void *)*((_QWORD *)this + 11);
      p_inSpecifier = &v43;
      v32 = 1718449257;
LABEL_49:
      Property = AudioFormatGetProperty(v32, v30, v29, p_inSpecifier, a2);
      goto LABEL_50;
    }
    if (v11 == 1768973165)
      goto LABEL_38;
    v13 = 1832149349;
LABEL_29:
    if (v11 == v13)
    {
LABEL_30:
      v23 = *((_QWORD *)this + 23);
      if (!v23)
        goto LABEL_42;
      StreamDescription = DecoderConfigDescr::MakeStreamDescription((DecoderConfigDescr *)(v23 + 296), a2, 0.0);
      if ((_DWORD)StreamDescription)
        goto LABEL_51;
      mFormatID = a2->mFormatID;
      if ((_DWORD)mFormatID != 1634497332 && (_DWORD)mFormatID != 1936487278 && (_DWORD)mFormatID != 1936487267)
      {
LABEL_42:
        StreamDescription = 0;
        goto LABEL_51;
      }
      mFormatFlags = a2->mFormatFlags;
      goto LABEL_61;
    }
    goto LABEL_36;
  }
  if (v11 > 1700998450)
  {
    if (v11 == 1700998451)
      goto LABEL_18;
    if (v11 == 1716281667)
    {
      a2->mFormatID = 1718378851;
      StreamDescription = AudioFormatGetProperty(0x666D7469u, *((_DWORD *)this + 24), *((const void **)this + 11), &v43, a2);
      if ((_DWORD)StreamDescription)
        goto LABEL_51;
      SourceBitDepthFromASBD = GetSourceBitDepthFromASBD((const AudioStreamBasicDescription *)a2->mFormatID, a2->mFormatFlags);
      goto LABEL_62;
    }
    if (v11 != 1718641517)
      goto LABEL_36;
LABEL_38:
    LODWORD(inSpecifier) = 40;
    LODWORD(v10) = *((_DWORD *)this + 31);
    v25 = *((unsigned __int16 *)this + 60);
    v26 = *((unsigned __int16 *)this + 61);
    a2->mSampleRate = (double)v10;
    if (v11 == 1718641517)
      v27 = 11;
    else
      v27 = 14;
    a2->mFormatID = 1819304813;
    a2->mFormatFlags = v27;
    v28 = (v26 >> 3) * v25;
    a2->mBytesPerPacket = v28;
    a2->mFramesPerPacket = 1;
    a2->mBytesPerFrame = v28;
    a2->mChannelsPerFrame = v25;
    a2->mBitsPerChannel = v26;
    v29 = (const void *)*((_QWORD *)this + 16);
    v30 = *((_DWORD *)this + 34) - (_DWORD)v29;
    p_inSpecifier = (UInt32 *)&inSpecifier;
    v32 = 1885565796;
    goto LABEL_49;
  }
  if (v11 == 1633889587)
    goto LABEL_25;
  if (v11 != 1634492771)
  {
LABEL_36:
    inSpecifier = 0x46D703466;
    LODWORD(v41) = v11;
    HIDWORD(v39) = 4;
    StreamDescription = AudioFormatGetProperty(0x6964636Eu, 0xCu, &inSpecifier, (UInt32 *)&v39 + 1, &a2->mFormatID);
    if ((_DWORD)StreamDescription)
      goto LABEL_51;
    goto LABEL_48;
  }
  v15 = *((_QWORD *)this + 11);
  StreamDescription = 4294967246;
  if (v15 && *((_DWORD *)this + 24) >= 0x18u)
  {
    a2->mFormatID = 1634492771;
    a2->mSampleRate = (double)bswap32(*(_DWORD *)(v15 + 20));
    HIDWORD(v18) = *(unsigned __int8 *)(v15 + 5);
    LODWORD(v18) = (HIDWORD(v18) << 24) - 0x10000000;
    v17 = v18 >> 26;
    if (v17 > 4u)
      mFormatFlags = 0;
    else
      mFormatFlags = dword_18F10D908[v17];
    a2->mFormatFlags = mFormatFlags;
    a2->mChannelsPerFrame = *(unsigned __int8 *)(v15 + 9);
    v38 = bswap32(*(_DWORD *)v15);
    a2->mBytesPerPacket = 0;
    *(_QWORD *)&a2->mFramesPerPacket = v38;
    *(_QWORD *)&a2->mBitsPerChannel = 0;
    mFormatID = 1634492771;
LABEL_61:
    SourceBitDepthFromASBD = GetSourceBitDepthFromASBD((const AudioStreamBasicDescription *)mFormatID, mFormatFlags);
    StreamDescription = 0;
LABEL_62:
    *((_DWORD *)this + 38) = SourceBitDepthFromASBD;
  }
LABEL_51:
  v35 = *((_DWORD *)this + 16);
  if (v35 == 1685220723)
  {
    v36 = 1885695587;
    goto LABEL_57;
  }
  if (v35 == 1701733217)
  {
    v36 = *((_DWORD *)this + 20);
    if (v36 == 1667392371)
    {
LABEL_57:
      a2->mFormatID = AudioFormatEncryptedFormatTranslator::EncryptFormatInFlavor(a2->mFormatID, v36);
      return StreamDescription;
    }
    if (v36 == 1667591779)
    {
      v36 = 1667591779;
      goto LABEL_57;
    }
  }
  return StreamDescription;
}

const __CFDictionary *MP4BoxParser_SampleDescription::GetASEBoxes(MP4BoxParser_SampleDescription *this, const __CFDictionary **a2)
{
  CFDictionaryRef *v3;
  const __CFDictionary *result;

  v3 = (CFDictionaryRef *)((char *)this + 104);
  if (CACFDictionary::Size((MP4BoxParser_SampleDescription *)((char *)this + 104)) && *v3)
    result = CFDictionaryCreateCopy(0, *v3);
  else
    result = 0;
  *a2 = result;
  return result;
}

uint64_t MP4BoxParser_SampleDescription::GetChannelLayout(MP4BoxParser_SampleDescription *this, AudioChannelLayout **a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, unsigned int *a8)
{
  int v11;
  int v12;
  AudioChannelLayout *v13;
  AudioChannelLayoutTag mChannelLayoutTag;
  uint64_t v15;
  char *v16;
  unsigned int mSampleRate_low;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  size_t v22;
  AudioChannelLayout *v23;
  AudioChannelLayout *v24;
  std::bad_alloc *exception;
  std::bad_alloc *v27;
  AudioStreamBasicDescription v28;
  unsigned int v29;
  AudioStreamBasicDescription v30;

  v11 = *((_DWORD *)this + 16);
  *a2 = 0;
  *a3 = 0;
  if (v11 == 1701733217)
  {
    v11 = *((_DWORD *)this + 19);
  }
  else if (v11 == 1685220723)
  {
    v11 = *((_DWORD *)this + 18);
    if (v11 != 1684103987)
    {
      if (v11 != 1684366131)
      {
        v12 = 1702061171;
LABEL_11:
        if (v11 == v12)
          goto LABEL_12;
LABEL_38:
        v21 = *((_QWORD *)this + 21) - *((_QWORD *)this + 20);
        *a3 = v21;
        if (!(_DWORD)v21)
          return 0;
        v22 = v21;
        v23 = (AudioChannelLayout *)malloc_type_malloc(v21, 0x2C8E6D5CuLL);
        v24 = v23;
        if (v23)
        {
          bzero(v23, v22);
          *a2 = v24;
          memcpy(v24, *((const void **)this + 20), *a3);
          return 0;
        }
        goto LABEL_44;
      }
      goto LABEL_24;
    }
    goto LABEL_30;
  }
  if (v11 > 1700998450)
  {
    if (v11 != 1700998451)
    {
      if (v11 == 1836069985)
      {
LABEL_12:
        if (!*((_QWORD *)this + 23))
          return 0;
        *a3 = 32;
        v13 = (AudioChannelLayout *)malloc_type_malloc(0x20uLL, 0x2C8E6D5CuLL);
        if (v13)
        {
          *(_OWORD *)&v13->mChannelLayoutTag = 0u;
          *(_OWORD *)&v13->mChannelDescriptions[0].mChannelFlags = 0u;
          *a2 = v13;
          DecoderConfigDescr::GetChannelLayoutTag((DecoderConfigDescr *)(*((_QWORD *)this + 23) + 296), &v13->mChannelLayoutTag);
          mChannelLayoutTag = (*a2)->mChannelLayoutTag;
          if (mChannelLayoutTag == 6553601 || mChannelLayoutTag == 6619138 || !((mChannelLayoutTag + 0x10000) >> 17))
          {
            free(*a2);
            v15 = 0;
            *a2 = 0;
            *a3 = 0;
            return v15;
          }
          return 0;
        }
LABEL_44:
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v27 = std::bad_alloc::bad_alloc(exception);
      }
      v12 = 1832149349;
      goto LABEL_11;
    }
LABEL_24:
    LODWORD(v30.mSampleRate) = 0;
    v15 = ParseEAC3MP4Cookie(*((unsigned int **)this + 11), *((_DWORD *)this + 24), 0, &v30, 0, 0, a7, a8, *(unsigned int **)&v28.mSampleRate, v28.mFormatID, *(BOOL **)&v28.mBytesPerPacket, *(unsigned int **)&v28.mBytesPerFrame);
    if (!(_DWORD)v15
      && LODWORD(v30.mSampleRate) != 6553601
      && LODWORD(v30.mSampleRate) != 6619138
      && (LODWORD(v30.mSampleRate) + 0x10000) >= 0x20000)
    {
      *a3 = 32;
      v16 = (char *)malloc_type_malloc(0x20uLL, 0x2C8E6D5CuLL);
      if (!v16)
        goto LABEL_44;
      *(_QWORD *)(v16 + 20) = 0;
      *(_QWORD *)(v16 + 12) = 0;
      *((_DWORD *)v16 + 7) = 0;
      *a2 = (AudioChannelLayout *)v16;
      mSampleRate_low = LODWORD(v30.mSampleRate);
      goto LABEL_36;
    }
    return v15;
  }
  if (v11 != 1633889587)
  {
    if (v11 != 1634492771)
      goto LABEL_38;
    if (*((_DWORD *)this + 24) != 48 || *(_DWORD *)(*((_QWORD *)this + 11) + 28) != 1851877475)
      return 0;
    *a3 = 32;
    v16 = (char *)malloc_type_malloc(0x20uLL, 0x2C8E6D5CuLL);
    if (!v16)
      goto LABEL_44;
    v15 = 0;
    *(_OWORD *)v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
    *a2 = (AudioChannelLayout *)v16;
    mSampleRate_low = bswap32(*(_DWORD *)(*((_QWORD *)this + 11) + 36));
LABEL_37:
    *(_DWORD *)v16 = mSampleRate_low;
    return v15;
  }
LABEL_30:
  v18 = (*(uint64_t (**)(MP4BoxParser_SampleDescription *))(*(_QWORD *)this + 24))(this);
  if (MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), (v18 + 4), 0x2FuLL, &v30))return 0;
  v29 = 0;
  v15 = ParseAC3MP4Cookie(*((unsigned __int8 **)this + 11), *((_DWORD *)this + 24), &v28, &v29, v19, v20);
  if (!(_DWORD)v15 && v29 != 6553601 && v29 != 6619138 && v29 + 0x10000 >= 0x20000)
  {
    *a3 = 32;
    CA_calloc(0x20uLL);
    *a2 = (AudioChannelLayout *)v16;
    mSampleRate_low = v29;
LABEL_36:
    *((_DWORD *)v16 + 1) = 0;
    *((_DWORD *)v16 + 2) = 0;
    goto LABEL_37;
  }
  return v15;
}

void AudioMetadataTimeline::AudioMetadataTimeline(AudioMetadataTimeline *this)
{
  char *v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t **v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t *v78;
  uint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t **v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t *v92;
  uint64_t *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t **v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t *v106;
  uint64_t *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t **v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t *v119;
  std::__shared_weak_count *v120;
  uint64_t *v121;
  std::__shared_weak_count *v122;
  uint64_t *v123;
  std::__shared_weak_count *v124;
  uint64_t *v125;
  std::__shared_weak_count *v126;
  uint64_t *v127;
  std::__shared_weak_count *v128;
  uint64_t *v129;
  std::__shared_weak_count *v130;
  uint64_t *v131;
  std::__shared_weak_count *v132;
  uint64_t *v133;
  std::__shared_weak_count *v134;
  uint64_t *v135;
  __int128 v136;

  v2 = (char *)this + 592;
  v3 = (char *)this + 600;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 75) = 0;
  bzero(this, 0x250uLL);
  *((_QWORD *)this + 74) = v3;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 77) = (char *)this + 624;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 80) = (char *)this + 648;
  AudioMetadataMemoryPool::create<AudioMetadataFormatExtended>(&v136, (uint64_t)v2);
  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)this, &v136);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v8 = *(uint64_t **)this;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v133 = v8;
  v134 = v7;
  v9 = v8;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v9 = *(uint64_t **)this;
  }
  v12 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v136, v12);
  v13 = 0;
  *(uint64_t *)((char *)v9 + 4) = v136;
  *(_DWORD *)v9 = 0;
  do
  {
    *(_QWORD *)(*(uint64_t *)((char *)v9 + 4) + v13) = 0;
    v13 += 8;
  }
  while (v13 != 0x8000);
  v131 = v8;
  v14 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)this + 77, (unint64_t)v8, &v131);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v14 + 5, &v136);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v134;
  if (v134)
  {
    v19 = (unint64_t *)&v134->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v22 = *(uint64_t **)this;
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v131 = v22;
  v132 = v21;
  v23 = v22;
  if (v21)
  {
    v24 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v23 = *(uint64_t **)this;
  }
  v26 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v136, v26);
  v27 = 0;
  v23[2] = v136;
  *((_DWORD *)v23 + 3) = 0;
  do
  {
    *(_QWORD *)(v23[2] + v27) = 0;
    v27 += 8;
  }
  while (v27 != 0x8000);
  v129 = v22;
  v28 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)this + 77, (unint64_t)v22, &v129);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v28 + 5, &v136);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v132;
  if (v132)
  {
    v33 = (unint64_t *)&v132->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v36 = *(uint64_t **)this;
  v35 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v129 = v36;
  v130 = v35;
  v37 = v36;
  if (v35)
  {
    v38 = (unint64_t *)&v35->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
    v37 = *(uint64_t **)this;
  }
  v40 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v136, v40);
  v41 = 0;
  *(uint64_t *)((char *)v37 + 28) = v136;
  *((_DWORD *)v37 + 6) = 0;
  do
  {
    *(_QWORD *)(*(uint64_t *)((char *)v37 + 28) + v41) = 0;
    v41 += 8;
  }
  while (v41 != 0x8000);
  v127 = v36;
  v42 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)this + 77, (unint64_t)v36, &v127);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v42 + 5, &v136);
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v130;
  if (v130)
  {
    v47 = (unint64_t *)&v130->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v50 = *(uint64_t **)this;
  v49 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v127 = v50;
  v128 = v49;
  v51 = v50;
  if (v49)
  {
    v52 = (unint64_t *)&v49->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
    v51 = *(uint64_t **)this;
  }
  v54 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v136, v54);
  v55 = 0;
  v51[5] = v136;
  *((_DWORD *)v51 + 9) = 0;
  do
  {
    *(_QWORD *)(v51[5] + v55) = 0;
    v55 += 8;
  }
  while (v55 != 0x8000);
  v125 = v50;
  v56 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)this + 77, (unint64_t)v50, &v125);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v56 + 5, &v136);
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v128;
  if (v128)
  {
    v61 = (unint64_t *)&v128->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v64 = *(uint64_t **)this;
  v63 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v125 = v64;
  v126 = v63;
  v65 = v64;
  if (v63)
  {
    v66 = (unint64_t *)&v63->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
    v65 = *(uint64_t **)this;
  }
  v68 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v136, v68);
  v69 = 0;
  *(uint64_t *)((char *)v65 + 52) = v136;
  *((_DWORD *)v65 + 12) = 0;
  do
  {
    *(_QWORD *)(*(uint64_t *)((char *)v65 + 52) + v69) = 0;
    v69 += 8;
  }
  while (v69 != 0x8000);
  v123 = v64;
  v70 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)this + 77, (unint64_t)v64, &v123);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v70 + 5, &v136);
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v126;
  if (v126)
  {
    v75 = (unint64_t *)&v126->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v78 = *(uint64_t **)this;
  v77 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v123 = v78;
  v124 = v77;
  v79 = v78;
  if (v77)
  {
    v80 = (unint64_t *)&v77->__shared_owners_;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
    v79 = *(uint64_t **)this;
  }
  v82 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v136, v82);
  v83 = 0;
  v79[8] = v136;
  *((_DWORD *)v79 + 15) = 0;
  do
  {
    *(_QWORD *)(v79[8] + v83) = 0;
    v83 += 8;
  }
  while (v83 != 0x8000);
  v121 = v78;
  v84 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)this + 77, (unint64_t)v78, &v121);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v84 + 5, &v136);
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v124;
  if (v124)
  {
    v89 = (unint64_t *)&v124->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v92 = *(uint64_t **)this;
  v91 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v121 = v92;
  v122 = v91;
  v93 = v92;
  if (v91)
  {
    v94 = (unint64_t *)&v91->__shared_owners_;
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
    v93 = *(uint64_t **)this;
  }
  v96 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v136, v96);
  v97 = 0;
  *(uint64_t *)((char *)v93 + 76) = v136;
  *((_DWORD *)v93 + 18) = 0;
  do
  {
    *(_QWORD *)(*(uint64_t *)((char *)v93 + 76) + v97) = 0;
    v97 += 8;
  }
  while (v97 != 0x8000);
  v119 = v92;
  v98 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)this + 77, (unint64_t)v92, &v119);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v98 + 5, &v136);
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v100 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v122;
  if (v122)
  {
    v103 = (unint64_t *)&v122->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v106 = *(uint64_t **)this;
  v105 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v119 = v106;
  v120 = v105;
  v107 = v106;
  if (v105)
  {
    v108 = (unint64_t *)&v105->__shared_owners_;
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
    v107 = *(uint64_t **)this;
  }
  v110 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v136, v110);
  v111 = 0;
  v107[11] = v136;
  *((_DWORD *)v107 + 21) = 0;
  do
  {
    *(_QWORD *)(v107[11] + v111) = 0;
    v111 += 8;
  }
  while (v111 != 0x8000);
  v135 = v106;
  v112 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)this + 77, (unint64_t)v106, &v135);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v112 + 5, &v136);
  v113 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v114 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v120;
  if (v120)
  {
    v117 = (unint64_t *)&v120->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
}

void sub_18EEBC718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  uint64_t v25;
  AudioMetadataMemoryPool *v26;

  AudioMetadataMemoryPool::~AudioMetadataMemoryPool(v26);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v25 + 528);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v25 + 464);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v25 + 400);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v25 + 336);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v25 + 272);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v25 + 208);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v25 + 144);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v25 + 80);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v25 + 16);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::create<AudioMetadataFormatExtended>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;

  v4 = (char *)operator new(0x90uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)v4 = &off_1E2917520;
  *(_OWORD *)(v4 + 24) = 0u;
  *((_QWORD *)v4 + 2) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_QWORD *)v4 + 17) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  v11 = v4 + 24;
  v6 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v11);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  v8 = (std::__shared_weak_count *)v6[6];
  v6[5] = (uint64_t)(v4 + 24);
  v6[6] = (uint64_t)v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18EEBC970(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::~AudioMetadataMemoryPool(AudioMetadataMemoryPool *this)
{
  std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*((_QWORD **)this + 7));
  std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::destroy(*((_QWORD **)this + 4));
  std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::destroy(*((_QWORD **)this + 1));
}

uint64_t std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v7 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v7) + 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 256;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*a1);
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(a1[1]);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (a1)
  {
    std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::destroy(*a1);
    std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::destroy(a1[1]);
    v2 = a1[5];
    if (v2)
    {
      v3 = a1[6];
      v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
          v3 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v3 - 16);
        while (v3 != v2);
        v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

_QWORD *std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2918048;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18EEBCC00(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    MEMORY[0x193FFE43C](v1, 0x80C80B8603338);
  __cxa_rethrow();
}

void sub_18EEBCC28(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    v7[4] = *a3;
    v7[5] = 0;
    v7[6] = 0;
    v7[7] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  void *v24;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v10 = *a1;
    v11 = (v5 - *a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = *a1;
      v5 = a1[1];
    }
    if (v5 == v10)
    {
      v22 = vdupq_n_s64((unint64_t)v5);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v5 - 1);
        v5 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
      }
      while (v5 != v10);
      v22 = *(int64x2_t *)a1;
    }
    v9 = v16 + 16;
    *a1 = v20;
    a1[1] = v16 + 16;
    a1[2] = &v15[16 * v14];
    v23 = v22.i64[1];
    v24 = (void *)v22.i64[0];
    while ((void *)v23 != v24)
      v23 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v23 - 16);
    if (v24)
      operator delete(v24);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_QWORD *)v5 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 16;
  }
  a1[1] = v9;
}

void std::__shared_ptr_pointer<void * *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<void * *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x193FFE43CLL);
  return result;
}

uint64_t *std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v9 <= a2)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v10 = (uint64_t *)operator new(0x38uLL);
    v13[1] = v6;
    v11 = *a3;
    v10[5] = 0;
    v10[6] = 0;
    v10[4] = v11;
    v14 = 1;
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<void *,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<void *,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
    return v10;
  }
  return (uint64_t *)v8;
}

void std::unique_ptr<std::__tree_node<std::__value_type<void *,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<void *,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 40);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<AudioMetadataFormatExtended>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataFormatExtended>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917520;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

_QWORD *std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

uint64_t *AudioMetadataMemoryPool::lookup<AudioMetadataObject>(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;

  v10 = a3;
  v5 = (uint64_t **)(a2 + 48);
  if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), a3, (uint64_t *)&v10)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr");
  result = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v5, a3, (uint64_t *)&v10);
  v7 = result[6];
  *a1 = result[5];
  a1[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*,false>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 *v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  unint64_t *v50;
  unint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  unint64_t *v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  __int128 *v71;
  __int128 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  __int128 v79;
  unint64_t *v80;
  unint64_t v81;
  BOOL v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  __int128 v92;
  unint64_t *v93;
  unint64_t v94;
  _BOOL4 v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  BOOL v104;
  uint64_t *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  __int128 v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  BOOL v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  __int128 *v133;
  __int128 v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  BOOL v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  _BOOL4 v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  __int128 v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  BOOL v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  __int128 *v178;
  __int128 v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  _BOOL4 v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t *v192;
  std::__shared_weak_count *v193;
  unint64_t *p_shared_owners;
  unint64_t v195;
  uint64_t *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  _BOOL4 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  _BOOL4 v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __int128 v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  BOOL v230;
  uint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  int64_t v239;
  int64_t v240;
  int64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  _BOOL4 v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  int64_t v258;
  unint64_t *v259;
  unint64_t v260;
  int64_t v261;
  uint64_t *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t **v266;
  uint64_t *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  BOOL v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  int64_t v276;
  unint64_t *v277;
  unint64_t v278;
  int64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  int64_t v286;
  uint64_t *v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  _BOOL4 v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  uint64_t *v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  __int128 v302;
  unint64_t *v303;
  unint64_t v304;
  _BOOL4 v305;
  uint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  uint64_t *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  _BOOL4 v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  uint64_t *v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  _BOOL4 v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t *v349;
  unint64_t v350;
  unint64_t *v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  __int128 v358;
  unint64_t *v359;
  unint64_t v360;
  BOOL v361;
  uint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  uint64_t v374;
  uint64_t v375;
  __int128 *v376;
  uint64_t *v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  uint64_t *v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  _BOOL4 v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  unint64_t *v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  __int128 v394;
  unint64_t *v395;
  unint64_t v396;
  uint64_t *v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  BOOL v401;
  uint64_t v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  unint64_t *v410;
  unint64_t v411;
  unint64_t *v412;
  unint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  int64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  __int128 v424;
  __int128 v425;

void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*,false>(__int128 *a1, unint64_t a2, uint64_t a3, char a4)
{
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 *v25;
  __int128 *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _BOOL4 v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 *v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  BOOL v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _BOOL4 v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  BOOL v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  BOOL v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  __int128 v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  BOOL v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  __int128 *v112;
  __int128 v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  BOOL v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  _BOOL4 v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  __int128 v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  BOOL v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  __int128 *v148;
  __int128 v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  _BOOL4 v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  std::__shared_weak_count *v160;
  unint64_t *p_shared_owners;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _BOOL4 v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  _BOOL4 v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  BOOL v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  int64_t v197;
  int64_t v198;
  int64_t v199;
  uint64_t v200;
  __int128 *v201;
  uint64_t v202;
  __int128 v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  _BOOL4 v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  __int128 v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  BOOL v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  int64_t v234;
  unint64_t *v235;
  unint64_t v236;
  _BOOL4 v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  _QWORD *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  _BOOL4 v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  __int128 *v257;
  uint64_t v258;
  int64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  _BOOL4 v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  __int128 *v277;
  __int128 v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  _BOOL4 v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  __int128 v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  BOOL v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  _BOOL4 v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  __int128 v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  BOOL v329;
  unint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  int64_t v348;
  uint64_t v349;
  __int128 *v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;

void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,false>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 *v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  unint64_t *v50;
  unint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  unint64_t *v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  __int128 *v71;
  __int128 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  __int128 v79;
  unint64_t *v80;
  unint64_t v81;
  BOOL v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  __int128 v92;
  unint64_t *v93;
  unint64_t v94;
  _BOOL4 v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  BOOL v104;
  uint64_t *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  __int128 v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  BOOL v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  __int128 *v133;
  __int128 v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  BOOL v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  _BOOL4 v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  __int128 v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  BOOL v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  __int128 *v178;
  __int128 v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  _BOOL4 v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t *v192;
  std::__shared_weak_count *v193;
  unint64_t *p_shared_owners;
  unint64_t v195;
  uint64_t *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  _BOOL4 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  _BOOL4 v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __int128 v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  BOOL v230;
  uint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  int64_t v239;
  int64_t v240;
  int64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  _BOOL4 v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  int64_t v258;
  unint64_t *v259;
  unint64_t v260;
  int64_t v261;
  uint64_t *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t **v266;
  uint64_t *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  BOOL v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  int64_t v276;
  unint64_t *v277;
  unint64_t v278;
  int64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  int64_t v286;
  uint64_t *v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  _BOOL4 v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  uint64_t *v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  __int128 v302;
  unint64_t *v303;
  unint64_t v304;
  _BOOL4 v305;
  uint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  uint64_t *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  _BOOL4 v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  uint64_t *v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  _BOOL4 v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t *v349;
  unint64_t v350;
  unint64_t *v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  __int128 v358;
  unint64_t *v359;
  unint64_t v360;
  BOOL v361;
  uint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  uint64_t v374;
  uint64_t v375;
  __int128 *v376;
  uint64_t *v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  uint64_t *v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  _BOOL4 v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  unint64_t *v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  __int128 v394;
  unint64_t *v395;
  unint64_t v396;
  uint64_t *v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  BOOL v401;
  uint64_t v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  unint64_t *v410;
  unint64_t v411;
  unint64_t *v412;
  unint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  int64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  __int128 v424;
  __int128 v425;

void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*,false>(__int128 *a1, unint64_t a2, uint64_t a3, char a4)
{
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 *v25;
  __int128 *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _BOOL4 v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 *v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  BOOL v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _BOOL4 v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  BOOL v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  BOOL v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  __int128 v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  BOOL v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  __int128 *v112;
  __int128 v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  BOOL v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  _BOOL4 v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  __int128 v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  BOOL v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  __int128 *v148;
  __int128 v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  _BOOL4 v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  std::__shared_weak_count *v160;
  unint64_t *p_shared_owners;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _BOOL4 v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  _BOOL4 v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  BOOL v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  int64_t v197;
  int64_t v198;
  int64_t v199;
  uint64_t v200;
  __int128 *v201;
  uint64_t v202;
  __int128 v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  _BOOL4 v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  __int128 v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  BOOL v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  int64_t v234;
  unint64_t *v235;
  unint64_t v236;
  _BOOL4 v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  _QWORD *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  _BOOL4 v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  __int128 *v257;
  uint64_t v258;
  int64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  _BOOL4 v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  __int128 *v277;
  __int128 v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  _BOOL4 v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  __int128 v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  BOOL v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  _BOOL4 v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  __int128 v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  BOOL v329;
  unint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  int64_t v348;
  uint64_t v349;
  __int128 *v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;

void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,false>(__int128 *a1, unint64_t a2, uint64_t a3, char a4)
{
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 *v25;
  __int128 *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _BOOL4 v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 *v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  BOOL v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _BOOL4 v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  BOOL v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  BOOL v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  __int128 v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  BOOL v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  __int128 *v112;
  __int128 v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  BOOL v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  _BOOL4 v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  __int128 v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  BOOL v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  __int128 *v148;
  __int128 v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  _BOOL4 v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  std::__shared_weak_count *v160;
  unint64_t *p_shared_owners;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _BOOL4 v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  _BOOL4 v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  BOOL v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  int64_t v197;
  int64_t v198;
  int64_t v199;
  uint64_t v200;
  __int128 *v201;
  uint64_t v202;
  __int128 v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  _BOOL4 v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  __int128 v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  BOOL v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  int64_t v234;
  unint64_t *v235;
  unint64_t v236;
  _BOOL4 v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  _QWORD *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  _BOOL4 v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  __int128 *v257;
  uint64_t v258;
  int64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  _BOOL4 v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  __int128 *v277;
  __int128 v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  _BOOL4 v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  __int128 v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  BOOL v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  _BOOL4 v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  __int128 v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  BOOL v329;
  unint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  int64_t v348;
  uint64_t v349;
  __int128 *v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;

void std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = a3 + ((a2 - *result) >> 4);
    if (v3 < 1)
      result -= (unint64_t)(255 - v3) >> 8;
    else
      result += (unint64_t)v3 >> 8;
  }
  return result;
}

_QWORD *std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = ((a2 - *result) >> 4) - a3;
    if (v3 < 1)
      result -= (unint64_t)(255 - v3) >> 8;
    else
      result += (unint64_t)v3 >> 8;
  }
  return result;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a4;
  v8 = (_QWORD *)result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    v11 = a3;
    while (1)
    {
      v12 = a5 - v10;
      if ((v11 - a2) >> 4 >= v12 >> 4)
        v13 = v12 >> 4;
      else
        v13 = (v11 - a2) >> 4;
      if (v13)
      {
        v14 = -16 * v13;
        v15 = (__int128 *)(v11 - 16);
        do
        {
          a5 -= 16;
          result = std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](a5, v15--);
          v14 += 16;
        }
        while (v14);
      }
      v11 -= 16 * v13;
      if (v11 == a2)
        break;
      v16 = *--v6;
      v10 = v16;
      a5 = v16 + 4096;
    }
    if (*v6 + 4096 == a5)
    {
      v17 = v6[1];
      ++v6;
      a5 = v17;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

void std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(uint64_t result, __int128 *a2, __int128 *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  __int128 *v7;
  _QWORD *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a4;
  v7 = a2;
  v8 = (_QWORD *)result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    while (1)
    {
      v11 = v10 - a5 + 4096;
      if (v9 - v7 >= v11 >> 4)
        v12 = v11 >> 4;
      else
        v12 = v9 - v7;
      if (v12)
      {
        v13 = 16 * v12;
        v14 = &v7[v12];
        do
        {
          result = std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](a5, v7++);
          a5 += 16;
          v13 -= 16;
        }
        while (v13);
        v7 = v14;
      }
      if (v7 == v9)
        break;
      v15 = v6[1];
      ++v6;
      v10 = v15;
      a5 = v15;
    }
    if (*v6 + 4096 == a5)
    {
      v16 = v6[1];
      ++v6;
      a5 = v16;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count **v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count **v12;
  unint64_t *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _BOOL4 v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BOOL4 v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _BOOL4 v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _BOOL4 v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;

  v6 = *(_QWORD **)a2;
  v8 = (std::__shared_weak_count **)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = (std::__shared_weak_count **)(a1 + 8);
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  v69 = *(_QWORD **)a1;
  v70 = v11;
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = lessThan(v6, &v69);
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 - 1, v13));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v15 = lessThan(v6, &v69);
  }
  if (!v7)
    goto LABEL_16;
  v17 = (unint64_t *)&v7->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v15)
      goto LABEL_17;
  }
  else
  {
LABEL_16:
    if (v15)
    {
LABEL_17:
      v19 = *(_QWORD **)a3;
      v20 = *(std::__shared_weak_count **)(a3 + 8);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *(std::__shared_weak_count **)(a2 + 8);
      v69 = *(_QWORD **)a2;
      v70 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        v26 = lessThan(v19, &v69);
        do
          v27 = __ldaxr(v24);
        while (__stlxr(v27 - 1, v24));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      else
      {
        v26 = lessThan(v19, &v69);
      }
      if (v20)
      {
        v37 = (unint64_t *)&v20->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v39 = *(_QWORD **)a1;
      if (v26)
      {
        *(_QWORD *)a1 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v39;
LABEL_83:
        v8 = (std::__shared_weak_count **)(a3 + 8);
LABEL_92:
        v68 = *v12;
        *v12 = *v8;
        *v8 = v68;
        return;
      }
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v39;
      v40 = *(std::__shared_weak_count **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v40;
      v41 = *(_QWORD **)a3;
      v42 = *(std::__shared_weak_count **)(a3 + 8);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        v40 = *v8;
      }
      v69 = *(_QWORD **)a2;
      v70 = v40;
      if (v40)
      {
        v45 = (unint64_t *)&v40->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
        v47 = lessThan(v41, &v69);
        do
          v48 = __ldaxr(v45);
        while (__stlxr(v48 - 1, v45));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      else
      {
        v47 = lessThan(v41, &v69);
      }
      if (v42)
      {
        v62 = (unint64_t *)&v42->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v47)
      {
        v64 = *(_QWORD **)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v64;
        v12 = v8;
        goto LABEL_83;
      }
      return;
    }
  }
  v28 = *(_QWORD **)a3;
  v29 = *(std::__shared_weak_count **)(a3 + 8);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *(std::__shared_weak_count **)(a2 + 8);
  v69 = *(_QWORD **)a2;
  v70 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v35 = lessThan(v28, &v69);
    do
      v36 = __ldaxr(v33);
    while (__stlxr(v36 - 1, v33));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  else
  {
    v35 = lessThan(v28, &v69);
  }
  if (!v29)
    goto LABEL_62;
  v49 = (unint64_t *)&v29->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (!v35)
      return;
  }
  else
  {
LABEL_62:
    if (!v35)
      return;
  }
  v51 = *(_QWORD **)a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v51;
  v52 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v52;
  v53 = *(_QWORD **)a2;
  v54 = *(std::__shared_weak_count **)(a2 + 8);
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v57 = *(std::__shared_weak_count **)(a1 + 8);
  v69 = *(_QWORD **)a1;
  v70 = v57;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    v60 = lessThan(v53, &v69);
    do
      v61 = __ldaxr(v58);
    while (__stlxr(v61 - 1, v58));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  else
  {
    v60 = lessThan(v53, &v69);
  }
  if (v54)
  {
    v65 = (unint64_t *)&v54->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v60)
  {
    v67 = *(_QWORD **)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v67;
    goto LABEL_92;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BOOL4 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL4 v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _BOOL4 v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a2, a3);
  v8 = *(_QWORD **)a4;
  v9 = *(std::__shared_weak_count **)(a4 + 8);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(std::__shared_weak_count **)(a3 + 8);
  v47 = *(_QWORD **)a3;
  v48 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = lessThan(v8, &v47);
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 - 1, v13));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    v15 = lessThan(v8, &v47);
  }
  if (!v9)
    goto LABEL_16;
  v17 = (unint64_t *)&v9->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v15)
      return;
  }
  else
  {
LABEL_16:
    if (!v15)
      return;
  }
  v19 = *(_QWORD **)a3;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  *(_QWORD *)a4 = v19;
  v20 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v20;
  v21 = *(_QWORD **)a3;
  v22 = *(std::__shared_weak_count **)(a3 + 8);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(std::__shared_weak_count **)(a2 + 8);
  v47 = *(_QWORD **)a2;
  v48 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v28 = lessThan(v21, &v47);
    do
      v29 = __ldaxr(v26);
    while (__stlxr(v29 - 1, v26));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    v28 = lessThan(v21, &v47);
  }
  if (!v22)
    goto LABEL_34;
  v30 = (unint64_t *)&v22->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (!v28)
      return;
  }
  else
  {
LABEL_34:
    if (!v28)
      return;
  }
  v32 = *(_QWORD **)a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v32;
  v33 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v33;
  v34 = *(_QWORD **)a2;
  v35 = *(std::__shared_weak_count **)(a2 + 8);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = *(std::__shared_weak_count **)(a1 + 8);
  v47 = *(_QWORD **)a1;
  v48 = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    v41 = lessThan(v34, &v47);
    do
      v42 = __ldaxr(v39);
    while (__stlxr(v42 - 1, v39));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  else
  {
    v41 = lessThan(v34, &v47);
  }
  if (v35)
  {
    v43 = (unint64_t *)&v35->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v41)
  {
    v45 = *(_QWORD **)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v45;
    v46 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v46;
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL4 v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _BOOL4 v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _BOOL4 v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a2, a3, a4);
  v10 = *(_QWORD **)a5;
  v11 = *(std::__shared_weak_count **)(a5 + 8);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *(std::__shared_weak_count **)(a4 + 8);
  v62 = *(_QWORD **)a4;
  v63 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = lessThan(v10, &v62);
    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 - 1, v15));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    v17 = lessThan(v10, &v62);
  }
  if (!v11)
    goto LABEL_16;
  v19 = (unint64_t *)&v11->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v17)
      return;
  }
  else
  {
LABEL_16:
    if (!v17)
      return;
  }
  v21 = *(_QWORD **)a4;
  *(_QWORD *)a4 = *(_QWORD *)a5;
  *(_QWORD *)a5 = v21;
  v22 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = v22;
  v23 = *(_QWORD **)a4;
  v24 = *(std::__shared_weak_count **)(a4 + 8);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *(std::__shared_weak_count **)(a3 + 8);
  v62 = *(_QWORD **)a3;
  v63 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = lessThan(v23, &v62);
    do
      v31 = __ldaxr(v28);
    while (__stlxr(v31 - 1, v28));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  else
  {
    v30 = lessThan(v23, &v62);
  }
  if (!v24)
    goto LABEL_34;
  v32 = (unint64_t *)&v24->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (!v30)
      return;
  }
  else
  {
LABEL_34:
    if (!v30)
      return;
  }
  v34 = *(_QWORD **)a3;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  *(_QWORD *)a4 = v34;
  v35 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v35;
  v36 = *(_QWORD **)a3;
  v37 = *(std::__shared_weak_count **)(a3 + 8);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *(std::__shared_weak_count **)(a2 + 8);
  v62 = *(_QWORD **)a2;
  v63 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    v43 = lessThan(v36, &v62);
    do
      v44 = __ldaxr(v41);
    while (__stlxr(v44 - 1, v41));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  else
  {
    v43 = lessThan(v36, &v62);
  }
  if (v37)
  {
    v45 = (unint64_t *)&v37->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v43)
  {
    v47 = *(_QWORD **)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v47;
    v48 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v48;
    v49 = *(_QWORD **)a2;
    v50 = *(std::__shared_weak_count **)(a2 + 8);
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v53 = *(std::__shared_weak_count **)(a1 + 8);
    v62 = *(_QWORD **)a1;
    v63 = v53;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      v56 = lessThan(v49, &v62);
      do
        v57 = __ldaxr(v54);
      while (__stlxr(v57 - 1, v54));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    else
    {
      v56 = lessThan(v49, &v62);
    }
    if (v50)
    {
      v58 = (unint64_t *)&v50->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v56)
    {
      v60 = *(_QWORD **)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v60;
      v61 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v61;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _BOOL4 v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD **)(a2 - 16);
      v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *(std::__shared_weak_count **)(a1 + 8);
      v49 = *(_QWORD **)a1;
      v50 = v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v13 = lessThan(v6, &v49);
        do
          v14 = __ldaxr(v11);
        while (__stlxr(v14 - 1, v11));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      else
      {
        v13 = lessThan(v6, &v49);
      }
      if (v7)
      {
        v44 = (unint64_t *)&v7->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v13)
      {
        v46 = *(_QWORD **)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v46;
        v47 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v47;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v15 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a1 + 32);
      v16 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *(_QWORD **)v16;
    v19 = *(std::__shared_weak_count **)(v16 + 8);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *(std::__shared_weak_count **)(v15 + 8);
    v49 = *(_QWORD **)v15;
    v50 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = lessThan(v18, &v49);
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      v25 = lessThan(v18, &v49);
    }
    if (v19)
    {
      v27 = (unint64_t *)&v19->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
        break;
    }
    if (v25)
      goto LABEL_30;
LABEL_57:
    v15 = v16;
    v16 += 16;
    if (v16 == a2)
      return 1;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (!v25)
    goto LABEL_57;
LABEL_30:
  v48 = *(_OWORD *)v16;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v29 = v16;
  while (1)
  {
    v30 = v29;
    v29 = v15;
    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v30, (__int128 *)v15);
    if (v15 == a1)
      break;
    v31 = v48;
    if (*((_QWORD *)&v48 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v49 = *(_QWORD **)(v15 - 16);
    v34 = *(std::__shared_weak_count **)(v15 - 8);
    v50 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v37 = lessThan((_QWORD *)v31, &v49);
      do
        v38 = __ldaxr(v35);
      while (__stlxr(v38 - 1, v35));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    else
    {
      v37 = lessThan((_QWORD *)v31, &v49);
    }
    if (*((_QWORD *)&v31 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
      }
    }
    v15 -= 16;
    if (!v37)
      goto LABEL_51;
  }
  v29 = a1;
LABEL_51:
  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v29, &v48);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (++v17 != 8)
    goto LABEL_57;
  return v16 + 16 == a2;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count **v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count **v12;
  unint64_t *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _BOOL4 v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BOOL4 v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _BOOL4 v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _BOOL4 v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;

  v6 = *(_QWORD **)a2;
  v8 = (std::__shared_weak_count **)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = (std::__shared_weak_count **)(a1 + 8);
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  v69 = *(_QWORD **)a1;
  v70 = v11;
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = lessThan(v6, &v69);
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 - 1, v13));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v15 = lessThan(v6, &v69);
  }
  if (!v7)
    goto LABEL_16;
  v17 = (unint64_t *)&v7->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v15)
      goto LABEL_17;
  }
  else
  {
LABEL_16:
    if (v15)
    {
LABEL_17:
      v19 = *(_QWORD **)a3;
      v20 = *(std::__shared_weak_count **)(a3 + 8);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *(std::__shared_weak_count **)(a2 + 8);
      v69 = *(_QWORD **)a2;
      v70 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        v26 = lessThan(v19, &v69);
        do
          v27 = __ldaxr(v24);
        while (__stlxr(v27 - 1, v24));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      else
      {
        v26 = lessThan(v19, &v69);
      }
      if (v20)
      {
        v37 = (unint64_t *)&v20->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v39 = *(_QWORD **)a1;
      if (v26)
      {
        *(_QWORD *)a1 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v39;
LABEL_83:
        v8 = (std::__shared_weak_count **)(a3 + 8);
LABEL_92:
        v68 = *v12;
        *v12 = *v8;
        *v8 = v68;
        return;
      }
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v39;
      v40 = *(std::__shared_weak_count **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v40;
      v41 = *(_QWORD **)a3;
      v42 = *(std::__shared_weak_count **)(a3 + 8);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        v40 = *v8;
      }
      v69 = *(_QWORD **)a2;
      v70 = v40;
      if (v40)
      {
        v45 = (unint64_t *)&v40->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
        v47 = lessThan(v41, &v69);
        do
          v48 = __ldaxr(v45);
        while (__stlxr(v48 - 1, v45));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      else
      {
        v47 = lessThan(v41, &v69);
      }
      if (v42)
      {
        v62 = (unint64_t *)&v42->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v47)
      {
        v64 = *(_QWORD **)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v64;
        v12 = v8;
        goto LABEL_83;
      }
      return;
    }
  }
  v28 = *(_QWORD **)a3;
  v29 = *(std::__shared_weak_count **)(a3 + 8);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *(std::__shared_weak_count **)(a2 + 8);
  v69 = *(_QWORD **)a2;
  v70 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v35 = lessThan(v28, &v69);
    do
      v36 = __ldaxr(v33);
    while (__stlxr(v36 - 1, v33));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  else
  {
    v35 = lessThan(v28, &v69);
  }
  if (!v29)
    goto LABEL_62;
  v49 = (unint64_t *)&v29->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (!v35)
      return;
  }
  else
  {
LABEL_62:
    if (!v35)
      return;
  }
  v51 = *(_QWORD **)a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v51;
  v52 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v52;
  v53 = *(_QWORD **)a2;
  v54 = *(std::__shared_weak_count **)(a2 + 8);
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v57 = *(std::__shared_weak_count **)(a1 + 8);
  v69 = *(_QWORD **)a1;
  v70 = v57;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    v60 = lessThan(v53, &v69);
    do
      v61 = __ldaxr(v58);
    while (__stlxr(v61 - 1, v58));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  else
  {
    v60 = lessThan(v53, &v69);
  }
  if (v54)
  {
    v65 = (unint64_t *)&v54->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v60)
  {
    v67 = *(_QWORD **)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v67;
    goto LABEL_92;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BOOL4 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL4 v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _BOOL4 v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a2, a3);
  v8 = *(_QWORD **)a4;
  v9 = *(std::__shared_weak_count **)(a4 + 8);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(std::__shared_weak_count **)(a3 + 8);
  v47 = *(_QWORD **)a3;
  v48 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = lessThan(v8, &v47);
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 - 1, v13));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    v15 = lessThan(v8, &v47);
  }
  if (!v9)
    goto LABEL_16;
  v17 = (unint64_t *)&v9->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v15)
      return;
  }
  else
  {
LABEL_16:
    if (!v15)
      return;
  }
  v19 = *(_QWORD **)a3;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  *(_QWORD *)a4 = v19;
  v20 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v20;
  v21 = *(_QWORD **)a3;
  v22 = *(std::__shared_weak_count **)(a3 + 8);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(std::__shared_weak_count **)(a2 + 8);
  v47 = *(_QWORD **)a2;
  v48 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v28 = lessThan(v21, &v47);
    do
      v29 = __ldaxr(v26);
    while (__stlxr(v29 - 1, v26));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    v28 = lessThan(v21, &v47);
  }
  if (!v22)
    goto LABEL_34;
  v30 = (unint64_t *)&v22->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (!v28)
      return;
  }
  else
  {
LABEL_34:
    if (!v28)
      return;
  }
  v32 = *(_QWORD **)a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v32;
  v33 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v33;
  v34 = *(_QWORD **)a2;
  v35 = *(std::__shared_weak_count **)(a2 + 8);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = *(std::__shared_weak_count **)(a1 + 8);
  v47 = *(_QWORD **)a1;
  v48 = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    v41 = lessThan(v34, &v47);
    do
      v42 = __ldaxr(v39);
    while (__stlxr(v42 - 1, v39));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  else
  {
    v41 = lessThan(v34, &v47);
  }
  if (v35)
  {
    v43 = (unint64_t *)&v35->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v41)
  {
    v45 = *(_QWORD **)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v45;
    v46 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v46;
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL4 v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _BOOL4 v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _BOOL4 v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a2, a3, a4);
  v10 = *(_QWORD **)a5;
  v11 = *(std::__shared_weak_count **)(a5 + 8);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *(std::__shared_weak_count **)(a4 + 8);
  v62 = *(_QWORD **)a4;
  v63 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = lessThan(v10, &v62);
    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 - 1, v15));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    v17 = lessThan(v10, &v62);
  }
  if (!v11)
    goto LABEL_16;
  v19 = (unint64_t *)&v11->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v17)
      return;
  }
  else
  {
LABEL_16:
    if (!v17)
      return;
  }
  v21 = *(_QWORD **)a4;
  *(_QWORD *)a4 = *(_QWORD *)a5;
  *(_QWORD *)a5 = v21;
  v22 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = v22;
  v23 = *(_QWORD **)a4;
  v24 = *(std::__shared_weak_count **)(a4 + 8);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *(std::__shared_weak_count **)(a3 + 8);
  v62 = *(_QWORD **)a3;
  v63 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = lessThan(v23, &v62);
    do
      v31 = __ldaxr(v28);
    while (__stlxr(v31 - 1, v28));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  else
  {
    v30 = lessThan(v23, &v62);
  }
  if (!v24)
    goto LABEL_34;
  v32 = (unint64_t *)&v24->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (!v30)
      return;
  }
  else
  {
LABEL_34:
    if (!v30)
      return;
  }
  v34 = *(_QWORD **)a3;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  *(_QWORD *)a4 = v34;
  v35 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v35;
  v36 = *(_QWORD **)a3;
  v37 = *(std::__shared_weak_count **)(a3 + 8);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *(std::__shared_weak_count **)(a2 + 8);
  v62 = *(_QWORD **)a2;
  v63 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    v43 = lessThan(v36, &v62);
    do
      v44 = __ldaxr(v41);
    while (__stlxr(v44 - 1, v41));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  else
  {
    v43 = lessThan(v36, &v62);
  }
  if (v37)
  {
    v45 = (unint64_t *)&v37->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v43)
  {
    v47 = *(_QWORD **)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v47;
    v48 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v48;
    v49 = *(_QWORD **)a2;
    v50 = *(std::__shared_weak_count **)(a2 + 8);
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v53 = *(std::__shared_weak_count **)(a1 + 8);
    v62 = *(_QWORD **)a1;
    v63 = v53;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      v56 = lessThan(v49, &v62);
      do
        v57 = __ldaxr(v54);
      while (__stlxr(v57 - 1, v54));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    else
    {
      v56 = lessThan(v49, &v62);
    }
    if (v50)
    {
      v58 = (unint64_t *)&v50->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v56)
    {
      v60 = *(_QWORD **)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v60;
      v61 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v61;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _BOOL4 v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD **)(a2 - 16);
      v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *(std::__shared_weak_count **)(a1 + 8);
      v49 = *(_QWORD **)a1;
      v50 = v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v13 = lessThan(v6, &v49);
        do
          v14 = __ldaxr(v11);
        while (__stlxr(v14 - 1, v11));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      else
      {
        v13 = lessThan(v6, &v49);
      }
      if (v7)
      {
        v44 = (unint64_t *)&v7->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v13)
      {
        v46 = *(_QWORD **)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v46;
        v47 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v47;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v15 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a1 + 32);
      v16 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *(_QWORD **)v16;
    v19 = *(std::__shared_weak_count **)(v16 + 8);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *(std::__shared_weak_count **)(v15 + 8);
    v49 = *(_QWORD **)v15;
    v50 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = lessThan(v18, &v49);
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      v25 = lessThan(v18, &v49);
    }
    if (v19)
    {
      v27 = (unint64_t *)&v19->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
        break;
    }
    if (v25)
      goto LABEL_30;
LABEL_57:
    v15 = v16;
    v16 += 16;
    if (v16 == a2)
      return 1;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (!v25)
    goto LABEL_57;
LABEL_30:
  v48 = *(_OWORD *)v16;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v29 = v16;
  while (1)
  {
    v30 = v29;
    v29 = v15;
    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v30, (__int128 *)v15);
    if (v15 == a1)
      break;
    v31 = v48;
    if (*((_QWORD *)&v48 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v49 = *(_QWORD **)(v15 - 16);
    v34 = *(std::__shared_weak_count **)(v15 - 8);
    v50 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v37 = lessThan((_QWORD *)v31, &v49);
      do
        v38 = __ldaxr(v35);
      while (__stlxr(v38 - 1, v35));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    else
    {
      v37 = lessThan((_QWORD *)v31, &v49);
    }
    if (*((_QWORD *)&v31 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
      }
    }
    v15 -= 16;
    if (!v37)
      goto LABEL_51;
  }
  v29 = a1;
LABEL_51:
  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v29, &v48);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (++v17 != 8)
    goto LABEL_57;
  return v16 + 16 == a2;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count **v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count **v12;
  unint64_t *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _BOOL4 v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BOOL4 v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _BOOL4 v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _BOOL4 v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;

  v6 = *(_QWORD **)a2;
  v8 = (std::__shared_weak_count **)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = (std::__shared_weak_count **)(a1 + 8);
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  v69 = *(_QWORD **)a1;
  v70 = v11;
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = lessThan(v6, &v69);
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 - 1, v13));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v15 = lessThan(v6, &v69);
  }
  if (!v7)
    goto LABEL_16;
  v17 = (unint64_t *)&v7->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v15)
      goto LABEL_17;
  }
  else
  {
LABEL_16:
    if (v15)
    {
LABEL_17:
      v19 = *(_QWORD **)a3;
      v20 = *(std::__shared_weak_count **)(a3 + 8);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *(std::__shared_weak_count **)(a2 + 8);
      v69 = *(_QWORD **)a2;
      v70 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        v26 = lessThan(v19, &v69);
        do
          v27 = __ldaxr(v24);
        while (__stlxr(v27 - 1, v24));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      else
      {
        v26 = lessThan(v19, &v69);
      }
      if (v20)
      {
        v37 = (unint64_t *)&v20->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v39 = *(_QWORD **)a1;
      if (v26)
      {
        *(_QWORD *)a1 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v39;
LABEL_83:
        v8 = (std::__shared_weak_count **)(a3 + 8);
LABEL_92:
        v68 = *v12;
        *v12 = *v8;
        *v8 = v68;
        return;
      }
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v39;
      v40 = *(std::__shared_weak_count **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v40;
      v41 = *(_QWORD **)a3;
      v42 = *(std::__shared_weak_count **)(a3 + 8);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        v40 = *v8;
      }
      v69 = *(_QWORD **)a2;
      v70 = v40;
      if (v40)
      {
        v45 = (unint64_t *)&v40->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
        v47 = lessThan(v41, &v69);
        do
          v48 = __ldaxr(v45);
        while (__stlxr(v48 - 1, v45));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      else
      {
        v47 = lessThan(v41, &v69);
      }
      if (v42)
      {
        v62 = (unint64_t *)&v42->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v47)
      {
        v64 = *(_QWORD **)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v64;
        v12 = v8;
        goto LABEL_83;
      }
      return;
    }
  }
  v28 = *(_QWORD **)a3;
  v29 = *(std::__shared_weak_count **)(a3 + 8);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *(std::__shared_weak_count **)(a2 + 8);
  v69 = *(_QWORD **)a2;
  v70 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v35 = lessThan(v28, &v69);
    do
      v36 = __ldaxr(v33);
    while (__stlxr(v36 - 1, v33));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  else
  {
    v35 = lessThan(v28, &v69);
  }
  if (!v29)
    goto LABEL_62;
  v49 = (unint64_t *)&v29->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (!v35)
      return;
  }
  else
  {
LABEL_62:
    if (!v35)
      return;
  }
  v51 = *(_QWORD **)a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v51;
  v52 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v52;
  v53 = *(_QWORD **)a2;
  v54 = *(std::__shared_weak_count **)(a2 + 8);
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v57 = *(std::__shared_weak_count **)(a1 + 8);
  v69 = *(_QWORD **)a1;
  v70 = v57;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    v60 = lessThan(v53, &v69);
    do
      v61 = __ldaxr(v58);
    while (__stlxr(v61 - 1, v58));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  else
  {
    v60 = lessThan(v53, &v69);
  }
  if (v54)
  {
    v65 = (unint64_t *)&v54->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v60)
  {
    v67 = *(_QWORD **)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v67;
    goto LABEL_92;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BOOL4 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL4 v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _BOOL4 v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(a1, a2, a3);
  v8 = *(_QWORD **)a4;
  v9 = *(std::__shared_weak_count **)(a4 + 8);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(std::__shared_weak_count **)(a3 + 8);
  v47 = *(_QWORD **)a3;
  v48 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = lessThan(v8, &v47);
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 - 1, v13));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    v15 = lessThan(v8, &v47);
  }
  if (!v9)
    goto LABEL_16;
  v17 = (unint64_t *)&v9->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v15)
      return;
  }
  else
  {
LABEL_16:
    if (!v15)
      return;
  }
  v19 = *(_QWORD **)a3;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  *(_QWORD *)a4 = v19;
  v20 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v20;
  v21 = *(_QWORD **)a3;
  v22 = *(std::__shared_weak_count **)(a3 + 8);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(std::__shared_weak_count **)(a2 + 8);
  v47 = *(_QWORD **)a2;
  v48 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v28 = lessThan(v21, &v47);
    do
      v29 = __ldaxr(v26);
    while (__stlxr(v29 - 1, v26));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    v28 = lessThan(v21, &v47);
  }
  if (!v22)
    goto LABEL_34;
  v30 = (unint64_t *)&v22->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (!v28)
      return;
  }
  else
  {
LABEL_34:
    if (!v28)
      return;
  }
  v32 = *(_QWORD **)a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v32;
  v33 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v33;
  v34 = *(_QWORD **)a2;
  v35 = *(std::__shared_weak_count **)(a2 + 8);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = *(std::__shared_weak_count **)(a1 + 8);
  v47 = *(_QWORD **)a1;
  v48 = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    v41 = lessThan(v34, &v47);
    do
      v42 = __ldaxr(v39);
    while (__stlxr(v42 - 1, v39));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  else
  {
    v41 = lessThan(v34, &v47);
  }
  if (v35)
  {
    v43 = (unint64_t *)&v35->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v41)
  {
    v45 = *(_QWORD **)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v45;
    v46 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v46;
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL4 v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _BOOL4 v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _BOOL4 v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(a1, a2, a3, a4);
  v10 = *(_QWORD **)a5;
  v11 = *(std::__shared_weak_count **)(a5 + 8);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *(std::__shared_weak_count **)(a4 + 8);
  v62 = *(_QWORD **)a4;
  v63 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = lessThan(v10, &v62);
    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 - 1, v15));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    v17 = lessThan(v10, &v62);
  }
  if (!v11)
    goto LABEL_16;
  v19 = (unint64_t *)&v11->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v17)
      return;
  }
  else
  {
LABEL_16:
    if (!v17)
      return;
  }
  v21 = *(_QWORD **)a4;
  *(_QWORD *)a4 = *(_QWORD *)a5;
  *(_QWORD *)a5 = v21;
  v22 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = v22;
  v23 = *(_QWORD **)a4;
  v24 = *(std::__shared_weak_count **)(a4 + 8);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *(std::__shared_weak_count **)(a3 + 8);
  v62 = *(_QWORD **)a3;
  v63 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = lessThan(v23, &v62);
    do
      v31 = __ldaxr(v28);
    while (__stlxr(v31 - 1, v28));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  else
  {
    v30 = lessThan(v23, &v62);
  }
  if (!v24)
    goto LABEL_34;
  v32 = (unint64_t *)&v24->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (!v30)
      return;
  }
  else
  {
LABEL_34:
    if (!v30)
      return;
  }
  v34 = *(_QWORD **)a3;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  *(_QWORD *)a4 = v34;
  v35 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v35;
  v36 = *(_QWORD **)a3;
  v37 = *(std::__shared_weak_count **)(a3 + 8);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *(std::__shared_weak_count **)(a2 + 8);
  v62 = *(_QWORD **)a2;
  v63 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    v43 = lessThan(v36, &v62);
    do
      v44 = __ldaxr(v41);
    while (__stlxr(v44 - 1, v41));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  else
  {
    v43 = lessThan(v36, &v62);
  }
  if (v37)
  {
    v45 = (unint64_t *)&v37->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v43)
  {
    v47 = *(_QWORD **)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v47;
    v48 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v48;
    v49 = *(_QWORD **)a2;
    v50 = *(std::__shared_weak_count **)(a2 + 8);
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v53 = *(std::__shared_weak_count **)(a1 + 8);
    v62 = *(_QWORD **)a1;
    v63 = v53;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      v56 = lessThan(v49, &v62);
      do
        v57 = __ldaxr(v54);
      while (__stlxr(v57 - 1, v54));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    else
    {
      v56 = lessThan(v49, &v62);
    }
    if (v50)
    {
      v58 = (unint64_t *)&v50->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v56)
    {
      v60 = *(_QWORD **)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v60;
      v61 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v61;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _BOOL4 v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD **)(a2 - 16);
      v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *(std::__shared_weak_count **)(a1 + 8);
      v49 = *(_QWORD **)a1;
      v50 = v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v13 = lessThan(v6, &v49);
        do
          v14 = __ldaxr(v11);
        while (__stlxr(v14 - 1, v11));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      else
      {
        v13 = lessThan(v6, &v49);
      }
      if (v7)
      {
        v44 = (unint64_t *)&v7->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v13)
      {
        v46 = *(_QWORD **)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v46;
        v47 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v47;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v15 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(a1, a1 + 16, a1 + 32);
      v16 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *(_QWORD **)v16;
    v19 = *(std::__shared_weak_count **)(v16 + 8);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *(std::__shared_weak_count **)(v15 + 8);
    v49 = *(_QWORD **)v15;
    v50 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = lessThan(v18, &v49);
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      v25 = lessThan(v18, &v49);
    }
    if (v19)
    {
      v27 = (unint64_t *)&v19->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
        break;
    }
    if (v25)
      goto LABEL_30;
LABEL_57:
    v15 = v16;
    v16 += 16;
    if (v16 == a2)
      return 1;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (!v25)
    goto LABEL_57;
LABEL_30:
  v48 = *(_OWORD *)v16;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v29 = v16;
  while (1)
  {
    v30 = v29;
    v29 = v15;
    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v30, (__int128 *)v15);
    if (v15 == a1)
      break;
    v31 = v48;
    if (*((_QWORD *)&v48 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v49 = *(_QWORD **)(v15 - 16);
    v34 = *(std::__shared_weak_count **)(v15 - 8);
    v50 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v37 = lessThan((_QWORD *)v31, &v49);
      do
        v38 = __ldaxr(v35);
      while (__stlxr(v38 - 1, v35));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    else
    {
      v37 = lessThan((_QWORD *)v31, &v49);
    }
    if (*((_QWORD *)&v31 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
      }
    }
    v15 -= 16;
    if (!v37)
      goto LABEL_51;
  }
  v29 = a1;
LABEL_51:
  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v29, &v48);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (++v17 != 8)
    goto LABEL_57;
  return v16 + 16 == a2;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count **v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count **v13;
  unint64_t *v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  std::__shared_weak_count *v86;

  v6 = *(uint64_t **)a2;
  v8 = (std::__shared_weak_count **)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *(uint64_t **)a1;
  v13 = (std::__shared_weak_count **)(a1 + 8);
  v12 = *(std::__shared_weak_count **)(a1 + 8);
  if (v12)
  {
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = 0;
  if (v6 && v11)
  {
    v17 = *v6;
    v16 = v17 && (v18 = *v11) != 0 && *(double *)(v17 + 12) < *(double *)(v18 + 12);
  }
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v7)
  {
    v21 = (unint64_t *)&v7->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v23 = *(uint64_t **)a3;
  v24 = *(std::__shared_weak_count **)(a3 + 8);
  if (v16)
  {
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = *(uint64_t **)a2;
    v28 = *(std::__shared_weak_count **)(a2 + 8);
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = 0;
    if (v23 && v27)
    {
      v32 = *v23;
      v31 = v32 && (v33 = *v27) != 0 && *(double *)(v32 + 12) < *(double *)(v33 + 12);
    }
    if (v28)
    {
      v43 = (unint64_t *)&v28->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v24)
    {
      v45 = (unint64_t *)&v24->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v47 = *(uint64_t **)a1;
    if (v31)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v47;
LABEL_107:
      v8 = (std::__shared_weak_count **)(a3 + 8);
LABEL_121:
      v86 = *v13;
      *v13 = *v8;
      *v8 = v86;
      return;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v47;
    v48 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v48;
    v49 = *(uint64_t **)a3;
    v50 = *(std::__shared_weak_count **)(a3 + 8);
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      v48 = *v8;
    }
    v53 = *(uint64_t **)a2;
    if (v48)
    {
      v54 = (unint64_t *)&v48->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v56 = 0;
    if (v49 && v53)
    {
      v57 = *v49;
      v56 = v57 && (v58 = *v53) != 0 && *(double *)(v57 + 12) < *(double *)(v58 + 12);
    }
    if (v48)
    {
      v76 = (unint64_t *)&v48->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (v50)
    {
      v78 = (unint64_t *)&v50->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v56)
    {
      v80 = *(uint64_t **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v80;
      v13 = v8;
      goto LABEL_107;
    }
  }
  else
  {
    if (v24)
    {
      v34 = (unint64_t *)&v24->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = *(uint64_t **)a2;
    v37 = *(std::__shared_weak_count **)(a2 + 8);
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v40 = 0;
    if (v23 && v36)
    {
      v41 = *v23;
      v40 = v41 && (v42 = *v36) != 0 && *(double *)(v41 + 12) < *(double *)(v42 + 12);
    }
    if (v37)
    {
      v59 = (unint64_t *)&v37->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v24)
    {
      v61 = (unint64_t *)&v24->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v40)
    {
      v63 = *(uint64_t **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v63;
      v64 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v64;
      v65 = *(uint64_t **)a2;
      v66 = *(std::__shared_weak_count **)(a2 + 8);
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = *(uint64_t **)a1;
      v70 = *(std::__shared_weak_count **)(a1 + 8);
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      v73 = 0;
      if (v65 && v69)
      {
        v74 = *v65;
        v73 = v74 && (v75 = *v69) != 0 && *(double *)(v74 + 12) < *(double *)(v75 + 12);
      }
      if (v70)
      {
        v81 = (unint64_t *)&v70->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (v66)
      {
        v83 = (unint64_t *)&v66->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (v73)
      {
        v85 = *(uint64_t **)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v85;
        goto LABEL_121;
      }
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t *v58;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v8 = *(uint64_t **)a4;
  v9 = *(std::__shared_weak_count **)(a4 + 8);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = 0;
  if (v8 && v12)
  {
    v17 = *v8;
    v16 = v17 && (v18 = *v12) != 0 && *(double *)(v17 + 12) < *(double *)(v18 + 12);
  }
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v9)
    goto LABEL_22;
  v21 = (unint64_t *)&v9->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v16)
      return;
  }
  else
  {
LABEL_22:
    if (!v16)
      return;
  }
  v23 = *a3;
  *a3 = *(uint64_t **)a4;
  *(_QWORD *)a4 = v23;
  v24 = a3[1];
  a3[1] = *(uint64_t **)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v24;
  v25 = *a3;
  v26 = (std::__shared_weak_count *)a3[1];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = *a2;
  v30 = (std::__shared_weak_count *)a2[1];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = 0;
  if (v25 && v29)
  {
    v34 = *v25;
    v33 = v34 && (v35 = *v29) != 0 && *(double *)(v34 + 12) < *(double *)(v35 + 12);
  }
  if (v30)
  {
    v36 = (unint64_t *)&v30->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v26)
  {
    v38 = (unint64_t *)&v26->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v33)
  {
    v40 = *a2;
    *a2 = *a3;
    *a3 = v40;
    v41 = a2[1];
    a2[1] = a3[1];
    a3[1] = v41;
    v42 = *a2;
    v43 = (std::__shared_weak_count *)a2[1];
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = *a1;
    v47 = (std::__shared_weak_count *)a1[1];
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = 0;
    if (v42 && v46)
    {
      v51 = *v42;
      v50 = v51 && (v52 = *v46) != 0 && *(double *)(v51 + 12) < *(double *)(v52 + 12);
    }
    if (v47)
    {
      v53 = (unint64_t *)&v47->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (v43)
    {
      v55 = (unint64_t *)&v43->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v50)
    {
      v57 = *a1;
      *a1 = *a2;
      *a2 = v57;
      v58 = a1[1];
      a1[1] = a2[1];
      a2[1] = v58;
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t **)a1, (uint64_t **)a2, (uint64_t **)a3, (uint64_t)a4);
  v10 = *(uint64_t **)a5;
  v11 = *(std::__shared_weak_count **)(a5 + 8);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a4;
  v15 = (std::__shared_weak_count *)a4[1];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = 0;
  if (v10 && v14)
  {
    v19 = *v10;
    v18 = v19 && (v20 = *v14) != 0 && *(double *)(v19 + 12) < *(double *)(v20 + 12);
  }
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v11)
    goto LABEL_22;
  v23 = (unint64_t *)&v11->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v18)
      return;
  }
  else
  {
LABEL_22:
    if (!v18)
      return;
  }
  v25 = *a4;
  *a4 = *(uint64_t **)a5;
  *(_QWORD *)a5 = v25;
  v26 = a4[1];
  a4[1] = *(uint64_t **)(a5 + 8);
  *(_QWORD *)(a5 + 8) = v26;
  v27 = *a4;
  v28 = (std::__shared_weak_count *)a4[1];
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = *(uint64_t **)a3;
  v32 = *(std::__shared_weak_count **)(a3 + 8);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = 0;
  if (v27 && v31)
  {
    v36 = *v27;
    v35 = v36 && (v37 = *v31) != 0 && *(double *)(v36 + 12) < *(double *)(v37 + 12);
  }
  if (v32)
  {
    v38 = (unint64_t *)&v32->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v28)
  {
    v40 = (unint64_t *)&v28->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v35)
  {
    v42 = *(uint64_t **)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v42;
    v43 = *(uint64_t **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = a4[1];
    a4[1] = v43;
    v44 = *(uint64_t **)a3;
    v45 = *(std::__shared_weak_count **)(a3 + 8);
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = *(uint64_t **)a2;
    v49 = *(std::__shared_weak_count **)(a2 + 8);
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v52 = 0;
    if (v44 && v48)
    {
      v53 = *v44;
      v52 = v53 && (v54 = *v48) != 0 && *(double *)(v53 + 12) < *(double *)(v54 + 12);
    }
    if (v49)
    {
      v55 = (unint64_t *)&v49->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v45)
    {
      v57 = (unint64_t *)&v45->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (v52)
    {
      v59 = *(uint64_t **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v59;
      v60 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v60;
      v61 = *(uint64_t **)a2;
      v62 = *(std::__shared_weak_count **)(a2 + 8);
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v65 = *(uint64_t **)a1;
      v66 = *(std::__shared_weak_count **)(a1 + 8);
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = 0;
      if (v61 && v65)
      {
        v70 = *v61;
        v69 = v70 && (v71 = *v65) != 0 && *(double *)(v70 + 12) < *(double *)(v71 + 12);
      }
      if (v66)
      {
        v72 = (unint64_t *)&v66->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (v62)
      {
        v74 = (unint64_t *)&v62->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      if (v69)
      {
        v76 = *(uint64_t **)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v76;
        v77 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v77;
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(uint64_t **)(a2 - 16);
      v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *(uint64_t **)a1;
      v11 = *(std::__shared_weak_count **)(a1 + 8);
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = 0;
      if (v6 && v10)
      {
        v15 = *v6;
        v14 = v15 && (v16 = *v10) != 0 && *(double *)(v15 + 12) < *(double *)(v16 + 12);
      }
      if (v11)
      {
        v53 = (unint64_t *)&v11->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v7)
      {
        v55 = (unint64_t *)&v7->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v14)
      {
        v57 = *(uint64_t **)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v57;
        v58 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v58;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t **)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a1 + 32, (uint64_t **)(a1 + 48), a2 - 16);
      return 1;
    default:
      v17 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a1 + 32);
      v18 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v19 = 0;
      break;
  }
  while (2)
  {
    v20 = *(uint64_t **)v18;
    v21 = *(std::__shared_weak_count **)(v18 + 8);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = *(uint64_t **)v17;
    v25 = *(std::__shared_weak_count **)(v17 + 8);
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = 0;
    if (v20 && v24)
    {
      v29 = *v20;
      v28 = v29 && (v30 = *v24) != 0 && *(double *)(v29 + 12) < *(double *)(v30 + 12);
    }
    if (v25)
    {
      v31 = (unint64_t *)&v25->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (!v21)
      goto LABEL_36;
    v33 = (unint64_t *)&v21->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!v28)
        goto LABEL_71;
    }
    else
    {
LABEL_36:
      if (!v28)
        goto LABEL_71;
    }
    v59 = *(_OWORD *)v18;
    *(_QWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = 0;
    v35 = v18;
    while (1)
    {
      v36 = v35;
      v35 = v17;
      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v36, (__int128 *)v17);
      if (v17 == a1)
        break;
      v37 = v59;
      if (*((_QWORD *)&v59 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = *(uint64_t **)(v17 - 16);
      v41 = *(std::__shared_weak_count **)(v17 - 8);
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = 0;
      if (!(_QWORD)v37 || !v40)
        goto LABEL_50;
      if (*(_QWORD *)v37)
      {
        v45 = *v40;
        if (v45)
        {
          v44 = *(double *)(*(_QWORD *)v37 + 12) < *(double *)(v45 + 12);
LABEL_50:
          if (!v41)
            goto LABEL_56;
          goto LABEL_53;
        }
      }
      v44 = 0;
      if (!v41)
        goto LABEL_56;
LABEL_53:
      v46 = (unint64_t *)&v41->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (v47)
      {
LABEL_56:
        if (*((_QWORD *)&v37 + 1))
          goto LABEL_57;
        goto LABEL_62;
      }
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if (*((_QWORD *)&v37 + 1))
      {
LABEL_57:
        v48 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
        }
      }
LABEL_62:
      v17 -= 16;
      if (!v44)
        goto LABEL_65;
    }
    v35 = a1;
LABEL_65:
    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v35, &v59);
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
    if (*((_QWORD *)&v59 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (++v19 != 8)
    {
LABEL_71:
      v17 = v18;
      v18 += 16;
      if (v18 == a2)
        return 1;
      continue;
    }
    return v18 + 16 == a2;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _BOOL4 v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD **)(a2 - 16);
      v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *(std::__shared_weak_count **)(a1 + 8);
      v49 = *(_QWORD **)a1;
      v50 = v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v13 = lessThan(v6, &v49);
        do
          v14 = __ldaxr(v11);
        while (__stlxr(v14 - 1, v11));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      else
      {
        v13 = lessThan(v6, &v49);
      }
      if (v7)
      {
        v44 = (unint64_t *)&v7->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v13)
      {
        v46 = *(_QWORD **)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v46;
        v47 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v47;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v15 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a1 + 32);
      v16 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *(_QWORD **)v16;
    v19 = *(std::__shared_weak_count **)(v16 + 8);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *(std::__shared_weak_count **)(v15 + 8);
    v49 = *(_QWORD **)v15;
    v50 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = lessThan(v18, &v49);
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      v25 = lessThan(v18, &v49);
    }
    if (v19)
    {
      v27 = (unint64_t *)&v19->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
        break;
    }
    if (v25)
      goto LABEL_30;
LABEL_57:
    v15 = v16;
    v16 += 16;
    if (v16 == a2)
      return 1;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (!v25)
    goto LABEL_57;
LABEL_30:
  v48 = *(_OWORD *)v16;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v29 = v16;
  while (1)
  {
    v30 = v29;
    v29 = v15;
    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v30, (__int128 *)v15);
    if (v15 == a1)
      break;
    v31 = v48;
    if (*((_QWORD *)&v48 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v49 = *(_QWORD **)(v15 - 16);
    v34 = *(std::__shared_weak_count **)(v15 - 8);
    v50 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v37 = lessThan((_QWORD *)v31, &v49);
      do
        v38 = __ldaxr(v35);
      while (__stlxr(v38 - 1, v35));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    else
    {
      v37 = lessThan((_QWORD *)v31, &v49);
    }
    if (*((_QWORD *)&v31 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
      }
    }
    v15 -= 16;
    if (!v37)
      goto LABEL_51;
  }
  v29 = a1;
LABEL_51:
  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v29, &v48);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (++v17 != 8)
    goto LABEL_57;
  return v16 + 16 == a2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _BOOL4 v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD **)(a2 - 16);
      v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *(std::__shared_weak_count **)(a1 + 8);
      v49 = *(_QWORD **)a1;
      v50 = v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v13 = lessThan(v6, &v49);
        do
          v14 = __ldaxr(v11);
        while (__stlxr(v14 - 1, v11));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      else
      {
        v13 = lessThan(v6, &v49);
      }
      if (v7)
      {
        v44 = (unint64_t *)&v7->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v13)
      {
        v46 = *(_QWORD **)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v46;
        v47 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v47;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v15 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(a1, a1 + 16, a1 + 32);
      v16 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *(_QWORD **)v16;
    v19 = *(std::__shared_weak_count **)(v16 + 8);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *(std::__shared_weak_count **)(v15 + 8);
    v49 = *(_QWORD **)v15;
    v50 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = lessThan(v18, &v49);
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      v25 = lessThan(v18, &v49);
    }
    if (v19)
    {
      v27 = (unint64_t *)&v19->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
        break;
    }
    if (v25)
      goto LABEL_30;
LABEL_57:
    v15 = v16;
    v16 += 16;
    if (v16 == a2)
      return 1;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (!v25)
    goto LABEL_57;
LABEL_30:
  v48 = *(_OWORD *)v16;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v29 = v16;
  while (1)
  {
    v30 = v29;
    v29 = v15;
    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v30, (__int128 *)v15);
    if (v15 == a1)
      break;
    v31 = v48;
    if (*((_QWORD *)&v48 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v49 = *(_QWORD **)(v15 - 16);
    v34 = *(std::__shared_weak_count **)(v15 - 8);
    v50 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v37 = lessThan((_QWORD *)v31, &v49);
      do
        v38 = __ldaxr(v35);
      while (__stlxr(v38 - 1, v35));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    else
    {
      v37 = lessThan((_QWORD *)v31, &v49);
    }
    if (*((_QWORD *)&v31 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
      }
    }
    v15 -= 16;
    if (!v37)
      goto LABEL_51;
  }
  v29 = a1;
LABEL_51:
  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v29, &v48);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (++v17 != 8)
    goto LABEL_57;
  return v16 + 16 == a2;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count **v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count **v13;
  unint64_t *v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  std::__shared_weak_count *v86;

  v6 = *(uint64_t **)a2;
  v8 = (std::__shared_weak_count **)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *(uint64_t **)a1;
  v13 = (std::__shared_weak_count **)(a1 + 8);
  v12 = *(std::__shared_weak_count **)(a1 + 8);
  if (v12)
  {
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = 0;
  if (v6 && v11)
  {
    v17 = *v6;
    v16 = v17 && (v18 = *v11) != 0 && *(double *)(v17 + 20) < *(double *)(v18 + 20);
  }
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v7)
  {
    v21 = (unint64_t *)&v7->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v23 = *(uint64_t **)a3;
  v24 = *(std::__shared_weak_count **)(a3 + 8);
  if (v16)
  {
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = *(uint64_t **)a2;
    v28 = *(std::__shared_weak_count **)(a2 + 8);
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = 0;
    if (v23 && v27)
    {
      v32 = *v23;
      v31 = v32 && (v33 = *v27) != 0 && *(double *)(v32 + 20) < *(double *)(v33 + 20);
    }
    if (v28)
    {
      v43 = (unint64_t *)&v28->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v24)
    {
      v45 = (unint64_t *)&v24->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v47 = *(uint64_t **)a1;
    if (v31)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v47;
LABEL_107:
      v8 = (std::__shared_weak_count **)(a3 + 8);
LABEL_121:
      v86 = *v13;
      *v13 = *v8;
      *v8 = v86;
      return;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v47;
    v48 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v48;
    v49 = *(uint64_t **)a3;
    v50 = *(std::__shared_weak_count **)(a3 + 8);
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      v48 = *v8;
    }
    v53 = *(uint64_t **)a2;
    if (v48)
    {
      v54 = (unint64_t *)&v48->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v56 = 0;
    if (v49 && v53)
    {
      v57 = *v49;
      v56 = v57 && (v58 = *v53) != 0 && *(double *)(v57 + 20) < *(double *)(v58 + 20);
    }
    if (v48)
    {
      v76 = (unint64_t *)&v48->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (v50)
    {
      v78 = (unint64_t *)&v50->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v56)
    {
      v80 = *(uint64_t **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v80;
      v13 = v8;
      goto LABEL_107;
    }
  }
  else
  {
    if (v24)
    {
      v34 = (unint64_t *)&v24->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = *(uint64_t **)a2;
    v37 = *(std::__shared_weak_count **)(a2 + 8);
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v40 = 0;
    if (v23 && v36)
    {
      v41 = *v23;
      v40 = v41 && (v42 = *v36) != 0 && *(double *)(v41 + 20) < *(double *)(v42 + 20);
    }
    if (v37)
    {
      v59 = (unint64_t *)&v37->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v24)
    {
      v61 = (unint64_t *)&v24->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v40)
    {
      v63 = *(uint64_t **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v63;
      v64 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v64;
      v65 = *(uint64_t **)a2;
      v66 = *(std::__shared_weak_count **)(a2 + 8);
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = *(uint64_t **)a1;
      v70 = *(std::__shared_weak_count **)(a1 + 8);
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      v73 = 0;
      if (v65 && v69)
      {
        v74 = *v65;
        v73 = v74 && (v75 = *v69) != 0 && *(double *)(v74 + 20) < *(double *)(v75 + 20);
      }
      if (v70)
      {
        v81 = (unint64_t *)&v70->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (v66)
      {
        v83 = (unint64_t *)&v66->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (v73)
      {
        v85 = *(uint64_t **)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v85;
        goto LABEL_121;
      }
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t *v58;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v8 = *(uint64_t **)a4;
  v9 = *(std::__shared_weak_count **)(a4 + 8);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = 0;
  if (v8 && v12)
  {
    v17 = *v8;
    v16 = v17 && (v18 = *v12) != 0 && *(double *)(v17 + 20) < *(double *)(v18 + 20);
  }
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v9)
    goto LABEL_22;
  v21 = (unint64_t *)&v9->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v16)
      return;
  }
  else
  {
LABEL_22:
    if (!v16)
      return;
  }
  v23 = *a3;
  *a3 = *(uint64_t **)a4;
  *(_QWORD *)a4 = v23;
  v24 = a3[1];
  a3[1] = *(uint64_t **)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v24;
  v25 = *a3;
  v26 = (std::__shared_weak_count *)a3[1];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = *a2;
  v30 = (std::__shared_weak_count *)a2[1];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = 0;
  if (v25 && v29)
  {
    v34 = *v25;
    v33 = v34 && (v35 = *v29) != 0 && *(double *)(v34 + 20) < *(double *)(v35 + 20);
  }
  if (v30)
  {
    v36 = (unint64_t *)&v30->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v26)
  {
    v38 = (unint64_t *)&v26->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v33)
  {
    v40 = *a2;
    *a2 = *a3;
    *a3 = v40;
    v41 = a2[1];
    a2[1] = a3[1];
    a3[1] = v41;
    v42 = *a2;
    v43 = (std::__shared_weak_count *)a2[1];
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = *a1;
    v47 = (std::__shared_weak_count *)a1[1];
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = 0;
    if (v42 && v46)
    {
      v51 = *v42;
      v50 = v51 && (v52 = *v46) != 0 && *(double *)(v51 + 20) < *(double *)(v52 + 20);
    }
    if (v47)
    {
      v53 = (unint64_t *)&v47->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (v43)
    {
      v55 = (unint64_t *)&v43->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v50)
    {
      v57 = *a1;
      *a1 = *a2;
      *a2 = v57;
      v58 = a1[1];
      a1[1] = a2[1];
      a2[1] = v58;
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>((uint64_t **)a1, (uint64_t **)a2, (uint64_t **)a3, (uint64_t)a4);
  v10 = *(uint64_t **)a5;
  v11 = *(std::__shared_weak_count **)(a5 + 8);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a4;
  v15 = (std::__shared_weak_count *)a4[1];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = 0;
  if (v10 && v14)
  {
    v19 = *v10;
    v18 = v19 && (v20 = *v14) != 0 && *(double *)(v19 + 20) < *(double *)(v20 + 20);
  }
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v11)
    goto LABEL_22;
  v23 = (unint64_t *)&v11->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v18)
      return;
  }
  else
  {
LABEL_22:
    if (!v18)
      return;
  }
  v25 = *a4;
  *a4 = *(uint64_t **)a5;
  *(_QWORD *)a5 = v25;
  v26 = a4[1];
  a4[1] = *(uint64_t **)(a5 + 8);
  *(_QWORD *)(a5 + 8) = v26;
  v27 = *a4;
  v28 = (std::__shared_weak_count *)a4[1];
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = *(uint64_t **)a3;
  v32 = *(std::__shared_weak_count **)(a3 + 8);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = 0;
  if (v27 && v31)
  {
    v36 = *v27;
    v35 = v36 && (v37 = *v31) != 0 && *(double *)(v36 + 20) < *(double *)(v37 + 20);
  }
  if (v32)
  {
    v38 = (unint64_t *)&v32->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v28)
  {
    v40 = (unint64_t *)&v28->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v35)
  {
    v42 = *(uint64_t **)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v42;
    v43 = *(uint64_t **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = a4[1];
    a4[1] = v43;
    v44 = *(uint64_t **)a3;
    v45 = *(std::__shared_weak_count **)(a3 + 8);
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = *(uint64_t **)a2;
    v49 = *(std::__shared_weak_count **)(a2 + 8);
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v52 = 0;
    if (v44 && v48)
    {
      v53 = *v44;
      v52 = v53 && (v54 = *v48) != 0 && *(double *)(v53 + 20) < *(double *)(v54 + 20);
    }
    if (v49)
    {
      v55 = (unint64_t *)&v49->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v45)
    {
      v57 = (unint64_t *)&v45->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (v52)
    {
      v59 = *(uint64_t **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v59;
      v60 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v60;
      v61 = *(uint64_t **)a2;
      v62 = *(std::__shared_weak_count **)(a2 + 8);
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v65 = *(uint64_t **)a1;
      v66 = *(std::__shared_weak_count **)(a1 + 8);
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = 0;
      if (v61 && v65)
      {
        v70 = *v61;
        v69 = v70 && (v71 = *v65) != 0 && *(double *)(v70 + 20) < *(double *)(v71 + 20);
      }
      if (v66)
      {
        v72 = (unint64_t *)&v66->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (v62)
      {
        v74 = (unint64_t *)&v62->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      if (v69)
      {
        v76 = *(uint64_t **)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v76;
        v77 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v77;
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(uint64_t **)(a2 - 16);
      v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *(uint64_t **)a1;
      v11 = *(std::__shared_weak_count **)(a1 + 8);
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = 0;
      if (v6 && v10)
      {
        v15 = *v6;
        v14 = v15 && (v16 = *v10) != 0 && *(double *)(v15 + 20) < *(double *)(v16 + 20);
      }
      if (v11)
      {
        v53 = (unint64_t *)&v11->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v7)
      {
        v55 = (unint64_t *)&v7->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v14)
      {
        v57 = *(uint64_t **)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v57;
        v58 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v58;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>((uint64_t **)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(a1, a1 + 16, a1 + 32, (uint64_t **)(a1 + 48), a2 - 16);
      return 1;
    default:
      v17 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(a1, a1 + 16, a1 + 32);
      v18 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v19 = 0;
      break;
  }
  while (2)
  {
    v20 = *(uint64_t **)v18;
    v21 = *(std::__shared_weak_count **)(v18 + 8);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = *(uint64_t **)v17;
    v25 = *(std::__shared_weak_count **)(v17 + 8);
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = 0;
    if (v20 && v24)
    {
      v29 = *v20;
      v28 = v29 && (v30 = *v24) != 0 && *(double *)(v29 + 20) < *(double *)(v30 + 20);
    }
    if (v25)
    {
      v31 = (unint64_t *)&v25->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (!v21)
      goto LABEL_36;
    v33 = (unint64_t *)&v21->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!v28)
        goto LABEL_71;
    }
    else
    {
LABEL_36:
      if (!v28)
        goto LABEL_71;
    }
    v59 = *(_OWORD *)v18;
    *(_QWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = 0;
    v35 = v18;
    while (1)
    {
      v36 = v35;
      v35 = v17;
      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v36, (__int128 *)v17);
      if (v17 == a1)
        break;
      v37 = v59;
      if (*((_QWORD *)&v59 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = *(uint64_t **)(v17 - 16);
      v41 = *(std::__shared_weak_count **)(v17 - 8);
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = 0;
      if (!(_QWORD)v37 || !v40)
        goto LABEL_50;
      if (*(_QWORD *)v37)
      {
        v45 = *v40;
        if (v45)
        {
          v44 = *(double *)(*(_QWORD *)v37 + 20) < *(double *)(v45 + 20);
LABEL_50:
          if (!v41)
            goto LABEL_56;
          goto LABEL_53;
        }
      }
      v44 = 0;
      if (!v41)
        goto LABEL_56;
LABEL_53:
      v46 = (unint64_t *)&v41->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (v47)
      {
LABEL_56:
        if (*((_QWORD *)&v37 + 1))
          goto LABEL_57;
        goto LABEL_62;
      }
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if (*((_QWORD *)&v37 + 1))
      {
LABEL_57:
        v48 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
        }
      }
LABEL_62:
      v17 -= 16;
      if (!v44)
        goto LABEL_65;
    }
    v35 = a1;
LABEL_65:
    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v35, &v59);
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
    if (*((_QWORD *)&v59 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (++v19 != 8)
    {
LABEL_71:
      v17 = v18;
      v18 += 16;
      if (v18 == a2)
        return 1;
      continue;
    }
    return v18 + 16 == a2;
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count **v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count **v12;
  unint64_t *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _BOOL4 v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BOOL4 v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _BOOL4 v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _BOOL4 v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;

  v6 = *(_QWORD **)a2;
  v8 = (std::__shared_weak_count **)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = (std::__shared_weak_count **)(a1 + 8);
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  v69 = *(_QWORD **)a1;
  v70 = v11;
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = lessThan(v6, &v69);
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 - 1, v13));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v15 = lessThan(v6, &v69);
  }
  if (!v7)
    goto LABEL_16;
  v17 = (unint64_t *)&v7->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v15)
      goto LABEL_17;
  }
  else
  {
LABEL_16:
    if (v15)
    {
LABEL_17:
      v19 = *(_QWORD **)a3;
      v20 = *(std::__shared_weak_count **)(a3 + 8);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *(std::__shared_weak_count **)(a2 + 8);
      v69 = *(_QWORD **)a2;
      v70 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        v26 = lessThan(v19, &v69);
        do
          v27 = __ldaxr(v24);
        while (__stlxr(v27 - 1, v24));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      else
      {
        v26 = lessThan(v19, &v69);
      }
      if (v20)
      {
        v37 = (unint64_t *)&v20->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v39 = *(_QWORD **)a1;
      if (v26)
      {
        *(_QWORD *)a1 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v39;
LABEL_83:
        v8 = (std::__shared_weak_count **)(a3 + 8);
LABEL_92:
        v68 = *v12;
        *v12 = *v8;
        *v8 = v68;
        return;
      }
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v39;
      v40 = *(std::__shared_weak_count **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v40;
      v41 = *(_QWORD **)a3;
      v42 = *(std::__shared_weak_count **)(a3 + 8);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        v40 = *v8;
      }
      v69 = *(_QWORD **)a2;
      v70 = v40;
      if (v40)
      {
        v45 = (unint64_t *)&v40->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
        v47 = lessThan(v41, &v69);
        do
          v48 = __ldaxr(v45);
        while (__stlxr(v48 - 1, v45));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      else
      {
        v47 = lessThan(v41, &v69);
      }
      if (v42)
      {
        v62 = (unint64_t *)&v42->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v47)
      {
        v64 = *(_QWORD **)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v64;
        v12 = v8;
        goto LABEL_83;
      }
      return;
    }
  }
  v28 = *(_QWORD **)a3;
  v29 = *(std::__shared_weak_count **)(a3 + 8);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *(std::__shared_weak_count **)(a2 + 8);
  v69 = *(_QWORD **)a2;
  v70 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v35 = lessThan(v28, &v69);
    do
      v36 = __ldaxr(v33);
    while (__stlxr(v36 - 1, v33));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  else
  {
    v35 = lessThan(v28, &v69);
  }
  if (!v29)
    goto LABEL_62;
  v49 = (unint64_t *)&v29->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (!v35)
      return;
  }
  else
  {
LABEL_62:
    if (!v35)
      return;
  }
  v51 = *(_QWORD **)a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v51;
  v52 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v52;
  v53 = *(_QWORD **)a2;
  v54 = *(std::__shared_weak_count **)(a2 + 8);
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v57 = *(std::__shared_weak_count **)(a1 + 8);
  v69 = *(_QWORD **)a1;
  v70 = v57;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    v60 = lessThan(v53, &v69);
    do
      v61 = __ldaxr(v58);
    while (__stlxr(v61 - 1, v58));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  else
  {
    v60 = lessThan(v53, &v69);
  }
  if (v54)
  {
    v65 = (unint64_t *)&v54->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v60)
  {
    v67 = *(_QWORD **)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v67;
    goto LABEL_92;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BOOL4 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL4 v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _BOOL4 v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(a1, a2, a3);
  v8 = *(_QWORD **)a4;
  v9 = *(std::__shared_weak_count **)(a4 + 8);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(std::__shared_weak_count **)(a3 + 8);
  v47 = *(_QWORD **)a3;
  v48 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = lessThan(v8, &v47);
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 - 1, v13));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    v15 = lessThan(v8, &v47);
  }
  if (!v9)
    goto LABEL_16;
  v17 = (unint64_t *)&v9->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v15)
      return;
  }
  else
  {
LABEL_16:
    if (!v15)
      return;
  }
  v19 = *(_QWORD **)a3;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  *(_QWORD *)a4 = v19;
  v20 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v20;
  v21 = *(_QWORD **)a3;
  v22 = *(std::__shared_weak_count **)(a3 + 8);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(std::__shared_weak_count **)(a2 + 8);
  v47 = *(_QWORD **)a2;
  v48 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v28 = lessThan(v21, &v47);
    do
      v29 = __ldaxr(v26);
    while (__stlxr(v29 - 1, v26));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    v28 = lessThan(v21, &v47);
  }
  if (!v22)
    goto LABEL_34;
  v30 = (unint64_t *)&v22->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (!v28)
      return;
  }
  else
  {
LABEL_34:
    if (!v28)
      return;
  }
  v32 = *(_QWORD **)a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v32;
  v33 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v33;
  v34 = *(_QWORD **)a2;
  v35 = *(std::__shared_weak_count **)(a2 + 8);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = *(std::__shared_weak_count **)(a1 + 8);
  v47 = *(_QWORD **)a1;
  v48 = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    v41 = lessThan(v34, &v47);
    do
      v42 = __ldaxr(v39);
    while (__stlxr(v42 - 1, v39));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  else
  {
    v41 = lessThan(v34, &v47);
  }
  if (v35)
  {
    v43 = (unint64_t *)&v35->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v41)
  {
    v45 = *(_QWORD **)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v45;
    v46 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v46;
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL4 v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _BOOL4 v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _BOOL4 v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(a1, a2, a3, a4);
  v10 = *(_QWORD **)a5;
  v11 = *(std::__shared_weak_count **)(a5 + 8);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *(std::__shared_weak_count **)(a4 + 8);
  v62 = *(_QWORD **)a4;
  v63 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = lessThan(v10, &v62);
    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 - 1, v15));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    v17 = lessThan(v10, &v62);
  }
  if (!v11)
    goto LABEL_16;
  v19 = (unint64_t *)&v11->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v17)
      return;
  }
  else
  {
LABEL_16:
    if (!v17)
      return;
  }
  v21 = *(_QWORD **)a4;
  *(_QWORD *)a4 = *(_QWORD *)a5;
  *(_QWORD *)a5 = v21;
  v22 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = v22;
  v23 = *(_QWORD **)a4;
  v24 = *(std::__shared_weak_count **)(a4 + 8);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *(std::__shared_weak_count **)(a3 + 8);
  v62 = *(_QWORD **)a3;
  v63 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = lessThan(v23, &v62);
    do
      v31 = __ldaxr(v28);
    while (__stlxr(v31 - 1, v28));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  else
  {
    v30 = lessThan(v23, &v62);
  }
  if (!v24)
    goto LABEL_34;
  v32 = (unint64_t *)&v24->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (!v30)
      return;
  }
  else
  {
LABEL_34:
    if (!v30)
      return;
  }
  v34 = *(_QWORD **)a3;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  *(_QWORD *)a4 = v34;
  v35 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v35;
  v36 = *(_QWORD **)a3;
  v37 = *(std::__shared_weak_count **)(a3 + 8);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *(std::__shared_weak_count **)(a2 + 8);
  v62 = *(_QWORD **)a2;
  v63 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    v43 = lessThan(v36, &v62);
    do
      v44 = __ldaxr(v41);
    while (__stlxr(v44 - 1, v41));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  else
  {
    v43 = lessThan(v36, &v62);
  }
  if (v37)
  {
    v45 = (unint64_t *)&v37->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v43)
  {
    v47 = *(_QWORD **)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v47;
    v48 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v48;
    v49 = *(_QWORD **)a2;
    v50 = *(std::__shared_weak_count **)(a2 + 8);
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v53 = *(std::__shared_weak_count **)(a1 + 8);
    v62 = *(_QWORD **)a1;
    v63 = v53;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      v56 = lessThan(v49, &v62);
      do
        v57 = __ldaxr(v54);
      while (__stlxr(v57 - 1, v54));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    else
    {
      v56 = lessThan(v49, &v62);
    }
    if (v50)
    {
      v58 = (unint64_t *)&v50->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v56)
    {
      v60 = *(_QWORD **)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v60;
      v61 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v61;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _BOOL4 v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD **)(a2 - 16);
      v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *(std::__shared_weak_count **)(a1 + 8);
      v49 = *(_QWORD **)a1;
      v50 = v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v13 = lessThan(v6, &v49);
        do
          v14 = __ldaxr(v11);
        while (__stlxr(v14 - 1, v11));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      else
      {
        v13 = lessThan(v6, &v49);
      }
      if (v7)
      {
        v44 = (unint64_t *)&v7->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v13)
      {
        v46 = *(_QWORD **)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v46;
        v47 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v47;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v15 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(a1, a1 + 16, a1 + 32);
      v16 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *(_QWORD **)v16;
    v19 = *(std::__shared_weak_count **)(v16 + 8);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *(std::__shared_weak_count **)(v15 + 8);
    v49 = *(_QWORD **)v15;
    v50 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = lessThan(v18, &v49);
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      v25 = lessThan(v18, &v49);
    }
    if (v19)
    {
      v27 = (unint64_t *)&v19->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
        break;
    }
    if (v25)
      goto LABEL_30;
LABEL_57:
    v15 = v16;
    v16 += 16;
    if (v16 == a2)
      return 1;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (!v25)
    goto LABEL_57;
LABEL_30:
  v48 = *(_OWORD *)v16;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v29 = v16;
  while (1)
  {
    v30 = v29;
    v29 = v15;
    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v30, (__int128 *)v15);
    if (v15 == a1)
      break;
    v31 = v48;
    if (*((_QWORD *)&v48 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v49 = *(_QWORD **)(v15 - 16);
    v34 = *(std::__shared_weak_count **)(v15 - 8);
    v50 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v37 = lessThan((_QWORD *)v31, &v49);
      do
        v38 = __ldaxr(v35);
      while (__stlxr(v38 - 1, v35));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    else
    {
      v37 = lessThan((_QWORD *)v31, &v49);
    }
    if (*((_QWORD *)&v31 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
      }
    }
    v15 -= 16;
    if (!v37)
      goto LABEL_51;
  }
  v29 = a1;
LABEL_51:
  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v29, &v48);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (++v17 != 8)
    goto LABEL_57;
  return v16 + 16 == a2;
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29177F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29177F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917718;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29177C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29177C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29176A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29176A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29176E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29176E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 24);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count **v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count **v13;
  unint64_t *v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  std::__shared_weak_count *v86;

  v6 = *(uint64_t **)a2;
  v8 = (std::__shared_weak_count **)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *(uint64_t **)a1;
  v13 = (std::__shared_weak_count **)(a1 + 8);
  v12 = *(std::__shared_weak_count **)(a1 + 8);
  if (v12)
  {
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = 0;
  if (v6 && v11)
  {
    v17 = *v6;
    v16 = v17 && (v18 = *v11) != 0 && *(double *)(v17 + 28) < *(double *)(v18 + 28);
  }
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v7)
  {
    v21 = (unint64_t *)&v7->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v23 = *(uint64_t **)a3;
  v24 = *(std::__shared_weak_count **)(a3 + 8);
  if (v16)
  {
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = *(uint64_t **)a2;
    v28 = *(std::__shared_weak_count **)(a2 + 8);
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = 0;
    if (v23 && v27)
    {
      v32 = *v23;
      v31 = v32 && (v33 = *v27) != 0 && *(double *)(v32 + 28) < *(double *)(v33 + 28);
    }
    if (v28)
    {
      v43 = (unint64_t *)&v28->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v24)
    {
      v45 = (unint64_t *)&v24->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v47 = *(uint64_t **)a1;
    if (v31)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v47;
LABEL_107:
      v8 = (std::__shared_weak_count **)(a3 + 8);
LABEL_121:
      v86 = *v13;
      *v13 = *v8;
      *v8 = v86;
      return;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v47;
    v48 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v48;
    v49 = *(uint64_t **)a3;
    v50 = *(std::__shared_weak_count **)(a3 + 8);
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      v48 = *v8;
    }
    v53 = *(uint64_t **)a2;
    if (v48)
    {
      v54 = (unint64_t *)&v48->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v56 = 0;
    if (v49 && v53)
    {
      v57 = *v49;
      v56 = v57 && (v58 = *v53) != 0 && *(double *)(v57 + 28) < *(double *)(v58 + 28);
    }
    if (v48)
    {
      v76 = (unint64_t *)&v48->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (v50)
    {
      v78 = (unint64_t *)&v50->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v56)
    {
      v80 = *(uint64_t **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v80;
      v13 = v8;
      goto LABEL_107;
    }
  }
  else
  {
    if (v24)
    {
      v34 = (unint64_t *)&v24->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = *(uint64_t **)a2;
    v37 = *(std::__shared_weak_count **)(a2 + 8);
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v40 = 0;
    if (v23 && v36)
    {
      v41 = *v23;
      v40 = v41 && (v42 = *v36) != 0 && *(double *)(v41 + 28) < *(double *)(v42 + 28);
    }
    if (v37)
    {
      v59 = (unint64_t *)&v37->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v24)
    {
      v61 = (unint64_t *)&v24->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v40)
    {
      v63 = *(uint64_t **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v63;
      v64 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v64;
      v65 = *(uint64_t **)a2;
      v66 = *(std::__shared_weak_count **)(a2 + 8);
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = *(uint64_t **)a1;
      v70 = *(std::__shared_weak_count **)(a1 + 8);
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      v73 = 0;
      if (v65 && v69)
      {
        v74 = *v65;
        v73 = v74 && (v75 = *v69) != 0 && *(double *)(v74 + 28) < *(double *)(v75 + 28);
      }
      if (v70)
      {
        v81 = (unint64_t *)&v70->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (v66)
      {
        v83 = (unint64_t *)&v66->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (v73)
      {
        v85 = *(uint64_t **)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v85;
        goto LABEL_121;
      }
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t *v58;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v8 = *(uint64_t **)a4;
  v9 = *(std::__shared_weak_count **)(a4 + 8);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = 0;
  if (v8 && v12)
  {
    v17 = *v8;
    v16 = v17 && (v18 = *v12) != 0 && *(double *)(v17 + 28) < *(double *)(v18 + 28);
  }
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v9)
    goto LABEL_22;
  v21 = (unint64_t *)&v9->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v16)
      return;
  }
  else
  {
LABEL_22:
    if (!v16)
      return;
  }
  v23 = *a3;
  *a3 = *(uint64_t **)a4;
  *(_QWORD *)a4 = v23;
  v24 = a3[1];
  a3[1] = *(uint64_t **)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v24;
  v25 = *a3;
  v26 = (std::__shared_weak_count *)a3[1];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = *a2;
  v30 = (std::__shared_weak_count *)a2[1];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = 0;
  if (v25 && v29)
  {
    v34 = *v25;
    v33 = v34 && (v35 = *v29) != 0 && *(double *)(v34 + 28) < *(double *)(v35 + 28);
  }
  if (v30)
  {
    v36 = (unint64_t *)&v30->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v26)
  {
    v38 = (unint64_t *)&v26->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v33)
  {
    v40 = *a2;
    *a2 = *a3;
    *a3 = v40;
    v41 = a2[1];
    a2[1] = a3[1];
    a3[1] = v41;
    v42 = *a2;
    v43 = (std::__shared_weak_count *)a2[1];
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = *a1;
    v47 = (std::__shared_weak_count *)a1[1];
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = 0;
    if (v42 && v46)
    {
      v51 = *v42;
      v50 = v51 && (v52 = *v46) != 0 && *(double *)(v51 + 28) < *(double *)(v52 + 28);
    }
    if (v47)
    {
      v53 = (unint64_t *)&v47->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (v43)
    {
      v55 = (unint64_t *)&v43->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v50)
    {
      v57 = *a1;
      *a1 = *a2;
      *a2 = v57;
      v58 = a1[1];
      a1[1] = a2[1];
      a2[1] = v58;
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>((uint64_t **)a1, (uint64_t **)a2, (uint64_t **)a3, (uint64_t)a4);
  v10 = *(uint64_t **)a5;
  v11 = *(std::__shared_weak_count **)(a5 + 8);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a4;
  v15 = (std::__shared_weak_count *)a4[1];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = 0;
  if (v10 && v14)
  {
    v19 = *v10;
    v18 = v19 && (v20 = *v14) != 0 && *(double *)(v19 + 28) < *(double *)(v20 + 28);
  }
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v11)
    goto LABEL_22;
  v23 = (unint64_t *)&v11->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v18)
      return;
  }
  else
  {
LABEL_22:
    if (!v18)
      return;
  }
  v25 = *a4;
  *a4 = *(uint64_t **)a5;
  *(_QWORD *)a5 = v25;
  v26 = a4[1];
  a4[1] = *(uint64_t **)(a5 + 8);
  *(_QWORD *)(a5 + 8) = v26;
  v27 = *a4;
  v28 = (std::__shared_weak_count *)a4[1];
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = *(uint64_t **)a3;
  v32 = *(std::__shared_weak_count **)(a3 + 8);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = 0;
  if (v27 && v31)
  {
    v36 = *v27;
    v35 = v36 && (v37 = *v31) != 0 && *(double *)(v36 + 28) < *(double *)(v37 + 28);
  }
  if (v32)
  {
    v38 = (unint64_t *)&v32->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v28)
  {
    v40 = (unint64_t *)&v28->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v35)
  {
    v42 = *(uint64_t **)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v42;
    v43 = *(uint64_t **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = a4[1];
    a4[1] = v43;
    v44 = *(uint64_t **)a3;
    v45 = *(std::__shared_weak_count **)(a3 + 8);
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = *(uint64_t **)a2;
    v49 = *(std::__shared_weak_count **)(a2 + 8);
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v52 = 0;
    if (v44 && v48)
    {
      v53 = *v44;
      v52 = v53 && (v54 = *v48) != 0 && *(double *)(v53 + 28) < *(double *)(v54 + 28);
    }
    if (v49)
    {
      v55 = (unint64_t *)&v49->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v45)
    {
      v57 = (unint64_t *)&v45->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (v52)
    {
      v59 = *(uint64_t **)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v59;
      v60 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v60;
      v61 = *(uint64_t **)a2;
      v62 = *(std::__shared_weak_count **)(a2 + 8);
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v65 = *(uint64_t **)a1;
      v66 = *(std::__shared_weak_count **)(a1 + 8);
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = 0;
      if (v61 && v65)
      {
        v70 = *v61;
        v69 = v70 && (v71 = *v65) != 0 && *(double *)(v70 + 28) < *(double *)(v71 + 28);
      }
      if (v66)
      {
        v72 = (unint64_t *)&v66->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (v62)
      {
        v74 = (unint64_t *)&v62->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      if (v69)
      {
        v76 = *(uint64_t **)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v76;
        v77 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v77;
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(uint64_t **)(a2 - 16);
      v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *(uint64_t **)a1;
      v11 = *(std::__shared_weak_count **)(a1 + 8);
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = 0;
      if (v6 && v10)
      {
        v15 = *v6;
        v14 = v15 && (v16 = *v10) != 0 && *(double *)(v15 + 28) < *(double *)(v16 + 28);
      }
      if (v11)
      {
        v53 = (unint64_t *)&v11->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v7)
      {
        v55 = (unint64_t *)&v7->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v14)
      {
        v57 = *(uint64_t **)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v57;
        v58 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v58;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>((uint64_t **)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(a1, a1 + 16, a1 + 32, (uint64_t **)(a1 + 48), a2 - 16);
      return 1;
    default:
      v17 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(a1, a1 + 16, a1 + 32);
      v18 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v19 = 0;
      break;
  }
  while (2)
  {
    v20 = *(uint64_t **)v18;
    v21 = *(std::__shared_weak_count **)(v18 + 8);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = *(uint64_t **)v17;
    v25 = *(std::__shared_weak_count **)(v17 + 8);
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = 0;
    if (v20 && v24)
    {
      v29 = *v20;
      v28 = v29 && (v30 = *v24) != 0 && *(double *)(v29 + 28) < *(double *)(v30 + 28);
    }
    if (v25)
    {
      v31 = (unint64_t *)&v25->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (!v21)
      goto LABEL_36;
    v33 = (unint64_t *)&v21->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!v28)
        goto LABEL_71;
    }
    else
    {
LABEL_36:
      if (!v28)
        goto LABEL_71;
    }
    v59 = *(_OWORD *)v18;
    *(_QWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = 0;
    v35 = v18;
    while (1)
    {
      v36 = v35;
      v35 = v17;
      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v36, (__int128 *)v17);
      if (v17 == a1)
        break;
      v37 = v59;
      if (*((_QWORD *)&v59 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = *(uint64_t **)(v17 - 16);
      v41 = *(std::__shared_weak_count **)(v17 - 8);
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = 0;
      if (!(_QWORD)v37 || !v40)
        goto LABEL_50;
      if (*(_QWORD *)v37)
      {
        v45 = *v40;
        if (v45)
        {
          v44 = *(double *)(*(_QWORD *)v37 + 28) < *(double *)(v45 + 28);
LABEL_50:
          if (!v41)
            goto LABEL_56;
          goto LABEL_53;
        }
      }
      v44 = 0;
      if (!v41)
        goto LABEL_56;
LABEL_53:
      v46 = (unint64_t *)&v41->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (v47)
      {
LABEL_56:
        if (*((_QWORD *)&v37 + 1))
          goto LABEL_57;
        goto LABEL_62;
      }
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if (*((_QWORD *)&v37 + 1))
      {
LABEL_57:
        v48 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
        }
      }
LABEL_62:
      v17 -= 16;
      if (!v44)
        goto LABEL_65;
    }
    v35 = a1;
LABEL_65:
    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v35, &v59);
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
    if (*((_QWORD *)&v59 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (++v19 != 8)
    {
LABEL_71:
      v17 = v18;
      v18 += 16;
      if (v18 == a2)
        return 1;
      continue;
    }
    return v18 + 16 == a2;
  }
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29178A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29178A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 24);
}

void getRangeInTimeFrame<AudioMetadataTimeline::Storage<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>,std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>>>(unint64_t *a1, _QWORD *a2, double *a3, double *a4)
{
  unint64_t v5;
  unint64_t v6;
  char v10;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  BOOL v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v32;

  v5 = atomic_load(a2 + 7);
  v6 = atomic_load(a2 + 6);
  if (v5 >= v6)
  {
    v30 = 0;
    v31 = 0;
    v29 = 0;
  }
  else
  {
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = *(_OWORD *)(*(_QWORD *)(a2[1] + (((a2[4] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (*((_BYTE *)a2 + 32) + v5));
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = *(_QWORD *)v12;
      if (*(_BYTE *)(*(_QWORD *)v12 + 8))
      {
        v16 = *(double *)(v15 + 12);
        if (*(_BYTE *)(v15 + 20))
        {
          v17 = v16 + *(double *)(v15 + 24);
          v18 = *a4;
          v26 = v17 >= *a3 && v17 <= v18 || v16 >= *a3 && v16 <= v18;
        }
        else
        {
          v26 = v16 <= *a4 && v16 >= *a3;
        }
      }
      else
      {
        v20 = *(_QWORD *)(v12 + 16);
        v21 = *(std::__shared_weak_count **)(v12 + 24);
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(p_shared_owners);
          while (__stxr(v23 + 1, p_shared_owners));
        }
        v26 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(*(_QWORD *)(v20 + 16), *(std::__shared_weak_count **)(v20 + 24), a3, a4);
        if (v21)
        {
          v24 = (unint64_t *)&v21->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      if (v32)
      {
        v27 = (unint64_t *)&v32->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (v10 & 1 | !v26)
      {
        if (!v26 && (v10 & 1) != 0)
          goto LABEL_38;
      }
      else
      {
        v10 = 1;
        v11 = v5;
      }
      ++v5;
    }
    while (v5 != v6);
    v5 = v6;
LABEL_38:
    v29 = v5 - v11;
    if ((v10 & 1) != 0)
      v30 = v11;
    else
      v30 = 0;
    if ((v10 & 1) != 0)
      v31 = v5;
    else
      v31 = 0;
    if ((v10 & 1) == 0)
      v29 = 0;
  }
  *a1 = v30;
  a1[1] = v31;
  a1[2] = v29;
}

void sub_18EECE2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(uint64_t a1, std::__shared_weak_count *a2, double *a3, double *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BOOL8 v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_QWORD **)(a1 + 16);
  v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(v7, a3, a4);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (a2)
  {
    v14 = (unint64_t *)&a2->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
      std::__shared_weak_count::__release_weak(a2);
    }
  }
  return v11;
}

void sub_18EECE3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(_QWORD *a1, double *a2, double *a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v20;
  _BOOL8 v21;
  double v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v3 = *a1;
  if (*(_BYTE *)(*a1 + 16))
  {
    v4 = *(double *)(v3 + 20);
    if (*(_BYTE *)(v3 + 28))
    {
      v5 = v4 + *(double *)(v3 + 32);
      v6 = *a3;
      if (v5 < *a2 || v5 > v6)
        return v4 >= *a2 && v4 <= v6;
      else
        return 1;
    }
    else
    {
      return v4 <= *a3 && v4 >= *a2;
    }
  }
  v8 = a1[2];
  v9 = (std::__shared_weak_count *)a1[3];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(uint64_t **)(v8 + 16);
  v13 = *(std::__shared_weak_count **)(v8 + 24);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *v12;
  if (!*(_BYTE *)(*v12 + 24))
  {
LABEL_29:
    v21 = 1;
    if (!v13)
      goto LABEL_42;
LABEL_38:
    v23 = (unint64_t *)&v13->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    goto LABEL_42;
  }
  if (*(_BYTE *)(v16 + 36))
  {
    v17 = *(double *)(v16 + 40);
    v18 = *a3;
    if (v17 >= *a2 && v17 <= v18)
      goto LABEL_29;
    v20 = *(double *)(v16 + 28);
    if (v20 >= *a2)
    {
      v21 = v20 <= v18;
      if (v13)
        goto LABEL_38;
    }
    else
    {
      v21 = 0;
      if (v13)
        goto LABEL_38;
    }
  }
  else
  {
    v22 = *(double *)(v16 + 28);
    v21 = v22 <= *a3 && v22 >= *a2;
    if (v13)
      goto LABEL_38;
  }
LABEL_42:
  if (v9)
  {
    v25 = (unint64_t *)&v9->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v21;
}

void AudioMetadataTimeline::retrieveMetadataForTimeframe(AudioMetadataTimeline *this@<X0>, double *a2@<X1>, double *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  double v73;
  double v74;
  double v76;
  BOOL v77;
  double v78;
  unint64_t *v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  double v102;
  double v103;
  double v105;
  BOOL v106;
  double v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  BOOL v129;
  unint64_t *v130;
  unint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  BOOL v158;
  unint64_t *v159;
  unint64_t v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD **v176;
  _QWORD **v177;
  uint64_t v178;
  _QWORD **v179;
  _QWORD **v180;
  unsigned int v181;
  _QWORD **v182;
  unint64_t v183;
  unint64_t v184;
  char v185;
  unint64_t v186;
  __int128 v187;
  unint64_t *v188;
  unint64_t v189;
  _QWORD *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  BOOL v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t i;
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  double *v278;
  uint64_t v279;
  _QWORD *v281;
  unint64_t v282;
  uint64_t v283;
  __int128 v284;

  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = 0;
  v10 = *(_QWORD *)this;
  **(_DWORD **)this = 0;
  do
  {
    *(_QWORD *)(*(_QWORD *)(v10 + 4) + v9) = 0;
    v9 += 8;
  }
  while (v9 != 0x8000);
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = 0;
  v17 = *(_QWORD *)this;
  *(_DWORD *)(*(_QWORD *)this + 12) = 0;
  do
  {
    *(_QWORD *)(*(_QWORD *)(v17 + 16) + v16) = 0;
    v16 += 8;
  }
  while (v16 != 0x8000);
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = 0;
  v24 = *(_QWORD *)this;
  *(_DWORD *)(*(_QWORD *)this + 24) = 0;
  do
  {
    *(_QWORD *)(*(_QWORD *)(v24 + 28) + v23) = 0;
    v23 += 8;
  }
  while (v23 != 0x8000);
  if (v20)
  {
    v25 = (unint64_t *)&v20->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = 0;
  v31 = *(_QWORD *)this;
  *(_DWORD *)(*(_QWORD *)this + 36) = 0;
  do
  {
    *(_QWORD *)(*(_QWORD *)(v31 + 40) + v30) = 0;
    v30 += 8;
  }
  while (v30 != 0x8000);
  if (v27)
  {
    v32 = (unint64_t *)&v27->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = 0;
  v38 = *(_QWORD *)this;
  *(_DWORD *)(*(_QWORD *)this + 48) = 0;
  do
  {
    *(_QWORD *)(*(_QWORD *)(v38 + 52) + v37) = 0;
    v37 += 8;
  }
  while (v37 != 0x8000);
  if (v34)
  {
    v39 = (unint64_t *)&v34->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = 0;
  v45 = *(_QWORD *)this;
  *(_DWORD *)(*(_QWORD *)this + 60) = 0;
  do
  {
    *(_QWORD *)(*(_QWORD *)(v45 + 64) + v44) = 0;
    v44 += 8;
  }
  while (v44 != 0x8000);
  if (v41)
  {
    v46 = (unint64_t *)&v41->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = 0;
  v52 = *(_QWORD *)this;
  *(_DWORD *)(*(_QWORD *)this + 72) = 0;
  do
  {
    *(_QWORD *)(*(_QWORD *)(v52 + 76) + v51) = 0;
    v51 += 8;
  }
  while (v51 != 0x8000);
  if (v48)
  {
    v53 = (unint64_t *)&v48->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v58 = 0;
  v59 = *(_QWORD *)this;
  *(_DWORD *)(*(_QWORD *)this + 84) = 0;
  do
  {
    *(_QWORD *)(*(_QWORD *)(v59 + 88) + v58) = 0;
    v58 += 8;
  }
  while (v58 != 0x8000);
  if (v55)
  {
    v60 = (unint64_t *)&v55->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v62 = *(_QWORD *)this;
  v63 = atomic_load((unint64_t *)this + 9);
  v64 = atomic_load((unint64_t *)this + 8);
  if (v63 >= v64)
    goto LABEL_127;
  v65 = 0;
  v66 = v63;
  do
  {
    v67 = *(_QWORD *)(*((_QWORD *)this + 3) + (((*((_QWORD *)this + 6) + v63) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((_BYTE *)this + 48) + v63);
    v68 = *(uint64_t **)v67;
    v69 = *(std::__shared_weak_count **)(v67 + 8);
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    v72 = *v68;
    if (!*(_BYTE *)(v72 + 24))
      goto LABEL_98;
    if (!*(_BYTE *)(v72 + 36))
    {
      v78 = *(double *)(v72 + 28);
      v77 = v78 <= *a3 && v78 >= *a2;
      if (!v69)
        goto LABEL_108;
      goto LABEL_104;
    }
    v73 = *(double *)(v72 + 40);
    v74 = *a3;
    if (v73 < *a2 || v73 > v74)
    {
      v76 = *(double *)(v72 + 28);
      v77 = v76 >= *a2 && v76 <= v74;
      if (!v69)
        goto LABEL_108;
    }
    else
    {
LABEL_98:
      v77 = 1;
      if (!v69)
        goto LABEL_108;
    }
LABEL_104:
    v79 = (unint64_t *)&v69->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
LABEL_108:
    if (v65 & 1 | !v77)
    {
      if (!v77 && (v65 & 1) != 0)
        goto LABEL_114;
    }
    else
    {
      v65 = 1;
      v66 = v63;
    }
    ++v63;
  }
  while (v63 != v64);
  v63 = v64;
LABEL_114:
  if ((v65 & 1) != 0 && v66 < v63)
  {
    v81 = *(_DWORD *)v62;
    v82 = *((_QWORD *)this + 6);
    do
    {
      v83 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 3) + (((v82 + v66) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (v82 + v66));
      v84 = *(_QWORD **)(v62 + 4);
      if (v81)
      {
        if (*v84 != v83)
        {
          v85 = 0;
          while (v81 - 1 != v85)
          {
            v86 = v84[++v85];
            if (v86 == v83)
            {
              if (v85 < v81)
                goto LABEL_126;
              break;
            }
          }
          v84[v81++] = v83;
          *(_DWORD *)v62 = v81;
          if (v81 >= 0x1000)
LABEL_403:
            __assert_rtn("addSubObject", "AudioMetadataTimeline.cpp", 457, "ref->count < kMaxObjectCount");
        }
      }
      else
      {
        *v84 = v83;
        v81 = 1;
        *(_DWORD *)v62 = 1;
      }
LABEL_126:
      ++v66;
    }
    while (v66 != v63);
  }
LABEL_127:
  v278 = a3;
  v87 = *(_QWORD *)this;
  v88 = atomic_load((unint64_t *)this + 17);
  v89 = atomic_load((unint64_t *)this + 16);
  if (v88 >= v89)
    goto LABEL_181;
  v90 = 0;
  v91 = v88;
  while (2)
  {
    v92 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 11) + (((*((_QWORD *)this + 14) + v88) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (*((_BYTE *)this + 112) + v88));
    v93 = *v92;
    v94 = (std::__shared_weak_count *)v92[1];
    if (v94)
    {
      v95 = (unint64_t *)&v94->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    v97 = *(uint64_t **)(v93 + 16);
    v98 = *(std::__shared_weak_count **)(v93 + 24);
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v101 = *v97;
    if (!*(_BYTE *)(*v97 + 24))
    {
LABEL_145:
      v106 = 1;
      if (v98)
        goto LABEL_153;
      goto LABEL_156;
    }
    if (!*(_BYTE *)(v101 + 36))
    {
      v107 = *(double *)(v101 + 28);
      v106 = v107 <= *v278 && v107 >= *a2;
      if (v98)
        goto LABEL_153;
      goto LABEL_156;
    }
    v102 = *(double *)(v101 + 40);
    v103 = *v278;
    if (v102 >= *a2 && v102 <= v103)
      goto LABEL_145;
    v105 = *(double *)(v101 + 28);
    if (v105 >= *a2)
    {
      v106 = v105 <= v103;
      if (!v98)
        goto LABEL_156;
    }
    else
    {
      v106 = 0;
      if (!v98)
        goto LABEL_156;
    }
LABEL_153:
    v108 = (unint64_t *)&v98->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (v109)
    {
LABEL_156:
      if (v94)
        goto LABEL_157;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
      if (v94)
      {
LABEL_157:
        v110 = (unint64_t *)&v94->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
    }
    if (v90 & 1 | !v106)
    {
      if (!v106 && (v90 & 1) != 0)
        goto LABEL_168;
    }
    else
    {
      v90 = 1;
      v91 = v88;
    }
    if (++v88 != v89)
      continue;
    break;
  }
  v88 = v89;
LABEL_168:
  if ((v90 & 1) != 0 && v91 < v88)
  {
    v112 = *(_DWORD *)(v87 + 12);
    v113 = *((_QWORD *)this + 14);
    do
    {
      v114 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 11) + (((v91 + v113) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (v91 + v113));
      v115 = *(_QWORD **)(v87 + 16);
      if (v112)
      {
        if (*v115 != v114)
        {
          v116 = 0;
          do
          {
            if (v112 - 1 == v116)
              goto LABEL_177;
            v117 = v115[++v116];
          }
          while (v117 != v114);
          if (v116 >= v112)
          {
LABEL_177:
            v115[v112++] = v114;
            *(_DWORD *)(v87 + 12) = v112;
            if (v112 >= 0x1000)
              goto LABEL_403;
          }
        }
      }
      else
      {
        *v115 = v114;
        v112 = 1;
        *(_DWORD *)(v87 + 12) = 1;
      }
      ++v91;
    }
    while (v91 != v88);
  }
LABEL_181:
  v118 = *(_QWORD *)this;
  v119 = atomic_load((unint64_t *)this + 25);
  v120 = atomic_load((unint64_t *)this + 24);
  if (v119 < v120)
  {
    v121 = 0;
    v122 = v119;
    do
    {
      v123 = *(_QWORD *)(*((_QWORD *)this + 19) + (((*((_QWORD *)this + 22) + v119) >> 5) & 0x7FFFFFFFFFFFFF8));
      v124 = (*((_BYTE *)this + 176) + v119);
      v125 = *(_OWORD *)(v123 + 16 * v124);
      v126 = *(std::__shared_weak_count **)(v123 + 16 * v124 + 8);
      if (v126)
      {
        v127 = (unint64_t *)&v126->__shared_owners_;
        do
          v128 = __ldxr(v127);
        while (__stxr(v128 + 1, v127));
      }
      v129 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>((_QWORD *)v125, a2, v278);
      if (v126)
      {
        v130 = (unint64_t *)&v126->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
      if (v121 & 1 | !v129)
      {
        if (!v129 && (v121 & 1) != 0)
          goto LABEL_197;
      }
      else
      {
        v121 = 1;
        v122 = v119;
      }
      ++v119;
    }
    while (v119 != v120);
    v119 = v120;
LABEL_197:
    if ((v121 & 1) != 0 && v122 < v119)
    {
      v132 = *(_DWORD *)(v118 + 24);
      v133 = *((_QWORD *)this + 22);
      do
      {
        v134 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 19) + (((v133 + v122) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (v133 + v122));
        v135 = *(_QWORD **)(v118 + 28);
        if (v132)
        {
          if (*v135 != v134)
          {
            v136 = 0;
            do
            {
              if (v132 - 1 == v136)
                goto LABEL_206;
              v137 = v135[++v136];
            }
            while (v137 != v134);
            if (v136 >= v132)
            {
LABEL_206:
              v135[v132++] = v134;
              *(_DWORD *)(v118 + 24) = v132;
              if (v132 >= 0x1000)
                goto LABEL_403;
            }
          }
        }
        else
        {
          *v135 = v134;
          v132 = 1;
          *(_DWORD *)(v118 + 24) = 1;
        }
        ++v122;
      }
      while (v122 != v119);
    }
  }
  v138 = *(_QWORD *)this;
  getRangeInTimeFrame<AudioMetadataTimeline::Storage<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>,std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>>>((unint64_t *)&v281, (_QWORD *)this + 42, a2, v278);
  v139 = (unint64_t)v281;
  v140 = v282;
  if ((unint64_t)v281 < v282)
  {
    v141 = *(_DWORD *)(v138 + 48);
    v142 = *((_QWORD *)this + 46);
    do
    {
      v143 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 43) + (((v139 + v142) >> 5) & 0x7FFFFFFFFFFFFF8))
                                     + 16 * (v139 + v142))
                         + 16);
      v144 = *(_QWORD **)(v138 + 52);
      if (v141)
      {
        if (*v144 != v143)
        {
          v145 = 0;
          do
          {
            if (v141 - 1 == v145)
              goto LABEL_218;
            v146 = v144[++v145];
          }
          while (v146 != v143);
          if (v145 >= v141)
          {
LABEL_218:
            v144[v141++] = v143;
            *(_DWORD *)(v138 + 48) = v141;
            if (v141 >= 0x1000)
              goto LABEL_403;
          }
        }
      }
      else
      {
        *v144 = v143;
        v141 = 1;
        *(_DWORD *)(v138 + 48) = 1;
      }
      ++v139;
    }
    while (v139 != v140);
  }
  if (!v283)
  {
    v147 = *(_QWORD *)this;
    v148 = atomic_load((unint64_t *)this + 41);
    v149 = atomic_load((unint64_t *)this + 40);
    if (v148 < v149)
    {
      v150 = 0;
      v151 = v148;
      do
      {
        v152 = *(_QWORD *)(*((_QWORD *)this + 35) + (((*((_QWORD *)this + 38) + v148) >> 5) & 0x7FFFFFFFFFFFFF8));
        v153 = (*((_BYTE *)this + 304) + v148);
        v154 = *(_OWORD *)(v152 + 16 * v153);
        v155 = *(std::__shared_weak_count **)(v152 + 16 * v153 + 8);
        if (v155)
        {
          v156 = (unint64_t *)&v155->__shared_owners_;
          do
            v157 = __ldxr(v156);
          while (__stxr(v157 + 1, v156));
        }
        v158 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(*(_QWORD *)(v154 + 16), *(std::__shared_weak_count **)(v154 + 24), a2, v278);
        if (v155)
        {
          v159 = (unint64_t *)&v155->__shared_owners_;
          do
            v160 = __ldaxr(v159);
          while (__stlxr(v160 - 1, v159));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
        if (v150 & 1 | !v158)
        {
          if (!v158 && (v150 & 1) != 0)
            goto LABEL_239;
        }
        else
        {
          v150 = 1;
          v151 = v148;
        }
        ++v148;
      }
      while (v148 != v149);
      v148 = v149;
LABEL_239:
      if ((v150 & 1) != 0 && v151 < v148)
      {
        v161 = *(_DWORD *)(v147 + 48);
        v162 = *((_QWORD *)this + 38);
        do
        {
          v163 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 35) + (((v162 + v151) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (v162 + v151));
          v164 = *(_QWORD **)(v147 + 52);
          if (v161)
          {
            if (*v164 != v163)
            {
              v165 = 0;
              do
              {
                if (v161 - 1 == v165)
                  goto LABEL_248;
                v166 = v164[++v165];
              }
              while (v166 != v163);
              if (v165 >= v161)
              {
LABEL_248:
                v164[v161++] = v163;
                *(_DWORD *)(v147 + 48) = v161;
                if (v161 >= 0x1000)
                  goto LABEL_403;
              }
            }
          }
          else
          {
            *v164 = v163;
            v161 = 1;
            *(_DWORD *)(v147 + 48) = 1;
          }
          ++v151;
        }
        while (v151 != v148);
      }
    }
  }
  getRangeInTimeFrame<AudioMetadataTimeline::Storage<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>,std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>>>((unint64_t *)&v281, (_QWORD *)this + 42, a2, v278);
  v167 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 48))
  {
    v168 = 0;
    v279 = *((_QWORD *)this + 46) >> 8;
    v169 = *((_QWORD *)this + 46);
    v170 = (uint64_t)v281;
    v171 = v282;
    do
    {
      v172 = *(_QWORD *)(*(_QWORD *)(v167 + 52) + 8 * v168);
      *(_DWORD *)(v172 + 24) = 0;
      v173 = *((_QWORD *)this + 43);
      v174 = (_QWORD *)(v173 + 8 * v279);
      if (*((_QWORD *)this + 44) == v173)
      {
        v175 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100]((_QWORD *)(v173 + 8 * v279), 0, v170);
        v177 = v179;
        v178 = 0;
      }
      else
      {
        v175 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v174, *v174 + 16 * v169, v170);
        v177 = v176;
        v178 = *v174 + 16 * v169;
      }
      std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v174, v178, v171);
      if (v177 != v180)
      {
        v181 = 0;
        do
        {
          if (*(_QWORD *)(*v177)[2] == v172)
          {
            *(_QWORD *)(*(_QWORD *)(v172 + 28) + 8 * v181++) = **v177;
            *(_DWORD *)(v172 + 24) = v181;
            if (v181 >= 0x1000)
              goto LABEL_403;
          }
          v177 += 2;
          if ((_QWORD **)((char *)v177 - *v175) == (_QWORD **)4096)
          {
            v182 = (_QWORD **)v175[1];
            ++v175;
            v177 = v182;
          }
        }
        while (v177 != v180);
        v167 = *(_QWORD *)this;
      }
      ++v168;
    }
    while (v168 < *(unsigned int *)(v167 + 48));
  }
  v183 = atomic_load((unint64_t *)this + 33);
  v184 = atomic_load((unint64_t *)this + 32);
  if (v183 < v184)
  {
    v185 = 0;
    v186 = v183;
    do
    {
      v187 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 27)
                                   + (((*((_QWORD *)this + 30) + v183) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (*((_BYTE *)this + 240) + v183));
      v284 = v187;
      if (*((_QWORD *)&v187 + 1))
      {
        v188 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
        do
          v189 = __ldxr(v188);
        while (__stxr(v189 + 1, v188));
      }
      v190 = *(_QWORD **)(v187 + 16);
      v191 = *(std::__shared_weak_count **)(v187 + 24);
      v281 = v190;
      v282 = (unint64_t)v191;
      if (v191)
      {
        v192 = (unint64_t *)&v191->__shared_owners_;
        do
          v193 = __ldxr(v192);
        while (__stxr(v193 + 1, v192));
      }
      v194 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(v190, a2, v278);
      if (v191)
      {
        v195 = (unint64_t *)&v191->__shared_owners_;
        do
          v196 = __ldaxr(v195);
        while (__stlxr(v196 - 1, v195));
        if (!v196)
        {
          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
          std::__shared_weak_count::__release_weak(v191);
        }
      }
      v197 = (std::__shared_weak_count *)*((_QWORD *)&v284 + 1);
      if (*((_QWORD *)&v284 + 1))
      {
        v198 = (unint64_t *)(*((_QWORD *)&v284 + 1) + 8);
        do
          v199 = __ldaxr(v198);
        while (__stlxr(v199 - 1, v198));
        if (!v199)
        {
          ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
          std::__shared_weak_count::__release_weak(v197);
        }
      }
      if (v185 & 1 | !v194)
      {
        if (!v194 && (v185 & 1) != 0)
          goto LABEL_290;
      }
      else
      {
        v185 = 1;
        v186 = v183;
      }
      ++v183;
    }
    while (v183 != v184);
    v183 = v184;
LABEL_290:
    if ((v185 & 1) != 0 && v186 < v183)
    {
      v200 = *(_DWORD *)(v167 + 36);
      v201 = *((_QWORD *)this + 30);
      do
      {
        v202 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 27) + (((v186 + v201) >> 5) & 0x7FFFFFFFFFFFFF8))
                           + 16 * (v186 + v201));
        v203 = *(_QWORD **)(v167 + 40);
        if (v200)
        {
          if (*v203 != v202)
          {
            v204 = 0;
            do
            {
              if (v200 - 1 == v204)
                goto LABEL_299;
              v205 = v203[++v204];
            }
            while (v205 != v202);
            if (v204 >= v200)
            {
LABEL_299:
              v203[v200++] = v202;
              *(_DWORD *)(v167 + 36) = v200;
              if (v200 >= 0x1000)
                goto LABEL_403;
            }
          }
        }
        else
        {
          *v203 = v202;
          v200 = 1;
          *(_DWORD *)(v167 + 36) = 1;
        }
        ++v186;
      }
      while (v186 != v183);
    }
  }
  v206 = *(_QWORD *)this;
  v207 = atomic_load((unint64_t *)this + 57);
  v208 = atomic_load((unint64_t *)this + 56);
  if (v207 < v208)
  {
    v209 = v207;
    do
    {
      v210 = *(std::__shared_weak_count **)(*(_QWORD *)(*((_QWORD *)this + 51)
                                                      + (((*((_QWORD *)this + 54) + v209) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * (*((_BYTE *)this + 432) + v209)
                                          + 8);
      if (v210)
      {
        v211 = (unint64_t *)&v210->__shared_owners_;
        do
          v212 = __ldxr(v211);
        while (__stxr(v212 + 1, v211));
        do
          v213 = __ldaxr(v211);
        while (__stlxr(v213 - 1, v211));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
          std::__shared_weak_count::__release_weak(v210);
        }
      }
      ++v209;
    }
    while (v209 != v208);
    v214 = *(_DWORD *)(v206 + 84);
    v215 = *((_QWORD *)this + 54);
    do
    {
      v216 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 51) + (((v215 + v207) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (v215 + v207));
      v217 = *(_QWORD **)(v206 + 88);
      if (v214)
      {
        if (*v217 != v216)
        {
          v218 = 0;
          do
          {
            if (v214 - 1 == v218)
              goto LABEL_319;
            v219 = v217[++v218];
          }
          while (v219 != v216);
          if (v218 >= v214)
          {
LABEL_319:
            v217[v214++] = v216;
            *(_DWORD *)(v206 + 84) = v214;
            if (v214 >= 0x1000)
              goto LABEL_403;
          }
        }
      }
      else
      {
        *v217 = v216;
        v214 = 1;
        *(_DWORD *)(v206 + 84) = 1;
      }
      ++v207;
    }
    while (v207 != v208);
  }
  v220 = *(_QWORD *)this;
  v221 = atomic_load((unint64_t *)this + 65);
  v222 = atomic_load((unint64_t *)this + 64);
  if (v221 >= v222)
    goto LABEL_351;
  v223 = v221;
  while (2)
  {
    v224 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 59)
                                 + (((*((_QWORD *)this + 62) + v223) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (*((_BYTE *)this + 496) + v223));
    v225 = *v224;
    v226 = (std::__shared_weak_count *)v224[1];
    if (v226)
    {
      v227 = (unint64_t *)&v226->__shared_owners_;
      do
        v228 = __ldxr(v227);
      while (__stxr(v228 + 1, v227));
    }
    v229 = *(std::__shared_weak_count **)(v225 + 24);
    if (!v229)
      goto LABEL_333;
    v230 = (unint64_t *)&v229->__shared_owners_;
    do
      v231 = __ldxr(v230);
    while (__stxr(v231 + 1, v230));
    do
      v232 = __ldaxr(v230);
    while (__stlxr(v232 - 1, v230));
    if (!v232)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
      if (v226)
      {
LABEL_334:
        v233 = (unint64_t *)&v226->__shared_owners_;
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
          std::__shared_weak_count::__release_weak(v226);
        }
      }
    }
    else
    {
LABEL_333:
      if (v226)
        goto LABEL_334;
    }
    if (++v223 != v222)
      continue;
    break;
  }
  v235 = *(_DWORD *)(v220 + 72);
  v236 = *((_QWORD *)this + 62);
  do
  {
    v237 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 59) + (((v236 + v221) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v236 + v221));
    v238 = *(_QWORD **)(v220 + 76);
    if (v235)
    {
      if (*v238 != v237)
      {
        v239 = 0;
        do
        {
          if (v235 - 1 == v239)
            goto LABEL_347;
          v240 = v238[++v239];
        }
        while (v240 != v237);
        if (v239 >= v235)
        {
LABEL_347:
          v238[v235++] = v237;
          *(_DWORD *)(v220 + 72) = v235;
          if (v235 >= 0x1000)
            goto LABEL_403;
        }
      }
    }
    else
    {
      *v238 = v237;
      v235 = 1;
      *(_DWORD *)(v220 + 72) = 1;
    }
    ++v221;
  }
  while (v221 != v222);
LABEL_351:
  v241 = *(_QWORD *)this;
  v242 = atomic_load((unint64_t *)this + 73);
  v243 = atomic_load((unint64_t *)this + 72);
  if (v242 >= v243)
    goto LABEL_387;
  v244 = v242;
  while (2)
  {
    v245 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 67)
                                 + (((*((_QWORD *)this + 70) + v244) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (*((_BYTE *)this + 560) + v244));
    v246 = *v245;
    v247 = (std::__shared_weak_count *)v245[1];
    if (v247)
    {
      v248 = (unint64_t *)&v247->__shared_owners_;
      do
        v249 = __ldxr(v248);
      while (__stxr(v249 + 1, v248));
    }
    v250 = *(_QWORD *)(v246 + 16);
    v251 = *(std::__shared_weak_count **)(v246 + 24);
    if (v251)
    {
      v252 = (unint64_t *)&v251->__shared_owners_;
      do
        v253 = __ldxr(v252);
      while (__stxr(v253 + 1, v252));
    }
    v254 = *(std::__shared_weak_count **)(v250 + 24);
    if (!v254)
      goto LABEL_364;
    v255 = (unint64_t *)&v254->__shared_owners_;
    do
      v256 = __ldxr(v255);
    while (__stxr(v256 + 1, v255));
    do
      v257 = __ldaxr(v255);
    while (__stlxr(v257 - 1, v255));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
      if (v251)
      {
LABEL_365:
        v258 = (unint64_t *)&v251->__shared_owners_;
        do
          v259 = __ldaxr(v258);
        while (__stlxr(v259 - 1, v258));
        if (!v259)
        {
          ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
          std::__shared_weak_count::__release_weak(v251);
        }
      }
    }
    else
    {
LABEL_364:
      if (v251)
        goto LABEL_365;
    }
    if (v247)
    {
      v260 = (unint64_t *)&v247->__shared_owners_;
      do
        v261 = __ldaxr(v260);
      while (__stlxr(v261 - 1, v260));
      if (!v261)
      {
        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
        std::__shared_weak_count::__release_weak(v247);
      }
    }
    if (++v244 != v243)
      continue;
    break;
  }
  v262 = *(_DWORD *)(v241 + 60);
  v263 = *((_QWORD *)this + 70);
  do
  {
    v264 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 67) + (((v242 + v263) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v242 + v263));
    v265 = *(_QWORD **)(v241 + 64);
    if (v262)
    {
      if (*v265 != v264)
      {
        v266 = 0;
        do
        {
          if (v262 - 1 == v266)
            goto LABEL_383;
          v267 = v265[++v266];
        }
        while (v267 != v264);
        if (v266 >= v262)
        {
LABEL_383:
          v265[v262++] = v264;
          *(_DWORD *)(v241 + 60) = v262;
          if (v262 >= 0x1000)
            goto LABEL_403;
        }
      }
    }
    else
    {
      *v265 = v264;
      v262 = 1;
      *(_DWORD *)(v241 + 60) = 1;
    }
    ++v242;
  }
  while (v242 != v243);
LABEL_387:
  v268 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 60))
  {
    for (i = 0; i < *(unsigned int *)(v268 + 60); ++i)
    {
      v270 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v268 + 64) + 8 * i) + 32);
      if (v270)
      {
        v271 = *(unsigned int *)(v268 + 48);
        if ((_DWORD)v271)
        {
          v272 = *(_QWORD **)(v268 + 52);
          v273 = *(unsigned int *)(v268 + 48);
          do
          {
            if (v270 == *v272)
              goto LABEL_398;
            ++v272;
            --v273;
          }
          while (v273);
          *(_QWORD *)(*(_QWORD *)(v268 + 52) + 8 * v271) = v270;
          *(_DWORD *)(v268 + 48) = v271 + 1;
          if ((v271 + 1) > 0xFFF)
            goto LABEL_403;
        }
        else
        {
          **(_QWORD **)(v268 + 52) = v270;
          *(_DWORD *)(v268 + 48) = 1;
        }
        v268 = *(_QWORD *)this;
      }
LABEL_398:
      ;
    }
  }
  v274 = *((_QWORD *)this + 1);
  *a4 = v268;
  a4[1] = v274;
  if (v274)
  {
    v275 = (unint64_t *)(v274 + 8);
    do
      v276 = __ldxr(v275);
    while (__stxr(v276 + 1, v275));
  }
}

void sub_18EECF9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<BOOL,std::shared_ptr<unsigned char []>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 16));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::__shared_weak_count_vtbl *AudioMetadataMemoryPool_AP::requestMetadataBuffer(AudioMetadataMemoryPool_AP *this, unsigned int a2)
{
  size_t v3;
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned __int8 v8;
  char v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char v23;
  char *v24;
  std::__shared_weak_count_vtbl *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v32;
  unsigned __int8 v33[8];
  __int128 v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;

  v3 = a2;
  v4 = (std::__shared_weak_count_vtbl *)operator new[]();
  v35 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29180F0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  v36 = v5;
  bzero(v4, v3);
  v33[0] = 0;
  *(_QWORD *)&v34 = v4;
  *((_QWORD *)&v34 + 1) = v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = atomic_load(v33);
  v9 = v8 & 1;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  v32 = v34;
  if (*((_QWORD *)&v34 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v14 = (char *)*((_QWORD *)this + 4);
  v13 = *((_QWORD *)this + 5);
  if ((unint64_t)v14 < v13)
  {
    *v14 = v9;
    *(_OWORD *)(v14 + 8) = v32;
    v15 = v14 + 24;
    *((_QWORD *)this + 4) = v14 + 24;
    goto LABEL_22;
  }
  v16 = (_BYTE *)*((_QWORD *)this + 3);
  v17 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v16) >> 3) + 1;
  if (v17 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v16) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = (char *)operator new(24 * v19);
  v21 = &v20[8 * ((v14 - v16) >> 3)];
  *v21 = v9;
  *(_OWORD *)(v21 + 8) = v32;
  v22 = &v20[24 * v19];
  v15 = v21 + 24;
  if (v14 == v16)
  {
    *((_QWORD *)this + 3) = v21;
    *((_QWORD *)this + 4) = v15;
    *((_QWORD *)this + 5) = v22;
    if (!v14)
      goto LABEL_22;
    goto LABEL_21;
  }
  do
  {
    v23 = *(v14 - 24);
    v14 -= 24;
    *(v21 - 24) = v23;
    v21 -= 24;
    *(_OWORD *)(v21 + 8) = *(_OWORD *)(v14 + 8);
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
  }
  while (v14 != v16);
  v24 = (char *)*((_QWORD *)this + 3);
  v14 = (char *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 3) = v21;
  *((_QWORD *)this + 4) = v15;
  *((_QWORD *)this + 5) = v22;
  if (v14 != v24)
  {
    do
    {
      std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v14 - 16));
      v14 -= 24;
    }
    while (v14 != v24);
    v14 = v24;
  }
  if (v14)
LABEL_21:
    operator delete(v14);
LABEL_22:
  *((_QWORD *)this + 4) = v15;
  v25 = v35;
  if (v10)
  {
    v26 = (unint64_t *)&v10->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v28 = v36;
  if (v36)
  {
    v29 = (unint64_t *)&v36->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return v25;
}

void sub_18EECFD74(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x193FFE43C](v1, 0x1000C8077774924);
  __cxa_rethrow();
}

void sub_18EECFD98(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<unsigned char *,AudioMetadataMemoryPool_AP::requestMetadataBuffer(unsigned int)::$_0,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,AudioMetadataMemoryPool_AP::requestMetadataBuffer(unsigned int)::$_0,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x193FFE43CLL);
  return result;
}

uint64_t AudioMetadataMemoryPool_AP::markAsUsed(uint64_t this, const unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(this + 24);
  v3 = *(_QWORD *)(this + 32);
  if (v2 != v3)
  {
    while (*(const unsigned __int8 **)(v2 + 8) != a2)
    {
      v2 += 24;
      if (v2 == v3)
        return this;
    }
  }
  if (v2 != v3)
    *(_BYTE *)v2 = 1;
  return this;
}

uint64_t AudioMetadataMemoryPool_AP::clearUnused(uint64_t this)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  __int128 *v5;
  char *v6;
  BOOL v7;
  uint64_t v8;

  v1 = *(_QWORD *)(this + 24);
  v2 = *(char **)(this + 32);
  if ((char *)v1 != v2)
  {
    v3 = this;
    while (*(_BYTE *)v1 && *(_QWORD *)(v1 + 8) != 0)
    {
      v1 += 24;
      if ((char *)v1 == v2)
        return this;
    }
    if ((char *)v1 != v2 && (char *)(v1 + 24) != v2)
    {
      v5 = (__int128 *)(v1 + 32);
      do
      {
        v6 = (char *)v5 - 8;
        if (*((_BYTE *)v5 - 8))
          v7 = *(_QWORD *)v5 == 0;
        else
          v7 = 1;
        if (!v7)
        {
          v8 = v1 + 8;
          *(_BYTE *)v1 = 1;
          v1 += 24;
          this = std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v8, v5);
        }
        v5 = (__int128 *)((char *)v5 + 24);
      }
      while (v6 + 24 != v2);
      v2 = *(char **)(v3 + 32);
    }
    if ((char *)v1 != v2)
    {
      do
      {
        this = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v2 - 16));
        v2 -= 24;
      }
      while (v2 != (char *)v1);
      *(_QWORD *)(v3 + 32) = v1;
    }
  }
  return this;
}

__n128 AudioMetadataTimeline_AP::addEvent(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  unsigned int v6;
  int v7;
  unsigned int v8;
  NSObject *v9;
  __n128 result;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t *p_shared_owners;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  __int128 v30;
  _BYTE v31[18];
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)(a1 + 48));
  if ((v2 & 1) == 0)
  {
    if (atomic_load((unsigned int *)(a1 + 44)))
    {
      v6 = atomic_load((unsigned int *)(a1 + 44));
      v7 = v6 - 1;
    }
    else
    {
      v7 = 2047;
    }
    v8 = atomic_load((unsigned int *)(a1 + 40));
    if (v8 == v7)
    {
      AUMetadata_log_category();
      v9 = AUMetadata_log_category(void)::gLog;
      if (os_log_type_enabled((os_log_t)AUMetadata_log_category(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v31 = 136315394;
        *(_QWORD *)&v31[4] = "AudioMetadataTimeline.cpp";
        *(_WORD *)&v31[12] = 1024;
        *(_DWORD *)&v31[14] = 833;
        _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Dropping metadata event! The event buffer is full!", v31, 0x12u);
      }
      return result;
    }
    v11 = *(uint64_t ***)a1;
    v12 = atomic_load((unsigned int *)(a1 + 40));
    v13 = *v11;
    if (v12 >= ((char *)v11[2] - (char *)*v11) >> 4)
      __assert_rtn("addMetadataPayloadToMemoryPool", "AudioMetadataTimeline.cpp", 672, "index < mMemoryPool.capacity()");
    if (*(_BYTE *)a2 == 1 && (v14 = *(_QWORD *)(a2 + 32)) != 0 && *(_DWORD *)(a2 + 28))
    {
      v15 = v11[1];
      v16 = *v11;
      if (v13 != v15)
      {
        while (*v16 != v14)
        {
          v16 += 2;
          if (v16 == v15)
            goto LABEL_23;
        }
      }
      if (v16 != v15)
      {
        std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](&v13[2 * v12], *v16, v16[1]);
        goto LABEL_38;
      }
LABEL_23:
      v21 = v11[3];
      v20 = v11[4];
      if (v21 != v20)
      {
        while (v21[1] != v14)
        {
          v21 += 3;
          if (v21 == v20)
            goto LABEL_32;
        }
      }
      if (v21 == v20)
      {
LABEL_32:
        AUMetadata_log_category();
        v23 = AUMetadata_log_category(void)::gLog;
        if (os_log_type_enabled((os_log_t)AUMetadata_log_category(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v24 = *(_QWORD *)(a2 + 32);
          *(_DWORD *)v31 = 136315650;
          *(_QWORD *)&v31[4] = "AudioMetadataTimeline.cpp";
          *(_WORD *)&v31[12] = 1024;
          *(_DWORD *)&v31[14] = 706;
          v32 = 2048;
          v33 = v24;
          _os_log_impl(&dword_18EE07000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioMetadataTimeline_AP:addMetadataPayloadToMemoryPool:unrecognized payload, %p was never allocated by us.", v31, 0x1Cu);
        }
        *(_QWORD *)v31 = *(_QWORD *)(a2 + 32);
        v25 = *(_QWORD *)v31;
        v26 = (_QWORD *)operator new();
        *v26 = &off_1E29180B8;
        v26[1] = 0;
        v26[2] = 0;
        v26[3] = v25;
        *(_QWORD *)&v31[8] = v26;
        std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)&(*v11)[2 * v12], (__int128 *)v31);
        v17 = *(std::__shared_weak_count **)&v31[8];
        if (!*(_QWORD *)&v31[8])
          goto LABEL_38;
        v27 = (unint64_t *)(*(_QWORD *)&v31[8] + 8);
        do
          v19 = __ldaxr(v27);
        while (__stlxr(v19 - 1, v27));
      }
      else
      {
        std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](&v13[2 * v12], v21[1], v21[2]);
        v17 = (std::__shared_weak_count *)v21[2];
        v21[1] = 0;
        v21[2] = 0;
        if (!v17)
          goto LABEL_38;
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
      }
    }
    else
    {
      *(_QWORD *)v31 = 0;
      *(_QWORD *)&v31[8] = 0;
      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)&v13[2 * v12], (__int128 *)v31);
      v17 = *(std::__shared_weak_count **)&v31[8];
      if (!*(_QWORD *)&v31[8])
      {
LABEL_38:
        v28 = atomic_load((unsigned int *)(a1 + 40));
        v29 = *(_QWORD *)(a1 + 16) + 40 * v28;
        result = *(__n128 *)a2;
        v30 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(v29 + 32) = *(_QWORD *)(a2 + 32);
        *(__n128 *)v29 = result;
        *(_OWORD *)(v29 + 16) = v30;
        LOWORD(v29) = atomic_load((unsigned int *)(a1 + 40));
        atomic_store(((_WORD)v29 + 1) & 0x7FF, (unsigned int *)(a1 + 40));
        return result;
      }
      v18 = (unint64_t *)(*(_QWORD *)&v31[8] + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
    }
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    goto LABEL_38;
  }
  return result;
}

void sub_18EED02E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x193FFE460](v1, 0x1000C4077774924);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x193FFE43CLL);
  return result;
}

uint64_t AudioMetadataTimeline_AP::retrieveMetadataForTimeframe(AudioMetadataTimeline_AP *this, double *a2, const unsigned int *a3, double a4, double a5, double a6, double a7)
{
  unsigned __int8 v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  unsigned __int8 *v11;
  unsigned int v13;
  double v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  __int16 v21;
  unsigned int v22;
  unsigned int v23;

  v7 = atomic_load((unsigned __int8 *)this + 48);
  if ((v7 & 1) != 0)
    return 0;
  v8 = atomic_load((unsigned int *)this + 11);
  v9 = atomic_load((unsigned int *)this + 10);
  if (v8 == v9)
    return 0;
  v11 = (unsigned __int8 *)this + 49;
  do
  {
    if (__ldaxr(v11))
    {
      result = 0;
      __clrex();
      goto LABEL_17;
    }
  }
  while (__stlxr(1u, v11));
  v13 = atomic_load((unsigned int *)this + 11);
  LODWORD(a6) = *a3;
  v14 = *a2 + (double)*(unint64_t *)&a6;
  if (*(double *)(*((_QWORD *)this + 2) + 40 * v13 + 12) >= v14)
  {
LABEL_14:
    result = 0;
  }
  else
  {
    while (1)
    {
      v15 = (unsigned int *)((char *)this + 44);
      v16 = atomic_load((unsigned int *)this + 11);
      v17 = *((_QWORD *)this + 2);
      v18 = *a2;
      LODWORD(v14) = *a3;
      v14 = *a2 + (double)*(unint64_t *)&v14;
      v19 = v17 + 40 * v16;
      v20 = *(double *)(v19 + 12);
      LODWORD(a7) = *(_DWORD *)(v19 + 20);
      a7 = v20 + (double)*(unint64_t *)&a7;
      if (a7 < v14)
        v14 = a7;
      if (v20 > v18)
        v18 = *(double *)(v19 + 12);
      if (v14 - v18 > 0.0)
        break;
      v21 = atomic_load(v15);
      atomic_store((v21 + 1) & 0x7FF, v15);
      v22 = atomic_load(v15);
      v23 = atomic_load((unsigned int *)this + 10);
      if (v22 == v23)
        goto LABEL_14;
    }
    result = v17 + 40 * v16;
  }
LABEL_17:
  atomic_store(0, v11);
  return result;
}

uint64_t AudioMetadataTimeline_AP::markBufferFreeSampleTime(uint64_t this, double a2, double a3, double a4)
{
  unsigned __int8 v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  __int16 v12;
  unsigned int v13;
  unsigned int v14;

  v4 = atomic_load((unsigned __int8 *)(this + 48));
  if ((v4 & 1) == 0)
  {
    v5 = atomic_load((unsigned int *)(this + 44));
    v6 = atomic_load((unsigned int *)(this + 40));
    if (v5 != v6)
    {
      v7 = (unsigned __int8 *)(this + 49);
      do
      {
        if (__ldaxr(v7))
        {
          __clrex();
          goto LABEL_10;
        }
      }
      while (__stlxr(1u, v7));
      do
      {
        v9 = (unsigned int *)(this + 44);
        v10 = atomic_load((unsigned int *)(this + 44));
        v11 = *(_QWORD *)(this + 16) + 40 * v10;
        LODWORD(a4) = *(_DWORD *)(v11 + 20);
        a4 = (double)*(unint64_t *)&a4;
        if (*(double *)(v11 + 12) + a4 > a2)
          break;
        v12 = atomic_load(v9);
        atomic_store((v12 + 1) & 0x7FF, v9);
        v13 = atomic_load(v9);
        v14 = atomic_load((unsigned int *)(this + 40));
      }
      while (v13 != v14);
LABEL_10:
      atomic_store(0, v7);
    }
  }
  return this;
}

void AudioMetadataTimeline_AP::clear(AudioMetadataTimeline_AP *this)
{
  unsigned __int8 *v2;
  unsigned __int8 v4;
  unsigned __int8 v5;
  std::chrono::nanoseconds __ns;

  v2 = (unsigned __int8 *)this + 48;
  do
  {
    if (__ldaxr(v2))
    {
      __clrex();
      goto LABEL_8;
    }
  }
  while (__stlxr(1u, v2));
  v4 = atomic_load((unsigned __int8 *)this + 49);
  if ((v4 & 1) != 0)
  {
    do
    {
      __ns.__rep_ = 5000000;
      std::this_thread::sleep_for (&__ns);
      v5 = atomic_load((unsigned __int8 *)this + 49);
    }
    while ((v5 & 1) != 0);
  }
  atomic_store(0, (unsigned int *)this + 11);
  atomic_store(0, (unsigned int *)this + 10);
LABEL_8:
  atomic_store(0, v2);
}

void sub_18EED0588(_Unwind_Exception *a1)
{
  unsigned __int8 *v1;

  atomic_store(0, v1);
  _Unwind_Resume(a1);
}

void RenderContextChangeGenerator::~RenderContextChangeGenerator(RenderContextChangeGenerator *this)
{
  id mObserver;

  mObserver = this->mObserver;
  if (mObserver)
    _Block_release(mObserver);
}

void RenderContextChangeGenerator::checkChange(RenderContextChangeGenerator *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];

  v2 = (void *)os_workgroup_interval_copy_current_4AudioToolbox();
  v5 = v2;
  if (v2 == this->mLastWorkgroup)
  {
    if (!v2)
      return;
  }
  else
  {
    this->mLastWorkgroup = v2;
    v6[0] = v2;
    memset(&v6[1], 0, 24);
    (*((void (**)(id, _QWORD *, uint64_t, uint64_t))this->mObserver + 2))(this->mObserver, v6, v3, v4);
    if (!v5)
      return;
  }
  os_release(v5);
}

void ConvertToIeeeExtended(_BYTE *a1, long double a2)
{
  __int16 v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  long double v8;
  int v10;
  double v11;
  double v12;
  int __e;

  v3 = a2 < 0.0;
  if (a2 < 0.0)
    a2 = -a2;
  if (a2 == 0.0)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    LODWORD(v6) = 0;
  }
  else
  {
    v7 = v3 << 15;
    __e = 0;
    v8 = frexp(a2, &__e);
    if (__e <= 0x4000 && v8 < 1.0)
    {
      v10 = __e + 16382;
      if (__e <= -16383)
      {
        v8 = ldexp(v8, v10);
        LOWORD(v10) = 0;
      }
      v4 = v10 | v7;
      v11 = ldexp(v8, 32);
      v12 = floor(v11);
      v5 = (uint64_t)(v12 + -2147483650.0) + 0x80000000;
      v6 = (uint64_t)(floor(ldexp(v11 - v12, 32)) + -2147483650.0) + 0x80000000;
    }
    else
    {
      LODWORD(v5) = 0;
      LODWORD(v6) = 0;
      v4 = v7 | 0x7FFF;
    }
  }
  *a1 = HIBYTE(v4);
  a1[1] = v4;
  a1[2] = BYTE3(v5);
  a1[3] = BYTE2(v5);
  a1[4] = BYTE1(v5);
  a1[5] = v5;
  a1[6] = BYTE3(v6);
  a1[7] = BYTE2(v6);
  a1[8] = BYTE1(v6);
  a1[9] = v6;
}

uint64_t GetAudioToolboxBundle(void)
{
  uint64_t result;

  result = sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    return sAudioToolboxBundle;
  }
  return result;
}

void InitGetAudioToolboxBundle(void)
{
  CFBundleRef BundleWithIdentifier;

  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.audio.toolbox.AudioToolbox"));
  sAudioToolboxBundle = (uint64_t)BundleWithIdentifier;
  if (BundleWithIdentifier)
    CFRetain(BundleWithIdentifier);
  else
    syslog(3, "CFBundleGetBundleWithIdentifier(\"com.apple.audio.toolbox.AudioToolbox\") returned NULL");
}

float AudioFormatProperty_SoundCheckVolumeDB(const __CFDictionary *a1, BOOL a2, float *a3)
{
  float v3;
  unsigned int v5;
  float v6;
  __CFString *v7;
  unsigned int v8;
  const __CFDictionary *v9;
  __int16 v10;

  if (!a1)
    return 0.0;
  v9 = a1;
  v10 = 0;
  v3 = 0.0;
  if (CACFDictionary::HasKey((CACFDictionary *)&v9, CFSTR("sc ave perceived power coeff")))
  {
    if ((CACFDictionary::HasKey((CACFDictionary *)&v9, CFSTR("sc peak amplitude")) & 1) != 0)
    {
      v8 = 0;
      v7 = 0;
      if ((CACFDictionary::GetString((CACFDictionary *)&v9, CFSTR("sc ave perceived power coeff"), (const __CFString **)&v7) & 1) != 0&& !GetMaxSoundCheckValueFromString(v7, &v8))
      {
        v5 = v8;
        if (v8)
        {
          v8 = 0;
          v7 = 0;
          if ((CACFDictionary::GetString((CACFDictionary *)&v9, CFSTR("sc peak amplitude"), (const __CFString **)&v7) & 1) != 0
            && !GetMaxSoundCheckValueFromString(v7, &v8)
            && v8)
          {
            v6 = sqrtf(1000.0 / (float)v5);
            if ((float)(v6 * (float)v8) >= 29200.0)
              v6 = 29200.0 / (float)v8;
            v3 = log10f(v6) * 20.0;
          }
        }
      }
    }
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v9);
  return v3;
}

void sub_18EED0900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t GetMaxSoundCheckValueFromString(const __CFString *a1, unsigned int *a2)
{
  uint64_t v2;
  CFStringEncoding SystemEncoding;
  char v6;
  char *v7;
  int v8;
  unsigned int v10;
  char buffer[16];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = 2003334207;
  if (a1)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    *(_OWORD *)buffer = 0u;
    v12 = 0u;
    SystemEncoding = CFStringGetSystemEncoding();
    if (CFStringGetCString(a1, buffer, 256, SystemEncoding))
    {
      v6 = 1;
      v7 = buffer;
      while (1)
      {
        if (*v7 == 32)
        {
          do
            v8 = *++v7;
          while (v8 == 32);
        }
        else if (!*v7)
        {
          return 0;
        }
        v10 = 0;
        if (sscanf(v7, "%u", &v10) != 1)
          return v2;
        if (v6 & 1 | (v10 > *a2))
          *a2 = v10;
        while ((*v7 | 0x20) != 0x20)
          ++v7;
        v2 = 0;
        v6 = 0;
      }
    }
  }
  return v2;
}

uint64_t GetMaxSoundCheckValue(CACFDictionary *a1, const __CFString *a2, unsigned int *a3)
{
  int String;
  uint64_t result;
  __CFString *v6;
  unsigned int v7;

  v7 = 0;
  v6 = 0;
  String = CACFDictionary::GetString(a1, a2, (const __CFString **)&v6);
  result = 0;
  if (String)
  {
    if (GetMaxSoundCheckValueFromString(v6, &v7))
    {
      return 0;
    }
    else
    {
      *a3 = v7;
      return 1;
    }
  }
  return result;
}

os_log_t std::__call_once_proxy[abi:ne180100]<std::tuple<AudioFormatRegisterScopeOnce(void)::$_0 &&>>()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "AudioFormat");
  *v0 = result;
  kAudioFormatSubsystem = (uint64_t)v0;
  return result;
}

uint64_t AudioFormat_GetDRCTypeFromPacket(uint64_t a1, _DWORD *a2)
{
  OSType v2;
  OSType v3;
  uint64_t result;
  UInt32 ioPropertyDataSize;
  uint64_t outPropertyData;
  int v9;
  AudioCodec inCodec;

  inCodec = 0;
  v2 = *(_DWORD *)(a1 + 8);
  ioPropertyDataSize = 16;
  outPropertyData = a1;
  v9 = 0;
  if (v2 >> 8 == 6381923)
    v3 = 1633772320;
  else
    v3 = v2;
  if (v3 != 1634492771 && v3 != 1633772320)
    return 1718449215;
  result = OpenCodecComponent(v3, &inCodec, 0x61646563u);
  if (!(_DWORD)result)
  {
    result = AudioCodecGetProperty(inCodec, 0x64726374u, &ioPropertyDataSize, &outPropertyData);
    if (!(_DWORD)result)
      *a2 = v9;
  }
  return result;
}

uint64_t AudioFormatProperty_AlbumLoudness(CFArrayRef *a1, const __CFDictionary **a2)
{
  NSObject *v4;
  CFIndex Count;
  CFIndex v6;
  float v7;
  float v8;
  float v9;
  float v10;
  int v11;
  int v12;
  int v13;
  int v14;
  void *ValueAtIndex;
  CFTypeID v16;
  int UInt32;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  signed int v22;
  int v23;
  signed int v24;
  unsigned int v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  const char *v31;
  const __CFDictionary **v33;
  uint64_t v34;
  __CFDictionary *v35;
  __int16 v36;
  __CFDictionary *v37;
  unsigned int v38[2];
  CFMutableDictionaryRef Mutable;
  __int16 v40;
  CFArrayRef v41;
  __int16 v42;
  __CFString *v43;
  _BYTE buf[12];
  __int16 v45;
  int v46;
  __int16 v47;
  CFMutableDictionaryRef v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (kAudioFormatSubsystem)
  {
    v4 = *(NSObject **)kAudioFormatSubsystem;
    if (!*(_QWORD *)kAudioFormatSubsystem)
      goto LABEL_7;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioFormatCommon.cpp";
    v45 = 1024;
    v46 = 553;
    _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioFormatProperty_AlbumLoudness", buf, 0x12u);
  }
LABEL_7:
  AudioFormatRegisterScopeOnce();
  *a2 = 0;
  v43 = 0;
  v41 = *a1;
  v42 = 0;
  Count = CFArrayGetCount(v41);
  v33 = a2;
  if (Count < 1)
  {
    v34 = 0;
    v10 = -1.0e10;
    v14 = -1000000000;
    v13 = -1000000000;
    v12 = -1000000000;
    v11 = -1000000000;
    v9 = -1.0e10;
    v8 = -1.0e10;
    v7 = -1.0e10;
LABEL_53:
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v40 = 256;
    if (v43)
      CACFDictionary::AddString((CACFDictionary *)&Mutable, CFSTR("media kind"), v43);
    if (v10 != -1.0e10)
      CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, CFSTR("precalculated sc adjustment"), v10);
    if (v8 != -1.0e10)
      CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, CFSTR("anchor loudness"), v8);
    if (v14 != -1000000000)
      CACFDictionary::AddUInt32((CACFDictionary *)&Mutable, CFSTR("bit depth pcm master"));
    if ((v34 & 1) != 0 && (v7 != -1.0e10 || v9 != -1.0e10))
    {
      *(_QWORD *)buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_WORD *)&buf[8] = 257;
      if (v7 != -1.0e10)
        CACFDictionary::AddFloat32((CACFDictionary *)buf, CFSTR("aa itu loudness"), v7);
      if (v9 != -1.0e10)
        CACFDictionary::AddFloat32((CACFDictionary *)buf, CFSTR("aa itu true peak"), v9);
      CACFDictionary::AddDictionary((CACFDictionary *)&Mutable, CFSTR("main loudness parameters"), *(const __CFDictionary **)buf);
      CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
    }
    if ((v34 & 0x100000000) != 0)
    {
      v35 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v36 = 257;
      if (v13 != -1000000000)
      {
        snprintf(buf, 0x20uLL, "%u", v13);
        CACFDictionary::AddCString((CACFDictionary *)&v35, CFSTR("sc ave perceived power coeff"), buf);
      }
      if (v12 != -1000000000)
      {
        snprintf(buf, 0x20uLL, "%u", v12);
        CACFDictionary::AddCString((CACFDictionary *)&v35, CFSTR("sc max perceived power coeff"), buf);
      }
      if (v11 != -1000000000)
      {
        snprintf(buf, 0x20uLL, "%u", v11);
        CACFDictionary::AddCString((CACFDictionary *)&v35, CFSTR("sc peak amplitude"), buf);
      }
      CACFDictionary::AddDictionary((CACFDictionary *)&Mutable, CFSTR("sound check info"), v35);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v35);
    }
    if (kAudioFormatSubsystem)
    {
      v26 = *(NSObject **)kAudioFormatSubsystem;
      if (!*(_QWORD *)kAudioFormatSubsystem)
      {
LABEL_83:
        *v33 = Mutable;
        CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
        v27 = 0;
        goto LABEL_112;
      }
    }
    else
    {
      v26 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AudioFormatCommon.cpp";
      v45 = 1024;
      v46 = 703;
      v47 = 2112;
      v48 = Mutable;
      _os_log_impl(&dword_18EE07000, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Album Loudness Info :\n%@", buf, 0x1Cu);
    }
    goto LABEL_83;
  }
  v6 = 0;
  v34 = 0;
  v7 = -1.0e10;
  v8 = -1.0e10;
  v9 = -1.0e10;
  v10 = -1.0e10;
  v11 = -1000000000;
  v12 = -1000000000;
  v13 = -1000000000;
  v14 = -1000000000;
  while (1)
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(*a1, v6);
    v16 = CFGetTypeID(ValueAtIndex);
    if (v16 != CFDictionaryGetTypeID())
      goto LABEL_50;
    *(_QWORD *)v38 = 0;
    Mutable = (CFMutableDictionaryRef)ValueAtIndex;
    v40 = 0;
    if (!v43)
      CACFDictionary::GetString((CACFDictionary *)&Mutable, CFSTR("media kind"), (const __CFString **)&v43);
    if (CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, CFSTR("precalculated sc adjustment"), (float *)&v38[1]))break;
LABEL_16:
    if (CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, CFSTR("anchor loudness"), (float *)&v38[1]))
    {
      if ((v38[1] & 0x7FFFFFFF) >= 0x7F800000)
      {
        if (kAudioFormatSubsystem)
        {
          v28 = *(NSObject **)kAudioFormatSubsystem;
          if (!*(_QWORD *)kAudioFormatSubsystem)
            goto LABEL_111;
        }
        else
        {
          v28 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AudioFormatCommon.cpp";
          v45 = 1024;
          v46 = 602;
          v30 = "%25s:%-5d AnchorLoudness value is not finite.";
          goto LABEL_102;
        }
        goto LABEL_111;
      }
      if (v8 < *(float *)&v38[1])
        v8 = *(float *)&v38[1];
    }
    UInt32 = CACFDictionary::GetUInt32((CACFDictionary *)&Mutable, CFSTR("bit depth pcm master"), v38);
    v18 = v38[0];
    if (v14 > (int)v38[0])
      v18 = v14;
    if (UInt32)
      v14 = v18;
    v37 = 0;
    if (CACFDictionary::GetDictionary((CACFDictionary *)&Mutable, CFSTR("main loudness parameters"), &v37))
    {
      v35 = v37;
      v36 = 0;
      if (CACFDictionary::GetFloat32((CACFDictionary *)&v35, CFSTR("aa itu loudness"), (float *)&v38[1]))
      {
        if ((v38[1] & 0x7FFFFFFF) >= 0x7F800000)
        {
          if (kAudioFormatSubsystem)
          {
            v29 = *(NSObject **)kAudioFormatSubsystem;
            if (!*(_QWORD *)kAudioFormatSubsystem)
              goto LABEL_110;
          }
          else
          {
            v29 = MEMORY[0x1E0C81028];
          }
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            goto LABEL_110;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AudioFormatCommon.cpp";
          v45 = 1024;
          v46 = 619;
          v31 = "%25s:%-5d ItuLoudness value is not finite.";
          goto LABEL_109;
        }
        if (v7 < *(float *)&v38[1])
          v7 = *(float *)&v38[1];
      }
      if (CACFDictionary::GetFloat32((CACFDictionary *)&v35, CFSTR("aa itu true peak"), (float *)&v38[1]))
      {
        if ((v38[1] & 0x7FFFFFFF) >= 0x7F800000)
        {
          if (kAudioFormatSubsystem)
          {
            v29 = *(NSObject **)kAudioFormatSubsystem;
            if (!*(_QWORD *)kAudioFormatSubsystem)
            {
LABEL_110:
              CACFDictionary::~CACFDictionary((CACFDictionary *)&v35);
              goto LABEL_111;
            }
          }
          else
          {
            v29 = MEMORY[0x1E0C81028];
          }
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            goto LABEL_110;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AudioFormatCommon.cpp";
          v45 = 1024;
          v46 = 627;
          v31 = "%25s:%-5d ItuTruePeak value is not finite.";
LABEL_109:
          _os_log_impl(&dword_18EE07000, v29, OS_LOG_TYPE_DEFAULT, v31, buf, 0x12u);
          goto LABEL_110;
        }
        if (v9 < *(float *)&v38[1])
          v9 = *(float *)&v38[1];
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v35);
      LOBYTE(v34) = 1;
    }
    v35 = 0;
    if (CACFDictionary::GetDictionary((CACFDictionary *)&Mutable, CFSTR("sound check info"), &v35))
    {
      *(_QWORD *)buf = v35;
      *(_WORD *)&buf[8] = 0;
      v19 = GetMaxSoundCheckValue((CACFDictionary *)buf, CFSTR("sc ave perceived power coeff"), v38);
      v20 = v38[0];
      if (v13 > (int)v38[0])
        v20 = v13;
      if (v19)
        v13 = v20;
      v21 = GetMaxSoundCheckValue((CACFDictionary *)buf, CFSTR("sc max perceived power coeff"), v38);
      v22 = v38[0];
      v23 = GetMaxSoundCheckValue((CACFDictionary *)buf, CFSTR("sc peak amplitude"), v38);
      if (v12 <= v22)
        v24 = v22;
      else
        v24 = v12;
      if (v21)
        v12 = v24;
      v25 = v38[0];
      if (v11 > (int)v38[0])
        v25 = v11;
      if (v23)
        v11 = v25;
      CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
      BYTE4(v34) = 1;
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
LABEL_50:
    if (Count == ++v6)
      goto LABEL_53;
  }
  if ((v38[1] & 0x7FFFFFFF) < 0x7F800000)
  {
    if (v10 < *(float *)&v38[1])
      v10 = *(float *)&v38[1];
    goto LABEL_16;
  }
  if (kAudioFormatSubsystem)
  {
    v28 = *(NSObject **)kAudioFormatSubsystem;
    if (!*(_QWORD *)kAudioFormatSubsystem)
      goto LABEL_111;
  }
  else
  {
    v28 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioFormatCommon.cpp";
    v45 = 1024;
    v46 = 594;
    v30 = "%25s:%-5d PrecalculatedSCAdjustment value is not finite.";
LABEL_102:
    _os_log_impl(&dword_18EE07000, v28, OS_LOG_TYPE_DEFAULT, v30, buf, 0x12u);
  }
LABEL_111:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  v27 = 4294967246;
LABEL_112:
  CACFArray::~CACFArray((CACFArray *)&v41);
  return v27;
}

void sub_18EED148C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFArray::~CACFArray((CACFArray *)va1);
  _Unwind_Resume(a1);
}

CA::ADMBuilder *CA::ADMBuilder::ADMBuilder(CA::ADMBuilder *this)
{
  uint64_t v2;
  xmlParserCtxtPtr v3;
  xmlSAXHandler sax;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  *(_OWORD *)(v2 + 640) = 0u;
  *(_OWORD *)(v2 + 656) = 0u;
  bzero((void *)v2, 0x27CuLL);
  *(_DWORD *)(v2 + 672) = 1065353216;
  *(_OWORD *)(v2 + 680) = 0u;
  *(_OWORD *)(v2 + 696) = 0u;
  *(_DWORD *)(v2 + 712) = 1065353216;
  *(_OWORD *)(v2 + 720) = 0u;
  *(_OWORD *)(v2 + 736) = 0u;
  *(_DWORD *)(v2 + 752) = 1065353216;
  *(_OWORD *)(v2 + 760) = 0u;
  *(_OWORD *)(v2 + 776) = 0u;
  *(_DWORD *)(v2 + 792) = 1065353216;
  *(_OWORD *)(v2 + 800) = 0u;
  *(_OWORD *)(v2 + 816) = 0u;
  *(_DWORD *)(v2 + 832) = 1065353216;
  *(_OWORD *)(v2 + 840) = 0u;
  *(_OWORD *)(v2 + 856) = 0u;
  *(_DWORD *)(v2 + 872) = 1065353216;
  *(_OWORD *)(v2 + 880) = 0u;
  *(_OWORD *)(v2 + 896) = 0u;
  *(_DWORD *)(v2 + 912) = 1065353216;
  *(_OWORD *)(v2 + 920) = 0u;
  *(_OWORD *)(v2 + 936) = 0u;
  *(_DWORD *)(v2 + 952) = 1065353216;
  *(_OWORD *)(v2 + 960) = 0u;
  *(_OWORD *)(v2 + 976) = 0u;
  *(_DWORD *)(v2 + 992) = 1065353216;
  *(_OWORD *)(v2 + 1000) = 0u;
  *(_OWORD *)(v2 + 1016) = 0u;
  *(_DWORD *)(v2 + 1032) = 1065353216;
  sax.internalSubset = (internalSubsetSAXFunc)&off_1E2915DE0;
  sax.hasExternalSubset = (hasExternalSubsetSAXFunc)&sax;
  *(_QWORD *)(v2 + 1040) = 0;
  *(_QWORD *)(v2 + 1072) = v2 + 1048;
  std::__function::__func<CA::ADMBuilder::Impl::Impl(void)::$_0,std::allocator<CA::ADMBuilder::Impl::Impl(void)::$_0>,void ()(_xmlParserCtxt *)>::__clone((uint64_t)&sax, (_QWORD *)(v2 + 1048));
  memset(&sax.fatalError, 0, 72);
  sax.reference = 0;
  memset(&sax.ignorableWhitespace, 0, 24);
  sax.initialized = -554844497;
  memset(&sax, 0, 112);
  sax.characters = (charactersSAXFunc)CA::ADMBuilder::Impl::xml_characters_stub;
  sax.startElement = (startElementSAXFunc)CA::ADMBuilder::Impl::xml_start_element_stub;
  sax.endElement = (endElementSAXFunc)CA::ADMBuilder::Impl::xml_end_element_stub;
  sax.warning = (warningSAXFunc)CA::ADMBuilder::Impl::xml_warning_stub;
  sax.error = (errorSAXFunc)CA::ADMBuilder::Impl::xml_error_stub;
  v3 = xmlCreatePushParserCtxt(&sax, (void *)v2, 0, 0, 0);
  std::unique_ptr<_xmlParserCtxt,std::function<void ()(_xmlParserCtxt*)>>::reset[abi:ne180100]((uint64_t *)(v2 + 1040), (uint64_t)v3);
  *(_QWORD *)this = v2;
  return this;
}

void sub_18EED16D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_Unwind_Exception *exception_object,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::unique_ptr<_xmlParserCtxt,std::function<void ()(_xmlParserCtxt*)>>::~unique_ptr[abi:ne180100](v29);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v27);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v33);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v31);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v30);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a22);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v28);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a23);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v26);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a24);
  v34 = *(_QWORD *)(v25 + 624);
  *(_QWORD *)(v25 + 624) = 0;
  if (v34)
    std::default_delete<std::string>::operator()[abi:ne180100](v34);
  v35 = *(_QWORD *)(v25 + 616);
  *(_QWORD *)(v25 + 616) = 0;
  if (v35)
    std::default_delete<CA::ADMLoudnessMetadata>::operator()[abi:ne180100](v35);
  a25 = v25 + 584;
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 560;
  std::vector<std::vector<std::optional<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 536;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 512;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 488;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 464;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 440;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 416;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 392;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 368;
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 344;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 320;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 296;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 272;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 248;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 224;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 200;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 176;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 152;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 128;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 104;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 80;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 56;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::deque<CA::ADMBuilder::Impl::ADMElement>::~deque[abi:ne180100](v25 + 8);
  std::unique_ptr<CA::ADM>::reset[abi:ne180100]((char ***)v25, 0);
  MEMORY[0x193FFE460](v25, 0x10A0C4048A64E4ALL);
  _Unwind_Resume(a1);
}

void CA::ADMBuilder::Impl::xml_characters_stub(CA::ADMBuilder::Impl *this, void *__src, const unsigned __int8 *a3)
{
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type size;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  unsigned int v16;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  char *v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  std::string::size_type v28;
  std::string __dst;

  if (*((_DWORD *)this + 158))
    return;
  if ((a3 & 0x80000000) != 0)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (int)a3;
  if (a3 >= 0x17)
  {
    v7 = ((int)a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((int)a3 | 7) != 0x17)
      v7 = (int)a3 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a3;
    p_dst = &__dst;
    if (!(_DWORD)a3)
      goto LABEL_10;
  }
  memcpy(p_dst, __src, v5);
LABEL_10:
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v9 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v10 = __dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &__dst;
  else
    v11 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  v13 = MEMORY[0x1E0C80978];
  if (size)
  {
    v14 = (std::string *)((char *)v11 + size);
    v15 = v11;
    while (1)
    {
      v16 = v15->__r_.__value_.__s.__data_[0];
      if (!((v16 & 0x80000000) != 0 ? __maskrune(v16, 0x4000uLL) : *(_DWORD *)(v13 + 4 * v16 + 60) & 0x4000))
        break;
      v15 = (std::string *)((char *)v15 + 1);
      if (!--size)
      {
        v15 = v14;
        break;
      }
    }
    v9 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v10 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    v15 = v11;
  }
  if (v9 >= 0)
    v18 = &__dst;
  else
    v18 = (std::string *)v10;
  std::string::erase(&__dst, (char *)v11 - (char *)v18, (char *)v15 - (char *)v11);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = (std::string *)((char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]));
  else
    v19 = (std::string *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &__dst;
  else
    v20 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  while (v19 != v20)
  {
    v22 = SHIBYTE(v19[-1].__r_.__value_.__r.__words[2]);
    v19 = (std::string *)((char *)v19 - 1);
    v21 = v22;
    if ((v22 & 0x80000000) != 0)
      v23 = __maskrune(v21, 0x4000uLL);
    else
      v23 = *(_DWORD *)(v13 + 4 * v21 + 60) & 0x4000;
    if (!v23)
    {
      v20 = (std::string *)((char *)&v19->__r_.__value_.__l.__data_ + 1);
      break;
    }
  }
  v24 = (char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v25 = &__dst;
  }
  else
  {
    v24 = (char *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
    v25 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  std::string::erase(&__dst, (char *)v20 - (char *)v25, v24 - (char *)v20);
  v26 = (std::string *)*((_QWORD *)this + 78);
  if (v26)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &__dst;
    else
      v27 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v28 = __dst.__r_.__value_.__l.__size_;
    std::string::append(v26, (const std::string::value_type *)v27, v28);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_18EED1B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CA::ADMBuilder::Impl::xml_warning_stub(CA::ADMBuilder::Impl *this, const char *a2, const char *a3, ...)
{
  NSObject *v4;
  std::string *p_p;
  std::string __p;
  char *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  std::string *v13;
  uint64_t v14;
  va_list va;

  va_start(va, a3);
  v14 = *MEMORY[0x1E0C80C00];
  va_copy(v7, va);
  v4 = CA::ADMBuilder::Impl::log(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    v9 = "ADMBuilder.cpp";
    v10 = 1024;
    v11 = 1745;
    v12 = 2080;
    v13 = p_p;
    _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_INFO, "%25s:%-5d XML warning: %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void CA::ADMBuilder::Impl::xml_error_stub(CA::ADMBuilder::Impl *this, const char *a2, const char *a3, ...)
{
  CA::ADMBuilder::Impl *v4;
  NSObject *v5;
  std::string *p_p;
  std::string __p;
  char *v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  std::string *v14;
  uint64_t v15;
  va_list va;

  va_start(va, a3);
  v15 = *MEMORY[0x1E0C80C00];
  va_copy(v8, va);
  v5 = CA::ADMBuilder::Impl::log(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    v10 = "ADMBuilder.cpp";
    v11 = 1024;
    v12 = 1735;
    v13 = 2080;
    v14 = p_p;
    _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d XML error: %s", buf, 0x1Cu);
  }
  if (!*((_DWORD *)this + 158))
    *((_DWORD *)this + 158) = -66608;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t *std::unique_ptr<_xmlParserCtxt,std::function<void ()(_xmlParserCtxt*)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

uint64_t *std::unique_ptr<_xmlParserCtxt,std::function<void ()(_xmlParserCtxt*)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<_xmlParserCtxt,std::function<void ()(_xmlParserCtxt*)>>::reset[abi:ne180100](a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::default_delete<std::string>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::default_delete<CA::ADMLoudnessMetadata>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(_BYTE *)(result + 88) && *(char *)(result + 87) < 0)
      operator delete(*(void **)(result + 64));
    if (*(_BYTE *)(v1 + 56) && *(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(_BYTE *)(v1 + 24))
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
    }
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::optional<std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((_BYTE *)v4 - 8))
        {
          if (*((char *)v4 - 9) < 0)
            operator delete(*(v4 - 4));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::deque<CA::ADMBuilder::Impl::ADMElement>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char ***std::unique_ptr<CA::ADM>::reset[abi:ne180100](char ***result, char **a2)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  void **v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v6 = (void **)(v2 + 33);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = (void **)(v2 + 30);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = (void **)(v2 + 27);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = (void **)(v2 + 24);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = (void **)(v2 + 21);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = (void **)(v2 + 18);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = (void **)(v2 + 15);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = (void **)(v2 + 12);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = (void **)(v2 + 9);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = (void **)(v2 + 6);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v6 = (void **)(v2 + 3);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v3 = *v2;
    if (*v2)
    {
      v4 = v2[1];
      v5 = *v2;
      if (v4 != v3)
      {
        do
          CA::ADMProgramme::~ADMProgramme((CA::ADMProgramme *)(v4 - 368));
        while (v4 != v3);
        v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void CA::ADMProgramme::~ADMProgramme(CA::ADMProgramme *this)
{
  void **v2;

  v2 = (void **)((char *)this + 344);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((_BYTE *)this + 336))
  {
    v2 = (void **)((char *)this + 312);
    std::vector<CA::ADMRenderer>::__destroy_vector::operator()[abi:ne180100](&v2);
    v2 = (void **)((char *)this + 288);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  v2 = (void **)((char *)this + 216);
  std::vector<CA::ADMLoudnessMetadata>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 192);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 168);
  std::vector<CA::ADMLabel>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((_BYTE *)this + 88) && *((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((_BYTE *)this + 56) && *((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*(void **)this);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<CA::ADMLoudnessMetadata>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 144;
        std::__destroy_at[abi:ne180100]<CA::ADMLoudnessMetadata,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<CA::ADMLabel>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<CA::ADMLabel,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<CA::ADMLabel,0>(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
}

void std::__destroy_at[abi:ne180100]<CA::ADMLoudnessMetadata,0>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88) && *(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
}

void std::vector<CA::ADMRenderer>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::__destroy_at[abi:ne180100]<CA::ADMRenderer,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<CA::ADMRenderer,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 96);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(_BYTE *)(a1 + 88) && *(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0)
        operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>,0>(uint64_t a1)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void `anonymous namespace'::format(std::string *this, const char *__format, char **a3)
{
  size_t v6;
  std::string *v7;
  int v8;

  v6 = vsnprintf(0, 0, __format, *a3) + 1;
  std::string::basic_string[abi:ne180100](this, v6, 0);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = this;
  else
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  v8 = vsnprintf((char *)v7, v6, __format, *a3);
  std::string::resize(this, v8, 0);
}

void sub_18EED287C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t CA::ADMBuilder::Impl::log(CA::ADMBuilder::Impl *this)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;

  v2 = &unk_1EE168000;
  if ((v1 & 1) == 0)
  {
    v2 = (_QWORD *)&unk_1EE168000;
    if (v4)
    {
      CA::ADMBuilder::Impl::log(void)::log = (uint64_t)os_log_create("com.apple.coreaudio", "ADMBuilder");
      v2 = (_QWORD *)&unk_1EE168000;
    }
  }
  return v2[113];
}

void std::vector<CA::ADMLoudnessMetadata>::push_back[abi:ne180100](__int128 **a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;

  v4 = (unint64_t)a1[1];
  v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    v8 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - (_QWORD)*a1) >> 4);
    if (v8 + 1 > 0x1C71C71C71C71C7)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - (_QWORD)*a1) >> 4);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0xE38E38E38E38E3)
      v11 = 0x1C71C71C71C71C7;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 > 0x1C71C71C71C71C7)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(144 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = (__int128 *)&v12[144 * v11];
    std::construct_at[abi:ne180100]<CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata*>((uint64_t)&v12[144 * v8], a2);
    v7 = v14 + 9;
    v16 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v13;
    }
    else
    {
      do
      {
        v15 -= 9;
        std::construct_at[abi:ne180100]<CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata*>((uint64_t)(v14 - 9), v15);
      }
      while (v15 != v16);
      v15 = *a1;
      v17 = (uint64_t)a1[1];
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v13;
      while ((__int128 *)v17 != v15)
      {
        v17 -= 144;
        std::__destroy_at[abi:ne180100]<CA::ADMLoudnessMetadata,0>(v17);
      }
    }
    if (v15)
      operator delete(v15);
  }
  else
  {
    std::construct_at[abi:ne180100]<CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata*>(v4, a2);
    v7 = (__int128 *)(v6 + 144);
  }
  a1[1] = v7;
}

uint64_t CA::ADMBuilder::Impl::parse_uint(uint64_t a1, std::string *__str)
{
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;

  v3 = std::stoi(__str, 0, 10);
  if (v3 < 0)
  {
    v5 = 0;
    v6 = 0;
    v4 = 0;
    *(_DWORD *)(a1 + 632) = -66606;
  }
  else
  {
    v4 = v3 & 0xFFFFFF00;
    v5 = v3;
    v6 = 0x100000000;
  }
  return v6 | v4 | v5;
}

void sub_18EED2AC4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  *(_DWORD *)(v1 + 632) = -66606;
  __cxa_end_catch();
  JUMPOUT(0x18EED2AB0);
}

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(std::string *a1, uint64_t a2, char *__s)
{
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, __s);
  }
}

uint64_t CA::ADMBuilder::Impl::parse_BOOL(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;

  v2 = a2[23];
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 1);
  if (v2 == 1)
  {
    if (v3 >= 0)
      v4 = a2;
    else
      v4 = *(unsigned __int8 **)a2;
    v5 = *v4;
    if (v5 == 48)
    {
      v6 = 0;
      goto LABEL_12;
    }
    if (v5 == 49)
    {
      v6 = 1;
LABEL_12:
      v7 = 1;
      return v6 | (v7 << 8);
    }
  }
  v6 = 0;
  v7 = 0;
  *(_DWORD *)(a1 + 632) = -66605;
  return v6 | (v7 << 8);
}

uint64_t std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

__n128 std::construct_at[abi:ne180100]<CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata*>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v2 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*((_BYTE *)a2 + 56))
  {
    v3 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v3;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    v4 = a2[4];
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v4;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_BYTE *)(a1 + 88) = 1;
  }
  result = (__n128)a2[6];
  v6 = a2[7];
  *(_OWORD *)(a1 + 125) = *(__int128 *)((char *)a2 + 125);
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v6;
  return result;
}

void std::__function::__func<CA::ADMBuilder::Impl::Impl(void)::$_0,std::allocator<CA::ADMBuilder::Impl::Impl(void)::$_0>,void ()(_xmlParserCtxt *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<CA::ADMBuilder::Impl::Impl(void)::$_0,std::allocator<CA::ADMBuilder::Impl::Impl(void)::$_0>,void ()(_xmlParserCtxt *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915DE0;
  return result;
}

void std::__function::__func<CA::ADMBuilder::Impl::Impl(void)::$_0,std::allocator<CA::ADMBuilder::Impl::Impl(void)::$_0>,void ()(_xmlParserCtxt *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915DE0;
}

void std::__function::__func<CA::ADMBuilder::Impl::Impl(void)::$_0,std::allocator<CA::ADMBuilder::Impl::Impl(void)::$_0>,void ()(_xmlParserCtxt *)>::operator()(uint64_t a1, xmlParserCtxtPtr *a2)
{
  if (*a2)
    xmlFreeParserCtxt(*a2);
}

void CA::ADMBuilder::~ADMBuilder(CA::ADMBuilder *this)
{
  std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

{
  std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

uint64_t *std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<_xmlParserCtxt,std::function<void ()(_xmlParserCtxt*)>>::~unique_ptr[abi:ne180100]((uint64_t *)(v2 + 1040));
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v2 + 1000);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v2 + 960);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v2 + 920);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v2 + 880);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 840);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 800);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 760);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 720);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 680);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 640);
    v3 = *(_QWORD *)(v2 + 624);
    *(_QWORD *)(v2 + 624) = 0;
    if (v3)
      std::default_delete<std::string>::operator()[abi:ne180100](v3);
    v4 = *(_QWORD *)(v2 + 616);
    *(_QWORD *)(v2 + 616) = 0;
    if (v4)
      std::default_delete<CA::ADMLoudnessMetadata>::operator()[abi:ne180100](v4);
    v5 = (void **)(v2 + 584);
    std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 560);
    std::vector<std::vector<std::optional<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 536);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 512);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 488);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 464);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 440);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 416);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 392);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 368);
    std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 344);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 320);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 296);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 272);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 248);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 224);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 200);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 176);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 152);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 128);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 104);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 80);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(v2 + 56);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::deque<CA::ADMBuilder::Impl::ADMElement>::~deque[abi:ne180100](v2 + 8);
    std::unique_ptr<CA::ADM>::reset[abi:ne180100]((char ***)v2, 0);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

_QWORD *CA::ADMBuilder::ADMBuilder(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t *CA::ADMBuilder::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100](a1, v3);
  return a1;
}

uint64_t CA::ADMBuilder::parse(CA::ADMBuilder *this, const char *a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)this;
  result = *(unsigned int *)(*(_QWORD *)this + 632);
  if (!(_DWORD)result)
  {
    xmlParseChunk(*(xmlParserCtxtPtr *)(v5 + 1040), a2, a3, a4);
    return *(unsigned int *)(*(_QWORD *)this + 632);
  }
  return result;
}

void CA::ADMBuilder::build(unint64_t this@<X0>, int8x8_t *a2@<X8>)
{
  int8x8_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  __int128 *v10;
  __int128 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unsigned __int8 **v18;
  char **v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  int64x2_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  std::string::size_type v46;
  uint64_t v47;
  char **v48;
  char *v49;
  unint64_t v50;
  std::string::size_type v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  NSObject *v55;
  std::string *p_p;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  std::string::size_type size;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  int64x2_t v73;
  char *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  std::string::size_type v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  char **v88;
  std::string::size_type v89;
  unint64_t *v90;
  unint64_t v91;
  char *v92;
  NSObject *v93;
  std::string *v94;
  uint64_t v95;
  char **v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  std::string::size_type v105;
  unint64_t *v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  int64x2_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  int8x8_t v118;
  unint64_t v119;
  int8x8_t v120;
  __int128 *v121;
  __int128 *v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  _QWORD *v125;
  unsigned __int8 **v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  __int128 v140;
  unint64_t *v141;
  unint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  char *v145;
  __int128 v146;
  int64x2_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unsigned __int8 *v156;
  uint64_t *v157;
  _QWORD *v158;
  unsigned __int8 **v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  __int128 v173;
  unint64_t *v174;
  unint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  char *v178;
  __int128 v179;
  int64x2_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t *v187;
  uint64_t v188;
  int v189;
  int8x8_t v191;
  __int128 *v192;
  __int128 *v193;
  unsigned __int8 *v194;
  _QWORD *v195;
  unsigned __int8 **v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  __int128 v210;
  unint64_t *v211;
  unint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  char *v215;
  __int128 v216;
  int64x2_t v217;
  char *v218;
  unint64_t *v219;
  _QWORD *v220;
  _QWORD *v221;
  unint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char *v230;
  uint64_t v231;
  char *v232;
  std::string::size_type v233;
  unint64_t *v234;
  unint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  char *v238;
  __int128 v239;
  int64x2_t v240;
  uint64_t v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  __int128 *v248;
  __int128 *v249;
  unsigned __int8 *v250;
  __int128 *v251;
  _QWORD *v252;
  __int128 v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  _OWORD *v258;
  _OWORD *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  _OWORD *v265;
  char *v266;
  _QWORD *v267;
  _QWORD *v268;
  __int128 v269;
  _QWORD *v270;
  uint64_t v271;
  unint64_t v272;
  std::string::size_type v273;
  int64x2_t *v274;
  _QWORD *v275;
  unint64_t v276;
  std::string::size_type v277;
  unint64_t *v278;
  unint64_t v279;
  _QWORD *v280;
  NSObject *v281;
  std::string *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  char *v289;
  uint64_t v290;
  char *v291;
  std::string::size_type v292;
  unint64_t *v293;
  unint64_t v294;
  _QWORD *v295;
  _QWORD *v296;
  char *v297;
  __int128 v298;
  int64x2_t v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  CA::ADMBuilder::Impl *v308;
  std::string::size_type v309;
  int64x2_t *v310;
  _QWORD *v311;
  unint64_t v312;
  std::string::size_type v313;
  unint64_t *v314;
  unint64_t v315;
  _QWORD *v316;
  NSObject *v317;
  std::string *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  char *v325;
  uint64_t v326;
  char *v327;
  std::string::size_type v328;
  unint64_t *v329;
  unint64_t v330;
  _QWORD *v331;
  _QWORD *v332;
  char *v333;
  __int128 v334;
  int64x2_t v335;
  uint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t v342;
  CA::ADMBuilder::Impl *v343;
  std::string::size_type v344;
  _QWORD *v345;
  std::string::size_type v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  std::string::size_type *v350;
  _QWORD *v351;
  NSObject *v352;
  std::string *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  unint64_t v359;
  char *v360;
  std::string::size_type *v361;
  uint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  CA::ADMBuilder::Impl *v369;
  std::string::size_type v370;
  _QWORD *v371;
  std::string::size_type v372;
  unint64_t *v373;
  unint64_t v374;
  unint64_t v375;
  std::string::size_type *v376;
  _QWORD *v377;
  NSObject *v378;
  std::string *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  char *v386;
  std::string::size_type *v387;
  uint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  uint64_t v392;
  CA::ADMBuilder::Impl *v393;
  std::string::size_type v394;
  uint64_t v395;
  std::string::size_type v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  NSObject *v400;
  std::string *v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  uint64_t v405;
  CA::ADMBuilder::Impl *v406;
  std::string::size_type v407;
  uint64_t v408;
  std::string::size_type v409;
  unint64_t *v410;
  unint64_t v411;
  std::__shared_weak_count *v412;
  NSObject *v413;
  std::string *v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  uint64_t *v418;
  uint64_t v419;
  uint64_t v420;
  CA::ADMBuilder::Impl *v421;
  std::string::size_type v422;
  _QWORD *v423;
  _QWORD *v424;
  unint64_t v425;
  std::string::size_type v426;
  unint64_t *v427;
  unint64_t v428;
  _QWORD *v429;
  NSObject *v430;
  std::string *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  char *v438;
  uint64_t v439;
  char *v440;
  std::string::size_type v441;
  unint64_t *v442;
  unint64_t v443;
  _QWORD *v444;
  _QWORD *v445;
  char *v446;
  __int128 v447;
  int64x2_t v448;
  uint64_t v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  CA::ADMBuilder::Impl *v455;
  std::string::size_type v456;
  uint64_t v457;
  std::string::size_type v458;
  unint64_t *v459;
  unint64_t v460;
  std::__shared_weak_count *v461;
  NSObject *v462;
  std::string *v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  int8x8_t *v467;
  NSObject *v468;
  std::string *v469;
  uint64_t v470;
  const char *v471;
  std::string *v472;
  uint64_t v473;
  std::string *v474;
  uint64_t v475;
  std::string *v476;
  uint64_t v477;
  std::string *v478;
  uint64_t v479;
  NSObject *v480;
  int v481;
  std::string::size_type v482;
  std::string *v483;
  std::string *v484;
  __int128 v485;
  int8x8_t **v486;
  int8x8_t *v487;
  std::string v488;
  std::string __p;
  _BYTE buf[40];
  uint64_t v491;

  v491 = *MEMORY[0x1E0C80C00];
  v486 = (int8x8_t **)this;
  v3 = *(int8x8_t **)this;
  v4 = **(uint64_t ***)this;
  if (!v4)
    goto LABEL_568;
  v5 = *v4;
  v487 = a2;
  if (v4[1] != *v4)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)&v3[40] + 24 * v6);
      if (*(_QWORD *)(*(_QWORD *)&v3[40] + 24 * v6 + 8) != v7)
        break;
LABEL_33:
      if (*(_BYTE *)(v5 + 368 * v6 + 336))
      {
        v43 = (uint64_t *)(*(_QWORD *)&v3[43] + 24 * v6);
        v45 = *v43;
        v44 = v43[1];
        if (*v43 != v44)
        {
          while (1)
          {
            this = CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v488, v3, v45);
            v46 = v488.__r_.__value_.__r.__words[0];
            if (v488.__r_.__value_.__r.__words[0])
            {
              v47 = **(_QWORD **)v3 + 368 * v6;
              v48 = (char **)(v47 + 288);
              v49 = *(char **)(v47 + 296);
              v50 = *(_QWORD *)(v47 + 304);
              if ((unint64_t)v49 >= v50)
              {
                v58 = (v49 - *v48) >> 4;
                v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 60)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v60 = v47 + 304;
                v61 = v50 - (_QWORD)*v48;
                if (v61 >> 3 > v59)
                  v59 = v61 >> 3;
                if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
                  v62 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v62 = v59;
                *(_QWORD *)&buf[32] = v60;
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v62);
                v65 = &v63[16 * v58];
                size = v488.__r_.__value_.__l.__size_;
                *(_OWORD *)v65 = *(_OWORD *)&v488.__r_.__value_.__l.__data_;
                if (size)
                {
                  v67 = (unint64_t *)(size + 8);
                  do
                    v68 = __ldxr(v67);
                  while (__stxr(v68 + 1, v67));
                }
                v70 = *v48;
                v69 = v48[1];
                if (v69 == *v48)
                {
                  v73 = vdupq_n_s64((unint64_t)v69);
                  v71 = &v63[16 * v58];
                }
                else
                {
                  v71 = &v63[16 * v58];
                  do
                  {
                    v72 = *((_OWORD *)v69 - 1);
                    v69 -= 16;
                    *((_OWORD *)v71 - 1) = v72;
                    v71 -= 16;
                    *(_QWORD *)v69 = 0;
                    *((_QWORD *)v69 + 1) = 0;
                  }
                  while (v69 != v70);
                  v73 = *(int64x2_t *)v48;
                }
                v54 = v65 + 16;
                *v48 = v71;
                v48[1] = v65 + 16;
                *(int64x2_t *)&buf[8] = v73;
                v74 = v48[2];
                v48[2] = &v63[16 * v64];
                *(_QWORD *)&buf[24] = v74;
                *(_QWORD *)buf = v73.i64[0];
                this = std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                *(_QWORD *)v49 = v488.__r_.__value_.__r.__words[0];
                v51 = v488.__r_.__value_.__l.__size_;
                *((_QWORD *)v49 + 1) = v488.__r_.__value_.__l.__size_;
                if (v51)
                {
                  v52 = (unint64_t *)(v51 + 8);
                  do
                    v53 = __ldxr(v52);
                  while (__stxr(v53 + 1, v52));
                }
                v54 = v49 + 16;
              }
              v48[1] = v54;
            }
            else
            {
              v55 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
              this = os_log_type_enabled(v55, OS_LOG_TYPE_ERROR);
              if ((_DWORD)this)
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, **(_QWORD **)v3 + 368 * v6, "");
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                v57 = v45;
                if (*(char *)(v45 + 23) < 0)
                  v57 = *(_QWORD *)v45;
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 216;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = p_p;
                *(_WORD *)&buf[28] = 2080;
                *(_QWORD *)&buf[30] = v57;
                _os_log_impl(&dword_18EE07000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d Programme '%s' references unknown pack format '%s' for reference layout", buf, 0x26u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            v75 = (std::__shared_weak_count *)v488.__r_.__value_.__l.__size_;
            if (v488.__r_.__value_.__l.__size_)
            {
              v76 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 8);
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v75);
              }
            }
            if (!v46)
              goto LABEL_567;
            v45 += 24;
            if (v45 == v44)
            {
              v4 = (uint64_t *)*v3;
              v5 = **(_QWORD **)v3;
              break;
            }
          }
        }
        if (*(_QWORD *)(v5 + 368 * v6 + 320) != *(_QWORD *)(v5 + 368 * v6 + 312))
        {
          v78 = 0;
          while (1)
          {
            v79 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)&v3[46] + 24 * v6) + 24 * v78);
            v81 = *v79;
            v80 = v79[1];
            if (*v79 != v80)
              break;
LABEL_112:
            if (++v78 >= 0xEEEEEEEEEEEEEEEFLL
                        * ((uint64_t)(*(_QWORD *)(v5 + 368 * v6 + 320) - *(_QWORD *)(v5 + 368 * v6 + 312)) >> 3))
              goto LABEL_113;
          }
          while (1)
          {
            this = CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v488, v3, v81);
            v82 = v488.__r_.__value_.__r.__words[0];
            if (v488.__r_.__value_.__r.__words[0])
            {
              v83 = *(_QWORD *)(**(_QWORD **)v3 + 368 * v6 + 312) + 120 * v78;
              v86 = *(_QWORD *)(v83 + 112);
              v85 = (uint64_t *)(v83 + 112);
              v84 = v86;
              v88 = (char **)(v85 - 1);
              v87 = (_QWORD *)*(v85 - 1);
              if ((unint64_t)v87 >= v86)
              {
                v96 = (char **)(v85 - 2);
                v97 = *(v85 - 2);
                v98 = ((uint64_t)v87 - v97) >> 4;
                v99 = v98 + 1;
                if ((unint64_t)(v98 + 1) >> 60)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v100 = v84 - v97;
                if (v100 >> 3 > v99)
                  v99 = v100 >> 3;
                if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF0)
                  v101 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v101 = v99;
                *(_QWORD *)&buf[32] = v85;
                v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v101);
                v104 = &v102[16 * v98];
                v105 = v488.__r_.__value_.__l.__size_;
                *(_OWORD *)v104 = *(_OWORD *)&v488.__r_.__value_.__l.__data_;
                if (v105)
                {
                  v106 = (unint64_t *)(v105 + 8);
                  do
                    v107 = __ldxr(v106);
                  while (__stxr(v107 + 1, v106));
                }
                v108 = *v88;
                v109 = *v96;
                if (*v88 == *v96)
                {
                  v112 = vdupq_n_s64((unint64_t)v108);
                  v110 = &v102[16 * v98];
                }
                else
                {
                  v110 = &v102[16 * v98];
                  do
                  {
                    v111 = *((_OWORD *)v108 - 1);
                    v108 -= 16;
                    *((_OWORD *)v110 - 1) = v111;
                    v110 -= 16;
                    *(_QWORD *)v108 = 0;
                    *((_QWORD *)v108 + 1) = 0;
                  }
                  while (v108 != v109);
                  v112 = *(int64x2_t *)v96;
                }
                v92 = v104 + 16;
                *v96 = v110;
                *v88 = v104 + 16;
                *(int64x2_t *)&buf[8] = v112;
                v113 = *v85;
                *v85 = (uint64_t)&v102[16 * v103];
                *(_QWORD *)&buf[24] = v113;
                *(_QWORD *)buf = v112.i64[0];
                this = std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                *v87 = v488.__r_.__value_.__r.__words[0];
                v89 = v488.__r_.__value_.__l.__size_;
                v87[1] = v488.__r_.__value_.__l.__size_;
                if (v89)
                {
                  v90 = (unint64_t *)(v89 + 8);
                  do
                    v91 = __ldxr(v90);
                  while (__stxr(v91 + 1, v90));
                }
                v92 = (char *)(v87 + 2);
              }
              *v88 = v92;
            }
            else
            {
              v93 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
              this = os_log_type_enabled(v93, OS_LOG_TYPE_ERROR);
              if ((_DWORD)this)
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, **(_QWORD **)v3 + 368 * v6, "");
                v94 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v94 = (std::string *)__p.__r_.__value_.__r.__words[0];
                v95 = v81;
                if (*(char *)(v81 + 23) < 0)
                  v95 = *(_QWORD *)v81;
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 232;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = v94;
                *(_WORD *)&buf[28] = 2080;
                *(_QWORD *)&buf[30] = v95;
                _os_log_impl(&dword_18EE07000, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d Programme '%s' references unknown pack format '%s' for reference layout", buf, 0x26u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            v114 = (std::__shared_weak_count *)v488.__r_.__value_.__l.__size_;
            if (v488.__r_.__value_.__l.__size_)
            {
              v115 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 8);
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            if (!v82)
              goto LABEL_567;
            v81 += 24;
            if (v81 == v80)
            {
              v4 = (uint64_t *)*v3;
              v5 = **(_QWORD **)v3;
              goto LABEL_112;
            }
          }
        }
      }
LABEL_113:
      if (++v6 >= 0xD37A6F4DE9BD37A7 * ((v4[1] - v5) >> 4))
      {
        v3 = *v486;
        v4 = (uint64_t *)**v486;
        goto LABEL_115;
      }
    }
    v8 = 0;
    while (1)
    {
      v9 = (_QWORD *)*v3;
      v11 = *(__int128 **)(*(_QWORD *)v3 + 24);
      v10 = *(__int128 **)(*(_QWORD *)v3 + 32);
      if (v11 == v10)
        break;
      v12 = (unsigned __int8 *)(v7 + 24 * v8);
      while (1)
      {
        v13 = *(unsigned __int8 **)v11;
        this = std::operator==[abi:ne180100]<std::string,std::string>(v12, *(unsigned __int8 **)v11);
        if ((_DWORD)this)
          break;
        if (++v11 == v10)
          goto LABEL_521;
      }
      v14 = *v9 + 368 * v6;
      v17 = *(_QWORD *)(v14 + 208);
      v16 = (uint64_t *)(v14 + 208);
      v15 = v17;
      v19 = (char **)(v16 - 1);
      v18 = (unsigned __int8 **)*(v16 - 1);
      if ((unint64_t)v18 >= v17)
      {
        v24 = (char **)(v16 - 2);
        v25 = *(v16 - 2);
        v26 = ((uint64_t)v18 - v25) >> 4;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v28 = v15 - v25;
        if (v28 >> 3 > v27)
          v27 = v28 >> 3;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
          v29 = 0xFFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        *(_QWORD *)&buf[32] = v16;
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v29);
        v32 = &v30[16 * v26];
        v33 = *v11;
        *(_OWORD *)v32 = *v11;
        if (*((_QWORD *)&v33 + 1))
        {
          v34 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v36 = *v19;
        v37 = *v24;
        if (*v19 == *v24)
        {
          v40 = vdupq_n_s64((unint64_t)v36);
          v38 = &v30[16 * v26];
        }
        else
        {
          v38 = &v30[16 * v26];
          do
          {
            v39 = *((_OWORD *)v36 - 1);
            v36 -= 16;
            *((_OWORD *)v38 - 1) = v39;
            v38 -= 16;
            *(_QWORD *)v36 = 0;
            *((_QWORD *)v36 + 1) = 0;
          }
          while (v36 != v37);
          v40 = *(int64x2_t *)v24;
        }
        v23 = v32 + 16;
        *v24 = v38;
        *v19 = v32 + 16;
        *(int64x2_t *)&buf[8] = v40;
        v41 = *v16;
        *v16 = (uint64_t)&v30[16 * v31];
        *(_QWORD *)&buf[24] = v41;
        *(_QWORD *)buf = v40.i64[0];
        this = std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *v18 = v13;
        v20 = *((_QWORD *)v11 + 1);
        v18[1] = (unsigned __int8 *)v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (char *)(v18 + 2);
      }
      *v19 = v23;
      ++v8;
      v42 = (uint64_t *)(*(_QWORD *)&v3[40] + 24 * v6);
      v7 = *v42;
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v42[1] - *v42) >> 3))
      {
        v4 = (uint64_t *)*v3;
        v5 = **(_QWORD **)v3;
        goto LABEL_33;
      }
    }
LABEL_521:
    v468 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
    if (os_log_type_enabled(v468, OS_LOG_TYPE_ERROR))
    {
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, **(_QWORD **)v3 + 368 * v6, "");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v469 = &__p;
      else
        v469 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v470 = *(_QWORD *)(*(_QWORD *)&v3[40] + 24 * v6) + 24 * v8;
      if (*(char *)(v470 + 23) < 0)
        v470 = *(_QWORD *)v470;
      a2 = v487;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 203;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v469;
      *(_WORD *)&buf[28] = 2080;
      *(_QWORD *)&buf[30] = v470;
      v471 = "%25s:%-5d Programme '%s' references unknown content '%s'";
      goto LABEL_535;
    }
    goto LABEL_567;
  }
LABEL_115:
  if (v4[4] == v4[3])
  {
LABEL_148:
    if (v4[7] == v4[6])
    {
LABEL_312:
      if (v4[10] == v4[9])
      {
LABEL_492:
        if (v4[28] != v4[27])
        {
          v453 = 0;
          do
          {
            v454 = *(_QWORD *)&v3[58] + 32 * v453;
            if (*(_BYTE *)(v454 + 24))
            {
              CA::ADMBuilder::Impl::resolve_stream_format_reference(&v488, (uint64_t)v3, *(_QWORD *)&v3[58] + 32 * v453);
              v456 = v488.__r_.__value_.__r.__words[0];
              if (v488.__r_.__value_.__r.__words[0])
              {
                v457 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 216) + 16 * v453);
                v458 = v488.__r_.__value_.__l.__size_;
                if (v488.__r_.__value_.__l.__size_)
                {
                  v459 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 16);
                  do
                    v460 = __ldxr(v459);
                  while (__stxr(v460 + 1, v459));
                }
                v461 = *(std::__shared_weak_count **)(v457 + 136);
                *(_QWORD *)(v457 + 128) = v456;
                *(_QWORD *)(v457 + 136) = v458;
                if (v461)
                  std::__shared_weak_count::__release_weak(v461);
              }
              else
              {
                v462 = CA::ADMBuilder::Impl::log(v455);
                if (os_log_type_enabled(v462, OS_LOG_TYPE_ERROR))
                {
                  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 216) + 16 * v453), "");
                  v463 = &__p;
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v463 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  if (*(char *)(v454 + 23) < 0)
                    v454 = *(_QWORD *)v454;
                  *(_DWORD *)buf = 136315906;
                  *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 427;
                  *(_WORD *)&buf[18] = 2080;
                  *(_QWORD *)&buf[20] = v463;
                  *(_WORD *)&buf[28] = 2080;
                  *(_QWORD *)&buf[30] = v454;
                  _os_log_impl(&dword_18EE07000, v462, OS_LOG_TYPE_ERROR, "%25s:%-5d Track format '%s' references unknown stream format '%s'", buf, 0x26u);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
              v464 = (std::__shared_weak_count *)v488.__r_.__value_.__l.__size_;
              a2 = v487;
              if (v488.__r_.__value_.__l.__size_)
              {
                v465 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 8);
                do
                  v466 = __ldaxr(v465);
                while (__stlxr(v466 - 1, v465));
                if (!v466)
                {
                  ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
                  std::__shared_weak_count::__release_weak(v464);
                }
              }
              if (!v456)
                goto LABEL_568;
              v4 = (uint64_t *)*v3;
            }
            ++v453;
          }
          while (v453 < (v4[28] - v4[27]) >> 4);
          v3 = *v486;
        }
        a2 = v487;
        if (CA::ADMBuilder::Impl::build_stream_formats(v3)
          && CA::ADMBuilder::Impl::build_track_uids(*v486)
          && CA::ADMBuilder::Impl::build_channel_formats((CA::ADMBuilder::Impl *)*v486))
        {
          v467 = *v486;
          *v487 = **v486;
          a2 = v467;
        }
        goto LABEL_568;
      }
      v304 = 0;
      while (1)
      {
        v305 = (uint64_t *)(*(_QWORD *)&v3[25] + 24 * v304);
        v307 = *v305;
        v306 = v305[1];
        while (v307 != v306)
        {
          v308 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v488, v3, v307);
          v309 = v488.__r_.__value_.__r.__words[0];
          if (v488.__r_.__value_.__r.__words[0])
          {
            v310 = *(int64x2_t **)(*(_QWORD *)(*(_QWORD *)v3 + 72) + 16 * v304);
            v311 = (_QWORD *)v310[10].i64[1];
            v312 = v310[11].u64[0];
            if ((unint64_t)v311 >= v312)
            {
              v320 = v310[10].i64[0];
              v321 = ((uint64_t)v311 - v320) >> 4;
              v322 = v321 + 1;
              if ((unint64_t)(v321 + 1) >> 60)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v323 = v312 - v320;
              if (v323 >> 3 > v322)
                v322 = v323 >> 3;
              if ((unint64_t)v323 >= 0x7FFFFFFFFFFFFFF0)
                v324 = 0xFFFFFFFFFFFFFFFLL;
              else
                v324 = v322;
              *(_QWORD *)&buf[32] = v310 + 11;
              v325 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v324);
              v327 = &v325[16 * v321];
              v328 = v488.__r_.__value_.__l.__size_;
              *(_OWORD *)v327 = *(_OWORD *)&v488.__r_.__value_.__l.__data_;
              if (v328)
              {
                v329 = (unint64_t *)(v328 + 8);
                do
                  v330 = __ldxr(v329);
                while (__stxr(v330 + 1, v329));
              }
              v332 = (_QWORD *)v310[10].i64[0];
              v331 = (_QWORD *)v310[10].i64[1];
              if (v331 == v332)
              {
                v335 = vdupq_n_s64((unint64_t)v331);
                v333 = &v325[16 * v321];
              }
              else
              {
                v333 = &v325[16 * v321];
                do
                {
                  v334 = *((_OWORD *)v331 - 1);
                  v331 -= 2;
                  *((_OWORD *)v333 - 1) = v334;
                  v333 -= 16;
                  *v331 = 0;
                  v331[1] = 0;
                }
                while (v331 != v332);
                v335 = v310[10];
              }
              v316 = v327 + 16;
              v310[10].i64[0] = (uint64_t)v333;
              v310[10].i64[1] = (uint64_t)(v327 + 16);
              *(int64x2_t *)&buf[8] = v335;
              v336 = v310[11].i64[0];
              v310[11].i64[0] = (uint64_t)&v325[16 * v326];
              *(_QWORD *)&buf[24] = v336;
              *(_QWORD *)buf = v335.i64[0];
              std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              *v311 = v488.__r_.__value_.__r.__words[0];
              v313 = v488.__r_.__value_.__l.__size_;
              v311[1] = v488.__r_.__value_.__l.__size_;
              if (v313)
              {
                v314 = (unint64_t *)(v313 + 8);
                do
                  v315 = __ldxr(v314);
                while (__stxr(v315 + 1, v314));
              }
              v316 = v311 + 2;
            }
            v310[10].i64[1] = (uint64_t)v316;
          }
          else
          {
            v317 = CA::ADMBuilder::Impl::log(v308);
            if (os_log_type_enabled(v317, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 72) + 16 * v304), "");
              v318 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v318 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v319 = v307;
              if (*(char *)(v307 + 23) < 0)
                v319 = *(_QWORD *)v307;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 354;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v318;
              *(_WORD *)&buf[28] = 2080;
              *(_QWORD *)&buf[30] = v319;
              _os_log_impl(&dword_18EE07000, v317, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format '%s' references unknown pack format '%s'", buf, 0x26u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          v337 = (std::__shared_weak_count *)v488.__r_.__value_.__l.__size_;
          if (v488.__r_.__value_.__l.__size_)
          {
            v338 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 8);
            do
              v339 = __ldaxr(v338);
            while (__stlxr(v339 - 1, v338));
            if (!v339)
            {
              ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
              std::__shared_weak_count::__release_weak(v337);
            }
          }
          if (!v309)
            goto LABEL_567;
          v307 += 24;
        }
        v340 = (uint64_t *)(*(_QWORD *)&v3[28] + 24 * v304);
        v342 = *v340;
        v341 = v340[1];
        while (v342 != v341)
        {
          v343 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v488, v3, v342);
          v344 = v488.__r_.__value_.__r.__words[0];
          if (v488.__r_.__value_.__r.__words[0])
          {
            v345 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v3 + 72) + 16 * v304);
            v346 = v488.__r_.__value_.__l.__size_;
            if (v488.__r_.__value_.__l.__size_)
            {
              v347 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 16);
              do
                v348 = __ldxr(v347);
              while (__stxr(v348 + 1, v347));
            }
            v349 = v345[26];
            v350 = (std::string::size_type *)v345[25];
            if ((unint64_t)v350 >= v349)
            {
              v355 = v345[24];
              v356 = ((uint64_t)v350 - v355) >> 4;
              v357 = v356 + 1;
              if ((unint64_t)(v356 + 1) >> 60)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v358 = v349 - v355;
              if (v358 >> 3 > v357)
                v357 = v358 >> 3;
              if ((unint64_t)v358 >= 0x7FFFFFFFFFFFFFF0)
                v359 = 0xFFFFFFFFFFFFFFFLL;
              else
                v359 = v357;
              *(_QWORD *)&buf[32] = v345 + 26;
              v360 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v359);
              v361 = (std::string::size_type *)&v360[16 * v356];
              *(_QWORD *)buf = v360;
              *(_QWORD *)&buf[8] = v361;
              *(_QWORD *)&buf[24] = &v360[16 * v362];
              *v361 = v344;
              v361[1] = v346;
              *(_QWORD *)&buf[16] = v361 + 2;
              std::vector<std::weak_ptr<CA::ADMPackFormat>>::__swap_out_circular_buffer(v345 + 24, buf);
              v351 = (_QWORD *)v345[25];
              std::__split_buffer<std::weak_ptr<CA::ADMPackFormat>>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              *v350 = v344;
              v350[1] = v346;
              v351 = v350 + 2;
              v345[25] = v350 + 2;
            }
            v345[25] = v351;
          }
          else
          {
            v352 = CA::ADMBuilder::Impl::log(v343);
            if (os_log_type_enabled(v352, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 72) + 16 * v304), "");
              v353 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v353 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v354 = v342;
              if (*(char *)(v342 + 23) < 0)
                v354 = *(_QWORD *)v342;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 365;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v353;
              *(_WORD *)&buf[28] = 2080;
              *(_QWORD *)&buf[30] = v354;
              _os_log_impl(&dword_18EE07000, v352, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format '%s' references unknown encode pack format '%s'", buf, 0x26u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          v363 = (std::__shared_weak_count *)v488.__r_.__value_.__l.__size_;
          if (v488.__r_.__value_.__l.__size_)
          {
            v364 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 8);
            do
              v365 = __ldaxr(v364);
            while (__stlxr(v365 - 1, v364));
            if (!v365)
            {
              ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
              std::__shared_weak_count::__release_weak(v363);
            }
          }
          if (!v344)
            goto LABEL_567;
          v342 += 24;
        }
        v366 = (uint64_t *)(*(_QWORD *)&v3[31] + 24 * v304);
        v368 = *v366;
        v367 = v366[1];
        while (v368 != v367)
        {
          v369 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v488, v3, v368);
          v370 = v488.__r_.__value_.__r.__words[0];
          if (v488.__r_.__value_.__r.__words[0])
          {
            v371 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v3 + 72) + 16 * v304);
            v372 = v488.__r_.__value_.__l.__size_;
            if (v488.__r_.__value_.__l.__size_)
            {
              v373 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 16);
              do
                v374 = __ldxr(v373);
              while (__stxr(v374 + 1, v373));
            }
            v375 = v371[29];
            v376 = (std::string::size_type *)v371[28];
            if ((unint64_t)v376 >= v375)
            {
              v381 = v371[27];
              v382 = ((uint64_t)v376 - v381) >> 4;
              v383 = v382 + 1;
              if ((unint64_t)(v382 + 1) >> 60)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v384 = v375 - v381;
              if (v384 >> 3 > v383)
                v383 = v384 >> 3;
              if ((unint64_t)v384 >= 0x7FFFFFFFFFFFFFF0)
                v385 = 0xFFFFFFFFFFFFFFFLL;
              else
                v385 = v383;
              *(_QWORD *)&buf[32] = v371 + 29;
              v386 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v385);
              v387 = (std::string::size_type *)&v386[16 * v382];
              *(_QWORD *)buf = v386;
              *(_QWORD *)&buf[8] = v387;
              *(_QWORD *)&buf[24] = &v386[16 * v388];
              *v387 = v370;
              v387[1] = v372;
              *(_QWORD *)&buf[16] = v387 + 2;
              std::vector<std::weak_ptr<CA::ADMPackFormat>>::__swap_out_circular_buffer(v371 + 27, buf);
              v377 = (_QWORD *)v371[28];
              std::__split_buffer<std::weak_ptr<CA::ADMPackFormat>>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              *v376 = v370;
              v376[1] = v372;
              v377 = v376 + 2;
              v371[28] = v376 + 2;
            }
            v371[28] = v377;
          }
          else
          {
            v378 = CA::ADMBuilder::Impl::log(v369);
            if (os_log_type_enabled(v378, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 72) + 16 * v304), "");
              v379 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v379 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v380 = v368;
              if (*(char *)(v368 + 23) < 0)
                v380 = *(_QWORD *)v368;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 376;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v379;
              *(_WORD *)&buf[28] = 2080;
              *(_QWORD *)&buf[30] = v380;
              _os_log_impl(&dword_18EE07000, v378, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format '%s' references unknown decode pack format '%s'", buf, 0x26u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          v389 = (std::__shared_weak_count *)v488.__r_.__value_.__l.__size_;
          if (v488.__r_.__value_.__l.__size_)
          {
            v390 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 8);
            do
              v391 = __ldaxr(v390);
            while (__stlxr(v391 - 1, v390));
            if (!v391)
            {
              ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
              std::__shared_weak_count::__release_weak(v389);
            }
          }
          if (!v370)
            goto LABEL_567;
          v368 += 24;
        }
        v392 = *(_QWORD *)&v3[34] + 32 * v304;
        if (*(_BYTE *)(v392 + 24))
        {
          v393 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v488, v3, *(_QWORD *)&v3[34] + 32 * v304);
          v394 = v488.__r_.__value_.__r.__words[0];
          if (v488.__r_.__value_.__r.__words[0])
          {
            v395 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 72) + 16 * v304);
            v396 = v488.__r_.__value_.__l.__size_;
            if (v488.__r_.__value_.__l.__size_)
            {
              v397 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 16);
              do
                v398 = __ldxr(v397);
              while (__stxr(v398 + 1, v397));
            }
            v399 = *(std::__shared_weak_count **)(v395 + 248);
            *(_QWORD *)(v395 + 240) = v394;
            *(_QWORD *)(v395 + 248) = v396;
            if (v399)
              std::__shared_weak_count::__release_weak(v399);
          }
          else
          {
            v400 = CA::ADMBuilder::Impl::log(v393);
            if (os_log_type_enabled(v400, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 72) + 16 * v304), "");
              v401 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v401 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if (*(char *)(v392 + 23) < 0)
                v392 = *(_QWORD *)v392;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 387;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v401;
              *(_WORD *)&buf[28] = 2080;
              *(_QWORD *)&buf[30] = v392;
              _os_log_impl(&dword_18EE07000, v400, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format '%s' references unknown input pack format '%s'", buf, 0x26u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          v402 = (std::__shared_weak_count *)v488.__r_.__value_.__l.__size_;
          if (v488.__r_.__value_.__l.__size_)
          {
            v403 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 8);
            do
              v404 = __ldaxr(v403);
            while (__stlxr(v404 - 1, v403));
            if (!v404)
            {
              ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
              std::__shared_weak_count::__release_weak(v402);
            }
          }
          if (!v394)
            break;
        }
        v405 = *(_QWORD *)&v3[37] + 32 * v304;
        if (*(_BYTE *)(v405 + 24))
        {
          v406 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v488, v3, *(_QWORD *)&v3[37] + 32 * v304);
          v407 = v488.__r_.__value_.__r.__words[0];
          if (v488.__r_.__value_.__r.__words[0])
          {
            v408 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 72) + 16 * v304);
            v409 = v488.__r_.__value_.__l.__size_;
            if (v488.__r_.__value_.__l.__size_)
            {
              v410 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 16);
              do
                v411 = __ldxr(v410);
              while (__stxr(v411 + 1, v410));
            }
            v412 = *(std::__shared_weak_count **)(v408 + 264);
            *(_QWORD *)(v408 + 256) = v407;
            *(_QWORD *)(v408 + 264) = v409;
            if (v412)
              std::__shared_weak_count::__release_weak(v412);
          }
          else
          {
            v413 = CA::ADMBuilder::Impl::log(v406);
            if (os_log_type_enabled(v413, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 72) + 16 * v304), "");
              v414 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v414 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if (*(char *)(v405 + 23) < 0)
                v405 = *(_QWORD *)v405;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 399;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v414;
              *(_WORD *)&buf[28] = 2080;
              *(_QWORD *)&buf[30] = v405;
              _os_log_impl(&dword_18EE07000, v413, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format '%s' references unknown output pack format '%s'", buf, 0x26u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          v415 = (std::__shared_weak_count *)v488.__r_.__value_.__l.__size_;
          if (v488.__r_.__value_.__l.__size_)
          {
            v416 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 8);
            do
              v417 = __ldaxr(v416);
            while (__stlxr(v417 - 1, v416));
            if (!v417)
            {
              ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
              std::__shared_weak_count::__release_weak(v415);
            }
          }
          if (!v407)
            break;
        }
        v418 = (uint64_t *)(*(_QWORD *)&v3[22] + 24 * v304);
        v420 = *v418;
        v419 = v418[1];
        while (v420 != v419)
        {
          CA::ADMBuilder::Impl::resolve_channel_format_reference(&v488, (uint64_t)v3, v420);
          v422 = v488.__r_.__value_.__r.__words[0];
          if (v488.__r_.__value_.__r.__words[0])
          {
            v423 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v3 + 72) + 16 * v304);
            v424 = (_QWORD *)v423[18];
            v425 = v423[19];
            if ((unint64_t)v424 >= v425)
            {
              v433 = v423[17];
              v434 = ((uint64_t)v424 - v433) >> 4;
              v435 = v434 + 1;
              if ((unint64_t)(v434 + 1) >> 60)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v436 = v425 - v433;
              if (v436 >> 3 > v435)
                v435 = v436 >> 3;
              if ((unint64_t)v436 >= 0x7FFFFFFFFFFFFFF0)
                v437 = 0xFFFFFFFFFFFFFFFLL;
              else
                v437 = v435;
              *(_QWORD *)&buf[32] = v423 + 19;
              v438 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v437);
              v440 = &v438[16 * v434];
              v441 = v488.__r_.__value_.__l.__size_;
              *(_OWORD *)v440 = *(_OWORD *)&v488.__r_.__value_.__l.__data_;
              if (v441)
              {
                v442 = (unint64_t *)(v441 + 8);
                do
                  v443 = __ldxr(v442);
                while (__stxr(v443 + 1, v442));
              }
              v445 = (_QWORD *)v423[17];
              v444 = (_QWORD *)v423[18];
              if (v444 == v445)
              {
                v448 = vdupq_n_s64((unint64_t)v444);
                v446 = &v438[16 * v434];
              }
              else
              {
                v446 = &v438[16 * v434];
                do
                {
                  v447 = *((_OWORD *)v444 - 1);
                  v444 -= 2;
                  *((_OWORD *)v446 - 1) = v447;
                  v446 -= 16;
                  *v444 = 0;
                  v444[1] = 0;
                }
                while (v444 != v445);
                v448 = *(int64x2_t *)(v423 + 17);
              }
              v429 = v440 + 16;
              v423[17] = v446;
              v423[18] = v440 + 16;
              *(int64x2_t *)&buf[8] = v448;
              v449 = v423[19];
              v423[19] = &v438[16 * v439];
              *(_QWORD *)&buf[24] = v449;
              *(_QWORD *)buf = v448.i64[0];
              std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              *v424 = v488.__r_.__value_.__r.__words[0];
              v426 = v488.__r_.__value_.__l.__size_;
              v424[1] = v488.__r_.__value_.__l.__size_;
              if (v426)
              {
                v427 = (unint64_t *)(v426 + 8);
                do
                  v428 = __ldxr(v427);
                while (__stxr(v428 + 1, v427));
              }
              v429 = v424 + 2;
            }
            v423[18] = v429;
          }
          else
          {
            v430 = CA::ADMBuilder::Impl::log(v421);
            if (os_log_type_enabled(v430, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 72) + 16 * v304), "");
              v431 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v431 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v432 = v420;
              if (*(char *)(v420 + 23) < 0)
                v432 = *(_QWORD *)v420;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 409;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v431;
              *(_WORD *)&buf[28] = 2080;
              *(_QWORD *)&buf[30] = v432;
              _os_log_impl(&dword_18EE07000, v430, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format '%s' references unknown channel format '%s'", buf, 0x26u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          v450 = (std::__shared_weak_count *)v488.__r_.__value_.__l.__size_;
          if (v488.__r_.__value_.__l.__size_)
          {
            v451 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 8);
            do
              v452 = __ldaxr(v451);
            while (__stlxr(v452 - 1, v451));
            if (!v452)
            {
              ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
              std::__shared_weak_count::__release_weak(v450);
            }
          }
          if (!v422)
            goto LABEL_567;
          v420 += 24;
        }
        if (++v304 >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 80) - *(_QWORD *)(*(_QWORD *)v3 + 72)) >> 4))
        {
          v3 = *v486;
          v4 = (uint64_t *)**v486;
          goto LABEL_492;
        }
      }
    }
    else
    {
      v149 = 0;
      while (1)
      {
        v150 = *(_QWORD *)(*(_QWORD *)&v3[10] + 24 * v149);
        if (*(_QWORD *)(*(_QWORD *)&v3[10] + 24 * v149 + 8) != v150)
        {
          v151 = 0;
          while (1)
          {
            v152 = *(_QWORD *)(*(_QWORD *)v3 + 48);
            v153 = *(_QWORD *)(*(_QWORD *)v3 + 56);
            if (v152 == v153)
            {
LABEL_538:
              v468 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
              if (!os_log_type_enabled(v468, OS_LOG_TYPE_ERROR))
                goto LABEL_567;
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 48) + 16 * v149), "");
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v474 = &__p;
              else
                v474 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v475 = *(_QWORD *)(*(_QWORD *)&v3[10] + 24 * v149) + 24 * v151;
              if (*(char *)(v475 + 23) < 0)
                v475 = *(_QWORD *)v475;
              a2 = v487;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 287;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v474;
              *(_WORD *)&buf[28] = 2080;
              *(_QWORD *)&buf[30] = v475;
              v471 = "%25s:%-5d Object '%s' references unknown object '%s'";
              goto LABEL_535;
            }
            v154 = (unsigned __int8 *)(v150 + 24 * v151);
            v155 = *(_QWORD *)(*(_QWORD *)v3 + 48);
            while (1)
            {
              v156 = *(unsigned __int8 **)v155;
              this = std::operator==[abi:ne180100]<std::string,std::string>(v154, *(unsigned __int8 **)v155);
              if ((_DWORD)this)
                break;
              v155 += 16;
              if (v155 == v153)
                goto LABEL_538;
            }
            v157 = (uint64_t *)(v152 + 16 * v149);
            if ((_DWORD)this)
              break;
            v158 = (_QWORD *)*v157;
            v159 = *(unsigned __int8 ***)(*v157 + 176);
            v160 = *(_QWORD *)(*v157 + 184);
            if ((unint64_t)v159 >= v160)
            {
              v165 = v158[21];
              v166 = ((uint64_t)v159 - v165) >> 4;
              v167 = v166 + 1;
              if ((unint64_t)(v166 + 1) >> 60)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v168 = v160 - v165;
              if (v168 >> 3 > v167)
                v167 = v168 >> 3;
              if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF0)
                v169 = 0xFFFFFFFFFFFFFFFLL;
              else
                v169 = v167;
              *(_QWORD *)&buf[32] = *v157 + 184;
              v170 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v169);
              v172 = &v170[16 * v166];
              v173 = *(_OWORD *)v155;
              *(_OWORD *)v172 = *(_OWORD *)v155;
              if (*((_QWORD *)&v173 + 1))
              {
                v174 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
                do
                  v175 = __ldxr(v174);
                while (__stxr(v175 + 1, v174));
              }
              v177 = (_QWORD *)v158[21];
              v176 = (_QWORD *)v158[22];
              if (v176 == v177)
              {
                v180 = vdupq_n_s64((unint64_t)v176);
                v178 = &v170[16 * v166];
              }
              else
              {
                v178 = &v170[16 * v166];
                do
                {
                  v179 = *((_OWORD *)v176 - 1);
                  v176 -= 2;
                  *((_OWORD *)v178 - 1) = v179;
                  v178 -= 16;
                  *v176 = 0;
                  v176[1] = 0;
                }
                while (v176 != v177);
                v180 = *(int64x2_t *)(v158 + 21);
              }
              v164 = v172 + 16;
              v158[21] = v178;
              v158[22] = v172 + 16;
              *(int64x2_t *)&buf[8] = v180;
              v181 = v158[23];
              v158[23] = &v170[16 * v171];
              *(_QWORD *)&buf[24] = v181;
              *(_QWORD *)buf = v180.i64[0];
              this = std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              *v159 = v156;
              v161 = *(_QWORD *)(v155 + 8);
              v159[1] = (unsigned __int8 *)v161;
              if (v161)
              {
                v162 = (unint64_t *)(v161 + 8);
                do
                  v163 = __ldxr(v162);
                while (__stxr(v163 + 1, v162));
              }
              v164 = v159 + 2;
            }
            v158[22] = v164;
            ++v151;
            v150 = *(_QWORD *)(*(_QWORD *)&v3[10] + 24 * v149);
            if (v151 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)&v3[10] + 24 * v149 + 8) - v150) >> 3))
              goto LABEL_179;
          }
          v480 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
          if (!os_log_type_enabled(v480, OS_LOG_TYPE_ERROR))
            goto LABEL_567;
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 48) + 16 * v149), "");
          v481 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v482 = __p.__r_.__value_.__r.__words[0];
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v488, *(_QWORD *)v155, "");
          v483 = &__p;
          if (v481 < 0)
            v483 = (std::string *)v482;
          if ((v488.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v484 = &v488;
          else
            v484 = (std::string *)v488.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 276;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v483;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v484;
          _os_log_impl(&dword_18EE07000, v480, OS_LOG_TYPE_ERROR, "%25s:%-5d Object '%s' referencing object '%s' leads to a reference cycle", buf, 0x26u);
          a2 = v487;
          if (SHIBYTE(v488.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v488.__r_.__value_.__l.__data_);
          goto LABEL_536;
        }
LABEL_179:
        v182 = *(_QWORD *)(*(_QWORD *)&v3[19] + 24 * v149);
        if (*(_QWORD *)(*(_QWORD *)&v3[19] + 24 * v149 + 8) != v182)
        {
          v183 = 0;
          while (1)
          {
            v184 = v182 + 24 * v183;
            v185 = *(unsigned __int8 *)(v184 + 23);
            v186 = (char)v185;
            if ((v185 & 0x80u) != 0)
              v185 = *(_QWORD *)(v184 + 8);
            if (v185 != 12)
              break;
            v187 = v186 >= 0 ? (uint64_t *)v184 : *(uint64_t **)v184;
            v188 = *v187;
            v189 = *((_DWORD *)v187 + 2);
            if (v188 != 0x303030305F555441 || v189 != 808464432)
              break;
            v218 = (char *)operator new(0xE0uLL);
            *((_QWORD *)v218 + 1) = 0;
            v219 = (unint64_t *)(v218 + 8);
            *((_QWORD *)v218 + 2) = 0;
            *(_QWORD *)v218 = &off_1E2917910;
            *(_OWORD *)(v218 + 40) = 0u;
            *(_OWORD *)(v218 + 56) = 0u;
            *(_OWORD *)(v218 + 72) = 0u;
            *(_OWORD *)(v218 + 88) = 0u;
            *(_OWORD *)(v218 + 104) = 0u;
            *(_OWORD *)(v218 + 120) = 0u;
            *(_OWORD *)(v218 + 136) = 0u;
            *(_OWORD *)(v218 + 152) = 0u;
            *(_OWORD *)(v218 + 168) = 0u;
            *(_OWORD *)(v218 + 184) = 0u;
            *(_OWORD *)(v218 + 200) = 0u;
            *((_QWORD *)v218 + 27) = 0;
            *(_OWORD *)(v218 + 24) = 0u;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v218 + 24);
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v218;
            this = (unint64_t)std::string::basic_string[abi:ne180100]<0>((_QWORD *)v218 + 3, "ATU_00000000");
            v218[48] = 1;
            v220 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v3 + 48) + 16 * v149);
            v221 = (_QWORD *)v220[34];
            v222 = v220[35];
            if ((unint64_t)v221 >= v222)
            {
              v225 = v220[33];
              v226 = ((uint64_t)v221 - v225) >> 4;
              v227 = v226 + 1;
              if ((unint64_t)(v226 + 1) >> 60)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v228 = v222 - v225;
              if (v228 >> 3 > v227)
                v227 = v228 >> 3;
              if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFF0)
                v229 = 0xFFFFFFFFFFFFFFFLL;
              else
                v229 = v227;
              *(_QWORD *)&buf[32] = v220 + 35;
              v230 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v229);
              v232 = &v230[16 * v226];
              v233 = __p.__r_.__value_.__l.__size_;
              *(_OWORD *)v232 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              if (v233)
              {
                v234 = (unint64_t *)(v233 + 8);
                do
                  v235 = __ldxr(v234);
                while (__stxr(v235 + 1, v234));
              }
              v237 = (_QWORD *)v220[33];
              v236 = (_QWORD *)v220[34];
              if (v236 == v237)
              {
                v240 = vdupq_n_s64((unint64_t)v236);
                v238 = &v230[16 * v226];
              }
              else
              {
                v238 = &v230[16 * v226];
                do
                {
                  v239 = *((_OWORD *)v236 - 1);
                  v236 -= 2;
                  *((_OWORD *)v238 - 1) = v239;
                  v238 -= 16;
                  *v236 = 0;
                  v236[1] = 0;
                }
                while (v236 != v237);
                v240 = *(int64x2_t *)(v220 + 33);
              }
              v224 = v232 + 16;
              v220[33] = v238;
              v220[34] = v232 + 16;
              *(int64x2_t *)&buf[8] = v240;
              v242 = v220[35];
              v220[35] = &v230[16 * v231];
              *(_QWORD *)&buf[24] = v242;
              *(_QWORD *)buf = v240.i64[0];
              this = std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              *v221 = __p.__r_.__value_.__r.__words[0];
              v221[1] = v218;
              do
                v223 = __ldxr(v219);
              while (__stxr(v223 + 1, v219));
              v224 = v221 + 2;
            }
            v220[34] = v224;
            v243 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v244 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v245 = __ldaxr(v244);
              while (__stlxr(v245 - 1, v244));
              if (!v245)
              {
                ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                std::__shared_weak_count::__release_weak(v243);
              }
            }
LABEL_233:
            ++v183;
            v182 = *(_QWORD *)(*(_QWORD *)&v3[19] + 24 * v149);
            if (v183 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)&v3[19] + 24 * v149 + 8) - v182) >> 3))
              goto LABEL_242;
          }
          v191 = *v3;
          v193 = *(__int128 **)(*(_QWORD *)v3 + 264);
          v192 = *(__int128 **)(*(_QWORD *)v3 + 272);
          while (v193 != v192)
          {
            v194 = *(unsigned __int8 **)v193;
            this = std::operator==[abi:ne180100]<std::string,std::string>((unsigned __int8 *)v184, *(unsigned __int8 **)v193);
            if ((_DWORD)this)
            {
              v195 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)&v191 + 48) + 16 * v149);
              v196 = (unsigned __int8 **)v195[34];
              v197 = v195[35];
              if ((unint64_t)v196 >= v197)
              {
                v202 = v195[33];
                v203 = ((uint64_t)v196 - v202) >> 4;
                v204 = v203 + 1;
                if ((unint64_t)(v203 + 1) >> 60)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v205 = v197 - v202;
                if (v205 >> 3 > v204)
                  v204 = v205 >> 3;
                if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFF0)
                  v206 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v206 = v204;
                *(_QWORD *)&buf[32] = v195 + 35;
                v207 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v206);
                v209 = &v207[16 * v203];
                v210 = *v193;
                *(_OWORD *)v209 = *v193;
                if (*((_QWORD *)&v210 + 1))
                {
                  v211 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
                  do
                    v212 = __ldxr(v211);
                  while (__stxr(v212 + 1, v211));
                }
                v214 = (_QWORD *)v195[33];
                v213 = (_QWORD *)v195[34];
                if (v213 == v214)
                {
                  v217 = vdupq_n_s64((unint64_t)v213);
                  v215 = &v207[16 * v203];
                }
                else
                {
                  v215 = &v207[16 * v203];
                  do
                  {
                    v216 = *((_OWORD *)v213 - 1);
                    v213 -= 2;
                    *((_OWORD *)v215 - 1) = v216;
                    v215 -= 16;
                    *v213 = 0;
                    v213[1] = 0;
                  }
                  while (v213 != v214);
                  v217 = *(int64x2_t *)(v195 + 33);
                }
                v201 = v209 + 16;
                v195[33] = v215;
                v195[34] = v209 + 16;
                *(int64x2_t *)&buf[8] = v217;
                v241 = v195[35];
                v195[35] = &v207[16 * v208];
                *(_QWORD *)&buf[24] = v241;
                *(_QWORD *)buf = v217.i64[0];
                this = std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                *v196 = v194;
                v198 = *((_QWORD *)v193 + 1);
                v196[1] = (unsigned __int8 *)v198;
                if (v198)
                {
                  v199 = (unint64_t *)(v198 + 8);
                  do
                    v200 = __ldxr(v199);
                  while (__stxr(v200 + 1, v199));
                }
                v201 = v196 + 2;
              }
              v195[34] = v201;
              goto LABEL_233;
            }
            ++v193;
          }
          v468 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
          if (!os_log_type_enabled(v468, OS_LOG_TYPE_ERROR))
            goto LABEL_567;
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 48) + 16 * v149), "");
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v476 = &__p;
          else
            v476 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v477 = *(_QWORD *)(*(_QWORD *)&v3[19] + 24 * v149) + 24 * v183;
          if (*(char *)(v477 + 23) < 0)
            v477 = *(_QWORD *)v477;
          a2 = v487;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 308;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v476;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v477;
          v471 = "%25s:%-5d Object '%s' references unknown track UID '%s'";
          goto LABEL_535;
        }
LABEL_242:
        v246 = *(_QWORD *)(*(_QWORD *)&v3[16] + 24 * v149);
        if (*(_QWORD *)(*(_QWORD *)&v3[16] + 24 * v149 + 8) != v246)
          break;
LABEL_272:
        v271 = *(_QWORD *)(*(_QWORD *)&v3[13] + 24 * v149);
        if (*(_QWORD *)(*(_QWORD *)&v3[13] + 24 * v149 + 8) != v271)
        {
          v272 = 0;
          do
          {
            this = CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v488, v3, v271 + 24 * v272);
            v273 = v488.__r_.__value_.__r.__words[0];
            if (v488.__r_.__value_.__r.__words[0])
            {
              v274 = *(int64x2_t **)(*(_QWORD *)(*(_QWORD *)v3 + 48) + 16 * v149);
              v275 = (_QWORD *)v274[9].i64[1];
              v276 = v274[10].u64[0];
              if ((unint64_t)v275 >= v276)
              {
                v284 = v274[9].i64[0];
                v285 = ((uint64_t)v275 - v284) >> 4;
                v286 = v285 + 1;
                if ((unint64_t)(v285 + 1) >> 60)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v287 = v276 - v284;
                if (v287 >> 3 > v286)
                  v286 = v287 >> 3;
                if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFF0)
                  v288 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v288 = v286;
                *(_QWORD *)&buf[32] = v274 + 10;
                v289 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v288);
                v291 = &v289[16 * v285];
                v292 = v488.__r_.__value_.__l.__size_;
                *(_OWORD *)v291 = *(_OWORD *)&v488.__r_.__value_.__l.__data_;
                if (v292)
                {
                  v293 = (unint64_t *)(v292 + 8);
                  do
                    v294 = __ldxr(v293);
                  while (__stxr(v294 + 1, v293));
                }
                v296 = (_QWORD *)v274[9].i64[0];
                v295 = (_QWORD *)v274[9].i64[1];
                if (v295 == v296)
                {
                  v299 = vdupq_n_s64((unint64_t)v295);
                  v297 = &v289[16 * v285];
                }
                else
                {
                  v297 = &v289[16 * v285];
                  do
                  {
                    v298 = *((_OWORD *)v295 - 1);
                    v295 -= 2;
                    *((_OWORD *)v297 - 1) = v298;
                    v297 -= 16;
                    *v295 = 0;
                    v295[1] = 0;
                  }
                  while (v295 != v296);
                  v299 = v274[9];
                }
                v280 = v291 + 16;
                v274[9].i64[0] = (uint64_t)v297;
                v274[9].i64[1] = (uint64_t)(v291 + 16);
                *(int64x2_t *)&buf[8] = v299;
                v300 = v274[10].i64[0];
                v274[10].i64[0] = (uint64_t)&v289[16 * v290];
                *(_QWORD *)&buf[24] = v300;
                *(_QWORD *)buf = v299.i64[0];
                this = std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                *v275 = v488.__r_.__value_.__r.__words[0];
                v277 = v488.__r_.__value_.__l.__size_;
                v275[1] = v488.__r_.__value_.__l.__size_;
                if (v277)
                {
                  v278 = (unint64_t *)(v277 + 8);
                  do
                    v279 = __ldxr(v278);
                  while (__stxr(v279 + 1, v278));
                }
                v280 = v275 + 2;
              }
              v274[9].i64[1] = (uint64_t)v280;
            }
            else
            {
              v281 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
              this = os_log_type_enabled(v281, OS_LOG_TYPE_ERROR);
              if ((_DWORD)this)
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 48) + 16 * v149), "");
                v282 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v282 = (std::string *)__p.__r_.__value_.__r.__words[0];
                v283 = *(_QWORD *)(*(_QWORD *)&v3[13] + 24 * v149) + 24 * v272;
                if (*(char *)(v283 + 23) < 0)
                  v283 = *(_QWORD *)v283;
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 337;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = v282;
                *(_WORD *)&buf[28] = 2080;
                *(_QWORD *)&buf[30] = v283;
                _os_log_impl(&dword_18EE07000, v281, OS_LOG_TYPE_ERROR, "%25s:%-5d Object '%s' references unknown pack format '%s'", buf, 0x26u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            v301 = (std::__shared_weak_count *)v488.__r_.__value_.__l.__size_;
            if (v488.__r_.__value_.__l.__size_)
            {
              v302 = (unint64_t *)(v488.__r_.__value_.__l.__size_ + 8);
              do
                v303 = __ldaxr(v302);
              while (__stlxr(v303 - 1, v302));
              if (!v303)
              {
                ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                std::__shared_weak_count::__release_weak(v301);
              }
            }
            if (!v273)
              goto LABEL_567;
            ++v272;
            v271 = *(_QWORD *)(*(_QWORD *)&v3[13] + 24 * v149);
          }
          while (v272 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)&v3[13] + 24 * v149 + 8) - v271) >> 3));
        }
        if (++v149 >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 56) - *(_QWORD *)(*(_QWORD *)v3 + 48)) >> 4))
        {
          v3 = *v486;
          v4 = (uint64_t *)**v486;
          goto LABEL_312;
        }
      }
      v247 = 0;
      while (1)
      {
        v248 = *(__int128 **)(*(_QWORD *)v3 + 48);
        v249 = *(__int128 **)(*(_QWORD *)v3 + 56);
        if (v248 == v249)
          break;
        v250 = (unsigned __int8 *)(v246 + 24 * v247);
        v251 = *(__int128 **)(*(_QWORD *)v3 + 48);
        while (1)
        {
          this = std::operator==[abi:ne180100]<std::string,std::string>(v250, *(unsigned __int8 **)v251);
          if ((_DWORD)this)
            break;
          if (++v251 == v249)
            goto LABEL_552;
        }
        v252 = *(_QWORD **)&v248[v149];
        v253 = *v251;
        v254 = *((_QWORD *)v251 + 1);
        if (v254)
        {
          v255 = (unint64_t *)(v254 + 16);
          do
            v256 = __ldxr(v255);
          while (__stxr(v256 + 1, v255));
        }
        v258 = (_OWORD *)v252[31];
        v257 = v252[32];
        if ((unint64_t)v258 >= v257)
        {
          v260 = v252[30];
          v261 = ((uint64_t)v258 - v260) >> 4;
          if ((unint64_t)(v261 + 1) >> 60)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v485 = v253;
          v262 = v257 - v260;
          v263 = v262 >> 3;
          if (v262 >> 3 <= (unint64_t)(v261 + 1))
            v263 = v261 + 1;
          if ((unint64_t)v262 >= 0x7FFFFFFFFFFFFFF0)
            v264 = 0xFFFFFFFFFFFFFFFLL;
          else
            v264 = v263;
          if (v264 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          this = (unint64_t)operator new(16 * v264);
          v265 = (_OWORD *)(this + 16 * v261);
          v266 = (char *)(this + 16 * v264);
          *v265 = v485;
          v259 = v265 + 1;
          v267 = (_QWORD *)v252[30];
          v268 = (_QWORD *)v252[31];
          if (v268 == v267)
          {
            v252[30] = v265;
            v252[31] = v259;
            v252[32] = v266;
          }
          else
          {
            do
            {
              v269 = *((_OWORD *)v268 - 1);
              v268 -= 2;
              *--v265 = v269;
              *v268 = 0;
              v268[1] = 0;
            }
            while (v268 != v267);
            v270 = (_QWORD *)v252[30];
            v268 = (_QWORD *)v252[31];
            v252[30] = v265;
            v252[31] = v259;
            v252[32] = v266;
            if (v268 != v270)
            {
              do
              {
                this = *(v268 - 1);
                if (this)
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)this);
                v268 -= 2;
              }
              while (v268 != v270);
              v268 = v270;
            }
          }
          if (v268)
            operator delete(v268);
        }
        else
        {
          *v258 = v253;
          v259 = v258 + 1;
          v252[31] = v259;
        }
        v252[31] = v259;
        ++v247;
        v246 = *(_QWORD *)(*(_QWORD *)&v3[16] + 24 * v149);
        if (v247 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)&v3[16] + 24 * v149 + 8) - v246) >> 3))
          goto LABEL_272;
      }
LABEL_552:
      v468 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
      if (os_log_type_enabled(v468, OS_LOG_TYPE_ERROR))
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 48) + 16 * v149), "");
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v478 = &__p;
        else
          v478 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v479 = *(_QWORD *)(*(_QWORD *)&v3[16] + 24 * v149) + 24 * v247;
        if (*(char *)(v479 + 23) < 0)
          v479 = *(_QWORD *)v479;
        a2 = v487;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 325;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v478;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v479;
        v471 = "%25s:%-5d Object '%s' references unknown complementary object '%s'";
        goto LABEL_535;
      }
    }
LABEL_567:
    a2 = v487;
    goto LABEL_568;
  }
  v117 = 0;
  v118 = v3[7];
  while (*(_QWORD *)(*(_QWORD *)&v118 + 24 * v117 + 8) == *(_QWORD *)(*(_QWORD *)&v118 + 24 * v117))
  {
LABEL_146:
    if (++v117 >= (unint64_t)((v4[4] - v4[3]) >> 4))
    {
      v3 = *v486;
      v4 = (uint64_t *)**v486;
      goto LABEL_148;
    }
  }
  v119 = 0;
  while (1)
  {
    v120 = *v3;
    v122 = *(__int128 **)(*(_QWORD *)v3 + 48);
    v121 = *(__int128 **)(*(_QWORD *)v3 + 56);
    if (v122 == v121)
      break;
    v123 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v118 + 24 * v117) + 24 * v119);
    while (1)
    {
      v124 = *(unsigned __int8 **)v122;
      this = std::operator==[abi:ne180100]<std::string,std::string>(v123, *(unsigned __int8 **)v122);
      if ((_DWORD)this)
        break;
      if (++v122 == v121)
        goto LABEL_528;
    }
    v125 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)&v120 + 24) + 16 * v117);
    v126 = (unsigned __int8 **)v125[16];
    v127 = v125[17];
    if ((unint64_t)v126 >= v127)
    {
      v132 = v125[15];
      v133 = ((uint64_t)v126 - v132) >> 4;
      v134 = v133 + 1;
      if ((unint64_t)(v133 + 1) >> 60)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v135 = v127 - v132;
      if (v135 >> 3 > v134)
        v134 = v135 >> 3;
      if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF0)
        v136 = 0xFFFFFFFFFFFFFFFLL;
      else
        v136 = v134;
      *(_QWORD *)&buf[32] = v125 + 17;
      v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v136);
      v139 = &v137[16 * v133];
      v140 = *v122;
      *(_OWORD *)v139 = *v122;
      if (*((_QWORD *)&v140 + 1))
      {
        v141 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
        do
          v142 = __ldxr(v141);
        while (__stxr(v142 + 1, v141));
      }
      v144 = (_QWORD *)v125[15];
      v143 = (_QWORD *)v125[16];
      if (v143 == v144)
      {
        v147 = vdupq_n_s64((unint64_t)v143);
        v145 = &v137[16 * v133];
      }
      else
      {
        v145 = &v137[16 * v133];
        do
        {
          v146 = *((_OWORD *)v143 - 1);
          v143 -= 2;
          *((_OWORD *)v145 - 1) = v146;
          v145 -= 16;
          *v143 = 0;
          v143[1] = 0;
        }
        while (v143 != v144);
        v147 = *(int64x2_t *)(v125 + 15);
      }
      v131 = v139 + 16;
      v125[15] = v145;
      v125[16] = v139 + 16;
      *(int64x2_t *)&buf[8] = v147;
      v148 = v125[17];
      v125[17] = &v137[16 * v138];
      *(_QWORD *)&buf[24] = v148;
      *(_QWORD *)buf = v147.i64[0];
      this = std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v126 = v124;
      v128 = *((_QWORD *)v122 + 1);
      v126[1] = (unsigned __int8 *)v128;
      if (v128)
      {
        v129 = (unint64_t *)(v128 + 8);
        do
          v130 = __ldxr(v129);
        while (__stxr(v130 + 1, v129));
      }
      v131 = v126 + 2;
    }
    v125[16] = v131;
    ++v119;
    v118 = v3[7];
    if (v119 >= 0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(*(_QWORD *)(*(_QWORD *)&v118 + 24 * v117 + 8) - *(_QWORD *)(*(_QWORD *)&v118 + 24 * v117)) >> 3))
    {
      v4 = (uint64_t *)*v3;
      goto LABEL_146;
    }
  }
LABEL_528:
  v468 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
  if (!os_log_type_enabled(v468, OS_LOG_TYPE_ERROR))
    goto LABEL_567;
  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 16 * v117), "");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v472 = &__p;
  else
    v472 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v473 = *(_QWORD *)(*(_QWORD *)&v3[7] + 24 * v117) + 24 * v119;
  if (*(char *)(v473 + 23) < 0)
    v473 = *(_QWORD *)v473;
  a2 = v487;
  *(_DWORD *)buf = 136315906;
  *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = 257;
  *(_WORD *)&buf[18] = 2080;
  *(_QWORD *)&buf[20] = v472;
  *(_WORD *)&buf[28] = 2080;
  *(_QWORD *)&buf[30] = v473;
  v471 = "%25s:%-5d Content '%s' references unknown object '%s'";
LABEL_535:
  _os_log_impl(&dword_18EE07000, v468, OS_LOG_TYPE_ERROR, v471, buf, 0x26u);
LABEL_536:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_568:
  *a2 = 0;
}

void sub_18EED55D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CA::ADMBuilder::Impl::build_stream_formats(int8x8_t *this)
{
  uint64_t v2;
  uint64_t v3;
  CA::ADMBuilder::Impl *v4;
  uint64_t v5;
  NSObject *v6;
  std::string *p_p;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  CA::ADMBuilder::Impl *v12;
  uint64_t v13;
  NSObject *v14;
  std::string *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  CA::ADMBuilder::Impl *v22;
  uint64_t v23;
  int64x2_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char *v47;
  __int128 v48;
  int64x2_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::string __p;
  __int128 v56;
  _BYTE buf[40];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)this + 176) == *(_QWORD *)(*(_QWORD *)this + 168))
    return 1;
  v2 = 0;
  while (1)
  {
    v3 = *(_QWORD *)&this[49] + 32 * v2;
    if (*(_BYTE *)(v3 + 24))
    {
      CA::ADMBuilder::Impl::resolve_channel_format_reference(&v56, (uint64_t)this, *(_QWORD *)&this[49] + 32 * v2);
      v5 = v56;
      if ((_QWORD)v56)
      {
        std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) + 16 * v2) + 128), v56, *((uint64_t *)&v56 + 1));
      }
      else
      {
        v6 = CA::ADMBuilder::Impl::log(v4);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) + 16 * v2), "");
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (*(char *)(v3 + 23) < 0)
            v3 = *(_QWORD *)v3;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 445;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = p_p;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v3;
          _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Stream format '%s' references unknown channel format '%s'", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      if (*((_QWORD *)&v56 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (!v5)
        break;
    }
    v11 = *(_QWORD *)&this[52] + 32 * v2;
    if (*(_BYTE *)(v11 + 24))
    {
      v12 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v56, this, *(_QWORD *)&this[52] + 32 * v2);
      v13 = v56;
      if ((_QWORD)v56)
      {
        std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) + 16 * v2) + 144), v56, *((uint64_t *)&v56 + 1));
      }
      else
      {
        v14 = CA::ADMBuilder::Impl::log(v12);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) + 16 * v2), "");
          v15 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (*(char *)(v11 + 23) < 0)
            v11 = *(_QWORD *)v11;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 456;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v15;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v11;
          _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Stream format '%s' references unknown pack format '%s'", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      if (*((_QWORD *)&v56 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (!v13)
        break;
    }
    v19 = (uint64_t *)(*(_QWORD *)&this[55] + 24 * v2);
    v20 = *v19;
    v21 = v19[1];
    while (v20 != v21)
    {
      CA::ADMBuilder::Impl::resolve_track_format_reference(&v56, (uint64_t)this, v20);
      v23 = v56;
      if ((_QWORD)v56)
      {
        v24 = *(int64x2_t **)(*(_QWORD *)(*(_QWORD *)this + 168) + 16 * v2);
        v25 = (_QWORD *)v24[10].i64[1];
        v26 = v24[11].u64[0];
        if ((unint64_t)v25 >= v26)
        {
          v34 = v24[10].i64[0];
          v35 = ((uint64_t)v25 - v34) >> 4;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 60)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v37 = v26 - v34;
          if (v37 >> 3 > v36)
            v36 = v37 >> 3;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
            v38 = 0xFFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          *(_QWORD *)&buf[32] = v24 + 11;
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v38);
          v41 = &v39[16 * v35];
          v42 = *((_QWORD *)&v56 + 1);
          *(_OWORD *)v41 = v56;
          if (v42)
          {
            v43 = (unint64_t *)(v42 + 8);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          v46 = (_QWORD *)v24[10].i64[0];
          v45 = (_QWORD *)v24[10].i64[1];
          if (v45 == v46)
          {
            v49 = vdupq_n_s64((unint64_t)v45);
            v47 = &v39[16 * v35];
          }
          else
          {
            v47 = &v39[16 * v35];
            do
            {
              v48 = *((_OWORD *)v45 - 1);
              v45 -= 2;
              *((_OWORD *)v47 - 1) = v48;
              v47 -= 16;
              *v45 = 0;
              v45[1] = 0;
            }
            while (v45 != v46);
            v49 = v24[10];
          }
          v30 = v41 + 16;
          v24[10].i64[0] = (uint64_t)v47;
          v24[10].i64[1] = (uint64_t)(v41 + 16);
          *(int64x2_t *)&buf[8] = v49;
          v50 = v24[11].i64[0];
          v24[11].i64[0] = (uint64_t)&v39[16 * v40];
          *(_QWORD *)&buf[24] = v50;
          *(_QWORD *)buf = v49.i64[0];
          std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          *v25 = v56;
          v27 = *((_QWORD *)&v56 + 1);
          v25[1] = *((_QWORD *)&v56 + 1);
          if (v27)
          {
            v28 = (unint64_t *)(v27 + 8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          v30 = v25 + 2;
        }
        v24[10].i64[1] = (uint64_t)v30;
      }
      else
      {
        v31 = CA::ADMBuilder::Impl::log(v22);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) + 16 * v2), "");
          v32 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v33 = v20;
          if (*(char *)(v20 + 23) < 0)
            v33 = *(_QWORD *)v20;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ADMBuilder.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 466;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v32;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v33;
          _os_log_impl(&dword_18EE07000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Stream format '%s' references unknown track format '%s'", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      if (*((_QWORD *)&v56 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      if (!v23)
        return 0;
      v20 += 24;
    }
    if (++v2 >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 176) - *(_QWORD *)(*(_QWORD *)this + 168)) >> 4))
      return 1;
  }
  return 0;
}

void sub_18EED5C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CA::ADMBuilder::Impl::build_track_uids(int8x8_t *this)
{
  uint64_t v2;
  uint64_t v3;
  CA::ADMBuilder::Impl *v4;
  uint64_t v5;
  NSObject *v6;
  std::string *p_p;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  CA::ADMBuilder::Impl *v12;
  uint64_t v13;
  NSObject *v14;
  std::string *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  CA::ADMBuilder::Impl *v20;
  uint64_t v21;
  NSObject *v22;
  std::string *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string __p;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  std::string *v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)this + 272) == *(_QWORD *)(*(_QWORD *)this + 264))
    return 1;
  v2 = 0;
  while (1)
  {
    v3 = *(_QWORD *)&this[67] + 32 * v2;
    if (*(_BYTE *)(v3 + 24))
    {
      CA::ADMBuilder::Impl::resolve_track_format_reference(&v29, (uint64_t)this, *(_QWORD *)&this[67] + 32 * v2);
      v5 = v29;
      if (v29)
      {
        std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 264) + 16 * v2) + 152), v29, (uint64_t)v30);
      }
      else
      {
        v6 = CA::ADMBuilder::Impl::log(v4);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 264) + 16 * v2), "");
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (*(char *)(v3 + 23) < 0)
            v3 = *(_QWORD *)v3;
          *(_DWORD *)buf = 136315906;
          v32 = "ADMBuilder.cpp";
          v33 = 1024;
          v34 = 484;
          v35 = 2080;
          v36 = p_p;
          v37 = 2080;
          v38 = v3;
          _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Track UID '%s' references unknown track format '%s'", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v8 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (!v5)
        break;
    }
    v11 = *(_QWORD *)&this[61] + 32 * v2;
    if (*(_BYTE *)(v11 + 24))
    {
      CA::ADMBuilder::Impl::resolve_channel_format_reference(&v29, (uint64_t)this, *(_QWORD *)&this[61] + 32 * v2);
      v13 = v29;
      if (v29)
      {
        std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 264) + 16 * v2) + 168), v29, (uint64_t)v30);
      }
      else
      {
        v14 = CA::ADMBuilder::Impl::log(v12);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 264) + 16 * v2), "");
          v15 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (*(char *)(v11 + 23) < 0)
            v11 = *(_QWORD *)v11;
          *(_DWORD *)buf = 136315906;
          v32 = "ADMBuilder.cpp";
          v33 = 1024;
          v34 = 495;
          v35 = 2080;
          v36 = v15;
          v37 = 2080;
          v38 = v11;
          _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Track UID '%s' references unknown channel format '%s'", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v16 = v30;
      if (v30)
      {
        v17 = (unint64_t *)&v30->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (!v13)
        break;
    }
    v19 = *(_QWORD *)&this[64] + 32 * v2;
    if (*(_BYTE *)(v19 + 24))
    {
      v20 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v29, this, *(_QWORD *)&this[64] + 32 * v2);
      v21 = v29;
      if (v29)
      {
        std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 264) + 16 * v2) + 184), v29, (uint64_t)v30);
      }
      else
      {
        v22 = CA::ADMBuilder::Impl::log(v20);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 264) + 16 * v2), "");
          v23 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (*(char *)(v19 + 23) < 0)
            v19 = *(_QWORD *)v19;
          *(_DWORD *)buf = 136315906;
          v32 = "ADMBuilder.cpp";
          v33 = 1024;
          v34 = 506;
          v35 = 2080;
          v36 = v23;
          v37 = 2080;
          v38 = v19;
          _os_log_impl(&dword_18EE07000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Track UID '%s' references unknown pack format '%s'", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v24 = v30;
      if (v30)
      {
        v25 = (unint64_t *)&v30->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (!v21)
        break;
    }
    if (++v2 >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 272) - *(_QWORD *)(*(_QWORD *)this + 264)) >> 4))
      return 1;
  }
  return 0;
}

