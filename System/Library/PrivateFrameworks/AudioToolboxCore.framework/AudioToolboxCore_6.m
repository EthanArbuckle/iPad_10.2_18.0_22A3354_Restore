void sub_18F0AD3E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<std::vector<unsigned int>>::operator=[abi:ne180100]<std::vector<unsigned int>,void>(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void AudioFileAllowListFilter::AudioFileAllowListFilter(__CFDictionary const*)::$_2::__invoke(__CFString *a1, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;

  v3 = v4;
  std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(a2, *(char **)(a2 + 8), v4, v5, (v5 - v4) >> 2);
  if (v3)
    operator delete(v3);
}

void sub_18F0AD4FC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AudioFileAllowListFilter::AudioFileAllowListFilter(__CFDictionary const*)::$_3::__invoke(__CFString *a1, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;

  v3 = v4;
  std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(a2, *(char **)(a2 + 8), v4, v5, (v5 - v4) >> 2);
  if (v3)
    operator delete(v3);
}

void sub_18F0AD580(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

double `anonymous namespace'::GetTypesForStringInput(_anonymous_namespace_ *this, AudioFilePropertyID inPropertyID, const __CFString *a3)
{
  double result;
  std::vector<unsigned int> outPropertyData;
  UInt32 outDataSize;
  const __CFString *inSpecifier;

  inSpecifier = a3;
  outDataSize = 0;
  if (AudioFileGetGlobalInfoSize(inPropertyID, 8u, &inSpecifier, &outDataSize))
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    std::vector<unsigned int>::vector(&outPropertyData, (unint64_t)outDataSize >> 2);
    if (AudioFileGetGlobalInfo(inPropertyID, 8u, &inSpecifier, &outDataSize, outPropertyData.__begin_))
    {
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      if (outPropertyData.__begin_)
      {
        outPropertyData.__end_ = outPropertyData.__begin_;
        operator delete(outPropertyData.__begin_);
      }
    }
    else
    {
      result = *(double *)&outPropertyData.__begin_;
      *(std::vector<unsigned int> *)this = outPropertyData;
    }
  }
  return result;
}

void sub_18F0AD644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  char *v31;
  char *v32;
  int v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;

  if (a5 < 1)
    return;
  v6 = __src;
  v10 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (a5 > (uint64_t)(v9 - v10) >> 2)
  {
    v11 = *(char **)a1;
    v12 = a5 + ((uint64_t)(v10 - *(_QWORD *)a1) >> 2);
    if (v12 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = (__dst - v11) >> 2;
    v14 = v9 - (_QWORD)v11;
    if (v14 >> 1 > v12)
      v12 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v15);
    else
      v16 = 0;
    v26 = (_DWORD *)(v15 + 4 * v13);
    v27 = (char *)&v26[a5];
    v28 = 4 * a5;
    v29 = v26;
    do
    {
      v30 = *(_DWORD *)v6;
      v6 += 4;
      *v29++ = v30;
      v28 -= 4;
    }
    while (v28);
    v31 = *(char **)a1;
    if (*(char **)a1 != __dst)
    {
      v32 = __dst;
      do
      {
        v33 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *--v26 = v33;
      }
      while (v32 != v31);
    }
    v34 = v15 + 4 * v16;
    v35 = *(_BYTE **)(a1 + 8);
    v36 = v35 - __dst;
    if (v35 != __dst)
      memmove(v27, __dst, v35 - __dst);
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v26;
    *(_QWORD *)(a1 + 8) = &v27[v36];
    *(_QWORD *)(a1 + 16) = v34;
    if (v37)
      operator delete(v37);
    return;
  }
  v17 = v10 - (_QWORD)__dst;
  v18 = (uint64_t)(v10 - (_QWORD)__dst) >> 2;
  if (v18 >= a5)
  {
    v19 = &__src[4 * a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &__dst[4 * a5];
    v23 = &v21[-4 * a5];
    v24 = v21;
    if ((unint64_t)v23 < v10)
    {
      v24 = v21;
      do
      {
        v25 = *(_DWORD *)v23;
        v23 += 4;
        *(_DWORD *)v24 = v25;
        v24 += 4;
      }
      while ((unint64_t)v23 < v10);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v21[-4 * ((v21 - v22) >> 2)], __dst, v21 - v22);
    if (v19 != v6)
      memmove(__dst, v6, v19 - v6);
    return;
  }
  v19 = &__src[4 * v18];
  v20 = a4 - v19;
  if (a4 != v19)
    memmove(*(void **)(a1 + 8), &__src[4 * v18], a4 - v19);
  v21 = (char *)(v10 + v20);
  *(_QWORD *)(a1 + 8) = v10 + v20;
  if (v17 >= 1)
    goto LABEL_17;
}

void `anonymous namespace'::GetTypesForHFSCode(_anonymous_namespace_ *this, CFNumberRef number)
{
  char *v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  void *v12;
  OSStatus GlobalInfo;
  __int128 v14;
  UInt32 outDataSize;
  int valuePtr;

  valuePtr = 0;
  if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    v3 = 0;
    v4 = 0uLL;
LABEL_5:
    *(_OWORD *)this = v4;
    *((_QWORD *)this + 2) = v3;
    return;
  }
  outDataSize = 0;
  if (AudioFileGetGlobalInfoSize(0x74686673u, 4u, &valuePtr, &outDataSize))
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    return;
  }
  v5 = (unint64_t)outDataSize >> 2;
  if (outDataSize > 3)
  {
    v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((unint64_t)outDataSize >> 2);
    *(_QWORD *)&v7 = v8;
    v10 = 4 * v5;
    v11 = v8;
    v6 = (uint64_t)&v8[v5];
    do
    {
      *v11++ = 0;
      v10 -= 4;
    }
    while (v10);
    v3 = (char *)&v8[v9];
  }
  else
  {
    v3 = 0;
    v6 = 4 * v5;
    *(_QWORD *)&v7 = 0;
  }
  *((_QWORD *)&v7 + 1) = v6;
  v14 = v7;
  v12 = (void *)v7;
  GlobalInfo = AudioFileGetGlobalInfo(0x74686673u, 4u, &valuePtr, &outDataSize, (void *)v7);
  v4 = v14;
  if (!GlobalInfo)
    goto LABEL_5;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (v12)
    operator delete(v12);
}

void sub_18F0AD964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  _Unwind_Resume(exception_object);
}

void AudioFileAllowListFilter::AudioFileAllowListFilter(AudioFileAllowListFilter *this, CFDictionaryRef theDict)
{
  char *v4;
  const void *Value;
  const void *v6;
  CFTypeID v7;
  const __CFArray *v8;
  const void *v9;
  const void *v10;
  CFTypeID v11;
  const __CFArray *v12;
  const void *v13;
  const void *v14;
  CFTypeID v15;
  const __CFArray *v16;
  const void *v17;
  const void *v18;
  CFTypeID v19;
  const __CFArray *v20;
  const void *v21;
  const void *v22;
  CFTypeID v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char *context;
  __int32 *v28;
  uint64_t v29;
  CFRange v30;
  CFRange v31;
  CFRange v32;
  CFRange v33;

  v4 = (char *)this + 40;
  *((_BYTE *)this + 64) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 25) = 0u;
  Value = CFDictionaryGetValue(theDict, CFSTR("kAudioFileAllowList_HFSCodeKey"));
  v6 = Value;
  if (Value)
  {
    v7 = CFGetTypeID(Value);
    if (v7 == CFArrayGetTypeID())
    {
      v8 = (const __CFArray *)CFRetain(v6);
      *((_QWORD *)this + 3) = v8;
      context = 0;
      v28 = 0;
      v29 = 0;
      v30.length = CFArrayGetCount(v8);
      v30.location = 0;
      CFArrayApplyFunction(v8, v30, (CFArrayApplierFunction)AudioFileAllowListFilter::AudioFileAllowListFilter(__CFDictionary const*)::$_0::__invoke, &context);
      if (*((_BYTE *)this + 64))
      {
        if (v4 != (char *)&context)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4, context, (uint64_t)v28, ((char *)v28 - context) >> 2);
      }
      else
      {
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, context, (uint64_t)v28, ((char *)v28 - context) >> 2);
        *((_BYTE *)this + 64) = 1;
      }
      if (context)
      {
        v28 = (__int32 *)context;
        operator delete(context);
      }
    }
  }
  v9 = CFDictionaryGetValue(theDict, CFSTR("kAudioFileAllowList_UTIKey"));
  v10 = v9;
  if (v9)
  {
    v11 = CFGetTypeID(v9);
    if (v11 == CFArrayGetTypeID())
    {
      v12 = (const __CFArray *)CFRetain(v10);
      *(_QWORD *)this = v12;
      context = 0;
      v28 = 0;
      v29 = 0;
      v31.length = CFArrayGetCount(v12);
      v31.location = 0;
      CFArrayApplyFunction(v12, v31, (CFArrayApplierFunction)AudioFileAllowListFilter::AudioFileAllowListFilter(__CFDictionary const*)::$_1::__invoke, &context);
      if (*((_BYTE *)this + 64))
      {
      }
      else
      {
        __p = 0;
        v25 = 0;
        v26 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, context, (uint64_t)v28, ((char *)v28 - context) >> 2);
      }
      std::optional<std::vector<unsigned int>>::operator=[abi:ne180100]<std::vector<unsigned int>,void>((uint64_t)v4, (uint64_t)&__p);
      if (__p)
        operator delete(__p);
      if (context)
      {
        v28 = (__int32 *)context;
        operator delete(context);
      }
    }
  }
  v13 = CFDictionaryGetValue(theDict, CFSTR("kAudioFileAllowList_ExtensionKey"));
  v14 = v13;
  if (v13)
  {
    v15 = CFGetTypeID(v13);
    if (v15 == CFArrayGetTypeID())
    {
      v16 = (const __CFArray *)CFRetain(v14);
      *((_QWORD *)this + 2) = v16;
      context = 0;
      v28 = 0;
      v29 = 0;
      v32.length = CFArrayGetCount(v16);
      v32.location = 0;
      CFArrayApplyFunction(v16, v32, (CFArrayApplierFunction)AudioFileAllowListFilter::AudioFileAllowListFilter(__CFDictionary const*)::$_2::__invoke, &context);
      if (*((_BYTE *)this + 64))
      {
      }
      else
      {
        __p = 0;
        v25 = 0;
        v26 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, context, (uint64_t)v28, ((char *)v28 - context) >> 2);
      }
      std::optional<std::vector<unsigned int>>::operator=[abi:ne180100]<std::vector<unsigned int>,void>((uint64_t)v4, (uint64_t)&__p);
      if (__p)
        operator delete(__p);
      if (context)
      {
        v28 = (__int32 *)context;
        operator delete(context);
      }
    }
  }
  v17 = CFDictionaryGetValue(theDict, CFSTR("kAudioFileAllowList_MIMETypeKey"));
  v18 = v17;
  if (v17)
  {
    v19 = CFGetTypeID(v17);
    if (v19 == CFArrayGetTypeID())
    {
      v20 = (const __CFArray *)CFRetain(v18);
      *((_QWORD *)this + 1) = v20;
      context = 0;
      v28 = 0;
      v29 = 0;
      v33.length = CFArrayGetCount(v20);
      v33.location = 0;
      CFArrayApplyFunction(v20, v33, (CFArrayApplierFunction)AudioFileAllowListFilter::AudioFileAllowListFilter(__CFDictionary const*)::$_3::__invoke, &context);
      if (*((_BYTE *)this + 64))
      {
      }
      else
      {
        __p = 0;
        v25 = 0;
        v26 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, context, (uint64_t)v28, ((char *)v28 - context) >> 2);
      }
      std::optional<std::vector<unsigned int>>::operator=[abi:ne180100]<std::vector<unsigned int>,void>((uint64_t)v4, (uint64_t)&__p);
      if (__p)
        operator delete(__p);
      if (context)
      {
        v28 = (__int32 *)context;
        operator delete(context);
      }
    }
  }
  v21 = CFDictionaryGetValue(theDict, CFSTR("kAudioFileAllowList_DataFormatKey"));
  v22 = v21;
  if (v21)
  {
    v23 = CFGetTypeID(v21);
    if (v23 == CFArrayGetTypeID())
      *((_QWORD *)this + 4) = CFRetain(v22);
  }
}

void sub_18F0ADD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void **v14;
  void *v16;

  if (__p)
    operator delete(__p);
  if (*(_BYTE *)(v13 + 64))
  {
    v16 = *v14;
    if (*v14)
    {
      *(_QWORD *)(v13 + 48) = v16;
      operator delete(v16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioFileAllowListFilter::operator=(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  char *v9;
  void *v10;

  v4 = *(CFTypeRef *)(a2 + 8);
  if (v4)
    v4 = CFRetain(v4);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(CFTypeRef *)(a2 + 16);
  if (v5)
    v5 = CFRetain(v5);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    v6 = CFRetain(v6);
  *(_QWORD *)a1 = v6;
  v7 = *(CFTypeRef *)(a2 + 24);
  if (v7)
    v7 = CFRetain(v7);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(CFTypeRef *)(a2 + 32);
  if (v8)
    v8 = CFRetain(v8);
  *(_QWORD *)(a1 + 32) = v8;
  v9 = (char *)(a1 + 40);
  if (*(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64))
  {
    if (a1 != a2 && *(_BYTE *)(a1 + 64))
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v9, *(char **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  }
  else if (*(_BYTE *)(a1 + 64))
  {
    v10 = *(void **)v9;
    if (v10)
    {
      *(_QWORD *)(a1 + 48) = v10;
      operator delete(v10);
    }
    *(_BYTE *)(a1 + 64) = 0;
  }
  else
  {
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v9, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
    *(_BYTE *)(a1 + 64) = 1;
  }
  return a1;
}

void AudioFileAllowListFilter::~AudioFileAllowListFilter(AudioFileAllowListFilter *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  void *v6;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 1) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 2) = 0;
  }
  if (*(_QWORD *)this)
  {
    CFRelease(*(CFTypeRef *)this);
    *(_QWORD *)this = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 3);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 3) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 4);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 4) = 0;
  }
  if (*((_BYTE *)this + 64))
  {
    v6 = (void *)*((_QWORD *)this + 5);
    if (v6)
    {
      *((_QWORD *)this + 6) = v6;
      operator delete(v6);
    }
  }
}

void AudioFileAllowListFilter::GetAllowedTypes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  const __CFArray *v7;
  int v8;
  void *v9;
  void *__p;
  uint64_t v11;
  CFRange v12;

  if (*(_BYTE *)(a2 + 64) && *(_QWORD *)(a2 + 40) == *(_QWORD *)(a2 + 48))
    goto LABEL_25;
  v6 = *(_DWORD *)a3;
  if (*(int *)a3 > 1718446444)
  {
    if (v6 == 1718446445)
    {
      v7 = *(const __CFArray **)(a2 + 8);
      if (!v7)
        goto LABEL_28;
    }
    else
    {
      if (v6 != 1718973545)
        goto LABEL_25;
      v7 = *(const __CFArray **)a2;
      if (!*(_QWORD *)a2)
      {
LABEL_23:
        if (*(_BYTE *)(a2 + 64))
          goto LABEL_29;
        goto LABEL_33;
      }
    }
  }
  else if (v6 == 1717926004)
  {
    v7 = *(const __CFArray **)(a2 + 16);
    if (!v7)
      goto LABEL_26;
  }
  else
  {
    if (v6 != 1718118003)
      goto LABEL_25;
    v7 = *(const __CFArray **)(a2 + 24);
    if (!v7)
    {
LABEL_19:
      if (*(_BYTE *)(a2 + 64))
        goto LABEL_29;
      goto LABEL_33;
    }
  }
  v12.length = CFArrayGetCount(v7);
  v12.location = 0;
  if (!CFArrayContainsValue(v7, v12, *(const void **)(a3 + 8)))
    goto LABEL_25;
  v8 = *(_DWORD *)a3;
  if (*(int *)a3 <= 1718446444)
  {
    if (v8 != 1717926004)
    {
      if (v8 == 1718118003)
        goto LABEL_19;
LABEL_25:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      return;
    }
LABEL_26:
    if (*(_BYTE *)(a2 + 64))
      goto LABEL_29;
    goto LABEL_33;
  }
  if (v8 != 1718446445)
  {
    if (v8 != 1718973545)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_28:
  if (*(_BYTE *)(a2 + 64))
  {
LABEL_29:
    v9 = __p;
    goto LABEL_30;
  }
LABEL_33:
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v9 = __p;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, __p, v11, (v11 - (uint64_t)__p) >> 2);
LABEL_30:
  if (v9)
    operator delete(v9);
}

void sub_18F0AE1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::intersectionOfAllowedTypes(__int32 **a1, __int32 *a2, __int32 *a3, __int32 **a4)
{
  __int32 *v6;
  __int32 *v8;
  unint64_t v9;
  __int32 *v10;
  __int32 v11;
  __int32 *v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int32 *v20;
  __int32 v21;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *v6;
      v12 = a4[1];
      v13 = wmemchr(*a4, *v6, v12 - *a4);
      if (v13)
        v14 = v13;
      else
        v14 = v12;
      if (v14 != a4[1])
      {
        if ((unint64_t)v10 >= v9)
        {
          v16 = v10 - v8;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v9 - (_QWORD)v8) >> 1 > v17)
            v17 = (uint64_t)(v9 - (_QWORD)v8) >> 1;
          if (v9 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v18);
          else
            v19 = 0;
          v20 = (__int32 *)(v18 + 4 * v16);
          *v20 = v11;
          v15 = v20 + 1;
          while (v10 != v8)
          {
            v21 = *--v10;
            *--v20 = v21;
          }
          v9 = v18 + 4 * v19;
          *a1 = v20;
          a1[1] = v15;
          a1[2] = (__int32 *)v9;
          if (v8)
            operator delete(v8);
          v8 = v20;
        }
        else
        {
          *v10 = v11;
          v15 = v10 + 1;
        }
        a1[1] = v15;
        v10 = v15;
      }
      ++v6;
    }
    while (v6 != a3);
  }
}

void sub_18F0AE31C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AudioFileAllowListFilter::IsDataFormatAllowed(AudioFileAllowListFilter *this, int a2)
{
  CFNumberRef v3;
  const __CFArray *v4;
  _BOOL8 v5;
  int valuePtr;
  CFRange v8;

  valuePtr = a2;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v4 = (const __CFArray *)*((_QWORD *)this + 4);
  if (v4)
  {
    v8.length = CFArrayGetCount(v4);
    v8.location = 0;
    v5 = CFArrayContainsValue(v4, v8, v3) != 0;
  }
  else
  {
    v5 = 1;
  }
  CFRelease(v3);
  return v5;
}

void CAFAudioStream::~CAFAudioStream(CACFDictionary **this)
{
  CAFAudioStream::~CAFAudioStream(this);
  JUMPOUT(0x193FFE460);
}

{
  CACFDictionary *v2;
  CACFDictionary *v3;
  CACFDictionary *v4;
  CACFDictionary *v5;

  *this = (CACFDictionary *)&off_1E29042C0;
  CADeprecated::CAAutoDelete<CACFDictionary>::set(this + 56, 0);
  v2 = this[54];
  if (v2)
  {
    free(v2);
    this[54] = 0;
  }
  CADeprecated::CAAutoDelete<CACFDictionary>::set(this + 53, 0);
  v3 = this[52];
  if (v3)
  {
    free(v3);
    this[52] = 0;
  }
  v4 = this[51];
  if (v4)
  {
    free(v4);
    this[51] = 0;
  }
  v5 = this[49];
  if (v5)
  {
    free(v5);
    this[49] = 0;
  }
  AudioFileStreamObject::~AudioFileStreamObject((AudioFileStreamObject *)this);
}

uint64_t CAFAudioStream::GetPropertyInfo(CAFAudioStream *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  if (a2 != 1768842863 && a2 != 1819243876 && a2 != 1935893603)
    return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
  if (a3)
    *a3 = 8;
  if (a4)
    *a4 = 0;
  return 0;
}

uint64_t CAFAudioStream::GetProperty(CAFAudioStream *this, int a2, unsigned int *a3, _QWORD *__dst)
{
  CFTypeRef v6;
  CFTypeRef *v7;
  CFTypeRef v8;
  uint64_t result;
  CFTypeRef cf;
  __int16 v11;

  switch(a2)
  {
    case 1768842863:
      if (*a3 != 8)
        return 561211770;
      v7 = (CFTypeRef *)*((_QWORD *)this + 53);
      if (!v7)
        return 1836020325;
      break;
    case 1819243876:
      if (*a3 != 8)
        return 561211770;
      v7 = (CFTypeRef *)*((_QWORD *)this + 56);
      if (!v7)
        return 1836020325;
      break;
    case 1935893603:
      if (*a3 == 8)
      {
        if (*((_QWORD *)this + 56))
        {
          cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v11 = 257;
          AudioFileGetSoundCheckDictionaryFromLoudnessInfo(*((const CACFDictionary **)this + 56), (CACFDictionary *)&cf);
          if (cf)
          {
            CFRetain(cf);
            v6 = cf;
          }
          else
          {
            v6 = 0;
          }
          *__dst = v6;
          CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
          return 0;
        }
        return 1836020325;
      }
      return 561211770;
    default:
      return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
  }
  if (*v7)
  {
    CFRetain(*v7);
    v8 = *v7;
  }
  else
  {
    v8 = 0;
  }
  result = 0;
  *__dst = v8;
  return result;
}

void sub_18F0AE57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  int8x16_t *v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  __int32 v7;
  unsigned __int8 *v8;
  size_t v9;
  unsigned __int8 *v10;
  __int32 v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD, _QWORD, uint64_t, __int128 *);
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  void (*v27)(_QWORD, _QWORD, uint64_t, void **);
  uint64_t v28;
  void (*v29)(_QWORD, _QWORD, uint64_t, void **);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  __int32 v38;
  unsigned __int8 *v39;
  int v40;
  unsigned __int8 *v41;
  int v42;
  unsigned __int8 *v43;
  int v44;
  unsigned __int8 *v45;
  __int32 v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t, void **);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  void *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  int v76;
  int v78;
  int v79;
  int v80;
  CACFDictionary *v81;
  unsigned int v82;
  uint64_t v83;
  void (*v84)(_QWORD, _QWORD, uint64_t, CFDictionaryRef *);
  void *v85;
  int v86;
  int v87;
  int v88;
  size_t v89;
  const void *v90;
  CompressedPacketTable *v91;
  int v92;
  int8x8_t *v93;
  int8x8_t *v94;
  char *v95;
  unsigned int v96;
  int8x16_t v97;
  int8x8_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t *PacketTable;
  char **v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v111;
  char *v112;
  char v113;
  int v114;
  int v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  unint64_t v122;
  int8x16_t v123;
  int8x8_t v124;
  int v125;
  int v126;
  int v127;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  const UInt8 *v138;
  CFIndex v139;
  const __CFDictionary *v140;
  CFTypeID v141;
  CACFDictionary *v142;
  uint64_t v143;
  _DWORD *v144;
  _DWORD *v145;
  uint64_t v146;
  void (*v147)(_QWORD, _QWORD, uint64_t, void **);
  std::bad_alloc *exception;
  std::bad_alloc *v149;
  uint64_t v150;
  void (*v151)(_QWORD, _QWORD, uint64_t, void **);
  void (*v152)(_QWORD, _QWORD, uint64_t, void **);
  uint64_t v153;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;
  CFDictionaryRef theDict;
  char v161;
  void *__dst;
  char v163;
  char v164[16];
  uint64_t v165;
  __int128 v166;
  uint64_t v167;

  v3 = (int8x16_t *)(a1 + 348);
  v4 = *(_DWORD *)(a1 + 236);
  if (v4 > 301)
  {
    if (v4 > 349)
    {
      switch(v4)
      {
        case 350:
          v44 = *(_DWORD *)(a1 + 256);
          v45 = *(unsigned __int8 **)(a1 + 264);
          goto LABEL_177;
        case 373:
          v46 = *(_DWORD *)(a1 + 256);
          v47 = *(unsigned __int8 **)(a1 + 264);
          goto LABEL_172;
        case 383:
          v11 = *(_DWORD *)(a1 + 256);
          v12 = *(unsigned __int8 **)(a1 + 264);
          goto LABEL_93;
      }
    }
    else
    {
      switch(v4)
      {
        case 302:
          v21 = *(_DWORD *)(a1 + 256);
          v22 = *(unsigned __int8 **)(a1 + 264);
          goto LABEL_30;
        case 319:
          v38 = *(_DWORD *)(a1 + 256);
          v39 = *(unsigned __int8 **)(a1 + 264);
          goto LABEL_148;
        case 330:
          v7 = *(_DWORD *)(a1 + 256);
          v8 = *(unsigned __int8 **)(a1 + 264);
          goto LABEL_60;
      }
    }
    goto LABEL_57;
  }
  if (v4 > 244)
  {
    switch(v4)
    {
      case 245:
        v40 = *(_DWORD *)(a1 + 256);
        v41 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_70;
      case 261:
        v42 = *(_DWORD *)(a1 + 256);
        v43 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_153;
      case 279:
        LODWORD(v9) = *(_DWORD *)(a1 + 256);
        v10 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_106;
    }
    goto LABEL_57;
  }
  if (v4 == -1)
    return 0;
  if (v4)
  {
    if (v4 == 229)
    {
      v5 = *(_DWORD *)(a1 + 256);
      v6 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_25;
    }
LABEL_57:
    v13 = 0;
LABEL_215:
    v48 = -1;
    goto LABEL_216;
  }
  v14 = *(_QWORD *)(a1 + 8);
  LODWORD(v166) = 1;
  if (!*(_BYTE *)(v14 + 104))
  {
    *(_BYTE *)(v14 + 104) = 1;
    v15 = *(void (**)(_QWORD, _QWORD, uint64_t, __int128 *))(v14 + 24);
    if (v15)
      v15(*(_QWORD *)(v14 + 40), *(unsigned int *)(v14 + 8), 1717988724, &v166);
  }
  v5 = 8;
  *(_DWORD *)(a1 + 256) = 8;
  v6 = (unsigned __int8 *)(a1 + 336);
  *(_QWORD *)(a1 + 264) = a1 + 336;
LABEL_25:
  LODWORD(v166) = v5;
  StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&v166, v6);
  v16 = v166;
  v17 = *(_DWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 264) += v166;
  v18 = v17 - v16;
  *(_DWORD *)(a1 + 256) = v18;
  if (v18)
  {
    v13 = 0;
    v48 = 229;
LABEL_216:
    *(_DWORD *)(a1 + 236) = v48;
    return v13;
  }
  v19 = *(_DWORD *)(a1 + 336);
  *(_DWORD *)(a1 + 336) = bswap32(v19);
  v20 = *(unsigned __int16 *)(a1 + 340);
  *(_WORD *)(a1 + 340) = __rev16(v20);
  *(_WORD *)(a1 + 342) = bswap32(*(unsigned __int16 *)(a1 + 342)) >> 16;
  if (v19 != 1717985635 || v20 != 256)
  {
LABEL_214:
    v13 = 1685348671;
    *(_BYTE *)(a1 + 177) = 1;
    goto LABEL_215;
  }
  *(_QWORD *)(a1 + 296) += 8;
  while (1)
  {
    v40 = 12;
    *(_DWORD *)(a1 + 256) = 12;
    v41 = (unsigned __int8 *)(a1 + 344);
    *(_QWORD *)(a1 + 264) = a1 + 344;
LABEL_70:
    LODWORD(__dst) = v40;
    StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&__dst, v41);
    v63 = (int)__dst;
    v64 = *(_DWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 264) += __dst;
    v65 = v64 - v63;
    *(_DWORD *)(a1 + 256) = v65;
    if (v65)
    {
      v13 = 0;
      v48 = 245;
      goto LABEL_216;
    }
    v66 = bswap32(*(_DWORD *)(a1 + 344));
    *(_DWORD *)(a1 + 344) = v66;
    v9 = bswap64(v3->i64[0]);
    v3->i64[0] = v9;
    if ((uint64_t)v9 <= 0)
      goto LABEL_214;
    v67 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 296) = v67 + 12;
    if (v66 > 1802857320)
    {
      if (v66 <= 1819243875)
      {
        if (v66 == 1802857321)
        {
          if (HIDWORD(v9))
            goto LABEL_201;
          CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 120), v9, 0);
          v46 = v3->i32[0];
          *(_DWORD *)(a1 + 256) = v3->i32[0];
          v47 = *(unsigned __int8 **)(a1 + 120);
          *(_QWORD *)(a1 + 264) = v47;
LABEL_172:
          LODWORD(__dst) = v46;
          StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&__dst, v47);
          v131 = (int)__dst;
          v132 = *(_DWORD *)(a1 + 256);
          *(_QWORD *)(a1 + 264) += __dst;
          v133 = v132 - v131;
          *(_DWORD *)(a1 + 256) = v133;
          if (v133)
          {
            v13 = 0;
            v48 = 373;
            goto LABEL_216;
          }
          *(_DWORD *)(a1 + 128) = v3->i64[0];
          v134 = *(_QWORD *)(a1 + 8);
          LODWORD(__dst) = 1;
          *(_BYTE *)(v134 + 108) = 1;
          v59 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(v134 + 24);
          if (v59)
          {
            v60 = *(_QWORD *)(v134 + 40);
            v61 = *(unsigned int *)(v134 + 8);
            v62 = 1835493731;
            goto LABEL_183;
          }
        }
        else if (v66 == 1818522467)
        {
          if (HIDWORD(v9))
            goto LABEL_201;
          v68 = *(void **)(a1 + 408);
          if (v68)
          {
            free(v68);
            *(_QWORD *)(a1 + 408) = 0;
          }
          v69 = (unsigned __int8 *)malloc_type_malloc(v9, 0x7C51E058uLL);
          if (!v69)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v149 = std::bad_alloc::bad_alloc(exception);
          }
          v8 = v69;
          *(_QWORD *)(a1 + 408) = v69;
          v7 = v3->i32[0];
          *(_DWORD *)(a1 + 256) = v3->i32[0];
          *(_QWORD *)(a1 + 264) = v69;
LABEL_60:
          LODWORD(__dst) = v7;
          StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&__dst, v8);
          v49 = (int)__dst;
          v50 = *(_DWORD *)(a1 + 256);
          *(_QWORD *)(a1 + 264) += __dst;
          v51 = v50 - v49;
          *(_DWORD *)(a1 + 256) = v51;
          if (v51)
          {
            v13 = 0;
            v48 = 330;
            goto LABEL_216;
          }
          v52 = v3->u32[0] / 0x24uLL;
          *(_DWORD *)(a1 + 400) = v52;
          std::vector<AudioFormatListItem>::resize((char **)(a1 + 64), v52);
          if (*(_DWORD *)(a1 + 400))
          {
            v53 = 0;
            v54 = 0;
            v55 = 0;
            do
            {
              v56 = *(_QWORD *)(a1 + 408) + v54;
              *(_QWORD *)v56 = bswap64(*(_QWORD *)v56);
              *(int8x16_t *)(v56 + 8) = vrev32q_s8(*(int8x16_t *)(v56 + 8));
              *(int8x8_t *)(v56 + 24) = vrev32_s8(*(int8x8_t *)(v56 + 24));
              *(_DWORD *)(v56 + 32) = bswap32(*(_DWORD *)(v56 + 32));
              CAFtoAF_FormatListItem(v56, (AudioFormatListItem *)(*(_QWORD *)(a1 + 64) + v53));
              ++v55;
              v54 += 36;
              v53 += 48;
            }
            while (v55 < *(unsigned int *)(a1 + 400));
          }
          v57 = *(void **)(a1 + 408);
          if (v57)
          {
            free(v57);
            *(_QWORD *)(a1 + 408) = 0;
          }
          v58 = *(_QWORD *)(a1 + 8);
          LODWORD(__dst) = 0;
          *(_BYTE *)(v58 + 108) = 1;
          v59 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(v58 + 24);
          if (v59)
          {
            v60 = *(_QWORD *)(v58 + 40);
            v61 = *(unsigned int *)(v58 + 8);
            v62 = 1718383476;
LABEL_183:
            v59(v60, v61, v62, &__dst);
            goto LABEL_212;
          }
        }
        goto LABEL_212;
      }
      if (v66 == 1819243876)
      {
        if (HIDWORD(v9))
        {
LABEL_201:
          v13 = 2003334207;
          goto LABEL_215;
        }
        *(_DWORD *)(a1 + 440) = v9;
        CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 432), v9, 0);
        v44 = *(_DWORD *)(a1 + 440);
        *(_DWORD *)(a1 + 256) = v44;
        v45 = *(unsigned __int8 **)(a1 + 432);
        *(_QWORD *)(a1 + 264) = v45;
LABEL_177:
        LODWORD(__dst) = v44;
        StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&__dst, v45);
        v135 = (int)__dst;
        v136 = *(_DWORD *)(a1 + 256);
        *(_QWORD *)(a1 + 264) += __dst;
        v137 = v136 - v135;
        *(_DWORD *)(a1 + 256) = v137;
        if (v137)
        {
          v13 = 0;
          v48 = 350;
          goto LABEL_216;
        }
        v138 = *(const UInt8 **)(a1 + 432);
        v139 = *(unsigned int *)(a1 + 440);
        __dst = 0;
        v163 = 1;
        __dst = CFDataCreate(0, v138, v139);
        v140 = (const __CFDictionary *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDataRef)__dst, 0, 0, 0);
        if (!v140)
        {
          v13 = 1667787583;
LABEL_200:
          CACFData::~CACFData((CACFData *)&__dst);
          return v13;
        }
        theDict = v140;
        v161 = 1;
        v141 = CFGetTypeID(v140);
        if (v141 != CFDictionaryGetTypeID())
        {
          v13 = 1667787583;
          CACFObject<void const*>::~CACFObject((uint64_t)&theDict);
          goto LABEL_200;
        }
        v142 = (CACFDictionary *)operator new();
        *(_QWORD *)v142 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *((_WORD *)v142 + 4) = 257;
        CADeprecated::CAAutoDelete<CACFDictionary>::set((CACFDictionary **)(a1 + 448), v142);
        CACFDictionary::SetCFMutableDictionaryFromCopy(*(CACFDictionary **)(a1 + 448), theDict, 1);
        CACFObject<void const*>::~CACFObject((uint64_t)&theDict);
        CACFData::~CACFData((CACFData *)&__dst);
        v143 = *(_QWORD *)(a1 + 8);
        LODWORD(__dst) = 1;
        if (!*(_BYTE *)(v143 + 110))
        {
          *(_BYTE *)(v143 + 110) = 1;
          v59 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(v143 + 24);
          if (v59)
          {
            v60 = *(_QWORD *)(v143 + 40);
            v61 = *(unsigned int *)(v143 + 8);
            v62 = 1819243876;
            goto LABEL_183;
          }
        }
        goto LABEL_212;
      }
      if (v66 != 1885432692)
        goto LABEL_212;
      if (HIDWORD(v9))
        goto LABEL_201;
      if (*(_DWORD *)(a1 + 284) < v9)
      {
        *(_DWORD *)(a1 + 284) = v9;
        CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v9, 0);
        LODWORD(v9) = v3->i32[0];
      }
      *(_DWORD *)(a1 + 256) = v9;
      v10 = *(unsigned __int8 **)(a1 + 288);
      *(_QWORD *)(a1 + 264) = v10;
LABEL_106:
      LODWORD(__dst) = v9;
      StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&__dst, v10);
      v86 = (int)__dst;
      v87 = *(_DWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 264) += __dst;
      v88 = v87 - v86;
      *(_DWORD *)(a1 + 256) = v88;
      if (v88)
      {
        v13 = 0;
        v48 = 279;
        goto LABEL_216;
      }
      v13 = 1667787583;
      if (v3->i64[0] < 0x18)
        goto LABEL_215;
      v89 = v3->i64[0];
      v90 = *(const void **)(a1 + 288);
      v159 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
      v91 = *(CompressedPacketTable **)(a1 + 152);
      if (v91)
      {
        CompressedPacketTable::~CompressedPacketTable(v91);
        MEMORY[0x193FFE460]();
      }
      *(_QWORD *)(a1 + 152) = 0;
      AudioFileStreamObject::GetPacketTable((AudioFileStreamObject *)a1);
      v92 = *(_DWORD *)(a1 + 44);
      __dst = 0;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes(&__dst, v89, 0);
      v93 = (int8x8_t *)__dst;
      memcpy(__dst, v90, v89);
      v94 = v93 + 3;
      v95 = (char *)v93 + v89;
      v96 = *(_DWORD *)(a1 + 112);
      v97 = vrev64q_s8(*(int8x16_t *)v93->i8);
      *(int8x16_t *)v93->i8 = v97;
      v98 = vrev32_s8(v93[2]);
      v93[2] = v98;
      *(_QWORD *)(a1 + 160) = v97.i64[1];
      *(int8x8_t *)(a1 + 168) = v98;
      if (!*(_DWORD *)(a1 + 40) || !*(_DWORD *)(a1 + 44))
      {
        if (v97.i64[0] > (uint64_t)(v89 - 24))
        {
LABEL_205:
          free(v93);
LABEL_206:
          if ((_DWORD)v13)
            goto LABEL_215;
          v150 = *(_QWORD *)(a1 + 8);
          LODWORD(__dst) = 1;
          if (!*(_BYTE *)(v150 + 106))
          {
            *(_BYTE *)(v150 + 106) = 1;
            v151 = *(void (**)(_QWORD, _QWORD, uint64_t, void **))(v150 + 24);
            if (v151)
            {
              v151(*(_QWORD *)(v150 + 40), *(unsigned int *)(v150 + 8), 1886283375, &__dst);
              v150 = *(_QWORD *)(a1 + 8);
            }
          }
          LODWORD(__dst) = 1;
          v152 = *(void (**)(_QWORD, _QWORD, uint64_t, void **))(v150 + 24);
          if (v152)
            v152(*(_QWORD *)(v150 + 40), *(unsigned int *)(v150 + 8), 1886616165, &__dst);
          goto LABEL_212;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v97.i64[0]);
        if (v94 < (int8x8_t *)v95)
        {
          v99 = 0;
          v157 = 0;
          do
          {
            if (v99 >= *(_QWORD *)v93)
              break;
            v156 = v99;
            v100 = 0;
            v101 = 0;
            do
            {
              if (&v94->i8[v100] >= v95)
              {
LABEL_185:
                v144 = __cxa_allocate_exception(4uLL);
                *v144 = 1667787583;
                __cxa_throw(v144, MEMORY[0x1E0DE4EF0], 0);
              }
              if ((_DWORD)v100 == 5)
              {
LABEL_186:
                v145 = __cxa_allocate_exception(4uLL);
                *v145 = 1885563711;
                __cxa_throw(v145, MEMORY[0x1E0DE4EF0], 0);
              }
              v102 = v94->i8[v100];
              v103 = v102 & 0x7F | (v101 << 7);
              ++v100;
              v101 = v103;
            }
            while (v102 < 0);
            if (v103 > v96)
              v96 = v103;
            if (v92)
            {
              LODWORD(v104) = 0;
              v94 = (int8x8_t *)((char *)v94 + v100);
            }
            else
            {
              v111 = 0;
              LODWORD(v104) = 0;
              v112 = (char *)v94 + v100;
              do
              {
                if (&v112[v111] >= v95)
                  goto LABEL_185;
                if ((_DWORD)v111 == 5)
                  goto LABEL_186;
                v113 = v112[v111];
                LODWORD(v104) = v113 & 0x7F | ((_DWORD)v104 << 7);
                ++v111;
              }
              while (v113 < 0);
              v94 = (int8x8_t *)((char *)v94 + v100 + v111);
            }
            PacketTable = (uint64_t *)AudioFileStreamObject::GetPacketTable((AudioFileStreamObject *)a1);
            v106 = (char **)PacketTable;
            v107 = __PAIR64__(v103, v104);
            v108 = *(_DWORD *)(a1 + 44);
            *(_QWORD *)&v166 = v157;
            if (v108)
              v104 = v108;
            else
              v104 = v104;
            *((_QWORD *)&v166 + 1) = v107;
            v109 = PacketTable[3];
            if (v109)
            {
              v155 = PacketTable;
              CompressedPacketTable::operator[]((uint64_t)v164, PacketTable, v109 - 1);
              v106 = (char **)v155;
              v109 = v165;
            }
            v167 = v109 + v104;
            CompressedPacketTable::push_back(v106, &v166);
            if (v103 > *(_DWORD *)(a1 + 112))
              *(_DWORD *)(a1 + 112) = v103;
            v157 += v103;
            if (v157 >= v159 && v159 >= 1)
              break;
            v99 = v156 + 1;
          }
          while (v94 < (int8x8_t *)v95);
        }
      }
      v13 = 0;
      *(_DWORD *)(a1 + 112) = v96;
      if (!v93)
        goto LABEL_206;
      goto LABEL_205;
    }
    if (v66 > 1684370274)
    {
      if (v66 == 1684370275)
      {
        v42 = 32;
        *(_DWORD *)(a1 + 256) = 32;
        v43 = (unsigned __int8 *)(a1 + 356);
        *(_QWORD *)(a1 + 264) = a1 + 356;
LABEL_153:
        LODWORD(__dst) = v42;
        StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&__dst, v43);
        v119 = (int)__dst;
        v120 = *(_DWORD *)(a1 + 256);
        *(_QWORD *)(a1 + 264) += __dst;
        v121 = v120 - v119;
        *(_DWORD *)(a1 + 256) = v121;
        if (v121)
        {
          v13 = 0;
          v48 = 261;
          goto LABEL_216;
        }
        v122 = bswap64(v3->u64[1]);
        v3->i64[1] = v122;
        v123 = vrev32q_s8(v3[1]);
        v3[1] = v123;
        v124 = vrev32_s8(*(int8x8_t *)v3[2].i8);
        *(int8x8_t *)v3[2].i8 = v124;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_QWORD *)(a1 + 24) = v122;
        *(_DWORD *)(a1 + 32) = v123.i32[0];
        v125 = v123.i32[1];
        *(_QWORD *)(a1 + 40) = vextq_s8(v123, v123, 8uLL).u64[0];
        *(int8x8_t *)(a1 + 52) = v124;
        if (v123.i32[3] == 1)
          *(_DWORD *)(a1 + 48) = v123.i32[2];
        if (v123.i32[0] == 1819304813)
        {
          if ((v123.i8[4] & 1) != 0)
            v126 = 1;
          else
            v126 = 4;
          v127 = (v126 | v123.i8[4] & 2) ^ 2;
          if ((v124.i8[4] & 7) == 0 && ((unsigned __int32)v124.i32[1] >> 3) * v124.i32[0] == v123.i32[2])
            v125 = v127 | 8;
          else
            v125 = v127 | 0x10;
        }
        *(_DWORD *)(a1 + 36) = v125;
        if (v123.i32[2])
        {
          *(_DWORD *)(a1 + 112) = v123.i32[2];
          v129 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v129 / *(unsigned int *)(a1 + 40));
        }
        v130 = *(_QWORD *)(a1 + 8);
        LODWORD(__dst) = 1;
        if (!*(_BYTE *)(v130 + 105))
        {
          *(_BYTE *)(v130 + 105) = 1;
          v59 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(v130 + 24);
          if (v59)
          {
            v60 = *(_QWORD *)(v130 + 40);
            v61 = *(unsigned int *)(v130 + 8);
            v62 = 1684434292;
            goto LABEL_183;
          }
        }
      }
      else if (v66 == 1768842863)
      {
        v70 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
        v71 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
        v72 = v71 - v70;
        if (v71 != v70)
        {
          v73 = 0;
          v74 = v72 >> 2;
          v75 = 1;
          do
          {
            v76 = *(_DWORD *)(v70 + 4 * v73);
            v73 = v75++;
          }
          while (v76 != 1935832164 && v74 > v73);
          if (v76 == 1935832164)
          {
            if ((uint64_t)v9 >= 0x100000000)
              goto LABEL_201;
            CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 416), v9, 0);
            v11 = v3->i32[0];
            *(_DWORD *)(a1 + 256) = v3->i32[0];
            v12 = *(unsigned __int8 **)(a1 + 416);
            *(_QWORD *)(a1 + 264) = v12;
LABEL_93:
            LODWORD(__dst) = v11;
            StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&__dst, v12);
            v78 = (int)__dst;
            v79 = *(_DWORD *)(a1 + 256);
            *(_QWORD *)(a1 + 264) += __dst;
            v80 = v79 - v78;
            *(_DWORD *)(a1 + 256) = v80;
            if (v80)
            {
              v13 = 0;
              v48 = 383;
              goto LABEL_216;
            }
            v81 = (CACFDictionary *)operator new();
            *(_QWORD *)v81 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            *((_WORD *)v81 + 4) = 257;
            CADeprecated::CAAutoDelete<CACFDictionary>::set((CACFDictionary **)(a1 + 424), v81);
            parseInfoStringsChunk(*(unsigned __int8 **)(a1 + 416), v3->i64[0], *(CACFDictionary **)(a1 + 424));
            __dst = 0;
            if (CACFDictionary::GetString(*(CACFDictionary **)(a1 + 424), CFSTR("source bit depth"), (const __CFString **)&__dst))
            {
              v82 = BitDepthFromCFString((const __CFString *)__dst);
              *(_DWORD *)(a1 + 328) = v82;
              if (v82)
              {
                v83 = *(_QWORD *)(a1 + 8);
                LODWORD(theDict) = 1;
                v84 = *(void (**)(_QWORD, _QWORD, uint64_t, CFDictionaryRef *))(v83 + 24);
                if (v84)
                  v84(*(_QWORD *)(v83 + 40), *(unsigned int *)(v83 + 8), 1935832164, &theDict);
              }
            }
            v85 = *(void **)(a1 + 416);
            if (v85)
            {
              free(v85);
              *(_QWORD *)(a1 + 416) = 0;
            }
          }
        }
      }
      goto LABEL_212;
    }
    if (v66 != 1667785070)
      break;
    if (HIDWORD(v9))
      goto LABEL_201;
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 136), v9, 0);
    v38 = v3->i32[0];
    *(_DWORD *)(a1 + 256) = v3->i32[0];
    v39 = *(unsigned __int8 **)(a1 + 136);
    *(_QWORD *)(a1 + 264) = v39;
LABEL_148:
    LODWORD(__dst) = v38;
    StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&__dst, v39);
    v114 = (int)__dst;
    v115 = *(_DWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 264) += __dst;
    v116 = v115 - v114;
    *(_DWORD *)(a1 + 256) = v116;
    if (v116)
    {
      v13 = 0;
      v48 = 319;
      goto LABEL_216;
    }
    v117 = v3->i64[0];
    *(_DWORD *)(a1 + 144) = v3->i64[0];
    AudioChannelLayout_BtoN(*(AudioChannelLayout **)(a1 + 136), v117);
    v118 = *(_QWORD *)(a1 + 8);
    LODWORD(__dst) = 1;
    if (!*(_BYTE *)(v118 + 109))
    {
      *(_BYTE *)(v118 + 109) = 1;
      v59 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(v118 + 24);
      if (v59)
      {
        v60 = *(_QWORD *)(v118 + 40);
        v61 = *(unsigned int *)(v118 + 8);
        v62 = 1668112752;
        goto LABEL_183;
      }
    }
LABEL_212:
    v153 = *(_QWORD *)(a1 + 296) + v3->i64[0];
    *(_QWORD *)(a1 + 296) = v153;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) = v153;
  }
  if (v66 != 1684108385)
    goto LABEL_212;
  *(_QWORD *)(a1 + 104) = v67 + 16;
  if (v9 < 5)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, -1);
  }
  else
  {
    (*(void (**)(uint64_t, size_t))(*(_QWORD *)a1 + 96))(a1, v9 - 4);
    v146 = *(_QWORD *)(a1 + 8);
    LODWORD(__dst) = 1;
    v147 = *(void (**)(_QWORD, _QWORD, uint64_t, void **))(v146 + 24);
    if (v147)
      v147(*(_QWORD *)(v146 + 40), *(unsigned int *)(v146 + 8), 1650683508, &__dst);
  }
  v21 = 4;
  *(_DWORD *)(a1 + 256) = 4;
  v22 = (unsigned __int8 *)(a1 + 332);
  *(_QWORD *)(a1 + 264) = a1 + 332;
LABEL_30:
  LODWORD(__dst) = v21;
  StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)&__dst, v22);
  v23 = (int)__dst;
  v24 = *(_DWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 264) += __dst;
  v25 = v24 - v23;
  *(_DWORD *)(a1 + 256) = v25;
  if (v25)
  {
    v13 = 0;
    v48 = 302;
    goto LABEL_216;
  }
  *(_DWORD *)(a1 + 332) = bswap32(*(_DWORD *)(a1 + 332));
  v26 = *(_QWORD *)(a1 + 8);
  LODWORD(__dst) = 1;
  v27 = *(void (**)(_QWORD, _QWORD, uint64_t, void **))(v26 + 24);
  if (v27)
  {
    v27(*(_QWORD *)(v26 + 40), *(unsigned int *)(v26 + 8), 1685022310, &__dst);
    v26 = *(_QWORD *)(a1 + 8);
  }
  v28 = a2;
  if (*(_DWORD *)(a1 + 40) || *(_BYTE *)(v26 + 106))
  {
    LODWORD(__dst) = 1;
    if (!*(_DWORD *)(v26 + 112))
    {
      *(_DWORD *)(v26 + 112) = 1;
      v29 = *(void (**)(_QWORD, _QWORD, uint64_t, void **))(v26 + 24);
      if (v29)
      {
        v29(*(_QWORD *)(v26 + 40), *(unsigned int *)(v26 + 8), 1919247481, &__dst);
        v28 = a2;
        v26 = *(_QWORD *)(a1 + 8);
      }
    }
    v30 = 0;
    *(_QWORD *)v28 = a1;
    *(_OWORD *)(v28 + 8) = xmmword_18F116F70;
    v31 = *(_QWORD *)(v26 + 88);
    v32 = *(_QWORD *)(v26 + 96);
    v33 = v31 + *(unsigned int *)(v26 + 80);
    v34 = v32 < v31 || v33 <= v32;
    v35 = v34;
    v36 = v33 - v32;
    if (!v34 && v36)
      v30 = *(_QWORD *)(v26 + 72) + (v32 - v31);
    v13 = 0;
    *(_QWORD *)(v28 + 32) = v30;
    if (v35)
      v37 = 0;
    else
      v37 = v36;
    *(_DWORD *)(v28 + 24) = v37;
  }
  else
  {
    *(_DWORD *)(a1 + 236) = -1;
    return 1869640813;
  }
  return v13;
}

void sub_18F0AF648(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (a17)
    free(a17);
  JUMPOUT(0x18F0AF554);
}

uint64_t CAFAudioStream::HandleDiscontinuity(CAFAudioStream *this)
{
  return 0;
}

uint64_t CAFAudioStream::GetFormatListInfo(CAFAudioStream *this, unsigned int *a2, unsigned int *a3)
{
  return 4294967292;
}

uint64_t CAFAudioStream::GetFormatList(CAFAudioStream *this, unsigned int *a2, AudioFormatListItem *a3)
{
  return 4294967292;
}

CACFDictionary *CADeprecated::CAAutoDelete<CACFDictionary>::set(CACFDictionary **a1, CACFDictionary *a2)
{
  CACFDictionary *result;

  result = *a1;
  if (result != a2)
  {
    if (result)
    {
      CACFDictionary::~CACFDictionary(result);
      result = (CACFDictionary *)MEMORY[0x193FFE460]();
    }
    *a1 = a2;
  }
  return result;
}

uint64_t GetAllFormatIDs(UInt32 *outPropertyDataSize, void *outPropertyData)
{
  if (outPropertyData)
    return AudioFormatGetProperty(0x61636966u, 0, 0, outPropertyDataSize, outPropertyData);
  else
    return AudioFormatGetPropertyInfo(0x61636966u, 0, 0, outPropertyDataSize);
}

void AppendCommentStringToDictionary(CACFDictionary *a1, CFStringRef theString)
{
  const __CFAllocator *v4;
  __CFString *MutableCopy;
  __CFString *v6;
  const __CFString *Copy;
  const __CFString *v8;
  CFStringRef theStringa;

  if (CFStringGetLength(theString))
  {
    if (CACFDictionary::HasKey(a1, CFSTR("comments")))
    {
      theStringa = 0;
      CACFDictionary::GetString(a1, CFSTR("comments"), &theStringa);
      if (theStringa)
      {
        v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theStringa);
        if (MutableCopy)
        {
          v6 = MutableCopy;
          CFStringAppend(MutableCopy, CFSTR("\n\n"));
          CFStringAppend(v6, theString);
          Copy = CFStringCreateCopy(v4, v6);
          if (Copy)
          {
            v8 = Copy;
            if (CFStringGetLength(Copy))
              CACFDictionary::AddString(a1, CFSTR("comments"), v8);
            CFRelease(v8);
          }
          CFRelease(v6);
        }
      }
    }
    else
    {
      CACFDictionary::AddString(a1, CFSTR("comments"), theString);
    }
  }
}

uint64_t FillOutAudioDescription(AudioStreamBasicDescription *a1, UInt32 a2, void *a3, int a4)
{
  signed int mFormatID;
  uint64_t result;
  UInt32 v7;
  UInt32 v8;
  int v9;
  UInt32 v10;
  AudioFormatFlags mBitsPerChannel;
  UInt32 v12;
  UInt32 v13;
  UInt32 v14;
  UInt32 v15;
  UInt32 v16;
  UInt32 v17;
  uint64_t v18;
  UInt32 v19;
  UInt32 v20;
  UInt32 ioPropertyDataSize;
  Float64 outPropertyData;
  signed int v23;
  AudioFormatFlags v24;
  _BYTE v25[12];
  UInt32 mChannelsPerFrame;
  uint64_t v27;

  a1->mFormatFlags = 0;
  mFormatID = a1->mFormatID;
  if (mFormatID > 1768775987)
  {
    if (mFormatID <= 1918990111)
    {
      if (mFormatID <= 1768829745)
      {
        if (mFormatID == 1768775988)
        {
          result = 0;
          a1->mBitsPerChannel = 0;
          *(_QWORD *)&a1->mFramesPerPacket = 64;
          a1->mBytesPerPacket = 34 * a1->mChannelsPerFrame;
          return result;
        }
        if (mFormatID == 1768829492)
        {
          result = 0;
          v7 = 3 * a1->mChannelsPerFrame;
          a1->mFramesPerPacket = 1;
          a1->mBytesPerFrame = v7;
          a1->mBytesPerPacket = v7;
          v8 = 24;
LABEL_34:
          a1->mBitsPerChannel = v8;
          return result;
        }
        goto LABEL_40;
      }
      if (mFormatID != 1768829746)
      {
        if (mFormatID == 1819304813)
          goto LABEL_21;
LABEL_40:
        outPropertyData = a1->mSampleRate;
        mChannelsPerFrame = a1->mChannelsPerFrame;
        v23 = mFormatID;
        v24 = 0;
        *(_DWORD *)v25 = a1->mBytesPerPacket;
        *(_QWORD *)&v25[4] = 0;
        v27 = 0;
        ioPropertyDataSize = 40;
        result = AudioFormatGetProperty(0x666D7469u, a2, a3, &ioPropertyDataSize, &outPropertyData);
        v18 = 0;
        v19 = 0;
        v20 = 0;
        if (!(_DWORD)result)
        {
          a1->mFormatFlags = v24;
          v18 = *(_QWORD *)v25;
          v19 = *(_DWORD *)&v25[8];
          v20 = v27;
          a1->mReserved = HIDWORD(v27);
        }
        *(_QWORD *)&a1->mBytesPerPacket = v18;
        a1->mBytesPerFrame = v19;
        a1->mBitsPerChannel = v20;
        return result;
      }
LABEL_26:
      result = 0;
      v14 = 4 * a1->mChannelsPerFrame;
      a1->mFramesPerPacket = 1;
      a1->mBytesPerFrame = v14;
      a1->mBytesPerPacket = v14;
      v8 = 32;
      goto LABEL_34;
    }
    if (mFormatID <= 1953984370)
    {
      if (mFormatID == 1918990112)
      {
        result = 0;
        v17 = a1->mChannelsPerFrame;
        a1->mFramesPerPacket = 1;
        a1->mBytesPerFrame = v17;
        a1->mBytesPerPacket = v17;
        v8 = 8;
        goto LABEL_34;
      }
      if (mFormatID != 1936684916)
        goto LABEL_40;
LABEL_31:
      result = 0;
      v16 = 2 * a1->mChannelsPerFrame;
      a1->mFramesPerPacket = 1;
      a1->mBytesPerFrame = v16;
      a1->mBytesPerPacket = v16;
      v8 = 16;
      goto LABEL_34;
    }
    if (mFormatID == 1953984371)
      goto LABEL_31;
    v9 = 1970037111;
    goto LABEL_29;
  }
  if (mFormatID <= 1313820228)
  {
    switch(mFormatID)
    {
      case 842231401:
        goto LABEL_26;
      case 1296122675:
        result = 0;
        a1->mBitsPerChannel = 0;
        v10 = 2 * a1->mChannelsPerFrame;
        break;
      case 1296122678:
        result = 0;
        a1->mBitsPerChannel = 0;
        v10 = a1->mChannelsPerFrame;
        break;
      default:
        goto LABEL_40;
    }
    a1->mBytesPerFrame = v10;
    v15 = 6;
LABEL_37:
    a1->mBytesPerPacket = v10;
    a1->mFramesPerPacket = v15;
    return result;
  }
  if (mFormatID > 1718367025)
  {
    if (mFormatID != 1718367026)
    {
      if (mFormatID == 1718367796)
      {
        result = 0;
        v13 = 8 * a1->mChannelsPerFrame;
        a1->mFramesPerPacket = 1;
        a1->mBytesPerFrame = v13;
        a1->mBytesPerPacket = v13;
        v8 = 64;
        goto LABEL_34;
      }
      goto LABEL_40;
    }
    goto LABEL_26;
  }
  if (mFormatID != 1313820229)
  {
    v9 = 1634492791;
LABEL_29:
    if (mFormatID != v9)
      goto LABEL_40;
    result = 0;
    a1->mBitsPerChannel = 8;
    v10 = a1->mChannelsPerFrame;
    a1->mBytesPerFrame = v10;
    v15 = 1;
    goto LABEL_37;
  }
LABEL_21:
  mBitsPerChannel = a1->mBitsPerChannel;
  v12 = ((mBitsPerChannel + 7) >> 3) * a1->mChannelsPerFrame;
  a1->mFramesPerPacket = 1;
  a1->mBytesPerFrame = v12;
  a1->mBytesPerPacket = v12;
  if (mBitsPerChannel == 8)
  {
    result = 0;
  }
  else if ((mBitsPerChannel & 7) != 0)
  {
    result = 0;
    mBitsPerChannel = 20;
  }
  else
  {
    result = 0;
    if (a4)
      mBitsPerChannel = 9;
    else
      mBitsPerChannel = 12;
  }
  a1->mFormatFlags = mBitsPerChannel;
  return result;
}

uint64_t SyncSampleTable::IndexOfEntryWithClosestSampleNumberLessThanOrEqualTo(SyncSampleTable *this, SyncSampleTable *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2 - this;
  if (a2 == this)
    return -1;
  v4 = 0;
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v6 = v3 >> 3;
    v7 = v6;
    do
    {
      v8 = (v7 + v5) >> 1;
      if (v8 >= v6)
        break;
      if (*((_QWORD *)this + v8) > a3)
      {
        v7 = v8 - 1;
      }
      else
      {
        v5 = v8 + 1;
        v4 = v8;
      }
    }
    while (v7 >= v5);
  }
  if (*((_QWORD *)this + v4) > a3)
    return -1;
  return v4;
}

uint64_t SampleToRollDistanceTable::IndexOfEntryWithClosestSampleNumberLessThanOrEqualTo(SampleToRollDistanceTable *this, SampleToRollDistanceTable *a2, int64_t a3)
{
  uint64_t v3;
  SampleToRollDistanceTable *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  SampleToRollDistanceTable *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;

  if (this == a2)
    return -1;
  v3 = 0;
  v4 = this;
  do
  {
    v3 += *((_QWORD *)v4 + 1);
    v4 = (SampleToRollDistanceTable *)((char *)v4 + 24);
  }
  while (v4 != a2);
  if (v3 < 1)
    return -1;
  v5 = 0;
  v6 = 0;
  v7 = v3;
  do
  {
    v8 = (v7 + v6) >> 1;
    if (v8 >= v3)
      break;
    v9 = (v7 + v6) >> 1;
    v10 = this;
    do
    {
      v11 = *((_QWORD *)v10 + 1);
      v12 = v9 >= v11;
      v13 = v9 - v11;
      if (!v12)
      {
        v14 = *(_QWORD *)v10 + v9;
        goto LABEL_12;
      }
      v10 = (SampleToRollDistanceTable *)((char *)v10 + 24);
      v9 = v13;
    }
    while (v10 != a2);
    v14 = *((_QWORD *)a2 - 3);
LABEL_12:
    if (v14 > a3)
    {
      v7 = v8 - 1;
    }
    else
    {
      v6 = v8 + 1;
      v5 = v8;
    }
  }
  while (v7 >= v6);
  v15 = v5;
  do
  {
    v16 = *((_QWORD *)this + 1);
    v12 = v15 >= v16;
    v17 = v15 - v16;
    if (!v12)
    {
      v18 = *(_QWORD *)this + v15;
      goto LABEL_21;
    }
    this = (SampleToRollDistanceTable *)((char *)this + 24);
    v15 = v17;
  }
  while (this != a2);
  v18 = *((_QWORD *)a2 - 3);
LABEL_21:
  if (v18 > a3)
    return -1;
  return v5;
}

uint64_t PacketToRollDistanceForRestrictedRandomAccess(AudioPacketRollDistanceTranslation *a1, const SampleToRollDistanceTable *a2, const SyncSampleTable *a3)
{
  int v5;
  SInt64 mPacket;
  SInt64 v7;
  SyncSampleTable *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  SInt64 v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  SInt64 v23;
  SInt64 v24;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  a1->mRollDistance = 0;
  v5 = *(unsigned __int8 *)a2;
  if (*(_BYTE *)a2)
  {
    if (!*(_BYTE *)a3)
    {
      mPacket = a1->mPacket;
      v7 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_9;
    }
LABEL_5:
    mPacket = a1->mPacket;
    v8 = (SyncSampleTable *)*((_QWORD *)a3 + 1);
    v9 = SyncSampleTable::IndexOfEntryWithClosestSampleNumberLessThanOrEqualTo(v8, *((SyncSampleTable **)a3 + 2), a1->mPacket);
    if (v9 < 0)
    {
      v7 = 0x7FFFFFFFFFFFFFFFLL;
      if (!v5)
        goto LABEL_22;
    }
    else
    {
      v7 = mPacket - *((_QWORD *)v8 + v9);
      if (!v5)
        goto LABEL_22;
    }
LABEL_9:
    v10 = *((_QWORD *)a2 + 4);
    v11 = *((_QWORD *)a2 + 5);
    v12 = v11 - v10;
    if (v11 != v10)
    {
      if (v12 < 0)
      {
        v14 = 0;
      }
      else
      {
        v13 = 0;
        v14 = 0;
        v15 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
        v16 = v15;
        do
        {
          v17 = (v13 + v16) >> 1;
          if (v17 >= v15)
            break;
          v18 = *(_QWORD *)(v10 + 24 * v17) + *(__int16 *)(v10 + 24 * v17 + 16);
          if (v18 <= mPacket)
            v14 = (v13 + v16) >> 1;
          else
            v16 = v17 - 1;
          if (v18 <= mPacket)
            v13 = v17 + 1;
        }
        while (v16 >= v13);
      }
      v19 = (uint64_t *)(v10 + 24 * v14);
      v20 = *v19;
      v21 = *((__int16 *)v19 + 8);
      if (v20 + v21 <= mPacket)
      {
        v23 = *(_QWORD *)(v10 + 24 * v14 + 8);
        if (mPacket - v20 >= v23)
        {
          v24 = mPacket - (v20 + v23);
          if (v24 + 1 > v21)
            v21 = v24 + 1;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    v21 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_23:
    result = 0;
    if (v21 < v7)
      v7 = v21;
    if (v7 >= mPacket)
      v7 = mPacket;
    a1->mRollDistance = v7;
    return result;
  }
  if (*(_BYTE *)a3)
    goto LABEL_5;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v25 = 136315394;
    v26 = "AudioFileCommon.cpp";
    v27 = 1024;
    v28 = 550;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid preroll table and invalid sync sample table", (uint8_t *)&v25, 0x12u);
  }
  return 4294967246;
}

uint64_t PacketToRollDistanceForRollRecovery(AudioPacketRollDistanceTranslation *a1, const SampleToRollDistanceTable *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  SInt64 v10;
  uint64_t v11;
  SInt64 mPacket;
  SInt64 v13;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  a1->mRollDistance = 0;
  if (*(_BYTE *)a2)
  {
    v2 = *((_QWORD *)a2 + 4);
    v3 = *((_QWORD *)a2 + 5);
    v4 = v3 - v2;
    if (v3 == v2)
      return 0;
    v5 = 0;
    if ((v4 & 0x8000000000000000) == 0)
    {
      v6 = 0;
      v7 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
      v8 = v7;
      do
      {
        v9 = (v8 + v6) >> 1;
        if (v9 >= v7)
          break;
        v10 = *(_QWORD *)(v2 + 24 * v9);
        if (v10 <= a1->mPacket)
        {
          if (v10 >= a1->mPacket)
          {
            v5 = (v8 + v6) >> 1;
            break;
          }
          v6 = v9 + 1;
          v5 = v9;
        }
        else
        {
          v8 = v9 - 1;
        }
      }
      while (v8 >= v6);
    }
    mPacket = a1->mPacket;
    if (a1->mPacket >= *(_QWORD *)(v2 + 24 * v5))
    {
      v13 = -(uint64_t)*(__int16 *)(v2 + 24 * v5 + 16);
      a1->mRollDistance = v13;
    }
    else
    {
      v13 = 0;
    }
    if (v13 <= mPacket)
    {
      return 0;
    }
    else
    {
      v11 = 0;
      a1->mRollDistance = mPacket;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v15 = 136315394;
      v16 = "AudioFileCommon.cpp";
      v17 = 1024;
      v18 = 589;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid roll recovery table", (uint8_t *)&v15, 0x12u);
    }
    return 4294967246;
  }
  return v11;
}

uint64_t PacketToDependencyInfoForRestrictedRandomAccess(AudioPacketDependencyInfoTranslation *a1, const SampleToRollDistanceTable *a2, const SyncSampleTable *a3)
{
  SInt64 mPacket;
  SyncSampleTable *v6;
  uint64_t v7;
  uint64_t v8;
  __int16 *v9;
  SampleToRollDistanceTable *v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  UInt32 v18;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    mPacket = a1->mPacket;
    if (a1->mPacket < 0)
    {
      v8 = 1885563711;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v20 = 136315394;
        v21 = "AudioFileCommon.cpp";
        v22 = 1024;
        v23 = 635;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid packet number", (uint8_t *)&v20, 0x12u);
      }
    }
    else
    {
      a1->mIsIndependentlyDecodable = 0;
      if (*(_BYTE *)a3
        && (v6 = (SyncSampleTable *)*((_QWORD *)a3 + 1),
            v7 = SyncSampleTable::IndexOfEntryWithClosestSampleNumberLessThanOrEqualTo(v6, *((SyncSampleTable **)a3 + 2), mPacket), (v7 & 0x8000000000000000) == 0)&& mPacket == *((_QWORD *)v6 + v7))
      {
        v8 = 0;
        *(_QWORD *)&a1->mIsIndependentlyDecodable = 1;
      }
      else
      {
        if (!*(_BYTE *)a2)
          return 0;
        v9 = (__int16 *)*((_QWORD *)a2 + 4);
        v10 = (SampleToRollDistanceTable *)*((_QWORD *)a2 + 5);
        v11 = SampleToRollDistanceTable::IndexOfEntryWithClosestSampleNumberLessThanOrEqualTo((SampleToRollDistanceTable *)v9, v10, mPacket);
        if ((v11 & 0x8000000000000000) != 0)
          return 0;
        while (v9 != (__int16 *)v10)
        {
          v12 = *((_QWORD *)v9 + 1);
          v13 = v11 >= v12;
          v14 = v11 - v12;
          if (!v13)
          {
            v16 = *(_QWORD *)v9;
            v15 = v9 + 8;
            v17 = v16 + v11;
            goto LABEL_19;
          }
          v9 += 12;
          v11 = v14;
        }
        v17 = *((_QWORD *)v10 - 3);
        v15 = (__int16 *)((char *)v10 - 8);
LABEL_19:
        if (mPacket == v17)
        {
          v8 = 0;
          v18 = *v15;
          a1->mIsIndependentlyDecodable = 1;
          a1->mNumberPrerollPackets = v18;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v20 = 136315394;
      v21 = "AudioFileCommon.cpp";
      v22 = 1024;
      v23 = 634;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  null AudioPacketDependencyInfoTranslation", (uint8_t *)&v20, 0x12u);
    }
    return 4294967246;
  }
  return v8;
}

uint64_t ScanForIndependentPacketWithRestrictedRandomAccess(uint64_t a1, AudioIndependentPacketTranslation *a2, SampleToRollDistanceTable **a3, SyncSampleTable **a4)
{
  SInt64 mPacket;
  uint64_t v9;
  unint64_t v10;
  SyncSampleTable *v11;
  SyncSampleTable *v12;
  uint64_t v13;
  SInt64 v14;
  SampleToRollDistanceTable *v15;
  SInt64 *v16;
  unint64_t v17;
  SampleToRollDistanceTable *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  SInt64 *v22;
  SInt64 *v23;
  unint64_t v24;
  SampleToRollDistanceTable *v25;
  SInt64 v26;
  unint64_t v27;
  SampleToRollDistanceTable *v28;
  unint64_t v29;
  unint64_t v30;
  SInt64 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v39;
  const char *v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    mPacket = a2->mPacket;
    if ((a2->mPacket & 0x8000000000000000) == 0)
    {
      if (*(_BYTE *)a4)
        v9 = SyncSampleTable::IndexOfEntryWithClosestSampleNumberLessThanOrEqualTo(a4[1], a4[2], mPacket);
      else
        v9 = -1;
      if (*(_BYTE *)a3)
      {
        v10 = SampleToRollDistanceTable::IndexOfEntryWithClosestSampleNumberLessThanOrEqualTo(a3[4], a3[5], mPacket);
        if ((_DWORD)a1)
          goto LABEL_13;
      }
      else
      {
        v10 = -1;
        if ((_DWORD)a1)
        {
LABEL_13:
          if (v9 < 0)
          {
            v22 = (SInt64 *)a4[1];
            if (a4[2] == (SyncSampleTable *)v22)
LABEL_32:
              v14 = -1;
            else
              v14 = *v22;
          }
          else
          {
            v11 = a4[1];
            while (mPacket >= *((_QWORD *)v11 + v9))
            {
              if (++v9 >= (unint64_t)((a4[2] - v11) >> 3))
                goto LABEL_32;
            }
            if (v9 < 0)
              v14 = -1;
            else
              v14 = *((_QWORD *)v11 + v9);
          }
          v23 = (SInt64 *)a3[4];
          v16 = (SInt64 *)a3[5];
          if (v23 == v16)
          {
            if ((v10 & 0x8000000000000000) == 0)
            {
              v24 = 0;
              goto LABEL_46;
            }
          }
          else
          {
            v24 = 0;
            v25 = a3[4];
            do
            {
              v24 += *((_QWORD *)v25 + 1);
              v25 = (SampleToRollDistanceTable *)((char *)v25 + 24);
            }
            while (v25 != (SampleToRollDistanceTable *)v16);
            if ((v10 & 0x8000000000000000) != 0)
            {
              if (v24)
              {
                while (!v23[1])
                {
                  v23 += 3;
                  if (v23 == v16)
                    goto LABEL_43;
                }
                v26 = *v23;
                goto LABEL_66;
              }
              goto LABEL_65;
            }
            while (1)
            {
LABEL_46:
              if (v23 == v16)
              {
LABEL_51:
                v31 = *(v16 - 3);
              }
              else
              {
                v27 = v10;
                v28 = a3[4];
                while (1)
                {
                  v29 = *((_QWORD *)v28 + 1);
                  v20 = v27 >= v29;
                  v30 = v27 - v29;
                  if (!v20)
                    break;
                  v28 = (SampleToRollDistanceTable *)((char *)v28 + 24);
                  v27 = v30;
                  if (v28 == (SampleToRollDistanceTable *)v16)
                    goto LABEL_51;
                }
                v31 = *(_QWORD *)v28 + v27;
              }
              if (mPacket < v31)
                break;
              if (++v10 >= v24)
                goto LABEL_65;
            }
            if ((v10 & 0x8000000000000000) == 0)
            {
              while (v23 != v16)
              {
                v32 = v23[1];
                v20 = v10 >= v32;
                v33 = v10 - v32;
                if (!v20)
                {
                  v26 = *v23 + v10;
                  goto LABEL_66;
                }
                v23 += 3;
                v10 = v33;
              }
LABEL_43:
              v26 = *(v16 - 3);
              goto LABEL_66;
            }
          }
          goto LABEL_65;
        }
      }
      if (v9 < 0 || (v12 = a4[1], v13 = v9 - (mPacket == *((_QWORD *)v12 + v9)), v13 < 0))
      {
        v14 = -1;
        if ((v10 & 0x8000000000000000) != 0)
          goto LABEL_65;
      }
      else
      {
        v14 = *((_QWORD *)v12 + v13);
        if ((v10 & 0x8000000000000000) != 0)
          goto LABEL_65;
      }
      v15 = a3[4];
      v16 = (SInt64 *)a3[5];
      if (v15 == (SampleToRollDistanceTable *)v16)
      {
LABEL_29:
        v34 = *(v16 - 3);
      }
      else
      {
        v17 = v10;
        v18 = a3[4];
        while (1)
        {
          v19 = *((_QWORD *)v18 + 1);
          v20 = v17 >= v19;
          v21 = v17 - v19;
          if (!v20)
            break;
          v18 = (SampleToRollDistanceTable *)((char *)v18 + 24);
          v17 = v21;
          if (v18 == (SampleToRollDistanceTable *)v16)
            goto LABEL_29;
        }
        v34 = *(_QWORD *)v18 + v17;
      }
      v35 = v10 - (mPacket == v34);
      if (v35 >= 0)
      {
        while (v15 != (SampleToRollDistanceTable *)v16)
        {
          v36 = *((_QWORD *)v15 + 1);
          v20 = v35 >= v36;
          v37 = v35 - v36;
          if (!v20)
          {
            v26 = *(_QWORD *)v15 + v35;
            goto LABEL_66;
          }
          v15 = (SampleToRollDistanceTable *)((char *)v15 + 24);
          v35 = v37;
        }
        goto LABEL_43;
      }
LABEL_65:
      v26 = -1;
LABEL_66:
      if (v14 == -1)
      {
        a1 = 0;
        a2->mIndependentlyDecodablePacket = v26;
      }
      else
      {
        if (v26 == -1)
        {
          a1 = 0;
        }
        else if ((_DWORD)a1)
        {
          a1 = 0;
          if (v26 < v14)
            v14 = v26;
        }
        else if (v14 <= v26)
        {
          v14 = v26;
        }
        a2->mIndependentlyDecodablePacket = v14;
      }
      return a1;
    }
    a1 = 1885563711;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v39 = 136315394;
      v40 = "AudioFileCommon.cpp";
      v41 = 1024;
      v42 = 672;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid packet number", (uint8_t *)&v39, 0x12u);
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v39 = 136315394;
      v40 = "AudioFileCommon.cpp";
      v41 = 1024;
      v42 = 671;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  null AudioIndependentPacketTranslation", (uint8_t *)&v39, 0x12u);
    }
    return 4294967246;
  }
  return a1;
}

uint64_t GetMetaHeader(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t i;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t m;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t k;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned __int8 *v38;
  int v39;
  unsigned int v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t j;
  uint64_t v44;
  unsigned int v45;
  float v46;
  unsigned int v47;
  unsigned __int16 v48;
  int v49;
  unsigned int v50;
  int v51;
  BOOL v52;
  unsigned int v54;
  unsigned __int16 v55;
  int v56;

  if (a3 < 4)
    return 0;
  v3 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  v4 = a2[3];
  v5 = v4 > 0xBF;
  if (v4 <= 0xBF)
    v6 = 36;
  else
    v6 = 21;
  if (v5)
    LODWORD(v7) = 13;
  else
    LODWORD(v7) = 21;
  v8 = (a2[1] >> 3) & 1;
  v9 = a2[2];
  if (v8)
    v7 = v6;
  else
    v7 = v7;
  *(_DWORD *)(a1 + 144) = v7;
  if ((int)v7 + 4 <= a3)
  {
    v11 = (v9 >> 2) & 3;
    v12 = &a2[v7];
    v13 = *v12;
    for (i = 1; i != 4; ++i)
      v13 = v12[i] | (v13 << 8);
    if (v13 != 1483304551 && v13 != 1231971951)
      return 0;
    if (v13 == 1231971951)
    {
      v16 = 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      v16 = 0;
    }
    v17 = GetMetaHeader(XingHeader &,unsigned char *,unsigned int)::sr_table[v11];
    *(_DWORD *)a1 = v8;
    *(_DWORD *)(a1 + 4) = v17 >> (v8 == 0);
    v18 = v7 + 8;
    if ((int)v7 + 8 > a3)
      return 0;
    v19 = a2[(v7 + 4) + 3];
    if ((v19 & 1) != 0)
    {
      v20 = v7 + 12;
      if ((int)v7 + 12 > a3)
        return 0;
      v22 = 0;
      v16 |= 1u;
      *(_DWORD *)(a1 + 8) = v16;
      v23 = a2[v18];
      v24 = v12 + 9;
      do
        v23 = v24[v22++] | (v23 << 8);
      while (v22 != 3);
      *(_DWORD *)(a1 + 12) = v23;
      if ((v19 & 2) == 0)
      {
LABEL_27:
        v21 = v20;
        if ((v19 & 4) == 0)
        {
LABEL_41:
          *(_DWORD *)(a1 + 20) = -1;
          if ((v19 & 8) == 0)
          {
            v31 = v21;
LABEL_47:
            *(_DWORD *)(a1 + 148) = v31 - *(_DWORD *)(a1 + 144);
            if (v31 + 36 <= a3)
            {
              v35 = (v31 + 34);
              v36 = *(unsigned __int16 *)&a2[v35];
              v37 = 0;
              if (v31 != -34)
              {
                v38 = a2;
                do
                {
                  v39 = *v38++;
                  v37 = crc16_lookup[v39 ^ v37] ^ (v37 >> 8);
                  --v35;
                }
                while (v35);
              }
              v40 = __rev16(v36);
              v41 = &a2[v31];
              v42 = *v41;
              for (j = 1; j != 4; ++j)
                v42 = v41[j] | (v42 << 8);
              *(_DWORD *)(a1 + 124) = v42;
              if (v37 == v40 || v42 == 1279348037)
              {
                v44 = 0;
                v45 = v41[11];
                do
                  v45 = v41[v44++ + 12] | (v45 << 8);
                while (v44 != 3);
                v46 = (float)v45 * 0.00000011921;
                *(float *)(a1 + 128) = v46;
                v47 = v41[15];
                v48 = _byteswap_ushort(*(_WORD *)(v41 + 15));
                *(_BYTE *)(a1 + 132) = v41[15] >> 2;
                v49 = v48 & 0x1FF;
                if ((v47 & 2) != 0)
                  v49 = -v49;
                *(_WORD *)(a1 + 134) = v49;
                v50 = v41[17];
                v51 = _byteswap_ushort(*(_WORD *)(v41 + 17)) & 0x1FF;
                if ((v50 & 2) != 0)
                  v51 = -v51;
                v52 = v50 >= 4 || v47 >= 4;
                *(_BYTE *)(a1 + 136) = v41[17] >> 2;
                *(_WORD *)(a1 + 138) = v51;
                if (v52 || v46 != 0.0)
                  v16 |= 0x40u;
                v16 |= 0x20u;
                *(_DWORD *)(a1 + 8) = v16;
                v54 = (v41[22] << 8) | (v41[21] << 16);
                v55 = _byteswap_ushort(*((_WORD *)v41 + 11));
                *(_WORD *)(a1 + 140) = v54 >> 12;
                *(_WORD *)(a1 + 142) = v55 & 0xFFF;
              }
            }
            if (v13 == 1231971951)
            {
              v56 = *(_DWORD *)(a1 + 124);
              if (v56 == 1279348037 || !v56)
                *(_DWORD *)(a1 + 8) = v16 & 0x7E;
            }
            return 1;
          }
          v31 = v21 + 4;
          if (v21 + 4 <= a3)
          {
            v16 |= 8u;
            *(_DWORD *)(a1 + 8) = v16;
            v32 = &a2[v21];
            v33 = *v32;
            for (k = 1; k != 4; ++k)
              v33 = v32[k] | (v33 << 8);
            *(_DWORD *)(a1 + 20) = v33;
            goto LABEL_47;
          }
          return 0;
        }
LABEL_37:
        v28 = v21 + 100;
        if (v21 + 100 > a3)
          return 0;
        v29 = 0;
        v16 |= 4u;
        *(_DWORD *)(a1 + 8) = v16;
        v30 = &a2[v21];
        do
        {
          *(_BYTE *)(a1 + 24 + v29) = v30[v29];
          ++v29;
        }
        while (v29 != 100);
        v21 = v28;
        goto LABEL_41;
      }
    }
    else
    {
      v20 = v7 + 8;
      if ((a2[(v7 + 4) + 3] & 2) == 0)
        goto LABEL_27;
    }
    v21 = v20 + 4;
    if (v20 + 4 > a3)
      return 0;
    v16 |= 2u;
    *(_DWORD *)(a1 + 8) = v16;
    v25 = &a2[v20];
    v26 = *v25;
    for (m = 1; m != 4; ++m)
      v26 = v25[m] | (v26 << 8);
    *(_DWORD *)(a1 + 16) = v26;
    if ((v19 & 4) == 0)
      goto LABEL_41;
    goto LABEL_37;
  }
  return v3;
}

uint64_t ParseiTunesSMPBData(char *a1, int a2, AudioFilePacketTableInfo *a3)
{
  uint64_t v3;
  SInt64 v6;
  SInt32 v7;
  SInt64 v9;
  SInt32 v10;
  SInt32 v11;
  _BYTE v12[17];
  _BYTE v13[31];

  *(_QWORD *)&v13[23] = *MEMORY[0x1E0C80C00];
  if (a2 < 35)
    return 0xFFFFFFFFLL;
  v3 = 1667787583;
  *(_QWORD *)v13 = 0;
  *(_QWORD *)&v12[9] = 0;
  *(_QWORD *)&v13[7] = 0;
  *(_QWORD *)v12 = *(_QWORD *)a1;
  v12[8] = a1[8];
  v11 = 0;
  sscanf(v12, "%X", &v11);
  if ((v11 & 0x80000000) == 0)
  {
    *(_QWORD *)&v12[9] = 0;
    *(_QWORD *)v13 = 0;
    *(_QWORD *)&v13[7] = 0;
    *(_QWORD *)v12 = *(_QWORD *)(a1 + 9);
    v12[8] = a1[17];
    v10 = 0;
    sscanf(v12, "%X", &v10);
    if ((v10 & 0x80000000) == 0)
    {
      *(_QWORD *)&v13[7] = 0;
      *(_QWORD *)v13 = 0;
      *(_OWORD *)v12 = *(_OWORD *)(a1 + 18);
      v12[16] = a1[34];
      v9 = 0;
      sscanf(v12, "%qX", &v9);
      v6 = v9;
      if ((v9 & 0x8000000000000000) == 0)
      {
        v3 = 0;
        v7 = v10;
        a3->mPrimingFrames = v11;
        a3->mRemainderFrames = v7;
        a3->mNumberValidFrames = v6;
      }
    }
  }
  return v3;
}

uint64_t ParseiTunesNORMData(const char *a1, CACFDictionary *a2, CACFDictionary *a3)
{
  const char *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  int v11;
  char v12[256];
  _QWORD v13[7];

  v13[5] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0xFFFFFFFFLL;
  v3 = a1;
  v4 = strlen(a1);
  if ((int)v4 < 45)
    return 0xFFFFFFFFLL;
  v5 = v4 / 0x2D;
  if (5 * (v4 / 0x2D) != v4 / 9)
    return 0xFFFFFFFFLL;
  v6 = 0;
  v13[0] = CFSTR("sc ave perceived power coeff");
  v13[1] = CFSTR("sc max perceived power coeff");
  v13[2] = CFSTR("sc max perceived power msec");
  v13[3] = CFSTR("sc peak amplitude");
  v13[4] = CFSTR("sc peak amplitude msec");
  do
  {
    v11 = 0;
    v7 = v12;
    v8 = v5;
    do
    {
      sscanf(v3, "%X", &v11);
      v3 += 9;
      snprintf(v7, (char *)v13 - v7, "%u%s", v11, " ");
      v7 += strlen(v7);
      --v8;
    }
    while (v8);
    CACFDictionary::AddCString(a2, (const __CFString *)v13[v6++], v12);
  }
  while (v6 != 5);
  return 0;
}

uint64_t ParseiTunesLOUDData(const char *a1, CACFDictionary *a2, CACFDictionary *a3)
{
  uint64_t v5;
  float v6;
  BOOL v7;
  const __CFString *v8;
  unsigned int v9;
  const char *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  const __CFString *v15;
  int v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __CFDictionary *Mutable;
  __int16 v22;

  v20 = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v22 = 257;
  v19 = 0;
  if (sscanf(a1, "%X %X %X", &v19, &v20, (char *)&v20 + 4) < 3)
  {
LABEL_2:
    v5 = 0xFFFFFFFFLL;
    goto LABEL_31;
  }
  if (v19 != -1)
  {
    v6 = -(float)((float)(v19 & 0x7FFF) * 0.0039062);
    if (v19 >= 0)
      v6 = (float)(v19 & 0x7FFF) * 0.0039062;
    CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, CFSTR("aa itu true peak"), v6);
  }
  v7 = (_DWORD)v20 != 0;
  if ((_DWORD)v20)
  {
    v8 = CopyMediaKindStringFromStoreItemKind(v20);
    CACFDictionary::AddString(a2, CFSTR("media kind"), v8);
  }
  if (HIDWORD(v20))
  {
    v9 = 0;
    v10 = a1 + 11;
    do
    {
      v17 = 0;
      v18 = 0;
      if (v9 == 19 || sscanf(v10, "%X %X", &v18, &v17) < 2)
        goto LABEL_2;
      v11 = (float)v17;
      v12 = (float)(v11 * -0.25) + 6.0;
      v13 = (float)(v17 - 204) + 70.0;
      if (v17 <= 0xCCu)
        v13 = (float)((float)(v17 - 128) * 0.5) + 32.0;
      v14 = v11 * 0.25;
      if (v17 > 0x80u)
        v14 = v13;
      if (v18 != 6)
        v14 = v12;
      v15 = CFSTR("aa ebu top of loudness range");
      switch((char)v18)
      {
        case 1:
        case 6:
          goto LABEL_23;
        case 2:
          v15 = CFSTR("aa ebu max momentary loudness");
          goto LABEL_23;
        case 3:
          v15 = CFSTR("aa ebu max short-term loudness");
          goto LABEL_23;
        case 4:
          v15 = CFSTR("aa itu loudness");
LABEL_23:
          CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, v15, v14);
          goto LABEL_24;
        case 5:
          CACFDictionary::AddFloat32(a2, CFSTR("anchor loudness"), v14);
LABEL_24:
          v7 = 1;
          break;
        default:
          break;
      }
      ++v9;
      v10 += 6;
    }
    while (v9 < HIDWORD(v20));
  }
  if (v7)
    CACFDictionary::AddDictionary(a2, CFSTR("main loudness parameters"), Mutable);
  v5 = 0;
LABEL_31:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v5;
}

void sub_18F0B0F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

CFStringRef CopyMediaKindStringFromStoreItemKind(int a1)
{
  __CFString **v1;

  v1 = kMediaKind_MusicValue;
  switch(a1)
  {
    case 1:
      return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *v1);
    case 2:
      v1 = kMediaKind_AudiobookValue;
      return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *v1);
    case 3:
    case 4:
    case 5:
    case 7:
      return 0;
    case 6:
      v1 = kMediaKind_MusicVideoValue;
      return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *v1);
    case 8:
      v1 = kMediaKind_PodcastValue;
      return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *v1);
    case 9:
      v1 = kMediaKind_MovieValue;
      return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *v1);
    default:
      switch(a1)
      {
        case 24:
          v1 = kMediaKind_iTunesUValue;
          return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *v1);
        case 29:
          v1 = kMediaKind_TVShowValue;
          return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *v1);
        case 32:
          v1 = kMediaKind_HomeVideoValue;
          return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *v1);
        case 33:
          v1 = kMediaKind_VoiceMemoValue;
          return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *v1);
        default:
          return 0;
      }
  }
}

uint64_t GetSoundCheckValuesFromString(const __CFString *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v3;
  CFStringEncoding SystemEncoding;
  unint64_t v8;
  char *v9;
  int v10;
  unsigned int v12;
  char buffer[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = 2003334207;
  if (a1)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buffer = 0u;
    v14 = 0u;
    SystemEncoding = CFStringGetSystemEncoding();
    if (CFStringGetCString(a1, buffer, 256, SystemEncoding))
    {
      if (a2)
      {
        v8 = 0;
        v9 = buffer;
        do
        {
          v12 = 0;
          sscanf(v9, "%u", &v12);
          a3[v8++] = v12;
          if (v8 < a2)
          {
            do
              v10 = *v9++;
            while (v10 != 32);
          }
        }
        while (v8 != a2);
      }
      return 0;
    }
  }
  return v3;
}

uint64_t GetSCFields(CACFDictionary *a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v6;
  __CFString *v8;

  v6 = 2003334207;
  if (CACFDictionary::HasKey(a1, CFSTR("sc ave perceived power coeff")))
  {
    if (CACFDictionary::HasKey(a1, CFSTR("sc max perceived power coeff")))
    {
      if (CACFDictionary::HasKey(a1, CFSTR("sc max perceived power msec")))
      {
        if (CACFDictionary::HasKey(a1, CFSTR("sc peak amplitude")))
        {
          if (CACFDictionary::HasKey(a1, CFSTR("sc peak amplitude msec")))
          {
            v8 = 0;
            if (CACFDictionary::GetString(a1, CFSTR("sc ave perceived power coeff"), (const __CFString **)&v8))
            {
              v6 = GetSoundCheckValuesFromString(v8, a3, a2);
              if (!(_DWORD)v6)
              {
                v8 = 0;
                if (!CACFDictionary::GetString(a1, CFSTR("sc max perceived power coeff"), (const __CFString **)&v8))return 2003334207;
                v6 = GetSoundCheckValuesFromString(v8, a3, &a2[a3]);
                if ((_DWORD)v6)
                  return v6;
                v8 = 0;
                if (!CACFDictionary::GetString(a1, CFSTR("sc max perceived power msec"), (const __CFString **)&v8))return 2003334207;
                v6 = GetSoundCheckValuesFromString(v8, a3, &a2[2 * a3]);
                if ((_DWORD)v6)
                  return v6;
                v8 = 0;
                if (!CACFDictionary::GetString(a1, CFSTR("sc peak amplitude"), (const __CFString **)&v8))
                  return 2003334207;
                v6 = GetSoundCheckValuesFromString(v8, a3, &a2[3 * a3]);
                if (!(_DWORD)v6)
                {
                  v8 = 0;
                  v6 = 2003334207;
                  if (CACFDictionary::GetString(a1, CFSTR("sc peak amplitude msec"), (const __CFString **)&v8))return GetSoundCheckValuesFromString(v8, a3, &a2[4 * a3]);
                }
              }
            }
          }
        }
      }
    }
  }
  return v6;
}

int *FillSCString(int *result, int a2, char *a3)
{
  int *v3;
  uint64_t v4;
  char *v5;
  int v6;
  size_t v7;
  char __str[32];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = result;
    if ((5 * a2) <= 1)
      v4 = 1;
    else
      v4 = (5 * a2);
    v5 = a3 + 9;
    do
    {
      *(v5 - 9) = 32;
      v6 = *v3++;
      *((_QWORD *)v5 - 1) = 0x3030303030303030;
      snprintf(__str, 0x20uLL, "%X", v6);
      v7 = strlen(__str);
      result = (int *)memcpy(&v5[-v7], __str, v7);
      v5 += 9;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t AddTextToReplayGainDict(uint64_t theString1, const __CFString *a2, CACFDictionary *a3)
{
  const __CFString *v3;
  float DoubleValue;
  const __CFString *v7;
  float v8;
  const __CFString *v9;
  float v10;
  float v11;

  if (!a2)
    return theString1;
  v3 = (const __CFString *)theString1;
  if (!theString1 || !a3)
    return theString1;
  if (CFStringCompare((CFStringRef)theString1, CFSTR("REPLAYGAIN_TRACK_GAIN"), 1uLL) == kCFCompareEqualTo)
  {
    theString1 = CACFDictionary::HasKey(a3, CFSTR("REPLAYGAIN_TRACK_GAIN"));
    if ((theString1 & 1) != 0)
      return theString1;
    v11 = 0.0;
    theString1 = ConvertReplayGainStringToGain(a2, &v11);
    if (!(_DWORD)theString1)
      return theString1;
    v8 = v11;
    v9 = CFSTR("REPLAYGAIN_TRACK_GAIN");
    return CACFDictionary::AddFloat32(a3, v9, v8);
  }
  if (CFStringCompare(v3, CFSTR("REPLAYGAIN_TRACK_PEAK"), 1uLL) == kCFCompareEqualTo)
  {
    theString1 = CACFDictionary::HasKey(a3, CFSTR("REPLAYGAIN_TRACK_PEAK"));
    if ((theString1 & 1) != 0)
      return theString1;
    DoubleValue = CFStringGetDoubleValue(a2);
    v7 = CFSTR("REPLAYGAIN_TRACK_PEAK");
    return CACFDictionary::AddFloat32(a3, v7, DoubleValue);
  }
  if (CFStringCompare(v3, CFSTR("REPLAYGAIN_ALBUM_GAIN"), 1uLL) == kCFCompareEqualTo)
  {
    theString1 = CACFDictionary::HasKey(a3, CFSTR("REPLAYGAIN_ALBUM_GAIN"));
    if ((theString1 & 1) != 0)
      return theString1;
    v10 = 0.0;
    theString1 = ConvertReplayGainStringToGain(a2, &v10);
    if (!(_DWORD)theString1)
      return theString1;
    v8 = v10;
    v9 = CFSTR("REPLAYGAIN_ALBUM_GAIN");
    return CACFDictionary::AddFloat32(a3, v9, v8);
  }
  theString1 = CFStringCompare(v3, CFSTR("REPLAYGAIN_ALBUM_PEAK"), 1uLL);
  if (!theString1)
  {
    theString1 = CACFDictionary::HasKey(a3, CFSTR("REPLAYGAIN_ALBUM_PEAK"));
    if ((theString1 & 1) == 0)
    {
      DoubleValue = CFStringGetDoubleValue(a2);
      v7 = CFSTR("REPLAYGAIN_ALBUM_PEAK");
      return CACFDictionary::AddFloat32(a3, v7, DoubleValue);
    }
  }
  return theString1;
}

uint64_t ConvertReplayGainStringToGain(CFStringRef theString, float *a2)
{
  const __CFString *MutableCopy;
  __CFString *v4;
  CFRange v5;
  float DoubleValue;
  uint64_t v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
  if (MutableCopy)
  {
    v4 = (__CFString *)MutableCopy;
    v5 = CFStringFind(MutableCopy, CFSTR("dB"), 1uLL);
    if (v5.location != -1)
    {
      if (v5.location + v5.length != CFStringGetLength(v4))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v9 = 136315394;
          v10 = "AudioFileCommon.cpp";
          v11 = 1024;
          v12 = 1438;
          _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  dB isn't a suffix", (uint8_t *)&v9, 0x12u);
        }
        v7 = 0;
        goto LABEL_12;
      }
      CFStringDelete(v4, v5);
    }
    CFStringTrimWhitespace(v4);
    DoubleValue = CFStringGetDoubleValue(v4);
    *a2 = DoubleValue;
    v7 = 1;
LABEL_12:
    CFRelease(v4);
    return v7;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v9 = 136315394;
    v10 = "AudioFileCommon.cpp";
    v11 = 1024;
    v12 = 1434;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  failed to copy input string", (uint8_t *)&v9, 0x12u);
  }
  return 0;
}

const __CFString *BitDepthFromCFString(const __CFString *result)
{
  char *p_buffer;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  char buffer;
  char v12[255];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    p_buffer = &buffer;
    CFStringGetCString(result, &buffer, 256, 0x8000100u);
    v2 = MEMORY[0x1E0C80978];
    do
    {
      while (1)
      {
        v4 = *p_buffer++;
        v3 = v4;
        if ((v4 & 0x80000000) != 0)
          break;
        if ((*(_DWORD *)(v2 + 4 * v3 + 60) & 0x4000) == 0)
          goto LABEL_7;
      }
    }
    while (__maskrune(v3, 0x4000uLL));
LABEL_7:
    v5 = buffer - 70;
    v6 = v5 > 0x23;
    v7 = (1 << v5) & 0x900000009;
    if (v6 || v7 == 0)
    {
      return 0;
    }
    else
    {
      v9 = buffer & 0xDF;
      v10 = 0;
      sscanf(v12, "%d", &v10);
      if (v9 == 70)
        return (const __CFString *)-v10;
      else
        return (const __CFString *)v10;
    }
  }
  return result;
}

CFStringRef CreateCFStringFromBitDepth(int a1)
{
  char __str[32];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (a1 < 0)
    snprintf(__str, 0x20uLL, "F%d");
  else
    snprintf(__str, 0x20uLL, "I%d");
  return CFStringCreateWithCString(0, __str, 0x8000100u);
}

uint64_t GetSourceBitDepthFromASBD(const AudioStreamBasicDescription *a1, char a2)
{
  int v2;
  uint64_t v3;

  if ((int)a1 <= 1718378850)
  {
    if ((_DWORD)a1 != 1634492771)
    {
      v2 = 1634497332;
      goto LABEL_7;
    }
  }
  else if ((_DWORD)a1 != 1718378851)
  {
    if ((_DWORD)a1 == 1936487278)
    {
LABEL_8:
      if ((a2 & 0xF) == 0)
        return 8;
      goto LABEL_9;
    }
    v2 = 1936487267;
LABEL_7:
    if ((_DWORD)a1 != v2)
      return 0;
    goto LABEL_8;
  }
LABEL_9:
  v3 = 16;
  switch(a2 & 0xF)
  {
    case 1:
      return v3;
    case 2:
      v3 = 20;
      break;
    case 3:
      v3 = 24;
      break;
    case 4:
      if ((_DWORD)a1 == 1936487278 || (_DWORD)a1 == 1936487267)
        v3 = 0;
      else
        v3 = 32;
      break;
    default:
      return 0;
  }
  return v3;
}

uint64_t AudioFileGenerateLoudnessInfo(AudioFileObject *a1, CACFDictionary *a2)
{
  uint64_t v4;
  __int128 v5;
  const AudioChannelLayout *v6;
  void *v7;
  int v8;
  UInt32 v9;
  UInt32 mBytesPerPacket;
  AudioStreamPacketDescription *v11;
  uint64_t v12;
  UInt32 mFramesPerPacket;
  AudioStreamPacketDescription *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::bad_alloc *exception;
  std::bad_alloc *v22;
  __CFDictionary *Mutable;
  __int16 v24;
  unsigned int v25;
  AudioBufferList __src;
  void *v27;
  _DWORD v28[4];
  _DWORD size[3];
  AudioStreamBasicDescription v30;

  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 6;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)v4 = &off_1E2909170;
  *(_QWORD *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 176) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  v5 = *(_OWORD *)((char *)a1 + 40);
  *(_OWORD *)&v30.mSampleRate = *(_OWORD *)((char *)a1 + 24);
  *(_OWORD *)&v30.mBytesPerPacket = v5;
  *(_QWORD *)&v30.mBitsPerChannel = *((_QWORD *)a1 + 7);
  memset(size, 0, sizeof(size));
  v6 = 0;
  if (!(*(unsigned int (**)(AudioFileObject *, _DWORD *, _QWORD))(*(_QWORD *)a1 + 400))(a1, size, 0)
    && size[0] >= 0xCu)
  {
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&size[1], size[0], 0);
    v6 = *(const AudioChannelLayout **)&size[1];
    (*(void (**)(AudioFileObject *, _DWORD *, _QWORD))(*(_QWORD *)a1 + 408))(a1, size, *(_QWORD *)&size[1]);
  }
  *(_QWORD *)&v28[1] = 0;
  v28[0] = 0;
  (*(void (**)(AudioFileObject *, _DWORD *, _QWORD))(*(_QWORD *)a1 + 328))(a1, v28, 0);
  if (v28[0])
  {
    CADeprecated::CAAutoFree<char>::allocBytes((void **)&v28[1], v28[0], 0);
    v7 = *(void **)&v28[1];
    (*(void (**)(AudioFileObject *, _DWORD *, _QWORD))(*(_QWORD *)a1 + 336))(a1, v28, *(_QWORD *)&v28[1]);
    v8 = v28[0];
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  BufferedSoundCheckAnalyzer::Start((BufferedSoundCheckAnalyzer *)v4, &v30, v6, v7, v8);
  v9 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)a1 + 632))(a1);
  if (v9 <= v30.mBytesPerPacket)
    mBytesPerPacket = v30.mBytesPerPacket;
  else
    mBytesPerPacket = v9;
  if (v30.mBytesPerPacket)
  {
    v11 = 0;
    LODWORD(v12) = 0x8000;
LABEL_16:
    v15 = v12 * mBytesPerPacket;
    CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v27, v12 * mBytesPerPacket, 0);
    v16 = 0;
    __src.mNumberBuffers = 1;
    __src.mBuffers[0].mNumberChannels = 1;
    __src.mBuffers[0].mDataByteSize = v12 * mBytesPerPacket;
    __src.mBuffers[0].mData = v27;
    while (1)
    {
      LODWORD(Mutable) = v15;
      v25 = v12;
      v17 = (*(uint64_t (**)(AudioFileObject *, _QWORD, __CFDictionary **, AudioStreamPacketDescription *, uint64_t, unsigned int *))(*(_QWORD *)a1 + 96))(a1, 0, &Mutable, v11, v16, &v25);
      v18 = v17;
      if ((_DWORD)v17)
        break;
      v19 = v25;
      if (!v25)
        goto LABEL_22;
      v18 = BufferedSoundCheckAnalyzer::ProcessBuffer((BufferedSoundCheckAnalyzer *)v4, v25, &__src, v11);
      if ((_DWORD)v18)
        goto LABEL_25;
      v16 += v19;
    }
    if ((_DWORD)v17 != -39)
      goto LABEL_25;
LABEL_22:
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v24 = 257;
    (*(void (**)(uint64_t, __CFDictionary **))(*(_QWORD *)v4 + 16))(v4, &Mutable);
    CACFDictionary::AddDictionary(a2, CFSTR("main loudness parameters"), Mutable);
    v25 = 0;
    (*(void (**)(AudioFileObject *, unsigned int *))(*(_QWORD *)a1 + 696))(a1, &v25);
    if ((int)v25 >= 1)
      CACFDictionary::AddUInt32(a2, CFSTR("bit depth pcm master"));
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
    v18 = 0;
LABEL_25:
    if (v27)
      free(v27);
    if (v11)
    {
      free(v11);
      v7 = *(void **)&v28[1];
    }
    if (v7)
      goto LABEL_30;
    goto LABEL_31;
  }
  mFramesPerPacket = v30.mFramesPerPacket;
  if (v30.mFramesPerPacket)
  {
    v12 = (v30.mFramesPerPacket + 0x7FFF) / v30.mFramesPerPacket;
    v14 = (AudioStreamPacketDescription *)malloc_type_malloc(16 * v12, 0x2C8E6D5CuLL);
    v11 = v14;
    if (mFramesPerPacket <= 0xFFFF8000 && !v14)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v22 = std::bad_alloc::bad_alloc(exception);
    }
    bzero(v14, 16 * v12);
    goto LABEL_16;
  }
  v18 = 1718449215;
  if (v7)
LABEL_30:
    free(v7);
LABEL_31:
  if (*(_QWORD *)&size[1])
    free(*(void **)&size[1]);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v18;
}

void sub_18F0B1D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  uint64_t v20;
  void *v21;

  if (a16)
    free(a16);
  if (v21)
    free(v21);
  if (a18)
    free(a18);
  if (a20)
    free(a20);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  _Unwind_Resume(a1);
}

uint64_t AudioFileGetSoundCheckDictionaryFromLoudnessInfo(AudioFileObject *a1, CACFDictionary *a2)
{
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  __int16 v7;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = 257;
  v4 = (*(uint64_t (**)(AudioFileObject *, CFMutableDictionaryRef *))(*(_QWORD *)a1 + 472))(a1, &Mutable);
  if (!(_DWORD)v4)
    AudioFileGetSoundCheckDictionaryFromLoudnessInfo((const CACFDictionary *)&Mutable, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v4;
}

void sub_18F0B1E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

void AudioFileGetSoundCheckDictionaryFromLoudnessInfo(const CACFDictionary *a1, CACFDictionary *a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *__p[3];
  void **v9[3];
  CFMutableDictionaryRef Mutable;
  __int16 v11;
  __CFDictionary *v12;

  v12 = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = 257;
  if (CACFDictionary::GetDictionary(a1, CFSTR("sound check info"), &v12))
  {
    CACFDictionary::operator=((uint64_t)&Mutable, v12);
    v4 = CACFDictionary::Size((CACFDictionary *)&Mutable);
    v5 = v4;
    std::vector<__CFString const*>::vector(v9, v4);
    std::vector<void const*>::vector(__p, v4);
    CACFDictionary::GetKeysAndValues((CACFDictionary *)&Mutable, (const void **)v9[0], (const void **)__p[0]);
    if (v4)
    {
      v6 = 0;
      v7 = 8 * v5;
      do
      {
        CACFDictionary::AddCFType(a2, (const __CFString *)v9[0][v6 / 8], *(const void **)((char *)__p[0] + v6));
        v6 += 8;
      }
      while (v7 != v6);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v9[0])
    {
      v9[1] = v9[0];
      operator delete(v9[0]);
    }
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
}

void sub_18F0B1F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a16);
  _Unwind_Resume(a1);
}

uint64_t CACFDictionary::operator=(uint64_t a1, const void *a2)
{
  const void *v4;
  int v5;

  if (!*(_BYTE *)(a1 + 8))
  {
    *(_QWORD *)a1 = a2;
    *(_BYTE *)(a1 + 9) = 0;
    return a1;
  }
  v4 = *(const void **)a1;
  if (!*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = a2;
    *(_BYTE *)(a1 + 9) = 0;
    if (!a2)
      return a1;
LABEL_8:
    CFRetain(a2);
    return a1;
  }
  CFRelease(v4);
  v5 = *(unsigned __int8 *)(a1 + 8);
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 9) = 0;
  if (a2 && v5)
    goto LABEL_8;
  return a1;
}

void AudioFileGetLoudnessInfoFromSoundCheckDictionary(CFDictionaryRef *a1, CACFDictionary *a2)
{
  CFMutableDictionaryRef MutableCopy;
  BOOL v5;
  const __CFString *v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  __CFDictionary *v12;
  __int16 v13;
  __CFDictionary *Mutable;
  __int16 v15;
  unsigned int v16[2];
  CFTypeRef cf;
  __int16 v18;
  _QWORD v19[2];
  _QWORD v20[3];
  _QWORD v21[8];

  v21[7] = *MEMORY[0x1E0C80C00];
  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v18 = 257;
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *a1);
  if (!cf)
  {
    cf = MutableCopy;
    HIBYTE(v18) = 1;
    if (!MutableCopy)
      goto LABEL_10;
    goto LABEL_9;
  }
  CFRelease(cf);
  cf = MutableCopy;
  HIBYTE(v18) = 1;
  if (MutableCopy)
    v5 = v18 == 0;
  else
    v5 = 1;
  if (!v5)
LABEL_9:
    CFRetain(MutableCopy);
LABEL_10:
  *(_QWORD *)v16 = 0;
  if (CACFDictionary::GetUInt32FromString((CACFDictionary *)&cf, CFSTR("aa bit depth pcm master"), &v16[1]))CACFDictionary::AddUInt32(a2, CFSTR("bit depth pcm master"));
  v21[0] = CFSTR("aa itu loudness");
  v21[1] = CFSTR("aa ebu loudness range");
  v21[2] = CFSTR("aa ebu top of loudness range");
  v21[3] = CFSTR("aa itu true peak");
  v21[4] = CFSTR("aa ebu max momentary loudness");
  v21[5] = CFSTR("aa ebu max short-term loudness");
  v21[6] = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v15 = 257;
  v6 = CFSTR("aa itu loudness");
  v7 = 1;
  do
  {
    if (CACFDictionary::GetFloat32FromString((CACFDictionary *)&cf, v6, (float *)v16))
    {
      CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, v6, *(float *)v16);
      if (HIBYTE(v18))
      {
        if (cf)
          CFDictionaryRemoveValue((CFMutableDictionaryRef)cf, v6);
      }
    }
    v6 = (const __CFString *)v21[v7++];
  }
  while (v6);
  v20[0] = CFSTR("aa headroom master");
  v20[1] = CFSTR("aa noise floor master");
  v20[2] = 0;
  v12 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = 257;
  v8 = CFSTR("aa headroom master");
  v9 = 1;
  do
  {
    if (CACFDictionary::GetFloat32FromString((CACFDictionary *)&cf, v8, (float *)v16))
    {
      CACFDictionary::AddUInt32((CACFDictionary *)&v12, v8);
      if (HIBYTE(v18))
      {
        if (cf)
          CFDictionaryRemoveValue((CFMutableDictionaryRef)cf, v8);
      }
    }
    v8 = (const __CFString *)v20[v9++];
  }
  while (v8);
  v10 = CFSTR("aa source bandwidth master");
  v19[0] = CFSTR("aa source bandwidth master");
  v19[1] = 0;
  v11 = 1;
  do
  {
    if (CACFDictionary::GetUInt32FromString((CACFDictionary *)&cf, v10, &v16[1]))
    {
      CACFDictionary::AddUInt32((CACFDictionary *)&v12, v10);
      if (HIBYTE(v18))
      {
        if (cf)
          CFDictionaryRemoveValue((CFMutableDictionaryRef)cf, v10);
      }
    }
    v10 = (const __CFString *)v19[v11++];
  }
  while (v10);
  if (CACFDictionary::Size((CACFDictionary *)&cf))
    CACFDictionary::AddDictionary(a2, CFSTR("sound check info"), (const __CFDictionary *)cf);
  if (CACFDictionary::Size((CACFDictionary *)&Mutable))
    CACFDictionary::AddDictionary(a2, CFSTR("main loudness parameters"), Mutable);
  if (CACFDictionary::Size((CACFDictionary *)&v12))
    CACFDictionary::AddDictionary(a2, CFSTR("additional loudness parameters"), v12);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v12);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
}

void sub_18F0B234C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  _Unwind_Resume(a1);
}

uint64_t GetStoreItemKindFromLID(CACFDictionary *a1)
{
  uint64_t v1;
  CFStringRef theString1;

  theString1 = 0;
  if (!CACFDictionary::GetString(a1, CFSTR("media kind"), &theString1))
    return 0;
  v1 = 1;
  if (CFStringCompare(theString1, CFSTR("Music"), 1uLL))
  {
    if (CFStringCompare(theString1, CFSTR("Podcast"), 1uLL))
    {
      if (CFStringCompare(theString1, CFSTR("Audiobook"), 1uLL))
      {
        if (CFStringCompare(theString1, CFSTR("Movie"), 1uLL))
        {
          if (CFStringCompare(theString1, CFSTR("TV Show"), 1uLL))
          {
            if (CFStringCompare(theString1, CFSTR("Music Video"), 1uLL))
            {
              if (CFStringCompare(theString1, CFSTR("iTunes U"), 1uLL))
              {
                if (CFStringCompare(theString1, CFSTR("Home Video"), 1uLL))
                {
                  if (CFStringCompare(theString1, CFSTR("Voice Memo"), 1uLL))
                    return 0;
                  else
                    return 33;
                }
                else
                {
                  return 32;
                }
              }
              else
              {
                return 24;
              }
            }
            else
            {
              return 6;
            }
          }
          else
          {
            return 29;
          }
        }
        else
        {
          return 9;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 8;
    }
  }
  return v1;
}

uint64_t LoudnessMethodsCountFromLID(const CACFDictionary *a1, unsigned int *a2)
{
  uint64_t HasKey;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  CFMutableDictionaryRef Mutable;
  __int16 v14;

  if (CACFDictionary::HasKey(a1, CFSTR("dialogue anchor parameters")))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v14 = 257;
    CACFDictionary::GetCACFDictionary(a1, CFSTR("dialogue anchor parameters"), (CACFDictionary *)&Mutable);
    HasKey = CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa itu loudness"));
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  else
  {
    HasKey = 0;
  }
  if (CACFDictionary::HasKey(a1, CFSTR("main loudness parameters")))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v14 = 257;
    CACFDictionary::GetCACFDictionary(a1, CFSTR("main loudness parameters"), (CACFDictionary *)&Mutable);
    v5 = CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa itu loudness"));
    v6 = CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa ebu loudness range"));
    v7 = CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa ebu top of loudness range"));
    v8 = CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa ebu max momentary loudness"));
    v9 = CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa ebu max short-term loudness"));
    v10 = CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa production mixing level"));
    v11 = CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa production room type"));
    HasKey = (_DWORD)HasKey
           + v5
           + v6
           + v7
           + v8
           + v9
           + v10
           + v11
           + CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa short term loudness"));
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  if (CACFDictionary::HasKey(a1, CFSTR("album loudness parameters")))
  {
    *a2 = 0;
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v14 = 257;
    CACFDictionary::GetCACFDictionary(a1, CFSTR("album loudness parameters"), (CACFDictionary *)&Mutable);
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa itu loudness")))
      ++*a2;
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa ebu loudness range")))
      ++*a2;
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa ebu top of loudness range")))
      ++*a2;
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa ebu max momentary loudness")))
      ++*a2;
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa ebu max short-term loudness")))
      ++*a2;
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa production mixing level")))
      ++*a2;
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa production room type")))
      ++*a2;
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("aa short term loudness")))
      ++*a2;
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  return HasKey;
}

void sub_18F0B2820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

uint64_t CompressLoudnessRange(float a1)
{
  int v1;

  if (a1 >= 0.0)
  {
    if (a1 <= 32.0)
    {
      return (int)(float)((float)(a1 * 4.0) + 0.5);
    }
    else if (a1 <= 70.0)
    {
      return ((int)(float)((float)((float)(a1 + -32.0) * 2.0) + 0.5) ^ 0xFFFFFF80);
    }
    else if (a1 >= 121.0)
    {
      LOBYTE(v1) = -1;
    }
    else
    {
      return ((int)(float)((float)(a1 + -70.0) + 0.5) - 52);
    }
  }
  else
  {
    LOBYTE(v1) = 0;
  }
  return v1;
}

void PacketDependencyParser::PacketDependencyParser(PacketDependencyParser *this, const AudioStreamBasicDescription *a2, unsigned __int8 *a3, int a4)
{
  AudioFormatID mFormatID;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  _BYTE v26[296];
  _DWORD v27[10];
  uint64_t v28;
  uint64_t v29;
  _DWORD v30[276];
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  mFormatID = a2->mFormatID;
  *(_DWORD *)this = mFormatID;
  if (mFormatID == 1970495843 && a3 != 0 && a4 != 0)
  {
    v9 = a3;
    v27[2] = 0;
    v28 = 0;
    v29 = 0;
    v30[2] = 0;
    MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v30);
    v32 = 0u;
    v31 = 0u;
    DecoderConfigDescr::cleanup((DecoderConfigDescr *)v27);
    bzero(v26, 0x5F0uLL);
    v10 = &v9[a4];
    v24[0] = v9;
    v24[1] = v10;
    v25 = 0;
    if ((v9 & 3) != 0)
    {
      v11 = 0;
      v12 = (_BYTE)v9 + 1;
      v13 = -8;
      do
      {
        v14 = v13;
        v15 = *v9++;
        v11 = v15 | (v11 << 8);
        v13 += 8;
        if ((v12 & 3) == 0)
          break;
        ++v12;
      }
      while (v9 < v10);
      v24[0] = v9;
      LODWORD(v25) = v11 << (24 - v13);
      HIDWORD(v25) = v14 + 16;
    }
    if (!MP4AudioESDS::Deserialize((uint64_t)v26, (uint64_t)v24, 0, 0))
    {
      if ((_DWORD)v28 == 42 && (_QWORD)v31)
      {
        if (*(_DWORD *)(v31 + 12) >= 2u)
        {
          if (*(_BYTE *)(v31 + 74))
            v16 = 3;
          else
            v16 = 2;
        }
        else
        {
          v16 = 1;
        }
        v23 = v31;
        *((_DWORD *)this + 1) = v16;
        if (*(_BYTE *)(v23 + 184))
          *((_DWORD *)this + 2) = 1;
      }
      else
      {
        *((_DWORD *)this + 1) = 0;
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_18F0B2AF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)STACK[0x600];
  if (STACK[0x600])
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)STACK[0x5F0];
  if (STACK[0x5F0])
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  _Unwind_Resume(a1);
}

_DWORD *PacketDependencyParser::PacketDependencyInfo(_DWORD *result, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;

  if (*result == 1634754915)
  {
    v8 = *(_DWORD *)(a2 + 24);
    v7 = *(_DWORD *)(a2 + 28);
    v9 = v8 >> 30;
    *(_DWORD *)(a2 + 28) = v7 - 2;
    if (v7 - 2 < 0)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v11 = *(_QWORD *)(a2 + 16);
      v13 = *(unsigned int **)a2;
      if ((((_DWORD)v11 - *(_DWORD *)a2) & ~((uint64_t)(v11 - *(_QWORD *)a2) >> 63) & 0xFFFFFFFC) == 0
        || v12 > (unint64_t)v13)
      {
        v15 = 0;
        do
        {
          v16 = (unsigned __int8 *)v13 + v15;
          v17 = v8 << 8;
          *(_DWORD *)(a2 + 24) = v17;
          v18 = 255;
          if ((unint64_t)v13 + v15 < v11 && (unint64_t)v16 >= v12)
            v18 = *v16;
          v8 = v18 | v17;
          *(_DWORD *)(a2 + 24) = v8;
          ++v15;
        }
        while ((_DWORD)v15 != 4);
      }
      else
      {
        v8 = bswap32(*v13);
      }
      v19 = v8 << (2 - v7);
      v20 = v7 + 30;
      *(_DWORD *)(a2 + 28) = v20;
      *(_QWORD *)a2 = v13 + 1;
      v9 |= v8 >> v20;
      if (v20)
        v10 = v19;
      else
        v10 = 0;
    }
    else
    {
      v10 = 4 * v8;
    }
    *(_DWORD *)(a2 + 24) = v10;
    if (v9 == 2)
    {
      *(_QWORD *)a3 = 0;
      return result;
    }
    if (v9 == 1)
    {
      v21 = 0x100000000;
LABEL_31:
      *(_QWORD *)a3 = v21;
      return result;
    }
LABEL_30:
    v21 = 1;
    goto LABEL_31;
  }
  if (*result != 1970495843)
    goto LABEL_30;
  v5 = result[1];
  v6 = result[2];
  *(_QWORD *)a3 = 1;
  if (*(_DWORD *)(a2 + 28) + 8 * (*(_DWORD *)(a2 + 16) - *(_DWORD *)a2))
  {
    result = (_DWORD *)AT::TBitstreamReader<unsigned int>::GetBit(a2);
    if ((_DWORD)result)
    {
      if (v6 != 1)
        goto LABEL_11;
      if (!(*(_DWORD *)(a2 + 28) + 8 * (*(_DWORD *)(a2 + 16) - *(_DWORD *)a2)))
        return result;
      result = (_DWORD *)AT::TBitstreamReader<unsigned int>::GetBit(a2);
      if (!(_DWORD)result)
      {
LABEL_11:
        *(_DWORD *)a3 = 0;
        *(_DWORD *)(a3 + 4) = (__int16)v5;
        return result;
      }
      if (*(_DWORD *)(a2 + 28) + 8 * (*(_DWORD *)(a2 + 16) - *(_DWORD *)a2))
      {
        result = (_DWORD *)AT::TBitstreamReader<unsigned int>::GetBit(a2);
        if (!(_DWORD)result)
          LOWORD(v5) = 0;
        goto LABEL_11;
      }
    }
  }
  return result;
}

void PacketDurationParser::PacketDurationParser(PacketDurationParser *this, const AudioStreamBasicDescription *a2, const void *a3, int a4)
{
  AudioFormatID mFormatID;
  __int128 v6;
  int32x2_t v7;
  int8x16_t v8;
  int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  int32x4_t v13;
  unsigned int v14;
  uint32x4_t v15;
  int32x4_t v16;
  uint32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  UInt32 ioPropertyDataSize;
  _OWORD inSpecifier[2];
  uint64_t v22;
  const void *v23;
  uint64_t v24;

  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  mFormatID = a2->mFormatID;
  *(_DWORD *)this = mFormatID;
  *((_DWORD *)this + 1) = a2->mFramesPerPacket;
  if (mFormatID != 1987015266)
  {
LABEL_10:
    *((_BYTE *)this + 40) = 1;
    return;
  }
  v23 = a3;
  v24 = 0;
  v6 = *(_OWORD *)&a2->mBytesPerPacket;
  inSpecifier[0] = *(_OWORD *)&a2->mSampleRate;
  inSpecifier[1] = v6;
  v22 = *(_QWORD *)&a2->mBitsPerChannel;
  LODWORD(v24) = a4;
  ioPropertyDataSize = 24;
  if (!AudioFormatGetProperty(0x766E666Fu, 0x38u, inSpecifier, &ioPropertyDataSize, (char *)this + 8))
  {
    v9 = *((_DWORD *)this + 4);
    if (v9)
    {
      v10 = v9 - 1;
      if (v9 != 1)
      {
        v11 = -1;
        do
        {
          ++v11;
          v12 = v10 > 1;
          v10 >>= 1;
        }
        while (v12);
        v7.i32[0] = v11;
        v8.i32[0] = *((_DWORD *)this + 8);
        v13 = (int32x4_t)xmmword_18F116EA0;
        v14 = (v11 & 0xFFFFFFFC) + 4;
        v15.i64[0] = 0x100000001;
        v15.i64[1] = 0x100000001;
        v16.i64[0] = 0x400000004;
        v16.i64[1] = 0x400000004;
        do
        {
          v17 = (uint32x4_t)v13;
          v18 = v8;
          v8 = vorrq_s8(v8, (int8x16_t)vshlq_u32(v15, (uint32x4_t)v13));
          v13 = vaddq_s32(v13, v16);
          v14 -= 4;
        }
        while (v14);
        v19 = vbslq_s8((int8x16_t)vcgtq_u32(v17, (uint32x4_t)vdupq_lane_s32(v7, 0)), v18, v8);
        *(int8x8_t *)v19.i8 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
        *((_DWORD *)this + 8) = v19.i32[0] | v19.i32[1];
      }
      goto LABEL_10;
    }
  }
}

uint64_t PacketDurationParser::FramesInPacket(PacketDurationParser *this, _BYTE *a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  int v13;

  v3 = *((unsigned int *)this + 1);
  if (!(_DWORD)v3)
  {
    v4 = *(_DWORD *)this;
    v5 = *(_DWORD *)this == 1987015266;
    if (*(_DWORD *)this == 1869641075)
      v5 = 2;
    if (v5 > a3)
      return 0;
    if (v4 != 1987015266)
    {
      if (v4 == 1869641075)
      {
        v6 = *a2;
        if ((v6 & 3) - 1 < 2)
        {
          v7 = 2;
          return (OpusConfigToPCMFrameCount(unsigned char)::pcmFrameCountArray[v6 >> 3] * v7);
        }
        if ((v6 & 3) != 3)
        {
          v7 = 1;
          return (OpusConfigToPCMFrameCount(unsigned char)::pcmFrameCountArray[v6 >> 3] * v7);
        }
        if (a3 >= 2)
        {
          v7 = a2[1] & 0x3F;
          return (OpusConfigToPCMFrameCount(unsigned char)::pcmFrameCountArray[v6 >> 3] * v7);
        }
      }
      return 0;
    }
    v8 = *a2;
    if ((v8 & 1) != 0)
      return 0;
    v9 = *((_DWORD *)this + 8) & (v8 >> 1);
    if (v9 >= *((_DWORD *)this + 4))
      return 0;
    v10 = (*((_QWORD *)this + 3) & (1 << v9)) == 0;
    v11 = 12;
    if (v10)
      v11 = 8;
    v12 = *(_DWORD *)((char *)this + v11);
    v13 = *((_DWORD *)this + 9);
    if (v13)
      v3 = (v13 + v12) >> 2;
    else
      v3 = 1;
    *((_DWORD *)this + 9) = v12;
  }
  return v3;
}

void MP4BoxParser_MovieHeader::~MP4BoxParser_MovieHeader(MP4BoxParser_MovieHeader *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_MovieHeader::Init(MP4BoxParser **this)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;
  int8x8_t v6;
  __int128 v7;
  unsigned int v8;
  int8x16_t v9;
  unsigned int v10;
  unint64_t v11;

  result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) != 1836476516)
      return 4294967294;
    if (*((_BYTE *)this + 56) == 1)
    {
      v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      result = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 0x20uLL, &v9);
      if ((_DWORD)result)
        return result;
      *((int8x16_t *)this + 4) = vrev64q_s8(v9);
      *((_DWORD *)this + 20) = bswap32(v10);
      v4 = bswap64(v11);
    }
    else
    {
      v5 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      result = MP4BoxParser::ReadDataSourceBytes(this[1], v5, 0x10uLL, &v9);
      if ((_DWORD)result)
        return result;
      v6 = vrev32_s8(*(int8x8_t *)v9.i8);
      *(_QWORD *)&v7 = v6.u32[0];
      *((_QWORD *)&v7 + 1) = v6.u32[1];
      *((_OWORD *)this + 4) = v7;
      v8 = v9.u32[3];
      *((_DWORD *)this + 20) = bswap32(v9.u32[2]);
      v4 = bswap32(v8);
    }
    this[11] = (MP4BoxParser *)v4;
  }
  return result;
}

void AudioConverterOOP::~AudioConverterOOP(AudioConverterOOP *this)
{
  AudioConverterOOP::~AudioConverterOOP(this);
  JUMPOUT(0x193FFE460);
}

{
  NSObject *v2;
  unsigned __int8 v3;
  uint64_t v4;
  swix::connection *v5;
  _BYTE v6[8];
  xpc_object_t v7;
  uint8_t buf[4];
  _BYTE object[14];
  __int16 v10;
  AudioConverterOOP *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E2906F78;
  if (!*((_BYTE *)this + 12) && *((_BYTE *)this + 13))
  {
    if (*((_BYTE *)this + 72))
    {
      AT::ScopedTrace::~ScopedTrace((AudioConverterOOP *)((char *)this + 32));
      *((_BYTE *)this + 72) = 0;
    }
    *((_BYTE *)this + 32) = 1;
    *((_DWORD *)this + 9) = 2757;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    kdebug_trace();
    *((_BYTE *)this + 72) = 1;
  }
  AudioConverterLog();
  v2 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)object = "AudioConverterOOP.cpp";
    *(_WORD *)&object[8] = 1024;
    *(_DWORD *)&object[10] = 453;
    v10 = 2048;
    v11 = this;
    _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioConverterOOP -> %p: Disposing of service.", buf, 0x1Cu);
  }
  v3 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 10) + 232));
  if ((v3 & 1) != 0)
  {
    v4 = **((_QWORD **)this + 10);
    MEMORY[0x193FFDBA8](v6, 74777832);
    v5 = *(swix::connection **)(v4 + 8);
    if (!v5)
      std::terminate();
    swix::connection::send_and_await_reply(v5, (const swix::encode_message *)v6);
    swix::coder<int>::decode(*(void **)&object[4], ".error");
    xpc_release(*(xpc_object_t *)&object[4]);
    xpc_release(v7);
  }
  std::unique_ptr<AudioConverterOOP::Impl>::reset[abi:ne180100]((uint64_t **)this + 10);
  if (*((_BYTE *)this + 72))
    AT::ScopedTrace::~ScopedTrace((AudioConverterOOP *)((char *)this + 32));
  AudioConverterAPI::~AudioConverterAPI(this);
}

uint64_t AudioConverterOOP::reset(AudioConverterOOP *this, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 561145203;
  v4 = *(_QWORD *)(*((_QWORD *)this + 10) + 8);
  v5 = *(_QWORD *)(v4 + 240);
  if (audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::can_send(v4, a2))
  {
    *(_BYTE *)v5 = 3;
    if (audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::signal_wait_with_timeout(v4, 3.0))
    {
      v3 = *(unsigned int *)(v5 + 4);
    }
    else
    {
      v3 = 561145203;
    }
  }
  v6 = *((_QWORD *)this + 10);
  *(_DWORD *)(*(_QWORD *)(v6 + 72) + 60) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_DWORD *)(v6 + 108) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  return v3;
}

uint64_t AudioConverterOOP::getPropertyInfo(AudioConverterOOP *this, unsigned int a2, unsigned int *a3, BOOL *a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  swix::connection *v12;
  BOOL v13;
  uint64_t v14;
  char v16[4];
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[4];
  int v24;
  xpc_object_t xdict;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[8];
  xpc_object_t v30;

  v8 = a2;
  if (*((_BYTE *)this + 12) || !*((_BYTE *)this + 13))
  {
    v16[0] = 0;
    v22 = 0;
  }
  else
  {
    v24 = 2755;
    xdict = (xpc_object_t)a2;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    kdebug_trace();
    v16[0] = 1;
    v17 = 2755;
    v18 = v8;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v23[0] = 0;
    v22 = 1;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v23);
  }
  v9 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 10) + 232));
  if ((v9 & 1) != 0)
  {
    if (a2 == 1970103906)
    {
      v10 = 0;
      *a3 = 4;
      *a4 = 1;
    }
    else if (a2 == 1885955104 && PlatformUtilities::IsInternalBuild(this))
    {
      v10 = 0;
      *a3 = 4;
      *a4 = 0;
    }
    else
    {
      v11 = **((_QWORD **)this + 10);
      MEMORY[0x193FFDBA8](v29, 74777834);
      xpc_dictionary_set_uint64(v30, "propertyID", v8);
      v12 = *(swix::connection **)(v11 + 8);
      if (!v12)
        std::terminate();
      swix::connection::send_and_await_reply(v12, (const swix::encode_message *)v29);
      v10 = swix::coder<int>::decode(xdict, ".error");
      if ((_DWORD)v10)
      {
        v13 = 0;
        v14 = 0;
      }
      else
      {
        v10 = swix::coder<unsigned int>::decode(xdict, "dataSize");
        v13 = xpc_dictionary_get_BOOL(xdict, "outWritable");
        v14 = 1;
      }
      xpc_release(xdict);
      xpc_release(v30);
      if (v14 || !(_DWORD)v10)
      {
        if (a3)
          *a3 = v10;
        if (a4)
          *a4 = v13;
        if (v14)
          v10 = 0;
      }
    }
  }
  else
  {
    v10 = 560164718;
  }
  if (v22)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v16);
  return v10;
}

void sub_18F0B3380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a9);
  _Unwind_Resume(exception_object);
}

void sub_18F0B339C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  xpc_release(object);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18F0B3328);
}

uint64_t AudioConverterOOP::getProperty(AudioConverterOOP *this, int a2, unsigned int *a3, const void **a4)
{
  uint64_t v8;
  uint64_t v9;
  swix::connection *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t SpeechCodecBundleData;
  uint64_t v15;
  uint64_t v16;
  caulk::concurrent::message *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t message;
  caulk::concurrent::message *v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned __int8 v24;
  unint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  caulk::concurrent::message *v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  const UInt8 *BytePtr;
  size_t Length;
  uint64_t v36;
  swix::connection *v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  const void *bytes_ptr;
  AudioConverterCapturer *v45;
  uint64_t v47;
  uint64_t v48;
  caulk::concurrent::message *v49;
  void (**v50)(AudioConverterPropertyMarshaller *__hidden);
  xpc_object_t xdict;
  xpc_object_t value;
  void (**v53)(AudioConverterPropertyMarshaller *__hidden);
  xpc_object_t object;
  uint64_t v55;
  CFDataRef *v56;
  uint64_t v57;
  char v58[4];
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  const void **v65;
  xpc_object_t v66;
  xpc_object_t v67;
  xpc_object_t v68;

  v65 = a4;
  v8 = a2;
  if (*((_BYTE *)this + 12) || !*((_BYTE *)this + 13))
  {
    v58[0] = 0;
    v64 = 0;
    if (!a4)
      goto LABEL_15;
  }
  else
  {
    HIDWORD(v53) = 2754;
    object = (xpc_object_t)a2;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    kdebug_trace();
    v58[0] = 1;
    v59 = 2754;
    v60 = v8;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    LOBYTE(v53) = 0;
    v64 = 1;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&v53);
    if (!a4)
    {
LABEL_15:
      v19 = _os_log_pack_size();
      message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v19 + 88, 16);
      if (message)
      {
        v21 = (caulk::concurrent::message *)message;
        v22 = (_DWORD *)_os_log_pack_fill();
        *v22 = 67109120;
        v22[1] = a2;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v21);
      }
LABEL_80:
      SpeechCodecBundleData = 4294967246;
      goto LABEL_75;
    }
  }
  if (!a3)
  {
    v47 = _os_log_pack_size();
    v48 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v47 + 88, 16);
    if (v48)
    {
      v49 = (caulk::concurrent::message *)v48;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v49);
    }
    goto LABEL_80;
  }
  if (a2 == 1885955104)
  {
    if (PlatformUtilities::IsInternalBuild(this))
    {
      if (*a3 >= 4)
      {
        *a3 = 4;
        v9 = **((_QWORD **)this + 10);
        MEMORY[0x193FFDBA8](&v50, 74777825);
        v10 = *(swix::connection **)(v9 + 8);
        if (v10)
        {
          swix::connection::send_and_await_reply(v10, (const swix::encode_message *)&v50);
          v11 = swix::coder<int>::decode(object, ".error");
          if (v11)
          {
            v12 = 0;
          }
          else
          {
            v11 = swix::coder<int>::decode(object, "process");
            v12 = 0x100000000;
          }
          xpc_release(object);
          xpc_release(xdict);
          SpeechCodecBundleData = 0;
          v25 = v12 & 0x100000000 | v11;
          if (v25 <= 0x100000000)
            LODWORD(v25) = 0;
          *(_DWORD *)v65 = v25;
          goto LABEL_75;
        }
LABEL_81:
        std::terminate();
      }
LABEL_35:
      SpeechCodecBundleData = 561211770;
      goto LABEL_75;
    }
    goto LABEL_30;
  }
  v13 = CheckProperty(a2, a4, a3);
  if (!(_DWORD)v13)
  {
    if (a2 == 1970103906)
    {
      if (*a3 == 4)
      {
        SpeechCodecBundleData = 0;
        *(_DWORD *)a4 = *(_QWORD *)(*((_QWORD *)this + 10) + 24) != 0;
        goto LABEL_75;
      }
      goto LABEL_35;
    }
    if (a2 == 1651401828)
    {
      v23 = *((_QWORD *)this + 10);
      if (*(_QWORD *)(v23 + 24))
      {
        v24 = atomic_load((unsigned __int8 *)(v23 + 232));
        if ((v24 & 1) == 0)
        {
          SpeechCodecBundleData = 560164718;
          goto LABEL_75;
        }
        if (*a3 != 336)
          goto LABEL_35;
        SpeechCodecBundleData = AudioConverterPropertyClient::getSpeechCodecBundleData(*(_QWORD *)(*((_QWORD *)this + 10) + 24), v65);
        if ((_DWORD)SpeechCodecBundleData != 1768846202)
          goto LABEL_75;
      }
    }
LABEL_30:
    PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)&v53, 0);
    v26 = 0;
    v53 = &off_1E2909960;
    if (a2 <= 1668244082)
    {
      if (a2 > 1651401827)
      {
        if (a2 == 1651401828)
          goto LABEL_44;
        v27 = 1667850867;
      }
      else
      {
        if (a2 == 1633904233)
          goto LABEL_44;
        v27 = 1633904236;
      }
    }
    else
    {
      if (a2 > 1685218163)
      {
        if (a2 != 1685218164 && a2 != 1986946671)
        {
          v27 = 1832022884;
          goto LABEL_43;
        }
LABEL_44:
        SpeechCodecBundleData = PropertyMarshaller::Serialize();
        if ((_DWORD)SpeechCodecBundleData)
        {
          v28 = _os_log_pack_size();
          v29 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v28 + 88, 16);
          if (v29)
          {
            v30 = (caulk::concurrent::message *)v29;
            v31 = _os_log_pack_fill();
            *(_DWORD *)v31 = 134218496;
            *(_QWORD *)(v31 + 4) = this;
            *(_WORD *)(v31 + 12) = 1024;
            *(_DWORD *)(v31 + 14) = a2;
            *(_WORD *)(v31 + 18) = 1024;
            *(_DWORD *)(v31 + 20) = SpeechCodecBundleData;
            caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v30);
          }
          goto LABEL_74;
        }
        v26 = 1;
LABEL_48:
        v32 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 10) + 232));
        if ((v32 & 1) == 0)
        {
          SpeechCodecBundleData = 560164718;
          goto LABEL_74;
        }
        v33 = **((_QWORD **)this + 10);
        if (v56 && *v56)
        {
          BytePtr = CFDataGetBytePtr(*v56);
          if (v56 && *v56)
          {
            Length = CFDataGetLength(*v56);
LABEL_57:
            swix::data::data((swix::data *)&value, BytePtr, Length);
            v36 = *a3;
            MEMORY[0x193FFDBA8](&v67, 74777835);
            xpc_dictionary_set_uint64(v68, "propertyID", v8);
            xpc_dictionary_set_value(v68, "inData", value);
            xpc_dictionary_set_uint64(v68, "dataSize", v36);
            xpc_dictionary_set_BOOL(v68, "inputRequiredForProperty", v26);
            v37 = *(swix::connection **)(v33 + 8);
            if (!v37)
              goto LABEL_81;
            swix::connection::send_and_await_reply(v37, (const swix::encode_message *)&v67);
            v38 = swix::coder<int>::decode(xdict, ".error");
            if (v38)
            {
              v39 = 0;
              v40 = v38;
            }
            else
            {
              v41 = xpc_null_create();
              swix::xpcobj_coder<swix::data>::decode(&v66, xdict, "outData");
              v42 = v66;
              v43 = xpc_null_create();
              v66 = v43;
              xpc_release(v41);
              xpc_release(v43);
              LODWORD(v36) = swix::coder<unsigned int>::decode(xdict, "dataSize");
              if (v42)
              {
                xpc_retain(v42);
                v40 = (uint64_t)v42;
              }
              else
              {
                v40 = (uint64_t)xpc_null_create();
              }
              xpc_release(v42);
              v39 = 1;
            }
            xpc_release(xdict);
            xpc_release(v68);
            xpc_release(value);
            if (v39 || (SpeechCodecBundleData = v40, !(_DWORD)v40))
            {
              swix::data::data((swix::data *)&v67, (xpc_object_t)v40);
              bytes_ptr = xpc_data_get_bytes_ptr(v67);
              xpc_data_get_length(v67);
              PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)&v50, bytes_ptr);
              v50 = &off_1E2909960;
              SpeechCodecBundleData = PropertyMarshaller::Deserialize();
              *a3 = v36;
              PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)&v50);
              xpc_release(v67);
            }
            if (a2 == 1668114275)
            {
              v45 = *(AudioConverterCapturer **)(*(_QWORD *)(*((_QWORD *)this + 10) + 8) + 376);
              if (v45)
              {
                if (v65 && *a3)
                  AudioConverterCapturer::setDecompressionCookie(v45, v65, *a3);
              }
            }
            if (v39)
              xpc_release((xpc_object_t)v40);
LABEL_74:
            PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)&v53);
            goto LABEL_75;
          }
        }
        else
        {
          BytePtr = 0;
        }
        Length = 0;
        goto LABEL_57;
      }
      if (a2 == 1668244083)
        goto LABEL_44;
      v27 = 1668312419;
    }
LABEL_43:
    if (a2 != v27)
      goto LABEL_48;
    goto LABEL_44;
  }
  SpeechCodecBundleData = v13;
  v15 = _os_log_pack_size();
  v16 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v15 + 88, 16);
  if (v16)
  {
    v17 = (caulk::concurrent::message *)v16;
    v18 = _os_log_pack_fill();
    *(_DWORD *)v18 = 134218240;
    *(_QWORD *)(v18 + 4) = this;
    *(_WORD *)(v18 + 12) = 1024;
    *(_DWORD *)(v18 + 14) = a2;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v17);
  }
LABEL_75:
  if (v64)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v58);
  return SpeechCodecBundleData;
}

void sub_18F0B3B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, xpc_object_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a27)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a22);
  _Unwind_Resume(exception_object);
}

int64_t AudioConverterOOP::setProperty(AudioConverterOOP *this, unsigned int a2, const void *a3, int *a4)
{
  UInt32 v5;
  uint64_t v8;
  AudioConverterCapturer *v9;
  _BOOL4 v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t message;
  caulk::concurrent::message *v17;
  _DWORD *v18;
  int64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  caulk::concurrent::message *v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  caulk::concurrent::message *v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  uint64_t v46;
  size_t AllocSize;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  xpc_object_t v51;
  uint64_t v52;
  const UInt8 *BytePtr;
  size_t Length;
  swix::connection *v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v59;
  swix::connection *v60;
  uint64_t v61;
  NSObject *v62;
  const char *v63;
  swix::connection *v64;
  xpc_object_t value;
  char v66[4];
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  xpc_object_t v74;
  xpc_object_t object;
  xpc_object_t xdict;
  _BYTE buf[40];
  int v78;
  uint64_t v79;

  v5 = a3;
  v79 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  if (*((_BYTE *)this + 12) || !*((_BYTE *)this + 13))
  {
    v66[0] = 0;
    v72 = 0;
    if (!a4)
    {
LABEL_14:
      v15 = _os_log_pack_size();
      message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v15 + 88, 16);
      if (message)
      {
        v17 = (caulk::concurrent::message *)message;
        v18 = (_DWORD *)_os_log_pack_fill();
        *v18 = 67109120;
        v18[1] = a2;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v17);
      }
      v19 = 4294967246;
      goto LABEL_60;
    }
  }
  else
  {
    *(_DWORD *)&buf[4] = 2753;
    *(_QWORD *)&buf[8] = a2;
    memset(&buf[16], 0, 24);
    kdebug_trace();
    v66[0] = 1;
    v67 = 2753;
    v68 = v8;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    buf[0] = 0;
    v72 = 1;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)buf);
    if (!a4)
      goto LABEL_14;
  }
  if (a2 == 1684891491)
  {
    if (v5)
    {
      v9 = *(AudioConverterCapturer **)(*(_QWORD *)(*((_QWORD *)this + 10) + 8) + 368);
      if (v9)
        AudioConverterCapturer::setDecompressionCookie(v9, a4, v5);
    }
    v10 = v5 == 4;
  }
  else
  {
    v10 = v5 == 4;
    if (a2 == 1919837298 && v5 == 4)
    {
      v11 = *(_QWORD **)(*((_QWORD *)this + 10) + 8);
      v12 = *a4;
      v13 = v11[9];
      if (*a4)
        v14 = 0;
      else
        v14 = v11[42];
      v73 = v14;
      if (v14 != *(_QWORD *)(v13 + 88))
      {
        *(_QWORD *)(v13 + 88) = v14;
        v19 = ACOOPSharedMemory::calculateAndPartitionBuffers((ACOOPSharedMemory *)(v11 + 7));
        if ((_DWORD)v19
          || (v21 = v11[30],
              v19 = 561145203,
              !audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::can_send((uint64_t)v11, v20))|| (*(_BYTE *)v21 = 4, !audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::signal_wait_with_timeout((uint64_t)v11, 3.0))|| (v19 = *(unsigned int *)(v21 + 4), (_DWORD)v19))
        {
          AudioConverterLog();
          v22 = AudioConverterLog(void)::gLog;
          if (!os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
            goto LABEL_60;
          v23 = v11[44];
          v24 = "deallocate";
          *(_QWORD *)&buf[4] = "AudioConverterRenderClient.h";
          *(_DWORD *)buf = 136316162;
          *(_WORD *)&buf[12] = 1024;
          if (!v12)
            v24 = "allocate";
          *(_DWORD *)&buf[14] = 77;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v23;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v24;
          *(_WORD *)&buf[38] = 1024;
          v78 = v19;
          v25 = "%25s:%-5d AudioConverter -> %p: Repartitioning the shared memory to %s metadata failed. Returning %i";
          v26 = v22;
          v27 = 44;
          goto LABEL_27;
        }
      }
      v10 = 1;
    }
  }
  v28 = CheckProperty(a2, a4, a3);
  if (!(_DWORD)v28)
  {
    if (a2 == 1970103906)
    {
      if (!v10)
      {
        v19 = 561211770;
        goto LABEL_60;
      }
      v33 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 10) + 232));
      if ((v33 & 1) == 0)
      {
        v19 = 560164718;
        goto LABEL_60;
      }
      v39 = (uint64_t *)*((_QWORD *)this + 10);
      v40 = v39[3];
      if (*a4)
      {
        if (!v40)
        {
          v41 = *MEMORY[0x1E0C85AD8];
          v42 = *((unsigned int *)v39 + 4);
          v43 = operator new();
          v44 = v41 - 384;
          if (v41 - 384 <= v42)
            v44 = v42;
          v45 = log2((double)(v44 + 384));
          audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::ipc_node_base(v43, (1 << vcvtpd_u64_f64(v45)) - 16);
          atomic_store(1u, *(unsigned int **)(v43 + 8));
          atomic_store(0, *(unsigned int **)(v43 + 16));
          *(_BYTE *)(v43 + 56) = 0;
          *(_BYTE *)(v43 + 120) = 0;
          *(_DWORD *)(v43 + 128) = 50;
          v46 = *(_QWORD *)(v43 + 24);
          AllocSize = IOSurfaceGetAllocSize(*(IOSurfaceRef *)v43);
          *(_DWORD *)(v43 + 80) = 0;
          *(_QWORD *)(v43 + 56) = v46;
          *(_QWORD *)(v43 + 64) = AllocSize - 16;
          *(_QWORD *)(v43 + 88) = 0;
          *(_QWORD *)(v43 + 96) = v46;
          *(_DWORD *)(v46 + 16) = AllocSize - 384;
          *(_QWORD *)(v43 + 72) = v46 + 16;
          *(_QWORD *)(v43 + 104) = v46 + 32;
          *(_QWORD *)(v46 + 24) = 368;
          *(_QWORD *)(v43 + 112) = v46 + 368;
          *(_BYTE *)(v43 + 120) = 1;
          *(_OWORD *)(v43 + 80) = *(_OWORD *)(v46 + 16);
          *(_QWORD *)(v43 + 72) = v43 + 80;
          audioipc::eventlink_primitive::activate();
          std::unique_ptr<AudioConverterPropertyClient>::reset[abi:ne180100]((uint64_t *)(*((_QWORD *)this + 10) + 24), v43);
          v48 = (uint64_t *)*((_QWORD *)this + 10);
          v49 = *v48;
          v50 = *((_DWORD *)v48 + 4);
          audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::ipc_resources((audioipc::eventlink_primitive *)&object, (IOSurfaceRef *)v48[3]);
          v51 = object;
          if (object)
            xpc_retain(object);
          else
            v51 = xpc_null_create();
          LODWORD(value) = v50;
          MEMORY[0x193FFDBA8](&v73, 74777830);
          xpc_dictionary_set_data(v74, "configParams", &value, 4uLL);
          xpc_dictionary_set_value(v74, "ipcResources", v51);
          v64 = *(swix::connection **)(v49 + 8);
          if (v64)
          {
            swix::connection::send_and_await_reply(v64, (const swix::encode_message *)&v73);
            v19 = swix::coder<int>::decode(*(void **)&buf[8], ".error");
            xpc_release(*(xpc_object_t *)&buf[8]);
            xpc_release(v74);
            xpc_release(v51);
            xpc_release(object);
            if (!((unint64_t)((_DWORD)v19 == 0) << 32) && (_DWORD)v19)
            {
              std::unique_ptr<AudioConverterPropertyClient>::reset[abi:ne180100]((uint64_t *)(*((_QWORD *)this + 10) + 24), 0);
              AudioConverterLog();
              v61 = AudioConverterLog(void)::gLog;
              if (!os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
                goto LABEL_60;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AudioConverterOOP.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 817;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = this;
              v25 = "%25s:%-5d AudioConverterOOP -> %p: Unable to set up to use messenger for bundle data";
              goto LABEL_77;
            }
            AudioConverterLog();
            v62 = AudioConverterLog(void)::gLog;
            v19 = 0;
            if (!os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
              goto LABEL_60;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AudioConverterOOP.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 813;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = this;
            v63 = "%25s:%-5d AudioConverterOOP -> %p: Set up to use messenger for bundle data";
LABEL_80:
            _os_log_impl(&dword_18EE07000, v62, OS_LOG_TYPE_DEFAULT, v63, buf, 0x1Cu);
            goto LABEL_81;
          }
          goto LABEL_82;
        }
      }
      else if (v40)
      {
        v59 = *v39;
        MEMORY[0x193FFDBA8](&v73, 74777831);
        v60 = *(swix::connection **)(v59 + 8);
        if (v60)
        {
          swix::connection::send_and_await_reply(v60, (const swix::encode_message *)&v73);
          v19 = swix::coder<int>::decode(*(void **)&buf[8], ".error");
          xpc_release(*(xpc_object_t *)&buf[8]);
          xpc_release(v74);
          if (!((unint64_t)((_DWORD)v19 == 0) << 32) && (_DWORD)v19)
          {
            AudioConverterLog();
            v61 = AudioConverterLog(void)::gLog;
            if (!os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
              goto LABEL_60;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AudioConverterOOP.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 832;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = this;
            v25 = "%25s:%-5d AudioConverterOOP -> %p: Unable to stop using messenger for bundle data";
LABEL_77:
            v26 = v61;
            v27 = 28;
LABEL_27:
            _os_log_impl(&dword_18EE07000, v26, OS_LOG_TYPE_ERROR, v25, buf, v27);
            goto LABEL_60;
          }
          std::unique_ptr<AudioConverterPropertyClient>::reset[abi:ne180100]((uint64_t *)(*((_QWORD *)this + 10) + 24), 0);
          AudioConverterLog();
          v62 = AudioConverterLog(void)::gLog;
          v19 = 0;
          if (!os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            goto LABEL_60;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AudioConverterOOP.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 829;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = this;
          v63 = "%25s:%-5d AudioConverterOOP -> %p: Stopped using messenger for bundle data";
          goto LABEL_80;
        }
LABEL_82:
        std::terminate();
      }
LABEL_81:
      v19 = 0;
      goto LABEL_60;
    }
    PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)buf, 0);
    *(_QWORD *)buf = &off_1E2909960;
    v19 = PropertyMarshaller::Serialize();
    if ((_DWORD)v19)
    {
      v34 = _os_log_pack_size();
      v35 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v34 + 88, 16);
      if (v35)
      {
        v36 = (caulk::concurrent::message *)v35;
        v37 = _os_log_pack_fill();
        *(_DWORD *)v37 = 134218496;
        *(_QWORD *)(v37 + 4) = this;
        *(_WORD *)(v37 + 12) = 1024;
        *(_DWORD *)(v37 + 14) = a2;
        *(_WORD *)(v37 + 18) = 1024;
        *(_DWORD *)(v37 + 20) = v19;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v36);
      }
      goto LABEL_59;
    }
    v38 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 10) + 232));
    if ((v38 & 1) == 0)
    {
      v19 = 560164718;
      goto LABEL_59;
    }
    v52 = **((_QWORD **)this + 10);
    if (*(_QWORD *)&buf[24] && **(_QWORD **)&buf[24])
    {
      BytePtr = CFDataGetBytePtr(**(CFDataRef **)&buf[24]);
      if (*(_QWORD *)&buf[24] && **(_QWORD **)&buf[24])
      {
        Length = CFDataGetLength(**(CFDataRef **)&buf[24]);
LABEL_55:
        swix::data::data((swix::data *)&value, BytePtr, Length);
        MEMORY[0x193FFDBA8](&object, 74777836);
        xpc_dictionary_set_uint64(xdict, "propertyID", v8);
        xpc_dictionary_set_value(xdict, "inData", value);
        xpc_dictionary_set_uint64(xdict, "dataSize", v5);
        v55 = *(swix::connection **)(v52 + 8);
        if (!v55)
          goto LABEL_82;
        swix::connection::send_and_await_reply(v55, (const swix::encode_message *)&object);
        v56 = swix::coder<int>::decode(v74, ".error");
        xpc_release(v74);
        v57 = (unint64_t)(v56 == 0) << 32;
        xpc_release(xdict);
        xpc_release(value);
        if ((v57 | v56) >= 0x100000000)
          v19 = 0x100000000;
        else
          v19 = v57 | v56;
LABEL_59:
        PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)buf);
        goto LABEL_60;
      }
    }
    else
    {
      BytePtr = 0;
    }
    Length = 0;
    goto LABEL_55;
  }
  v19 = v28;
  v29 = _os_log_pack_size();
  v30 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v29 + 88, 16);
  if (v30)
  {
    v31 = (caulk::concurrent::message *)v30;
    v32 = _os_log_pack_fill();
    *(_DWORD *)v32 = 134218240;
    *(_QWORD *)(v32 + 4) = this;
    *(_WORD *)(v32 + 12) = 1024;
    *(_DWORD *)(v32 + 14) = a2;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v31);
  }
LABEL_60:
  if (v72)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v66);
  return v19;
}

void sub_18F0B46C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, xpc_object_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint8_t buf,xpc_object_t object,__int16 a25,__int16 a26,int a27,int a28,__int16 a29)
{
  if (a15)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a10);
  _Unwind_Resume(exception_object);
}

uint64_t AudioConverterOOP::convertBuffer(AudioConverterOOP *this, unsigned int a2, const void *a3, unsigned int *a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  UInt32 v15;
  UInt32 v16;
  unsigned int v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _BYTE v25[40];
  std::pmr *v26;
  std::__shared_weak_count *v27;
  _BYTE v28[4];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::pmr *v34;
  std::__shared_weak_count *v35;
  unsigned int v36;
  int v37;
  _QWORD v38[2];
  AudioBufferList v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  const void *v43;
  char v44[4];
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _QWORD v51[2];
  UInt32 *v52;

  v52 = a4;
  if (!*((_BYTE *)this + 96))
    std::__throw_bad_optional_access[abi:ne180100]();
  v51[0] = this;
  v51[1] = &v52;
  if (*((_BYTE *)this + 12) || !*((_BYTE *)this + 13))
  {
    v44[0] = 0;
    v50 = 0;
  }
  else
  {
    v9 = *((unsigned int *)this + 4);
    v10 = *((unsigned int *)this + 5);
    v29 = 2756;
    v30 = v9;
    v31 = v10;
    v32 = 0;
    v33 = 0;
    kdebug_trace();
    v44[0] = 1;
    v45 = 2756;
    v46 = v9;
    v47 = v10;
    v48 = 0;
    v49 = 0;
    v28[0] = 0;
    v50 = 1;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v28);
  }
  v11 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 10) + 232));
  if ((v11 & 1) != 0)
  {
    v13 = *((_QWORD *)this + 10);
    v14 = *(_DWORD *)(*(_QWORD *)(v13 + 72) + 56);
    v15 = *(_DWORD *)(*(_QWORD *)(v13 + 168) + 56);
    v16 = *v52;
    v39.mBuffers[0].mData = a5;
    v40 = 1;
    v41 = v14;
    v42 = a2;
    v43 = a3;
    v39.mBuffers[0].mNumberChannels = v15;
    v39.mBuffers[0].mDataByteSize = v16;
    v37 = a2 / *(_DWORD *)(v13 + 112);
    v38[0] = &v40;
    v38[1] = &v37;
    *(_QWORD *)&v39.mNumberBuffers = 1;
    v36 = v16 / *(_DWORD *)(v13 + 208);
    AudioConverterClientBufferManager::AudioConverterClientBufferManager((uint64_t)v28, (__int128 *)(v13 + 32));
    AudioConverterClientBufferManager::AudioConverterClientBufferManager((uint64_t)v25, (__int128 *)(*((_QWORD *)this + 10) + 128));
    v12 = AudioConverterRenderClient::enterRenderLoop(*(AudioConverterRenderClient **)(*((_QWORD *)this + 10) + 8), (OpaqueAudioConverter *)*((unsigned int *)this + 2), (int (*)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *))AudioConverterOOP::convertBuffer(unsigned int,void const*,unsigned int *,void *)::$_1::__invoke, v38, &v39, (AudioConverterClientBufferManager *)v28, (AudioConverterClientBufferManager *)v25, &v36, 0);
    v17 = *(_DWORD *)(*((_QWORD *)this + 10) + 208) * v36;
    *v52 = v17;
    if (*((_BYTE *)this + 28) && v17)
    {
      *((_BYTE *)this + 28) = 0;
      kdebug_trace();
    }
    v18 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    ExtendedAudioBufferList_Destroy(v26);
    v21 = v35;
    if (v35)
    {
      v22 = (unint64_t *)&v35->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    ExtendedAudioBufferList_Destroy(v34);
  }
  else
  {
    v12 = 560164718;
  }
  if (v50)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v44);
  applesauce::raii::v1::detail::ScopeGuard<AudioConverterOOP::convertBuffer(unsigned int,void const*,unsigned int *,void *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)v51);
  return v12;
}

void sub_18F0B4BD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  applesauce::raii::v1::detail::ScopeGuard<AudioConverterOOP::convertBuffer(unsigned int,void const*,unsigned int *,void *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(v1 - 88);
  _Unwind_Resume(a1);
}

uint64_t AudioConverterOOP::fillBuffer(AudioConverterOOP *this, int (*a2)(OpaqueAudioConverter *, unsigned int *, void **, void *), void *a3, unsigned int *a4, void *a5)
{
  return 4294967292;
}

uint64_t AudioConverterOOP::fillComplexBuffer(uint64_t a1, int (*a2)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *), void *a3, unsigned int *a4, AudioBufferList *a5, AudioStreamPacketDescription *a6, uint64_t a7)
{
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t message;
  caulk::concurrent::message *v11;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  char v21[4];
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD v28[2];
  unsigned int *v29;
  _BYTE v30[4];
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v29 = a4;
  v7 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 80) + 232));
  if ((v7 & 1) == 0)
    return 560164718;
  if (a7)
  {
    v8 = 1869627199;
    v9 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v9 + 88, 16);
    if (message)
    {
      v11 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v11);
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 96))
      std::__throw_bad_optional_access[abi:ne180100]();
    v17 = v29;
    v28[0] = a1;
    v28[1] = &v29;
    if (*(_BYTE *)(a1 + 12) || !*(_BYTE *)(a1 + 13))
    {
      v21[0] = 0;
      v27 = 0;
    }
    else
    {
      v18 = *(unsigned int *)(a1 + 16);
      v19 = *(unsigned int *)(a1 + 20);
      v31 = 2756;
      v32 = v18;
      v33 = v19;
      v34 = 0;
      v35 = 0;
      kdebug_trace();
      v21[0] = 1;
      v22 = 2756;
      v23 = v18;
      v24 = v19;
      v25 = 0;
      v26 = 0;
      v30[0] = 0;
      v27 = 1;
      AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v30);
      v17 = v29;
    }
    v8 = AudioConverterRenderClient::enterRenderLoop(*(AudioConverterRenderClient **)(*(_QWORD *)(a1 + 80) + 8), (OpaqueAudioConverter *)*(unsigned int *)(a1 + 8), a2, a3, a5, (AudioConverterClientBufferManager *)(*(_QWORD *)(a1 + 80) + 32), (AudioConverterClientBufferManager *)(*(_QWORD *)(a1 + 80) + 128), v17, a6);
    if (*(_BYTE *)(a1 + 28) && *v29)
    {
      *(_BYTE *)(a1 + 28) = 0;
      kdebug_trace();
    }
    if (v27)
      AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v21);
    applesauce::raii::v1::detail::ScopeGuard<AudioConverterOOP::fillComplexBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *),void *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription *,AudioStreamPacketDependencyInfo *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)v28);
  }
  return v8;
}

void sub_18F0B4E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  applesauce::raii::v1::detail::ScopeGuard<AudioConverterOOP::fillComplexBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *),void *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription *,AudioStreamPacketDependencyInfo *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AudioConverterOOP::convertComplexBuffer(AudioConverterOOP *this, unsigned int a2, const AudioBufferList *a3, AudioBufferList *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t message;
  caulk::concurrent::message *v16;
  uint64_t v17;
  UInt32 mNumberBuffers;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _BYTE v24[40];
  std::pmr *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[2];
  _BYTE v28[4];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::pmr *v34;
  std::__shared_weak_count *v35;
  char v36[4];
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD v43[2];
  unsigned int v44;

  v44 = a2;
  if (!*((_BYTE *)this + 96))
    std::__throw_bad_optional_access[abi:ne180100]();
  v43[0] = this;
  v43[1] = &v44;
  if (*((_BYTE *)this + 12) || !*((_BYTE *)this + 13))
  {
    v36[0] = 0;
    v42 = 0;
  }
  else
  {
    v7 = *((unsigned int *)this + 4);
    v8 = *((unsigned int *)this + 5);
    v29 = 2756;
    v30 = v7;
    v31 = v8;
    v32 = 0;
    v33 = 0;
    kdebug_trace();
    v36[0] = 1;
    v37 = 2756;
    v38 = v7;
    v39 = v8;
    v40 = 0;
    v41 = 0;
    v28[0] = 0;
    v42 = 1;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v28);
  }
  v9 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 10) + 232));
  if ((v9 & 1) != 0)
  {
    AudioConverterClientBufferManager::AudioConverterClientBufferManager((uint64_t)v28, (__int128 *)(*((_QWORD *)this + 10) + 32));
    if (a3->mNumberBuffers == *((_DWORD *)v34 + 12))
    {
      v27[0] = a3;
      v27[1] = &v44;
      AudioConverterClientBufferManager::AudioConverterClientBufferManager((uint64_t)v24, (__int128 *)(*((_QWORD *)this + 10) + 128));
      v10 = AudioConverterRenderClient::enterRenderLoop(*(AudioConverterRenderClient **)(*((_QWORD *)this + 10) + 8), (OpaqueAudioConverter *)*((unsigned int *)this + 2), (int (*)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *))AudioConverterOOP::convertComplexBuffer(unsigned int,AudioBufferList const*,AudioBufferList*)::$_1::__invoke, v27, a4, (AudioConverterClientBufferManager *)v28, (AudioConverterClientBufferManager *)v24, &v44, 0);
      if (*((_BYTE *)this + 28) && a4->mNumberBuffers && a4->mBuffers[0].mDataByteSize)
      {
        *((_BYTE *)this + 28) = 0;
        kdebug_trace();
      }
      v11 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      ExtendedAudioBufferList_Destroy(v25);
    }
    else
    {
      v14 = _os_log_pack_size();
      message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v14 + 88, 16);
      if (message)
      {
        v16 = (caulk::concurrent::message *)message;
        v17 = _os_log_pack_fill();
        mNumberBuffers = a3->mNumberBuffers;
        v19 = *((_DWORD *)v34 + 12);
        *(_DWORD *)v17 = 67109376;
        *(_DWORD *)(v17 + 4) = mNumberBuffers;
        *(_WORD *)(v17 + 8) = 1024;
        *(_DWORD *)(v17 + 10) = v19;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v16);
      }
      v10 = 4294967246;
    }
    v20 = v35;
    if (v35)
    {
      v21 = (unint64_t *)&v35->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    ExtendedAudioBufferList_Destroy(v34);
  }
  else
  {
    v10 = 560164718;
  }
  if (v42)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v36);
  applesauce::raii::v1::detail::ScopeGuard<AudioConverterOOP::convertComplexBuffer(unsigned int,AudioBufferList const*,AudioBufferList*)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)v43);
  return v10;
}

void sub_18F0B511C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  AudioConverterClientBufferManager::~AudioConverterClientBufferManager((std::pmr **)va);
  if (*(_BYTE *)(v16 - 96))
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)(v16 - 136));
  applesauce::raii::v1::detail::ScopeGuard<AudioConverterOOP::convertComplexBuffer(unsigned int,AudioBufferList const*,AudioBufferList*)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(v16 - 88);
  _Unwind_Resume(a1);
}

uint64_t AudioConverterOOP::isOOP(AudioConverterOOP *this)
{
  return 1;
}

uint64_t AudioConverterClientBufferManager::AudioConverterClientBufferManager(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  CA::AudioBuffers *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = (_QWORD *)(a1 + 40);
  CA::AudioBuffers::AudioBuffers(v6, v7, 1);
  v8 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 64) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *((_DWORD *)a2 + 20);
  *(_DWORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

uint64_t AudioConverterOOP::convertComplexBuffer(unsigned int,AudioBufferList const*,AudioBufferList*)::$_1::__invoke(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, unsigned int **a5)
{
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;

  v5 = *a5;
  *a2 = *a5[1];
  v6 = *v5;
  *a3 = v6;
  if ((_DWORD)v6)
  {
    v7 = a3 + 4;
    v8 = (uint64_t *)(v5 + 4);
    do
    {
      *(v7 - 1) = *(v8 - 1);
      v9 = *v8;
      v8 += 2;
      *v7 = v9;
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t AudioConverterRenderClient::enterRenderLoop(AudioConverterRenderClient *this, OpaqueAudioConverter *a2, int (*a3)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *), void *a4, AudioBufferList *a5, AudioConverterClientBufferManager *a6, AudioConverterClientBufferManager *a7, unsigned int *a8, AudioStreamPacketDescription *a9)
{
  AudioConverterRenderClient *v13;
  uint64_t v14;
  uint64_t mDataByteSize;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  AudioStreamPacketDescription *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned __int16 v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  uint64_t message;
  caulk::concurrent::message *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  double v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  unsigned int *v56;
  uint64_t v57;
  _QWORD *v58;
  uint8_t *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  _DWORD *v66;
  char *v67;
  BOOL v68;
  char v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  size_t v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int64_t v82;
  unsigned int v83;
  int64_t v84;
  uint64_t v85;
  unint64_t v86;
  size_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  _DWORD *v99;
  int v100;
  int v101;
  uint64_t v102;
  AudioConverterCapturer *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  uint64_t v113;
  int v114;
  int v115;
  _DWORD *v116;
  _DWORD *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const void *v121;
  void *v122;
  NSObject *v124;
  uint64_t v125;
  int v126;
  int64_t v127;
  unsigned int v128;
  uint64_t v129;
  size_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  int64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v157;
  uint64_t v158;
  unsigned int v159;
  BOOL v160;
  int v161;
  _DWORD *v162;
  void *v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t mNumberBuffers;
  UInt32 v169;
  UInt32 *p_mDataByteSize;
  uint64_t v171;
  uint64_t v172;
  int v174;
  uint64_t v175;
  AudioConverterCapturer *v176;
  uint64_t *v178;
  AudioBufferList *v179;
  unsigned int v180;
  unsigned __int16 v181;
  uint64_t v182;
  AudioBufferList *ioData;
  unsigned int v184;
  AudioConverterClientBufferManager *v185;
  unsigned int *v186;
  unsigned int *v190;
  uint64_t v191;
  char v192;
  int v193;
  unsigned int __src;
  const void **v195;
  uint8_t buf[4];
  const char *v197;
  __int16 v198;
  int v199;
  __int16 v200;
  uint64_t v201;
  uint64_t v202;

  v13 = this;
  v202 = *MEMORY[0x1E0C80C00];
  v14 = *((_QWORD *)this + 30);
  *(_QWORD *)(v14 + 24) = audioipc::current_render_context(this);
  mDataByteSize = a5->mBuffers[0].mDataByteSize;
  v186 = a8;
  v16 = *a8;
  if (a5->mNumberBuffers)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      *(AudioBuffer *)(*((_QWORD *)a7 + 5) + v17 * 16 + 56) = a5->mBuffers[v17];
      ++v18;
      ++v17;
    }
    while (v18 < a5->mNumberBuffers);
  }
  v19 = a9;
  if (*(_QWORD *)(*((_QWORD *)a7 + 7) + 8) == **((_QWORD **)a7 + 7))
    v19 = 0;
  *((_QWORD *)a7 + 6) = v19;
  *((_DWORD *)a7 + 19) = v16;
  *((_QWORD *)a7 + 11) = 0;
  v184 = *a8;
  *a8 = 0;
  v180 = *(_DWORD *)(*((_QWORD *)v13 + 31) + 128);
  if (*((_DWORD *)v13 + 85))
  {
    if (a5->mBuffers[a5->mNumberBuffers].mNumberChannels == 1094863915)
    {
      v20 = a5[-2].mBuffers[0].mDataByteSize;
      if ((_DWORD)v20)
        v21 = (uint64_t *)((char *)&a5[-2] + v20);
      else
        v21 = 0;
    }
    else
    {
      v21 = 0;
    }
    if (mDataByteSize > v180 && (v23 = *((_QWORD *)v13 + 9), *(_DWORD *)(v23 + 92)))
      v24 = *(_WORD *)(v23 + 104) + 1;
    else
      v24 = 0;
    v178 = v21;
    if (v21)
    {
      v26 = v21;
      v25 = *v21;
      if ((unint64_t)(v26[1] - v25) <= 0x2B)
        v27 = 0;
      else
        v27 = v25;
      v28 = *(_WORD *)(v27 + 40);
      if (mDataByteSize <= v180)
        v22 = v28;
      else
        v22 = v24;
    }
    else
    {
      v22 = 0;
    }
    if ((unsigned __int16)(v184 / *((_DWORD *)v13 + 86)) + 1 < v22)
    {
      v29 = _os_log_pack_size();
      message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v29 + 88, 2);
      if (message)
      {
        v31 = (caulk::concurrent::message *)message;
        v32 = _os_log_pack_fill();
        v33 = *((_QWORD *)v13 + 44);
        *(_DWORD *)v32 = 134218496;
        *(_QWORD *)(v32 + 4) = v33;
        *(_WORD *)(v32 + 12) = 1024;
        *(_DWORD *)(v32 + 14) = v22;
        *(_WORD *)(v32 + 18) = 1024;
        *(_DWORD *)(v32 + 20) = v184;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v31);
      }
    }
  }
  else
  {
    v22 = 0;
    v178 = 0;
  }
  v34 = (unsigned int *)((char *)a6 + 76);
  v195 = (const void **)((char *)a6 + 48);
  v179 = a5 - 2;
  *(_QWORD *)&v35 = 136315650;
  v182 = mDataByteSize;
  ioData = a5;
  v190 = (unsigned int *)v13;
  v185 = a7;
  v181 = v22;
  do
  {
    v36 = v184 - *v186;
    if (v184 <= *v186)
      break;
    v37 = *((_QWORD *)a7 + 11);
    if (v37 >= mDataByteSize)
      break;
    v38 = mDataByteSize - v37;
    v39 = *(_DWORD *)(*((_QWORD *)v13 + 31) + 128);
    if (v39 >= v38)
      v40 = v38;
    else
      v40 = *(_DWORD *)(*((_QWORD *)v13 + 31) + 128);
    v41 = v39 / *((_DWORD *)a7 + 20);
    if (*((_DWORD *)v13 + 85))
    {
      v42 = v41 - *((_DWORD *)v13 + 87);
      if (v42 >= v36)
        v43 = v184 - *v186;
      else
        v43 = v42;
    }
    else if (v41 < v36 && mDataByteSize > v180)
    {
      v43 = v39 / *((_DWORD *)a7 + 20);
    }
    else
    {
      v43 = v184 - *v186;
    }
    v45 = *((_QWORD *)v13 + 30);
    v46 = 561145203;
    if (!audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::can_send((uint64_t)v13, v35))goto LABEL_172;
    *(_WORD *)v45 = 25601;
    *(_DWORD *)(v45 + 16) = v40;
    *(_DWORD *)(v45 + 8) = v43;
    *(_WORD *)(v45 + 20) = v181;
    if (!audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::signal_wait_with_timeout((uint64_t)v13, 3.0))goto LABEL_172;
    v191 = v45;
    while (1)
    {
      v47 = *(unsigned __int8 *)(v45 + 1);
      if (v47 != 102)
        break;
      v48 = *(_DWORD *)(v45 + 8);
      v49 = *((_QWORD *)v13 + 31);
      v50 = *(_DWORD *)(v49 + 40);
      if (v50 >= *(_DWORD *)(v45 + 12))
        v51 = *(_DWORD *)(v45 + 12);
      else
        v51 = *(_DWORD *)(v49 + 40);
      v52 = *(_QWORD *)(v49 + 56);
      v53 = *(unsigned int *)(v52 + 48);
      v54 = 16 * v53;
      if (16 * v53)
      {
        v55 = (_DWORD *)(v52 + 60);
        v56 = (unsigned int *)(v52 + 60);
        v57 = 16 * v53;
        do
        {
          *v56 = v50;
          v56 += 4;
          v57 -= 16;
        }
        while (v57);
        do
        {
          *v55 = v51;
          v55 += 4;
          v54 -= 16;
        }
        while (v54);
      }
      if (*(_DWORD *)(*((_QWORD *)a6 + 5) + 60))
      {
LABEL_56:
        v58 = (_QWORD *)*((_QWORD *)v13 + 32);
        v59 = (uint8_t *)v34;
        if (v58)
        {
          *(_DWORD *)buf = *(_DWORD *)(*((_QWORD *)v13 + 9) + 104);
          v59 = buf;
          if (*(_DWORD *)buf >= *v34)
            v59 = (uint8_t *)v34;
        }
        v60 = *(_DWORD *)v59;
        v61 = *((_QWORD *)v13 + 31);
        v62 = *(_QWORD *)(v61 + 56);
        v63 = *(unsigned int *)(v62 + 48);
        v64 = 16 * v63;
        if (16 * v63)
        {
          v65 = *(_DWORD *)(v61 + 40);
          v66 = (_DWORD *)(v62 + 60);
          do
          {
            *v66 = v65;
            v66 += 4;
            v64 -= 16;
          }
          while (v64);
        }
        v67 = (char *)*v195;
        if (v58)
          v68 = v67 == 0;
        else
          v68 = 1;
        v69 = v68;
        v192 = v69;
        if (v68)
        {
          v70 = 0;
          v71 = *(_DWORD *)(*((_QWORD *)a6 + 5) + 60);
          if (v71 >= *(_DWORD *)(v62 + 60))
            v71 = *(_DWORD *)(v62 + 60);
          v72 = *((_DWORD *)a6 + 20);
          __src = v71 / v72;
          v73 = v71 / v72 * v72;
        }
        else
        {
          v79 = *(_QWORD *)v67;
          v70 = *(_QWORD *)v67 - *((_QWORD *)a6 + 11);
          v80 = *((_DWORD *)a6 + 19);
          if (v80 >= v60)
            v81 = v60;
          else
            v81 = v80;
          if ((_DWORD)v81
            && ((LODWORD(v82) = *(_DWORD *)(*((_QWORD *)a6 + 5) + 60),
                 v83 = *(_DWORD *)(v62 + 60),
                 v82 >= v83)
              ? (v82 = v83)
              : (v82 = v82),
                v84 = *((unsigned int *)v67 + 3),
                v84 <= v82))
          {
            v105 = 0;
            v106 = (unsigned int *)(v67 + 28);
            while (1)
            {
              v73 = v84;
              if (v81 - 1 == v105)
                break;
              v107 = *(_QWORD *)(v106 - 3);
              v108 = *v106;
              v106 += 4;
              v84 = v107 - v79 + v108;
              ++v105;
              if (v84 > v82)
              {
                __src = v105;
                goto LABEL_86;
              }
            }
            __src = v81;
          }
          else
          {
            __src = 0;
            v73 = 0;
          }
        }
LABEL_86:
        if (v63)
        {
          v85 = 0;
          v86 = 0;
          v87 = v73 + v70;
          v88 = *((_QWORD *)a6 + 5);
          do
          {
            v89 = *(char **)(v62 + v85 + 64);
            v90 = *(char **)(v88 + v85 + 64);
            if (v89 != v90)
            {
              memcpy(v89, &v90[v70], v73);
              v88 = *((_QWORD *)a6 + 5);
              v63 = *(unsigned int *)(v62 + 48);
              v89 = *(char **)(v88 + v85 + 64);
            }
            *(_DWORD *)(v62 + v85 + 60) = v73;
            v91 = v88 + v85;
            *(_DWORD *)(v91 + 60) = *(_DWORD *)(v88 + v85 + 60) - v87;
            *(_QWORD *)(v91 + 64) = &v89[v87];
            ++v86;
            v85 += 16;
          }
          while (v86 < v63);
        }
        v13 = (AudioConverterRenderClient *)v190;
        v92 = __src;
        if ((v192 & 1) == 0)
        {
          memcpy(v58, *v195, 16 * __src);
          if (__src)
          {
            v93 = *((_QWORD *)a6 + 11) + v70;
            v94 = __src;
            do
            {
              *v58 -= v93;
              v58 += 2;
              --v94;
            }
            while (v94);
          }
          *v195 = (char *)*v195 + 16 * __src;
        }
        v95 = *((_DWORD *)a6 + 19) - __src;
        *((_DWORD *)a6 + 19) = v95;
        *((_QWORD *)a6 + 11) += v73 + v70;
        if (v95)
          v96 = 1;
        else
          v96 = v192;
        if ((v96 & 1) == 0)
        {
          v97 = *((_QWORD *)a6 + 5);
          v98 = *(unsigned int *)(v97 + 48);
          if ((_DWORD)v98)
          {
            v99 = (_DWORD *)(v97 + 60);
            do
            {
              *v99 = 0;
              v99 += 4;
              --v98;
            }
            while (v98);
          }
        }
        v100 = 0;
        v101 = *(_DWORD *)(v52 + 60);
        v45 = v191;
        v34 = (unsigned int *)((char *)a6 + 76);
        goto LABEL_114;
      }
      v74 = (uint64_t *)*((_QWORD *)a6 + 7);
      v75 = *v74;
      *((_QWORD *)a6 + 6) = *v74;
      if ((_DWORD)v53)
      {
        v76 = 0;
        v77 = 56;
        do
        {
          *(_OWORD *)(*((_QWORD *)a6 + 5) + v77) = *(_OWORD *)(v52 + v77);
          ++v76;
          v77 += 16;
        }
        while (v76 < *(unsigned int *)(v52 + 48));
        v74 = (uint64_t *)*((_QWORD *)a6 + 7);
        v78 = *v74;
      }
      else
      {
        v78 = v75;
      }
      if (v74[1] == v78)
        v102 = 0;
      else
        v102 = v75;
      *((_QWORD *)a6 + 6) = v102;
      *((_DWORD *)a6 + 19) = v48;
      *((_QWORD *)a6 + 11) = 0;
      v100 = a3(a2, v34, (AudioBufferList *)(*((_QWORD *)a6 + 5) + 48), (AudioStreamPacketDescription **)v195, a4);
      if (v100)
      {
        v92 = 0;
        v101 = 0;
        *(_DWORD *)(*((_QWORD *)a6 + 5) + 60) = 0;
        *((_QWORD *)a6 + 6) = 0;
        *((_DWORD *)a6 + 19) = 0;
        *((_QWORD *)a6 + 11) = 0;
      }
      else
      {
        v100 = validateInputProcData((uint64_t)a6, (unsigned int *)(*((_QWORD *)a6 + 5) + 48), *((_DWORD *)a6 + 19), *((_QWORD *)a6 + 6), *((unsigned int *)a6 + 20) | 0x100000000);
        v103 = (AudioConverterCapturer *)*((_QWORD *)v13 + 46);
        if (v103)
          AudioConverterCapturer::write(v103, (const AudioBufferList *)(*((_QWORD *)a6 + 5) + 48), *((const AudioStreamPacketDescription **)a6 + 6), *((_DWORD *)a6 + 19));
        if (!v100)
          goto LABEL_56;
        v92 = 0;
        v101 = 0;
      }
LABEL_114:
      *(_DWORD *)(v45 + 4) = v100;
      v104 = *((_QWORD *)v13 + 30);
      if (audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::can_send((uint64_t)v13, v35))
      {
        *(_WORD *)v104 = 25602;
        *(_DWORD *)(v104 + 8) = v92;
        *(_DWORD *)(v104 + 12) = v101;
        if (audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::signal_wait_with_timeout((uint64_t)v13, 3.0))
        {
          continue;
        }
      }
      v46 = 561145203;
      goto LABEL_172;
    }
    v46 = 561145203;
    if (v47 == 100)
      goto LABEL_172;
    if (v47 != 101)
    {
      v46 = 4294967246;
      goto LABEL_172;
    }
    v109 = *(unsigned int *)(v45 + 8);
    v110 = *((_QWORD *)v13 + 31);
    v111 = *(_QWORD *)(v110 + 144);
    v112 = (unsigned int *)(v111 + 48);
    v113 = 16 * *(unsigned int *)(v111 + 48);
    if (v113)
    {
      v114 = *(_DWORD *)(v45 + 16);
      v115 = *(_DWORD *)(v110 + 128);
      v116 = (_DWORD *)(v111 + 60);
      v117 = (_DWORD *)(v111 + 60);
      v118 = 16 * *(unsigned int *)(v111 + 48);
      do
      {
        *v117 = v115;
        v117 += 4;
        v118 -= 16;
      }
      while (v118);
      do
      {
        *v116 = v114;
        v116 += 4;
        v113 -= 16;
      }
      while (v113);
    }
    v119 = *((_QWORD *)v185 + 7);
    v120 = *(void **)v119;
    if ((_DWORD)v109)
    {
      v121 = (const void *)*((_QWORD *)v13 + 33);
      v122 = *(void **)(v119 + 8);
      if (v121 && v122 != v120)
      {
        memmove(v120, v121, 16 * v109);
        v120 = (void *)**((_QWORD **)v185 + 7);
      }
    }
    if (validateInputProcData((uint64_t)v185, v112, v109, (uint64_t)v120, *((unsigned int *)v185 + 20) | 0x100000000))
    {
      v46 = 2003329396;
      AudioConverterLog();
      v124 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v125 = *((_QWORD *)v13 + 44);
        *(_DWORD *)buf = 136315650;
        v197 = "AudioConverterRenderClient.h";
        v198 = 1024;
        v199 = 219;
        v200 = 2048;
        v201 = v125;
        _os_log_impl(&dword_18EE07000, v124, OS_LOG_TYPE_ERROR, "%25s:%-5d The converter service for %p is returning unexpected data.", buf, 0x1Cu);
      }
      goto LABEL_172;
    }
    v126 = *((unsigned __int8 *)v185 + 72);
    if (*((_BYTE *)v185 + 72))
    {
      if (!(_DWORD)v109)
        goto LABEL_146;
      LODWORD(v127) = *(_DWORD *)(*((_QWORD *)v185 + 5) + 60);
      v128 = *(_DWORD *)(v111 + 60);
      if (v127 >= v128)
        v127 = v128;
      else
        v127 = v127;
      v129 = **((_QWORD **)v185 + 7);
      if (v109 <= (*(_QWORD *)(*((_QWORD *)v185 + 7) + 8) - v129) >> 4)
      {
        v133 = 0;
        v130 = 0;
        while (1)
        {
          v134 = *(_QWORD *)v129 + *(unsigned int *)(v129 + 12);
          if (v134 > v127)
            break;
          v129 += 16;
          ++v133;
          v130 = v134;
          if (v109 == v133)
          {
            v130 = v134;
            goto LABEL_155;
          }
        }
        LODWORD(v109) = v133;
      }
      else
      {
        LODWORD(v109) = 0;
LABEL_146:
        v130 = 0;
      }
    }
    else
    {
      v131 = *(_DWORD *)(*((_QWORD *)v185 + 5) + 60);
      if (v131 >= *(_DWORD *)(v111 + 60))
        v131 = *(_DWORD *)(v111 + 60);
      v132 = *((_DWORD *)v185 + 20);
      LODWORD(v109) = v131 / v132;
      v130 = v131 / v132 * v132;
    }
LABEL_155:
    v135 = *v112;
    if ((_DWORD)v135)
    {
      v136 = 0;
      v137 = 0;
      v138 = *((_QWORD *)v185 + 5);
      v139 = v111 + 64;
      do
      {
        v140 = *(char **)(v139 + v136);
        v141 = *(char **)(v138 + v136 + 64);
        if (v140 != v141)
        {
          memcpy(v141, v140, v130);
          v138 = *((_QWORD *)v185 + 5);
          v135 = *v112;
          v140 = *(char **)(v138 + v136 + 64);
        }
        v142 = v138 + v136;
        *(_DWORD *)(v142 + 60) = *(_DWORD *)(v138 + v136 + 60) - v130;
        *(_QWORD *)(v142 + 64) = &v140[v130];
        ++v137;
        v136 += 16;
      }
      while (v137 < v135);
      v126 = *((unsigned __int8 *)v185 + 72);
    }
    if (v126)
    {
      v143 = (void *)*((_QWORD *)v185 + 6);
      if (v143)
      {
        memcpy(v143, **((const void ***)v185 + 7), 16 * v109);
        v144 = *((_QWORD *)v185 + 6);
        if ((_DWORD)v109)
        {
          v145 = *((_QWORD *)v185 + 11);
          v146 = (_QWORD *)*((_QWORD *)v185 + 6);
          v147 = v109;
          do
          {
            *v146 += v145;
            v146 += 2;
            --v147;
          }
          while (v147);
        }
        *((_QWORD *)v185 + 6) = v144 + 16 * v109;
        *((_DWORD *)v185 + 19) += v109;
      }
    }
    *((_QWORD *)v185 + 11) += v130;
    *v186 += v109;
    v13 = (AudioConverterRenderClient *)v190;
    v148 = v190[87];
    v149 = v190[86];
    if (v148 && v109 < v149)
      v150 = 0;
    else
      v150 = (v148 + (_DWORD)v109 - v149) % v149;
    v190[87] = v150;
    v46 = *(unsigned int *)(v45 + 4);
LABEL_172:
    a5 = ioData;
    if (*((_DWORD *)v13 + 85))
    {
      if (ioData->mBuffers[ioData->mNumberBuffers].mNumberChannels == 1094863915)
      {
        v151 = ioData[-2].mBuffers[0].mDataByteSize;
        v152 = (uint64_t *)((char *)v179 + v151);
        if ((_DWORD)v151)
        {
          v153 = *((_QWORD *)v13 + 31);
          if (*(_DWORD *)(v153 + 136))
          {
            v154 = *(_QWORD *)(v153 + 160);
            if (v154)
            {
              v155 = *v152;
              if ((unint64_t)(v152[1] - *v152) >= 0x2C && v155 != 0)
              {
                v157 = *(_DWORD *)(v155 + 40);
                if (v157)
                {
                  v158 = v155 + 44;
                  if (*(_DWORD *)(v155 + 64))
                  {
                    v159 = 0;
                    do
                    {
                      v158 += *(unsigned int *)(v158 + 8);
                      ++v159;
                      if (*(_DWORD *)(v158 + 20))
                        v160 = v159 >= v157;
                      else
                        v160 = 1;
                    }
                    while (!v160);
                  }
                  else
                  {
                    v159 = 0;
                  }
                  v193 = *(_DWORD *)(v154 + 40);
                  if (v193)
                  {
                    v161 = 0;
                    v162 = (_DWORD *)(v154 + *(unsigned int *)(v154 + 32) + 20);
                    do
                    {
                      if (v159 + v161 >= *(_DWORD *)(v155 + 40) || !*v162 || !*(_DWORD *)(v158 + 28))
                        break;
                      if (!(v161 | (v159 + v161)))
                        *(_QWORD *)v155 = *((_QWORD *)v162 - 1);
                      v163 = *(void **)(v158 + 32);
                      v164 = v162[2];
                      v165 = v153;
                      v166 = v155;
                      memcpy(v163, (const void *)(*(_QWORD *)(v153 + 152) + (*(_DWORD *)(v153 + 136) * v161)), v164);
                      memcpy((void *)v158, v162 - 5, *(v162 - 3));
                      v155 = v166;
                      v153 = v165;
                      *(_DWORD *)(v158 + 28) = v164;
                      *(_QWORD *)(v158 + 32) = v163;
                      LODWORD(v167) = *(_DWORD *)(v158 + 20);
                      v35 = *(double *)(v166 + 8) + (double)v167;
                      *(double *)(v166 + 8) = v35;
                      v158 += *(unsigned int *)(v158 + 8);
                      ++v161;
                      v162 += 10;
                      a5 = ioData;
                      v13 = (AudioConverterRenderClient *)v190;
                    }
                    while (v193 != v161);
                  }
                }
              }
            }
          }
        }
      }
    }
    a7 = v185;
    mDataByteSize = v182;
    if ((_DWORD)v46)
      goto LABEL_202;
    v34 = (unsigned int *)((char *)a6 + 76);
  }
  while (*(_DWORD *)(*((_QWORD *)v13 + 30) + 8));
  v46 = 0;
LABEL_202:
  mNumberBuffers = a5->mNumberBuffers;
  if ((_DWORD)mNumberBuffers)
  {
    v169 = *((_DWORD *)a7 + 22);
    p_mDataByteSize = &a5->mBuffers[0].mDataByteSize;
    do
    {
      *p_mDataByteSize = v169;
      p_mDataByteSize += 4;
      --mNumberBuffers;
    }
    while (mNumberBuffers);
  }
  if (v178)
  {
    v171 = *((_QWORD *)v13 + 31);
    if (*(_DWORD *)(v171 + 136))
    {
      if (*(_QWORD *)(v171 + 160))
      {
        v172 = *v178;
        if ((unint64_t)(v178[1] - *v178) >= 0x2C && v172 != 0)
        {
          v174 = *(_DWORD *)(v172 + 64);
          if (v174)
          {
            v174 = 0;
            v175 = v172 + 44;
            while (*(_DWORD *)(v172 + 40) != v174)
            {
              v175 += *(unsigned int *)(v175 + 8);
              ++v174;
              if (!*(_DWORD *)(v175 + 20))
                goto LABEL_218;
            }
            v174 = *(_DWORD *)(v172 + 40);
          }
LABEL_218:
          *(_DWORD *)(v172 + 40) = v174;
        }
      }
    }
  }
  v176 = (AudioConverterCapturer *)*((_QWORD *)v13 + 47);
  if (v176)
    AudioConverterCapturer::write(v176, a5, a9, *v186);
  return v46;
}

void AudioConverterClientBufferManager::~AudioConverterClientBufferManager(std::pmr **this)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(this + 7));
  ExtendedAudioBufferList_Destroy(this[5]);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AudioConverterOOP::convertComplexBuffer(unsigned int,AudioBufferList const*,AudioBufferList*)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t result)
{
  if (!*(_BYTE *)(*(_QWORD *)result + 96))
    std::__throw_bad_optional_access[abi:ne180100]();
  return result;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AudioConverterOOP::fillComplexBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *),void *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription *,AudioStreamPacketDependencyInfo *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t result)
{
  if (!*(_BYTE *)(*(_QWORD *)result + 96))
    std::__throw_bad_optional_access[abi:ne180100]();
  return result;
}

uint64_t AudioConverterOOP::convertBuffer(unsigned int,void const*,unsigned int *,void *)::$_1::__invoke(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, unsigned int **a5)
{
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;

  v5 = *a5;
  *a2 = *a5[1];
  v6 = *v5;
  *a3 = v6;
  if ((_DWORD)v6)
  {
    v7 = a3 + 4;
    v8 = (uint64_t *)(v5 + 4);
    do
    {
      *(v7 - 1) = *(v8 - 1);
      v9 = *v8;
      v8 += 2;
      *v7 = v9;
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AudioConverterOOP::convertBuffer(unsigned int,void const*,unsigned int *,void *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t result)
{
  if (!*(_BYTE *)(*(_QWORD *)result + 96))
    std::__throw_bad_optional_access[abi:ne180100]();
  return result;
}

uint64_t CheckProperty(int a1, _QWORD *a2, const void *a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  unsigned int *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  if (a1 <= 1684496751)
  {
    if (a1 <= 1651401827)
    {
      if ((a1 == 1633776744 || a1 == 1633904233) && !a2[5])
        return 2003329396;
      return 0;
    }
    if (a1 != 1651401828)
    {
      if (a1 == 1668312419 && !a2[1])
        return 2003329396;
      return 0;
    }
LABEL_20:
    if (!*a2)
      return 2003329396;
    return 0;
  }
  if (a1 > 1832022883)
  {
    if (a1 != 1832022884)
    {
      if (a1 != 1986946671)
        return 0;
      goto LABEL_20;
    }
    result = 2003329396;
    if (a2[1] && a2[3])
      return 0;
  }
  else if (a1 == 1684496752)
  {
    result = 2003329396;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = 0;
        v7 = 0;
        v12[0] = *a2;
        v12[1] = v5;
        while (1)
        {
          v8 = v6;
          v9 = (unsigned int *)v12[v7];
          v10 = *v9;
          if ((_DWORD)v10)
            break;
LABEL_30:
          v6 = 1;
          v7 = 1;
          if ((v8 & 1) != 0)
            return 0;
        }
        v11 = v9 + 4;
        while (!*((_DWORD *)v11 - 1) || *v11)
        {
          v11 += 2;
          if (!--v10)
            goto LABEL_30;
        }
      }
    }
  }
  else
  {
    if (a1 != 1685218164)
      return 0;
    result = 2003329396;
    v4 = *a2;
    if (*a2)
    {
      if (*(_QWORD *)(v4 + 48) && *(_QWORD *)(v4 + 64))
        return 0;
    }
  }
  return result;
}

uint64_t std::unique_ptr<AudioConverterPropertyClient>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::~rt_sender(result);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

uint64_t audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::ipc_resources(audioipc::eventlink_primitive *a1, IOSurfaceRef *a2)
{
  kern_return_t v4;
  NSObject *v5;
  xpc_object_t v6;
  xpc_object_t XPCObject;
  void *v8;
  void *v9;
  void *v10;
  xpc_object_t v12;
  xpc_object_t object;
  task_id_token_t token;
  _BYTE buf[18];
  __int16 v16;
  kern_return_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  audioipc::eventlink_primitive::ipc_resources(a1, (uint64_t)(a2 + 5));
  token = 0;
  v4 = task_create_identity_token(*MEMORY[0x1E0C83DA0], &token);
  if (v4)
  {
    AudioConverterLog();
    v5 = objc_retainAutorelease((id)AudioConverterLog(void)::gLog);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ACOOPSharedMemory.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 92;
      v16 = 1024;
      v17 = v4;
      _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d unilaterally_billed_shared_memory - error on task_create_identity_token: %u", buf, 0x18u);
    }
    v12 = 0;
  }
  else
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    XPCObject = IOSurfaceCreateXPCObject(*a2);
    xpc_dictionary_set_value(v6, "surface", XPCObject);

    v8 = (void *)xpc_mach_send_create();
    xpc_dictionary_set_value(v6, "token", v8);

    caulk::mach::details::release_os_object(0, v9);
    v12 = v6;
    if (v6)
    {
      xpc_retain(v6);
      goto LABEL_8;
    }
  }
  v6 = 0;
  v12 = xpc_null_create();
LABEL_8:
  *(_QWORD *)buf = a1;
  *(_QWORD *)&buf[8] = "sharedMemory";
  applesauce::xpc::dict::object_proxy::operator=(&object, (uint64_t)buf, &v12);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  return caulk::mach::details::release_os_object((caulk::mach::details *)v6, v10);
}

void sub_18F0B640C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::~rt_sender(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned int v3;

  v2 = atomic_load((unsigned __int8 *)(a1 + 33));
  if ((v2 & 1) == 0)
  {
    v3 = atomic_load(*(unsigned int **)(a1 + 8));
    if (v3 != 2)
    {
      atomic_store(1u, (unsigned __int8 *)(a1 + 33));
      atomic_store(2u, *(unsigned int **)(a1 + 8));
      audioipc::eventlink_primitive::timed_wait_signal_or_error(*(audioipc::eventlink_primitive **)(a1 + 40), 0.02);
      os_eventlink_cancel();
    }
  }
  audioipc::eventlink_primitive::~eventlink_primitive((audioipc::eventlink_primitive *)(a1 + 40));
  unilaterally_billed_shared_memory::~unilaterally_billed_shared_memory((const void **)a1);
}

uint64_t audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::ipc_node_base(uint64_t a1, uint64_t a2)
{
  size_t v3;
  void *v4;
  const __CFDictionary *v5;
  IOSurfaceRef v6;
  const void *v7;
  NSObject *v9;
  std::runtime_error *exception;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  _QWORD v15[2];
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  v3 = caulk::numeric::exceptional_add<unsigned long>(a2 + 16, 16382) & 0xFFFFFFFFFFFFC001;
  v15[0] = *MEMORY[0x1E0CBBEE0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v15[1] = *MEMORY[0x1E0CBC188];
  v16[0] = v4;
  v16[1] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 2);
  v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v6 = IOSurfaceCreate(v5);
  v7 = *(const void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    CFRelease(v7);

  if (!*(_QWORD *)a1)
  {
    AudioConverterLog();
    v9 = objc_retainAutorelease((id)AudioConverterLog(void)::gLog);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "ACOOPSharedMemory.mm";
      v13 = 1024;
      v14 = 22;
      _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d unilaterally_billed_shared_memory - error on IOSurfaceCreate", (uint8_t *)&v11, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bad IOSurface");
  }
  IOSurfaceSetValue(*(IOSurfaceRef *)a1, (CFStringRef)*MEMORY[0x1E0CBC048], CFSTR("AudioConverter Shared memory"));
  if (IOSurfaceGetAllocSize(*(IOSurfaceRef *)a1) < v3
    || !unilaterally_billed_shared_memory::get_raw_ptr((IOSurfaceRef *)a1, 0))
  {
    std::terminate();
  }
  *(_QWORD *)(a1 + 8) = unilaterally_billed_shared_memory::get_raw_ptr((IOSurfaceRef *)a1, 0);
  *(_QWORD *)(a1 + 16) = unilaterally_billed_shared_memory::get_raw_ptr((IOSurfaceRef *)a1, 0) + 8;
  *(_QWORD *)(a1 + 24) = unilaterally_billed_shared_memory::get_raw_ptr((IOSurfaceRef *)a1, 0x10uLL);
  *(_WORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = os_eventlink_create();
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_18F0B66D4(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

uint64_t ACOOPSharedMemory::calculateAndPartitionBuffers(ACOOPSharedMemory *this)
{
  uint64_t v1;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  __int128 *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _QWORD v95[2];
  _QWORD v96[2];

  v96[1] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v1 + 88))
    return 2003329396;
  v4 = caulk::numeric::exceptional_add<unsigned long>(*((_QWORD *)this + 1) - *(_QWORD *)(v1 + 112) - 15, 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = *((_QWORD *)this + 2);
  v6 = *(unsigned int *)(v5 + 92);
  if (!(_DWORD)v6)
  {
    if ((*(_BYTE *)(v5 + 12) & 0x20) != 0)
      v12 = *(_DWORD *)(v5 + 28);
    else
      v12 = 1;
    v13 = caulk::numeric::exceptional_add<unsigned long>((v12 * *(_DWORD *)(v5 + 96)) + 16 * *(unsigned int *)(v5 + 80), 15);
    v14 = *((_QWORD *)this + 2);
    if ((*(_BYTE *)(v14 + 52) & 0x20) != 0)
      v15 = *(_DWORD *)(v14 + 68);
    else
      v15 = 1;
    if ((caulk::numeric::exceptional_add<unsigned long>((v15 * *(_DWORD *)(v14 + 100)) + 16 * *(unsigned int *)(v14 + 84), 15) & 0xFFFFFFFFFFFFFFF0)+ (v13 & 0xFFFFFFFFFFFFFFF0) > v4)return 2003329396;
    v16 = caulk::numeric::exceptional_add<unsigned long>((v4 >> 1) - 15, 15);
    v17 = 0;
    v18 = 0;
    v19 = v16 & 0xFFFFFFFFFFFFFFF0;
    v95[0] = v16 & 0xFFFFFFFFFFFFFFF0;
    v95[1] = v16 & 0xFFFFFFFFFFFFFFF0;
    v96[0] = 0x100000000;
    do
    {
      v20 = v17;
      v21 = *((unsigned int *)v96 + v18);
      v22 = *((_QWORD *)this + 2);
      v23 = v22 + 40 * v21;
      if ((*(_BYTE *)(v23 + 12) & 0x20) != 0)
        v24 = *(_DWORD *)(v23 + 28);
      else
        v24 = 1;
      v25 = caulk::numeric::exceptional_add<unsigned long>((v24 * *(_DWORD *)(v22 + 4 * v21 + 96)) + 16 * *(unsigned int *)(v22 + 4 * v21 + 80), 15) & 0xFFFFFFFFFFFFFFF0;
      if (v25 > v19)
      {
        v95[v21] = v25;
        v95[1 - (int)v21] = v4 - v25;
      }
      v17 = 1;
      v18 = 1;
    }
    while ((v20 & 1) == 0);
    v26 = 0;
    v27 = 0;
    v96[0] = 0x100000000;
    v28 = *((_QWORD *)this + 2);
    while (1)
    {
      v29 = v26;
      v30 = *((unsigned int *)v96 + v27);
      v31 = v28 + 4 * v30;
      v32 = *(unsigned int *)(v31 + 80);
      if ((_DWORD)v32 || (v34 = v28 + 40 * v30, (v35 = *(_DWORD *)(v34 + 16)) == 0))
      {
        v33 = 64;
      }
      else
      {
        if ((*(_BYTE *)(v34 + 12) & 0x20) != 0)
          v36 = *(_DWORD *)(v34 + 28);
        else
          v36 = 1;
        v33 = v36 * v35;
      }
      v37 = v95[v30];
      v38 = v37 / v33;
      v39 = *(unsigned int *)(v31 + 96);
      if (v37 - 16 * v38 >= v39)
        goto LABEL_40;
      v40 = v28 + 40 * v30;
      if ((*(_BYTE *)(v40 + 12) & 0x20) != 0)
        v41 = *(_DWORD *)(v40 + 28);
      else
        v41 = 1;
      v42 = caulk::numeric::exceptional_add<unsigned long>((v41 * v39) + 16 * v32, 15);
      v28 = *((_QWORD *)this + 2);
      v43 = v28 + 4 * v30;
      v44 = *(_DWORD *)(v43 + 96);
      v32 = *(unsigned int *)(v43 + 80);
      if (*(_DWORD *)(v28 + 4 * (1 - v30) + 88))
        goto LABEL_38;
      v38 = v32;
      if (v44 <= 0x10000)
        break;
LABEL_39:
      LODWORD(v38) = (v37 - (v42 & 0xFFFFFFFFFFFFFFF0)) / (16 * v38 + v44) + 1;
LABEL_40:
      v45 = v28 + 4 * v30;
      *(_DWORD *)(v45 + 104) = v38;
      if (v32)
        v46 = v38;
      else
        v46 = 0;
      *((_DWORD *)this + v30 + 54) = v46;
      v47 = *(unsigned int *)(v45 + 104) * (unint64_t)(16 * *(_DWORD *)(v45 + 80));
      v48 = (v47 & 0xFFFFFFFF00000000) == 0;
      v49 = v47 & 0xFFFFFFF0;
      if (v48)
        v50 = v49;
      else
        v50 = 0xFFFFFFFFLL;
      v51 = caulk::numeric::exceptional_add<unsigned long>(v50, 15);
      v28 = *((_QWORD *)this + 2);
      *(_QWORD *)(v28 + 8 * v30 + 144) = v37 - (v51 & 0xFFFFFFFFFFFFFFF0);
      v26 = 1;
      v27 = 1;
      if ((v29 & 1) != 0)
        goto LABEL_80;
    }
    if (!v32)
    {
      v52 = v28 + 40 * v30;
      v53 = *(_DWORD *)(v52 + 16);
      if (v53)
      {
        if ((*(_BYTE *)(v52 + 12) & 0x20) != 0)
          v54 = *(_DWORD *)(v52 + 28);
        else
          v54 = 1;
        v38 = 0;
        v44 = v54 * v53;
      }
      else
      {
        v38 = 0;
        v44 = 64;
      }
      goto LABEL_39;
    }
    v44 = 64;
LABEL_38:
    v38 = v32;
    goto LABEL_39;
  }
  v7 = *(unsigned int *)(v5 + 20);
  v8 = *(_DWORD *)(v5 + 84);
  v9 = 16 * *(unsigned int *)(v5 + 80);
  v10 = *(unsigned int *)(v5 + 96);
  v11 = *(_DWORD *)(v5 + 100);
  if (!*(_DWORD *)(v5 + 88) && v11 <= 0x10000)
  {
    if (!v8)
    {
      v55 = *(_DWORD *)(v5 + 56);
      if (v55)
      {
        if ((*(_BYTE *)(v5 + 52) & 0x20) != 0)
          v56 = *(_DWORD *)(v5 + 68);
        else
          v56 = 1;
        v8 = 0;
        v11 = v56 * v55;
        goto LABEL_60;
      }
      v8 = 0;
    }
    v11 = 64;
  }
LABEL_60:
  v57 = caulk::numeric::exceptional_add<unsigned long>(v6 + v10 + v9 + (16 * v8 + v11) * v7 + 40, 15);
  v58 = *((_QWORD *)this + 2);
  v59 = *(_DWORD *)(v58 + 92);
  v60 = v4 - (v59 + 40) - 44;
  v61 = v60 / (v57 & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v58 + 104) = v61;
  if (v60 < (v57 & 0xFFFFFFFFFFFFFFF0))
    return 2003329396;
  *(_DWORD *)(v58 + 108) = v7 * v61;
  v62 = *(_DWORD *)(v58 + 96);
  if (!v59 && v62 <= 0x10000)
  {
    if (*(_DWORD *)(v58 + 80) || (v63 = *(_DWORD *)(v58 + 16)) == 0)
    {
      v62 = 64;
    }
    else
    {
      if ((*(_BYTE *)(v58 + 12) & 0x20) != 0)
        v64 = *(_DWORD *)(v58 + 28);
      else
        v64 = 1;
      v62 = v64 * v63;
    }
  }
  v65 = caulk::numeric::exceptional_add<unsigned long>(v62 * v61, 15);
  v66 = *((_QWORD *)this + 2);
  *(_QWORD *)(v66 + 144) = v65 & 0xFFFFFFFFFFFFFFF0;
  v67 = *(_DWORD *)(v66 + 100);
  if (!*(_DWORD *)(v66 + 88) && v67 <= 0x10000)
  {
    if (*(_DWORD *)(v66 + 84) || (v68 = *(_DWORD *)(v66 + 56)) == 0)
    {
      v67 = 64;
    }
    else
    {
      if ((*(_BYTE *)(v66 + 52) & 0x20) != 0)
        v69 = *(_DWORD *)(v66 + 68);
      else
        v69 = 1;
      v67 = v69 * v68;
    }
  }
  v70 = caulk::numeric::exceptional_add<unsigned long>(*(_DWORD *)(v66 + 108) * v67, 15);
  v28 = *((_QWORD *)this + 2);
  *(_QWORD *)(v28 + 152) = v70 & 0xFFFFFFFFFFFFFFF0;
LABEL_80:
  v71 = *(_QWORD *)(v28 + 112);
  v72 = *(unsigned int *)(v28 + 108) * (unint64_t)(16 * *(_DWORD *)(v28 + 84));
  v48 = (v72 & 0xFFFFFFFF00000000) == 0;
  v73 = v72 & 0xFFFFFFF0;
  v74 = v48 ? v73 : 0xFFFFFFFFLL;
  v75 = caulk::numeric::exceptional_add<unsigned long>(v74, 15);
  v76 = *(unsigned int *)(*((_QWORD *)this + 2) + 104)
      * (unint64_t)(16 * *(_DWORD *)(*((_QWORD *)this + 2) + 80));
  v48 = (v76 & 0xFFFFFFFF00000000) == 0;
  v77 = v76 & 0xFFFFFFF0;
  v78 = v48 ? v77 : 0xFFFFFFFFLL;
  v79 = (v75 & 0xFFFFFFFFFFFFFFF0)
      + v71
      + (caulk::numeric::exceptional_add<unsigned long>(v78, 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = *((_QWORD *)this + 2);
  *(_QWORD *)(v80 + 120) = v79;
  v81 = *(_DWORD *)(v80 + 92);
  if (v81)
  {
    v82 = caulk::numeric::exceptional_add<unsigned long>(40 * (*(_DWORD *)(v80 + 104) + 1) + 44, 15) & 0xFFFFFFFFFFFFFFF0;
    v80 = *((_QWORD *)this + 2);
    v81 = *(_DWORD *)(v80 + 92);
  }
  else
  {
    v82 = 0;
  }
  v83 = v82 + v79;
  *(_QWORD *)(v80 + 128) = v83;
  v84 = v81 * (unint64_t)(*(_DWORD *)(v80 + 104) + 1);
  v85 = (v84 & 0xFFFFFFFF00000000) != 0 ? 0xFFFFFFFFLL : v84;
  v86 = (caulk::numeric::exceptional_add<unsigned long>(v85, 15) & 0xFFFFFFFFFFFFFFF0) + v83;
  v87 = (__int128 *)*((_QWORD *)this + 2);
  *((_QWORD *)v87 + 17) = v86;
  if (*((_QWORD *)v87 + 18) + *((_QWORD *)v87 + 19) + v86 > *((_QWORD *)this + 1))
    return 2003329396;
  v88 = *v87;
  *(_OWORD *)((char *)this + 40) = v87[1];
  *(_OWORD *)((char *)this + 24) = v88;
  v89 = v87[2];
  v90 = v87[3];
  v91 = v87[4];
  *(_OWORD *)((char *)this + 104) = v87[5];
  *(_OWORD *)((char *)this + 88) = v91;
  *(_OWORD *)((char *)this + 72) = v90;
  *(_OWORD *)((char *)this + 56) = v89;
  v92 = v87[6];
  v93 = v87[7];
  v94 = v87[8];
  *(_OWORD *)((char *)this + 168) = v87[9];
  *(_OWORD *)((char *)this + 152) = v94;
  *(_OWORD *)((char *)this + 136) = v93;
  *(_OWORD *)((char *)this + 120) = v92;
  *((_QWORD *)this + 2) = (char *)this + 24;
  return ACOOPSharedMemory::partitionBuffers(this);
}

void sub_18F0B6D88(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AudioConverterPropertyClient::getSpeechCodecBundleData(uint64_t a1, const void **__src)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  void *v11;
  _QWORD *v12;
  audioipc *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  int v18;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (**(_DWORD **)(a1 + 72) >= *((_DWORD *)__src + 2))
  {
    v12 = *(_QWORD **)(a1 + 104);
    v11 = *(void **)(a1 + 112);
    v13 = (audioipc *)memcpy(v12, __src, 0x150uLL);
    *v12 = v11;
    v14 = *((unsigned int *)__src + 2);
    if ((_DWORD)v14)
      v13 = (audioipc *)memcpy(v11, *__src, v14);
    v4 = 561145203;
    v15 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(v15 + 8) = audioipc::current_render_context(v13);
    v16 = *(_QWORD *)(a1 + 96);
    if (audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::can_send(a1, v17))
    {
      *(_WORD *)v16 = 25601;
      if (audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::signal_wait_with_timeout(a1, 3.0))
      {
        v18 = *(unsigned __int8 *)(v16 + 1);
        if (v18 != 100)
        {
          if (v18 == 101)
          {
            memcpy(__src, v12, 0x150uLL);
            return *(unsigned int *)(v16 + 4);
          }
          else
          {
            return 4294967246;
          }
        }
      }
    }
  }
  else
  {
    v4 = 1768846202;
    v5 = *(_DWORD *)(a1 + 128);
    v6 = __OFSUB__(v5, 1);
    v7 = v5 - 1;
    if (v7 < 0 == v6)
    {
      *(_DWORD *)(a1 + 128) = v7;
      AudioConverterLog();
      v8 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v9 = *((_DWORD *)__src + 2);
        v10 = **(_DWORD **)(a1 + 72);
        v20 = 136315906;
        v21 = "AudioConverterPropertyClient.h";
        v22 = 1024;
        v23 = 50;
        v24 = 1024;
        v25 = v9;
        v26 = 1024;
        v27 = v10;
        _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d bundle data too large to send over messenger (%d bytes > %d); falling back to XPC",
          (uint8_t *)&v20,
          0x1Eu);
      }
    }
  }
  return v4;
}

swix::data *swix::data::data(swix::data *this, xpc_object_t object)
{
  *(_QWORD *)this = object;
  if (object)
    xpc_retain(object);
  else
    *(_QWORD *)this = xpc_null_create();
  return this;
}

void sub_18F0B7154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t **std::unique_ptr<AudioConverterOOP::Impl>::reset[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  os_unfair_lock_s **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::unique_ptr<auoop::WorkgroupPropagator>::reset[abi:ne180100]((os_unfair_lock_s ***)v1 + 28, 0);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 23));
    ExtendedAudioBufferList_Destroy((std::pmr *)v1[21]);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 11));
    ExtendedAudioBufferList_Destroy((std::pmr *)v1[9]);
    std::unique_ptr<AudioConverterPropertyClient>::reset[abi:ne180100](v1 + 3, 0);
    std::unique_ptr<AudioConverterRenderClient>::reset[abi:ne180100](v1 + 1, 0);
    v2 = (os_unfair_lock_s **)*v1;
    *v1 = 0;
    if (v2)
      (*(void (**)(os_unfair_lock_s **))&(*v2)[2]._os_unfair_lock_opaque)(v2);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

os_unfair_lock_s **std::unique_ptr<auoop::WorkgroupPropagator>::reset[abi:ne180100](os_unfair_lock_s ***a1, os_unfair_lock_s **a2)
{
  os_unfair_lock_s **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    auoop::WorkgroupPropagator::~WorkgroupPropagator(result);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

uint64_t *std::unique_ptr<AudioConverterRenderClient>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100]((const std::__fs::filesystem::path **)(v2 + 376), 0);
    std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100]((const std::__fs::filesystem::path **)(v2 + 368), 0);
    if (*(_BYTE *)(v2 + 320))
    {
      v3 = *(_QWORD *)(v2 + 248);
      *(_QWORD *)(v2 + 248) = 0;
      if (v3)
        std::default_delete<AudioConverterSharedAudioBuffers>::operator()[abi:ne180100](v3);
    }
    audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::~rt_sender(v2);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

uint64_t AudioConverterOOP::AudioConverterOOP(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, void *a5, int a6, id *a7)
{
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;
  uint64_t v20;
  OSType v23;
  NSObject *v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  uint32x4_t v28;
  void *v29;
  uint64_t *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  Class Class;
  uint64_t v35;
  dispatch_queue_s *v36;
  auoop *v37;
  uint64_t v38;
  os_unfair_lock_s **v39;
  _QWORD *v40;
  uint64_t v41;
  xpc_object_t v42;
  uint64_t v43;
  swix::connection *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t **v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  swix::connection *v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  xpc_object_t v65;
  uint64_t *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  xpc_object_t v70;
  swix::connection *v71;
  swix::connection *v72;
  NSObject *v73;
  int16x8_t v74;
  __int128 *v75;
  int16x8_t v76;
  void **v77;
  char v78;
  uint64_t v79;
  int v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  OSType v87;
  OSType componentType;
  unint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  NSObject *v93;
  const char *v94;
  _DWORD *exception;
  int v96;
  NSObject *v97;
  int16x8_t v98;
  int32x4_t v99;
  uint32x4_t v100;
  const char *v101;
  _DWORD *v102;
  NSObject *v103;
  _DWORD *v104;
  int v105;
  NSObject *v106;
  void *v107;
  int v108;
  unsigned int v109;
  uint64_t **v110;
  id object;
  uint64_t v112;
  uint64_t v113;
  xpc_object_t v115[2];
  int16x8_t v116;
  uint64_t v117;
  integer_t task_info_out[4];
  int16x8_t v119;
  uint64_t v120;
  _OWORD v121[2];
  uint64_t v122;
  _OWORD v123[2];
  uint64_t v124;
  _OWORD v125[2];
  uint64_t v126;
  _OWORD bytes[2];
  uint64_t v128;
  void *__p[2];
  char v130;
  void *v131[2];
  char v132;
  __int128 v133;
  int16x8_t v134;
  int v135;
  AudioComponentDescription inDesc;
  _BYTE task_info_outCnt[40];
  void **v138;
  __int16 v139;
  unsigned int v140;
  _DWORD v141[2];
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)a1);
  *(_WORD *)(v13 + 12) = 0;
  *(_BYTE *)(v13 + 28) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_BYTE *)(v13 + 24) = 0;
  *(_QWORD *)v13 = &off_1E2906F78;
  *(_BYTE *)(v13 + 32) = 0;
  *(_BYTE *)(v13 + 72) = 0;
  v14 = operator new();
  object = *a7;
  v112 = v14;
  *a7 = xpc_null_create();
  if (!a2)
  {
    AudioConverterLog();
    v93 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)task_info_outCnt = 136315394;
      *(_QWORD *)&task_info_outCnt[4] = "AudioConverterOOP.cpp";
      *(_WORD *)&task_info_outCnt[12] = 1024;
      *(_DWORD *)&task_info_outCnt[14] = 194;
      v94 = "%25s:%-5d inSourceFormat == NULL";
LABEL_133:
      _os_log_impl(&dword_18EE07000, v93, OS_LOG_TYPE_ERROR, v94, task_info_outCnt, 0x12u);
    }
LABEL_134:
    exception = __cxa_allocate_exception(4uLL);
    v96 = -50;
    goto LABEL_135;
  }
  if (!a3)
  {
    AudioConverterLog();
    v93 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)task_info_outCnt = 136315394;
      *(_QWORD *)&task_info_outCnt[4] = "AudioConverterOOP.cpp";
      *(_WORD *)&task_info_outCnt[12] = 1024;
      *(_DWORD *)&task_info_outCnt[14] = 195;
      v94 = "%25s:%-5d inDestinationFormat == NULL";
      goto LABEL_133;
    }
    goto LABEL_134;
  }
  if (!MinimalSafetyCheck((const AudioStreamBasicDescription *)a2)
    || (MinimalSafetyCheck((const AudioStreamBasicDescription *)a3) & 1) == 0)
  {
    goto LABEL_134;
  }
  v108 = a6;
  v109 = a4;
  v107 = a5;
  v15 = 0;
  v16 = 0;
  v110 = (uint64_t **)(a1 + 80);
  v113 = a3;
  v17 = *(_DWORD *)(a3 + 8);
  v141[0] = *(_DWORD *)(a2 + 8);
  v141[1] = v17;
  v18 = 1;
  do
  {
    v19 = v15;
    v20 = v141[v16];
    if ((int)v20 > 1885564202)
    {
      if ((_DWORD)v20 == 1885564203 || (_DWORD)v20 == 1970037111)
        goto LABEL_17;
    }
    else if ((_DWORD)v20 == 1634492791 || (_DWORD)v20 == 1819304813)
    {
      goto LABEL_17;
    }
    if ((v18 & 1) != 0)
      v23 = 1633969507;
    else
      v23 = 1634037347;
    inDesc.componentType = v23;
    inDesc.componentSubType = v20;
    *(_QWORD *)&inDesc.componentManufacturer = 1634758764;
    inDesc.componentFlagsMask = 0;
    if (!AudioComponentFindNext(0, &inDesc))
    {
      AudioConverterLog();
      v97 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v98.i32[0] = bswap32(v20);
        *(int8x8_t *)v98.i8 = vzip1_s8(*(int8x8_t *)v98.i8, *(int8x8_t *)v98.i8);
        v99.i64[0] = 0x1F0000001FLL;
        v99.i64[1] = 0x1F0000001FLL;
        v100.i64[0] = 0x5F0000005FLL;
        v100.i64[1] = 0x5F0000005FLL;
        v119.i8[7] = 4;
        *(int8x8_t *)v98.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v100, (uint32x4_t)vsraq_n_s32(v99, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v98.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v98.i8, (int8x8_t)0x2E002E002E002ELL);
        task_info_out[0] = vmovn_s16(v98).u32[0];
        LOBYTE(task_info_out[1]) = 0;
        *(_DWORD *)task_info_outCnt = 136316162;
        v101 = "encoder";
        *(_QWORD *)&task_info_outCnt[4] = "AudioConverterOOP.cpp";
        *(_WORD *)&task_info_outCnt[12] = 1024;
        *(_DWORD *)&task_info_outCnt[14] = 217;
        *(_WORD *)&task_info_outCnt[18] = 2080;
        if ((v18 & 1) != 0)
          v101 = "decoder";
        *(_QWORD *)&task_info_outCnt[20] = v101;
        *(_WORD *)&task_info_outCnt[28] = 2080;
        *(_QWORD *)&task_info_outCnt[30] = task_info_out;
        *(_WORD *)&task_info_outCnt[38] = 2048;
        v138 = (void **)v112;
        _os_log_impl(&dword_18EE07000, v97, OS_LOG_TYPE_ERROR, "%25s:%-5d The client can't access the audio %s %s requested for converter ->  %p", task_info_outCnt, 0x30u);
        if (v119.i8[7] < 0)
        {
          v29 = *(void **)task_info_out;
LABEL_141:
          operator delete(v29);
        }
      }
LABEL_142:
      exception = __cxa_allocate_exception(4uLL);
      v96 = 1718449215;
LABEL_135:
      *exception = v96;
      __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
    }
    v135 = 1969977198;
    AudioFormatEncryptedFormatTranslator::DecryptFormatID(v20, &v135);
    if (v135 != 1969977198)
    {
      *(_OWORD *)task_info_out = 0u;
      v119 = 0u;
      *(_DWORD *)task_info_outCnt = 8;
      if (task_info(*MEMORY[0x1E0C83DA0], 0xFu, task_info_out, (mach_msg_type_number_t *)task_info_outCnt))
      {
        _os_assert_log();
        _os_crash();
        __break(1u);
        goto LABEL_128;
      }
      *(_OWORD *)v115 = *(_OWORD *)task_info_out;
      v116 = v119;
      if (sandbox_check_by_audit_token()
        || (v133 = *(_OWORD *)task_info_out, v134 = v119, sandbox_check_by_audit_token()))
      {
        AudioConverterLog();
        v24 = AudioConverterLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v25.i32[0] = bswap32(*(_DWORD *)(a2 + 8));
          *(int8x8_t *)v25.i8 = vzip1_s8(*(int8x8_t *)v25.i8, *(int8x8_t *)v25.i8);
          v26.i64[0] = 0x1F0000001FLL;
          v26.i64[1] = 0x1F0000001FLL;
          v27.i64[0] = 0x1F0000001FLL;
          v27.i64[1] = 0x1F0000001FLL;
          v28.i64[0] = 0x5F0000005FLL;
          v28.i64[1] = 0x5F0000005FLL;
          *(int8x8_t *)v25.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v28, (uint32x4_t)vsraq_n_s32(v27, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v25.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v25.i8, (int8x8_t)0x2E002E002E002ELL);
          v132 = 4;
          *(int8x8_t *)v25.i8 = vmovn_s16(v25);
          LODWORD(v131[0]) = v25.i32[0];
          BYTE4(v131[0]) = 0;
          v25.i32[0] = bswap32(*(_DWORD *)(a3 + 8));
          *(int8x8_t *)v25.i8 = vzip1_s8(*(int8x8_t *)v25.i8, *(int8x8_t *)v25.i8);
          v130 = 4;
          *(int8x8_t *)v25.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v28, (uint32x4_t)vsraq_n_s32(v26, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v25.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v25.i8, (int8x8_t)0x2E002E002E002ELL);
          LODWORD(__p[0]) = vmovn_s16(v25).u32[0];
          BYTE4(__p[0]) = 0;
          *(_DWORD *)task_info_outCnt = 136316162;
          *(_QWORD *)&task_info_outCnt[4] = "AudioConverterOOP.cpp";
          *(_WORD *)&task_info_outCnt[12] = 1024;
          *(_DWORD *)&task_info_outCnt[14] = 237;
          *(_WORD *)&task_info_outCnt[18] = 2080;
          *(_QWORD *)&task_info_outCnt[20] = v131;
          *(_WORD *)&task_info_outCnt[28] = 2080;
          *(_QWORD *)&task_info_outCnt[30] = __p;
          *(_WORD *)&task_info_outCnt[38] = 2048;
          v138 = (void **)v112;
          _os_log_impl(&dword_18EE07000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d The client lacks permissions for dealing with encrypted codecs,required to convert from %s to %s, as requested for converter ->  %p", task_info_outCnt, 0x30u);
          if (v130 < 0)
            operator delete(__p[0]);
          if (v132 < 0)
          {
            v29 = v131[0];
            goto LABEL_141;
          }
        }
        goto LABEL_142;
      }
    }
LABEL_17:
    v18 = 0;
    v15 = 1;
    v16 = 1;
  }
  while ((v19 & 1) == 0);
  v30 = (uint64_t *)v112;
  *(_QWORD *)(v112 + 8) = 0;
  *(_QWORD *)(v112 + 24) = 0;
  *(_QWORD *)v112 = 0;
  *(_DWORD *)(v112 + 16) = 0;
  v31 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)task_info_outCnt = *(_OWORD *)a2;
  *(_OWORD *)&task_info_outCnt[16] = v31;
  *(_QWORD *)&task_info_outCnt[32] = *(_QWORD *)(a2 + 32);
  AudioConverterClientBufferManager::AudioConverterClientBufferManager((AudioConverterClientBufferManager *)(v112 + 32), (const CA::StreamDescription *)task_info_outCnt);
  v32 = a3;
  v33 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)task_info_outCnt = *(_OWORD *)a3;
  *(_OWORD *)&task_info_outCnt[16] = v33;
  *(_QWORD *)&task_info_outCnt[32] = *(_QWORD *)(a3 + 32);
  AudioConverterClientBufferManager::AudioConverterClientBufferManager((AudioConverterClientBufferManager *)(v112 + 128), (const CA::StreamDescription *)task_info_outCnt);
  *(_QWORD *)(v112 + 224) = 0;
  *(_BYTE *)(v112 + 232) = 1;
  Class = object_getClass(object);
  if (Class == (Class)MEMORY[0x1E0C812E0])
  {
    *(_QWORD *)task_info_out = object;
    v42 = xpc_null_create();
    remoteAudioConverterClient(task_info_outCnt, (void **)task_info_out);
    v43 = *(_QWORD *)v112;
    *(_QWORD *)v112 = *(_QWORD *)task_info_outCnt;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    *(_QWORD *)task_info_outCnt = 0;
    xpc_release(object);
    v44 = *(swix::connection **)(*(_QWORD *)v112 + 8);
    if (v44)
    {
      swix::connection::activate(v44);
      object = v42;
      goto LABEL_45;
    }
    goto LABEL_128;
  }
  remoteAudioConverterClientWithActivatedEndpoint(task_info_outCnt, v35, v36);
  v37 = *(auoop **)v112;
  *(_QWORD *)v112 = *(_QWORD *)task_info_outCnt;
  if (v37)
    v37 = (auoop *)(*(uint64_t (**)(auoop *))(*(_QWORD *)v37 + 8))(v37);
  v38 = auoop::gWorkgroupManager(v37);
  v39 = (os_unfair_lock_s **)operator new();
  *(_QWORD *)task_info_outCnt = &off_1E2915648;
  *(_QWORD *)&task_info_outCnt[8] = v112;
  *(_QWORD *)&task_info_outCnt[24] = task_info_outCnt;
  auoop::WorkgroupPropagator::WorkgroupPropagator((uint64_t)v39, v38, (uint64_t)task_info_outCnt);
  v40 = *(_QWORD **)&task_info_outCnt[24];
  if (*(_BYTE **)&task_info_outCnt[24] == task_info_outCnt)
  {
    v41 = 4;
    v40 = task_info_outCnt;
    v30 = (uint64_t *)v112;
LABEL_43:
    (*(void (**)(_QWORD *))(*v40 + 8 * v41))(v40);
  }
  else
  {
    v30 = (uint64_t *)v112;
    if (*(_QWORD *)&task_info_outCnt[24])
    {
      v41 = 5;
      goto LABEL_43;
    }
  }
  std::unique_ptr<auoop::WorkgroupPropagator>::reset[abi:ne180100]((os_unfair_lock_s ***)(v112 + 224), v39);
LABEL_45:
  v45 = *v30;
  *(_QWORD *)task_info_outCnt = &off_1E2915600;
  *(_QWORD *)&task_info_outCnt[8] = v30;
  *(_QWORD *)&task_info_outCnt[24] = task_info_outCnt;
  v46 = *(_QWORD *)(v45 + 8);
  if (!v46)
    goto LABEL_128;
  std::function<void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::operator=((_QWORD *)(v46 + 24), task_info_outCnt);
  v47 = *(_QWORD **)&task_info_outCnt[24];
  if (*(_BYTE **)&task_info_outCnt[24] == task_info_outCnt)
  {
    v51 = 4;
    v47 = task_info_outCnt;
    v48 = (uint64_t **)(a1 + 80);
    v49 = (uint64_t *)v112;
    v50 = v109;
LABEL_50:
    (*(void (**)(_QWORD *))(*v47 + 8 * v51))(v47);
  }
  else
  {
    v48 = (uint64_t **)(a1 + 80);
    v49 = (uint64_t *)v112;
    v50 = v109;
    if (*(_QWORD *)&task_info_outCnt[24])
    {
      v51 = 5;
      goto LABEL_50;
    }
  }
  *v48 = v49;
  xpc_release(object);
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  if (gAudioConverterDeferredLogOnce != -1)
    dispatch_once(&gAudioConverterDeferredLogOnce, &__block_literal_global);
  if ((v108 & 0x10000) != 0)
  {
    AudioConverterLog();
    v103 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)task_info_outCnt = 136315394;
      *(_QWORD *)&task_info_outCnt[4] = "AudioConverterOOP.cpp";
      *(_WORD *)&task_info_outCnt[12] = 1024;
      *(_DWORD *)&task_info_outCnt[14] = 333;
      _os_log_impl(&dword_18EE07000, v103, OS_LOG_TYPE_ERROR, "%25s:%-5d Unbuffered mode not supported for out-of-process AudioConverters", task_info_outCnt, 0x12u);
    }
    v104 = __cxa_allocate_exception(4uLL);
    v105 = 1718449215;
LABEL_153:
    *v104 = v105;
    __cxa_throw(v104, MEMORY[0x1E0DE4EF0], 0);
  }
  v52 = atomic_load((unsigned __int8 *)*v48 + 232);
  if ((v52 & 1) == 0)
  {
    AudioConverterLog();
    v106 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)task_info_outCnt = 136315394;
      *(_QWORD *)&task_info_outCnt[4] = "AudioConverterOOP.cpp";
      *(_WORD *)&task_info_outCnt[12] = 1024;
      *(_DWORD *)&task_info_outCnt[14] = 339;
      _os_log_impl(&dword_18EE07000, v106, OS_LOG_TYPE_DEFAULT, "%25s:%-5d XPC Connection invalid before constructing new OOP converter.", task_info_outCnt, 0x12u);
    }
    v104 = __cxa_allocate_exception(4uLL);
    v105 = 560164718;
    goto LABEL_153;
  }
  __p[0] = 0;
  *(_QWORD *)&inDesc.componentType = 0;
  v141[0] = 4;
  if (*(_DWORD *)(v113 + 8) == 1885564203
    || (*(_DWORD *)(a2 + 28) * *(_DWORD *)(a2 + 24) * *(_DWORD *)(v113 + 20)
                    + *(_DWORD *)(v113 + 24) * *(_DWORD *)(a2 + 20) * *(_DWORD *)(v113 + 28)) >= 0x10000)
  {
    v53 = **v48;
    v54 = *(_OWORD *)(a2 + 16);
    bytes[0] = *(_OWORD *)a2;
    bytes[1] = v54;
    v128 = *(_QWORD *)(a2 + 32);
    v55 = *(_OWORD *)(v113 + 16);
    v125[0] = *(_OWORD *)v113;
    v125[1] = v55;
    v126 = *(_QWORD *)(v113 + 32);
    MEMORY[0x193FFDBA8](task_info_out, 74777827);
    xpc_dictionary_set_data(*(xpc_object_t *)&task_info_out[2], "sourceFormat", bytes, 0x28uLL);
    xpc_dictionary_set_data(*(xpc_object_t *)&task_info_out[2], "destinationFormat", v125, 0x28uLL);
    if (v50)
      xpc_dictionary_set_data(*(xpc_object_t *)&task_info_out[2], "classDescriptions", v107, 12 * v50);
    v56 = *(swix::connection **)(v53 + 8);
    if (!v56)
      goto LABEL_128;
    swix::connection::send_and_await_reply(v56, (const swix::encode_message *)task_info_out);
    v57 = swix::coder<int>::decode(*(void **)&task_info_outCnt[8], ".error");
    xpc_release(*(xpc_object_t *)&task_info_outCnt[8]);
    xpc_release(*(xpc_object_t *)&task_info_out[2]);
    if ((unint64_t)(v57 == 0) << 32 || !v57)
    {
      v58 = 0;
      v59 = 0;
      LODWORD(v133) = 4;
      *(_QWORD *)task_info_outCnt = 0x100000000;
      do
      {
        v60 = v58;
        v61 = *(unsigned int *)&task_info_outCnt[4 * v59];
        if ((_DWORD)v61)
          v62 = v113;
        else
          v62 = a2;
        if (*(_DWORD *)(v62 + 8) == 1885564203)
          (*(void (**)(uint64_t, uint64_t, __int128 *, char *))(*(_QWORD *)a1 + 48))(a1, 1835296371, &v133, (char *)__p + 4 * v61);
        if (!*(_DWORD *)(v62 + 16))
        {
          if ((_DWORD)v61)
            v63 = 2020569203;
          else
            v63 = 2020175987;
          (*(void (**)(uint64_t, uint64_t, __int128 *, char *))(*(_QWORD *)a1 + 48))(a1, v63, &v133, (char *)&inDesc.componentType + 4 * v61);
        }
        v58 = 1;
        v59 = 1;
      }
      while ((v60 & 1) == 0);
      v32 = v113;
      v57 = AudioConverterOOP::Impl::setUpClientRenderer(*(_QWORD *)(a1 + 80), a2, v113, (uint64_t)__p[0], *(uint64_t *)&inDesc.componentType, a1);
      v48 = (uint64_t **)(a1 + 80);
      if (!v57)
      {
        v64 = **v110;
        audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::ipc_resources((audioipc::eventlink_primitive *)v115, (IOSurfaceRef *)(*v110)[1]);
        v65 = v115[0];
        if (v115[0])
          xpc_retain(v115[0]);
        else
          v65 = xpc_null_create();
        MEMORY[0x193FFDBA8](task_info_out, 74777829);
        xpc_dictionary_set_value(*(xpc_object_t *)&task_info_out[2], "ipcResources", v65);
        v71 = *(swix::connection **)(v64 + 8);
        if (v71)
        {
          swix::connection::send_and_await_reply(v71, (const swix::encode_message *)task_info_out);
          v57 = swix::coder<int>::decode(*(void **)&task_info_outCnt[8], ".error");
          xpc_release(*(xpc_object_t *)&task_info_outCnt[8]);
          xpc_release(*(xpc_object_t *)&task_info_out[2]);
          if ((((unint64_t)(v57 == 0) << 32) | v57) >= 0x100000000)
            v57 = 0;
          xpc_release(v65);
          xpc_release(v115[0]);
          goto LABEL_96;
        }
LABEL_128:
        std::terminate();
      }
    }
  }
  else
  {
    v57 = AudioConverterOOP::Impl::setUpClientRenderer(*(_QWORD *)(a1 + 80), a2, v113, 0, 0, a1);
    if (v57)
      goto LABEL_96;
    v66 = *v48;
    v67 = **v48;
    v68 = *(_OWORD *)(a2 + 16);
    v123[0] = *(_OWORD *)a2;
    v123[1] = v68;
    v124 = *(_QWORD *)(a2 + 32);
    v69 = *(_OWORD *)(v113 + 16);
    v121[0] = *(_OWORD *)v113;
    v121[1] = v69;
    v122 = *(_QWORD *)(v113 + 32);
    audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::ipc_resources((audioipc::eventlink_primitive *)v115, (IOSurfaceRef *)v66[1]);
    v70 = v115[0];
    if (v115[0])
      xpc_retain(v115[0]);
    else
      v70 = xpc_null_create();
    MEMORY[0x193FFDBA8](task_info_out, 74777828);
    xpc_dictionary_set_data(*(xpc_object_t *)&task_info_out[2], "sourceFormat", v123, 0x28uLL);
    xpc_dictionary_set_data(*(xpc_object_t *)&task_info_out[2], "destinationFormat", v121, 0x28uLL);
    if (v50)
      xpc_dictionary_set_data(*(xpc_object_t *)&task_info_out[2], "classDescriptions", v107, 12 * v50);
    xpc_dictionary_set_value(*(xpc_object_t *)&task_info_out[2], "ipcResources", v70);
    v72 = *(swix::connection **)(v67 + 8);
    if (!v72)
      goto LABEL_128;
    swix::connection::send_and_await_reply(v72, (const swix::encode_message *)task_info_out);
    v57 = swix::coder<int>::decode(*(void **)&task_info_outCnt[8], ".error");
    xpc_release(*(xpc_object_t *)&task_info_outCnt[8]);
    xpc_release(*(xpc_object_t *)&task_info_out[2]);
    xpc_release(v70);
    xpc_release(v115[0]);
    if ((unint64_t)(v57 == 0) << 32 || !v57)
    {
      if (!*(_DWORD *)(a2 + 16))
        (*(void (**)(uint64_t, uint64_t, _DWORD *, AudioComponentDescription *))(*(_QWORD *)a1 + 48))(a1, 2020175987, v141, &inDesc);
      if (!*(_DWORD *)(v113 + 16))
        (*(void (**)(uint64_t, uint64_t, _DWORD *, OSType *))(*(_QWORD *)a1 + 48))(a1, 2020569203, v141, &inDesc.componentSubType);
      v57 = 0;
    }
  }
LABEL_96:
  AudioConverterLog();
  v73 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v74 = *(int16x8_t *)(a2 + 16);
    *(_OWORD *)task_info_out = *(_OWORD *)a2;
    v119 = v74;
    v120 = *(_QWORD *)(a2 + 32);
    v75 = &v133;
    CA::StreamDescription::AsString((CA::StreamDescription *)&v133, task_info_out, *(double *)task_info_out, v74);
    if (v134.i8[7] < 0)
      v75 = (__int128 *)v133;
    v76 = *(int16x8_t *)(v32 + 16);
    *(_OWORD *)v115 = *(_OWORD *)v32;
    v116 = v76;
    v117 = *(_QWORD *)(v32 + 32);
    CA::StreamDescription::AsString((CA::StreamDescription *)v131, v115, *(double *)v115, v76);
    if (v132 >= 0)
      v77 = v131;
    else
      v77 = (void **)v131[0];
    *(_DWORD *)task_info_outCnt = 136316418;
    *(_QWORD *)&task_info_outCnt[4] = "AudioConverterOOP.cpp";
    *(_WORD *)&task_info_outCnt[12] = 1024;
    *(_DWORD *)&task_info_outCnt[14] = 412;
    *(_WORD *)&task_info_outCnt[18] = 2048;
    *(_QWORD *)&task_info_outCnt[20] = a1;
    *(_WORD *)&task_info_outCnt[28] = 2080;
    *(_QWORD *)&task_info_outCnt[30] = v75;
    *(_WORD *)&task_info_outCnt[38] = 2080;
    v138 = v77;
    v139 = 1024;
    v140 = v57;
    _os_log_impl(&dword_18EE07000, v73, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Constructed new OOP converter -> %p from %s to %s with status %i", task_info_outCnt, 0x36u);
    if (v132 < 0)
      operator delete(v131[0]);
    if (v134.i8[7] < 0)
      operator delete((void *)v133);
    v32 = v113;
  }
  if (v57)
  {
    if (v57 == -304 || v57 == -2 || v57 == -302)
    {
      v102 = __cxa_allocate_exception(4uLL);
      *v102 = 560164718;
    }
    else
    {
      v102 = __cxa_allocate_exception(4uLL);
      *v102 = v57;
    }
    __cxa_throw(v102, MEMORY[0x1E0DE4EF0], 0);
  }
  v78 = 0;
  v79 = 0;
  v80 = *(_DWORD *)(v32 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = v80;
  *(_QWORD *)task_info_outCnt = 0x100000000;
  do
  {
    v81 = v78;
    v82 = *(unsigned int *)&task_info_outCnt[4 * v79];
    if ((_DWORD)v82)
      v83 = v113;
    else
      v83 = a2;
    if (*(_DWORD *)(v83 + 8) == 1885564203)
      (*(void (**)(uint64_t, uint64_t, _DWORD *, char *))(*(_QWORD *)a1 + 48))(a1, 1835296371, v141, (char *)__p + 4 * v82);
    if (!*(_DWORD *)(v83 + 16))
    {
      if ((_DWORD)v82)
        v84 = 2020569203;
      else
        v84 = 2020175987;
      (*(void (**)(uint64_t, uint64_t, _DWORD *, char *))(*(_QWORD *)a1 + 48))(a1, v84, v141, (char *)&inDesc.componentType + 4 * v82);
    }
    v78 = 1;
    v79 = 1;
  }
  while ((v81 & 1) == 0);
  v85 = *(_QWORD *)(a1 + 80);
  v86 = *(_QWORD *)(v85 + 8);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)(v86 + 240) + 32);
  *(_BYTE *)(a1 + 96) = 1;
  v87 = *(_DWORD *)(a2 + 16);
  componentType = inDesc.componentType;
  if (!v87)
    v87 = inDesc.componentType;
  *(_DWORD *)(v85 + 16) = v87;
  v89 = *(unsigned int *)(v86 + 272);
  if (componentType)
    *(_DWORD *)(v85 + 112) = componentType;
  *(_BYTE *)(v85 + 104) = (_DWORD)v89 != 0;
  std::vector<AudioStreamPacketDescription>::resize(*(char ***)(v85 + 88), v89);
  v90 = *v48;
  v91 = *(unsigned int *)((*v48)[1] + 276);
  if (inDesc.componentSubType)
    *((_DWORD *)v90 + 52) = inDesc.componentSubType;
  *((_BYTE *)v90 + 200) = (_DWORD)v91 != 0;
  std::vector<AudioStreamPacketDescription>::resize((char **)v90[23], v91);
  return a1;
}

void sub_18F0B8354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, AT::ScopedTrace *a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, uint64_t a16, uint64_t a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AudioConverterOOP::Impl::setUpClientRenderer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v15;
  _DWORD *v16;
  int *v17;
  int v18;
  UInt32 v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  int v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  int v40;
  NSObject *v41;
  _DWORD *exception;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  UInt32 ioPropertyDataSize[2];
  char v60;
  void *outPropertyData[2];
  char v62;
  _BYTE buf[12];
  __int16 v64;
  int v65;
  uint64_t v66;

  v6 = 0;
  v7 = 0;
  v66 = *MEMORY[0x1E0C80C00];
  v8 = *(_OWORD *)(a2 + 16);
  v45 = *(_OWORD *)a2;
  v46 = v8;
  v9 = *(_OWORD *)(a3 + 16);
  v51 = *(_OWORD *)a3;
  v57 = a5;
  v58 = a4;
  v47 = *(_QWORD *)(a2 + 32);
  v52 = v9;
  v53 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)buf = 0x100000000;
  do
  {
    v10 = v6;
    v11 = *(unsigned int *)&buf[4 * v7];
    v12 = (char *)&v45 + 56 * v11;
    LODWORD(outPropertyData[0]) = 0;
    ioPropertyDataSize[0] = 4;
    v13 = *((_DWORD *)v12 + 2);
    if (v13 == 1818440480 || v13 == 1935827744)
    {
      v15 = 1;
    }
    else if (AudioFormatGetProperty(0x66766272u, 0x28u, (char *)&v45 + 56 * v11, ioPropertyDataSize, outPropertyData))
    {
      v15 = *((_DWORD *)v12 + 4) == 0;
    }
    else
    {
      v15 = (int)outPropertyData[0];
    }
    v16 = (_DWORD *)&v45 + 14 * v11;
    v17 = (int *)&v57 + v11;
    if (!*v17)
      v17 = (int *)(v12 + 16);
    v18 = *v17;
    v19 = ioPropertyDataSize[v11 - 2];
    v16[10] = v15;
    v16[11] = v19;
    v16[12] = v18;
    v6 = 1;
    v7 = 1;
  }
  while ((v10 & 1) == 0);
  v20 = operator new();
  v21 = HIDWORD(v52);
  if ((BYTE12(v51) & 0x20) == 0)
    v21 = 1;
  if (DWORD2(v51) == 1885564203)
  {
    v22 = (2 * v55) + (unint64_t)v50 + (v52 * DWORD1(v46) * v21) + 140;
  }
  else
  {
    v23 = HIDWORD(v46);
    if ((BYTE12(v45) & 0x20) == 0)
      v23 = 1;
    v22 = v23 * v50 + (unint64_t)(v21 * v56) + 16;
  }
  if (v22 <= 0x1FE98)
    v24 = 131056;
  else
    v24 = (1 << vcvtpd_u64_f64(log2((double)(v22 + 376)))) - 16;
  audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::ipc_node_base(v20, v24);
  atomic_store(1u, *(unsigned int **)(v20 + 8));
  atomic_store(0, *(unsigned int **)(v20 + 16));
  *(_BYTE *)(v20 + 56) = 0;
  *(_BYTE *)(v20 + 320) = 0;
  v25 = DWORD1(v46);
  *(_DWORD *)(v20 + 328) = v48;
  *(_DWORD *)(v20 + 332) = v54;
  *(_QWORD *)(v20 + 344) = v25;
  *(_QWORD *)(v20 + 352) = 0;
  *(_QWORD *)(v20 + 368) = 0;
  *(_QWORD *)(v20 + 376) = 0;
  v26 = *(_QWORD *)(v20 + 24);
  v27 = IOSurfaceGetAllocSize(*(IOSurfaceRef *)v20) - 16;
  if (*(_BYTE *)(v20 + 320))
  {
    v28 = *(_QWORD *)(v20 + 248);
    *(_QWORD *)(v20 + 248) = 0;
    if (v28)
      std::default_delete<AudioConverterSharedAudioBuffers>::operator()[abi:ne180100](v28);
    *(_BYTE *)(v20 + 320) = 0;
  }
  v29 = 0;
  *(_QWORD *)(v20 + 56) = v26;
  *(_QWORD *)(v20 + 64) = v27;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_OWORD *)(v20 + 128) = 0u;
  *(_OWORD *)(v20 + 144) = 0u;
  *(_OWORD *)(v20 + 160) = 0u;
  *(_OWORD *)(v20 + 176) = 0u;
  *(_OWORD *)(v20 + 192) = 0u;
  *(_OWORD *)(v20 + 208) = 0u;
  *(_OWORD *)(v20 + 224) = 0u;
  *(_OWORD *)(v20 + 240) = 0u;
  *(_OWORD *)(v20 + 256) = 0u;
  *(_OWORD *)(v20 + 272) = 0u;
  *(_QWORD *)(v20 + 288) = 0;
  *(_BYTE *)(v20 + 312) = 1;
  *(_QWORD *)(v20 + 240) = v26;
  *(_QWORD *)(v20 + 72) = v26 + 48;
  *(_QWORD *)(v26 + 160) = 208;
  *(_QWORD *)buf = 0x100000000;
  do
  {
    v30 = *(unsigned int *)&buf[v29];
    v31 = (char *)&v45 + 56 * v30;
    v32 = v26 + 48 + 40 * v30;
    v33 = *((_QWORD *)v31 + 4);
    v34 = *((_OWORD *)v31 + 1);
    *(_OWORD *)v32 = *(_OWORD *)v31;
    *(_OWORD *)(v32 + 16) = v34;
    *(_QWORD *)(v32 + 32) = v33;
    *(_DWORD *)(v26 + 128 + 4 * v30) = *((_DWORD *)v31 + 10);
    *(_DWORD *)(v26 + 144 + 4 * v30) = *((_DWORD *)v31 + 12);
    *(_DWORD *)(v26 + 136 + 4 * v30) = *((_DWORD *)v31 + 11);
    v29 += 4;
  }
  while (v29 != 8);
  *(_BYTE *)(v20 + 320) = 1;
  v35 = ACOOPSharedMemory::calculateAndPartitionBuffers((ACOOPSharedMemory *)(v20 + 56));
  if (v35)
  {
    v40 = v35;
    AudioConverterLog();
    v41 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioConverterRenderClient.h";
      v64 = 1024;
      v65 = 33;
      _os_log_impl(&dword_18EE07000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d Error constructing shared memory, throwing kAudioConverterErr_UnspecifiedError", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(4uLL);
    *exception = v40;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  audioipc::eventlink_primitive::activate();
  v36 = v55;
  *(_DWORD *)(v20 + 336) = v49;
  *(_DWORD *)(v20 + 340) = v36;
  *(_QWORD *)(v20 + 352) = a6;
  v37 = atomic_load((unsigned __int8 *)&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm34EEEtlA34_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc65ELc67ELc83ELc101ELc114ELc118ELc105ELc99ELc101ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input);
  if ((v37 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm34EEEtlA34_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc65ELc67ELc83ELc101ELc114ELc118ELc105ELc99ELc101ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input))
  {
    _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm34EEEtlA34_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc65ELc67ELc83ELc101ELc114ELc118ELc105ELc99ELc101ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input = checkEnvVar("CoreAudio_CaptureACService_Output");
    __cxa_guard_release(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm34EEEtlA34_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc65ELc67ELc83ELc101ELc114ELc118ELc105ELc99ELc101ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input);
  }
  if (_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm34EEEtlA34_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc65ELc67ELc83ELc101ELc114ELc118ELc105ELc99ELc101ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input)
  {
    acv2::AudioConverterBase::createCapturer(outPropertyData, "-AudioConverterServiceOut", (const std::__fs::filesystem::path **)(v20 + 376), &v51, *(const void **)(v20 + 352));
    if (v62 < 0)
      operator delete(outPropertyData[0]);
  }
  v38 = atomic_load((unsigned __int8 *)&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm33EEEtlA33_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc65ELc67ELc83ELc101ELc114ELc118ELc105ELc99ELc101ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
  if ((v38 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm33EEEtlA33_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc65ELc67ELc83ELc101ELc114ELc118ELc105ELc99ELc101ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input))
  {
    _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm33EEEtlA33_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc65ELc67ELc83ELc101ELc114ELc118ELc105ELc99ELc101ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input = checkEnvVar("CoreAudio_CaptureACService_Input");
    __cxa_guard_release(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm33EEEtlA33_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc65ELc67ELc83ELc101ELc114ELc118ELc105ELc99ELc101ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
  }
  if (_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm33EEEtlA33_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc65ELc67ELc83ELc101ELc114ELc118ELc105ELc99ELc101ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input)
  {
    acv2::AudioConverterBase::createCapturer(ioPropertyDataSize, "-AudioConverterServiceIn", (const std::__fs::filesystem::path **)(v20 + 368), &v45, *(const void **)(v20 + 352));
    if (v60 < 0)
      operator delete(*(void **)ioPropertyDataSize);
  }
  std::unique_ptr<AudioConverterRenderClient>::reset[abi:ne180100]((uint64_t *)(a1 + 8), v20);
  return 0;
}

void sub_18F0B8BB0(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  const std::__fs::filesystem::path **v3;
  const std::__fs::filesystem::path **v4;
  uint64_t v5;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;

  __cxa_guard_abort(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm33EEEtlA33_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc65ELc67ELc83ELc101ELc114ELc118ELc105ELc99ELc101ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100](v4, 0);
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100](v3, 0);
  if (*(_BYTE *)(v2 + 320))
  {
    v8 = *(_QWORD *)(v2 + 248);
    *(_QWORD *)(v2 + 248) = 0;
    if (v8)
      std::default_delete<AudioConverterSharedAudioBuffers>::operator()[abi:ne180100](v8);
  }
  audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::~rt_sender(v2);
  MEMORY[0x193FFE460](v2, 0x10F2C40CE9AAB0ALL);
  if (a2 == 2)
  {
    v9 = __cxa_begin_catch(a1);
    AudioConverterLog();
    v10 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v11 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 16))(v9);
      *(_DWORD *)(v5 - 160) = 136315650;
      v12 = v5 - 160;
      *(_QWORD *)(v12 + 4) = "AudioConverterOOP.cpp";
      *(_WORD *)(v5 - 148) = 1024;
      *(_DWORD *)(v12 + 14) = 302;
      *(_WORD *)(v5 - 142) = 2080;
      *(_QWORD *)(v12 + 20) = v11;
      _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterOOP: Error creating real time renderer: %s.", (uint8_t *)(v5 - 160), 0x1Cu);
    }
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    __cxa_begin_catch(a1);
    AudioConverterLog();
    v13 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v5 - 160) = 136315394;
      v14 = v5 - 160;
      *(_QWORD *)(v14 + 4) = "AudioConverterOOP.cpp";
      *(_WORD *)(v5 - 148) = 1024;
      *(_DWORD *)(v14 + 14) = 306;
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterOOP: Error creating real time renderer.", (uint8_t *)(v5 - 160), 0x12u);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x18F0B8A7CLL);
}

void AudioConverterClientBufferManager::AudioConverterClientBufferManager(AudioConverterClientBufferManager *this, const CA::StreamDescription *a2)
{
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  CA::AudioBuffers *v8;
  _QWORD *v9;
  int v10;

  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *(_OWORD *)this = v4;
  *((_OWORD *)this + 1) = v5;
  v6 = (_QWORD *)((char *)this + 40);
  if ((*((_DWORD *)a2 + 3) & 0x20) != 0)
    v7 = *((unsigned int *)a2 + 7);
  else
    v7 = 1;
  CA::AudioBuffers::AudioBuffers(v6, v8, 1);
  v9 = operator new(0x30uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_1E2917C58;
  v9[4] = 0;
  v9[5] = 0;
  v9[3] = 0;
  *((_QWORD *)this + 7) = v9 + 3;
  *((_QWORD *)this + 8) = v9;
  *((_DWORD *)this + 19) = 0;
  v10 = *((_DWORD *)a2 + 4);
  if (!v10)
    v10 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 20) = v10;
  *((_QWORD *)this + 11) = 0;
}

void sub_18F0B8E54(_Unwind_Exception *a1)
{
  std::pmr **v1;

  CA::AudioBuffers::~AudioBuffers(v1);
  _Unwind_Resume(a1);
}

void remoteAudioConverterClientWithActivatedEndpoint(_QWORD *a1, uint64_t a2, dispatch_queue_s *a3)
{
  swix::connection *v4;
  xpc_object_t object;

  applesauce::xpc::connection::create((applesauce::xpc::connection *)&object, "com.apple.audio.AudioConverterService", a3);
  remoteAudioConverterClient(a1, &object);
  xpc_release(object);
  v4 = *(swix::connection **)(*a1 + 8);
  if (!v4)
    std::terminate();
  swix::connection::activate(v4);
}

void sub_18F0B8EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v12 = v11;
  *v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

void remoteAudioConverterClient(_QWORD *a1, void **a2)
{
  NSObject *inactive;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15[2];
  void *__p[2];
  __int128 v17;
  xpc_object_t v18;
  dispatch_object_t object;
  uint64_t v20;
  __int16 v21;
  char v22;
  _BYTE v23[24];
  _BYTE *v24;
  char v25;
  std::string v26;
  char v27;
  _BYTE v28[128];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  inactive = dispatch_workloop_create_inactive("ACClient");
  dispatch_workloop_set_scheduler_priority();
  dispatch_activate(inactive);
  *(_OWORD *)__p = 0u;
  v17 = 0u;
  *(_OWORD *)v15 = 0u;
  v5 = *a2;
  v18 = v5;
  if (v5)
  {
    xpc_retain(v5);
    if (!inactive)
      goto LABEL_4;
    goto LABEL_3;
  }
  v18 = xpc_null_create();
  if (inactive)
LABEL_3:
    dispatch_retain(inactive);
LABEL_4:
  object = inactive;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v25 = 0;
  dispatch_release(inactive);
  v6 = (_QWORD *)operator new();
  swix::connection_config::connection_config(&v26, (const swix::connection_config *)v15);
  v27 = 1;
  v28[0] = 0;
  v29 = 0;
  std::construct_at[abi:ne180100]<swix::connection_config,swix::connection_config,swix::connection_config*>((uint64_t)v28, (__int128 *)&v26);
  v29 = 1;
  swix::ipc_interface::ipc_interface();
  std::__optional_destruct_base<swix::connection_config,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v28);
  *v6 = &off_1E2908C58;
  *a1 = v6;
  std::__optional_destruct_base<swix::connection_config,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v26);
  if (!v25)
    goto LABEL_12;
  v13 = v24;
  if (v24 == v23)
  {
    v14 = 4;
    v13 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_12;
    v14 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v13 + 8 * v14))(v13, v7, v8, v9, v10, v11, v12);
LABEL_12:
  if (object)
    dispatch_release(object);
  xpc_release(v18);
  v18 = 0;
  if (SHIBYTE(v17) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v15[0]);
}

void sub_18F0B90B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(swix::ipc_endpoint const&,applesauce::xpc::object const&)#1},std::allocator<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(swix::ipc_endpoint const&,applesauce::xpc::object const&)#1}>,void ()(swix::ipc_endpoint&,applesauce::xpc::object const&)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(swix::ipc_endpoint const&,applesauce::xpc::object const&)#1},std::allocator<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(swix::ipc_endpoint const&,applesauce::xpc::object const&)#1}>,void ()(swix::ipc_endpoint&,applesauce::xpc::object const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915600;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(swix::ipc_endpoint const&,applesauce::xpc::object const&)#1},std::allocator<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(swix::ipc_endpoint const&,applesauce::xpc::object const&)#1}>,void ()(swix::ipc_endpoint&,applesauce::xpc::object const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915600;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(swix::ipc_endpoint const&,applesauce::xpc::object const&)#1},std::allocator<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(swix::ipc_endpoint const&,applesauce::xpc::object const&)#1}>,void ()(swix::ipc_endpoint&,applesauce::xpc::object const&)>::operator()(uint64_t a1, uint64_t a2, swix **a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *p_p;
  void *__p;
  char v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  AudioConverterLog();
  v5 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    swix::xpc_object_description(*a3, v6);
    if (v9 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315906;
    v11 = "AudioConverterOOP.cpp";
    v12 = 1024;
    v13 = 276;
    v14 = 2048;
    v15 = v4;
    v16 = 2080;
    v17 = p_p;
    _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterOOP -> %p: Converter connection was invalidated with error \"%s\".", buf, 0x26u);
    if (v9 < 0)
      operator delete(__p);
  }
  atomic_store(0, (unsigned __int8 *)(v4 + 232));
}

void std::__function::__func<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(applesauce::xpc::dict const&)#1},std::allocator<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(applesauce::xpc::dict const&)#1}>,void ()(applesauce::xpc::dict const&)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(applesauce::xpc::dict const&)#1},std::allocator<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(applesauce::xpc::dict const&)#1}>,void ()(applesauce::xpc::dict const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915648;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(applesauce::xpc::dict const&)#1},std::allocator<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(applesauce::xpc::dict const&)#1}>,void ()(applesauce::xpc::dict const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915648;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(applesauce::xpc::dict const&)#1},std::allocator<AudioConverterOOP::Impl::Impl(applesauce::xpc::connection,AudioStreamBasicDescription const*,AudioStreamBasicDescription const*)::{lambda(applesauce::xpc::dict const&)#1}>,void ()(applesauce::xpc::dict const&)>::operator()(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v2;
  xpc_object_t v3;
  swix::connection *v4;
  xpc_object_t object;
  _BYTE v6[8];
  xpc_object_t xdict;

  v2 = **(_QWORD **)(a1 + 8);
  v3 = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    v3 = xpc_null_create();
  MEMORY[0x193FFDBA8](v6, 74777833);
  xpc_dictionary_set_value(xdict, "workgroups", v3);
  v4 = *(swix::connection **)(v2 + 8);
  if (!v4)
    std::terminate();
  swix::connection::send_and_await_reply(v4, (const swix::encode_message *)v6);
  swix::coder<int>::decode(object, ".error");
  xpc_release(object);
  xpc_release(xdict);
  xpc_release(v3);
}

void sub_18F0B93B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  xpc_release(object);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18F0B9384);
}

void std::__shared_ptr_emplace<std::vector<AudioStreamPacketDescription>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<AudioStreamPacketDescription>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917C58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<std::vector<AudioStreamPacketDescription>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t newAudioConverterOOP(const AudioStreamBasicDescription *a1, const AudioStreamBasicDescription *a2, unsigned int a3, AudioClassDescription *a4, int a5)
{
  uint64_t v10;
  xpc_object_t object;

  v10 = operator new();
  object = xpc_null_create();
  AudioConverterOOP::AudioConverterOOP(v10, (uint64_t)a1, (uint64_t)a2, a3, a4, a5, &object);
  xpc_release(object);
  return v10;
}

void sub_18F0B94D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  uint64_t v10;

  xpc_release(object);
  MEMORY[0x193FFE460](v10, 0x10A1C4037BC56B3);
  _Unwind_Resume(a1);
}

uint64_t newAudioConverterInProcessXPC(const AudioStreamBasicDescription *a1, const AudioStreamBasicDescription *a2, unsigned int a3, AudioClassDescription *a4, int a5)
{
  uint64_t v10;
  void *v11;
  objc_class *v12;
  xpc_object_t v13;
  xpc_connection_t v14;
  xpc_object_t v15;
  uint64_t v16;
  xpc_object_t v17;
  xpc_object_t v19;
  xpc_object_t object;

  v10 = operator new();
  if (AudioConverterServiceRunInProcess(void)::onceToken[0] != -1)
    dispatch_once(AudioConverterServiceRunInProcess(void)::onceToken, &__block_literal_global_1303);
  v11 = xpc_connection_create_from_endpoint(*(xpc_endpoint_t *)(gService_0 + 40));
  v12 = (objc_class *)MEMORY[0x1E0C812E0];
  if ((v11 || (v11 = xpc_null_create()) != 0) && object_getClass(v11) == v12)
  {
    xpc_retain(v11);
    v13 = v11;
  }
  else
  {
    v13 = xpc_null_create();
  }
  xpc_release(v11);
  v14 = xpc_connection_create_from_endpoint(*(xpc_endpoint_t *)(gService_0 + 40));
  v15 = v14;
  if (v14)
  {
    v19 = v14;
  }
  else
  {
    v15 = xpc_null_create();
    v19 = v15;
    if (!v15)
    {
LABEL_12:
      v19 = xpc_null_create();
      goto LABEL_14;
    }
  }
  if (object_getClass(v15) != v12)
    goto LABEL_12;
  xpc_retain(v15);
LABEL_14:
  xpc_release(v15);
  v16 = gService_0;
  if (v13)
  {
    xpc_retain(v13);
    object = v13;
    v17 = v13;
  }
  else
  {
    v17 = xpc_null_create();
    object = v17;
    if (!v17)
      goto LABEL_18;
  }
  if (object_getClass(v17) == v12)
  {
    xpc_retain(v17);
    goto LABEL_20;
  }
LABEL_18:
  object = xpc_null_create();
LABEL_20:
  XPCListener::accept_connection((XPCListener *)(v16 + 8), &object);
  xpc_release(object);
  object = 0;
  xpc_release(v17);
  xpc_connection_activate((xpc_connection_t)v13);
  xpc_release(v13);
  AudioConverterOOP::AudioConverterOOP(v10, (uint64_t)a1, (uint64_t)a2, a3, a4, a5, &v19);
  xpc_release(v19);
  return v10;
}

void sub_18F0B9710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  uint64_t v10;

  xpc_release(object);
  MEMORY[0x193FFE460](v10, 0x10A1C4037BC56B3);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_FormatIsVBR(RegistryAccess *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  RegistryAccess::instance(a1);
  v4 = qword_1ECEF4E20;
  os_unfair_recursive_lock_lock_with_options();
  v5 = (*(uint64_t (**)(uint64_t, RegistryAccess *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, a1, 1819304813, 0, 0);
  if (v5
    || (v5 = (*(uint64_t (**)(uint64_t, uint64_t, RegistryAccess *, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, 1819304813, a1, 0, 0)) != 0)
  {
    v6 = (*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)v5 + 24))(v5, a2);
  }
  else
  {
    v6 = 1718449215;
  }
  os_unfair_recursive_lock_unlock();
  return v6;
}

void sub_18F0B987C(_Unwind_Exception *a1)
{
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_FormatIsEncrypted(uint64_t result, unsigned int *a2)
{
  unsigned int v2;
  int v3;
  unsigned __int16 v4;

  v2 = 1;
  if ((int)result > 1902211170)
  {
    if ((int)result <= 2053202274)
    {
      if ((int)result > 1902537826)
      {
        if ((_DWORD)result == 1902537827 || (_DWORD)result == 1902928227)
          goto LABEL_34;
        v3 = 1903522657;
      }
      else
      {
        if ((_DWORD)result == 1902211171 || (_DWORD)result == 1902324531)
          goto LABEL_34;
        v3 = 1902469939;
      }
    }
    else if ((int)result > 2053319474)
    {
      if ((_DWORD)result == 2053319475 || (_DWORD)result == 2053464883)
        goto LABEL_34;
      v3 = 2053923171;
    }
    else
    {
      if ((result - 2053202739) <= 0x3D
        && ((1 << (result - 51)) & 0x2020000000000001) != 0)
      {
        goto LABEL_34;
      }
      v3 = 2053202275;
    }
  }
  else if ((int)result <= 1885547314)
  {
    if ((int)result <= 1885430578)
    {
      if ((_DWORD)result == 1633771875)
        goto LABEL_34;
      v4 = 24931;
    }
    else
    {
      if ((result - 1885430579) <= 0x3D
        && ((1 << (result - 51)) & 0x2020000000000001) != 0)
      {
        goto LABEL_34;
      }
      v4 = 28771;
    }
    v3 = v4 | 0x70610000;
  }
  else if ((int)result <= 1902207330)
  {
    if ((_DWORD)result == 1885547315 || (_DWORD)result == 1885692723)
      goto LABEL_34;
    v3 = 1886745441;
  }
  else
  {
    if ((result - 1902207795) <= 0x3D
      && ((1 << (result - 51)) & 0x2020000000000001) != 0)
    {
      goto LABEL_34;
    }
    v3 = 1902207331;
  }
  if ((_DWORD)result != v3)
    v2 = 0;
LABEL_34:
  *a2 = v2;
  return result;
}

uint64_t GetCodecPropertyFromFormatInfo(const AudioFormatInfo *a1, unsigned int *a2, void *a3, AudioCodecPropertyID a4)
{
  uint64_t PropertyInfo;
  UInt32 outSize;
  AudioCodec v11;
  AudioCodec inCodec;

  inCodec = 0;
  PropertyInfo = OpenCodecComponent(a1->mASBD.mFormatID, &inCodec, 0x61646563u);
  if (!(_DWORD)PropertyInfo)
  {
    v11 = inCodec;
    PropertyInfo = AudioCodecInitialize(inCodec, 0, 0, a1->mMagicCookie, a1->mMagicCookieSize);
    if (!(_DWORD)PropertyInfo)
    {
      outSize = 0;
      PropertyInfo = AudioCodecGetPropertyInfo(v11, a4, &outSize, 0);
      if (!(_DWORD)PropertyInfo)
      {
        if (a3)
        {
          if (*a2 >= outSize)
            PropertyInfo = AudioCodecGetProperty(v11, a4, a2, a3);
          else
            PropertyInfo = 561211770;
        }
        else
        {
          PropertyInfo = 0;
          *a2 = outSize;
        }
      }
    }
    AudioCodecAutoDisposer::~AudioCodecAutoDisposer(&v11);
  }
  return PropertyInfo;
}

void sub_18F0B9B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AudioCodecAutoDisposer::~AudioCodecAutoDisposer((OpaqueAudioComponentInstance **)va);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_VorbisModeInfoFromFormatInfo(const AudioFormatInfo *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v6;
  const void *mMagicCookie;
  __int128 v8;
  uint64_t v9;

  if (a1->mASBD.mFormatID != 1987015266)
    return 1718449215;
  if (!a3)
  {
    result = 0;
LABEL_9:
    *a2 = 24;
    return result;
  }
  if (*a2 < 0x18u)
    return 561213539;
  v9 = 0;
  mMagicCookie = a1->mMagicCookie;
  v8 = 0uLL;
  LODWORD(v8) = a1->mMagicCookieSize;
  v6 = 32;
  result = GetCodecPropertyFromFormatInfo(a1, &v6, &mMagicCookie, 0x766E666Fu);
  if (!(_DWORD)result)
  {
    *(_QWORD *)a3 = *(_QWORD *)((char *)&v8 + 4);
    *(_DWORD *)(a3 + 8) = HIDWORD(v8);
    *(_QWORD *)(a3 + 16) = v9;
    goto LABEL_9;
  }
  return result;
}

uint64_t AudioFormatProperty_CodecsParameterValueFromAudioFormat(uint64_t a1, CFStringRef *a2)
{
  uint64_t PropertyInfo;
  size_t v5;
  _DWORD *v6;
  const __CFAllocator *v7;
  void *__p[2];
  char v10;
  void *outPropertyData[3];
  UInt32 outSize;
  OpaqueAudioComponentInstance *v13;
  OpaqueAudioComponentInstance *v14;
  int v15;

  PropertyInfo = 1718449215;
  if (*(_DWORD *)(a1 + 56) == 1836069990
    && AudioFormatEncryptedFormatTranslator::DecryptFormatID(*(unsigned int *)(a1 + 8), &v15) == 1634754915)
  {
    v14 = 0;
    PropertyInfo = OpenCodecComponent(0x61706163u, &v14, 0x61646563u);
    if (!(_DWORD)PropertyInfo)
    {
      v13 = v14;
      AudioCodecInitialize(v14, 0, 0, *(const void **)(a1 + 40), *(_DWORD *)(a1 + 48));
      outSize = 0;
      PropertyInfo = AudioCodecGetPropertyInfo(v13, 0x63706D63u, &outSize, 0);
      if (!(_DWORD)PropertyInfo)
      {
        if (outSize <= 0x10)
          v5 = 16;
        else
          v5 = outSize;
        outSize = v5;
        std::vector<unsigned char>::vector(outPropertyData, v5);
        v6 = outPropertyData[0];
        *((_QWORD *)outPropertyData[0] + 1) = *(_QWORD *)(a1 + 40);
        *v6 = *(_DWORD *)(a1 + 48);
        PropertyInfo = AudioCodecGetProperty(v13, 0x63706D63u, &outSize, v6);
        if (!(_DWORD)PropertyInfo)
        {
          v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v10 = 4;
          strcpy((char *)__p, "apac");
          *a2 = CFStringCreateWithFormat(v7, 0, CFSTR("%s.%02u.%02u"), __p, *(unsigned int *)outPropertyData[0], *((unsigned int *)outPropertyData[0] + 1));
          if (v10 < 0)
            operator delete(__p[0]);
        }
        if (outPropertyData[0])
        {
          outPropertyData[1] = outPropertyData[0];
          operator delete(outPropertyData[0]);
        }
      }
      AudioCodecAutoDisposer::~AudioCodecAutoDisposer(&v13);
    }
  }
  return PropertyInfo;
}

void sub_18F0B9DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  uint64_t v20;

  if (a18 < 0)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  AudioCodecAutoDisposer::~AudioCodecAutoDisposer((OpaqueAudioComponentInstance **)(v20 - 56));
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_CanDecodeAudioFormatIndicatedByCodecsParameterValue(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t CodecPropertyFromFormatInfo;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFString *ValueAtIndex;
  const __CFString *v8;
  const __CFString *v9;
  size_t v10;
  unsigned int __n;
  AudioFormatInfo __n_4;
  _DWORD __src[2];

  CodecPropertyFromFormatInfo = 1886547824;
  if (*(_DWORD *)(a1 + 8) == 1836069990)
  {
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)a1, CFSTR("."));
    if (CFArrayGetCount(ArrayBySeparatingStrings) == 3)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
      if (CFStringCompare(ValueAtIndex, CFSTR("apac"), 0) == kCFCompareEqualTo)
      {
        v8 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 1);
        __src[0] = CFStringGetIntValue(v8);
        v9 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2);
        __src[1] = CFStringGetIntValue(v9);
        memset(&__n_4, 0, sizeof(__n_4));
        __n_4.mASBD.mFormatID = 1634754915;
        __n = 8;
        CodecPropertyFromFormatInfo = GetCodecPropertyFromFormatInfo(&__n_4, &__n, __src, 0x63706F6Bu);
        if (!(_DWORD)CodecPropertyFromFormatInfo)
        {
          v10 = __n;
          *a2 = __n;
          memcpy(a3, __src, v10);
        }
      }
    }
    CFRelease(ArrayBySeparatingStrings);
  }
  return CodecPropertyFromFormatInfo;
}

uint64_t AudioFormatProperty_AudioFormatFromCodecsParameterValue(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFString *ValueAtIndex;

  if (*(_DWORD *)(a1 + 8) != 1836069990)
    return 1886547824;
  v3 = 1718449215;
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)a1, CFSTR("."));
  if (CFArrayGetCount(ArrayBySeparatingStrings))
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
    if (CFStringCompare(ValueAtIndex, CFSTR("apac"), 0) == kCFCompareEqualTo)
    {
      v3 = 0;
      *a2 = 1634754915;
    }
  }
  CFRelease(ArrayBySeparatingStrings);
  return v3;
}

uint64_t TBitstreamReader<unsigned int>::PutBack(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;

  if (a2)
  {
    v2 = result;
    v3 = *(_DWORD *)(result + 20) + a2;
    v4 = *(_QWORD *)result - ((v3 >> 3) & 0x1FFFFFFC);
    *(_QWORD *)result = v4;
    v5 = v3 & 0x1F;
    *(_DWORD *)(result + 20) = v5;
    if (v5)
    {
      result = TBitstreamReader<unsigned int>::FillCacheFrom(result, (unsigned int *)(v4 - 4));
      *(_DWORD *)(v2 + 16) <<= -*(_BYTE *)(v2 + 20);
    }
    else
    {
      *(_DWORD *)(result + 16) = 0;
    }
  }
  return result;
}

uint64_t Ogg::PagePacketInfo::Deserialize(Ogg::PagePacketInfo *this, const unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;

  *(_DWORD *)this = a3;
  *(_QWORD *)((char *)this + 4) = 0;
  *((_QWORD *)this + 129) = 0;
  if (__CFADD__(a2, a3))
    return 4294967293;
  v4 = 0;
  if (a3)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *a2++;
      v5 += v7;
      if (v7 != 255)
      {
        *((_DWORD *)this + v6++ + 3) = v5;
        v4 = *((_DWORD *)this + 258) + v5;
        *((_DWORD *)this + 258) = v4;
        v5 = 0;
      }
      --a3;
    }
    while (a3);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v3 = 0;
  *((_DWORD *)this + 259) = v5;
  *((_DWORD *)this + 1) = v4 + v5;
  *((_DWORD *)this + 2) = v6;
  return v3;
}

uint64_t Ogg::PagePacketInfo::operator[](uint64_t a1, unsigned int a2)
{
  _DWORD *exception;

  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -1;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  return *(unsigned int *)(a1 + 4 * a2 + 12);
}

uint64_t Ogg::File::ParseHeaderPackets(Ogg::File *this, unsigned int a2, unint64_t a3, const unsigned __int8 *a4, uint64_t a5, const AudioStreamPacketDescription *a6, unsigned int *a7)
{
  int v7;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 *v23;
  int v24;
  const unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  uint64_t mSampleRate_low;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  Float64 v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v39;
  unsigned int v40;
  int64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  char *v46;
  unint64_t v47;
  _BYTE *v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  Float64 v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  size_t v61;
  char *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  size_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  size_t v79;
  void *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char v85;
  char *v86;
  char *v87;
  char *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  UInt32 v94;
  UInt32 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  int v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  Float64 v106;
  std::vector<char>::pointer begin;
  unint64_t v108;
  std::vector<char> *v109;
  std::vector<char> *v111;
  const unsigned __int8 *v112;
  void **v113;
  char **v114;
  unint64_t *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unint64_t v120;
  UInt32 outPropertyDataSize[2];
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t __src;
  int v129;
  char v130[4];
  AudioFormatInfo inSpecifier;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v19 = 1;
    return (v19 | v7) & 1;
  }
  v10 = 0;
  v11 = 0;
  v120 = a2;
  v12 = (_QWORD *)((char *)this + 152);
  v113 = (void **)((char *)this + 120);
  v115 = (unint64_t *)((char *)this + 64);
  v114 = (char **)((char *)this + 40);
  v111 = (std::vector<char> *)((char *)this + 88);
  v112 = a4 + 18;
  while (1)
  {
    v13 = (uint64_t *)(a5 + 16 * v11);
    v14 = *v13;
    v15 = (unsigned __int8 *)&a4[*v13];
    v16 = *((unsigned int *)v13 + 3);
    if (a3 != 2)
      break;
    if (*((_DWORD *)this + 2) == 1987015266)
    {
      if (*((_DWORD *)this + 36) != 2)
        goto LABEL_181;
      if (v16 < 7 || *v15 != 5 || strncmp((const char *)v15 + 1, "vorbis", 6uLL))
      {
        v19 = 0;
        v7 = 0;
        *((_DWORD *)this + 36) = 3;
        return (v19 | v7) & 1;
      }
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)v12, *((char **)this + 20), (char *)v15, (char *)&v15[v16], v16);
      v35 = 0;
      v36 = *((_OWORD *)this + 4);
      *((_OWORD *)this + 4) = *(_OWORD *)((char *)this + 152);
      *(_OWORD *)((char *)this + 152) = v36;
      v37 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = *((_QWORD *)this + 21);
      *((_QWORD *)this + 21) = v37;
      *((_DWORD *)this + 36) = 0;
      goto LABEL_141;
    }
LABEL_44:
    if (a3 >= LODWORD(a6->mStartOffset))
      goto LABEL_180;
    if (*((_DWORD *)this + 2) != 1718378851 || v16 < 4)
      goto LABEL_49;
    v39 = *v15;
    v10 = v39 >> 7;
    if ((v39 & 0x80) != 0)
      LODWORD(a6->mStartOffset) = a3 + 1;
    v35 = v39 >> 7;
LABEL_141:
    if (!*((_BYTE *)this + 208))
    {
      if (*((_DWORD *)this + 2))
      {
        v90 = *((_QWORD *)this + 8);
        v91 = *((_QWORD *)this + 9);
        if (v91 != v90)
        {
          inSpecifier.mMagicCookie = (const void *)*((_QWORD *)this + 8);
          *(_QWORD *)&inSpecifier.mMagicCookieSize = 0;
          v92 = *((_OWORD *)this + 1);
          *(_OWORD *)&inSpecifier.mASBD.mSampleRate = *(_OWORD *)this;
          *(_OWORD *)&inSpecifier.mASBD.mBytesPerPacket = v92;
          v93 = *((_QWORD *)this + 4);
          *(_QWORD *)&inSpecifier.mMagicCookieSize = (v91 - v90);
          *(_QWORD *)&inSpecifier.mASBD.mBitsPerChannel = v93;
          outPropertyDataSize[0] = 0;
          if (!AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, &inSpecifier, outPropertyDataSize)
            && outPropertyDataSize[0] >= 0x30)
          {
            v94 = outPropertyDataSize[0] / 0x30;
            std::vector<AudioFormatListItem>::resize(v114, outPropertyDataSize[0] / 0x30);
            if (!AudioFormatProperty_FormatList(&inSpecifier, 0x38u, outPropertyDataSize, (AudioFormatListItem *)*v114))
            {
              *((_BYTE *)this + 208) = 1;
              v95 = v94 - 1;
              v96 = *((_QWORD *)this + 5);
              v97 = v96 + 48 * v95;
              v98 = *(_QWORD *)(v97 + 32);
              v99 = *(_OWORD *)(v97 + 16);
              *(_OWORD *)this = *(_OWORD *)v97;
              *((_OWORD *)this + 1) = v99;
              *((_QWORD *)this + 4) = v98;
              v100 = *((_DWORD *)this + 2);
              if (v100 == 1987015266)
              {
                v102 = *((_DWORD *)this + 44) + 1;
              }
              else
              {
                if (v100 != 1869641075
                  || (v101 = *((_QWORD *)this + 8), (unint64_t)(*((_QWORD *)this + 9) - v101) < 0x13))
                {
LABEL_168:
                  if (*(_DWORD *)(v96 + 48 * v95 + 40) != -65536)
                  {
                    begin = (std::vector<char>::pointer)*((_QWORD *)this + 11);
                    v108 = *((_QWORD *)this + 12) - (_QWORD)begin;
                    if (v108 > 0x1F)
                    {
                      v109 = v111;
                      if (v108 != 32)
                        *((_QWORD *)this + 12) = begin + 32;
                    }
                    else
                    {
                      std::vector<unsigned char>::__append(v111, 32 - v108);
                      v109 = v111;
                      begin = v111->__begin_;
                    }
                    bzero(begin, 0x20uLL);
                    *(_DWORD *)v109->__begin_ = *(_DWORD *)&(*v114)[48 * v95 + 40];
                  }
                  goto LABEL_142;
                }
                v102 = *(unsigned __int16 *)(v101 + 10);
              }
              *((_DWORD *)this + 44) = v102;
              goto LABEL_168;
            }
          }
        }
      }
    }
LABEL_142:
    ++v11;
    v19 = 1;
    v7 = v120;
    if (v11 < v120)
    {
      ++a3;
      if (!v35)
        continue;
    }
    return (v19 | v7) & 1;
  }
  if (a3 == 1)
  {
    v31 = *((_DWORD *)this + 2);
    if (v31 == 1718378851)
    {
      if (v16 >= 4)
      {
        v49 = bswap32(*(_DWORD *)v15);
        v10 = v49 >> 31;
        v50 = v16 >= 0xC && (v49 & 0x7F000000) == 0x4000000;
        if (v50)
        {
          v51 = v49 & 0xFFFFFF;
          if ((_DWORD)v51 == (_DWORD)v16 - 4)
          {
            v52 = operator new();
            *(_BYTE *)(v52 + 8) = 0;
            *(_QWORD *)v52 = &off_1E2907000;
            *(_QWORD *)(v52 + 16) = v51;
            *(_QWORD *)(v52 + 24) = v15 + 4;
            *(_QWORD *)(v52 + 32) = 0;
            *(_QWORD *)(v52 + 40) = 0;
            VorbisComment::VorbisComment((VorbisComment *)&inSpecifier, (DataSource *)v52, 0, v51);
            v53 = *((double *)this + 14);
            *((_QWORD *)this + 14) = *(_QWORD *)&inSpecifier.mASBD.mSampleRate;
            inSpecifier.mASBD.mSampleRate = v53;
            std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__vdeallocate(v113);
            *(_OWORD *)((char *)this + 120) = *(_OWORD *)&inSpecifier.mASBD.mFormatID;
            *((_QWORD *)this + 17) = *(_QWORD *)&inSpecifier.mASBD.mBytesPerFrame;
            memset(&inSpecifier.mASBD.mFormatID, 0, 24);
            *(_QWORD *)outPropertyDataSize = &inSpecifier.mASBD.mFormatID;
            std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)outPropertyDataSize);
            if (*(_QWORD *)&inSpecifier.mASBD.mSampleRate)
              CFRelease(*(CFTypeRef *)&inSpecifier.mASBD.mSampleRate);
            (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
          }
        }
      }
      if (v10)
      {
        LODWORD(a6->mStartOffset) = 2;
        v35 = 1;
        goto LABEL_141;
      }
      goto LABEL_49;
    }
    if (v31 != 1987015266)
    {
      if (v31 != 1869641075)
        goto LABEL_181;
      if (v16 >= 0x10 && !strncmp((const char *)v15, "OpusTags", 8uLL))
      {
        v32 = operator new();
        *(_BYTE *)(v32 + 8) = 0;
        v33 = (v16 - 8);
        *(_QWORD *)v32 = &off_1E2907000;
        *(_QWORD *)(v32 + 16) = v33;
        *(_QWORD *)(v32 + 24) = v15 + 8;
        *(_QWORD *)(v32 + 32) = 0;
        *(_QWORD *)(v32 + 40) = 0;
        VorbisComment::VorbisComment((VorbisComment *)&inSpecifier, (DataSource *)v32, 0, v33);
        v34 = *((double *)this + 14);
        *((_QWORD *)this + 14) = *(_QWORD *)&inSpecifier.mASBD.mSampleRate;
        inSpecifier.mASBD.mSampleRate = v34;
        std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__vdeallocate(v113);
        *(_OWORD *)((char *)this + 120) = *(_OWORD *)&inSpecifier.mASBD.mFormatID;
        *((_QWORD *)this + 17) = *(_QWORD *)&inSpecifier.mASBD.mBytesPerFrame;
        memset(&inSpecifier.mASBD.mFormatID, 0, 24);
        *(_QWORD *)outPropertyDataSize = &inSpecifier.mASBD.mFormatID;
        std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)outPropertyDataSize);
        if (*(_QWORD *)&inSpecifier.mASBD.mSampleRate)
          CFRelease(*(CFTypeRef *)&inSpecifier.mASBD.mSampleRate);
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      }
LABEL_49:
      v35 = 0;
      goto LABEL_141;
    }
    if (*((_DWORD *)this + 36) != 1 || *((_QWORD *)this + 20) - *((_QWORD *)this + 19) < 2uLL)
      goto LABEL_181;
    LODWORD(__src) = 0;
    v117 = v10;
    if (v16 >= 0x10 && *v15 == 3 && !strncmp((const char *)v15 + 1, "vorbis", 6uLL))
    {
      v103 = *(_DWORD *)(v15 + 7);
      if ((unint64_t)(v103 + 7) + 4 <= v16)
        v41 = v103;
      else
        v41 = 0;
      LODWORD(__src) = v41;
      v104 = operator new();
      *(_BYTE *)(v104 + 8) = 0;
      v105 = (v16 + 4);
      *(_QWORD *)v104 = &off_1E2907000;
      *(_QWORD *)(v104 + 16) = v105;
      *(_QWORD *)(v104 + 24) = v15 + 7;
      *(_QWORD *)(v104 + 32) = 0;
      *(_QWORD *)(v104 + 40) = 0;
      VorbisComment::VorbisComment((VorbisComment *)&inSpecifier, (DataSource *)v104, 0, v105);
      v106 = *((double *)this + 14);
      *((_QWORD *)this + 14) = *(_QWORD *)&inSpecifier.mASBD.mSampleRate;
      inSpecifier.mASBD.mSampleRate = v106;
      std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__vdeallocate(v113);
      *(_OWORD *)((char *)this + 120) = *(_OWORD *)&inSpecifier.mASBD.mFormatID;
      *((_QWORD *)this + 17) = *(_QWORD *)&inSpecifier.mASBD.mBytesPerFrame;
      memset(&inSpecifier.mASBD.mFormatID, 0, 24);
      *(_QWORD *)outPropertyDataSize = &inSpecifier.mASBD.mFormatID;
      std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)outPropertyDataSize);
      if (*(_QWORD *)&inSpecifier.mASBD.mSampleRate)
        CFRelease(*(CFTypeRef *)&inSpecifier.mASBD.mSampleRate);
      (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
      v43 = v41 + 16;
      if ((_DWORD)v41 == -16)
      {
        v41 = 4294967280;
        v42 = -16;
LABEL_65:
        v127 = 3;
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)v12, *((char **)this + 20), &v127, (char *)&__src, 1);
        qmemcpy(&inSpecifier, "vorbis", 6);
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)v12, *((char **)this + 20), (char *)&inSpecifier, (char *)&inSpecifier.mASBD.mSampleRate + 6, 6);
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)v12, *((char **)this + 20), (char *)&__src, (char *)&__src + 4, 4);
        if (v42)
          std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)v12, *((char **)this + 20), (char *)v15 + 11, (char *)&v15[v41 + 11], v41);
        outPropertyDataSize[0] = 0;
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)v12, *((char **)this + 20), (char *)outPropertyDataSize, (char *)&outPropertyDataSize[1], 4);
        v46 = (char *)*((_QWORD *)this + 20);
        v47 = *((_QWORD *)this + 21);
        if ((unint64_t)v46 >= v47)
        {
          v63 = (char *)*v12;
          v64 = &v46[-*v12];
          v65 = (unint64_t)(v64 + 1);
          if ((uint64_t)(v64 + 1) < 0)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v66 = v47 - (_QWORD)v63;
          if (2 * v66 > v65)
            v65 = 2 * v66;
          if (v66 >= 0x3FFFFFFFFFFFFFFFLL)
            v67 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v67 = v65;
          if (v67)
            v68 = (char *)operator new(v67);
          else
            v68 = 0;
          v86 = &v64[(_QWORD)v68];
          v87 = &v64[(_QWORD)v68];
          *v87 = 1;
          v48 = v87 + 1;
          if (v46 != v63)
          {
            v88 = &v46[~(unint64_t)v63];
            do
            {
              v89 = *--v46;
              (v88--)[(_QWORD)v68] = v89;
            }
            while (v46 != v63);
            v46 = (char *)*v12;
            v86 = v68;
          }
          v10 = v117;
          *((_QWORD *)this + 19) = v86;
          *((_QWORD *)this + 20) = v48;
          *((_QWORD *)this + 21) = &v68[v67];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *v46 = 1;
          v48 = v46 + 1;
          v10 = v117;
        }
        v35 = 0;
        *((_QWORD *)this + 20) = v48;
        *((_DWORD *)this + 36) = 2;
        goto LABEL_141;
      }
      v42 = v41;
    }
    else
    {
      v41 = 0;
      v42 = 0;
      v43 = 16;
    }
    v44 = 2;
    do
    {
      if (v43 >= 0xFF)
        v45 = -1;
      else
        v45 = v43;
      LOBYTE(inSpecifier.mASBD.mSampleRate) = v45;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)v12, (char *)(*v12 + v44++), (char *)&inSpecifier, (char *)&inSpecifier.mASBD.mSampleRate + 1, 1);
      v43 -= LOBYTE(inSpecifier.mASBD.mSampleRate);
    }
    while (v43);
    goto LABEL_65;
  }
  if (a3)
    goto LABEL_44;
  if (v16 < 0x13)
    goto LABEL_180;
  if (!strncmp((const char *)&a4[*v13], "OpusHead", 8uLL))
  {
    *((_DWORD *)this + 2) = 1869641075;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)v115, *((char **)this + 9), (char *)v15, (char *)&v15[v16], v16);
    v40 = 1;
    goto LABEL_132;
  }
  if (v16 < 0x33)
  {
    if (v16 < 0x1E)
      goto LABEL_180;
    v17 = *v15;
  }
  else
  {
    v17 = *v15;
    if (v17 == 127)
    {
      if (strncmp((const char *)v15 + 1, "FLAC", 4uLL))
        goto LABEL_178;
      *((_DWORD *)this + 2) = 1718378851;
      if (v15[5] != 1)
        goto LABEL_181;
      if (v15[6])
        goto LABEL_181;
      if (v15[7])
        goto LABEL_181;
      if (*(_DWORD *)(v15 + 9) != 1130450022)
        goto LABEL_181;
      v18 = bswap32(*(_DWORD *)(v15 + 13));
      if ((v18 & 0x7F000000) != 0)
        goto LABEL_181;
      v19 = 0;
      v20 = v18 & 0xFFFFFF;
      if ((v18 & 0xFFFFFF) - 240 < 0xFFFFFF32)
        goto LABEL_183;
      v21 = v20 + 4;
      v7 = 0;
      if (v21 + 13 > v16)
        return (v19 | v7) & 1;
      v116 = v18;
      __src = 0x614C666400000000;
      v129 = 0;
      BYTE3(__src) = v18 + 16;
      std::vector<unsigned char>::reserve(v115, v21 + 12);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)v115, *((char **)this + 9), (char *)&__src, v130, 12);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)v115, *((char **)this + 9), (char *)v15 + 13, (char *)&v15[v21 + 13], v20 + 4);
      v22 = *(unsigned __int16 *)(v15 + 7);
      v23 = v15 + 17;
      *(_QWORD *)outPropertyDataSize = v15 + 17;
      v124 = v15 + 17;
      v125 = (uint64_t)&v15[v20 + 17];
      v126 = 0;
      if (((unint64_t)(v15 + 17) & 3) != 0)
      {
        v24 = 0;
        v25 = &v112[v14];
        do
        {
          if (v23 >= &v15[v20 + 17])
            v26 = 255;
          else
            v26 = *v23;
          v24 = v26 | (v24 << 8);
          ++v23;
          v50 = (v25++ & 3) == 0;
        }
        while (!v50);
        *(_QWORD *)outPropertyDataSize = &v15[((2 - (_BYTE)v15) & 3) + 18];
        LODWORD(v126) = v24 << ((8 * ((2 - (_BYTE)v15) & 3)) ^ 0x18);
        HIDWORD(v126) = 8 * (-((_DWORD)v112 + v14) & 3) + 8;
      }
      FLACUnpackStreamInfo((uint64_t)outPropertyDataSize, (uint64_t)&inSpecifier);
      v27 = *(_QWORD *)&inSpecifier.mASBD.mBitsPerChannel;
      *((_QWORD *)this + 23) = *(_QWORD *)&inSpecifier.mASBD.mBitsPerChannel;
      mSampleRate_low = LODWORD(inSpecifier.mASBD.mSampleRate);
      if (LODWORD(inSpecifier.mASBD.mSampleRate)
        && LODWORD(inSpecifier.mASBD.mSampleRate) == HIDWORD(inSpecifier.mASBD.mSampleRate))
      {
        *((_QWORD *)this + 25) = v27 / LODWORD(inSpecifier.mASBD.mSampleRate);
        v29 = v27 / mSampleRate_low * mSampleRate_low;
        if (v29 >= v27)
        {
          v30 = 0;
        }
        else
        {
          *((_QWORD *)this + 25) = v27 / mSampleRate_low + 1;
          v30 = mSampleRate_low + v29 - v27;
        }
        *((_DWORD *)this + 48) = v30;
      }
      if ((v116 & 0x80000000) != 0)
      {
        v10 = v116 >> 31;
        v35 = 1;
        LODWORD(a6->mStartOffset) = 1;
        goto LABEL_141;
      }
      v10 = 0;
      v40 = bswap32(v22) >> 16;
      goto LABEL_132;
    }
  }
  if (v17 != 1 || strncmp((const char *)v15 + 1, "vorbis", 6uLL))
  {
LABEL_178:
    if (v16 < 0x50 || strncmp((const char *)v15, "Speex   ", 8uLL))
    {
LABEL_180:
      v19 = 0;
      v7 = 1;
      return (v19 | v7) & 1;
    }
LABEL_181:
    v19 = 0;
    v7 = 0;
    return (v19 | v7) & 1;
  }
  v19 = 0;
  if (v16 <= 0xFE)
  {
    v7 = 0;
    if (*((_DWORD *)this + 36))
      return (v19 | v7) & 1;
    *((_DWORD *)this + 2) = 1987015266;
    v55 = (char *)*((_QWORD *)this + 20);
    v54 = *((_QWORD *)this + 21);
    v118 = v10;
    if ((unint64_t)v55 >= v54)
    {
      v57 = (char *)*v12;
      v58 = &v55[-*v12];
      v59 = (unint64_t)(v58 + 1);
      if ((uint64_t)(v58 + 1) < 0)
        goto LABEL_184;
      v60 = v54 - (_QWORD)v57;
      if (2 * v60 > v59)
        v59 = 2 * v60;
      if (v60 >= 0x3FFFFFFFFFFFFFFFLL)
        v61 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      if (v61)
        v62 = (char *)operator new(v61);
      else
        v62 = 0;
      v69 = &v58[(_QWORD)v62];
      v70 = &v58[(_QWORD)v62];
      *v70 = 2;
      v56 = v70 + 1;
      if (v55 != v57)
      {
        v71 = &v55[~(unint64_t)v57];
        do
        {
          v72 = *--v55;
          (v71--)[(_QWORD)v62] = v72;
        }
        while (v55 != v57);
        v55 = (char *)*v12;
        v69 = v62;
      }
      *((_QWORD *)this + 19) = v69;
      *((_QWORD *)this + 20) = v56;
      *((_QWORD *)this + 21) = &v62[v61];
      v10 = v118;
      if (v55)
        operator delete(v55);
    }
    else
    {
      *v55 = 2;
      v56 = v55 + 1;
    }
    *((_QWORD *)this + 20) = v56;
    v73 = *((_QWORD *)this + 21);
    if ((unint64_t)v56 < v73)
    {
      *v56 = v16;
      v74 = v56 + 1;
      goto LABEL_131;
    }
    v75 = (char *)*v12;
    v76 = &v56[-*v12];
    v77 = (unint64_t)(v76 + 1);
    if ((uint64_t)(v76 + 1) < 0)
LABEL_184:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v78 = v73 - (_QWORD)v75;
    if (2 * v78 > v77)
      v77 = 2 * v78;
    if (v78 >= 0x3FFFFFFFFFFFFFFFLL)
      v79 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v79 = v77;
    if (v79)
      v80 = operator new(v79);
    else
      v80 = 0;
    v81 = &v76[(_QWORD)v80];
    v82 = (char *)v80 + v79;
    v83 = &v76[(_QWORD)v80];
    *v83 = v16;
    v74 = v83 + 1;
    if (v56 == v75)
    {
      *((_QWORD *)this + 19) = v81;
      *((_QWORD *)this + 20) = v74;
      *((_QWORD *)this + 21) = v82;
    }
    else
    {
      v84 = &v56[~(unint64_t)v75];
      do
      {
        v85 = *--v56;
        (v84--)[(_QWORD)v80] = v85;
      }
      while (v56 != v75);
      v56 = (char *)*((_QWORD *)this + 19);
      *((_QWORD *)this + 19) = v80;
      *((_QWORD *)this + 20) = v74;
      *((_QWORD *)this + 21) = v82;
      if (!v56)
        goto LABEL_130;
    }
    operator delete(v56);
LABEL_130:
    v10 = v118;
LABEL_131:
    *((_QWORD *)this + 20) = v74;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)v12, v74, (char *)v15, (char *)&v15[v16], v16);
    *((_DWORD *)this + 36) = 1;
    v40 = 2;
LABEL_132:
    v35 = 0;
    LODWORD(a6->mStartOffset) = v40 + 1;
    goto LABEL_141;
  }
LABEL_183:
  v7 = 0;
  return (v19 | v7) & 1;
}

void sub_18F0BAEAC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_DecodeFormatIDsForCodingName(int *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5;
  int v6;
  unsigned int v8;
  char v9;
  char v10;
  BOOL v11;
  int v12;
  unsigned int AudioFormatIDFromFormatTag;
  BOOL v14;
  int v16;
  int v17;
  BOOL v18;

  if (a3 && *a2 < 4)
    return 561211770;
  v5 = 1718449215;
  v6 = *a1;
  if (*a1 > 1380333107)
  {
    if (v6 <= 1832149349)
    {
      if (v6 != 1380333108 && v6 != 1463899717)
      {
        v5 = 1718449215;
        if (v6 != 1667327590)
          return v5;
        v5 = 561213539;
        if (a1[1] != 4)
          return v5;
        goto LABEL_12;
      }
LABEL_28:
      v5 = 561213539;
      if (a1[1] == 2)
      {
        AudioFormatIDFromFormatTag = AudioFormat_GetAudioFormatIDFromFormatTag(*((__int16 *)a1 + 4), &v18);
        if (AudioFormatIDFromFormatTag == 1061109567)
        {
          return 1718449215;
        }
        else
        {
          if (a3)
            *a3 = AudioFormatIDFromFormatTag;
          v5 = 0;
          *a2 = 4;
        }
      }
      return v5;
    }
    v11 = v6 == 1832149350 || v6 == 1832149606;
    v12 = 1836069990;
    goto LABEL_32;
  }
  if (v6 <= 1095321154)
  {
    v11 = v6 == 862416946;
    v12 = 862417008;
LABEL_32:
    v14 = v11 || v6 == v12;
    v5 = 1718449215;
    if (!v14)
      return v5;
    goto LABEL_37;
  }
  if (v6 == 1095321155)
  {
    v5 = 561213539;
    if (a1[1] != 4)
      return v5;
    v16 = a1[2];
    if (v16 > 1768829491)
    {
      if (v16 <= 1918990111)
      {
        if (v16 != 1768829492 && v16 != 1768829746)
        {
          v5 = 1718449215;
          if (v16 == 1819304813)
            return v5;
LABEL_12:
          *a2 = 4;
          if (a3)
          {
            v5 = 0;
            v8 = a1[2];
LABEL_62:
            *a3 = v8;
            return v5;
          }
          return 0;
        }
LABEL_60:
        *a2 = 4;
        if (a3)
        {
          v5 = 0;
          v8 = 1819304813;
          goto LABEL_62;
        }
        return 0;
      }
      if (v16 == 1918990112 || v16 == 1953984371)
        goto LABEL_60;
      v17 = 1936684916;
    }
    else if (v16 > 1313820228)
    {
      if (v16 == 1313820229 || v16 == 1718367026)
        goto LABEL_60;
      v17 = 1718367796;
    }
    else
    {
      if (v16 == 842231401 || v16 == 1179398962)
        goto LABEL_60;
      v17 = 1179399732;
    }
    if (v16 != v17)
      goto LABEL_12;
    goto LABEL_60;
  }
  if (v6 == 1113011764)
    goto LABEL_28;
  if (v6 != 1299148630 || a1[1] != 4)
    return v5;
  v9 = 0;
  do
  {
    v10 = v9;
    if ((v9 & 1) != 0)
      break;
    v9 = 1;
  }
  while (a1[2] != 1634754915);
  v5 = 1718449215;
  if ((v10 & 1) != 0)
    return v5;
LABEL_37:
  v5 = 561213539;
  if (a1[1] == 4)
    return AudioFormat_GetAudioFormatIDsForISOCodingName(a1[2], a2, a3);
  return v5;
}

uint64_t AudioFormat_GetAudioFormatIDsForISOCodingName(int a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;

  if (a1 == 1700998451)
  {
    if (a3)
    {
      if (*a2 < 4)
        goto LABEL_11;
      *a3 = 1700998451;
      if (*a2 < 8)
      {
LABEL_20:
        v5 = 4;
        goto LABEL_23;
      }
      a3[1] = 1700997939;
    }
    v5 = 8;
    goto LABEL_23;
  }
  if (a1 != 1836069985)
  {
    v6 = 0;
    v7 = sPairedCodingNameAndAudioFormatIDs;
    while (1)
    {
      v8 = *v7;
      v7 += 2;
      if (v8 == a1)
        break;
      if (++v6 == 9)
        return 1718449215;
    }
    if (a3)
      *a3 = sPairedCodingNameAndAudioFormatIDs[2 * v6 + 1];
    goto LABEL_20;
  }
  if (!a3)
  {
    v5 = 76;
    goto LABEL_23;
  }
  if (*a2 >= 4)
  {
    v3 = 0;
    do
    {
      a3[v3] = sAudioFormatIDs_mp4a[v3];
      v4 = v3 + 1;
      if (v3 == 18)
        break;
      ++v3;
    }
    while (*a2 >> 2 > v4);
    v5 = 4 * v4;
    goto LABEL_23;
  }
LABEL_11:
  v5 = 0;
LABEL_23:
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t AudioFormatProperty_CanonicalMagicCookieFromEncapsulatedMagicCookie(unsigned int *a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t i;
  unsigned __int16 v12;
  size_t v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  int v17;
  BOOL v18;
  int v19;
  size_t v20;
  char *v21;
  int v22;
  char v23;
  int v24;
  char *v25;
  uint64_t v27;
  unsigned int v28;
  size_t v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  _DWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD v42[4];
  int v43;
  _QWORD v44[2];
  uint64_t v45;
  int v46;
  _BYTE v47[296];
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD v52[276];
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v6 = 1718449215;
  v46 = 1969977198;
  v7 = AudioFormatEncryptedFormatTranslator::DecryptFormatID(*a1, &v46);
  v8 = a1[1];
  if (v8 <= 1667327589)
  {
    v10 = v8 == 862416946 || v8 == 862417008;
    if (!v10 && (v8 != 1299148630 || v7 != 1634754915))
      return v6;
    goto LABEL_15;
  }
  if (v8 <= 1832149605)
  {
    if (v8 == 1667327590)
    {
      v27 = a1[4];
      if (v27 < 0xC)
        return 561213539;
      v35 = (_DWORD *)*((_QWORD *)a1 + 1);
      if (*v35 != 1802857321)
        return v6;
      if (a3)
      {
        v6 = 561211770;
        if (v27 - 12 > (unint64_t)*a2)
          return v6;
        memcpy(a3, v35 + 3, v27 - 12);
        LODWORD(v27) = a1[4];
      }
      v6 = 0;
      v28 = v27 - 12;
      goto LABEL_51;
    }
    v9 = 1832149350;
    goto LABEL_14;
  }
  if (v8 != 1832149606)
  {
    v9 = 1836069990;
LABEL_14:
    if (v8 != v9)
      return v6;
  }
LABEL_15:
  for (i = 0; i != 4; ++i)
  {
    if (v7 == sAudioFormatsThatHaveISOBoxesAsMagicCookies[i])
    {
      if (a3)
      {
        v13 = a1[4];
        if (*a2 < v13)
          return 561211770;
        memcpy(a3, *((const void **)a1 + 1), v13);
      }
      v6 = 0;
      v28 = a1[4];
LABEL_51:
      *a2 = v28;
      return v6;
    }
  }
  if (v7 <= 1633772401)
  {
    if (v7 != 1633772320)
    {
      v12 = 25453;
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  if (v7 == 1869641075)
  {
    v30 = a1[4];
    if (v30 < 0x13)
      return v6;
    v31 = (unsigned int *)*((_QWORD *)a1 + 1);
    if (bswap32(*v31) < 0x13 || v31[1] != 1936740196)
      return v6;
    if (!a3)
    {
LABEL_59:
      v6 = 0;
      *a2 = v30;
      return v6;
    }
    if (*a2 >= v30)
    {
      memcpy(a3, v31, v30);
      v32 = *((_QWORD *)a1 + 1);
      v33 = bswap32(*(unsigned __int16 *)(v32 + 10)) >> 16;
      v34 = bswap32(*(_DWORD *)(v32 + 12));
      LODWORD(v32) = bswap32(*(unsigned __int16 *)(v32 + 16)) >> 16;
      *a3 = 0x646165487375704FLL;
      *((_BYTE *)a3 + 8) = 1;
      *((_WORD *)a3 + 5) = v33;
      *((_DWORD *)a3 + 3) = v34;
      *((_WORD *)a3 + 8) = v32;
      LODWORD(v30) = a1[4];
      goto LABEL_59;
    }
    return 561211770;
  }
  v12 = 25458;
LABEL_26:
  if (v7 == (v12 | 0x61610000))
  {
LABEL_27:
    v14 = a1[4];
    if (v14 >= 0xD)
    {
      v15 = *((_QWORD *)a1 + 1);
      if (*(_DWORD *)(v15 + 4) == 1935962981)
      {
        v17 = *(unsigned __int8 *)(v15 + 8);
        v16 = (char *)(v15 + 8);
        v18 = v17 == 3;
        if (v17 == 3)
          v19 = -8;
        else
          v19 = -12;
        v20 = v19 + v14;
        if (v18)
          v21 = v16;
        else
          v21 = v16 + 4;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        v52[2] = 0;
        MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v52);
        v54 = 0u;
        v53 = 0u;
        DecoderConfigDescr::cleanup((DecoderConfigDescr *)&v48);
        bzero(v47, 0x5F0uLL);
        v44[0] = v21;
        v44[1] = &v21[v20];
        v45 = 0;
        if ((v21 & 3) != 0 && (_DWORD)v20)
        {
          v22 = 0;
          v23 = (_BYTE)v21 + 1;
          v24 = -8;
          v25 = v21 + 1;
          do
          {
            HIDWORD(v45) = v24 + 16;
            v44[0] = v25;
            v22 = *(v25 - 1) | (v22 << 8);
            LODWORD(v45) = v22;
            v24 += 8;
            if ((v23 & 3) == 0)
              break;
            ++v23;
          }
          while (v25++ < &v21[v20]);
          LODWORD(v45) = v22 << (24 - v24);
        }
        v6 = MP4AudioESDS::Deserialize((uint64_t)v47, (uint64_t)v44, 0, 0);
        if (!(_DWORD)v6)
        {
          if ((v49 - 105) >= 0xFFFFFFFD)
          {
            v49 = 64;
            LODWORD(v20) = DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount((DecoderConfigDescr *)&v48)
                         + 37;
            if (a3)
            {
              if (*a2 < v20)
                goto LABEL_67;
              v42[0] = a3;
              v42[1] = a3;
              v42[2] = (char *)a3 + v20;
              v42[3] = 0x2000000000;
              v43 = a3 & 3;
              MP4AudioESDS::Serialize((uint64_t)v47, (uint64_t)v42, 0, 0);
            }
LABEL_69:
            v6 = 0;
            *a2 = v20;
          }
          else
          {
            if (!a3)
              goto LABEL_69;
            if (*a2 >= v20)
            {
              memcpy(a3, v21, v20);
              goto LABEL_69;
            }
LABEL_67:
            v6 = 561211770;
          }
        }
        v36 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v37 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
        if (*((_QWORD *)&v53 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
    }
  }
  return v6;
}

void sub_18F0BB840(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x628]);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1 + 1488);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_DecodeFormatIDsForEncapsulatedMagicCookieName(int *a1, unsigned int *a2, unsigned int *a3)
{
  int v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v11;
  int v12;
  char v13;
  int v14;
  char v15;
  uint64_t result;
  int *v17;
  int v18;

  v3 = *a1;
  if (*a1 > 1832149349)
  {
    if (v3 == 1832149350 || v3 == 1832149606 || v3 == 1836069990)
      goto LABEL_22;
    return 1718449215;
  }
  if (v3 == 862416946 || v3 == 862417008)
    goto LABEL_22;
  if (v3 != 1299148630 || a1[1] != 4)
    return 1718449215;
  v5 = a1[2];
  if (v5 != 1680961633)
  {
    v6 = 1;
    while (v6 != 10)
    {
      v7 = v6;
      v8 = sQTMovieDecoderConfigBoxNames_HandledTheSameAsMP4[v6++];
      if (v5 == v8)
      {
        if ((unint64_t)(v7 - 1) <= 8)
          goto LABEL_22;
        return 1718449215;
      }
    }
    return 1718449215;
  }
LABEL_22:
  if (a1[1] != 4)
    return 561213539;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = a1[2];
  v15 = 1;
  result = 1718449215;
  while (2)
  {
    v17 = &sPairedCodingNameAndConfigNames[2 * v11 + 1];
    while (1)
    {
      v18 = *v17;
      v17 += 2;
      if (v18 == v14)
        break;
      if (++v11 == 11)
      {
        if ((v13 & 1) == 0)
          return result;
        return AudioFormat_GetAudioFormatIDsForISOCodingName(v12, a2, a3);
      }
    }
    if ((v15 & 1) == 0)
      return 1718449215;
    v15 = 0;
    result = 0;
    v12 = sPairedCodingNameAndConfigNames[2 * v11++];
    v13 = 1;
    if (v11 != 11)
      continue;
    break;
  }
  return AudioFormat_GetAudioFormatIDsForISOCodingName(v12, a2, a3);
}

uint64_t AudioFormatProperty_CodingNameForDecodeFormatID(int *a1, int *a2, int *a3)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int FormatTagFromFormatID;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;

  v6 = 1718449215;
  v7 = a1[2];
  if (v7 <= 1463899716)
  {
    if (v7 > 1113011763)
    {
      if (v7 != 1113011764)
      {
        if (v7 != 1299148630)
        {
          if (v7 != 1380333108)
            return v6;
          goto LABEL_35;
        }
        if (*a1 != 1634754915)
          return v6;
LABEL_18:
        if (a3 && *a2 < 0xC)
          return 561211770;
        v11 = 0;
        v12 = *a1;
        do
        {
          if (sAudioFormatIDs_mp4a[v11] == (_DWORD)v12)
          {
            v13 = 1836069985;
            goto LABEL_42;
          }
          ++v11;
        }
        while (v11 != 19);
        v13 = 1700998451;
        if ((_DWORD)v12 != 1700997939 && (_DWORD)v12 != 1700998451)
        {
          if ((_DWORD)v12 == 1819304813)
          {
            if ((a1[1] & 1) != 0)
              v13 = 1718641517;
            else
              v13 = 1768973165;
          }
          else
          {
            v17 = 0;
            v18 = &dword_18F10E3C8;
            do
            {
              v19 = *v18;
              v18 += 2;
              if (v19 == (_DWORD)v12)
              {
                v13 = sPairedCodingNameAndAudioFormatIDs[2 * v17];
                goto LABEL_42;
              }
              ++v17;
            }
            while (v17 != 9);
            v20 = 1969977198;
            AudioFormatEncryptedFormatTranslator::DecryptFormatID(v12, &v20);
            if (v20 == 1667392371)
            {
LABEL_57:
              v13 = 1701733217;
              goto LABEL_42;
            }
            if (v20 != 1885695587)
            {
              if (v20 != 1667591779)
                return v6;
              goto LABEL_57;
            }
            v13 = 1685220723;
          }
        }
LABEL_42:
        if (a3)
        {
          *a3 = v7;
          a3[1] = 4;
          a3[2] = v13;
        }
        v14 = 12;
        goto LABEL_47;
      }
LABEL_35:
      if (a3 && *a2 < 0xA)
        return 561211770;
      FormatTagFromFormatID = AudioFormat_GetFormatTagFromFormatID(*a1, a1[1]);
      if (a3 && FormatTagFromFormatID)
      {
        *a3 = a1[2];
        a3[1] = 2;
        *((_WORD *)a3 + 4) = FormatTagFromFormatID;
      }
      else if (!FormatTagFromFormatID)
      {
        return v6;
      }
      v14 = 10;
      goto LABEL_47;
    }
    v8 = v7 == 862416946;
    v9 = 862417008;
    goto LABEL_13;
  }
  if (v7 > 1832149349)
  {
    v8 = v7 == 1832149350 || v7 == 1832149606;
    v9 = 1836069990;
LABEL_13:
    if (v8 || v7 == v9)
      goto LABEL_18;
    return v6;
  }
  if (v7 == 1463899717)
    goto LABEL_35;
  if (v7 == 1667327590)
  {
    if (a3)
    {
      if (*a2 < 0x10)
        return 561211770;
      *(_QWORD *)a3 = 0x463616666;
      a3[2] = *a1;
    }
    v14 = 16;
LABEL_47:
    v6 = 0;
    *a2 = v14;
  }
  return v6;
}

uint64_t AudioFormatProperty_EncapsulatedMagicCookieFromCanonicalMagicCookie(unsigned int *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  uint64_t i;
  size_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  size_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  __int16 v22;
  int v24;

  v6 = 1718449215;
  v7 = AudioFormatEncryptedFormatTranslator::DecryptFormatID(*a1, &v24);
  v8 = a1[1];
  if (v8 <= 1667327589)
  {
    v9 = v8 == 862416946 || v8 == 862417008;
    if (!v9 && (v8 != 1299148630 || v7 != 1634754915))
      return v6;
  }
  else if (v8 > 1832149605)
  {
    if (v8 != 1832149606 && v8 != 1836069990)
      return v6;
  }
  else
  {
    if (v8 == 1667327590)
    {
      if (a3)
      {
        v19 = a1[4];
        if (v19 + 12 > *a2)
          return 561211770;
        *(_DWORD *)a3 = 1768650091;
        *(_QWORD *)(a3 + 4) = bswap64(v19);
        memcpy((void *)(a3 + 12), (const void *)(*((_QWORD *)a1 + 1) + 12), a1[4] - 12);
      }
      LODWORD(v12) = a1[4] + 12;
      goto LABEL_46;
    }
    if (v8 != 1832149350)
      return v6;
  }
  for (i = 0; i != 4; ++i)
  {
    if (v7 == sAudioFormatsThatHaveISOBoxesAsMagicCookies[i])
    {
      if (a3)
      {
        v18 = a1[4];
        if (*a2 < v18)
          return 561211770;
        memcpy((void *)a3, *((const void **)a1 + 1), v18);
      }
      goto LABEL_31;
    }
  }
  if (v7 == 1869641075)
  {
    v12 = a1[4];
    if (v12 >= 0x13)
    {
      v13 = (int *)*((_QWORD *)a1 + 1);
      v14 = *v13;
      if (*v13 == 1937076303 && v13[1] == 1684104520)
      {
        if (!a3)
          goto LABEL_46;
        if (*a2 >= v12)
        {
          memcpy((void *)a3, v13, v12);
          v15 = *((_QWORD *)a1 + 1);
          v16 = bswap32(*(unsigned __int16 *)(v15 + 10)) >> 16;
          v17 = bswap32(*(_DWORD *)(v15 + 12));
          LODWORD(v15) = bswap32(*(unsigned __int16 *)(v15 + 16)) >> 16;
          *(_DWORD *)a3 = bswap32(a1[4]);
          strcpy((char *)(a3 + 4), "dOps");
          *(_WORD *)(a3 + 10) = v16;
          *(_DWORD *)(a3 + 12) = v17;
          *(_WORD *)(a3 + 16) = v15;
LABEL_31:
          LODWORD(v12) = a1[4];
          goto LABEL_46;
        }
        return 561211770;
      }
      if ((_DWORD)v12 != 28)
        return v6;
      if (!a3)
        goto LABEL_43;
      if (*a2 >= 0x13u)
      {
        v20 = bswap32(v13[4]);
        if (v20 - 1 > 1)
          return v6;
        v21 = v13[1];
        *(_QWORD *)a3 = 0x73704F6413000000;
        if (v14 == 50855936)
          v22 = 30720;
        else
          v22 = 14337;
        *(_BYTE *)(a3 + 8) = 0;
        *(_BYTE *)(a3 + 9) = v20;
        *(_WORD *)(a3 + 10) = v22;
        *(_DWORD *)(a3 + 12) = v21;
        *(_WORD *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 18) = 0;
LABEL_43:
        LODWORD(v12) = 19;
LABEL_46:
        v6 = 0;
        *a2 = v12;
        return v6;
      }
      return 561211770;
    }
  }
  return v6;
}

void MP4SLSSpecificConfig::~MP4SLSSpecificConfig(MP4SLSSpecificConfig *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t MP4SLSSpecificConfig::Deserialize(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  NSObject *v13;
  const char *v14;
  unsigned int v15;
  int v16;
  char v17;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 16);
  v5 = v4 >> 26;
  v6 = *(_DWORD *)(a2 + 20) - 6;
  *(_DWORD *)(a2 + 20) = v6;
  if (v6 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v8 = *(_DWORD *)(a2 + 16);
    v9 = *(_DWORD *)(a2 + 20);
    v5 |= v8 >> v9;
    v6 = v9 + 32;
    *(_DWORD *)(a2 + 20) = v9 + 32;
    if (v9 == -32)
      v7 = 0;
    else
      v7 = v8 << -(char)v9;
  }
  else
  {
    v7 = v4 << 6;
  }
  *(_DWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a1 + 1116) = (4 * v5) & 0xF8;
  if (((4 * (_BYTE)v5) & 0x80) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v19 = 136315394;
      v20 = "MP4SLSSpecificConfig.cpp";
      v21 = 1024;
      v22 = 28;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  MP4SLSSpecificConfig::Deserialize: invalid PCM word length";
LABEL_17:
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v19, 0x12u);
    }
    return 4294967090;
  }
  v10 = v7 >> 29;
  v11 = v6 - 3;
  *(_DWORD *)(a2 + 20) = v11;
  if (v11 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v15 = *(_DWORD *)(a2 + 16);
    v16 = *(_DWORD *)(a2 + 20);
    v10 |= v15 >> v16;
    *(_DWORD *)(a2 + 20) = v16 + 32;
    if (v16 == -32)
      v12 = 0;
    else
      v12 = v15 << -(char)v16;
  }
  else
  {
    v12 = 8 * v7;
  }
  *(_DWORD *)(a2 + 16) = v12;
  v17 = *(_BYTE *)(a1 + 1116) | v10;
  *(_BYTE *)(a1 + 1116) = v17;
  if ((v17 & 7u) >= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v19 = 136315394;
      v20 = "MP4SLSSpecificConfig.cpp";
      v21 = 1024;
      v22 = 32;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  MP4SLSSpecificConfig::Deserialize: invalid frame length";
      goto LABEL_17;
    }
    return 4294967090;
  }
  if (!*(_DWORD *)(a1 + 12))
  {
    MP4AudioProgramConfig::Deserialize((unsigned int *)(a1 + 16), a2);
    if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a1 + 8))
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294967090;
      v19 = 136315394;
      v20 = "MP4SLSSpecificConfig.cpp";
      v21 = 1024;
      v22 = 40;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  MP4SLSSpecificConfig::Deserialize: the Program sampleRate is incorrect";
      goto LABEL_17;
    }
  }
  return 0;
}

void MP4ALSSpecificConfig::~MP4ALSSpecificConfig(MP4ALSSpecificConfig *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t MP4ALSSpecificConfig::Deserialize(_DWORD *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  NSObject *v20;
  const char *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int Bit;
  int v38;
  int8x8_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  uint8x8_t v47;
  int v48;
  unsigned __int8 v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  CAAudioChannelLayout *v59;
  uint64_t i;
  int v62;
  CAAudioChannelLayout *v63;
  const AudioChannelLayout *v64;
  char *v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  const char *v80;
  __int16 v81;
  int v82;
  _BYTE buf[18];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  TBitstreamReader<unsigned int>::SkipBits(a2, 5);
  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20) - 32;
  *(_DWORD *)(a2 + 20) = v5;
  if (v5 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v8 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v5 = v7 + 32;
    v9 = v7 == -32;
    *(_QWORD *)a2 += 4;
    v6 = (v8 >> v7) | v4;
    v10 = v8 << -(char)v7;
    if (v9)
      v4 = 0;
    else
      v4 = v10;
    *(_DWORD *)(a2 + 16) = v4;
    *(_DWORD *)(a2 + 20) = v5;
  }
  else
  {
    v6 = v4;
  }
  if (v6 != 1095521024)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "MP4SLSSpecificConfig.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 127;
      v20 = MEMORY[0x1E0C81028];
      v21 = "%25s:%-5d  MP4ALSSpecificConfig::Deserialize: invalid ALS identifier";
LABEL_67:
      _os_log_impl(&dword_18EE07000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0x12u);
    }
    return 4294967090;
  }
  v11 = v5 - 32;
  *(_DWORD *)(a2 + 20) = v11;
  if (v11 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v13 = *(_DWORD *)(a2 + 16);
    v12 = *(_DWORD *)(a2 + 20);
    v14 = v12 + 32;
    v9 = v12 == -32;
    *(_QWORD *)a2 += 4;
    v4 |= v13 >> v12;
    v15 = v13 << -(char)v12;
    if (v9)
      v15 = 0;
    *(_DWORD *)(a2 + 16) = v15;
    *(_DWORD *)(a2 + 20) = v14;
  }
  a1[2] = v4;
  TBitstreamReader<unsigned int>::SkipBits(a2, 32);
  v16 = *(_DWORD *)(a2 + 16);
  v17 = HIWORD(v16);
  v18 = *(_DWORD *)(a2 + 20) - 16;
  *(_DWORD *)(a2 + 20) = v18;
  if (v18 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v22 = *(_DWORD *)(a2 + 16);
    v23 = *(_DWORD *)(a2 + 20);
    v17 |= v22 >> v23;
    *(_DWORD *)(a2 + 20) = v23 + 32;
    if (v23 == -32)
      v19 = 0;
    else
      v19 = v22 << -(char)v23;
  }
  else
  {
    v19 = v16 << 16;
  }
  *(_DWORD *)(a2 + 16) = v19;
  a1[4] = v17 + 1;
  if (v17 + 1 >= 0xD)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "MP4SLSSpecificConfig.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 134;
      v20 = MEMORY[0x1E0C81028];
      v21 = "%25s:%-5d  MP4ALSSpecificConfig::Deserialize: invalid channel count";
      goto LABEL_67;
    }
    return 4294967090;
  }
  if (v17)
  {
    if (v17 == 1)
      v24 = 6619138;
    else
      v24 = ((_WORD)v17 + 1) | 0xFFFF0000;
  }
  else
  {
    v24 = 6553601;
  }
  a1[6] = v24;
  TBitstreamReader<unsigned int>::SkipBits(a2, 3);
  v25 = *(_DWORD *)(a2 + 16);
  v26 = v25 >> 29;
  v27 = *(_DWORD *)(a2 + 20) - 3;
  *(_DWORD *)(a2 + 20) = v27;
  if (v27 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v29 = *(_DWORD *)(a2 + 16);
    v30 = *(_DWORD *)(a2 + 20);
    v26 |= v29 >> v30;
    *(_DWORD *)(a2 + 20) = v30 + 32;
    if (v30 == -32)
      v28 = 0;
    else
      v28 = v29 << -(char)v30;
  }
  else
  {
    v28 = 8 * v25;
  }
  *(_DWORD *)(a2 + 16) = v28;
  if ((v26 - 1) >= 3u)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "MP4SLSSpecificConfig.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 160;
      v20 = MEMORY[0x1E0C81028];
      v21 = "%25s:%-5d  MP4ALSSpecificConfig::Deserialize: invalid resolution";
      goto LABEL_67;
    }
    return 4294967090;
  }
  a1[5] = dword_18F10E4EC[(v26 - 1)];
  TBitstreamReader<unsigned int>::SkipBits(a2, 2);
  v31 = *(_DWORD *)(a2 + 16);
  v32 = HIWORD(v31);
  v33 = *(_DWORD *)(a2 + 20) - 16;
  *(_DWORD *)(a2 + 20) = v33;
  if (v33 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v35 = *(_DWORD *)(a2 + 16);
    v36 = *(_DWORD *)(a2 + 20);
    v32 |= v35 >> v36;
    *(_DWORD *)(a2 + 20) = v36 + 32;
    if (v36 == -32)
      v34 = 0;
    else
      v34 = v35 << -(char)v36;
  }
  else
  {
    v34 = v31 << 16;
  }
  *(_DWORD *)(a2 + 16) = v34;
  a1[3] = v32 + 1;
  TBitstreamReader<unsigned int>::SkipBits(a2, 30);
  Bit = TBitstreamReader<unsigned int>::GetBit(a2);
  v38 = TBitstreamReader<unsigned int>::GetBit(a2);
  TBitstreamReader<unsigned int>::SkipBits(a2, 8);
  if (!Bit)
    return 0;
  v40 = *(_DWORD *)(a2 + 16);
  v41 = HIWORD(v40);
  v42 = *(_DWORD *)(a2 + 20) - 16;
  *(_DWORD *)(a2 + 20) = v42;
  if (v42 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v45 = *(_DWORD *)(a2 + 16);
    v46 = *(_DWORD *)(a2 + 20);
    v41 |= v45 >> v46;
    *(_DWORD *)(a2 + 20) = v46 + 32;
    if (v46 == -32)
      v43 = 0;
    else
      v43 = v45 << -(char)v46;
  }
  else
  {
    v43 = v40 << 16;
  }
  *(_DWORD *)(a2 + 16) = v43;
  if ((v41 & 0xF000) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "MP4SLSSpecificConfig.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 208;
      v20 = MEMORY[0x1E0C81028];
      v21 = "%25s:%-5d  MP4ALSSpecificConfig::Deserialize: invalid channel configuration";
      goto LABEL_67;
    }
    return 4294967090;
  }
  v39.i32[0] = (unsigned __int16)v41;
  v47 = (uint8x8_t)vcnt_s8(v39);
  v47.i16[0] = vaddlv_u8(v47);
  if (v47.i32[0] != a1[4])
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "MP4SLSSpecificConfig.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 211;
      v20 = MEMORY[0x1E0C81028];
      v21 = "%25s:%-5d  MP4ALSSpecificConfig::Deserialize: mismatch between channel count and channel configuration";
      goto LABEL_67;
    }
    return 4294967090;
  }
  std::vector<unsigned char>::vector(buf, v47.u32[0]);
  if (v38)
  {
    v48 = a1[4];
    if (v48)
    {
      v49 = 0;
      v50 = v48 - 1;
      v51 = __clz(v48 - 1);
      v52 = 32 - v51;
      while (1)
      {
        if (v50)
        {
          v53 = *(_DWORD *)(a2 + 16);
          v54 = v53 >> v51;
          v55 = *(_DWORD *)(a2 + 20) - v52;
          *(_DWORD *)(a2 + 20) = v55;
          if (v55 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
            *(_QWORD *)a2 += 4;
            v57 = *(_DWORD *)(a2 + 16);
            v58 = *(_DWORD *)(a2 + 20);
            v54 |= v57 >> v58;
            *(_DWORD *)(a2 + 20) = v58 + 32;
            v56 = v58 == -32 ? 0 : v57 << -(char)v58;
          }
          else
          {
            v56 = v53 << v52;
          }
          *(_DWORD *)(a2 + 16) = v56;
        }
        else
        {
          LOBYTE(v54) = 0;
        }
        *(_BYTE *)(*(_QWORD *)buf + v49) = v54;
        v59 = (CAAudioChannelLayout *)a1[4];
        if (v59 <= *(unsigned __int8 *)(*(_QWORD *)buf + v49))
          break;
        if (v59 <= ++v49)
          goto LABEL_78;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v79 = 136315394;
        v80 = "MP4SLSSpecificConfig.cpp";
        v81 = 1024;
        v82 = 222;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4ALSSpecificConfig::Deserialize: channel position out of range", (uint8_t *)&v79, 0x12u);
      }
      v44 = 4294967090;
      goto LABEL_112;
    }
LABEL_77:
    v59 = 0;
  }
  else
  {
    for (i = 0; i != 96; i += 8)
    {
      if (*(unsigned __int16 *)((char *)&ALSChannelBitmapToTag + i) == (unsigned __int16)v41)
      {
        v44 = 0;
        a1[6] = *(_DWORD *)((char *)&ALSChannelBitmapToTag + i + 4);
        goto LABEL_112;
      }
    }
    if (!a1[4])
      goto LABEL_77;
    v62 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)buf + v62) = v62;
      ++v62;
      v59 = (CAAudioChannelLayout *)a1[4];
    }
    while (v59 > v62);
  }
LABEL_78:
  v63 = (CAAudioChannelLayout *)CAAudioChannelLayout::Create(v59);
  CAAudioChannelLayout::SetAllToUnknown(v63, (AudioChannelLayout *)a1[4]);
  v65 = (char *)v63 + 12;
  if ((v41 & 1) != 0)
  {
    v66 = 1;
    *(_DWORD *)&v65[20 * **(_BYTE **)buf] = 1;
  }
  else
  {
    v66 = 0;
  }
  if ((v41 & 2) != 0)
  {
    v69 = *(unsigned __int8 *)(*(_QWORD *)buf + v66++);
    *(_DWORD *)&v65[20 * v69] = 2;
    if ((v41 & 4) == 0)
    {
LABEL_83:
      if ((v41 & 8) == 0)
        goto LABEL_84;
      goto LABEL_99;
    }
  }
  else if ((v41 & 4) == 0)
  {
    goto LABEL_83;
  }
  v70 = *(unsigned __int8 *)(*(_QWORD *)buf + v66++);
  *(_DWORD *)&v65[20 * v70] = 33;
  if ((v41 & 8) == 0)
  {
LABEL_84:
    if ((v41 & 0x10) == 0)
      goto LABEL_85;
    goto LABEL_100;
  }
LABEL_99:
  v71 = *(unsigned __int8 *)(*(_QWORD *)buf + v66++);
  *(_DWORD *)&v65[20 * v71] = 34;
  if ((v41 & 0x10) == 0)
  {
LABEL_85:
    if ((v41 & 0x20) == 0)
      goto LABEL_86;
    goto LABEL_101;
  }
LABEL_100:
  v72 = *(unsigned __int8 *)(*(_QWORD *)buf + v66++);
  *(_DWORD *)&v65[20 * v72] = 5;
  if ((v41 & 0x20) == 0)
  {
LABEL_86:
    if ((v41 & 0x40) == 0)
      goto LABEL_87;
    goto LABEL_102;
  }
LABEL_101:
  v73 = *(unsigned __int8 *)(*(_QWORD *)buf + v66++);
  *(_DWORD *)&v65[20 * v73] = 6;
  if ((v41 & 0x40) == 0)
  {
LABEL_87:
    if ((v41 & 0x80) == 0)
      goto LABEL_88;
    goto LABEL_103;
  }
LABEL_102:
  v74 = *(unsigned __int8 *)(*(_QWORD *)buf + v66++);
  *(_DWORD *)&v65[20 * v74] = 3;
  if ((v41 & 0x80) == 0)
  {
LABEL_88:
    if ((v41 & 0x100) == 0)
      goto LABEL_89;
    goto LABEL_104;
  }
LABEL_103:
  v75 = *(unsigned __int8 *)(*(_QWORD *)buf + v66++);
  *(_DWORD *)&v65[20 * v75] = 9;
  if ((v41 & 0x100) == 0)
  {
LABEL_89:
    if ((v41 & 0x200) == 0)
      goto LABEL_90;
    goto LABEL_105;
  }
LABEL_104:
  v76 = *(unsigned __int8 *)(*(_QWORD *)buf + v66);
  LOBYTE(v66) = v66 + 1;
  *(_DWORD *)&v65[20 * v76] = 4;
  if ((v41 & 0x200) == 0)
  {
LABEL_90:
    if ((v41 & 0x400) == 0)
      goto LABEL_91;
LABEL_106:
    v78 = *(unsigned __int8 *)(*(_QWORD *)buf + v66);
    LOBYTE(v66) = v66 + 1;
    *(_DWORD *)&v65[20 * v78] = 0;
    if ((v41 & 0x800) == 0)
      goto LABEL_93;
    goto LABEL_92;
  }
LABEL_105:
  v77 = *(unsigned __int8 *)(*(_QWORD *)buf + v66);
  LOBYTE(v66) = v66 + 1;
  *(_DWORD *)&v65[20 * v77] = 0;
  if ((v41 & 0x400) != 0)
    goto LABEL_106;
LABEL_91:
  if ((v41 & 0x800) != 0)
LABEL_92:
    *(_DWORD *)&v65[20 * *(unsigned __int8 *)(*(_QWORD *)buf + v66)] = 0;
LABEL_93:
  v67 = CAAudioChannelLayout::ToTag((AudioChannelLayout *)v63, v64);
  if (v67 == 7143429)
    v68 = 7733253;
  else
    v68 = v67;
  a1[6] = v68;
  MEMORY[0x193FFDAAC](v63);
  v44 = 0;
LABEL_112:
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  return v44;
}

void sub_18F0BCB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

void MP4ELDSpecificConfig::~MP4ELDSpecificConfig(MP4ELDSpecificConfig *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E29080C0;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E29080C0;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4ELDSpecificConfig::Deserialize(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  int Bit;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  char *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int *v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  float v49;
  uint64_t v50;
  int v51;
  MP4SpatialAudioSpecificConfig *v52;
  uint64_t v53;
  void (**v54)(MP4LDSpatialSpecificConfig *__hidden);
  uint64_t v55;
  int v57;
  const char *v58;
  __int16 v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 16) = TBitstreamReader<unsigned int>::GetBit(a2);
  v4 = *(_DWORD *)(a2 + 16);
  v5 = v4 >> 29;
  v6 = *(_DWORD *)(a2 + 20) - 3;
  *(_DWORD *)(a2 + 20) = v6;
  if (v6 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v8 = *(_DWORD *)(a2 + 16);
    v9 = *(_DWORD *)(a2 + 20);
    v5 |= v8 >> v9;
    *(_DWORD *)(a2 + 20) = v9 + 32;
    if (v9 == -32)
      v7 = 0;
    else
      v7 = v8 << -(char)v9;
  }
  else
  {
    v7 = 8 * v4;
  }
  *(_DWORD *)(a2 + 16) = v7;
  *(_DWORD *)(a1 + 20) = 2 * v5;
  if (!(2 * v5))
  {
    Bit = TBitstreamReader<unsigned int>::GetBit(a2);
    *(_DWORD *)(a1 + 24) = Bit;
    if (Bit)
    {
      *(_DWORD *)(a1 + 28) = TBitstreamReader<unsigned int>::GetBit(a2);
      *(_DWORD *)(a1 + 32) = TBitstreamReader<unsigned int>::GetBit(a2);
      v14 = *(_DWORD *)(a1 + 12);
      if (v14 < 3)
      {
        v15 = 1;
LABEL_20:
        v17 = *(_DWORD *)(a2 + 16);
        v16 = *(_DWORD *)(a2 + 20);
        v18 = (char *)(a1 + 48);
        while (1)
        {
          v19 = HIWORD(v17);
          v16 -= 16;
          *(_DWORD *)(a2 + 20) = v16;
          if (v16 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
            *(_QWORD *)a2 += 4;
            v20 = *(_DWORD *)(a2 + 16);
            v21 = *(_DWORD *)(a2 + 20);
            v19 |= v20 >> v21;
            v16 = v21 + 32;
            *(_DWORD *)(a2 + 20) = v21 + 32;
            if (v21 == -32)
              v17 = 0;
            else
              v17 = v20 << -(char)v21;
          }
          else
          {
            v17 <<= 16;
          }
          *(_DWORD *)(a2 + 16) = v17;
          *(v18 - 12) = (v19 & 0x8000) != 0;
          *(v18 - 11) = (v19 >> 11) & 0xF;
          *(v18 - 10) = (v19 >> 7) & 0xF;
          *(v18 - 9) = (v19 >> 4) & 7;
          *(v18 - 8) = (v19 & 2) != 0;
          *(v18 - 4) = v19 & 1;
          if (((v19 >> 1) & 1) != 0)
          {
            v23 = v17 >> 27;
            v16 -= 5;
            *(_DWORD *)(a2 + 20) = v16;
            if (v16 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(_QWORD *)a2 += 4;
              v24 = *(_DWORD *)(a2 + 16);
              v25 = *(_DWORD *)(a2 + 20);
              v23 |= v24 >> v25;
              v16 = v25 + 32;
              *(_DWORD *)(a2 + 20) = v25 + 32;
              if (v25 == -32)
                v17 = 0;
              else
                v17 = v24 << -(char)v25;
            }
            else
            {
              v17 *= 32;
            }
            *(_DWORD *)(a2 + 16) = v17;
            *(v18 - 7) = (v23 >> 3) & 3;
            *(v18 - 6) = (v23 & 4) != 0;
            *(v18 - 5) = v23 & 3;
            if (*(v18 - 4))
            {
LABEL_35:
              v26 = v17 >> 26;
              v16 -= 6;
              *(_DWORD *)(a2 + 20) = v16;
              if (v16 < 0)
              {
                TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                *(_QWORD *)a2 += 4;
                v27 = *(_DWORD *)(a2 + 16);
                v28 = *(_DWORD *)(a2 + 20);
                v26 |= v27 >> v28;
                v16 = v28 + 32;
                *(_DWORD *)(a2 + 20) = v28 + 32;
                if (v28 == -32)
                  v17 = 0;
                else
                  v17 = v27 << -(char)v28;
              }
              else
              {
                v17 <<= 6;
              }
              *(_DWORD *)(a2 + 16) = v17;
              *(v18 - 3) = (v26 >> 4) & 3;
              *(v18 - 2) = (v26 >> 2) & 3;
              *(v18 - 1) = (v26 & 2) != 0;
              v22 = v26 & 1;
              goto LABEL_41;
            }
          }
          else
          {
            *(_WORD *)(v18 - 7) = 258;
            *(v18 - 5) = 2;
            if ((v19 & 1) != 0)
              goto LABEL_35;
          }
          *(_WORD *)(v18 - 3) = 514;
          v22 = 1;
          *(v18 - 1) = 1;
LABEL_41:
          *v18 = v22;
          v18 += 13;
          if (!--v15)
            goto LABEL_42;
        }
      }
      if (v14 == 3)
      {
        v15 = 2;
        goto LABEL_20;
      }
      if (v14 < 7)
      {
        v15 = 3;
        goto LABEL_20;
      }
      if (v14 == 7)
      {
        v15 = 4;
        goto LABEL_20;
      }
    }
LABEL_42:
    v29 = *(unsigned int **)a2;
    v30 = *(_DWORD *)(a2 + 20);
    if ((int)(v30 + 8 * (*(_DWORD *)(a2 + 8) - *(_QWORD *)a2)) < 8)
      return 0;
    v31 = (unsigned int *)(a1 + 104);
    while (1)
    {
      v32 = *(_DWORD *)(a2 + 16);
      v12 = v32 >> 28;
      v33 = v30 - 4;
      *(_DWORD *)(a2 + 20) = v33;
      if (v33 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, v29);
        v29 = (unsigned int *)(*(_QWORD *)a2 + 4);
        *(_QWORD *)a2 = v29;
        v35 = *(_DWORD *)(a2 + 16);
        v36 = *(_DWORD *)(a2 + 20);
        v12 = (v35 >> v36) | v12;
        v33 = v36 + 32;
        *(_DWORD *)(a2 + 20) = v36 + 32;
        if (v36 == -32)
          v34 = 0;
        else
          v34 = v35 << -(char)v36;
      }
      else
      {
        v34 = 16 * v32;
      }
      *(_DWORD *)(a2 + 16) = v34;
      if (!(_DWORD)v12)
        return v12;
      v37 = v34 >> 28;
      v38 = v33 - 4;
      *(_DWORD *)(a2 + 20) = v33 - 4;
      if (v33 - 4 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, v29);
        v29 = (unsigned int *)(*(_QWORD *)a2 + 4);
        *(_QWORD *)a2 = v29;
        v40 = *(_DWORD *)(a2 + 16);
        v41 = *(_DWORD *)(a2 + 20);
        v37 |= v40 >> v41;
        v38 = v41 + 32;
        *(_DWORD *)(a2 + 20) = v41 + 32;
        if (v41 == -32)
          v39 = 0;
        else
          v39 = v40 << -(char)v41;
      }
      else
      {
        v39 = 16 * v34;
      }
      *(_DWORD *)(a2 + 16) = v39;
      if (v37 == 15)
      {
        v42 = HIBYTE(v39);
        v38 -= 8;
        *(_DWORD *)(a2 + 20) = v38;
        if (v38 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v29);
          v29 = (unsigned int *)(*(_QWORD *)a2 + 4);
          *(_QWORD *)a2 = v29;
          v43 = *(_DWORD *)(a2 + 16);
          v44 = *(_DWORD *)(a2 + 20);
          v42 |= v43 >> v44;
          v38 = v44 + 32;
          *(_DWORD *)(a2 + 20) = v44 + 32;
          if (v44 == -32)
            v39 = 0;
          else
            v39 = v43 << -(char)v44;
        }
        else
        {
          v39 <<= 8;
        }
        *(_DWORD *)(a2 + 16) = v39;
        v37 = v42 + 15;
      }
      if (v37 == 270)
      {
        v45 = HIWORD(v39);
        v38 -= 16;
        *(_DWORD *)(a2 + 20) = v38;
        if (v38 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v29);
          v29 = (unsigned int *)(*(_QWORD *)a2 + 4);
          *(_QWORD *)a2 = v29;
          v47 = *(_DWORD *)(a2 + 16);
          v48 = *(_DWORD *)(a2 + 20);
          v45 |= v47 >> v48;
          v38 = v48 + 32;
          *(_DWORD *)(a2 + 20) = v48 + 32;
          if (v48 == -32)
            v46 = 0;
          else
            v46 = v47 << -(char)v48;
        }
        else
        {
          v46 = v39 << 16;
        }
        *(_DWORD *)(a2 + 16) = v46;
        v37 = v45 + 270;
      }
      if ((_DWORD)v12 == 3)
        break;
      if ((_DWORD)v12 == 2)
      {
        *(_BYTE *)(a1 + 101) = 1;
        *(_BYTE *)(a1 + 103) = 1;
        v52 = (MP4SpatialAudioSpecificConfig *)operator new();
        MP4SpatialAudioSpecificConfig::MP4SpatialAudioSpecificConfig(v52);
        *(_QWORD *)v52 = &off_1E2909230;
        v53 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v52;
        if (v53)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
          v52 = *(MP4SpatialAudioSpecificConfig **)(a1 + 112);
          v54 = *(void (***)(MP4LDSpatialSpecificConfig *__hidden))v52;
        }
        else
        {
          v54 = &off_1E2909230;
        }
        v55 = ((uint64_t (*)(MP4SpatialAudioSpecificConfig *, uint64_t, _QWORD))v54[2])(v52, a2, 8 * v37);
        if ((_DWORD)v55)
        {
          v12 = v55;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            v57 = 136315394;
            v58 = "MP4ELDSpecificConfig.cpp";
            v59 = 1024;
            v60 = 59;
            _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4ELDSpecificConfig::Deserialize: invalid spatial specific config data", (uint8_t *)&v57, 0x12u);
          }
          return v12;
        }
      }
      else
      {
        if ((_DWORD)v12 != 1)
        {
          if (8 * v37 > v38 + 8 * (*(_DWORD *)(a2 + 8) - (int)v29))
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              return 4294967090;
            v57 = 136315394;
            v58 = "MP4ELDSpecificConfig.cpp";
            v59 = 1024;
            v60 = 81;
            v10 = MEMORY[0x1E0C81028];
            v11 = "%25s:%-5d  MP4ELDSpecificConfig::Deserialize: invalid eldExtLen value";
            goto LABEL_9;
          }
          v50 = a2;
          v51 = 8 * v37;
          goto LABEL_83;
        }
        *(_WORD *)(a1 + 101) = 257;
      }
LABEL_86:
      v29 = *(unsigned int **)a2;
      v30 = *(_DWORD *)(a2 + 20);
      if ((int)(v30 + 8 * (*(_DWORD *)(a2 + 8) - *(_QWORD *)a2)) <= 7)
        return 0;
    }
    MP4SampleRate::Deserialize((MP4SampleRate *)(a1 + 104), a2, 1);
    if (!*v31)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294967090;
      v57 = 136315394;
      v58 = "MP4ELDSpecificConfig.cpp";
      v59 = 1024;
      v60 = 64;
      v10 = MEMORY[0x1E0C81028];
      v11 = "%25s:%-5d  MP4ELDSpecificConfig::Deserialize: invalid downscaling sample rate";
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 24))
    {
      if (*(_DWORD *)(a1 + 28)
        || (v49 = (float)*(unsigned int *)(a1 + 8) / (float)*v31, v49 != floorf(v49))
        || (v49 & 1) != 0)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return 4294967090;
        v57 = 136315394;
        v58 = "MP4ELDSpecificConfig.cpp";
        v59 = 1024;
        v60 = 73;
        v10 = MEMORY[0x1E0C81028];
        v11 = "%25s:%-5d  MP4ELDSpecificConfig::Deserialize: incompatible downscaling and SBR settings";
        goto LABEL_9;
      }
    }
    v50 = a2;
    v51 = 4;
LABEL_83:
    TBitstreamReader<unsigned int>::SkipBits(v50, v51);
    goto LABEL_86;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v57 = 136315394;
    v58 = "MP4ELDSpecificConfig.cpp";
    v59 = 1024;
    v60 = 21;
    v10 = MEMORY[0x1E0C81028];
    v11 = "%25s:%-5d  MP4ELDSpecificConfig::Deserialize: Error resilience not supported";
LABEL_9:
    _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v57, 0x12u);
  }
  return 4294967090;
}

void sub_18F0BD39C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10A1C40A5657A2CLL);
  _Unwind_Resume(a1);
}

uint64_t MP4ELDSpecificConfig::SerializeCount(MP4ELDSpecificConfig *this)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  const MP4SpatialAudioSpecificConfig *v8;
  unsigned int v9;
  MP4SampleRate *v10;
  int v11;
  _BYTE v13[144];

  if (*((_DWORD *)this + 6))
  {
    v2 = *((_DWORD *)this + 3);
    if (v2 >= 3)
    {
      if (v2 == 3)
      {
        v3 = 2;
      }
      else if (v2 >= 7)
      {
        if (v2 != 7)
        {
          v4 = 7;
          goto LABEL_18;
        }
        v3 = 4;
      }
      else
      {
        v3 = 3;
      }
    }
    else
    {
      v3 = 1;
    }
    v5 = (unsigned __int8 *)this + 44;
    v4 = 7;
    do
    {
      if (*(v5 - 4))
        v6 = 21;
      else
        v6 = 16;
      v7 = *v5;
      v5 += 13;
      if (v7)
        v6 += 6;
      v4 += v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 5;
  }
LABEL_18:
  if (*((_BYTE *)this + 103))
  {
    v8 = (const MP4SpatialAudioSpecificConfig *)*((_QWORD *)this + 14);
    if (v8)
    {
      MP4LDSpatialConfigWriter::MP4LDSpatialConfigWriter((MP4LDSpatialConfigWriter *)v13, v8);
      v9 = MP4LDSpatialConfigWriter::size((MP4LDSpatialConfigWriter *)v13);
      v4 += 8 * v9 + 16 * (v9 > 0x10E) + 8 * (v9 > 0xF) + 8;
      MP4SpatialAudioSpecificConfig::~MP4SpatialAudioSpecificConfig((MP4SpatialAudioSpecificConfig *)v13);
    }
  }
  v10 = (MP4SampleRate *)*((unsigned int *)this + 26);
  if ((_DWORD)v10)
  {
    if (MP4SampleRate::Index(v10) == 15)
      v11 = 28;
    else
      v11 = 4;
    v4 += v11 + 8;
  }
  return (v4 + 4);
}

uint64_t MP4ELDSpecificConfig::Serialize(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;
  int *v16;
  int v17;
  int v18;
  unsigned int v19;
  _BYTE v20[144];

  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 16), 1u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 20) >> 1, 3u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 24), 1u);
  if (*(_DWORD *)(a1 + 24))
  {
    v4 = 1;
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 28), 1u);
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 32), 1u);
    v5 = *(_DWORD *)(a1 + 12);
    if (v5 >= 3)
    {
      if (v5 == 3)
      {
        v4 = 2;
      }
      else if (v5 >= 7)
      {
        if (v5 != 7)
          goto LABEL_15;
        v4 = 4;
      }
      else
      {
        v4 = 3;
      }
    }
    v6 = (unsigned __int8 *)(a1 + 48);
    do
    {
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(v6 - 12), 1u);
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(v6 - 11), 4u);
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(v6 - 10), 4u);
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(v6 - 9), 3u);
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, 2u);
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(v6 - 8), 1u);
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(v6 - 4), 1u);
      if (*(v6 - 8))
      {
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(v6 - 7), 2u);
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(v6 - 6), 1u);
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(v6 - 5), 2u);
      }
      if (*(v6 - 4))
      {
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(v6 - 3), 2u);
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(v6 - 2), 2u);
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(v6 - 1), 1u);
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, *v6, 1u);
      }
      v6 += 13;
      --v4;
    }
    while (v4);
  }
LABEL_15:
  if (!*(_BYTE *)(a1 + 103) || !*(_QWORD *)(a1 + 112))
    goto LABEL_30;
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 2, 4u);
  MP4LDSpatialConfigWriter::MP4LDSpatialConfigWriter((MP4LDSpatialConfigWriter *)v20, *(const MP4SpatialAudioSpecificConfig **)(a1 + 112));
  v7 = MP4LDSpatialConfigWriter::size((MP4LDSpatialConfigWriter *)v20);
  v8 = v7 - 270;
  if (v7 <= 0x10E)
  {
    v12 = v7;
    if (v7 >= 0xF)
      v13 = 15;
    else
      v13 = v7;
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, v13, 4u);
    if (v12 < 0x10)
      goto LABEL_25;
    v10 = v12 - 15;
    v9 = a2;
    v11 = 8;
  }
  else
  {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, 15, 4u);
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, 255, 8u);
    v9 = a2;
    v10 = v8;
    v11 = 16;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(v9, v10, v11);
LABEL_25:
  if (MP4LDSpatialConfigWriter::Serialize((uint64_t)v20, a2))
  {
    MP4SpatialAudioSpecificConfig::~MP4SpatialAudioSpecificConfig((MP4SpatialAudioSpecificConfig *)v20);
    return 0xFFFFFFFFLL;
  }
  v15 = *(_DWORD *)(a2 + 28) & 7;
  if (v15)
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, v15);
  MP4SpatialAudioSpecificConfig::~MP4SpatialAudioSpecificConfig((MP4SpatialAudioSpecificConfig *)v20);
LABEL_30:
  v17 = *(_DWORD *)(a1 + 104);
  v16 = (int *)(a1 + 104);
  if (v17)
  {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, 3, 4u);
    if (MP4SampleRate::Index((MP4SampleRate *)*v16) == 15)
      v18 = 4;
    else
      v18 = 1;
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, v18, 4u);
    MP4SampleRate::Serialize(v16, a2);
    v19 = *(_DWORD *)(a2 + 28) & 7;
    if (v19)
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, v19);
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, 4u);
  return 0;
}

void acv2::TPDFDitherConverter::~TPDFDitherConverter(acv2::TPDFDitherConverter *this)
{
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x193FFE460);
}

const __CFString *acv2::TPDFDitherConverter::ConverterName(acv2::TPDFDitherConverter *this)
{
  return CFSTR("TPDFDitherConverter");
}

void acv2::DitherConverter::description(int16x8_t *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  acv2::AudioConverterBase::description(this, &v12);
  v4 = std::string::append(&v12, "    bitdepth: ", 0xEuLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, this[10].u32[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v14, "\n", 1uLL);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_18F0BD93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 25) < 0)
    operator delete(*(void **)(v26 - 48));
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void acv2::TPDFDitherConverter::ConvertBufferList(uint64_t a1, int a2, unsigned int **a3, _DWORD **a4)
{
  int *v4;
  int v5;
  int v8;
  float v9;
  float v10;
  unint64_t v11;
  vDSP_Length v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  vDSP_Length v16;
  int v17;
  unsigned int v18;
  vDSP_Length v19;
  float *__A;
  float32x4_t __B[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = (int *)*a3;
  v5 = **a3;
  if (v5 != **a4)
    std::terminate();
  v8 = 1;
  if ((*(_BYTE *)(a1 + 28) & 0x20) == 0)
    v8 = *(_DWORD *)(a1 + 44);
  v9 = scalbnf(1.0, 1 - *(_DWORD *)(a1 + 168));
  if (v5)
  {
    v10 = v9;
    v11 = 0;
    v12 = (v8 * a2);
    v13 = a1 + 176;
    v14 = a1 + 208;
    do
    {
      __A = *(float **)&v4[4 * v11 + 4];
      v15 = *(float **)&(*a4)[4 * v11 + 4];
      v16 = v12;
      if ((_DWORD)v12)
      {
        v17 = 0;
        v18 = v16;
        do
        {
          if (v18 >= 0x200)
            v19 = 512;
          else
            v19 = v18;
          generateVector((float32x4_t *)&v15[v17], v19, v13, v10);
          generateVector(__B, v19, v14, v10);
          vDSP_vadd(&v15[v17], 1, __B[0].f32, 1, &v15[v17], 1, v19);
          v17 += v19;
          v18 -= v19;
        }
        while (v18);
      }
      v12 = v16;
      vDSP_vadd(__A, 1, v15, 1, v15, 1, v16);
      ++v11;
      v4 = (int *)*a3;
    }
    while (v11 < **a3);
  }
}

uint64_t acv2::DitherConverter::SetBitDepth(acv2::DitherConverter *this, unsigned int a2)
{
  uint64_t result;

  if (a2 > 0x18)
    return 560096368;
  result = 0;
  *((_DWORD *)this + 42) = a2;
  return result;
}

void acv2::NoiseShapingDitherConverter::~NoiseShapingDitherConverter(acv2::NoiseShapingDitherConverter *this)
{
  acv2::NoiseShapingDitherConverter::~NoiseShapingDitherConverter(this);
  JUMPOUT(0x193FFE460);
}

{
  _BYTE *v2;
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;

  *(_QWORD *)this = &off_1E290B1F8;
  v3 = (_QWORD *)((char *)this + 192);
  v2 = (_BYTE *)*((_QWORD *)this + 24);
  if (v2)
  {
    v4 = (_BYTE *)*((_QWORD *)this + 25);
    if (v4 != v2)
      *((_QWORD *)this + 25) = &v4[(v2 - v4 + 31) & 0xFFFFFFFFFFFFFFE0];
    operator delete(v2);
    *v3 = 0;
    v3[1] = 0;
  }
  v5 = (_BYTE *)*((_QWORD *)this + 22);
  if (v5)
  {
    v6 = (_BYTE *)*((_QWORD *)this + 23);
    if (v6 != v5)
      *((_QWORD *)this + 23) = &v6[(v5 - v6 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v5);
    *((_QWORD *)this + 22) = 0;
    *((_QWORD *)this + 23) = 0;
  }
  acv2::AudioConverterBase::~AudioConverterBase(this);
}

const __CFString *acv2::NoiseShapingDitherConverter::ConverterName(acv2::NoiseShapingDitherConverter *this)
{
  return CFSTR("NoiseShapingDitherConverter");
}

uint64_t acv2::NoiseShapingDitherConverter::Reset(acv2::NoiseShapingDitherConverter *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = (void *)*((_QWORD *)this + 22);
  v3 = *((_QWORD *)this + 23) - (_QWORD)v2;
  if (v3 >= 1)
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
  v4 = (void *)*((_QWORD *)this + 24);
  v5 = *((_QWORD *)this + 25) - (_QWORD)v4;
  if (v5 >= 1)
    bzero(v4, 32 * (((unint64_t)v5 >> 5) - ((unint64_t)v5 > 0x1F)) + 32);
  return 0;
}

uint64_t acv2::NoiseShapingDitherConverter::ConvertBufferList(uint64_t result, uint64_t a2, unsigned int **a3, _DWORD **a4)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a3;
  v5 = **a3;
  if (v5 != **a4
    || ((v6 = result, v7 = *(_DWORD *)(result + 84), (*(_BYTE *)(result + 68) & 0x20) != 0) ? (v8 = 1) : (v8 = v7),
        (_DWORD)v8 * v5 != v7))
  {
    std::terminate();
  }
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if ((_DWORD)v8)
      {
        v14 = 0;
        v15 = *(_QWORD *)&v4[4 * v12 + 4];
        v16 = *(_QWORD *)&(*a4)[4 * v12 + 4];
        do
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 176))(v6, a2, (v13 + v14++), v15, v8, v16, v8);
          v16 += 4;
          v15 += 4;
        }
        while (v8 != v14);
        v13 += v14;
        v4 = *a3;
        v5 = **a3;
      }
      ++v12;
    }
    while (v12 < v5);
  }
  return result;
}

void acv2::NoiseShapingDitherConverter::ConvertSingleChannel(acv2::NoiseShapingDitherConverter *this, unsigned int a2, unsigned int a3, const float *a4, int a5, float *a6, int a7)
{
  int v14;
  float v15;
  int8x16_t v16;
  uint64_t v17;
  int8x16_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;

  v14 = *((_DWORD *)this + 42);
  v15 = scalbnf(0.5, v14);
  *(float *)v16.i32 = scalbnf(2.0, -v14);
  v17 = *((_QWORD *)this + 22);
  v18.i32[0] = *(_DWORD *)(v17 + 4 * a3);
  if (a2)
  {
    v19 = 0;
    v20 = 0;
    v21 = a2;
    v22 = *((_QWORD *)this + 24) + 32 * a3;
    do
    {
      v23 = -(float)(*(float *)v18.i32 - (float)(v15 * a4[v19]));
      v24 = roundf(v23);
      v25 = v24 - v23;
      v18 = *(int8x16_t *)v22;
      v26 = *(int8x16_t *)(v22 + 16);
      v27 = (float32x4_t)vextq_s8(*(int8x16_t *)v22, v26, 4uLL);
      v28 = (float32x4_t)vextq_s8(v26, v16, 4uLL);
      v28.i32[3] = 0;
      *(float32x4_t *)v22 = vmlaq_n_f32(v27, (float32x4_t)xmmword_18F117480, v25);
      *(float32x4_t *)(v22 + 16) = vmlaq_n_f32(v28, (float32x4_t)xmmword_18F117490, v25);
      a6[v20] = *(float *)v16.i32 * v24;
      v20 += a7;
      v19 += a5;
      --v21;
    }
    while (v21);
    v17 = *((_QWORD *)this + 22);
  }
  *(_DWORD *)(v17 + 4 * a3) = v18.i32[0];
}

void acv2::UV22DitherConverter::~UV22DitherConverter(acv2::UV22DitherConverter *this)
{
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x193FFE460);
}

const __CFString *acv2::UV22DitherConverter::ConverterName(acv2::UV22DitherConverter *this)
{
  return CFSTR("UV22DitherConverter");
}

uint64_t acv2::UV22DitherConverter::Reset(acv2::UV22DitherConverter *this)
{
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 47) = 3;
  *((_DWORD *)this + 43) = 0;
  *((_DWORD *)this + 45) = 0;
  return 0;
}

void acv2::UV22DitherConverter::ConvertBufferList(uint64_t a1, int a2, _QWORD *a3, _DWORD **a4)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _WORD *v15;
  uint64_t v16;
  float *v17;
  float *v18;
  uint64_t v19;
  const char *v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)*a3;
  if ((_DWORD)v4 != **a4)
  {
    if (!os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    *(_DWORD *)buf = 136315394;
    v22 = "DitherConverter.cpp";
    v23 = 1024;
    v24 = 377;
    v20 = "%25s:%-5d ASSERTION FAILURE [(inBufferList.size() == outBufferList.size()) != 0 is false]: ";
    goto LABEL_22;
  }
  v6 = *(_DWORD *)(a1 + 84);
  if ((*(_BYTE *)(a1 + 68) & 0x20) != 0)
    v7 = 1;
  else
    v7 = v6;
  if ((_DWORD)v7 * (_DWORD)v4 != v6)
  {
    if (!os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    *(_DWORD *)buf = 136315394;
    v22 = "DitherConverter.cpp";
    v23 = 1024;
    v24 = 383;
    v20 = "%25s:%-5d ASSERTION FAILURE [(numChannels == OutputFormat().mChannelsPerFrame) != 0 is false]: ";
LABEL_22:
    _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
LABEL_23:
    __break(1u);
  }
  if ((_DWORD)v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v12 = *(_QWORD *)(*a3 + 16 * i + 16);
      v13 = *(_QWORD *)&(*a4)[4 * i + 4];
      if ((*(_BYTE *)(a1 + 28) & 1) != 0)
      {
        if ((_DWORD)v7)
        {
          acv2::UV22DitherConverter::ConvertChannel<float,float>((_DWORD *)a1, *(float **)(*a3 + 16 * i + 16), v7, *(float **)&(*a4)[4 * i + 4], v7, a2);
          v17 = (float *)(v12 + 4);
          v18 = (float *)(v13 + 4);
          v19 = v7 - 1;
          if (v7 != 1)
          {
            do
            {
              acv2::UV22DitherConverter::ConvertChannel<float,float>((_DWORD *)a1, v17++, v7, v18++, v7, a2);
              --v19;
            }
            while (v19);
          }
        }
      }
      else if ((_DWORD)v7)
      {
        acv2::UV22DitherConverter::ConvertChannel<int,short>((_DWORD *)a1, *(_DWORD **)(*a3 + 16 * i + 16), v7, *(_WORD **)&(*a4)[4 * i + 4], v7, a2);
        v14 = (_DWORD *)(v12 + 4);
        v15 = (_WORD *)(v13 + 2);
        v16 = v7 - 1;
        if (v7 != 1)
        {
          do
          {
            acv2::UV22DitherConverter::ConvertChannel<int,short>((_DWORD *)a1, v14++, v7, v15++, v7, a2);
            --v16;
          }
          while (v16);
        }
      }
    }
  }
}

void acv2::UV22DitherConverter::ConvertChannel<float,float>(_DWORD *a1, float *a2, unsigned int a3, float *a4, unsigned int a5, int a6)
{
  float v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v12 = scalbnf(1.0, a1[47] - a1[44] - 7);
  if (a6)
  {
    v13 = a1[43];
    v14 = a1[46];
    v15 = (int)a1[45];
    v16 = v13 + acv2::UV22DitherConverter::m_pcDriverTable[v15];
    if (v16 <= 7)
      v17 = v13 + acv2::UV22DitherConverter::m_pcDriverTable[v15];
    else
      v17 = v16 - 8;
    do
    {
      *a4 = *a2
          + (float)(v12
                  * (float)((float)(char)acv2::UV22DitherConverter::m_pcDitherSequence[4096 * (unint64_t)v17
                                                                                     + v14]
                          + 0.5));
      if (v14 + 1 < 4096)
      {
        ++v14;
      }
      else
      {
        v14 -= 4095;
        if ((_DWORD)v15 == 2047)
          LODWORD(v15) = 0;
        else
          LODWORD(v15) = v15 + 1;
        a1[45] = v15;
        v17 = v13 + acv2::UV22DitherConverter::m_pcDriverTable[(int)v15];
        if (v17 > 7)
          v17 -= 8;
      }
      a2 += a3;
      a4 += a5;
      --a6;
    }
    while (a6);
    a1[46] = v14;
  }
}

_DWORD *acv2::UV22DitherConverter::ConvertChannel<int,short>(_DWORD *result, _DWORD *a2, unsigned int a3, _WORD *a4, unsigned int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;

  if (a6)
  {
    v6 = result[46];
    v7 = result[47] - 8;
    v8 = result[43];
    v9 = result[44];
    v10 = v7 + v9;
    v11 = (1 << (v7 + v9 - 1)) + (1 << (v9 - 1));
    v12 = (int)result[45];
    v13 = v8 + acv2::UV22DitherConverter::m_pcDriverTable[v12];
    if (v13 <= 7)
      v14 = v8 + acv2::UV22DitherConverter::m_pcDriverTable[v12];
    else
      v14 = v13 - 8;
    v15 = 4 * a3;
    do
    {
      v16 = v11
          + *a2
          + ((acv2::UV22DitherConverter::m_pcDitherSequence[4096 * (unint64_t)v14 + v6] - 128) << v10);
      if (v16 < 0)
      {
        if (HIBYTE(v16) == 255)
        {
LABEL_11:
          v17 = v16 >> 9;
          goto LABEL_12;
        }
        LOWORD(v17) = 0x8000;
      }
      else
      {
        if (!HIBYTE(v16))
          goto LABEL_11;
        LOWORD(v17) = 0x7FFF;
      }
LABEL_12:
      *a4 = v17;
      v18 = v6 + 1;
      result[46] = v6 + 1;
      if (v6 + 1 >= 4096)
      {
        v18 = v6 - 4095;
        if ((_DWORD)v12 == 2047)
          LODWORD(v12) = 0;
        else
          LODWORD(v12) = v12 + 1;
        result[45] = v12;
        result[46] = v18;
        v14 = v8 + acv2::UV22DitherConverter::m_pcDriverTable[(int)v12];
        if (v14 > 7)
          v14 -= 8;
      }
      a2 = (_DWORD *)((char *)a2 + v15);
      a4 += a5;
      v6 = v18;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t _ZNSt3__18valarrayIDv8_fED1Ev(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;

  v2 = *(_BYTE **)a1;
  if (v2)
  {
    v3 = *(_BYTE **)(a1 + 8);
    if (v3 != v2)
      *(_QWORD *)(a1 + 8) = &v3[(v2 - v3 + 31) & 0xFFFFFFFFFFFFFFE0];
    operator delete(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

uint64_t std::valarray<float>::~valarray(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;

  v2 = *(_BYTE **)a1;
  if (v2)
  {
    v3 = *(_BYTE **)(a1 + 8);
    if (v3 != v2)
      *(_QWORD *)(a1 + 8) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

void MP4BoxParser_SyncSampleTable::~MP4BoxParser_SyncSampleTable(MP4BoxParser_SyncSampleTable *this)
{
  MP4BoxParser_SyncSampleTable::~MP4BoxParser_SyncSampleTable(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E2909518;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t MP4BoxParser_SyncSampleTable::Init(MP4BoxParser **this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!(_DWORD)v2)
  {
    if (*((_DWORD *)this + 5) != 1937011571)
      return 4294967294;
    v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
    v11 = 0;
    v4 = (unint64_t)this[3];
    if (v4 <= (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this) || (unint64_t)this[3] <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_8:
        v2 = 0;
        *((_BYTE *)this + 60) = 0;
        return v2;
      }
      *(_DWORD *)buf = 136315394;
      v13 = "MP4_BoxParser_SyncSampleTable.cpp";
      v14 = 1024;
      v15 = 105;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d  'stss' box is too small for its entry count";
LABEL_7:
      _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, v6, buf, 0x12u);
      goto LABEL_8;
    }
    v8 = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, &v11);
    if (!(_DWORD)v8)
    {
      v9 = bswap32(v11);
      *((_DWORD *)this + 16) = v9;
      this[9] = (MP4BoxParser *)4;
      v10 = (unint64_t)this[3];
      if (v10 > (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this)
        && (unint64_t)this[3] >= 4 * (unint64_t)v9 + 4)
      {
        v2 = 0;
        *((_BYTE *)this + 60) = 1;
        return v2;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_8;
      *(_DWORD *)buf = 136315394;
      v13 = "MP4_BoxParser_SyncSampleTable.cpp";
      v14 = 1024;
      v15 = 116;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d  'stss' box is too small for its entries";
      goto LABEL_7;
    }
    v2 = v8;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v13 = "MP4_BoxParser_SyncSampleTable.cpp";
      v14 = 1024;
      v15 = 108;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Couldn't read sync sample box entry count", buf, 0x12u);
    }
  }
  return v2;
}

void MP4BoxParser_SyncSampleTable::MP4BoxParser_SyncSampleTable(MP4BoxParser_SyncSampleTable *this, DataSource *a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E2902718;
  (*(void (**)(DataSource *, uint64_t))(*(_QWORD *)a2 + 88))(a2, a3);
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 9) = 8;
  *(_QWORD *)this = &off_1E2909518;
  *((_BYTE *)this + 60) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = 0;
}

uint64_t MP4BoxParser_SyncSampleTable::GetSyncSampleTable(MP4BoxParser_SyncSampleTable *this, SyncSampleTable *a2)
{
  SyncSampleTable *v2;
  char v4;
  SyncSampleTable *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t DataSourceBytes;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void **v24;
  char *v25;
  char *v26;
  char *v27;
  size_t v28;
  unint64_t v29;
  char *v30;
  void *v31;
  char *v32;
  unsigned int v35;
  uint64_t v36;
  _QWORD v37[3];
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v2 = a2;
  v42 = *MEMORY[0x1E0C80C00];
  v5 = (MP4BoxParser_SyncSampleTable *)((char *)this + 80);
  v4 = *((_BYTE *)this + 80);
  if (*((_BYTE *)this + 60))
  {
    if (*((_BYTE *)this + 80))
    {
      v4 = 1;
    }
    else
    {
      v6 = *((_DWORD *)this + 16);
      if (v6)
      {
        memset(v37, 0, sizeof(v37));
        if (v6 >= 0x2000)
          v7 = 0x2000;
        else
          v7 = v6;
        v8 = *((_QWORD *)this + 9);
        buf[0] = 0;
        v35 = v7;
        std::vector<unsigned char>::__append(v37, (4 * v7), buf);
        v9 = (char *)v37[0];
        while (1)
        {
          v10 = v6 >= v35 ? v35 : v6;
          v11 = (*(uint64_t (**)(MP4BoxParser_SyncSampleTable *))(*(_QWORD *)this + 24))(this);
          DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v8 + v11, 4 * v10, v9);
          if ((_DWORD)DataSourceBytes)
            break;
          v13 = 0;
          if (v10 <= 1)
            v14 = 1;
          else
            v14 = v10;
          v15 = 4 * v14;
          do
          {
            v36 = bswap32(*(_DWORD *)&v9[v13]) - 1;
            SyncSampleTable::append_entry((uint64_t)v5, &v36);
            v13 += 4;
          }
          while (v15 != v13);
          v8 += 4 * v10;
          v6 -= v10;
          if (!v6)
          {
            operator delete(v9);
            v2 = a2;
            goto LABEL_20;
          }
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v39 = "MP4_BoxParser_SyncSampleTable.cpp";
          v40 = 1024;
          v41 = 72;
          _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Couldn't read sync sample entries", buf, 0x12u);
        }
        if (v9)
          operator delete(v9);
        return DataSourceBytes;
      }
LABEL_20:
      v4 = 1;
      *(_BYTE *)v5 = 1;
    }
  }
  *(_BYTE *)v2 = v4;
  if (v5 != v2)
  {
    v16 = (char *)*((_QWORD *)v2 + 1);
    v17 = (char *)*((_QWORD *)this + 11);
    v18 = (_BYTE *)*((_QWORD *)this + 12);
    v19 = v18 - v17;
    v20 = (v18 - v17) >> 3;
    v21 = *((_QWORD *)v2 + 3);
    if (v20 <= (v21 - (uint64_t)v16) >> 3)
    {
      v27 = (char *)*((_QWORD *)v2 + 2);
      v24 = (void **)((char *)v2 + 16);
      v26 = v27;
      v28 = v27 - v16;
      v29 = (v27 - v16) >> 3;
      if (v29 < v20)
      {
        v30 = &v17[8 * v29];
        if (v26 != v16)
        {
          memmove(v16, v17, v28);
          v16 = (char *)*v24;
        }
        v19 = v18 - v30;
        if (v18 == v30)
          goto LABEL_41;
        v31 = v16;
        v32 = v30;
        goto LABEL_40;
      }
    }
    else
    {
      if (v16)
      {
        *((_QWORD *)v2 + 2) = v16;
        operator delete(v16);
        v21 = 0;
        *((_QWORD *)v2 + 1) = 0;
        *((_QWORD *)v2 + 2) = 0;
        *((_QWORD *)v2 + 3) = 0;
      }
      if ((v19 & 0x8000000000000000) != 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v22 = v21 >> 2;
      if (v21 >> 2 <= v20)
        v22 = (v18 - v17) >> 3;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      std::vector<double>::__vallocate[abi:ne180100]((_QWORD *)v2 + 1, v23);
      v25 = (char *)*((_QWORD *)v2 + 2);
      v24 = (void **)((char *)v2 + 16);
      v16 = v25;
    }
    if (v18 == v17)
    {
LABEL_41:
      DataSourceBytes = 0;
      *v24 = &v16[v19];
      return DataSourceBytes;
    }
    v31 = v16;
    v32 = v17;
LABEL_40:
    memmove(v31, v32, v19);
    goto LABEL_41;
  }
  return 0;
}

void sub_18F0BEA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OggAudioFormat::~OggAudioFormat(OggAudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t OggAudioFormat::ExtensionIsThisFormat(OggAudioFormat *this, const __CFString *a2)
{
  const __CFArray *v3;
  uint64_t v4;
  CFArrayRef theArray;
  CFRange v7;

  theArray = 0;
  (*(void (**)(OggAudioFormat *, CFArrayRef *))(*(_QWORD *)this + 64))(this, &theArray);
  v3 = theArray;
  if (!theArray)
    return 0;
  v7.length = CFArrayGetCount(theArray);
  v7.location = 0;
  v4 = CFArrayContainsValue(v3, v7, a2);
  CFRelease(theArray);
  return v4;
}

uint64_t OggAudioFormat::FileDataIsThisFormat(OggAudioFormat *this, unsigned int a2, _DWORD *a3)
{
  uint64_t result;

  result = 0xFFFFFFFFLL;
  if (a2 >= 4)
  {
    if (a2 >= 0x1B && *a3 == 1399285583)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

const __CFArray *OggAudioFormat::GetExtensions(OggAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[4];

  v4[3] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("opus");
  v4[1] = CFSTR("ogg");
  v4[2] = CFSTR("oga");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 3, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *OggAudioFormat::GetUTIs(OggAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("org.xiph.ogg-audio");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *OggAudioFormat::GetMIMETypes(OggAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("audio/ogg");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void OggAudioFormat::GetFileTypeName(OggAudioFormat *this, const __CFString **a2)
{
  __CFBundle *v3;
  const __CFString *v4;
  char v5;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_5:
    v4 = (const __CFString *)CFRetain(CFSTR("Ogg"));
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle)
    goto LABEL_5;
LABEL_3:
  v4 = CFBundleCopyLocalizedString(v3, CFSTR("Ogg"), CFSTR("Ogg"), CFSTR("FileTypeNames"));
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_18F0BED34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t OggAudioFormat::GetAvailableFormatIDs(OggAudioFormat *this, unsigned int *a2, _DWORD *a3)
{
  unsigned int v5;
  uint64_t PropertyInfo;
  UInt32 v8;
  unint64_t v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  void *outPropertyData;
  UInt32 outPropertyDataSize;

  if (a3)
    v5 = *a2 >> 2;
  else
    v5 = 0;
  outPropertyDataSize = 0;
  PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if ((_DWORD)PropertyInfo)
    return PropertyInfo;
  v8 = outPropertyDataSize;
  v9 = (unint64_t)outPropertyDataSize >> 2;
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&outPropertyData, v9, 1);
  PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, outPropertyData);
  v10 = outPropertyData;
  if (!(_DWORD)PropertyInfo)
  {
    if (v8 >= 4)
    {
      v11 = 0;
      if (v9 <= 1)
        v13 = 1;
      else
        v13 = v9;
      v14 = (int *)outPropertyData;
      do
      {
        v16 = *v14++;
        v15 = v16;
        if (v16 == 1718378851 || v15 == 1987015266 || v15 == 1869641075)
        {
          if (a3 && v11 < v5)
            a3[v11] = v15;
          ++v11;
        }
        --v13;
      }
      while (v13);
    }
    else
    {
      v11 = 0;
      v12 = 0;
      if (!outPropertyData)
        goto LABEL_30;
    }
    free(v10);
    v12 = v11;
LABEL_30:
    PropertyInfo = 0;
    *a2 = 4 * v12;
    return PropertyInfo;
  }
  if (outPropertyData)
    free(outPropertyData);
  return PropertyInfo;
}

void sub_18F0BEE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9)
    free(a9);
  _Unwind_Resume(exception_object);
}

uint64_t OggAudioFormat::GetAvailableStreamDescriptions(OggAudioFormat *this, int a2, unsigned int *a3, void *a4)
{
  uint64_t PropertyInfo;
  UInt32 v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  size_t v14;
  UInt32 ioPropertyDataSize;
  void *v17;
  UInt32 outPropertyDataSize;
  _OWORD outPropertyData[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  outPropertyDataSize = 0;
  PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if ((_DWORD)PropertyInfo)
    return PropertyInfo;
  v8 = outPropertyDataSize;
  v9 = (unint64_t)outPropertyDataSize >> 2;
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&v17, v9, 1);
  PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, v17);
  v10 = v17;
  if (!(_DWORD)PropertyInfo)
  {
    if (v8 < 4)
    {
      if (v17)
        free(v17);
    }
    else
    {
      v11 = 0;
      if (v9 <= 1)
        v12 = 1;
      else
        v12 = v9;
      v13 = 1;
      do
      {
        if (*((_DWORD *)v17 + v11) == a2 && (a2 == 1718378851 || a2 == 1869641075 || a2 == 1987015266))
          break;
        v13 = ++v11 < v9;
      }
      while (v12 != v11);
      free(v17);
      v17 = 0;
      if (v13)
      {
        v20 = 0;
        memset(outPropertyData, 0, sizeof(outPropertyData));
        DWORD2(outPropertyData[0]) = a2;
        ioPropertyDataSize = 40;
        AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, outPropertyData);
        if (*a3 >= 0x28)
          v14 = 40;
        else
          v14 = 0;
        *a3 = v14;
        if (a4)
          memcpy(a4, outPropertyData, v14);
        PropertyInfo = 0;
        v10 = v17;
        if (v17)
          goto LABEL_4;
        return PropertyInfo;
      }
    }
    *a3 = 0;
    return 1718449215;
  }
  if (v17)
LABEL_4:
    free(v10);
  return PropertyInfo;
}

void sub_18F0BF050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11)
    free(a11);
  _Unwind_Resume(exception_object);
}

uint64_t OggAudioFormat::GetHFSCodes(OggAudioFormat *this, unsigned int *a2, void *__dst)
{
  unsigned int v3;
  size_t v4;
  uint64_t __src;

  __src = 0x4F6767534F676741;
  v3 = *a2 >> 2;
  if (v3 >= 2)
    v3 = 2;
  v4 = 4 * v3;
  *a2 = v4;
  if (__dst)
    memcpy(__dst, &__src, v4);
  return 0;
}

double OggAudioFormat::New(OggAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_QWORD *)(v1 + 80) = 0x4F67676600000001;
  *(_QWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 96) = -1;
  *(_WORD *)(v1 + 100) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0x100000000;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)v1 = &off_1E2902748;
  *(_DWORD *)(v1 + 288) = 0;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_DWORD *)(v1 + 320) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 328) = -1;
  *(_DWORD *)(v1 + 336) = -1;
  *(_QWORD *)(v1 + 344) = -1;
  *(_BYTE *)(v1 + 352) = 0;
  *(_DWORD *)(v1 + 376) = 0;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_QWORD *)(v1 + 448) = 0;
  *(_QWORD *)(v1 + 456) = -1;
  *(_DWORD *)(v1 + 464) = 0;
  *(_QWORD *)(v1 + 512) = 0;
  *(_BYTE *)(v1 + 504) = 0;
  *(_QWORD *)(v1 + 528) = -1;
  *(_QWORD *)(v1 + 520) = -1;
  *(_BYTE *)(v1 + 568) = 0;
  *(_DWORD *)(v1 + 588) = 0;
  *(_DWORD *)(v1 + 136) = 16843008;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_OWORD *)(v1 + 488) = 0u;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_OWORD *)(v1 + 572) = 0u;
  return result;
}

uint64_t OggAudioFormat::NewStream(OggAudioFormat *this)
{
  uint64_t v1;

  v1 = operator new();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_QWORD *)(v1 + 88) = -1;
  *(_QWORD *)(v1 + 96) = -1;
  *(_QWORD *)(v1 + 104) = -1;
  *(_QWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_DWORD *)(v1 + 128) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_QWORD *)(v1 + 224) = 0;
  *(_BYTE *)(v1 + 232) = 0;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 240) = xmmword_18F116F80;
  *(_DWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 300) = 0;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_DWORD *)(v1 + 328) = 0;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_QWORD *)v1 = &off_1E29048C0;
  *(_QWORD *)(v1 + 336) = 0;
  *(_DWORD *)(v1 + 344) = 0;
  *(_WORD *)(v1 + 1480) = 0;
  *(_BYTE *)(v1 + 1482) = 0;
  *(_DWORD *)(v1 + 1484) = 0;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_QWORD *)(v1 + 384) = 0;
  *(_OWORD *)(v1 + 1488) = xmmword_18F1173E0;
  *(_QWORD *)(v1 + 1504) = -1;
  *(_DWORD *)(v1 + 1512) = 0;
  *(_DWORD *)(v1 + 1720) = 0;
  *(_QWORD *)(v1 + 1712) = 0;
  *(_OWORD *)(v1 + 1696) = 0u;
  *(_OWORD *)(v1 + 1520) = 0u;
  *(_OWORD *)(v1 + 1536) = 0u;
  *(_OWORD *)(v1 + 1552) = 0u;
  *(_OWORD *)(v1 + 1568) = 0u;
  *(_OWORD *)(v1 + 1584) = 0u;
  *(_OWORD *)(v1 + 1600) = 0u;
  *(_OWORD *)(v1 + 1616) = 0u;
  *(_OWORD *)(v1 + 1632) = 0u;
  *(_OWORD *)(v1 + 1648) = 0u;
  *(_OWORD *)(v1 + 1664) = 0u;
  *(_OWORD *)(v1 + 1676) = 0u;
  *(_QWORD *)(v1 + 1728) = -1;
  *(_DWORD *)(v1 + 1736) = -1;
  *(_QWORD *)(v1 + 1744) = -1;
  *(_BYTE *)(v1 + 1752) = 0;
  *(_QWORD *)(v1 + 1760) = 0;
  *(_DWORD *)(v1 + 411) = 0;
  *(_QWORD *)(v1 + 404) = 0;
  *(_OWORD *)(v1 + 388) = 0u;
  bzero((void *)(v1 + 416), 0x414uLL);
  *(_OWORD *)(v1 + 1464) = 0u;
  return v1;
}

void OggAudioFile::~OggAudioFile(OggAudioFile *this)
{
  OggAudioFile::~OggAudioFile(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  const void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  const void *v9;
  void *v10;
  void *v11;
  void *v12;
  void **v13;

  *(_QWORD *)this = &off_1E2902748;
  v2 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v2)
    MEMORY[0x193FFE460](v2, 0x1000C40BD41A4CDLL);
  v13 = (void **)((char *)this + 544);
  std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v3 = (const void *)*((_QWORD *)this + 67);
  if (v3)
    CFRelease(v3);
  v4 = (void *)*((_QWORD *)this + 59);
  if (v4)
  {
    *((_QWORD *)this + 60) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 54);
  if (v5)
  {
    *((_QWORD *)this + 55) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 51);
  if (v6)
  {
    *((_QWORD *)this + 52) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 48);
  if (v7)
  {
    *((_QWORD *)this + 49) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 37);
  if (v8)
  {
    *((_QWORD *)this + 38) = v8;
    operator delete(v8);
  }
  v13 = (void **)((char *)this + 264);
  std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v9 = (const void *)*((_QWORD *)this + 32);
  if (v9)
    CFRelease(v9);
  v10 = (void *)*((_QWORD *)this + 29);
  if (v10)
  {
    *((_QWORD *)this + 30) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 26);
  if (v11)
  {
    *((_QWORD *)this + 27) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 23);
  if (v12)
  {
    *((_QWORD *)this + 24) = v12;
    operator delete(v12);
  }
  AudioFileObject::~AudioFileObject(this);
}

uint64_t OggAudioFile::OpenFromDataSource(OggAudioFile *this)
{
  uint64_t v1;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = (*(uint64_t (**)(OggAudioFile *))(*(_QWORD *)this + 728))(this);
  if ((_DWORD)v1 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "OggAudioFile.cpp";
    v5 = 1024;
    v6 = 270;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  OggAudioFile::ParseAudioFile failed", (uint8_t *)&v3, 0x12u);
  }
  return v1;
}

uint64_t OggAudioFile::ReadPackets(OggAudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  int v19;
  uint64_t v20;
  unsigned int v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  if (a6)
  {
    v8 = *a6;
    if ((_DWORD)v8)
    {
      if (a7)
      {
        v15 = (*(uint64_t (**)(OggAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, v8 + a5, 0, 1);
        if ((_DWORD)v15)
        {
          v16 = v15;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v24 = "OggAudioFile.cpp";
            v25 = 1024;
            v26 = 1172;
            v17 = MEMORY[0x1E0C81028];
            v18 = "%25s:%-5d  ScanForPackets (Ogg) failed";
LABEL_9:
            _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
            return v16;
          }
          return v16;
        }
        v19 = (*(uint64_t (**)(OggAudioFile *))(*(_QWORD *)this + 632))(this);
        if (!v19)
          v19 = (*(uint64_t (**)(OggAudioFile *))(*(_QWORD *)this + 656))(this);
        v22 = *a6 * v19;
      }
      v20 = (*(uint64_t (**)(OggAudioFile *, uint64_t, unsigned int *, AudioStreamPacketDescription *, uint64_t, unsigned int *, void *))(*(_QWORD *)this + 96))(this, a2, &v22, a4, a5, a6, a7);
      v16 = v20;
      if (a3 && !(_DWORD)v20)
        *a3 = v22;
      return v16;
    }
  }
  v16 = 2003334207;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v24 = "OggAudioFile.cpp";
    v25 = 1024;
    v26 = 1164;
    v17 = MEMORY[0x1E0C81028];
    v18 = "%25s:%-5d  invalid ioNumPackets parameter";
    goto LABEL_9;
  }
  return v16;
}

uint64_t OggAudioFile::ReadPacketData(OggAudioFile *this, unsigned __int8 a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, _BYTE *a7)
{
  uint64_t v8;
  OggAudioFile *v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  NSObject *v18;
  const char *v19;
  int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  AudioStreamPacketDescription *v36;
  uint64_t v37;
  SInt64 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  AudioStreamPacketDescription *v55;
  SInt64 v56;
  unsigned int v57;
  UInt32 v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  _BYTE *v62;
  int v64;
  OggAudioFile *v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  unsigned int v70;
  _BYTE buf[18];
  uint64_t v72;

  v8 = a5;
  v10 = this;
  v72 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v11 = *a3;
    if (a6)
      goto LABEL_3;
LABEL_15:
    if (a7)
      v16 = 1;
    else
      v16 = a4 == 0;
    if (!v16 || v11)
      goto LABEL_23;
LABEL_21:
    v17 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "OggAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1205;
    v18 = MEMORY[0x1E0C81028];
    v19 = "%25s:%-5d  invalid ioNumBytes parameter";
LABEL_25:
    _os_log_impl(&dword_18EE07000, v18, OS_LOG_TYPE_ERROR, v19, buf, 0x12u);
    goto LABEL_37;
  }
  v11 = 0;
  if (!a6)
    goto LABEL_15;
LABEL_3:
  v12 = *a6;
  if (a4)
    v13 = a7 == 0;
  else
    v13 = 0;
  v14 = v13;
  if (!v13 && !v11)
    goto LABEL_21;
  if (!v12)
  {
LABEL_23:
    v17 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "OggAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1206;
    v18 = MEMORY[0x1E0C81028];
    v19 = "%25s:%-5d  invalid ioNumPackets parameter";
    goto LABEL_25;
  }
  *a6 = 0;
  if (a3)
  {
    *a3 = 0;
    v15 = *a6;
  }
  else
  {
    v15 = 0;
  }
  v20 = (*(uint64_t (**)(OggAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, v15 + a5, 0, 1);
  if (v20)
  {
    v21 = v20;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "OggAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1215;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ScanForPackets (Ogg) failed", buf, 0x12u);
    }
LABEL_30:
    if (v21 == -39)
      v17 = 0;
    else
      v17 = v21;
  }
  else if (v14)
  {
    *(_DWORD *)buf = v12;
    AudioFileObject::GetPacketDescriptions(v10, v8, (unsigned int *)buf, a4);
    *a6 = *(_DWORD *)buf;
    if (a3)
      *a3 = 0;
    v17 = 0;
  }
  else
  {
    v68 = (uint64_t *)*((_QWORD *)v10 + 15);
    v23 = (*(uint64_t (**)(OggAudioFile *, uint64_t))(*(_QWORD *)v10 + 744))(v10, v8);
    if (v23 == -1)
      return 4294967257;
    v65 = v10;
    v66 = v23;
    v61 = 0;
    v62 = a7;
    v64 = v12;
    v67 = v11;
    v59 = v12;
    v60 = v11;
    while (1)
    {
      v24 = *((_QWORD *)v10 + 51);
      if (v66 >= 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)v10 + 52) - v24) >> 3))
      {
        v21 = -39;
LABEL_98:
        *a6 = v12 - v64;
        *a3 = v11 - v67;
        goto LABEL_30;
      }
      v25 = v8 - *(_DWORD *)(v24 + 56 * v66 + 32);
      if (!v25 && (*(_BYTE *)(v24 + 56 * v66) & 1) != 0)
        break;
      v26 = *(_DWORD *)(v24 + 56 * v66 + 40);
      v27 = v26 - v25;
      if (v26 <= v25)
      {
        v21 = 0;
      }
      else
      {
        v70 = 0;
        CompressedPacketTable::operator[]((uint64_t)buf, v68, v8);
        v28 = 0;
        v29 = 0;
        v30 = *((_QWORD *)v65 + 9) + *(_QWORD *)buf;
        while (1)
        {
          v31 = v29;
          if (v27 == v28)
            break;
          v32 = v28;
          CompressedPacketTable::operator[]((uint64_t)buf, v68, v8 + v28);
          if (v64 != v32)
          {
            v29 = (*(_DWORD *)&buf[12] + v31);
            v28 = v32 + 1;
            if (v67 - v31 >= *(_DWORD *)&buf[12])
              continue;
          }
          LODWORD(v27) = v32;
          break;
        }
        v21 = 0;
        if ((_DWORD)v27 && (_DWORD)v31)
        {
          v33 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _BYTE *, unsigned int *))(**((_QWORD **)v65 + 13) + 48))(*((_QWORD *)v65 + 13), 0, v30, v31, v62, &v70);
          if (v70 < v31)
            break;
          v21 = v33;
          v34 = v27;
          v35 = v61;
          v36 = &a4[v61];
          v37 = v8;
          do
          {
            CompressedPacketTable::operator[]((uint64_t)buf, v68, v37);
            *v36 = *(AudioStreamPacketDescription *)buf;
            if (v35)
              v38 = v36[-1].mStartOffset + v36[-1].mDataByteSize;
            else
              v38 = 0;
            v36->mStartOffset = v38;
            ++v36;
            ++v35;
            ++v37;
            --v34;
          }
          while (v34);
          v8 += v27;
          v61 += v27;
          v64 -= v27;
          v67 -= v31;
          v62 += v31;
        }
        v12 = v59;
        v11 = v60;
        v10 = v65;
      }
      if (v64 && !v21 && *(_DWORD *)(*((_QWORD *)v10 + 51) + 56 * v66 + 48))
      {
        CompressedPacketTable::operator[]((uint64_t)buf, v68, v8);
        v39 = *(unsigned int *)&buf[12];
        if (v67 >= *(_DWORD *)&buf[12])
        {
          v57 = v67 - *(_DWORD *)&buf[12];
          v40 = *(_QWORD *)buf;
          v58 = *(_DWORD *)&buf[8];
          v41 = *((_QWORD *)v65 + 9);
          v42 = *((_QWORD *)v65 + 51);
          v43 = *(unsigned int *)(v42 + 56 * v66 + 48);
          *(_DWORD *)buf = 0;
          v44 = v62;
          if (v43 > *(_DWORD *)&buf[12])
          {
LABEL_94:
            v17 = 1685348671;
            goto LABEL_37;
          }
          v56 = v62 - a7;
          v45 = v41 + v40;
          v46 = v66;
          v47 = 56 * v66 + 56;
          v48 = v43;
          while (1)
          {
            if ((_DWORD)v48)
            {
              v49 = v39;
              v50 = v44;
              v51 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v65 + 13) + 48))(*((_QWORD *)v65 + 13), 0, v45, v48);
              if (*(_DWORD *)buf >= v48)
                v21 = v51;
              else
                v21 = -39;
              if (v21)
                goto LABEL_96;
              v42 = *((_QWORD *)v65 + 51);
              v44 = v50;
              v39 = v49;
            }
            v44 += v48;
            if ((_DWORD)v43 == (_DWORD)v39 && v46 > v66)
            {
              v52 = *(_DWORD *)(v42 + v47 - 16);
              if (v52)
                break;
            }
            if (v46 + 1 >= 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)v65 + 52) - v42) >> 3))
            {
              v21 = -39;
LABEL_96:
              v12 = v59;
              v11 = v60;
              goto LABEL_98;
            }
            if ((*(_BYTE *)(v42 + v47) & 1) != 0)
            {
              v53 = v42 + v47;
              v54 = 44;
              if (!*(_DWORD *)(v42 + v47 + 40))
                v54 = 48;
              v48 = *(unsigned int *)(v53 + v54);
              v45 = *(_QWORD *)(v53 + 16);
              *(_DWORD *)buf = 0;
              LODWORD(v43) = v43 + v48;
              v47 += 56;
              ++v46;
              if (v43 <= v39)
                continue;
            }
            goto LABEL_94;
          }
          v10 = v65;
          v62 = v44;
          if (v52 == 1 && !*(_DWORD *)(v42 + 56 * v46 + 48))
            ++v46;
          v12 = v59;
          v11 = v60;
          v21 = 0;
          v55 = &a4[v61];
          v55->mStartOffset = v56;
          ++v8;
          v55->mVariableFramesInPacket = v58;
          v55->mDataByteSize = v39;
          ++v61;
          --v64;
          v67 = v57;
          v66 = v46;
        }
        else
        {
          v21 = 0;
          v12 = v59;
          v11 = v60;
          v10 = v65;
        }
      }
      else
      {
        ++v66;
      }
      if (!v64 || v21)
        goto LABEL_98;
    }
    v17 = 2003334207;
  }
LABEL_37:
  if (*a6)
    return v17;
  else
    return 4294967257;
}

uint64_t OggAudioFile::GetPropertyInfo(OggAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  switch(a2)
  {
    case 1986225779:
      if (a3)
      {
        if (*((_QWORD *)this + 32))
        {
          v6 = *((_QWORD *)this + 33);
          v5 = *((_QWORD *)this + 34);
        }
        else
        {
          v6 = *((_QWORD *)this + 33);
          v5 = *((_QWORD *)this + 34);
          if (v5 == v6)
          {
            v4 = 0;
            goto LABEL_14;
          }
        }
        v4 = 24 * ((unint64_t)(v5 - v6) >> 4) + 16;
LABEL_14:
        *a3 = v4;
      }
      break;
    case 1936745332:
      if (a3)
      {
        v4 = 8;
        goto LABEL_14;
      }
      break;
    case 1886283375:
      if (a3)
      {
        v4 = 16;
        goto LABEL_14;
      }
      break;
    default:
      return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
  }
  if (a4)
    *a4 = 0;
  return 0;
}

uint64_t OggAudioFile::GetProperty(const void **this, int a2, unsigned int *a3, char *a4)
{
  const void **v7;
  uint64_t result;
  int v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  BOOL v30;
  int64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char v38[8];
  int v39;

  v7 = this;
  if (a2 > 1886616164)
  {
    if (a2 != 1886616165)
    {
      if (a2 == 1936745332)
      {
        result = 561211770;
        if (a3)
        {
          if (*a3 >= 8)
          {
            result = (*((uint64_t (**)(const void **, uint64_t, _QWORD, uint64_t))*v7 + 86))(v7, -1, 0, 1);
            if (!(_DWORD)result)
            {
              *(_QWORD *)a4 = v7[62];
              v12 = 8;
              goto LABEL_23;
            }
          }
        }
        return result;
      }
      if (a2 == 1986225779)
        return VorbisComment::GetVorbisCommentFieldList(this + 32, a3, (uint64_t)a4);
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (a2 == 1650683508)
  {
LABEL_14:
    if (!*((_BYTE *)this + 504))
    {
      result = (*((uint64_t (**)(const void **, uint64_t, _QWORD, uint64_t))*this + 86))(this, -1, 0, 1);
      if ((_DWORD)result)
        return result;
    }
    goto LABEL_15;
  }
  if (a2 == 1886090594)
  {
    if (!*((_BYTE *)this + 504))
    {
      if (*a3 != 4)
        return 561211770;
      v14 = *((_DWORD *)this + 8);
      switch(v14)
      {
        case 1718378851:
          result = 0;
          v24 = *((_DWORD *)v7 + 9);
          if ((v24 & 4) != 0)
            v25 = 4;
          else
            v25 = 2;
          if ((v24 & 3) != 0)
            v25 = 3;
          if ((v24 & 1) != 0)
            v26 = 2;
          else
            v26 = v25;
          v15 = *((_DWORD *)v7 + 13) * *((_DWORD *)v7 + 11) * v26 + 82;
          break;
        case 1987015266:
          result = 0;
          v15 = 4096;
          break;
        case 1869641075:
          result = 0;
          v15 = 61440;
          break;
        default:
          return 1718449215;
      }
      *(_DWORD *)a4 = v15;
      return result;
    }
    v13 = 1886090594;
    return AudioFileObject::GetProperty((AudioFileObject *)this, v13, a3, a4);
  }
  if (a2 != 1886283375)
  {
LABEL_15:
    this = v7;
    v13 = a2;
    return AudioFileObject::GetProperty((AudioFileObject *)this, v13, a3, a4);
  }
  result = 561211770;
  if (a3 && *a3 >= 0x10)
  {
    v9 = *((_DWORD *)v7 + 8);
    v10 = (unint64_t)v7[41];
    if ((v10 & 0x8000000000000000) == 0)
    {
      v11 = *((_DWORD *)v7 + 84);
      if ((v11 & 0x80000000) == 0)
      {
        result = 0;
        *(_QWORD *)a4 = v10;
        *((_DWORD *)a4 + 2) = *((_DWORD *)v7 + 80);
        *((_DWORD *)a4 + 3) = v11;
        v12 = 16;
LABEL_23:
        *a3 = v12;
        return result;
      }
    }
    result = OggAudioFile::GetLastPageGranulePosition((OggAudioFile *)v7);
    if (!(_DWORD)result)
    {
      *(_QWORD *)a4 = 0;
      *((_QWORD *)a4 + 1) = 0;
      *a3 = 16;
      v16 = (unsigned int *)v7[52];
      if (v16 == v7[51])
        return 0;
      result = 0;
      v17 = *(v16 - 4);
      if ((_DWORD)v17)
      {
        v18 = (uint64_t *)v7[15];
        if (v18)
        {
          if (v18[3] >= v17)
          {
            v19 = (uint64_t)v7[64];
            v20 = v19 & ~(v19 >> 63);
            v21 = v7[66];
            v22 = __OFSUB__(v21, v20);
            v23 = (uint64_t)&v21[-v20];
            if ((v23 < 0) ^ v22 | (v23 == 0))
              v23 = 0;
            *(_QWORD *)a4 = v23;
            if (v9 == 1987015266)
            {
              if ((unint64_t)v19 >= 0xFFFFFFFF80000000)
                *((_DWORD *)a4 + 2) = -(int)v19;
              CompressedPacketTable::operator[]((uint64_t)v38, v18, 0);
              *((_DWORD *)a4 + 2) += v39;
              v21 = v7[66];
            }
            else
            {
              v27 = *((int *)v7 + 80);
              *((_DWORD *)a4 + 2) = v27;
              v22 = __OFSUB__(v23, v27);
              v28 = v23 - v27;
              if ((v28 < 0) ^ v22 | (v28 == 0))
                v28 = 0;
              *(_QWORD *)a4 = v28;
            }
            v29 = v7[65];
            v30 = (uint64_t)v21 <= (uint64_t)v29;
            v31 = v21 - v29;
            v32 = v30 ? 0 : v31;
            v33 = *((_DWORD *)v7 + 11);
            if (v33)
            {
              v34 = v33 * v17;
            }
            else
            {
              v35 = v7[15];
              if (v35)
                v36 = v35[3];
              else
                v36 = 0;
              v34 = 0;
              if (v35)
                goto LABEL_71;
              while (v36 > (uint64_t)v35 - v17)
              {
                CompressedPacketTable::operator[]((uint64_t)v38, v18, --v36);
                v34 += v39;
                v35 = v7[15];
                if (v35)
LABEL_71:
                  v35 = (_QWORD *)v35[3];
              }
            }
            v37 = v34 - v32;
            if (v34 <= v32)
              v37 = 0;
            if (v37 <= 0xFFFFFFFFLL)
            {
              result = 0;
              *((_DWORD *)a4 + 3) = v37;
              return result;
            }
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t OggAudioFile::GetNumPackets(OggAudioFile *this)
{
  uint64_t v2;
  uint64_t result;
  int v4;

  if (*((_BYTE *)this + 504)
    || (v4 = (*(uint64_t (**)(OggAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1), result = 0, !v4))
  {
    v2 = *((_QWORD *)this + 15);
    if (v2)
      return *(_QWORD *)(v2 + 24);
    else
      return 0;
  }
  return result;
}

uint64_t OggAudioFile::GetBitRate(OggAudioFile *this, unsigned int *a2)
{
  uint64_t v4;
  uint64_t result;
  double v7;

  if (!*((_BYTE *)this + 504))
    return AudioFileObject::GetBitRate(this, a2);
  v4 = (*(uint64_t (**)(OggAudioFile *))(*(_QWORD *)this + 224))(this);
  v7 = 0.0;
  if ((*(unsigned int (**)(OggAudioFile *, double *))(*(_QWORD *)this + 544))(this, &v7))
    return AudioFileObject::GetBitRate(this, a2);
  if (v7 <= 0.0 || v4 <= 0)
    return AudioFileObject::GetBitRate(this, a2);
  result = 0;
  *a2 = ((double)(8 * v4) / v7);
  return result;
}

uint64_t OggAudioFile::GetMagicCookieDataSize(OggAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3)
    *a3 = 0;
  if (a2)
    *a2 = *((_DWORD *)this + 54) - *((_DWORD *)this + 52);
  return 0;
}

uint64_t OggAudioFile::GetMagicCookieData(OggAudioFile *this, unsigned int *a2, void *a3)
{
  uint64_t v3;
  void *v6;
  size_t v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = 561211770;
  if (a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v9, *((const void **)this + 26), *((_QWORD *)this + 27), *((_QWORD *)this + 27) - *((_QWORD *)this + 26));
    v6 = v9;
    v7 = v10 - (_QWORD)v9;
    if (v10 - (uint64_t)v9 <= (unint64_t)*a2)
    {
      *a2 = v7;
      memcpy(a3, v6, v7);
      v3 = 0;
    }
    if (v6)
      operator delete(v6);
  }
  return v3;
}

uint64_t OggAudioFile::GetChannelLayoutSize(OggAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3)
    *a3 = 0;
  if (a2)
    *a2 = *((_DWORD *)this + 60) - *((_DWORD *)this + 58);
  return 0;
}

uint64_t OggAudioFile::GetChannelLayout(OggAudioFile *this, unsigned int *a2, AudioChannelLayout *a3)
{
  uint64_t v3;
  void *v6;
  size_t v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = 561211770;
  if (a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v9, *((const void **)this + 29), *((_QWORD *)this + 30), *((_QWORD *)this + 30) - *((_QWORD *)this + 29));
    v6 = v9;
    v7 = v10 - (_QWORD)v9;
    if (v10 - (uint64_t)v9 <= (unint64_t)*a2)
    {
      *a2 = v7;
      memcpy(a3, v6, v7);
      v3 = 0;
    }
    if (v6)
      operator delete(v6);
  }
  return v3;
}

uint64_t OggAudioFile::GetInfoDictionary(const __CFString **this, CACFDictionary *a2)
{
  AudioFileObject *v4;
  double v6;

  VorbisComment::FillInfoDictionary(this + 32, a2);
  v6 = 0.0;
  v4 = (AudioFileObject *)((uint64_t (*)(const __CFString **, double *))(*this)[17].isa)(this, &v6);
  if (!(_DWORD)v4)
    AudioFileObject::AddDurationToInfoDictionary(v4, a2, &v6);
  return 0;
}

uint64_t OggAudioFile::GetEstimatedDuration(OggAudioFile *this, double *a2)
{
  uint64_t result;
  double v5;
  uint64_t v6;

  result = OggAudioFile::GetLastPageGranulePosition(this);
  v5 = 0.0;
  if (!(_DWORD)result)
  {
    v6 = *((_QWORD *)this + 66);
    if ((v6 & 0x8000000000000000) == 0)
      v5 = (double)(v6 - (*((_QWORD *)this + 64) & ~(*((uint64_t *)this + 64) >> 63))) / *((double *)this + 3);
  }
  *a2 = v5;
  return result;
}

BOOL OggAudioFile::IsDataFormatSupported(OggAudioFile *this, const AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID;

  mFormatID = a2->mFormatID;
  return mFormatID == 1718378851 || mFormatID == 1869641075 || mFormatID == 1987015266;
}

uint64_t OggAudioFile::ScanForPackets(OggAudioFile *this, uint64_t a2, DataSource *a3, char a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  if (*((_BYTE *)this + 504))
    return 0;
  v7 = *((_QWORD *)this + 15);
  if (!v7)
  {
    v7 = operator new();
    v8 = *((_DWORD *)this + 11);
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_DWORD *)(v7 + 32) = v8;
    *((_QWORD *)this + 15) = v7;
  }
  v9 = *(_QWORD *)(v7 + 24);
  if (!v9)
  {
    (*(void (**)(OggAudioFile *, _QWORD, DataSource *))(*(_QWORD *)this + 648))(this, 0, a3);
    v9 = 0;
  }
  if (a2 == -1)
    a2 = 0x7FFFFFFFFFFFFFFFLL;
  if (v9 >= a2)
    return 0;
  do
  {
    result = (*(uint64_t (**)(OggAudioFile *))(*(_QWORD *)this + 736))(this);
    v11 = *((_QWORD *)this + 15);
    if (v11)
      v11 = *(_QWORD *)(v11 + 24);
  }
  while (v11 < a2 && !(_DWORD)result);
  if ((_DWORD)result == -39)
  {
    result = 0;
    *((_BYTE *)this + 504) = a4;
  }
  return result;
}

uint64_t OggAudioFile::ParseAudioFile(OggAudioFile *this)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  __int128 v6;
  void *v7;
  void *v8;
  int v9;
  PacketDurationParser *v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  char *begin;
  std::vector<char>::pointer end;
  char *v32;
  char *v33;
  unsigned int v34;
  const unsigned __int8 *v35;
  const AudioStreamPacketDescription *v36;
  unsigned int *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  unsigned int v43;
  const AudioStreamPacketDescription *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _BYTE *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  size_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v76;
  char v77[8];
  unsigned int v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82[8];
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  void *__p[3];
  std::vector<char> v87;
  _BYTE v88[4];
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  _BYTE v93[19];
  _BYTE buf[32];
  uint64_t v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v92 = 0;
  *(_QWORD *)v93 = 0;
  *(_DWORD *)&v93[15] = 0;
  *(_QWORD *)&v93[8] = 0;
  bzero(v88, 0x410uLL);
  memset(&v87, 0, sizeof(v87));
  memset(__p, 0, sizeof(__p));
  v85 = 0;
  v2 = (uint64_t *)((char *)this + 360);
  v3 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), (char *)this + 360);
  if (!(_DWORD)v3)
  {
    if (*((_DWORD *)this + 145))
    {
LABEL_6:
      if (!*((_BYTE *)this + 352))
      {
        v3 = 1718449215;
        goto LABEL_124;
      }
      v6 = *((_OWORD *)this + 10);
      *(_OWORD *)buf = *((_OWORD *)this + 9);
      *(_OWORD *)&buf[16] = v6;
      v95 = *((_QWORD *)this + 22);
      (*(void (**)(OggAudioFile *, _BYTE *))(*(_QWORD *)this + 176))(this, buf);
      *(_QWORD *)v82 = 0;
      v83 = 0;
      v84 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v82, *((const void **)this + 29), *((_QWORD *)this + 30), *((_QWORD *)this + 30) - *((_QWORD *)this + 29));
      v7 = *(void **)v82;
      (*(void (**)(OggAudioFile *, _QWORD, _QWORD))(*(_QWORD *)this + 416))(this, (v83 - *(_DWORD *)v82), *(_QWORD *)v82);
      v79 = 0;
      v80 = 0;
      v81 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v79, *((const void **)this + 26), *((_QWORD *)this + 27), *((_QWORD *)this + 27) - *((_QWORD *)this + 26));
      v8 = v79;
      v9 = v80 - (_DWORD)v79;
      (*(void (**)(OggAudioFile *, _QWORD, void *))(*(_QWORD *)this + 344))(this, (v80 - (_DWORD)v79), v79);
      if (!*(_DWORD *)&buf[20])
      {
        v10 = (PacketDurationParser *)operator new();
        PacketDurationParser::PacketDurationParser(v10, (const AudioStreamBasicDescription *)((char *)this + 24), v8, v9);
        v11 = *((_QWORD *)this + 73);
        *((_QWORD *)this + 73) = v10;
        if (v11)
        {
          MEMORY[0x193FFE460](v11, 0x1000C40BD41A4CDLL);
          v10 = (PacketDurationParser *)*((_QWORD *)this + 73);
        }
        if (!*((_BYTE *)v10 + 40))
        {
          *((_QWORD *)this + 73) = 0;
          MEMORY[0x193FFE460](v10, 0x1000C40BD41A4CDLL);
        }
      }
      v12 = (const void *)*((_QWORD *)this + 67);
      v13 = (const void *)*((_QWORD *)this + 32);
      *((_QWORD *)this + 67) = v13;
      if (v13)
        CFRetain(v13);
      if (v12)
        CFRelease(v12);
      v14 = *((_QWORD *)this + 33);
      v15 = *((_QWORD *)this + 34);
      v16 = (v15 - v14) >> 4;
      v17 = *((_QWORD *)this + 68);
      if (v16 <= (*((_QWORD *)this + 70) - v17) >> 4)
      {
        v63 = *((_QWORD *)this + 69);
        v64 = (v63 - v17) >> 4;
        if (v64 >= v16)
        {
          if (v14 != v15)
          {
            do
            {
              std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>::operator=[abi:ne180100](v17, v14);
              v14 += 16;
              v17 += 16;
            }
            while (v14 != v15);
            v63 = *((_QWORD *)this + 69);
          }
          while (v63 != v17)
          {
            v63 -= 16;
            std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>,0>(v63);
          }
          *((_QWORD *)this + 69) = v17;
        }
        else
        {
          v65 = v14 + 16 * v64;
          if (v63 != v17)
          {
            v66 = 16 * v64;
            do
            {
              std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>::operator=[abi:ne180100](v17, v14);
              v14 += 16;
              v17 += 16;
              v66 -= 16;
            }
            while (v66);
            v17 = *((_QWORD *)this + 69);
          }
          v67 = (_QWORD *)v17;
          if (v65 != v15)
          {
            v67 = (_QWORD *)v17;
            do
            {
              v68 = std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>::pair[abi:ne180100](v67, v65);
              v65 += 16;
              v67 = v68 + 2;
            }
            while (v65 != v15);
          }
          *((_QWORD *)this + 69) = v67;
        }
      }
      else
      {
        std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__vdeallocate((void **)this + 68);
        if (v15 - v14 < 0)
          goto LABEL_137;
        v18 = *((_QWORD *)this + 70) - *((_QWORD *)this + 68);
        v19 = v18 >> 3;
        if (v18 >> 3 <= v16)
          v19 = (v15 - v14) >> 4;
        v20 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v19;
        if (v20 >> 60)
LABEL_137:
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v21 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v20);
        *((_QWORD *)this + 68) = v21;
        *((_QWORD *)this + 69) = v21;
        *((_QWORD *)this + 70) = &v21[2 * v22];
        while (v14 != v15)
        {
          v23 = std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>::pair[abi:ne180100](v21, v14);
          v14 += 16;
          v21 = v23 + 2;
        }
        *((_QWORD *)this + 69) = v21;
      }
      (*(void (**)(OggAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, 2, 0, 1);
      v69 = *((_QWORD *)this + 51);
      if (*((_QWORD *)this + 52) == v69)
        goto LABEL_117;
      v70 = (uint64_t *)*((_QWORD *)this + 15);
      if (v70)
        v71 = v70[3];
      else
        v71 = 0;
      v72 = *(unsigned int *)(v69 + 40);
      if (v71 >= v72)
      {
        if (*(_DWORD *)&buf[20])
        {
          v73 = (*(_DWORD *)&buf[20] * v72);
          goto LABEL_116;
        }
        if ((_DWORD)v72)
        {
          v74 = 0;
          v73 = 0;
          do
          {
            if (v74 || *(_DWORD *)&buf[8] != 1987015266)
            {
              CompressedPacketTable::operator[]((uint64_t)v77, v70, v74);
              v73 += v78;
              v69 = *((_QWORD *)this + 51);
            }
            ++v74;
          }
          while (v74 < *(unsigned int *)(v69 + 40));
          goto LABEL_116;
        }
      }
      v73 = 0;
LABEL_116:
      *((_QWORD *)this + 64) = *(_QWORD *)(v69 + 8) - v73;
LABEL_117:
      if ((*((_QWORD *)this + 43) & 0x8000000000000000) == 0)
        (*(void (**)(OggAudioFile *))(*(_QWORD *)this + 248))(this);
      if (v8)
        operator delete(v8);
      if (v7)
        operator delete(v7);
      v3 = 0;
      goto LABEL_124;
    }
    v24 = 0;
    while (1)
    {
      if (v24 >= *v2)
        goto LABEL_6;
      v25 = OggAudioFile::ParsePage((uint64_t)this, v24, (uint64_t)&v92, (Ogg::PagePacketInfo *)v88);
      if (v25 == -39)
        v3 = 1685348671;
      else
        v3 = v25;
      if ((_DWORD)v3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_124;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "OggAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 399;
        v4 = MEMORY[0x1E0C81028];
        v5 = "%25s:%-5d  Page parsing failed";
        goto LABEL_4;
      }
      v26 = v93[18];
      v27 = v89;
      if ((std::vector<char>::pointer)v89 <= (std::vector<char>::pointer)(v87.__end_ - v87.__begin_))
      {
        if ((std::vector<char>::pointer)v89 < (std::vector<char>::pointer)(v87.__end_ - v87.__begin_))
          v87.__end_ = &v87.__begin_[v89];
      }
      else
      {
        std::vector<unsigned char>::__append(&v87, v89 - (unint64_t)(v87.__end_ - v87.__begin_));
      }
      v28 = v24 + v26 + 27;
      if (!*((_BYTE *)this + 568) || *((_DWORD *)this + 94) == *(_DWORD *)&v93[6])
        break;
LABEL_81:
      v24 = v28 + v89;
      *((_QWORD *)this + 46) = v24;
      *(_QWORD *)v93 = 0;
      *(_QWORD *)&v93[8] = 0;
      v92 = 0;
      *(_DWORD *)&v93[15] = 0;
      bzero(v88, 0x410uLL);
      if (*((_DWORD *)this + 145))
        goto LABEL_6;
    }
    v29 = v90;
    begin = v87.__begin_;
    end = v87.__end_;
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, std::vector<char>::pointer, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v28, (LODWORD(v87.__end_) - LODWORD(v87.__begin_)), v87.__begin_, &v85);
    if ((_DWORD)v3)
      goto LABEL_130;
    if (v85 < v27)
    {
      v3 = 0;
LABEL_130:
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_124;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "OggAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 411;
      v4 = MEMORY[0x1E0C81028];
      v5 = "%25s:%-5d  Read of packet data failed";
      goto LABEL_4;
    }
    if (v29)
    {
      v32 = (char *)*((_QWORD *)this + 59);
      v33 = (char *)*((_QWORD *)this + 60);
      if (v33 == v32)
      {
        v38 = 0;
      }
      else
      {
        if ((v92 & 0x10000000000) == 0)
        {
          v3 = 1685348671;
          goto LABEL_124;
        }
        v34 = Ogg::PagePacketInfo::operator[]((uint64_t)v88, 0);
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)this + 472, v33, begin, &begin[v34], v34);
        *(_QWORD *)v82 = 0;
        v83 = 0;
        v35 = (const unsigned __int8 *)*((_QWORD *)this + 59);
        HIDWORD(v83) = *((_DWORD *)this + 120) - (_DWORD)v35;
        v3 = OggAudioFile::ParseHeaderPackets(this, *(__int32 *)&v93[6], 1u, v35, v82, v36, v37);
        if ((_DWORD)v3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_124;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "OggAudioFile.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 428;
          v4 = MEMORY[0x1E0C81028];
          v5 = "%25s:%-5d  ParseHeaderPackets failed";
          goto LABEL_4;
        }
        *((_QWORD *)this + 60) = *((_QWORD *)this + 59);
        if (!--v29)
          goto LABEL_57;
        v38 = 1;
      }
      v39 = v29;
      std::vector<AudioStreamPacketDescription>::resize((char **)__p, v29);
      v76 = v28;
      v40 = 0;
      v41 = (unsigned __int8 *)__p[0];
      v42 = __p[0];
      do
      {
        if (v40)
        {
          *v42 = *(v42 - 2) + *((unsigned int *)v42 - 1);
        }
        else
        {
          if (v33 == v32)
            v43 = 0;
          else
            v43 = Ogg::PagePacketInfo::operator[]((uint64_t)v88, 0);
          *(_QWORD *)v41 = v43;
        }
        *((_DWORD *)v42 + 3) = Ogg::PagePacketInfo::operator[]((uint64_t)v88, v38 + (int)v40++);
        v42 += 2;
      }
      while (v39 != v40);
      v28 = v76;
      v3 = OggAudioFile::ParseHeaderPackets(this, *(__int32 *)&v93[6], v39, (const unsigned __int8 *)begin, v41, v44, v45);
      if ((_DWORD)v3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_124;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "OggAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 447;
        v4 = MEMORY[0x1E0C81028];
        v5 = "%25s:%-5d  ParseHeaderPackets failed";
        goto LABEL_4;
      }
    }
LABEL_57:
    v46 = v91;
    v2 = (uint64_t *)((char *)this + 360);
    if (v91)
    {
      v48 = (char *)*((_QWORD *)this + 60);
      v47 = *((_QWORD *)this + 61);
      if (v47 - (uint64_t)v48 >= v91)
      {
        if (end != &end[-v91])
          memmove(*((void **)this + 60), &end[-v91], v91);
        *((_QWORD *)this + 60) = &v48[v46];
        v2 = (uint64_t *)((char *)this + 360);
      }
      else
      {
        v49 = v28;
        v50 = (_BYTE *)*((_QWORD *)this + 59);
        v51 = (char *)(v48 - v50);
        v52 = v48 - v50 + v91;
        if (v52 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v53 = v47 - (_QWORD)v50;
        if (2 * v53 > v52)
          v52 = 2 * v53;
        if (v53 >= 0x3FFFFFFFFFFFFFFFLL)
          v54 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v54 = v52;
        if (v54)
          v55 = (char *)operator new(v54);
        else
          v55 = 0;
        v56 = -v46;
        v57 = &v51[(_QWORD)v55];
        v58 = &v51[(_QWORD)v55 + v46];
        v59 = (char *)(v48 - v50);
        do
          (v59++)[(_QWORD)v55] = end[v56++];
        while (v56);
        if (v48 == v50)
        {
          v60 = v48;
        }
        else
        {
          do
          {
            v51[(_QWORD)v55 - 1] = v51[(_QWORD)(v50 - 1)];
            --v51;
          }
          while (v51);
          v60 = (char *)*((_QWORD *)this + 60);
          v57 = v55;
        }
        v61 = v60 - v48;
        v28 = v49;
        if (v60 != v48)
          memmove(v58, v48, v60 - v48);
        v62 = (void *)*((_QWORD *)this + 59);
        *((_QWORD *)this + 59) = v57;
        *((_QWORD *)this + 60) = &v58[v61];
        *((_QWORD *)this + 61) = &v55[v54];
        v2 = (uint64_t *)((char *)this + 360);
        if (v62)
          operator delete(v62);
      }
    }
    goto LABEL_81;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "OggAudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 391;
    v4 = MEMORY[0x1E0C81028];
    v5 = "%25s:%-5d  Can't get file length";
LABEL_4:
    _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_ERROR, v5, buf, 0x12u);
  }
LABEL_124:
  if (__p[0])
    operator delete(__p[0]);
  if (v87.__begin_)
    operator delete(v87.__begin_);
  return v3;
}

void sub_18F0C1018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  MEMORY[0x193FFE460](v28, 0x1000C40BD41A4CDLL);
  if (v27)
    operator delete(v27);
  if (v26)
    operator delete(v26);
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(a1);
}

uint64_t OggAudioFile::NextPage(OggAudioFile *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  SInt64 v46;
  unsigned int v47;
  UInt32 v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  UInt32 v60;
  PacketDurationParser *v61;
  _BYTE *v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  AudioStreamPacketDescription v72;
  _BYTE v73[4];
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  _BYTE v77[27];

  if (*((_BYTE *)this + 504))
    return 0;
  *(_QWORD *)v77 = 0;
  *(_QWORD *)&v77[8] = 0;
  *(_DWORD *)&v77[23] = 0;
  *(_QWORD *)&v77[16] = 0;
  bzero(v73, 0x410uLL);
  v3 = *((_QWORD *)this + 46);
  v1 = OggAudioFile::ParsePage((uint64_t)this, v3, (uint64_t)v77, (Ogg::PagePacketInfo *)v73);
  if ((_DWORD)v1)
    return v1;
  if (*((_DWORD *)this + 94) != *(_DWORD *)&v77[14])
  {
    v8 = v74;
    v9 = v3 + v77[26] + 27;
LABEL_72:
    v1 = 0;
    *((_QWORD *)this + 46) = v9 + v8;
    return v1;
  }
  v72.mStartOffset = 0;
  *(_QWORD *)&v72.mVariableFramesInPacket = 0;
  v5 = *((_QWORD *)this + 51);
  v4 = *((_QWORD *)this + 52);
  v6 = (int *)*((_QWORD *)this + 73);
  if (v6)
  {
    if (v6[1])
    {
      v7 = 0;
    }
    else
    {
      v10 = *v6;
      if (v10 == 1869641075)
        v7 = 2;
      else
        v7 = v10 == 1987015266;
    }
    std::vector<unsigned char>::reserve((unint64_t *)this + 54, v7);
  }
  else
  {
    v7 = 0;
  }
  v11 = v75;
  if (v75 && (*((_QWORD *)this + 57) & 0x8000000000000000) == 0 && *((_DWORD *)this + 116))
  {
    if ((v77[5] & 1) == 0)
      return 1685348671;
    v60 = *((_DWORD *)this + 116) + Ogg::PagePacketInfo::operator[]((uint64_t)v73, 0);
    *((_DWORD *)this + 116) = v60;
    v72.mStartOffset = *((_QWORD *)this + 57);
    v72.mDataByteSize = v60;
    v61 = (PacketDurationParser *)*((_QWORD *)this + 73);
    if (v61)
    {
      v62 = (_BYTE *)*((_QWORD *)this + 54);
      v63 = *((_QWORD *)this + 55) - (_QWORD)v62;
      if (v63 < v7)
      {
        v64 = v11;
        LODWORD(v65) = v7 - v63;
        v66 = Ogg::PagePacketInfo::operator[]((uint64_t)v73, 0);
        if (v66 >= (int)v7 - (int)v63)
          v65 = v65;
        else
          v65 = v66;
        v71 = 0;
        std::vector<unsigned char>::resize((std::vector<char> *)this + 18, (v65 + v63));
        v67 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                  + 48))(*((_QWORD *)this + 13), 0, v3 + v77[26] + 27, v65, *((_QWORD *)this + 54) + v63, &v71);
        if (v71 >= v65)
          v1 = v67;
        else
          v1 = 4294967257;
        if ((_DWORD)v1)
          return v1;
        v61 = (PacketDurationParser *)*((_QWORD *)this + 73);
        v62 = (_BYTE *)*((_QWORD *)this + 54);
        v11 = v64;
      }
      v72.mVariableFramesInPacket = PacketDurationParser::FramesInPacket(v61, v62, v7);
      *((_QWORD *)this + 55) = *((_QWORD *)this + 54);
    }
    else
    {
      v72.mVariableFramesInPacket = 0;
    }
    AudioFileObject::AppendPacket(this, &v72);
    *((_DWORD *)this + 116) = 0;
    *((_QWORD *)this + 57) = -1;
    v12 = 1;
  }
  else
  {
    v12 = 0;
  }
  v13 = v77[5];
  v14 = *(_QWORD *)&v77[6];
  v15 = v3 + v77[26] + 27;
  v16 = v74;
  if (v4 == v5)
  {
    v19 = 0;
    v17 = 0;
    v23 = v76;
    *((_QWORD *)this + 9) = v15;
  }
  else
  {
    v17 = 0;
    v18 = *((_QWORD *)this + 51) + 8 * ((v4 - v5) >> 3);
    v19 = *(_QWORD *)(v18 - 24) + *(unsigned int *)(v18 - 16);
    if ((v77[5] & 1) != 0 && v11)
    {
      v20 = v3 + v77[26] + 27;
      v21 = v74;
      v22 = Ogg::PagePacketInfo::operator[]((uint64_t)v73, 0);
      v16 = v21;
      v15 = v20;
      v17 = v22;
    }
    v23 = v76;
  }
  v24 = *((_QWORD *)this + 52);
  v25 = *((_QWORD *)this + 53);
  if (v24 >= v25)
  {
    v27 = *((_QWORD *)this + 51);
    v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v24 - v27) >> 3);
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) > 0x492492492492492)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v30 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25 - v27) >> 3);
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0x249249249249249)
      v31 = 0x492492492492492;
    else
      v31 = v29;
    if (v31)
    {
      v69 = v13;
      v68 = v19;
      v32 = v14;
      v33 = v11;
      v34 = v15;
      v35 = v16;
      v36 = v23;
      v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<OggAudioPage>>(v31);
      v23 = v36;
      v16 = v35;
      v15 = v34;
      v11 = v33;
      v14 = v32;
      v19 = v68;
      v13 = v69;
    }
    else
    {
      v37 = 0;
    }
    v38 = v31 + 56 * v28;
    v39 = v31 + 56 * v37;
    *(_DWORD *)v38 = v13;
    *(_DWORD *)(v38 + 4) = 0;
    *(_QWORD *)(v38 + 8) = v14;
    *(_QWORD *)(v38 + 16) = v15;
    *(_DWORD *)(v38 + 24) = v16;
    *(_DWORD *)(v38 + 28) = 0;
    *(_QWORD *)(v38 + 32) = v19;
    *(_DWORD *)(v38 + 40) = v11;
    *(_DWORD *)(v38 + 44) = v17;
    *(_DWORD *)(v38 + 48) = v23;
    *(_DWORD *)(v38 + 52) = 0;
    v26 = v38 + 56;
    v41 = (char *)*((_QWORD *)this + 51);
    v40 = (char *)*((_QWORD *)this + 52);
    if (v40 != v41)
    {
      do
      {
        v42 = *(_OWORD *)(v40 - 56);
        v43 = *(_OWORD *)(v40 - 40);
        v44 = *(_OWORD *)(v40 - 24);
        *(_QWORD *)(v38 - 8) = *((_QWORD *)v40 - 1);
        *(_OWORD *)(v38 - 24) = v44;
        *(_OWORD *)(v38 - 40) = v43;
        *(_OWORD *)(v38 - 56) = v42;
        v38 -= 56;
        v40 -= 56;
      }
      while (v40 != v41);
      v40 = (char *)*((_QWORD *)this + 51);
    }
    *((_QWORD *)this + 51) = v38;
    *((_QWORD *)this + 52) = v26;
    *((_QWORD *)this + 53) = v39;
    if (v40)
    {
      v45 = v15;
      operator delete(v40);
      v15 = v45;
    }
  }
  else
  {
    *(_DWORD *)v24 = v13;
    *(_DWORD *)(v24 + 4) = 0;
    *(_QWORD *)(v24 + 8) = v14;
    *(_QWORD *)(v24 + 16) = v15;
    *(_DWORD *)(v24 + 24) = v16;
    *(_DWORD *)(v24 + 28) = 0;
    *(_QWORD *)(v24 + 32) = v19;
    *(_DWORD *)(v24 + 40) = v11;
    *(_DWORD *)(v24 + 44) = v17;
    v26 = v24 + 56;
    *(_DWORD *)(v24 + 48) = v23;
    *(_DWORD *)(v24 + 52) = 0;
  }
  *((_QWORD *)this + 52) = v26;
  v70 = v15;
  v46 = v15 - *((_QWORD *)this + 9);
  v72.mStartOffset = v46;
  if (v12)
  {
    v46 += Ogg::PagePacketInfo::operator[]((uint64_t)v73, 0);
    v72.mStartOffset = v46;
  }
  v47 = v75;
  if (v12 < v75)
  {
    v1 = 1685348671;
    do
    {
      v48 = Ogg::PagePacketInfo::operator[]((uint64_t)v73, v12);
      v72.mDataByteSize = v48;
      if (*((_QWORD *)this + 73))
      {
        v71 = 0;
        v49 = *((_QWORD *)this + 54);
        v50 = *((_QWORD *)this + 55) - v49;
        if (v7 <= v50)
        {
          if (v7 < v50)
            *((_QWORD *)this + 55) = v49 + v7;
        }
        else
        {
          std::vector<unsigned char>::__append((std::vector<char> *)this + 18, v7 - v50);
          v49 = *((_QWORD *)this + 54);
        }
        v51 = (*(uint64_t (**)(_QWORD, _QWORD, SInt64, uint64_t, uint64_t, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                  + 48))(*((_QWORD *)this + 13), 0, *((_QWORD *)this + 9) + v46, v7, v49, &v71);
        if (v71 >= v7)
          v52 = v51;
        else
          v52 = 4294967257;
        if ((_DWORD)v52)
          return v52;
        v72.mVariableFramesInPacket = PacketDurationParser::FramesInPacket(*((PacketDurationParser **)this + 73), *((_BYTE **)this + 54), v7);
        if (!v72.mVariableFramesInPacket)
          return v1;
        *((_QWORD *)this + 55) = *((_QWORD *)this + 54);
      }
      AudioFileObject::AppendPacket(this, &v72);
      v46 += v48;
      v72.mStartOffset = v46;
      ++v12;
    }
    while (v47 != v12);
  }
  v53 = v76;
  if (!v76)
    goto LABEL_71;
  if (*((_QWORD *)this + 57) == -1)
  {
    v54 = 0;
    *((_QWORD *)this + 57) = v46;
    ++*((_QWORD *)this + 62);
  }
  else
  {
    v54 = *((_DWORD *)this + 116);
  }
  if ((*((_DWORD *)this + 116) = v54 + v53, !*((_QWORD *)this + 73))
    || (v55 = *((_QWORD *)this + 55) - *((_QWORD *)this + 54), v55 >= v7)
    || (v53 >= (int)v7 - (int)v55 ? (v56 = (v7 - v55)) : (v56 = v53),
        (v71 = 0,
         std::vector<unsigned char>::resize((std::vector<char> *)this + 18, (v56 + v55)),
         v57 = (*(uint64_t (**)(_QWORD, _QWORD, SInt64, uint64_t, _QWORD, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                  + 48))(*((_QWORD *)this + 13), 0, *((_QWORD *)this + 9) + v46, v56, *((_QWORD *)this + 54) + v55, &v71), v71 >= v56)? (v1 = v57): (v1 = 4294967257), !(_DWORD)v1))
  {
LABEL_71:
    v58 = (*(uint64_t (**)(OggAudioFile *))(*(_QWORD *)this + 224))(this);
    v8 = v74;
    (*(void (**)(OggAudioFile *, uint64_t))(*(_QWORD *)this + 232))(this, v58 + v74);
    v9 = v70;
    goto LABEL_72;
  }
  return v1;
}

uint64_t OggAudioFile::PageForPacket(OggAudioFile *this, int64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  _DWORD *v13;
  char v14;

  v3 = *((_QWORD *)this + 51);
  v2 = *((_QWORD *)this + 52);
  v4 = v2 - v3;
  if (v2 == v3)
  {
    if ((unint64_t)(v4 + 55) >= 0x6F)
      return 0;
    else
      return -1;
  }
  else
  {
    v5 = 0;
    v6 = v4 / 56;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    v8 = (unsigned int *)(v3 + 40);
    while (*((_QWORD *)v8 - 1) + *v8 <= a2)
    {
      v8 += 14;
      if (v7 == ++v5)
      {
        v5 = v7;
        break;
      }
    }
    if (v5 == v6)
    {
      return -1;
    }
    else if (v5)
    {
      v10 = v3 + 56 * v5;
      v11 = *(_QWORD *)(v10 + 32);
      if (v11 >= a2 && (v11 != a2 || (*(_BYTE *)v10 & 1) != 0))
      {
        v12 = v5 - 1;
        v13 = (_DWORD *)(v3 + 56 * v5 - 16);
        do
        {
          result = v12;
          if (!v12)
            break;
          --v5;
          if (*v13)
            return v5;
          --v12;
          v14 = *((_BYTE *)v13 - 40);
          v13 -= 14;
        }
        while ((v14 & 1) != 0);
      }
      else
      {
        return v5;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t OggAudioFile::CreatePacketTable(OggAudioFile *this)
{
  return (*(uint64_t (**)(OggAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1);
}

uint64_t OggAudioFile::ParsePage(uint64_t a1, uint64_t a2, uint64_t a3, Ogg::PagePacketInfo *a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 v12[255];
  unsigned int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  LODWORD(result) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, unsigned int *))(**(_QWORD **)(a1 + 104) + 48))(*(_QWORD *)(a1 + 104), 0, a2, 27, &v13, &v11);
  if (v11 >= 0x1B)
    result = result;
  else
    result = 4294967257;
  if (!(_DWORD)result)
  {
    v9 = v13;
    *(_DWORD *)a3 = bswap32(v13);
    result = 1685348671;
    if (v9 == 1399285583)
    {
      *(_WORD *)(a3 + 4) = v14;
      *(_QWORD *)(a3 + 6) = v15;
      *(_QWORD *)(a3 + 14) = v16;
      *(_DWORD *)(a3 + 22) = v17;
      *(_BYTE *)(a3 + 26) = v18;
      LODWORD(result) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 104) + 48))(*(_QWORD *)(a1 + 104), 0, a2 + 27);
      v10 = *(unsigned __int8 *)(a3 + 26);
      if (v11 >= v10)
        result = result;
      else
        result = 4294967257;
      if (!(_DWORD)result)
      {
        if (Ogg::PagePacketInfo::Deserialize(a4, v12, v10))
          return 1685348671;
        else
          return 0;
      }
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<OggAudioPage>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a1);
}

uint64_t OggAudioFile::ParseHeaderPackets(OggAudioFile *this, __int32 a2, unsigned int a3, const unsigned __int8 *a4, const unsigned __int8 *a5, const AudioStreamPacketDescription *a6, unsigned int *a7)
{
  unsigned int v10;
  __int32 *v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  unint64_t v16;
  _DWORD *v17;
  __int32 *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  __int32 *v25;
  unint64_t v26;
  __int32 v27;

  if (*((_BYTE *)this + 568) && *((_DWORD *)this + 94) != a2)
    return 0;
  Ogg::File::ParseHeaderPackets((OggAudioFile *)((char *)this + 144), a3, *((unsigned int *)this + 144), a4, (uint64_t)a5, (const AudioStreamPacketDescription *)((char *)this + 572), a7);
  if (*((_BYTE *)this + 568))
    goto LABEL_6;
  if (*((_DWORD *)this + 143))
  {
    *((_BYTE *)this + 568) = 1;
    *((_DWORD *)this + 94) = a2;
LABEL_6:
    v10 = *((_DWORD *)this + 144) + a3;
    *((_DWORD *)this + 144) = v10;
    goto LABEL_7;
  }
  v12 = (__int32 *)*((_QWORD *)this + 49);
  v13 = wmemchr(*((__int32 **)this + 48), a2, ((uint64_t)v12 - *((_QWORD *)this + 48)) >> 2);
  if (v13)
    v14 = v13;
  else
    v14 = v12;
  v15 = (__int32 *)*((_QWORD *)this + 49);
  if (v14 != v15)
    return 1685348671;
  v16 = *((_QWORD *)this + 50);
  if ((unint64_t)v14 >= v16)
  {
    v18 = (__int32 *)*((_QWORD *)this + 48);
    v19 = v15 - v18;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v21 = v16 - (_QWORD)v18;
    if (v21 >> 1 > v20)
      v20 = v21 >> 1;
    v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL;
    v23 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v22)
      v23 = v20;
    if (v23)
    {
      v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v23);
      v18 = (__int32 *)*((_QWORD *)this + 48);
      v14 = (__int32 *)*((_QWORD *)this + 49);
    }
    else
    {
      v24 = 0;
    }
    v25 = (__int32 *)(v23 + 4 * v19);
    v26 = v23 + 4 * v24;
    *v25 = a2;
    v17 = v25 + 1;
    while (v14 != v18)
    {
      v27 = *--v14;
      *--v25 = v27;
    }
    *((_QWORD *)this + 48) = v25;
    *((_QWORD *)this + 49) = v17;
    *((_QWORD *)this + 50) = v26;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v14 = a2;
    v17 = v14 + 1;
  }
  *((_QWORD *)this + 49) = v17;
  v10 = *((_DWORD *)this + 144);
LABEL_7:
  *((_DWORD *)this + 145) = *((_DWORD *)this + 143) - 1 < v10;
  if (v10 < 3 || *((_BYTE *)this + 352))
    return 0;
  return 1685348671;
}

uint64_t std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v4 = *(const void **)a1;
  v5 = *(const void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v5)
    CFRetain(v5);
  if (v4)
    CFRelease(v4);
  v6 = *(const void **)(a1 + 8);
  v7 = *(const void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  if (v7)
    CFRetain(v7);
  if (v6)
    CFRelease(v6);
  return a1;
}

_QWORD *std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>::pair[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  CFTypeRef v4;
  const void *v5;

  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  *a1 = v4;
  v5 = *(const void **)(a2 + 8);
  if (v5)
    CFRetain(v5);
  a1[1] = v5;
  return a1;
}

uint64_t OggAudioFile::GetLastPageGranulePosition(OggAudioFile *this)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((*((_QWORD *)this + 66) & 0x8000000000000000) == 0)
    return 0;
  v4 = (*(uint64_t (**)(OggAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1);
  if (!(_DWORD)v4)
  {
    *(_OWORD *)((char *)this + 520) = 0u;
    if (*((_BYTE *)this + 504))
    {
      v5 = *((_QWORD *)this + 51);
      v6 = *((_QWORD *)this + 52) - v5;
      if (v6)
      {
        v7 = v6 / 56;
        v8 = (uint64_t *)(v5 + 56 * (v6 / 56) - 48);
        do
        {
          v9 = v7 - 1;
          v11 = *v8;
          v8 -= 7;
          v10 = v11;
          if ((v11 & 0x8000000000000000) == 0)
            break;
          --v7;
        }
        while (v7);
        if ((v10 & 0x8000000000000000) == 0)
        {
          *((_QWORD *)this + 66) = v10;
          v12 = !v10 || v9 == 0;
          if (!v12)
          {
            v13 = 1;
            do
            {
              v15 = *v8;
              v8 -= 7;
              v14 = v15;
              if ((v15 & 0x8000000000000000) == 0)
                break;
              v12 = v9 == v13++;
            }
            while (!v12);
            if ((v14 & 0x8000000000000000) == 0)
            {
              v1 = 0;
              *((_QWORD *)this + 65) = v14;
              return v1;
            }
          }
        }
      }
    }
    return 0;
  }
  v1 = v4;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v16 = 136315394;
    v17 = "OggAudioFile.cpp";
    v18 = 1024;
    v19 = 1063;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ScanForPackets failed", (uint8_t *)&v16, 0x12u);
  }
  return v1;
}

void sub_18F0C258C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (a26)
    free(a26);

  _Unwind_Resume(a1);
}

void ___ZN27AudioComponentRegistrarImpl16getComponentListER14ConnectionInfoP8NSStringbbU13block_pointerFvP6NSDatabS5_P7NSArrayE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  atomic_store(1u, (unsigned __int8 *)(v1 + 2));
  AudioComponentRegistrarImpl::replyWithComponentList(v1, *(unsigned __int8 *)(a1 + 64), *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
}

uint64_t std::default_delete<caulk::synchronized<AUExtensionScanner,caulk::mach::unfair_lock,caulk::empty_atomic_interface<AUExtensionScanner>>>::operator()[abi:ne180100](uint64_t result)
{
  _QWORD *v1;
  id *v2;
  id *v3;
  void *v4;
  uint64_t i;
  _QWORD *v6;
  uint64_t v7;

  if (result)
  {
    v1 = (_QWORD *)result;
    v2 = *(id **)(result + 136);
    if (v2)
    {
      v3 = *(id **)(result + 144);
      v4 = *(void **)(result + 136);
      if (v3 != v2)
      {
        do
        {
          v3 -= 4;
          std::__destroy_at[abi:ne180100]<AUExtensionScanner::ExtensionComponents,0>(v3);
        }
        while (v3 != v2);
        v4 = (void *)v1[17];
      }
      v1[18] = v2;
      operator delete(v4);
    }
    for (i = 0; i != -9; i -= 3)
    {

    }
    v6 = (_QWORD *)v1[7];
    if (v6 == v1 + 4)
    {
      v7 = 4;
      v6 = v1 + 4;
    }
    else
    {
      if (!v6)
      {
LABEL_15:
        std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 2));
        JUMPOUT(0x193FFE460);
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_15;
  }
  return result;
}

void ___ZN27AudioComponentRegistrarImpl21_initialExtensionScanEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  NSArray *v4;
  uint64_t v5;
  double Current;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  os_log_t v14;
  _QWORD *v15;
  NSObject *v16;
  double v17;
  os_log_t v18;
  _QWORD *v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  os_unfair_lock_s *lock;
  uint64_t v24;
  _QWORD block[4];
  id v27;
  AudioComponentVector v28;
  AudioComponentVector *v29;
  uint64_t v30;
  void (*v31)(uint64_t, void *);
  void *v32;
  id v33;
  id v34;
  _BYTE *v35;
  NSArray *v36;
  uint64_t v37;
  uint64_t v38;
  AudioComponentVector *p_buf;
  AudioComponentVector buf;
  _BYTE v41[32];
  void (*v42)(uint64_t);
  id v43;
  uint64_t v44;
  _QWORD v45[4];

  v45[1] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  v2 = atomic_load((unsigned __int8 *)(v1 + 2));
  if ((v2 & 1) == 0)
  {
    v24 = *(_QWORD *)(a1 + 40);
    v3 = *(_QWORD *)(v1 + 256);
    os_unfair_lock_lock((os_unfair_lock_t)v3);
    v4 = (NSArray *)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 8);
    memset(&v28, 0, 24);
    v28.mSorted = 1;
    lock = (os_unfair_lock_s *)v3;
    Current = CFAbsoluteTimeGetCurrent();
    v7 = 0;
    v8 = *MEMORY[0x1E0CB2A28];
    v9 = v3 + 64;
    do
    {
      objc_msgSend(&unk_1E2932DF0, "objectAtIndexedSubscript:", v7);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = v8;
      v45[0] = v10;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v45, &v44, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)v41 = 0;
      *(_QWORD *)&v41[8] = v41;
      *(_QWORD *)&v41[16] = 0x3032000000;
      *(_QWORD *)&v41[24] = __Block_byref_object_copy__6585;
      v42 = __Block_byref_object_dispose__6586;
      v43 = 0;
      v29 = (AudioComponentVector *)MEMORY[0x1E0C809B0];
      v30 = 3221225472;
      v31 = ___ZN18AUExtensionScanner11initialScanEv_block_invoke;
      v32 = &unk_1E2921338;
      v36 = v4;
      v12 = v11;
      v37 = v9;
      v33 = v12;
      v35 = v41;
      v13 = v10;
      v34 = v13;
      v38 = v5;
      if (!Synchronously((uint64_t)&v29))
      {
        if (gAudioComponentLogCategory)
        {
          v14 = *(os_log_t *)gAudioComponentLogCategory;
        }
        else
        {
          v15 = (_QWORD *)operator new();
          v15[1] = 0;
          v14 = os_log_create("com.apple.coreaudio", "audiocomp");
          *v15 = v14;
          gAudioComponentLogCategory = (uint64_t)v15;
        }
        v16 = objc_retainAutorelease(v14);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__begin_) = 136315394;
          *(void **)((char *)&buf.__begin_ + 4) = "AUExtensionScanner.mm";
          WORD2(buf.__end_) = 1024;
          *(_DWORD *)((char *)&buf.__end_ + 6) = 164;
          _os_log_impl(&dword_18EE07000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Timeout running task synchronously", (uint8_t *)&buf, 0x12u);
        }
      }
      AUExtensionScanner::addExtensions(&buf, v4, *(void **)(*(_QWORD *)&v41[8] + 40));
      AudioComponentVector::append(&v28, (AudioComponentVector *)buf.__begin_, (const AudioComponentVector *)buf.__end_);
      p_buf = &buf;
      std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);

      _Block_object_dispose(v41, 8);
      ++v7;
      v9 += 24;
    }
    while (v7 != 3);
    v17 = CFAbsoluteTimeGetCurrent();
    if (gAudioComponentLogCategory)
    {
      v18 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v19 = (_QWORD *)operator new();
      v19[1] = 0;
      v18 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v19 = v18;
      gAudioComponentLogCategory = (uint64_t)v19;
    }
    v20 = objc_retainAutorelease(v18);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v41 = 136315650;
      *(_QWORD *)&v41[4] = "AUExtensionScanner.mm";
      *(_WORD *)&v41[12] = 1024;
      *(_DWORD *)&v41[14] = 171;
      *(_WORD *)&v41[18] = 2048;
      *(double *)&v41[20] = v17 - Current;
      _os_log_impl(&dword_18EE07000, v20, OS_LOG_TYPE_INFO, "%25s:%-5d %.6fs", v41, 0x1Cu);
    }
    if (lock)
      os_unfair_lock_unlock(lock);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    LOBYTE(v32) = 1;
    v21 = *(_QWORD *)(v24 + 40);
    if (!v21)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, AudioComponentVector *, AudioComponentVector **))(*(_QWORD *)v21 + 48))(v21, &v28, &v29);
    *(_QWORD *)v41 = &v29;
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v41);
    v29 = &v28;
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    v1 = v24;
  }
  objc_msgSend(*(id *)(v1 + 80), "_queue");
  v22 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN27AudioComponentRegistrarImpl21_initialExtensionScanEU13block_pointerFvvE_block_invoke_2;
  block[3] = &unk_1E2922260;
  v27 = *(id *)(a1 + 32);
  dispatch_sync(v22, block);

}

void sub_18F0C2BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  *(_QWORD *)(v35 - 208) = &a20;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 208));
  if (lock)
    os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

uint64_t ___ZN27AudioComponentRegistrarImpl21_initialExtensionScanEU13block_pointerFvvE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void std::__shared_ptr_pointer<caulk::synchronized<AUExtensionScanner,caulk::mach::unfair_lock,caulk::empty_atomic_interface<AUExtensionScanner>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<caulk::synchronized<AUExtensionScanner,caulk::mach::unfair_lock,caulk::empty_atomic_interface<AUExtensionScanner>> *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<caulk::synchronized<AUExtensionScanner,caulk::mach::unfair_lock,caulk::empty_atomic_interface<AUExtensionScanner>>>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

void sub_18F0C2D38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F0C3028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  void *v21;
  void *v22;
  void *v23;
  os_unfair_lock_s *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;

  v28 = *(std::__shared_weak_count **)(v26 - 104);
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v25)
  {
    v31 = (unint64_t *)&v25->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  os_unfair_lock_unlock(v24);
  a21 = (void **)&a13;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a21);
  a21 = (void **)&a17;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a21);

  _Unwind_Resume(a1);
}

void sub_18F0C31E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v12;

  v12 = v11;
  os_unfair_lock_unlock(v12);

  _Unwind_Resume(a1);
}

void sub_18F0C3468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_18F0C360C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F0C378C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18F0C3AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_18F0C3C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18F0C3D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18F0C3DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18F0C3F60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void localUIImagePNGRepresentation(UIImage *a1)
{
  UIImage *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;

  v1 = a1;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v2 = getUIImagePNGRepresentationSymbolLoc(void)::ptr;
  v11 = getUIImagePNGRepresentationSymbolLoc(void)::ptr;
  if (!getUIImagePNGRepresentationSymbolLoc(void)::ptr)
  {
    v3 = UIKitLibrary();
    v2 = dlsym(v3, "UIImagePNGRepresentation");
    v9[3] = (uint64_t)v2;
    getUIImagePNGRepresentationSymbolLoc(void)::ptr = v2;
  }
  _Block_object_dispose(&v8, 8);
  if (v2)
  {
    ((void (*)(UIImage *))v2)(v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = v4;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSData *localUIImagePNGRepresentation(UIImage *__strong)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("AudioComponentRegistrar.mm"), 624, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_18F0C40B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void *UIKitLibrary(void)
{
  void *v0;
  void *v2;
  void *v3;

  if (!UIKitLibraryCore(char **)::frameworkLibrary)
    UIKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = (void *)UIKitLibraryCore(char **)::frameworkLibrary;
  if (!UIKitLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *UIKitLibrary()");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AudioComponentRegistrar.mm"), 620, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
  return v0;
}

void sub_18F0C41FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _Unwind_Exception *exception_object)
{
  void *v11;

  _Unwind_Resume(a1);
}

id getISImageDescriptorClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getISImageDescriptorClass(void)::softClass;
  v7 = getISImageDescriptorClass(void)::softClass;
  if (!getISImageDescriptorClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL25getISImageDescriptorClassv_block_invoke;
    v3[3] = &unk_1E29222D8;
    v3[4] = &v4;
    ___ZL25getISImageDescriptorClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18F0C42C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *IconServicesLibrary(void)
{
  void *v0;
  void *v2;
  void *v3;

  if (!IconServicesLibraryCore(char **)::frameworkLibrary)
    IconServicesLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = (void *)IconServicesLibraryCore(char **)::frameworkLibrary;
  if (!IconServicesLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *IconServicesLibrary()");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AudioComponentRegistrar.mm"), 626, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
  return v0;
}

void sub_18F0C43E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _Unwind_Exception *exception_object)
{
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZL16getUIScreenClassv_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  UIKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("UIScreen");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getUIScreenClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getUIScreenClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AudioComponentRegistrar.mm"), 622, CFSTR("Unable to find class %s"), "UIScreen");

    __break(1u);
  }
}

void sub_18F0C44C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id getISIconClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getISIconClass(void)::softClass;
  v7 = getISIconClass(void)::softClass;
  if (!getISIconClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL14getISIconClassv_block_invoke;
    v3[3] = &unk_1E29222D8;
    v3[4] = &v4;
    ___ZL14getISIconClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18F0C4584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getUIImageClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getUIImageClass(void)::softClass;
  v7 = getUIImageClass(void)::softClass;
  if (!getUIImageClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL15getUIImageClassv_block_invoke;
    v3[3] = &unk_1E29222D8;
    v3[4] = &v4;
    ___ZL15getUIImageClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18F0C463C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL15getUIImageClassv_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  UIKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("UIImage");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getUIImageClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getUIImageClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AudioComponentRegistrar.mm"), 621, CFSTR("Unable to find class %s"), "UIImage");

    __break(1u);
  }
}

void sub_18F0C4718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL14getISIconClassv_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  IconServicesLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("ISIcon");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getISIconClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getISIconClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AudioComponentRegistrar.mm"), 627, CFSTR("Unable to find class %s"), "ISIcon");

    __break(1u);
  }
}

void sub_18F0C47F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL25getISImageDescriptorClassv_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  IconServicesLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("ISImageDescriptor");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getISImageDescriptorClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getISImageDescriptorClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AudioComponentRegistrar.mm"), 629, CFSTR("Unable to find class %s"), "ISImageDescriptor");

    __break(1u);
  }
}

void sub_18F0C48D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void AudioComponentRegistrarImpl::addRemoveComponents(AudioComponentRegistrarImpl *this, const AudioComponentVector *a2, AudioComponentVector *a3)
{
  AudioComponentVector *v4;
  void *v5;
  void *v6;
  os_log_t v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *end;
  char *begin;
  os_log_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  os_log_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  ConnectionInfo *v25;
  ConnectionInfo *v26;
  id *p_mConnection;
  int mExtUsePermission;
  id WeakRetained;
  void *v30;
  AudioComponentVector *p_p_buf;
  void *v32;
  id obj;
  NSObject *log;
  NSObject *loga;
  os_log_t logb;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void *p_buf;
  char v44;
  _BYTE v45[128];
  AudioComponentVector buf;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (a2->__begin_ != a2->__end_ || a3->__begin_ != a3->__end_)
  {
    v4 = (AudioComponentVector *)((char *)this + 136);
    AudioComponentVector::subtract(&buf, (AudioComponentVector *)((char *)this + 136), a3);
    std::vector<std::shared_ptr<APComponent>>::__vdeallocate(&v4->__begin_);
    *(_OWORD *)&v4->__begin_ = *(_OWORD *)&buf.__begin_;
    *((_QWORD *)this + 19) = buf.__end_cap_.__value_;
    memset(&buf, 0, 24);
    *((_BYTE *)this + 160) = buf.mSorted;
    p_buf = &buf;
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
    AudioComponentVector::append(v4, (AudioComponentVector *)a2->__begin_, (const AudioComponentVector *)a2->__end_);
    AudioComponentVector::sort(v4);
    if (*((_BYTE *)this + 1))
    {
      v5 = (void *)*((_QWORD *)this + 30);
      *((_QWORD *)this + 30) = 0;

      v6 = (void *)*((_QWORD *)this + 25);
      *((_QWORD *)this + 25) = 0;

      if (gAudioComponentLogCategory)
      {
        v7 = *(os_log_t *)gAudioComponentLogCategory;
      }
      else
      {
        v8 = (_QWORD *)operator new();
        v8[1] = 0;
        v7 = os_log_create("com.apple.coreaudio", "audiocomp");
        *v8 = v7;
        gAudioComponentLogCategory = (uint64_t)v8;
      }
      v9 = objc_retainAutorelease(v7);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (unint64_t)((char *)a2->__end_ - (char *)a2->__begin_) >> 4;
        v11 = (unint64_t)((char *)a3->__end_ - (char *)a3->__begin_) >> 4;
        v12 = *((_QWORD *)this + 16);
        LODWORD(buf.__begin_) = 136316162;
        *(void **)((char *)&buf.__begin_ + 4) = "AudioComponentRegistrar.mm";
        WORD2(buf.__end_) = 1024;
        *(_DWORD *)((char *)&buf.__end_ + 6) = 161;
        WORD1(buf.__end_cap_.__value_) = 1024;
        HIDWORD(buf.__end_cap_.__value_) = v10;
        *(_WORD *)&buf.mSorted = 1024;
        *(_DWORD *)(&buf.mSorted + 2) = v11;
        *((_WORD *)&buf.mSorted + 3) = 2112;
        v47 = v12;
        _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %d added, %d removed, conns %@", (uint8_t *)&buf, 0x28u);
      }
      begin = (char *)a2->__begin_;
      end = (char *)a2->__end_;
      if (a2->__begin_ != end)
      {
        do
        {
          if (gAudioComponentLogCategory)
          {
            v15 = *(os_log_t *)gAudioComponentLogCategory;
          }
          else
          {
            v16 = (_QWORD *)operator new();
            v16[1] = 0;
            v15 = os_log_create("com.apple.coreaudio", "audiocomp");
            *v16 = v15;
            gAudioComponentLogCategory = (uint64_t)v16;
          }
          log = objc_retainAutorelease(v15);
          if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
          {
            CAFormatter::CAFormatter((CAFormatter *)&p_buf, (const AudioComponentDescription *)(*(_QWORD *)begin + 36));
            LODWORD(buf.__begin_) = 136315650;
            *(void **)((char *)&buf.__begin_ + 4) = "AudioComponentRegistrar.mm";
            WORD2(buf.__end_) = 1024;
            *(_DWORD *)((char *)&buf.__end_ + 6) = 163;
            WORD1(buf.__end_cap_.__value_) = 2080;
            *(void **)((char *)&buf.__end_cap_.__value_ + 4) = p_buf;
            _os_log_impl(&dword_18EE07000, log, OS_LOG_TYPE_DEFAULT, "%25s:%-5d added %s", (uint8_t *)&buf, 0x1Cu);
            if (p_buf)
              free(p_buf);
          }

          begin += 16;
        }
        while (begin != end);
      }
      v17 = (char *)a3->__begin_;
      v18 = (char *)a3->__end_;
      if (a3->__begin_ != v18)
      {
        do
        {
          if (gAudioComponentLogCategory)
          {
            v19 = *(os_log_t *)gAudioComponentLogCategory;
          }
          else
          {
            v20 = (_QWORD *)operator new();
            v20[1] = 0;
            v19 = os_log_create("com.apple.coreaudio", "audiocomp");
            *v20 = v19;
            gAudioComponentLogCategory = (uint64_t)v20;
          }
          loga = objc_retainAutorelease(v19);
          if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
          {
            CAFormatter::CAFormatter((CAFormatter *)&p_buf, (const AudioComponentDescription *)(*(_QWORD *)v17 + 36));
            LODWORD(buf.__begin_) = 136315650;
            *(void **)((char *)&buf.__begin_ + 4) = "AudioComponentRegistrar.mm";
            WORD2(buf.__end_) = 1024;
            *(_DWORD *)((char *)&buf.__end_ + 6) = 166;
            WORD1(buf.__end_cap_.__value_) = 2080;
            *(void **)((char *)&buf.__end_cap_.__value_ + 4) = p_buf;
            _os_log_impl(&dword_18EE07000, loga, OS_LOG_TYPE_DEFAULT, "%25s:%-5d removed %s", (uint8_t *)&buf, 0x1Cu);
            if (p_buf)
              free(p_buf);
          }

          v17 += 16;
        }
        while (v17 != v18);
      }
      v21 = *((_QWORD *)this + 31);
      if (v21)
        logb = (os_log_t)*(id *)(*(_QWORD *)v21 + 96);
      else
        logb = 0;
      buf.__begin_ = (char *)this + 208;
      LOBYTE(buf.__end_) = 0;
      p_buf = (char *)this + 168;
      v44 = 0;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      obj = *((id *)this + 16);
      v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
      if (v22)
      {
        v23 = *(_QWORD *)v40;
        do
        {
          for (i = 0; i != v22; ++i)
          {
            if (*(_QWORD *)v40 != v23)
              objc_enumerationMutation(obj);
            v25 = (ConnectionInfo *)*(id *)(*((_QWORD *)&v39 + 1) + 8 * i);
            v26 = v25;
            p_mConnection = (id *)&v25[1].mConnection;
            mExtUsePermission = v25[1].mExtUsePermission;
            if (mExtUsePermission == -1)
            {
              mExtUsePermission = ConnectionInfo::_canUseExtensions(v25 + 1);
              v26[1].mExtUsePermission = mExtUsePermission;
            }
            WeakRetained = objc_loadWeakRetained(p_mConnection);
            objc_msgSend(WeakRetained, "remoteObjectProxy");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            if (mExtUsePermission == 1)
              p_p_buf = (AudioComponentVector *)&p_buf;
            else
              p_p_buf = &buf;
            PurgeableDataWrapper::accessor::data((PurgeableDataWrapper::accessor *)p_p_buf);
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "registrationsChanged:includesExtensions:fsHash:", v32, mExtUsePermission == 1, logb);

          }
          v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
        }
        while (v22);
      }

      notify_post("com.apple.coreaudio.components.changed");
      if (v44)
        objc_msgSend(*((id *)p_buf + 4), "endContentAccess");
      if (LOBYTE(buf.__end_))
        objc_msgSend(*((id *)buf.__begin_ + 4), "endContentAccess");

    }
  }
}

void sub_18F0C4EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_18F0C5584(_Unwind_Exception *a1, uint64_t a2, PurgeableDataWrapper *a3, PurgeableDataWrapper *a4, uint64_t a5, RegistrarService *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, id *a11, id *a12, void **a13, id *a14, uint64_t a15, uint64_t a16, std::mutex *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  id *v28;
  _QWORD *v29;
  id **v30;
  void *v31;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;

  std::mutex::~mutex((std::mutex *)&a25);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a10);
  std::unique_ptr<AudioComponentPluginScanner>::reset[abi:ne180100](v30, 0);
  PurgeableDataWrapper::~PurgeableDataWrapper(a11);
  PurgeableDataWrapper::~PurgeableDataWrapper(a12);
  a25 = a13;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a25);

  RegistrarService::~RegistrarService(v28);
  RegistrarService::~RegistrarService(a14);
  v33 = *(_QWORD **)(v26 + 72);
  if (v33 == v29)
  {
    v34 = 4;
  }
  else
  {
    if (!v33)
      goto LABEL_6;
    v34 = 5;
    v29 = *(_QWORD **)(v26 + 72);
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v34))(v29);
LABEL_6:
  v35 = *(_QWORD **)(v26 + 40);
  if (v35 == v27)
  {
    v36 = 4;
  }
  else
  {
    if (!v35)
      goto LABEL_11;
    v36 = 5;
    v27 = *(_QWORD **)(v26 + 40);
  }
  (*(void (**)(_QWORD *))(*v27 + 8 * v36))(v27);
LABEL_11:

  MEMORY[0x193FFE460](v26, 0x10A0C401440404FLL);
  _Unwind_Resume(a1);
}

void sub_18F0C57D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AudioComponentRegistrar;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void ___ZN27AudioComponentRegistrarImpl33listenerShouldAcceptNewConnectionEP13NSXPCListenerP15NSXPCConnection_block_invoke(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  v1 = *(void **)(*(_QWORD *)(a1 + 40) + 128);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v1, "removeObject:");

}

void sub_18F0C589C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN27AudioComponentRegistrarImpl33listenerShouldAcceptNewConnectionEP13NSXPCListenerP15NSXPCConnection_block_invoke_2(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  v1 = *(void **)(*(_QWORD *)(a1 + 40) + 128);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v1, "removeObject:");

}

void sub_18F0C58F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<NSData * ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

id **std::unique_ptr<AudioComponentPluginScanner>::reset[abi:ne180100](id **result, id *a2)
{
  id *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x193FFE460);
  }
  return result;
}

void PurgeableDataWrapper::~PurgeableDataWrapper(id *this)
{
  PurgeableDataWrapper *v2;
  uint64_t v3;

  v2 = (PurgeableDataWrapper *)this[3];
  if (v2 == (PurgeableDataWrapper *)this)
  {
    v3 = 4;
    v2 = (PurgeableDataWrapper *)this;
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

void RegistrarService::~RegistrarService(id *this)
{

}

void ___ZN27AudioComponentRegistrarImpl15_initSubsystemsEv_block_invoke(_QWORD *a1)
{
  unsigned __int8 *v2;
  id *v3;
  int v4;
  void **v5;
  void ***v6;
  void ***v7;
  os_log_t v8;
  _QWORD *v9;
  NSObject *v10;
  double Current;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  AudioComponentVector *p_buf;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  AudioComponentVector *v26;
  uint64_t v27;
  double v28;
  os_log_t v29;
  _QWORD *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void ***v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  std::mutex *v41;
  AudioComponentRegistrarImpl *v42;
  AudioComponentVector v43;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  void **v47;
  void **v48[3];
  void ***v49;
  AudioComponentVector buf;
  _QWORD v51[4];

  v51[3] = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int8 *)a1[4];
  v3 = (id *)*((_QWORD *)v2 + 31);
  v4 = *v2;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v46, (uint64_t)(v2 + 16));
  v49 = 0;
  v5 = v47;
  if (v47)
  {
    v6 = (void ***)operator new(0x28uLL);
    v7 = v6;
    *v6 = (void **)&off_1E2913560;
    if (v5 == v46)
    {
      v6[4] = (void **)(v6 + 1);
      (*(void (**)(_QWORD *))(v46[0] + 24))(v46);
    }
    else
    {
      v6[4] = v5;
      v47 = 0;
    }
    v49 = v7;
  }
  v44[0] = &off_1E2915C78;
  v45 = v44;
  if (gAudioComponentLogCategory)
  {
    v8 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v9 = (_QWORD *)operator new();
    v9[1] = 0;
    v8 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v9 = v8;
    gAudioComponentLogCategory = (uint64_t)v9;
  }
  v10 = objc_retainAutorelease(v8);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__begin_) = 136315394;
    *(void **)((char *)&buf.__begin_ + 4) = "AudioComponentPluginScanner.mm";
    WORD2(buf.__end_) = 1024;
    *(_DWORD *)((char *)&buf.__end_ + 6) = 716;
    _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_INFO, "%25s:%-5d Scanning for bundles", (uint8_t *)&buf, 0x12u);
  }
  Current = CFAbsoluteTimeGetCurrent();
  v12 = *v3;
  if (!*v3)
  {
    v13 = objc_opt_new();
    v14 = *v3;
    *v3 = (id)v13;

    v12 = *v3;
  }
  v15 = (uint64_t)v49;
  if (!v49)
    goto LABEL_16;
  if (v49 != v48)
  {
    v15 = ((uint64_t (*)(void))(*v49)[2])();
LABEL_16:
    *(_QWORD *)&buf.mSorted = v15;
    goto LABEL_18;
  }
  *(_QWORD *)&buf.mSorted = &buf;
  (*((void (**)(void ***, AudioComponentVector *))v48[0] + 3))(v48, &buf);
LABEL_18:
  v16 = (char *)(v12 + 4);
  if (v12 + 4 != (_QWORD *)&buf)
  {
    v17 = *(_QWORD *)&buf.mSorted;
    v18 = (char *)v12[7];
    if (*(AudioComponentVector **)&buf.mSorted == &buf)
    {
      if (v18 == v16)
      {
        (*((void (**)(AudioComponentVector *, _QWORD *))buf.__begin_ + 3))(&buf, v51);
        (*(void (**)(_QWORD))(**(_QWORD **)&buf.mSorted + 32))(*(_QWORD *)&buf.mSorted);
        *(_QWORD *)&buf.mSorted = 0;
        (*(void (**)(_QWORD, AudioComponentVector *))(*(_QWORD *)v12[7] + 24))(v12[7], &buf);
        (*(void (**)(_QWORD))(*(_QWORD *)v12[7] + 32))(v12[7]);
        v12[7] = 0;
        *(_QWORD *)&buf.mSorted = &buf;
        (*(void (**)(_QWORD *, _QWORD *))(v51[0] + 24))(v51, v12 + 4);
        (*(void (**)(_QWORD *))(v51[0] + 32))(v51);
      }
      else
      {
        (*((void (**)(AudioComponentVector *, _QWORD *))buf.__begin_ + 3))(&buf, v12 + 4);
        (*(void (**)(_QWORD))(**(_QWORD **)&buf.mSorted + 32))(*(_QWORD *)&buf.mSorted);
        *(_QWORD *)&buf.mSorted = v12[7];
      }
      v12[7] = v16;
    }
    else if (v18 == v16)
    {
      (*(void (**)(_QWORD *, AudioComponentVector *))(*(_QWORD *)v16 + 24))(v12 + 4, &buf);
      (*(void (**)(_QWORD))(*(_QWORD *)v12[7] + 32))(v12[7]);
      v12[7] = *(_QWORD *)&buf.mSorted;
      *(_QWORD *)&buf.mSorted = &buf;
    }
    else
    {
      *(_QWORD *)&buf.mSorted = v12[7];
      v12[7] = v17;
    }
  }
  p_buf = *(AudioComponentVector **)&buf.mSorted;
  if (*(AudioComponentVector **)&buf.mSorted == &buf)
  {
    v20 = 4;
    p_buf = &buf;
  }
  else
  {
    if (!*(_QWORD *)&buf.mSorted)
      goto LABEL_32;
    v20 = 5;
  }
  (*((void (**)(void))p_buf->__begin_ + v20))();
LABEL_32:
  v21 = *v3;
  v22 = (uint64_t)v45;
  if (!v45)
  {
LABEL_35:
    *(_QWORD *)&buf.mSorted = v22;
    goto LABEL_37;
  }
  if (v45 != v44)
  {
    v22 = (*(uint64_t (**)(void))(*v45 + 16))();
    goto LABEL_35;
  }
  *(_QWORD *)&buf.mSorted = &buf;
  (*(void (**)(uint64_t, _QWORD *))(v44[0] + 24))((uint64_t)v44, &buf);
LABEL_37:
  v23 = (char *)(v21 + 8);
  if (v21 + 8 != (_QWORD *)&buf)
  {
    v24 = *(_QWORD *)&buf.mSorted;
    v25 = (char *)v21[11];
    if (*(AudioComponentVector **)&buf.mSorted == &buf)
    {
      if (v25 == v23)
      {
        (*((void (**)(AudioComponentVector *, _QWORD *))buf.__begin_ + 3))(&buf, v51);
        (*(void (**)(_QWORD))(**(_QWORD **)&buf.mSorted + 32))(*(_QWORD *)&buf.mSorted);
        *(_QWORD *)&buf.mSorted = 0;
        (*(void (**)(_QWORD, AudioComponentVector *))(*(_QWORD *)v21[11] + 24))(v21[11], &buf);
        (*(void (**)(_QWORD))(*(_QWORD *)v21[11] + 32))(v21[11]);
        v21[11] = 0;
        *(_QWORD *)&buf.mSorted = &buf;
        (*(void (**)(_QWORD *, _QWORD *))(v51[0] + 24))(v51, v21 + 8);
        (*(void (**)(_QWORD *))(v51[0] + 32))(v51);
      }
      else
      {
        (*((void (**)(AudioComponentVector *, _QWORD *))buf.__begin_ + 3))(&buf, v21 + 8);
        (*(void (**)(_QWORD))(**(_QWORD **)&buf.mSorted + 32))(*(_QWORD *)&buf.mSorted);
        *(_QWORD *)&buf.mSorted = v21[11];
      }
      v21[11] = v23;
    }
    else if (v25 == v23)
    {
      (*(void (**)(_QWORD *, AudioComponentVector *))(*(_QWORD *)v23 + 24))(v21 + 8, &buf);
      (*(void (**)(_QWORD))(*(_QWORD *)v21[11] + 32))(v21[11]);
      v21[11] = *(_QWORD *)&buf.mSorted;
      *(_QWORD *)&buf.mSorted = &buf;
    }
    else
    {
      *(_QWORD *)&buf.mSorted = v21[11];
      v21[11] = v24;
    }
  }
  v26 = *(AudioComponentVector **)&buf.mSorted;
  if (*(AudioComponentVector **)&buf.mSorted == &buf)
  {
    v27 = 4;
    v26 = &buf;
  }
  else
  {
    if (!*(_QWORD *)&buf.mSorted)
      goto LABEL_51;
    v27 = 5;
  }
  (*((void (**)(void))v26->__begin_ + v27))();
LABEL_51:
  if (*v3)
    objc_msgSend(*v3, "postInit:", v4 != 0);
  else
    memset(&v43, 0, sizeof(v43));
  v28 = CFAbsoluteTimeGetCurrent();
  if (gAudioComponentLogCategory)
  {
    v29 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v30 = (_QWORD *)operator new();
    v30[1] = 0;
    v29 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v30 = v29;
    gAudioComponentLogCategory = (uint64_t)v30;
  }
  v31 = objc_retainAutorelease(v29);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__begin_) = 136315650;
    *(void **)((char *)&buf.__begin_ + 4) = "AudioComponentPluginScanner.mm";
    WORD2(buf.__end_) = 1024;
    *(_DWORD *)((char *)&buf.__end_ + 6) = 734;
    WORD1(buf.__end_cap_.__value_) = 2048;
    *(double *)((char *)&buf.__end_cap_.__value_ + 4) = v28 - Current;
    _os_log_impl(&dword_18EE07000, v31, OS_LOG_TYPE_INFO, "%25s:%-5d Finished scanning for bundles (%.3f s)", (uint8_t *)&buf, 0x1Cu);
  }
  v35 = v45;
  if (v45 == v44)
  {
    v36 = 4;
    v35 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_64;
    v36 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v35 + 8 * v36))(v35, v32, v33, v34);
LABEL_64:
  v37 = v49;
  if (v49 == v48)
  {
    v38 = 4;
    v37 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_69;
    v38 = 5;
  }
  ((void (*)(void ***, uint64_t, uint64_t, uint64_t))(*v37)[v38])(v37, v32, v33, v34);
LABEL_69:
  v39 = v47;
  if (v47 == v46)
  {
    v40 = 4;
    v39 = (void **)v46;
    goto LABEL_73;
  }
  if (v47)
  {
    v40 = 5;
LABEL_73:
    (*((void (**)(void **, uint64_t, uint64_t, uint64_t))*v39 + v40))(v39, v32, v33, v34);
  }
  v41 = (std::mutex *)a1[5];
  v42 = (AudioComponentRegistrarImpl *)a1[6];
  std::mutex::lock(v41);
  memset(&buf, 0, 24);
  buf.mSorted = 1;
  AudioComponentRegistrarImpl::addRemoveComponents(v42, &v43, &buf);
  v48[0] = (void **)&buf;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](v48);
  std::mutex::unlock(v41);
  buf.__begin_ = &v43;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
}

void sub_18F0C6118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AudioComponentRegistrarImpl::_initSubsystems(void)::$_2,std::allocator<AudioComponentRegistrarImpl::_initSubsystems(void)::$_2>,void ()(void)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AudioComponentRegistrarImpl::_initSubsystems(void)::$_2,std::allocator<AudioComponentRegistrarImpl::_initSubsystems(void)::$_2>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915C78;
  return result;
}

void std::__function::__func<AudioComponentRegistrarImpl::_initSubsystems(void)::$_2,std::allocator<AudioComponentRegistrarImpl::_initSubsystems(void)::$_2>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915C78;
}

_QWORD *std::__function::__func<std::function<void ()(AudioComponentVector const&,AudioComponentVector&)>,std::allocator<std::function<void ()(AudioComponentVector const&,AudioComponentVector&)>>,void ()(AudioComponentVector&,AudioComponentVector&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2913560;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<void ()(AudioComponentVector const&,AudioComponentVector&)>,std::allocator<std::function<void ()(AudioComponentVector const&,AudioComponentVector&)>>,void ()(AudioComponentVector&,AudioComponentVector&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E2913560;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<std::function<void ()(AudioComponentVector const&,AudioComponentVector&)>,std::allocator<std::function<void ()(AudioComponentVector const&,AudioComponentVector&)>>,void ()(AudioComponentVector&,AudioComponentVector&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E2913560;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_18F0C6390(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<void ()(AudioComponentVector const&,AudioComponentVector&)>,std::allocator<std::function<void ()(AudioComponentVector const&,AudioComponentVector&)>>,void ()(AudioComponentVector&,AudioComponentVector&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913560;
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<void ()(AudioComponentVector const&,AudioComponentVector&)>,std::allocator<std::function<void ()(AudioComponentVector const&,AudioComponentVector&)>>,void ()(AudioComponentVector&,AudioComponentVector&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<void ()(AudioComponentVector const&,AudioComponentVector&)>,std::allocator<std::function<void ()(AudioComponentVector const&,AudioComponentVector&)>>,void ()(AudioComponentVector&,AudioComponentVector&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<std::function<void ()(AudioComponentVector const&,AudioComponentVector&)>,std::allocator<std::function<void ()(AudioComponentVector const&,AudioComponentVector&)>>,void ()(AudioComponentVector&,AudioComponentVector&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void std::__function::__func<AudioComponentRegistrarImpl::_initSubsystems(void)::$_0,std::allocator<AudioComponentRegistrarImpl::_initSubsystems(void)::$_0>,void ()(AudioComponentVector const&,AudioComponentVector&)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AudioComponentRegistrarImpl::_initSubsystems(void)::$_0,std::allocator<AudioComponentRegistrarImpl::_initSubsystems(void)::$_0>,void ()(AudioComponentVector const&,AudioComponentVector&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915C30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AudioComponentRegistrarImpl::_initSubsystems(void)::$_0,std::allocator<AudioComponentRegistrarImpl::_initSubsystems(void)::$_0>,void ()(AudioComponentVector const&,AudioComponentVector&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915C30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AudioComponentRegistrarImpl::_initSubsystems(void)::$_0,std::allocator<AudioComponentRegistrarImpl::_initSubsystems(void)::$_0>,void ()(AudioComponentVector const&,AudioComponentVector&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD block[7];

  v5 = *(_QWORD *)(a1 + 8);
  objc_msgSend(*(id *)(v5 + 80), "_queue");
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_not_V2(v6);

  objc_msgSend(*(id *)(v5 + 80), "_queue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZZN27AudioComponentRegistrarImpl15_initSubsystemsEvENK3__0clERK20AudioComponentVectorRS1__block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = v5;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v7, block);

}

void sub_18F0C656C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZZN27AudioComponentRegistrarImpl15_initSubsystemsEvENK3__0clERK20AudioComponentVectorRS1__block_invoke(uint64_t a1)
{
  AudioComponentRegistrarImpl::addRemoveComponents(*(AudioComponentRegistrarImpl **)(a1 + 32), *(const AudioComponentVector **)(a1 + 40), *(AudioComponentVector **)(a1 + 48));
}

void std::__function::__func<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_2,std::allocator<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_2>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_2,std::allocator<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_2>,BOOL ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915D50;
  return result;
}

void std::__function::__func<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_2,std::allocator<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_2>,BOOL ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915D50;
}

uint64_t std::__function::__func<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_2,std::allocator<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_2>,BOOL ()(void)>::operator()()
{
  void *v0;
  uint64_t v1;
  id v2;
  os_log_t v3;
  _QWORD *v4;
  NSObject *v5;
  id v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CA58C0], "sharedDatabaseContext");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  v1 = objc_msgSend(v0, "startAccessingWithOptions:error:", 1, &v7);
  v2 = v7;
  if ((v1 & 1) == 0)
  {
    if (gAudioComponentLogCategory)
    {
      v3 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v4 = (_QWORD *)operator new();
      v4[1] = 0;
      v3 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v4 = v3;
      gAudioComponentLogCategory = (uint64_t)v4;
    }
    v5 = objc_retainAutorelease(v3);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v9 = "AudioComponentRegistrar.mm";
      v10 = 1024;
      v11 = 82;
      _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioComponentRegistrar: LS Database rebuild is in progress, can't scan for extensions now!", buf, 0x12u);
    }
  }

  return v1;
}

void sub_18F0C6730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__function::__func<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_1,std::allocator<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_1>,NSData * ()(void)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_1,std::allocator<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_1>,NSData * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915D08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_1,std::allocator<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_1>,NSData * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915D08;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_0,std::allocator<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_0>,NSData * ()(void)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_0,std::allocator<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_0>,NSData * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915CC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_0,std::allocator<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_0>,NSData * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915CC0;
  a2[1] = v2;
  return result;
}

id std::__function::__func<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_0,std::allocator<AudioComponentRegistrarImpl::AudioComponentRegistrarImpl(BOOL,AudioComponentRegistrar *)::$_0>,NSData * ()(void)>::operator()(uint64_t a1)
{
  return AudioComponentVector::serialized((AudioComponentVector *)(*(_QWORD *)(a1 + 8) + 136));
}

void sub_18F0C68D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

UIImage *__cdecl AudioOutputUnitGetHostIcon(AudioUnit au, float desiredPointSize)
{
  UInt32 ioDataSize;
  UIImage *outData;

  *(float *)&outData = desiredPointSize;
  ioDataSize = 8;
  if (AudioUnitGetProperty(au, 0xBB5u, 0, 0, &outData, &ioDataSize))
    return 0;
  else
    return outData;
}

id IPCAUIcons::GetIconFromBundle(IPCAUIcons *this, const __CFString *a2)
{
  AudioComponentMgr_RegistrarService *v3;
  void *v4;
  void *v5;
  id v6;
  std::recursive_mutex *v8[2];
  int v9;
  id v10;
  _QWORD aBlock[5];

  v9 = 0;
  v10 = 0;
  GlobalComponentPluginMgr((uint64_t *)v8);
  v3 = (AudioComponentMgr_RegistrarService *)v8[1];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN29AudioComponentMgr_NSExtension23iconForInterAppBundleIDEPK10__CFStringR13APIconRequest_block_invoke;
  aBlock[3] = &__block_descriptor_40_e16_v16__0__NSData_8l;
  aBlock[4] = &v9;
  v4 = _Block_copy(aBlock);
  AudioComponentMgr_RegistrarService::syncPrefServerProxy(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "getInterAppIcon:reply:", this, v4);

  if (v8[0])
    std::recursive_mutex::unlock(v8[0]);
  v6 = v10;

  return v6;
}

void sub_18F0C69F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  if (a10)
    std::recursive_mutex::unlock(a10);

  _Unwind_Resume(a1);
}

id copyConfigurationInfoFromCache(const __CFString *a1)
{
  void *v2;
  id v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;

  v6 = 0;
  v7 = &v6;
  v8 = 0x3032000000;
  v9 = __Block_byref_object_copy__11516;
  v10 = __Block_byref_object_dispose__11517;
  v11 = 0;
  syncCacheServerProxy();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___Z30copyConfigurationInfoFromCachePK10__CFString_block_invoke;
  v5[3] = &unk_1E2922350;
  v5[4] = &v6;
  objc_msgSend(v2, "copyConfigurationInfoFromCache:reply:", a1, v5);

  v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  return v3;
}

void sub_18F0C6AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11516(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11517(uint64_t a1)
{

}

id syncCacheServerProxy(void)
{
  void *v0;
  void *v1;

  cacheServerConnection();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "synchronousRemoteObjectProxyWithErrorHandler:", &__block_literal_global_11519);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_18F0C6B80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___Z30copyConfigurationInfoFromCachePK10__CFString_block_invoke(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

id cacheServerConnection(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  v0 = (void *)gCacheServerConnection;
  if (!gCacheServerConnection)
  {
    v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.audio.AudioComponentPrefs"), 4096);
    objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE16F950);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "setRemoteObjectInterface:", v2);

    objc_msgSend(v1, "setInterruptionHandler:", &__block_literal_global_31);
    objc_msgSend(v1, "setInvalidationHandler:", &__block_literal_global_33);
    objc_msgSend(v1, "resume");
    v3 = (void *)gCacheServerConnection;
    gCacheServerConnection = (uint64_t)v1;

    v0 = (void *)gCacheServerConnection;
  }
  return v0;
}

void sub_18F0C6C50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL20syncCacheServerProxyv_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  os_log_t v3;
  _QWORD *v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (gAudioComponentLogCategory)
  {
    v3 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v3 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v4 = v3;
    gAudioComponentLogCategory = (uint64_t)v4;
  }
  v5 = objc_retainAutorelease(v3);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = 136315650;
    v7 = "AudioComponentConfigurationInfoCache.mm";
    v8 = 1024;
    v9 = 58;
    v10 = 2112;
    v11 = v2;
    _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d cache server proxy error: %@", (uint8_t *)&v6, 0x1Cu);
  }

}

void sub_18F0C6D88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL21cacheServerConnectionv_block_invoke_32()
{
  os_log_t v0;
  _QWORD *v1;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (gAudioComponentLogCategory)
  {
    v0 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v1 = (_QWORD *)operator new();
    v1[1] = 0;
    v0 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v1 = v0;
    gAudioComponentLogCategory = (uint64_t)v1;
  }
  v2 = objc_retainAutorelease(v0);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "AudioComponentConfigurationInfoCache.mm";
    v5 = 1024;
    v6 = 45;
    _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d cache server proxy error: Connection Invalidated", (uint8_t *)&v3, 0x12u);
  }
}

void ___ZL21cacheServerConnectionv_block_invoke()
{
  os_log_t v0;
  _QWORD *v1;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (gAudioComponentLogCategory)
  {
    v0 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v1 = (_QWORD *)operator new();
    v1[1] = 0;
    v0 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v1 = v0;
    gAudioComponentLogCategory = (uint64_t)v1;
  }
  v2 = objc_retainAutorelease(v0);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "AudioComponentConfigurationInfoCache.mm";
    v5 = 1024;
    v6 = 42;
    _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d cache server proxy error: Connection Interrupted", (uint8_t *)&v3, 0x12u);
  }
}

void writeConfigurationInfoToCache(const __CFString *a1, const __CFDictionary *a2)
{
  id v4;

  syncCacheServerProxy();
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "writeConfigurationInfoToCache:configurationInfo:", a1, a2);

}

void sub_18F0C6FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t createConfgurationInfoCacheKey(const AudioComponentDescription *a1, uint64_t a2)
{
  void *v4;
  _BYTE v6[16];
  _BYTE v7[16];
  _BYTE v8[16];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0CB3940];
  CAX4CCString::CAX4CCString((CAX4CCString *)v8, a1->componentType);
  CAX4CCString::CAX4CCString((CAX4CCString *)v7, a1->componentSubType);
  CAX4CCString::CAX4CCString((CAX4CCString *)v6, a1->componentManufacturer);
  return objc_msgSend(v4, "stringWithFormat:", CFSTR("%d-%s-%s-%s-0x%X"), 7, v8, v7, v6, a2);
}

void clearConfigInfoCache(const AudioComponentDescription *a1, uint64_t a2)
{
  OSType componentType;
  OSType componentSubType;
  OSType componentManufacturer;
  void *v7;
  BOOL v8;
  id v10;

  componentType = a1->componentType;
  componentSubType = a1->componentSubType;
  componentManufacturer = a1->componentManufacturer;
  cacheServerConnection();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "remoteObjectProxyWithErrorHandler:", &__block_literal_global_38);
  v10 = (id)objc_claimAutoreleasedReturnValue();

  if (componentType)
    v8 = componentSubType == 0;
  else
    v8 = 1;
  if (v8 || componentManufacturer == 0)
    objc_msgSend(v10, "clearConfigurationInfoCache:", 0);
  else
    objc_msgSend(v10, "clearConfigurationInfoCache:", createConfgurationInfoCacheKey(a1, a2));

}

void sub_18F0C714C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL21asyncCacheServerProxyv_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  os_log_t v3;
  _QWORD *v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (gAudioComponentLogCategory)
  {
    v3 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v3 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v4 = v3;
    gAudioComponentLogCategory = (uint64_t)v4;
  }
  v5 = objc_retainAutorelease(v3);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = 136315650;
    v7 = "AudioComponentConfigurationInfoCache.mm";
    v8 = 1024;
    v9 = 65;
    v10 = 2112;
    v11 = v2;
    _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d cache server proxy error: %@", (uint8_t *)&v6, 0x1Cu);
  }

}

void sub_18F0C728C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id getValidationResultFromCache(const AudioComponentDescription *a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  __CFString *v5;
  id v6;

  createValidationResultCacheKey(a1, a2, a3, a4, a5);
  v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v6 = copyConfigurationInfoFromCache(v5);

  return v6;
}

void sub_18F0C72D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id createValidationResultCacheKey(const AudioComponentDescription *a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  const __CFString *v5;

  v5 = CFSTR("arm64");
  if (a2 == 16777223)
    v5 = CFSTR("x86_64");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("validation-%d-'%x'-'%x'-'%x'-0x%X-0x%X-%@-%d"), 7, a1->componentType, a1->componentSubType, a1->componentManufacturer, a3, a4, v5, a5);
  return (id)objc_claimAutoreleasedReturnValue();
}

void writeValidationResultToCache(const AudioComponentDescription *a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, const __CFDictionary *a6)
{
  __CFString *v7;

  createValidationResultCacheKey(a1, a2, a3, a4, a5);
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  writeConfigurationInfoToCache(v7, a6);

}

void sub_18F0C7398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *CDelaunayTriangles3D::check_avail_vertices(_QWORD *result, unint64_t a2, int a3)
{
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  _QWORD *v9;
  int v10;

  v4 = result;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = HIDWORD(a2);
  v9 = result;
  while (1)
  {
    v9 = (_QWORD *)v9[1];
    if (v9 == result)
      break;
    v10 = *((_DWORD *)v9 + 4);
    if (v10 == (_DWORD)a2 || *((_DWORD *)v9 + 5) == (_DWORD)a2)
      v7 = 1;
    if (v10 == HIDWORD(a2) || *((_DWORD *)v9 + 5) == HIDWORD(a2))
      v5 = 1;
    if (v10 == a3 || *((_DWORD *)v9 + 5) == a3)
      v6 = 1;
    if (v7 && v5 && v6)
      return result;
  }
  if (v7)
  {
    if (v5)
      goto LABEL_18;
  }
  else
  {
    result = std::list<int>::remove(result + 3, a2);
    if (v5)
    {
LABEL_18:
      if (v6)
        return result;
      return std::list<int>::remove(v4 + 3, a3);
    }
  }
  result = std::list<int>::remove(v4 + 3, v8);
  if (!v6)
    return std::list<int>::remove(v4 + 3, a3);
  return result;
}

_QWORD *std::list<int>::remove(_QWORD *a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;

  v13[0] = v13;
  v13[1] = v13;
  v14 = 0;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1)
  {
    v3 = 0;
    do
    {
      v4 = (_QWORD *)v2[1];
      if (*((_DWORD *)v2 + 4) == a2)
      {
        while (v4 != a1)
        {
          v5 = *((_DWORD *)v4 + 4) == a2;
          if (*((_DWORD *)v4 + 4) != a2)
            goto LABEL_8;
          v4 = (_QWORD *)v4[1];
        }
        v5 = 1;
        v4 = a1;
LABEL_8:
        if (v2 != v4)
        {
          v6 = (_QWORD *)*v4;
          if (v13 != a1)
          {
            if (v6 == v2)
            {
              v9 = 1;
            }
            else
            {
              v7 = -1;
              v8 = v2;
              do
              {
                v8 = (_QWORD *)v8[1];
                ++v7;
              }
              while (v8 != v6);
              v9 = v7 + 2;
            }
            a1[2] -= v9;
            v3 += v9;
            v14 = v3;
          }
          v10 = *v2;
          *(_QWORD *)(v10 + 8) = v6[1];
          *(_QWORD *)v6[1] = v10;
          v11 = v13[0];
          *(_QWORD *)(v13[0] + 8) = v2;
          *v2 = v11;
          v13[0] = v6;
          v6[1] = v13;
        }
        if (!v5)
          v4 = (_QWORD *)v4[1];
      }
      v2 = v4;
    }
    while (v4 != a1);
  }
  return std::__list_imp<ID3FrameInfo>::clear(v13);
}

_QWORD *CDelaunayTriangles3D::add_edge_to_buffer(CDelaunayTriangles3D *this, int32x2_t *a2)
{
  uint64_t v4;
  _QWORD *result;
  int32x2_t v6;
  uint64_t v7;
  int32x2_t v8;

  v4 = *((_QWORD *)this + 2);
  v8 = vrev64_s32(*a2);
  result = std::list<std::array<int,2ul>>::remove(this, &v8);
  if (*((_QWORD *)this + 2) == v4)
  {
    v6 = *a2;
    result = operator new(0x18uLL);
    result[2] = v6;
    v7 = *(_QWORD *)this;
    *result = *(_QWORD *)this;
    result[1] = this;
    *(_QWORD *)(v7 + 8) = result;
    *(_QWORD *)this = result;
    *((_QWORD *)this + 2) = v4 + 1;
  }
  return result;
}

_QWORD *std::list<std::array<int,2ul>>::remove(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;

  v13[0] = v13;
  v13[1] = v13;
  v14 = 0;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1)
  {
    v3 = 0;
    do
    {
      v4 = (_QWORD *)v2[1];
      if (v2[2] == *a2)
      {
        while (v4 != a1)
        {
          v5 = v4[2] == *a2;
          if (v4[2] != *a2)
            goto LABEL_10;
          v4 = (_QWORD *)v4[1];
        }
        v5 = 1;
        v4 = a1;
LABEL_10:
        if (v2 != v4)
        {
          v6 = (_QWORD *)*v4;
          if (v13 != a1)
          {
            if (v6 == v2)
            {
              v9 = 1;
            }
            else
            {
              v7 = -1;
              v8 = v2;
              do
              {
                v8 = (_QWORD *)v8[1];
                ++v7;
              }
              while (v8 != v6);
              v9 = v7 + 2;
            }
            a1[2] -= v9;
            v3 += v9;
            v14 = v3;
          }
          v10 = *v2;
          *(_QWORD *)(v10 + 8) = v6[1];
          *(_QWORD *)v6[1] = v10;
          v11 = v13[0];
          *(_QWORD *)(v13[0] + 8) = v2;
          *v2 = v11;
          v13[0] = v6;
          v6[1] = v13;
        }
        if (!v5)
          v4 = (_QWORD *)v4[1];
      }
      v2 = v4;
    }
    while (v4 != a1);
  }
  return std::__list_imp<ID3FrameInfo>::clear(v13);
}

uint64_t CDelaunayTriangles3D::find_one_delaunay3(CDelaunayTriangles3D *this, const double *a2, const double *a3, const double *a4, int *a5, int a6)
{
  uint64_t v6;
  unsigned int v7;
  double v9;
  double v10;
  uint64_t result;
  char *v12;
  CDelaunayTriangles3D *v13;
  int v14;
  uint64_t v15;
  float64x2_t v17;
  double v18;
  double v19;
  float64x2_t v20;
  double v21;
  double v22;
  float64x2_t v23;
  double v24;
  double v25;
  float64x2_t v26;
  int v27;
  CDelaunayTriangles3D *v28;
  int v29;
  float64x2_t v31;
  float64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;

  v6 = *((_QWORD *)this + 5);
  if (!v6)
    return 0xFFFFFFFFLL;
  if (v6 != 1)
  {
    v12 = (char *)this + 24;
    v13 = (CDelaunayTriangles3D *)*((_QWORD *)this + 4);
    if (v13 != (CDelaunayTriangles3D *)((char *)this + 24))
    {
      v14 = 0;
      v15 = *((_QWORD *)this + 4);
      do
      {
        result = *(unsigned int *)(v15 + 16);
        if ((_DWORD)result != (_DWORD)a5 && (_DWORD)result != a6)
        {
          v17.f64[0] = a2[(int)a5];
          v18 = a2[a6];
          v19 = a2[(int)result];
          v20.f64[0] = a3[(int)a5];
          v21 = a3[a6];
          v22 = a3[(int)result];
          v23.f64[0] = a4[(int)a5];
          v24 = a4[a6];
          v25 = a4[(int)result];
          if (v17.f64[0] * (v21 * v25 - v24 * v22)
             - v20.f64[0] * (v18 * v25 - v24 * v19)
             + v23.f64[0] * (v18 * v22 - v21 * v19) > 0.0)
          {
            v26.f64[0] = v20.f64[0] * v20.f64[0] + v17.f64[0] * v17.f64[0] + v23.f64[0] * v23.f64[0];
            v26.f64[1] = v21 * v21 + v18 * v18 + v24 * v24;
            v17.f64[1] = a2[a6];
            v20.f64[1] = a3[a6];
            v23.f64[1] = a4[a6];
            v27 = v14;
            v28 = v13;
            while (1)
            {
              if (v27)
              {
                v29 = *((_DWORD *)v28 + 4);
                if (v29 != (_DWORD)a5 && v29 != a6)
                {
                  v31.f64[0] = v22 * v22 + v19 * v19 + v25 * v25;
                  v31.f64[1] = a3[v29] * a3[v29] + a2[v29] * a2[v29] + a4[v29] * a4[v29];
                  v32.f64[0] = a2[(int)result];
                  v32.f64[1] = a2[v29];
                  *(double *)v33.i64 = a3[(int)result];
                  *(double *)&v33.i64[1] = a3[v29];
                  *(double *)v34.i64 = a4[(int)result];
                  *(double *)&v34.i64[1] = a4[v29];
                  v35 = (float64x2_t)vextq_s8(v33, (int8x16_t)v20, 8uLL);
                  v36 = vnegq_f64(v35);
                  v37 = (float64x2_t)vextq_s8((int8x16_t)v20, v33, 8uLL);
                  v38 = vnegq_f64(v37);
                  v39 = (float64x2_t)vextq_s8(v34, (int8x16_t)v23, 8uLL);
                  v40 = (float64x2_t)vextq_s8((int8x16_t)v23, v34, 8uLL);
                  v41 = vmlaq_f64(vmulq_f64(v23, v38), v40, v20);
                  v42 = vmulq_f64(v32, vmlaq_f64(vmulq_f64(v39, v38), v40, v35));
                  v43 = (float64x2_t)vextq_s8((int8x16_t)v32, (int8x16_t)v17, 8uLL);
                  v44 = (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v32, 8uLL);
                  v45 = vmlaq_f64(vmlaq_f64(v42, vmlaq_f64(vmulq_f64((float64x2_t)v34, v36), v39, (float64x2_t)v33), v44), vmlaq_f64(vmulq_f64(v40, vnegq_f64((float64x2_t)v33)), (float64x2_t)v34, v37), v43);
                  v46 = (int64x2_t)vmulq_f64(v31, vmlaq_f64(vmlaq_f64(vmulq_f64(v17, vmlaq_f64(vmulq_f64(v40, v36), v39, v37)), v41, v43), vmlaq_f64(vmulq_f64(v39, vnegq_f64(v20)), v23, v35), v44));
                  v47 = (int64x2_t)vmulq_f64(v26, v45);
                  if (vaddvq_f64(vsubq_f64((float64x2_t)vzip1q_s64(v47, v46), (float64x2_t)vzip2q_s64(v47, v46))) > 1.0e-13)
                    break;
                }
              }
              v28 = (CDelaunayTriangles3D *)*((_QWORD *)v28 + 1);
              --v27;
              if (v28 == (CDelaunayTriangles3D *)v12)
                return result;
            }
          }
        }
        v15 = *(_QWORD *)(v15 + 8);
        ++v14;
      }
      while ((char *)v15 != v12);
    }
    return 0xFFFFFFFFLL;
  }
  v7 = *(_DWORD *)(*((_QWORD *)this + 4) + 16);
  if (v7 == (_DWORD)a5 || v7 == a6)
    return 0xFFFFFFFFLL;
  v9 = a2[a6];
  v10 = a2[v7];
  if (a2[(int)a5] * (a3[a6] * a4[v7] - a4[a6] * a3[v7])
     - a3[(int)a5] * (v9 * a4[v7] - a4[a6] * v10)
     + a4[(int)a5] * (v9 * a3[v7] - a3[a6] * v10) <= 0.0)
    return 0xFFFFFFFFLL;
  else
    return v7;
}

uint64_t CDelaunayTriangles3D::find_subtriangle_containment(unint64_t this, double a2, double a3, double a4)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  uint64_t i;
  _QWORD v23[4];
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((this & 0x8000000000000000) != 0)
    return 0xFFFFFFFFLL;
  v4 = this;
  if (a3 <= -0.00000011920929)
    v5 = 4 * (a2 > -0.00000011920929);
  else
    v5 = (4 * (a2 > -0.00000011920929)) | 2;
  v6 = v5 | (a4 > -0.00000011920929);
  if (this)
  {
    v6 = ((_DWORD)v6 << (2 * this));
    v7 = fabs(a4);
    v8 = fabs(a3);
    v9 = fabs(a2);
    v10 = MEMORY[0x1E0C81028];
    do
    {
      v11 = v4;
      v12 = v9 - v8 - v7;
      v13 = v8 + v8;
      v14 = v7 + v7;
      v15 = v9 + v9;
      if (v8 + v8 >= v12)
        v16 = v9 - v8 - v7;
      else
        v16 = v8 + v8;
      if (v14 < v16)
        v16 = v7 + v7;
      if (v13 >= v15)
        v17 = v9 + v9;
      else
        v17 = v8 + v8;
      if (v7 - v8 - v9 < v17)
        v17 = v7 - v8 - v9;
      *(double *)v23 = v16;
      *(double *)&v23[1] = v17;
      if (v8 - v9 - v7 >= v15)
        v18 = v9 + v9;
      else
        v18 = v8 - v9 - v7;
      if (v14 < v18)
        v18 = v7 + v7;
      if (v9 - v8 + v7 >= v8 + v7 - v9)
        v19 = v8 + v7 - v9;
      else
        v19 = v9 - v8 + v7;
      if (v9 + v8 - v7 < v19)
        v19 = v9 + v8 - v7;
      *(double *)&v23[2] = v18;
      *(double *)&v23[3] = v19;
      v20 = (double *)v23;
      for (i = 1; i != 4; ++i)
      {
        if (v16 < *(double *)&v23[i])
        {
          v16 = *(double *)&v23[i];
          v20 = (double *)&v23[i];
        }
      }
      --v4;
      if (*v20 <= -0.00000011920929)
      {
LABEL_33:
        if (*v20 <= -0.0000011920929)
        {
LABEL_36:
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            v25 = "DelaunayTriangles3D.cpp";
            v26 = 1024;
            v27 = 476;
            v28 = 2080;
            v29 = "find_subtriangle_containment";
            v30 = 1024;
            v31 = 476;
            _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: subtriangle still not found in computing rank with relaxed test!", buf, 0x22u);
          }
          v12 = v9;
          v13 = v8;
          v14 = v7;
        }
        else
        {
          switch(((char *)v20 - (char *)v23) >> 3)
          {
            case 0:
              break;
            case 1:
              goto LABEL_35;
            case 2:
              goto LABEL_39;
            case 3:
              goto LABEL_40;
            default:
              goto LABEL_36;
          }
        }
      }
      else
      {
        switch(((char *)v20 - (char *)v23) >> 3)
        {
          case 0:
            break;
          case 1:
LABEL_35:
            v6 = ((1 << (2 * v4)) + v6);
            v12 = v9 + v9;
            v14 = v7 - v8 - v9;
            break;
          case 2:
LABEL_39:
            v6 = ((2 << (2 * v4)) + v6);
            v12 = v9 + v9;
            v13 = v8 - v9 - v7;
            break;
          case 3:
LABEL_40:
            v6 = ((3 << (2 * v4)) + v6);
            v12 = v8 + v7 - v9;
            v13 = v9 - v8 + v7;
            v14 = v9 + v8 - v7;
            break;
          default:
            goto LABEL_33;
        }
      }
      v7 = v14;
      v8 = v13;
      v9 = v12;
    }
    while (v11 > 1);
  }
  return v6;
}

BOOL CDelaunayTriangles3D::check_coplanar(float64_t *this, const double *a2, const double *a3, const double *a4, double a5, float64x2_t a6, double a7, double a8, float64x2_t a9, double a10, float64x2_t a11)
{
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  uint64_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float v27;
  double v28;
  float64x2_t v29;

  if (a4 >= 4)
  {
    v12 = 0;
    while (2)
    {
      v13 = 0;
      do
      {
        if (v13 != v12)
        {
          v14 = 0;
          while (1)
          {
            if (v12 != v14 && v13 != v14)
            {
              v15.f64[0] = this[v12];
              v15.f64[1] = a2[v12];
              a6.f64[0] = a3[v12];
              v16.f64[0] = this[v13];
              v16.f64[1] = a2[v13];
              a9.f64[0] = a3[v13];
              v17.f64[0] = this[v14];
              v17.f64[1] = a2[v14];
              a11.f64[0] = a3[v14];
              v18 = vsubq_f64(v17, v15);
              v19 = vsubq_f64(a11, a6);
              v20 = vsubq_f64(v16, v15);
              v21 = vsubq_f64(a9, a6);
              v22 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v19), v20, 1), v21, v18, 1);
              v21.f64[1] = v20.f64[0];
              v19.f64[1] = v18.f64[0];
              a11 = vmlaq_f64(vmulq_f64(v21, vnegq_f64(v18)), v20, v19);
              v23.f64[0] = v22.f64[0];
              v23.f64[1] = a11.f64[0];
              a9 = (float64x2_t)vdupq_laneq_s64((int64x2_t)a11, 1);
              if (vabsq_f64(a9).f64[0] + vaddvq_f64(vabsq_f64(v23)) > 0.05)
                break;
            }
            if (a4 == ++v14)
              goto LABEL_11;
          }
          v24 = 0;
          v11 = 0;
          *(_QWORD *)&v23.f64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
          v25 = (float64x2_t)vextq_s8((int8x16_t)a11, (int8x16_t)a11, 8uLL);
          a11.f64[1] = v25.f64[0];
          v26 = vmulq_f64(a11, a11);
          v27 = sqrt(v26.f64[1] + vmulq_f64(v22, v22).f64[0] + v26.f64[0]);
          v28 = v27;
          do
          {
            if (v14 != v24 && v12 != v24 && v13 != v24)
            {
              v29.f64[0] = this[v24];
              v29.f64[1] = a2[v24];
              v25.f64[0] = a3[v24];
              v25 = vmulq_f64(a9, vsubq_f64(v25, a6));
              if (fabs((v25.f64[0] + vaddvq_f64(vmulq_f64(v23, vsubq_f64(v29, v15)))) / v28) > 0.01)
                break;
            }
            v11 = ++v24 >= (unint64_t)a4;
          }
          while (a4 != v24);
          return v11;
        }
LABEL_11:
        ++v13;
      }
      while (v13 != a4);
      ++v12;
      v11 = 1;
      if (v12 != a4)
        continue;
      break;
    }
  }
  else
  {
    return 1;
  }
  return v11;
}

uint64_t std::list<int>::__sort<std::__less<void,void>>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t j;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v4 = *(uint64_t **)a2;
      if (*(_DWORD *)(*(_QWORD *)a2 + 16) < *(_DWORD *)(result + 16))
      {
        v5 = *v4;
        *(_QWORD *)(v5 + 8) = v4[1];
        *(_QWORD *)v4[1] = v5;
        v6 = *(_QWORD *)result;
        *(_QWORD *)(v6 + 8) = v4;
        *v4 = v6;
        *(_QWORD *)result = v4;
        v4[1] = result;
        return (uint64_t)v4;
      }
    }
    else
    {
      v8 = a3 >> 1;
      v9 = (a3 >> 1) + 1;
      v10 = result;
      do
      {
        v10 = *(_QWORD *)(v10 + 8);
        --v9;
      }
      while (v9 > 1);
      v11 = std::list<int>::__sort<std::__less<void,void>>(result, v10, a3 >> 1);
      result = std::list<int>::__sort<std::__less<void,void>>(v10, a2, a3 - v8);
      v12 = *(_DWORD *)(v11 + 16);
      if (*(_DWORD *)(result + 16) >= v12)
      {
        v14 = *(uint64_t **)(v11 + 8);
        i = result;
        result = v11;
      }
      else
      {
        for (i = *(_QWORD *)(result + 8); i != a2; i = *(_QWORD *)(i + 8))
        {
          if (*(_DWORD *)(i + 16) >= v12)
            goto LABEL_14;
        }
        i = a2;
LABEL_14:
        v15 = *(_QWORD *)i;
        v16 = *(_QWORD *)result;
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(*(_QWORD *)i + 8);
        **(_QWORD **)(v15 + 8) = v16;
        v17 = *(_QWORD *)v11;
        v14 = *(uint64_t **)(v11 + 8);
        *(_QWORD *)(v17 + 8) = result;
        *(_QWORD *)result = v17;
        *(_QWORD *)v11 = v15;
        *(_QWORD *)(v15 + 8) = v11;
      }
      if (v14 != (uint64_t *)i && i != a2)
      {
        v18 = i;
        do
        {
          v19 = *((_DWORD *)v14 + 4);
          if (*(_DWORD *)(i + 16) >= v19)
          {
            v14 = (uint64_t *)v14[1];
          }
          else
          {
            for (j = *(_QWORD *)(i + 8); j != a2; j = *(_QWORD *)(j + 8))
            {
              if (*(_DWORD *)(j + 16) >= v19)
                goto LABEL_25;
            }
            j = a2;
LABEL_25:
            v21 = *(_QWORD *)j;
            v22 = *(_QWORD *)i;
            *(_QWORD *)(v22 + 8) = *(_QWORD *)(*(_QWORD *)j + 8);
            **(_QWORD **)(v21 + 8) = v22;
            if (v18 == i)
              v18 = j;
            v24 = *v14;
            v23 = (uint64_t *)v14[1];
            *(_QWORD *)(v24 + 8) = i;
            *(_QWORD *)i = v24;
            *v14 = v21;
            *(_QWORD *)(v21 + 8) = v14;
            v14 = v23;
            i = j;
          }
        }
        while (v14 != (uint64_t *)v18 && i != a2);
      }
    }
  }
  return result;
}

OSStatus AudioUnitRemovePropertyListenerWithUserData(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitPropertyListenerProc inProc, void *inProcUserData)
{
  uint64_t v6;
  uint64_t (***v7)(_QWORD);
  uint64_t (***v8)(_QWORD);
  uint64_t (*v9)(uint64_t (**)(_QWORD), uint64_t, AudioUnitPropertyListenerProc, void *);

  if (!inUnit)
    return -50;
  v6 = *(_QWORD *)&inID;
  v7 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v7)
    return 560947818;
  v8 = v7;
  if (*(_WORD *)((**v7)(v7) + 38) != 24949)
    return -3000;
  v9 = *(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, AudioUnitPropertyListenerProc, void *))(*(_QWORD *)((**v8)(v8) + 112) + 56);
  if (v9)
    return v9(v8[3], v6, inProc, inProcUserData);
  else
    return -4;
}

OSStatus AudioUnitAddRenderNotify(AudioUnit inUnit, AURenderCallback inProc, void *inProcUserData)
{
  uint64_t (***v5)(_QWORD);
  uint64_t (***v6)(_QWORD);
  uint64_t (*v7)(uint64_t (**)(_QWORD), AURenderCallback, void *);

  if (!inUnit)
    return -50;
  v5 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v5)
    return 560947818;
  v6 = v5;
  if (*(_WORD *)((**v5)(v5) + 38) != 24949)
    return -3000;
  v7 = *(uint64_t (**)(uint64_t (**)(_QWORD), AURenderCallback, void *))(*(_QWORD *)((**v6)(v6) + 112)
                                                                                           + 64);
  if (v7)
    return v7(v6[3], inProc, inProcUserData);
  else
    return -4;
}

OSStatus AudioUnitRemoveRenderNotify(AudioUnit inUnit, AURenderCallback inProc, void *inProcUserData)
{
  uint64_t (***v5)(_QWORD);
  uint64_t (***v6)(_QWORD);
  uint64_t (*v7)(uint64_t (**)(_QWORD), AURenderCallback, void *);

  if (!inUnit)
    return -50;
  v5 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v5)
    return 560947818;
  v6 = v5;
  if (*(_WORD *)((**v5)(v5) + 38) != 24949)
    return -3000;
  v7 = *(uint64_t (**)(uint64_t (**)(_QWORD), AURenderCallback, void *))(*(_QWORD *)((**v6)(v6) + 112)
                                                                                           + 72);
  if (v7)
    return v7(v6[3], inProc, inProcUserData);
  else
    return -4;
}

uint64_t AudioUnitComplexRender(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t (***v17)(_QWORD);
  uint64_t (***v18)(_QWORD);
  uint64_t (*v19)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (!a1)
    return 4294967246;
  v17 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  if (!v17)
    return 4294967292;
  v18 = v17;
  if (*(_WORD *)((**v17)(v17) + 38) == 24949)
  {
    v19 = *(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)((**v18)(v18) + 112) + 120);
    if (v19)
      return v19(v18[3], a2, a3, a4, a5, a6, a7, a8, a9, a10);
    return 4294967292;
  }
  return 4294964296;
}

OSStatus AudioOutputUnitStop(AudioUnit ci)
{
  uint64_t (***v1)(_QWORD);
  uint64_t (***v2)(_QWORD);
  uint64_t (*v3)(_QWORD);

  if (!ci)
    return -50;
  v1 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioUnit))(*(_QWORD *)ci + 8))(ci);
  if (!v1)
    return 560947818;
  v2 = v1;
  if (*(_WORD *)((**v1)(v1) + 38) != 24949)
    return -3000;
  v3 = *(uint64_t (**)(_QWORD))(*(_QWORD *)((**v2)(v2) + 112) + 152);
  if (v3)
    return v3(v2[3]);
  else
    return -4;
}

OSStatus MusicDeviceMIDIEvent(MusicDeviceComponent inUnit, UInt32 inStatus, UInt32 inData1, UInt32 inData2, UInt32 inOffsetSampleFrame)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (***v9)(_QWORD);
  uint64_t (***v10)(_QWORD);
  uint64_t v11;
  uint64_t (*v13)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t (**v18)(_QWORD);

  if (!inUnit)
    return -50;
  v5 = *(_QWORD *)&inOffsetSampleFrame;
  v6 = *(_QWORD *)&inData2;
  v7 = *(_QWORD *)&inData1;
  v8 = *(_QWORD *)&inStatus;
  v9 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(MusicDeviceComponent))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v9)
    return 560947818;
  v10 = v9;
  if (*(_WORD *)((**v9)(v9) + 38) != 24949)
    return -3000;
  (**v10)(v10);
  if (!v10[3])
    return -66740;
  v11 = *(_QWORD *)((**v10)(v10) + 112);
  if (*((_BYTE *)v10 + 88))
  {
    v18 = v10[3];
    v16 = v7;
    v17 = v8;
    v14 = v5;
    v15 = v6;
    return ((uint64_t (*)(uint64_t (***)(_QWORD), uint64_t (***)(_QWORD), uint64_t, int *, int *, int *, int *))*v10[23])(v10 + 24, &v18, v11, &v17, &v16, &v15, &v14);
  }
  else
  {
    v13 = *(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 160);
    if (v13)
      return v13(v10[3], v8, v7, v6, v5);
    else
      return -4;
  }
}

OSStatus MusicDeviceMIDIEventList(MusicDeviceComponent inUnit, UInt32 inOffsetSampleFrame, const MIDIEventList *evtList)
{
  OSStatus numPackets;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  MIDIProtocolID v10;
  MIDIProtocolID protocol;
  BOOL v14;
  int v15;
  MIDIEventPacket *v16;
  uint64_t v17;
  MIDIEventPacket *v18;
  unint64_t v19;
  MIDIEventPacket *v20;
  MIDIEventPacket *v21;
  UInt32 v22;
  UInt32 v23;
  UInt32 v24;
  int *v25;
  unint64_t v26;
  unsigned __int8 *v27;
  UInt32 v28;
  int v29;
  int v30;
  int v31;
  MIDITimeStamp v32;
  int v33;
  char v34;
  MIDIEventPacket *v35;
  UInt32 v36;
  int v37;
  MIDITimeStamp v38;
  MIDIEventPacket *v39;
  MIDIEventPacket *v40;
  uint64_t v41;
  MIDIEventPacket *v42;
  int v43;
  MIDITimeStamp v44;
  MIDIEventPacket *v45;
  unint64_t v46;
  ByteCount v47;
  MIDIEventPacket *v48;
  MIDIEventPacket *v49;
  MIDIEventPacket *v50;
  MIDIEventPacket *v51;
  UInt32 v52;
  const MIDIEventList *v53;
  MIDIEventPacket *packet;
  uint64_t wordCount;
  MIDIEventPacket *v56;
  MIDIEventPacket *v57;
  UInt32 v58;
  MIDIEventPacket *v59;
  uint64_t v60;
  MIDIEventPacket *v61;
  unint64_t v62;
  MIDIEventPacket *v63;
  MIDIEventPacket *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  UInt32 v72;
  unsigned int v73;
  BOOL v74;
  MIDIEventPacket *v75;
  int v76;
  unsigned int v77;
  UInt32 v78;
  unsigned int v79;
  MIDITimeStamp v80;
  MIDIEventPacket *v81;
  unsigned int v82;
  unsigned int v83;
  UInt32 v84;
  unsigned int v85;
  unsigned int v86;
  UInt32 v87;
  MIDIEventPacket *v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  unsigned __int8 v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int j;
  int v98;
  int v99;
  uint64_t v100;
  char v102;
  int v103;
  uint64_t v104;
  int v105;
  unsigned __int8 *v106;
  unsigned int v107;
  UInt32 v108;
  unsigned int i;
  uint64_t v110;
  unsigned int v111;
  int *v112;
  char v113;
  _BYTE *v114;
  unint64_t v115;
  MIDIEventPacket *v116;
  _OWORD *v117;
  int v118;
  const MIDIEventList *v119;
  const MIDIEventList *v120;
  int *v121;
  int v122;
  uint64_t (*v123)(MIDITimeStamp, uint64_t, const MIDIEventList *);
  MIDITimeStamp v124;
  unsigned int v125;
  MIDITimeStamp time[2];
  MIDITimeStamp v127;
  UInt32 *v128;
  uint64_t v129;
  MIDITimeStamp timeStamp;
  uint64_t v131;
  UInt32 words[2];
  uint64_t v133;
  UInt32 v134[2];
  uint64_t v135;
  MIDIEventList evtlist;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  numPackets = -50;
  if (!inUnit || !evtList)
    return numPackets;
  v5 = *(_QWORD *)&inOffsetSampleFrame;
  v6 = (*(uint64_t (**)(MusicDeviceComponent))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v6)
    return -3000;
  v7 = v6;
  if (!*(_QWORD *)(v6 + 24))
    return -66740;
  v8 = (**(uint64_t (***)(uint64_t))v6)(v6);
  if (!*(_BYTE *)(v7 + 88))
    return -4;
  v9 = *(_QWORD *)(v8 + 112);
  v124 = *(_QWORD *)(v7 + 24);
  v125 = v5;
  v10 = *(_DWORD *)(v7 + 108);
  if (!v10 || (v123 = *(uint64_t (**)(MIDITimeStamp, uint64_t, const MIDIEventList *))(v9 + 192)) == 0)
  {
    if (*(_QWORD *)(v9 + 160))
    {
      LODWORD(v128) = 0;
      *(_QWORD *)&evtlist.protocol = caulk::inplace_function<void ()(MIDI::LegacyPacketList const*),48ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::handleMIDIEventList(void *,AudioUnitPluginDispatch const&,unsigned int,MIDIEventList const*)::$_1>;
      evtlist.packet[0].timeStamp = v124;
      *(_QWORD *)&evtlist.packet[0].wordCount = v9;
      *(_QWORD *)&evtlist.packet[0].words[1] = v9 + 160;
      *(_QWORD *)&evtlist.packet[0].words[3] = &v125;
      *(_QWORD *)&evtlist.packet[0].words[5] = &v128;
      MIDI::convertEventListToPacketList(evtList, (uint64_t *)&evtlist);
      (*(void (**)(MIDIEventPacket *))(*(_QWORD *)&evtlist.protocol + 24))(evtlist.packet);
      return (int)v128;
    }
    return -4;
  }
  protocol = evtList->protocol;
  if (evtList->protocol == v10)
  {
    numPackets = evtList->numPackets;
    if (numPackets)
    {
      if (numPackets == 1 && evtList->packet[0].wordCount <= 0x40)
      {
        return v123(v124, v5, evtList);
      }
      else
      {
        numPackets = 0;
        v52 = 0;
        v53 = evtList;
        packet = evtList->packet;
        do
        {
          wordCount = packet->wordCount;
          v128 = packet->words;
          v129 = wordCount;
          timeStamp = packet->timeStamp;
          v131 = 0;
          v56 = MIDIEventListInit(&evtlist, v10);
          *(_QWORD *)words = 0;
          *(_QWORD *)v134 = 0;
          v135 = 0;
          while (MIDI::EventList::PacketReader::read((uint64_t *)&v128, words, v134))
          {
            v56 = MIDIEventListAdd(&evtlist, 0x114uLL, v56, *(MIDITimeStamp *)words, MIDI::UniversalPacket::word_sizes[(unint64_t)v134[0] >> 28], v134);
            if (!v56)
            {
              numPackets = v123(v124, v125, &evtlist);
              memset(&evtlist, 0, sizeof(evtlist));
              v57 = MIDIEventListInit(&evtlist, v10);
              v56 = MIDIEventListAdd(&evtlist, 0x114uLL, v57, *(MIDITimeStamp *)words, MIDI::UniversalPacket::word_sizes[(unint64_t)v134[0] >> 28], v134);
            }
          }
          if (evtlist.numPackets)
            numPackets = v123(v124, v125, &evtlist);
          packet = (MIDIEventPacket *)((char *)packet + 4 * packet->wordCount + 12);
          ++v52;
        }
        while (v52 < v53->numPackets);
      }
    }
    return numPackets;
  }
  v121 = *(int **)(v7 + 112);
  if (v10 != kMIDIProtocol_2_0 || protocol != kMIDIProtocol_1_0)
  {
    v14 = v10 == kMIDIProtocol_1_0 && protocol == kMIDIProtocol_2_0;
    if (v14 && evtList->numPackets)
    {
      numPackets = 0;
      v15 = 0;
      v16 = evtList->packet;
      v119 = evtList;
      v112 = v121 + 521;
      while (1)
      {
        v118 = v15;
        v17 = v16->wordCount;
        v128 = v16->words;
        v129 = v17;
        v116 = v16;
        timeStamp = v16->timeStamp;
        v131 = 0;
        v18 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
        time[0] = 0;
        *(_QWORD *)words = 0;
        v133 = 0;
        while (MIDI::EventList::PacketReader::read((uint64_t *)&v128, time, words))
        {
          v19 = (unint64_t)words[0] >> 28;
          if (((1 << v19) & 0xA02B) != 0)
          {
            v18 = MIDIEventListAdd(&evtlist, 0x114uLL, v18, time[0], MIDI::UniversalPacket::word_sizes[v19], words);
            if (!v18)
            {
              numPackets = v123(v124, v125, &evtlist);
              memset(&evtlist, 0, sizeof(evtlist));
              v20 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
              v21 = MIDIEventListAdd(&evtlist, 0x114uLL, v20, time[0], MIDI::UniversalPacket::word_sizes[(unint64_t)words[0] >> 28], words);
LABEL_35:
              v18 = v21;
            }
          }
          else if ((_DWORD)v19 == 4)
          {
            v22 = HIBYTE(words[0]) & 0xF | 0x20;
            v23 = words[1];
            switch(BYTE2(words[0]) >> 4)
            {
              case 2:
              case 3:
                v25 = &v112[12 * (HIBYTE(words[0]) & 0xF)];
                v26 = ((unint64_t)words[0] >> 16) & 0xF;
                v27 = (unsigned __int8 *)v25 + 3 * v26;
                v28 = (words[0] >> 8) & 0x7F;
                v122 = words[0] & 0x7F;
                if ((words[0] & 0x100000) != 0)
                  v29 = 2;
                else
                  v29 = 1;
                if (v29 != *v27 || v28 != v27[1])
                {
                  v30 = v26 | 0xB0;
LABEL_50:
                  v113 = v29;
                  v114 = (char *)v25 + 3 * v26;
                  v115 = ((unint64_t)words[0] >> 16) & 0xF;
                  if ((words[0] & 0x100000) != 0)
                    v33 = 25344;
                  else
                    v33 = 25856;
                  v135 = 0;
                  v31 = (v22 << 24) | (v30 << 16);
                  v34 = BYTE1(words[0]) & 0x7F;
                  *(_QWORD *)v134 = v33 | v28 | v31;
                  v35 = MIDIEventListAdd(&evtlist, 0x114uLL, v18, time[0], 1uLL, v134);
                  if (v35)
                  {
                    v32 = time[0];
                  }
                  else
                  {
                    numPackets = v123(v124, v125, &evtlist);
                    memset(&evtlist, 0, sizeof(evtlist));
                    v39 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                    v32 = time[0];
                    v35 = MIDIEventListAdd(&evtlist, 0x114uLL, v39, time[0], MIDI::UniversalPacket::word_sizes[(unint64_t)v134[0] >> 28], v134);
                  }
                  v135 = 0;
                  *(_QWORD *)v134 = v31 | (v33 - 256) | v122;
                  v18 = MIDIEventListAdd(&evtlist, 0x114uLL, v35, v32, 1uLL, v134);
                  if (!v18)
                  {
                    numPackets = v123(v124, v125, &evtlist);
                    memset(&evtlist, 0, sizeof(evtlist));
                    v40 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                    v18 = MIDIEventListAdd(&evtlist, 0x114uLL, v40, v32, MIDI::UniversalPacket::word_sizes[(unint64_t)v134[0] >> 28], v134);
                  }
                  *v114 = v113;
                  v41 = (uint64_t)v25 + 3 * v115;
                  *(_BYTE *)(v41 + 1) = v34;
                  *(_BYTE *)(v41 + 2) = v122;
                  goto LABEL_65;
                }
                v30 = v26 | 0xB0;
                if (v122 != *((unsigned __int8 *)v25 + 3 * v26 + 2))
                  goto LABEL_50;
                v31 = (v30 << 16) | (v22 << 24);
                v32 = time[0];
LABEL_65:
                v135 = 0;
                *(_QWORD *)v134 = v31 | (v23 >> 25) | 0x600;
                v18 = MIDIEventListAdd(&evtlist, 0x114uLL, v18, v32, 1uLL, v134);
                if (!v18)
                {
                  numPackets = v123(v124, v125, &evtlist);
                  memset(&evtlist, 0, sizeof(evtlist));
                  v42 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                  v18 = MIDIEventListAdd(&evtlist, 0x114uLL, v42, time[0], MIDI::UniversalPacket::word_sizes[(unint64_t)v134[0] >> 28], v134);
                }
                v43 = (v23 >> 18) & 0x7F;
                if (v43)
                {
                  v135 = 0;
                  *(_QWORD *)v134 = v43 | v31 | 0x2600u;
                  v44 = time[0];
                  v18 = MIDIEventListAdd(&evtlist, 0x114uLL, v18, time[0], 1uLL, v134);
                  if (!v18)
                  {
                    numPackets = v123(v124, v125, &evtlist);
                    memset(&evtlist, 0, sizeof(evtlist));
                    v45 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                    v21 = MIDIEventListAdd(&evtlist, 0x114uLL, v45, v44, MIDI::UniversalPacket::word_sizes[(unint64_t)v134[0] >> 28], v134);
                    goto LABEL_35;
                  }
                }
                break;
              case 8:
              case 9:
              case 10:
              case 11:
                v24 = BYTE2(words[0]) >> 4 == 9;
                if (words[1] >> 25)
                  v24 = words[1] >> 25;
                v135 = 0;
                *(_QWORD *)v134 = words[0] & 0x7F00 | (BYTE2(words[0]) << 16) | (v22 << 24) | v24;
                v18 = MIDIEventListAdd(&evtlist, 0x114uLL, v18, time[0], 1uLL, v134);
                if (!v18)
                  goto LABEL_76;
                continue;
              case 12:
                v36 = v22 << 24;
                if ((words[0] & 1) != 0)
                {
                  v135 = 0;
                  v37 = BYTE2(words[0]) << 16;
                  v46 = (v37 - 0x100000) | (v22 << 24);
                  *(_QWORD *)v134 = (v37 - 0x100000) & 0xFFFFFF80 | (v22 << 24) | (words[1] >> 8) & 0x7F;
                  v47 = MIDI::UniversalPacket::word_sizes[v46 >> 28];
                  v48 = MIDIEventListAdd(&evtlist, 0x114uLL, v18, time[0], v47, v134);
                  if (v48)
                  {
                    v38 = time[0];
                  }
                  else
                  {
                    numPackets = v123(v124, v125, &evtlist);
                    memset(&evtlist, 0, sizeof(evtlist));
                    v49 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                    v38 = time[0];
                    v48 = MIDIEventListAdd(&evtlist, 0x114uLL, v49, time[0], MIDI::UniversalPacket::word_sizes[(unint64_t)v134[0] >> 28], v134);
                  }
                  v135 = 0;
                  *(_QWORD *)v134 = v46 | v23 & 0x7F | 0x2000;
                  v18 = MIDIEventListAdd(&evtlist, 0x114uLL, v48, v38, v47, v134);
                  if (!v18)
                  {
                    numPackets = v123(v124, v125, &evtlist);
                    memset(&evtlist, 0, sizeof(evtlist));
                    v50 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                    v18 = MIDIEventListAdd(&evtlist, 0x114uLL, v50, v38, MIDI::UniversalPacket::word_sizes[(unint64_t)v134[0] >> 28], v134);
                  }
                }
                else
                {
                  v37 = BYTE2(words[0]) << 16;
                  v38 = time[0];
                }
                v135 = 0;
                *(_QWORD *)v134 = v37 | v36 | HIWORD(v23) & 0x7F00;
                v18 = MIDIEventListAdd(&evtlist, 0x114uLL, v18, v38, 1uLL, v134);
                if (!v18)
                  goto LABEL_76;
                continue;
              case 13:
                v135 = 0;
                *(_QWORD *)v134 = (BYTE2(words[0]) << 16) | (v22 << 24) | (words[1] >> 25 << 8);
                v18 = MIDIEventListAdd(&evtlist, 0x114uLL, v18, time[0], 1uLL, v134);
                if (!v18)
                  goto LABEL_76;
                continue;
              case 14:
                v135 = 0;
                *(_QWORD *)v134 = (words[1] >> 10) & 0x7F00 | (words[1] >> 25) | (BYTE2(words[0]) << 16) | (v22 << 24);
                v18 = MIDIEventListAdd(&evtlist, 0x114uLL, v18, time[0], 1uLL, v134);
                if (!v18)
                {
LABEL_76:
                  numPackets = v123(v124, v125, &evtlist);
                  memset(&evtlist, 0, sizeof(evtlist));
                  v51 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
                  v21 = MIDIEventListAdd(&evtlist, 0x114uLL, v51, time[0], MIDI::UniversalPacket::word_sizes[(unint64_t)v134[0] >> 28], v134);
                  goto LABEL_35;
                }
                continue;
              default:
                continue;
            }
          }
        }
        if (evtlist.numPackets)
          numPackets = v123(v124, v125, &evtlist);
        v16 = (MIDIEventPacket *)&v116->words[v116->wordCount];
        v15 = v118 + 1;
        if (v118 + 1 >= v119->numPackets)
          return numPackets;
      }
    }
    return 0;
  }
  if (!evtList->numPackets)
    return 0;
  numPackets = 0;
  v58 = 0;
  v120 = evtList;
  v59 = evtList->packet;
  v117 = v121 + 4;
  do
  {
    v60 = v59->wordCount;
    v128 = v59->words;
    v129 = v60;
    timeStamp = v59->timeStamp;
    v131 = 0;
    v61 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
    time[1] = 0;
    v127 = 0;
    time[0] = 0;
    while (MIDI::EventList::PacketReader::read((uint64_t *)&v128, &v127, time))
    {
      v62 = LODWORD(time[0]);
      if (LODWORD(time[0]) >> 28 == 2)
      {
        *(_QWORD *)words = 0;
        v133 = 0;
        v65 = BYTE2(time[0]);
        v66 = *((unsigned __int8 *)v121 + 32);
        v67 = *v121;
        v68 = BYTE2(time[0]) >> 4;
        if (*((_BYTE *)v121 + 32))
          goto LABEL_98;
        if ((v67 & 0xFF0000) != 0)
        {
          if (((v67 ^ LODWORD(time[0])) & 0xF0000) != 0)
          {
            v66 = 1;
            *((_BYTE *)v121 + 32) = 1;
            goto LABEL_98;
          }
          if (v68 != 11)
          {
            v66 = (v67 & 0xDF00) != 0 || v68 != 12;
            goto LABEL_98;
          }
          switch(BYTE1(v67))
          {
            case 'b':
              v98 = time[0] & 0xFF00;
              v99 = 25344;
              goto LABEL_197;
            case 'c':
              v98 = time[0] & 0xFF00;
              v99 = 25088;
              goto LABEL_197;
            case 'd':
              v98 = time[0] & 0xFF00;
              v99 = 25856;
              goto LABEL_197;
            case 'e':
              v98 = time[0] & 0xFF00;
              v99 = 25600;
LABEL_197:
              if (v98 != v99 && (time[0] & 0xF0DF00) != 0xB00600)
                break;
              goto LABEL_201;
            default:
              if (BYTE1(v67) == 32)
              {
                if ((time[0] & 0xFF00) != 0)
                  break;
LABEL_201:
                v66 = 0;
                *v117 = *(_OWORD *)time;
                goto LABEL_98;
              }
              if (!BYTE1(v67) && (time[0] & 0xFF00) == 0x2000)
                goto LABEL_201;
              break;
          }
        }
        else
        {
          v66 = 1;
          if ((time[0] & 0xF00000) != 0xB00000 || v68 != 11)
            goto LABEL_98;
          if (BYTE1(time[0]) - 98 < 4 || BYTE1(time[0]) == 32 || !BYTE1(time[0]))
          {
            v66 = 0;
            *(_OWORD *)v121 = *(_OWORD *)time;
            v67 = *v121;
            goto LABEL_98;
          }
        }
        v66 = 1;
LABEL_98:
        v69 = BYTE3(v62) & 0xF;
        v70 = BYTE3(v62) & 0xF | 0x40;
        if (BYTE2(v67) && v66)
        {
          *((_BYTE *)v121 + 32) = 1;
          v135 = 0;
          v134[0] = v67 & 0xFF00 | (BYTE2(v67) << 16) & 0x80FFFFFF | ((BYTE3(v62) & 0xF | 0x40) << 24);
          v71 = v67;
          v72 = v67 << 25;
          if (v71 >= 0x41)
          {
            v73 = (v71 & 0x3F) << 19;
            if (v73)
            {
              do
              {
                v72 |= v73;
                v74 = v73 > 0x3F;
                v73 >>= 6;
              }
              while (v74);
            }
          }
          v134[1] = v72;
          v61 = MIDIEventListAdd(&evtlist, 0x114uLL, v61, v127, 2uLL, v134);
          if (!v61)
          {
            numPackets = v123(v124, v125, &evtlist);
            memset(&evtlist, 0, sizeof(evtlist));
            v75 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
            v61 = MIDIEventListAdd(&evtlist, 0x114uLL, v75, v127, MIDI::UniversalPacket::word_sizes[(unint64_t)v134[0] >> 28], v134);
          }
          *v121 = 0;
          v135 = 0;
          v76 = v121[4];
          if (BYTE2(v76))
          {
            LOWORD(v134[0]) = v76 & 0xFF00;
            BYTE2(v134[0]) = BYTE2(v76);
            HIBYTE(v134[0]) = BYTE3(v62) & 0xF | 0x40;
            v77 = v76;
            v78 = v76 << 25;
            if (v77 >= 0x41)
            {
              v79 = (v77 & 0x3F) << 19;
              if (v79)
              {
                do
                {
                  v78 |= v79;
                  v74 = v79 > 0x3F;
                  v79 >>= 6;
                }
                while (v74);
              }
            }
            v134[1] = v78;
            v80 = v127;
            v61 = MIDIEventListAdd(&evtlist, 0x114uLL, v61, v127, 2uLL, v134);
            if (!v61)
            {
              numPackets = v123(v124, v125, &evtlist);
              memset(&evtlist, 0, sizeof(evtlist));
              v81 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
              v61 = MIDIEventListAdd(&evtlist, 0x114uLL, v81, v80, MIDI::UniversalPacket::word_sizes[(unint64_t)v134[0] >> 28], v134);
            }
            *(_DWORD *)v117 = 0;
          }
          v65 = BYTE2(v62);
          v68 = BYTE2(v62) >> 4;
          *(_QWORD *)((char *)&v121[32 * v69 + 8 + 2 * ((v62 >> 16) & 0xF)] + 1) = 0;
        }
        v82 = (v62 >> 8) & 0x7F;
        v83 = v62 & 0x7F;
        switch(v68)
        {
          case 8:
            goto LABEL_116;
          case 9:
            if ((v62 & 0x7F) == 0)
            {
              v65 -= 16;
              v83 = 64;
            }
LABEL_116:
            v84 = (v70 << 24) | (v65 << 16) | (v82 << 8);
            words[0] = v84;
            v85 = v83 << 9;
            if (v83 >= 0x41)
            {
              v86 = 8 * (v83 & 0x3F);
              if (v86)
              {
                do
                {
                  v85 |= v86;
                  v74 = v86 > 0x3F;
                  v86 >>= 6;
                }
                while (v74);
              }
            }
            v87 = v85 << 16;
            goto LABEL_120;
          case 10:
            v84 = (v65 << 16) | (v70 << 24) | (v82 << 8);
            words[0] = v84;
            v87 = (_DWORD)v62 << 25;
            if (v83 >= 0x41)
            {
              v89 = (v62 & 0x3F) << 19;
              if (v89)
              {
                do
                {
                  v87 |= v89;
                  v74 = v89 > 0x3F;
                  v89 >>= 6;
                }
                while (v74);
              }
            }
            goto LABEL_120;
          case 11:
            v90 = (uint64_t)&v121[32 * v69 + 8] + 1;
            v91 = (v62 >> 16) & 0xF;
            if (((v62 >> 8) & 0x7F) > 0x25)
            {
              switch(v82)
              {
                case 'b':
                  v100 = v90 + 8 * v91;
                  *(_BYTE *)(v100 + 1) = 2;
                  goto LABEL_186;
                case 'c':
                  v110 = v90 + 8 * v91;
                  *(_BYTE *)(v110 + 1) = 2;
                  goto LABEL_188;
                case 'd':
                  v100 = v90 + 8 * v91;
                  *(_BYTE *)(v100 + 1) = 1;
LABEL_186:
                  *(_BYTE *)(v100 + 5) = v83;
                  break;
                case 'e':
                  v110 = v90 + 8 * v91;
                  *(_BYTE *)(v110 + 1) = 1;
LABEL_188:
                  *(_BYTE *)(v110 + 4) = v83;
                  break;
                default:
                  if (v82 != 38)
                    goto LABEL_190;
                  v102 = v62 & 0x7F;
                  v103 = v62 & 0x7F;
                  goto LABEL_175;
              }
              goto LABEL_189;
            }
            if (!v82)
            {
              *(_BYTE *)(v90 + 8 * v91 + 2) = v83;
              goto LABEL_171;
            }
            if (v82 != 6)
            {
              if (v82 != 32)
                goto LABEL_190;
              *(_BYTE *)(v90 + 8 * v91 + 3) = v83;
LABEL_171:
              *(_BYTE *)(v90 + 8 * v91) = 1;
LABEL_189:
              if (!*((_BYTE *)v121 + 32))
                continue;
              goto LABEL_190;
            }
            v102 = 0;
            v103 = 0;
            *(_BYTE *)(v90 + 8 * v91 + 6) = v83;
LABEL_175:
            v104 = v90 + 8 * v91;
            *(_BYTE *)(v104 + 7) = v102;
            if (!*((_BYTE *)v121 + 32) && *(_BYTE *)(v104 + 1))
            {
              if (*(_BYTE *)(v104 + 1) == 1)
                v105 = 32;
              else
                v105 = 48;
              v106 = (unsigned __int8 *)(v90 + 8 * v91);
              v84 = (v70 << 24) | ((v105 | v91) << 16) | (v106[4] << 8) | v106[5];
              words[0] = v84;
              v107 = v103 | (v106[6] << 7);
              v108 = v107 << 18;
              if (v107 > 0x2000)
              {
                for (i = 32 * (v107 & 0x1FFF); i; i >>= 13)
                  v108 |= i;
              }
              words[1] = v108;
              *(_OWORD *)v121 = 0u;
              *((_OWORD *)v121 + 1) = 0u;
              goto LABEL_121;
            }
LABEL_190:
            v84 = (v65 << 16) | (v70 << 24) | (v82 << 8);
            words[0] = v84;
            v87 = (_DWORD)v62 << 25;
            if (v83 >= 0x41)
            {
              v111 = (v62 & 0x3F) << 19;
              if (v111)
              {
                do
                {
                  v87 |= v111;
                  v74 = v111 > 0x3F;
                  v111 >>= 6;
                }
                while (v74);
              }
            }
LABEL_120:
            words[1] = v87;
LABEL_121:
            v61 = MIDIEventListAdd(&evtlist, 0x114uLL, v61, v127, MIDI::UniversalPacket::word_sizes[(unint64_t)v84 >> 28], words);
            if (v61)
              continue;
            numPackets = v123(v124, v125, &evtlist);
            memset(&evtlist, 0, sizeof(evtlist));
            v88 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
            v64 = MIDIEventListAdd(&evtlist, 0x114uLL, v88, v127, MIDI::UniversalPacket::word_sizes[(unint64_t)words[0] >> 28], words);
            break;
          case 12:
            v92 = &v121[32 * v69 + 2 * (WORD1(v62) & 0xF)];
            v93 = *((_BYTE *)v121 + 32) ^ 1;
            if (!*((_BYTE *)v92 + 33))
              v93 = 0;
            v84 = (v65 << 16) | (v70 << 24) | v93;
            words[0] = v84;
            HIBYTE(words[1]) = BYTE1(v62) & 0x7F;
            BYTE1(words[1]) = *((_BYTE *)v92 + 35);
            LOBYTE(words[1]) = *((_BYTE *)v92 + 36);
            *(_QWORD *)((char *)v92 + 33) = 0;
            *(_OWORD *)v121 = 0u;
            *((_OWORD *)v121 + 1) = 0u;
            goto LABEL_121;
          case 13:
            v84 = (v65 << 16) | (v70 << 24);
            words[0] = v84;
            v94 = v62 >> 8 << 25;
            if (v82 >= 0x41)
            {
              v95 = ((v62 >> 8) & 0x3F) << 19;
              if (v95)
              {
                do
                {
                  v94 |= v95;
                  v74 = v95 > 0x3F;
                  v95 >>= 6;
                }
                while (v74);
              }
            }
            words[1] = v94;
            goto LABEL_121;
          case 14:
            v84 = (v65 << 16) | (v70 << 24);
            words[0] = v84;
            v96 = v82 | (v83 << 7);
            v87 = v96 << 18;
            if (v96 > 0x2000)
            {
              for (j = 32 * (v96 & 0x1FFF); j; j >>= 13)
                v87 |= j;
            }
            goto LABEL_120;
          default:
            v84 = words[0];
            goto LABEL_121;
        }
LABEL_123:
        v61 = v64;
      }
      else
      {
        v61 = MIDIEventListAdd(&evtlist, 0x114uLL, v61, v127, MIDI::UniversalPacket::word_sizes[(unint64_t)LODWORD(time[0]) >> 28], (const UInt32 *)time);
        if (!v61)
        {
          numPackets = v123(v124, v125, &evtlist);
          memset(&evtlist, 0, sizeof(evtlist));
          v63 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
          v64 = MIDIEventListAdd(&evtlist, 0x114uLL, v63, v127, MIDI::UniversalPacket::word_sizes[(unint64_t)LODWORD(time[0]) >> 28], (const UInt32 *)time);
          goto LABEL_123;
        }
      }
    }
    if (evtlist.numPackets)
      numPackets = v123(v124, v125, &evtlist);
    v59 = (MIDIEventPacket *)((char *)v59 + 4 * v59->wordCount + 12);
    ++v58;
  }
  while (v58 < v120->numPackets);
  return numPackets;
}

void sub_18F0C9AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

OSStatus MusicDeviceSysEx(MusicDeviceComponent inUnit, const UInt8 *inData, UInt32 inLength)
{
  uint64_t v3;
  uint64_t (***v5)(_QWORD);
  uint64_t (***v6)(_QWORD);
  uint64_t v7;
  uint64_t (**v8)(_QWORD);
  uint64_t (*v10)(uint64_t (**)(_QWORD), const UInt8 *, uint64_t);
  int v11;
  const UInt8 *v12;
  uint64_t (**v13)(_QWORD);

  if (!inUnit)
    return -50;
  v3 = *(_QWORD *)&inLength;
  v5 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(MusicDeviceComponent))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v5)
    return 560947818;
  v6 = v5;
  if (*(_WORD *)((**v5)(v5) + 38) != 24949)
    return -3000;
  (**v6)(v6);
  if (!v6[3])
    return -66740;
  v7 = *(_QWORD *)((**v6)(v6) + 112);
  if (*((_BYTE *)v6 + 88))
  {
    v8 = v6[3];
    v12 = inData;
    v13 = v8;
    v11 = v3;
    return ((uint64_t (*)(uint64_t (***)(_QWORD), uint64_t (***)(_QWORD), uint64_t, const UInt8 **, int *))*v6[28])(v6 + 29, &v13, v7, &v12, &v11);
  }
  else
  {
    v10 = *(uint64_t (**)(uint64_t (**)(_QWORD), const UInt8 *, uint64_t))(v7 + 168);
    if (v10)
      return v10(v6[3], inData, v3);
    else
      return -4;
  }
}

OSStatus MusicDeviceStopNote(MusicDeviceComponent inUnit, MusicDeviceGroupID inGroupID, NoteInstanceID inNoteInstanceID, UInt32 inOffsetSampleFrame)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (***v7)(_QWORD);
  uint64_t (***v8)(_QWORD);
  uint64_t (*v9)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t);

  if (!inUnit)
    return -50;
  v4 = *(_QWORD *)&inOffsetSampleFrame;
  v5 = *(_QWORD *)&inNoteInstanceID;
  v6 = *(_QWORD *)&inGroupID;
  v7 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(MusicDeviceComponent))(*(_QWORD *)inUnit + 8))(inUnit);
  if (!v7)
    return 560947818;
  v8 = v7;
  if (*(_WORD *)((**v7)(v7) + 38) != 24949)
    return -3000;
  v9 = *(uint64_t (**)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))(*(_QWORD *)((**v8)(v8) + 112)
                                                                                            + 184);
  if (v9)
    return v9(v8[3], v6, v5, v4);
  else
    return -4;
}

OSStatus AudioCodecProduceOutputPackets(AudioCodec inCodec, void *outOutputData, UInt32 *ioOutputDataByteSize, UInt32 *ioNumberPackets, AudioStreamPacketDescription *outPacketDescription, UInt32 *outStatus)
{
  uint64_t (***v11)(_QWORD);
  uint64_t (***v12)(_QWORD);
  UInt32 v13;
  uint64_t (*v14)(uint64_t (**)(_QWORD), void *, UInt32 *, UInt32 *, AudioStreamPacketDescription *, UInt32 *);
  OSStatus result;

  if (!inCodec)
    return -50;
  v11 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioCodec))(*(_QWORD *)inCodec + 8))(inCodec);
  v12 = v11;
  if (ioOutputDataByteSize)
  {
    v13 = *ioOutputDataByteSize;
    if (v11)
      goto LABEL_4;
LABEL_9:
    result = 560947818;
    if (!ioOutputDataByteSize)
      return result;
    goto LABEL_12;
  }
  v13 = 0;
  if (!v11)
    goto LABEL_9;
LABEL_4:
  v14 = *(uint64_t (**)(uint64_t (**)(_QWORD), void *, UInt32 *, UInt32 *, AudioStreamPacketDescription *, UInt32 *))(*(_QWORD *)((**v11)(v11) + 112) + 48);
  if (v14)
  {
    result = v14(v12[3], outOutputData, ioOutputDataByteSize, ioNumberPackets, outPacketDescription, outStatus);
    if (!ioOutputDataByteSize)
      return result;
  }
  else
  {
    result = -4;
    if (!ioOutputDataByteSize)
      return result;
  }
LABEL_12:
  if (*ioOutputDataByteSize > v13)
  {
    _os_assert_log();
    result = _os_crash();
    __break(1u);
  }
  return result;
}

OSStatus AudioCodecAppendInputBufferList(AudioCodec inCodec, const AudioBufferList *inBufferList, UInt32 *ioNumberPackets, const AudioStreamPacketDescription *inPacketDescription, UInt32 *outBytesConsumed)
{
  uint64_t (***v9)(_QWORD);
  uint64_t (***v10)(_QWORD);
  uint64_t (*v11)(uint64_t (**)(_QWORD), const AudioBufferList *, UInt32 *, const AudioStreamPacketDescription *, UInt32 *);

  if (!inCodec)
    return -50;
  v9 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(AudioCodec))(*(_QWORD *)inCodec + 8))(inCodec);
  if (!v9)
    return 560947818;
  v10 = v9;
  v11 = *(uint64_t (**)(uint64_t (**)(_QWORD), const AudioBufferList *, UInt32 *, const AudioStreamPacketDescription *, UInt32 *))(*(_QWORD *)((**v9)(v9) + 112) + 64);
  if (v11)
    return v11(v10[3], inBufferList, ioNumberPackets, inPacketDescription, outBytesConsumed);
  else
    return -4;
}

void std::__introsort<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 *v60;
  __int128 *v61;
  __int128 *v62;
  __int128 v63;
  __int128 v64;
  int v65;
  int v66;
  __int128 v67;
  __int128 v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD *v80;
  BOOL v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  int64_t v92;
  int64_t v93;
  int64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  int64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  __int128 v138;
  unint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  int v146;
  int v147;
  int v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  int v171;
  int v172;
  __int128 v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;

void AUFlatParameterInfoBlob::V2Builder::~V2Builder(AUFlatParameterInfoBlob::V2Builder *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }

}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::shared_ptr<AUFlatParameterInfoBlob>>::~lf_read_synchronized_write(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 16);
  if (*(_BYTE *)(a1 + 9))
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void std::__shared_ptr_pointer<AUFlatParameterInfoBlob  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<AUFlatParameterInfoBlob  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x193FFE460);
  return result;
}

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>(__int128 *result, __int128 *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)a3 + 1);
  if (v3 >= *((_QWORD *)result + 1))
  {
    if (v4 < v3)
    {
      v12 = *((_DWORD *)a2 + 12);
      v14 = a2[1];
      v13 = a2[2];
      v15 = *a2;
      v17 = a3[1];
      v16 = a3[2];
      v18 = *a3;
      *((_DWORD *)a2 + 12) = *((_DWORD *)a3 + 12);
      a2[1] = v17;
      a2[2] = v16;
      *a2 = v18;
      *a3 = v15;
      a3[1] = v14;
      a3[2] = v13;
      *((_DWORD *)a3 + 12) = v12;
      if (*((_QWORD *)a2 + 1) < *((_QWORD *)result + 1))
      {
        v19 = *((_DWORD *)result + 12);
        v21 = result[1];
        v20 = result[2];
        v22 = *result;
        v24 = a2[1];
        v23 = a2[2];
        v25 = *a2;
        *((_DWORD *)result + 12) = *((_DWORD *)a2 + 12);
        result[1] = v24;
        result[2] = v23;
        *result = v25;
        *a2 = v22;
        a2[1] = v21;
        a2[2] = v20;
        *((_DWORD *)a2 + 12) = v19;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v26 = *((_DWORD *)result + 12);
      v28 = result[1];
      v27 = result[2];
      v29 = *result;
      v31 = a2[1];
      v30 = a2[2];
      v32 = *a2;
      *((_DWORD *)result + 12) = *((_DWORD *)a2 + 12);
      result[1] = v31;
      result[2] = v30;
      *result = v32;
      *a2 = v29;
      a2[1] = v28;
      a2[2] = v27;
      *((_DWORD *)a2 + 12) = v26;
      if (*((_QWORD *)a3 + 1) >= *((_QWORD *)a2 + 1))
        return result;
      v5 = *((_DWORD *)a2 + 12);
      v7 = a2[1];
      v6 = a2[2];
      v8 = *a2;
      v34 = a3[1];
      v33 = a3[2];
      v35 = *a3;
      *((_DWORD *)a2 + 12) = *((_DWORD *)a3 + 12);
      a2[1] = v34;
      a2[2] = v33;
      *a2 = v35;
    }
    else
    {
      v5 = *((_DWORD *)result + 12);
      v7 = result[1];
      v6 = result[2];
      v8 = *result;
      v10 = a3[1];
      v9 = a3[2];
      v11 = *a3;
      *((_DWORD *)result + 12) = *((_DWORD *)a3 + 12);
      result[1] = v10;
      result[2] = v9;
      *result = v11;
    }
    *a3 = v8;
    a3[1] = v7;
    a3[2] = v6;
    *((_DWORD *)a3 + 12) = v5;
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __n128 result;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*((_QWORD *)a4 + 1) < *(_QWORD *)(a3 + 8))
  {
    v9 = *(_DWORD *)(a3 + 48);
    v10 = *(_OWORD *)(a3 + 16);
    result = *(__n128 *)(a3 + 32);
    v11 = *(_OWORD *)a3;
    v13 = a4[1];
    v12 = a4[2];
    v14 = *a4;
    *(_DWORD *)(a3 + 48) = *((_DWORD *)a4 + 12);
    *(_OWORD *)(a3 + 16) = v13;
    *(_OWORD *)(a3 + 32) = v12;
    *(_OWORD *)a3 = v14;
    *a4 = v11;
    a4[1] = v10;
    a4[2] = (__int128)result;
    *((_DWORD *)a4 + 12) = v9;
    if (*(_QWORD *)(a3 + 8) < *(_QWORD *)(a2 + 8))
    {
      v15 = *(_DWORD *)(a2 + 48);
      v16 = *(_OWORD *)(a2 + 16);
      result = *(__n128 *)(a2 + 32);
      v17 = *(_OWORD *)a2;
      v19 = *(_OWORD *)(a3 + 16);
      v18 = *(_OWORD *)(a3 + 32);
      v20 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v19;
      *(_OWORD *)(a2 + 32) = v18;
      *(_OWORD *)a2 = v20;
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v16;
      *(__n128 *)(a3 + 32) = result;
      *(_DWORD *)(a3 + 48) = v15;
      if (*(_QWORD *)(a2 + 8) < *(_QWORD *)(a1 + 8))
      {
        v21 = *(_DWORD *)(a1 + 48);
        v22 = *(_OWORD *)(a1 + 16);
        result = *(__n128 *)(a1 + 32);
        v23 = *(_OWORD *)a1;
        v25 = *(_OWORD *)(a2 + 16);
        v24 = *(_OWORD *)(a2 + 32);
        v26 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 16) = v25;
        *(_OWORD *)(a1 + 32) = v24;
        *(_OWORD *)a1 = v26;
        *(_OWORD *)a2 = v23;
        *(_OWORD *)(a2 + 16) = v22;
        *(__n128 *)(a2 + 32) = result;
        *(_DWORD *)(a2 + 48) = v21;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;

  v4 = 0x4EC4EC4EC4EC4EC5 * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_QWORD *)(a2 - 44) < *(_QWORD *)(a1 + 8))
      {
        v6 = *(_DWORD *)(a1 + 48);
        v8 = *(_OWORD *)(a1 + 16);
        v7 = *(_OWORD *)(a1 + 32);
        v9 = *(_OWORD *)a1;
        v10 = *(_OWORD *)(a2 - 36);
        v11 = *(_OWORD *)(a2 - 20);
        v12 = *(_OWORD *)(a2 - 52);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 4);
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a1 + 32) = v11;
        *(_OWORD *)a1 = v12;
        *(_OWORD *)(a2 - 52) = v9;
        *(_OWORD *)(a2 - 36) = v8;
        *(_OWORD *)(a2 - 20) = v7;
        *(_DWORD *)(a2 - 4) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>((__int128 *)a1, (__int128 *)(a1 + 52), (__int128 *)(a2 - 52));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>(a1, a1 + 52, a1 + 104, (__int128 *)(a2 - 52));
      return 1;
    case 5:
      v22 = (__int128 *)(a1 + 52);
      v23 = (__int128 *)(a1 + 104);
      v24 = (__int128 *)(a1 + 156);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>(a1, a1 + 52, a1 + 104, (__int128 *)(a1 + 156));
      if (*(_QWORD *)(a2 - 44) >= *(_QWORD *)(a1 + 164))
        return 1;
      v25 = *(_DWORD *)(a1 + 204);
      v27 = *(_OWORD *)(a1 + 172);
      v26 = *(_OWORD *)(a1 + 188);
      v28 = *v24;
      v29 = *(_OWORD *)(a2 - 36);
      v30 = *(_OWORD *)(a2 - 20);
      v31 = *(_OWORD *)(a2 - 52);
      *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 - 4);
      *(_OWORD *)(a1 + 172) = v29;
      *(_OWORD *)(a1 + 188) = v30;
      *v24 = v31;
      *(_OWORD *)(a2 - 52) = v28;
      *(_OWORD *)(a2 - 36) = v27;
      *(_OWORD *)(a2 - 20) = v26;
      *(_DWORD *)(a2 - 4) = v25;
      if (*(_QWORD *)(a1 + 164) >= *(_QWORD *)(a1 + 112))
        return 1;
      v32 = *(_DWORD *)(a1 + 152);
      v34 = *(_OWORD *)(a1 + 120);
      v33 = *(_OWORD *)(a1 + 136);
      v35 = *v23;
      v36 = *(_OWORD *)(a1 + 172);
      *v23 = *v24;
      *(_OWORD *)(a1 + 120) = v36;
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 188);
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(a1 + 204);
      *v24 = v35;
      *(_OWORD *)(a1 + 172) = v34;
      *(_OWORD *)(a1 + 188) = v33;
      *(_DWORD *)(a1 + 204) = v32;
      if (*(_QWORD *)(a1 + 112) >= *(_QWORD *)(a1 + 60))
        return 1;
      v37 = *(_DWORD *)(a1 + 100);
      v39 = *(_OWORD *)(a1 + 68);
      v38 = *(_OWORD *)(a1 + 84);
      v40 = *v22;
      v41 = *(_OWORD *)(a1 + 120);
      *v22 = *v23;
      *(_OWORD *)(a1 + 68) = v41;
      *(_OWORD *)(a1 + 84) = *(_OWORD *)(a1 + 136);
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 152);
      *v23 = v40;
      *(_OWORD *)(a1 + 120) = v39;
      *(_OWORD *)(a1 + 136) = v38;
      *(_DWORD *)(a1 + 152) = v37;
      if (*(_QWORD *)(a1 + 60) >= *(_QWORD *)(a1 + 8))
        return 1;
      v42 = *(_DWORD *)(a1 + 48);
      v44 = *(_OWORD *)(a1 + 16);
      v43 = *(_OWORD *)(a1 + 32);
      v45 = *(_OWORD *)a1;
      v46 = *(_OWORD *)(a1 + 68);
      *(_OWORD *)a1 = *v22;
      *(_OWORD *)(a1 + 16) = v46;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 84);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 100);
      *v22 = v45;
      *(_OWORD *)(a1 + 68) = v44;
      *(_OWORD *)(a1 + 84) = v43;
      result = 1;
      *(_DWORD *)(a1 + 100) = v42;
      return result;
    default:
      v13 = a1 + 104;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *>((__int128 *)a1, (__int128 *)(a1 + 52), (__int128 *)(a1 + 104));
      v14 = a1 + 156;
      if (a1 + 156 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *(_QWORD *)(v14 + 8);
    if (v17 < *(_QWORD *)(v13 + 8))
    {
      v18 = *(_QWORD *)v14;
      v47 = *(_OWORD *)(v14 + 16);
      v48 = *(_OWORD *)(v14 + 32);
      v49 = *(_DWORD *)(v14 + 48);
      v19 = v15;
      while (1)
      {
        v20 = a1 + v19;
        *(_OWORD *)(v20 + 156) = *(_OWORD *)(a1 + v19 + 104);
        *(_OWORD *)(v20 + 172) = *(_OWORD *)(a1 + v19 + 120);
        *(_OWORD *)(v20 + 188) = *(_OWORD *)(a1 + v19 + 136);
        *(_DWORD *)(v20 + 204) = *(_DWORD *)(a1 + v19 + 152);
        if (v19 == -104)
          break;
        v19 -= 52;
        if (v17 >= *(_QWORD *)(v20 + 60))
        {
          v21 = a1 + v19 + 156;
          goto LABEL_13;
        }
      }
      v21 = a1;
LABEL_13:
      *(_QWORD *)v21 = v18;
      *(_QWORD *)(v21 + 8) = v17;
      *(_OWORD *)(v21 + 16) = v47;
      *(_OWORD *)(v21 + 32) = v48;
      *(_DWORD *)(v21 + 48) = v49;
      if (++v16 == 8)
        return v14 + 52 == a2;
    }
    v13 = v14;
    v15 += 52;
    v14 += 52;
    if (v14 == a2)
      return 1;
  }
}

uint64_t AUFlatParameterInfoBlob::V2Builder::stringOffset(AUFlatParameterInfoBlob::V2Builder *this, id *a2)
{
  uint64_t v3;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void **v9;
  _BYTE *v10;
  size_t v11;
  int64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  _BYTE *v22;
  int64_t v23;
  char *v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void *v30;
  std::runtime_error *exception;
  size_t v33;
  void *__p[2];
  char v35;

  if (!*a2 || (*((_BYTE *)this + 16) & 1) == 0)
    return 0xFFFFFFFFLL;
  v5 = *a2;
  objc_msgSend(*((id *)this + 1), "objectForKeyedSubscript:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v3 = objc_msgSend(v6, "intValue");

  }
  else
  {
    v3 = (*((_DWORD *)this + 34) - *((_DWORD *)this + 32));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*((id *)this + 1), "setObject:forKeyedSubscript:", v8, v5);

    if (!*a2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)*a2);
    if (v35 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    v10 = (_BYTE *)*((_QWORD *)this + 17);
    v11 = strlen((const char *)v9);
    v12 = v11 + 1;
    if ((uint64_t)(v11 + 1) >= 1)
    {
      v13 = *((_QWORD *)this + 18);
      if (v13 - (uint64_t)v10 >= v12)
      {
        if (v12 <= 0)
        {
          v21 = (uint64_t)v9 + v11 + 1;
          v22 = (_BYTE *)*((_QWORD *)this + 17);
          if (&v10[-v12] < v10)
          {
            v23 = -v12;
            v22 = (_BYTE *)*((_QWORD *)this + 17);
            do
              *v22++ = v10[v23++];
            while (v23);
          }
          *((_QWORD *)this + 17) = v22;
          if (v10 != &v10[v12])
            memmove(&v10[v12], v10, -v12);
          if ((void **)v21 != v9)
            memmove(v10, v9, v21 - (_QWORD)v9);
        }
        else
        {
          v20 = v11 + 1;
          if ((void **)((char *)v9 + v11 + 1) != v9)
            memmove(v10, v9, v11 + 1);
          *((_QWORD *)this + 17) = &v10[v20];
        }
      }
      else
      {
        v14 = (_BYTE *)*((_QWORD *)this + 16);
        v15 = (char *)(v10 - v14);
        v16 = v10 - v14 + v12;
        if (v16 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v17 = v13 - (_QWORD)v14;
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        v33 = v18;
        if (v18)
          v19 = (char *)operator new(v18);
        else
          v19 = 0;
        v24 = &v15[(_QWORD)v19];
        memcpy(&v15[(_QWORD)v19], v9, v12);
        if (v14 == v10)
        {
          v25 = v10;
          v26 = &v15[(_QWORD)v19];
        }
        else
        {
          do
          {
            v15[(_QWORD)v19 - 1] = v15[(_QWORD)(v14 - 1)];
            --v15;
          }
          while (v15);
          v25 = (_BYTE *)*((_QWORD *)this + 17);
          v26 = v19;
        }
        v27 = &v24[v12];
        v28 = &v19[v33];
        v29 = v25 - v10;
        if (v25 != v10)
          memmove(v27, v10, v25 - v10);
        v30 = (void *)*((_QWORD *)this + 16);
        *((_QWORD *)this + 16) = v26;
        *((_QWORD *)this + 17) = &v27[v29];
        *((_QWORD *)this + 18) = v28;
        if (v30)
          operator delete(v30);
      }
    }
    if (v35 < 0)
      operator delete(__p[0]);
  }

  return v3;
}

void sub_18F0CB1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  __cxa_free_exception(v16);

  _Unwind_Resume(a1);
}

void caulk::__expected_detail::destroy<AU::Property::Attributes::details::AUParameterInfoValue<1021u>::Wrapper,(void *)0>(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

AUParameterCache *std::unique_ptr<AUParameterCache>::reset[abi:ne180100](AUParameterCache **a1)
{
  AUParameterCache *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    AUParameterCache::~AUParameterCache(result);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void AUParameterCache::~AUParameterCache(AUParameterCache *this)
{
  std::__shared_weak_count *v2;

  caulk::concurrent::lf_read_synchronized_write<std::shared_ptr<AUFlatParameterInfoBlob>>::~lf_read_synchronized_write((uint64_t)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void std::__shared_ptr_pointer<AUParameterCache *,std::shared_ptr<AUParameterCache>::__shared_ptr_default_delete<AUParameterCache,AUParameterCache>,std::allocator<AUParameterCache>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

AUParameterCache *std::__shared_ptr_pointer<AUParameterCache *,std::shared_ptr<AUParameterCache>::__shared_ptr_default_delete<AUParameterCache,AUParameterCache>,std::allocator<AUParameterCache>>::__on_zero_shared(uint64_t a1)
{
  AUParameterCache *result;

  result = *(AUParameterCache **)(a1 + 24);
  if (result)
  {
    AUParameterCache::~AUParameterCache(result);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void XAUParameter::GetParamProxy(XAUParameter *this, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  OpaqueAudioComponentInstance *v18;
  int v19;
  std::vector<int>::pointer begin;
  OSStatus Property;
  std::vector<int>::pointer v22;
  uint64_t v23;
  OSStatus v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  CFTypeRef v31;
  __int128 v32;
  CFTypeRef v33;
  __int128 v34;
  OpaqueAudioComponentInstance *v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  std::vector<int>::pointer v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  std::vector<int>::pointer end;
  std::vector<int>::pointer v55;
  unint64_t v56;
  unint64_t *v57;
  unsigned int *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::vector<int>::pointer v68;
  void *v69;
  void *v70;
  unint64_t v71;
  unint64_t v72;
  size_t v73;
  uint64_t v74;
  void *v75;
  int64_t v76;
  void *v77;
  size_t v78;
  size_t v79;
  _DWORD *v80;
  _DWORD *v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  _QWORD *v92;
  __int128 v93;
  unsigned int v94;
  os_unfair_lock_s *v95;
  _OWORD *p_os_unfair_lock_opaque;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  __int128 v99;
  std::__shared_weak_count *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t *p_shared_weak_owners;
  unint64_t v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  caulk::concurrent::details::lf_read_sync_write_impl *v118;
  unsigned int v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  caulk::concurrent::details::lf_read_sync_write_impl *v127;
  unint64_t v128;
  char *v129;
  unint64_t v130;
  caulk::concurrent::details::lf_read_sync_write_impl *v131;
  uint64_t v132;
  _BOOL4 v133;
  uint64_t v134;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *exception;
  _QWORD *v146;
  os_unfair_lock_s *v147;
  uint64_t v148;
  XAUParameter *v149;
  os_unfair_lock_s *v150;
  os_unfair_lock_s *v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  std::vector<int>::pointer v155;
  os_unfair_lock_s *v156;
  caulk::concurrent::details::lf_read_sync_write_impl *v157;
  std::vector<int>::pointer __len;
  size_t __lena;
  void *v160;
  int v161;
  size_t v162;
  __int128 v163;
  int v164;
  void *v165;
  int v166;
  void *v167;
  void *__src[2];
  int __srca;
  void *__srcb;
  void *__srcc[2];
  void *__srcd[2];
  __int128 v173;
  _QWORD inUnit[7];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 outData;
  int v183;
  int v184;
  uint64_t v185;
  int v186;
  int v187;
  char v188;
  UInt32 outDataSize[3];
  UInt32 v190;
  std::vector<int> ioDataSize[2];
  CFTypeRef v192;
  int v193;
  CFTypeRef v194;
  int v195;
  uint64_t v196;
  int v197;
  int v198;
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (!*a2
    || (v4 = a2, (v5 = (os_unfair_lock_s *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 8))(*a2)) == 0))
  {
    v173 = 0uLL;
LABEL_9:
    v13 = -2147450879;
    goto LABEL_10;
  }
  v6 = v5;
  v7 = v5 + 14;
  os_unfair_lock_lock(v5 + 14);
  v9 = *(_QWORD *)&v6[16]._os_unfair_lock_opaque;
  v8 = *(_QWORD *)&v6[18]._os_unfair_lock_opaque;
  v10 = (uint64_t)&v6[16];
  *((_QWORD *)&v173 + 1) = v8;
  if (v8)
  {
    v11 = (unint64_t *)(v8 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (v9)
  {
    os_unfair_lock_unlock(v7);
    goto LABEL_166;
  }
  v150 = v7;
  v16 = (os_unfair_lock_s *)operator new();
  *(_QWORD *)&v16->_os_unfair_lock_opaque = 0;
  *(_QWORD *)&v16[2]._os_unfair_lock_opaque = 0;
  *(_QWORD *)&v16[4]._os_unfair_lock_opaque = v3;
  v157 = (caulk::concurrent::details::lf_read_sync_write_impl *)&v16[6];
  caulk::concurrent::details::lf_read_sync_write_impl::lf_read_sync_write_impl((caulk::concurrent::details::lf_read_sync_write_impl *)&v16[6]);
  v149 = this;
  v151 = v16;
  *(_QWORD *)&v16[10]._os_unfair_lock_opaque = 0;
  v16 += 10;
  LOWORD(v16[-2]._os_unfair_lock_opaque) = 1;
  v146 = v4;
  v147 = v16 - 2;
  v156 = v16;
  *(_QWORD *)&v16[2]._os_unfair_lock_opaque = 0;
  inUnit[0] = v3;
  v17 = 0;
  inUnit[1] = objc_opt_new();
  v175 = 0u;
  v176 = 0u;
  v177 = 0u;
  v178 = 0u;
  v179 = 0u;
  v180 = 0u;
  memset(&inUnit[2], 0, 36);
  v148 = v10;
  do
  {
    v18 = (OpaqueAudioComponentInstance *)inUnit[0];
    LODWORD(outData) = 0;
    LODWORD(ioDataSize[0].__begin_) = 4;
    if (AudioUnitGetProperty((AudioUnit)inUnit[0], 0xBu, v17, 0, &outData, (UInt32 *)ioDataSize))
      goto LABEL_104;
    v19 = outData;
    if (!(_DWORD)outData)
    {
      if (v17)
        goto LABEL_104;
      v19 = 1;
    }
    *((_DWORD *)&inUnit[2] + v17 + 1) = v19;
    memset(ioDataSize, 0, 24);
    LODWORD(outData) = 0;
    if (AudioUnitGetPropertyInfo(v18, 3u, v17, 0, (UInt32 *)&outData, 0))
      goto LABEL_104;
    std::vector<unsigned int>::resize(ioDataSize, (unint64_t)outData >> 2);
    if ((_DWORD)outData)
    {
      outDataSize[0] = outData;
      begin = ioDataSize[0].__begin_;
      Property = AudioUnitGetProperty(v18, 3u, v17, 0, ioDataSize[0].__begin_, outDataSize);
      if (Property)
      {
        LODWORD(v181) = Property;
        if (begin)
          goto LABEL_103;
        goto LABEL_104;
      }
      if (outDataSize[0] < outData)
        std::vector<unsigned int>::resize(ioDataSize, (unint64_t)outDataSize[0] >> 2);
    }
    v181 = *(_OWORD *)&ioDataSize[0].__begin_;
    begin = ioDataSize[0].__end_;
    v22 = ioDataSize[0].__begin_;
    if (ioDataSize[0].__begin_ == ioDataSize[0].__end_)
      goto LABEL_101;
    __len = ioDataSize[0].__end_;
    do
    {
      v23 = *v22;
      outDataSize[0] = 104;
      v24 = AudioUnitGetProperty((AudioUnit)inUnit[0], 4u, v17, v23, ioDataSize, outDataSize);
      if (v24)
      {
        LODWORD(outData) = v24;
        goto LABEL_72;
      }
      v25 = v198;
      v26 = v193;
      v27 = v195;
      v28 = v196;
      v29 = v197;
      *(_OWORD *)__src = 0u;
      v30 = v195;
      if ((v198 & 0x8000000) != 0)
      {
        v31 = v194;
        if ((v198 & 0x10) == 0 && v194)
          CFRetain(v194);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)outDataSize, v31);
        *(_QWORD *)&v32 = *(_QWORD *)outDataSize;
        *(_OWORD *)__src = v32;
        v30 = v195;
      }
      if (v30 == 26)
      {
        v33 = v192;
        if (v192 && (v198 & 0x10) == 0)
          CFRetain(v192);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)outDataSize, v33);
        *(void **)&v34 = __src[0];
        *((_QWORD *)&v34 + 1) = *(_QWORD *)outDataSize;
      }
      else
      {
        v34 = *(_OWORD *)__src;
      }
      outData = v34;
      v166 = v26 & (v25 << 11 >> 31);
      v183 = v166;
      __srca = v27;
      v184 = v27;
      v185 = v28;
      v186 = v29;
      v187 = v25;
      v188 = 1;
      v164 = AUFlatParameterInfoBlob::V2Builder::stringOffset((AUFlatParameterInfoBlob::V2Builder *)inUnit, (id *)&outData);
      v161 = AUFlatParameterInfoBlob::V2Builder::stringOffset((AUFlatParameterInfoBlob::V2Builder *)inUnit, (id *)&outData + 1);
      if ((v25 & 0x30000000) != 0)
      {
        v35 = (OpaqueAudioComponentInstance *)inUnit[0];
        memset(ioDataSize, 0, 24);
        outDataSize[0] = 0;
        if (!AudioUnitGetPropertyInfo((AudioUnit)inUnit[0], 0x2Du, v17, v23, outDataSize, 0))
        {
          std::vector<AUDependentParameter>::resize((char **)ioDataSize, (unint64_t)outDataSize[0] >> 3);
          if (!outDataSize[0])
            goto LABEL_76;
          v190 = outDataSize[0];
          v48 = ioDataSize[0].__begin_;
          if (!AudioUnitGetProperty(v35, 0x2Du, v17, v23, ioDataSize[0].__begin_, &v190))
          {
            if (v190 < outDataSize[0])
              std::vector<AUDependentParameter>::resize((char **)ioDataSize, (unint64_t)v190 >> 3);
LABEL_76:
            end = ioDataSize[0].__end_;
            v55 = ioDataSize[0].__begin_;
            if (ioDataSize[0].__begin_ == ioDataSize[0].__end_)
            {
              v36 = 0;
              v37 = 0;
              v68 = ioDataSize[0].__end_;
              if (ioDataSize[0].__end_)
                goto LABEL_96;
            }
            else
            {
              v154 = v25;
              v153 = *((_QWORD *)&v178 + 1) - v178;
              v155 = ioDataSize[0].__begin_;
              std::vector<unsigned long long>::reserve((void **)&v178, ((uint64_t)(*((_QWORD *)&v178 + 1) - v178) >> 3)+ (((char *)ioDataSize[0].__end_ - (char *)ioDataSize[0].__begin_) >> 3));
              v152 = (char *)end - (char *)v55;
              v57 = (unint64_t *)*((_QWORD *)&v178 + 1);
              v56 = v179;
              v58 = (unsigned int *)v55;
              do
              {
                v59 = v58[1] | ((unint64_t)*v58 << 61);
                if ((unint64_t)v57 >= v56)
                {
                  v61 = (unint64_t *)v178;
                  v62 = (uint64_t)((uint64_t)v57 - v178) >> 3;
                  v63 = v62 + 1;
                  if ((unint64_t)(v62 + 1) >> 61)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  if ((uint64_t)(v56 - v178) >> 2 > v63)
                    v63 = (uint64_t)(v56 - v178) >> 2;
                  if (v56 - (unint64_t)v178 >= 0x7FFFFFFFFFFFFFF8)
                    v64 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v64 = v63;
                  if (v64)
                    v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v64);
                  else
                    v65 = 0;
                  v66 = (unint64_t *)(v64 + 8 * v62);
                  *v66 = v59;
                  v60 = v66 + 1;
                  while (v57 != v61)
                  {
                    v67 = *--v57;
                    *--v66 = v67;
                  }
                  v56 = v64 + 8 * v65;
                  *(_QWORD *)&v178 = v66;
                  *(_QWORD *)&v179 = v56;
                  if (v61)
                    operator delete(v61);
                }
                else
                {
                  *v57 = v59;
                  v60 = v57 + 1;
                }
                *((_QWORD *)&v178 + 1) = v60;
                v58 += 2;
                v57 = v60;
              }
              while (v58 != (unsigned int *)end);
              v37 = (v153 << 29) & 0xFFFFFFFF00000000;
              v36 = v152 >> 3;
              v55 = v155;
              v68 = v155;
              v25 = v154;
              if (v155)
LABEL_96:
                operator delete(v68);
            }
            if (v55 != end)
              goto LABEL_47;
            goto LABEL_46;
          }
          if (v48)
            operator delete(v48);
        }
      }
LABEL_46:
      v36 = 0;
      v37 = 0xFFFFFFFF00000000;
LABEL_47:
      v38 = v25 & 0xF7FFFFEF;
      v39 = (v17 << 61) | v23;
      v40 = v37 & 0xFFFFFFFF00000000 | v36;
      v41 = v177;
      if ((unint64_t)v177 >= *((_QWORD *)&v177 + 1))
      {
        v43 = *((_QWORD *)&v176 + 1);
        v44 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v177 - *((_QWORD *)&v176 + 1)) >> 2);
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) > 0x4EC4EC4EC4EC4ECLL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x9D89D89D89D89D8ALL * ((uint64_t)(*((_QWORD *)&v177 + 1) - *((_QWORD *)&v176 + 1)) >> 2) > v45)
          v45 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*((_QWORD *)&v177 + 1) - *((_QWORD *)&v176 + 1)) >> 2);
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)&v177 + 1) - *((_QWORD *)&v176 + 1)) >> 2)) >= 0x276276276276276)
          v46 = 0x4EC4EC4EC4EC4ECLL;
        else
          v46 = v45;
        if (v46)
        {
          if (v46 > 0x4EC4EC4EC4EC4ECLL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v47 = (char *)operator new(52 * v46);
        }
        else
        {
          v47 = 0;
        }
        v49 = &v47[52 * v44];
        *(_DWORD *)v49 = -1;
        *((_DWORD *)v49 + 1) = v164;
        *((_QWORD *)v49 + 1) = v39;
        *((_DWORD *)v49 + 4) = v161;
        *((_DWORD *)v49 + 5) = v166;
        *((_DWORD *)v49 + 6) = __srca;
        *(_QWORD *)(v49 + 28) = v28;
        *((_DWORD *)v49 + 9) = v29;
        *((_DWORD *)v49 + 10) = v38;
        *(_QWORD *)(v49 + 44) = v40;
        v50 = v49;
        if (v41 == v43)
        {
          begin = __len;
        }
        else
        {
          begin = __len;
          do
          {
            v51 = *(_OWORD *)(v41 - 52);
            v52 = *(_OWORD *)(v41 - 36);
            v53 = *(_OWORD *)(v41 - 20);
            *((_DWORD *)v50 - 1) = *(_DWORD *)(v41 - 4);
            *(_OWORD *)(v50 - 20) = v53;
            *(_OWORD *)(v50 - 36) = v52;
            *(_OWORD *)(v50 - 52) = v51;
            v50 -= 52;
            v41 -= 52;
          }
          while (v41 != v43);
          v41 = *((_QWORD *)&v176 + 1);
        }
        v42 = v49 + 52;
        *((_QWORD *)&v176 + 1) = v50;
        *((_QWORD *)&v177 + 1) = &v47[52 * v46];
        if (v41)
          operator delete((void *)v41);
      }
      else
      {
        *(_DWORD *)v177 = -1;
        *(_DWORD *)(v41 + 4) = v164;
        *(_QWORD *)(v41 + 8) = v39;
        *(_DWORD *)(v41 + 16) = v161;
        *(_DWORD *)(v41 + 20) = v166;
        *(_DWORD *)(v41 + 24) = __srca;
        *(_QWORD *)(v41 + 28) = v28;
        *(_DWORD *)(v41 + 36) = v29;
        *(_DWORD *)(v41 + 40) = v38;
        v42 = (char *)(v41 + 52);
        *(_QWORD *)(v41 + 44) = v40;
        begin = __len;
      }
      *(_QWORD *)&v177 = v42;
      if (v188)
        caulk::__expected_detail::destroy<AU::Property::Attributes::details::AUParameterInfoValue<1021u>::Wrapper,(void *)0>((uint64_t)&outData);
LABEL_72:
      ++v22;
    }
    while (v22 != begin);
    begin = (std::vector<int>::pointer)v181;
LABEL_101:
    if (begin)
    {
      *((_QWORD *)&v181 + 1) = begin;
LABEL_103:
      operator delete(begin);
    }
LABEL_104:
    ++v17;
  }
  while (v17 != 8);
  v69 = (void *)*((_QWORD *)&v176 + 1);
  v70 = (void *)v177;
  v71 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v177 - *((_QWORD *)&v176 + 1)) >> 2);
  v72 = 126 - 2 * __clz(v71);
  v73 = v177 - *((_QWORD *)&v176 + 1);
  if ((_QWORD)v177 == *((_QWORD *)&v176 + 1))
    v74 = 0;
  else
    v74 = v72;
  std::__introsort<std::_ClassicAlgPolicy,AUParameterCache::AUParameterCache(OpaqueAudioComponentInstance *)::$_0 &,AUFlatParameterInfoBlob::Parameter *,false>(*((uint64_t *)&v176 + 1), v177, v74, 1);
  v75 = (void *)*((_QWORD *)&v175 + 1);
  __srcb = (void *)v175;
  v76 = *((_QWORD *)&v175 + 1) - v175;
  v77 = (void *)*((_QWORD *)&v178 + 1);
  v167 = (void *)v178;
  v78 = *((_QWORD *)&v178 + 1) - v178;
  v165 = (void *)*((_QWORD *)&v179 + 1);
  __lena = v73;
  v160 = (void *)v180;
  v79 = v180 - *((_QWORD *)&v179 + 1);
  v162 = *((_QWORD *)&v175 + 1) - v175 + v73 + *((_QWORD *)&v178 + 1) - v178 + v180 - *((_QWORD *)&v179 + 1) + 64;
  v80 = operator new(v162);
  v81 = v80;
  v82 = 0xCCCCCCCCCCCCCCCDLL * (v76 >> 2);
  *(_QWORD *)&v83 = 0xFFFFFFFF00000000;
  *((_QWORD *)&v83 + 1) = 0xFFFFFFFF00000000;
  *((_OWORD *)v80 + 2) = v83;
  *((_OWORD *)v80 + 3) = v83;
  v84 = *(_OWORD *)((char *)&inUnit[4] + 4);
  *(_OWORD *)v80 = *(_OWORD *)((char *)&inUnit[2] + 4);
  *((_OWORD *)v80 + 1) = v84;
  if (HIDWORD(v82))
    goto LABEL_212;
  v80[8] = v82;
  v80[9] = 64;
  if (v75 == __srcb)
  {
    v85 = 0;
  }
  else
  {
    memmove(v80 + 16, __srcb, v76);
    v85 = 4 * (v76 >> 2);
  }
  if (HIDWORD(v71))
    goto LABEL_212;
  v86 = (v85 + 64);
  v81[10] = v71;
  v81[11] = v86;
  if (v70 == v69)
  {
    v87 = 0;
  }
  else
  {
    memmove((char *)v81 + v86, v69, __lena);
    v87 = 52 * v81[10];
  }
  if (v78 >> 35
    || ((v88 = (v87 + v86), v81[12] = v78 >> 3, v81[13] = v88, v77 == v167)
      ? (v89 = 0)
      : (memmove((char *)v81 + v88, v167, v78), v89 = 8 * v81[12]),
        HIDWORD(v79)))
  {
LABEL_212:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_1E290A260;
  }
  v90 = (v89 + v88);
  v81[14] = v79;
  v81[15] = v90;
  if (v160 == v165)
  {
    v91 = 0;
  }
  else
  {
    memmove((char *)v81 + v90, v165, v79);
    v91 = v81[14];
  }
  this = v149;
  if (v162 < (v90 + v91))
    std::terminate();
  v92 = (_QWORD *)operator new();
  *v92 = &off_1E2917EC0;
  v92[1] = 0;
  v92[2] = 0;
  v92[3] = v81;
  *(_QWORD *)&v93 = v81;
  *((_QWORD *)&v93 + 1) = v92;
  v163 = v93;
  os_unfair_lock_lock(v151 + 7);
  v94 = caulk::concurrent::details::lf_read_sync_write_impl::begin_mutate(v157);
  if (v94)
    v95 = v147;
  else
    v95 = (os_unfair_lock_s *)((char *)&v147->_os_unfair_lock_opaque + 1);
  p_os_unfair_lock_opaque = &v156[4 * (v94 == 0)]._os_unfair_lock_opaque;
  if (LOBYTE(v95->_os_unfair_lock_opaque))
    p_os_unfair_lock_opaque = (_OWORD *)std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)p_os_unfair_lock_opaque);
  else
    *((_BYTE *)&v147->_os_unfair_lock_opaque + (v94 == 0)) = 1;
  *p_os_unfair_lock_opaque = v163;
  caulk::concurrent::details::lf_read_sync_write_impl::end_mutate(v157);
  *((_BYTE *)&v147->_os_unfair_lock_opaque + v94) = 0;
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v156[4 * v94]);
  os_unfair_lock_unlock(v151 + 7);
  if (v165)
    operator delete(v165);
  if (v167)
    operator delete(v167);
  if (v69)
    operator delete(v69);
  if (__srcb)
    operator delete(__srcb);

  inUnit[0] = v151;
  v97 = (std::__shared_weak_count *)operator new();
  v97->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v97->__shared_owners_;
  v97->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917D38;
  v97->__shared_weak_owners_ = 0;
  v97[1].__vftable = (std::__shared_weak_count_vtbl *)v151;
  *(_QWORD *)&v99 = v151;
  *((_QWORD *)&v99 + 1) = v97;
  v100 = *(std::__shared_weak_count **)&v151[2]._os_unfair_lock_opaque;
  if (!v100)
  {
    do
      v104 = __ldxr(p_shared_owners);
    while (__stxr(v104 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v97->__shared_weak_owners_;
    do
      v106 = __ldxr(p_shared_weak_owners);
    while (__stxr(v106 + 1, p_shared_weak_owners));
    *(_QWORD *)&v151->_os_unfair_lock_opaque = v151;
    *(_QWORD *)&v151[2]._os_unfair_lock_opaque = v97;
    goto LABEL_149;
  }
  if (v100->__shared_owners_ == -1)
  {
    do
      v101 = __ldxr(p_shared_owners);
    while (__stxr(v101 + 1, p_shared_owners));
    *(_OWORD *)__srcc = v99;
    v102 = (unint64_t *)&v97->__shared_weak_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
    *(_QWORD *)&v151->_os_unfair_lock_opaque = v151;
    *(_QWORD *)&v151[2]._os_unfair_lock_opaque = v97;
    std::__shared_weak_count::__release_weak(v100);
    v99 = *(_OWORD *)__srcc;
    do
LABEL_149:
      v107 = __ldaxr(p_shared_owners);
    while (__stlxr(v107 - 1, p_shared_owners));
    if (!v107)
    {
      *(_OWORD *)__srcd = v99;
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
      v99 = *(_OWORD *)__srcd;
    }
  }
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
  v173 = v99;
  v4 = v146;
  if (v108)
  {
    v109 = (unint64_t *)&v108->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  *(_OWORD *)inUnit = v173;
  if (*((_QWORD *)&v173 + 1))
  {
    v111 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v148, (__int128 *)inUnit);
  v113 = (std::__shared_weak_count *)inUnit[1];
  if (inUnit[1])
  {
    v114 = (unint64_t *)(inUnit[1] + 8);
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v9 = v173;
  os_unfair_lock_unlock(v150);
  if (!(_QWORD)v173)
    goto LABEL_9;
LABEL_166:
  v117 = *((unsigned int *)v4 + 2);
  v116 = *((unsigned int *)v4 + 3);
  v118 = (caulk::concurrent::details::lf_read_sync_write_impl *)(v9 + 24);
  v119 = caulk::concurrent::details::lf_read_sync_write_impl::begin_access((caulk::concurrent::details::lf_read_sync_write_impl *)(v9 + 24));
  if (!*(_BYTE *)(v9 + 24 + v119 + 8))
  {
    __break(1u);
    return;
  }
  v120 = v9 + 16 * v119;
  v122 = *(_QWORD *)(v120 + 40);
  v121 = *(std::__shared_weak_count **)(v120 + 48);
  if (v121)
  {
    v123 = (unint64_t *)&v121->__shared_owners_;
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
  caulk::concurrent::details::lf_read_sync_write_impl::end_access(v118);
  v125 = *(_QWORD *)(v122 + 40);
  if (!*(_QWORD *)(v122 + 40))
    goto LABEL_190;
  v126 = v117 | (v116 << 61);
  v118 = (caulk::concurrent::details::lf_read_sync_write_impl *)(v122 + (*(uint64_t *)(v122 + 40) >> 32));
  v127 = (caulk::concurrent::details::lf_read_sync_write_impl *)((char *)v118 + 52 * v125);
  do
  {
    v128 = v125 >> 1;
    v129 = (char *)v118 + 52 * (v125 >> 1);
    v130 = *((_QWORD *)v129 + 1);
    v131 = (caulk::concurrent::details::lf_read_sync_write_impl *)(v129 + 52);
    v125 += ~(v125 >> 1);
    if (v130 < v126)
      v118 = v131;
    else
      v125 = v128;
  }
  while (v125);
  if (v118 == v127)
  {
LABEL_190:
    v134 = 0;
    v133 = 1;
LABEL_191:
    if (!v121)
    {
      if (v133)
        goto LABEL_201;
      *(_QWORD *)this = v134;
      *((_QWORD *)this + 1) = v118;
      *((_QWORD *)this + 2) = v122;
      *((_QWORD *)this + 3) = 0;
      *((_BYTE *)this + 32) = 1;
      goto LABEL_11;
    }
    v140 = (unint64_t *)&v121->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
      goto LABEL_200;
    if (!v133)
      goto LABEL_202;
LABEL_201:
    v13 = -10878;
LABEL_10:
    *(_DWORD *)this = v13;
    *((_BYTE *)this + 32) = 0;
    goto LABEL_11;
  }
  v132 = *((_QWORD *)v118 + 1);
  v133 = v132 != v126;
  if (v132 == v126)
    v134 = v122;
  else
    v134 = 0;
  if (v132 != v126 || v121 == 0)
    goto LABEL_191;
  v136 = (unint64_t *)&v121->__shared_owners_;
  do
    v137 = __ldxr(v136);
  while (__stxr(v137 + 1, v136));
  v138 = (unint64_t *)&v121->__shared_owners_;
  do
    v139 = __ldaxr(v138);
  while (__stlxr(v139 - 1, v138));
  if (v139)
  {
    v134 = v122;
    goto LABEL_202;
  }
  LOBYTE(v133) = 0;
  v134 = v122;
LABEL_200:
  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
  std::__shared_weak_count::__release_weak(v121);
  if (v133)
    goto LABEL_201;
LABEL_202:
  *(_QWORD *)this = v134;
  *((_QWORD *)this + 1) = v118;
  v142 = (unint64_t *)&v121->__shared_owners_;
  *((_QWORD *)this + 2) = v122;
  *((_QWORD *)this + 3) = v121;
  do
    v143 = __ldxr(v142);
  while (__stxr(v143 + 1, v142));
  *((_BYTE *)this + 32) = 1;
  do
    v144 = __ldaxr(v142);
  while (__stlxr(v144 - 1, v142));
  if (!v144)
  {
    ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
    std::__shared_weak_count::__release_weak(v121);
  }
LABEL_11:
  if (*((_QWORD *)&v173 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v173 + 1) + 16))(*((_QWORD *)&v173 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v173 + 1));
    }
  }
}

void sub_18F0CC1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_unfair_lock_t lock, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,__int128 a31,char a32,uint64_t a33,uint64_t a34,AUParameterCache *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  std::unique_ptr<AUParameterCache>::reset[abi:ne180100](&a35);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void DSPGraph::DenormalEliminatorBox::~DenormalEliminatorBox(DSPGraph::DenormalEliminatorBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::DenormalEliminatorBox::ClassName(DSPGraph::DenormalEliminatorBox *this)
{
  return "DenormalEliminatorBox";
}

uint64_t DSPGraph::DenormalEliminatorBox::canBypass(DSPGraph::DenormalEliminatorBox *this)
{
  return 1;
}

uint64_t DSPGraph::DenormalEliminatorBox::isBypassed(DSPGraph::DenormalEliminatorBox *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 772);
  return v1 & 1;
}

uint64_t DSPGraph::DenormalEliminatorBox::bypass(uint64_t this, unsigned __int8 a2)
{
  atomic_store(a2, (unsigned __int8 *)(this + 772));
  return this;
}

uint64_t DSPGraph::DenormalEliminatorBox::canProcessInPlace(DSPGraph::DenormalEliminatorBox *this)
{
  return 1;
}

double DSPGraph::DenormalEliminatorBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 6.02437133e175;
  *(_OWORD *)a1 = xmmword_18F117330;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

_QWORD *DSPGraph::DenormalEliminatorBox::process(DSPGraph::DenormalEliminatorBox *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t StatusReg;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const float *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _QWORD *result;
  _QWORD *v25;
  _OWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  float __B;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  if ((*(unsigned int (**)(DSPGraph::DenormalEliminatorBox *))(*(_QWORD *)this + 48))(this))
  {
    v4 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 9) == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v43, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v42, "in");
      v37 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v37 = (_QWORD *)*v37;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v41, v37, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v43, 1410, &v42, &v41);
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v6 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v6)
    {
      std::string::basic_string[abi:ne180100]<0>(&v43, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v42, "out");
      v39 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v39 = (_QWORD *)*v39;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v41, v39, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v43, 1418, &v42, &v41);
    }
    v7 = (_QWORD *)(*(_QWORD *)(v5 + 56) + 80);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    DSPGraph::SimpleABL::copy(v7, (DSPGraph::SimpleABL *)(*(_QWORD *)(v8 + 56) + 80), 1);
  }
  else
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg | 0x1000000);
    v10 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v10)
    {
      std::string::basic_string[abi:ne180100]<0>(&v43, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v42, "out");
      v38 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v38 = (_QWORD *)*v38;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v41, v38, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v43, 1418, &v42, &v41);
    }
    v11 = **(unsigned int **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10) + 56) + 80);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 16 * v11;
      do
      {
        __B = 0.0;
        v14 = *((_QWORD *)this + 8);
        if (*((_QWORD *)this + 9) == v14)
        {
          std::string::basic_string[abi:ne180100]<0>(&v43, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v42, "in");
          v33 = (_QWORD *)((char *)this + 32);
          if (*((char *)this + 55) < 0)
            v33 = (_QWORD *)*v33;
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v41, v33, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
          DSPGraph::ThrowException(1919837985, &v43, 1410, &v42, &v41);
        }
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
        v16 = *((_QWORD *)this + 11);
        if (*((_QWORD *)this + 12) == v16)
        {
          std::string::basic_string[abi:ne180100]<0>(&v43, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v42, "out");
          v34 = (_QWORD *)((char *)this + 32);
          if (*((char *)this + 55) < 0)
            v34 = (_QWORD *)*v34;
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v41, v34, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
          DSPGraph::ThrowException(1919837985, &v43, 1418, &v42, &v41);
        }
        v17 = *(const float **)(*(_QWORD *)(*(_QWORD *)(v15 + 56) + 80) + v12 + 16);
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
        vDSP_vsadd(v17, 1, &__B, *(float **)(*(_QWORD *)(*(_QWORD *)(v18 + 56) + 80) + v12 + 16), 1, a2);
        v12 += 16;
      }
      while (v13 != v12);
    }
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
  }
  v19 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v19)
  {
    std::string::basic_string[abi:ne180100]<0>(&v43, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v42, "in");
    v35 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v35 = (_QWORD *)*v35;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v41, v35, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v43, 1410, &v42, &v41);
  }
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
  v21 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v21)
  {
    std::string::basic_string[abi:ne180100]<0>(&v43, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v42, "in");
    v36 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v36 = (_QWORD *)*v36;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v41, v36, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v43, 1410, &v42, &v41);
  }
  v22 = *(_DWORD *)(*(_QWORD *)(v20 + 56) + 72);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
  result = (_QWORD *)*((_QWORD *)this + 11);
  v25 = (_QWORD *)*((_QWORD *)this + 12);
  if (result != v25)
  {
    v26 = (_OWORD *)(*(_QWORD *)(v23 + 56) + 8);
    v27 = result;
    do
    {
      v28 = *v27;
      v27 += 4;
      v29 = *(_QWORD *)((*(uint64_t (**)(void))(v28 + 40))() + 56);
      v31 = v26[2];
      v30 = v26[3];
      v32 = v26[1];
      *(_OWORD *)(v29 + 8) = *v26;
      *(_OWORD *)(v29 + 24) = v32;
      *(_OWORD *)(v29 + 40) = v31;
      *(_OWORD *)(v29 + 56) = v30;
      *(_DWORD *)(v29 + 72) = v22;
      result = v27;
    }
    while (v27 != v25);
  }
  return result;
}

void sub_18F0CC8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  unint64_t v25;
  uint64_t v26;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (*(char *)(v26 - 49) < 0)
    operator delete(*(void **)(v26 - 72));
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), v25);
  _Unwind_Resume(exception_object);
}

void MP4BoxParser_MovieExtends::~MP4BoxParser_MovieExtends(MP4BoxParser_MovieExtends *this)
{
  MP4BoxParser_MovieExtends::~MP4BoxParser_MovieExtends(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E2909040;
  if (*((_BYTE *)this + 56))
  {
    v2 = *((_QWORD *)this + 8);
    if (v2)
    {
      std::__list_imp<MP4BoxInfo>::clear(*((uint64_t **)this + 8));
      MEMORY[0x193FFE460](v2, 0x1020C4062D53EE8);
    }
  }
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t MP4BoxParser_MovieExtends::Init(__n128 ***this)
{
  uint64_t result;
  __n128 **v3;
  uint64_t v4;
  int64_t v5;
  __n128 **v6;
  int64_t v7;

  result = MP4BoxParser::Initialize((MP4BoxParser *)this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) == 1836475768)
    {
      if (*((_BYTE *)this + 56))
      {
        v3 = (__n128 **)operator new();
        *v3 = (__n128 *)v3;
        v3[1] = (__n128 *)v3;
        v3[2] = 0;
        this[8] = v3;
        v4 = (uint64_t)this[1];
        v5 = ((unsigned int (*)(__n128 ***))(*this)[3])(this);
        v6 = this[3];
        v7 = (int64_t)v6 - ((unsigned int (*)(__n128 ***))(*this)[3])(this);
        return FillMP4BoxTable(v4, v5, v7, this[8], 1, 0);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

uint64_t MP4BoxParser_MovieExtends::GetOverallDurationIncludingFragments(MP4BoxParser_MovieExtends *this, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;
  void (**v8)(MP4BoxParser *__hidden);
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v3 = a2[1];
  if ((unint64_t *)v3 == a2)
    return 0;
  while (*(_DWORD *)(v3 + 16) != 1835362404)
  {
    v3 = *(_QWORD *)(v3 + 8);
    if ((unint64_t *)v3 == a2)
      return 0;
  }
  v8 = &off_1E2902718;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v9);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 8;
  v8 = &off_1E2909930;
  v15 = 0;
  if (MP4BoxParser_MovieExtendsHeader::Init((MP4BoxParser **)&v8))
  {
    v5 = v9;
    v8 = &off_1E2902718;
    v9 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return 0;
  }
  v7 = v9;
  *a3 = v15;
  v8 = &off_1E2902718;
  v9 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return 1;
}

void sub_18F0CCC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void MP4BoxParser_MovieExtends::GetTrackFragmentDefaultsMap(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v4;
  uint64_t v5;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t **v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t **v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t *v35;
  BOOL v36;
  _QWORD *v37;
  _QWORD *i;
  uint64_t **v39;
  char *v40;
  __int128 v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t **v48;
  uint64_t *v49;
  uint64_t v50;
  void (**v51)(MP4BoxParser *__hidden);
  uint64_t v52;
  char v53;
  int v54;
  uint64_t v55;
  char v56;
  int v57;
  unsigned int v58;
  _QWORD v59[3];

  v59[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    return;
  v4 = &v49;
  v49 = 0;
  v50 = 0;
  v48 = &v49;
  v5 = *(_QWORD *)(v2 + 8);
  if (v5 == v2)
    goto LABEL_24;
  v7 = 0;
  v8 = v59;
  v9 = &v52;
  v10 = 1;
  do
  {
    v11 = 0;
    v12 = v7;
    v7 = v10;
    while (*(_DWORD *)(v5 + 16) != 1953654136)
    {
LABEL_8:
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == v2)
        goto LABEL_24;
    }
    if (v11 != v12)
    {
      ++v11;
      goto LABEL_8;
    }
    v13 = v4;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(v5 + 32);
    v51 = &off_1E2902718;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 88))(v14, v15);
    v47 = v9;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v51 = &off_1E29090A0;
    v57 = 8;
    v58 = 0;
    *v8 = -1;
    v8[1] = -1;
    v16 = v8;
    if (!MP4BoxParser_TrackExtends::Init((MP4BoxParser_TrackExtends *)&v51))
    {
      v17 = v58;
      v18 = v49;
      v19 = v4;
      if (v49)
      {
        while (1)
        {
          while (1)
          {
            v4 = (uint64_t **)v18;
            v20 = *((_DWORD *)v18 + 7);
            if (v58 >= v20)
              break;
            v18 = *v4;
            v19 = v4;
            if (!*v4)
              goto LABEL_18;
          }
          if (v20 >= v58)
            break;
          v18 = v4[1];
          if (!v18)
          {
            v19 = v4 + 1;
            goto LABEL_18;
          }
        }
      }
      else
      {
LABEL_18:
        v21 = operator new(0x30uLL);
        v21[7] = v17;
        *((_OWORD *)v21 + 2) = *v16;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
        *((_QWORD *)v21 + 2) = v4;
        *v19 = (uint64_t *)v21;
        if (*v48)
        {
          v48 = (uint64_t **)*v48;
          v21 = *v19;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v49, (uint64_t *)v21);
        ++v50;
      }
    }
    v22 = v52;
    v51 = &off_1E2902718;
    v52 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v2 = *(_QWORD *)(a1 + 64);
    v10 = v7 + 1;
    v5 = *(_QWORD *)(v2 + 8);
    v4 = v13;
    v8 = v16;
    v9 = v47;
  }
  while (v5 != v2);
LABEL_24:
  if (&v48 != (uint64_t ***)a2 && v50)
  {
    v23 = v48;
    if (*(_QWORD *)(a2 + 16))
    {
      v24 = *(uint64_t **)a2;
      v26 = (uint64_t **)(a2 + 8);
      v25 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = a2 + 8;
      *(_QWORD *)(v25 + 16) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      if (v24[1])
        v27 = v24[1];
      else
        v27 = (uint64_t)v24;
      if (!v27)
      {
        v37 = 0;
        goto LABEL_56;
      }
      v28 = std::__tree<AUObserverController::AddressOriginator>::_DetachedTreeCache::__detach_next(v27);
      if (v23 == v4)
      {
        v30 = (_QWORD *)v27;
        v23 = v4;
      }
      else
      {
        v29 = v23;
        do
        {
          v30 = v28;
          v31 = *((_DWORD *)v29 + 7);
          *(_DWORD *)(v27 + 28) = v31;
          *(_OWORD *)(v27 + 32) = *((_OWORD *)v29 + 2);
          v32 = *v26;
          v33 = (uint64_t **)(a2 + 8);
          v34 = (uint64_t **)(a2 + 8);
          if (*v26)
          {
            do
            {
              while (1)
              {
                v33 = (uint64_t **)v32;
                if (v31 >= *((_DWORD *)v32 + 7))
                  break;
                v32 = (uint64_t *)*v32;
                v34 = v33;
                if (!*v33)
                  goto LABEL_39;
              }
              v32 = (uint64_t *)v32[1];
            }
            while (v32);
            v34 = v33 + 1;
          }
LABEL_39:
          if (v28)
            v28 = std::__tree<AUObserverController::AddressOriginator>::_DetachedTreeCache::__detach_next((uint64_t)v28);
          else
            v28 = 0;
          v35 = v29[1];
          if (v35)
          {
            do
            {
              v23 = (uint64_t **)v35;
              v35 = (uint64_t *)*v35;
            }
            while (v35);
          }
          else
          {
            do
            {
              v23 = (uint64_t **)v29[2];
              v36 = *v23 == (uint64_t *)v29;
              v29 = v23;
            }
            while (!v36);
          }
          if (!v30)
            break;
          v27 = (uint64_t)v30;
          v29 = v23;
        }
        while (v23 != v4);
      }
      if (v28)
      {
        for (i = (_QWORD *)v28[2]; i; i = (_QWORD *)i[2])
          v28 = i;
        v37 = v28;
LABEL_56:
      }
    }
    if (v23 != v4)
    {
      v39 = (uint64_t **)(a2 + 8);
      do
      {
        v40 = (char *)operator new(0x30uLL);
        v41 = *(_OWORD *)((char *)v23 + 28);
        *((_DWORD *)v40 + 11) = *((_DWORD *)v23 + 11);
        *(_OWORD *)(v40 + 28) = v41;
        v42 = *v39;
        v43 = (uint64_t **)(a2 + 8);
        v44 = (uint64_t **)(a2 + 8);
        if (*v39)
        {
          do
          {
            while (1)
            {
              v43 = (uint64_t **)v42;
              if (*((_DWORD *)v40 + 7) >= *((_DWORD *)v42 + 7))
                break;
              v42 = (uint64_t *)*v42;
              v44 = v43;
              if (!*v43)
                goto LABEL_65;
            }
            v42 = (uint64_t *)v42[1];
          }
          while (v42);
          v44 = v43 + 1;
        }
LABEL_65:
        v45 = v23[1];
        if (v45)
        {
          do
          {
            v46 = (uint64_t **)v45;
            v45 = (uint64_t *)*v45;
          }
          while (v45);
        }
        else
        {
          do
          {
            v46 = (uint64_t **)v23[2];
            v36 = *v46 == (uint64_t *)v23;
            v23 = v46;
          }
          while (!v36);
        }
        v23 = v46;
      }
      while (v46 != v4);
    }
  }
}

void sub_18F0CD07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  _Unwind_Resume(a1);
}

CFIndex AudioComponentRegistrationInfo::parseInfoPlistArray(int a1, uint64_t a2, CFArrayRef *a3, uint64_t a4)
{
  CFIndex result;
  unint64_t v7;
  uint64_t v8;
  const __CFDictionary *v9;
  int String;
  const void *Value;
  const void *v12;
  CFTypeID v13;
  NSObject *v14;
  _QWORD *v15;
  CFTypeID v16;
  CFTypeRef v17;
  CFTypeRef v18;
  int v19;
  const void *v20;
  const void *v21;
  CFTypeID v22;
  CFTypeRef v23;
  uint64_t v24;
  std::runtime_error *v25;
  std::runtime_error *exception;
  std::runtime_error *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  int v30;
  CFTypeRef v33;
  const void *v34;
  const void *v35;
  const void *v36;
  unsigned int v37;
  __CFString *v38;
  CFTypeRef v39;
  CFTypeRef cf;
  CFTypeRef v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45[2];
  CFDictionaryRef theDict;
  char v47;
  _BYTE buf[12];
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  __CFString *v54;
  __int16 v55;
  const __CFDictionary *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  result = CFArrayGetCount(*a3);
  if ((int)result >= 1)
  {
    v7 = 0;
    v8 = result;
    do
    {
      if (!*a3)
      {
        v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        applesauce::CF::construct_error(v25);
      }
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&theDict, *a3, v7);
      if (!v47)
        goto LABEL_21;
      v9 = theDict;
      cf = 0;
      v41 = 0;
      v38 = 0;
      v39 = 0;
      v37 = 0;
      if (!Get4CCOrNumber(theDict, CFSTR("type"), &v42, (const __CFString **)&v38)
        || !Get4CCOrNumber(v9, CFSTR("subtype"), &v43, (const __CFString **)&v38)
        || !Get4CCOrNumber(v9, CFSTR("manufacturer"), &v44, (const __CFString **)&v38)
        || !GetString(v9, CFSTR("name"), (const __CFString **)&v41, (const __CFString **)&v38)
        || !GetNumber(v9, CFSTR("version"), &v37, (const __CFString **)&v38)
        || (String = GetString(v9, CFSTR("class"), (const __CFString **)&v39, (const __CFString **)&v38),
            (String | ((a1 & 4) >> 2) | GetString(v9, CFSTR("factoryFunction"), (const __CFString **)&cf, (const __CFString **)&v38)) != 1))
      {
        if (gAudioComponentLogCategory)
        {
          v14 = *(NSObject **)gAudioComponentLogCategory;
        }
        else
        {
          v15 = (_QWORD *)operator new();
          v15[1] = 0;
          v14 = os_log_create("com.apple.coreaudio", "audiocomp");
          *v15 = v14;
          gAudioComponentLogCategory = (uint64_t)v15;
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AudioComponentRegistrationInfo.cpp";
          v49 = 1024;
          v50 = 196;
          v51 = 2112;
          v52 = a2;
          v53 = 2112;
          v54 = v38;
          v55 = 2112;
          v56 = v9;
          _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %@: trouble parsing Info.plist's AudioComponents, key %@; entry: %@",
            buf,
            0x30u);
        }
        goto LABEL_21;
      }
      GetNumber(v9, CFSTR("flags"), v45, (const __CFString **)&v38);
      Value = CFDictionaryGetValue(v9, CFSTR("sandboxSafe"));
      v12 = Value;
      if (Value)
      {
        v13 = CFGetTypeID(Value);
        if (v13 != CFBooleanGetTypeID())
        {
          v16 = CFGetTypeID(v12);
          if (v16 != CFNumberGetTypeID())
            goto LABEL_26;
          *(_DWORD *)buf = 0;
          CFNumberGetValue((CFNumberRef)v12, kCFNumberSInt32Type, buf);
          if (!*(_DWORD *)buf)
            goto LABEL_26;
LABEL_25:
          v45[0] |= 2u;
          goto LABEL_26;
        }
        if (CFBooleanGetValue((CFBooleanRef)v12))
          goto LABEL_25;
      }
LABEL_26:
      v45[1] = 0;
      v35 = 0;
      v36 = 0;
      v17 = cf;
      if (cf)
      {
        CFRetain(cf);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v17);
        v29 = *(CFTypeRef *)buf;
        v36 = *(const void **)buf;
      }
      else
      {
        v29 = 0;
      }
      v18 = v39;
      if (v39)
      {
        CFRetain(v39);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v18);
        v28 = *(CFTypeRef *)buf;
        v35 = *(const void **)buf;
        v19 = 20;
      }
      else
      {
        v28 = 0;
        v19 = a1;
      }
      v30 = v19;
      if (!theDict)
      {
        v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v27, "Could not construct");
      }
      v20 = CFDictionaryGetValue(theDict, CFSTR("tags"));
      v21 = v20;
      if (!v20)
        goto LABEL_37;
      CFRetain(v20);
      v22 = CFGetTypeID(v21);
      if (v22 != CFArrayGetTypeID())
      {
        CFRelease(v21);
LABEL_37:
        buf[0] = 0;
        buf[8] = 0;
        v34 = 0;
        std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
        v21 = 0;
        goto LABEL_38;
      }
      *(_QWORD *)buf = v21;
      buf[8] = 1;
      CFRetain(v21);
      v34 = v21;
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
LABEL_38:
      v23 = v41;
      if (v41)
        CFRetain(v41);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v33, v23);
      AudioComponentRegistrationInfo::AudioComponentRegistrationInfo((uint64_t)buf, (uint64_t)&v42, v30, &v33, v37, &v36, &v35, &v34);
      if (v33)
        CFRelease(v33);
      v24 = *(_QWORD *)(a4 + 24);
      if (!v24)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v24 + 48))(v24, buf);
      AudioComponentRegistrationInfo::~AudioComponentRegistrationInfo((AudioComponentRegistrationInfo *)buf);
      if (v21)
        CFRelease(v21);
      if (v28)
        CFRelease(v28);
      if (v29)
        CFRelease(v29);
LABEL_21:
      result = std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theDict);
      ++v7;
    }
    while (v8 != v7);
  }
  return result;
}

void sub_18F0CD614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t Get4CCOrNumber(const __CFDictionary *a1, const __CFString *a2, unsigned int *a3, const __CFString **a4)
{
  uint64_t result;
  const __CFString *v8;
  CFTypeID v9;
  CFTypeID v10;
  char buffer[4];

  *a3 = 0;
  result = (uint64_t)CFDictionaryGetValue(a1, a2);
  if (!result)
  {
LABEL_9:
    *a4 = a2;
    return result;
  }
  v8 = (const __CFString *)result;
  v9 = CFGetTypeID((CFTypeRef)result);
  if (v9 != CFStringGetTypeID())
  {
    v10 = CFGetTypeID(v8);
    if (v10 == CFNumberGetTypeID() && CFNumberGetValue((CFNumberRef)v8, kCFNumberSInt32Type, a3))
      return 1;
    result = 0;
    goto LABEL_9;
  }
  if (CFStringGetLength(v8) == 4)
  {
    CFStringGetCString(v8, buffer, 5, 0x600u);
    *a3 = bswap32(*(unsigned int *)buffer);
    return 1;
  }
  return 0;
}

uint64_t GetString(const __CFDictionary *a1, const __CFString *a2, const __CFString **a3, const __CFString **a4)
{
  uint64_t result;
  const __CFString *v8;
  CFTypeID v9;

  *a3 = 0;
  result = (uint64_t)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v8 = (const __CFString *)result;
    v9 = CFGetTypeID((CFTypeRef)result);
    if (v9 == CFStringGetTypeID())
    {
      *a3 = v8;
      return 1;
    }
    result = 0;
  }
  *a4 = a2;
  return result;
}

uint64_t GetNumber(const __CFDictionary *a1, const __CFString *a2, unsigned int *a3, const __CFString **a4)
{
  const __CFNumber *Value;
  const __CFNumber *v8;
  CFTypeID v9;
  uint64_t result;

  *a3 = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v8 = Value;
    v9 = CFGetTypeID(Value);
    if (v9 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue(v8, kCFNumberSInt32Type, a3))
        return 1;
    }
  }
  result = 0;
  *a4 = a2;
  return result;
}

uint64_t std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

uint64_t AudioFileObject::Create(AudioFileObject *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  int v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v6 = AudioFileObject::CreateDataFile(this, a2, &v11);
  if ((_DWORD)v6)
  {
    v7 = v6;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v13 = "AudioFileObject.cpp";
      v14 = 1024;
      v15 = 53;
      v8 = MEMORY[0x1E0C81028];
      v9 = "%25s:%-5d  CreateDataFile failed";
LABEL_7:
      _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x12u);
    }
  }
  else
  {
    AudioFileObject::SetURL(this, a2);
    AudioFileObject::OpenFile(this, 3, v11);
    v7 = (*(uint64_t (**)(AudioFileObject *, const AudioStreamBasicDescription *))(*(_QWORD *)this + 176))(this, a3);
    if (!(_DWORD)v7)
    {
      *((_BYTE *)this + 101) = 0;
      return v7;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v13 = "AudioFileObject.cpp";
      v14 = 1024;
      v15 = 61;
      v8 = MEMORY[0x1E0C81028];
      v9 = "%25s:%-5d  SetDataFormat failed";
      goto LABEL_7;
    }
  }
  return v7;
}

uint64_t AudioFileObject::Initialize(AudioFileObject *this, CFURLRef url, const AudioStreamBasicDescription *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  UInt8 buffer[1024];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024))
    return 4294967253;
  v7 = open((const char *)buffer, 1026, 0);
  if (v7 < 0)
  {
    v9 = *__error();
    if (v9 <= 0x1F)
    {
      if (((1 << v9) & 0x40022002) != 0)
        return 4294967242;
      if (((1 << v9) & 0x1800000) != 0)
        return 4294967254;
      if (v9 == 31)
        return 561017960;
    }
    return 2003334207;
  }
  AudioFileObject::OpenFile(this, 3, v7);
  v8 = (*(uint64_t (**)(AudioFileObject *, const AudioStreamBasicDescription *))(*(_QWORD *)this + 176))(this, a3);
  if ((_DWORD)v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "AudioFileObject.cpp";
      v13 = 1024;
      v14 = 231;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  SetDataFormat failed", buf, 0x12u);
    }
  }
  else
  {
    (*(void (**)(AudioFileObject *, const AudioStreamBasicDescription *, uint64_t))(*(_QWORD *)this + 48))(this, a3, a4);
  }
  return v8;
}

uint64_t AudioFileObject::OpenFromDataSource(AudioFileObject *this)
{
  return 0;
}

uint64_t AudioFileObject::InitializeDataSource(AudioFileObject *this, const AudioStreamBasicDescription *a2)
{
  return 0;
}

uint64_t AudioFileObject::Close(AudioFileObject *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 13);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 13) = 0;
  return 0;
}

uint64_t AudioFileObject::Optimize(AudioFileObject *this)
{
  *((_DWORD *)this + 20) = 1;
  return 0;
}

uint64_t AudioFileObject::WriteBytes(AudioFileObject *this, int a2, uint64_t a3, unsigned int *a4, const void *a5)
{
  uint64_t v5;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 100) & 2) == 0)
    return 1886547263;
  if (!a4 || !a5)
  {
    v5 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v5;
    *(_DWORD *)buf = 136315394;
    v21 = "AudioFileObject.cpp";
    v22 = 1024;
    v23 = 817;
    v12 = MEMORY[0x1E0C81028];
    v13 = "%25s:%-5d  invalid parameters";
    goto LABEL_10;
  }
  v11 = (*(uint64_t (**)(AudioFileObject *, uint64_t))(*(_QWORD *)this + 624))(this, *a4 + a3);
  if ((_DWORD)v11)
  {
    v5 = v11;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v5;
    *(_DWORD *)buf = 136315394;
    v21 = "AudioFileObject.cpp";
    v22 = 1024;
    v23 = 823;
    v12 = MEMORY[0x1E0C81028];
    v13 = "%25s:%-5d  invalid file position";
LABEL_10:
    _os_log_impl(&dword_18EE07000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
    return v5;
  }
  v15 = *a4 + a3;
  v16 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 224))(this);
  if (v15 > v16 && !*((_DWORD *)this + 20))
  {
    v5 = 1869640813;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v5;
    *(_DWORD *)buf = 136315394;
    v21 = "AudioFileObject.cpp";
    v22 = 1024;
    v23 = 829;
    v12 = MEMORY[0x1E0C81028];
    v13 = "%25s:%-5d  Can't write more data until the file is optimized";
    goto LABEL_10;
  }
  v17 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, const void *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                 + 56))(*((_QWORD *)this + 13), 32 * (a2 == 0), *((_QWORD *)this + 9) + a3, *a4, a5, a4);
  if ((_DWORD)v17)
  {
    v5 = v17;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v5;
    *(_DWORD *)buf = 136315394;
    v21 = "AudioFileObject.cpp";
    v22 = 1024;
    v23 = 837;
    v12 = MEMORY[0x1E0C81028];
    v13 = "%25s:%-5d  couldn't write new data";
    goto LABEL_10;
  }
  if (v15 <= v16)
    return 0;
  v19 = 0;
  v18 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v19);
  if (!(_DWORD)v18)
    return AudioFileObject::UpdateNumBytes(this, v19 - *((_QWORD *)this + 9));
  v5 = v18;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v21 = "AudioFileObject.cpp";
    v22 = 1024;
    v23 = 844;
    v12 = MEMORY[0x1E0C81028];
    v13 = "%25s:%-5d  GetSize failed";
    goto LABEL_10;
  }
  return v5;
}

uint64_t AudioFileObject::ReadPacketData(AudioFileObject *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  NSObject *v8;
  const char *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a6 || !*a6)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294967246;
    v10 = 136315394;
    v11 = "AudioFileObject.cpp";
    v12 = 1024;
    v13 = 911;
    v8 = MEMORY[0x1E0C81028];
    v9 = "%25s:%-5d  invalid ioNumPackets parameter";
LABEL_7:
    _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v10, 0x12u);
    return 4294967246;
  }
  if (*((_DWORD *)this + 10))
    return (*(uint64_t (**)(AudioFileObject *, uint64_t, unsigned int *, uint64_t, unsigned int *, void *))(*(_QWORD *)this + 112))(this, a2, a3, a5, a6, a7);
  if (!a4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294967246;
    v10 = 136315394;
    v11 = "AudioFileObject.cpp";
    v12 = 1024;
    v13 = 916;
    v8 = MEMORY[0x1E0C81028];
    v9 = "%25s:%-5d  invalid outPacketDescriptions parameter";
    goto LABEL_7;
  }
  return (*(uint64_t (**)(AudioFileObject *, uint64_t, unsigned int *))(*(_QWORD *)this + 104))(this, a2, a3);
}

uint64_t AudioFileObject::ReadPacketDataVBR(AudioFileObject *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  UInt32 *p_mDataByteSize;
  UInt32 v28;
  uint64_t v29;
  BOOL v30;
  void (**v31)(Buffer_DataSource *__hidden);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  UInt32 v35;
  UInt32 v36;
  void (**v37)(Buffer_DataSource *__hidden);
  char v38;
  uint64_t v39;
  void *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;

  if (!a3 && a4 && !a7)
  {
    v14 = *(uint64_t (**)(void))(*(_QWORD *)this + 88);
    return v14();
  }
  if (!a3 || !*a3)
    return 4294967246;
  v16 = (*(uint64_t (**)(AudioFileObject *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, a5 + 1, 0, 1);
  if (!(_DWORD)v16 || (v17 = v16, (_DWORD)v16 == -39))
  {
    v18 = (uint64_t *)*((_QWORD *)this + 15);
    if (v18)
    {
      v19 = v18[3];
      if (v19 <= a5)
      {
        *a3 = 0;
        *a6 = 0;
        return 4294967257;
      }
      else
      {
        if (*a6 + a5 <= v19)
        {
          v14 = *(uint64_t (**)(void))(*(_QWORD *)this + 128);
          return v14();
        }
        v32 = *((_QWORD *)this + 9);
        CompressedPacketTable::operator[]((uint64_t)&v37, v18, a5);
        v31 = v37;
        v44 = *a3;
        v20 = v44;
        v43 = 0;
        (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v43);
        v33 = (char *)v31 + v32;
        if (v43 - (uint64_t)v33 < v20)
          v44 = v43 - (_DWORD)v33;
        v21 = (*(uint64_t (**)(AudioFileObject *, uint64_t, void (**)(Buffer_DataSource *__hidden), unsigned int *, void *))(*(_QWORD *)this + 72))(this, a2, v31, &v44, a7);
        v17 = v21;
        if ((_DWORD)v21 != -39 && (_DWORD)v21)
        {
          *a3 = 0;
          *a6 = 0;
        }
        else
        {
          v38 = 0;
          v37 = &off_1E2907000;
          v39 = v44;
          v40 = a7;
          v41 = v33;
          v42 = v33;
          v22 = (*(uint64_t (**)(AudioFileObject *, uint64_t, void (***)(Buffer_DataSource *__hidden), _QWORD))(*(_QWORD *)this + 688))(this, a5 + 1 + *a6, &v37, 0);
          if ((_DWORD)v22 && (_DWORD)v22 != -39)
          {
            return v22;
          }
          else
          {
            LODWORD(v23) = 0;
            if (*a6)
            {
              v24 = v18[3];
              LODWORD(v25) = 0;
              if (v24 > a5)
              {
                v23 = 0;
                v26 = 0;
                p_mDataByteSize = &a4->mDataByteSize;
                while (1)
                {
                  CompressedPacketTable::operator[]((uint64_t)&v34, v18, a5 + v23);
                  v28 = v36;
                  v29 = v34 - (_QWORD)v31;
                  v25 = v34 - (_QWORD)v31 + v36;
                  if (v25 > v44)
                    break;
                  *(p_mDataByteSize - 1) = v35;
                  *p_mDataByteSize = v28;
                  *(_QWORD *)(p_mDataByteSize - 3) = v29;
                  ++v23;
                  p_mDataByteSize += 4;
                  v30 = v23 < *a6 && (uint64_t)(v23 + a5) < v24;
                  v26 = v25;
                  if (!v30)
                    goto LABEL_37;
                }
                LODWORD(v25) = v26;
              }
            }
            else
            {
              LODWORD(v25) = 0;
            }
LABEL_37:
            *a3 = v25;
            *a6 = v23;
          }
        }
      }
    }
    else
    {
      return 1685348671;
    }
  }
  return v17;
}

uint64_t AudioFileObject::ReadPacketDataCBR(AudioFileObject *this, uint64_t a2, unsigned int *a3, uint64_t a4, unsigned int *a5, void *a6)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  unsigned int v14;
  int v15;
  NSObject *v16;
  const char *v17;
  unsigned int v18;
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a3 || !*a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294967246;
    v18 = 136315394;
    v19 = "AudioFileObject.cpp";
    v20 = 1024;
    v21 = 935;
    v16 = MEMORY[0x1E0C81028];
    v17 = "%25s:%-5d  invalid ioNumBytes parameter";
LABEL_13:
    _os_log_impl(&dword_18EE07000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v18, 0x12u);
    return 4294967246;
  }
  if (!a6)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294967246;
    v18 = 136315394;
    v19 = "AudioFileObject.cpp";
    v20 = 1024;
    v21 = 936;
    v16 = MEMORY[0x1E0C81028];
    v17 = "%25s:%-5d  NULL buffer";
    goto LABEL_13;
  }
  v9 = *((_DWORD *)this + 10);
  v10 = *a3 / v9;
  v11 = *a5;
  if (*a5 > v10)
  {
    *a5 = v10;
    v9 = *((_DWORD *)this + 10);
    v11 = v10;
  }
  v18 = v9 * v11;
  result = (*(uint64_t (**)(AudioFileObject *, uint64_t, uint64_t, unsigned int *, void *))(*(_QWORD *)this
                                                                                                  + 72))(this, a2, v9 * a4, &v18, a6);
  if (!(_DWORD)result || (_DWORD)result == -39)
  {
    v13 = v18;
    v14 = *((_DWORD *)this + 10);
    if (v18 != v14 * *a5)
    {
      v15 = v18 / v14;
      *a5 = v18 / v14;
      v13 = *((_DWORD *)this + 10) * v15;
    }
    *a3 = v13;
  }
  return result;
}

uint64_t AudioFileObject::HowManyPacketsCanBeReadIntoBuffer(AudioFileObject *this, unsigned int *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t *v7;
  int64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;

  v7 = (uint64_t *)*((_QWORD *)this + 15);
  if (v7)
    v8 = v7[3];
  else
    v8 = 0;
  if (*a4 + a3 > v8)
    *a4 = v8 - a3;
  CompressedPacketTable::operator[]((uint64_t)&v22, v7, a3);
  if (*a2 >= v23)
  {
    v10 = v22;
    v11 = *a4 + a3;
    CompressedPacketTable::operator[]((uint64_t)&v22, v7, v11 - 1);
    v12 = v22 - v10 + v23;
    if (v12 <= *a2)
    {
      result = 0;
      *a2 = v12;
    }
    else
    {
      v13 = a3;
      v14 = v11;
      v15 = a3;
      do
      {
        v16 = (v14 + v15) >> 1;
        if (v16 >= v11)
          break;
        CompressedPacketTable::operator[]((uint64_t)&v22, v7, (v14 + v15) >> 1);
        v17 = v22 - v10 + v23;
        v18 = *a2;
        if (v17 <= v18)
        {
          if (v17 >= v18)
          {
            v13 = (v14 + v15) >> 1;
            break;
          }
          v15 = v16 + 1;
          v13 = v16;
        }
        else
        {
          v14 = v16 - 1;
        }
      }
      while (v14 >= v15);
      v19 = *a4;
      if (v13 - a3 >= v19)
        v20 = a3 + v19 - 1;
      else
        v20 = v13;
      if (v13 - a3 >= v19)
        v21 = *a4;
      else
        v21 = v13 - a3 + 1;
      CompressedPacketTable::operator[]((uint64_t)&v22, v7, v20);
      result = 0;
      *a2 = v23 + v22 - v10;
      *a4 = v21;
    }
  }
  else
  {
    *a2 = 0;
    *a4 = 0;
    return 4294967246;
  }
  return result;
}

uint64_t AudioFileObject::ReadPacketDataVBR_InTable(AudioFileObject *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  uint64_t *v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v20;
  UInt32 *p_mVariableFramesInPacket;
  uint64_t v22;
  unsigned int v23;
  _QWORD v24[3];

  v7 = (uint64_t *)*((_QWORD *)this + 15);
  if (!v7)
    return 1685348671;
  v15 = (*(uint64_t (**)(AudioFileObject *, unsigned int *, uint64_t, unsigned int *))(*(_QWORD *)this + 120))(this, a3, a5, a6);
  if (!(_DWORD)v15)
  {
    CompressedPacketTable::operator[]((uint64_t)v24, v7, a5);
    v16 = v24[0];
    v23 = *a3;
    if (a7)
    {
      v17 = (*(uint64_t (**)(AudioFileObject *, uint64_t, _QWORD, unsigned int *, void *))(*(_QWORD *)this
                                                                                                  + 72))(this, a2, v24[0], &v23, a7);
      v15 = v17;
      if ((_DWORD)v17 != -39 && (_DWORD)v17 != 0)
      {
        *a3 = 0;
        *a6 = 0;
        return v15;
      }
      *a3 = v23;
      if (!a4)
        return v15;
    }
    else
    {
      v15 = 0;
      if (!a4)
        return v15;
    }
    if (*a6)
    {
      v20 = 0;
      p_mVariableFramesInPacket = &a4->mVariableFramesInPacket;
      do
      {
        CompressedPacketTable::operator[]((uint64_t)v24, v7, a5 + v20);
        v22 = v24[1];
        *((_QWORD *)p_mVariableFramesInPacket - 1) = v24[0] - v16;
        *(_QWORD *)p_mVariableFramesInPacket = v22;
        ++v20;
        p_mVariableFramesInPacket += 4;
      }
      while (v20 < *a6);
    }
  }
  return v15;
}

uint64_t AudioFileObject::WritePackets(AudioFileObject *this, uint64_t a2, uint64_t a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, const void *a7)
{
  unsigned int v10;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  unsigned int v16;
  int v17;
  unsigned int v19;
  unsigned int v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v10 = a3;
  v25 = *MEMORY[0x1E0C80C00];
  if ((*(uint64_t (**)(AudioFileObject *, uint64_t, uint64_t, const AudioStreamPacketDescription *))(*(_QWORD *)this + 240))(this, a2, a3, a4) >= a5)
  {
    if (a6 && a7)
    {
      v16 = *((_DWORD *)this + 10);
      v20 = v16 * *a6;
      if (v20 > v10)
      {
        v17 = v10 / v16;
        *a6 = v10 / v16;
        v16 = *((_DWORD *)this + 10);
        v20 = v16 * v17;
      }
      v13 = (*(uint64_t (**)(AudioFileObject *, uint64_t, uint64_t, unsigned int *, const void *))(*(_QWORD *)this + 80))(this, a2, v16 * a5, &v20, a7);
      if ((_DWORD)v13)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v22 = "AudioFileObject.cpp";
          v23 = 1024;
          v24 = 1190;
          v14 = MEMORY[0x1E0C81028];
          v15 = "%25s:%-5d  Write Bytes Failed";
          goto LABEL_13;
        }
      }
      else
      {
        v19 = *((_DWORD *)this + 10);
        if (v20 != v19 * *a6)
          *a6 = v20 / v19;
      }
    }
    else
    {
      v13 = 2003334207;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v22 = "AudioFileObject.cpp";
        v23 = 1024;
        v24 = 1171;
        v14 = MEMORY[0x1E0C81028];
        v15 = "%25s:%-5d  invalid parameter";
        goto LABEL_13;
      }
    }
  }
  else
  {
    v13 = 1885563711;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v22 = "AudioFileObject.cpp";
      v23 = 1024;
      v24 = 1170;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  write past end";
LABEL_13:
      _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
    }
  }
  return v13;
}

uint64_t AudioFileObject::WritePacketsWithDependencyInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2, a3, a4, a6, a7, a8);
}

uint64_t AudioFileObject::SetProperty(AudioFileObject *this, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t (*v6)(AudioFileObject *, uint64_t, uint64_t *);
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  int v13;
  _BYTE v14[12];
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = 1886681407;
  if (a2 > 1819243875)
  {
    if (a2 <= 1885564531)
    {
      if (a2 != 1819243876)
      {
        if (a2 == 1835493731)
        {
          v6 = *(uint64_t (**)(AudioFileObject *, uint64_t, uint64_t *))(*(_QWORD *)this + 344);
          return v6(this, a3, a4);
        }
        if (a2 == 1835756659)
        {
          v6 = *(uint64_t (**)(AudioFileObject *, uint64_t, uint64_t *))(*(_QWORD *)this + 368);
          return v6(this, a3, a4);
        }
        return v5;
      }
      if ((_DWORD)a3 != 8)
      {
        v5 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return v5;
        *(_DWORD *)v14 = 136315394;
        *(_QWORD *)&v14[4] = "AudioFileObject.cpp";
        v15 = 1024;
        v16 = 2033;
        v11 = MEMORY[0x1E0C81028];
        v12 = "%25s:%-5d  inDataSize is wrong";
        goto LABEL_62;
      }
      *(_QWORD *)v14 = *a4;
      *(_WORD *)&v14[8] = 0;
      v8 = (*(uint64_t (**)(AudioFileObject *, _BYTE *))(*(_QWORD *)this + 512))(this, v14);
LABEL_40:
      v5 = v8;
      CACFDictionary::~CACFDictionary((CACFDictionary *)v14);
      return v5;
    }
    if (a2 > 1935832163)
    {
      if (a2 == 1935832164)
      {
        if ((_DWORD)a3 == 4)
          return (*(uint64_t (**)(AudioFileObject *, _QWORD))(*(_QWORD *)this + 704))(this, *(unsigned int *)a4);
        v5 = 561211770;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return v5;
        *(_DWORD *)v14 = 136315394;
        *(_QWORD *)&v14[4] = "AudioFileObject.cpp";
        v15 = 1024;
        v16 = 2058;
        v11 = MEMORY[0x1E0C81028];
        v12 = "%25s:%-5d  inDataSize is wrong";
        goto LABEL_62;
      }
      if (a2 == 1935893603)
      {
        if ((_DWORD)a3 != 8)
        {
          v5 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return v5;
          *(_DWORD *)v14 = 136315394;
          *(_QWORD *)&v14[4] = "AudioFileObject.cpp";
          v15 = 1024;
          v16 = 2020;
          v11 = MEMORY[0x1E0C81028];
          v12 = "%25s:%-5d  inDataSize is wrong";
          goto LABEL_62;
        }
        *(_QWORD *)v14 = *a4;
        *(_WORD *)&v14[8] = 0;
        v8 = (*(uint64_t (**)(AudioFileObject *, _BYTE *))(*(_QWORD *)this + 464))(this, v14);
        goto LABEL_40;
      }
      return v5;
    }
    if (a2 != 1885564532)
    {
      if (a2 == 1919380595)
      {
        v6 = *(uint64_t (**)(AudioFileObject *, uint64_t, uint64_t *))(*(_QWORD *)this + 392);
        return v6(this, a3, a4);
      }
      return v5;
    }
    v9 = *a4;
    if (v9 <= (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 240))(this))
      return AudioFileObject::UpdateNumPackets(this, v9);
    return 1869627199;
  }
  if (a2 <= 1685289588)
  {
    if (a2 != 1650683508)
    {
      if (a2 == 1668112752)
      {
        v6 = *(uint64_t (**)(AudioFileObject *, uint64_t, uint64_t *))(*(_QWORD *)this + 416);
        return v6(this, a3, a4);
      }
      if (a2 != 1684434292)
        return v5;
      if ((_DWORD)a3 == 40)
        return (*(uint64_t (**)(AudioFileObject *, uint64_t *))(*(_QWORD *)this + 184))(this, a4);
      v5 = 561211770;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v5;
      *(_DWORD *)v14 = 136315394;
      *(_QWORD *)&v14[4] = "AudioFileObject.cpp";
      v15 = 1024;
      v16 = 1952;
      v11 = MEMORY[0x1E0C81028];
      v12 = "%25s:%-5d  Incorrect data size";
      goto LABEL_62;
    }
    if ((_DWORD)a3 != 8)
    {
      v5 = 561211770;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v5;
      *(_DWORD *)v14 = 136315394;
      *(_QWORD *)&v14[4] = "AudioFileObject.cpp";
      v15 = 1024;
      v16 = 1960;
      v11 = MEMORY[0x1E0C81028];
      v12 = "%25s:%-5d  Incorrect data size";
      goto LABEL_62;
    }
    v10 = *a4;
    if (v10 <= (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 224))(this))
    {
      v13 = *((_DWORD *)this + 33);
      *((_DWORD *)this + 33) = 0;
      result = AudioFileObject::UpdateNumBytes(this, v10);
      *((_DWORD *)this + 33) = v13;
      return result;
    }
    return 1869627199;
  }
  if (a2 <= 1768842862)
  {
    if (a2 != 1685289589)
    {
      if (a2 == 1718383476)
      {
        v6 = *(uint64_t (**)(AudioFileObject *, uint64_t, uint64_t *))(*(_QWORD *)this + 208);
        return v6(this, a3, a4);
      }
      return v5;
    }
    if ((_DWORD)a3 == 4)
    {
      v5 = 0;
      *((_DWORD *)this + 33) = *(_DWORD *)a4;
      return v5;
    }
    v5 = 561211770;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v5;
    *(_DWORD *)v14 = 136315394;
    *(_QWORD *)&v14[4] = "AudioFileObject.cpp";
    v15 = 1024;
    v16 = 2000;
    v11 = MEMORY[0x1E0C81028];
    v12 = "%25s:%-5d  inDataSize is wrong";
LABEL_62:
    _os_log_impl(&dword_18EE07000, v11, OS_LOG_TYPE_ERROR, v12, v14, 0x12u);
    return v5;
  }
  if (a2 == 1768842863)
  {
    if ((_DWORD)a3 != 8)
    {
      v5 = 561211770;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v5;
      *(_DWORD *)v14 = 136315394;
      *(_QWORD *)&v14[4] = "AudioFileObject.cpp";
      v15 = 1024;
      v16 = 2007;
      v11 = MEMORY[0x1E0C81028];
      v12 = "%25s:%-5d  inDataSize is wrong";
      goto LABEL_62;
    }
    *(_QWORD *)v14 = *a4;
    *(_WORD *)&v14[8] = 0;
    v8 = (*(uint64_t (**)(AudioFileObject *, _BYTE *))(*(_QWORD *)this + 440))(this, v14);
    goto LABEL_40;
  }
  if (a2 == 1769172837)
  {
    if ((_DWORD)a3 != 8)
    {
      v5 = 561211770;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v5;
      *(_DWORD *)v14 = 136315394;
      *(_QWORD *)&v14[4] = "AudioFileObject.cpp";
      v15 = 1024;
      v16 = 2046;
      v11 = MEMORY[0x1E0C81028];
      v12 = "%25s:%-5d  inDataSize is wrong";
      goto LABEL_62;
    }
    *(_QWORD *)v14 = *a4;
    *(_WORD *)&v14[8] = 0;
    v8 = (*(uint64_t (**)(AudioFileObject *, _BYTE *))(*(_QWORD *)this + 488))(this, v14);
    goto LABEL_40;
  }
  return v5;
}

void sub_18F0CF244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

uint64_t AudioFileObject::UpdateDataFormat(AudioFileObject *this, const AudioStreamBasicDescription *a2)
{
  return (*(uint64_t (**)(AudioFileObject *, const AudioStreamBasicDescription *))(*(_QWORD *)this + 176))(this, a2);
}

double AudioFileObject::GetFormatList(AudioFileObject *this, unsigned int *a2, AudioFormatListItem *a3)
{
  __int128 v6;
  AudioChannelLayoutTag v7;
  AudioChannelLayoutTag *v8;
  BOOL v9;
  double result;
  __int128 v11;
  AudioChannelLayoutTag *v12;
  size_t size;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  if (*a2 >= 0x30)
  {
    v6 = *(_OWORD *)((char *)this + 40);
    v14 = *(_OWORD *)((char *)this + 24);
    v15 = v6;
    v16 = *((_QWORD *)this + 7);
    v7 = *((_DWORD *)this + 13) | 0xFFFF0000;
    size = 0;
    if (!(*(unsigned int (**)(AudioFileObject *, char *, size_t *))(*(_QWORD *)this + 400))(this, (char *)&size + 4, &size))
    {
      v12 = 0;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v12, HIDWORD(size), 0);
      v8 = v12;
      if ((*(unsigned int (**)(AudioFileObject *, char *, AudioChannelLayoutTag *))(*(_QWORD *)this + 408))(this, (char *)&size + 4, v12))
      {
        v9 = 0;
      }
      else
      {
        v9 = HIDWORD(size) >= 0xC;
      }
      if (v9)
      {
        if ((*v8 | 0x10000) != 0x10000)
          v7 = *v8;
      }
      else if (!v8)
      {
        goto LABEL_12;
      }
      free(v8);
    }
LABEL_12:
    result = *(double *)&v14;
    v11 = v15;
    *(_OWORD *)&a3->mASBD.mSampleRate = v14;
    *(_OWORD *)&a3->mASBD.mBytesPerPacket = v11;
    *(_QWORD *)&a3->mASBD.mBitsPerChannel = v16;
    a3->mChannelLayoutTag = v7;
    *a2 = 48;
  }
  return result;
}

void sub_18F0CF37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9)
    free(a9);
  _Unwind_Resume(exception_object);
}

uint64_t AudioFileObject::SetFormatList(AudioFileObject *this, unsigned int a2, const AudioFormatListItem *a3)
{
  return 1869627199;
}

uint64_t AudioFileObject::PacketToFrame(uint64_t **this, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v9;
  _BYTE v10[16];
  uint64_t v11;

  v5 = *((unsigned int *)this + 11);
  if ((_DWORD)v5)
  {
    result = 0;
    v7 = v5 * a2;
LABEL_3:
    *a3 = v7;
    return result;
  }
  result = ((uint64_t (*)(uint64_t **, uint64_t, _QWORD, uint64_t))(*this)[86])(this, a2 + 1, 0, 1);
  if (!(_DWORD)result)
  {
    result = 1885563711;
    v9 = this[15];
    if (v9)
    {
      if (v9[3] <= a2)
      {
        return 4294967257;
      }
      else if ((a2 & 0x8000000000000000) == 0)
      {
        if (a2)
        {
          CompressedPacketTable::operator[]((uint64_t)v10, v9, a2 - 1);
          v7 = v11;
        }
        else
        {
          v7 = 0;
        }
        result = 0;
        goto LABEL_3;
      }
    }
  }
  return result;
}

uint64_t AudioFileObject::FrameToPacket(AudioFileObject *this, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  double v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21;
  _QWORD v22[3];
  _QWORD v23[5];

  v6 = a2;
  v7 = *((unsigned int *)this + 11);
  if ((_DWORD)v7)
  {
    v8 = 0;
    *a3 = a2 / v7;
    *a4 = a2 % v7;
  }
  else
  {
    v8 = 1885563711;
    v11 = (uint64_t *)*((_QWORD *)this + 15);
    if (v11)
    {
      v12 = 0;
      while (!v12)
      {
        v22[0] = 0;
        v22[1] = 0;
        v22[2] = v6;
        v23[0] = v11;
        v13 = v11[3];
        v23[1] = 0;
        std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,CompressedPacketTable::iterator,CompressedPacketTable::iterator,AudioStreamPacketDescriptionExtended,std::__identity,std::__less<void,void>>((uint64_t)&v18, (uint64_t)v23, v13, (uint64_t)v22);
        v14 = v19;
        if (v19 != v11[3])
        {
          *a3 = v19;
          if (!v14)
            goto LABEL_26;
          v15 = v18;
          CompressedPacketTable::operator[]((uint64_t)v20, v18, v14);
          if (v21 > v6)
          {
            CompressedPacketTable::operator[]((uint64_t)v20, v15, v14 - 1);
            LODWORD(v6) = v6 - v21;
LABEL_26:
            v8 = 0;
            *a4 = v6;
            return v8;
          }
          if (v13 - *a3 >= 2)
          {
            LODWORD(v6) = 0;
            ++*a3;
            goto LABEL_26;
          }
        }
        CompressedPacketTable::operator[]((uint64_t)v23, v11, v13 - 1);
        if (v13 < 8)
        {
          v17 = 8;
        }
        else
        {
          v16 = (double)v6 / ((double)v23[2] / (double)v13);
          if (v13 + 1 > (uint64_t)v16)
            v17 = v13 + 1;
          else
            v17 = (uint64_t)v16;
        }
        v12 = (*(uint64_t (**)(AudioFileObject *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, v17, 0, 1);
        if (!v12 || v12 == -39)
        {
          if (v11[3] == v13)
            v12 = -39;
          else
            v12 = 0;
        }
      }
      if (v12 == -39)
        return 1885563711;
      else
        return v12;
    }
  }
  return v8;
}

uint64_t AudioFileObject::PacketToRollDistance(AudioFileObject *this, AudioPacketRollDistanceTranslation *a2)
{
  SInt64 mPacket;
  int v4;
  unsigned int outPropertyData;
  UInt32 ioPropertyDataSize;
  int inSpecifier;

  mPacket = *((unsigned int *)this + 32);
  if (!(_DWORD)mPacket)
  {
    v4 = *((_DWORD *)this + 8);
    ioPropertyDataSize = 4;
    inSpecifier = v4;
    outPropertyData = 0;
    AudioFormatGetProperty(0x64726C6Cu, 4u, &inSpecifier, &ioPropertyDataSize, &outPropertyData);
    mPacket = outPropertyData;
  }
  if (a2->mPacket < mPacket)
    mPacket = a2->mPacket;
  a2->mRollDistance = mPacket;
  return 0;
}

uint64_t AudioFileObject::ScanForIndependentPacket(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if (a2 != 1)
  {
    result = 0;
    v7 = *a3 - 1;
LABEL_10:
    a3[1] = v7;
    return result;
  }
  if (*(_DWORD *)(a1 + 40))
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
    goto LABEL_7;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 688))(a1, *a3 + 2, 0, 1);
  v8 = *(_QWORD *)(a1 + 120);
  if (v8)
  {
    v5 = *(_QWORD *)(v8 + 24);
LABEL_7:
    v7 = *a3 + 1;
    if (v7 >= v5)
    {
      result = 0;
      v7 = -1;
    }
    else
    {
      result = 0;
    }
    goto LABEL_10;
  }
  return 1885563711;
}

uint64_t AudioFileObject::PacketToDependencyInfo(AudioFileObject *this, AudioPacketDependencyInfoTranslation *a2)
{
  int v3;
  UInt32 mPacket;
  UInt32 outPropertyData;
  UInt32 ioPropertyDataSize;
  int inSpecifier;

  v3 = *((_DWORD *)this + 8);
  ioPropertyDataSize = 4;
  inSpecifier = v3;
  outPropertyData = 0;
  AudioFormatGetProperty(0x64726C6Cu, 4u, &inSpecifier, &ioPropertyDataSize, &outPropertyData);
  mPacket = outPropertyData;
  if (a2->mPacket < outPropertyData)
    mPacket = a2->mPacket;
  a2->mIsIndependentlyDecodable = 1;
  a2->mNumberPrerollPackets = mPacket;
  return 0;
}

uint64_t AudioFileObject::PacketToByte(AudioFileObject *this, AudioBytePacketTranslation *a2)
{
  uint64_t result;
  SInt64 mPacket;
  uint64_t v6;
  SInt64 v7;
  uint64_t *v8;
  uint64_t v9;
  SInt64 v10;
  unsigned int v11;

  result = 1885563711;
  mPacket = a2->mPacket;
  if ((mPacket & 0x8000000000000000) == 0)
  {
    v6 = *((unsigned int *)this + 10);
    if ((_DWORD)v6)
    {
      result = 0;
      v7 = mPacket * v6;
LABEL_4:
      a2->mByte = v7;
      a2->mFlags = 0;
      return result;
    }
    v8 = (uint64_t *)*((_QWORD *)this + 15);
    if (v8)
    {
      v9 = v8[3];
      if (mPacket < v9)
      {
        CompressedPacketTable::operator[]((uint64_t)&v10, v8, (int)mPacket);
        result = 0;
        v7 = v10;
        goto LABEL_4;
      }
      if (v9 < 8)
      {
        return 1836020325;
      }
      else
      {
        CompressedPacketTable::operator[]((uint64_t)&v10, v8, v9 - 1);
        result = 0;
        a2->mByte = vcvtmd_s64_f64((double)(v10 + v11 - *((_QWORD *)this + 9)) / (double)v9 * (double)a2->mPacket);
        a2->mFlags = 1;
      }
    }
  }
  return result;
}

uint64_t AudioFileObject::ByteToPacket(AudioFileObject *this, AudioBytePacketTranslation *a2)
{
  uint64_t result;
  unint64_t mByte;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  SInt64 v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  _DWORD v16[6];
  _QWORD v17[3];
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(_BYTE *, uint64_t);

  result = 1885563711;
  mByte = a2->mByte;
  if ((a2->mByte & 0x8000000000000000) == 0)
  {
    v6 = *((unsigned int *)this + 10);
    if ((_DWORD)v6)
    {
      result = 0;
      a2->mPacket = mByte / v6;
      *(_QWORD *)&a2->mByteOffsetInPacket = (mByte % v6);
      return result;
    }
    v7 = (uint64_t *)*((_QWORD *)this + 15);
    if (v7)
    {
      v17[1] = 0;
      v17[2] = 0;
      v17[0] = mByte;
      v8 = v7[3];
      v20 = (uint64_t (*)(_BYTE *, uint64_t))byte_less_than;
      v18 = v7;
      v19 = 0;
      std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,CompressedPacketTable::iterator,CompressedPacketTable::iterator,AudioStreamPacketDescriptionExtended,std::__identity,BOOL (*)(AudioStreamPacketDescriptionExtended const&,AudioStreamPacketDescriptionExtended const&)>((uint64_t)&v14, (uint64_t)&v18, v8, (uint64_t)v17, &v20);
      v9 = v7[3];
      if (v15 != v9)
      {
        v12 = v15 - (v15 > 0);
        a2->mPacket = v12;
        v13 = a2->mByte;
        CompressedPacketTable::operator[]((uint64_t)v16, v14, v12);
        *(_QWORD *)&a2->mByteOffsetInPacket = (v13 - v16[0]);
        return 0;
      }
      if (v9 >= 8)
      {
        CompressedPacketTable::operator[]((uint64_t)&v18, v7, v9 - 1);
        v10 = (double)((uint64_t)v18 + HIDWORD(v19) - *((_QWORD *)this + 9)) / (double)v9;
        v11 = (double)a2->mByte / v10;
        a2->mPacket = vcvtmd_s64_f64(v11);
        a2->mByteOffsetInPacket = vcvtmd_u64_f64(v10 * (v11 - (double)(uint64_t)floor(v11)));
        a2->mFlags = 1;
        return 0;
      }
      return 1836020325;
    }
  }
  return result;
}

uint64_t AudioFileObject::GetBitRate(AudioFileObject *this, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  double v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  double v13;
  uint64_t *v14;
  uint64_t v15;
  _BYTE v16[8];
  unsigned int v17;

  if (!a2)
    return 2003334207;
  v4 = *((_DWORD *)this + 10);
  v5 = *((unsigned int *)this + 11);
  v6 = *((double *)this + 3);
  if (v4)
    v7 = (_DWORD)v5 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v13 = (double)v4 * 8.0 * v6 / (double)v5;
LABEL_13:
    v11 = v13;
LABEL_14:
    result = 0;
    *a2 = v11;
    return result;
  }
  v8 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 240))(this);
  v9 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 224))(this);
  if ((_DWORD)v5)
  {
    v10 = v8 * v5;
LABEL_9:
    v11 = 0;
    if (!v10 || v6 == 0.0)
      goto LABEL_14;
    v13 = (double)v9 * 8.0 / ((double)v10 / v6);
    goto LABEL_13;
  }
  v14 = (uint64_t *)*((_QWORD *)this + 15);
  if (!v14)
    return 1886681407;
  if (v14[3] == v8)
  {
    if (v8 < 1)
    {
      v11 = 0;
      goto LABEL_14;
    }
    v15 = 0;
    v10 = 0;
    do
    {
      CompressedPacketTable::operator[]((uint64_t)v16, v14, v15);
      v10 += v17;
      ++v15;
    }
    while (v8 != v15);
    goto LABEL_9;
  }
  return 1685348671;
}

uint64_t AudioFileObject::GetMagicCookieDataSize(AudioFileObject *this, unsigned int *a2, unsigned int *a3)
{
  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  return 1886681407;
}

uint64_t AudioFileObject::GetMagicCookieData(AudioFileObject *this, unsigned int *a2, void *a3)
{
  *a2 = 0;
  return 1886681407;
}

uint64_t AudioFileObject::SetMagicCookieData(AudioFileObject *this, unsigned int a2, const void *a3)
{
  return 1667787583;
}

uint64_t AudioFileObject::GetMarkerListSize(AudioFileObject *this, unsigned int *a2, unsigned int *a3)
{
  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  return 1886681407;
}

uint64_t AudioFileObject::GetMarkerList(AudioFileObject *this, unsigned int *a2, AudioFileMarkerList *a3)
{
  *a2 = 0;
  return 1886681407;
}

uint64_t AudioFileObject::SetMarkerList(AudioFileObject *this, unsigned int a2, const AudioFileMarkerList *a3)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetRegionListSize(AudioFileObject *this, unsigned int *a2, unsigned int *a3)
{
  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  return 1886681407;
}

uint64_t AudioFileObject::GetRegionList(AudioFileObject *this, unsigned int *a2, AudioFileRegionList *a3)
{
  *a2 = 0;
  return 1886681407;
}

uint64_t AudioFileObject::SetRegionList(AudioFileObject *this, unsigned int a2, const AudioFileRegionList *a3)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetChannelLayoutSize(AudioFileObject *this, unsigned int *a2, unsigned int *a3)
{
  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  return 1886681407;
}

uint64_t AudioFileObject::GetChannelLayout(AudioFileObject *this, unsigned int *a2, AudioChannelLayout *a3)
{
  *a2 = 0;
  return 1886681407;
}

uint64_t AudioFileObject::SetChannelLayout(AudioFileObject *this, unsigned int a2, const AudioChannelLayout *a3)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetInfoDictionarySize(AudioFileObject *this, unsigned int *a2, unsigned int *a3)
{
  if (a2)
    *a2 = 8;
  if (a3)
    *a3 = 0;
  return 0;
}

uint64_t AudioFileObject::GetInfoDictionary(AudioFileObject *this, CACFDictionary *a2)
{
  AudioFileObject *v3;
  double v5;

  v5 = 0.0;
  v3 = (AudioFileObject *)(*(uint64_t (**)(AudioFileObject *, double *))(*(_QWORD *)this + 544))(this, &v5);
  if ((_DWORD)v3)
    return 1886681407;
  AudioFileObject::AddDurationToInfoDictionary(v3, a2, &v5);
  return 0;
}

uint64_t AudioFileObject::SetInfoDictionary(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AudioFileObject::CountUserData(AudioFileObject *this, unsigned int a2, unsigned int *a3)
{
  return 1869627199;
}

uint64_t AudioFileObject::GetUserDataSize(AudioFileObject *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  return 1869627199;
}

uint64_t AudioFileObject::GetUserDataSize64(AudioFileObject *this, unsigned int a2, unsigned int a3, unint64_t *a4)
{
  return 1869627199;
}

uint64_t AudioFileObject::GetUserData(AudioFileObject *this, unsigned int a2, unsigned int a3, unsigned int *a4, void *a5)
{
  return 1869627199;
}

uint64_t AudioFileObject::GetUserDataAtOffset(AudioFileObject *this, unsigned int a2, unsigned int a3, uint64_t a4, unsigned int *a5, void *a6)
{
  return 1869627199;
}

uint64_t AudioFileObject::SetUserData(AudioFileObject *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  return 1869627199;
}

uint64_t AudioFileObject::RemoveUserData(AudioFileObject *this)
{
  return 1869627199;
}

uint64_t AudioFileObject::PacketRangeUpperBound(AudioFileObject *this, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  unsigned int v21;

  result = 1885563711;
  *a4 = 0;
  if ((a2 & 0x8000000000000000) == 0)
  {
    v7 = *a3;
    if ((*a3 & 0x8000000000000000) == 0)
    {
      if ((a2 ^ 0x7FFFFFFFFFFFFFFFuLL) < v7)
        return 4294967246;
      if (*((_DWORD *)this + 10))
      {
        v10 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 240))(this);
        v11 = *a3;
        if ((uint64_t)(*a3 + a2) > v10)
        {
          v11 = (v10 - a2) & ~((v10 - a2) >> 63);
          *a3 = v11;
        }
        v12 = *((unsigned int *)this + 10);
        if ((uint64_t)(0x7FFFFFFFFFFFFFFFLL / v12) < v11)
          return 4294967246;
        v16 = v11 * v12;
        goto LABEL_21;
      }
      result = (*(uint64_t (**)(AudioFileObject *, unint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, a2 + v7 + 1, 0, 1);
      if (!(_DWORD)result || (_DWORD)result == -39)
      {
        v13 = (uint64_t *)*((_QWORD *)this + 15);
        result = 1885563711;
        if (v13)
        {
          v14 = v13[3];
          v15 = *a3;
          if ((uint64_t)(*a3 + a2) > v14)
          {
            v15 = (v14 - a2) & ~((v14 - a2) >> 63);
            *a3 = v15;
          }
          if (*((_BYTE *)this + 139))
          {
            if (v15 >= 1)
            {
              v16 = 0;
              v17 = a2;
              while (1)
              {
                CompressedPacketTable::operator[]((uint64_t)&v20, v13, v17);
                if ((v16 ^ 0x7FFFFFFFFFFFFFFFuLL) < v21)
                  return 4294967246;
                v16 += v21;
                if (++v17 >= (uint64_t)(*a3 + a2))
                  goto LABEL_21;
              }
            }
            v16 = 0;
          }
          else
          {
            v16 = 0;
            if (v14 > a2 && v15 >= 1)
            {
              CompressedPacketTable::operator[]((uint64_t)&v20, v13, a2 + v15 - 1);
              v18 = v20 + v21;
              CompressedPacketTable::operator[]((uint64_t)v19, v13, a2);
              v16 = v18 - v19[0];
            }
          }
LABEL_21:
          result = 0;
          *a4 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t AudioFileObject::AddDurationToInfoDictionary(AudioFileObject *this, CACFDictionary *a2, double *a3)
{
  const __CFLocale *System;
  const __CFAllocator *v6;
  __CFNumberFormatter *v7;
  __CFNumberFormatter *v8;
  const __CFString *StringWithValue;
  const __CFString *v10;

  System = CFLocaleGetSystem();
  if (System)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = CFNumberFormatterCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], System, kCFNumberFormatterDecimalStyle);
    if (v7)
    {
      v8 = v7;
      StringWithValue = CFNumberFormatterCreateStringWithValue(v6, v7, kCFNumberFloat64Type, a3);
      if (StringWithValue)
      {
        v10 = StringWithValue;
        if (CFStringGetLength(StringWithValue))
          CACFDictionary::AddString(a2, CFSTR("approximate duration in seconds"), v10);
        CFRelease(v10);
      }
      CFRelease(v8);
    }
  }
  return 0;
}

uint64_t AudioFileObject::UpdateNumBytes(AudioFileObject *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  if (a2 < 0)
    return 4294967246;
  if ((*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 224))(this) != a2)
  {
    (*(void (**)(AudioFileObject *, uint64_t))(*(_QWORD *)this + 232))(this, a2);
    v4 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 224))(this);
    (*(void (**)(AudioFileObject *, uint64_t))(*(_QWORD *)this + 248))(this, v4 / *((unsigned int *)this + 10));
    if ((*((_BYTE *)this + 100) & 2) != 0)
    {
      if (*((_DWORD *)this + 33))
      {
        result = 0;
        *((_BYTE *)this + 136) = 1;
        return result;
      }
      (*(void (**)(AudioFileObject *))(*(_QWORD *)this + 216))(this);
    }
  }
  return 0;
}

uint64_t AudioFileObject::UpdateNumPackets(AudioFileObject *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  if (a2 < 0)
    return 4294967246;
  if ((*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 240))(this) != a2)
  {
    *((_BYTE *)this + 136) = 1;
    if (!(*(unsigned int (**)(AudioFileObject *))(*(_QWORD *)this + 216))(this))
      *((_BYTE *)this + 136) = 0;
    (*(void (**)(AudioFileObject *, uint64_t))(*(_QWORD *)this + 248))(this, a2);
    v4 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 240))(this);
    (*(void (**)(AudioFileObject *, uint64_t))(*(_QWORD *)this + 232))(this, v4 * *((unsigned int *)this + 12));
    if ((*((_BYTE *)this + 100) & 2) != 0)
    {
      if (*((_DWORD *)this + 33))
      {
        result = 0;
        *((_BYTE *)this + 136) = 1;
        return result;
      }
      (*(void (**)(AudioFileObject *))(*(_QWORD *)this + 216))(this);
    }
  }
  return 0;
}

uint64_t AudioFileObject::CreateDataFile(AudioFileObject *this, CFURLRef url, int *a3)
{
  int v4;
  unsigned int v6;
  stat v7;
  UInt8 buffer[1024];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024))
    return 4294967253;
  if (!stat((const char *)buffer, &v7))
    return 1886547263;
  v4 = open((const char *)buffer, 2562, 420);
  *a3 = v4;
  if ((v4 & 0x80000000) == 0)
    return 0;
  v6 = *__error();
  if (v6 > 0x1F)
    return 2003334207;
  if (((1 << v6) & 0x40022002) != 0)
    return 4294967242;
  if (((1 << v6) & 0x1800000) != 0)
    return 4294967254;
  if (v6 == 31)
    return 561017960;
  else
    return 2003334207;
}

uint64_t AudioFileObject::DoCreate(AudioFileObject *this, const AudioStreamBasicDescription *a2, AudioStreamBasicDescription *a3, char a4)
{
  if (!AudioFileObject::IsDataFormatValid((AudioFileObject *)a3, a2)
    || !(*(unsigned int (**)(AudioFileObject *, AudioStreamBasicDescription *))(*(_QWORD *)this + 616))(this, a3))
  {
    return 1718449215;
  }
  *((_BYTE *)this + 100) = 3;
  *((_BYTE *)this + 138) = (a4 & 2) == 0;
  return (*(uint64_t (**)(AudioFileObject *, const AudioStreamBasicDescription *, AudioStreamBasicDescription *))(*(_QWORD *)this + 16))(this, a2, a3);
}

uint64_t AudioFileObject::DoOpenWithCallbacks(AudioFileObject *this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), unint64_t a4, uint64_t (*a5)(void *), unint64_t a6)
{
  char v12;
  uint64_t v13;
  uint64_t v14;

  if (a4 | a6)
    v12 = 3;
  else
    v12 = 1;
  *((_BYTE *)this + 100) = v12;
  v13 = operator new();
  *(_BYTE *)(v13 + 8) = 0;
  *(_QWORD *)v13 = &off_1E2907D98;
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 32) = a3;
  *(_QWORD *)(v13 + 40) = a4;
  *(_QWORD *)(v13 + 48) = a5;
  *(_QWORD *)(v13 + 56) = a6;
  v14 = *((_QWORD *)this + 13);
  if (v14 != v13)
  {
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    *((_QWORD *)this + 13) = v13;
  }
  return (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 40))(this);
}

DataSource *AudioFileObject::SetDataSource(AudioFileObject *this, DataSource *a2)
{
  DataSource *result;

  result = (DataSource *)*((_QWORD *)this + 13);
  if (result != a2)
  {
    if (result)
      result = (DataSource *)(*(uint64_t (**)(DataSource *))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 13) = a2;
  }
  return result;
}

uint64_t AudioFileObject::DoInitializeWithCallbacks(AudioFileObject *this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*a4)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*a5)(void *), int (*a6)(void *, uint64_t), unsigned int a7, const AudioStreamBasicDescription *a8, unsigned int a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v16 = operator new();
  *(_BYTE *)(v16 + 8) = 0;
  *(_QWORD *)v16 = &off_1E2907D98;
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 32) = a3;
  *(_QWORD *)(v16 + 40) = a4;
  *(_QWORD *)(v16 + 48) = a5;
  *(_QWORD *)(v16 + 56) = a6;
  if (!Seekable_DataSource::CanWrite((Seekable_DataSource *)v16))
    Seekable_DataSource::~Seekable_DataSource((Seekable_DataSource *)v16);
  Seekable_DataSource::SetSize((Seekable_DataSource *)v16);
  v17 = *((_QWORD *)this + 13);
  if (v17 != v16)
  {
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    *((_QWORD *)this + 13) = v16;
  }
  *((_BYTE *)this + 100) = 3;
  *((_BYTE *)this + 138) = (a9 & 2) == 0;
  result = (*(uint64_t (**)(AudioFileObject *, const AudioStreamBasicDescription *))(*(_QWORD *)this + 176))(this, a8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(AudioFileObject *, const AudioStreamBasicDescription *, _QWORD))(*(_QWORD *)this + 48))(this, a8, a9);
  return result;
}

uint64_t AudioFileObject::DoInitialize(AudioFileObject *this, const __CFURL *a2, const AudioStreamBasicDescription *a3, uint64_t a4)
{
  AudioFileObject::SetURL(this, a2);
  *((_BYTE *)this + 100) = 3;
  *((_BYTE *)this + 138) = (a4 & 2) == 0;
  return (*(uint64_t (**)(AudioFileObject *, const __CFURL *, const AudioStreamBasicDescription *, uint64_t))(*(_QWORD *)this + 32))(this, a2, a3, a4);
}

uint64_t AudioFileObject::UpdateSizeIfNeeded(AudioFileObject *this)
{
  uint64_t result;

  if (!*((_BYTE *)this + 136))
    return 0;
  result = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 216))(this);
  if (!(_DWORD)result)
    *((_BYTE *)this + 136) = 0;
  return result;
}

uint64_t AudioFileObject::DoOptimize(AudioFileObject *this)
{
  uint64_t result;

  if ((*((_BYTE *)this + 100) & 2) == 0)
    return 1886547263;
  if (*((_BYTE *)this + 136))
  {
    result = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 216))(this);
    if ((_DWORD)result)
      return result;
    *((_BYTE *)this + 136) = 0;
  }
  if (*((_DWORD *)this + 20))
    return 0;
  else
    return (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 64))(this);
}

uint64_t AudioFileObject::SizeChanged(AudioFileObject *this)
{
  if ((*((_BYTE *)this + 100) & 2) == 0)
    return 0;
  if (*((_DWORD *)this + 33))
  {
    *((_BYTE *)this + 136) = 1;
    return 0;
  }
  return (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 216))(this);
}

double AudioFileObject::GetPacketTable(AudioFileObject *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  double result;

  v3 = *((_QWORD *)this + 15);
  if (a2)
  {
    if (!v3)
    {
      v4 = operator new();
      v5 = *((_DWORD *)this + 11);
      result = 0.0;
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_DWORD *)(v4 + 32) = v5;
      *((_QWORD *)this + 15) = v4;
    }
  }
  return result;
}

uint64_t AudioFileObject::GetPacketTableSize(AudioFileObject *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 15);
  if (v1)
    return *(_QWORD *)(v1 + 24);
  else
    return 0;
}

uint64_t AudioFileObject::GetPacketDescriptions(AudioFileObject *this, int a2, unsigned int *a3, AudioStreamPacketDescription *a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  UInt32 *p_mVariableFramesInPacket;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[3];

  if (!a4)
    return 2003334207;
  v6 = *((_QWORD *)this + 15);
  if (v6)
  {
    v7 = *a3;
    v8 = *(_QWORD *)(v6 + 24);
    if (v8 < *a3 + a2)
    {
      v7 = v8 - a2;
      *a3 = v8 - a2;
    }
    if (v7)
    {
      v9 = 0;
      p_mVariableFramesInPacket = &a4->mVariableFramesInPacket;
      do
      {
        CompressedPacketTable::operator[]((uint64_t)v14, *((uint64_t **)this + 15), (a2 + v9));
        v12 = v14[1];
        *((_QWORD *)p_mVariableFramesInPacket - 1) = v14[0] - *((_QWORD *)this + 9);
        *(_QWORD *)p_mVariableFramesInPacket = v12;
        p_mVariableFramesInPacket += 4;
        ++v9;
      }
      while (v9 < *a3);
    }
    return 0;
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t AudioFileObject::MoveData(AudioFileObject *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  NSObject *v13;
  const char *v14;
  int v16;
  void *v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a2 == a3)
    return 0;
  CADeprecated::CAAutoFree<char>::CAAutoFree(&v17, 0x100000uLL);
  if (a2 >= a3)
  {
    if (a4 >= 1)
    {
      v10 = a4;
      while (1)
      {
        v16 = 0;
        if (v10 >= 0x100000)
          v11 = 0x100000;
        else
          v11 = v10;
        v4 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void *, int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, a4 - v10 + a2, v11, v17, &v16);
        if ((_DWORD)v4)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_31;
          *(_DWORD *)buf = 136315394;
          v19 = "AudioFileObject.cpp";
          v20 = 1024;
          v21 = 2392;
          v13 = MEMORY[0x1E0C81028];
          v14 = "%25s:%-5d  MoveData ReadBytes failed";
          goto LABEL_30;
        }
        v4 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void *, int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, a4 - v10 + a3, v11, v17, &v16);
        if ((_DWORD)v4)
          break;
        v12 = v10 <= v11;
        v10 -= v11;
        if (v12)
          goto LABEL_21;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_31;
      *(_DWORD *)buf = 136315394;
      v19 = "AudioFileObject.cpp";
      v20 = 1024;
      v21 = 2395;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  WriteBytes failed";
      goto LABEL_30;
    }
LABEL_21:
    v4 = 0;
    goto LABEL_31;
  }
  if (a4 < 1)
    goto LABEL_21;
  while (1)
  {
    v16 = 0;
    if (a4 >= 0x100000)
      v9 = 0x100000;
    else
      v9 = a4;
    a4 -= v9;
    v4 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void *, int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, a4 + a2, v9, v17, &v16);
    if ((_DWORD)v4)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_31;
      *(_DWORD *)buf = 136315394;
      v19 = "AudioFileObject.cpp";
      v20 = 1024;
      v21 = 2378;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  MoveData ReadBytes failed";
      goto LABEL_30;
    }
    v4 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void *, int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, a4 + a3, v9, v17, &v16);
    if ((_DWORD)v4)
      break;
    if (a4 <= 0)
      goto LABEL_21;
  }
  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    goto LABEL_31;
  *(_DWORD *)buf = 136315394;
  v19 = "AudioFileObject.cpp";
  v20 = 1024;
  v21 = 2381;
  v13 = MEMORY[0x1E0C81028];
  v14 = "%25s:%-5d  WriteBytes failed";
LABEL_30:
  _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x12u);
LABEL_31:
  if (v17)
    free(v17);
  return v4;
}

void sub_18F0D0A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t PacketTableEntry(CompressedPacketTable *a1, uint64_t a2)
{
  uint64_t v3;

  CompressedPacketTable::operator[]((uint64_t)&v3, (uint64_t *)a1, a2);
  return v3;
}

void FindIPCAURegistrationsFromAppBundles2()
{
  void *v0;
  void *v1;
  __CFDictionary *Mutable;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  const void *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t v17[128];
  _BYTE buf[24];
  void *v19;
  uint64_t v20;
  __CFDictionary *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x193FFEC70]();
  v1 = (void *)-[objc_class defaultWorkspace](NSClassFromString(CFSTR("LSApplicationWorkspace")), "defaultWorkspace");
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = (void *)objc_msgSend(v1, "applicationsWithAudioComponents");
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        v9 = (const void *)objc_msgSend(v8, "audioComponents");
        if (v9)
          CFDictionaryAddValue(Mutable, (const void *)objc_msgSend(v8, "applicationIdentifier"), v9);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }
  if (kInterAppAudioScope)
  {
    v10 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_16;
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "IPCAURegistrar.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1266;
    _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Registering AUs", buf, 0x12u);
  }
LABEL_16:
  v11 = CADeprecated::TSingleton<IPCAURegistrar>::instance();
  v12 = *(NSObject **)(v11 + 224);
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZN14IPCAURegistrar25RegisterAUsFromAppBundlesEPK14__CFDictionary_block_invoke;
  v19 = &__block_descriptor_48_e5_v8__0l;
  v20 = v11;
  v21 = Mutable;
  dispatch_sync(v12, buf);
  CFRelease(Mutable);
  objc_autoreleasePoolPop(v0);
}

void MP4AudioFile::~MP4AudioFile(MP4AudioFile *this)
{
  MP4AudioFile::~MP4AudioFile(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  *(_QWORD *)this = &off_1E2902430;
  v2 = *((_QWORD *)this + 30);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 28);
  if (v3)
  {
    std::__list_imp<MP4BoxInfo>::clear(*((uint64_t **)this + 28));
    MEMORY[0x193FFE460](v3, 0x1020C4062D53EE8);
  }
  v4 = (void *)*((_QWORD *)this + 29);
  if (v4)
    free(v4);
  v5 = *((_QWORD *)this + 31);
  if (v5)
    MEMORY[0x193FFE460](v5, 0x1020C40AF72B1D3);
  v6 = *((_QWORD *)this + 50);
  if (v6)
  {
    v7 = *(void **)v6;
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(v6 + 8) = v7;
      operator delete(v7);
    }
    MEMORY[0x193FFE460](v6, 0x10C402FEFCB83);
  }
  v8 = (void *)*((_QWORD *)this + 64);
  if (v8)
    free(v8);
  v9 = (const void *)*((_QWORD *)this + 67);
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 68);
  if (v10)
    CFRelease(v10);
  v11 = (void *)*((_QWORD *)this + 70);
  if (v11)
    free(v11);
  v12 = (const void *)*((_QWORD *)this + 72);
  if (v12)
    CFRelease(v12);
  v13 = (const void *)*((_QWORD *)this + 73);
  if (v13)
    CFRelease(v13);
  v14 = *((_QWORD *)this + 75);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 76);
  if (v15)
    MEMORY[0x193FFE460](v15, 0x1000C403E1C8BA9);
  v16 = (void *)*((_QWORD *)this + 47);
  if (v16)
  {
    *((_QWORD *)this + 48) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 43);
  if (v17)
  {
    *((_QWORD *)this + 44) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 40);
  if (v18)
  {
    *((_QWORD *)this + 41) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 36);
  if (v19)
  {
    *((_QWORD *)this + 37) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 33);
  if (v20)
  {
    *((_QWORD *)this + 34) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 22);
  if (v21)
  {
    *((_QWORD *)this + 23) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 19);
  if (v22)
  {
    *((_QWORD *)this + 20) = v22;
    operator delete(v22);
  }
  v23 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v23)
    MEMORY[0x193FFE43C](v23, 0x1000C8077774924);
  AudioFileObject::~AudioFileObject(this);
}

uint64_t MP4AudioFile::Create(MP4AudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t result;
  int v7;
  int v8;
  _DWORD *exception;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(MP4AudioFile *, const AudioStreamBasicDescription *))(*(_QWORD *)this + 616))(this, a3))return 1685348671;
  result = AudioFileObject::Create(this, a2, a3);
  if (!(_DWORD)result)
  {
    result = MP4AudioFile::WriteFileTypeBoxToFile(this);
    if (!(_DWORD)result)
    {
      v7 = (*(uint64_t (**)(MP4AudioFile *, const AudioStreamBasicDescription *))(*(_QWORD *)this + 176))(this, a3);
      if (v7)
      {
        v8 = v7;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v10 = 136315394;
          v11 = "MP4AudioFile.cpp";
          v12 = 1024;
          v13 = 1049;
          _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  bad data format", (uint8_t *)&v10, 0x12u);
        }
        exception = __cxa_allocate_exception(4uLL);
        *exception = v8;
        __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
      }
      MP4AudioFile::InitNewFile(this);
      result = 0;
      *((_DWORD *)this + 20) = 0;
    }
  }
  return result;
}

uint64_t MP4AudioFile::OpenFromDataSource(MP4AudioFile *this)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *BoxInfo;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 **v11;
  unsigned int v12;
  unsigned int v13;
  __n128 *v14;
  unsigned int v15;
  __n128 *v16;
  int v17;
  __n128 *v19;
  unsigned int v20;
  void *AudioTrackData;
  __n128 **v22;
  uint64_t v23;
  unsigned int v24;
  __n128 *v25;
  unint64_t v26;
  MP4BoxParser_MovieExtends *v27;
  __n128 **v28;
  uint64_t v29;
  unsigned int v30;
  __n128 *v31;
  unint64_t v32;
  unsigned int v33;
  __n128 *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int i;
  __n128 **v40;
  unint64_t v41;
  unsigned int v42;
  MP4BoxParser_MovieExtends *v43;
  unsigned int v44;
  __n128 *v45;
  MP4BoxParser_MovieExtends *v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  char v50[4];
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  __n128 **v55;
  uint64_t v56;
  char v57;
  int v58;
  uint64_t v59;
  char v60;
  int v61;
  char v62;
  __n128 **v63;
  __n128 **v64;
  MP4BoxParser_MovieExtends *v65;
  char v66;
  int v67;
  uint64_t v68;
  char v69;
  int v70;
  char v71;
  unint64_t *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 100) & 2) != 0)
    return 1886547263;
  v53 = 0;
  v52 = 0;
  v2 = (_QWORD *)((char *)this + 104);
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v53);
  v49 = 0;
  v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, char *, int *))(*(_QWORD *)*v2 + 48))(*v2, 0, 0, 8, v50, &v49);
  if (!(_DWORD)v3)
  {
    v3 = 1685348671;
    if (v51 == 1887007846)
    {
      if (IsValidDataForMP4FileType(*((DataSource **)this + 13), *((_DWORD *)this + 21)))
      {
        v4 = FillMP4BoxTable(*((_QWORD *)this + 13), 0, v53, *((__n128 ***)this + 28), 0, 0);
        v5 = v53;
        if (!v4
          || FindBoxInfo(*((_QWORD *)this + 13), 0, v53, 1718909296, 0, *((__n128 ***)this + 28))
          && FindBoxInfo(*((_QWORD *)this + 13), 0, v53, 1836019574, 0, *((__n128 ***)this + 28))
          && (v6 = FindBoxInfo(*((_QWORD *)this + 13), 0, v53, 1835295092, 0, *((__n128 ***)this + 28))) != 0
          && (v5 = v53, (int64_t)(v6[1].n128_u64[0] + v6->n128_u64[1]) <= v53))
        {
          BoxInfo = FindBoxInfo(*((_QWORD *)this + 13), 0, v5, 1836019574, 0, *((__n128 ***)this + 28));
          if (BoxInfo)
          {
            v8 = *((_QWORD *)this + 13);
            v9 = BoxInfo[1].n128_u64[0];
            v55 = (__n128 **)&off_1E2902718;
            (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v8 + 88))(&v56, v8, v9);
            v57 = 0;
            v58 = 0;
            v59 = 0;
            v60 = 0;
            v61 = 8;
            v55 = (__n128 **)&off_1E29078B8;
            v62 = 1;
            v63 = 0;
            v10 = MP4BoxParser_Movie::Init(&v55);
            if (!(_DWORD)v10)
            {
              v11 = v63;
              if (v63)
              {
                v12 = 0;
                v13 = 0;
LABEL_14:
                v14 = v11[1];
                if (v14 == (__n128 *)v11)
                  goto LABEL_20;
                v15 = 0;
                do
                {
                  if (v14[1].n128_u32[0] == 1953653099)
                    ++v15;
                  v14 = (__n128 *)v14->n128_u64[1];
                }
                while (v14 != (__n128 *)v11);
LABEL_21:
                if (v12 < v15)
                {
                  v16 = v11[1];
                  if (v16 == (__n128 *)v11)
                    goto LABEL_33;
                  v17 = 0;
                  while (1)
                  {
                    if (v16[1].n128_u32[0] == 1953653099)
                    {
                      if (v17 == v12)
                      {
                        MP4BoxParser_Track::MP4BoxParser_Track((uint64_t)&v64, v56, v16[2].n128_i64[0], v16[2].n128_i64[1], v12);
                        if (!MP4BoxParser_Track::Init(&v64)
                          && MP4BoxParser_Track::GetTrackType((MP4BoxParser_Track *)&v64) == 1936684398)
                        {
                          ++v13;
                        }
                        MP4BoxParser_Track::~MP4BoxParser_Track((MP4BoxParser_Track *)&v64);
                        v11 = v63;
LABEL_33:
                        ++v12;
                        if (!v11)
                        {
LABEL_20:
                          v15 = 0;
                          goto LABEL_21;
                        }
                        goto LABEL_14;
                      }
                      ++v17;
                    }
                    v16 = (__n128 *)v16->n128_u64[1];
                    if (v16 == (__n128 *)v11)
                      goto LABEL_33;
                  }
                }
                *((_DWORD *)this + 125) = v13;
                if (v13)
                {
                  if (!v11 || (v19 = v11[1], v19 == (__n128 *)v11))
                  {
                    v20 = 0;
                  }
                  else
                  {
                    v20 = 0;
                    do
                    {
                      if (v19[1].n128_u32[0] == 1953653099)
                        ++v20;
                      v19 = (__n128 *)v19->n128_u64[1];
                    }
                    while (v19 != (__n128 *)v11);
                  }
                  *((_DWORD *)this + 124) = v20;
                  if (v20 >= v13)
                  {
                    v48 = 0;
                    AudioTrackData = MP4BoxParser_Movie::GetAudioTrackData((MP4BoxParser_Movie *)&v55, 0, &v52, &v48);
                    *((_QWORD *)this + 29) = AudioTrackData;
                    if (AudioTrackData)
                    {
                      v22 = v63;
                      v23 = v56;
                      v24 = ((uint64_t (*)(__n128 ***))v55[3])(&v55);
                      v25 = FindBoxInfo(v23, v24, v59, 1836476516, 0, v22);
                      if (v25)
                      {
                        v26 = v25[1].n128_u64[0];
                        v64 = (__n128 **)&off_1E2902718;
                        (*(void (**)(MP4BoxParser_MovieExtends **__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v56 + 88))(&v65, v56, v26);
                        v66 = 0;
                        v67 = 0;
                        v68 = 0;
                        v69 = 0;
                        v64 = (__n128 **)&off_1E2908D30;
                        v75 = 0;
                        v72 = 0;
                        v73 = 0;
                        v70 = 8;
                        v74 = 0;
                        if (!MP4BoxParser_MovieHeader::Init((MP4BoxParser **)&v64))
                          *((_DWORD *)this + 114) = v74;
                        v27 = v65;
                        v64 = (__n128 **)&off_1E2902718;
                        v65 = 0;
                        if (v27)
                          (*(void (**)(MP4BoxParser_MovieExtends *))(*(_QWORD *)v27 + 8))(v27);
                      }
                      v28 = v63;
                      v29 = v56;
                      v30 = ((uint64_t (*)(__n128 ***))v55[3])(&v55);
                      v31 = FindBoxInfo(v29, v30, v59, 1836475768, 0, v28);
                      if (v31)
                      {
                        v32 = v31[1].n128_u64[0];
                        v64 = (__n128 **)&off_1E2902718;
                        (*(void (**)(MP4BoxParser_MovieExtends **__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v56 + 88))(&v65, v56, v32);
                        v66 = 0;
                        v67 = 0;
                        v68 = 0;
                        v69 = 0;
                        v70 = 8;
                        v64 = (__n128 **)&off_1E2909040;
                        v71 = 1;
                        v72 = 0;
                        if (!MP4BoxParser_MovieExtends::Init(&v64))
                        {
                          *((_BYTE *)this + 408) = 1;
                          v54 = 0;
                          if (MP4BoxParser_MovieExtends::GetOverallDurationIncludingFragments(v65, v72, &v54))
                          {
                            v33 = *((_DWORD *)this + 114);
                            if (v33)
                            {
                              *((_BYTE *)this + 409) = 1;
                              *((double *)this + 52) = (double)(unint64_t)v54 / (double)v33;
                            }
                          }
                          MP4BoxParser_MovieExtends::GetTrackFragmentDefaultsMap((uint64_t)&v64, (uint64_t)this + 424);
                        }
                        MP4BoxParser_MovieExtends::~MP4BoxParser_MovieExtends((MP4BoxParser_MovieExtends *)&v64);
                      }
                      v54 = 0;
                      if (!(*(unsigned int (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v54))
                      {
                        v34 = FindBoxInfo(*((_QWORD *)this + 13), 0, v54, 1836019574, 0, *((__n128 ***)this + 28));
                        if (v34)
                        {
                          v35 = *((_QWORD *)this + 13);
                          v36 = v34[1].n128_u64[0];
                          v64 = (__n128 **)&off_1E2902718;
                          (*(void (**)(MP4BoxParser_MovieExtends **__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v35 + 88))(&v65, v35, v36);
                          v66 = 0;
                          v67 = 0;
                          v68 = 0;
                          v69 = 0;
                          v70 = 8;
                          v64 = (__n128 **)&off_1E29078B8;
                          v71 = 1;
                          v72 = 0;
                          if (!MP4BoxParser_Movie::Init(&v64))
                          {
                            for (i = 0; ; ++i)
                            {
                              v40 = (__n128 **)v72;
                              if (!v72 || (v41 = v72[1], (unint64_t *)v41 == v72))
                              {
                                v42 = 0;
                              }
                              else
                              {
                                v42 = 0;
                                do
                                {
                                  if (*(_DWORD *)(v41 + 16) == 1969517665)
                                    ++v42;
                                  v41 = *(_QWORD *)(v41 + 8);
                                }
                                while ((unint64_t *)v41 != v72);
                              }
                              if (i >= v42)
                                break;
                              v43 = v65;
                              v44 = ((uint64_t (*)(__n128 ***))v64[3])(&v64);
                              v45 = FindBoxInfo((uint64_t)v43, v44, v68, 1969517665, i, v40);
                              if (v45)
                              {
                                v37 = operator new();
                                v46 = v65;
                                v47 = v45[1].n128_u64[0] + 8;
                                *(_QWORD *)v37 = &off_1E2902718;
                                (*(void (**)(MP4BoxParser_MovieExtends *, uint64_t))(*(_QWORD *)v46 + 88))(v46, v47);
                                *(_BYTE *)(v37 + 16) = 0;
                                *(_DWORD *)(v37 + 20) = 0;
                                *(_QWORD *)(v37 + 24) = 0;
                                *(_BYTE *)(v37 + 32) = 0;
                                *(_DWORD *)(v37 + 36) = 8;
                                *(_QWORD *)(v37 + 64) = 0;
                                *(_DWORD *)(v37 + 72) = 0;
                                *(_QWORD *)v37 = &off_1E2908BA0;
                                if (!MP4BoxParser_iTunesMeta::Init((MP4BoxParser_iTunesMeta *)v37))
                                {
                                  MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)&v64);
                                  goto LABEL_68;
                                }
                                (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
                              }
                            }
                          }
                          MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)&v64);
                        }
                      }
                      v37 = 0;
LABEL_68:
                      *((_QWORD *)this + 75) = v37;
                      MP4AudioFile::FillPacketTableInfoFromiTunesUserData(this);
                      v38 = MP4AudioFile::UseAudioTrack(this, *((void **)this + 29), v52, v48);
                      *((_QWORD *)this + 30) = v38;
                      if (v38)
                      {
                        v3 = 0;
                        *((_QWORD *)this + 27) = *((_QWORD *)this + 56);
                      }
                      else
                      {
                        v3 = 2003334207;
                      }
                    }
                    v10 = v3;
                    goto LABEL_49;
                  }
                }
              }
              else
              {
                *((_DWORD *)this + 125) = 0;
              }
              v10 = 1685348671;
            }
LABEL_49:
            MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)&v55);
            return v10;
          }
        }
      }
    }
  }
  return v3;
}

void sub_18F0D15A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)va1);
  MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)va);
  _Unwind_Resume(a1);
}

uint64_t MP4AudioFile::InitializeDataSource(MP4AudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t result;

  if (!(*(unsigned int (**)(MP4AudioFile *))(*(_QWORD *)this + 616))(this))
    return 1685348671;
  result = MP4AudioFile::WriteFileTypeBoxToFile(this);
  if (!(_DWORD)result)
  {
    result = (*(uint64_t (**)(MP4AudioFile *, const AudioStreamBasicDescription *))(*(_QWORD *)this + 176))(this, a2);
    if (!(_DWORD)result)
    {
      MP4AudioFile::InitNewFile(this);
      return 0;
    }
  }
  return result;
}

uint64_t MP4AudioFile::Close(MP4AudioFile *this)
{
  MP4AudioFile *v1;
  uint64_t SampleDescription;
  double v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unsigned int MetaDataSize;
  unsigned int v16;
  char *v17;
  char *v18;
  UInt32 v19;
  __int128 *v20;
  uint64_t *v21;
  unsigned int v22;
  char *v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  size_t v29;
  int v30;
  size_t v31;
  size_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  const __CFData *v36;
  unsigned int Length;
  unsigned int v38;
  unsigned int v39;
  const __CFData *v40;
  const UInt8 *BytePtr;
  char v42;
  _BOOL4 v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  int v48;
  unsigned int SampleDescriptionSize;
  unsigned int v50;
  char *v51;
  char *v52;
  BOOL v53;
  uint64_t v54;
  CACFData *v56;
  const __CFData *v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  int *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  _BOOL4 v70;
  int v71;
  int v72;
  char v73;
  MP4AudioFile *v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  __n128 v79;
  unsigned int v80;
  unsigned int v81;
  _QWORD *v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  char *v86;
  unsigned int *v87;
  unsigned int v88;
  _DWORD *v89;
  int *v90;
  int v91;
  unsigned int *v92;
  int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _DWORD *v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  NSObject *v118;
  const char *v119;
  char *v120;
  const __CFData *v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  AudioFileObject *v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  int **v131;
  int *v132;
  int *v133;
  unint64_t v134;
  int *v135;
  unint64_t v136;
  int *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  int *v148;
  int *v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  int *v153;
  int *v154;
  int *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  BOOL v169;
  unint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  unsigned int v174;
  _DWORD *v175;
  _DWORD *v176;
  const UInt8 *v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  void *v186;
  void *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unsigned int v192;
  std::bad_alloc *v193;
  std::bad_alloc *v194;
  std::bad_alloc *exception;
  std::bad_alloc *v196;
  int v197;
  uint64_t v198;
  char *v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  unsigned int *v204;
  unsigned int *v205;
  unsigned int *v206;
  _QWORD *v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  void *v211;
  int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  AudioFileObject *v217;
  UInt32 ioPropertyDataSize[2];
  unint64_t v219;
  unsigned int v220[2];
  unsigned int v221[2];
  unsigned int v222[2];
  CFDataRef outPropertyData;
  unsigned int v224;
  int v225;
  char __str[32];
  uint64_t v227;
  CFRange v228;

  v1 = this;
  v227 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 100) & 2) == 0)
  {
    SampleDescription = 0;
    goto LABEL_67;
  }
  v3 = *((double *)this + 3);
  v4 = *((_DWORD *)this + 8);
  v5 = *((_DWORD *)this + 11);
  v6 = *((_DWORD *)this + 13);
  if (v4 != 1819304813 && !*((_DWORD *)this + 35))
    return 2003334207;
  v225 = 0;
  v7 = *MEMORY[0x1E0C9ADE8] + CFAbsoluteTimeGetCurrent();
  v8 = *((_QWORD *)v1 + 31);
  *(_DWORD *)(v8 + 20) = v7;
  *(_DWORD *)(v8 + 24) = v7;
  *(_DWORD *)(v8 + 136) = v7;
  *(_DWORD *)(v8 + 140) = v7;
  *(_DWORD *)(v8 + 236) = v7;
  *(_DWORD *)(v8 + 240) = v7;
  v9 = *(unsigned int *)(v8 + 386);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = (_DWORD *)(**(_QWORD **)(v8 + 390) + 4);
    do
    {
      v10 += (*v11 * *(v11 - 1));
      v11 += 2;
      --v9;
    }
    while (v9);
  }
  else
  {
    v10 = 0;
  }
  *(_DWORD *)(v8 + 244) = v3;
  *(_DWORD *)(v8 + 248) = v10;
  v12 = *((_DWORD *)v1 + 21);
  v13 = v12 == 1832149350 || v12 == 1832149606;
  if (v13)
  {
    LODWORD(v14) = v10;
  }
  else
  {
    v14 = *((_QWORD *)v1 + 58);
    if (v14 == -1)
      LODWORD(v14) = v10;
  }
  *(_DWORD *)(v8 + 28) = *((_DWORD *)v1 + 114);
  *(_DWORD *)(v8 + 32) = v14;
  *(_DWORD *)(v8 + 152) = v14;
  v217 = v1;
  v215 = v4;
  if (v12 != 1832149606 && v12 != 1832149350 || !*((_BYTE *)v1 + 528))
  {
    v18 = 0;
    v16 = 0;
    goto LABEL_46;
  }
  ioPropertyDataSize[0] = 0;
  LODWORD(outPropertyData) = 0;
  v222[0] = 0;
  v221[0] = 0;
  v220[0] = 0;
  v224 = 0;
  MetaDataSize = MP4AudioFile::GetMetaDataSize(v1, ioPropertyDataSize, (unsigned int *)&outPropertyData, v222, v221, v220, &v224);
  v16 = MetaDataSize;
  if (MetaDataSize)
  {
    v17 = (char *)malloc_type_malloc(MetaDataSize, 0x2C8E6D5CuLL);
    v18 = v17;
    if (!v17)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v196 = std::bad_alloc::bad_alloc(exception);
    }
    bzero(v17, v16);
    v19 = (_DWORD)outPropertyData + ioPropertyDataSize[0] + v222[0] + v221[0];
    *(_DWORD *)(v18 + 54) = v19 + 8;
    *(_DWORD *)(v18 + 58) = 1768715124;
    *((_QWORD *)v18 + 4) = 0x6D64697200000000;
    *((_DWORD *)v18 + 10) = 1634758764;
    *((_DWORD *)v18 + 2) = v19 + 54;
    *((_DWORD *)v18 + 3) = 1835365473;
    *(_DWORD *)v18 = v19 + 62;
    *((_DWORD *)v18 + 1) = 1969517665;
    *(int8x16_t *)v18 = vrev32q_s8(*(int8x16_t *)v18);
    *(_QWORD *)(v18 + 20) = 0x726C646822000000;
    *((int8x16_t *)v18 + 2) = vrev32q_s8(*((int8x16_t *)v18 + 2));
    *((_DWORD *)v18 + 12) = bswap32(*((_DWORD *)v18 + 12));
    *(int8x8_t *)(v18 + 54) = vrev32_s8(*(int8x8_t *)(v18 + 54));
    v20 = &xmmword_18F117000;
    v21 = &qword_18F0F7000;
    if (v224)
    {
      *(_DWORD *)(v18 + 62) = 1275068416;
      *(_OWORD *)(v18 + 66) = xmmword_18F1174A0;
      *(_OWORD *)(v18 + 82) = *(_OWORD *)"com.apple.iTunes";
      *(_DWORD *)(v18 + 98) = 335544320;
      *(_QWORD *)(v18 + 102) = 1701667182;
      *(_QWORD *)(v18 + 110) = 0x484343456E755469;
      *(_DWORD *)(v18 + 118) = 335544320;
      *(_QWORD *)(v18 + 122) = 1635017060;
      v18[129] = 1;
      *(_DWORD *)(v18 + 130) = 0;
      *(_DWORD *)(v18 + 134) = bswap32(*((_DWORD *)v1 + 142));
      v22 = 138;
    }
    else
    {
      v22 = 62;
    }
    if (v220[0])
    {
      v23 = &v18[v22];
      v24 = *((_DWORD *)v1 + 139);
      *(_DWORD *)v23 = bswap32(v24 + 72);
      *(_OWORD *)(v23 + 4) = xmmword_18F1174A0;
      *(_OWORD *)(v23 + 20) = *(_OWORD *)"com.apple.iTunes";
      *((_DWORD *)v23 + 9) = 335544320;
      *((_QWORD *)v23 + 5) = 1701667182;
      *((_QWORD *)v23 + 6) = 0x485341486E755469;
      *((_DWORD *)v23 + 14) = bswap32(v24 + 16);
      *(_QWORD *)(v23 + 60) = 1635017060;
      v23[67] = 1;
      *((_DWORD *)v23 + 17) = 0;
      v25 = v22 + 72;
      memcpy(&v18[v25], *((const void **)v1 + 70), *((unsigned int *)v1 + 139));
      v20 = &xmmword_18F117000;
      v22 = *((_DWORD *)v1 + 139) + v25;
    }
    if (v222[0])
    {
      MP4AudioFile::AddITunesMetaData(v1, (unsigned __int8 *)&v18[v22], v16 - v22);
      v22 += v222[0];
      v20 = &xmmword_18F117000;
    }
    if (ioPropertyDataSize[0])
    {
      v26 = &v18[v22];
      *(_DWORD *)v26 = -1140850688;
      *(_OWORD *)(v26 + 4) = v20[74];
      *(_OWORD *)(v26 + 20) = *(_OWORD *)"com.apple.iTunes";
      *((_DWORD *)v26 + 9) = 335544320;
      *((_QWORD *)v26 + 5) = 1701667182;
      *((_QWORD *)v26 + 6) = 0x42504D536E755469;
      *((_DWORD *)v26 + 14) = -2080374784;
      *(_QWORD *)(v26 + 60) = 1635017060;
      v26[67] = 1;
      *((_DWORD *)v26 + 17) = 0;
      v27 = &v18[v22 + 72];
      *(_QWORD *)&v28 = 0x3030303030303030;
      *((_QWORD *)&v28 + 1) = 0x3030303030303030;
      *(_OWORD *)(v27 + 49) = v28;
      *(_OWORD *)(v27 + 65) = v28;
      *(_OWORD *)(v27 + 81) = v28;
      *(_OWORD *)(v27 + 97) = v28;
      *((_DWORD *)v27 + 28) = 808464432;
      *(_OWORD *)(v27 + 33) = v28;
      *(_OWORD *)(v27 + 17) = v28;
      *(_OWORD *)(v27 + 1) = v28;
      *v27 = 32;
      v27[9] = 32;
      snprintf(__str, 0x20uLL, "%X", *((_DWORD *)v217 + 122));
      v29 = strlen(__str);
      memcpy(&v27[-v29 + 18], __str, v29);
      v27[18] = 32;
      v30 = *((_DWORD *)v217 + 123);
      *(_QWORD *)(v27 + 19) = 0x3030303030303030;
      snprintf(__str, 0x20uLL, "%X", v30);
      v31 = strlen(__str);
      memcpy(&v27[-v31 + 27], __str, v31);
      qmemcpy(v27 + 27, " 0000000000000000", 17);
      snprintf(__str, 0x20uLL, "%qX", *((_QWORD *)v217 + 60));
      v32 = strlen(__str);
      memcpy(&v27[-v32 + 44], __str, v32);
      v33 = 44;
      do
      {
        v27[v33] = 32;
        v33 += 9;
      }
      while ((_DWORD)v33 != 116);
      v22 += 188;
      v21 = &qword_18F0F7000;
      v20 = &xmmword_18F117000;
    }
    v1 = v217;
    if ((_DWORD)outPropertyData)
    {
      v34 = &v18[v22];
      *(_DWORD *)v34 = bswap32(45 * v6 + 72);
      *(_OWORD *)(v34 + 4) = v20[74];
      *(_OWORD *)(v34 + 20) = *(_OWORD *)"com.apple.iTunes";
      *((_DWORD *)v34 + 9) = 335544320;
      *((_QWORD *)v34 + 5) = 1701667182;
      *((_QWORD *)v34 + 6) = 0x4D524F4E6E755469;
      *((_DWORD *)v34 + 14) = bswap32(45 * v6 + 16);
      *(_QWORD *)(v34 + 60) = v21[146];
      v34[67] = 1;
      *((_DWORD *)v34 + 17) = 0;
      v35 = v22 + 72;
      FillSCString(*((int **)v217 + 64), *((_DWORD *)v217 + 13), &v18[v35]);
      v22 = v35 + 45 * v6;
    }
    if (v221[0])
    {
      v36 = (const __CFData *)*((_QWORD *)v217 + 68);
      if (v36)
      {
        Length = CFDataGetLength(v36);
        v38 = Length;
        if (Length)
        {
          v39 = Length + 24;
          if ((unint64_t)Length + 24 <= v16 - v22)
          {
            v40 = (const __CFData *)*((_QWORD *)v217 + 68);
            if (v40)
            {
              BytePtr = CFDataGetBytePtr(v40);
              if (*(_DWORD *)BytePtr == 1196314761)
              {
                v42 = 14;
LABEL_160:
                v120 = &v18[v22];
                *(_DWORD *)v120 = bswap32(v39);
                *((_DWORD *)v120 + 1) = 1920364387;
                *((_DWORD *)v120 + 2) = bswap32(v38 + 16);
                *((_DWORD *)v120 + 3) = 1635017060;
                *((_WORD *)v120 + 8) = 0;
                v120[18] = 0;
                v120[19] = v42;
                *((_DWORD *)v120 + 5) = 0;
                v121 = (const __CFData *)*((_QWORD *)v217 + 68);
                v228.length = CFDataGetLength(v121);
                v228.location = 0;
                CFDataGetBytes(v121, v228, (UInt8 *)v120 + 24);
                goto LABEL_46;
              }
              if (*(_DWORD *)(BytePtr + 6) == 1179207242)
              {
                v42 = 13;
                goto LABEL_160;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v18 = 0;
  }
LABEL_46:
  v224 = 0;
  v44 = v3 > 65535.0 && v4 == 1819304813;
  SampleDescription = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(**((_QWORD **)v1 + 13) + 48))(*((_QWORD *)v1 + 13), 0, 0, 4, &v224, &v225);
  if ((_DWORD)SampleDescription)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_67;
    *(_DWORD *)__str = 136315394;
    *(_QWORD *)&__str[4] = "MP4AudioFile.cpp";
    *(_WORD *)&__str[12] = 1024;
    *(_DWORD *)&__str[14] = 1225;
    v45 = MEMORY[0x1E0C81028];
    v46 = "%25s:%-5d  MP4AudioFile::Close - Couldn't read fileType size";
LABEL_66:
    _os_log_impl(&dword_18EE07000, v45, OS_LOG_TYPE_ERROR, v46, (uint8_t *)__str, 0x12u);
    goto LABEL_67;
  }
  v47 = *((_QWORD *)v1 + 25);
  v48 = 8;
  v213 = v224;
  if (v47)
  {
    if (*(uint64_t *)(**((_QWORD **)v1 + 50) + 8 * v47 - 8) <= 0xFFFFFFFFLL)
      v48 = 8;
    else
      v48 = 16;
  }
  SampleDescriptionSize = MP4AudioFile::GetSampleDescriptionSize(v1, v44);
  v50 = SampleDescriptionSize;
  v51 = (char *)malloc_type_malloc(SampleDescriptionSize, 0x2C8E6D5CuLL);
  v52 = v51;
  if (SampleDescriptionSize)
    v53 = v51 == 0;
  else
    v53 = 0;
  if (v53)
  {
    v193 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v194 = std::bad_alloc::bad_alloc(v193);
  }
  bzero(v51, SampleDescriptionSize);
  SampleDescription = MP4AudioFile::GetSampleDescription(v1, v52, SampleDescriptionSize, v44);
  if ((_DWORD)SampleDescription)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_67;
    *(_DWORD *)__str = 136315394;
    *(_QWORD *)&__str[4] = "MP4AudioFile.cpp";
    *(_WORD *)&__str[12] = 1024;
    *(_DWORD *)&__str[14] = 1237;
    v45 = MEMORY[0x1E0C81028];
    v46 = "%25s:%-5d  MP4AudioFile::Close - GetSampleDescription() failed";
    goto LABEL_66;
  }
  *(_QWORD *)v222 = 0;
  outPropertyData = 0;
  v212 = v5;
  v207 = (_QWORD *)((char *)v1 + 576);
  if (*((_QWORD *)v1 + 72))
  {
    ioPropertyDataSize[0] = 8;
    SampleDescription = AudioFormatGetProperty(0x6C626C64u, 8u, (char *)v1 + 576, ioPropertyDataSize, &outPropertyData);
    if ((_DWORD)SampleDescription || !outPropertyData)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 136315394;
        *(_QWORD *)&__str[4] = "MP4AudioFile.cpp";
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = 1247;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4AudioFile::Close - getting ludt box from loudness info dictionary failed", (uint8_t *)__str, 0x12u);
      }
      v56 = 0;
    }
    else
    {
      v56 = (CACFData *)operator new();
      v57 = outPropertyData;
      *(_QWORD *)v56 = outPropertyData;
      *((_BYTE *)v56 + 8) = 1;
      *(_QWORD *)v222 = v56;
      v58 = CFDataGetLength(v57);
      v59 = v215;
      if (v58)
      {
        v208 = v58 + 16;
        v5 = v212;
        goto LABEL_77;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 136315394;
        *(_QWORD *)&__str[4] = "MP4AudioFile.cpp";
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = 1250;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4AudioFile::Close - ludt box size is zero", (uint8_t *)__str, 0x12u);
      }
      SampleDescription = 1;
    }
    LODWORD(v66) = 4;
    goto LABEL_263;
  }
  v208 = 0;
  v58 = 0;
  v59 = v215;
LABEL_77:
  v203 = v58;
  if (v5)
  {
    v60 = *((_QWORD *)v1 + 25);
    v61 = (int *)*((_QWORD *)v1 + 31);
    LODWORD(v62) = v5;
  }
  else
  {
    v61 = (int *)*((_QWORD *)v1 + 31);
    v63 = *(unsigned int *)((char *)v61 + 386);
    if ((_DWORD)v63)
    {
      v64 = 0;
      v65 = (_DWORD *)(**(_QWORD **)((char *)v61 + 390) + 4);
      do
      {
        v64 += (*v65 * *(v65 - 1));
        v65 += 2;
        --v63;
      }
      while (v63);
    }
    else
    {
      v64 = 0;
    }
    v60 = *((_QWORD *)v1 + 25);
    v62 = v64 / v60;
    if (!(_DWORD)v62)
      goto LABEL_93;
  }
  LODWORD(v62) = (v3 / (double)v62) >> 1;
LABEL_93:
  v199 = v52;
  v200 = v44;
  v67 = v62 + 1;
  v210 = v50;
  v209 = v48;
  if (v60)
  {
    v68 = v60 / v67;
    v69 = *(_QWORD *)(**((_QWORD **)v1 + 50) + 8 * v60 - 8);
    v13 = v60 / v67 * v67 == (_DWORD)v60;
    v70 = v13;
    if (v13)
      v71 = 12;
    else
      v71 = 24;
    if (v69 <= 0xFFFFFFFFLL)
      v72 = 4;
    else
      v72 = 8;
    if (v69 <= 0xFFFFFFFFLL)
      v73 = 2;
    else
      v73 = 3;
  }
  else
  {
    v68 = 0 / v67;
    v70 = 0 / v67 * v67 == 0;
    if (0 / v67 * v67)
      v71 = 24;
    else
      v71 = 12;
    v73 = 2;
    v72 = 4;
  }
  v74 = v1;
  v75 = *v61;
  if (v70)
    v76 = 0;
  else
    v76 = v72;
  v77 = *((_QWORD *)v74 + 9);
  *(_QWORD *)v220 = 0;
  *(_QWORD *)v221 = 0;
  v78 = (*(uint64_t (**)(MP4AudioFile *))(*(_QWORD *)v74 + 272))(v74);
  v80 = v208 + v16 + v210 + (v68 << v73) + v75 + v71 + v76;
  v1 = v217;
  v81 = v209;
  if (v78)
  {
LABEL_111:
    if (*((_QWORD *)v217 + 58) == -1)
    {
      *((_QWORD *)v217 + 58) = v10;
      *((_QWORD *)v217 + 59) = 0;
    }
    v82 = malloc_type_calloc(1uLL, 0x24uLL, 0x10000408AA14F5FuLL);
    *(_OWORD *)v82 = xmmword_18F1174B0;
    v82[2] = 0x100000000000000;
    *((_DWORD *)v82 + 6) = bswap32(*((_DWORD *)v217 + 116));
    *((_DWORD *)v82 + 7) = bswap32(*((_DWORD *)v217 + 118));
    *((_DWORD *)v82 + 8) = 256;
    if (!(*(unsigned int (**)(AudioFileObject *))(*(_QWORD *)v217 + 272))(v217))
    {
      if (AudioFormatEncryptedFormatTranslator::DecryptFormatID(v59, (int *)__str) >> 8 == 6381923)
        v79.n128_f64[0] = CreateSampleToRollGroup(*((_QWORD *)v217 + 25), v221, v220);
      v87 = 0;
      v95 = v80 + 36;
      goto LABEL_131;
    }
    memset(__str, 0, 24);
    std::vector<SyncSampleEntry>::__init_with_size[abi:ne180100]<SyncSampleEntry*,SyncSampleEntry*>(__str, *((const void **)v217 + 47), *((_QWORD *)v217 + 48), (uint64_t)(*((_QWORD *)v217 + 48) - *((_QWORD *)v217 + 47)) >> 3);
    v83 = v77;
    v84 = *(int **)__str;
    if (*((_BYTE *)v217 + 368))
      v85 = ((*(_QWORD *)&__str[8] - *(_QWORD *)__str) >> 3);
    else
      v85 = 0;
    v86 = (char *)malloc_type_calloc(1uLL, 4 * v85 + 16, 0x85A86819uLL);
    v87 = (unsigned int *)v86;
    *(_DWORD *)v86 = bswap32(4 * v85 + 16);
    v88 = bswap32(v85);
    v79.n128_u64[0] = 1936946291;
    *(_QWORD *)(v86 + 4) = 1936946291;
    *((_DWORD *)v86 + 3) = v88;
    if ((_DWORD)v85)
    {
      v89 = v86 + 16;
      v90 = v84;
      LODWORD(v59) = v215;
      do
      {
        v91 = *v90;
        v90 += 2;
        *v89++ = bswap32(v91 + 1);
        --v85;
      }
      while (v85);
    }
    else
    {
      LODWORD(v59) = v215;
      if (!v84)
        goto LABEL_129;
    }
    operator delete(v84);
    v88 = v87[3];
LABEL_129:
    v77 = v83;
    v95 = v80 + 4 * bswap32(v88) + 52;
    if (*((_BYTE *)v217 + 312))
      CreateSampleToPrerollGroup(*((char **)v217 + 25), (uint64_t)v217 + 312, v221, v220);
LABEL_131:
    v206 = v87;
    v94 = *(unsigned int **)v221;
    if (*(_QWORD *)v221)
      v96 = 2 * bswap32(*(_DWORD *)(*(_QWORD *)v221 + 20)) + 24;
    else
      v96 = 0;
    v1 = v217;
    v81 = v209;
    v97 = v96 + v95;
    v92 = *(unsigned int **)v220;
    if (*(_QWORD *)v220)
      v98 = 8 * bswap32(*(_DWORD *)(*(_QWORD *)v220 + 16)) + 20;
    else
      v98 = 0;
    v80 = v97 + v98;
    goto LABEL_138;
  }
  v92 = 0;
  v93 = *((_DWORD *)v217 + 21);
  if (v93 == 1832149350)
  {
    v94 = 0;
    v206 = 0;
    v82 = 0;
  }
  else
  {
    v94 = 0;
    v206 = 0;
    v82 = 0;
    if (v93 != 1832149606)
      goto LABEL_111;
  }
LABEL_138:
  v204 = v92;
  v205 = v94;
  v99 = bswap32(v213);
  v100 = v81;
  v101 = v77;
  v102 = v77 - v81;
  v103 = v210;
  if (v102 < 1 || (v104 = v99 + v80, v104 == v102))
  {
    v197 = 0;
  }
  else if (v102 - v99 - 8 >= (unint64_t)v80)
  {
    v197 = 1;
  }
  else if (*((_BYTE *)v1 + 520))
  {
    v112 = ((v81 | 0x1007) + v104) & 0x3FFFFF000;
    if (*((_QWORD *)v1 + 25))
    {
      v113 = 0;
      v114 = (v112 - *((_DWORD *)v1 + 18));
      v115 = **((_QWORD **)v1 + 50);
      v116 = 1;
      do
      {
        *(_QWORD *)(v115 + 8 * v113) += v114;
        v113 = v116;
      }
      while (*((_QWORD *)v1 + 25) > (unint64_t)v116++);
    }
    SampleDescription = AudioFileObject::MoveData(v1, v101, v112, *((_QWORD *)v1 + 26));
    if ((_DWORD)SampleDescription)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 136315394;
        *(_QWORD *)&__str[4] = "MP4AudioFile.cpp";
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = 1359;
        v118 = MEMORY[0x1E0C81028];
        v119 = "%25s:%-5d  MP4AudioFile::Close - Couldn't move data to optimize";
        goto LABEL_260;
      }
      goto LABEL_261;
    }
    *((_QWORD *)v1 + 9) = v112;
    v102 = v112 - v100;
    v197 = 1;
    LODWORD(v59) = v215;
  }
  else
  {
    v202 = v81;
    ioPropertyDataSize[0] = 0;
    *(_DWORD *)__str = bswap32(v102 - v99);
    *(_DWORD *)&__str[4] = 1701147238;
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *, UInt32 *, __n128))(**((_QWORD **)v1 + 13) + 56))(*((_QWORD *)v1 + 13), 0, v99, 8, __str, ioPropertyDataSize, v79);
    v188 = (_QWORD *)*((_QWORD *)v217 + 50);
    v189 = *(_QWORD *)(*v188 + 8 * (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)v217 + 240))(v217) - 8);
    v190 = *((_QWORD *)v217 + 31);
    v191 = (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)v217 + 240))(v217);
    v1 = v217;
    v103 = v210;
    if (*(_DWORD *)(v190 + 426) != 1937011578 || (v192 = *(_DWORD *)(v190 + 434)) == 0)
    {
      v192 = *(_DWORD *)(v190 + 438);
      if (v192)
        v192 = *(_DWORD *)(**(_QWORD **)(v190 + 442) + 4 * (v191 - 1));
    }
    v197 = 0;
    v99 = v189 + v192;
    v100 = v202;
  }
  v105 = *((_QWORD *)v1 + 25);
  v211 = v18;
  if (!v105)
  {
    v110 = (uint64_t)v82;
    v111 = 0;
    goto LABEL_251;
  }
  LODWORD(v106) = v212;
  if (!v212)
  {
    v107 = *(unsigned int *)(*((_QWORD *)v1 + 31) + 386);
    if ((_DWORD)v107)
    {
      v108 = 0;
      v109 = (_DWORD *)(**(_QWORD **)(*((_QWORD *)v1 + 31) + 390) + 4);
      do
      {
        v108 += (*v109 * *(v109 - 1));
        v109 += 2;
        --v107;
      }
      while (v107);
    }
    else
    {
      v108 = 0;
    }
    v106 = v108 / v105;
  }
  v214 = v16;
  v198 = v99;
  if ((_DWORD)v106)
  {
    v79.n128_f64[0] = v3 / (double)v106 * 0.5;
    LODWORD(v106) = v79.n128_f64[0];
  }
  v201 = v100;
  v122 = 0;
  v13 = (_DWORD)v59 == 1819304813;
  v123 = 0;
  if (!v13)
    LODWORD(v106) = v106 + 1;
  if (v106 <= 1)
    v124 = 1;
  else
    v124 = v106;
  v125 = v217;
  do
  {
    if (v105 - v122 < v124)
      v124 = v105 - v122;
    v126 = *((_QWORD *)v125 + 31);
    if (!v124)
    {
      v158 = **((_QWORD **)v125 + 50);
      v159 = *(_QWORD *)(v158 + 8 * v122);
      goto LABEL_214;
    }
    v216 = v123;
    v127 = 0;
    v128 = *(_DWORD *)(v126 + 462) + 1;
    do
    {
      v129 = *((_QWORD *)v217 + 31);
      v130 = *(_DWORD *)(v129 + 410);
      if (v130)
      {
        v131 = *(int ***)(v129 + 414);
        v132 = *v131;
        if ((*v131)[3 * (v130 - 1) + 1] == v124)
          goto LABEL_210;
        *(_DWORD *)(v129 + 398) += 12;
        *(_DWORD *)(v129 + 410) = v130 + 1;
        v133 = v131[1];
        v134 = (unint64_t)v131[2];
        if ((unint64_t)v133 >= v134)
        {
          v143 = 0xAAAAAAAAAAAAAAABLL * (v133 - v132);
          if (v143 + 1 > 0x1555555555555555)
LABEL_306:
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v144 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - (_QWORD)v132) >> 2);
          v145 = 2 * v144;
          if (2 * v144 <= v143 + 1)
            v145 = v143 + 1;
          if (v144 >= 0xAAAAAAAAAAAAAAALL)
            v146 = 0x1555555555555555;
          else
            v146 = v145;
          if (v146)
          {
            v146 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(v146);
            v133 = v131[1];
          }
          else
          {
            v147 = 0;
          }
          v153 = (int *)(v146 + 12 * v143);
          *v153 = v128;
          v153[1] = v124;
          v153[2] = 1;
          v154 = *v131;
          v155 = v153;
          if (v133 != *v131)
          {
            do
            {
              v156 = *(_QWORD *)(v133 - 3);
              v133 -= 3;
              v157 = v133[2];
              *(_QWORD *)(v155 - 3) = v156;
              v155 -= 3;
              v155[2] = v157;
            }
            while (v133 != v154);
            v133 = *v131;
          }
          v152 = v146 + 12 * v147;
          v135 = v153 + 3;
          *v131 = v155;
          goto LABEL_207;
        }
        *v133 = v128;
        v133[1] = v124;
        v135 = v133 + 3;
        v133[2] = 1;
      }
      else
      {
        *(_DWORD *)(v129 + 398) += 12;
        *(_DWORD *)(v129 + 410) = 1;
        v131 = *(int ***)(v129 + 414);
        v137 = v131[1];
        v136 = (unint64_t)v131[2];
        if ((unint64_t)v137 >= v136)
        {
          v133 = *v131;
          v138 = 0xAAAAAAAAAAAAAAABLL * (v137 - *v131);
          v139 = v138 + 1;
          if (v138 + 1 > 0x1555555555555555)
            goto LABEL_306;
          v140 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v136 - (_QWORD)v133) >> 2);
          if (2 * v140 > v139)
            v139 = 2 * v140;
          if (v140 >= 0xAAAAAAAAAAAAAAALL)
            v141 = 0x1555555555555555;
          else
            v141 = v139;
          if (v141)
          {
            v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(v141);
            v133 = *v131;
            v137 = v131[1];
          }
          else
          {
            v142 = 0;
          }
          v148 = (int *)(v141 + 12 * v138);
          *v148 = 1;
          v148[1] = v124;
          v148[2] = 1;
          v149 = v148;
          if (v137 != v133)
          {
            do
            {
              v150 = *(_QWORD *)(v137 - 3);
              v137 -= 3;
              v151 = v137[2];
              *(_QWORD *)(v149 - 3) = v150;
              v149 -= 3;
              v149[2] = v151;
            }
            while (v137 != v133);
            v133 = *v131;
          }
          v152 = v141 + 12 * v142;
          v135 = v148 + 3;
          *v131 = v149;
LABEL_207:
          v131[1] = v135;
          v131[2] = (int *)v152;
          if (v133)
            operator delete(v133);
          goto LABEL_209;
        }
        *v137 = 1;
        v137[1] = v124;
        v135 = v137 + 3;
        v137[2] = 1;
      }
LABEL_209:
      v131[1] = v135;
      *(_DWORD *)(v129 + 350) += 12;
      *(_DWORD *)(v129 + 290) += 12;
      *(_DWORD *)(v129 + 216) += 12;
      *(_DWORD *)(v129 + 116) += 12;
      *(_DWORD *)v129 += 12;
LABEL_210:
      ++v127;
    }
    while (v127 != v124);
    v126 = *((_QWORD *)v217 + 31);
    v105 = *((_QWORD *)v217 + 25);
    v158 = **((_QWORD **)v217 + 50);
    v159 = *(_QWORD *)(v158 + 8 * v122);
    if (v105)
    {
      v123 = v216;
LABEL_214:
      if (*(uint64_t *)(v158 + 8 * v105 - 8) <= 0xFFFFFFFFLL)
        v160 = 4;
      else
        v160 = 8;
    }
    else
    {
      v160 = 4;
      v123 = v216;
    }
    *(_DWORD *)(v126 + 450) += v160;
    ++*(_DWORD *)(v126 + 462);
    v161 = *(_QWORD *)(v126 + 466);
    v163 = *(_QWORD **)(v161 + 8);
    v162 = *(_QWORD *)(v161 + 16);
    if ((unint64_t)v163 >= v162)
    {
      v165 = *(_QWORD **)v161;
      v166 = ((uint64_t)v163 - *(_QWORD *)v161) >> 3;
      v167 = v166 + 1;
      if ((unint64_t)(v166 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v168 = v162 - (_QWORD)v165;
      if (v168 >> 2 > v167)
        v167 = v168 >> 2;
      v169 = (unint64_t)v168 >= 0x7FFFFFFFFFFFFFF8;
      v170 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v169)
        v170 = v167;
      if (v170)
      {
        v170 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v170);
        v165 = *(_QWORD **)v161;
        v163 = *(_QWORD **)(v161 + 8);
      }
      else
      {
        v171 = 0;
      }
      v172 = (_QWORD *)(v170 + 8 * v166);
      *v172 = v159;
      v164 = v172 + 1;
      while (v163 != v165)
      {
        v173 = *--v163;
        *--v172 = v173;
      }
      *(_QWORD *)v161 = v172;
      *(_QWORD *)(v161 + 8) = v164;
      *(_QWORD *)(v161 + 16) = v170 + 8 * v171;
      if (v165)
        operator delete(v165);
    }
    else
    {
      *v163 = v159;
      v164 = v163 + 1;
    }
    *(_QWORD *)(v161 + 8) = v164;
    *(_DWORD *)(v126 + 350) += v160;
    *(_DWORD *)(v126 + 290) += v160;
    *(_DWORD *)(v126 + 216) += v160;
    *(_DWORD *)(v126 + 116) += v160;
    *(_DWORD *)v126 += v160;
    v125 = v217;
    v105 = *((_QWORD *)v217 + 25);
    v123 += v124;
    v122 = v123;
  }
  while (v105 > v123);
  v16 = v214;
  v103 = v210;
  if (v82)
    v111 = v210 + v214 + **((_DWORD **)v217 + 31) + 36;
  else
    v111 = v210 + v214 + **((_DWORD **)v217 + 31);
  v1 = v217;
  if (v206)
    v111 += 4 * bswap32(v206[3]) + 16;
  v99 = v198;
  if (v205)
    v111 += 2 * bswap32(v205[5]) + 24;
  if (v204)
    v111 += 8 * bswap32(v204[4]) + 20;
  ioPropertyDataSize[1] = 1952539757;
  if (v105 && *(uint64_t *)(**((_QWORD **)v217 + 50) + 8 * v105 - 8) >= 0x100000000)
  {
    ioPropertyDataSize[0] = 0x1000000;
    v219 = bswap64(*((_QWORD *)v217 + 26) + 16);
  }
  else
  {
    ioPropertyDataSize[0] = bswap32(*((_DWORD *)v217 + 52) + 8);
  }
  v102 = *((_QWORD *)v217 + 9) - v201;
  SampleDescription = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, UInt32 *, int *, __n128))(**((_QWORD **)v217 + 13) + 56))(*((_QWORD *)v217 + 13), 0, v102, v209, ioPropertyDataSize, &v225, v79);
  if ((_DWORD)SampleDescription)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__str = 136315394;
      *(_QWORD *)&__str[4] = "MP4AudioFile.cpp";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 1466;
      v118 = MEMORY[0x1E0C81028];
      v119 = "%25s:%-5d  MP4AudioFile::Close - GetDataSource()->WriteBytes - mediaBoxHeader";
      goto LABEL_260;
    }
    goto LABEL_261;
  }
  v110 = (uint64_t)v82;
LABEL_251:
  v174 = v16;
  if (*v207)
  {
    CA_calloc(v208);
    v176 = v175;
    *v175 = bswap32(v208);
    v175[1] = 1635017845;
    v175[2] = bswap32(v203 + 8);
    v175[3] = 1952740716;
    v177 = CFDataGetBytePtr(outPropertyData);
    memcpy(v176 + 4, v177, v203);
    v111 += v208;
  }
  else
  {
    v176 = 0;
  }
  v178 = v99 + v111;
  if (v99 >= v102 || v102 >= v178)
  {
    v179 = (void *)v110;
    SampleDescription = NUMovieBox::SerializeToDataSource(*((unsigned int **)v1 + 31), *((_QWORD *)v1 + 13), v99, v200, v199, v103, v211, v174, v110, v206, v205, v204, v176, v208, *((_BYTE *)v1 + 552));
    if ((_DWORD)SampleDescription)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 136315394;
        *(_QWORD *)&__str[4] = "MP4AudioFile.cpp";
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = 1515;
        v118 = MEMORY[0x1E0C81028];
        v119 = "%25s:%-5d  MP4AudioFile::Close - SerializeToDataSource() failed";
LABEL_260:
        _os_log_impl(&dword_18EE07000, v118, OS_LOG_TYPE_ERROR, v119, (uint8_t *)__str, 0x12u);
      }
LABEL_261:
      LODWORD(v66) = 4;
    }
    else
    {
      if (v197)
      {
        ioPropertyDataSize[0] = 0;
        *(_DWORD *)__str = bswap32(v102 - v178);
        *(_DWORD *)&__str[4] = 1701147238;
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *, UInt32 *))(**((_QWORD **)v1 + 13) + 56))(*((_QWORD *)v1 + 13), 0, v178, 8, __str, ioPropertyDataSize);
      }
      if (v199)
        free(v199);
      if (v211)
        free(v211);
      if (v179)
        free(v179);
      if (v206)
        free(v206);
      if (*(_QWORD *)v220)
        free(*(void **)v220);
      if (*(_QWORD *)v221)
        free(*(void **)v221);
      if (v176)
        free(v176);
      v180 = *((_QWORD *)v1 + 31);
      v181 = *(_QWORD *)(v180 + 442);
      if (v181)
      {
        v182 = *(void **)v181;
        if (*(_QWORD *)v181)
        {
          *(_QWORD *)(v181 + 8) = v182;
          operator delete(v182);
        }
        MEMORY[0x193FFE460](v181, 0x10C402FEFCB83);
        v180 = *((_QWORD *)v1 + 31);
      }
      v183 = *(_QWORD *)(v180 + 466);
      if (v183)
      {
        v184 = *(void **)v183;
        if (*(_QWORD *)v183)
        {
          *(_QWORD *)(v183 + 8) = v184;
          operator delete(v184);
        }
        MEMORY[0x193FFE460](v183, 0x10C402FEFCB83);
        v180 = *((_QWORD *)v1 + 31);
      }
      v185 = *(_QWORD *)(v180 + 414);
      if (v185)
      {
        v186 = *(void **)v185;
        if (*(_QWORD *)v185)
        {
          *(_QWORD *)(v185 + 8) = v186;
          operator delete(v186);
        }
        MEMORY[0x193FFE460](v185, 0x20C40960023A9);
        v180 = *((_QWORD *)v1 + 31);
      }
      v66 = *(_QWORD *)(v180 + 390);
      if (v66)
      {
        v187 = *(void **)v66;
        if (*(_QWORD *)v66)
        {
          *(_QWORD *)(v66 + 8) = v187;
          operator delete(v187);
        }
        MEMORY[0x193FFE460](v66, 0x20C40960023A9);
        LODWORD(v66) = 0;
      }
      SampleDescription = 0;
    }
  }
  else
  {
    SampleDescription = 0;
    LODWORD(v66) = 1;
  }
  v56 = *(CACFData **)v222;
LABEL_263:
  *(_QWORD *)v222 = 0;
  if (v56)
  {
    CACFData::~CACFData(v56);
    MEMORY[0x193FFE460]();
  }
  if ((v66 | 4) != 4)
    return 2003334207;
LABEL_67:
  v54 = *((_QWORD *)v1 + 13);
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  *((_QWORD *)v1 + 13) = 0;
  return SampleDescription;
}

void sub_18F0D3008(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<CACFData>::reset[abi:ne180100]((CACFData **)(v1 - 168));
  _Unwind_Resume(a1);
}

uint64_t MP4AudioFile::Optimize(MP4AudioFile *this)
{
  uint64_t result;

  if ((*((_BYTE *)this + 100) & 2) == 0)
    return 2003334207;
  result = 0;
  *((_DWORD *)this + 20) = 1;
  *((_BYTE *)this + 520) = 1;
  return result;
}

uint64_t MP4AudioFile::ReadPackets(MP4AudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  uint64_t v14;
  uint64_t v15;
  MP4BoxParser_Track *v16;
  AudioStreamPacketDescription *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  SInt64 v21;
  int ContiguousPacketCountAndSize;
  uint64_t v23;
  uint64_t result;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  AudioStreamPacketDescription *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t ByteCountForPackets;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  UInt32 *p_mDataByteSize;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47[2];

  v14 = (*(uint64_t (**)(MP4AudioFile *))(*(_QWORD *)this + 240))(this);
  if (v14 <= a5)
  {
    if (a3)
      *a3 = 0;
    result = 0;
LABEL_22:
    *a6 = 0;
    return result;
  }
  v15 = *a6;
  if (v15 + a5 > v14)
  {
    LODWORD(v15) = v14 - a5;
    *a6 = v14 - a5;
  }
  *(_QWORD *)v47 = 0;
  v45 = 0;
  if ((*((_BYTE *)this + 100) & 2) != 0)
  {
    v31 = (_QWORD *)*((_QWORD *)this + 50);
    if (v31)
    {
      v32 = *(_QWORD *)(*v31 + 8 * a5);
      ByteCountForPackets = NUMovieBox::GetByteCountForPackets(*((_QWORD *)this + 31), v15);
      if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v32, ByteCountForPackets, a7, v47))
      {
        return 1885563711;
      }
    }
    v40 = a3;
    if (a4 && *a6)
    {
      v34 = 0;
      v35 = 0;
      v36 = *((_QWORD *)this + 31) + 426;
      v37 = *(_DWORD *)v36;
      p_mDataByteSize = &a4->mDataByteSize;
      do
      {
        if (v37 != 1937011578 || (v39 = *(unsigned int *)(v36 + 8), !(_DWORD)v39))
        {
          if (*(_DWORD *)(v36 + 12))
            v39 = *(unsigned int *)(**(_QWORD **)(v36 + 16) + 4 * (a5 + v34));
          else
            v39 = 0;
        }
        *(_QWORD *)(p_mDataByteSize - 3) = v35;
        *(p_mDataByteSize - 1) = 0;
        *p_mDataByteSize = v39;
        v35 += v39;
        ++v34;
        p_mDataByteSize += 4;
      }
      while (v34 < *a6);
    }
  }
  else
  {
    v16 = (MP4BoxParser_Track *)*((_QWORD *)this + 30);
    if (!MP4BoxParser_Track::GetInfoFromTrackSubBoxes(v16) && *((_BYTE *)v16 + 440))
      return AudioFileObject::ReadPackets(this, a2, a3, v17, a5, a6, a7);
    v40 = a3;
    MP4BoxParser_Track::UpdateOffsetTableToIndex(*((MP4BoxParser_Track **)this + 30), *a6 + a5);
    v18 = *a6;
    if (*a6)
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v41 = a6;
      while (1)
      {
        v44 = 0;
        ContiguousPacketCountAndSize = MP4Parser_PacketProvider::GetContiguousPacketCountAndSize(*((uint64_t ***)this + 30), v20 + a5, v18 - v20, &v44, &v47[1]);
        v23 = v44;
        if (ContiguousPacketCountAndSize || v44 == 0)
          break;
        if (MP4Parser_PacketProvider::GetPacketInfo(*((MP4Parser_PacketProvider **)this + 30), v20 + a5, &v46, (unint64_t *)&v45))return 1885563711;
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, char *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v45, v47[1], a7, &v47[1]);
        v26 = v47[1];
        v19 += v47[1];
        v47[0] = v19;
        if (a4)
        {
          v42 = v19;
          v27 = v20;
          v28 = v23;
          do
          {
            v43 = 0;
            result = MP4Parser_PacketProvider::GetPacketInfo(*((MP4Parser_PacketProvider **)this + 30), a5 + v27, &v43, (unint64_t *)&v45);
            v29 = &a4[v27];
            v29->mStartOffset = v21;
            v30 = v43;
            v29->mVariableFramesInPacket = 0;
            v29->mDataByteSize = v30;
            v21 += v30;
            ++v27;
            --v28;
          }
          while (v28);
          a6 = v41;
          v19 = v42;
        }
        a7 += v26;
        v20 += v23;
        v18 = *a6;
        if (v20 >= *a6)
          goto LABEL_37;
      }
      result = 1885563711;
      goto LABEL_22;
    }
  }
  result = 0;
LABEL_37:
  if (v40)
  {
    if (!(_DWORD)result)
      *v40 = v47[0];
  }
  return result;
}

uint64_t MP4AudioFile::ReadPacketData(MP4AudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, int64_t a5, unsigned int *a6, void *a7)
{
  int64_t v14;
  MP4BoxParser_Track *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v14 = (*(uint64_t (**)(MP4AudioFile *))(*(_QWORD *)this + 240))(this);
  if (v14 <= a5)
    goto LABEL_19;
  if (*a6 + a5 > v14)
    *a6 = v14 - a5;
  v22 = 0;
  v15 = (MP4BoxParser_Track *)*((_QWORD *)this + 30);
  if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes(v15) || !*((_BYTE *)v15 + 440))
  {
    MP4BoxParser_Track::UpdateOffsetTableToIndex(*((MP4BoxParser_Track **)this + 30), *a6 + a5);
    if (!*a6)
      goto LABEL_17;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      if (MP4Parser_PacketProvider::GetPacketInfo(*((MP4Parser_PacketProvider **)this + 30), a5 + v16, &v22, &v21))break;
      v18 += v22;
      if (v18 > *a3)
        break;
      ++v17;
      ++v16;
    }
    while (v16 < *a6);
    if (!v17)
      goto LABEL_17;
LABEL_11:
    *a3 = v18;
    *a6 = v17;
    return (*(uint64_t (**)(MP4AudioFile *, uint64_t, unsigned int *, AudioStreamPacketDescription *, int64_t, unsigned int *, void *))(*(_QWORD *)this + 88))(this, a2, a3, a4, a5, a6, a7);
  }
  v20 = *((_DWORD *)this + 10);
  if (*a3 / v20 >= *a6)
    v17 = *a6;
  else
    v17 = *a3 / v20;
  v18 = v17 * v20;
  if (v17)
    goto LABEL_11;
LABEL_17:
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v24 = "MP4AudioFile.cpp";
    v25 = 1024;
    v26 = 2286;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  numPacketsToRead == 0", buf, 0x12u);
  }
LABEL_19:
  *a3 = 0;
  *a6 = 0;
  return 0;
}

uint64_t MP4AudioFile::WritePackets(MP4AudioFile *this, uint64_t a2, uint64_t a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, const void *a7)
{
  return (*(uint64_t (**)(MP4AudioFile *, uint64_t, uint64_t, const AudioStreamPacketDescription *, _QWORD, uint64_t, unsigned int *, const void *))(*(_QWORD *)this + 144))(this, a2, a3, a4, 0, a5, a6, a7);
}

uint64_t MP4AudioFile::WritePacketsWithDependencyInfo(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8)
{
  uint64_t v8;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int *v27;
  char v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t **v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unsigned int *v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  _DWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  _QWORD v84[2];
  BOOL v85[8];
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  uint64_t v88;
  int v89;

  v8 = 2003334207;
  if (!a7)
    return v8;
  if (!*a7)
    return 0;
  if ((*(_BYTE *)(a1 + 100) & 2) == 0)
    return 1886547263;
  v8 = 1885563711;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1) != a6)
    return v8;
  v16 = *(_DWORD *)(a1 + 32);
  v17 = *(unsigned int *)(a1 + 40);
  v83 = *(_DWORD *)(a1 + 44);
  if (!(_DWORD)v17)
  {
    if (!a4)
      return v8;
    v20 = *a7;
    if (!(_DWORD)v20)
      goto LABEL_27;
    v21 = 0;
    do
    {
      if (!HIDWORD(a4[v21 + 1]))
        return 2003334207;
      v21 += 2;
    }
    while (2 * v20 != v21);
    v22 = 0;
    v23 = a4 + 2;
    v24 = *a4;
    while (v20 - 1 != v22)
    {
      v24 += *((unsigned int *)v23 - 1);
      v25 = *v23;
      v23 += 2;
      ++v22;
      if (v25 != v24)
      {
        if (v22 >= v20)
          break;
        v26 = 0;
        v27 = (int *)a4 + 3;
        v28 = 0;
        do
        {
          v29 = *v27;
          v27 += 4;
          v26 += v29;
          --v20;
        }
        while (v20);
        goto LABEL_29;
      }
    }
LABEL_27:
    v26 = LODWORD(a4[2 * (v20 - 1)]) + HIDWORD(a4[2 * (v20 - 1) + 1]) - *(_DWORD *)a4;
LABEL_28:
    v28 = 1;
LABEL_29:
    if (v26 > a3)
      return 561211770;
    v82 = v26;
    v89 = 0;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1) < 1)
    {
      v31 = 1024;
      if (v16 == 1935764850)
      {
        v32 = v82;
      }
      else
      {
        v32 = v82;
        if (v16 != 1935767394)
        {
          v33 = MP4AudioFile::CalculateDataOffset((MP4AudioFile *)a1, *(double *)(a1 + 216), v85);
          v32 = v82;
          v31 = v33;
        }
      }
      *(_QWORD *)(a1 + 72) = v31;
    }
    else
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 248) + 426) != 1937011578
        || (v30 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 434)) == 0)
      {
        v30 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 438);
        if (v30)
          v30 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 248) + 442) + 4 * (a6 - 1));
      }
      v31 = *(_QWORD *)(**(_QWORD **)(a1 + 400) + 8 * (a6 - 1)) + v30;
      v32 = v82;
    }
    if ((v28 & 1) != 0)
    {
      if (a4)
        v34 = *a4;
      else
        v34 = 0;
      v8 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, int *))(**(_QWORD **)(a1 + 104) + 56))(*(_QWORD *)(a1 + 104), 0, v31, v32, a8 + v34, &v89);
    }
    else
    {
      if (!*a7)
        goto LABEL_96;
      v80 = v17;
      v35 = 0;
      v36 = (unsigned int *)a4 + 3;
      v37 = v31;
      do
      {
        v38 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 104) + 56))(*(_QWORD *)(a1 + 104), 0, v37, *v36, a8 + *(_QWORD *)(v36 - 3), &v89);
        v39 = *v36;
        v36 += 4;
        v37 += v39;
        ++v35;
      }
      while (v35 < *a7);
      v8 = v38;
      v17 = v80;
    }
    if ((_DWORD)v8)
      return v8;
    if (*a7)
    {
      v40 = 0;
      v81 = a5;
      while (1)
      {
        v41 = *(uint64_t ***)(a1 + 400);
        if (!v41)
        {
          v41 = (uint64_t **)operator new();
          v41[1] = 0;
          v41[2] = 0;
          *v41 = 0;
          *(_QWORD *)(a1 + 400) = v41;
        }
        v43 = v41[1];
        v42 = (unint64_t)v41[2];
        if ((unint64_t)v43 >= v42)
        {
          v45 = *v41;
          v46 = v43 - *v41;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v48 = v42 - (_QWORD)v45;
          if (v48 >> 2 > v47)
            v47 = v48 >> 2;
          v49 = (unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8;
          v50 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v49)
            v50 = v47;
          if (v50)
          {
            v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v50);
            v45 = *v41;
            v43 = v41[1];
          }
          else
          {
            v51 = 0;
          }
          v52 = (uint64_t *)(v50 + 8 * v46);
          *v52 = v31;
          v44 = v52 + 1;
          while (v43 != v45)
          {
            v53 = *--v43;
            *--v52 = v53;
          }
          *v41 = v52;
          v41[1] = v44;
          v41[2] = (uint64_t *)(v50 + 8 * v51);
          if (v45)
            operator delete(v45);
        }
        else
        {
          *v43 = v31;
          v44 = v43 + 1;
        }
        v41[1] = v44;
        if (a4)
        {
          v54 = v31;
          v55 = v17;
          v56 = &a4[2 * v40];
          v58 = *((_DWORD *)v56 + 3);
          v57 = (unsigned int *)v56 + 3;
          v59 = v58;
          NUMovieBox::AppendPacketSize(*(_QWORD *)(a1 + 248), v58);
          v60 = *(v57 - 1);
          if (v60)
            v61 = v60;
          else
            v61 = v83;
          NUMovieBox::AppendTimeToSample(*(_QWORD *)(a1 + 248), v61);
          v62 = *v57;
          if (v62 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1))
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 648))(a1, *v57);
          v17 = v55;
          v31 = v54;
          a5 = v81;
          if (v81)
            goto LABEL_91;
        }
        else
        {
          NUMovieBox::AppendPacketSize(*(_QWORD *)(a1 + 248), v17);
          NUMovieBox::AppendTimeToSample(*(_QWORD *)(a1 + 248), v83);
          v59 = v17;
          if (a5)
            goto LABEL_91;
        }
        v63 = *(_DWORD **)(a1 + 608);
        if (v63)
        {
          v64 = &a4[2 * v40];
          v65 = *v64;
          v66 = *((unsigned int *)v64 + 3);
          v67 = (unsigned __int8 *)(a8 + *v64);
          *(_QWORD *)v85 = v67;
          v86 = v67;
          v68 = &v67[v66];
          v87 = v68;
          v88 = 0;
          if ((v67 & 3) != 0)
          {
            v69 = 0;
            v70 = a8 + 1 + v65;
            v71 = -8;
            do
            {
              v72 = v71;
              if (v67 >= v68)
                v73 = 255;
              else
                v73 = *v67;
              v69 = v73 | (v69 << 8);
              ++v67;
              v71 = v72 + 8;
            }
            while ((v70++ & 3) != 0);
            *(_QWORD *)v85 = v67;
            LODWORD(v88) = v69 << (16 - v72);
            HIDWORD(v88) = v72 + 16;
          }
          v84[0] = 0;
          v84[1] = 0;
          PacketDependencyParser::PacketDependencyInfo(v63, (uint64_t)v85, (uint64_t)v84);
          v75 = (int *)v84;
          goto LABEL_93;
        }
LABEL_91:
        if (!a5)
          goto LABEL_94;
        v75 = (int *)(a5 + 16 * v40);
LABEL_93:
        v76 = MP4AudioFile::AddPacketDependencyInfo((_QWORD *)a1, v40, v75);
        if ((_DWORD)v76)
          return v76;
LABEL_94:
        v31 += v59;
        ++v40;
        v77 = *a7;
        if (v40 >= v77)
          goto LABEL_97;
      }
    }
LABEL_96:
    v77 = 0;
LABEL_97:
    v8 = 0;
    v78 = *(_QWORD *)(a1 + 208) + v82;
    *(_QWORD *)(a1 + 200) += v77;
    *(_QWORD *)(a1 + 208) = v78;
    return v8;
  }
  v18 = *a7;
  if (v16 != 1935767394 && v16 != 1935764850)
  {
    v26 = v18 * v17;
    goto LABEL_28;
  }
  v19 = v18 - (a3 % v17 != 0);
  if (v18 != 1 || v19)
  {
    v26 = v19 * v17;
    *a7 = v19;
    goto LABEL_28;
  }
  v8 = 0;
  *a7 = 1;
  return v8;
}

uint64_t MP4AudioFile::GetPropertyInfo(MP4AudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  if (a2 > 1751216999)
  {
    if (a2 <= 1886283374)
    {
      if (a2 == 1751217000)
      {
        v11 = *((_DWORD *)this + 21);
        if (v11 == 1832149606 || v11 == 1832149350)
        {
          if (a4)
            *a4 = *((_BYTE *)this + 100) & 2;
          if (a3)
            return MP4AudioFile::GetAudioHash(this, a3, 0);
          return 0;
        }
        return 1869627199;
      }
      v8 = 1885626740;
      goto LABEL_22;
    }
    if (a2 == 1969321067)
    {
      if (a3)
        *a3 = 4;
      if (!a4)
        return 0;
      v5 = 0;
      v9 = 1;
      goto LABEL_59;
    }
    if (a2 != 1920168566)
    {
      if (a2 != 1886283375)
        return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
      if (!a3)
      {
LABEL_31:
        if (a4)
        {
          v5 = 0;
          v9 = (*((unsigned __int8 *)this + 100) >> 1) & 1;
          goto LABEL_59;
        }
        return 0;
      }
      v7 = 16;
LABEL_30:
      *a3 = v7;
      goto LABEL_31;
    }
LABEL_28:
    if (!a3)
      goto LABEL_31;
    v7 = 8;
    goto LABEL_30;
  }
  if (a2 <= 1635017587)
  {
    if (a2 != 1633776244)
    {
      v8 = 1633968493;
LABEL_22:
      if (a2 != v8)
        return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
      if (a4)
        *a4 = 0;
      if (a3)
      {
        v5 = 0;
        v6 = 8;
        goto LABEL_27;
      }
      return 0;
    }
    goto LABEL_28;
  }
  if (a2 == 1635017588)
  {
    if (a3)
      *a3 = 4;
    if (a4)
    {
      v5 = 0;
      *a4 = 0;
      return v5;
    }
    return 0;
  }
  if (a2 == 1668182118)
  {
    if (a3)
      *a3 = 4;
    if (!a4)
      return 0;
    v10 = *((_DWORD *)this + 21);
    if ((v10 == 1832149606 || v10 == 1832149350) && *((_DWORD *)this + 8) >> 8 == 6381923)
      v9 = (*((unsigned __int8 *)this + 100) >> 1) & 1;
    else
      v9 = 0;
    v5 = 0;
LABEL_59:
    *a4 = v9;
    return v5;
  }
  if (a2 != 1701012328)
    return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
  v4 = *((_DWORD *)this + 21);
  if (v4 != 1832149606 && v4 != 1832149350)
    return 1869627199;
  if (a4)
    *a4 = *((_BYTE *)this + 100) & 2;
  if (!a3)
    return 0;
  v5 = 0;
  v6 = 4;
LABEL_27:
  *a3 = v6;
  return v5;
}

uint64_t MP4AudioFile::GetProperty(MP4AudioFile *this, int a2, unsigned int *a3, __CFDate **a4, __n128 a5)
{
  uint64_t DataForMeaningName;
  MP4AudioFile *v9;
  int v11;
  __n128 *BoxInfo;
  _BOOL4 v13;
  int v14;
  __n128 *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __CFDate *v19;
  MP4BoxParser_iTunesMeta *v20;
  void *v21;
  int v22;
  __n128 SampleTableSubBox;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int i;
  __n128 **v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  __n128 *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char v40;
  int v41;
  uint64_t v42;
  char v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  __n128 **v48;
  uint64_t v49;
  char v50;
  int v51;
  uint64_t v52;
  char v53;
  int v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  DataForMeaningName = 561211770;
  if (!a3 || !a4)
    return DataForMeaningName;
  if (a2 > 1701082481)
  {
    if (a2 > 1885564531)
    {
      if (a2 <= 1886283374)
      {
        if (a2 != 1885564532)
        {
          if (a2 == 1885626740)
          {
            if (*a3 >= 8)
            {
              v9 = (MP4AudioFile *)*((_QWORD *)this + 75);
              if (v9)
                return MP4AudioFile::GetPurchaseDate(v9, a4);
              return 1886681407;
            }
            return DataForMeaningName;
          }
          return AudioFileObject::GetProperty(this, a2, a3, (char *)a4);
        }
        if (*a3 < 8)
          return DataForMeaningName;
        DataForMeaningName = 0;
        v19 = (__CFDate *)*((_QWORD *)this + 25);
LABEL_54:
        *a4 = v19;
        return DataForMeaningName;
      }
      if (a2 != 1969321067)
      {
        if (a2 != 1886283375)
          return AudioFileObject::GetProperty(this, a2, a3, (char *)a4);
        if (*a3 < 0x10)
          return DataForMeaningName;
        if (*((_QWORD *)this + 58) == -1)
        {
          if (*((_QWORD *)this + 60) == -1)
          {
            if ((*((_BYTE *)this + 100) & 2) == 0)
            {
              *a3 = 0;
              return 1667787583;
            }
            *a4 = (__CFDate *)(*((_QWORD *)this + 25) * *((unsigned int *)this + 11));
            a4[1] = 0;
            goto LABEL_79;
          }
          v18 = (char *)this + 480;
        }
        else
        {
          v18 = (char *)this + 464;
        }
        *(_OWORD *)a4 = *(_OWORD *)v18;
LABEL_79:
        DataForMeaningName = 0;
        *a3 = 16;
        return DataForMeaningName;
      }
      if (*a3 < 4)
        return DataForMeaningName;
      DataForMeaningName = 0;
      v11 = *((_DWORD *)this + 126);
LABEL_75:
      *(_DWORD *)a4 = v11;
      return DataForMeaningName;
    }
    if (a2 == 1701082482)
    {
      if (*a3 >= 8)
      {
        DataForMeaningName = 0;
        *a4 = (__CFDate *)*((_QWORD *)this + 56);
      }
      return DataForMeaningName;
    }
    if (a2 != 1751217000)
    {
      if (a2 != 1869640813)
        return AudioFileObject::GetProperty(this, a2, a3, (char *)a4);
      if ((*((_BYTE *)this + 100) & 2) == 0)
      {
        v38 = 0;
        DataForMeaningName = (*(uint64_t (**)(_QWORD, void **))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v38);
        if (!(_DWORD)DataForMeaningName)
        {
          BoxInfo = FindBoxInfo(*((_QWORD *)this + 13), 0, (uint64_t)v38, 1835295092, 0, *((__n128 ***)this + 28));
          if (BoxInfo)
          {
            v48 = 0;
            (*(void (**)(_QWORD, __n128 ***))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v48);
            DataForMeaningName = 0;
            v13 = BoxInfo->n128_u64[1] + BoxInfo[1].n128_u64[0] == (_QWORD)v48;
            *(_DWORD *)a4 = v13;
            *((_DWORD *)this + 20) = v13;
          }
          else
          {
            DataForMeaningName = 2003334207;
            *(_DWORD *)a4 = 0;
          }
        }
        return DataForMeaningName;
      }
      DataForMeaningName = 0;
      v11 = *((unsigned __int8 *)this + 520);
      goto LABEL_75;
    }
    v22 = *((_DWORD *)this + 21);
    if (v22 == 1832149606 || v22 == 1832149350)
      return MP4AudioFile::GetAudioHash(this, a3, a4);
    return 1869627199;
  }
  if (a2 > 1650683507)
  {
    if (a2 == 1650683508)
    {
      if (*a3 < 8)
        return DataForMeaningName;
      DataForMeaningName = 0;
      v19 = (__CFDate *)*((_QWORD *)this + 26);
      goto LABEL_54;
    }
    if (a2 == 1668182118)
    {
      if (*a3 < 4)
        return DataForMeaningName;
      if ((*((_BYTE *)this + 100) & 2) != 0)
      {
        if (*((_BYTE *)this + 552))
        {
          DataForMeaningName = 0;
          v11 = *(unsigned __int8 *)(*((_QWORD *)this + 31) + 437);
          goto LABEL_75;
        }
      }
      else
      {
        SampleTableSubBox = MP4BoxParser_Track::GetSampleTableSubBox((MP4BoxParser_Track *)&v48, *(_QWORD *)(*((_QWORD *)this + 30) + 64), 1937013298, a5);
        if (v55)
        {
          v24 = *(_QWORD *)(*((_QWORD *)this + 30) + 8);
          v38 = &off_1E2902718;
          (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v24 + 88))(&v39, SampleTableSubBox);
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v38 = &off_1E2908B70;
          v45 = 0;
          LODWORD(v46) = 0;
          v44 = 8;
          DataForMeaningName = MP4BoxParser_SampleSize::Init((MP4BoxParser **)&v38);
          if (!(_DWORD)DataForMeaningName)
          {
            if (v41 == 1937011578)
              v25 = 32;
            else
              v25 = v45;
            *(_DWORD *)a4 = v25;
          }
          v26 = v39;
          v38 = &off_1E2902718;
          v39 = 0;
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          if (v55)
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v52);
          return DataForMeaningName;
        }
      }
      return 2003334207;
    }
    if (a2 != 1701012328)
      return AudioFileObject::GetProperty(this, a2, a3, (char *)a4);
    v14 = *((_DWORD *)this + 21);
    if (v14 == 1832149606 || v14 == 1832149350)
    {
      v37 = 0;
      DataForMeaningName = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v37);
      if (!(_DWORD)DataForMeaningName)
      {
        v15 = FindBoxInfo(*((_QWORD *)this + 13), 0, v37, 1836019574, 0, *((__n128 ***)this + 28));
        if (v15)
        {
          v16 = *((_QWORD *)this + 13);
          v17 = v15[1].n128_u64[0];
          v48 = (__n128 **)&off_1E2902718;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v16 + 88))(&v49, v16, v17);
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = 0;
          v54 = 8;
          v48 = (__n128 **)&off_1E29078B8;
          v56 = 1;
          v57 = 0;
          DataForMeaningName = 0;
          if (!MP4BoxParser_Movie::Init(&v48))
          {
            for (i = 0; ; ++i)
            {
              v28 = (__n128 **)v57;
              if (!v57 || (v29 = *(_QWORD *)(v57 + 8), v29 == v57))
              {
                v30 = 0;
              }
              else
              {
                v30 = 0;
                do
                {
                  if (*(_DWORD *)(v29 + 16) == 1969517665)
                    ++v30;
                  v29 = *(_QWORD *)(v29 + 8);
                }
                while (v29 != v57);
              }
              if (i >= v30)
                break;
              v31 = v49;
              v32 = ((uint64_t (*)(__n128 ***))v48[3])(&v48);
              v33 = FindBoxInfo(v31, v32, v52, 1969517665, i, v28);
              if (v33)
              {
                v34 = v33[1].n128_u64[0] + 8;
                v38 = &off_1E2902718;
                (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v49 + 88))(&v39, v49, v34);
                v40 = 0;
                v41 = 0;
                v42 = 0;
                v43 = 0;
                v44 = 8;
                v46 = 0;
                v47 = 0;
                v38 = &off_1E2908BA0;
                if (!MP4BoxParser_iTunesMeta::Init((MP4BoxParser_iTunesMeta *)&v38))
                {
                  v36 = 0;
                  DataForMeaningName = MP4BoxParser_iTunesMeta::GetDataForMeaningName((MP4BoxParser_iTunesMeta *)&v38, "iTunECCH", &v36, a3, v35);
                  *(_DWORD *)a4 = bswap32(v36);
                }
                MP4BoxParser_Meta::~MP4BoxParser_Meta((MP4BoxParser_Meta *)&v38);
              }
            }
          }
          MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)&v48);
        }
        else
        {
          return 0;
        }
      }
      return DataForMeaningName;
    }
    return 1869627199;
  }
  if (a2 == 1633776244)
  {
    if (*a3 >= 8)
      return (*(uint64_t (**)(MP4AudioFile *, __CFDate **))(*(_QWORD *)this + 712))(this, a4);
    return DataForMeaningName;
  }
  if (a2 != 1633968493)
  {
    if (a2 != 1635017588)
      return AudioFileObject::GetProperty(this, a2, a3, (char *)a4);
    if (*a3 < 4)
      return DataForMeaningName;
    DataForMeaningName = 0;
    v11 = *((_DWORD *)this + 125);
    goto LABEL_75;
  }
  if (*a3 >= 8)
  {
    v20 = (MP4BoxParser_iTunesMeta *)*((_QWORD *)this + 75);
    if (v20)
    {
      v38 = 0;
      MP4BoxParser_iTunesMeta::CopyMetaItemData(v20, 1668172100, (const void **)&v38);
      v21 = v38;
      *a4 = (__CFDate *)v38;
      if (v21)
        return 0;
      else
        return 2003334207;
    }
    return 1886681407;
  }
  return DataForMeaningName;
}

void sub_18F0D45D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a27)
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(exception_object);
}

uint64_t MP4AudioFile::SetProperty(MP4AudioFile *this, int a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  void *v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  __n128 *BoxInfo;
  uint64_t v20;
  unint64_t v21;
  void *AudioTrackData;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  __n128 **v28;
  uint64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  char v33;
  int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v5 = a3;
  v37 = *MEMORY[0x1E0C80C00];
  if (a2 <= 1751216999)
  {
    if (a2 <= 1684434291)
    {
      if (a2 != 1633776244)
      {
        if (a2 == 1668182118)
        {
          v7 = 1869627199;
          v8 = *((_DWORD *)this + 21);
          if (v8 != 1832149606 && v8 != 1832149350
            || *((_DWORD *)this + 8) >> 8 != 6381923
            || (*((_BYTE *)this + 100) & 2) == 0)
          {
            return v7;
          }
          if (a3 >= 4)
          {
            v7 = 2003334207;
            v9 = *((_QWORD *)this + 31);
            if (*(_QWORD *)(*(_QWORD *)(v9 + 442) + 8) == **(_QWORD **)(v9 + 442)
              && !*(_DWORD *)(v9 + 434)
              && *(_DWORD *)a4 == 16)
            {
              v7 = 0;
              *(_DWORD *)(v9 + 426) = 1937013298;
              *(_BYTE *)(v9 + 437) = 16;
              *((_BYTE *)this + 552) = 1;
            }
            return v7;
          }
          return 561211770;
        }
        return AudioFileObject::SetProperty(this, a2, a3, a4);
      }
      (*(void (**)(MP4AudioFile *, uint64_t))(*(_QWORD *)this + 720))(this, *a4);
      return 0;
    }
    if (a2 == 1684434292)
    {
      v16 = *(double *)a4;
      *((_DWORD *)this + 114) = v16;
      *(_DWORD *)(*((_QWORD *)this + 31) + 28) = v16;
      a2 = 1684434292;
      return AudioFileObject::SetProperty(this, a2, a3, a4);
    }
    if (a2 != 1701012328)
      return AudioFileObject::SetProperty(this, a2, a3, a4);
    v7 = 1886681407;
    v10 = *((_DWORD *)this + 21);
    if (v10 != 1832149606 && v10 != 1832149350 || (*((_BYTE *)this + 100) & 2) == 0)
      return v7;
    if (a3 >= 4)
    {
      v7 = 0;
      *((_DWORD *)this + 142) = *(_DWORD *)a4;
      return v7;
    }
    return 561211770;
  }
  if (a2 <= 1920168565)
  {
    if (a2 != 1751217000)
    {
      if (a2 != 1886283375)
        return AudioFileObject::SetProperty(this, a2, a3, a4);
      if ((*((_BYTE *)this + 100) & 2) != 0)
      {
        if (a3 >= 0x10)
        {
          v7 = 0;
          *((_OWORD *)this + 29) = *(_OWORD *)a4;
          *((_OWORD *)this + 30) = *(_OWORD *)a4;
          *((_BYTE *)this + 528) = 1;
          return v7;
        }
        return 561211770;
      }
      return 1886547263;
    }
    if ((_DWORD)a3)
    {
      v7 = 1886681407;
      v13 = *((_DWORD *)this + 21);
      if (v13 != 1832149606 && v13 != 1832149350 || (*((_BYTE *)this + 100) & 2) == 0)
        return v7;
      v14 = (void *)*((_QWORD *)this + 70);
      if (v14)
      {
        free(v14);
        *((_QWORD *)this + 70) = 0;
      }
      *((_DWORD *)this + 139) = v5;
      v15 = malloc_type_calloc(1uLL, v5, 0x1AAB77FuLL);
      *((_QWORD *)this + 70) = v15;
      memcpy(v15, a4, v5);
    }
    return 0;
  }
  if (a2 == 1920168566)
  {
    v7 = 1869627199;
    if ((*((_BYTE *)this + 100) & 2) == 0)
      return v7;
    v17 = *((_QWORD *)this + 15);
    if (v17)
    {
      if (*(_QWORD *)(v17 + 24))
        return v7;
    }
    if (a3 < 8)
      return 561211770;
    v7 = 0;
    *((_QWORD *)this + 27) = *a4;
    return v7;
  }
  if (a2 != 1969321067)
    return AudioFileObject::SetProperty(this, a2, a3, a4);
  if ((*((_BYTE *)this + 100) & 2) != 0)
    return 0;
  if (a3 < 4)
    return 561211770;
  v11 = 2003334207;
  v12 = *(_DWORD *)a4;
  v27 = 0;
  if (v12 < *((_DWORD *)this + 125))
  {
    if (v12 == *((_DWORD *)this + 126))
    {
      return 0;
    }
    else
    {
      v26 = 0;
      v25 = 0;
      v7 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v25);
      if ((_DWORD)v7)
        return v7;
      BoxInfo = FindBoxInfo(*((_QWORD *)this + 13), 0, v25, 1836019574, 0, *((__n128 ***)this + 28));
      if (!BoxInfo)
        return 1685348671;
      v20 = *((_QWORD *)this + 13);
      v21 = BoxInfo[1].n128_u64[0];
      v28 = (__n128 **)&off_1E2902718;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v20 + 88))(&v29, v20, v21);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 8;
      v28 = (__n128 **)&off_1E29078B8;
      v35 = 1;
      v36 = 0;
      v7 = MP4BoxParser_Movie::Init(&v28);
      if ((_DWORD)v7)
      {
        MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)&v28);
        return v7;
      }
      AudioTrackData = MP4BoxParser_Movie::GetAudioTrackData((MP4BoxParser_Movie *)&v28, v12, &v26, &v27);
      if (AudioTrackData)
      {
        if (v12)
        {
          *((_QWORD *)this + 60) = -1;
          *((_QWORD *)this + 61) = 0;
        }
        else
        {
          MP4AudioFile::FillPacketTableInfoFromiTunesUserData(this);
        }
        v23 = MP4AudioFile::UseAudioTrack(this, AudioTrackData, v26, v27);
        if (v23)
        {
          v24 = (void *)*((_QWORD *)this + 29);
          if (v24)
            free(v24);
          v11 = 0;
          *((_QWORD *)this + 29) = AudioTrackData;
          *((_QWORD *)this + 30) = v23;
          *((_DWORD *)this + 126) = v12;
        }
        else
        {
          free(AudioTrackData);
        }
      }
      else
      {
        v11 = 0;
      }
      MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)&v28);
    }
  }
  return v11;
}

void sub_18F0D4B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)va);
  _Unwind_Resume(a1);
}

uint64_t MP4AudioFile::SetDataFormat(MP4AudioFile *this, AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID;
  BOOL v4;
  UInt32 mFramesPerPacket;
  uint64_t v6;
  uint64_t v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  UInt32 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mFormatID = a2->mFormatID;
  v4 = mFormatID == 1700998451 || mFormatID == 1700997939;
  if (v4 && (mFramesPerPacket = a2->mFramesPerPacket, mFramesPerPacket != 1536))
  {
    v6 = 1718449215;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315650;
      v10 = "MP4AudioFile.cpp";
      v11 = 1024;
      v12 = 1710;
      v13 = 1024;
      v14 = mFramesPerPacket;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  disallowing request to set frames per packet to %d (ie, not 1536)", (uint8_t *)&v9, 0x18u);
    }
  }
  else
  {
    v6 = AudioFileObject::SetDataFormat(this, a2);
    v7 = *((_QWORD *)this + 76);
    if (v7)
    {
      MEMORY[0x193FFE460](v7, 0x1000C403E1C8BA9);
      *((_QWORD *)this + 76) = 0;
    }
  }
  return v6;
}

uint64_t MP4AudioFile::GetFormatListInfo(MP4AudioFile *this, UInt32 *outPropertyDataSize, unsigned int *a3)
{
  uint64_t v3;
  int v6;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  int v11;

  v3 = *((_QWORD *)this + 18);
  if (!v3)
    return 2003334207;
  v6 = *((_DWORD *)this + 8);
  memset(v8, 0, sizeof(v8));
  DWORD2(v8[0]) = v6;
  v9 = 0;
  v10 = v3;
  v11 = *((_DWORD *)this + 35);
  if (AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, v8, outPropertyDataSize))
  {
    *outPropertyDataSize = 48;
    *a3 = 0;
  }
  return 0;
}

uint64_t MP4AudioFile::GetFormatList(MP4AudioFile *this, UInt32 *ioPropertyDataSize, AudioFormatListItem *outPropertyData)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  Float64 v9;
  UInt32 v10;
  MP4BoxParser_Track *v11;
  AudioChannelLayoutTag v12;
  AudioChannelLayoutTag *v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  AudioChannelLayoutTag v18[8];
  __int128 v19;
  UInt32 v20;
  _OWORD inSpecifier[2];
  uint64_t v22;
  uint64_t v23;
  int v24;

  v6 = *((_QWORD *)this + 18);
  if ((*((_BYTE *)this + 100) & 2) != 0 && !v6)
    return 2003334207;
  v9 = *((double *)this + 3);
  v8 = *((_QWORD *)this + 4);
  v10 = *((_DWORD *)this + 10);
  v19 = *(_OWORD *)((char *)this + 44);
  v20 = *((_DWORD *)this + 15);
  memset(inSpecifier, 0, sizeof(inSpecifier));
  v16 = v8;
  DWORD2(inSpecifier[0]) = v8;
  v22 = 0;
  v23 = v6;
  v24 = *((_DWORD *)this + 35);
  if (AudioFormatGetProperty(0x666C7374u, 0x38u, inSpecifier, ioPropertyDataSize, outPropertyData))
  {
    outPropertyData->mASBD.mSampleRate = v9;
    *(_QWORD *)&outPropertyData->mASBD.mFormatID = v16;
    outPropertyData->mASBD.mBytesPerPacket = v10;
    *(_OWORD *)&outPropertyData->mASBD.mFramesPerPacket = v19;
    outPropertyData->mASBD.mReserved = v20;
    if ((*((_BYTE *)this + 100) & 2) != 0)
    {
      v17 = 32;
      result = (*(uint64_t (**)(MP4AudioFile *, int *, AudioChannelLayoutTag *))(*(_QWORD *)this + 408))(this, &v17, v18);
      if ((_DWORD)result)
        return result;
      v12 = v18[0];
    }
    else
    {
      v11 = (MP4BoxParser_Track *)*((_QWORD *)this + 30);
      if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes(v11)
        || (v13 = (AudioChannelLayoutTag *)*((_QWORD *)v11 + 47)) == 0)
      {
        v12 = -65536;
      }
      else
      {
        v12 = *v13;
      }
    }
    outPropertyData->mChannelLayoutTag = v12;
    *ioPropertyDataSize = 48;
  }
  v14 = DWORD2(inSpecifier[0]);
  if (DWORD2(inSpecifier[0]) == 1365470320 && outPropertyData->mASBD.mSampleRate == 0.0)
    outPropertyData->mASBD.mSampleRate = v9;
  result = 0;
  v15 = v14 == 1935767394 || v14 == 1935764850;
  if (v15 && !v10)
  {
    result = 0;
    if (outPropertyData->mASBD.mBytesPerPacket)
    {
      outPropertyData->mASBD.mBytesPerPacket = 0;
      outPropertyData->mASBD.mBytesPerFrame = 0;
    }
  }
  return result;
}

uint64_t MP4AudioFile::UpdateSize(MP4AudioFile *this)
{
  return 0;
}

uint64_t MP4AudioFile::GetNumBytes(MP4AudioFile *this)
{
  return *((_QWORD *)this + 26);
}

uint64_t MP4AudioFile::GetNumPackets(MP4AudioFile *this)
{
  return *((_QWORD *)this + 25);
}

uint64_t MP4AudioFile::PacketToRollDistance(MP4AudioFile *this, AudioPacketRollDistanceTranslation *a2)
{
  MP4BoxParser_Track *v4;
  const SampleToRollDistanceTable *v5;
  const SyncSampleTable *v6;
  MP4BoxParser_Track *v7;
  const SampleToRollDistanceTable *v8;
  MP4BoxParser_Track *v9;

  a2->mRollDistance = 0;
  if ((*(unsigned int (**)(MP4AudioFile *))(*(_QWORD *)this + 272))(this))
  {
    if ((*((_BYTE *)this + 100) & 2) != 0)
    {
      v5 = (MP4AudioFile *)((char *)this + 312);
    }
    else
    {
      v4 = (MP4BoxParser_Track *)*((_QWORD *)this + 30);
      MP4BoxParser_Track::GetInfoFromTrackSubBoxes(v4);
      v5 = (MP4BoxParser_Track *)((char *)v4 + 240);
      if ((*((_BYTE *)this + 100) & 2) == 0)
      {
        v9 = (MP4BoxParser_Track *)*((_QWORD *)this + 30);
        MP4BoxParser_Track::GetInfoFromTrackSubBoxes(v9);
        v6 = (MP4BoxParser_Track *)((char *)v9 + 296);
        goto LABEL_9;
      }
    }
    v6 = (MP4AudioFile *)((char *)this + 368);
LABEL_9:
    if (*(_BYTE *)v5 || *(_BYTE *)v6)
      return PacketToRollDistanceForRestrictedRandomAccess(a2, v5, v6);
    return 0;
  }
  if ((*((_BYTE *)this + 100) & 2) != 0)
  {
    v8 = (MP4AudioFile *)((char *)this + 256);
  }
  else
  {
    v7 = (MP4BoxParser_Track *)*((_QWORD *)this + 30);
    MP4BoxParser_Track::GetInfoFromTrackSubBoxes(v7);
    v8 = (MP4BoxParser_Track *)((char *)v7 + 152);
  }
  if (*(_BYTE *)v8)
    return PacketToRollDistanceForRollRecovery(a2, v8);
  AudioFileObject::PacketToRollDistance(this, a2);
  return 0;
}

uint64_t MP4AudioFile::ScanForIndependentPacket(uint64_t a1, int a2, AudioIndependentPacketTranslation *a3)
{
  MP4BoxParser_Track *v6;
  SampleToRollDistanceTable **v7;
  SyncSampleTable **v8;
  MP4BoxParser_Track *v10;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
    return AudioFileObject::ScanForIndependentPacket(a1, a2, a3);
  if ((*(_BYTE *)(a1 + 100) & 2) != 0)
  {
    v7 = (SampleToRollDistanceTable **)(a1 + 312);
  }
  else
  {
    v6 = *(MP4BoxParser_Track **)(a1 + 240);
    MP4BoxParser_Track::GetInfoFromTrackSubBoxes(v6);
    v7 = (SampleToRollDistanceTable **)((char *)v6 + 240);
    if ((*(_BYTE *)(a1 + 100) & 2) == 0)
    {
      v10 = *(MP4BoxParser_Track **)(a1 + 240);
      MP4BoxParser_Track::GetInfoFromTrackSubBoxes(v10);
      v8 = (SyncSampleTable **)((char *)v10 + 296);
      return ScanForIndependentPacketWithRestrictedRandomAccess(a2 == 1, a3, v7, v8);
    }
  }
  v8 = (SyncSampleTable **)(a1 + 368);
  return ScanForIndependentPacketWithRestrictedRandomAccess(a2 == 1, a3, v7, v8);
}

uint64_t MP4AudioFile::PacketToDependencyInfo(MP4AudioFile *this, AudioPacketDependencyInfoTranslation *a2)
{
  MP4BoxParser_Track *v4;
  const SampleToRollDistanceTable *v5;
  const SyncSampleTable *v6;
  MP4BoxParser_Track *v7;
  const SampleToRollDistanceTable *v8;
  MP4BoxParser_Track *v9;
  AudioPacketRollDistanceTranslation v11;

  if ((*(unsigned int (**)(MP4AudioFile *))(*(_QWORD *)this + 272))(this))
  {
    if ((*((_BYTE *)this + 100) & 2) != 0)
    {
      v5 = (MP4AudioFile *)((char *)this + 312);
    }
    else
    {
      v4 = (MP4BoxParser_Track *)*((_QWORD *)this + 30);
      MP4BoxParser_Track::GetInfoFromTrackSubBoxes(v4);
      v5 = (MP4BoxParser_Track *)((char *)v4 + 240);
      if ((*((_BYTE *)this + 100) & 2) == 0)
      {
        v9 = (MP4BoxParser_Track *)*((_QWORD *)this + 30);
        MP4BoxParser_Track::GetInfoFromTrackSubBoxes(v9);
        v6 = (MP4BoxParser_Track *)((char *)v9 + 296);
        return PacketToDependencyInfoForRestrictedRandomAccess(a2, v5, v6);
      }
    }
    v6 = (MP4AudioFile *)((char *)this + 368);
    return PacketToDependencyInfoForRestrictedRandomAccess(a2, v5, v6);
  }
  if ((*((_BYTE *)this + 100) & 2) != 0)
  {
    v8 = (MP4AudioFile *)((char *)this + 256);
  }
  else
  {
    v7 = (MP4BoxParser_Track *)*((_QWORD *)this + 30);
    MP4BoxParser_Track::GetInfoFromTrackSubBoxes(v7);
    v8 = (MP4BoxParser_Track *)((char *)v7 + 152);
  }
  if (*(_BYTE *)v8)
  {
    a2->mIsIndependentlyDecodable = 1;
    v11.mPacket = a2->mPacket;
    v11.mRollDistance = 0;
    PacketToRollDistanceForRollRecovery(&v11, v8);
    a2->mNumberPrerollPackets = v11.mRollDistance;
  }
  else
  {
    AudioFileObject::PacketToDependencyInfo(this, a2);
  }
  return 0;
}

uint64_t MP4AudioFile::GetMagicCookieDataSize(MP4AudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3)
    *a3 = *((_BYTE *)this + 100) & 2;
  if (a2)
    *a2 = *((_DWORD *)this + 35);
  return 0;
}

uint64_t MP4AudioFile::GetMagicCookieData(const void **this, unsigned int *a2, void *__dst)
{
  uint64_t v3;
  size_t v4;

  v3 = 2003334207;
  if (__dst)
  {
    if (a2)
    {
      if ((*((_BYTE *)this + 100) & 2) == 0 || this[18])
      {
        v4 = *((unsigned int *)this + 35);
        v3 = 561211770;
        if (*a2 >= v4)
        {
          memcpy(__dst, this[18], v4);
          return 0;
        }
      }
    }
    else
    {
      return 561211770;
    }
  }
  return v3;
}

uint64_t MP4AudioFile::SetMagicCookieData(MP4AudioFile *this, UInt32 inSpecifierSize, char *inSpecifier)
{
  uint64_t Property;
  const AudioStreamBasicDescription *v8;
  double v9;
  int v10;
  __int128 v11;
  double v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  PacketDependencyParser *v20;
  uint64_t PropertyInfo;
  size_t v22;
  void *v23;
  uint64_t v24;
  UInt32 outPropertyDataSize;
  __int128 outPropertyData;
  __int128 v27;
  uint64_t v28;
  UInt32 ioPropertyDataSize;

  if ((*((_BYTE *)this + 100) & 2) == 0)
    return 1886547263;
  Property = 1667787583;
  if (inSpecifierSize && inSpecifier)
  {
    v8 = (const AudioStreamBasicDescription *)((char *)this + 24);
    v9 = *((double *)this + 3);
    v10 = *((_DWORD *)this + 8);
    ioPropertyDataSize = 40;
    v11 = *(_OWORD *)((char *)this + 40);
    outPropertyData = *(_OWORD *)((char *)this + 24);
    v27 = v11;
    v28 = *((_QWORD *)this + 7);
    if (!AudioFormatGetProperty(0x666D7469u, inSpecifierSize, inSpecifier, &ioPropertyDataSize, &outPropertyData))
    {
      Property = (*(uint64_t (**)(MP4AudioFile *, __int128 *))(*(_QWORD *)this + 184))(this, &outPropertyData);
      if ((_DWORD)Property)
        return Property;
      v12 = *(double *)&outPropertyData;
      if (v9 != *(double *)&outPropertyData)
      {
        *((_DWORD *)this + 114) = *(double *)&outPropertyData;
        v13 = *((_QWORD *)this + 31);
        *(_DWORD *)(v13 + 28) = v12;
        if (*(_DWORD *)(v13 + 386) == 1)
          *(_DWORD *)(**(_QWORD **)(v13 + 390) + 4) = DWORD1(v27);
      }
    }
    if (v10 == 1935767394 || v10 == 1935764850)
    {
      if (inSpecifierSize != 47)
      {
LABEL_23:
        v14 = 0;
        Property = 1667787583;
        goto LABEL_24;
      }
      Property = 0;
      *(_DWORD *)(inSpecifier + 26) = 1919770980;
    }
    else
    {
      if (v10 == 1634492771)
      {
        if (*((_DWORD *)inSpecifier + 1) == 1634562662)
        {
          if (inSpecifierSize < 0x38)
            goto LABEL_23;
        }
        else if (inSpecifierSize != 24 && inSpecifierSize != 48)
        {
          goto LABEL_23;
        }
      }
      Property = 0;
    }
    v14 = 1;
LABEL_24:
    v15 = *((_QWORD *)this + 76);
    if (v15)
    {
      MEMORY[0x193FFE460](v15, 0x1000C403E1C8BA9);
      *((_QWORD *)this + 76) = 0;
    }
    if (v14)
    {
      v16 = *((_QWORD *)this + 18);
      if (v16)
      {
        *((_QWORD *)this + 18) = 0;
        MEMORY[0x193FFE43C](v16, 0x1000C8077774924);
        *((_DWORD *)this + 35) = 0;
      }
      if (inSpecifierSize < 0x32 || v10 != 1718378851 || *((_DWORD *)inSpecifier + 1) == 1632396900)
        goto LABEL_47;
      outPropertyDataSize = 50;
      PropertyInfo = AudioFormatGetPropertyInfo(0x6D636466u, inSpecifierSize, inSpecifier, &outPropertyDataSize);
      if ((_DWORD)PropertyInfo)
        return PropertyInfo;
      v22 = outPropertyDataSize;
      *((_DWORD *)this + 35) = outPropertyDataSize;
      v23 = (void *)operator new[]();
      bzero(v23, v22);
      v24 = *((_QWORD *)this + 18);
      *((_QWORD *)this + 18) = v23;
      if (v24)
      {
        MEMORY[0x193FFE43C](v24, 0x1000C8077774924);
        v23 = (void *)*((_QWORD *)this + 18);
      }
      Property = AudioFormatGetProperty(0x6D636466u, inSpecifierSize, inSpecifier, &outPropertyDataSize, v23);
      if (!(_DWORD)Property)
      {
LABEL_47:
        if (!*((_QWORD *)this + 18))
        {
          *((_DWORD *)this + 35) = inSpecifierSize;
          v17 = inSpecifierSize;
          v18 = (void *)operator new[]();
          bzero(v18, v17);
          v19 = *((_QWORD *)this + 18);
          *((_QWORD *)this + 18) = v18;
          if (v19)
          {
            MEMORY[0x193FFE43C](v19, 0x1000C8077774924);
            v18 = (void *)*((_QWORD *)this + 18);
          }
          memcpy(v18, inSpecifier, *((unsigned int *)this + 35));
        }
        if ((*(unsigned int (**)(MP4AudioFile *))(*(_QWORD *)this + 272))(this))
        {
          v20 = (PacketDependencyParser *)operator new();
          PacketDependencyParser::PacketDependencyParser(v20, v8, *((unsigned __int8 **)this + 18), *((_DWORD *)this + 35));
          Property = 0;
          *((_QWORD *)this + 76) = v20;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return Property;
}

void sub_18F0D5584(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

uint64_t MP4AudioFile::GetChannelLayoutSize(MP4AudioFile *this, unsigned int *a2, unsigned int *a3)
{
  int v5;
  MP4BoxParser_Track *v6;
  uint64_t result;
  int ACLSize;

  v5 = *((_DWORD *)this + 8);
  if (a3)
    *a3 = (v5 == 1819304813) & (*((unsigned __int8 *)this + 100) >> 1);
  if (!a2)
    return 0;
  *a2 = 0;
  if ((*((_BYTE *)this + 100) & 2) != 0)
  {
    if (v5 == 1819304813)
    {
      ACLSize = *((_DWORD *)this + 40) - *((_DWORD *)this + 38);
    }
    else
    {
      if (!*((_QWORD *)this + 18))
        return 2003334207;
      ACLSize = GetACLSize(v5, a2, a3);
    }
  }
  else
  {
    v6 = (MP4BoxParser_Track *)*((_QWORD *)this + 30);
    result = MP4BoxParser_Track::GetInfoFromTrackSubBoxes(v6);
    if ((_DWORD)result)
      return result;
    ACLSize = *((_DWORD *)v6 + 93);
  }
  result = 0;
  *a2 = ACLSize;
  return result;
}

uint64_t MP4AudioFile::GetChannelLayout(MP4AudioFile *this, unsigned int *a2, AudioChannelLayout *__dst)
{
  MP4BoxParser_Track *v6;
  uint64_t PropertyInfo;
  int v9;
  size_t v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  int v14;
  UInt32 v15;
  _DWORD *v16;
  _DWORD *v17;
  AudioChannelLayoutTag v18;
  uint64_t v19;
  unsigned int v20;
  std::bad_alloc *exception;
  std::bad_alloc *v22;
  UInt32 outPropertyDataSize;
  _OWORD inSpecifier[2];
  uint64_t v25;
  uint64_t v26;
  int v27;

  if (!a2)
    return 561211770;
  if ((*((_BYTE *)this + 100) & 2) != 0)
  {
    v9 = *((_DWORD *)this + 8);
    if (v9 == 1819304813)
    {
      v10 = *a2;
      v11 = (const void *)*((_QWORD *)this + 19);
      v12 = *((_QWORD *)this + 20) - (_QWORD)v11;
      PropertyInfo = 561211770;
      if (v12 <= v10)
      {
        memcpy(__dst, v11, v12);
        PropertyInfo = 0;
        *a2 = *((_DWORD *)this + 40) - *((_DWORD *)this + 38);
      }
    }
    else
    {
      v13 = *((_QWORD *)this + 18);
      if (v13)
      {
        PropertyInfo = 561211770;
        if (*a2 >= GetACLSize(*((_DWORD *)this + 8), a2, __dst))
        {
          v14 = *((_DWORD *)this + 35);
          outPropertyDataSize = 0;
          memset(inSpecifier, 0, sizeof(inSpecifier));
          DWORD2(inSpecifier[0]) = v9;
          v25 = 0;
          v26 = v13;
          v27 = v14;
          PropertyInfo = AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, inSpecifier, &outPropertyDataSize);
          if (!(_DWORD)PropertyInfo)
          {
            v15 = outPropertyDataSize;
            v16 = malloc_type_malloc(outPropertyDataSize, 0x7C51E058uLL);
            v17 = v16;
            if (v15 && !v16)
            {
              exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v22 = std::bad_alloc::bad_alloc(exception);
            }
            PropertyInfo = AudioFormatGetProperty(0x666C7374u, 0x38u, inSpecifier, &outPropertyDataSize, v16);
            if (!(_DWORD)PropertyInfo)
            {
              v18 = v17[12 * (outPropertyDataSize / 0x30) - 2];
              __dst->mChannelBitmap = 0;
              __dst->mNumberChannelDescriptions = 0;
              __dst->mChannelLayoutTag = v18;
              *a2 = 32;
            }
            free(v17);
          }
        }
      }
      else
      {
        return 2003334207;
      }
    }
  }
  else
  {
    v6 = (MP4BoxParser_Track *)*((_QWORD *)this + 30);
    PropertyInfo = MP4BoxParser_Track::GetInfoFromTrackSubBoxes(v6);
    if (!(_DWORD)PropertyInfo)
    {
      if (*a2 < *((_DWORD *)v6 + 93))
        return 561211770;
      v19 = *((_QWORD *)this + 30);
      PropertyInfo = MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v19);
      if (!(_DWORD)PropertyInfo)
      {
        v20 = *(_DWORD *)(v19 + 372);
        PropertyInfo = 561211770;
        if (*a2 >= v20)
        {
          *a2 = v20;
          memcpy(__dst, *(const void **)(v19 + 376), *(unsigned int *)(v19 + 372));
          return 0;
        }
      }
    }
  }
  return PropertyInfo;
}

uint64_t MP4AudioFile::SetChannelLayout(MP4AudioFile *this, UInt32 a2, AudioChannelLayout *inSpecifier)
{
  uint64_t result;
  int v7;
  std::vector<char>::size_type v8;
  UInt32 outPropertyDataSize;
  UInt32 ioPropertyDataSize;
  int outPropertyData;

  if ((*((_BYTE *)this + 100) & 2) == 0)
    return 1886547263;
  if (!inSpecifier)
    return 4294967246;
  if (*((_DWORD *)this + 8) != 1819304813)
    return 1886681407;
  v7 = *((_DWORD *)this + 13);
  ioPropertyDataSize = 4;
  outPropertyData = 0;
  result = AudioFormatGetProperty(0x6E63686Du, a2, inSpecifier, &ioPropertyDataSize, &outPropertyData);
  if ((_DWORD)result)
    return result;
  if (outPropertyData != v7)
    return 4294967246;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 19, (char *)inSpecifier, (char *)inSpecifier + a2, a2);
  outPropertyDataSize = 0;
  if (!AudioFormatGetPropertyInfo(0x636C636Eu, *((_DWORD *)this + 40) - *((_QWORD *)this + 19), *((const void **)this + 19), &outPropertyDataSize))
  {
    std::vector<unsigned char>::resize((std::vector<char> *)((char *)this + 176), outPropertyDataSize);
    if (AudioFormatGetProperty(0x636C636Eu, *((_DWORD *)this + 40) - *((_QWORD *)this + 19), *((const void **)this + 19), &outPropertyDataSize, *((void **)this + 22)))
    {
      v8 = 0;
    }
    else
    {
      v8 = outPropertyDataSize;
    }
    std::vector<unsigned char>::resize((std::vector<char> *)((char *)this + 176), v8);
  }
  return 0;
}

uint64_t MP4AudioFile::GetInfoDictionarySize(MP4AudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3)
    *a3 = 0;
  if (a2)
    *a2 = 8;
  return 0;
}

uint64_t MP4AudioFile::GetInfoDictionary(MP4AudioFile *this, CACFDictionary *a2)
{
  const __CFDictionary *v4;
  MP4BoxParser_iTunesMeta *v5;

  if ((*((_BYTE *)this + 100) & 2) != 0 && (v4 = (const __CFDictionary *)*((_QWORD *)this + 67)) != 0)
  {
    CACFDictionary::SetCFMutableDictionaryFromCopy(a2, v4, 0);
  }
  else
  {
    v5 = (MP4BoxParser_iTunesMeta *)*((_QWORD *)this + 75);
    if (v5)
    {
      MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(v5, -1451789708, a2);
      MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(*((MP4BoxParser_iTunesMeta **)this + 75), -1455336876, a2);
      MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(*((MP4BoxParser_iTunesMeta **)this + 75), -1453233054, a2);
      MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(*((MP4BoxParser_iTunesMeta **)this + 75), -1451987089, a2);
      MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(*((MP4BoxParser_iTunesMeta **)this + 75), -1452383891, a2);
      MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(*((MP4BoxParser_iTunesMeta **)this + 75), -1453039239, a2);
      MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(*((MP4BoxParser_iTunesMeta **)this + 75), -1453101708, a2);
      MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(*((MP4BoxParser_iTunesMeta **)this + 75), 1953329263, a2);
      MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(*((MP4BoxParser_iTunesMeta **)this + 75), 1668313716, a2);
      MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(*((MP4BoxParser_iTunesMeta **)this + 75), -1453230732, a2);
      MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(*((MP4BoxParser_iTunesMeta **)this + 75), 1953655662, a2);
      v5 = (MP4BoxParser_iTunesMeta *)MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(*((MP4BoxParser_iTunesMeta **)this + 75), -1452841618, a2);
      if ((_DWORD)v5)
        v5 = (MP4BoxParser_iTunesMeta *)MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(*((MP4BoxParser_iTunesMeta **)this + 75), 1735291493, a2);
    }
    AudioFileObject::AddDurationToInfoDictionary(v5, a2, (double *)this + 56);
  }
  return 0;
}

uint64_t MP4AudioFile::SetInfoDictionary(MP4AudioFile *this, CFTypeRef *a2)
{
  CFTypeRef v4;

  if (*a2)
  {
    CFRetain(*a2);
    v4 = *a2;
  }
  else
  {
    v4 = 0;
  }
  *((_QWORD *)this + 67) = v4;
  *((_BYTE *)this + 528) = 1;
  return 0;
}

uint64_t MP4AudioFile::GetSoundCheckDictionarySize(MP4AudioFile *this, unsigned int *a2, unsigned int *a3)
{
  int v3;
  int v5;

  if (a2)
    *a2 = 8;
  if (a3)
  {
    v3 = *((_DWORD *)this + 21);
    if (v3 == 1832149606 || v3 == 1832149350)
      v5 = (*((unsigned __int8 *)this + 100) >> 1) & 1;
    else
      v5 = 0;
    *a3 = v5;
  }
  return 0;
}

uint64_t MP4AudioFile::SetSoundCheckDictionary(MP4AudioFile *this, CACFDictionary *a2)
{
  uint64_t result;
  int v4;
  BOOL v5;
  unsigned int v7;
  unsigned int *v8;
  BOOL v9;
  unsigned int *v10;
  void *v11;
  std::bad_alloc *exception;
  std::bad_alloc *v13;

  result = 1886681407;
  v4 = *((_DWORD *)this + 21);
  v5 = v4 == 1832149606 || v4 == 1832149350;
  if (v5 && (*((_BYTE *)this + 100) & 2) != 0)
  {
    v7 = *((_DWORD *)this + 13);
    v8 = (unsigned int *)malloc_type_malloc(20 * v7, 0x2C8E6D5CuLL);
    if (20 * v7)
      v9 = v8 == 0;
    else
      v9 = 0;
    if (v9)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v13 = std::bad_alloc::bad_alloc(exception);
    }
    v10 = v8;
    bzero(v8, 20 * v7);
    result = GetSCFields(a2, v10, v7);
    if (!(_DWORD)result)
    {
      v11 = (void *)*((_QWORD *)this + 64);
      if (v11)
        free(v11);
      result = 0;
      *((_QWORD *)this + 64) = v10;
      *((_BYTE *)this + 528) = 1;
    }
  }
  return result;
}

uint64_t MP4AudioFile::GetLoudnessInfo(MP4AudioFile *this, CACFDictionary *a2)
{
  const __CFDictionary *v4;
  uint64_t LoudnessInfo;
  _BOOL4 v7;
  MP4BoxParser_iTunesMeta *v8;
  int StoreKind;
  const __CFString *v10;
  CFTypeRef cf;
  __CFDictionary *Mutable;
  __int16 v13;

  cf = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = 257;
  v4 = (const __CFDictionary *)*((_QWORD *)this + 72);
  if (v4)
  {
    CACFDictionary::SetCFMutableDictionaryFromCopy(a2, v4, 1);
  }
  else
  {
    LoudnessInfo = MP4BoxParser_Track::GetLoudnessInfo(*((MP4BoxParser_Track **)this + 30), (const __CFDictionary **)&cf);
    if ((_DWORD)LoudnessInfo)
      goto LABEL_5;
    v7 = cf != 0;
    if (cf)
    {
      CACFDictionary::SetCFMutableDictionaryFromCopy(a2, (CFDictionaryRef)cf, 1);
      CFRelease(cf);
    }
    if (!MP4AudioFile::GetSoundCheckFromMetaData(this, (CACFDictionary *)&Mutable))
    {
      CACFDictionary::AddDictionary(a2, CFSTR("sound check info"), Mutable);
      v7 = 1;
    }
    v8 = (MP4BoxParser_iTunesMeta *)*((_QWORD *)this + 75);
    if (v8
      && (StoreKind = MP4BoxParser_iTunesMeta::GetStoreKind(v8),
          (v10 = CopyMediaKindStringFromStoreItemKind(StoreKind)) != 0))
    {
      CACFDictionary::AddString(a2, CFSTR("media kind"), v10);
      CFRelease(v10);
    }
    else if (!v7)
    {
      LoudnessInfo = 1886681407;
      goto LABEL_5;
    }
  }
  LoudnessInfo = 0;
LABEL_5:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return LoudnessInfo;
}

void sub_18F0D5DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t MP4AudioFile::GetAseBoxes(MP4AudioFile *this, CACFDictionary *a2)
{
  const void *v2;

  v2 = *(const void **)(*((_QWORD *)this + 30) + 432);
  if (!v2)
    return 1886681407;
  CACFDictionary::operator=((uint64_t)a2, v2);
  return 0;
}

uint64_t MP4AudioFile::SetAseBoxes(MP4AudioFile *this, const void **a2)
{
  const void *v5;
  const void *v6;

  if ((*((_BYTE *)this + 100) & 2) == 0)
    return 1886547263;
  v5 = (const void *)*((_QWORD *)this + 73);
  if (v5)
    CFRelease(v5);
  v6 = *a2;
  *((_QWORD *)this + 73) = *a2;
  CFRetain(v6);
  return 0;
}

uint64_t MP4AudioFile::SetLoudnessInfo(MP4AudioFile *this, CACFDictionary *a2)
{
  uint64_t result;
  const void *v5;
  const void *v6;
  int v7;
  __CFString *v8;
  CFMutableDictionaryRef Mutable;
  __int16 v10;

  if ((*((_BYTE *)this + 100) & 2) == 0)
    return 1886547263;
  if ((CACFDictionary::HasKey(a2, CFSTR("main loudness parameters")) & 1) != 0
    || (CACFDictionary::HasKey(a2, CFSTR("dialogue anchor parameters")) & 1) != 0
    || CACFDictionary::HasKey(a2, CFSTR("ISO loudness box")))
  {
    v5 = (const void *)*((_QWORD *)this + 72);
    if (v5)
    {
      CFRelease(v5);
      *((_QWORD *)this + 72) = 0;
    }
    v6 = *(const void **)a2;
    *((_QWORD *)this + 72) = *(_QWORD *)a2;
    CFRetain(v6);
  }
  v7 = *((_DWORD *)this + 21);
  if (v7 == 1832149606 || v7 == 1832149350)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v10 = 257;
    CACFDictionary::GetCACFDictionary(a2, CFSTR("sound check info"), (CACFDictionary *)&Mutable);
    if (Mutable)
      (*(void (**)(MP4AudioFile *, CFMutableDictionaryRef *))(*(_QWORD *)this + 464))(this, &Mutable);
    v8 = 0;
    if (CACFDictionary::GetString(a2, CFSTR("media kind"), (const __CFString **)&v8))
      *((_BYTE *)this + 572) = GetStoreItemKindFromLID(a2);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  if (*((_QWORD *)this + 64) || *((_QWORD *)this + 72))
    return 0;
  result = 0;
  *((_BYTE *)this + 572) = 0;
  return result;
}

void sub_18F0D5FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t MP4AudioFile::GetLoudnessInfoSize(MP4AudioFile *this, unsigned int *a2, unsigned int *a3)
{
  *a2 = 8;
  *a3 = 1;
  return 0;
}

uint64_t MP4AudioFile::GetAseSize(MP4AudioFile *this, unsigned int *a2, unsigned int *a3)
{
  *a2 = 8;
  *a3 = 0;
  return 0;
}

BOOL MP4AudioFile::IsDataFormatSupported(MP4AudioFile *this, const AudioStreamBasicDescription *a2)
{
  _BOOL8 result;
  int v4;
  BOOL v5;
  AudioFormatID mFormatID;
  AudioFormatID v9;
  AudioFormatID v10;

  result = 0;
  v4 = *((_DWORD *)this + 21);
  if (v4 <= 1832149349)
  {
    v5 = v4 == 862416946 || v4 == 862417008;
    if (v5)
    {
      mFormatID = a2->mFormatID;
      return mFormatID == 1365470320 || mFormatID == 1935764850 || mFormatID == 1935767394 || mFormatID >> 8 == 6381923;
    }
  }
  else
  {
    switch(v4)
    {
      case 1832149350:
        return IsSupportedM4AFormat(a2->mFormatID);
      case 1832149606:
        v9 = a2->mFormatID;
        v5 = v9 == 1885430115;
        v10 = v9 >> 8;
        return v5 || v10 == 6381923;
      case 1836069990:
        return IsSupportedMP4Format(a2->mFormatID);
    }
  }
  return result;
}

uint64_t MP4AudioFile::PacketRangeUpperBound(MP4AudioFile *this, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  MP4BoxParser_Track *v13;
  unsigned int ByteCountForPackets;

  v8 = 1885563711;
  *a4 = 0;
  v9 = (*(uint64_t (**)(MP4AudioFile *))(*(_QWORD *)this + 240))(this);
  if ((a2 & 0x8000000000000000) == 0)
  {
    v11 = v9 - a2;
    if (v9 > a2)
    {
      v12 = *a3;
      if ((*a3 & 0x8000000000000000) == 0)
      {
        if (v11 < v12)
        {
          *a3 = v11;
          LODWORD(v12) = v9 - a2;
        }
        if ((*((_BYTE *)this + 100) & 2) != 0)
        {
          ByteCountForPackets = NUMovieBox::GetByteCountForPackets(*((_QWORD *)this + 31), v12);
        }
        else
        {
          v13 = (MP4BoxParser_Track *)*((_QWORD *)this + 30);
          if (!v13)
            return 2003334207;
          ByteCountForPackets = MP4BoxParser_Track::GetByteCountForPackets(v13, a2, v12, v10);
        }
        v8 = 0;
        *a4 = ByteCountForPackets;
      }
    }
  }
  return v8;
}

uint64_t MP4AudioFile::GetSourceBitDepth(MP4AudioFile *this, int *a2)
{
  int *v2;

  if ((*((_BYTE *)this + 100) & 2) != 0)
    v2 = (int *)((char *)this + 524);
  else
    v2 = (int *)(*((_QWORD *)this + 30) + 424);
  *a2 = *v2;
  return 0;
}

uint64_t MP4AudioFile::SetSourceBitDepth(MP4AudioFile *this, int a2)
{
  uint64_t result;
  int v4;

  result = 1886681407;
  if ((*((_BYTE *)this + 100) & 2) != 0)
  {
    v4 = *((_DWORD *)this + 21);
    if ((v4 == 1832149606 || v4 == 1832149350) && *((_DWORD *)this + 8) >> 8 == 6381923)
    {
      result = 0;
      *((_DWORD *)this + 131) = a2;
    }
  }
  return result;
}

uint64_t MP4AudioFile::GetAlbumArtwork(MP4AudioFile *this, const __CFData **a2)
{
  const void *v4;
  const __CFData *v5;
  MP4BoxParser_iTunesMeta *v6;
  void *v8;

  v4 = (const void *)*((_QWORD *)this + 68);
  if (v4)
  {
    CFRetain(v4);
    v5 = (const __CFData *)*((_QWORD *)this + 68);
  }
  else
  {
    v6 = (MP4BoxParser_iTunesMeta *)*((_QWORD *)this + 75);
    if (v6)
    {
      v8 = 0;
      MP4BoxParser_iTunesMeta::CopyMetaItemData(v6, 1668249202, (const void **)&v8);
      v5 = (const __CFData *)v8;
    }
    else
    {
      v5 = 0;
    }
  }
  *a2 = v5;
  if (v5)
    return 0;
  else
    return 1667787583;
}

uint64_t MP4AudioFile::SetAlbumArtwork(MP4AudioFile *this, CFTypeRef cf)
{
  uint64_t result;
  int v4;

  result = 1886681407;
  if ((*((_BYTE *)this + 100) & 2) != 0)
  {
    v4 = *((_DWORD *)this + 21);
    if (v4 == 1832149606 || v4 == 1832149350)
    {
      *((_QWORD *)this + 68) = cf;
      CFRetain(cf);
      result = 0;
      *((_BYTE *)this + 528) = 1;
    }
  }
  return result;
}

BOOL IsSupportedMP4Format(int a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 result;
  int v5;
  unsigned __int16 v6;
  BOOL v7;
  UInt32 ioPropertyDataSize;
  uint64_t outPropertyData;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = 1;
  if (a1 <= 1885433954)
  {
    if (a1 > 1667591279)
    {
      if (a1 <= 1752594530)
      {
        if (a1 == 1667591280 || a1 == 1700998451)
          return result;
        v5 = 1718378851;
      }
      else if (a1 > 1836069683)
      {
        if (a1 == 1836069684)
          return result;
        v5 = 1885430115;
      }
      else
      {
        if (a1 == 1752594531)
          return result;
        v5 = 1819304813;
      }
      goto LABEL_43;
    }
    if (a1 <= 1365470319)
    {
      if ((a1 - 778924081) < 3)
        return result;
      goto LABEL_45;
    }
    if (a1 <= 1634492770)
    {
      if (a1 != 1365470320)
      {
        v5 = 1633889587;
        goto LABEL_43;
      }
      return 0;
    }
    if (a1 == 1634492771)
      return result;
    v5 = 1634497332;
LABEL_43:
    if (a1 == v5)
      return result;
    goto LABEL_45;
  }
  if (a1 <= 1902928226)
  {
    if (a1 <= 1902207794)
    {
      if (a1 == 1885433955 || a1 == 1886745441)
        return result;
      v6 = 24931;
    }
    else
    {
      if (a1 > 1902469938)
      {
        if (a1 == 1902469939)
          return result;
        v5 = 1902537827;
        goto LABEL_43;
      }
      if (a1 == 1902207795)
        return result;
      v6 = 28771;
    }
    v5 = v6 | 0x71610000;
    goto LABEL_43;
  }
  if (a1 > 1936487266)
  {
    if (a1 > 1953986160)
    {
      if (a1 == 1953986161)
        return result;
      v5 = 1970495843;
    }
    else
    {
      if (a1 == 1936487267)
        return result;
      v5 = 1936487278;
    }
    goto LABEL_43;
  }
  if (a1 <= 1935764849)
  {
    if (a1 == 1902928227)
      return result;
    v5 = 1903522657;
    goto LABEL_43;
  }
  if (a1 == 1935764850 || a1 == 1935767394)
    return 0;
LABEL_45:
  if (a1 >> 8 != 6381923)
  {
    v13 = v1;
    v14 = v2;
    v11 = a1;
    v12 = 0x6D70346600000000;
    v10 = 0;
    outPropertyData = 0;
    ioPropertyDataSize = 12;
    if (AudioFormatGetProperty(0x636E6964u, 0xCu, &v11, &ioPropertyDataSize, &outPropertyData))
      v7 = 1;
    else
      v7 = v10 == 0;
    return !v7;
  }
  return result;
}

BOOL IsSupportedM4AFormat(int a1)
{
  _BOOL8 result;
  int v3;

  result = 1;
  if (a1 <= 1700998450)
  {
    if ((a1 - 778924081) < 3 || a1 == 1633889587)
      return result;
    v3 = 1634492771;
LABEL_13:
    if (a1 != v3)
      return a1 >> 8 == 6381923;
    return result;
  }
  if (a1 > 1885430114)
  {
    if (a1 == 1885430115 || a1 == 1885430579)
      return result;
    v3 = 1885692723;
    goto LABEL_13;
  }
  if (a1 != 1700998451 && a1 != 1718378851)
  {
    v3 = 1819304813;
    goto LABEL_13;
  }
  return result;
}

uint64_t MP4AudioFile::GetSoundCheckFromMetaData(MP4AudioFile *this, CACFDictionary *a2)
{
  uint64_t v4;
  __n128 *BoxInfo;
  uint64_t v6;
  unint64_t v7;
  __n128 **v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  __n128 *v13;
  int v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  void (**v19)(MP4BoxParser *__hidden);
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __n128 **v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  char v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v18);
  if (!(_DWORD)v4)
  {
    BoxInfo = FindBoxInfo(*((_QWORD *)this + 13), 0, v18, 1836019574, 0, *((__n128 ***)this + 28));
    if (BoxInfo)
    {
      v6 = *((_QWORD *)this + 13);
      v7 = BoxInfo[1].n128_u64[0];
      v29 = (__n128 **)&off_1E2902718;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v6 + 88))(&v30, v6, v7);
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 8;
      v29 = (__n128 **)&off_1E29078B8;
      v36 = 1;
      v37 = 0;
      v4 = MP4BoxParser_Movie::Init(&v29);
      if (!(_DWORD)v4)
      {
        v17 = 0;
        while (1)
        {
          v8 = (__n128 **)v37;
          if (!v37 || (v9 = *(_QWORD *)(v37 + 8), v9 == v37))
          {
            v10 = 0;
          }
          else
          {
            v10 = 0;
            do
            {
              if (*(_DWORD *)(v9 + 16) == 1969517665)
                ++v10;
              v9 = *(_QWORD *)(v9 + 8);
            }
            while (v9 != v37);
          }
          if (v4 >= v10)
            break;
          v11 = v30;
          v12 = ((uint64_t (*)(__n128 ***))v29[3])(&v29);
          v13 = FindBoxInfo(v11, v12, v33, 1969517665, v4, v8);
          if (v13)
          {
            v14 = *((_DWORD *)this + 13);
            v15 = v13[1].n128_u64[0] + 8;
            v19 = &off_1E2902718;
            (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v30 + 88))(&v20, v30, v15);
            v21 = 0;
            v22 = 0;
            v23 = 0;
            v24 = 0;
            v25 = 8;
            v26 = 0;
            v27 = 0;
            v19 = &off_1E29094B8;
            v28 = v14;
            if (!MP4BoxParser_iTunesNORMMeta::Init((MP4BoxParser_iTunesNORMMeta *)&v19))
            {
              MP4BoxParser_iTunesNORMMeta::FillSoundCheckDictionary((MP4BoxParser_iTunesNORMMeta *)&v19, a2);
              v17 = 1;
            }
            MP4BoxParser_Meta::~MP4BoxParser_Meta((MP4BoxParser_Meta *)&v19);
          }
          LODWORD(v4) = v4 + 1;
        }
        if ((v17 & 1) != 0)
          v4 = 0;
        else
          v4 = 1886681407;
      }
      MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)&v29);
    }
    else
    {
      return 1685348671;
    }
  }
  return v4;
}

void sub_18F0D6920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)va);
  _Unwind_Resume(a1);
}

uint64_t GetACLSize(int a1, unsigned int a2, void *a3)
{
  uint64_t result;
  int v5;

  result = 0;
  if (a1 <= 1832149348)
  {
    if (a1 == 1633889587 || a1 == 1634492771)
      return 32;
    v5 = 1700998451;
    goto LABEL_10;
  }
  if (a1 > 1935764849)
  {
    if (a1 == 1935767394)
      return 32;
    v5 = 1935764850;
LABEL_10:
    if (a1 != v5)
      return result;
    return 32;
  }
  if (a1 != 1832149349)
  {
    v5 = 1836069985;
    goto LABEL_10;
  }
  return 32;
}

void MP4AudioFile::FillPacketTableInfoFromiTunesUserData(MP4AudioFile *this)
{
  __n128 *BoxInfo;
  uint64_t v3;
  unint64_t v4;
  unsigned int i;
  __n128 **v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  __n128 *v11;
  uint64_t v12;
  uint64_t v13;
  AudioFilePacketTableInfo v14;
  char v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  int v21;
  _DWORD v22[5];
  __n128 **v23;
  uint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  char v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  if (!(*(unsigned int (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v13))
  {
    BoxInfo = FindBoxInfo(*((_QWORD *)this + 13), 0, v13, 1836019574, 0, *((__n128 ***)this + 28));
    if (BoxInfo)
    {
      v3 = *((_QWORD *)this + 13);
      v4 = BoxInfo[1].n128_u64[0];
      v23 = (__n128 **)&off_1E2902718;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v3 + 88))(&v24, v3, v4);
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 8;
      v23 = (__n128 **)&off_1E29078B8;
      v30 = 1;
      v31 = 0;
      if (!MP4BoxParser_Movie::Init(&v23))
      {
        for (i = 0; ; ++i)
        {
          v6 = (__n128 **)v31;
          if (!v31 || (v7 = *(_QWORD *)(v31 + 8), v7 == v31))
          {
            v8 = 0;
          }
          else
          {
            v8 = 0;
            do
            {
              if (*(_DWORD *)(v7 + 16) == 1969517665)
                ++v8;
              v7 = *(_QWORD *)(v7 + 8);
            }
            while (v7 != v31);
          }
          if (i >= v8)
            break;
          v9 = v24;
          v10 = ((uint64_t (*)(__n128 ***))v23[3])(&v23);
          v11 = FindBoxInfo(v9, v10, v27, 1969517665, i, v6);
          if (v11)
          {
            v12 = v11[1].n128_u64[0] + 8;
            v14.mNumberValidFrames = (SInt64)&off_1E2902718;
            (*(void (**)(SInt32 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v24 + 88))(&v14.mPrimingFrames, v24, v12);
            v15 = 0;
            v16 = 0;
            v17 = 0;
            v18 = 0;
            v19 = 8;
            v20 = 0;
            v21 = 0;
            v14.mNumberValidFrames = (SInt64)&off_1E29094E8;
            memset(v22, 0, sizeof(v22));
            if (!MP4BoxParser_iTunesSMPBMeta::Init(&v14) && *(uint64_t *)&v22[1] >= 1)
              *((_OWORD *)this + 30) = *(_OWORD *)&v22[1];
            MP4BoxParser_Meta::~MP4BoxParser_Meta((MP4BoxParser_Meta *)&v14);
          }
        }
      }
      MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)&v23);
    }
  }
}

void sub_18F0D6C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)va);
  _Unwind_Resume(a1);
}

uint64_t MP4AudioFile::UseAudioTrack(MP4AudioFile *this, void *a2, unsigned int a3, int a4)
{
  MP4AudioFile *v7;
  uint64_t v8;
  int InfoFromTrackSubBoxes;
  double *v10;
  __int128 v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int TrackID;
  char *v16;
  char *v17;
  unsigned int v18;
  BOOL v19;
  char **v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *MaximumPacketSize;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  MP4AudioFile *v32;
  AudioFilePacketTableInfo *v33;
  __n128 SampleTableBox;
  int mMagicCookie_low;
  uint64_t v36;
  char v37;
  double *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  double v50;
  double v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  __n128 **v56;
  uint64_t v57;
  __n128 **v58;
  int v59;
  __n128 **v60;
  int v61;
  __n128 **v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  size_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  __n128 *BoxInfo;
  uint64_t v77;
  unint64_t v78;
  unsigned int i;
  __n128 **v80;
  uint64_t v81;
  unsigned int v82;
  MP4BoxParser_MovieFragment *v83;
  unsigned int v84;
  __n128 *v85;
  __n128 *v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  size_t v95;
  void *v96;
  void *v97;
  int v98;
  uint64_t v99;
  int v100;
  __n128 **v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  __n128 ***v108;
  uint64_t v109;
  const void *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  _DWORD *v119;
  std::bad_alloc *v120;
  std::bad_alloc *v121;
  _DWORD *exception;
  struct type_info *v123;
  NSObject *v124;
  const char *v125;
  _DWORD *v126;
  NSObject *v127;
  const char *v128;
  struct type_info *v129;
  double *v130;
  unsigned int Sequence;
  unsigned int v132;
  void *__dst;
  MP4BoxParser_Track *v134;
  MP4AudioFile *v135;
  unsigned int v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  size_t size[2];
  int v143;
  AudioFormatInfo buf;
  MP4BoxParser_Track *v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  char v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  char v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  char v158;
  __int128 v159;
  __int128 v160;
  int v161;
  unint64_t v162;
  __int128 v163;
  _DWORD v164[10];
  uint64_t v165;
  uint64_t v166;
  _DWORD v167[276];
  __int128 v168;
  __int128 v169;
  __n128 **v170;
  MP4BoxParser_MovieFragment *p_buf;
  size_t *v172;
  __n128 ***v173;
  char v174;
  int v175;
  char v176;
  uint64_t v177;
  uint64_t v178;

  v7 = this;
  v178 = *MEMORY[0x1E0C80C00];
  v140 = 0;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v140);
  v8 = operator new();
  MP4Parser_PacketProvider::MP4Parser_PacketProvider((MP4Parser_PacketProvider *)v8, a2, a3, a4);
  InfoFromTrackSubBoxes = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  if (InfoFromTrackSubBoxes)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_211;
    LODWORD(buf.mASBD.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mASBD.mSampleRate + 4) = "MP4AudioFile.cpp";
    LOWORD(buf.mASBD.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mASBD.mFormatFlags + 2) = 4377;
    v124 = MEMORY[0x1E0C81028];
    v125 = "%25s:%-5d  MP4Parser_PacketProvider->Init() failed";
LABEL_210:
    _os_log_impl(&dword_18EE07000, v124, OS_LOG_TYPE_ERROR, v125, (uint8_t *)&buf, 0x12u);
    goto LABEL_211;
  }
  InfoFromTrackSubBoxes = MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v8);
  if (InfoFromTrackSubBoxes)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_211;
    LODWORD(buf.mASBD.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mASBD.mSampleRate + 4) = "MP4AudioFile.cpp";
    LOWORD(buf.mASBD.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mASBD.mFormatFlags + 2) = 4381;
    v124 = MEMORY[0x1E0C81028];
    v125 = "%25s:%-5d  MP4Parser_PacketProvider->GetASBD() failed";
    goto LABEL_210;
  }
  v10 = (double *)(v8 + 328);
  v139 = *(_QWORD *)(v8 + 360);
  v11 = *(_OWORD *)(v8 + 344);
  v137 = *(_OWORD *)(v8 + 328);
  v138 = v11;
  if ((_DWORD)v11
    && (MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v8) || !*(_BYTE *)(v8 + 440)))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mASBD.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mASBD.mSampleRate + 4) = "MP4AudioFile.cpp";
      LOWORD(buf.mASBD.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mASBD.mFormatFlags + 2) = 4385;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Audio streams with constant packet size that are interleaved with other data are not supported.", (uint8_t *)&buf, 0x12u);
    }
    exception = __cxa_allocate_exception(4uLL);
    *exception = 2003334207;
LABEL_212:
    __cxa_throw(exception, v123, 0);
  }
  InfoFromTrackSubBoxes = MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v8);
  if (InfoFromTrackSubBoxes)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mASBD.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mASBD.mSampleRate + 4) = "MP4AudioFile.cpp";
      LOWORD(buf.mASBD.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mASBD.mFormatFlags + 2) = 4390;
      v124 = MEMORY[0x1E0C81028];
      v125 = "%25s:%-5d  MP4Parser_PacketProvider->GetMagicCookieSize() failed";
      goto LABEL_210;
    }
LABEL_211:
    exception = __cxa_allocate_exception(4uLL);
    *exception = InfoFromTrackSubBoxes;
    v123 = (struct type_info *)MEMORY[0x1E0DE4EF0];
    goto LABEL_212;
  }
  v12 = *(_DWORD *)(v8 + 384);
  __dst = (void *)operator new[]();
  v13 = MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v8);
  if (v13)
  {
LABEL_214:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mASBD.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mASBD.mSampleRate + 4) = "MP4AudioFile.cpp";
      LOWORD(buf.mASBD.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mASBD.mFormatFlags + 2) = 4394;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4Parser_PacketProvider->GetMagicCookie() failed", (uint8_t *)&buf, 0x12u);
    }
    v126 = __cxa_allocate_exception(4uLL);
    *v126 = v13;
    goto LABEL_228;
  }
  v14 = *(_DWORD *)(v8 + 384);
  if (v12 < v14)
  {
    v13 = 561211770;
    goto LABEL_214;
  }
  memcpy(__dst, *(const void **)(v8 + 392), *(unsigned int *)(v8 + 384));
  if (!MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v8))
  {
    v23 = *(unsigned int *)(v8 + 372);
    if ((_DWORD)v23)
    {
      v24 = (char *)*((_QWORD *)v7 + 19);
      v25 = *((_QWORD *)v7 + 20) - (_QWORD)v24;
      if (v23 <= v25)
      {
        if (v23 < v25)
          *((_QWORD *)v7 + 20) = &v24[v23];
      }
      else
      {
        std::vector<unsigned char>::__append((std::vector<char> *)((char *)v7 + 152), v23 - v25);
        v24 = (char *)*((_QWORD *)v7 + 19);
      }
      if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v8)
        || (v69 = *(unsigned int *)(v8 + 372), v23 < v69))
      {
        v70 = *((_QWORD *)v7 + 19);
        if (*((_QWORD *)v7 + 20) != v70)
          *((_QWORD *)v7 + 20) = v70;
      }
      else
      {
        memcpy(v24, *(const void **)(v8 + 376), v69);
      }
    }
  }
  v135 = v7;
  if (!(_DWORD)v138)
  {
    v143 = 0;
    size[0] = -1;
    size[1] = -1;
    if (*((_BYTE *)v7 + 408))
    {
      TrackID = MP4BoxParser_Track::GetTrackID((MP4BoxParser_Track *)v8);
      v16 = (char *)*((_QWORD *)v7 + 54);
      if (v16)
      {
        v17 = (char *)v7 + 432;
        do
        {
          v18 = *((_DWORD *)v16 + 7);
          v19 = v18 >= TrackID;
          if (v18 >= TrackID)
            v20 = (char **)v16;
          else
            v20 = (char **)(v16 + 8);
          if (v19)
            v17 = v16;
          v16 = *v20;
        }
        while (*v20);
        if (v17 != (char *)v7 + 432 && TrackID >= *((_DWORD *)v17 + 7))
          *(_OWORD *)size = *((_OWORD *)v17 + 2);
      }
      v141 = 0;
      v130 = (double *)(v8 + 328);
      if (!(*(unsigned int (**)(_QWORD, uint64_t *))(**((_QWORD **)v7 + 13) + 24))(*((_QWORD *)v7 + 13), &v141))
      {
        Sequence = 0;
        v72 = 0;
        v134 = (MP4BoxParser_Track *)v8;
        while (1)
        {
          v73 = *((_QWORD *)v7 + 28);
          v74 = *(_QWORD *)(v73 + 8);
          if (v74 == v73)
          {
            v75 = 0;
          }
          else
          {
            v75 = 0;
            do
            {
              if (*(_DWORD *)(v74 + 16) == 1836019558)
                ++v75;
              v74 = *(_QWORD *)(v74 + 8);
            }
            while (v74 != v73);
          }
          if (v72 >= v75)
            break;
          BoxInfo = FindBoxInfo(*((_QWORD *)v7 + 13), 0, v141, 1836019558, v72, (__n128 **)v73);
          if (BoxInfo)
          {
            v77 = *((_QWORD *)v7 + 13);
            v78 = BoxInfo[1].n128_u64[0];
            v170 = (__n128 **)&off_1E2902718;
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v77 + 88))(v77, v78);
            LOBYTE(v172) = 0;
            HIDWORD(v172) = 0;
            v173 = 0;
            v174 = 0;
            v175 = 8;
            v170 = (__n128 **)&off_1E2909198;
            v176 = 1;
            v177 = 0;
            if (!MP4BoxParser_MovieFragment::Init(&v170))
            {
              if (v72 && MP4BoxParser_MovieFragment::GetSequence(p_buf, v177) <= Sequence)
              {
                MP4BoxParser_MovieFragment::~MP4BoxParser_MovieFragment((MP4BoxParser_MovieFragment *)&v170);
                break;
              }
              Sequence = MP4BoxParser_MovieFragment::GetSequence(p_buf, v177);
              v132 = v72;
              for (i = 0; ; ++i)
              {
                v80 = (__n128 **)v177;
                if (!v177 || (v81 = *(_QWORD *)(v177 + 8), v81 == v177))
                {
                  v82 = 0;
                }
                else
                {
                  v82 = 0;
                  do
                  {
                    if (*(_DWORD *)(v81 + 16) == 1953653094)
                      ++v82;
                    v81 = *(_QWORD *)(v81 + 8);
                  }
                  while (v81 != v177);
                }
                if (i >= v82)
                  break;
                v83 = p_buf;
                v84 = ((uint64_t (*)(__n128 ***))v170[3])(&v170);
                v85 = FindBoxInfo((uint64_t)v83, v84, (uint64_t)v173, 1953653094, i, v80);
                v86 = v85;
                if (v85)
                {
                  v87 = v85[1].n128_u64[0];
                  if (v85->n128_u64[1] > (unint64_t)v173 - v87)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(buf.mASBD.mSampleRate) = 136315394;
                      *(_QWORD *)((char *)&buf.mASBD.mSampleRate + 4) = "MP4AudioFile.cpp";
                      LOWORD(buf.mASBD.mFormatFlags) = 1024;
                      *(AudioFormatFlags *)((char *)&buf.mASBD.mFormatFlags + 2) = 4326;
                      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Invalid file layout", (uint8_t *)&buf, 0x12u);
                    }
                    v119 = __cxa_allocate_exception(4uLL);
                    *v119 = 1685348671;
                  }
                  v88 = *(_QWORD *)(v177 + 8);
                  if (v88 != v177)
                  {
                    v89 = 0;
                    do
                    {
                      if (*(_DWORD *)(v88 + 16) == 1953653094)
                      {
                        if (v89 == i)
                        {
                          v90 = *(_QWORD *)(v88 + 40);
                          goto LABEL_143;
                        }
                        ++v89;
                      }
                      v88 = *(_QWORD *)(v88 + 8);
                    }
                    while (v88 != v177);
                  }
                  v90 = 0;
LABEL_143:
                  v91 = *((_DWORD *)v7 + 11);
                  v92 = *((_QWORD *)v7 + 13);
                  v93 = BoxInfo[1].n128_u64[0];
                  *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2902718;
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v92 + 88))(v92, v87 + v93);
                  LOBYTE(buf.mASBD.mBytesPerPacket) = 0;
                  buf.mASBD.mFramesPerPacket = 0;
                  *(_QWORD *)&buf.mASBD.mBytesPerFrame = 0;
                  LOBYTE(buf.mASBD.mBitsPerChannel) = 0;
                  buf.mASBD.mReserved = 8;
                  *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E29091F8;
                  v145 = v134;
                  v146 = 0;
                  v147 = v90;
                  v148 = 0;
                  v149 = 0;
                  v150 = 0;
                  v151 = 0u;
                  v152 = 0u;
                  v153 = 0u;
                  v154 = 0;
                  v155 = 0u;
                  v156 = 0u;
                  v157 = 0u;
                  v158 = 0;
                  v161 = 0;
                  v159 = 0u;
                  v160 = 0u;
                  v162 = v93;
                  v163 = *(_OWORD *)size;
                  v7 = v135;
                  if (!MP4BoxParser_TrackFragment::Init((__n128 ***)&buf, v91))
                  {
                    v94 = MP4BoxParser_TrackFragment::GetTrackID(*(MP4BoxParser_TrackFragment **)&buf.mASBD.mFormatID, v147);
                    if (v94 == MP4BoxParser_Track::GetTrackID(v134))
                    {
                      v95 = v86->n128_u64[1];
                      v96 = malloc_type_malloc(v95, 0x2C8E6D5CuLL);
                      v97 = v96;
                      if (v95 && !v96)
                      {
                        v120 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                        v121 = std::bad_alloc::bad_alloc(v120);
                      }
                      bzero(v96, v95);
                      v7 = v135;
                      if (v97)
                      {
                        v7 = v135;
                        if (!(*(unsigned int (**)(MP4BoxParser_MovieFragment *, _QWORD, unint64_t, _QWORD, void *, int *))(*(_QWORD *)p_buf + 48))(p_buf, 0, v86[1].n128_u64[0], v86->n128_u32[2], v97, &v143))
                        {
                          MP4Parser_PacketProvider::AddTrackFragment((uint64_t)v134, (uint64_t)v97, v86->n128_u32[2], BoxInfo[1].n128_i64[0], (__int128 *)size);
                          free(v97);
                          v7 = v135;
                        }
                      }
                    }
                  }
                  MP4BoxParser_TrackFragment::~MP4BoxParser_TrackFragment((MP4BoxParser_TrackFragment *)&buf);
                }
              }
              v8 = (uint64_t)v134;
              v72 = v132;
            }
            MP4BoxParser_MovieFragment::~MP4BoxParser_MovieFragment((MP4BoxParser_MovieFragment *)&v170);
          }
          ++v72;
        }
      }
      v10 = v130;
    }
  }
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  if (v140 < v21)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_224;
    LODWORD(buf.mASBD.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mASBD.mSampleRate + 4) = "MP4AudioFile.cpp";
    LOWORD(buf.mASBD.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mASBD.mFormatFlags + 2) = 4415;
    v127 = MEMORY[0x1E0C81028];
    v128 = "%25s:%-5d  numPackets is too large";
LABEL_223:
    _os_log_impl(&dword_18EE07000, v127, OS_LOG_TYPE_ERROR, v128, (uint8_t *)&buf, 0x12u);
    goto LABEL_224;
  }
  if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v8))
    v22 = 0;
  else
    v22 = *(_QWORD *)(v8 + 104);
  v26 = *(_QWORD *)(v8 + 448) + v22;
  if (v26 > v140)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_224;
    LODWORD(buf.mASBD.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mASBD.mSampleRate + 4) = "MP4AudioFile.cpp";
    LOWORD(buf.mASBD.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mASBD.mFormatFlags + 2) = 4418;
    v127 = MEMORY[0x1E0C81028];
    v128 = "%25s:%-5d  numBytes is too large";
    goto LABEL_223;
  }
  MaximumPacketSize = (std::__shared_weak_count *)MP4Parser_PacketProvider::GetMaximumPacketSize((MP4Parser_PacketProvider *)v8);
  if (v140 < MaximumPacketSize)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mASBD.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mASBD.mSampleRate + 4) = "MP4AudioFile.cpp";
      LOWORD(buf.mASBD.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mASBD.mFormatFlags + 2) = 4421;
      v127 = MEMORY[0x1E0C81028];
      v128 = "%25s:%-5d  maxPacketSize is too large";
      goto LABEL_223;
    }
LABEL_224:
    v126 = __cxa_allocate_exception(4uLL);
    *v126 = 2003334207;
    goto LABEL_229;
  }
  v28 = (*(uint64_t (**)(MP4AudioFile *, __int128 *))(*(_QWORD *)v7 + 176))(v7, &v137);
  if (v28)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mASBD.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mASBD.mSampleRate + 4) = "MP4AudioFile.cpp";
      LOWORD(buf.mASBD.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mASBD.mFormatFlags + 2) = 4426;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  bad data format", (uint8_t *)&buf, 0x12u);
    }
    v126 = __cxa_allocate_exception(4uLL);
    *v126 = v28;
LABEL_228:
    v129 = (struct type_info *)MEMORY[0x1E0DE4EF0];
LABEL_229:
    __cxa_throw(v126, v129, 0);
  }
  v141 = 0;
  MP4Parser_PacketProvider::GetPacketOffset((MP4Parser_PacketProvider *)v8, 0, (unint64_t *)&v141);
  v29 = v21;
  *((_QWORD *)v7 + 9) = v141;
  v30 = *((_QWORD *)v7 + 18);
  *((_QWORD *)v7 + 18) = __dst;
  if (v30)
    MEMORY[0x193FFE43C](v30, 0x1000C8077774924);
  *((_DWORD *)v7 + 35) = v14;
  *((_QWORD *)v7 + 25) = v21;
  *((_QWORD *)v7 + 26) = v26;
  (*(void (**)(MP4AudioFile *, std::__shared_weak_count *))(*(_QWORD *)v7 + 648))(v7, MaximumPacketSize);
  v143 = 1969977198;
  v31 = AudioFormatEncryptedFormatTranslator::DecryptFormatID(DWORD2(v137), &v143);
  v32 = v7;
  v33 = (AudioFilePacketTableInfo *)((char *)v7 + 464);
  if (*((_QWORD *)v32 + 58) != -1)
    *v33 = (AudioFilePacketTableInfo)xmmword_18F1173E0;
  MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v8);
  SampleTableBox = MP4BoxParser_Track::GetSampleTableBox((MP4BoxParser_Track *)&buf, *(_QWORD *)(v8 + 64));
  mMagicCookie_low = LOBYTE(buf.mMagicCookie);
  if (!LOBYTE(buf.mMagicCookie))
    goto LABEL_62;
  if (!*(_QWORD *)&buf.mASBD.mBytesPerFrame
    || (v36 = *(_QWORD *)(*(_QWORD *)&buf.mASBD.mBytesPerFrame + 8), v36 == *(_QWORD *)&buf.mASBD.mBytesPerFrame))
  {
    v37 = 1;
    goto LABEL_47;
  }
  while (*(_DWORD *)(v36 + 16) != 1937011827)
  {
    v36 = *(_QWORD *)(v36 + 8);
    if (v36 == *(_QWORD *)&buf.mASBD.mBytesPerFrame)
    {
      v37 = 1;
      goto LABEL_47;
    }
  }
  MaximumPacketSize = *(std::__shared_weak_count **)(v36 + 48);
  if (MaximumPacketSize)
  {
    p_shared_owners = (unint64_t *)&MaximumPacketSize->__shared_owners_;
    do
      v46 = __ldxr(p_shared_owners);
    while (__stxr(v46 + 1, p_shared_owners));
  }
  v37 = 0;
  if (mMagicCookie_low)
  {
LABEL_47:
    v38 = v10;
    v39 = *(std::__shared_weak_count **)&buf.mASBD.mBitsPerChannel;
    if (*(_QWORD *)&buf.mASBD.mBitsPerChannel)
    {
      v40 = (unint64_t *)(*(_QWORD *)&buf.mASBD.mBitsPerChannel + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v39->__on_zero_shared)(v39, SampleTableBox);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v10 = v38;
    if ((v37 & 1) == 0)
      goto LABEL_53;
LABEL_62:
    v44 = 0;
    goto LABEL_63;
  }
LABEL_53:
  v42 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2902718;
  (*(void (**)(AudioFormatID *__return_ptr, __n128))(*(_QWORD *)v42 + 88))(&buf.mASBD.mFormatID, SampleTableBox);
  LOBYTE(buf.mASBD.mBytesPerPacket) = 0;
  buf.mASBD.mFramesPerPacket = 0;
  *(_QWORD *)&buf.mASBD.mBytesPerFrame = 0;
  LOBYTE(buf.mASBD.mBitsPerChannel) = 0;
  *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2909070;
  buf.mASBD.mReserved = 8;
  HIDWORD(v145) = 0;
  if (!MP4BoxParser_TimeToSample::Init((MP4BoxParser **)&buf))
  {
    if (HIDWORD(v145) == 1)
    {
      v71 = *(_DWORD *)(v8 + 348);
      if (v71)
      {
        v44 = (*(_DWORD *)(v8 + 100) * v71);
LABEL_189:
        v116 = *(_QWORD *)&buf.mASBD.mFormatID;
        *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2902718;
        *(_QWORD *)&buf.mASBD.mFormatID = 0;
        if (v116)
          (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
        goto LABEL_191;
      }
    }
    else if (!HIDWORD(v145))
    {
      v44 = 0;
LABEL_186:
      v115 = *(_DWORD *)(v8 + 96);
      if (v115 && vabdd_f64(*v10, (double)v115) >= 0.0000999999975)
        v44 = (unint64_t)(*v10 / (double)v115 * (double)(unint64_t)v44);
      goto LABEL_189;
    }
    size[0] = 0;
    v106 = *(_QWORD *)&buf.mASBD.mFormatID;
    v107 = (*(uint64_t (**)(AudioFormatInfo *))(*(_QWORD *)&buf.mASBD.mSampleRate + 24))(&buf);
    v170 = (__n128 **)&off_1E2915BA0;
    p_buf = (MP4BoxParser_MovieFragment *)&buf;
    v172 = size;
    v173 = &v170;
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128 ***))(*(_QWORD *)v106 + 80))(v106, v107 + 4, 8 * HIDWORD(v145), &v170);
    v108 = v173;
    if (v173 == &v170)
    {
      v109 = 4;
      v108 = &v170;
    }
    else
    {
      if (!v173)
      {
LABEL_185:
        v44 = size[0];
        goto LABEL_186;
      }
      v109 = 5;
    }
    ((void (*)(void))(*v108)[v109])();
    goto LABEL_185;
  }
  v43 = *(_QWORD *)&buf.mASBD.mFormatID;
  *(_QWORD *)&buf.mASBD.mSampleRate = &off_1E2902718;
  *(_QWORD *)&buf.mASBD.mFormatID = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = 0;
LABEL_191:
  if (MaximumPacketSize)
  {
    v117 = (unint64_t *)&MaximumPacketSize->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))MaximumPacketSize->__on_zero_shared)(MaximumPacketSize);
      std::__shared_weak_count::__release_weak(MaximumPacketSize);
    }
  }
LABEL_63:
  v47 = *(_DWORD *)(v8 + 348);
  if (v47)
  {
    v44 += (*(_DWORD *)(v8 + 444) * v47);
  }
  else
  {
    v48 = *(uint64_t **)(v8 + 464);
    if (v48)
    {
      CompressedPacketTable::operator[]((uint64_t)&buf, *(uint64_t **)(v8 + 464), (*(_DWORD *)(v8 + 444) - 1));
      v49 = *(_QWORD *)&buf.mASBD.mBytesPerPacket;
      CompressedPacketTable::operator[]((uint64_t)&buf, v48, (*(_DWORD *)(v8 + 444) - 1));
      v44 += v49 + buf.mASBD.mFormatID;
    }
  }
  if (v44)
    v50 = (double)v44 / *v10;
  else
    v50 = 0.0;
  *((double *)v135 + 56) = v50;
  if (MP4BoxParser_Track::GetPacketTableInfo((MP4BoxParser_Track *)v8, v33, *((_QWORD *)v135 + 25), *((_DWORD *)v135 + 114), 0))
  {
    v51 = (double)*((uint64_t *)v135 + 58);
LABEL_180:
    *((double *)v135 + 56) = v51 / *(double *)&v137;
    goto LABEL_181;
  }
  v52 = *((_DWORD *)v135 + 21);
  if (v52 == 1832149606 || v52 == 1832149350)
  {
    v53 = *((_QWORD *)v135 + 60);
    if (v53 != -1)
    {
      v51 = (double)v53;
      goto LABEL_180;
    }
  }
  if (v31 == 1633889587)
  {
    v54 = 0;
    v55 = *((_QWORD *)v135 + 25) * DWORD1(v138);
LABEL_175:
    v113 = v55 - v54;
    if (v55 < v54)
      v113 = 0;
    if (v55 <= v54)
      v54 = v55;
    *((_QWORD *)v135 + 58) = v113;
    *((_DWORD *)v135 + 118) = v54;
    *((_DWORD *)v135 + 119) = 0;
    v51 = (double)v113;
    goto LABEL_180;
  }
  if (v31 >> 8 == 6381923)
  {
    v55 = *((_QWORD *)v135 + 25) * DWORD1(v138);
    LODWORD(size[0]) = 0;
    if (*((_DWORD *)v135 + 35))
    {
      v164[2] = 0;
      v165 = 0;
      v166 = 0;
      v167[2] = 0;
      MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v167);
      v169 = 0u;
      v168 = 0u;
      DecoderConfigDescr::cleanup((DecoderConfigDescr *)v164);
      v56 = (__n128 **)*((_QWORD *)v135 + 18);
      v57 = *((unsigned int *)v135 + 35);
      v170 = v56;
      v58 = (__n128 **)((char *)v56 + v57);
      p_buf = (MP4BoxParser_MovieFragment *)((char *)v56 + v57);
      v172 = 0;
      if ((v56 & 3) != 0 && (_DWORD)v57)
      {
        v59 = 0;
        v60 = (__n128 **)((char *)v56 + 1);
        v61 = -8;
        v62 = v60;
        do
        {
          HIDWORD(v172) = v61 + 16;
          v170 = v62;
          v59 = *((unsigned __int8 *)v62 - 1) | (v59 << 8);
          LODWORD(v172) = v59;
          v61 += 8;
          if ((v60 & 3) == 0)
            break;
          LOBYTE(v60) = (_BYTE)v60 + 1;
          v19 = v62 >= v58;
          v62 = (__n128 **)((char *)v62 + 1);
        }
        while (!v19);
        LODWORD(v172) = v59 << (24 - v61);
      }
      if (!MP4AudioESDS::Deserialize((uint64_t)&buf, (uint64_t)&v170, 0, 0)
        && DecoderConfigDescr::GetDefaultPriming((DecoderConfigDescr *)v164, (unsigned int *)size))
      {
        LODWORD(size[0]) = 0;
      }
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
      if (*((_QWORD *)&v169 + 1))
      {
        v64 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v66 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
      if (*((_QWORD *)&v168 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v54 = size[0];
    }
    else
    {
      v54 = 2112;
    }
    goto LABEL_175;
  }
  if (v31 == 1634492771)
  {
    LODWORD(size[0]) = 0;
    buf.mASBD.mSampleRate = 0.0;
    v136 = DWORD1(v138);
    v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (!MP4Parser_PacketProvider::GetPacketInfo((MP4Parser_PacketProvider *)v8, v98 - 1, (unsigned int *)size, (unint64_t *)&buf))
    {
      v99 = LODWORD(size[0]);
      CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v170, LODWORD(size[0]), 1);
      v100 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, __n128 **, size_t *))(**((_QWORD **)v135 + 13)
                                                                                             + 48))(*((_QWORD *)v135 + 13), 0, *(_QWORD *)&buf.mASBD.mSampleRate, v99, v170, size);
      v101 = v170;
      if (!v100)
      {
        FramesInALACPacket((uint64_t)v170, size[0], &v136);
        v102 = v136;
        if (v136)
        {
          v103 = DWORD1(v138);
          if (DWORD1(v138) > v136)
          {
            *((_DWORD *)v135 + 118) = 0;
            v104 = v103 - v102;
            *((_DWORD *)v135 + 119) = v104;
            v105 = *((_QWORD *)v135 + 25) * v103 - v104;
            *((_QWORD *)v135 + 58) = v105;
            *((double *)v135 + 56) = (double)v105 / *(double *)&v137;
          }
        }
      }
      if (v101)
        free(v101);
    }
  }
  else
  {
    *(_OWORD *)&buf.mASBD.mSampleRate = v137;
    *(_OWORD *)&buf.mASBD.mBytesPerPacket = v138;
    v110 = (const void *)*((_QWORD *)v135 + 18);
    *(_QWORD *)&buf.mASBD.mBitsPerChannel = v139;
    buf.mMagicCookie = v110;
    *(_QWORD *)&buf.mMagicCookieSize = 0;
    buf.mMagicCookieSize = *((_DWORD *)v135 + 35);
    LODWORD(v170) = 0;
    LODWORD(size[0]) = 4;
    if (!GetCodecPropertyFromFormatInfo(&buf, (unsigned int *)size, &v170, 0x64657066u))
    {
      v111 = DWORD1(v138) * (unint64_t)v29;
      v112 = v111 - v170;
      if (v111 < v170)
        v112 = 0;
      if (v111 > v170)
        LODWORD(v111) = (_DWORD)v170;
      *((_QWORD *)v135 + 58) = v112;
      *((_DWORD *)v135 + 118) = v111;
      *((_DWORD *)v135 + 119) = 0;
    }
  }
LABEL_181:
  MP4BoxParser_Track::UpdateOffsetTableToIndex((MP4BoxParser_Track *)v8, *((_DWORD *)v135 + 50));
  return v8;
}

void sub_18F0D7F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;

  if (a2)
  {
    if (STACK[0x6A0])
      free((void *)STACK[0x6A0]);
    __cxa_begin_catch(exception_object);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    __cxa_end_catch();
    JUMPOUT(0x18F0D7980);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FramesInALACPacket(uint64_t result, unsigned int a2, unsigned int *a3)
{
  unsigned int v3;

  *a3 = 0;
  if (a2 >= 7)
  {
    if ((*(_BYTE *)(result + 2) & 0x10) != 0)
      v3 = (*(unsigned __int8 *)(result + 6) >> 1) | (_byteswap_ulong(*(_DWORD *)(result + 2)) << 7);
    else
      v3 = 0;
    *a3 = v3;
  }
  return result;
}

uint64_t MP4AudioFile::GetAudioHash(MP4AudioFile *this, unsigned int *a2, void *a3)
{
  uint64_t DataForMeaningName;
  __n128 *BoxInfo;
  uint64_t v8;
  unint64_t v9;
  unsigned int i;
  __n128 **v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  __n128 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  void (**v21)(MP4BoxParser *__hidden);
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  int v29;
  __n128 **v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  char v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  DataForMeaningName = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v20);
  if (!(_DWORD)DataForMeaningName)
  {
    BoxInfo = FindBoxInfo(*((_QWORD *)this + 13), 0, v20, 1836019574, 0, *((__n128 ***)this + 28));
    if (BoxInfo)
    {
      v8 = *((_QWORD *)this + 13);
      v9 = BoxInfo[1].n128_u64[0];
      v30 = (__n128 **)&off_1E2902718;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v8 + 88))(&v31, v8, v9);
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 8;
      v30 = (__n128 **)&off_1E29078B8;
      v37 = 1;
      v38 = 0;
      DataForMeaningName = 0;
      if (!MP4BoxParser_Movie::Init(&v30))
      {
        for (i = 0; ; ++i)
        {
          v12 = (__n128 **)v38;
          if (!v38 || (v13 = *(_QWORD *)(v38 + 8), v13 == v38))
          {
            v14 = 0;
          }
          else
          {
            v14 = 0;
            do
            {
              if (*(_DWORD *)(v13 + 16) == 1969517665)
                ++v14;
              v13 = *(_QWORD *)(v13 + 8);
            }
            while (v13 != v38);
          }
          if (i >= v14)
            break;
          v15 = v31;
          v16 = ((uint64_t (*)(__n128 ***))v30[3])(&v30);
          v17 = FindBoxInfo(v15, v16, v34, 1969517665, i, v12);
          if (v17)
          {
            v18 = v17[1].n128_u64[0] + 8;
            v21 = &off_1E2902718;
            (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v31 + 88))(&v22, v31, v18);
            v23 = 0;
            v24 = 0;
            v25 = 0;
            v26 = 0;
            v27 = 8;
            v28 = 0;
            v29 = 0;
            v21 = &off_1E2908BA0;
            if (!MP4BoxParser_iTunesMeta::Init((MP4BoxParser_iTunesMeta *)&v21))
            {
              if (a3)
                DataForMeaningName = MP4BoxParser_iTunesMeta::GetDataForMeaningName((MP4BoxParser_iTunesMeta *)&v21, "iTunHASH", a3, a2, v19);
              else
                *a2 = MP4BoxParser_iTunesMeta::GetDataSizeForMeaningName((MP4BoxParser_iTunesMeta *)&v21, "iTunHASH");
            }
            MP4BoxParser_Meta::~MP4BoxParser_Meta((MP4BoxParser_Meta *)&v21);
          }
        }
      }
      MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)&v30);
    }
    else
    {
      return 0;
    }
  }
  return DataForMeaningName;
}

void sub_18F0D83B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  MP4BoxParser_Movie::~MP4BoxParser_Movie((MP4BoxParser_Movie *)va);
  _Unwind_Resume(a1);
}

uint64_t MP4AudioFile::GetPurchaseDate(MP4AudioFile *this, const __CFDate **a2)
{
  const __CFString *v3;
  __CFCalendar *v4;
  __CFCalendar *v5;
  int v6;
  CFAbsoluteTime at;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  CFStringRef theString[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!this)
    return 1886681407;
  theString[0] = 0;
  MP4BoxParser_iTunesMeta::CopyMetaItemData(this, 1886745188, (const void **)theString);
  v3 = theString[0];
  if (!theString[0])
    return 1667787583;
  at = 0.0;
  *(_OWORD *)theString = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  if (!CFStringGetCString(v3, (char *)theString, 256, 0x8000100u))
    goto LABEL_9;
  sscanf((const char *)theString, "%d-%d-%d %d:%d:%d", &v9, &v10, &v11, &v12, &v13, &v14);
  v4 = CFCalendarCopyCurrent();
  if (v4)
  {
    v5 = v4;
    v6 = CFCalendarComposeAbsoluteTime(v4, &at, "yMdHms", v9, v10, v11, v12, v13, v14);
    CFRelease(v5);
    if (v6)
    {
      v4 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], at);
      goto LABEL_10;
    }
LABEL_9:
    v4 = 0;
  }
LABEL_10:
  *a2 = v4;
  CFRelease(v3);
  return 0;
}

unint64_t MP4AudioFile::CalculateDataOffset(MP4AudioFile *this, double a2, BOOL *a3)
{
  unint64_t v3;
  double v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  int v12;
  int MetaDataSize;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;

  v3 = *((unsigned int *)this + 11);
  if (!(_DWORD)v3)
    return 4096;
  v5 = *((double *)this + 3);
  v6 = *((_DWORD *)this + 8);
  v7 = (unint64_t)((a2 + 1.0) * v5) / v3;
  v8 = *((_QWORD *)this + 25);
  v9 = 4;
  if (v8)
  {
    v8 = *(_QWORD *)(**((_QWORD **)this + 50) + 8 * v8 - 8);
    v10 = v8 <= 0xFFFFFFFFLL;
    LOBYTE(v8) = v8 > 0xFFFFFFFFLL;
    if (v10)
      v9 = 4;
    else
      v9 = 8;
  }
  v11 = *((_DWORD *)this + 10);
  *a3 = v8;
  LODWORD(v3) = (v5 / (double)v3) >> 1;
  if (v6 == 1819304813)
    v3 = v3;
  else
    v3 = (v3 + 1);
  v12 = v9 * (v7 / v3);
  MetaDataSize = MP4AudioFile::GetMetaDataSize(this, 0, 0, 0, 0, 0, 0);
  v14 = *((_QWORD *)this + 31);
  v15 = *(unsigned int *)(v14 + 8);
  v16 = *(unsigned int *)(v14 + 116);
  if (v6 == 1634754915 || v6 == 1902211171 || v6 == 1885433955)
    v17 = 5096;
  else
    v17 = 1000;
  v19 = (v12 + MetaDataSize + v17);
  v20 = v7 * v9 + 4103;
  if (v11)
    v20 = 4103;
  return (v20 + v15 + v16 + v19) & 0xFFFFFFFFFFFFF000;
}

uint64_t MP4AudioFile::AddPacketDependencyInfo(_QWORD *a1, unsigned int a2, int *a3)
{
  int v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 272))(a1);
  v7 = *a3;
  if (v6)
  {
    if (!v7)
    {
      v8 = a3[1];
      if (v8)
      {
        if (v8 >> 15)
          return 1684369471;
        v12 = a1[25] + a2;
        v13 = xmmword_18F117420;
        WORD4(v13) = v8;
        v11 = (uint64_t)(a1 + 39);
        goto LABEL_12;
      }
      v12 = a1[25] + a2;
      SyncSampleTable::append_entry((uint64_t)(a1 + 46), &v12);
    }
    return 0;
  }
  result = 1684369471;
  if (!v7)
  {
    v10 = a3[1];
    if (!(v10 >> 15))
    {
      if (v10)
      {
        v12 = a1[25] + a2;
        v13 = xmmword_18F117420;
        WORD4(v13) = v10;
        v11 = (uint64_t)(a1 + 32);
LABEL_12:
        SampleToRollDistanceTable::append_entry(v11, (__int128 *)&v12);
      }
      return 0;
    }
  }
  return result;
}

uint64_t MP4AudioFile::GetMetaDataSize(MP4AudioFile *this, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7)
{
  unsigned int v14;
  int v15;
  unsigned int v16;
  const __CFData *v17;
  const UInt8 *BytePtr;
  int Length;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;

  if (*((_QWORD *)this + 60) == -1)
    v14 = 0;
  else
    v14 = 188;
  if (*((_QWORD *)this + 64))
    v15 = 45 * *((_DWORD *)this + 13) + 72;
  else
    v15 = 0;
  v16 = MP4AudioFile::AddITunesMetaData(this, 0, 0);
  v17 = (const __CFData *)*((_QWORD *)this + 68);
  if (v17
    && ((BytePtr = CFDataGetBytePtr(v17), *(_DWORD *)BytePtr == 1196314761) || *(_DWORD *)(BytePtr + 6) == 1179207242))
  {
    Length = CFDataGetLength(*((CFDataRef *)this + 68));
    v20 = Length + 24;
    if (!Length)
      v20 = 0;
  }
  else
  {
    v20 = 0;
  }
  v21 = *((_DWORD *)this + 139);
  if (v21)
    v22 = v21 + 72;
  else
    v22 = 0;
  if (*((_DWORD *)this + 142))
    v23 = 76;
  else
    v23 = 0;
  if (a2)
    *a2 = v14;
  if (a3)
    *a3 = v15;
  if (a4)
    *a4 = v16;
  if (a5)
    *a5 = v20;
  if (a6)
    *a6 = v22;
  if (a7)
    *a7 = v23;
  v25 = v16 + v14 + v20 + v22 + v15 + v23;
  v24 = v25 == 0;
  v26 = v25 + 62;
  if (v24)
    return 0;
  else
    return v26;
}

uint64_t MP4AudioFile::AddITunesMetaData(MP4AudioFile *this, unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v6;
  unsigned __int8 *v7;
  const __CFDictionary *v8;
  int v10;

  v3 = a3;
  v10 = 0;
  if (*((_BYTE *)this + 572) && (!a2 || a3 >= 0x10))
  {
    if (a2)
    {
      a2[24] = *((_BYTE *)this + 572);
      *(_OWORD *)a2 = xmmword_18F1174C0;
      *((_QWORD *)a2 + 2) = 352321536;
      v6 = 25;
      v10 = 25;
      v3 = a3 - 25;
      if (a3 == 25)
        return 0;
      v7 = a2 + 25;
    }
    else
    {
      v7 = 0;
      v6 = 25;
      v10 = 25;
    }
  }
  else
  {
    v6 = 0;
    v7 = a2;
  }
  v8 = (const __CFDictionary *)*((_QWORD *)this + 67);
  if (!v8)
    return v6;
  if (!InitiiTunesMetaItemFromInfoDictionary(v7, v3, v8, -1455336876, &v10))
  {
    v6 = (v10 + v6);
    if (a2)
    {
      v3 -= v10;
      if (!v3)
        return 0;
      v7 += v10;
    }
  }
  if (!InitiiTunesMetaItemFromInfoDictionary(v7, v3, *((const __CFDictionary **)this + 67), -1453233054, &v10))
  {
    v6 = (v10 + v6);
    if (a2)
    {
      v3 -= v10;
      if (!v3)
        return 0;
      v7 += v10;
    }
  }
  if (!InitiiTunesMetaItemFromInfoDictionary(v7, v3, *((const __CFDictionary **)this + 67), -1453039239, &v10))
  {
    v6 = (v10 + v6);
    if (a2)
    {
      v3 -= v10;
      if (!v3)
        return 0;
      v7 += v10;
    }
  }
  if (!InitiiTunesMetaItemFromInfoDictionary(v7, v3, *((const __CFDictionary **)this + 67), -1451789708, &v10))
  {
    v6 = (v10 + v6);
    if (a2)
    {
      v3 -= v10;
      if (!v3)
        return 0;
      v7 += v10;
    }
  }
  if (!InitiiTunesMetaItemFromInfoDictionary(v7, v3, *((const __CFDictionary **)this + 67), -1452841618, &v10))
  {
    v6 = (v10 + v6);
    if (a2)
    {
      v3 -= v10;
      if (!v3)
        return 0;
      v7 += v10;
    }
  }
  if (!InitiiTunesMetaItemFromInfoDictionary(v7, v3, *((const __CFDictionary **)this + 67), -1452383891, &v10))
  {
    v6 = (v10 + v6);
    if (a2)
    {
      v3 -= v10;
      if (!v3)
        return 0;
      v7 += v10;
    }
  }
  if (!InitiiTunesMetaItemFromInfoDictionary(v7, v3, *((const __CFDictionary **)this + 67), -1452051405, &v10))
  {
    v6 = (v10 + v6);
    if (a2)
    {
      v3 -= v10;
      if (!v3)
        return 0;
      v7 += v10;
    }
  }
  if (!InitiiTunesMetaItemFromInfoDictionary(v7, v3, *((const __CFDictionary **)this + 67), 1769173603, &v10))
  {
    v6 = (v10 + v6);
    if (a2)
    {
      v3 -= v10;
      if (!v3)
        return 0;
      v7 += v10;
    }
  }
  if (!InitiiTunesMetaItemFromInfoDictionary(v7, v3, *((const __CFDictionary **)this + 67), -1453101708, &v10))
  {
    v6 = (v10 + v6);
    if (a2)
    {
      v3 -= v10;
      if (!v3)
        return 0;
      v7 += v10;
    }
  }
  if (!InitiiTunesMetaItemFromInfoDictionary(v7, v3, *((const __CFDictionary **)this + 67), -1451987089, &v10))
  {
    v6 = (v10 + v6);
    if (a2)
    {
      v3 -= v10;
      if (!v3)
        return 0;
      v7 += v10;
    }
  }
  if (!InitiiTunesMetaItemFromInfoDictionary(v7, v3, *((const __CFDictionary **)this + 67), -1453230732, &v10))
  {
    v6 = (v10 + v6);
    if (a2)
    {
      v3 -= v10;
      if (!v3)
        return 0;
      v7 += v10;
    }
  }
  if (!InitiiTunesMetaItemFromInfoDictionary(v7, v3, *((const __CFDictionary **)this + 67), 1953329263, &v10))
  {
    v6 = (v10 + v6);
    if (a2)
    {
      v3 -= v10;
      if (!v3)
        return 0;
      v7 += v10;
    }
  }
  if (!InitiiTunesMetaItemFromInfoDictionary(v7, v3, *((const __CFDictionary **)this + 67), 1668313716, &v10))
  {
    v6 = (v10 + v6);
    if (a2)
    {
      v3 -= v10;
      if (v3)
      {
        v7 += v10;
        goto LABEL_22;
      }
      return 0;
    }
  }
LABEL_22:
  if (!InitiiTunesMetaItemFromInfoDictionary(v7, v3, *((const __CFDictionary **)this + 67), 1953655662, &v10))return (v10 + v6);
  return v6;
}

uint64_t MP4AudioFile::GetSampleDescriptionSize(MP4AudioFile *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  int v8;
  UInt32 v9;
  int v11;
  int v12;
  const __CFDictionary *v13;
  CFIndex Count;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t i;
  CFTypeID v22;
  uint64_t v23;
  CFIndex j;
  const __CFData *ValueAtIndex;
  int v26;
  _BYTE v28[12];
  UInt32 outPropertyDataSize;
  _DWORD inSpecifier[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 8);
  if (v3 <= 1718378850)
  {
    if (v3 == 1633889587)
      goto LABEL_16;
    if (v3 != 1634492771)
    {
      if (v3 != 1700998451)
        goto LABEL_24;
LABEL_16:
      v9 = *((_DWORD *)this + 35);
      goto LABEL_17;
    }
    v11 = *((_DWORD *)this + 35);
    if (*(_DWORD *)(*((_QWORD *)this + 18) + 4) == 1634562662)
    {
      if (v11 != 80)
      {
LABEL_28:
        v8 = 72;
        goto LABEL_31;
      }
    }
    else if (v11 != 48)
    {
      goto LABEL_28;
    }
    v8 = 96;
    goto LABEL_31;
  }
  if (v3 > 1935764849)
  {
    if (v3 == 1935764850 || v3 == 1935767394)
    {
      v8 = 53;
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (v3 == 1718378851)
    goto LABEL_16;
  if (v3 != 1819304813)
  {
LABEL_24:
    outPropertyDataSize = 0;
    inSpecifier[0] = v3;
    inSpecifier[1] = *((_DWORD *)this + 21);
    v31 = *((_QWORD *)this + 18);
    v32 = 0;
    LODWORD(v32) = *((_DWORD *)this + 35);
    if (AudioFormatGetPropertyInfo(0x65636D63u, 0x18u, inSpecifier, &outPropertyDataSize))
    {
      v8 = *((_DWORD *)this + 35) + 48;
      goto LABEL_31;
    }
    v9 = outPropertyDataSize;
LABEL_17:
    v8 = v9 + 36;
    goto LABEL_31;
  }
  v5 = *((_QWORD *)this + 22);
  v4 = *((_QWORD *)this + 23);
  v6 = *((_DWORD *)this + 13) == 2 && v4 == v5;
  v7 = v4 - v5 + 50;
  if (v6)
    v7 = 66;
  if (a2)
    v8 = v7 + 16;
  else
    v8 = v7;
LABEL_31:
  v12 = *((_DWORD *)this + 131);
  if (v12)
  {
    if (v12 < 0)
      v12 = -v12;
    v8 += snprintf((char *)inSpecifier, 8uLL, "%d", v12) + 13;
  }
  *((_DWORD *)this + 148) = 0;
  v13 = (const __CFDictionary *)*((_QWORD *)this + 73);
  if (v13)
  {
    Count = CFDictionaryGetCount(v13);
    v15 = Count;
    v16 = 8 * Count;
    MEMORY[0x1E0C80A78](Count);
    v17 = (v16 + 15) & 0xFFFFFFFF0;
    if (v16 >= 0x200)
      v18 = 512;
    else
      v18 = v16;
    bzero(&v28[-v17], v18);
    MEMORY[0x1E0C80A78](v19);
    v20 = &v28[-v17];
    bzero(&v28[-v17], v18);
    CFDictionaryGetKeysAndValues(*((CFDictionaryRef *)this + 73), (const void **)&v28[-v17], (const void **)&v28[-v17]);
    if (v15)
    {
      for (i = 0; i != v15; ++i)
      {
        v22 = CFGetTypeID(*(CFTypeRef *)&v20[8 * i]);
        if (v22 == CFArrayGetTypeID())
        {
          v23 = CFArrayGetCount(*(CFArrayRef *)&v20[8 * i]);
          if (v23)
          {
            for (j = 0; j != v23; ++j)
            {
              ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)&v20[8 * i], j);
              *((_DWORD *)this + 148) += CFDataGetLength(ValueAtIndex) + 8;
            }
          }
        }
        else if (v22 == CFDataGetTypeID())
        {
          *((_DWORD *)this + 148) += CFDataGetLength(*(CFDataRef *)&v20[8 * i]) + 8;
        }
      }
    }
    v26 = *((_DWORD *)this + 148);
  }
  else
  {
    v26 = 0;
  }
  return (v26 + v8);
}

uint64_t MP4AudioFile::GetSampleDescription(MP4AudioFile *this, char *a2, unsigned int a3, int a4)
{
  __int128 v7;
  unsigned int v8;
  __int128 *v10;
  unsigned int v11;
  uint64_t v12;
  __int16 v13;
  char *v14;
  unsigned int *v15;
  size_t v16;
  uint64_t result;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 *v26;
  int v27;
  int v28;
  int v29;
  CFStringRef CFStringFromBitDepth;
  const __CFString *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  OSStatus Property;
  __int16 v42;
  unsigned int v43;
  __int16 v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unsigned int v51;
  MP4AudioFile *v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  const __CFDictionary *v56;
  CFIndex Count;
  uint64_t v58;
  MP4AudioFile *v59;
  unint64_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  char *v64;
  const __CFDictionary *v65;
  uint64_t v66;
  unsigned int v67;
  CFTypeID v68;
  uint64_t v69;
  CFIndex i;
  const __CFData *ValueAtIndex;
  unsigned int Length;
  char *v73;
  const UInt8 *BytePtr;
  unsigned int v75;
  char *v76;
  const UInt8 *v77;
  void *v78;
  int v79;
  size_t v80;
  uint64_t v81;
  const __CFString *v82;
  unsigned int v83;
  MP4AudioFile *v84;
  char *v85;
  uint64_t v86;
  UInt32 v87;
  UInt32 v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  _DWORD v93[2];
  uint64_t v94;
  uint64_t v95;
  UInt32 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  unsigned int v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  char buffer[32];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v7 = *(_OWORD *)((char *)this + 40);
  v97 = *(_OWORD *)((char *)this + 24);
  v98 = v7;
  v99 = *((_QWORD *)this + 7);
  v8 = DWORD2(v97);
  if (DWORD2(v97) == 1634492771)
  {
    if (MP4AudioFile::GetSampleDescriptionSize(this, a4) != a3)
      return 0xFFFFFFFFLL;
    v100 = bswap32(MP4AudioFile::GetSampleDescriptionSize(this, a4));
    v101 = xmmword_18F1174D0;
    v102 = 0x1000020000000000;
    v103 = 0x44AC00000000;
    v104 = 0x63616C6124000000;
    v105 = 0;
    v10 = (__int128 *)*((_QWORD *)this + 18);
    v11 = *((_DWORD *)this + 35);
    if (*((_DWORD *)v10 + 1) == 1634562662)
    {
      if (v11 >= 0x30)
      {
        v106 = *(__int128 *)((char *)v10 + 24);
        v107 = *((_QWORD *)v10 + 5);
        if (v11 == 80)
        {
          v12 = 48;
LABEL_25:
          v26 = (__int128 *)((char *)v10 + v12);
          v108 = *v26;
          v109 = *((_QWORD *)v26 + 2);
          goto LABEL_26;
        }
        goto LABEL_26;
      }
    }
    else if (v11 >= 0x18)
    {
      v106 = *v10;
      v107 = *((_QWORD *)v10 + 2);
      if (v11 == 48)
      {
        v12 = 24;
        goto LABEL_25;
      }
LABEL_26:
      v16 = a3;
      v15 = &v100;
      v14 = a2;
      goto LABEL_27;
    }
    return 2003334207;
  }
  if ((DWORD2(v97) & 0xFBFFFFFF) == 0x61632D33)
  {
    v13 = __rev16((int)*(double *)&v97);
    *(_DWORD *)a2 = bswap32(*((_DWORD *)this + 35) + 36);
    *((_DWORD *)a2 + 1) = bswap32(v8);
    *((_QWORD *)a2 + 1) = 0x100000000000000;
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 268435968;
    *((_WORD *)a2 + 16) = v13;
LABEL_9:
    *((_WORD *)a2 + 17) = 0;
    v14 = a2 + 36;
    v15 = (unsigned int *)*((_QWORD *)this + 18);
    v16 = *((unsigned int *)this + 35);
LABEL_27:
    memcpy(v14, v15, v16);
    return 0;
  }
  switch(DWORD2(v97))
  {
    case 0x73617762:
      result = 0;
      *(_QWORD *)a2 = 0x6277617335000000;
      *((_QWORD *)a2 + 3) = 268435968;
      v23 = 32830;
LABEL_22:
      *((_DWORD *)a2 + 8) = v23;
      *((_QWORD *)a2 + 1) = 0x100000000000000;
      *((_QWORD *)a2 + 2) = 0;
      v24 = *((_QWORD *)this + 18);
      v25 = *(_OWORD *)(v24 + 22);
      a2[52] = *(_BYTE *)(v24 + 38);
      *(_OWORD *)(a2 + 36) = v25;
      return result;
    case 0x73616D72:
      result = 0;
      *(_QWORD *)a2 = 0x726D617335000000;
      *((_QWORD *)a2 + 3) = 268435968;
      v23 = 16415;
      goto LABEL_22;
    case 0x666C6163:
      v18 = bswap32(*((_DWORD *)this + 35) + 36);
      v19 = bswap32(WORD6(v98)) >> 16;
      v20 = bswap32((unsigned __int16)v99) >> 16;
      if (*(double *)&v97 <= 65535.0)
      {
        v22 = (int)*(double *)&v97;
      }
      else
      {
        HIDWORD(v21) = -1214044089 * *(double *)&v97;
        LODWORD(v21) = HIDWORD(v21);
        if ((v21 >> 7) >= 0x15D87)
          v22 = -1;
        else
          v22 = -17536;
      }
      *(_DWORD *)a2 = v18;
      *(_QWORD *)(a2 + 4) = 1130450022;
      *((_DWORD *)a2 + 3) = 0x1000000;
      *((_QWORD *)a2 + 2) = 0;
      *((_WORD *)a2 + 12) = v19;
      *((_WORD *)a2 + 13) = v20;
      *((_DWORD *)a2 + 7) = 0;
      *((_WORD *)a2 + 16) = bswap32(v22) >> 16;
      goto LABEL_9;
  }
  v27 = *((_DWORD *)this + 148);
  v96 = 0;
  v28 = *((_DWORD *)this + 21);
  v93[0] = DWORD2(v97);
  v93[1] = v28;
  v94 = *((_QWORD *)this + 18);
  v95 = 0;
  LODWORD(v95) = *((_DWORD *)this + 35);
  v91 = *((_QWORD *)&v97 + 1);
  v92 = v28;
  v90 = 0;
  v89 = 0;
  v88 = 12;
  v84 = this;
  v29 = *((_DWORD *)this + 131);
  if (v29 && (CFStringFromBitDepth = CreateCFStringFromBitDepth(v29)) != 0)
  {
    v31 = CFStringFromBitDepth;
    v32 = *((_DWORD *)v84 + 131);
    if (v32)
    {
      if (v32 < 0)
        v32 = -v32;
      v32 = snprintf((char *)&v100, 8uLL, "%d", v32) + 1;
    }
    v82 = v31;
    if (CFStringGetCString(v31, buffer, (v32 + 1), 0x8000100u) == 1)
    {
      v33 = *((_DWORD *)v84 + 131);
      if (v33)
      {
        if (v33 < 0)
          v33 = -v33;
        v33 = snprintf((char *)&v100, 8uLL, "%d", v33) + 1;
      }
      v83 = v33 + 12;
    }
    else
    {
      v83 = 0;
    }
  }
  else
  {
    v83 = 0;
    v82 = 0;
  }
  v34 = v27 + 36;
  if (AudioFormatGetPropertyInfo(0x65636D63u, 0x18u, v93, &v96))
  {
    if (v8 == 1819304813)
    {
      v36 = *((_QWORD *)v84 + 22);
      v35 = *((_QWORD *)v84 + 23);
      v37 = HIDWORD(v98) == 2 && v35 == v36;
      v38 = v35 - v36 + 14;
      if (v37)
        v38 = 30;
      v39 = v38 + v34;
      if (a4)
        v40 = v39 + 16;
      else
        v40 = v39;
    }
    else
    {
      v40 = v27 + v83 + *((_DWORD *)v84 + 35) + 48;
    }
  }
  else
  {
    v40 = v96 + v34;
  }
  Property = AudioFormatGetProperty(0x636E6964u, 0xCu, &v91, &v88, &v89);
  v42 = 0;
  v43 = 1630826605;
  if (Property || v88 != 12)
    goto LABEL_67;
  v43 = bswap32(v90);
  if (v8 != 1819304813)
  {
    v42 = 0;
LABEL_67:
    v44 = 512;
    goto LABEL_68;
  }
  if (a4)
    v42 = 256;
  else
    v42 = 0;
  if (!WORD6(v98))
    goto LABEL_67;
  v44 = __rev16(WORD6(v98));
LABEL_68:
  v45 = bswap32(v40);
  v46 = *(double *)&v97;
  do
  {
    v47 = v46;
    v46 >>= 1;
  }
  while (HIWORD(v47));
  *(_DWORD *)a2 = v45;
  *((_DWORD *)a2 + 1) = v43;
  *((_QWORD *)a2 + 1) = 0x100000000000000;
  *((_WORD *)a2 + 8) = v42;
  *(_DWORD *)(a2 + 18) = 0;
  *((_WORD *)a2 + 11) = 0;
  *((_WORD *)a2 + 12) = v44;
  *((_WORD *)a2 + 13) = 4096;
  *((_DWORD *)a2 + 7) = 0;
  *((_WORD *)a2 + 16) = bswap32(v47) >> 16;
  v48 = a2 + 36;
  *((_WORD *)a2 + 17) = 0;
  if (!AudioFormatGetProperty(0x65636D63u, 0x18u, v93, &v96, a2 + 36))
  {
    v50 = &v48[v96];
    v52 = v84;
    goto LABEL_80;
  }
  if (v8 != 1819304813)
  {
    v52 = v84;
    *((_DWORD *)a2 + 9) = bswap32(*((_DWORD *)v84 + 35) + 12);
    *((_QWORD *)a2 + 5) = 1935962981;
    v50 = a2 + 48;
    memcpy(v50, *((const void **)v52 + 18), *((unsigned int *)v52 + 35));
    v55 = *((unsigned int *)v52 + 35);
    goto LABEL_79;
  }
  v87 = 14;
  result = AudioFormatGetProperty(0x73647063u, 0x28u, &v97, &v87, &v100);
  if (!(_DWORD)result)
  {
    v49 = v87;
    memcpy(v48, &v100, v87);
    v50 = &v48[v49];
    if (a4)
    {
      v51 = bswap32(*(double *)&v97);
      *(_QWORD *)v50 = 0x7461727310000000;
      *((_DWORD *)v50 + 2) = 0;
      *((_DWORD *)v50 + 3) = v51;
      v50 += 16;
    }
    v52 = v84;
    v53 = (_BYTE *)*((_QWORD *)v84 + 22);
    v54 = (_BYTE *)*((_QWORD *)v84 + 23);
    if (v54 != v53)
    {
      memcpy(v50, v53, v54 - v53);
      v55 = *((_QWORD *)v84 + 23) - *((_QWORD *)v84 + 22);
LABEL_79:
      v50 += v55;
      goto LABEL_80;
    }
    if (*((_QWORD *)v84 + 20) == *((_QWORD *)v84 + 19) && HIDWORD(v98) == 2)
    {
      *(_OWORD *)v50 = sStereoISOLayout;
      v50 += 16;
    }
    else if (HIDWORD(v98) > 1)
    {
      return 2003334207;
    }
LABEL_80:
    v56 = (const __CFDictionary *)*((_QWORD *)v52 + 73);
    if (v56)
    {
      Count = CFDictionaryGetCount(v56);
      v81 = (uint64_t)&v81;
      v58 = Count;
      v59 = v52;
      v60 = 8 * Count;
      MEMORY[0x1E0C80A78](Count);
      v61 = (v60 + 15) & 0xFFFFFFFF0;
      if (v60 >= 0x200)
        v62 = 512;
      else
        v62 = v60;
      bzero((char *)&v81 - v61, v62);
      MEMORY[0x1E0C80A78](v63);
      v64 = (char *)&v81 - v61;
      bzero((char *)&v81 - v61, v62);
      v65 = (const __CFDictionary *)*((_QWORD *)v59 + 73);
      v85 = (char *)&v81 - v61;
      CFDictionaryGetKeysAndValues(v65, (const void **)((char *)&v81 - v61), (const void **)((char *)&v81 - v61));
      v86 = v58;
      if (v58)
      {
        v66 = 0;
        do
        {
          CFStringGetCString(*(CFStringRef *)&v85[8 * v66], (char *)&v100, 256, 0x8000100u);
          v67 = v100;
          v68 = CFGetTypeID(*(CFTypeRef *)&v64[8 * v66]);
          if (v68 == CFArrayGetTypeID())
          {
            v69 = CFArrayGetCount(*(CFArrayRef *)&v64[8 * v66]);
            if (v69)
            {
              for (i = 0; i != v69; ++i)
              {
                ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)&v64[8 * v66], i);
                Length = CFDataGetLength(ValueAtIndex);
                *(_DWORD *)v50 = bswap32(Length + 8);
                *((_DWORD *)v50 + 1) = v67;
                v73 = v50 + 8;
                BytePtr = CFDataGetBytePtr(ValueAtIndex);
                memcpy(v73, BytePtr, Length);
                v50 = &v73[Length];
              }
            }
          }
          else if (v68 == CFDataGetTypeID())
          {
            v75 = CFDataGetLength(*(CFDataRef *)&v64[8 * v66]);
            *(_DWORD *)v50 = bswap32(v75 + 8);
            *((_DWORD *)v50 + 1) = v67;
            v76 = v50 + 8;
            v77 = CFDataGetBytePtr(*(CFDataRef *)&v64[8 * v66]);
            memcpy(v76, v77, v75);
            v50 = &v76[v75];
          }
          ++v66;
        }
        while (v66 != v86);
      }
      v52 = v84;
    }
    if (*((_DWORD *)v52 + 131) && v83)
    {
      *(_DWORD *)v50 = bswap32(v83);
      *(_QWORD *)(v50 + 4) = 1685348979;
      v78 = v50 + 12;
      v79 = *((_DWORD *)v52 + 131);
      if (v79)
      {
        if (v79 < 0)
          v79 = -v79;
        v80 = (snprintf((char *)&v100, 8uLL, "%d", v79) + 1);
      }
      else
      {
        v80 = 0;
      }
      memcpy(v78, buffer, v80);
    }
    if (v82)
      CFRelease(v82);
    return 0;
  }
  return result;
}

_QWORD *std::vector<SyncSampleEntry>::__init_with_size[abi:ne180100]<SyncSampleEntry*,SyncSampleEntry*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18F0D9948(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *CreateSampleToPrerollGroup(char *result, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  unsigned __int16 *v11;
  _WORD *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;

  if (*(_BYTE *)a2)
  {
    v7 = (unint64_t)result;
    v8 = *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8);
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    v10 = (char *)malloc_type_calloc(1uLL, (v8 & 0x1FFFFFFFELL) + 24, 0x1BB7D15BuLL);
    result = (char *)malloc_type_calloc(1uLL, 16 * (v9 & 0x7FFFFFFF) + 28, 0xBFAB9308uLL);
    *(_DWORD *)v10 = bswap32((v8 & 0xFFFFFFFE) + 24);
    *((_DWORD *)v10 + 1) = 1685088115;
    *((_DWORD *)v10 + 2) = 1;
    *(_QWORD *)(v10 + 12) = 0x20000006C6F7270;
    *((_DWORD *)v10 + 5) = bswap32(v8 >> 1);
    if ((v8 >> 1))
    {
      v11 = *(unsigned __int16 **)(a2 + 8);
      v12 = v10 + 24;
      v13 = (v8 >> 1);
      do
      {
        v14 = *v11++;
        *v12++ = bswap32(v14) >> 16;
        --v13;
      }
      while (v13);
    }
    *(_QWORD *)(result + 4) = 1885823603;
    *((_DWORD *)result + 3) = 1819243120;
    if ((_DWORD)v9)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = *(_QWORD *)(a2 + 32);
      v19 = *(_QWORD *)(a2 + 8);
      do
      {
        v20 = *(_QWORD *)(v18 + 24 * v15);
        if (v20 > v17)
          *(_QWORD *)&result[8 * v16++ + 20] = bswap32(v20 - v17);
        v21 = *(_QWORD *)(v18 + 24 * v15 + 8);
        *(_DWORD *)&result[8 * v16 + 20] = bswap32(v21);
        if ((v8 >> 1))
        {
          v22 = 0;
          while (*(unsigned __int16 *)(v19 + 2 * v22) != *(__int16 *)(v18 + 24 * v15 + 16))
          {
            if ((v8 >> 1) == ++v22)
              goto LABEL_13;
          }
          v23 = v22 + 1;
        }
        else
        {
LABEL_13:
          v23 = 0;
        }
        *(_DWORD *)&result[8 * v16++ + 24] = bswap32(v23);
        v17 = v21 + v20;
        ++v15;
      }
      while (v15 != v9);
    }
    else
    {
      v17 = 0;
      v16 = 0;
    }
    if (v17 < v7)
      *(_QWORD *)&result[8 * v16++ + 20] = bswap32(v7 - v17);
    *((_DWORD *)result + 4) = bswap32(v16);
    *(_DWORD *)result = bswap32(8 * v16 + 20);
    *a3 = v10;
    *a4 = result;
  }
  return result;
}

double CreateSampleToRollGroup(unsigned int a1, _QWORD *a2, _QWORD *a3)
{
  char *v6;
  _DWORD *v7;
  double result;

  v6 = (char *)malloc_type_calloc(1uLL, 0x1AuLL, 0x10000408DD1DBA6uLL);
  v7 = malloc_type_calloc(1uLL, 0x1CuLL, 0x100004027586B93uLL);
  *(_QWORD *)v6 = 0x647067731A000000;
  *((_DWORD *)v6 + 2) = 1;
  *(_QWORD *)(v6 + 12) = 0x20000006C6C6F72;
  *((_DWORD *)v6 + 5) = 0x1000000;
  *((_WORD *)v6 + 12) = -1;
  result = 2.90439731e233;
  *(_OWORD *)v7 = xmmword_18F1174E0;
  v7[4] = 0x1000000;
  v7[5] = bswap32(a1);
  v7[6] = 0x1000000;
  *a2 = v6;
  *a3 = v7;
  return result;
}

CACFData *std::unique_ptr<CACFData>::reset[abi:ne180100](CACFData **a1)
{
  CACFData *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    CACFData::~CACFData(result);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

uint64_t MP4AudioFile::WriteFileTypeBoxToFile(MP4AudioFile *this)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  _DWORD v15[2];
  int v16;
  int v17;
  uint64_t v18;

  v1 = 0;
  v18 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 21);
  if (v2 <= 1832149349)
  {
    if (v2 == 862416946)
    {
      v3 = 1630693171;
      v4 = 896558899;
      v5 = 879781683;
      v16 = 1630693171;
      goto LABEL_13;
    }
    if (v2 != 862417008)
      goto LABEL_15;
    v5 = 896558899;
    v1 = 24;
    v4 = 879781683;
    v6 = 5;
    v7 = 4;
    v8 = 2;
    v3 = 896558899;
LABEL_14:
    v15[v8] = v5;
    v15[v7] = v4;
    v15[v6] = v3;
    goto LABEL_15;
  }
  v3 = 1836020585;
  v4 = 842297453;
  switch(v2)
  {
    case 1836069990:
      v1 = 24;
      v6 = 5;
      v7 = 4;
      v8 = 2;
      v5 = 842297453;
      goto LABEL_14;
    case 1832149606:
      v5 = 541209677;
      goto LABEL_11;
    case 1832149350:
      v5 = 541144141;
LABEL_11:
      v16 = v5;
LABEL_13:
      v1 = 28;
      v6 = 6;
      v7 = 5;
      v8 = 4;
      goto LABEL_14;
  }
LABEL_15:
  v15[0] = v1 << 24;
  v15[1] = 1887007846;
  v17 = 0;
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, 0);
  if ((_DWORD)v9 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v12 = "MP4AudioFile.cpp";
    v13 = 1024;
    v14 = 3637;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Couldn't create a new audio file object", buf, 0x12u);
  }
  return v9;
}

_QWORD *MP4AudioFile::InitNewFile(MP4AudioFile *this)
{
  double v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;

  v2 = *((double *)this + 3);
  v3 = *((_DWORD *)this + 10);
  v4 = operator new();
  *((_QWORD *)this + 31) = v4;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 272) = 0u;
  *(_OWORD *)(v4 + 288) = 0u;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_OWORD *)(v4 + 416) = 0u;
  *(_OWORD *)(v4 + 432) = 0u;
  *(_OWORD *)(v4 + 448) = 0u;
  *(_WORD *)(v4 + 464) = 0;
  *(_QWORD *)(v4 + 370) = 0x1000000001;
  *(_DWORD *)(v4 + 378) = 1937011827;
  *(_QWORD *)(v4 + 398) = 0x7374736300000010;
  *(_QWORD *)(v4 + 422) = 0x7374737A00000014;
  *(_QWORD *)(v4 + 450) = 0x7374636F00000010;
  *(_QWORD *)(v4 + 466) = 0;
  *(_OWORD *)(v4 + 350) = xmmword_18F1174F0;
  *(_DWORD *)(v4 + 342) = 1970433056;
  *(_BYTE *)(v4 + 349) = 1;
  *(_QWORD *)(v4 + 334) = 0xC00000001;
  *(_OWORD *)(v4 + 314) = xmmword_18F117500;
  *(_OWORD *)(v4 + 290) = xmmword_18F117510;
  *(_QWORD *)(v4 + 256) = 0x68646C7200000022;
  *(_DWORD *)(v4 + 272) = 1936684398;
  *(_OWORD *)(v4 + 216) = xmmword_18F117520;
  *(_OWORD *)(v4 + 112) = xmmword_18F117530;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_DWORD *)(v4 + 128) = 1953196132;
  *(_BYTE *)(v4 + 135) = 7;
  *(_DWORD *)(v4 + 144) = 1;
  *(_DWORD *)(v4 + 152) = -1;
  *(_WORD *)(v4 + 168) = 256;
  *(_DWORD *)(v4 + 172) = 0x10000;
  *(_DWORD *)(v4 + 188) = 0x10000;
  *(_DWORD *)(v4 + 204) = 0x40000000;
  *(_DWORD *)(v4 + 36) = 0x10000;
  *(_WORD *)(v4 + 40) = 256;
  *(_DWORD *)(v4 + 52) = 0x10000;
  *(_DWORD *)(v4 + 68) = 0x10000;
  *(_DWORD *)(v4 + 84) = 0x40000000;
  *(_OWORD *)v4 = xmmword_18F117540;
  *(_OWORD *)(v4 + 16) = 0u;
  *((_DWORD *)this + 114) = v2;
  *(_DWORD *)(v4 + 28) = v2;
  v5 = (_QWORD *)operator new();
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  *(_QWORD *)(*((_QWORD *)this + 31) + 442) = v5;
  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(*((_QWORD *)this + 31) + 466) = v6;
  v7 = (_QWORD *)operator new();
  v7[1] = 0;
  v7[2] = 0;
  *v7 = 0;
  *(_QWORD *)(*((_QWORD *)this + 31) + 414) = v7;
  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  v9 = *((_QWORD *)this + 31) + 390;
  *(_QWORD *)v9 = result;
  if (v3)
    *(_DWORD *)(v9 + 44) = v3;
  return result;
}

uint64_t IsValidDataForMP4FileType(DataSource *a1, int a2)
{
  int v3;
  uint64_t v4;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int *v10;
  int v11;
  _BOOL4 v13;
  _BOOL4 v15;
  BOOL v16;
  char v17;
  char v18;
  void (**v19)(MP4BoxParser *__hidden);
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v19 = &off_1E2902718;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(&v20);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v19 = &off_1E2908630;
  v25 = 8;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  if (MP4BoxParser_FileType::Init((MP4BoxParser_FileType *)&v19))
    goto LABEL_2;
  if ((_DWORD)v26 == 1295270176)
  {
    v6 = 1;
  }
  else
  {
    v6 = v26 == 1295275552;
    if ((_DWORD)v26 == 1903435808)
      goto LABEL_2;
  }
  v7 = v26 == 1295270432;
  if (v27)
  {
    v3 = 0;
    v8 = 0;
    v9 = v27;
    v10 = (int *)v28;
    do
    {
      if (v28)
      {
        v11 = *v10;
        v13 = *v10 == 862416950 || (*v10 & 0xFFFFFFFE) == 862416948;
        v8 |= v13;
        v3 |= v11 == 862401121;
        v15 = v11 == 1295270176 || v11 == 1295275552;
        v6 |= v15;
      }
      else
      {
        v11 = 0;
      }
      v7 |= v11 == 1295270432;
      ++v10;
      --v9;
    }
    while (v9);
  }
  else
  {
    v8 = 0;
    v3 = 0;
  }
  if (a2 > 1832149349)
  {
    if (a2 == 1832149350)
    {
      v17 = ((_DWORD)v26 == 1295270176) | v6;
      v18 = (v8 | v3) ^ 1;
    }
    else
    {
      if (a2 != 1832149606)
      {
        if (a2 == 1836069990 && ((v8 | v3 | v6 | v7) & 1) == 0)
        {
          if (v27)
            v16 = 1;
          else
            v16 = (_DWORD)v26 == 1836069938;
          LOBYTE(v3) = v16;
          goto LABEL_3;
        }
LABEL_2:
        LOBYTE(v3) = 0;
        goto LABEL_3;
      }
      v17 = ((_DWORD)v26 == 1295270432) | v7;
      v18 = (v8 | v3) ^ 1;
    }
    LOBYTE(v3) = v18 & v17;
    goto LABEL_3;
  }
  if (a2 != 862416946)
  {
    if (a2 == 862417008)
      LOBYTE(v3) = v8 & (v3 ^ 1);
    else
      LOBYTE(v3) = 0;
  }
LABEL_3:
  v19 = &off_1E2908630;
  if (v28)
    free(v28);
  v4 = v20;
  v19 = &off_1E2902718;
  v20 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v3 & 1;
}

void sub_18F0DA374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (a19)
    free(a19);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void MP4_AudioFormat::~MP4_AudioFormat(MP4_AudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

BOOL MP4_AudioFormat::ExtensionIsThisFormat(MP4_AudioFormat *this, CFStringRef theString1)
{
  uint64_t v3;

  v3 = 1;
  if (CFStringCompare(theString1, CFSTR("mp4"), 1uLL))
    return CFStringCompare(theString1, CFSTR("mpg4"), 1uLL) == kCFCompareEqualTo;
  return v3;
}

uint64_t MP4_AudioFormat::FileDataIsThisFormat(MP4_AudioFormat *this, unsigned int a2, const void *a3)
{
  uint64_t v5;
  uint64_t valid;

  v5 = operator new();
  *(_BYTE *)(v5 + 8) = 0;
  *(_QWORD *)v5 = &off_1E2907000;
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  valid = IsValidDataForMP4FileType((DataSource *)v5, 1836069990);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return valid;
}

const __CFArray *MP4_AudioFormat::GetExtensions(MP4_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("mp4");
  values[1] = CFSTR("mpg4");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *MP4_AudioFormat::GetUTIs(MP4_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("public.mpeg-4");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *MP4_AudioFormat::GetMIMETypes(MP4_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("audio/mp4");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void MP4_AudioFormat::GetFileTypeName(MP4_AudioFormat *this, const __CFString **a2)
{
  __CFBundle *v3;
  const __CFString *v4;
  char v5;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_5:
    v4 = (const __CFString *)CFRetain(CFSTR("MPEG-4"));
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle)
    goto LABEL_5;
LABEL_3:
  v4 = CFBundleCopyLocalizedString(v3, CFSTR("MPEG-4 Audio"), CFSTR("MPEG-4 Audio"), CFSTR("FileTypeNames"));
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_18F0DA890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t MP4_AudioFormat::GetAvailableFormatIDs(MP4_AudioFormat *this, unsigned int *a2, void *a3)
{
  return GetAvailableFormatIDsForFileType(1836069990, a2, a3);
}

uint64_t MP4_AudioFormat::GetAvailableStreamDescriptions(MP4_AudioFormat *this, int a2, unsigned int *a3, void *a4)
{
  return GetAvailableStreamDescriptionsForFileType(1836069990, a2, a3, a4);
}

uint64_t MP4_AudioFormat::GetHFSCodes(MP4_AudioFormat *this, unsigned int *a2, void *__dst)
{
  size_t v3;
  int __src;

  __src = 1836082996;
  if (*a2 >= 4)
    v3 = 4;
  else
    v3 = *a2 & 0xFFFFFFFC;
  *a2 = v3;
  if (__dst)
    memcpy(__dst, &__src, v3);
  return 0;
}

MP4AudioFile *MP4_AudioFormat::New(MP4_AudioFormat *this)
{
  MP4AudioFile *v1;

  v1 = (MP4AudioFile *)operator new();
  MP4AudioFile::MP4AudioFile(v1, 1836069990);
  return v1;
}

void sub_18F0DA954(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F1C4096D1D24ELL);
  _Unwind_Resume(a1);
}

void MP4_AudioFormat::NewStream(MP4_AudioFormat *this)
{
  MP4AudioStream *v1;

  v1 = (MP4AudioStream *)operator new();
  MP4AudioStream::MP4AudioStream(v1, 1836069990);
}

uint64_t MP4_AudioFormat::DataSourceIsThisFormat(MP4_AudioFormat *this, DataSource *a2)
{
  return IsValidDataForMP4FileType(a2, 1836069990);
}

void MP4AudioFile::MP4AudioFile(MP4AudioFile *this, int a2)
{
  _QWORD *v3;

  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 20) = 1;
  *((_DWORD *)this + 21) = a2;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = -1;
  *((_WORD *)this + 50) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0x100000000;
  *((_DWORD *)this + 34) = 65792;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = &off_1E2902430;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 188) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 140) = 0u;
  *((_QWORD *)this + 27) = 0x4072C00000000000;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_QWORD *)this + 31) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_BYTE *)this + 256) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_BYTE *)this + 312) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_BYTE *)this + 368) = 0;
  *((_WORD *)this + 204) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = (char *)this + 432;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 114) = 600;
  *((_DWORD *)this + 126) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_BYTE *)this + 520) = 0;
  *((_DWORD *)this + 131) = 0;
  *((_BYTE *)this + 528) = 0;
  *((_BYTE *)this + 552) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_BYTE *)this + 572) = 0;
  *(_OWORD *)((char *)this + 556) = 0u;
  *((_DWORD *)this + 148) = 0;
  *((_OWORD *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((_QWORD *)this + 58) = -1;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = -1;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  v3 = (_QWORD *)operator new();
  *v3 = v3;
  v3[1] = v3;
  v3[2] = 0;
  *((_QWORD *)this + 28) = v3;
  *((_BYTE *)this + 139) = 1;
}

void sub_18F0DAB48(_Unwind_Exception *a1)
{
  AudioFileObject *v1;
  SampleToRollDistanceTable *v2;
  SampleToRollDistanceTable *v3;
  void **v4;
  _QWORD **v5;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v7 = *v4;
  if (*v4)
  {
    *((_QWORD *)v1 + 48) = v7;
    operator delete(v7);
  }
  SampleToRollDistanceTable::~SampleToRollDistanceTable(v3);
  SampleToRollDistanceTable::~SampleToRollDistanceTable(v2);
  v8 = (void *)*((_QWORD *)v1 + 22);
  if (v8)
  {
    *((_QWORD *)v1 + 23) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)v1 + 19);
  if (v9)
  {
    *((_QWORD *)v1 + 20) = v9;
    operator delete(v9);
  }
  v10 = *((_QWORD *)v1 + 18);
  *((_QWORD *)v1 + 18) = 0;
  if (v10)
    MEMORY[0x193FFE43C](v10, 0x1000C8077774924);
  AudioFileObject::~AudioFileObject(v1);
  _Unwind_Resume(a1);
}

void SampleToRollDistanceTable::~SampleToRollDistanceTable(SampleToRollDistanceTable *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

uint64_t GetAvailableStreamDescriptionsForFileType(int a1, int a2, unsigned int *a3, void *__dst)
{
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  char *v12;
  char *v13;
  unsigned int v14;
  uint64_t PropertyInfo;
  UInt32 v17;
  unint64_t v18;
  size_t v19;
  uint64_t v21;
  unsigned int v22;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  void *outPropertyData;
  UInt32 outPropertyDataSize;
  __int128 __src;
  __int128 v32;
  __int128 v33;
  _OWORD v34[27];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a2 == 1819304813)
  {
    if (a1 == 1836069990)
    {
      memset(v34, 0, 352);
      v32 = 0u;
      v33 = 0u;
      __src = 0u;
      v7 = v34;
      v8 = -24;
      do
      {
        *((_QWORD *)v7 - 5) = 0xC6C70636DLL;
        *((_DWORD *)v7 - 4) = v8 + 40;
        *((_DWORD *)v7 - 7) = 1;
        *(_QWORD *)v7 = 0xE6C70636DLL;
        *((_DWORD *)v7 + 6) = v8 + 40;
        *((_DWORD *)v7 + 3) = 1;
        v7 += 5;
        v8 += 8;
      }
      while (v8);
      v9 = 0;
      v10 = 32;
      v11 = 1;
      do
      {
        v12 = (char *)&__src + 40 * v9;
        *((_QWORD *)v12 + 1) = 0x96C70636DLL;
        *((_DWORD *)v12 + 8) = v10;
        *((_DWORD *)v12 + 5) = 1;
        v13 = (char *)&__src + 40 * (v9 | 1);
        *((_QWORD *)v13 + 1) = 0xB6C70636DLL;
        LOBYTE(v12) = v11;
        *((_DWORD *)v13 + 8) = v10;
        *((_DWORD *)v13 + 5) = 1;
        v10 += 32;
        v9 = 2;
        v11 = 0;
      }
      while ((v12 & 1) != 0);
      v14 = 10;
    }
    else
    {
      v14 = 0;
    }
LABEL_13:
    if (*a3 / 0x28 < v14)
      v14 = *a3 / 0x28;
    v19 = 40 * v14;
    *a3 = v19;
    if (__dst)
      memcpy(__dst, &__src, v19);
    return 0;
  }
  outPropertyDataSize = 0;
  PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if ((_DWORD)PropertyInfo)
    return PropertyInfo;
  v17 = outPropertyDataSize;
  v18 = (unint64_t)outPropertyDataSize >> 2;
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&outPropertyData, v18, 1);
  PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, outPropertyData);
  if (!(_DWORD)PropertyInfo)
  {
    if (v17 < 4)
    {
      v26 = 0;
LABEL_50:
      if (outPropertyData)
        free(outPropertyData);
      if (!v26)
      {
        *a3 = 0;
        return 1718449215;
      }
      *(_QWORD *)&v33 = 0;
      __src = 0u;
      v32 = 0u;
      DWORD2(__src) = a2;
      v14 = 1;
      goto LABEL_13;
    }
    v21 = 0;
    v22 = a2 & 0xFFFFFF00;
    v24 = a2 == 1885430115 || v22 == 1633772288;
    v28 = v24;
    if (v18 <= 1)
      v25 = 1;
    else
      v25 = v18;
    v26 = 1;
    while (1)
    {
      if (*((_DWORD *)outPropertyData + v21) == a2)
      {
        if (a1 <= 1832149349)
        {
          if ((a1 == 862416946 || a1 == 862417008)
            && (a2 == 1365470320 || a2 == 1935764850 || a2 == 1935767394 || v22 == 1633772288))
          {
            goto LABEL_50;
          }
        }
        else
        {
          switch(a1)
          {
            case 1832149350:
              v27 = IsSupportedM4AFormat(a2);
LABEL_44:
              if (v27)
                goto LABEL_50;
              break;
            case 1832149606:
              if (v28)
                goto LABEL_50;
              break;
            case 1836069990:
              v27 = IsSupportedMP4Format(a2);
              goto LABEL_44;
          }
        }
      }
      v26 = ++v21 < v18;
      if (v25 == v21)
        goto LABEL_50;
    }
  }
  if (outPropertyData)
    free(outPropertyData);
  return PropertyInfo;
}

void sub_18F0DAF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11)
    free(a11);
  _Unwind_Resume(exception_object);
}

uint64_t GetAvailableFormatIDsForFileType(int a1, unsigned int *a2, void *a3)
{
  uint64_t PropertyInfo;
  UInt32 v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  BOOL v15;
  unsigned int v16;
  size_t v18;
  void *v19;
  void *outPropertyData;
  void *__src;
  UInt32 outPropertyDataSize;

  outPropertyDataSize = 0;
  PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if ((_DWORD)PropertyInfo)
    return PropertyInfo;
  v7 = outPropertyDataSize;
  v8 = (unint64_t)outPropertyDataSize >> 2;
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&__src, v8, 1);
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&outPropertyData, v8, 1);
  PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, outPropertyData);
  if (!(_DWORD)PropertyInfo)
  {
    if (v7 < 4)
    {
      v9 = 0;
LABEL_36:
      if (outPropertyData)
      {
        free(outPropertyData);
        outPropertyData = 0;
      }
      if (4 * v9 >= *a2)
        v18 = *a2;
      else
        v18 = 4 * v9;
      *a2 = v18;
      if (a3)
      {
        v19 = __src;
        memcpy(a3, __src, v18);
        PropertyInfo = 0;
        if (!v19)
          return PropertyInfo;
        goto LABEL_46;
      }
      PropertyInfo = 0;
      goto LABEL_45;
    }
    v10 = 0;
    v9 = 0;
    if (v8 <= 1)
      v11 = 1;
    else
      v11 = v8;
    v12 = 4 * v11;
    while (1)
    {
      if (a1 <= 1832149349)
      {
        if (a1 != 862416946 && a1 != 862417008)
          goto LABEL_35;
        v13 = *(_DWORD *)((char *)outPropertyData + v10);
        v15 = v13 == 1365470320 || v13 == 1935764850 || v13 == 1935767394;
        v16 = v13 & 0xFFFFFF00;
      }
      else
      {
        if (a1 == 1832149350)
        {
          v13 = *(_DWORD *)((char *)outPropertyData + v10);
          if (!IsSupportedM4AFormat(v13))
            goto LABEL_35;
          goto LABEL_34;
        }
        if (a1 != 1832149606)
        {
          if (a1 != 1836069990 || !IsSupportedMP4Format(*(_DWORD *)((char *)outPropertyData + v10)))
            goto LABEL_35;
          v13 = *(_DWORD *)((char *)outPropertyData + v10);
          goto LABEL_34;
        }
        v13 = *(_DWORD *)((char *)outPropertyData + v10);
        v16 = v13 & 0xFFFFFF00;
        v15 = v13 == 1885430115;
      }
      if (!v15 && v16 != 1633772288)
        goto LABEL_35;
LABEL_34:
      *((_DWORD *)__src + v9++) = v13;
LABEL_35:
      v10 += 4;
      if (v12 == v10)
        goto LABEL_36;
    }
  }
  if (outPropertyData)
    free(outPropertyData);
LABEL_45:
  v19 = __src;
  if (__src)
LABEL_46:
    free(v19);
  return PropertyInfo;
}

void sub_18F0DB1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  if (a10)
    free(a10);
  if (a11)
    free(a11);
  _Unwind_Resume(exception_object);
}

void MP4_M4A_AudioFormat::~MP4_M4A_AudioFormat(MP4_M4A_AudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

BOOL MP4_M4A_AudioFormat::ExtensionIsThisFormat(MP4_M4A_AudioFormat *this, CFStringRef theString1)
{
  uint64_t v3;

  v3 = 1;
  if (CFStringCompare(theString1, CFSTR("m4a"), 1uLL))
    return CFStringCompare(theString1, CFSTR("m4r"), 1uLL) == kCFCompareEqualTo;
  return v3;
}

uint64_t MP4_M4A_AudioFormat::FileDataIsThisFormat(MP4_M4A_AudioFormat *this, unsigned int a2, const void *a3)
{
  uint64_t v5;
  uint64_t valid;

  v5 = operator new();
  *(_BYTE *)(v5 + 8) = 0;
  *(_QWORD *)v5 = &off_1E2907000;
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  valid = IsValidDataForMP4FileType((DataSource *)v5, 1832149350);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return valid;
}

const __CFArray *MP4_M4A_AudioFormat::GetExtensions(MP4_M4A_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("m4a");
  values[1] = CFSTR("m4r");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *MP4_M4A_AudioFormat::GetUTIs(MP4_M4A_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[4];

  v4[3] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("public.mpeg-4-audio");
  v4[1] = CFSTR("com.apple.m4a-audio");
  v4[2] = CFSTR("com.apple.mpeg-4-ringtone");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 3, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *MP4_M4A_AudioFormat::GetMIMETypes(MP4_M4A_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("audio/x-m4a");
  values[1] = CFSTR("audio/x-m4r");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void MP4_M4A_AudioFormat::GetFileTypeName(MP4_M4A_AudioFormat *this, const __CFString **a2)
{
  __CFBundle *v3;
  const __CFString *v4;
  char v5;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_5:
    v4 = (const __CFString *)CFRetain(CFSTR("Apple MPEG-4"));
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle)
    goto LABEL_5;
LABEL_3:
  v4 = CFBundleCopyLocalizedString(v3, CFSTR("Apple MPEG-4 Audio"), CFSTR("Apple MPEG-4 Audio"), CFSTR("FileTypeNames"));
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_18F0DB554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t MP4_M4A_AudioFormat::GetAvailableFormatIDs(MP4_M4A_AudioFormat *this, unsigned int *a2, void *a3)
{
  return GetAvailableFormatIDsForFileType(1832149350, a2, a3);
}

uint64_t MP4_M4A_AudioFormat::GetAvailableStreamDescriptions(MP4_M4A_AudioFormat *this, int a2, unsigned int *a3, void *a4)
{
  return GetAvailableStreamDescriptionsForFileType(1832149350, a2, a3, a4);
}

uint64_t MP4_M4A_AudioFormat::GetHFSCodes(MP4_M4A_AudioFormat *this, unsigned int *a2, void *__dst)
{
  size_t v3;
  int __src;

  __src = 1295270176;
  if (*a2 >= 4)
    v3 = 4;
  else
    v3 = *a2 & 0xFFFFFFFC;
  *a2 = v3;
  if (__dst)
    memcpy(__dst, &__src, v3);
  return 0;
}

MP4AudioFile *MP4_M4A_AudioFormat::New(MP4_M4A_AudioFormat *this)
{
  MP4AudioFile *v1;

  v1 = (MP4AudioFile *)operator new();
  MP4AudioFile::MP4AudioFile(v1, 1832149350);
  return v1;
}

void sub_18F0DB618(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F1C4096D1D24ELL);
  _Unwind_Resume(a1);
}

void MP4_M4A_AudioFormat::NewStream(MP4_M4A_AudioFormat *this)
{
  MP4AudioStream *v1;

  v1 = (MP4AudioStream *)operator new();
  MP4AudioStream::MP4AudioStream(v1, 1832149350);
}

uint64_t MP4_M4A_AudioFormat::DataSourceIsThisFormat(MP4_M4A_AudioFormat *this, DataSource *a2)
{
  return IsValidDataForMP4FileType(a2, 1832149350);
}

void MP4_M4B_AudioFormat::~MP4_M4B_AudioFormat(MP4_M4B_AudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

BOOL MP4_M4B_AudioFormat::ExtensionIsThisFormat(MP4_M4B_AudioFormat *this, CFStringRef theString1)
{
  return CFStringCompare(theString1, CFSTR("m4b"), 1uLL) == kCFCompareEqualTo;
}

uint64_t MP4_M4B_AudioFormat::FileDataIsThisFormat(MP4_M4B_AudioFormat *this, unsigned int a2, const void *a3)
{
  uint64_t v5;
  uint64_t valid;

  v5 = operator new();
  *(_BYTE *)(v5 + 8) = 0;
  *(_QWORD *)v5 = &off_1E2907000;
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  valid = IsValidDataForMP4FileType((DataSource *)v5, 1832149606);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return valid;
}

const __CFArray *MP4_M4B_AudioFormat::GetExtensions(MP4_M4B_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("m4b");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *MP4_M4B_AudioFormat::GetUTIs(MP4_M4B_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("public.mpeg-4-audiobooks");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *MP4_M4B_AudioFormat::GetMIMETypes(MP4_M4B_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("audio/x-m4b");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void MP4_M4B_AudioFormat::GetFileTypeName(MP4_M4B_AudioFormat *this, const __CFString **a2)
{
  __CFBundle *v3;
  const __CFString *v4;
  char v5;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_5:
    v4 = (const __CFString *)CFRetain(CFSTR("Apple MPEG-4"));
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle)
    goto LABEL_5;
LABEL_3:
  v4 = CFBundleCopyLocalizedString(v3, CFSTR("Apple MPEG-4 AudioBooks"), CFSTR("Apple MPEG-4 AudioBooks"), CFSTR("FileTypeNames"));
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_18F0DB964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t MP4_M4B_AudioFormat::GetAvailableFormatIDs(MP4_M4B_AudioFormat *this, unsigned int *a2, void *a3)
{
  return GetAvailableFormatIDsForFileType(1832149606, a2, a3);
}

uint64_t MP4_M4B_AudioFormat::GetAvailableStreamDescriptions(MP4_M4B_AudioFormat *this, int a2, unsigned int *a3, void *a4)
{
  return GetAvailableStreamDescriptionsForFileType(1832149606, a2, a3, a4);
}

uint64_t MP4_M4B_AudioFormat::GetHFSCodes(MP4_M4B_AudioFormat *this, unsigned int *a2, void *__dst)
{
  size_t v3;
  int __src;

  __src = 1295270432;
  if (*a2 >= 4)
    v3 = 4;
  else
    v3 = *a2 & 0xFFFFFFFC;
  *a2 = v3;
  if (__dst)
    memcpy(__dst, &__src, v3);
  return 0;
}

MP4AudioFile *MP4_M4B_AudioFormat::New(MP4_M4B_AudioFormat *this)
{
  MP4AudioFile *v1;

  v1 = (MP4AudioFile *)operator new();
  MP4AudioFile::MP4AudioFile(v1, 1832149606);
  return v1;
}

void sub_18F0DBA28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F1C4096D1D24ELL);
  _Unwind_Resume(a1);
}

void MP4_M4B_AudioFormat::NewStream(MP4_M4B_AudioFormat *this)
{
  MP4AudioStream *v1;

  v1 = (MP4AudioStream *)operator new();
  MP4AudioStream::MP4AudioStream(v1, 1832149606);
}

uint64_t MP4_M4B_AudioFormat::DataSourceIsThisFormat(MP4_M4B_AudioFormat *this, DataSource *a2)
{
  return IsValidDataForMP4FileType(a2, 1832149606);
}

void MP4_3GP_AudioFormat::~MP4_3GP_AudioFormat(MP4_3GP_AudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

BOOL MP4_3GP_AudioFormat::ExtensionIsThisFormat(MP4_3GP_AudioFormat *this, CFStringRef theString1)
{
  uint64_t v3;

  v3 = 1;
  if (CFStringCompare(theString1, CFSTR("3gp"), 1uLL))
    return CFStringCompare(theString1, CFSTR("3gpp"), 1uLL) == kCFCompareEqualTo;
  return v3;
}

uint64_t MP4_3GP_AudioFormat::FileDataIsThisFormat(MP4_3GP_AudioFormat *this, unsigned int a2, const void *a3)
{
  uint64_t v5;
  uint64_t valid;

  v5 = operator new();
  *(_BYTE *)(v5 + 8) = 0;
  *(_QWORD *)v5 = &off_1E2907000;
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  valid = IsValidDataForMP4FileType((DataSource *)v5, 862417008);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return valid;
}

const __CFArray *MP4_3GP_AudioFormat::GetExtensions(MP4_3GP_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("3gp");
  values[1] = CFSTR("3gpp");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *MP4_3GP_AudioFormat::GetUTIs(MP4_3GP_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("public.3gpp");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *MP4_3GP_AudioFormat::GetMIMETypes(MP4_3GP_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("audio/3gpp");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void MP4_3GP_AudioFormat::GetFileTypeName(MP4_3GP_AudioFormat *this, const __CFString **a2)
{
  __CFBundle *v3;
  const __CFString *v4;
  char v5;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_5:
    v4 = (const __CFString *)CFRetain(CFSTR("3GPP"));
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle)
    goto LABEL_5;
LABEL_3:
  v4 = CFBundleCopyLocalizedString(v3, CFSTR("3GP Audio"), CFSTR("3GP Audio"), CFSTR("FileTypeNames"));
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_18F0DBDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t MP4_3GP_AudioFormat::GetAvailableFormatIDs(MP4_3GP_AudioFormat *this, unsigned int *a2, void *a3)
{
  return GetAvailableFormatIDsForFileType(862417008, a2, a3);
}

uint64_t MP4_3GP_AudioFormat::GetAvailableStreamDescriptions(MP4_3GP_AudioFormat *this, int a2, unsigned int *a3, void *a4)
{
  return GetAvailableStreamDescriptionsForFileType(862417008, a2, a3, a4);
}

uint64_t MP4_3GP_AudioFormat::GetHFSCodes(MP4_3GP_AudioFormat *this, unsigned int *a2, void *__dst)
{
  size_t v3;
  int __src;

  __src = 862417008;
  if (*a2 >= 4)
    v3 = 4;
  else
    v3 = *a2 & 0xFFFFFFFC;
  *a2 = v3;
  if (__dst)
    memcpy(__dst, &__src, v3);
  return 0;
}

MP4AudioFile *MP4_3GP_AudioFormat::New(MP4_3GP_AudioFormat *this)
{
  MP4AudioFile *v1;

  v1 = (MP4AudioFile *)operator new();
  MP4AudioFile::MP4AudioFile(v1, 862417008);
  return v1;
}

void sub_18F0DBE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F1C4096D1D24ELL);
  _Unwind_Resume(a1);
}

void MP4_3GP_AudioFormat::NewStream(MP4_3GP_AudioFormat *this)
{
  MP4AudioStream *v1;

  v1 = (MP4AudioStream *)operator new();
  MP4AudioStream::MP4AudioStream(v1, 862417008);
}

uint64_t MP4_3GP_AudioFormat::DataSourceIsThisFormat(MP4_3GP_AudioFormat *this, DataSource *a2)
{
  return IsValidDataForMP4FileType(a2, 862417008);
}

void MP4_3GP2_AudioFormat::~MP4_3GP2_AudioFormat(MP4_3GP2_AudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

BOOL MP4_3GP2_AudioFormat::ExtensionIsThisFormat(MP4_3GP2_AudioFormat *this, CFStringRef theString1)
{
  uint64_t v3;

  v3 = 1;
  if (CFStringCompare(theString1, CFSTR("3g2"), 1uLL))
    return CFStringCompare(theString1, CFSTR("3gp2"), 1uLL) == kCFCompareEqualTo;
  return v3;
}

uint64_t MP4_3GP2_AudioFormat::FileDataIsThisFormat(MP4_3GP2_AudioFormat *this, unsigned int a2, const void *a3)
{
  uint64_t v5;
  uint64_t valid;

  v5 = operator new();
  *(_BYTE *)(v5 + 8) = 0;
  *(_QWORD *)v5 = &off_1E2907000;
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  valid = IsValidDataForMP4FileType((DataSource *)v5, 862416946);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return valid;
}

const __CFArray *MP4_3GP2_AudioFormat::GetExtensions(MP4_3GP2_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("3g2");
  values[1] = CFSTR("3gp2");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *MP4_3GP2_AudioFormat::GetUTIs(MP4_3GP2_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("public.3gpp2");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *MP4_3GP2_AudioFormat::GetMIMETypes(MP4_3GP2_AudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("audio/3gpp2");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void MP4_3GP2_AudioFormat::GetFileTypeName(MP4_3GP2_AudioFormat *this, const __CFString **a2)
{
  __CFBundle *v3;
  const __CFString *v4;
  char v5;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_5:
    v4 = (const __CFString *)CFRetain(CFSTR("3GPP-2"));
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle)
    goto LABEL_5;
LABEL_3:
  v4 = CFBundleCopyLocalizedString(v3, CFSTR("3GPP-2 Audio"), CFSTR("3GPP-2 Audio"), CFSTR("FileTypeNames"));
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_18F0DC1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t MP4_3GP2_AudioFormat::GetAvailableFormatIDs(MP4_3GP2_AudioFormat *this, unsigned int *a2, void *a3)
{
  return GetAvailableFormatIDsForFileType(862416946, a2, a3);
}

uint64_t MP4_3GP2_AudioFormat::GetAvailableStreamDescriptions(MP4_3GP2_AudioFormat *this, int a2, unsigned int *a3, void *a4)
{
  return GetAvailableStreamDescriptionsForFileType(862417008, a2, a3, a4);
}

uint64_t MP4_3GP2_AudioFormat::GetHFSCodes(MP4_3GP2_AudioFormat *this, unsigned int *a2, void *__dst)
{
  size_t v3;
  int __src;

  __src = 862416946;
  if (*a2 >= 4)
    v3 = 4;
  else
    v3 = *a2 & 0xFFFFFFFC;
  *a2 = v3;
  if (__dst)
    memcpy(__dst, &__src, v3);
  return 0;
}

MP4AudioFile *MP4_3GP2_AudioFormat::New(MP4_3GP2_AudioFormat *this)
{
  MP4AudioFile *v1;

  v1 = (MP4AudioFile *)operator new();
  MP4AudioFile::MP4AudioFile(v1, 862416946);
  return v1;
}

void sub_18F0DC2B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10F1C4096D1D24ELL);
  _Unwind_Resume(a1);
}

void MP4_3GP2_AudioFormat::NewStream(MP4_3GP2_AudioFormat *this)
{
  MP4AudioStream *v1;

  v1 = (MP4AudioStream *)operator new();
  MP4AudioStream::MP4AudioStream(v1, 862416946);
}

uint64_t MP4_3GP2_AudioFormat::DataSourceIsThisFormat(MP4_3GP2_AudioFormat *this, DataSource *a2)
{
  return IsValidDataForMP4FileType(a2, 862416946);
}

void AT::RingBufferErrorCategory::~RingBufferErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x193FFE460);
}

const char *AT::RingBufferErrorCategory::name(AT::RingBufferErrorCategory *this)
{
  return "AT::RingBufferError";
}

_QWORD *AT::RingBufferErrorCategory::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  if ((a1 + 5) > 9)
    v3 = "unknown";
  else
    v3 = off_1E2922450[a1 + 5];
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

uint64_t *AT::RingBufferErrorCategory::instance(AT::RingBufferErrorCategory *this)
{
  unsigned __int8 v1;

  {
    AT::RingBufferErrorCategory::instance(void)::global = (uint64_t)&off_1E290A070;
  }
  return &AT::RingBufferErrorCategory::instance(void)::global;
}

uint64_t AT::make_error_code(AT::RingBufferErrorCategory *a1)
{
  unsigned int v1;

  v1 = a1;
  AT::RingBufferErrorCategory::instance(a1);
  return v1;
}

AT::RingBuffer *AT::RingBuffer::RingBuffer(AT::RingBuffer *this, const AudioStreamBasicDescription *a2, int a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t mChannelsPerFrame;
  AT::RingBuffer::Impl *v9;

  v6 = *(_OWORD *)&a2->mSampleRate;
  v7 = *(_OWORD *)&a2->mBytesPerPacket;
  *((_QWORD *)this + 4) = *(_QWORD *)&a2->mBitsPerChannel;
  *(_OWORD *)this = v6;
  *((_OWORD *)this + 1) = v7;
  *((_DWORD *)this + 10) = a3;
  if ((a2->mFormatFlags & 0x20) != 0)
    mChannelsPerFrame = a2->mChannelsPerFrame;
  else
    mChannelsPerFrame = 1;
  v9 = (AT::RingBuffer::Impl *)operator new();
  AT::RingBuffer::Impl::Impl(v9, a2, (_anonymous_namespace_::EABLImpl *)mChannelsPerFrame, a2->mBytesPerFrame, a3);
  *((_QWORD *)this + 6) = v9;
  return this;
}

void sub_18F0DC498(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x1070C40F214F66CLL);
  _Unwind_Resume(a1);
}

AT::RingBuffer::Impl *AT::RingBuffer::Impl::Impl(AT::RingBuffer::Impl *this, const AudioStreamBasicDescription *a2, _anonymous_namespace_::EABLImpl *a3, int a4, int a5)
{
  unsigned int v5;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  CA::AudioBuffers *v11;
  UInt32 mChannelsPerFrame;
  unsigned int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;

  v5 = a3;
  v8 = *(_OWORD *)&a2->mSampleRate;
  v9 = *(_OWORD *)&a2->mBytesPerPacket;
  *((_QWORD *)this + 4) = *(_QWORD *)&a2->mBitsPerChannel;
  *(_OWORD *)this = v8;
  *((_OWORD *)this + 1) = v9;
  *((_DWORD *)this + 10) = a5;
  *((_DWORD *)this + 11) = (_DWORD)a3;
  *((_DWORD *)this + 12) = a4;
  *((_DWORD *)this + 13) = a5 * a4;
  v10 = (_QWORD *)((char *)this + 56);
  CA::AudioBuffers::AudioBuffers(v10, v11, 1);
  if (v5 > 1)
    mChannelsPerFrame = 1;
  else
    mChannelsPerFrame = a2->mChannelsPerFrame;
  v13 = CA::AudioBuffers::Prepare(*((CA::AudioBuffers **)this + 7), mChannelsPerFrame, *((_DWORD *)this + 13));
  v14 = 0;
  *((_QWORD *)this + 8) = v13;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 168) = 0;
  do
  {
    v15 = (char *)this + v14;
    *((_QWORD *)v15 + 22) = 0;
    *((_QWORD *)v15 + 23) = 0;
    *((_DWORD *)v15 + 48) = 0;
    v14 += 24;
  }
  while (v14 != 768);
  *((_DWORD *)this + 236) = 0;
  *((_WORD *)this + 474) = 257;
  v16 = 176;
  do
  {
    v17 = (char *)this + v16;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_DWORD *)v17 + 4) = 0;
    v16 += 24;
  }
  while (v17 + 24 != (char *)this + 944);
  atomic_store(0, (unsigned int *)this + 236);
  *((_BYTE *)this + 948) = 1;
  return this;
}

void sub_18F0DC5B0(_Unwind_Exception *a1)
{
  std::pmr **v1;

  CA::AudioBuffers::~AudioBuffers(v1);
  _Unwind_Resume(a1);
}

AT::RingBuffer *AT::RingBuffer::RingBuffer(AT::RingBuffer *this, _anonymous_namespace_::EABLImpl *a2, int a3, int a4)
{
  AT::RingBuffer::Impl *v8;
  AudioStreamBasicDescription v10;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = a3;
  *(_QWORD *)((char *)this + 28) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = a4;
  memset(&v10, 0, sizeof(v10));
  v8 = (AT::RingBuffer::Impl *)operator new();
  AT::RingBuffer::Impl::Impl(v8, &v10, a2, a3, a4);
  *((_QWORD *)this + 6) = v8;
  return this;
}

void sub_18F0DC660(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x1070C40F214F66CLL);
  _Unwind_Resume(a1);
}

void AT::RingBuffer::~RingBuffer(AT::RingBuffer *this)
{
  std::unique_ptr<AT::RingBuffer::Impl>::reset[abi:ne180100]((uint64_t *)this + 6);
}

{
  std::unique_ptr<AT::RingBuffer::Impl>::reset[abi:ne180100]((uint64_t *)this + 6);
}

uint64_t *std::unique_ptr<AT::RingBuffer::Impl>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    if (*(_BYTE *)(v1 + 168))
      AT::RingBuffer::Impl::InputConverter::~InputConverter((AT::RingBuffer::Impl::InputConverter *)(v1 + 72));
    ExtendedAudioBufferList_Destroy(*(std::pmr **)(v1 + 56));
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void AT::RingBuffer::Impl::InputConverter::~InputConverter(AT::RingBuffer::Impl::InputConverter *this)
{
  OpaqueAudioConverter *v2;
  void *v3;
  void *v4;

  v2 = (OpaqueAudioConverter *)*((_QWORD *)this + 11);
  if (v2)
    AudioConverterDispose(v2);
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
}

uint64_t AT::RingBuffer::SetInputFormat(AT::RingBuffer *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v2;
  uint64_t result;
  UInt32 mBytesPerFrame;
  UInt32 mChannelsPerFrame;
  uint64_t v7;
  AudioFormatFlags mFormatFlags;
  AudioFormatID mFormatID;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::vector<char>::value_type __x;

  v2 = *((_QWORD *)this + 6);
  if (a2->mSampleRate != *(double *)v2)
    return 4294967246;
  if (*(_BYTE *)(v2 + 168))
  {
    AT::RingBuffer::Impl::InputConverter::~InputConverter((AT::RingBuffer::Impl::InputConverter *)(v2 + 72));
    *(_BYTE *)(v2 + 168) = 0;
  }
  mBytesPerFrame = a2->mBytesPerFrame;
  mChannelsPerFrame = a2->mChannelsPerFrame;
  v7 = *(_QWORD *)&a2->mBitsPerChannel;
  v12 = *(_QWORD *)&a2->mBytesPerPacket;
  mFormatID = a2->mFormatID;
  mFormatFlags = a2->mFormatFlags;
  *(Float64 *)(v2 + 72) = a2->mSampleRate;
  *(_DWORD *)(v2 + 80) = mFormatID;
  *(_DWORD *)(v2 + 84) = mFormatFlags;
  *(_QWORD *)(v2 + 88) = v12;
  if ((mFormatFlags & 0x20) != 0)
    v10 = mChannelsPerFrame;
  else
    v10 = 1;
  *(_DWORD *)(v2 + 96) = mBytesPerFrame;
  *(_DWORD *)(v2 + 100) = mChannelsPerFrame;
  *(_QWORD *)(v2 + 104) = v7;
  __x = 0;
  std::vector<char>::vector((std::vector<char> *)(v2 + 112), (16 * v10) | 8, &__x);
  **(_DWORD **)(v2 + 112) = v10;
  if ((*(_DWORD *)(v2 + 12) & 0x20) != 0)
    v11 = *(unsigned int *)(v2 + 28);
  else
    v11 = 1;
  __x = 0;
  std::vector<char>::vector((std::vector<char> *)(v2 + 136), (16 * v11) | 8, &__x);
  **(_DWORD **)(v2 + 136) = v11;
  *(_QWORD *)(v2 + 160) = 0;
  result = AudioConverterNewWithOptions((AudioStreamBasicDescription *)(v2 + 72), (const AudioStreamBasicDescription *)v2, 0x10000, (_QWORD *)(v2 + 160));
  *(_BYTE *)(v2 + 168) = 1;
  return result;
}

void sub_18F0DC8A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 144) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 120) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AT::RingBuffer::Fetch(AT::RingBuffer *this, AudioBufferList *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t mNumberBuffers;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  UInt32 *p_mDataByteSize;

  v7 = *((_QWORD *)this + 6);
  v8 = a4 + a3;
  result = AT::RingBuffer::Impl::CheckTimeBounds((AT::RingBuffer::Impl *)v7, a4, v8);
  if (!(_DWORD)result)
  {
    if (a3)
    {
      v10 = *(int *)(v7 + 40);
      v11 = *(_DWORD *)(v7 + 48);
      v12 = ((v10 & ((int)(a4 % v10) >> 31)) + (a4 % v10)) * v11;
      v13 = ((v10 & ((int)(v8 % v10) >> 31)) + (v8 % v10)) * v11;
      if (v12 >= v13)
      {
        v18 = *(unsigned int *)(v7 + 52) - v12;
        LODWORD(mNumberBuffers) = a2->mNumberBuffers;
        if (a2->mNumberBuffers)
        {
          v19 = 0;
          v20 = *(_QWORD *)(v7 + 64);
          v21 = 16;
          do
          {
            memcpy(*(void **)((char *)&a2->mNumberBuffers + v21), (const void *)(*(_QWORD *)(v20 + v21) + v12), v18);
            ++v19;
            mNumberBuffers = a2->mNumberBuffers;
            v21 += 16;
          }
          while (v19 < mNumberBuffers);
          if ((_DWORD)mNumberBuffers)
          {
            v22 = 0;
            v23 = *(_QWORD *)(v7 + 64);
            v24 = 16;
            do
            {
              memcpy((void *)(*(_QWORD *)((char *)&a2->mNumberBuffers + v24) + v18), *(const void **)(v23 + v24), v13);
              ++v22;
              mNumberBuffers = a2->mNumberBuffers;
              v24 += 16;
            }
            while (v22 < mNumberBuffers);
          }
        }
        LODWORD(v13) = v18 + v13;
        if (!(_DWORD)mNumberBuffers)
          return AT::RingBuffer::Impl::CheckTimeBounds((AT::RingBuffer::Impl *)v7, a4, v8);
        goto LABEL_18;
      }
      if (!a2->mNumberBuffers)
        return AT::RingBuffer::Impl::CheckTimeBounds((AT::RingBuffer::Impl *)v7, a4, v8);
      v14 = 0;
      v15 = *(_QWORD *)(v7 + 64);
      v13 -= v12;
      v16 = 16;
      do
      {
        memcpy(*(void **)((char *)&a2->mNumberBuffers + v16), (const void *)(*(_QWORD *)(v15 + v16) + v12), v13);
        ++v14;
        mNumberBuffers = a2->mNumberBuffers;
        v16 += 16;
      }
      while (v14 < mNumberBuffers);
    }
    else
    {
      LODWORD(v13) = 0;
      LODWORD(mNumberBuffers) = a2->mNumberBuffers;
    }
    if (!(_DWORD)mNumberBuffers)
      return AT::RingBuffer::Impl::CheckTimeBounds((AT::RingBuffer::Impl *)v7, a4, v8);
LABEL_18:
    mNumberBuffers = mNumberBuffers;
    p_mDataByteSize = &a2->mBuffers[0].mDataByteSize;
    do
    {
      *p_mDataByteSize = v13;
      p_mDataByteSize += 4;
      --mNumberBuffers;
    }
    while (mNumberBuffers);
    return AT::RingBuffer::Impl::CheckTimeBounds((AT::RingBuffer::Impl *)v7, a4, v8);
  }
  return result;
}

unint64_t AT::RingBuffer::Impl::CheckTimeBounds(AT::RingBuffer::Impl *this, uint64_t a2, uint64_t a3)
{
  uint64_t *TimeBounds;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;

  TimeBounds = AT::RingBuffer::Impl::GetTimeBounds(&v9, (uint64_t)this);
  if (!v11)
  {
    v6 = v9 & 0xFFFFFFFF00000000;
    v7 = v9;
    return v6 | v7;
  }
  if (v9 <= a2)
  {
    if (v10 >= a3)
    {
      std::system_category();
      v7 = 0;
      v6 = 0;
      return v6 | v7;
    }
    if (v10 > a2)
      v7 = 1;
    else
      v7 = 2;
    goto LABEL_13;
  }
  if (v10 >= a3)
  {
    if (v9 >= a3)
      v7 = 4294967294;
    else
      v7 = 0xFFFFFFFFLL;
LABEL_13:
    AT::RingBufferErrorCategory::instance((AT::RingBufferErrorCategory *)TimeBounds);
    v6 = 0;
    return v6 | v7;
  }
  AT::RingBufferErrorCategory::instance((AT::RingBufferErrorCategory *)TimeBounds);
  v6 = 0;
  v7 = 3;
  return v6 | v7;
}

uint64_t AT::RingBuffer::SetResetWhenEmpty(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 48) + 949) = a2;
  return this;
}

uint64_t AT::RingBuffer::TouchMemory(AT::RingBuffer *this)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t i;
  uint64_t result;

  v1 = *((_QWORD *)this + 6);
  v2 = *(unsigned int **)(v1 + 64);
  v3 = *v2;
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(unsigned int *)(v1 + 52);
    do
    {
      if ((_DWORD)v6)
      {
        for (i = 0; i < v6; i += 4096)
          v5 += *(unsigned __int8 *)(*(_QWORD *)&v2[4 * v4 + 4] + i);
      }
      ++v4;
    }
    while (v4 != v3);
  }
  else
  {
    v5 = 0;
  }
  result = (AT::RingBuffer::Impl::TouchMemory(void)::gTempValue + v5);
  AT::RingBuffer::Impl::TouchMemory(void)::gTempValue += v5;
  return result;
}

uint64_t ShortTermLinearInterpolationResampler::SetRate(uint64_t this, double a2)
{
  BOOL v2;
  BOOL v3;
  _DWORD *exception;

  if (a2 >= 0.0)
  {
    v2 = a2 == 32.0;
    v3 = a2 < 32.0;
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  if (!v3 && !v2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  *(double *)(this + 40) = a2;
  *(_QWORD *)(this + 24) = vcvtd_n_s64_f64(a2, 0x20uLL);
  return this;
}

unint64_t ShortTermLinearInterpolationResampler::GetNumberOfSourceFrames(ShortTermLinearInterpolationResampler *this, uint64_t a2)
{
  _DWORD *exception;

  if (a2 > 0x400000)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  if (!*(_BYTE *)this && (_DWORD)a2)
    return (*((_QWORD *)this + 2) + *((_QWORD *)this + 3) * (unint64_t)a2 + 0x80000000) >> 32;
  return a2;
}

uint64_t ShortTermLinearInterpolationResampler::GetNumberOfOutputFrames(ShortTermLinearInterpolationResampler *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *exception;

  if (a2 > 0x400000)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -50;
  }
  if (!*(_BYTE *)this)
  {
    v2 = *((_QWORD *)this + 3);
    v3 = ~*((_QWORD *)this + 2) + (a2 << 32) + v2;
    if (v3 < 0)
      return 0;
    else
      return v3 / v2;
  }
  return a2;
}

FILE *CAFormatter::InitWithMemoryStream(CAFormatter *this, FILE **a2)
{
  FILE *result;

  result = CAMemoryStream::cstr(a2);
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  *(_QWORD *)this = result;
  return result;
}

void CAFormatter::CAFormatter(CAFormatter *this, const int *a2, int a3)
{
  FILE *v6;
  int v7;
  FILE *v8;
  FILE *v9;
  FILE *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v6 = funopen(&v10, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  v10 = v6;
  v7 = a3 - 1;
  if (a3 >= 1)
  {
    v8 = v6;
    while (1)
    {
      fprintf(v8, "%d", *a2);
      if (!v7)
        break;
      ++a2;
      fputc(32, v8);
      --v7;
    }
  }
  v9 = CAMemoryStream::cstr(&v10);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  *(_QWORD *)this = v9;
  fclose(v10);
  free(v11);
}

void sub_18F0DCDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, FILE *a11, void *a12)
{
  fclose(a11);
  free(a12);
  _Unwind_Resume(a1);
}

void CAFormatter::CAFormatter(CAFormatter *this, const float *a2, int a3)
{
  FILE *v6;
  int v7;
  FILE *v8;
  FILE *v9;
  FILE *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v6 = funopen(&v10, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  v10 = v6;
  v7 = a3 - 1;
  if (a3 >= 1)
  {
    v8 = v6;
    while (1)
    {
      fprintf(v8, "%.3f", *a2);
      if (!v7)
        break;
      ++a2;
      fputc(32, v8);
      --v7;
    }
  }
  v9 = CAMemoryStream::cstr(&v10);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  *(_QWORD *)this = v9;
  fclose(v10);
  free(v11);
}

void sub_18F0DCEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, FILE *a11, void *a12)
{
  fclose(a11);
  free(a12);
  _Unwind_Resume(a1);
}

void CAFormatter::CAFormatter(CAFormatter *this, float *a2, int a3, int a4)
{
  FILE *v8;
  int v9;
  float v10;
  FILE *v12;
  FILE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v8 = funopen(&v13, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  v13 = v8;
  fputc(124, v8);
  if (a4 >= 1)
  {
    do
    {
      v9 = a3;
      if (a3 >= 1)
      {
        do
        {
          v10 = *a2++;
          fprintf(v8, " %.3f", v10);
          --v9;
        }
        while (v9);
      }
      fwrite("| ", 2uLL, 1uLL, v8);
    }
    while (a4-- > 1);
  }
  v12 = CAMemoryStream::cstr(&v13);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  *(_QWORD *)this = v12;
  fclose(v13);
  free(v14);
}

void sub_18F0DD004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, FILE *a11, void *a12)
{
  fclose(a11);
  free(a12);
  _Unwind_Resume(a1);
}

void CAFormatter::CAFormatter(CAFormatter *this, unsigned __int8 *a2, int a3)
{
  FILE *v6;
  FILE *v7;
  unsigned int v8;
  int v9;
  FILE *v10;
  FILE *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v6 = funopen(&v11, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  v11 = v6;
  if (a3 >= 1)
  {
    v7 = v6;
    v8 = a3 + 1;
    do
    {
      v9 = *a2++;
      fprintf(v7, "%02x", v9);
      --v8;
    }
    while (v8 > 1);
  }
  v10 = CAMemoryStream::cstr(&v11);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  *(_QWORD *)this = v10;
  fclose(v11);
  free(v12);
}

void sub_18F0DD0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, FILE *a11, void *a12)
{
  fclose(a11);
  free(a12);
  _Unwind_Resume(a1);
}

void CAFormatter::CAFormatter(CAFormatter *this, const CAStreamBasicDescription *a2, double a3, int16x8_t a4)
{
  void **v5;
  void *__p[2];
  char v7;

  CA::StreamDescription::AsString((CA::StreamDescription *)__p, a2, a3, a4);
  if (v7 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  CAFormatter::Init(this, (const char *)v5);
  if (v7 < 0)
    operator delete(__p[0]);
}

{
  CAFormatter::CAFormatter(this, a2, a3, a4);
}

void sub_18F0DD16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioTimeStamp *a2, char a3, int a4)
{
  if (a2)
    CAFormatter::Init(this, a2, a3, a4);
  else
    CAFormatter::Init(this, "(null)");
}

void CAFormatter::Init(CAFormatter *this, const AudioTimeStamp *a2, char a3, int a4)
{
  FILE *v8;
  FILE *v9;
  char v10;
  FILE *v11;
  FILE *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  v8 = funopen(&v12, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  v9 = v8;
  v12 = v8;
  if ((a3 & 2) != 0)
  {
    if ((a2->mFlags & 2) != 0)
    {
      fprintf(v8, "%.6f", (double)a2->mHostTime * 0.0000000416666667);
      if ((a3 & 1) == 0)
        goto LABEL_15;
    }
    else
    {
      fwrite("invalid ht", 0xAuLL, 1uLL, v8);
      if ((a3 & 1) == 0)
        goto LABEL_15;
    }
    fwrite(", ", 2uLL, 1uLL, v9);
LABEL_10:
    if ((a2->mFlags & 1) != 0)
    {
      if (a4)
        fprintf(v9, "0x%qx st");
      else
        fprintf(v9, "%lld st");
    }
    else
    {
      fwrite("invalid st", 0xAuLL, 1uLL, v9);
    }
LABEL_15:
    v10 = 0;
    if ((a3 & 4) == 0)
      goto LABEL_20;
    goto LABEL_16;
  }
  if ((a3 & 1) != 0)
    goto LABEL_10;
  v10 = 1;
  if ((a3 & 4) == 0)
    goto LABEL_20;
LABEL_16:
  if ((a2->mFlags & 4) != 0)
  {
    if ((v10 & 1) == 0)
      fwrite(", ", 2uLL, 1uLL, v9);
    fprintf(v9, "%.6f rs", a2->mRateScalar);
  }
LABEL_20:
  v11 = CAMemoryStream::cstr(&v12);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  *(_QWORD *)this = v11;
  fclose(v12);
  free(v13);
}

void sub_18F0DD37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, FILE *a11, void *a12)
{
  fclose(a11);
  free(a12);
  _Unwind_Resume(a1);
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioComponentDescription *a2)
{
  char __str[48];
  char v5[16];
  char v6[16];
  char v7[16];
  char __s[48];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)&a2->componentFlags)
    snprintf(__str, 0x30uLL, "/0x%x/0x%x", a2->componentFlags, a2->componentFlagsMask);
  else
    __str[0] = 0;
  Format4CC(a2->componentType, v7, 0x10uLL);
  Format4CC(a2->componentSubType, v6, 0x10uLL);
  Format4CC(a2->componentManufacturer, v5, 0x10uLL);
  snprintf(__s, 0x30uLL, "%s/%s/%s%s", v7, v6, v5, __str);
  CAFormatter::Init(this, __s);
}

char *Format4CC(unsigned int a1, char *__str, size_t __size)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v6 = bswap32(a1);
  *(_DWORD *)__str = v6;
  v7 = MEMORY[0x1E0C80978];
  if ((v6 & 0x80) != 0)
  {
    if (!__maskrune((char)v6, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * (char)v6 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  v8 = __str[1];
  if ((v8 & 0x80000000) != 0)
  {
    if (!__maskrune(v8, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((*(_DWORD *)(v7 + 4 * v8 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  v9 = __str[2];
  if ((v9 & 0x80000000) != 0)
  {
    if (!__maskrune(v9, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((*(_DWORD *)(v7 + 4 * v9 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  v10 = __str[3];
  if ((v10 & 0x80000000) != 0)
  {
    if (__maskrune(v10, 0x40000uLL))
      goto LABEL_15;
LABEL_17:
    snprintf(__str, __size, "0x%08x", a1);
    return __str;
  }
  if ((*(_DWORD *)(v7 + 4 * v10 + 60) & 0x40000) == 0)
    goto LABEL_17;
LABEL_15:
  __str[4] = 0;
  return __str;
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioClassDescription *a2)
{
  char v4[16];
  char v5[16];
  char v6[16];
  char __str[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  Format4CC(a2->mType, v6, 0x10uLL);
  Format4CC(a2->mSubType, v5, 0x10uLL);
  Format4CC(a2->mManufacturer, v4, 0x10uLL);
  snprintf(__str, 0x30uLL, "%s/%s/%s", v6, v5, v4);
  CAFormatter::Init(this, __str);
}

void CAFormatter::CAFormatter(CAFormatter *this, OpaqueAudioConverter *a2)
{
  CAFormatter::InitCAShowable(this, (uint64_t)a2, "AudioConverterRef");
}

{
  CAFormatter::InitCAShowable(this, (uint64_t)a2, "AudioConverterRef");
}

FILE *CAFormatter::InitCAShowable(CAFormatter *this, uint64_t a2, const char *__s)
{
  FILE *result;
  size_t v6;
  char *v7;

  if (a2)
  {
    result = CACopyObjectDescription(a2, 0);
    *(_QWORD *)this = result;
  }
  else
  {
    v6 = strlen(__s) + 20;
    v7 = (char *)malloc_type_malloc(v6, 0x409FA1A0uLL);
    *(_QWORD *)this = v7;
    return (FILE *)snprintf(v7, v6, "NULL %s", __s);
  }
  return result;
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioObjectPropertyAddress *a2)
{
  char v4[16];
  char v5[16];
  char v6[16];
  char __str[48];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  Format4CC(a2->mSelector, v6, 0x10uLL);
  Format4CC(a2->mScope, v5, 0x10uLL);
  Format4CC(a2->mElement, v4, 0x10uLL);
  snprintf(__str, 0x30uLL, "%s/%s/%s", v6, v5, v4);
  CAFormatter::Init(this, __str);
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioObjectPropertyAddress *a2, unsigned int *a3, int a4)
{
  FILE *v8;
  FILE *v9;
  signed int mSelector;
  int16x8_t v11;
  void **v12;
  FILE *v13;
  unsigned int v14;
  int v15;
  void *__p[2];
  char v17;
  FILE *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char __str[16];
  int16x8_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v8 = funopen(&v18, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  v9 = v8;
  v18 = v8;
  mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1885762591)
  {
    if (mSelector == 1718839674)
    {
      fprintf(v8, "(UInt32)0x%x");
      goto LABEL_20;
    }
    if (mSelector == 1768845421)
      goto LABEL_13;
    if (mSelector != 1853059700)
      goto LABEL_22;
    fprintf(v8, "(Float64)%g");
    goto LABEL_20;
  }
  if (mSelector > 1936092531)
  {
    if (mSelector == 1936092532)
      goto LABEL_14;
    if (mSelector != 1987013741)
      goto LABEL_22;
    fprintf(v8, "(Float32)%g");
LABEL_20:
    v13 = CAMemoryStream::cstr(&v18);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    *(_QWORD *)this = v13;
    goto LABEL_21;
  }
  if (mSelector != 1885762592)
  {
    if (mSelector != 1919120504)
    {
LABEL_22:
      if (a4 >= 1)
      {
        v14 = a4 + 1;
        do
        {
          v15 = *(unsigned __int8 *)a3;
          a3 = (unsigned int *)((char *)a3 + 1);
          fprintf(v9, "%02x", v15);
          --v14;
        }
        while (v14 > 1);
      }
      goto LABEL_20;
    }
LABEL_13:
    Format4CC(*a3, __str, 0xCuLL);
    fputs(__str, v9);
    goto LABEL_20;
  }
LABEL_14:
  v11 = *((int16x8_t *)a3 + 1);
  *(_OWORD *)__str = *(_OWORD *)a3;
  v23 = v11;
  v24 = *((_QWORD *)a3 + 4);
  CA::StreamDescription::AsString((CA::StreamDescription *)__p, __str, *(double *)__str, v11);
  if (v17 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  CAFormatter::Init(this, (const char *)v12);
  if (v17 < 0)
    operator delete(__p[0]);
LABEL_21:
  fclose(v18);
  free(v19);
}

void sub_18F0DDA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, FILE *a16, void *a17)
{
  fclose(a16);
  free(a17);
  _Unwind_Resume(a1);
}

uint64_t CAFormatter::DumpAudioBuffer(FILE *this, __sFILE *a2, const char *a3, const AudioBuffer *a4, int a5, int a6, int a7)
{
  int v10;
  int v13;
  unsigned __int8 *v14;
  const char *v15;
  const char *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;

  v10 = (int)a4;
  fprintf(this, "%s%5dbytes %dch @ %p", (const char *)a2, *((_DWORD *)a3 + 1), *(_DWORD *)a3, *((const void **)a3 + 1));
  if (a5 >= v10)
    a5 = v10;
  if (a5)
  {
    if (*((_QWORD *)a3 + 1))
    {
      fputc(58, this);
      v13 = *(_DWORD *)a3 * a5;
      if (v13 >= 1)
      {
        v14 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
        if (a7)
          v15 = " %06X";
        else
          v15 = " %8d";
        if (a7)
          v16 = " %02X";
        else
          v16 = " %4d";
        v17 = v13 + 1;
        do
        {
          switch(a6)
          {
            case -10:
            case 0:
              v14 += 4;
              goto LABEL_28;
            case -4:
              v14 += 4;
              goto LABEL_26;
            case -3:
              v19 = (v14[2] << 16) | (v14[1] << 8);
              v20 = *v14;
              goto LABEL_24;
            case -2:
              if (!a7)
                goto LABEL_19;
              goto LABEL_21;
            case -1:
            case 1:
              v18 = *v14++;
              fprintf(this, v16, v18);
              break;
            case 2:
              if (a7)
LABEL_21:
                fprintf(this, " %04X");
              else
LABEL_19:
                fprintf(this, " %6d");
              v14 += 2;
              break;
            case 3:
              v19 = (*v14 << 16) | (v14[1] << 8);
              v20 = v14[2];
LABEL_24:
              fprintf(this, v15, v19 | v20);
              v14 += 3;
              break;
            case 4:
              v14 += 4;
LABEL_26:
              fprintf(this, " %08X");
              break;
            case 10:
              v14 += 4;
LABEL_28:
              fprintf(this, " %6.3f");
              break;
            default:
              break;
          }
          --v17;
        }
        while (v17 > 1);
      }
    }
  }
  return fputc(10, this);
}

uint64_t CAFormatter::DumpAudio(FILE *this, __sFILE *a2, const AudioBuffer *a3, int a4, int a5, const char *a6, const char *a7, const char *a8, const char *a9)
{
  int v9;
  const char *v15;
  const char *v16;
  const char *v17;
  uint64_t result;
  unint64_t v19;
  int *p_r;
  char __str[32];
  uint64_t v22;

  v9 = (int)a7;
  v22 = *MEMORY[0x1E0C80C00];
  v15 = "AudioBufferList";
  v16 = ", ";
  if (a6)
    v15 = a6;
  v17 = "";
  if (a8)
    v17 = a8;
  else
    v16 = "";
  result = fprintf(this, "%s@%p (%d fr%s%s):\n", v15, a2, (_DWORD)a3, v16, v17);
  if (LODWORD(a2->_p))
  {
    v19 = 0;
    p_r = &a2->_r;
    do
    {
      snprintf(__str, 0x20uLL, "    [%2d] ", v19);
      result = CAFormatter::DumpAudioBuffer(this, (__sFILE *)__str, (const char *)p_r, a3, a4, a5, v9);
      ++v19;
      p_r += 4;
    }
    while (v19 < LODWORD(a2->_p));
  }
  return result;
}

void CAFormatter::CAFormatter(CAFormatter *this, __sFILE *a2, const AudioBuffer *a3, AudioStreamBasicDescription *a4, const char *a5, const char *a6)
{
  FILE *v11;
  FILE *v12;
  FILE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char __dst[80];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  AudioFormatString(a4, __dst, 0x50uLL, &v17);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v11 = funopen(&v13, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  CAFormatter::DumpAudio(v11, a2, a3, 8, v17, a5, a6, __dst, (const char *)v11);
  v12 = CAMemoryStream::cstr(&v13);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  *(_QWORD *)this = v12;
  fclose(v13);
  free(v14);
}

void sub_18F0DDEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, FILE *a9, void *a10)
{
  fclose(a9);
  free(a10);
  _Unwind_Resume(a1);
}

_DWORD *AudioFormatString(_DWORD *result, char *__dst, size_t __size, int *a4)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  const char *v12;
  int v13;
  const char *v14;

  v4 = result[2];
  v5 = result[3];
  v6 = result[6];
  v7 = result[7];
  v8 = result[8];
  *a4 = 1;
  *__dst = 0;
  if (v4 == 1819304813)
  {
    if ((v5 & 1) != 0)
    {
      if (v8 == 32)
      {
        if ((v5 & 2) != 0)
        {
          *a4 = 10;
          v12 = "BEF";
        }
        else
        {
          *a4 = -10;
          v12 = "LEF";
        }
        return (_DWORD *)strlcpy(__dst, v12, __size);
      }
    }
    else
    {
      if (!v6)
      {
LABEL_6:
        *a4 = 0;
        return result;
      }
      if ((v5 & 0x20) != 0)
      {
        v7 = 1;
      }
      else if (!v7)
      {
        goto LABEL_6;
      }
      v13 = v6 / v7;
      *a4 = v13;
      if (v13 >= 1)
      {
        if (((result[3] >> 7) & 0x3F) != 0)
          snprintf(__dst, __size, "%d.%d-bit");
        else
          snprintf(__dst, __size, "%d-bit");
        if ((v5 & 2) != 0)
        {
          v14 = " BEI";
        }
        else
        {
          *a4 = -*a4;
          v14 = " LEI";
        }
        return (_DWORD *)strlcat(__dst, v14, __size);
      }
    }
  }
  return result;
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioBufferList *a2, unsigned int a3, const AudioStreamBasicDescription *a4, const char *a5, int a6)
{
  FILE *v10;
  FILE *v11;
  const char *v12;
  uint64_t v13;
  unsigned int v14;
  AudioStreamBasicDescription *v15;
  uint64_t mChannelsPerFrame;
  uint64_t v17;
  const AudioStreamBasicDescription *v18;
  UInt32 *p_mBytesPerFrame;
  uint64_t v20;
  AudioBuffer *v21;
  UInt32 v22;
  int v23;
  const AudioBuffer *v24;
  FILE *v25;
  const AudioStreamBasicDescription *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  UInt32 *p_mBytesPerPacket;
  int v33;
  FILE *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __sFILE __str;

  *(_QWORD *)(&__str._ub._size + 1) = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v10 = funopen(&v34, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  v11 = v10;
  v34 = v10;
  v12 = "AudioBufferList";
  if (a5)
    v12 = a5;
  fprintf(v10, "%s@%p:\n", v12, a2);
  if (a3)
  {
    v13 = 0;
    v14 = 0;
    v28 = a3;
    v27 = a4;
    while (1)
    {
      v15 = (AudioStreamBasicDescription *)&a4[v13];
      if ((v15->mFormatFlags & 0x20) == 0)
        break;
      mChannelsPerFrame = a4[v13].mChannelsPerFrame;
      if ((_DWORD)mChannelsPerFrame)
        goto LABEL_8;
LABEL_15:
      v14 += mChannelsPerFrame;
      if (++v13 == v28)
        goto LABEL_16;
    }
    mChannelsPerFrame = 1;
LABEL_8:
    v17 = 0;
    v18 = &a4[v13];
    p_mBytesPerFrame = &v18->mBytesPerFrame;
    v30 = v13;
    p_mBytesPerPacket = &v18->mBytesPerPacket;
    v20 = v14;
    v29 = v14;
    v21 = &a2->mBuffers[v14];
    do
    {
      if (v20 + v17 >= (unint64_t)a2->mNumberBuffers)
        break;
      v33 = 0;
      AudioFormatString(v15, (char *)&__str._cookie + 2, 0x32uLL, &v33);
      v22 = *p_mBytesPerFrame;
      if (*p_mBytesPerFrame)
      {
        v23 = v33;
      }
      else
      {
        v22 = *p_mBytesPerPacket;
        v23 = 4;
      }
      v24 = (const AudioBuffer *)(v21->mDataByteSize / v22);
      snprintf((char *)&__str, 0x32uLL, "    [%2d] %-12.12s %5dfr ", v20 + v17, (const char *)&__str._cookie + 2, v21->mDataByteSize / v22);
      CAFormatter::DumpAudioBuffer(v11, &__str, (const char *)v21, v24, 8, v23, a6);
      ++v17;
      ++v21;
    }
    while (mChannelsPerFrame != v17);
    a4 = v27;
    v13 = v30;
    v14 = v29;
    goto LABEL_15;
  }
LABEL_16:
  v25 = CAMemoryStream::cstr(&v34);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  *(_QWORD *)this = v25;
  fclose(v34);
  free(v35);
}

void sub_18F0DE264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, FILE *a20,void *a21)
{
  fclose(a20);
  free(a21);
  _Unwind_Resume(a1);
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioBufferList *a2)
{
  FILE *v4;
  FILE *v5;
  const char *v6;
  unint64_t v7;
  void **p_mData;
  FILE *v9;
  FILE *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v4 = funopen(&v10, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  v5 = v4;
  v10 = v4;
  v6 = "";
  if (a2->mNumberBuffers > 1)
    v6 = "s";
  fprintf(v4, "%d buffer%s: ", a2->mNumberBuffers, v6);
  if (a2->mNumberBuffers)
  {
    v7 = 0;
    p_mData = &a2->mBuffers[0].mData;
    do
    {
      if (v7)
        fwrite("; ", 2uLL, 1uLL, v5);
      fprintf(v5, "%p-%p (%d)", *p_mData, (char *)*p_mData + *((unsigned int *)p_mData - 1), *((_DWORD *)p_mData - 1));
      ++v7;
      p_mData += 2;
    }
    while (v7 < a2->mNumberBuffers);
  }
  v9 = CAMemoryStream::cstr(&v10);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  *(_QWORD *)this = v9;
  fclose(v10);
  free(v11);
}

void sub_18F0DE3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, FILE *a13, void *a14)
{
  fclose(a13);
  free(a14);
  _Unwind_Resume(a1);
}

void CAFormatter::CAFormatter(CAFormatter *this, const AudioStreamPacketDescription *a2, int a3, int a4)
{
  FILE *v8;
  FILE *v9;
  const char *v10;
  int v12;
  int i;
  FILE *v14;
  FILE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v8 = funopen(&v15, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  v9 = v8;
  v15 = v8;
  if (a2)
  {
    v10 = "";
    if (a3 > 1)
      v10 = "s";
    fprintf(v8, "%d packet desc%s:\n", a3, v10);
    if (a3 <= a4 || a4 <= 0)
      v12 = a3;
    else
      v12 = a4;
    if (v12 >= 1)
    {
      for (i = 0; i != v12; ++i)
      {
        fprintf(v9, "  [%2d] byte offsets %d - %d (%d)", i, a2->mStartOffset, a2->mDataByteSize + a2->mStartOffset, a2->mDataByteSize);
        if (a2->mVariableFramesInPacket)
          fprintf(v9, "; %d fr\n", a2->mVariableFramesInPacket);
        else
          fputc(10, v9);
        ++a2;
      }
    }
  }
  else
  {
    fwrite("packet descs NULL\n", 0x12uLL, 1uLL, v8);
  }
  v14 = CAMemoryStream::cstr(&v15);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  *(_QWORD *)this = v14;
  fclose(v15);
  free(v16);
}

void sub_18F0DE554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, FILE *a13, void *a14)
{
  fclose(a13);
  free(a14);
  _Unwind_Resume(a1);
}

void CAAUScopeElementFormatter::CAAUScopeElementFormatter(CAAUScopeElementFormatter *this, unsigned int a2, int a3)
{
  char *v6;

  *(_QWORD *)this = 0;
  v6 = (char *)malloc_type_malloc(0x40uLL, 0x409FA1A0uLL);
  *(_QWORD *)this = v6;
  if (!(a3 | a2))
    strcpy(v6, "Global scope");
  if (a2 > 5)
    snprintf(v6, 0x40uLL, "scope %d, element %d");
  else
    snprintf(v6, 0x40uLL, "%s scope, element %d");
}

void sub_18F0DE61C(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    free(*v1);
  _Unwind_Resume(exception_object);
}

void CAHexDumpFormatter::CAHexDumpFormatter(CAHexDumpFormatter *this, unsigned __int8 *a2, int a3)
{
  FILE *v5;
  int v6;
  unint64_t v7;
  unint64_t i;
  unint64_t j;
  int v10;
  BOOL v11;
  FILE *v12;
  FILE *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v5 = funopen(&v14, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  v14 = v5;
  if (a3 >= 1)
  {
    if (a3 >= 1024)
      v6 = 1024;
    else
      v6 = a3;
    do
    {
      if (v6 >= 16)
        v7 = 16;
      else
        v7 = v6;
      fprintf(v5, "%08lX:  ", a2);
      for (i = 0; i != 16; ++i)
      {
        if (i >= v7)
          fwrite("   ", 3uLL, 1uLL, v5);
        else
          fprintf(v5, "%02X ", a2[i]);
      }
      for (j = 0; j != 16; ++j)
      {
        if (j >= v7)
        {
          v10 = 32;
        }
        else if (a2[j] - 32 >= 0x5F)
        {
          v10 = 46;
        }
        else
        {
          v10 = a2[j];
        }
        fputc(v10, v5);
      }
      fputc(10, v5);
      a2 += 16;
      v11 = __OFSUB__(v6, 16);
      v6 -= 16;
    }
    while (!((v6 < 0) ^ v11 | (v6 == 0)));
  }
  v12 = CAMemoryStream::cstr(&v14);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  *(_QWORD *)this = v12;
  fclose(v14);
  free(v15);
}

void sub_18F0DE7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, FILE *a11, void *a12)
{
  fclose(a11);
  free(a12);
  if (*a10)
    free(*a10);
  _Unwind_Resume(a1);
}

void sub_18F0DEAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,id location)
{
  void *v22;
  void *v23;
  void *v24;

  _Block_object_dispose(&a15, 8);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_18F0DEC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

void sub_18F0DED8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18F0DEE8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12165(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12166(uint64_t a1)
{

}

void sub_18F0DF060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void DSPGraph::Graph::~Graph(DSPGraph::Graph *this)
{
  DSPGraph::Graph::~Graph(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t **i;
  _QWORD *j;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t k;
  DSPGraph::Graph *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void **v16;

  *(_QWORD *)this = &off_1E2911C30;
  DSPGraph::Graph::uninitialize((uint64_t)this);
  DSPGraph::Graph::unconfigure(this);
  for (i = (uint64_t **)*((_QWORD *)this + 3); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *))(*i[2] + 568))(i[2]);
  for (j = (_QWORD *)*((_QWORD *)this + 8); j; j = (_QWORD *)*j)
  {
    v4 = j[2];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*((_QWORD *)this + 9))
  {
    v5 = (_QWORD *)*((_QWORD *)this + 8);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    *((_QWORD *)this + 8) = 0;
    v7 = *((_QWORD *)this + 7);
    if (v7)
    {
      for (k = 0; k != v7; ++k)
        *(_QWORD *)(*((_QWORD *)this + 6) + 8 * k) = 0;
    }
    *((_QWORD *)this + 9) = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>>>::~__hash_table((uint64_t)this + 1056);
  v9 = (DSPGraph::Graph *)*((_QWORD *)this + 131);
  if (v9 == (DSPGraph::Graph *)((char *)this + 1024))
  {
    v10 = 4;
    v9 = (DSPGraph::Graph *)((char *)this + 1024);
  }
  else
  {
    if (!v9)
      goto LABEL_19;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_19:
  std::unique_ptr<DSPGraph::Graph::profiler_t>::reset[abi:ne180100]((uint64_t *)this + 127, 0);
  v16 = (void **)((char *)this + 992);
  std::vector<DSPGraph::Graph::GraphBridge>::__destroy_vector::operator()[abi:ne180100](&v16);
  *((_QWORD *)this + 118) = &off_1E290D5B8;
  std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::~__hash_table((uint64_t)this + 952);
  v16 = (void **)((char *)this + 904);
  std::vector<std::unique_ptr<DSPGraph::Subset>>::__destroy_vector::operator()[abi:ne180100](&v16);
  std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::~__hash_table((uint64_t)this + 784);
  std::unique_ptr<DSPGraph::RenderObserverList<DSPGraph::Box>>::reset[abi:ne180100]((uint64_t *)this + 85, 0);
  std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::~__hash_table((uint64_t)this + 640);
  std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::~__hash_table((uint64_t)this + 600);
  std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>>>::~__hash_table((uint64_t)this + 560);
  std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>>>::~__hash_table((uint64_t)this + 520);
  v11 = (void *)*((_QWORD *)this + 62);
  if (v11)
  {
    *((_QWORD *)this + 63) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 59);
  if (v12)
  {
    *((_QWORD *)this + 60) = v12;
    operator delete(v12);
  }
  if (*((char *)this + 455) < 0)
    operator delete(*((void **)this + 54));
  if (*((char *)this + 431) < 0)
    operator delete(*((void **)this + 51));
  v13 = (void *)*((_QWORD *)this + 38);
  if (v13)
  {
    *((_QWORD *)this + 39) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 35);
  if (v14)
  {
    *((_QWORD *)this + 36) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 32);
  if (v15)
  {
    *((_QWORD *)this + 33) = v15;
    operator delete(v15);
  }
  std::__hash_table<std::unique_ptr<DSPGraph::IsoGroup>,std::hash<std::unique_ptr<DSPGraph::IsoGroup>>,std::equal_to<std::unique_ptr<DSPGraph::IsoGroup>>,std::allocator<std::unique_ptr<DSPGraph::IsoGroup>>>::~__hash_table((uint64_t)this + 216);
  v16 = (void **)((char *)this + 192);
  std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100](&v16);
  std::mutex::~mutex((std::mutex *)this + 2);
  std::__hash_table<std::unique_ptr<DSPGraph::Box>,std::hash<std::unique_ptr<DSPGraph::Box>>,std::equal_to<std::unique_ptr<DSPGraph::Box>>,std::allocator<std::unique_ptr<DSPGraph::Box>>>::~__hash_table((uint64_t)this + 8);
}

const char *DSPGraph::Graph::ClassName(DSPGraph::Graph *this)
{
  return "Graph";
}

uint64_t DSPGraph::Graph::print(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8;
  uint64_t **i;
  uint64_t **j;
  uint64_t *v11;
  uint64_t *k;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  if ((int)a3 >= 1)
  {
    v4 = a4;
    v7 = result;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a2, a4, 1);
    v8 = v4 + 4;
    DSPGraph::printi(a2, v4 + 4, "initialized %d\n", *(unsigned __int8 *)(v7 + 762));
    DSPGraph::printi(a2, v4 + 4, "can process in place %d\n", *(unsigned __int8 *)(v7 + 763));
    DSPGraph::printi(a2, v4 + 4, "num boxes %zu\n", *(_QWORD *)(v7 + 32));
    DSPGraph::printi(a2, v4 + 4, "num wires %zu\n", *(_QWORD *)(v7 + 72));
    DSPGraph::printi(a2, v4 + 4, "num internal buffers %zu\n", (uint64_t)(*(_QWORD *)(v7 + 200) - *(_QWORD *)(v7 + 192)) >> 3);
    DSPGraph::printi(a2, v4 + 4, "num sorted groups %zu\n", (uint64_t)(*(_QWORD *)(v7 + 264) - *(_QWORD *)(v7 + 256)) >> 3);
    DSPGraph::printi(a2, v4 + 4, "num graph inputs %zu\n", (uint64_t)(*(_QWORD *)(v7 + 288) - *(_QWORD *)(v7 + 280)) >> 3);
    result = DSPGraph::printi(a2, v4 + 4, "num graph outputs %zu\n", (uint64_t)(*(_QWORD *)(v7 + 312) - *(_QWORD *)(v7 + 304)) >> 3);
    if ((_DWORD)a3 != 1)
    {
      if (*(_QWORD *)(v7 + 32))
      {
        result = DSPGraph::printi(a2, v4 + 4, "BOXES\n");
        for (i = *(uint64_t ***)(v7 + 24); i; i = (uint64_t **)*i)
          result = (*(uint64_t (**)(uint64_t *, _QWORD *, uint64_t, _QWORD))(*i[2] + 24))(i[2], a2, a3, (v4 + 8));
      }
      if ((int)a3 >= 4)
      {
        if (*(_QWORD *)(v7 + 72))
        {
          result = DSPGraph::printi(a2, v4 + 4, "WIRES\n");
          for (j = *(uint64_t ***)(v7 + 64); j; j = (uint64_t **)*j)
            result = (*(uint64_t (**)(uint64_t *, _QWORD *, uint64_t, _QWORD))(*j[2] + 24))(j[2], a2, a3, (v4 + 8));
        }
        if ((int)a3 >= 5 && *(_QWORD *)(v7 + 200) != *(_QWORD *)(v7 + 192))
        {
          result = DSPGraph::printi(a2, v4 + 4, "INTERNAL BUFFERS\n");
          v11 = *(uint64_t **)(v7 + 192);
          for (k = *(uint64_t **)(v7 + 200);
                v11 != k;
                result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v13 + 24))(v13, a2, a3, (v4 + 8)))
          {
            v13 = *v11++;
          }
        }
      }
      v35 = v4;
      if (*(_QWORD *)(v7 + 288) != *(_QWORD *)(v7 + 280))
      {
        result = DSPGraph::printi(a2, v4 + 4, "GRAPH INPUTS\n");
        v14 = *(uint64_t **)(v7 + 280);
        v15 = *(uint64_t **)(v7 + 288);
        if (v14 != v15)
        {
          v16 = 0;
          do
          {
            v17 = *v14++;
            DSPGraph::printi(a2, v4 + 8, "%3zu box ", v16);
            result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v17 + 32))(v17, a2, 0, 1);
            ++v16;
          }
          while (v14 != v15);
        }
      }
      if (*(_QWORD *)(v7 + 312) != *(_QWORD *)(v7 + 304))
      {
        result = DSPGraph::printi(a2, v8, "GRAPH OUTPUTS\n");
        v18 = *(uint64_t **)(v7 + 304);
        v19 = *(uint64_t **)(v7 + 312);
        if (v18 != v19)
        {
          v20 = 0;
          do
          {
            v21 = *v18++;
            DSPGraph::printi(a2, v4 + 8, "%3zu box ", v20);
            result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v21 + 32))(v21, a2, 0, 1);
            ++v20;
          }
          while (v18 != v19);
        }
      }
      if (*(_QWORD *)(v7 + 352))
      {
        result = DSPGraph::printi(a2, v8, "GRAPH SINKS\n");
        v22 = *(_QWORD **)(v7 + 344);
        if (v22)
        {
          v23 = 0;
          do
          {
            v24 = v22[2];
            DSPGraph::printi(a2, v35 + 8, "%3zu box ", v23);
            result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v24 + 32))(v24, a2, 0, 1);
            ++v23;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
      }
      if ((int)a3 >= 4)
      {
        if (*(_QWORD *)(v7 + 544))
        {
          result = DSPGraph::printi(a2, v8, "GRAPH PARAMETERS\n");
          v25 = *(uint64_t **)(v7 + 536);
          if (v25)
          {
            v26 = 0;
            do
            {
              v27 = "out";
              if (!*((_BYTE *)v25 + 32))
                v27 = "in";
              result = DSPGraph::printi(a2, v35 + 8, "%3zu %u %f %s\n", v26, *((_DWORD *)v25 + 4), *((float *)v25 + 7), v27);
              v29 = v25[5];
              v28 = v25[6];
              while (v29 != v28)
              {
                result = DSPGraph::ParameterEndpoint::print(v29, a2, v35 + 12);
                v29 += 24;
              }
              ++v26;
              v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
        }
        if (*(_QWORD *)(v7 + 584))
        {
          result = DSPGraph::printi(a2, v8, "GRAPH PROPERTIES\n");
          v30 = *(uint64_t **)(v7 + 576);
          if (v30)
          {
            v31 = 0;
            do
            {
              if (*((_BYTE *)v30 + 64))
                v32 = "out";
              else
                v32 = "in";
              result = DSPGraph::printi(a2, v35 + 8, "%3zu %u %s\n", v31, *((_DWORD *)v30 + 4), v32);
              v33 = v30[9];
              v34 = v30[10];
              while (v33 != v34)
              {
                result = DSPGraph::PropertyEndpoint::print(v33, a2, v35 + 12);
                v33 += 24;
              }
              ++v31;
              v30 = (uint64_t *)*v30;
            }
            while (v30);
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,DSPGraph::Graph::profiler_t>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *std::unique_ptr<DSPGraph::Graph::profiler_t>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    boost::circular_buffer<double,std::allocator<double>>::destroy(v2);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void std::vector<DSPGraph::Graph::GraphBridge>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<DSPGraph::Graph::GraphBridge,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<DSPGraph::Subset>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<DSPGraph::Subset>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,DSPGraph::Graph::GraphProperty>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[5];
      if (v4)
      {
        v2[6] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t std::__hash_table<std::unique_ptr<DSPGraph::IsoGroup>,std::hash<std::unique_ptr<DSPGraph::IsoGroup>>,std::equal_to<std::unique_ptr<DSPGraph::IsoGroup>>,std::allocator<std::unique_ptr<DSPGraph::IsoGroup>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::unique_ptr<DSPGraph::IsoGroup>,std::hash<std::unique_ptr<DSPGraph::IsoGroup>>,std::equal_to<std::unique_ptr<DSPGraph::IsoGroup>>,std::allocator<std::unique_ptr<DSPGraph::IsoGroup>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::unique_ptr<DSPGraph::Box>,std::hash<std::unique_ptr<DSPGraph::Box>>,std::equal_to<std::unique_ptr<DSPGraph::Box>>,std::allocator<std::unique_ptr<DSPGraph::Box>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[2];
      v2[2] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,DSPGraph::Graph::GraphProperty>,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      *(_QWORD *)(a1 + 24) = v3;
      operator delete(v3);
    }
  }
}

void std::default_delete<DSPGraph::Subset>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x193FFE460);
}

void std::__destroy_at[abi:ne180100]<DSPGraph::Graph::GraphBridge,0>(uint64_t a1)
{
  void *v2;
  void **v3;

  v3 = (void **)(a1 + 32);
  std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void boost::circular_buffer<double,std::allocator<double>>::destroy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)a1;
  v6 = v3 - v2;
  v7 = (unint64_t)(v3 - (_QWORD)v5) >> 3;
  if (v4 < v6 >> 3)
    v7 = 0;
  *(_QWORD *)(a1 + 16) = v2 + 8 * (v4 - v7);
  if (v5)
    operator delete(v5);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,DSPGraph::Graph::profiler_t>,0>(uint64_t a1)
{
  boost::circular_buffer<double,std::allocator<double>>::destroy(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string __token;

  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_18F0DFDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t DSPGraph::intPtrHash(DSPGraph *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v2 = 9 * ((v1 + ~(v1 << 13)) ^ ((v1 + ~(v1 << 13)) >> 8));
  v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return v3 ^ (v3 >> 31);
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver>>>::lf_read_synchronized_write(caulk::concurrent::details::lf_read_sync_write_impl *a1)
{
  uint64_t result;

  result = caulk::concurrent::details::lf_read_sync_write_impl::lf_read_sync_write_impl(a1);
  *(_WORD *)(result + 8) = 1;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

const char *DSPGraph::InternalBuffer::ClassName(DSPGraph::InternalBuffer *this)
{
  return "InternalBuffer";
}

uint64_t _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_5GraphEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(caulk::concurrent::details::lf_read_sync_write_impl *a1, uint64_t *a2)
{
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  result = caulk::concurrent::details::lf_read_sync_write_impl::begin_access(a1);
  if (*((_BYTE *)a1 + result + 8))
  {
    v5 = (char *)a1 + 24 * result;
    v6 = *((_QWORD *)v5 + 2);
    v7 = *((_QWORD *)v5 + 3);
    if (v6 == v7)
      return caulk::concurrent::details::lf_read_sync_write_impl::end_access(a1);
    do
    {
      v8 = *((_DWORD *)a2 + 2);
      v11 = *a2;
      v10 = v8;
      v9 = *(_QWORD *)(v6 + 32);
      if (!v9)
        std::__throw_bad_function_call[abi:ne180100]();
      result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v9 + 48))(v9, &v11, &v10);
      v6 += 48;
    }
    while (v6 != v7);
    if (a1)
      return caulk::concurrent::details::lf_read_sync_write_impl::end_access(a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *DSPGraph::Graph::processInPlace(DSPGraph::Graph *this, uint64_t a2)
{
  _QWORD *i;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (!*((_BYTE *)this + 762))
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "processInPlace");
    std::string::basic_string[abi:ne180100]<0>(&v6, "not initialized");
    DSPGraph::ThrowException(1768843553, &v8, 556, &v7, &v6);
  }
  if (((*((_QWORD *)this + 36) - *((_QWORD *)this + 35)) & 0x7FFFFFFF8) != 8
    || ((*((_QWORD *)this + 39) - *((_QWORD *)this + 38)) & 0x7FFFFFFF8) != 8)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "processInPlace");
    std::string::basic_string[abi:ne180100]<0>(&v6, "graph must have one input and one output to process in-place.");
    DSPGraph::ThrowException(1768975393, &v8, 560, &v7, &v6);
  }
  *(_QWORD *)(DSPGraph::Graph::in(this, 0) + 848) = a2;
  *(_QWORD *)(DSPGraph::Graph::out(this, 0) + 848) = a2;
  if (*((_BYTE *)this + 764))
  {
    for (i = (_QWORD *)*((_QWORD *)this + 8); i; i = (_QWORD *)*i)
      DSPGraph::SimpleABL::set(*(_QWORD *)(i[2] + 56) + 80, *(AudioBufferList **)(a2 + 72));
  }
  DSPGraph::Graph::checkCurSliceTicks((uint64_t)this, (unsigned int *)a2, (unsigned int *)a2);
  DSPGraph::Graph::processAll(this);
  return DSPGraph::Graph::propagateFlagsAndTimeStamp(this, a2);
}

void sub_18F0E00B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::addRenderCallback(uint64_t a1, uint64_t a2, unsigned int a3, signed int a4)
{
  os_unfair_lock_s *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64x2_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79[3];
  char v80;
  int v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[3];
  _QWORD *v86;
  _QWORD v87[3];
  _QWORD *v88;
  unsigned int v89;
  _BYTE v90[24];
  _BYTE *v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  int64x2_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v6 = *(os_unfair_lock_s **)(a1 + 680);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v85, a2);
  do
  {
    v7 = __ldaxr((unsigned int *)&DSPGraph::RenderObserverList<DSPGraph::Graph>::add(std::function<void ()(DSPGraph::Graph*,unsigned int)>,DSPGraph::RenderCallbackType,DSPGraph::RenderCallbackOrder)::sToken);
    v8 = v7 + 1;
  }
  while (__stlxr(v7 + 1, (unsigned int *)&DSPGraph::RenderObserverList<DSPGraph::Graph>::add(std::function<void ()(DSPGraph::Graph*,unsigned int)>,DSPGraph::RenderCallbackType,DSPGraph::RenderCallbackOrder)::sToken));
  if (!v86)
  {
    v88 = 0;
    v89 = v7 + 1;
    v10 = v90;
LABEL_11:
    v91 = 0;
    v92 = __PAIR64__(a4, a3);
    goto LABEL_18;
  }
  if (v86 == v85)
  {
    v88 = v87;
    (*(void (**)(_QWORD *, _QWORD *))(v85[0] + 24))(v85, v87);
    v9 = v88;
  }
  else
  {
    v9 = (_QWORD *)(*(uint64_t (**)(void))(*v86 + 16))();
    v88 = v9;
  }
  v89 = v8;
  v10 = v90;
  if (!v9)
    goto LABEL_11;
  if (v9 == v87)
  {
    v91 = v90;
    (*(void (**)(_QWORD *, _BYTE *))(v87[0] + 24))(v87, v90);
  }
  else
  {
    v91 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
  }
  v11 = v88;
  v92 = __PAIR64__(a4, a3);
  if (v88 == v87)
  {
    v12 = 4;
    v11 = v87;
  }
  else
  {
    if (!v88)
      goto LABEL_18;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_18:
  if (a3)
    v13 = v6 + 16;
  else
    v13 = v6;
  v79[0] = (uint64_t)v13;
  v79[1] = 0;
  v79[2] = (uint64_t)&v13[1];
  v80 = 1;
  os_unfair_lock_lock(v13 + 1);
  v81 = caulk::concurrent::details::lf_read_sync_write_impl::begin_mutate((caulk::concurrent::details::lf_read_sync_write_impl *)v13);
  v82 = v81 == 0;
  v14 = caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver>>>::mutator::copy_previous(v79);
  v15 = v14;
  v17 = *v14;
  v16 = (char *)v14[1];
  v18 = (uint64_t)&v16[-*v14];
  if (v16 == (char *)*v14)
  {
    v20 = v14[1];
  }
  else
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 4);
    v20 = *v14;
    do
    {
      v21 = v19 >> 1;
      v22 = v20 + 48 * (v19 >> 1);
      v23 = *(_DWORD *)(v22 + 44);
      v24 = v22 + 48;
      v19 += ~(v19 >> 1);
      if (v23 > a4)
        v19 = v21;
      else
        v20 = v24;
    }
    while (v19);
  }
  v25 = (v20 - v17) / 48;
  v26 = (char *)(v17 + 48 * v25);
  v27 = v14[2];
  if ((unint64_t)v16 < v27)
  {
    if (v26 == v16)
    {
      *(_DWORD *)v16 = v89;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v17 + 48 * v25 + 8, (uint64_t)v90);
      *(_QWORD *)(v17 + 48 * v25 + 40) = v92;
      v15[1] = (uint64_t)(v16 + 48);
      goto LABEL_92;
    }
    v77 = (v20 - v17) / 48;
    v28 = v16 - 48;
    if ((unint64_t)v16 < 0x30)
    {
      v31 = v14[1];
    }
    else
    {
      v29 = 48 * v25 + 16 * ((v16 - (v26 + 48)) >> 4) + v17 + 8;
      v30 = v16 - 48;
      v31 = v14[1];
      do
      {
        *(_DWORD *)v31 = *(_DWORD *)(v29 - 8);
        std::__function::__value_func<void ()(DSPGraph::Graph *,unsigned int)>::__value_func[abi:ne180100](v31 + 8, v29);
        *(_QWORD *)(v31 + 40) = *((_QWORD *)v30 + 5);
        v30 += 48;
        v31 += 48;
        v29 += 48;
      }
      while (v30 < v16);
    }
    v15[1] = v31;
    if (v16 != v26 + 48)
    {
      v39 = 0;
      do
      {
        *(_DWORD *)&v16[v39 - 48] = *(_DWORD *)&v28[v39 - 48];
        std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](&v16[v39 - 40], (uint64_t)&v28[v39 - 40]);
        *(_QWORD *)&v16[v39 - 8] = *(_QWORD *)(v17 + 16 * ((v16 - (v26 + 48)) >> 4) + 48 * v77 + v39 - 8);
        v39 -= 48;
      }
      while (-16 * ((v16 - (v26 + 48)) >> 4) != v39);
    }
    v41 = v26 <= (char *)&v89 && v15[1] > (unint64_t)&v89;
    *(_DWORD *)v26 = v89;
    v42 = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v97, (uint64_t)&v90[48 * v41]);
    v10 = v90;
    v43 = (_QWORD *)(v17 + 48 * v77 + 8);
    if (v43 != &v97)
    {
      v44 = v99;
      v45 = *(_QWORD **)(v17 + 48 * v77 + 32);
      if (v99 == &v97)
      {
        if (v45 == v43)
        {
          ((void (*)(uint64_t, unint64_t *))v97[3])(v42, &v93);
          (*(void (**)(_QWORD *))(*v99 + 32))(v99);
          v99 = 0;
          (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v17 + 48 * v77 + 32) + 24))(*(_QWORD *)(v17 + 48 * v77 + 32), &v97);
          (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 48 * v77 + 32) + 32))(*(_QWORD *)(v17 + 48 * v77 + 32));
          *(_QWORD *)(v17 + 48 * v77 + 32) = 0;
          v99 = &v97;
          (*(void (**)(unint64_t *, _QWORD *))(v93 + 24))(&v93, v43);
          (*(void (**)(unint64_t *))(v93 + 32))(&v93);
        }
        else
        {
          ((void (*)(uint64_t, uint64_t))v97[3])(v42, v17 + 48 * v77 + 8);
          (*(void (**)(_QWORD *))(*v99 + 32))(v99);
          v99 = *(_QWORD **)(v17 + 48 * v77 + 32);
        }
        *(_QWORD *)(v17 + 48 * v77 + 32) = v17 + 48 * v77 + 8;
      }
      else if (v45 == v43)
      {
        (*(void (**)(uint64_t, _QWORD **))(*v43 + 24))(v17 + 48 * v77 + 8, &v97);
        (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 48 * v77 + 32) + 32))(*(_QWORD *)(v17 + 48 * v77 + 32));
        *(_QWORD *)(v17 + 48 * v77 + 32) = v99;
        v99 = &v97;
      }
      else
      {
        v99 = *(_QWORD **)(v17 + 48 * v77 + 32);
        *(_QWORD *)(v17 + 48 * v77 + 32) = v44;
      }
    }
    v70 = v99;
    if (v99 == &v97)
    {
      v71 = 4;
      v70 = &v97;
    }
    else
    {
      if (!v99)
      {
LABEL_91:
        *(_QWORD *)(v17 + 48 * v77 + 40) = v92;
        goto LABEL_92;
      }
      v71 = 5;
    }
    (*(void (**)(void))(*v70 + 8 * v71))();
    goto LABEL_91;
  }
  v32 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 4) + 1;
  if (v32 > 0x555555555555555)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v17) >> 4);
  if (2 * v33 > v32)
    v32 = 2 * v33;
  if (v33 >= 0x2AAAAAAAAAAAAAALL)
    v34 = 0x555555555555555;
  else
    v34 = v32;
  v96 = v15 + 2;
  if (v34)
    v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v34);
  else
    v35 = 0;
  v36 = v34 + 48 * v25;
  v93 = v34;
  *(_QWORD *)&v94 = v36;
  *((_QWORD *)&v94 + 1) = v36;
  v95 = v34 + 48 * v35;
  v78 = (v20 - v17) / 48;
  if (v25 == v35)
  {
    if (v20 - v17 < 1)
    {
      if (v20 == v17)
        v46 = 1;
      else
        v46 = 2 * v25;
      v100 = v15 + 2;
      v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v46);
      v48 = v47;
      v49 = &v47[48 * (v46 >> 2)];
      v51 = &v47[48 * v50];
      if (*((_QWORD *)&v94 + 1) == (_QWORD)v94)
      {
        v57 = vdupq_n_s64(v94);
        v52 = &v47[48 * (v46 >> 2)];
      }
      else
      {
        v52 = &v49[*((_QWORD *)&v94 + 1) - v94];
        v53 = (uint64_t)&v47[48 * (v46 >> 2) + 8];
        v54 = v94 + 8;
        do
        {
          *(_DWORD *)(v53 - 8) = *(_DWORD *)(v54 - 8);
          v55 = std::__function::__value_func<void ()(DSPGraph::Graph *,unsigned int)>::__value_func[abi:ne180100](v53, v54);
          *(_QWORD *)(v55 + 32) = *(_QWORD *)(v54 + 32);
          v56 = v55 + 40;
          v53 = v55 + 48;
          v54 += 48;
        }
        while ((char *)v56 != v52);
        v57 = (int64x2_t)v94;
      }
      v58 = (_QWORD *)v93;
      v59 = (_QWORD *)v95;
      v93 = (unint64_t)v48;
      *(_QWORD *)&v94 = v49;
      v98 = v57;
      *((_QWORD *)&v94 + 1) = v52;
      v95 = (unint64_t)v51;
      v97 = v58;
      v99 = v59;
      std::__split_buffer<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver> &>::~__split_buffer((uint64_t)&v97);
      v36 = *((_QWORD *)&v94 + 1);
    }
    else
    {
      v37 = v25 + 2;
      if (v25 >= -1)
        v37 = v25 + 1;
      v38 = -3 * (v37 >> 1);
      v36 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver *>(v34 + 48 * v25, v36, v36 - 48 * (v37 >> 1));
      *(_QWORD *)&v94 = v94 + 16 * v38;
      *((_QWORD *)&v94 + 1) = v36;
    }
  }
  *(_DWORD *)v36 = v89;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v36 + 8, (uint64_t)v90);
  *(_QWORD *)(v36 + 40) = v92;
  v60 = v94;
  v61 = *((_QWORD *)&v94 + 1) + 48;
  *((_QWORD *)&v94 + 1) += 48;
  v62 = (char *)*v15;
  if (v26 != (char *)*v15)
  {
    v63 = 0;
    do
    {
      *(_DWORD *)(v60 + v63 - 48) = *(_DWORD *)&v26[v63 - 48];
      std::__function::__value_func<void ()(DSPGraph::Graph *,unsigned int)>::__value_func[abi:ne180100](v60 + v63 - 40, (uint64_t)&v26[v63 - 40]);
      *(_QWORD *)(v60 + v63 - 8) = *(_QWORD *)&v26[v63 - 8];
      v63 -= 48;
    }
    while (&v26[v63] != v62);
    v60 += v63;
    v61 = *((_QWORD *)&v94 + 1);
  }
  *(_QWORD *)&v94 = v60;
  v64 = (char *)v15[1];
  v83 = v61;
  v84 = v61;
  v97 = v15 + 2;
  v98.i64[0] = (uint64_t)&v83;
  v98.i64[1] = (uint64_t)&v84;
  LOBYTE(v99) = 0;
  if (v26 != v64)
  {
    v65 = v17 + 48 * v78 + 8;
    do
    {
      *(_DWORD *)v61 = *(_DWORD *)(v65 - 8);
      std::__function::__value_func<void ()(DSPGraph::Graph *,unsigned int)>::__value_func[abi:ne180100](v61 + 8, v65);
      *(_QWORD *)(v61 + 40) = *(_QWORD *)(v65 + 32);
      v61 = v84 + 48;
      v84 += 48;
      v66 = v65 + 40;
      v65 += 48;
    }
    while ((char *)v66 != v64);
  }
  LOBYTE(v99) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v97);
  v67 = *v15;
  *v15 = v94;
  v93 = v67;
  *(_QWORD *)&v94 = v67;
  v68 = v15[1];
  v15[1] = v61;
  *((_QWORD *)&v94 + 1) = v68;
  v69 = v15[2];
  v15[2] = v95;
  v95 = v69;
  std::__split_buffer<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver> &>::~__split_buffer((uint64_t)&v93);
LABEL_92:
  caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::mutator::~mutator((uint64_t)v79);
  v72 = v89;
  if (v91 == v90)
  {
    v73 = 4;
  }
  else
  {
    if (!v91)
      goto LABEL_97;
    v73 = 5;
    v10 = v91;
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v73))(v10);
LABEL_97:
  v74 = v86;
  if (v86 == v85)
  {
    v75 = 4;
    v74 = v85;
    goto LABEL_101;
  }
  if (v86)
  {
    v75 = 5;
LABEL_101:
    (*(void (**)(void))(*v74 + 8 * v75))();
  }
  return v72;
}

void sub_18F0E0938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t *caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver>>>::mutator::copy_previous(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  _QWORD v15[3];
  char v16;
  void **v17[3];
  char v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *result;
  v2 = *((unsigned int *)result + 8);
  if (*(_BYTE *)(*result + v2 + 8))
  {
    v3 = result;
    v4 = v1 + 24 * v2;
    v14 = 0uLL;
    v15[0] = 0;
    v5 = *(_QWORD *)(v4 + 16);
    v6 = *(_QWORD *)(v4 + 24);
    v15[2] = &v14;
    v16 = 0;
    if (v6 != v5)
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 4);
      if (v7 >= 0x555555555555556)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      *(_QWORD *)&v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v7);
      *((_QWORD *)&v14 + 1) = v14;
      v15[0] = v14 + 48 * v8;
      v19 = v14;
      v20 = v14;
      v17[0] = (void **)v15;
      v17[1] = (void **)&v19;
      v17[2] = (void **)&v20;
      v18 = 0;
      v9 = v5 + 8;
      v10 = v14;
      do
      {
        v11 = v9 - 8;
        *(_DWORD *)v10 = *(_DWORD *)(v9 - 8);
        std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](v10 + 8, v9);
        *(_QWORD *)(v10 + 40) = *(_QWORD *)(v9 + 32);
        v10 = v20 + 48;
        v20 += 48;
        v9 += 48;
      }
      while (v11 + 48 != v6);
      v18 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v17);
      *((_QWORD *)&v14 + 1) = v10;
      v1 = *v3;
    }
    v12 = *((unsigned int *)v3 + 9);
    v13 = (_QWORD *)(v1 + 24 * v12 + 16);
    if (*(_BYTE *)(v1 + 8 + v12))
    {
      v17[0] = (void **)(v1 + 24 * v12 + 16);
      std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100](v17);
    }
    else
    {
      *(_BYTE *)(v1 + 8 + v12) = 1;
    }
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    *(_OWORD *)v13 = v14;
    v13[2] = v15[0];
    v14 = 0uLL;
    v15[0] = 0;
    v3[1] = (uint64_t)v13;
    v17[0] = (void **)&v14;
    std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100](v17);
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_18F0E0B90(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<void ()(DSPGraph::Graph *,unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1 + 8;
    do
    {
      v6 = v5 - 8;
      *(_DWORD *)a3 = *(_DWORD *)(v5 - 8);
      std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((_QWORD *)(a3 + 8), v5);
      *(_QWORD *)(a3 + 40) = *(_QWORD *)(v5 + 32);
      a3 += 48;
      v5 += 48;
    }
    while (v6 + 48 != a2);
  }
  return a3;
}

uint64_t DSPGraph::Graph::removeRenderCallback(DSPGraph::Graph *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v25[3];
  char v26;
  int v27;
  _BOOL4 v28;
  _QWORD v29[2];
  int v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;
  int v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;

  v3 = 0;
  v38 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 85) + 64;
  v29[0] = *((_QWORD *)this + 85);
  v29[1] = v4;
  do
  {
    v5 = (os_unfair_lock_s *)v29[v3];
    v25[0] = (uint64_t)v5;
    v25[1] = 0;
    v25[2] = (uint64_t)&v5[1];
    v26 = 1;
    os_unfair_lock_lock(v5 + 1);
    v27 = caulk::concurrent::details::lf_read_sync_write_impl::begin_mutate((caulk::concurrent::details::lf_read_sync_write_impl *)v5);
    v28 = v27 == 0;
    v6 = caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver>>>::mutator::copy_previous(v25);
    v8 = *v6;
    v7 = v6[1];
    while (1)
    {
      if (v8 == v7)
      {
        v12 = v7;
        goto LABEL_12;
      }
      v34 = *(_DWORD *)v8;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v35, v8 + 8);
      v37 = *(_QWORD *)(v8 + 40);
      v9 = v34;
      v10 = v36;
      if (v36 == v35)
      {
        v10 = v35;
        v11 = 4;
      }
      else
      {
        if (!v36)
          goto LABEL_9;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_9:
      if (v9 == a2)
        break;
      v8 += 48;
    }
    v12 = v7;
    if (v8 != v7)
    {
      v19 = v8 + 48;
      v12 = v8;
      while (v19 != v7)
      {
        v30 = *(_DWORD *)v19;
        std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v31, v19 + 8);
        v33 = *(_QWORD *)(v19 + 40);
        v20 = v30;
        v21 = v32;
        if (v32 == v31)
        {
          v21 = v31;
          v22 = 4;
        }
        else
        {
          if (!v32)
            goto LABEL_31;
          v22 = 5;
        }
        (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_31:
        if (v20 != a2)
        {
          *(_DWORD *)v12 = *(_DWORD *)v19;
          std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((_QWORD *)(v12 + 8), v19 + 8);
          *(_QWORD *)(v12 + 40) = *(_QWORD *)(v19 + 40);
          v12 += 48;
        }
        v19 += 48;
      }
    }
LABEL_12:
    v13 = v6[1];
    if (v12 != v13)
    {
      v14 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Graph>::RenderObserver *>(v13, v6[1], v12);
      v15 = v6[1];
      if (v15 != v14)
      {
        while (1)
        {
          v16 = *(_QWORD **)(v15 - 16);
          if ((_QWORD *)(v15 - 40) == v16)
            break;
          if (v16)
          {
            v17 = 5;
LABEL_18:
            (*(void (**)(void))(*v16 + 8 * v17))();
          }
          v15 -= 48;
          if (v15 == v14)
            goto LABEL_20;
        }
        v16 = (_QWORD *)(v15 - 40);
        v17 = 4;
        goto LABEL_18;
      }
LABEL_20:
      v6[1] = v14;
    }
    result = caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::mutator::~mutator((uint64_t)v25);
    ++v3;
  }
  while (v3 != 2);
  do
    v23 = atomic_load((unsigned __int8 *)this + 464);
  while ((v23 & 1) != 0);
  return result;
}

void sub_18F0E0EF8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::unique_ptr<DSPGraph::IsoGroup>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  uint64_t v3;

  if (a1)
  {
    v3 = __p[2];
    __p[2] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

const char *DSPGraph::IsoGroup::ClassName(DSPGraph::IsoGroup *this)
{
  return "IsoGroup";
}

_QWORD *std::__function::__value_func<void ()(double)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18F0E115C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::pair<std::string const,DSPGraph::Graph::profiler_t>::~pair(uint64_t a1)
{
  boost::circular_buffer<double,std::allocator<double>>::destroy(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__function::__func<DSPGraph::Graph::initializeProfilers(void)::$_1,std::allocator<DSPGraph::Graph::initializeProfilers(void)::$_1>,void ()(double)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::Graph::initializeProfilers(void)::$_1,std::allocator<DSPGraph::Graph::initializeProfilers(void)::$_1>,void ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2917028;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<DSPGraph::Graph::initializeProfilers(void)::$_1,std::allocator<DSPGraph::Graph::initializeProfilers(void)::$_1>,void ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2917028;
  a2[1] = v2;
  return result;
}

double **std::__function::__func<DSPGraph::Graph::initializeProfilers(void)::$_1,std::allocator<DSPGraph::Graph::initializeProfilers(void)::$_1>,void ()(double)>::operator()(uint64_t a1, double *a2)
{
  return boost::circular_buffer<double,std::allocator<double>>::push_back_impl<double const&>(*(double ***)(a1 + 8), *a2);
}

double **boost::circular_buffer<double,std::allocator<double>>::push_back_impl<double const&>(double **result, double a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;

  v2 = *result;
  v3 = result[1];
  v4 = result[4];
  if (v4 == (double *)(v3 - *result))
  {
    if (v3 != v2)
    {
      v5 = result[3];
      *v5 = a2;
      v6 = v5 + 1;
      if (v6 != v3)
        v2 = v6;
      result[2] = v2;
      result[3] = v2;
    }
  }
  else
  {
    v7 = result[3];
    *v7 = a2;
    v8 = v7 + 1;
    if (v8 != v3)
      v2 = v8;
    result[3] = v2;
    result[4] = (double *)((char *)v4 + 1);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,DSPGraph::Graph::profiler_t>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,DSPGraph::Graph::profiler_t>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__function::__func<DSPGraph::Graph::initializeProfilers(void)::$_0,std::allocator<DSPGraph::Graph::initializeProfilers(void)::$_0>,void ()(double)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::Graph::initializeProfilers(void)::$_0,std::allocator<DSPGraph::Graph::initializeProfilers(void)::$_0>,void ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2916FE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<DSPGraph::Graph::initializeProfilers(void)::$_0,std::allocator<DSPGraph::Graph::initializeProfilers(void)::$_0>,void ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2916FE0;
  a2[1] = v2;
  return result;
}

double **std::__function::__func<DSPGraph::Graph::initializeProfilers(void)::$_0,std::allocator<DSPGraph::Graph::initializeProfilers(void)::$_0>,void ()(double)>::operator()(uint64_t a1, double *a2)
{
  return boost::circular_buffer<double,std::allocator<double>>::push_back_impl<double const&>(*(double ***)(*(_QWORD *)(a1 + 8) + 1016), *a2);
}

void std::__function::__func<DSPGraph::Graph::initializeWithFlags(unsigned int)::$_0,std::allocator<DSPGraph::Graph::initializeWithFlags(unsigned int)::$_0>,void ()(DSPGraph::Box *,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_DWORD *std::__function::__func<DSPGraph::Graph::initializeWithFlags(unsigned int)::$_0,std::allocator<DSPGraph::Graph::initializeWithFlags(unsigned int)::$_0>,void ()(DSPGraph::Box *,unsigned int)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E2917070;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<DSPGraph::Graph::initializeWithFlags(unsigned int)::$_0,std::allocator<DSPGraph::Graph::initializeWithFlags(unsigned int)::$_0>,void ()(DSPGraph::Box *,unsigned int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E2917070;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void std::__function::__func<DSPGraph::Graph::initializeWithFlags(unsigned int)::$_0,std::allocator<DSPGraph::Graph::initializeWithFlags(unsigned int)::$_0>,void ()(DSPGraph::Box *,unsigned int)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  vDSP_Length v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v25;
  __int128 __C;
  uint8_t buf[4];
  _QWORD *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 88);
  v4 = *(_QWORD *)(*a2 + 96) - v3;
  if ((v4 & 0x1FFFFFFFE0) != 0)
  {
    v6 = 0;
    v7 = v4 >> 5;
    do
    {
      if (v7 <= v6)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&__C, "out");
        v23 = (_QWORD *)(v2 + 32);
        if (*(char *)(v2 + 55) < 0)
          v23 = (_QWORD *)*v23;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v25, v23, (uint64_t)(*(_QWORD *)(v2 + 96) - *(_QWORD *)(v2 + 88)) >> 5, v6);
        DSPGraph::ThrowException(1919837985, (__int128 *)buf, 1418, &__C, &v25);
      }
      v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v3 + 32 * v6) + 40))(v3 + 32 * v6);
      v9 = *(_QWORD *)(v2 + 88);
      if (v6 >= (*(_QWORD *)(v2 + 96) - v9) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&__C, "out");
        v24 = (_QWORD *)(v2 + 32);
        if (*(char *)(v2 + 55) < 0)
          v24 = (_QWORD *)*v24;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v25, v24, (uint64_t)(*(_QWORD *)(v2 + 96) - *(_QWORD *)(v2 + 88)) >> 5, v6);
        DSPGraph::ThrowException(1919837985, (__int128 *)buf, 1418, &__C, &v25);
      }
      v10 = *(_DWORD *)(*(_QWORD *)(v8 + 56) + 100);
      v11 = v10
          / *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v9 + 32 * v6) + 40))(v9 + 32 * v6)
                                  + 120)
                      + 16);
      if ((*(_BYTE *)(a1 + 8) & 0x20) != 0)
        v12 = 1;
      else
        v12 = v11;
      v13 = *(_QWORD *)(v2 + 88);
      if (v6 >= (*(_QWORD *)(v2 + 96) - v13) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&__C, "out");
        v22 = (_QWORD *)(v2 + 32);
        if (*(char *)(v2 + 55) < 0)
          v22 = (_QWORD *)*v22;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v25, v22, (uint64_t)(*(_QWORD *)(v2 + 96) - *(_QWORD *)(v2 + 88)) >> 5, v6);
        DSPGraph::ThrowException(1919837985, (__int128 *)buf, 1418, &__C, &v25);
      }
      v14 = *(_DWORD **)(*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v13 + 32 * v6) + 40))(v13 + 32 * v6)
                                   + 56)
                       + 80);
      if (*v14)
      {
        v15 = 0;
        v16 = 4;
        do
        {
          LODWORD(__C) = 0;
          vDSP_sve(*(const float **)&v14[v16], 1, (float *)&__C, v12);
          if ((__C & 0x7FFFFFFF) >= 0x7F800000)
          {
            if (DSPGraph::getLog(void)::onceToken != -1)
              goto LABEL_23;
            while (1)
            {
              v17 = DSPGraph::getLog(void)::gLog;
              if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_FAULT))
              {
                v18 = (_QWORD *)(v2 + 32);
                if (*(char *)(v2 + 55) < 0)
                  v18 = (_QWORD *)*v18;
                v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
                *(_DWORD *)buf = 136315906;
                v28 = v18;
                v29 = 2080;
                v30 = v19;
                v31 = 1024;
                v32 = v6;
                v33 = 1024;
                v34 = v15;
                _os_log_fault_impl(&dword_18EE07000, v17, OS_LOG_TYPE_FAULT, "DSPGraph assertion failure: Box: %s (%s), non finite detected at output port: %u, buffer: %u", buf, 0x22u);
              }
              v20 = (const char *)(v2 + 32);
              if (*(char *)(v2 + 55) < 0)
                v20 = *(const char **)v20;
              v21 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
              snprintf((char *)buf, 0x400uLL, "DSPGraph assertion failure: Box: %s (%s), non finite detected at output port: %u, buffer: %u", v20, v21, v6, v15);
              __break(1u);
LABEL_23:
              dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_12270);
            }
          }
          ++v15;
          v16 += 4;
        }
        while (v15 < *v14);
      }
      ++v6;
      v3 = *(_QWORD *)(v2 + 88);
      v7 = (*(_QWORD *)(v2 + 96) - v3) >> 5;
    }
    while (v6 < v7);
  }
}

void sub_18F0E1754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_12282()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

BOOL DSPGraph::Graph::has(DSPGraph::Graph *this, DSPGraph::Box *a2)
{
  DSPGraph::Box **v2;

  v2 = (DSPGraph::Box **)((char *)this + 24);
  do
    v2 = (DSPGraph::Box **)*v2;
  while (v2 && v2[2] != a2);
  return v2 != 0;
}

unint64_t DSPGraph::Graph::add(uint64_t a1, unint64_t a2, const std::string *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*(_BYTE *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "add");
    std::string::basic_string[abi:ne180100]<0>(&v5, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v7, 992, &v6, &v5);
  }
  DSPGraph::Graph::addBox(a1, a2, a3, 0, 0);
  return a2;
}

void sub_18F0E189C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

unsigned __int8 **DSPGraph::Graph::addSubset(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 **result;
  std::string *v5;
  std::string *v6;
  std::string **v7;
  unint64_t v8;
  _QWORD *v9;
  std::string **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::string **v16;
  char *v17;
  std::string **v18;
  std::string *v19;
  std::string **v20;
  uint64_t v21;
  uint64_t v22;

  result = DSPGraph::Graph::getSubset((uint64_t)a1, (unsigned __int8 *)a2);
  if (!result)
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
    *(_OWORD *)&v6[1].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v6[1].__r_.__value_.__l.__data_ = 0u;
    LODWORD(v6[2].__r_.__value_.__r.__words[1]) = 1065353216;
    v7 = (std::string **)a1[114];
    v8 = a1[115];
    if ((unint64_t)v7 >= v8)
    {
      v10 = (std::string **)a1[113];
      v11 = v7 - v10;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v13 = v8 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = (std::string **)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v6;
      v9 = v16 + 1;
      if (v7 == v10)
      {
        a1[113] = v16;
        a1[114] = v9;
        a1[115] = v17;
      }
      else
      {
        v18 = v16;
        do
        {
          v19 = *--v7;
          *v7 = 0;
          *--v18 = v19;
        }
        while (v7 != v10);
        v7 = (std::string **)a1[113];
        v20 = (std::string **)a1[114];
        a1[113] = v18;
        a1[114] = v9;
        a1[115] = v17;
        while (v20 != v7)
        {
          v22 = (uint64_t)*--v20;
          v21 = v22;
          *v20 = 0;
          if (v22)
            std::default_delete<DSPGraph::Subset>::operator()[abi:ne180100](v21);
        }
      }
      if (v7)
        operator delete(v7);
      v7 = v16;
    }
    else
    {
      *v7 = v6;
      v9 = v7 + 1;
    }
    a1[114] = v9;
    return (unsigned __int8 **)*v7;
  }
  return result;
}

void sub_18F0E1A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10B2C40A8EE1826);
  _Unwind_Resume(a1);
}

unsigned __int8 **DSPGraph::Graph::getSubset(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 ***v2;
  unsigned __int8 ***v3;
  uint64_t v5;
  size_t v6;
  const void *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;

  v2 = *(unsigned __int8 ****)(a1 + 904);
  v3 = *(unsigned __int8 ****)(a1 + 912);
  if (v2 == v3)
  {
LABEL_20:
    if (v2 != v3)
      return *v2;
  }
  else
  {
    v5 = a2[23];
    v7 = *(const void **)a2;
    v6 = *((_QWORD *)a2 + 1);
    if ((v5 & 0x80u) == 0)
      v8 = (unsigned __int8 *)a2[23];
    else
      v8 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    do
    {
      v9 = (unsigned __int8 *)*((unsigned __int8 *)*v2 + 23);
      v10 = (char)v9;
      if ((char)v9 < 0)
        v9 = (*v2)[1];
      if (v8 == v9)
      {
        if (v10 >= 0)
          v11 = (unsigned __int8 *)*v2;
        else
          v11 = **v2;
        if ((v5 & 0x80) != 0)
        {
          if (!memcmp(v7, v11, v6))
            goto LABEL_20;
        }
        else
        {
          if (!(_DWORD)v5)
            goto LABEL_20;
          v12 = a2;
          v13 = v5;
          while (*v12 == *v11)
          {
            ++v12;
            ++v11;
            if (!--v13)
              goto LABEL_20;
          }
        }
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return 0;
}

unsigned __int8 *DSPGraph::Graph::box(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;

  result = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(a1 + 784), a2);
  if (result)
    return (unsigned __int8 *)*((_QWORD *)result + 5);
  return result;
}

uint64_t DSPGraph::Graph::box(int8x8_t *this, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *i;
  unint64_t v7;

  v2 = this[104];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *(_QWORD **)(*(_QWORD *)&this[103] + 8 * v4);
    if (v5)
    {
      for (i = (_QWORD *)*v5; i; i = (_QWORD *)*i)
      {
        v7 = i[1];
        if (v7 == a2)
        {
          if (i[2] == a2)
            return i[3];
        }
        else
        {
          if (v3.u32[0] > 1uLL)
          {
            if (v7 >= *(_QWORD *)&v2)
              v7 %= *(_QWORD *)&v2;
          }
          else
          {
            v7 &= *(_QWORD *)&v2 - 1;
          }
          if (v7 != v4)
            return 0;
        }
      }
    }
  }
  return 0;
}

uint64_t DSPGraph::Graph::analyzer(std::mutex *this, unint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = this + 2;
  std::mutex::lock(this + 2);
  v5 = std::__hash_table<std::__hash_value_type<unsigned long long,DSPGraph::Analyzer *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,DSPGraph::Analyzer *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,DSPGraph::Analyzer *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,DSPGraph::Analyzer *>>>::find<unsigned long long>(&this[13].__m_.__opaque[24], a2);
  if (v5)
    v6 = v5[3];
  else
    v6 = 0;
  std::mutex::unlock(v4);
  return v6;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,DSPGraph::Analyzer *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,DSPGraph::Analyzer *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,DSPGraph::Analyzer *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,DSPGraph::Analyzer *>>>::find<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void DSPGraph::Graph::addAnalyzer(std::mutex *this, unint64_t a2)
{
  unint64_t v2;
  std::mutex *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  _QWORD *v39;
  _QWORD *j;
  unint64_t v41;
  _QWORD *v42;
  float v43;
  float v44;
  _BOOL8 v45;
  unint64_t v46;
  unint64_t v47;
  int8x8_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint8x8_t v54;
  unint64_t v55;
  uint8x8_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  void *v64;
  void *v65;

  v5 = this + 2;
  std::mutex::lock(this + 2);
  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)&this[1].__m_.__opaque[24];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v2 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v2 = v8 % v9;
    }
    else
    {
      v2 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)&this[1].__m_.__opaque[16] + 8 * v2);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            goto LABEL_74;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v2)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a2;
  v15 = (float)(unint64_t)(*(_QWORD *)&this[1].__m_.__opaque[40] + 1);
  v16 = *(float *)&this[1].__m_.__opaque[48];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *(_QWORD *)&this[1].__m_.__opaque[24];
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)&this[1].__m_.__opaque[40] / *(float *)&this[1].__m_.__opaque[48]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)&this[1].__m_.__opaque[24];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(void **)&this[1].__m_.__opaque[16];
          *(_QWORD *)&this[1].__m_.__opaque[16] = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *(int8x8_t *)&this[1].__m_.__opaque[24] = prime;
          do
            *(_QWORD *)(*(_QWORD *)&this[1].__m_.__opaque[16] + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = *(_QWORD **)&this[1].__m_.__opaque[32];
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)&this[1].__m_.__opaque[16] + 8 * v25) = (char *)this + 104;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  v32 = *(_QWORD *)&this[1].__m_.__opaque[16];
                  if (!*(_QWORD *)(v32 + 8 * v31))
                  {
                    *(_QWORD *)(v32 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)&this[1].__m_.__opaque[16] + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)&this[1].__m_.__opaque[16] + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v64 = *(void **)&this[1].__m_.__opaque[16];
        *(_QWORD *)&this[1].__m_.__opaque[16] = 0;
        if (v64)
          operator delete(v64);
        v9 = 0;
        *(_QWORD *)&this[1].__m_.__opaque[24] = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
  }
  v33 = *(_QWORD *)&this[1].__m_.__opaque[16];
  v34 = *(_QWORD **)(v33 + 8 * v2);
  if (v34)
  {
    *v14 = *v34;
LABEL_72:
    *v34 = v14;
    goto LABEL_73;
  }
  *v14 = *(_QWORD *)&this[1].__m_.__opaque[32];
  *(_QWORD *)&this[1].__m_.__opaque[32] = v14;
  *(_QWORD *)(v33 + 8 * v2) = (char *)this + 104;
  if (*v14)
  {
    v35 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)&this[1].__m_.__opaque[16] + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*(_QWORD *)&this[1].__m_.__opaque[40];
LABEL_74:
  v36 = *(_QWORD *)(a2 + 88);
  v37 = *(_QWORD *)&this[13].__m_.__opaque[32];
  if (v37)
  {
    v38 = (uint8x8_t)vcnt_s8((int8x8_t)v37);
    v38.i16[0] = vaddlv_u8(v38);
    if (v38.u32[0] > 1uLL)
    {
      v9 = *(_QWORD *)(a2 + 88);
      if (v36 >= v37)
        v9 = v36 % v37;
    }
    else
    {
      v9 = (v37 - 1) & v36;
    }
    v39 = *(_QWORD **)(*(_QWORD *)&this[13].__m_.__opaque[24] + 8 * v9);
    if (v39)
    {
      for (j = (_QWORD *)*v39; j; j = (_QWORD *)*j)
      {
        v41 = j[1];
        if (v41 == v36)
        {
          if (j[2] == v36)
            goto LABEL_147;
        }
        else
        {
          if (v38.u32[0] > 1uLL)
          {
            if (v41 >= v37)
              v41 %= v37;
          }
          else
          {
            v41 &= v37 - 1;
          }
          if (v41 != v9)
            break;
        }
      }
    }
  }
  v42 = operator new(0x20uLL);
  *v42 = 0;
  v42[1] = v36;
  v42[2] = v36;
  v42[3] = a2;
  v43 = (float)(unint64_t)(*(_QWORD *)&this[13].__m_.__opaque[48] + 1);
  v44 = *(float *)&this[14].__m_.__sig;
  if (!v37 || (float)(v44 * (float)v37) < v43)
  {
    v45 = 1;
    if (v37 >= 3)
      v45 = (v37 & (v37 - 1)) != 0;
    v46 = v45 | (2 * v37);
    v47 = vcvtps_u32_f32(v43 / v44);
    if (v46 <= v47)
      v48 = (int8x8_t)v47;
    else
      v48 = (int8x8_t)v46;
    if (*(_QWORD *)&v48 == 1)
    {
      v48 = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&v48 & (*(_QWORD *)&v48 - 1)) != 0)
    {
      v48 = (int8x8_t)std::__next_prime(*(_QWORD *)&v48);
      v37 = *(_QWORD *)&this[13].__m_.__opaque[32];
    }
    if (*(_QWORD *)&v48 > v37)
      goto LABEL_103;
    if (*(_QWORD *)&v48 < v37)
    {
      v55 = vcvtps_u32_f32((float)*(unint64_t *)&this[13].__m_.__opaque[48] / *(float *)&this[14].__m_.__sig);
      if (v37 < 3 || (v56 = (uint8x8_t)vcnt_s8((int8x8_t)v37), v56.i16[0] = vaddlv_u8(v56), v56.u32[0] > 1uLL))
      {
        v55 = std::__next_prime(v55);
      }
      else
      {
        v57 = 1 << -(char)__clz(v55 - 1);
        if (v55 >= 2)
          v55 = v57;
      }
      if (*(_QWORD *)&v48 <= v55)
        v48 = (int8x8_t)v55;
      if (*(_QWORD *)&v48 >= v37)
      {
        v37 = *(_QWORD *)&this[13].__m_.__opaque[32];
      }
      else
      {
        if (v48)
        {
LABEL_103:
          if (*(_QWORD *)&v48 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v49 = operator new(8 * *(_QWORD *)&v48);
          v50 = *(void **)&this[13].__m_.__opaque[24];
          *(_QWORD *)&this[13].__m_.__opaque[24] = v49;
          if (v50)
            operator delete(v50);
          v51 = 0;
          *(int8x8_t *)&this[13].__m_.__opaque[32] = v48;
          do
            *(_QWORD *)(*(_QWORD *)&this[13].__m_.__opaque[24] + 8 * v51++) = 0;
          while (*(_QWORD *)&v48 != v51);
          v52 = *(_QWORD **)&this[13].__m_.__opaque[40];
          if (v52)
          {
            v53 = v52[1];
            v54 = (uint8x8_t)vcnt_s8(v48);
            v54.i16[0] = vaddlv_u8(v54);
            if (v54.u32[0] > 1uLL)
            {
              if (v53 >= *(_QWORD *)&v48)
                v53 %= *(_QWORD *)&v48;
            }
            else
            {
              v53 &= *(_QWORD *)&v48 - 1;
            }
            *(_QWORD *)(*(_QWORD *)&this[13].__m_.__opaque[24] + 8 * v53) = (char *)this + 880;
            v58 = (_QWORD *)*v52;
            if (*v52)
            {
              do
              {
                v59 = v58[1];
                if (v54.u32[0] > 1uLL)
                {
                  if (v59 >= *(_QWORD *)&v48)
                    v59 %= *(_QWORD *)&v48;
                }
                else
                {
                  v59 &= *(_QWORD *)&v48 - 1;
                }
                if (v59 != v53)
                {
                  v60 = *(_QWORD *)&this[13].__m_.__opaque[24];
                  if (!*(_QWORD *)(v60 + 8 * v59))
                  {
                    *(_QWORD *)(v60 + 8 * v59) = v52;
                    goto LABEL_128;
                  }
                  *v52 = *v58;
                  *v58 = **(_QWORD **)(*(_QWORD *)&this[13].__m_.__opaque[24] + 8 * v59);
                  **(_QWORD **)(*(_QWORD *)&this[13].__m_.__opaque[24] + 8 * v59) = v58;
                  v58 = v52;
                }
                v59 = v53;
LABEL_128:
                v52 = v58;
                v58 = (_QWORD *)*v58;
                v53 = v59;
              }
              while (v58);
            }
          }
          v37 = (unint64_t)v48;
          goto LABEL_132;
        }
        v65 = *(void **)&this[13].__m_.__opaque[24];
        *(_QWORD *)&this[13].__m_.__opaque[24] = 0;
        if (v65)
          operator delete(v65);
        v37 = 0;
        *(_QWORD *)&this[13].__m_.__opaque[32] = 0;
      }
    }
LABEL_132:
    if ((v37 & (v37 - 1)) != 0)
    {
      if (v36 >= v37)
        v9 = v36 % v37;
      else
        v9 = v36;
    }
    else
    {
      v9 = (v37 - 1) & v36;
    }
  }
  v61 = *(_QWORD *)&this[13].__m_.__opaque[24];
  v62 = *(_QWORD **)(v61 + 8 * v9);
  if (v62)
  {
    *v42 = *v62;
LABEL_145:
    *v62 = v42;
    goto LABEL_146;
  }
  *v42 = *(_QWORD *)&this[13].__m_.__opaque[40];
  *(_QWORD *)&this[13].__m_.__opaque[40] = v42;
  *(_QWORD *)(v61 + 8 * v9) = (char *)this + 880;
  if (*v42)
  {
    v63 = *(_QWORD *)(*v42 + 8);
    if ((v37 & (v37 - 1)) != 0)
    {
      if (v63 >= v37)
        v63 %= v37;
    }
    else
    {
      v63 &= v37 - 1;
    }
    v62 = (_QWORD *)(*(_QWORD *)&this[13].__m_.__opaque[24] + 8 * v63);
    goto LABEL_145;
  }
LABEL_146:
  ++*(_QWORD *)&this[13].__m_.__opaque[48];
LABEL_147:
  std::mutex::unlock(v5);
}

void sub_18F0E2538(_Unwind_Exception *a1)
{
  std::mutex *v1;
  void *v2;

  operator delete(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void DSPGraph::Graph::removeAnalyzer(std::mutex *this, DSPGraph::Analyzer *a2)
{
  std::mutex *v4;
  char *v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v4 = this + 2;
  std::mutex::lock(this + 2);
  v5 = &this[1].__m_.__opaque[32];
  while (1)
  {
    v5 = *(char **)v5;
    if (!v5)
      break;
    if (*(_QWORD *)(*((_QWORD *)v5 + 2) + 88) == *((_QWORD *)a2 + 11))
    {
      v6 = *(int8x8_t *)&this[1].__m_.__opaque[24];
      v7 = *((_QWORD *)v5 + 1);
      v8 = (uint8x8_t)vcnt_s8(v6);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        if (v7 >= *(_QWORD *)&v6)
          v7 %= *(_QWORD *)&v6;
      }
      else
      {
        v7 &= *(_QWORD *)&v6 - 1;
      }
      v9 = *(_QWORD *)&this[1].__m_.__opaque[16];
      v10 = *(char **)(v9 + 8 * v7);
      do
      {
        v11 = v10;
        v10 = *(char **)v10;
      }
      while (v10 != v5);
      if (v11 == &this[1].__m_.__opaque[32])
        goto LABEL_21;
      v12 = *((_QWORD *)v11 + 1);
      if (v8.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v6)
          v12 %= *(_QWORD *)&v6;
      }
      else
      {
        v12 &= *(_QWORD *)&v6 - 1;
      }
      if (v12 != v7)
      {
LABEL_21:
        if (!*(_QWORD *)v5)
          goto LABEL_22;
        v13 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        if (v8.u32[0] > 1uLL)
        {
          if (v13 >= *(_QWORD *)&v6)
            v13 %= *(_QWORD *)&v6;
        }
        else
        {
          v13 &= *(_QWORD *)&v6 - 1;
        }
        if (v13 != v7)
LABEL_22:
          *(_QWORD *)(v9 + 8 * v7) = 0;
      }
      v14 = *(char **)v5;
      if (*(_QWORD *)v5)
      {
        v15 = *((_QWORD *)v14 + 1);
        if (v8.u32[0] > 1uLL)
        {
          if (v15 >= *(_QWORD *)&v6)
            v15 %= *(_QWORD *)&v6;
        }
        else
        {
          v15 &= *(_QWORD *)&v6 - 1;
        }
        if (v15 != v7)
        {
          *(_QWORD *)(*(_QWORD *)&this[1].__m_.__opaque[16] + 8 * v15) = v11;
          v14 = *(char **)v5;
        }
      }
      *(_QWORD *)v11 = v14;
      *(_QWORD *)v5 = 0;
      --*(_QWORD *)&this[1].__m_.__opaque[40];
      operator delete(v5);
      break;
    }
  }
  v16 = &this[13].__m_.__opaque[24];
  v17 = (char *)std::__hash_table<std::__hash_value_type<unsigned long long,DSPGraph::Analyzer *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,DSPGraph::Analyzer *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,DSPGraph::Analyzer *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,DSPGraph::Analyzer *>>>::find<unsigned long long>(&this[13].__m_.__opaque[24], *((_QWORD *)a2 + 11));
  if (v17)
  {
    v18 = *(int8x8_t *)&this[13].__m_.__opaque[32];
    v19 = *((_QWORD *)v17 + 1);
    v20 = (uint8x8_t)vcnt_s8(v18);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      if (v19 >= *(_QWORD *)&v18)
        v19 %= *(_QWORD *)&v18;
    }
    else
    {
      v19 &= *(_QWORD *)&v18 - 1;
    }
    v21 = *(char **)(*(_QWORD *)v16 + 8 * v19);
    do
    {
      v22 = v21;
      v21 = *(char **)v21;
    }
    while (v21 != v17);
    if (v22 == &this[13].__m_.__opaque[40])
      goto LABEL_49;
    v23 = *((_QWORD *)v22 + 1);
    if (v20.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&v18)
        v23 %= *(_QWORD *)&v18;
    }
    else
    {
      v23 &= *(_QWORD *)&v18 - 1;
    }
    if (v23 != v19)
    {
LABEL_49:
      if (!*(_QWORD *)v17)
        goto LABEL_50;
      v24 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      if (v20.u32[0] > 1uLL)
      {
        if (v24 >= *(_QWORD *)&v18)
          v24 %= *(_QWORD *)&v18;
      }
      else
      {
        v24 &= *(_QWORD *)&v18 - 1;
      }
      if (v24 != v19)
LABEL_50:
        *(_QWORD *)(*(_QWORD *)v16 + 8 * v19) = 0;
    }
    v25 = *(_QWORD *)v17;
    if (*(_QWORD *)v17)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v20.u32[0] > 1uLL)
      {
        if (v26 >= *(_QWORD *)&v18)
          v26 %= *(_QWORD *)&v18;
      }
      else
      {
        v26 &= *(_QWORD *)&v18 - 1;
      }
      if (v26 != v19)
      {
        *(_QWORD *)(*(_QWORD *)v16 + 8 * v26) = v22;
        v25 = *(_QWORD *)v17;
      }
    }
    *(_QWORD *)v22 = v25;
    *(_QWORD *)v17 = 0;
    --*(_QWORD *)&this[13].__m_.__opaque[48];
    operator delete(v17);
  }
  std::mutex::unlock(v4);
}

DSPGraph::Wire *DSPGraph::Graph::connect(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, DSPGraph *a6)
{
  uint64_t *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  const AudioStreamBasicDescription *v15;
  uint64_t *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  std::string *v21;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  __int128 v34;
  __int128 v35;

  if ((_DWORD)a4)
  {
    v12 = 0;
  }
  else
  {
    v13 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(a1 + 640), a2);
    if (v13)
      v12 = (uint64_t *)(v13 + 40);
    else
      v12 = 0;
  }
  v14 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(a1 + 784), a2);
  if (v14)
    v15 = (const AudioStreamBasicDescription *)*((_QWORD *)v14 + 5);
  else
    v15 = 0;
  if (!((unint64_t)v15 | (unint64_t)v12))
  {
    std::string::basic_string[abi:ne180100]<0>(&v35, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v34, "connect");
    std::operator+<char>();
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v31, &v30, "\" index ");
    std::to_string(&v29, a4);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v29;
    else
      v21 = (std::string *)v29.__r_.__value_.__r.__words[0];
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    else
      size = v29.__r_.__value_.__l.__size_;
    v23 = std::string::append(&v31, (const std::string::value_type *)v21, size);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v33, &v32, " not found");
    DSPGraph::ThrowException(1852204065, &v35, 1120, &v34, (__int128 *)&v33);
  }
  if ((_DWORD)a5)
  {
    v16 = 0;
  }
  else
  {
    v17 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(a1 + 640), a3);
    if (v17)
      v16 = (uint64_t *)(v17 + 40);
    else
      v16 = 0;
  }
  v18 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(a1 + 784), a3);
  if (v18)
    v19 = *((_QWORD *)v18 + 5);
  else
    v19 = 0;
  if (!(v19 | (unint64_t)v16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v35, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v34, "connect");
    std::operator+<char>();
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v31, &v30, "\" index ");
    std::to_string(&v29, a5);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v29;
    else
      v25 = (std::string *)v29.__r_.__value_.__r.__words[0];
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    else
      v26 = v29.__r_.__value_.__l.__size_;
    v27 = std::string::append(&v31, (const std::string::value_type *)v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v33, &v32, " not found");
    DSPGraph::ThrowException(1852204065, &v35, 1126, &v34, (__int128 *)&v33);
  }
  return DSPGraph::Graph::connect(a1, v15, v19, a4, a5, a6, v12, v16);
}

void sub_18F0E2AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a39 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  if (a45 < 0)
    operator delete(a40);
  if (*(char *)(v45 - 81) < 0)
    operator delete(*(void **)(v45 - 104));
  _Unwind_Resume(exception_object);
}

DSPGraph::Wire *DSPGraph::Graph::connect(uint64_t a1, const AudioStreamBasicDescription *a2, uint64_t a3, uint64_t a4, uint64_t a5, DSPGraph *this, uint64_t *a7, uint64_t *a8)
{
  DSPGraph::Wire *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (*((_DWORD *)this + 2) == 1718773105 && *((_DWORD *)this + 8) != 64)
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v19, "connect");
    std::string::basic_string[abi:ne180100]<0>(&v18, "frequency domain format should be 64 bits.");
    DSPGraph::ThrowException(1718449215, &v20, 1141, &v19, &v18);
  }
  if (*(double *)this != floor(*(double *)this))
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v19, "connect");
    std::string::basic_string[abi:ne180100]<0>(&v18, "only integer sample rates are supported.");
    DSPGraph::ThrowException(1718449215, &v20, 1145, &v19, &v18);
  }
  if (!DSPGraph::MinimalSafetyCheck(this, a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v19, "connect");
    std::string::basic_string[abi:ne180100]<0>(&v18, "format failed sanity check.");
    DSPGraph::ThrowException(1718449215, &v20, 1148, &v19, &v18);
  }
  v16 = DSPGraph::Graph::connect(a1, (uint64_t)a2, a3, a4, a5, a7, a8);
  DSPGraph::Wire::setLocalFormat((uint64_t)v16, (const AudioStreamBasicDescription *)this, *((unsigned int *)this + 10));
  return v16;
}

void sub_18F0E2D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *DSPGraph::Graph::getJack(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((_QWORD *)(a1 + 640), a2);
  if (v2)
    return v2 + 40;
  else
    return 0;
}

void DSPGraph::Graph::connectParams(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  DSPGraph::Box *v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;

  if (*(_BYTE *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v25, "connectParams");
    std::string::basic_string[abi:ne180100]<0>(&v24, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v22, 1286, &v25, &v24);
  }
  v22 = *(_OWORD *)a2;
  *(_DWORD *)v23 = *(_DWORD *)(a2 + 16);
  *(_OWORD *)&v23[8] = *(_OWORD *)a3;
  *(_DWORD *)&v23[24] = *(_DWORD *)(a3 + 16);
  v9 = *(char **)(a1 + 480);
  v8 = *(_QWORD *)(a1 + 488);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *(char **)(a1 + 472);
    v12 = 0x6DB6DB6DB6DB6DB7 * ((v9 - v11) >> 3) + 1;
    if (v12 > 0x492492492492492)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - (_QWORD)v11) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x249249249249249)
      v14 = 0x492492492492492;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (char *)operator new(56 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * ((v9 - v11) >> 3)];
    v17 = *(_OWORD *)v23;
    *(_OWORD *)v16 = v22;
    *((_OWORD *)v16 + 1) = v17;
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v23[16];
    v16[48] = a4;
    v10 = v16 + 56;
    if (v9 != v11)
    {
      do
      {
        v18 = *(_OWORD *)(v9 - 56);
        v19 = *(_OWORD *)(v9 - 40);
        v20 = *(_OWORD *)(v9 - 24);
        *(v16 - 8) = *(v9 - 8);
        *(_OWORD *)(v16 - 24) = v20;
        *(_OWORD *)(v16 - 40) = v19;
        *(_OWORD *)(v16 - 56) = v18;
        v16 -= 56;
        v9 -= 56;
      }
      while (v9 != v11);
      v9 = *(char **)(a1 + 472);
    }
    *(_QWORD *)(a1 + 472) = v16;
    *(_QWORD *)(a1 + 480) = v10;
    *(_QWORD *)(a1 + 488) = &v15[56 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_OWORD *)v9 = v22;
    *((_OWORD *)v9 + 1) = *(_OWORD *)v23;
    *((_OWORD *)v9 + 2) = *(_OWORD *)&v23[16];
    v9[48] = a4;
    v10 = v9 + 56;
  }
  *(_QWORD *)(a1 + 480) = v10;
  v22 = *(_OWORD *)a2;
  *(_DWORD *)v23 = *(_DWORD *)(a2 + 16);
  v21 = *(DSPGraph::Box **)a3;
  *(_QWORD *)&v23[8] = *(_QWORD *)(a3 + 8);
  *(_DWORD *)&v23[16] = *(_DWORD *)(a3 + 16);
  v23[20] = a4;
  DSPGraph::Box::addParameterTap(v21, (const DSPGraph::ParameterTap *)&v22);
}

void sub_18F0E2FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::connectProperties(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int64x2_t *v21;
  __int128 v23;
  _BYTE v24[32];
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;

  if (*(_BYTE *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v28, "connectProperties");
    std::string::basic_string[abi:ne180100]<0>(&v27, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v23, 1299, &v28, &v27);
  }
  v23 = *(_OWORD *)a2;
  *(_DWORD *)v24 = *(_DWORD *)(a2 + 16);
  *(_OWORD *)&v24[8] = *(_OWORD *)a3;
  *(_DWORD *)&v24[24] = *(_DWORD *)(a3 + 16);
  v9 = *(char **)(a1 + 504);
  v8 = *(_QWORD *)(a1 + 512);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *(char **)(a1 + 496);
    v12 = 0x6DB6DB6DB6DB6DB7 * ((v9 - v11) >> 3) + 1;
    if (v12 > 0x492492492492492)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - (_QWORD)v11) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x249249249249249)
      v14 = 0x492492492492492;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (char *)operator new(56 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * ((v9 - v11) >> 3)];
    v17 = *(_OWORD *)v24;
    *(_OWORD *)v16 = v23;
    *((_OWORD *)v16 + 1) = v17;
    *((_OWORD *)v16 + 2) = *(_OWORD *)&v24[16];
    v16[48] = a4;
    v10 = v16 + 56;
    if (v9 != v11)
    {
      do
      {
        v18 = *(_OWORD *)(v9 - 56);
        v19 = *(_OWORD *)(v9 - 40);
        v20 = *(_OWORD *)(v9 - 24);
        *(v16 - 8) = *(v9 - 8);
        *(_OWORD *)(v16 - 24) = v20;
        *(_OWORD *)(v16 - 40) = v19;
        *(_OWORD *)(v16 - 56) = v18;
        v16 -= 56;
        v9 -= 56;
      }
      while (v9 != v11);
      v9 = *(char **)(a1 + 496);
    }
    *(_QWORD *)(a1 + 496) = v16;
    *(_QWORD *)(a1 + 504) = v10;
    *(_QWORD *)(a1 + 512) = &v15[56 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_OWORD *)v9 = v23;
    *((_OWORD *)v9 + 1) = *(_OWORD *)v24;
    *((_OWORD *)v9 + 2) = *(_OWORD *)&v24[16];
    v9[48] = a4;
    v10 = v9 + 56;
  }
  *(_QWORD *)(a1 + 504) = v10;
  v23 = *(_OWORD *)a2;
  *(_DWORD *)v24 = *(_DWORD *)(a2 + 16);
  v21 = *(int64x2_t **)a3;
  *(_QWORD *)&v24[8] = *(_QWORD *)(a3 + 8);
  *(_DWORD *)&v24[16] = *(_DWORD *)(a3 + 16);
  v24[20] = a4;
  v25 = 0;
  v26 = 0;
  *(_QWORD *)&v24[24] = 0;
  return DSPGraph::Box::addPropertyTap(v21, (const DSPGraph::PropertyTap *)&v23);
}

void sub_18F0E3264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Graph::detach(DSPGraph::Graph *this, DSPGraph::Box *a2)
{
  DSPGraph::Box **v4;
  DSPGraph::Box **v5;
  _QWORD *i;
  DSPGraph::InputPort *v7;
  DSPGraph::InputPort *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *j;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int8x8_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  DSPGraph::Box **v34;
  int8x8_t v35;
  DSPGraph::Box *v36;
  uint8x8_t v37;
  uint64_t v38;
  DSPGraph::Box **v39;
  DSPGraph::Box **v40;
  unint64_t v41;
  unint64_t v42;
  DSPGraph::Box *v43;
  unint64_t v44;
  DSPGraph::Box *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v4 = (DSPGraph::Box **)((char *)this + 24);
  v5 = (DSPGraph::Box **)((char *)this + 24);
  do
  {
    v5 = (DSPGraph::Box **)*v5;
    if (!v5)
    {
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v47, "detach");
      std::string::basic_string[abi:ne180100]<0>(&v46, "box not in graph");
      DSPGraph::ThrowException(1852204065, &v48, 1310, &v47, &v46);
    }
  }
  while (v5[2] != a2);
  if (*((_BYTE *)this + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v47, "detach");
    std::string::basic_string[abi:ne180100]<0>(&v46, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v48, 1314, &v47, &v46);
  }
  for (i = (_QWORD *)*((_QWORD *)this + 29); i; i = (_QWORD *)*i)
    *(_QWORD *)(i[2] + 232) = *(_QWORD *)(i[2] + 224);
  *((_QWORD *)this + 33) = *((_QWORD *)this + 32);
  v7 = (DSPGraph::InputPort *)*((_QWORD *)a2 + 8);
  v8 = (DSPGraph::InputPort *)*((_QWORD *)a2 + 9);
  while (v7 != v8)
  {
    DSPGraph::InputPort::detach(v7);
    v7 = (DSPGraph::InputPort *)((char *)v7 + 32);
  }
  v9 = (_QWORD *)*((_QWORD *)a2 + 11);
  v10 = (_QWORD *)*((_QWORD *)a2 + 12);
  if (v9 == v10)
  {
    v14 = *((_QWORD *)a2 + 11);
  }
  else
  {
    do
    {
      for (j = *(_QWORD **)((*(uint64_t (**)(_QWORD *))(*v9 + 40))(v9) + 32); j; j = (_QWORD *)*j)
        *(_QWORD *)(j[2] + 16) = 0;
      v12 = *(_QWORD *)(v9[1] + 8);
      v13 = (*(uint64_t (**)(_QWORD *))(*v9 + 40))(v9);
      std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>((uint64_t *)(v12 + 48), v13);
      if (v13)
        (*(void (**)(unint64_t))(*(_QWORD *)v13 + 8))(v13);
      v9 += 4;
    }
    while (v9 != v10);
    v9 = (_QWORD *)*((_QWORD *)a2 + 11);
    v14 = *((_QWORD *)a2 + 12);
  }
  *((_QWORD *)a2 + 1) = 0;
  if (((v14 - (_QWORD)v9) & 0x1FFFFFFFE0) == 0)
    std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>((uint64_t *)this + 41, (unint64_t)a2);
  v15 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)a2 + 248))(a2);
  if (v15)
  {
    v16 = *(int8x8_t *)((char *)this + 376);
    if (v16)
    {
      v17 = v15;
      v18 = 0x9DDFEA08EB382D69 * (((8 * v15) + 8) ^ HIDWORD(v15));
      v19 = 0x9DDFEA08EB382D69 * (HIDWORD(v15) ^ (v18 >> 47) ^ v18);
      v20 = 0x9DDFEA08EB382D69 * (v19 ^ (v19 >> 47));
      v21 = (uint8x8_t)vcnt_s8(v16);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v22 = v20;
        if (v20 >= *(_QWORD *)&v16)
          v22 = v20 % *(_QWORD *)&v16;
      }
      else
      {
        v22 = v20 & (*(_QWORD *)&v16 - 1);
      }
      v23 = *((_QWORD *)this + 46);
      v24 = *(_QWORD ***)(v23 + 8 * v22);
      if (v24)
      {
        v25 = *v24;
        if (*v24)
        {
          v26 = *(_QWORD *)&v16 - 1;
          do
          {
            v27 = v25[1];
            if (v27 == v20)
            {
              if (v25[2] == v17)
              {
                if (v21.u32[0] > 1uLL)
                {
                  if (v20 >= *(_QWORD *)&v16)
                    v20 %= *(_QWORD *)&v16;
                }
                else
                {
                  v20 &= v26;
                }
                v28 = *(_QWORD **)(v23 + 8 * v20);
                do
                {
                  v29 = v28;
                  v28 = (_QWORD *)*v28;
                }
                while (v28 != v25);
                if (v29 == (_QWORD *)((char *)this + 384))
                  goto LABEL_56;
                v30 = v29[1];
                if (v21.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&v16)
                    v30 %= *(_QWORD *)&v16;
                }
                else
                {
                  v30 &= v26;
                }
                if (v30 != v20)
                {
LABEL_56:
                  if (!*v25)
                    goto LABEL_57;
                  v31 = *(_QWORD *)(*v25 + 8);
                  if (v21.u32[0] > 1uLL)
                  {
                    if (v31 >= *(_QWORD *)&v16)
                      v31 %= *(_QWORD *)&v16;
                  }
                  else
                  {
                    v31 &= v26;
                  }
                  if (v31 != v20)
LABEL_57:
                    *(_QWORD *)(v23 + 8 * v20) = 0;
                }
                v32 = *v25;
                if (*v25)
                {
                  v33 = *(_QWORD *)(v32 + 8);
                  if (v21.u32[0] > 1uLL)
                  {
                    if (v33 >= *(_QWORD *)&v16)
                      v33 %= *(_QWORD *)&v16;
                  }
                  else
                  {
                    v33 &= v26;
                  }
                  if (v33 != v20)
                  {
                    *(_QWORD *)(*((_QWORD *)this + 46) + 8 * v33) = v29;
                    v32 = *v25;
                  }
                }
                *v29 = v32;
                *v25 = 0;
                --*((_QWORD *)this + 49);
                operator delete(v25);
                break;
              }
            }
            else
            {
              if (v21.u32[0] > 1uLL)
              {
                if (v27 >= *(_QWORD *)&v16)
                  v27 %= *(_QWORD *)&v16;
              }
              else
              {
                v27 &= v26;
              }
              if (v27 != v22)
                break;
            }
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
      }
    }
  }
  v34 = (DSPGraph::Box **)*((_QWORD *)this + 3);
  if (v34)
  {
    while (v34[2] != a2)
    {
      v34 = (DSPGraph::Box **)*v34;
      if (!v34)
        return;
    }
    v35 = *(int8x8_t *)((char *)this + 16);
    v36 = v34[1];
    v37 = (uint8x8_t)vcnt_s8(v35);
    v37.i16[0] = vaddlv_u8(v37);
    if (v37.u32[0] > 1uLL)
    {
      if ((unint64_t)v36 >= *(_QWORD *)&v35)
        v36 = (DSPGraph::Box *)((unint64_t)v36 % *(_QWORD *)&v35);
    }
    else
    {
      v36 = (DSPGraph::Box *)((*(_QWORD *)&v35 - 1) & (unint64_t)v36);
    }
    v38 = *((_QWORD *)this + 1);
    v39 = *(DSPGraph::Box ***)(v38 + 8 * (_QWORD)v36);
    do
    {
      v40 = v39;
      v39 = (DSPGraph::Box **)*v39;
    }
    while (v39 != v34);
    if (v40 == v4)
      goto LABEL_87;
    v41 = (unint64_t)v40[1];
    if (v37.u32[0] > 1uLL)
    {
      if (v41 >= *(_QWORD *)&v35)
        v41 %= *(_QWORD *)&v35;
    }
    else
    {
      v41 &= *(_QWORD *)&v35 - 1;
    }
    if ((DSPGraph::Box *)v41 != v36)
    {
LABEL_87:
      if (!*v34)
        goto LABEL_88;
      v42 = *((_QWORD *)*v34 + 1);
      if (v37.u32[0] > 1uLL)
      {
        if (v42 >= *(_QWORD *)&v35)
          v42 %= *(_QWORD *)&v35;
      }
      else
      {
        v42 &= *(_QWORD *)&v35 - 1;
      }
      if ((DSPGraph::Box *)v42 != v36)
LABEL_88:
        *(_QWORD *)(v38 + 8 * (_QWORD)v36) = 0;
    }
    v43 = *v34;
    if (*v34)
    {
      v44 = *((_QWORD *)v43 + 1);
      if (v37.u32[0] > 1uLL)
      {
        if (v44 >= *(_QWORD *)&v35)
          v44 %= *(_QWORD *)&v35;
      }
      else
      {
        v44 &= *(_QWORD *)&v35 - 1;
      }
      if ((DSPGraph::Box *)v44 != v36)
      {
        *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v44) = v40;
        v43 = *v34;
      }
    }
    *v40 = v43;
    *v34 = 0;
    --*((_QWORD *)this + 4);
    v45 = v34[2];
    v34[2] = 0;
    if (v45)
      (*(void (**)(DSPGraph::Box *))(*(_QWORD *)v45 + 8))(v45);
    operator delete(v34);
  }
}

void sub_18F0E37FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void DSPGraph::Graph::addOrderingConstraint(DSPGraph::Graph *this, DSPGraph::Box *a2, DSPGraph::Box *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (*((_BYTE *)this + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "addOrderingConstraint");
    std::string::basic_string[abi:ne180100]<0>(&v3, "graph is configured");
    DSPGraph::ThrowException(1667655457, &v5, 1372, &v4, &v3);
  }
  std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box * const&>((uint64_t)a2 + 112, (unint64_t)a3, (uint64_t)a3);
}

void sub_18F0E38D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::writeDotAttributes(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(uint64_t **)(*(_QWORD *)v5 + 224);
      v7 = *(uint64_t **)(*(_QWORD *)v5 + 232);
      while (v6 != v7)
      {
        v8 = *v6++;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 496))(v8, a3);
      }
      v5 += 8;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t DSPGraph::Graph::decompile@<X0>(DSPGraph::Graph *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  _QWORD v8[10];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  DSPGraph::Graph::decompile((uint64_t)this, &v7, a2);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a3, (uint64_t)v8);
  v7 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v8[-1] + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x193FFE3A0](&v10);
}

void sub_18F0E3A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *DSPGraph::Graph::decompile(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  uint64_t *i;
  _QWORD *v13;
  std::string *v14;
  std::string *v15;
  std::string::size_type v16;
  uint64_t v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t *j;
  const char *v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  uint64_t *k;
  const char *v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  uint64_t *v36;
  uint64_t *m;
  std::string *v38;
  std::string *v39;
  std::string::size_type v40;
  uint64_t v41;
  uint64_t **v42;
  std::string *v43;
  std::string *v44;
  std::string::size_type v45;
  _QWORD *n;
  _QWORD *v47;
  std::string *v48;
  std::string::size_type v49;
  uint64_t **v50;
  uint64_t **v51;
  uint64_t **ii;
  uint64_t **jj;
  unsigned int *v54;
  unsigned int *v55;
  char *v56;
  uint64_t v57;
  std::string *v58;
  std::string *v59;
  std::string::size_type v60;
  uint64_t **kk;
  unsigned int *v62;
  unsigned int *v63;
  char *v64;
  uint64_t v65;
  std::string *v66;
  std::string *v67;
  std::string::size_type v68;
  uint64_t **mm;
  _QWORD *result;
  uint64_t **nn;
  void *v72[2];
  char v73;
  std::string v74;
  std::string __p;

  if (!*(_BYTE *)(a1 + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v74, "decompile");
    std::string::basic_string[abi:ne180100]<0>(v72, "configure the graph before decompiling.");
    DSPGraph::ThrowException(1667655457, (__int128 *)&__p, 1421, (__int128 *)&v74, (__int128 *)v72);
  }
  DSPGraph::strprintf((DSPGraph *)"; DSP graph definition\n", &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 431) < 0)
  {
    if (!*(_QWORD *)(a1 + 416))
      goto LABEL_22;
  }
  else if (!*(_BYTE *)(a1 + 431))
  {
    goto LABEL_22;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"graphName ", 10);
  DSPGraph::asDecompileString(a1 + 408, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &__p;
  else
    v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v9 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_22:
  if (*(_QWORD *)(a1 + 624))
  {
    DSPGraph::strprintf((DSPGraph *)"; named formats\n", &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &__p;
    else
      v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v11 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v10, v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    for (i = *(uint64_t **)(a1 + 616); i; i = (uint64_t *)*i)
    {
      v13 = i + 2;
      DSPGraph::decompileFormat((DSPGraph *)(i + 5), (const AudioStreamBasicDescription *)*((unsigned int *)i + 20), (uint64_t)&__p);
      if (*((char *)i + 39) < 0)
        v13 = (_QWORD *)*v13;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &__p;
      else
        v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
      DSPGraph::strprintf((DSPGraph *)"format %s %s\n", &v74, v13, v14);
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v74;
      else
        v15 = (std::string *)v74.__r_.__value_.__r.__words[0];
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
      else
        v16 = v74.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v15, v16);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*(_DWORD *)(a1 + 688))
  {
    v17 = *(unsigned int *)(a1 + 692);
    if ((_DWORD)v17)
    {
      DSPGraph::strprintf((DSPGraph *)"set sliceDuration %u %u\n", &__p, *(unsigned int *)(a1 + 688), v17);
      v18 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(__p.__r_.__value_.__r.__words[2])
          : __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v18, v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  DSPGraph::strprintf((DSPGraph *)"set performADryRun %d\n", &__p, *(unsigned __int8 *)(a1 + 765));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &__p;
  else
    v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v21 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v20, v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(_QWORD *)(a1 + 544))
  {
    DSPGraph::strprintf((DSPGraph *)"; params\n", &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &__p;
    else
      v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v23 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v22, v23);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    for (j = *(uint64_t **)(a1 + 536); j; j = (uint64_t *)*j)
    {
      if (*((_BYTE *)j + 32))
        v25 = "out";
      else
        v25 = "in";
      DSPGraph::strprintf((DSPGraph *)"param %u %f %s\n", &__p, *((unsigned int *)j + 6), *((float *)j + 7), v25);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &__p;
      else
        v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v27 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v26, v27);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*(_QWORD *)(a1 + 584))
  {
    DSPGraph::strprintf((DSPGraph *)"; properties\n", &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &__p;
    else
      v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v29 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v28, v29);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    for (k = *(uint64_t **)(a1 + 576); k; k = (uint64_t *)*k)
    {
      if (*((_BYTE *)k + 64))
        v31 = "out";
      else
        v31 = "in";
      DSPGraph::strprintf((DSPGraph *)"property %u %s\n", &__p, *((unsigned int *)k + 6), v31);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &__p;
      else
        v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v33 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v32, v33);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  DSPGraph::strprintf((DSPGraph *)"; boxes\n", &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &__p;
  else
    v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v35 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v34, v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v36 = *(uint64_t **)(a1 + 904);
  for (m = *(uint64_t **)(a1 + 912); v36 != m; ++v36)
  {
    DSPGraph::asDecompileString(*v36, &v74);
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &v74;
    else
      v38 = (std::string *)v74.__r_.__value_.__r.__words[0];
    DSPGraph::strprintf((DSPGraph *)"beginSubset %s\n", &__p, v38);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = &__p;
    else
      v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v40 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v39, v40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    v41 = *v36;
    v42 = *(uint64_t ***)(*v36 + 40);
    if (v42)
    {
      do
      {
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*v42[2] + 512))(v42[2], a2, a3);
        v42 = (uint64_t **)*v42;
      }
      while (v42);
      v41 = *v36;
    }
    DSPGraph::asDecompileString(v41, &v74);
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = &v74;
    else
      v43 = (std::string *)v74.__r_.__value_.__r.__words[0];
    DSPGraph::strprintf((DSPGraph *)"endSubset ; %s\n", &__p, v43);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = &__p;
    else
      v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v45 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v44, v45);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
  }
  for (n = *(_QWORD **)(a1 + 24); n; n = (_QWORD *)*n)
  {
    v47 = (_QWORD *)n[2];
    if (!v47[3])
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*v47 + 512))(v47, a2, a3);
  }
  DSPGraph::strprintf((DSPGraph *)"; wires\n", &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &__p;
  else
    v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v49 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v48, v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v50 = *(uint64_t ***)(a1 + 24);
  if (v50)
  {
    do
    {
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*v50[2] + 520))(v50[2], a2, a3);
      v50 = (uint64_t **)*v50;
    }
    while (v50);
    v51 = *(uint64_t ***)(a1 + 24);
    if (v51)
    {
      do
      {
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*v51[2] + 528))(v51[2], a2, a3);
        v51 = (uint64_t **)*v51;
      }
      while (v51);
      for (ii = *(uint64_t ***)(a1 + 24); ii; ii = (uint64_t **)*ii)
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*ii[2] + 536))(ii[2], a2, a3);
    }
  }
  if (*(_QWORD *)(a1 + 544))
  {
    for (jj = *(uint64_t ***)(a1 + 536); jj; jj = (uint64_t **)*jj)
    {
      v54 = (unsigned int *)jj[5];
      v55 = (unsigned int *)jj[6];
      while (v54 != v55)
      {
        v56 = (char *)(*(_QWORD *)v54 + 32);
        if (*(char *)(*(_QWORD *)v54 + 55) < 0)
          v56 = *(char **)v56;
        v57 = *((unsigned int *)jj + 6);
        std::string::basic_string[abi:ne180100]<0>(v72, v56);
        DSPGraph::asDecompileString((uint64_t)v72, &v74);
        v58 = (std::string *)v74.__r_.__value_.__r.__words[0];
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = &v74;
        DSPGraph::strprintf((DSPGraph *)"wireGraphParam %u (%s %u %u %u)\n", &__p, v57, v58, v54[2], v54[3], v54[4]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = &__p;
        else
          v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v60 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v60 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v59, v60);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        if (v73 < 0)
          operator delete(v72[0]);
        v54 += 6;
      }
    }
  }
  if (*(_QWORD *)(a1 + 584))
  {
    for (kk = *(uint64_t ***)(a1 + 576); kk; kk = (uint64_t **)*kk)
    {
      v62 = (unsigned int *)kk[9];
      v63 = (unsigned int *)kk[10];
      while (v62 != v63)
      {
        v64 = (char *)(*(_QWORD *)v62 + 32);
        if (*(char *)(*(_QWORD *)v62 + 55) < 0)
          v64 = *(char **)v64;
        v65 = *((unsigned int *)kk + 6);
        std::string::basic_string[abi:ne180100]<0>(v72, v64);
        DSPGraph::asDecompileString((uint64_t)v72, &v74);
        v66 = (std::string *)v74.__r_.__value_.__r.__words[0];
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = &v74;
        DSPGraph::strprintf((DSPGraph *)"wireGraphProperty %u (%s %u %u %u)\n", &__p, v65, v66, v62[2], v62[3], v62[4]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = &__p;
        else
          v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v68 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v67, v68);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        if (v73 < 0)
          operator delete(v72[0]);
        v62 += 6;
      }
    }
  }
  for (mm = *(uint64_t ***)(a1 + 24); mm; mm = (uint64_t **)*mm)
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*mm[2] + 544))(mm[2], a2, a3);
  result = DSPGraph::AnalyzerBuilder::decompileAnalysis((_QWORD *)(a1 + 944), a2);
  for (nn = *(uint64_t ***)(a1 + 24); nn; nn = (uint64_t **)*nn)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t *, _QWORD *, uint64_t))(*nn[2] + 552))(nn[2], a2, a3);
  return result;
}

void sub_18F0E439C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::decompile(DSPGraph::Graph *this, const char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v12;
  _BYTE v13[408];
  _QWORD v14[20];

  v14[19] = *MEMORY[0x1E0C80C00];
  v5 = MEMORY[0x1E0DE4FB0];
  v6 = MEMORY[0x1E0DE4FB0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F48];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  v14[0] = MEMORY[0x1E0DE4FB0] + 64;
  v12 = v8;
  *(_QWORD *)&v13[*(_QWORD *)(v8 - 24) - 8] = v9;
  v10 = (std::ios_base *)&v13[*(_QWORD *)(v12 - 24) - 8];
  std::ios_base::init(v10, v13);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v12 = v5 + 24;
  v14[0] = v6;
  MEMORY[0x193FFE10C](v13);
  std::ofstream::open();
  DSPGraph::Graph::decompile((uint64_t)this, &v12, a3);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v13[*(_QWORD *)(v12 - 24) - 8], *(_DWORD *)&v13[*(_QWORD *)(v12 - 24) + 24] | 4);
  v12 = *v7;
  *(_QWORD *)&v13[*(_QWORD *)(v12 - 24) - 8] = v7[3];
  MEMORY[0x193FFE118](v13);
  std::ostream::~ostream();
  return MEMORY[0x193FFE3A0](v14);
}

void sub_18F0E4600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 __p, int a13, __int16 a14, char a15, char a16, __int128 a17, int a18, __int16 a19, char a20,char a21,__int128 a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  void *v28;
  void *v29;
  int v30;
  int v31;

  if (a2)
  {
    v28 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      v29 = v28;
      v30 = *__error();
      std::string::basic_string[abi:ne180100]<0>(&a22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
      std::string::basic_string[abi:ne180100]<0>(&a17, "decompile");
      (*(void (**)(void *))(*(_QWORD *)v29 + 16))(v29);
      DSPGraph::strprintf((DSPGraph *)"couldn't open file '%s': %s\n", &__p);
      DSPGraph::ThrowException(v30, &a22, 1408, &a17, &__p);
    }
    v31 = *__error();
    std::string::basic_string[abi:ne180100]<0>(&a22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a17, "decompile");
    DSPGraph::strprintf((DSPGraph *)"couldn't open file '%s'\n", &__p);
    DSPGraph::ThrowException(v31, &a22, 1410, &a17, &__p);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x193FFE118](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x193FFE3A0](a1 + 52);
  return a1;
}

uint64_t DSPGraph::Graph::writeDotFile(DSPGraph::Graph *this, const char *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  std::ios_base *v10;
  size_t v11;
  uint64_t **i;
  __int128 __p;
  __int128 v15;
  void *v16[2];
  _QWORD v17[20];

  v17[19] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v15, "writeDotFile");
    std::string::basic_string[abi:ne180100]<0>(&__p, "configure the graph before writing a dot file.");
    DSPGraph::ThrowException(1667655457, (__int128 *)v16, 1546, &v15, &__p);
  }
  v5 = MEMORY[0x1E0DE4FB0];
  v6 = MEMORY[0x1E0DE4FB0] + 64;
  v7 = MEMORY[0x1E0DE4F48];
  v8 = *(void **)(MEMORY[0x1E0DE4F48] + 8);
  v9 = *(void **)(MEMORY[0x1E0DE4F48] + 16);
  v17[0] = MEMORY[0x1E0DE4FB0] + 64;
  v16[0] = v8;
  *(void **)((char *)v16 + *((_QWORD *)v8 - 3)) = v9;
  v10 = (std::ios_base *)((char *)v16 + *((_QWORD *)v16[0] - 3));
  std::ios_base::init(v10, &v16[1]);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v16[0] = (void *)(v5 + 24);
  v17[0] = v6;
  MEMORY[0x193FFE10C](&v16[1]);
  std::ofstream::open();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"digraph ", 8);
  v11 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)a2, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" {\n", 3);
  DSPGraph::Graph::writeDotAttributes(*((_QWORD *)this + 32), *((_QWORD *)this + 33), (uint64_t)v16);
  for (i = (uint64_t **)*((_QWORD *)this + 3); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, void **))(*i[2] + 504))(i[2], v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"}\n", 2);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v16 + *((_QWORD *)v16[0] - 3)), *(_DWORD *)((char *)&v16[4] + *((_QWORD *)v16[0] - 3)) | 4);
  v16[0] = *(void **)v7;
  *(void **)((char *)v16 + *((_QWORD *)v16[0] - 3)) = *(void **)(v7 + 24);
  MEMORY[0x193FFE118](&v16[1]);
  std::ostream::~ostream();
  return MEMORY[0x193FFE3A0](v17);
}

void sub_18F0E4B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  __cxa_end_catch();
  std::ofstream::~ofstream(&a30);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Graph::writeDotFile@<X0>(DSPGraph::Graph *this@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  size_t v6;
  uint64_t **i;
  __int128 v9[4];
  void *__p;
  char v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  if (!*((_BYTE *)this + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "writeDotFile");
    std::string::basic_string[abi:ne180100]<0>(&v13, "configure the graph before writing a dot file.");
    DSPGraph::ThrowException(1667655457, v9, 1565, &v14, &v13);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"digraph ", 8);
  v6 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)a2, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" {\n", 3);
  DSPGraph::Graph::writeDotAttributes(*((_QWORD *)this + 32), *((_QWORD *)this + 33), (uint64_t)v9);
  for (i = (uint64_t **)*((_QWORD *)this + 3); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, __int128 *))(*i[2] + 504))(i[2], v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"}\n", 2);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a3, (uint64_t)v9 + 8);
  *(_QWORD *)&v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(*(_QWORD *)&v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v9[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x193FFE3A0](&v12);
}

void sub_18F0E4E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 - 57) < 0)
    operator delete(*(void **)(v15 - 80));
  if (*(char *)(v15 - 33) < 0)
    operator delete(*(void **)(v15 - 56));
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Graph::setAUStrip()
{
  return 0;
}

uint64_t DSPGraph::Graph::makeAUStrip()
{
  return 0;
}

{
  return 0;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const* const&>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

unint64_t applesauce::CF::at_or<unsigned int,__CFString const* const&>(const __CFDictionary *a1, const void *a2, unsigned int *a3)
{
  const __CFNumber *v4;
  unint64_t result;

  v4 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (!v4)
    return *a3;
  result = (unint64_t)applesauce::CF::convert_as<unsigned int,0>(v4);
  if (HIDWORD(result))
    return result;
  else
    return *a3;
}

void DSPGraph::Graph::makeAUStrip(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, CFDictionaryRef *a3@<X8>)
{
  unsigned __int8 **Subset;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *__p[3];
  void *v21;
  char *v22;
  unint64_t v23;

  Subset = DSPGraph::Graph::getSubset(a1, a2);
  if (Subset)
  {
    v5 = Subset;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    std::vector<void const*>::reserve(&v21, (unint64_t)Subset[6]);
    v6 = v5[5];
    if (v6)
    {
      v7 = v22;
      v8 = v23;
      v9 = (char *)v21;
      do
      {
        v10 = *((_QWORD *)v6 + 2);
        if ((unint64_t)v7 >= v8)
        {
          v11 = (v7 - v9) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v8 - (_QWORD)v9) >> 2 > v12)
            v12 = (uint64_t)(v8 - (_QWORD)v9) >> 2;
          if (v8 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
            v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v13);
          else
            v14 = 0;
          v15 = (char *)(v13 + 8 * v11);
          *(_QWORD *)v15 = v10;
          v16 = v15 + 8;
          if (v7 != v9)
          {
            do
            {
              v17 = *((_QWORD *)v7 - 1);
              v7 -= 8;
              *((_QWORD *)v15 - 1) = v17;
              v15 -= 8;
            }
            while (v7 != v9);
            v7 = v9;
          }
          v9 = v15;
          v8 = v13 + 8 * v14;
          if (v7)
            operator delete(v7);
          v7 = v16;
        }
        else
        {
          *(_QWORD *)v7 = v10;
          v7 += 8;
        }
        v6 = *(unsigned __int8 **)v6;
      }
      while (v6);
      v22 = v7;
      v23 = v8;
      v21 = v9;
    }
    else
    {
      v9 = (char *)v21;
      v7 = v22;
    }
    v18 = 126 - 2 * __clz((v7 - v9) >> 3);
    if (v7 == v9)
      v19 = 0;
    else
      v19 = v18;
    std::__introsort<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **,false>((uint64_t)v9, (uint64_t *)v7, v19, 1);
    memset(__p, 0, sizeof(__p));
    std::vector<DSPGraph::Box *>::__init_with_size[abi:ne180100]<DSPGraph::Box **,DSPGraph::Box **>(__p, v9, (uint64_t)v7, (v7 - v9) >> 3);
    DSPGraph::stripDictFromBoxes(a3, (uint64_t)__p);
    if (__p[0])
      operator delete(__p[0]);
    if (v21)
      operator delete(v21);
  }
  else
  {
    *a3 = 0;
  }
}

_QWORD *std::vector<DSPGraph::Box *>::__init_with_size[abi:ne180100]<DSPGraph::Box **,DSPGraph::Box **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_18F0E51A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::stripDictFromBoxes(CFDictionaryRef *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const __CFString *v5;
  const __CFString *v6;
  CFDictionaryRef CFDictionaryRef;
  uint64_t v8;
  const void *v9;
  const void *v10;
  void *v11;
  CFTypeRef v12;
  _QWORD *v13;
  CFTypeRef v14;
  uint64_t v15;
  const void *v16;
  const void *v17;
  CFMutableArrayRef v18;
  void **v19;
  CFTypeRef v20;
  CFDictionaryRef v21;
  CFArrayRef CFArray;
  void **v23;
  CFTypeRef v25;
  int v26;
  CFTypeRef v27;
  int v28[4];
  CFTypeRef cf;
  void *value[3];
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33[3];
  CFMutableArrayRef theArray;
  void *__p;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[2];
  CFTypeRef v39;
  CFDictionaryRef v40;
  void **p_p;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v4 = *(_QWORD **)a2;
  v3 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v3)
  {
    v5 = CFSTR("subtype");
    do
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 328))(*v4) & 1) != 0)
      {
        CFRetain(CFSTR("type"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v32, CFSTR("type"));
        (*(void (**)(void ***__return_ptr))(*(_QWORD *)*v4 + 208))(&p_p);
        applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int>(&__p, v32, (int *)&p_p);
        CFRetain(v5);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v31, v5);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)*v4 + 208))(value);
        applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int>(v37, v31, (int *)value + 1);
        CFRetain(CFSTR("manufacturer"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, CFSTR("manufacturer"));
        (*(void (**)(CFTypeRef *__return_ptr))(*(_QWORD *)*v4 + 208))(&v27);
        applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int>(v38, cf, v28);
        v6 = v5;
        v33[0] = &__p;
        v33[1] = (CFTypeRef)3;
        CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v33);
        v8 = 0;
        v33[2] = CFDictionaryRef;
        do
        {
          v9 = (const void *)v38[v8 + 1];
          if (v9)
            CFRelease(v9);
          v10 = (const void *)v38[v8];
          if (v10)
            CFRelease(v10);
          v8 -= 2;
        }
        while (v8 != -6);
        if (cf)
          CFRelease(cf);
        if (v31)
          CFRelease(v31);
        if (v32)
          CFRelease(v32);
        CFRetain(CFSTR("aupreset"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v27, CFSTR("aupreset"));
        (*(void (**)(CFTypeRef *__return_ptr))(*(_QWORD *)*v4 + 360))(v33);
        v11 = (void *)v27;
        if (v27)
          CFRetain(v27);
        __p = v11;
        v12 = v33[0];
        if (v33[0])
          CFRetain(v33[0]);
        v36 = (uint64_t)v12;
        CFRetain(CFSTR("displayname"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v32, CFSTR("displayname"));
        v13 = (_QWORD *)(*v4 + 32);
        if (*(char *)(*v4 + 55) < 0)
          v13 = (_QWORD *)*v13;
        v31 = v13;
        applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,char const*>(v37, v32, (char **)&v31);
        CFRetain(CFSTR("bypass"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, CFSTR("bypass"));
        v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 48))(*v4);
        applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int>(v38, cf, &v26);
        CFRetain(CFSTR("unit"));
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v25, CFSTR("unit"));
        v14 = v25;
        if (v25)
          CFRetain(v25);
        v39 = v14;
        if (CFDictionaryRef)
          CFRetain(CFDictionaryRef);
        v40 = CFDictionaryRef;
        p_p = &__p;
        v42 = 4;
        v15 = 0;
        value[0] = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&p_p);
        do
        {
          v16 = *(CFDictionaryRef *)((char *)&v40 + v15);
          if (v16)
            CFRelease(v16);
          v17 = *(CFTypeRef *)((char *)&v39 + v15);
          if (v17)
            CFRelease(v17);
          v15 -= 16;
        }
        while (v15 != -64);
        if (v25)
          CFRelease(v25);
        v5 = v6;
        if (cf)
          CFRelease(cf);
        if (v32)
          CFRelease(v32);
        if (v33[0])
          CFRelease(v33[0]);
        if (v27)
          CFRelease(v27);
        CFArrayAppendValue(theArray, value[0]);
        if (value[0])
          CFRelease(value[0]);
        if (CFDictionaryRef)
          CFRelease(CFDictionaryRef);
      }
      ++v4;
    }
    while (v4 != v3);
  }
  CFRetain(CFSTR("effects"));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v27, CFSTR("effects"));
  v18 = theArray;
  if (theArray)
    CFRetain(theArray);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v33, v18);
  v19 = (void **)v27;
  if (v27)
    CFRetain(v27);
  p_p = v19;
  v20 = v33[0];
  if (v33[0])
    CFRetain(v33[0]);
  v42 = (uint64_t)v20;
  __p = &p_p;
  v36 = 1;
  v21 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&__p);
  value[0] = v21;
  if (v42)
    CFRelease((CFTypeRef)v42);
  if (p_p)
    CFRelease(p_p);
  if (v33[0])
    CFRelease(v33[0]);
  if (v27)
    CFRelease(v27);
  CFRetain(v21);
  p_p = (void **)v21;
  std::vector<void const*>::vector(&__p, 1uLL);
  *(_QWORD *)__p = p_p;
  CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((const void **)__p, v36);
  if (__p)
  {
    v36 = (uint64_t)__p;
    operator delete(__p);
  }
  v27 = CFArray;
  if (p_p)
    CFRelease(p_p);
  CFRetain(CFSTR("strips"));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v33, CFSTR("strips"));
  v23 = (void **)v33[0];
  if (v33[0])
    CFRetain(v33[0]);
  p_p = v23;
  if (CFArray)
    CFRetain(CFArray);
  v42 = (uint64_t)CFArray;
  __p = &p_p;
  v36 = 1;
  *a1 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&__p);
  if (v42)
    CFRelease((CFTypeRef)v42);
  if (p_p)
    CFRelease(p_p);
  if (v33[0])
    CFRelease(v33[0]);
  if (CFArray)
    CFRelease(CFArray);
  CFRelease(v21);
  if (v18)
    CFRelease(v18);
}

void sub_18F0E5864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_18F0E5A70()
{
  JUMPOUT(0x18F0E5A78);
}

void sub_18F0E5A88()
{
  JUMPOUT(0x18F0E5A90);
}

void sub_18F0E5AC4()
{
  JUMPOUT(0x18F0E5ACCLL);
}

void sub_18F0E5AE4(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18F0E5AF8);
  __clang_call_terminate(a1);
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int>(_QWORD *a1, CFTypeRef cf, int *a3)
{
  CFNumberRef v6;
  std::runtime_error *exception;
  int valuePtr;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  valuePtr = *a3;
  v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_18F0E5BA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<__CFArray *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const char *v17;
  const char **v18;
  const char *v19;
  const char **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  BOOL v44;
  const char *v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t *v50;
  const char *v51;
  const char *v52;
  uint64_t *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  const char *v70;
  uint64_t *v71;
  BOOL v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  const char **v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  const char *v83;
  const char *v84;
  uint64_t *v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t *v89;
  const char *v90;
  uint64_t v91;
  const char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  const char **v97;
  const char *v98;
  uint64_t *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  const char *v103;
  const char *v104;
  const char *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  const char **v125;
  const char *v126;
  uint64_t *v127;
  const char *v128;
  const char *v129;
  BOOL v130;
  uint64_t *v131;
  uint64_t v132;
  const char **v133;
  const char *v134;
  uint64_t v135;
  const char *v136;
  uint64_t *v137;
  const char *v138;
  const char *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  int64_t v146;
  uint64_t *v147;

  v6 = (uint64_t *)result;
LABEL_2:
  v143 = a2 - 1;
  v144 = a2;
  v140 = a2 - 3;
  v141 = a2 - 2;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = (char *)a2 - (char *)v7;
    v10 = a2 - v7;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v67 = *v143;
        v68 = *v8;
        v69 = (const char *)(*v143 + 32);
        if (*(char *)(*v143 + 55) < 0)
          v69 = *(const char **)v69;
        v70 = (const char *)(v68 + 32);
        if (*(char *)(v68 + 55) < 0)
          v70 = *(const char **)v70;
        result = strcmp(v69, v70);
        if ((result & 0x80000000) != 0)
        {
          *v8 = v67;
          *v143 = v68;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v8, v8 + 1, v143);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v8, v8 + 1, v8 + 2, v143);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v8, v8 + 1, v8 + 2, v8 + 3, v143);
      default:
        if (v9 <= 191)
        {
          v71 = v8 + 1;
          v73 = v8 == a2 || v71 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v73)
            {
              v74 = 0;
              v75 = v8;
              do
              {
                v76 = v71;
                v77 = v75[1];
                v78 = (const char **)(v77 + 32);
                v79 = (const char *)(v77 + 32);
                if (*(char *)(v77 + 55) < 0)
                  v79 = *v78;
                v80 = *v75;
                v81 = (const char *)(*v75 + 32);
                if (*(char *)(*v75 + 55) < 0)
                  v81 = *(const char **)v81;
                result = strcmp(v79, v81);
                if ((result & 0x80000000) != 0)
                {
                  v82 = v74;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v82 + 8) = v80;
                    if (!v82)
                      break;
                    v83 = (const char *)(v77 + 32);
                    if (*(char *)(v77 + 55) < 0)
                      v83 = *v78;
                    v80 = *(uint64_t *)((char *)v8 + v82 - 8);
                    v84 = (const char *)(v80 + 32);
                    if (*(char *)(v80 + 55) < 0)
                      v84 = *(const char **)v84;
                    result = strcmp(v83, v84);
                    v82 -= 8;
                    if ((result & 0x80000000) == 0)
                    {
                      v85 = (uint64_t *)((char *)v8 + v82 + 8);
                      goto LABEL_135;
                    }
                  }
                  v85 = v8;
LABEL_135:
                  *v85 = v77;
                  a2 = v144;
                }
                v71 = v76 + 1;
                v74 += 8;
                v75 = v76;
              }
              while (v76 + 1 != a2);
            }
          }
          else if (!v73)
          {
            do
            {
              v131 = v71;
              v132 = v8[1];
              v133 = (const char **)(v132 + 32);
              v134 = (const char *)(v132 + 32);
              if (*(char *)(v132 + 55) < 0)
                v134 = *v133;
              v135 = *v8;
              v136 = (const char *)(*v8 + 32);
              if (*(char *)(*v8 + 55) < 0)
                v136 = *(const char **)v136;
              result = strcmp(v134, v136);
              if ((result & 0x80000000) != 0)
              {
                v137 = v131;
                do
                {
                  *v137 = v135;
                  v138 = (const char *)(v132 + 32);
                  if (*(char *)(v132 + 55) < 0)
                    v138 = *v133;
                  v135 = *(v137 - 2);
                  v139 = (const char *)(v135 + 32);
                  if (*(char *)(v135 + 55) < 0)
                    v139 = *(const char **)v139;
                  result = strcmp(v138, v139);
                  --v137;
                }
                while ((result & 0x80000000) != 0);
                *v137 = v132;
              }
              v71 = v131 + 1;
              v8 = v131;
            }
            while (v131 + 1 != v144);
          }
          return result;
        }
        v147 = v8;
        if (!a3)
        {
          if (v8 != a2)
          {
            v86 = (unint64_t)(v10 - 2) >> 1;
            v146 = v86;
            do
            {
              v87 = v86;
              if (v146 >= v86)
              {
                v88 = (2 * v86) | 1;
                v89 = &v147[v88];
                if (2 * v86 + 2 < v10)
                {
                  v90 = (const char *)(*v89 + 32);
                  if (*(char *)(*v89 + 55) < 0)
                    v90 = *(const char **)v90;
                  v91 = v89[1];
                  ++v89;
                  v92 = (const char *)(v91 + 32);
                  if (*(char *)(v91 + 55) < 0)
                    v92 = *(const char **)v92;
                  if (strcmp(v90, v92) < 0)
                    v88 = 2 * v87 + 2;
                  else
                    v89 = &v147[v88];
                }
                v93 = &v147[v87];
                v94 = *v89;
                v95 = *v93;
                v96 = (const char *)(*v89 + 32);
                if (*(char *)(*v89 + 55) < 0)
                  v96 = *(const char **)v96;
                v97 = (const char **)(v95 + 32);
                v98 = (const char *)(v95 + 32);
                if (*(char *)(v95 + 55) < 0)
                  v98 = *v97;
                result = strcmp(v96, v98);
                if ((result & 0x80000000) == 0)
                {
                  do
                  {
                    v99 = v89;
                    *v93 = v94;
                    if (v146 < v88)
                      break;
                    v100 = (2 * v88) | 1;
                    v89 = &v147[v100];
                    v88 = 2 * v88 + 2;
                    if (v88 >= v10)
                    {
                      v88 = v100;
                    }
                    else
                    {
                      v101 = (const char *)(*v89 + 32);
                      if (*(char *)(*v89 + 55) < 0)
                        v101 = *(const char **)v101;
                      v102 = v89[1];
                      ++v89;
                      v103 = (const char *)(v102 + 32);
                      if (*(char *)(v102 + 55) < 0)
                        v103 = *(const char **)v103;
                      if (strcmp(v101, v103) >= 0)
                      {
                        v89 = &v147[v100];
                        v88 = v100;
                      }
                    }
                    v94 = *v89;
                    v104 = (const char *)(*v89 + 32);
                    if (*(char *)(*v89 + 55) < 0)
                      v104 = *(const char **)v104;
                    v105 = (const char *)(v95 + 32);
                    if (*(char *)(v95 + 55) < 0)
                      v105 = *v97;
                    result = strcmp(v104, v105);
                    v93 = v99;
                  }
                  while ((result & 0x80000000) == 0);
                  *v99 = v95;
                }
              }
              v86 = v87 - 1;
            }
            while (v87);
            v106 = (unint64_t)v9 >> 3;
            v107 = v144;
            v108 = v147;
            do
            {
              v109 = 0;
              v110 = *v108;
              v111 = v106 - 2;
              if (v106 < 2)
                v111 = v106 - 1;
              v112 = v111 >> 1;
              do
              {
                v113 = (uint64_t)&v108[v109 + 1];
                v114 = (2 * v109) | 1;
                v115 = 2 * v109 + 2;
                if (v115 < v106)
                {
                  v116 = (const char *)(*(_QWORD *)v113 + 32);
                  if (*(char *)(*(_QWORD *)v113 + 55) < 0)
                    v116 = *(const char **)v116;
                  v117 = v108[v109 + 2];
                  v118 = (const char *)(v117 + 32);
                  if (*(char *)(v117 + 55) < 0)
                    v118 = *(const char **)v118;
                  result = strcmp(v116, v118);
                  if ((int)result < 0)
                  {
                    v113 += 8;
                    v114 = v115;
                  }
                }
                *v108 = *(_QWORD *)v113;
                v108 = (uint64_t *)v113;
                v109 = v114;
              }
              while (v114 <= v112);
              if ((uint64_t *)v113 == --v107)
              {
                *(_QWORD *)v113 = v110;
              }
              else
              {
                *(_QWORD *)v113 = *v107;
                *v107 = v110;
                v119 = v113 - (_QWORD)v147 + 8;
                if (v119 >= 9)
                {
                  v120 = (unint64_t)((v119 >> 3) - 2) >> 1;
                  v121 = &v147[v120];
                  v122 = *v121;
                  v123 = (const char *)(*v121 + 32);
                  if (*(char *)(*v121 + 55) < 0)
                    v123 = *(const char **)v123;
                  v124 = *(_QWORD *)v113;
                  v125 = (const char **)(*(_QWORD *)v113 + 32);
                  v126 = (const char *)v125;
                  if (*(char *)(*(_QWORD *)v113 + 55) < 0)
                    v126 = *v125;
                  result = strcmp(v123, v126);
                  if ((result & 0x80000000) != 0)
                  {
                    do
                    {
                      v127 = v121;
                      *(_QWORD *)v113 = v122;
                      if (!v120)
                        break;
                      v120 = (v120 - 1) >> 1;
                      v121 = &v147[v120];
                      v122 = *v121;
                      v128 = (const char *)(*v121 + 32);
                      if (*(char *)(*v121 + 55) < 0)
                        v128 = *(const char **)v128;
                      v129 = (const char *)v125;
                      if (*(char *)(v124 + 55) < 0)
                        v129 = *v125;
                      result = strcmp(v128, v129);
                      v113 = (uint64_t)v127;
                    }
                    while ((result & 0x80000000) != 0);
                    *v127 = v124;
                  }
                }
              }
              v130 = v106-- <= 2;
              v108 = v147;
            }
            while (!v130);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v12, v8, v143);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v8, v12, v143);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v8 + 1, v12 - 1, v141);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v8 + 2, &v8[v11 + 1], v140);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v12 - 1, v12, &v8[v11 + 1]);
          v13 = *v8;
          *v8 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v8;
        v145 = a3;
        if ((a4 & 1) == 0)
        {
          v16 = *(v8 - 1);
          v17 = (const char *)(v16 + 32);
          if (*(char *)(v16 + 55) < 0)
            v17 = *(const char **)v17;
          v18 = (const char **)(v14 + 32);
          v15 = *(char *)(v14 + 55);
          v19 = (const char *)(v14 + 32);
          if (v15 < 0)
            v19 = *v18;
          if (strcmp(v17, v19) < 0)
            goto LABEL_16;
          v45 = (const char *)(v14 + 32);
          if (v15 < 0)
            v45 = *v18;
          v46 = (const char *)(*v143 + 32);
          if (*(char *)(*v143 + 55) < 0)
            v46 = *(const char **)v46;
          result = strcmp(v45, v46);
          if ((result & 0x80000000) != 0)
          {
            v7 = v8;
            do
            {
              v47 = (const char *)(v14 + 32);
              if (v15 < 0)
                v47 = *v18;
              v48 = v7[1];
              ++v7;
              v49 = (const char *)(v48 + 32);
              if (*(char *)(v48 + 55) < 0)
                v49 = *(const char **)v49;
              result = strcmp(v47, v49);
            }
            while ((result & 0x80000000) == 0);
          }
          else
          {
            v50 = v8 + 1;
            do
            {
              v7 = v50;
              if (v50 >= a2)
                break;
              v51 = (const char *)(v14 + 32);
              if (v15 < 0)
                v51 = *v18;
              v52 = (const char *)(*v50 + 32);
              if (*(char *)(*v50 + 55) < 0)
                v52 = *(const char **)v52;
              result = strcmp(v51, v52);
              v50 = v7 + 1;
            }
            while ((result & 0x80000000) == 0);
          }
          v53 = a2;
          if (v7 < a2)
          {
            v53 = a2;
            do
            {
              v54 = (const char *)(v14 + 32);
              if (v15 < 0)
                v54 = *v18;
              v55 = *--v53;
              v56 = (const char *)(v55 + 32);
              if (*(char *)(v55 + 55) < 0)
                v56 = *(const char **)v56;
              result = strcmp(v54, v56);
            }
            while ((result & 0x80000000) != 0);
          }
          if (v7 < v53)
          {
            v57 = *v7;
            v58 = *v53;
            do
            {
              *v7 = v58;
              *v53 = v57;
              v59 = *(char *)(v14 + 55);
              do
              {
                v60 = v7[1];
                ++v7;
                v57 = v60;
                v61 = (const char *)(v14 + 32);
                if (v59 < 0)
                  v61 = *v18;
                v62 = (const char *)(v57 + 32);
                if (*(char *)(v57 + 55) < 0)
                  v62 = *(const char **)v62;
              }
              while ((strcmp(v61, v62) & 0x80000000) == 0);
              do
              {
                v63 = *--v53;
                v58 = v63;
                v64 = (const char *)(v14 + 32);
                if (v59 < 0)
                  v64 = *v18;
                v65 = (const char *)(v58 + 32);
                if (*(char *)(v58 + 55) < 0)
                  v65 = *(const char **)v65;
                result = strcmp(v64, v65);
              }
              while ((result & 0x80000000) != 0);
            }
            while (v7 < v53);
          }
          v66 = v7 - 1;
          if (v7 - 1 != v8)
            *v8 = *v66;
          a4 = 0;
          *v66 = v14;
          continue;
        }
        LOBYTE(v15) = *(_BYTE *)(v14 + 55);
LABEL_16:
        v20 = (const char **)(v14 + 32);
        v21 = v8;
        do
        {
          v23 = v21[1];
          ++v21;
          v22 = v23;
          v24 = (const char *)(v23 + 32);
          if (*(char *)(v23 + 55) < 0)
            v24 = *(const char **)v24;
          v25 = (const char *)(v14 + 32);
          if ((v15 & 0x80) != 0)
            v25 = *v20;
        }
        while (strcmp(v24, v25) < 0);
        v26 = v21 - 1;
        v27 = a2;
        if (v21 - 1 == v8)
        {
          v27 = a2;
          do
          {
            if (v21 >= v27)
              break;
            v31 = *--v27;
            v32 = (const char *)(v31 + 32);
            if (*(char *)(v31 + 55) < 0)
              v32 = *(const char **)v32;
            v33 = (const char *)(v14 + 32);
            if ((v15 & 0x80) != 0)
              v33 = *v20;
          }
          while ((strcmp(v32, v33) & 0x80000000) == 0);
        }
        else
        {
          do
          {
            v28 = *--v27;
            v29 = (const char *)(v28 + 32);
            if (*(char *)(v28 + 55) < 0)
              v29 = *(const char **)v29;
            v30 = (const char *)(v14 + 32);
            if ((v15 & 0x80) != 0)
              v30 = *v20;
          }
          while ((strcmp(v29, v30) & 0x80000000) == 0);
        }
        if (v21 < v27)
        {
          v34 = *v27;
          v35 = v21;
          v36 = v27;
          do
          {
            *v35 = v34;
            *v36 = v22;
            v37 = *(char *)(v14 + 55);
            do
            {
              v38 = v35[1];
              ++v35;
              v22 = v38;
              v39 = (const char *)(v38 + 32);
              if (*(char *)(v38 + 55) < 0)
                v39 = *(const char **)v39;
              v40 = (const char *)(v14 + 32);
              if (v37 < 0)
                v40 = *v20;
            }
            while (strcmp(v39, v40) < 0);
            v26 = v35 - 1;
            do
            {
              v41 = *--v36;
              v34 = v41;
              v42 = (const char *)(v41 + 32);
              if (*(char *)(v41 + 55) < 0)
                v42 = *(const char **)v42;
              v43 = (const char *)(v14 + 32);
              if (v37 < 0)
                v43 = *v20;
            }
            while ((strcmp(v42, v43) & 0x80000000) == 0);
          }
          while (v35 < v36);
        }
        v6 = v147;
        if (v26 != v147)
          *v147 = *v26;
        *v26 = v14;
        a2 = v144;
        a3 = v145;
        if (v21 < v27)
        {
LABEL_56:
          result = std::__introsort<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **,false>(v147, v26, v145, a4 & 1);
          a4 = 0;
          v7 = v26 + 1;
          continue;
        }
        v44 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v147, v26);
        v7 = v26 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v26 + 1, v144);
        if (!(_DWORD)result)
        {
          if (v44)
            continue;
          goto LABEL_56;
        }
        a2 = v26;
        if (!v44)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  int v9;
  const char *v10;
  const char *v11;
  const char *v12;
  int v13;
  uint64_t v14;
  const char *v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;

  v6 = *a2;
  v7 = *a1;
  v8 = (const char *)(*a2 + 32);
  v9 = *(char *)(*a2 + 55);
  v10 = v8;
  if (v9 < 0)
    v10 = *(const char **)v8;
  v11 = (const char *)(v7 + 32);
  v12 = (const char *)(v7 + 32);
  if (*(char *)(v7 + 55) < 0)
    v12 = *(const char **)v11;
  v13 = strcmp(v10, v12);
  v14 = *a3;
  v15 = (const char *)(*a3 + 32);
  v16 = *(char *)(*a3 + 55);
  if ((v13 & 0x80000000) == 0)
  {
    if (v16 < 0)
    {
      v15 = *(const char **)v15;
      if ((v9 & 0x80000000) == 0)
        goto LABEL_12;
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    v8 = *(const char **)v8;
LABEL_12:
    result = strcmp(v15, v8);
    if ((result & 0x80000000) != 0)
    {
      *a2 = v14;
      *a3 = v6;
      v18 = *a2;
      v19 = *a1;
      v20 = (const char *)(*a2 + 32);
      if (*(char *)(*a2 + 55) < 0)
        v20 = *(const char **)v20;
      v21 = (const char *)(v19 + 32);
      if (*(char *)(v19 + 55) < 0)
        v21 = *(const char **)v21;
      result = strcmp(v20, v21);
      if ((result & 0x80000000) != 0)
      {
        *a1 = v18;
        *a2 = v19;
      }
    }
    return result;
  }
  if (v16 < 0)
  {
    v15 = *(const char **)v15;
    if ((v9 & 0x80000000) == 0)
      goto LABEL_8;
LABEL_28:
    v8 = *(const char **)v8;
    goto LABEL_8;
  }
  if (v9 < 0)
    goto LABEL_28;
LABEL_8:
  result = strcmp(v15, v8);
  if ((result & 0x80000000) != 0)
  {
    *a1 = v14;
LABEL_25:
    *a3 = v7;
    return result;
  }
  *a1 = v6;
  *a2 = v7;
  v22 = *a3;
  v23 = (const char *)(*a3 + 32);
  if (*(char *)(*a3 + 55) < 0)
    v23 = *(const char **)v23;
  if (*(char *)(v7 + 55) < 0)
    v11 = *(const char **)v11;
  result = strcmp(v23, v11);
  if ((result & 0x80000000) != 0)
  {
    *a2 = v22;
    goto LABEL_25;
  }
  return result;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  v10 = (const char *)(*a4 + 32);
  if (*(char *)(*a4 + 55) < 0)
    v10 = *(const char **)v10;
  v11 = (const char *)(v9 + 32);
  if (*(char *)(v9 + 55) < 0)
    v11 = *(const char **)v11;
  result = strcmp(v10, v11);
  if ((result & 0x80000000) != 0)
  {
    *a3 = v8;
    *a4 = v9;
    v13 = *a3;
    v14 = *a2;
    v15 = (const char *)(*a3 + 32);
    if (*(char *)(*a3 + 55) < 0)
      v15 = *(const char **)v15;
    v16 = (const char *)(v14 + 32);
    if (*(char *)(v14 + 55) < 0)
      v16 = *(const char **)v16;
    result = strcmp(v15, v16);
    if ((result & 0x80000000) != 0)
    {
      *a2 = v13;
      *a3 = v14;
      v17 = *a2;
      v18 = *a1;
      v19 = (const char *)(*a2 + 32);
      if (*(char *)(*a2 + 55) < 0)
        v19 = *(const char **)v19;
      v20 = (const char *)(v18 + 32);
      if (*(char *)(v18 + 55) < 0)
        v20 = *(const char **)v20;
      result = strcmp(v19, v20);
      if ((result & 0x80000000) != 0)
      {
        *a1 = v17;
        *a2 = v18;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(a1, a2, a3, a4);
  v10 = *a5;
  v11 = *a4;
  v12 = (const char *)(*a5 + 32);
  if (*(char *)(*a5 + 55) < 0)
    v12 = *(const char **)v12;
  v13 = (const char *)(v11 + 32);
  if (*(char *)(v11 + 55) < 0)
    v13 = *(const char **)v13;
  result = strcmp(v12, v13);
  if ((result & 0x80000000) != 0)
  {
    *a4 = v10;
    *a5 = v11;
    v15 = *a4;
    v16 = *a3;
    v17 = (const char *)(*a4 + 32);
    if (*(char *)(*a4 + 55) < 0)
      v17 = *(const char **)v17;
    v18 = (const char *)(v16 + 32);
    if (*(char *)(v16 + 55) < 0)
      v18 = *(const char **)v18;
    result = strcmp(v17, v18);
    if ((result & 0x80000000) != 0)
    {
      *a3 = v15;
      *a4 = v16;
      v19 = *a3;
      v20 = *a2;
      v21 = (const char *)(*a3 + 32);
      if (*(char *)(*a3 + 55) < 0)
        v21 = *(const char **)v21;
      v22 = (const char *)(v20 + 32);
      if (*(char *)(v20 + 55) < 0)
        v22 = *(const char **)v22;
      result = strcmp(v21, v22);
      if ((result & 0x80000000) != 0)
      {
        *a2 = v19;
        *a3 = v20;
        v23 = *a2;
        v24 = *a1;
        v25 = (const char *)(*a2 + 32);
        if (*(char *)(*a2 + 55) < 0)
          v25 = *(const char **)v25;
        v26 = (const char *)(v24 + 32);
        if (*(char *)(v24 + 55) < 0)
          v26 = *(const char **)v26;
        result = strcmp(v25, v26);
        if ((result & 0x80000000) != 0)
        {
          *a1 = v23;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const char **v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  int v23;
  uint64_t *v24;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = (const char *)(v6 + 32);
      if (*(char *)(v6 + 55) < 0)
        v8 = *(const char **)v8;
      v9 = (const char *)(v7 + 32);
      if (*(char *)(v7 + 55) < 0)
        v9 = *(const char **)v9;
      if (strcmp(v8, v9) < 0)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 24;
      break;
  }
  while (1)
  {
    v14 = *v11;
    v15 = (const char **)(*v11 + 32);
    v16 = (const char *)v15;
    if (*(char *)(*v11 + 55) < 0)
      v16 = *v15;
    v17 = *v10;
    v18 = (const char *)(v17 + 32);
    if (*(char *)(v17 + 55) < 0)
      v18 = *(const char **)v18;
    if (strcmp(v16, v18) < 0)
    {
      v19 = v13;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v19) = v17;
        v20 = v19 - 8;
        if (v19 == 8)
          break;
        v21 = (const char *)v15;
        if (*(char *)(v14 + 55) < 0)
          v21 = *v15;
        v17 = *(uint64_t *)((char *)a1 + v19 - 16);
        v22 = (const char *)(v17 + 32);
        if (*(char *)(v17 + 55) < 0)
          v22 = *(const char **)v22;
        v23 = strcmp(v21, v22);
        v19 = v20;
        if ((v23 & 0x80000000) == 0)
        {
          v24 = (uint64_t *)((char *)a1 + v20);
          goto LABEL_24;
        }
      }
      v24 = a1;
LABEL_24:
      *v24 = v14;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v13 += 8;
    if (++v11 == a2)
      return 1;
  }
}

void DSPGraph::Graph::makeAUStrip(DSPGraph::Graph *this@<X0>, CFDictionaryRef *a2@<X8>)
{
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *__p[3];
  void *v19;
  char *v20;
  unint64_t v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  std::vector<void const*>::reserve(&v19, *((_QWORD *)this + 4));
  v4 = (_QWORD *)*((_QWORD *)this + 3);
  if (v4)
  {
    v5 = v20;
    v6 = v21;
    v7 = (char *)v19;
    do
    {
      v8 = v4[2];
      if ((unint64_t)v5 >= v6)
      {
        v9 = (v5 - v7) >> 3;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v6 - (_QWORD)v7) >> 2 > v10)
          v10 = (uint64_t)(v6 - (_QWORD)v7) >> 2;
        if (v6 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v11);
        else
          v12 = 0;
        v13 = (char *)(v11 + 8 * v9);
        *(_QWORD *)v13 = v8;
        v14 = v13 + 8;
        if (v5 != v7)
        {
          do
          {
            v15 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *((_QWORD *)v13 - 1) = v15;
            v13 -= 8;
          }
          while (v5 != v7);
          v5 = v7;
        }
        v7 = v13;
        v6 = v11 + 8 * v12;
        if (v5)
          operator delete(v5);
        v5 = v14;
      }
      else
      {
        *(_QWORD *)v5 = v8;
        v5 += 8;
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v20 = v5;
    v21 = v6;
    v19 = v7;
  }
  else
  {
    v7 = (char *)v19;
    v5 = v20;
  }
  v16 = 126 - 2 * __clz((v5 - v7) >> 3);
  if (v5 == v7)
    v17 = 0;
  else
    v17 = v16;
  std::__introsort<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box*> DSPGraph::GetBoxesSortedByName<std::unique_ptr<DSPGraph::Box>>(std::unordered_set<std::unique_ptr<DSPGraph::Box>> const&)::{lambda(DSPGraph::Box*,DSPGraph::Box*)#1} &,DSPGraph::Box**,false>((uint64_t)v7, (uint64_t *)v5, v17, 1);
  memset(__p, 0, sizeof(__p));
  std::vector<DSPGraph::Box *>::__init_with_size[abi:ne180100]<DSPGraph::Box **,DSPGraph::Box **>(__p, v7, (uint64_t)v5, (v5 - v7) >> 3);
  DSPGraph::stripDictFromBoxes(a2, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
  if (v19)
    operator delete(v19);
}

void sub_18F0E6C90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  void *v28;
  void *v29;

  if (v28)
    operator delete(v28);
  if (v29)
    operator delete(v29);
  __cxa_begin_catch(a1);
  *v26 = 0;
  __cxa_end_catch();
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box*> DSPGraph::GetBoxesSortedByName<std::unique_ptr<DSPGraph::Box>>(std::unordered_set<std::unique_ptr<DSPGraph::Box>> const&)::{lambda(DSPGraph::Box*,DSPGraph::Box*)#1} &,DSPGraph::Box**,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const char *v17;
  const char **v18;
  const char *v19;
  const char **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  BOOL v44;
  const char *v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t *v50;
  const char *v51;
  const char *v52;
  uint64_t *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  const char *v70;
  uint64_t *v71;
  BOOL v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  const char **v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  const char *v83;
  const char *v84;
  uint64_t *v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t *v89;
  const char *v90;
  uint64_t v91;
  const char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  const char **v97;
  const char *v98;
  uint64_t *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  const char *v103;
  const char *v104;
  const char *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  const char **v125;
  const char *v126;
  uint64_t *v127;
  const char *v128;
  const char *v129;
  BOOL v130;
  uint64_t *v131;
  uint64_t v132;
  const char **v133;
  const char *v134;
  uint64_t v135;
  const char *v136;
  uint64_t *v137;
  const char *v138;
  const char *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  int64_t v146;
  uint64_t *v147;

  v6 = (uint64_t *)result;
LABEL_2:
  v143 = a2 - 1;
  v144 = a2;
  v140 = a2 - 3;
  v141 = a2 - 2;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = (char *)a2 - (char *)v7;
    v10 = a2 - v7;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v67 = *v143;
        v68 = *v8;
        v69 = (const char *)(*v143 + 32);
        if (*(char *)(*v143 + 55) < 0)
          v69 = *(const char **)v69;
        v70 = (const char *)(v68 + 32);
        if (*(char *)(v68 + 55) < 0)
          v70 = *(const char **)v70;
        result = strcmp(v69, v70);
        if ((result & 0x80000000) != 0)
        {
          *v8 = v67;
          *v143 = v68;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v8, v8 + 1, v143);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v8, v8 + 1, v8 + 2, v143);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v8, v8 + 1, v8 + 2, v8 + 3, v143);
      default:
        if (v9 <= 191)
        {
          v71 = v8 + 1;
          v73 = v8 == a2 || v71 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v73)
            {
              v74 = 0;
              v75 = v8;
              do
              {
                v76 = v71;
                v77 = v75[1];
                v78 = (const char **)(v77 + 32);
                v79 = (const char *)(v77 + 32);
                if (*(char *)(v77 + 55) < 0)
                  v79 = *v78;
                v80 = *v75;
                v81 = (const char *)(*v75 + 32);
                if (*(char *)(*v75 + 55) < 0)
                  v81 = *(const char **)v81;
                result = strcmp(v79, v81);
                if ((result & 0x80000000) != 0)
                {
                  v82 = v74;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v82 + 8) = v80;
                    if (!v82)
                      break;
                    v83 = (const char *)(v77 + 32);
                    if (*(char *)(v77 + 55) < 0)
                      v83 = *v78;
                    v80 = *(uint64_t *)((char *)v8 + v82 - 8);
                    v84 = (const char *)(v80 + 32);
                    if (*(char *)(v80 + 55) < 0)
                      v84 = *(const char **)v84;
                    result = strcmp(v83, v84);
                    v82 -= 8;
                    if ((result & 0x80000000) == 0)
                    {
                      v85 = (uint64_t *)((char *)v8 + v82 + 8);
                      goto LABEL_135;
                    }
                  }
                  v85 = v8;
LABEL_135:
                  *v85 = v77;
                  a2 = v144;
                }
                v71 = v76 + 1;
                v74 += 8;
                v75 = v76;
              }
              while (v76 + 1 != a2);
            }
          }
          else if (!v73)
          {
            do
            {
              v131 = v71;
              v132 = v8[1];
              v133 = (const char **)(v132 + 32);
              v134 = (const char *)(v132 + 32);
              if (*(char *)(v132 + 55) < 0)
                v134 = *v133;
              v135 = *v8;
              v136 = (const char *)(*v8 + 32);
              if (*(char *)(*v8 + 55) < 0)
                v136 = *(const char **)v136;
              result = strcmp(v134, v136);
              if ((result & 0x80000000) != 0)
              {
                v137 = v131;
                do
                {
                  *v137 = v135;
                  v138 = (const char *)(v132 + 32);
                  if (*(char *)(v132 + 55) < 0)
                    v138 = *v133;
                  v135 = *(v137 - 2);
                  v139 = (const char *)(v135 + 32);
                  if (*(char *)(v135 + 55) < 0)
                    v139 = *(const char **)v139;
                  result = strcmp(v138, v139);
                  --v137;
                }
                while ((result & 0x80000000) != 0);
                *v137 = v132;
              }
              v71 = v131 + 1;
              v8 = v131;
            }
            while (v131 + 1 != v144);
          }
          return result;
        }
        v147 = v8;
        if (!a3)
        {
          if (v8 != a2)
          {
            v86 = (unint64_t)(v10 - 2) >> 1;
            v146 = v86;
            do
            {
              v87 = v86;
              if (v146 >= v86)
              {
                v88 = (2 * v86) | 1;
                v89 = &v147[v88];
                if (2 * v86 + 2 < v10)
                {
                  v90 = (const char *)(*v89 + 32);
                  if (*(char *)(*v89 + 55) < 0)
                    v90 = *(const char **)v90;
                  v91 = v89[1];
                  ++v89;
                  v92 = (const char *)(v91 + 32);
                  if (*(char *)(v91 + 55) < 0)
                    v92 = *(const char **)v92;
                  if (strcmp(v90, v92) < 0)
                    v88 = 2 * v87 + 2;
                  else
                    v89 = &v147[v88];
                }
                v93 = &v147[v87];
                v94 = *v89;
                v95 = *v93;
                v96 = (const char *)(*v89 + 32);
                if (*(char *)(*v89 + 55) < 0)
                  v96 = *(const char **)v96;
                v97 = (const char **)(v95 + 32);
                v98 = (const char *)(v95 + 32);
                if (*(char *)(v95 + 55) < 0)
                  v98 = *v97;
                result = strcmp(v96, v98);
                if ((result & 0x80000000) == 0)
                {
                  do
                  {
                    v99 = v89;
                    *v93 = v94;
                    if (v146 < v88)
                      break;
                    v100 = (2 * v88) | 1;
                    v89 = &v147[v100];
                    v88 = 2 * v88 + 2;
                    if (v88 >= v10)
                    {
                      v88 = v100;
                    }
                    else
                    {
                      v101 = (const char *)(*v89 + 32);
                      if (*(char *)(*v89 + 55) < 0)
                        v101 = *(const char **)v101;
                      v102 = v89[1];
                      ++v89;
                      v103 = (const char *)(v102 + 32);
                      if (*(char *)(v102 + 55) < 0)
                        v103 = *(const char **)v103;
                      if (strcmp(v101, v103) >= 0)
                      {
                        v89 = &v147[v100];
                        v88 = v100;
                      }
                    }
                    v94 = *v89;
                    v104 = (const char *)(*v89 + 32);
                    if (*(char *)(*v89 + 55) < 0)
                      v104 = *(const char **)v104;
                    v105 = (const char *)(v95 + 32);
                    if (*(char *)(v95 + 55) < 0)
                      v105 = *v97;
                    result = strcmp(v104, v105);
                    v93 = v99;
                  }
                  while ((result & 0x80000000) == 0);
                  *v99 = v95;
                }
              }
              v86 = v87 - 1;
            }
            while (v87);
            v106 = (unint64_t)v9 >> 3;
            v107 = v144;
            v108 = v147;
            do
            {
              v109 = 0;
              v110 = *v108;
              v111 = v106 - 2;
              if (v106 < 2)
                v111 = v106 - 1;
              v112 = v111 >> 1;
              do
              {
                v113 = (uint64_t)&v108[v109 + 1];
                v114 = (2 * v109) | 1;
                v115 = 2 * v109 + 2;
                if (v115 < v106)
                {
                  v116 = (const char *)(*(_QWORD *)v113 + 32);
                  if (*(char *)(*(_QWORD *)v113 + 55) < 0)
                    v116 = *(const char **)v116;
                  v117 = v108[v109 + 2];
                  v118 = (const char *)(v117 + 32);
                  if (*(char *)(v117 + 55) < 0)
                    v118 = *(const char **)v118;
                  result = strcmp(v116, v118);
                  if ((int)result < 0)
                  {
                    v113 += 8;
                    v114 = v115;
                  }
                }
                *v108 = *(_QWORD *)v113;
                v108 = (uint64_t *)v113;
                v109 = v114;
              }
              while (v114 <= v112);
              if ((uint64_t *)v113 == --v107)
              {
                *(_QWORD *)v113 = v110;
              }
              else
              {
                *(_QWORD *)v113 = *v107;
                *v107 = v110;
                v119 = v113 - (_QWORD)v147 + 8;
                if (v119 >= 9)
                {
                  v120 = (unint64_t)((v119 >> 3) - 2) >> 1;
                  v121 = &v147[v120];
                  v122 = *v121;
                  v123 = (const char *)(*v121 + 32);
                  if (*(char *)(*v121 + 55) < 0)
                    v123 = *(const char **)v123;
                  v124 = *(_QWORD *)v113;
                  v125 = (const char **)(*(_QWORD *)v113 + 32);
                  v126 = (const char *)v125;
                  if (*(char *)(*(_QWORD *)v113 + 55) < 0)
                    v126 = *v125;
                  result = strcmp(v123, v126);
                  if ((result & 0x80000000) != 0)
                  {
                    do
                    {
                      v127 = v121;
                      *(_QWORD *)v113 = v122;
                      if (!v120)
                        break;
                      v120 = (v120 - 1) >> 1;
                      v121 = &v147[v120];
                      v122 = *v121;
                      v128 = (const char *)(*v121 + 32);
                      if (*(char *)(*v121 + 55) < 0)
                        v128 = *(const char **)v128;
                      v129 = (const char *)v125;
                      if (*(char *)(v124 + 55) < 0)
                        v129 = *v125;
                      result = strcmp(v128, v129);
                      v113 = (uint64_t)v127;
                    }
                    while ((result & 0x80000000) != 0);
                    *v127 = v124;
                  }
                }
              }
              v130 = v106-- <= 2;
              v108 = v147;
            }
            while (!v130);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v12, v8, v143);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v8, v12, v143);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v8 + 1, v12 - 1, v141);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v8 + 2, &v8[v11 + 1], v140);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(v12 - 1, v12, &v8[v11 + 1]);
          v13 = *v8;
          *v8 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v8;
        v145 = a3;
        if ((a4 & 1) == 0)
        {
          v16 = *(v8 - 1);
          v17 = (const char *)(v16 + 32);
          if (*(char *)(v16 + 55) < 0)
            v17 = *(const char **)v17;
          v18 = (const char **)(v14 + 32);
          v15 = *(char *)(v14 + 55);
          v19 = (const char *)(v14 + 32);
          if (v15 < 0)
            v19 = *v18;
          if (strcmp(v17, v19) < 0)
            goto LABEL_16;
          v45 = (const char *)(v14 + 32);
          if (v15 < 0)
            v45 = *v18;
          v46 = (const char *)(*v143 + 32);
          if (*(char *)(*v143 + 55) < 0)
            v46 = *(const char **)v46;
          result = strcmp(v45, v46);
          if ((result & 0x80000000) != 0)
          {
            v7 = v8;
            do
            {
              v47 = (const char *)(v14 + 32);
              if (v15 < 0)
                v47 = *v18;
              v48 = v7[1];
              ++v7;
              v49 = (const char *)(v48 + 32);
              if (*(char *)(v48 + 55) < 0)
                v49 = *(const char **)v49;
              result = strcmp(v47, v49);
            }
            while ((result & 0x80000000) == 0);
          }
          else
          {
            v50 = v8 + 1;
            do
            {
              v7 = v50;
              if (v50 >= a2)
                break;
              v51 = (const char *)(v14 + 32);
              if (v15 < 0)
                v51 = *v18;
              v52 = (const char *)(*v50 + 32);
              if (*(char *)(*v50 + 55) < 0)
                v52 = *(const char **)v52;
              result = strcmp(v51, v52);
              v50 = v7 + 1;
            }
            while ((result & 0x80000000) == 0);
          }
          v53 = a2;
          if (v7 < a2)
          {
            v53 = a2;
            do
            {
              v54 = (const char *)(v14 + 32);
              if (v15 < 0)
                v54 = *v18;
              v55 = *--v53;
              v56 = (const char *)(v55 + 32);
              if (*(char *)(v55 + 55) < 0)
                v56 = *(const char **)v56;
              result = strcmp(v54, v56);
            }
            while ((result & 0x80000000) != 0);
          }
          if (v7 < v53)
          {
            v57 = *v7;
            v58 = *v53;
            do
            {
              *v7 = v58;
              *v53 = v57;
              v59 = *(char *)(v14 + 55);
              do
              {
                v60 = v7[1];
                ++v7;
                v57 = v60;
                v61 = (const char *)(v14 + 32);
                if (v59 < 0)
                  v61 = *v18;
                v62 = (const char *)(v57 + 32);
                if (*(char *)(v57 + 55) < 0)
                  v62 = *(const char **)v62;
              }
              while ((strcmp(v61, v62) & 0x80000000) == 0);
              do
              {
                v63 = *--v53;
                v58 = v63;
                v64 = (const char *)(v14 + 32);
                if (v59 < 0)
                  v64 = *v18;
                v65 = (const char *)(v58 + 32);
                if (*(char *)(v58 + 55) < 0)
                  v65 = *(const char **)v65;
                result = strcmp(v64, v65);
              }
              while ((result & 0x80000000) != 0);
            }
            while (v7 < v53);
          }
          v66 = v7 - 1;
          if (v7 - 1 != v8)
            *v8 = *v66;
          a4 = 0;
          *v66 = v14;
          continue;
        }
        LOBYTE(v15) = *(_BYTE *)(v14 + 55);
LABEL_16:
        v20 = (const char **)(v14 + 32);
        v21 = v8;
        do
        {
          v23 = v21[1];
          ++v21;
          v22 = v23;
          v24 = (const char *)(v23 + 32);
          if (*(char *)(v23 + 55) < 0)
            v24 = *(const char **)v24;
          v25 = (const char *)(v14 + 32);
          if ((v15 & 0x80) != 0)
            v25 = *v20;
        }
        while (strcmp(v24, v25) < 0);
        v26 = v21 - 1;
        v27 = a2;
        if (v21 - 1 == v8)
        {
          v27 = a2;
          do
          {
            if (v21 >= v27)
              break;
            v31 = *--v27;
            v32 = (const char *)(v31 + 32);
            if (*(char *)(v31 + 55) < 0)
              v32 = *(const char **)v32;
            v33 = (const char *)(v14 + 32);
            if ((v15 & 0x80) != 0)
              v33 = *v20;
          }
          while ((strcmp(v32, v33) & 0x80000000) == 0);
        }
        else
        {
          do
          {
            v28 = *--v27;
            v29 = (const char *)(v28 + 32);
            if (*(char *)(v28 + 55) < 0)
              v29 = *(const char **)v29;
            v30 = (const char *)(v14 + 32);
            if ((v15 & 0x80) != 0)
              v30 = *v20;
          }
          while ((strcmp(v29, v30) & 0x80000000) == 0);
        }
        if (v21 < v27)
        {
          v34 = *v27;
          v35 = v21;
          v36 = v27;
          do
          {
            *v35 = v34;
            *v36 = v22;
            v37 = *(char *)(v14 + 55);
            do
            {
              v38 = v35[1];
              ++v35;
              v22 = v38;
              v39 = (const char *)(v38 + 32);
              if (*(char *)(v38 + 55) < 0)
                v39 = *(const char **)v39;
              v40 = (const char *)(v14 + 32);
              if (v37 < 0)
                v40 = *v20;
            }
            while (strcmp(v39, v40) < 0);
            v26 = v35 - 1;
            do
            {
              v41 = *--v36;
              v34 = v41;
              v42 = (const char *)(v41 + 32);
              if (*(char *)(v41 + 55) < 0)
                v42 = *(const char **)v42;
              v43 = (const char *)(v14 + 32);
              if (v37 < 0)
                v43 = *v20;
            }
            while ((strcmp(v42, v43) & 0x80000000) == 0);
          }
          while (v35 < v36);
        }
        v6 = v147;
        if (v26 != v147)
          *v147 = *v26;
        *v26 = v14;
        a2 = v144;
        a3 = v145;
        if (v21 < v27)
        {
LABEL_56:
          result = std::__introsort<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box*> DSPGraph::GetBoxesSortedByName<std::unique_ptr<DSPGraph::Box>>(std::unordered_set<std::unique_ptr<DSPGraph::Box>> const&)::{lambda(DSPGraph::Box*,DSPGraph::Box*)#1} &,DSPGraph::Box**,false>(v147, v26, v145, a4 & 1);
          a4 = 0;
          v7 = v26 + 1;
          continue;
        }
        v44 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box*> DSPGraph::GetBoxesSortedByName<std::unique_ptr<DSPGraph::Box>>(std::unordered_set<std::unique_ptr<DSPGraph::Box>> const&)::{lambda(DSPGraph::Box*,DSPGraph::Box*)#1} &,DSPGraph::Box**>(v147, v26);
        v7 = v26 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box*> DSPGraph::GetBoxesSortedByName<std::unique_ptr<DSPGraph::Box>>(std::unordered_set<std::unique_ptr<DSPGraph::Box>> const&)::{lambda(DSPGraph::Box*,DSPGraph::Box*)#1} &,DSPGraph::Box**>(v26 + 1, v144);
        if (!(_DWORD)result)
        {
          if (v44)
            continue;
          goto LABEL_56;
        }
        a2 = v26;
        if (!v44)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box*> DSPGraph::GetBoxesSortedByName<std::unique_ptr<DSPGraph::Box>>(std::unordered_set<std::unique_ptr<DSPGraph::Box>> const&)::{lambda(DSPGraph::Box*,DSPGraph::Box*)#1} &,DSPGraph::Box**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const char **v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  int v23;
  uint64_t *v24;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = (const char *)(v6 + 32);
      if (*(char *)(v6 + 55) < 0)
        v8 = *(const char **)v8;
      v9 = (const char *)(v7 + 32);
      if (*(char *)(v7 + 55) < 0)
        v9 = *(const char **)v9;
      if (strcmp(v8, v9) < 0)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<DSPGraph::Box *> DSPGraph::GetBoxesSortedByName<DSPGraph::Box *>(std::unordered_set<DSPGraph::Box *> const&)::{lambda(DSPGraph::Box *,DSPGraph::Box *)#1} &,DSPGraph::Box **>(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 24;
      break;
  }
  while (1)
  {
    v14 = *v11;
    v15 = (const char **)(*v11 + 32);
    v16 = (const char *)v15;
    if (*(char *)(*v11 + 55) < 0)
      v16 = *v15;
    v17 = *v10;
    v18 = (const char *)(v17 + 32);
    if (*(char *)(v17 + 55) < 0)
      v18 = *(const char **)v18;
    if (strcmp(v16, v18) < 0)
    {
      v19 = v13;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v19) = v17;
        v20 = v19 - 8;
        if (v19 == 8)
          break;
        v21 = (const char *)v15;
        if (*(char *)(v14 + 55) < 0)
          v21 = *v15;
        v17 = *(uint64_t *)((char *)a1 + v19 - 16);
        v22 = (const char *)(v17 + 32);
        if (*(char *)(v17 + 55) < 0)
          v22 = *(const char **)v22;
        v23 = strcmp(v21, v22);
        v19 = v20;
        if ((v23 & 0x80000000) == 0)
        {
          v24 = (uint64_t *)((char *)a1 + v20);
          goto LABEL_24;
        }
      }
      v24 = a1;
LABEL_24:
      *v24 = v14;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v13 += 8;
    if (++v11 == a2)
      return 1;
  }
}

void DSPGraph::Graph::setPropertyStrip(DSPGraph::Graph *this, const __CFDictionary *a2)
{
  DSPGraph::Graph::setPropertyStrip(this, a2, 0);
}

unint64_t DSPGraph::Graph::setPropertyStrip(__CFDictionary const*,__CFString const*)::$_0::operator()<char const*>(const __CFDictionary **a1, char *a2)
{
  const __CFDictionary *v3;
  const __CFNumber *v5;
  unsigned int v6;
  const __CFString *v7;
  unsigned int *v8;
  void **v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  std::runtime_error *exception;
  char v15[4];
  void *__p[2];
  char v17;
  char v18;

  v3 = *a1;
  if (!v3)
    goto LABEL_21;
  v5 = applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>(v3, a2);
  v6 = v5;
  if ((unint64_t)v5 >> 32)
  {
    v11 = v5 >> 8;
    v12 = (unint64_t)v5 & 0x100000000;
    return v6 | ((unint64_t)v11 << 8) | v12 & 0x100000000;
  }
  if (!*a1)
  {
LABEL_21:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  v7 = (const __CFString *)applesauce::CF::details::at_key<char const*&>(*a1, a2);
  if (!v7)
  {
    LOBYTE(__p[0]) = 0;
    v18 = 0;
    goto LABEL_13;
  }
  applesauce::CF::convert_as<std::string,0>((uint64_t)__p, v7);
  if (!v18)
  {
LABEL_13:
    v11 = v6 >> 8;
LABEL_14:
    LOBYTE(v6) = 0;
    v12 = 0;
    return v6 | ((unint64_t)v11 << 8) | v12 & 0x100000000;
  }
  *(_DWORD *)v15 = 0;
  if (v17 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v10 = DSPGraph::StrToOSType((DSPGraph *)v9, v15, v8);
  if (v10)
  {
    LOBYTE(v6) = v15[0];
    v11 = *(_DWORD *)v15 >> 8;
    v12 = 0x100000000;
  }
  else
  {
    v12 = 0;
    v11 = v6 >> 8;
  }
  if (v18 && v17 < 0)
    operator delete(__p[0]);
  if (!v10)
    goto LABEL_14;
  return v6 | ((unint64_t)v11 << 8) | v12 & 0x100000000;
}

void sub_18F0E79A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *applesauce::CF::StringRef::operator->(_QWORD *result)
{
  std::runtime_error *exception;

  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_18F0E7A24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double applesauce::CF::StringRef_proxy::convert_or(std::string *a1, const __CFString *a2, uint64_t a3)
{
  CFTypeID TypeID;
  double result;
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  if (a2 && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(a2)))
  {
    applesauce::CF::details::CFString_get_value<false>((uint64_t)a1, a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    result = *(double *)&__p.__r_.__value_.__l.__data_;
    *a1 = __p;
  }
  return result;
}

const void **applesauce::CF::ObjectRef<void const*>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **applesauce::CF::ObjectRef<__CFReadStream *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

const __CFNumber *applesauce::CF::convert_as<unsigned long long,0>(const __CFNumber *result)
{
  const __CFNumber *v1;
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  BOOL v13;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  double valuePtr;

  if (result)
  {
    v1 = result;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          Value = CFNumberGetValue(v1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_16;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          v7 = CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_24;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          v8 = CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_26;
        case kCFNumberSInt64Type:
          valuePtr = 0.0;
          v9 = CFNumberGetValue(v1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_37;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          v10 = CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloat64Type:
          valuePtr = 0.0;
          v11 = CFNumberGetValue(v1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_39;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          Value = CFNumberGetValue(v1, kCFNumberCharType, &valuePtr);
LABEL_16:
          if (Value)
            v12 = LOBYTE(valuePtr);
          else
            v12 = 0;
          if (Value != 0 && SLOBYTE(valuePtr) < 0)
            v5 = -256;
          else
            v5 = 0;
          LOBYTE(v6) = v12;
          return (const __CFNumber *)(v6 | v5);
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          v7 = CFNumberGetValue(v1, kCFNumberShortType, &valuePtr);
LABEL_24:
          v13 = v7 == 0;
          v14 = LOBYTE(valuePtr);
          v15 = SLOWORD(valuePtr);
          goto LABEL_27;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          v8 = CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
LABEL_26:
          v13 = v8 == 0;
          v14 = LOBYTE(valuePtr);
          v15 = SLODWORD(valuePtr);
LABEL_27:
          v16 = v15 & 0xFFFFFFFFFFFFFF00 | v14;
          if (v13)
            v6 = 0;
          else
            v6 = v16;
          goto LABEL_43;
        case kCFNumberLongType:
          valuePtr = 0.0;
          v9 = CFNumberGetValue(v1, kCFNumberLongType, &valuePtr);
          goto LABEL_37;
        case kCFNumberLongLongType:
          valuePtr = 0.0;
          v9 = CFNumberGetValue(v1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_37;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          v10 = CFNumberGetValue(v1, kCFNumberFloatType, &valuePtr);
LABEL_33:
          v17 = v10 == 0;
          v6 = (unint64_t)*(float *)&valuePtr;
          goto LABEL_40;
        case kCFNumberDoubleType:
          valuePtr = 0.0;
          v11 = CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_39;
        case kCFNumberCFIndexType:
          valuePtr = 0.0;
          v9 = CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_37;
        case kCFNumberNSIntegerType:
          valuePtr = 0.0;
          v9 = CFNumberGetValue(v1, kCFNumberNSIntegerType, &valuePtr);
LABEL_37:
          v17 = v9 == 0;
          v6 = *(_QWORD *)&valuePtr;
          goto LABEL_40;
        case kCFNumberCGFloatType:
          valuePtr = 0.0;
          v11 = CFNumberGetValue(v1, kCFNumberCGFloatType, &valuePtr);
LABEL_39:
          v17 = v11 == 0;
          v6 = (unint64_t)valuePtr;
LABEL_40:
          if (v17)
            v6 = 0;
LABEL_43:
          v5 = v6 & 0xFFFFFFFFFFFFFF00;
          break;
        default:
          v5 = 0;
          LOBYTE(v6) = 0;
          break;
      }
      return (const __CFNumber *)(v6 | v5);
    }
    else
    {
      v4 = CFBooleanGetTypeID();
      if (v4 == CFGetTypeID(v1))
        return (const __CFNumber *)CFBooleanGetValue(v1);
      else
        return 0;
    }
  }
  return result;
}

void DSPGraph::Graph::GraphProperty::~GraphProperty(DSPGraph::Graph::GraphProperty *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)this + 32))
  {
    v3 = (void *)*((_QWORD *)this + 1);
    if (v3)
    {
      *((_QWORD *)this + 2) = v3;
      operator delete(v3);
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,DSPGraph::Graph::GraphProperty>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

double DSPGraph::Graph::getLatencyInSeconds(DSPGraph::Graph *this)
{
  unsigned int v2;
  double v3;
  DSPGraph::Box *v4;
  uint64_t v5;
  unint64_t v6;
  double v7;

  if (((*((_QWORD *)this + 39) - *((_QWORD *)this + 38)) & 0x7FFFFFFF8) == 0)
    return 0.0;
  v2 = 0;
  v3 = 0.0;
  do
  {
    v4 = (DSPGraph::Box *)DSPGraph::Graph::out(this, v2);
    v5 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)v4 + 72))(v4);
    v6 = DSPGraph::Box::upstreamLatencyInTicks(v4);
    v7 = (double)*(unint64_t *)(*((_QWORD *)v4 + 1) + 696);
    if ((double)(v6 + v5) / v7 >= v3)
      v3 = (double)(v6 + v5) / v7;
    ++v2;
  }
  while (v2 < ((*((_QWORD *)this + 39) - *((_QWORD *)this + 38)) >> 3));
  return v3;
}

double DSPGraph::Graph::getLatencyInSeconds(DSPGraph::Graph *this, unsigned int a2)
{
  DSPGraph::Box *v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (a2 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 39) - *((_QWORD *)this + 38)) >> 3))
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "getLatencyInSeconds");
    std::string::basic_string[abi:ne180100]<0>(&v5, "latency queried on non-existent output");
    DSPGraph::ThrowException(1701602593, &v7, 2299, &v6, &v5);
  }
  v2 = (DSPGraph::Box *)DSPGraph::Graph::out(this, a2);
  v3 = (*(uint64_t (**)(DSPGraph::Box *))(*(_QWORD *)v2 + 72))(v2);
  return (double)(DSPGraph::Box::upstreamLatencyInTicks(v2) + v3)
       / (double)*(unint64_t *)(*((_QWORD *)v2 + 1) + 696);
}

void sub_18F0E8054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[5];
    if (v3)
    {
      __p[6] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

char *DSPGraph::Graph::getOrderingConstraints@<X0>(char *this@<X0>, void **a2@<X8>)
{
  _QWORD *v2;
  char *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    v4 = 0;
    this = 0;
    do
    {
      v5 = *(_QWORD **)(v2[2] + 128);
      if (v5)
      {
        v6 = this;
        do
        {
          v7 = v5[2];
          v8 = v2[2];
          v9 = (unint64_t)a2[2];
          if ((unint64_t)v6 >= v9)
          {
            v10 = (char *)*a2;
            v11 = (v6 - (_BYTE *)*a2) >> 4;
            v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 60)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v13 = v9 - (_QWORD)v10;
            if (v13 >> 3 > v12)
              v12 = v13 >> 3;
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
              v14 = 0xFFFFFFFFFFFFFFFLL;
            else
              v14 = v12;
            if (v14)
            {
              if (v14 >> 60)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v15 = (char *)operator new(16 * v14);
            }
            else
            {
              v15 = 0;
            }
            v16 = &v15[16 * v11];
            *(_QWORD *)v16 = v7;
            *((_QWORD *)v16 + 1) = v8;
            v17 = v16;
            if (v4 != v10)
            {
              do
              {
                *((_OWORD *)v17 - 1) = *((_OWORD *)v4 - 1);
                v17 -= 16;
                v4 -= 16;
              }
              while (v4 != v10);
              v4 = (char *)*a2;
            }
            v18 = &v15[16 * v14];
            v6 = v16 + 16;
            *a2 = v17;
            a2[1] = v16 + 16;
            a2[2] = v18;
            if (v4)
              operator delete(v4);
          }
          else
          {
            *(_QWORD *)v6 = v7;
            *((_QWORD *)v6 + 1) = v8;
            v6 += 16;
          }
          a2[1] = v6;
          v5 = (_QWORD *)*v5;
          this = v6;
          v4 = v6;
        }
        while (v5);
      }
      else
      {
        v6 = v4;
      }
      v2 = (_QWORD *)*v2;
      v4 = v6;
    }
    while (v2);
  }
  return this;
}

void sub_18F0E8248(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::Graph::profiler_t::results(DSPGraph::Graph::profiler_t *this)
{
  double v1;
  double *v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v1 = 0.0;
  if (!*((_QWORD *)this + 4))
    return 0.0;
  v2 = (double *)*((_QWORD *)this + 2);
  if (!v2)
    return NAN;
  v3 = 0;
  v4 = 0.0;
  do
  {
    v5 = v3 + 1;
    v4 = *v2 + v4;
    if (v3 + 1 >= 2)
      v1 = v1 * (double)v3 / (double)v5 + (*v2 - v4 / (double)v5) * (*v2 - v4 / (double)v5) / (double)v3;
    if (++v2 == *((double **)this + 1))
      v2 = *(double **)this;
    if (v2 == *((double **)this + 3))
      v2 = 0;
    ++v3;
  }
  while (v2);
  return v4 / (double)v5;
}

void DSPGraph::Graph::bridge(int64x2_t *this, int64x2_t *a2, DSPGraph::Graph *a3)
{
  uint64_t i;
  _DWORD *v6;
  unsigned int v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  _DWORD *v28;
  int v29;
  uint64_t j;
  unsigned int v31;
  uint64_t *v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int64x2_t *v57;
  void *v58[2];
  __int128 v59;
  __int128 v60;
  int64x2_t *v61;
  void *__p[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  char *v67;
  char *v68;

  if (this[47].i8[9] || a2[47].i8[9])
  {
    std::string::basic_string[abi:ne180100]<0>(&v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v57, "bridge");
    std::string::basic_string[abi:ne180100]<0>(&v65, "graph is configured");
    DSPGraph::ThrowException(1667655457, (__int128 *)&v61, 2499, (__int128 *)&v57, &v65);
  }
  v63 = 0u;
  v64 = 0u;
  *(_OWORD *)__p = 0u;
  v60 = 0u;
  v59 = 0u;
  *(_OWORD *)v58 = 0u;
  v61 = a2;
  v57 = this;
  for (i = this[33].i64[1]; i; i = *(_QWORD *)i)
  {
    v6 = (_DWORD *)(i + 24);
    v7 = *(_DWORD *)(i + 24);
    if (std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>(&a2[32].i64[1], v7))
    {
      v8 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphParameter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&a2[32].i64[1], v7, (_DWORD *)(i + 24));
      v9 = v8;
      if (!*(_BYTE *)(i + 32) || v8[32])
      {
        if (!*(_BYTE *)(i + 32) && v8[32])
        {
          v12 = (char *)v58[1];
          if (v58[1] >= (void *)v59)
          {
            v20 = (char *)v58[0];
            v21 = ((char *)v58[1] - (char *)v58[0]) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
LABEL_82:
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v23 = v59 - (unint64_t)v58[0];
            if ((uint64_t)(v59 - (unint64_t)v58[0]) >> 1 > v22)
              v22 = v23 >> 1;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v24);
              v20 = (char *)v58[0];
              v12 = (char *)v58[1];
            }
            else
            {
              v25 = 0;
            }
            v28 = (_DWORD *)(v24 + 4 * v21);
            *v28 = *v6;
            v13 = v28 + 1;
            while (v12 != v20)
            {
              v29 = *((_DWORD *)v12 - 1);
              v12 -= 4;
              *--v28 = v29;
            }
            v58[0] = v28;
            *(_QWORD *)&v59 = v24 + 4 * v25;
            if (v20)
              operator delete(v20);
          }
          else
          {
            *(_DWORD *)v58[1] = *v6;
            v13 = v12 + 4;
          }
          v58[1] = v13;
        }
      }
      else
      {
        v10 = (char *)__p[1];
        if (__p[1] >= (void *)v63)
        {
          v14 = (char *)__p[0];
          v15 = ((char *)__p[1] - (char *)__p[0]) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            goto LABEL_82;
          v17 = v63 - (unint64_t)__p[0];
          if ((uint64_t)(v63 - (unint64_t)__p[0]) >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v18);
            v14 = (char *)__p[0];
            v10 = (char *)__p[1];
          }
          else
          {
            v19 = 0;
          }
          v26 = (_DWORD *)(v18 + 4 * v15);
          *v26 = *((_DWORD *)v9 + 6);
          v11 = v26 + 1;
          while (v10 != v14)
          {
            v27 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *--v26 = v27;
          }
          __p[0] = v26;
          *(_QWORD *)&v63 = v18 + 4 * v19;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)__p[1] = *((_DWORD *)v8 + 6);
          v11 = v10 + 4;
        }
        __p[1] = v11;
      }
    }
  }
  for (j = this[36].i64[0]; j; j = *(_QWORD *)j)
  {
    v31 = *(_DWORD *)(j + 24);
    if (std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((int64x2_t *)a2[35].i64, v31))
    {
      v32 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::Graph::GraphProperty>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)a2[35].i64, v31, (_DWORD *)(j + 24));
      if (!*(_BYTE *)(j + 64) || *((_BYTE *)v32 + 64))
      {
        if (!*(_BYTE *)(j + 64) && *((_BYTE *)v32 + 64))
        {
          v36 = *(_DWORD *)(j + 24);
          v37 = (_QWORD *)v60;
          if ((unint64_t)v60 >= *((_QWORD *)&v60 + 1))
          {
            v46 = (uint64_t)(v60 - *((_QWORD *)&v59 + 1)) >> 5;
            v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 59)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v48 = *((_QWORD *)&v60 + 1) - *((_QWORD *)&v59 + 1);
            if ((uint64_t)(*((_QWORD *)&v60 + 1) - *((_QWORD *)&v59 + 1)) >> 4 > v47)
              v47 = v48 >> 4;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFE0)
              v49 = 0x7FFFFFFFFFFFFFFLL;
            else
              v49 = v47;
            v68 = (char *)&v60 + 8;
            v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v49);
            v51 = &v50[32 * v46];
            *(_QWORD *)&v65 = v50;
            *((_QWORD *)&v65 + 1) = v51;
            v67 = &v50[32 * v52];
            *(_DWORD *)v51 = v36;
            *((_QWORD *)v51 + 2) = 0;
            *((_QWORD *)v51 + 3) = 0;
            *((_QWORD *)v51 + 1) = 0;
            v66 = v51 + 32;
            std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__swap_out_circular_buffer((uint64_t *)&v59 + 1, &v65);
            v38 = (_QWORD *)v60;
            std::__split_buffer<DSPGraph::Graph::GraphBridge::BridgedProperty>::~__split_buffer((uint64_t)&v65);
          }
          else
          {
            *(_DWORD *)v60 = v36;
            v38 = v37 + 4;
            v37[2] = 0;
            v37[3] = 0;
            v37[1] = 0;
          }
          *(_QWORD *)&v60 = v38;
        }
      }
      else
      {
        v33 = *((_DWORD *)v32 + 6);
        v34 = (_QWORD *)v64;
        if ((unint64_t)v64 >= *((_QWORD *)&v64 + 1))
        {
          v39 = (uint64_t)(v64 - *((_QWORD *)&v63 + 1)) >> 5;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 59)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v41 = *((_QWORD *)&v64 + 1) - *((_QWORD *)&v63 + 1);
          if ((uint64_t)(*((_QWORD *)&v64 + 1) - *((_QWORD *)&v63 + 1)) >> 4 > v40)
            v40 = v41 >> 4;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFE0)
            v42 = 0x7FFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          v68 = (char *)&v64 + 8;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v42);
          v44 = &v43[32 * v39];
          *(_QWORD *)&v65 = v43;
          *((_QWORD *)&v65 + 1) = v44;
          v67 = &v43[32 * v45];
          *(_DWORD *)v44 = v33;
          *((_QWORD *)v44 + 2) = 0;
          *((_QWORD *)v44 + 3) = 0;
          *((_QWORD *)v44 + 1) = 0;
          v66 = v44 + 32;
          std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__swap_out_circular_buffer((uint64_t *)&v63 + 1, &v65);
          v35 = (_QWORD *)v64;
          std::__split_buffer<DSPGraph::Graph::GraphBridge::BridgedProperty>::~__split_buffer((uint64_t)&v65);
        }
        else
        {
          *(_DWORD *)v64 = v33;
          v35 = v34 + 4;
          v34[2] = 0;
          v34[3] = 0;
          v34[1] = 0;
        }
        *(_QWORD *)&v64 = v35;
      }
    }
  }
  v53 = this[62].u64[1];
  if (v53 >= this[63].i64[0])
  {
    v54 = std::vector<DSPGraph::Graph::GraphBridge>::__push_back_slow_path<DSPGraph::Graph::GraphBridge const&>(this + 62, (uint64_t)&v61);
  }
  else
  {
    std::construct_at[abi:ne180100]<DSPGraph::Graph::GraphBridge,DSPGraph::Graph::GraphBridge const&,DSPGraph::Graph::GraphBridge*>((_QWORD *)this[62].i64[1], (uint64_t)&v61);
    v54 = v53 + 56;
    this[62].i64[1] = v53 + 56;
  }
  this[62].i64[1] = v54;
  v55 = a2[62].u64[1];
  if (v55 >= a2[63].i64[0])
  {
    v56 = std::vector<DSPGraph::Graph::GraphBridge>::__push_back_slow_path<DSPGraph::Graph::GraphBridge const&>(a2 + 62, (uint64_t)&v57);
  }
  else
  {
    std::construct_at[abi:ne180100]<DSPGraph::Graph::GraphBridge,DSPGraph::Graph::GraphBridge const&,DSPGraph::Graph::GraphBridge*>((_QWORD *)a2[62].i64[1], (uint64_t)&v57);
    v56 = v55 + 56;
    a2[62].i64[1] = v55 + 56;
  }
  a2[62].i64[1] = v56;
  *(_QWORD *)&v65 = (char *)&v59 + 8;
  std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
  v57 = (int64x2_t *)((char *)&v63 + 8);
  std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_18F0E8804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)(v36 + 1000) = v37;
  DSPGraph::Graph::GraphBridge::~GraphBridge((DSPGraph::Graph::GraphBridge *)&a11);
  DSPGraph::Graph::GraphBridge::~GraphBridge((DSPGraph::Graph::GraphBridge *)&a21);
  _Unwind_Resume(a1);
}

_QWORD *std::construct_at[abi:ne180100]<DSPGraph::Graph::GraphBridge,DSPGraph::Graph::GraphBridge const&,DSPGraph::Graph::GraphBridge*>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[3];
  char v12;
  char *v13;
  char *v14;

  *a1 = *(_QWORD *)a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v6 >> 5);
    a1[6] = &v7[32 * v8];
    a1[4] = v7;
    a1[5] = v7;
    v13 = v7;
    v14 = v7;
    v11[0] = a1 + 6;
    v11[1] = &v13;
    v11[2] = &v14;
    v9 = v7;
    v12 = 0;
    do
    {
      *(_DWORD *)v9 = *(_DWORD *)v4;
      *((_QWORD *)v9 + 2) = 0;
      *((_QWORD *)v9 + 3) = 0;
      *((_QWORD *)v9 + 1) = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)v9 + 1, *(const void **)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8));
      v9 = v14 + 32;
      v14 += 32;
      v4 += 32;
    }
    while (v4 != v5);
    v12 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DSPGraph::Graph::GraphBridge::BridgedProperty>,DSPGraph::Graph::GraphBridge::BridgedProperty*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
    a1[5] = v9;
  }
  return a1;
}

void sub_18F0E89B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__destroy_vector::operator()[abi:ne180100](&a9);
  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 16) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<DSPGraph::Graph::GraphBridge>::__push_back_slow_path<DSPGraph::Graph::GraphBridge const&>(int64x2_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  char *v16;
  int64x2_t v17;
  char *v18;
  int64x2_t *v19;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1].i64[0] - a1->i64[0]) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v3;
  v19 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x492492492492492)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(56 * v6);
  }
  else
  {
    v7 = 0;
  }
  v16 = v7;
  v17.i64[0] = (uint64_t)&v7[56 * v2];
  v18 = &v7[56 * v6];
  std::construct_at[abi:ne180100]<DSPGraph::Graph::GraphBridge,DSPGraph::Graph::GraphBridge const&,DSPGraph::Graph::GraphBridge*>(v17.i64[0], a2);
  v8 = (_QWORD *)v17.i64[0];
  v9 = v17.i64[0] + 56;
  v17.i64[1] = v17.i64[0] + 56;
  v11 = a1->i64[0];
  v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    v13 = vdupq_n_s64(v10);
  }
  else
  {
    do
    {
      v12 = *(_QWORD *)(v10 - 56);
      v10 -= 56;
      *(v8 - 7) = v12;
      v8 -= 7;
      v8[2] = 0;
      v8[3] = 0;
      v8[1] = 0;
      *(_OWORD *)(v8 + 1) = *(_OWORD *)(v10 + 8);
      v8[3] = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      v8[4] = 0;
      v8[5] = 0;
      v8[6] = 0;
      *((_OWORD *)v8 + 2) = *(_OWORD *)(v10 + 32);
      v8[6] = *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
    }
    while (v10 != v11);
    v13 = *a1;
    v9 = v17.i64[1];
  }
  a1->i64[0] = (uint64_t)v8;
  a1->i64[1] = v9;
  v17 = v13;
  v14 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v18;
  v18 = v14;
  v16 = (char *)v13.i64[0];
  std::__split_buffer<DSPGraph::Graph::GraphBridge>::~__split_buffer((uint64_t)&v16);
  return v9;
}

void sub_18F0E8B7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DSPGraph::Graph::GraphBridge>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<DSPGraph::Graph::GraphBridge::BridgedProperty>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void DSPGraph::Graph::GraphBridge::~GraphBridge(DSPGraph::Graph::GraphBridge *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 32);
  std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

uint64_t std::__split_buffer<DSPGraph::Graph::GraphBridge>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    std::__destroy_at[abi:ne180100]<DSPGraph::Graph::GraphBridge,0>(i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DSPGraph::Graph::GraphBridge::BridgedProperty>,DSPGraph::Graph::GraphBridge::BridgedProperty*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

void DSPGraph::Graph::unbridge(DSPGraph::Graph *this, DSPGraph::Graph *a2, DSPGraph::Graph *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *i;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD *j;
  _QWORD *v12;
  void *v13;

  v5 = (_QWORD *)((char *)this + 992);
  v6 = *((_QWORD *)this + 125);
  for (i = (_QWORD *)*((_QWORD *)this + 124); ; i += 7)
  {
    if (i == (_QWORD *)v6)
    {
      i = (_QWORD *)*((_QWORD *)this + 125);
      goto LABEL_14;
    }
    if ((DSPGraph::Graph *)*i == a2)
      break;
  }
  if (i != (_QWORD *)v6)
  {
    v8 = i + 7;
    if (i + 7 != (_QWORD *)v6)
    {
      do
      {
        if ((DSPGraph::Graph *)*v8 != a2)
        {
          *i = *v8;
          v9 = (void *)i[1];
          if (v9)
          {
            i[2] = v9;
            operator delete(v9);
            i[1] = 0;
            i[2] = 0;
            i[3] = 0;
          }
          *(_OWORD *)(i + 1) = *(_OWORD *)(v8 + 1);
          i[3] = v8[3];
          v8[1] = 0;
          v8[2] = 0;
          v8[3] = 0;
          std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__vdeallocate(i + 4);
          *((_OWORD *)i + 2) = *((_OWORD *)v8 + 2);
          i[6] = v8[6];
          v8[4] = 0;
          v8[5] = 0;
          v8[6] = 0;
          i += 7;
        }
        v8 += 7;
      }
      while (v8 != (_QWORD *)v6);
      v6 = *((_QWORD *)this + 125);
    }
  }
LABEL_14:
  std::vector<DSPGraph::Graph::GraphBridge>::erase(v5, i, v6);
  v10 = *((_QWORD *)a2 + 125);
  for (j = (_QWORD *)*((_QWORD *)a2 + 124); ; j += 7)
  {
    if (j == (_QWORD *)v10)
    {
      j = (_QWORD *)*((_QWORD *)a2 + 125);
      goto LABEL_27;
    }
    if ((DSPGraph::Graph *)*j == this)
      break;
  }
  if (j != (_QWORD *)v10)
  {
    v12 = j + 7;
    if (j + 7 != (_QWORD *)v10)
    {
      do
      {
        if ((DSPGraph::Graph *)*v12 != this)
        {
          *j = *v12;
          v13 = (void *)j[1];
          if (v13)
          {
            j[2] = v13;
            operator delete(v13);
            j[1] = 0;
            j[2] = 0;
            j[3] = 0;
          }
          *(_OWORD *)(j + 1) = *(_OWORD *)(v12 + 1);
          j[3] = v12[3];
          v12[1] = 0;
          v12[2] = 0;
          v12[3] = 0;
          std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__vdeallocate(j + 4);
          *((_OWORD *)j + 2) = *((_OWORD *)v12 + 2);
          j[6] = v12[6];
          v12[4] = 0;
          v12[5] = 0;
          v12[6] = 0;
          j += 7;
        }
        v12 += 7;
      }
      while (v12 != (_QWORD *)v10);
      v10 = *((_QWORD *)a2 + 125);
    }
  }
LABEL_27:
  std::vector<DSPGraph::Graph::GraphBridge>::erase((_QWORD *)a2 + 124, j, v10);
}

void std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<DSPGraph::Graph::GraphBridge>::erase(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;

  if (a2 != (_QWORD *)a3)
  {
    v3 = a3;
    v4 = a2;
    v6 = (_QWORD *)a1[1];
    if ((_QWORD *)a3 != v6)
    {
      v7 = 8 * ((a3 - (uint64_t)a2) >> 3);
      v8 = *a1 + 8 * (((uint64_t)a2 - *a1) >> 3) + 24;
      do
      {
        v9 = (_QWORD *)v8;
        v10 = v8 + v7;
        *(_QWORD *)(v8 - 24) = *(_QWORD *)(v8 + v7 - 24);
        v12 = (_QWORD *)(v8 - 16);
        v11 = *(void **)(v8 - 16);
        if (v11)
        {
          *(_QWORD *)(v8 - 8) = v11;
          operator delete(v11);
          *v12 = 0;
          *(v9 - 1) = 0;
          *v9 = 0;
        }
        v13 = (_QWORD *)(v10 - 16);
        *((_OWORD *)v9 - 1) = *(_OWORD *)(v10 - 16);
        *v9 = *(_QWORD *)v10;
        *v13 = 0;
        v13[1] = 0;
        *(_QWORD *)v10 = 0;
        std::vector<DSPGraph::Graph::GraphBridge::BridgedProperty>::__vdeallocate(v9 + 1);
        *(_OWORD *)(v9 + 1) = *(_OWORD *)(v10 + 8);
        v9[3] = *(_QWORD *)(v10 + 24);
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)(v10 + 24) = 0;
        v8 = (uint64_t)(v9 + 7);
      }
      while (&v9[(unint64_t)v7 / 8 + 4] != v6);
      v4 = v9 + 4;
      v3 = a1[1];
    }
    while ((_QWORD *)v3 != v4)
    {
      v3 -= 56;
      std::__destroy_at[abi:ne180100]<DSPGraph::Graph::GraphBridge,0>(v3);
    }
    a1[1] = v4;
  }
}

void DSPGraph::Graph::GetProfilingInfo(DSPGraph::Graph *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  DSPGraph::Graph::profiler_t *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unsigned __int8 *v28;
  _QWORD *v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  unint64_t v37;
  void **v38;
  char *v39;
  unint64_t v40;
  std::string *v41;
  __int128 v42;
  float v43;
  float v44;
  _BOOL8 v45;
  unint64_t v46;
  unint64_t v47;
  size_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  void *__p[2];
  uint64_t v53;

  v6 = (DSPGraph::Graph::profiler_t *)*((_QWORD *)this + 127);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (!v6)
    return;
  v7 = DSPGraph::Graph::profiler_t::results(v6);
  v9 = v8;
  std::string::basic_string[abi:ne180100]<0>(__p, "@TOP");
  v10 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
  v11 = v10;
  v12 = *(_QWORD *)(a2 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v2 = v10;
      if (v10 >= v12)
        v2 = v10 % v12;
    }
    else
    {
      v2 = (v12 - 1) & v10;
    }
    v15 = *(void ***)(*(_QWORD *)a2 + 8 * v2);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)__p))
            goto LABEL_41;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v2)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v11;
  *((_OWORD *)i + 1) = *(_OWORD *)__p;
  v18 = v53;
  __p[0] = 0;
  __p[1] = 0;
  v53 = 0;
  *((_QWORD *)i + 5) = 0;
  *((_QWORD *)i + 6) = 0;
  *((_QWORD *)i + 4) = v18;
  v19 = (float)(unint64_t)(*(_QWORD *)(a2 + 24) + 1);
  v20 = *(float *)(a2 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    v21 = 1;
    if (v12 >= 3)
      v21 = (v12 & (v12 - 1)) != 0;
    v22 = v21 | (2 * v12);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a2, v24);
    v12 = *(_QWORD *)(a2 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v2 = v11 % v12;
      else
        v2 = v11;
    }
    else
    {
      v2 = (v12 - 1) & v11;
    }
  }
  v25 = *(_QWORD *)a2;
  v26 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v2);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_39:
    *v26 = i;
    goto LABEL_40;
  }
  *(_QWORD *)i = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = i;
  *(_QWORD *)(v25 + 8 * v2) = a2 + 16;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v27 >= v12)
        v27 %= v12;
    }
    else
    {
      v27 &= v12 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a2 + 8 * v27);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a2 + 24);
LABEL_41:
  *((double *)i + 5) = v7;
  *((_QWORD *)i + 6) = v9;
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
  v28 = (unsigned __int8 *)*((_QWORD *)this + 134);
  if (v28)
  {
    v29 = (_QWORD *)(a2 + 16);
    do
    {
      v30 = DSPGraph::Graph::profiler_t::results((DSPGraph::Graph::profiler_t *)(v28 + 40));
      v32 = v31;
      v33 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v28 + 16));
      v34 = v33;
      v35 = *(_QWORD *)(a2 + 8);
      if (v35)
      {
        v36 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
        v36.i16[0] = vaddlv_u8(v36);
        v37 = v36.u32[0];
        if (v36.u32[0] > 1uLL)
        {
          v3 = v33;
          if (v33 >= v35)
            v3 = v33 % v35;
        }
        else
        {
          v3 = (v35 - 1) & v33;
        }
        v38 = *(void ***)(*(_QWORD *)a2 + 8 * v3);
        if (v38)
        {
          v39 = (char *)*v38;
          if (*v38)
          {
            do
            {
              v40 = *((_QWORD *)v39 + 1);
              if (v40 == v34)
              {
                if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v39 + 16, v28 + 16))
                  goto LABEL_86;
              }
              else
              {
                if (v37 > 1)
                {
                  if (v40 >= v35)
                    v40 %= v35;
                }
                else
                {
                  v40 &= v35 - 1;
                }
                if (v40 != v3)
                  break;
              }
              v39 = *(char **)v39;
            }
            while (v39);
          }
        }
      }
      v39 = (char *)operator new(0x38uLL);
      *(_QWORD *)v39 = 0;
      *((_QWORD *)v39 + 1) = v34;
      v41 = (std::string *)(v39 + 16);
      if ((char)v28[39] < 0)
      {
        std::string::__init_copy_ctor_external(v41, *((const std::string::value_type **)v28 + 2), *((_QWORD *)v28 + 3));
      }
      else
      {
        v42 = *((_OWORD *)v28 + 1);
        *((_QWORD *)v39 + 4) = *((_QWORD *)v28 + 4);
        *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
      }
      *((_QWORD *)v39 + 5) = 0;
      *((_QWORD *)v39 + 6) = 0;
      v43 = (float)(unint64_t)(*(_QWORD *)(a2 + 24) + 1);
      v44 = *(float *)(a2 + 32);
      if (!v35 || (float)(v44 * (float)v35) < v43)
      {
        v45 = (v35 & (v35 - 1)) != 0;
        if (v35 < 3)
          v45 = 1;
        v46 = v45 | (2 * v35);
        v47 = vcvtps_u32_f32(v43 / v44);
        if (v46 <= v47)
          v48 = v47;
        else
          v48 = v46;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a2, v48);
        v35 = *(_QWORD *)(a2 + 8);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v34 >= v35)
            v3 = v34 % v35;
          else
            v3 = v34;
        }
        else
        {
          v3 = (v35 - 1) & v34;
        }
      }
      v49 = *(_QWORD *)a2;
      v50 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v3);
      if (v50)
      {
        *(_QWORD *)v39 = *v50;
      }
      else
      {
        *(_QWORD *)v39 = *v29;
        *v29 = v39;
        *(_QWORD *)(v49 + 8 * v3) = v29;
        if (!*(_QWORD *)v39)
          goto LABEL_85;
        v51 = *(_QWORD *)(*(_QWORD *)v39 + 8);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v51 >= v35)
            v51 %= v35;
        }
        else
        {
          v51 &= v35 - 1;
        }
        v50 = (_QWORD *)(*(_QWORD *)a2 + 8 * v51);
      }
      *v50 = v39;
LABEL_85:
      ++*(_QWORD *)(a2 + 24);
LABEL_86:
      *((double *)v39 + 5) = v30;
      *((_QWORD *)v39 + 6) = v32;
      v28 = *(unsigned __int8 **)v28;
    }
    while (v28);
  }
}

void sub_18F0E9548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v16);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Graph::setSRCAlgorithm(uint64_t this, int a2)
{
  uint64_t **v2;
  uint64_t v3;

  *(_DWORD *)(this + 928) = a2;
  v2 = *(uint64_t ***)(this + 384);
  if (v2)
  {
    v3 = this;
    do
    {
      this = (*(uint64_t (**)(uint64_t *))(*v2[2] + 256))(v2[2]);
      if (this)
        *(_DWORD *)(this + 896) = *(_DWORD *)(v3 + 928);
      v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  return this;
}

uint64_t DSPGraph::Graph::setSRCQuality(uint64_t this, int a2)
{
  uint64_t **v2;
  uint64_t v3;

  *(_DWORD *)(this + 932) = a2;
  v2 = *(uint64_t ***)(this + 384);
  if (v2)
  {
    v3 = this;
    do
    {
      this = (*(uint64_t (**)(uint64_t *))(*v2[2] + 256))(v2[2]);
      if (this)
        *(_DWORD *)(this + 900) = *(_DWORD *)(v3 + 932);
      v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  return this;
}

uint64_t DSPGraph::Graph::setSRCMinimumPhase(uint64_t this, char a2)
{
  uint64_t **v2;
  uint64_t v3;

  *(_BYTE *)(this + 936) = a2;
  v2 = *(uint64_t ***)(this + 384);
  if (v2)
  {
    v3 = this;
    do
    {
      this = (*(uint64_t (**)(uint64_t *))(*v2[2] + 256))(v2[2]);
      if (this)
        *(_BYTE *)(this + 904) = *(_BYTE *)(v3 + 936);
      v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  return this;
}

char *DSPGraph::Graph::addJack(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  __int128 *v5;

  v3 = (uint64_t *)(a1 + 640);
  v5 = a2;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Jack>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Jack>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Jack>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Jack>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)(a1 + 640), (unsigned __int8 *)a2, &v5)+ 5) = 0;
  v5 = a2;
  return std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Jack>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Jack>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Jack>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Jack>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (unsigned __int8 *)a2, &v5)+ 40;
}

char *std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Jack>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Jack>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Jack>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Jack>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  __int128 *v16;
  __int128 v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  v18 = a1 + 2;
  *((_QWORD *)v13 + 5) = 0;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = a1[1];
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v18;
          if (*v18)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v29) = v18;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v35))
                  {
                    *(_QWORD *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*a1 + 8 * v35);
                  **(_QWORD **)(*a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v13 = *v37;
LABEL_75:
    *v37 = v13;
    goto LABEL_76;
  }
  *(_QWORD *)v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v36 + 8 * v3) = v18;
  if (*(_QWORD *)v13)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_18F0E9AF8(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void sub_18F0E9CAC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_18F0EA390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F0EAAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  caulk::xpc::sync_message<objc_object  {objcproto33CarbonComponentScannerXPCProtocol}* {__strong},NSData * {__strong},NSData *>::~sync_message((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto33CarbonComponentScannerXPCProtocol}* {__strong},NSData * {__strong},NSData *>::~sync_message(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33CarbonComponentScannerXPCProtocol11objc_objectJU8__strongP6NSDataS7_EE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;

  v7 = a3;
  v8 = a4;
  std::function<void ()(NSError *,std::tuple<NSData * {__strong},NSData * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v7);

}

void sub_18F0EACFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c71_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP6NSDataS6_EEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c71_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP6NSDataS6_EEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<NSData * {__strong},NSData * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18F0EADB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33CarbonComponentScannerXPCProtocol11objc_objectJU8__strongP6NSDataS7_EE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v2 = 0;
  v3 = 0;
  std::function<void ()(NSError *,std::tuple<NSData * {__strong},NSData * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18F0EAE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33CarbonComponentScannerXPCProtocol}* {__strong},NSData * {__strong},NSData *>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSData *,NSData *> &&)#1},std::allocator<std::tuple<NSData *,NSData *> &>,void ()(NSError,std::tuple<NSData *,NSData *>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33CarbonComponentScannerXPCProtocol}* {__strong},NSData * {__strong},NSData *>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSData *,NSData *> &&)#1},std::allocator<std::tuple<NSData *,NSData *> &>,void ()(NSError,std::tuple<NSData *,NSData *>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2916608;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33CarbonComponentScannerXPCProtocol}* {__strong},NSData * {__strong},NSData *>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSData *,NSData *> &&)#1},std::allocator<std::tuple<NSData *,NSData *> &>,void ()(NSError,std::tuple<NSData *,NSData *>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2916608;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33CarbonComponentScannerXPCProtocol}* {__strong},NSData * {__strong},NSData *>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSData *,NSData *> &&)#1},std::allocator<std::tuple<NSData *,NSData *> &>,void ()(NSError,std::tuple<NSData *,NSData *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
  objc_storeStrong((id *)(v6 + 56), a3[1]);

}

void ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33CarbonComponentScannerXPCProtocol11objc_objectJU8__strongP6NSDataEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSData * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);

}

void sub_18F0EAF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c68_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP6NSDataEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c68_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP6NSDataEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<NSData * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18F0EAFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33CarbonComponentScannerXPCProtocol11objc_objectJU8__strongP6NSDataEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSData * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18F0EB03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33CarbonComponentScannerXPCProtocol}* {__strong},NSData * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSData *> &&)#1},std::allocator<std::tuple<NSData *> &>,void ()(NSError,std::tuple<NSData *>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33CarbonComponentScannerXPCProtocol}* {__strong},NSData * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSData *> &&)#1},std::allocator<std::tuple<NSData *> &>,void ()(NSError,std::tuple<NSData *>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E29165C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33CarbonComponentScannerXPCProtocol}* {__strong},NSData * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSData *> &&)#1},std::allocator<std::tuple<NSData *> &>,void ()(NSError,std::tuple<NSData *>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E29165C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33CarbonComponentScannerXPCProtocol}* {__strong},NSData * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSData *> &&)#1},std::allocator<std::tuple<NSData *> &>,void ()(NSError,std::tuple<NSData *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

void sub_18F0EB158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18F0EB1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t IPCAUCallbackSender_LaunchRequestComplete(mach_port_t a1, int a2, int a3)
{
  uint64_t v3;
  mach_msg_header_t msg;
  uint64_t v6;
  int v7;
  int v8;

  v6 = *MEMORY[0x1E0C804E8];
  v7 = a2;
  v8 = a3;
  *(_QWORD *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 90103;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B60])
    voucher_mach_msg_set(&msg);
  v3 = mach_msg(&msg, 17, 0x28u, 0, 0, gMediaServerTimeout, 0);
  if ((_DWORD)v3 == 268435460)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  return v3;
}

uint64_t (*IPCAudioUnitCallbacks_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 90104) >= 0xFFFFFFFC)
    return IPCAUCallbackReceiver_IPCAudioUnitCallbacks_subsystem[5 * (v1 - 90100) + 5];
  else
    return 0;
}

void _XAUListChanged(_DWORD *a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  IPCAUClient *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (a1[6] || a1[7] <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return;
  }
  if (!kInterAppAudioScope)
  {
    v4 = MEMORY[0x1E0C81028];
LABEL_12:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v6 = 136315394;
      v7 = "IPCAUClient.cpp";
      v8 = 1024;
      v9 = 1284;
      _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUCallbackReceiver_AUListChanged", (uint8_t *)&v6, 0x12u);
    }
    goto LABEL_14;
  }
  v4 = *(NSObject **)kInterAppAudioScope;
  if (*(_QWORD *)kInterAppAudioScope)
    goto LABEL_12;
LABEL_14:
  v5 = (IPCAUClient *)CADeprecated::TSingleton<IPCAUClient>::instance();
  IPCAUClient::RefreshRemoteAUList(v5);
  *(_DWORD *)(a2 + 32) = 0;
}

void _XPropertiesChanged(_DWORD *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  mach_msg_timeout_t v9;
  int v10;
  uint64_t *v11;
  int *v12;
  const void **v13;
  mach_port_name_t reply_port;
  mach_msg_return_t v15;
  int v16;
  unsigned int v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  int v21;
  NSObject *v22;
  const void *v23;
  int *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  char v29;
  int v30;
  _QWORD v31[2];
  char v32;
  uint64_t *v33;
  int *v34;
  const void **v35;
  int *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _DWORD msg[9];
  __int128 v42;
  _OWORD __n[17];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (a1[9] || a1[10] <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return;
  }
  v4 = CADeprecated::TSingleton<IPCAUClient>::instance();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v6 = BaseOpaqueObject::ResolveOpaqueRef();
  v7 = v6;
  if (v6)
  {
    v32 = 1;
    v31[0] = &off_1E2908A00;
    v31[1] = 256;
    v33 = &v37;
    v34 = &v38;
    v35 = (const void **)&v39;
    v36 = &v40;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v30 = 0;
    IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v28, *(_QWORD *)(v6 + 16), &v30);
    if (v30)
    {
LABEL_10:
      IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v28);
      MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)v31);
      goto LABEL_11;
    }
    v8 = *(_DWORD *)(*(_QWORD *)(v7 + 16) + 48);
    if (v29)
      v9 = 0x7FFFFFFF;
    else
      v9 = 10000;
    v10 = *(_DWORD *)(v7 + 80);
    v11 = v33;
    v12 = v34;
    v13 = v35;
    v24 = v36;
    memset(__n, 0, sizeof(__n));
    v42 = 0u;
    memset(&msg[1], 0, 32);
    *(_QWORD *)&msg[6] = *MEMORY[0x1E0C804E8];
    msg[8] = v10;
    reply_port = mig_get_reply_port();
    msg[3] = reply_port;
    msg[0] = 5395;
    msg[2] = v8;
    *(_QWORD *)&msg[4] = 0x1606200000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set((mach_msg_header_t *)msg);
      reply_port = msg[3];
    }
    v15 = mach_msg((mach_msg_header_t *)msg, 275, 0x24u, 0x144u, reply_port, v9, 0);
    v16 = v15;
    if ((v15 - 268435458) <= 0xE && ((1 << (v15 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(msg[3]);
    }
    else
    {
      if (!v15)
      {
        if (msg[5] == 71)
        {
          v16 = -308;
        }
        else if (msg[5] == 90310)
        {
          if ((msg[0] & 0x80000000) != 0)
          {
            v16 = -300;
            if (msg[6] == 1
              && msg[1] >= 0x3Cu
              && msg[1] <= 0x13Cu
              && !msg[2]
              && BYTE3(v42) == 1
              && LODWORD(__n[0]) <= 0x100
              && (msg[1] - 60) >= LODWORD(__n[0]))
            {
              v17 = (LODWORD(__n[0]) + 3) & 0xFFFFFFFC;
              if (msg[1] == v17 + 60)
              {
                v18 = (char *)msg + v17;
                if (DWORD1(v42) == *((_DWORD *)v18 + 14))
                {
                  v19 = v18 - 256;
                  v20 = v11;
                  v21 = __n[0];
                  memcpy(v20, (char *)__n + 4, LODWORD(__n[0]));
                  v16 = 0;
                  *v12 = v21;
                  *v13 = *(const void **)&msg[7];
                  *v24 = *((_DWORD *)v19 + 78);
                  goto LABEL_55;
                }
              }
            }
          }
          else if (msg[1] == 36)
          {
            v16 = -300;
            if (msg[8])
            {
              if (msg[2])
                v16 = -300;
              else
                v16 = msg[8];
            }
          }
          else
          {
            v16 = -300;
          }
        }
        else
        {
          v16 = -301;
        }
        mach_msg_destroy((mach_msg_header_t *)msg);
LABEL_50:
        if (v16 == 268435459 || v16 == -308)
        {
          if (kInterAppAudioScope)
          {
            v22 = *(NSObject **)kInterAppAudioScope;
            if (!*(_QWORD *)kInterAppAudioScope)
              goto LABEL_10;
          }
          else
          {
            v22 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            msg[0] = 136315906;
            *(_QWORD *)&msg[1] = "IPCAUClient.cpp";
            LOWORD(msg[3]) = 1024;
            *(_DWORD *)((char *)&msg[3] + 2) = 433;
            HIWORD(msg[4]) = 1024;
            msg[5] = v16;
            LOWORD(msg[6]) = 1024;
            *(_DWORD *)((char *)&msg[6] + 2) = -66749;
            _os_log_impl(&dword_18EE07000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", (uint8_t *)msg, 0x1Eu);
          }
          goto LABEL_10;
        }
LABEL_55:
        if (!v16)
        {
          if (*v35)
            v23 = *v35;
          else
            v23 = v33;
          CADeserializer::CADeserializer((CADeserializer *)msg, v23);
          v27 = 0;
          CADeserializer::Read((CADeserializer *)msg, &v27);
          for (; v27; --v27)
          {
            v26 = 0;
            v25 = 0;
            CADeserializer::Read((CADeserializer *)msg, &v26);
            CADeserializer::Read((CADeserializer *)msg, (char *)&v25 + 4);
            CADeserializer::Read((CADeserializer *)msg, &v25);
            RemoteAUPropertyListeners::Notify(*(RemoteAUPropertyListeners **)(v7 + 104), *(OpaqueAudioComponentInstance **)(v7 + 112), *(_QWORD *)(v7 + 72), v26, HIDWORD(v25), v25);
          }
          MEMORY[0x193FFD95C](msg);
        }
        goto LABEL_10;
      }
      mig_dealloc_reply_port(msg[3]);
    }
    if (v16 == 268435460)
    {
      if ((msg[0] & 0x1F00) == 0x1100)
        mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg[3]);
      mach_msg_destroy((mach_msg_header_t *)msg);
      v16 = 268435460;
      goto LABEL_55;
    }
    goto LABEL_50;
  }
LABEL_11:
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_DWORD *)(a2 + 32) = 0;
}

void sub_18F0EB97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;
  int v58;

  MEMORY[0x193FFD95C](&a57);
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&a12);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)&a15);
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57);
  _Unwind_Resume(a1);
}

uint64_t _XRemoteControlEvent(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 40) || *(_DWORD *)(result + 44) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  v4 = *(unsigned int *)(result + 36);
  v5 = CADeprecated::TSingleton<IPCAUClient>::instance();
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  result = BaseOpaqueObject::ResolveOpaqueRef();
  if (result)
  {
    result = *(_QWORD *)(result + 520);
    if (result)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v4);
  }
  if (v6)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  *(_DWORD *)(a2 + 32) = 0;
  return result;
}

void sub_18F0EBAC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

_DWORD *_XLaunchRequestComplete(_DWORD *result, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  CADeprecated::CAGuard *v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  _BOOL4 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if ((*result & 0x80000000) != 0 || result[1] != 40)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (result[10] || result[11] <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  v5 = result[8];
  v4 = result[9];
  v6 = CADeprecated::TSingleton<IPCAUClient>::instance();
  if (kInterAppAudioScope)
  {
    v7 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_14;
  }
  else
  {
    v7 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v13 = 136315906;
    v14 = "IPCAUClient.h";
    v15 = 1024;
    v16 = 369;
    v17 = 1024;
    v18 = v5;
    v19 = 1024;
    v20 = v4 != 0;
    _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d token %d, success %d", (uint8_t *)&v13, 0x1Eu);
  }
LABEL_14:
  v8 = (CADeprecated::CAGuard *)(v6 + 88);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 88) + 16))(v6 + 88);
  v10 = *(_DWORD *)(v6 + 224);
  if (v10 == v5)
  {
    if (v4)
      v11 = 2;
    else
      v11 = 1;
    *(_DWORD *)(v6 + 228) = v11;
    goto LABEL_25;
  }
  if (!kInterAppAudioScope)
  {
    v12 = MEMORY[0x1E0C81028];
LABEL_23:
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v13 = 136315650;
      v14 = "IPCAUClient.h";
      v15 = 1024;
      v16 = 375;
      v17 = 1024;
      v18 = v10;
      _os_log_impl(&dword_18EE07000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d doesn't match wait token %d", (uint8_t *)&v13, 0x18u);
    }
    goto LABEL_25;
  }
  v12 = *(NSObject **)kInterAppAudioScope;
  if (*(_QWORD *)kInterAppAudioScope)
    goto LABEL_23;
LABEL_25:
  if (v9)
    (*(void (**)(CADeprecated::CAGuard *))(*(_QWORD *)v8 + 24))(v8);
  result = (_DWORD *)CADeprecated::CAGuard::Notify(v8);
  *(_DWORD *)(a2 + 32) = 0;
  return result;
}

void sub_18F0EBD10(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t IPCAudioUnitCallbacks_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 90104) >= 0xFFFFFFFC
    && (v5 = (void (*)(void))IPCAUCallbackReceiver_IPCAudioUnitCallbacks_subsystem[5 * (v4 - 90100) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t IPCAUClient_Uninitialize(int a1, mach_msg_timeout_t a2, int a3)
{
  mach_port_name_t reply_port;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE msg[36];
  uint64_t v11;

  *(_OWORD *)&msg[20] = 0u;
  v11 = 0;
  *(_OWORD *)&msg[4] = 0u;
  *(_QWORD *)&msg[24] = *MEMORY[0x1E0C804E8];
  *(_DWORD *)&msg[32] = a3;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x1605B00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    reply_port = *(_DWORD *)&msg[12];
  }
  v6 = mach_msg((mach_msg_header_t *)msg, 275, 0x24u, 0x2Cu, reply_port, a2, 0);
  v7 = v6;
  if ((v6 - 268435458) <= 0xE && ((1 << (v6 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else
  {
    if (!(_DWORD)v6)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v8 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 90303)
      {
        v8 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          v8 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32])
            return 0;
        }
      }
      else
      {
        v8 = 4294966995;
      }
LABEL_20:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v8;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  v8 = 268435460;
  if ((_DWORD)v7 == 268435460)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_20;
  }
  return v7;
}

uint64_t IPCAUClient_ConnectInput(mach_port_t a1, mach_msg_timeout_t a2, unsigned int a3, char a4, __int128 *a5)
{
  __int128 v7;
  mach_port_t reply_port;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  mach_msg_header_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  char v17;
  __int16 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = a5[1];
  v20 = *a5;
  v14 = *MEMORY[0x1E0C804E8];
  v15 = a3;
  v16 = 0;
  v17 = a4;
  v18 = 0;
  v19 = 0;
  v21 = v7;
  v22 = *((_QWORD *)a5 + 4);
  reply_port = mig_get_reply_port();
  *(_QWORD *)&v13.msgh_bits = 5395;
  v13.msgh_remote_port = a1;
  v13.msgh_local_port = reply_port;
  *(_QWORD *)&v13.msgh_voucher_port = 0x1606500000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&v13);
    reply_port = v13.msgh_local_port;
  }
  v9 = mach_msg(&v13, 275, 0x54u, 0x2Cu, reply_port, a2, 0);
  v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(v13.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v9)
    {
      if (v13.msgh_id == 71)
      {
        v11 = 4294966988;
      }
      else if (v13.msgh_id == 90313)
      {
        v11 = 4294966996;
        if ((v13.msgh_bits & 0x80000000) == 0 && *(_QWORD *)&v13.msgh_size == 36)
        {
          v11 = v15;
          if (!v15)
            return 0;
        }
      }
      else
      {
        v11 = 4294966995;
      }
LABEL_19:
      mach_msg_destroy(&v13);
      return v11;
    }
    mig_dealloc_reply_port(v13.msgh_local_port);
  }
  v11 = 268435460;
  if ((_DWORD)v10 == 268435460)
  {
    if ((v13.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v13.msgh_local_port);
    goto LABEL_19;
  }
  return v10;
}

uint64_t IPCAURegClient_SetProcessWakeState(int a1, int a2, int a3, _DWORD *a4)
{
  mach_port_name_t reply_port;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  int v12;
  _BYTE rcv_name[44];

  memset(&rcv_name[16], 0, 28);
  *(_OWORD *)rcv_name = 0u;
  *(_QWORD *)&rcv_name[20] = *MEMORY[0x1E0C804E8];
  *(_DWORD *)&rcv_name[28] = a2;
  *(_DWORD *)&rcv_name[32] = a3;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&rcv_name[4] = a1;
  *(_DWORD *)&rcv_name[8] = reply_port;
  v12 = 5395;
  *(_QWORD *)&rcv_name[12] = 0x15F9B00000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v12);
    reply_port = *(_DWORD *)&rcv_name[8];
  }
  v7 = mach_msg((mach_msg_header_t *)&v12, 275, 0x28u, 0x30u, reply_port, gMediaServerTimeout, 0);
  v8 = v7;
  if ((v7 - 268435458) <= 0xE && ((1 << (v7 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&rcv_name[8]);
    goto LABEL_21;
  }
  if (!(_DWORD)v7)
  {
    if (*(_DWORD *)&rcv_name[16] == 71)
    {
      v8 = 4294966988;
    }
    else if (*(_DWORD *)&rcv_name[16] == 90111)
    {
      if ((v12 & 0x80000000) == 0)
      {
        if (*(_DWORD *)rcv_name == 40)
        {
          if (!*(_DWORD *)&rcv_name[4])
          {
            v8 = *(unsigned int *)&rcv_name[28];
            if (!*(_DWORD *)&rcv_name[28])
            {
              *a4 = *(_DWORD *)&rcv_name[32];
              return v8;
            }
            goto LABEL_29;
          }
        }
        else if (*(_DWORD *)rcv_name == 36)
        {
          if (*(_DWORD *)&rcv_name[4])
            v10 = 1;
          else
            v10 = *(_DWORD *)&rcv_name[28] == 0;
          if (v10)
            v8 = 4294966996;
          else
            v8 = *(unsigned int *)&rcv_name[28];
          goto LABEL_29;
        }
      }
      v8 = 4294966996;
    }
    else
    {
      v8 = 4294966995;
    }
LABEL_29:
    mach_msg_destroy((mach_msg_header_t *)&v12);
    return v8;
  }
  mig_dealloc_reply_port(*(mach_port_t *)&rcv_name[8]);
LABEL_21:
  if ((_DWORD)v8 == 268435460)
  {
    if ((v12 & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&rcv_name[8]);
    mach_msg_destroy((mach_msg_header_t *)&v12);
    return 268435460;
  }
  return v8;
}

uint64_t (*IPCAudioUnitRegistration_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 90015) >= 0xFFFFFFF1)
    return IPCAURegServer_IPCAudioUnitRegistration_subsystem[5 * (v1 - 90000) + 5];
  else
    return 0;
}

_DWORD *_XConnectToServer(_DWORD *result, uint64_t a2)
{
  int v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (result[6] || result[7] <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  result = (_DWORD *)getpid();
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 36) = (_DWORD)result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 4) = 40;
  return result;
}

uint64_t _XRegisterExtensionProcess(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;
  int v5;
  const void *v6;
  __int128 v7;
  _OWORD v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 2 && *(_DWORD *)(a1 + 4) == 68)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112
      && *(_BYTE *)(a1 + 51) == 1
      && (v3 = *(_DWORD *)(a1 + 52), v3 == *(_DWORD *)(a1 + 64)))
    {
      if (*(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 72) < 0x20u)
      {
        result = 4294966987;
      }
      else
      {
        v5 = *(_DWORD *)(a1 + 28);
        v6 = *(const void **)(a1 + 40);
        v7 = *(_OWORD *)(a1 + 104);
        v8[0] = *(_OWORD *)(a1 + 88);
        v8[1] = v7;
        result = IPCAURegServer_RegisterExtensionProcess(v8, v5, v6, v3);
      }
    }
    else
    {
      result = 4294966996;
    }
  }
  else
  {
    result = 4294966992;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

uint64_t _XPublishAU(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;
  int v5;
  const void *v6;
  int v7;
  __int128 v8;
  AudioComponentDescription v9;
  audit_token_t v10;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 2 && *(_DWORD *)(a1 + 4) == 92)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112
      && *(_BYTE *)(a1 + 51) == 1
      && (v3 = *(_DWORD *)(a1 + 52), v3 == *(_DWORD *)(a1 + 84)))
    {
      if (*(_DWORD *)(a1 + 92) || *(_DWORD *)(a1 + 96) < 0x20u)
      {
        result = 4294966987;
      }
      else
      {
        v5 = *(_DWORD *)(a1 + 28);
        v6 = *(const void **)(a1 + 40);
        v7 = *(_DWORD *)(a1 + 88);
        v8 = *(_OWORD *)(a1 + 128);
        *(_OWORD *)v10.val = *(_OWORD *)(a1 + 112);
        *(_OWORD *)&v10.val[4] = v8;
        v9 = *(AudioComponentDescription *)(a1 + 64);
        result = IPCAURegServer_PublishAU(&v10, v5, &v9, v6, v3, v7);
      }
    }
    else
    {
      result = 4294966996;
    }
  }
  else
  {
    result = 4294966992;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

uint64_t _XUnpublishAU(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v4;
  IPCAURegistrar *v5;
  AudioComponentDescription v6;
  audit_token_t v7;
  pid_t pidp;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 52)
  {
    result = 4294966992;
  }
  else if (*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 56) < 0x20u)
  {
    result = 4294966987;
  }
  else
  {
    v4 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)v7.val = *(_OWORD *)(a1 + 72);
    *(_OWORD *)&v7.val[4] = v4;
    v6 = *(AudioComponentDescription *)(a1 + 32);
    pidp = 0;
    if (ClientHasInterAppAudioEntitlement(&v7, &pidp))
    {
      v5 = (IPCAURegistrar *)CADeprecated::TSingleton<IPCAURegistrar>::instance();
      result = IPCAURegistrar::UnpublishAU(v5, (PlatformUtilities *)pidp, &v6);
    }
    else
    {
      result = 4294900548;
    }
  }
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

void _XCreateSharedBuffer(uint64_t a1, _DWORD *a2)
{
  int v4;
  _DWORD *v5;
  const AudioStreamBasicDescription *v6;
  unint64_t v7;
  int v8;
  __int128 v9;
  int v10;
  audit_token_t v11;

  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 1 || *(_DWORD *)(a1 + 4) != 68)
  {
    v4 = -304;
    goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 39) != 1 || *(_DWORD *)(a1 + 40) / 0x28u != *(_DWORD *)(a1 + 52))
  {
    v4 = -300;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 72) <= 0x1Fu)
  {
    v4 = -309;
LABEL_10:
    a2[8] = v4;
    goto LABEL_11;
  }
  v5 = a2 + 7;
  *((_QWORD *)a2 + 4) = 0x13000000000000;
  v6 = *(const AudioStreamBasicDescription **)(a1 + 28);
  v7 = *(unsigned int *)(a1 + 40) / 0x28uLL;
  v8 = *(_DWORD *)(a1 + 56);
  v9 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)v11.val = *(_OWORD *)(a1 + 88);
  *(_OWORD *)&v11.val[4] = v9;
  v10 = IPCAURegServer_CreateSharedBuffer(&v11, v6, v7, v8, *(_QWORD *)(a1 + 60), v5);
  mig_deallocate(*(_QWORD *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (!v10)
  {
    *a2 |= 0x80000000;
    a2[1] = 40;
    a2[6] = 1;
    return;
  }
  a2[8] = v10;
LABEL_11:
  *((_QWORD *)a2 + 3) = *MEMORY[0x1E0C804E8];
}

void _XDestroySharedBuffer(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t *v12;
  uint64_t *v13;
  const char *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  audit_token_t v18;
  pid_t pidp;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (!*(_DWORD *)(a1 + 40) && *(_DWORD *)(a1 + 44) >= 0x20u)
  {
    v5 = *(_OWORD *)(a1 + 76);
    *(_OWORD *)v18.val = *(_OWORD *)(a1 + 60);
    *(_OWORD *)&v18.val[4] = v5;
    v6 = *(_QWORD *)(a1 + 32);
    pidp = 0;
    if (!ClientHasInterAppAudioEntitlement(&v18, &pidp))
    {
      v3 = -66748;
      goto LABEL_7;
    }
    v7 = CADeprecated::TSingleton<IPCAURegistrar>::instance();
    v8 = *(uint64_t **)(v7 + 232);
    v9 = *(uint64_t **)(v7 + 240);
    if (v8 != v9)
    {
      while (1)
      {
        v10 = *v8;
        if (*(_DWORD *)(*v8 + 12) == pidp)
          break;
        if (++v8 == v9)
          goto LABEL_12;
      }
      v13 = *(uint64_t **)(v10 + 200);
      v12 = *(uint64_t **)(v10 + 208);
      while (v13 != v12)
      {
        if (*(_QWORD *)*v13 == v6)
        {
          v15 = v13 + 1;
          if (v13 + 1 != v12)
          {
            do
            {
              v13 = v15;
              v16 = v15 - 1;
              v17 = *v15;
              *v15++ = 0;
              std::unique_ptr<RegistrarClientProcess::SharedMemoryBlock>::reset[abi:ne180100](v16, v17);
            }
            while (v15 != v12);
            v12 = *(uint64_t **)(v10 + 208);
          }
          while (v12 != v13)
            std::unique_ptr<RegistrarClientProcess::SharedMemoryBlock>::reset[abi:ne180100](--v12, 0);
          v3 = 0;
          *(_QWORD *)(v10 + 208) = v13;
          goto LABEL_7;
        }
        ++v13;
      }
      if (kInterAppAudioScope)
      {
        v11 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
          goto LABEL_36;
      }
      else
      {
        v11 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v21 = "IPCAURegistrar.mm";
        v22 = 1024;
        v23 = 830;
        v14 = "%25s:%-5d unknown buffer";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
LABEL_12:
    if (kInterAppAudioScope)
    {
      v11 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
      {
LABEL_36:
        v3 = -50;
        goto LABEL_7;
      }
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v21 = "IPCAURegistrar.mm";
      v22 = 1024;
      v23 = 820;
      v14 = "%25s:%-5d unknown process";
LABEL_35:
      _os_log_impl(&dword_18EE07000, v11, OS_LOG_TYPE_ERROR, v14, buf, 0x12u);
    }
    goto LABEL_36;
  }
  v3 = -309;
LABEL_7:
  v4 = (_QWORD *)MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *v4;
}

uint64_t _XSubscribeToAUList(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;
  int v5;
  const void *v6;
  __int128 v7;
  audit_token_t v8;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 2 && *(_DWORD *)(a1 + 4) == 68)
  {
    if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112
      && *(_BYTE *)(a1 + 51) == 1
      && (v3 = *(_DWORD *)(a1 + 52), v3 == *(_DWORD *)(a1 + 64)))
    {
      if (*(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 72) < 0x20u)
      {
        result = 4294966987;
      }
      else
      {
        v5 = *(_DWORD *)(a1 + 28);
        v6 = *(const void **)(a1 + 40);
        v7 = *(_OWORD *)(a1 + 104);
        *(_OWORD *)v8.val = *(_OWORD *)(a1 + 88);
        *(_OWORD *)&v8.val[4] = v7;
        result = IPCAURegServer_SubscribeToAUList(&v8, v5, v6, v3);
      }
    }
    else
    {
      result = 4294966996;
    }
  }
  else
  {
    result = 4294966992;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

uint64_t _XGetAUList(uint64_t result, uint64_t a2)
{
  int v3;
  int v4;
  __int128 v5;
  _QWORD *v6;
  PlatformUtilities *v7;
  NSObject *v8;
  int v9;
  void *p_p;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  NSObject *v15;
  uint64_t *i;
  uint64_t v17;
  const UInt8 *BytePtr;
  vm_size_t Length;
  audit_token_t v20;
  CFDataRef theData;
  pid_t pidp;
  void *__p;
  char v24;
  _BYTE buf[18];
  __int16 v26;
  _DWORD v27[11];

  *(_QWORD *)&v27[9] = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    v4 = -304;
    goto LABEL_7;
  }
  v3 = *(_DWORD *)(result + 24);
  result += 24;
  if (v3 || *(_DWORD *)(result + 4) <= 0x1Fu)
  {
    v4 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v4;
LABEL_8:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  v5 = *(_OWORD *)(result + 36);
  *(_OWORD *)v20.val = *(_OWORD *)(result + 20);
  *(_OWORD *)&v20.val[4] = v5;
  pidp = 0;
  result = ClientHasInterAppAudioEntitlement(&v20, &pidp);
  if ((result & 1) == 0)
  {
    v9 = -66748;
LABEL_42:
    *(_DWORD *)(a2 + 32) = v9;
    goto LABEL_8;
  }
  CASerializer::CASerializer((CASerializer *)&theData, 0);
  v6 = (_QWORD *)CADeprecated::TSingleton<IPCAURegistrar>::instance();
  v7 = (PlatformUtilities *)pidp;
  if (kInterAppAudioScope)
  {
    v8 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_21;
  }
  else
  {
    v8 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    PlatformUtilities::processName(v7);
    if (v24 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    v11 = (v6[34] - v6[33]) >> 3;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "IPCAURegistrar.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 844;
    v26 = 2080;
    *(_QWORD *)v27 = p_p;
    LOWORD(v27[2]) = 1024;
    *(_DWORD *)((char *)&v27[2] + 2) = v11;
    _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d process '%s' fetching %d AUs", buf, 0x22u);
    if (v24 < 0)
      operator delete(__p);
  }
LABEL_21:
  v12 = v6[29];
  v13 = v6[30];
  if (v12 == v13)
  {
LABEL_25:
    if (kInterAppAudioScope)
    {
      v15 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
      {
LABEL_37:
        result = MEMORY[0x193FFD878](&theData);
        v9 = -50;
        goto LABEL_42;
      }
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "IPCAURegistrar.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 852;
      _os_log_impl(&dword_18EE07000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d error: unknown subscriber pid", buf, 0x12u);
    }
    goto LABEL_37;
  }
  v14 = (_QWORD *)(a2 + 28);
  while (*(_DWORD *)(*(_QWORD *)v12 + 12) != (_DWORD)v7)
  {
    v12 += 8;
    if (v12 == v13)
      goto LABEL_25;
  }
  *(_BYTE *)(*(_QWORD *)v12 + 33) = 0;
  *(_DWORD *)buf = (v6[34] - v6[33]) >> 3;
  CASerializer::Write((CASerializer *)&theData, buf);
  for (i = (uint64_t *)v6[33]; i != (uint64_t *)v6[34]; ++i)
  {
    v17 = *i;
    CASerializer::Write((CASerializer *)&theData, (const void *)(*i + 8));
    operator<<();
    CASerializer::Write((CASerializer *)&theData, (const void *)(v17 + 24));
    CASerializer::Write((CASerializer *)&theData, (const void *)(v17 + 28));
    CASerializer::Write((CASerializer *)&theData, (const void *)(v17 + 32));
    CASerializer::Write((CASerializer *)&theData, (const void *)(v17 + 36));
    CASerializer::Write((CASerializer *)&theData, (const void *)(v17 + 40));
    operator<<();
    CASerializer::Write((CASerializer *)&theData, (const void *)(v17 + 56));
  }
  *(_QWORD *)buf = &off_1E2908610;
  *(_QWORD *)&buf[8] = 0;
  buf[16] = *v14 != 0;
  *(_OWORD *)&v27[1] = 0uLL;
  *(_QWORD *)&v27[5] = a2 + 28;
  *(_QWORD *)&v27[7] = a2 + 52;
  *v14 = 0;
  *(_DWORD *)(a2 + 52) = 0;
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    if (theData)
    {
      Length = CFDataGetLength(theData);
      goto LABEL_40;
    }
  }
  else
  {
    BytePtr = 0;
  }
  Length = 0;
LABEL_40:
  v9 = MIGVariableLengthRefs::Write((MIGVariableLengthRefs *)buf, BytePtr, Length);
  if (v9)
  {
    MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)buf);
    result = MEMORY[0x193FFD878](&theData);
    goto LABEL_42;
  }
  buf[16] = 0;
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)buf);
  result = MEMORY[0x193FFD878](&theData);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

void sub_18F0ECEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)va1);
  MEMORY[0x193FFD878]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _XCheckLaunchAUServer(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  _QWORD *v7;
  PlatformUtilities *v8;
  NSObject *v9;
  int v10;
  void **v11;
  void **p_p;
  uint64_t *i;
  uint64_t v14;
  uint64_t *j;
  uint64_t v16;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  PlatformUtilities *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  int v30;
  AudioComponentDescription v31;
  audit_token_t v32;
  pid_t pidp;
  _QWORD v34[8];
  int v35;
  int v36;
  void *__p;
  void **v38;
  uint64_t v39;
  int v40;
  void *v41;
  _BYTE buf[40];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 56)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 56) || *(_DWORD *)(a1 + 60) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = *MEMORY[0x1E0C804E8];
LABEL_8:
    *(_QWORD *)(a2 + 24) = v4;
    return;
  }
  v5 = *(_OWORD *)(a1 + 92);
  *(_OWORD *)v32.val = *(_OWORD *)(a1 + 76);
  *(_OWORD *)&v32.val[4] = v5;
  *(_OWORD *)&v31.componentType = *(_OWORD *)(a1 + 32);
  v6 = *(_DWORD *)(a1 + 52);
  v31.componentFlagsMask = *(_DWORD *)(a1 + 48);
  pidp = 0;
  if (!ClientHasInterAppAudioEntitlement(&v32, &pidp))
  {
    v3 = -66748;
    goto LABEL_7;
  }
  v7 = (_QWORD *)CADeprecated::TSingleton<IPCAURegistrar>::instance();
  v8 = (PlatformUtilities *)pidp;
  if (kInterAppAudioScope)
  {
    v9 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_23;
  }
  else
  {
    v9 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    PlatformUtilities::processName(v8);
    v10 = SHIBYTE(v39);
    v11 = (void **)__p;
    CAFormatter::CAFormatter((CAFormatter *)&v41, &v31);
    if (v10 >= 0)
      p_p = &__p;
    else
      p_p = v11;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "IPCAURegistrar.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 904;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = p_p;
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v41;
    _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d process '%s' requesting desc %s", buf, 0x26u);
    if (v41)
      free(v41);
    if (SHIBYTE(v39) < 0)
      operator delete(__p);
  }
LABEL_23:
  for (i = (uint64_t *)v7[29]; ; ++i)
  {
    if (i == (uint64_t *)v7[30])
    {
      v3 = -50;
      goto LABEL_7;
    }
    v14 = *i;
    if (*(_DWORD *)(*i + 12) == (_DWORD)v8)
      break;
  }
  for (j = (uint64_t *)v7[33]; ; ++j)
  {
    if (j == (uint64_t *)v7[34])
    {
      if (kInterAppAudioScope)
      {
        v18 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
        {
LABEL_43:
          v3 = -3000;
          goto LABEL_7;
        }
      }
      else
      {
        v18 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "IPCAURegistrar.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 953;
        _os_log_impl(&dword_18EE07000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d unknown desc", buf, 0x12u);
      }
      goto LABEL_43;
    }
    v16 = *j;
    if (*(_QWORD *)&v31.componentType == *(_QWORD *)(*j + 24)
      && v31.componentManufacturer == (unint64_t)*(unsigned int *)(*j + 32))
    {
      break;
    }
  }
  __p = 0;
  v38 = &__p;
  v39 = 0x2020000000;
  v40 = 0;
  v19 = *(_QWORD *)(v16 + 16);
  v20 = MEMORY[0x1E0C809B0];
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = ___ZN14IPCAURegistrar19CheckLaunchAUServerEiRK25AudioComponentDescriptionjRi_block_invoke;
  v34[3] = &unk_1E2921D78;
  v34[6] = v14;
  v34[7] = v16;
  v34[4] = &__p;
  v34[5] = v7;
  v35 = v6;
  v36 = (int)v8;
  v21 = (void *)MEMORY[0x193FFEC70]();
  v22 = objc_alloc_init(NSClassFromString(CFSTR("BKSSystemService")));
  v23 = (PlatformUtilities *)objc_msgSend(v22, "pidForApplication:", v19);
  if ((int)v23 <= 0)
  {
    v24 = objc_msgSend(v22, "createClientPort", v23);
    if (OpenAUApp_suspendKey
      || (v25 = dlopen("/System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices", 1),
          (OpenAUApp_suspendKey = *(_QWORD *)dlsym(v25, "BKSOpenApplicationOptionKeyActivateSuspended")) != 0))
    {
      v26 = (void *)MEMORY[0x1E0C99D80];
      v27 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1, *(_QWORD *)&v31.componentType);
      v28 = objc_msgSend(v26, "dictionaryWithObject:forKey:", v27, OpenAUApp_suspendKey);
    }
    else
    {
      v28 = 0;
    }
    *(_QWORD *)buf = v20;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __OpenAUApp_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E29223B8;
    *(_QWORD *)&buf[32] = v34;
    objc_msgSend(v22, "openApplication:options:clientPort:withResult:", v19, v28, v24, buf, *(_QWORD *)&v31.componentType);
  }
  else
  {
    ___ZN14IPCAURegistrar19CheckLaunchAUServerEiRK25AudioComponentDescriptionjRi_block_invoke((uint64_t)v34, 0, v23);
  }

  objc_autoreleasePoolPop(v21);
  v29 = v38;
  if (*((_DWORD *)v38 + 6))
  {
    *(_DWORD *)(a2 + 36) = 0;
    v30 = *((_DWORD *)v29 + 6);
  }
  else
  {
    v30 = 0;
    *(_DWORD *)(a2 + 36) = 1;
  }
  _Block_object_dispose(&__p, 8);
  *(_DWORD *)(a2 + 32) = v30;
  v4 = *MEMORY[0x1E0C804E8];
  if (v30)
    goto LABEL_8;
  *(_QWORD *)(a2 + 24) = v4;
  *(_DWORD *)(a2 + 4) = 40;
}

void sub_18F0ED34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  _Unwind_Resume(exception_object);
}

void _XGetAUServerPort(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  _QWORD *v5;
  pid_t v6;
  NSObject *v7;
  uint64_t i;
  uint64_t *j;
  uint64_t v10;
  NSObject *v12;
  const __CFUUID *v13;
  uint64_t v14;
  CFUUIDBytes v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  CFUUIDBytes *v19;
  char *p_byte8;
  NSObject *v21;
  CFUUIDBytes *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  CFUUIDBytes *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  NSObject *v38;
  const __CFUUID *v39;
  AudioComponentDescription v40;
  audit_token_t v41;
  pid_t pidp;
  void *v43;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  _QWORD v49[3];

  *(_QWORD *)((char *)&v49[1] + 4) = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 52)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 56) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return;
  }
  *(_QWORD *)(a2 + 32) = 0x13000000000000;
  v4 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)v41.val = *(_OWORD *)(a1 + 72);
  *(_OWORD *)&v41.val[4] = v4;
  v40 = *(AudioComponentDescription *)(a1 + 32);
  pidp = 0;
  if (!ClientHasInterAppAudioEntitlement(&v41, &pidp))
  {
    v3 = -66748;
    goto LABEL_7;
  }
  v5 = (_QWORD *)CADeprecated::TSingleton<IPCAURegistrar>::instance();
  v6 = pidp;
  if (kInterAppAudioScope)
  {
    v7 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_17;
  }
  else
  {
    v7 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    CAFormatter::CAFormatter((CAFormatter *)&v43, &v40);
    *(_DWORD *)buf = 136315650;
    v45 = "IPCAURegistrar.mm";
    v46 = 1024;
    v47 = 980;
    v48 = 2080;
    v49[0] = v43;
    _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d desc %s", buf, 0x1Cu);
    if (v43)
      free(v43);
  }
LABEL_17:
  for (i = v5[29]; ; i += 8)
  {
    if (i == v5[30])
    {
      v3 = -50;
      goto LABEL_7;
    }
    if (*(_DWORD *)(*(_QWORD *)i + 12) == v6)
      break;
  }
  for (j = (uint64_t *)v5[33]; ; ++j)
  {
    if (j == (uint64_t *)v5[34])
    {
      if (kInterAppAudioScope)
      {
        v12 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
        {
LABEL_38:
          v3 = -3000;
          goto LABEL_7;
        }
      }
      else
      {
        v12 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v45 = "IPCAURegistrar.mm";
        v46 = 1024;
        v47 = 1010;
        _os_log_impl(&dword_18EE07000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d error: unknown desc", buf, 0x12u);
      }
      goto LABEL_38;
    }
    v10 = *j;
    if (*(_QWORD *)&v40.componentType == *(_QWORD *)(*j + 24)
      && v40.componentManufacturer == (unint64_t)*(unsigned int *)(*j + 32))
    {
      break;
    }
  }
  if (!*(_QWORD *)(v10 + 64))
  {
    if (kInterAppAudioScope)
    {
      v21 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
      {
LABEL_54:
        v3 = -4;
        goto LABEL_7;
      }
    }
    else
    {
      v21 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v45 = "IPCAURegistrar.mm";
      v46 = 1024;
      v47 = 989;
      _os_log_impl(&dword_18EE07000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d node app not found", buf, 0x12u);
    }
    goto LABEL_54;
  }
  v13 = CFUUIDCreate(0);
  v15 = CFUUIDGetUUIDBytes(v13);
  v14 = *(_QWORD *)&v15.byte8;
  v16 = *(_QWORD *)&v15.byte0;
  v17 = *(_DWORD *)(*(_QWORD *)(v10 + 64) + 12);
  v19 = (CFUUIDBytes *)v5[38];
  v18 = v5[39];
  if ((unint64_t)v19 >= v18)
  {
    v39 = v13;
    v22 = (CFUUIDBytes *)v5[37];
    v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v22) >> 3) + 1;
    if (v23 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v22) >> 3);
    if (2 * v24 > v23)
      v23 = 2 * v24;
    if (v24 >= 0x555555555555555)
      v25 = 0xAAAAAAAAAAAAAAALL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v26 = (char *)operator new(24 * v25);
      v14 = *(_QWORD *)&v15.byte8;
      v16 = *(_QWORD *)&v15.byte0;
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[8 * (((char *)v19 - (char *)v22) >> 3)];
    *(_QWORD *)v27 = v16;
    *((_QWORD *)v27 + 1) = v14;
    v28 = &v26[24 * v25];
    *((_DWORD *)v27 + 4) = v6;
    *((_DWORD *)v27 + 5) = v17;
    p_byte8 = v27 + 24;
    if (v19 == v22)
    {
      v13 = v39;
    }
    else
    {
      v13 = v39;
      do
      {
        v29 = *(_OWORD *)&v19[-2].byte8;
        *((_QWORD *)v27 - 1) = *(_QWORD *)&v19[-1].byte8;
        *(_OWORD *)(v27 - 24) = v29;
        v27 -= 24;
        v19 = (CFUUIDBytes *)((char *)v19 - 24);
      }
      while (v19 != v22);
      v19 = (CFUUIDBytes *)v5[37];
    }
    v5[37] = v27;
    v5[38] = p_byte8;
    v5[39] = v28;
    if (v19)
    {
      v30 = v19;
      v31 = v16;
      v32 = v14;
      operator delete(v30);
      v14 = v32;
      v16 = v31;
    }
  }
  else
  {
    *v19 = v15;
    p_byte8 = (char *)&v19[1].byte8;
    *(_DWORD *)&v19[1].byte0 = v6;
    *(_DWORD *)&v19[1].byte4 = v17;
  }
  v5[38] = p_byte8;
  *(_QWORD *)(a2 + 52) = v16;
  *(_QWORD *)(a2 + 60) = v14;
  if (kInterAppAudioScope)
  {
    v33 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_69;
  }
  else
  {
    v33 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    v45 = "IPCAURegistrar.mm";
    v46 = 1024;
    v47 = 1001;
    v48 = 2112;
    v49[0] = v13;
    _os_log_impl(&dword_18EE07000, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d conn UUID %@", buf, 0x1Cu);
  }
LABEL_69:
  CFRelease(v13);
  v34 = *(_QWORD *)(v10 + 64);
  v35 = *(_QWORD *)(v34 + 176);
  if (v35)
    v36 = *(_DWORD *)(v35 + 12);
  else
    v36 = 0;
  *(_DWORD *)(a2 + 28) = v36;
  v37 = *(_DWORD *)(v34 + 12);
  *(_DWORD *)(a2 + 48) = v37;
  if (kInterAppAudioScope)
  {
    v38 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_78;
  }
  else
  {
    v38 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v45 = "IPCAURegistrar.mm";
    v46 = 1024;
    v47 = 1006;
    v48 = 1024;
    LODWORD(v49[0]) = v36;
    WORD2(v49[0]) = 1024;
    *(_DWORD *)((char *)v49 + 6) = v37;
    _os_log_impl(&dword_18EE07000, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d returning 0x%x/%d", buf, 0x1Eu);
  }
LABEL_78:
  *(_QWORD *)(a2 + 40) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 68;
  *(_DWORD *)(a2 + 24) = 1;
}

uint64_t _XCloseConnection(uint64_t result, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  audit_token_t v10;
  pid_t pidp;
  __int128 v12;

  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 48)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(result + 48) || *(_DWORD *)(result + 52) < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    v4 = *(_OWORD *)(result + 84);
    *(_OWORD *)v10.val = *(_OWORD *)(result + 68);
    *(_OWORD *)&v10.val[4] = v4;
    v12 = *(_OWORD *)(result + 32);
    pidp = 0;
    result = ClientHasInterAppAudioEntitlement(&v10, &pidp);
    if ((_DWORD)result)
    {
      result = CADeprecated::TSingleton<IPCAURegistrar>::instance();
      v6 = *(_QWORD *)(result + 296);
      v5 = *(_QWORD *)(result + 304);
      if (v6 == v5)
      {
LABEL_17:
        v3 = -3000;
      }
      else
      {
        v7 = result;
        while (*(_DWORD *)(v6 + 16) != pidp
             || (_QWORD)v12 != *(_QWORD *)v6
             || *((_QWORD *)&v12 + 1) != *(_QWORD *)(v6 + 8))
        {
          v6 += 24;
          if (v6 == v5)
            goto LABEL_17;
        }
        v9 = v5 - (v6 + 24);
        if (v5 != v6 + 24)
          result = (uint64_t)memmove((void *)v6, (const void *)(v6 + 24), v5 - (v6 + 24));
        v3 = 0;
        *(_QWORD *)(v7 + 304) = v6 + v9;
      }
    }
    else
    {
      v3 = -66748;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

uint64_t _XSetProcessWakeState(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  RegistrarClientProcess *v5;
  int v6;
  __int128 v7;
  IPCAURegistrar *v8;
  audit_token_t v9;
  pid_t pidp;

  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 40) || *(_DWORD *)(result + 44) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = *MEMORY[0x1E0C804E8];
    goto LABEL_8;
  }
  v5 = (RegistrarClientProcess *)*(unsigned int *)(result + 32);
  v6 = *(_DWORD *)(result + 36);
  v7 = *(_OWORD *)(result + 76);
  *(_OWORD *)v9.val = *(_OWORD *)(result + 60);
  *(_OWORD *)&v9.val[4] = v7;
  pidp = 0;
  result = ClientHasInterAppAudioEntitlement(&v9, &pidp);
  if ((result & 1) == 0)
  {
    v3 = -66748;
    goto LABEL_7;
  }
  v8 = (IPCAURegistrar *)CADeprecated::TSingleton<IPCAURegistrar>::instance();
  result = IPCAURegistrar::SetProcessWakeState(v8, pidp, v5, v6, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_8:
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t _XSetExtensionProcessWakeState(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  RegistrarClientProcess *v5;
  int v6;
  __int128 v7;
  IPCAURegistrar *v8;
  int v9;
  audit_token_t atoken;
  pid_t pidp;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    result = 4294966992;
  }
  else if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) < 0x20u)
  {
    result = 4294966987;
  }
  else
  {
    v5 = (RegistrarClientProcess *)*(unsigned int *)(a1 + 32);
    v6 = *(_DWORD *)(a1 + 36);
    v7 = *(_OWORD *)(a1 + 76);
    v12 = *(_OWORD *)(a1 + 60);
    v13 = v7;
    pidp = 0;
    *(_OWORD *)atoken.val = v12;
    *(_OWORD *)&atoken.val[4] = v7;
    audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
    v8 = (IPCAURegistrar *)CADeprecated::TSingleton<IPCAURegistrar>::instance();
    result = IPCAURegistrar::SetProcessWakeState(v8, pidp, v5, v6, &v9);
  }
  v4 = (_QWORD *)MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *v4;
  return result;
}

void _XURLOpen(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  CFIndex v5;
  _DWORD *v6;
  _QWORD *v7;
  const __CFURL *v8;
  _QWORD *v9;
  CFStringRef v10;
  CFStringRef v11;
  const __CFString *v12;
  const __CFString *v13;
  CFIndex Length;
  CFIndex v15;
  int v16;
  const __CFString *v17;
  CFUUIDRef v18;
  const __CFUUID *v19;
  NSObject *v20;
  NSObject *v21;
  CFUUIDBytes v22;
  uint64_t i;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  id v33;
  int v34;
  int v35;
  UniChar buffer;
  unsigned __int16 v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  const __CFURL *v43;
  __int16 v44;
  _BYTE v45[10];
  _BOOL4 v46;
  uint64_t v47;
  CFRange v48;
  CFRange v49;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = -304;
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
    v4 = *(unsigned int *)(a1 + 4);
    if (v4 >= 0x24 && v4 <= 0x124)
    {
      v5 = *(unsigned int *)(a1 + 32);
      if (v5 <= 0x100 && (int)v4 - 36 >= v5)
      {
        if ((_DWORD)v4 != (((_DWORD)v5 + 3) & 0xFFFFFFFC) + 36)
        {
          v3 = -304;
          goto LABEL_11;
        }
        v6 = (_DWORD *)(((v4 + 3) & 0x1FFFFFFFCLL) + a1);
        if (*v6 || v6[1] < 0x20u)
        {
          v3 = -309;
          goto LABEL_11;
        }
        v8 = CFURLCreateWithBytes(0, (const UInt8 *)(a1 + 36), v5, 0x8000100u, 0);
        v9 = (_QWORD *)CADeprecated::TSingleton<IPCAURegistrar>::instance();
        v10 = CFURLCopyScheme(v8);
        if (v10)
        {
          v11 = v10;
          if (CFEqual(CFSTR("com-apple-audiounit"), v10))
          {
            v12 = CFURLCopyResourceSpecifier(v8);
            if (v12)
            {
              v13 = v12;
              Length = CFStringGetLength(v12);
              v15 = Length - 2;
              if (Length > 2)
              {
                v48.location = Length - 2;
                v48.length = 2;
                CFStringGetCharacters(v13, v48, &buffer);
                if (buffer == 47)
                {
                  v16 = v37;
                  if (v37 == 78 || v37 == 72)
                  {
                    v49.location = 0;
                    v49.length = v15;
                    v17 = CFStringCreateWithSubstring(0, v13, v49);
                    v18 = CFUUIDCreateFromString(0, v17);
                    if (v18)
                    {
                      v19 = v18;
                      if (kInterAppAudioScope)
                      {
                        v20 = *(NSObject **)kInterAppAudioScope;
                        if (!*(_QWORD *)kInterAppAudioScope)
                        {
LABEL_38:
                          v22 = CFUUIDGetUUIDBytes(v19);
                          for (i = v9[37]; i != v9[38]; i += 24)
                          {
                            if (*(_QWORD *)&v22.byte0 == *(_QWORD *)i && *(_QWORD *)&v22.byte8 == *(_QWORD *)(i + 8))
                            {
                              if (v16 == 72)
                                v26 = 16;
                              else
                                v26 = 20;
                              v27 = v9[29];
                              v28 = v9[30];
                              if (v27 != v28)
                              {
                                v29 = *(_DWORD *)(i + v26);
                                while (*(_DWORD *)(*(_QWORD *)v27 + 12) != v29)
                                {
                                  v27 += 8;
                                  if (v27 == v28)
                                    goto LABEL_55;
                                }
                                v31 = *(_QWORD *)(*(_QWORD *)v27 + 16);
                                v32 = (void *)MEMORY[0x193FFEC70]();
                                v33 = objc_alloc_init(NSClassFromString(CFSTR("BKSSystemService")));
                                if ((int)objc_msgSend(v33, "pidForApplication:", v31) >= 1)
                                  objc_msgSend(v33, "openApplication:options:clientPort:withResult:", v31, 0, objc_msgSend(v33, "createClientPort"), &__block_literal_global_11901);

                                objc_autoreleasePoolPop(v32);
                                goto LABEL_67;
                              }
LABEL_55:
                              if (kInterAppAudioScope)
                              {
                                v30 = *(NSObject **)kInterAppAudioScope;
                                if (!*(_QWORD *)kInterAppAudioScope)
                                {
LABEL_67:
                                  CFRelease(v19);
                                  goto LABEL_68;
                                }
                              }
                              else
                              {
                                v30 = MEMORY[0x1E0C81028];
                              }
                              if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                              {
                                v34 = *(_DWORD *)(i + 16);
                                v35 = *(_DWORD *)(i + 20);
                                *(_DWORD *)buf = 136316162;
                                v39 = "IPCAURegistrar.mm";
                                v40 = 1024;
                                v41 = 1074;
                                v42 = 2112;
                                v43 = v8;
                                v44 = 1024;
                                *(_DWORD *)v45 = v34;
                                *(_WORD *)&v45[4] = 1024;
                                *(_DWORD *)&v45[6] = v35;
                                _os_log_impl(&dword_18EE07000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d Inter-app URL '%@' appears valid for processes %d - %d, but process not found", buf, 0x28u);
                              }
                              goto LABEL_67;
                            }
                          }
                          CFRelease(v19);
                          if (kInterAppAudioScope)
                          {
                            v25 = *(NSObject **)kInterAppAudioScope;
                            if (!*(_QWORD *)kInterAppAudioScope)
                              goto LABEL_68;
                          }
                          else
                          {
                            v25 = MEMORY[0x1E0C81028];
                          }
                          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 136315650;
                            v39 = "IPCAURegistrar.mm";
                            v40 = 1024;
                            v41 = 1082;
                            v42 = 2112;
                            v43 = v8;
                            _os_log_impl(&dword_18EE07000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d Inter-app URL '%@' does not refer to an active/valid connection", buf, 0x1Cu);
                          }
LABEL_68:
                          CFRelease(v17);
                          CFRelease(v13);
                          CFRelease(v11);
                          if (!v8)
                            goto LABEL_34;
                          goto LABEL_33;
                        }
                      }
                      else
                      {
                        v20 = MEMORY[0x1E0C81028];
                      }
                      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136316162;
                        v39 = "IPCAURegistrar.mm";
                        v40 = 1024;
                        v41 = 1066;
                        v42 = 2112;
                        v43 = v8;
                        v44 = 2112;
                        *(_QWORD *)v45 = v19;
                        *(_WORD *)&v45[8] = 1024;
                        v46 = v16 == 72;
                        _os_log_impl(&dword_18EE07000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d url %@; uuid %@ host %d",
                          buf,
                          0x2Cu);
                      }
                      goto LABEL_38;
                    }
                    CFRelease(v17);
                  }
                }
              }
              CFRelease(v13);
            }
          }
          CFRelease(v11);
        }
        if (kInterAppAudioScope)
        {
          v21 = *(NSObject **)kInterAppAudioScope;
          if (!*(_QWORD *)kInterAppAudioScope)
            goto LABEL_32;
        }
        else
        {
          v21 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v39 = "IPCAURegistrar.mm";
          v40 = 1024;
          v41 = 1095;
          v42 = 2112;
          v43 = v8;
          _os_log_impl(&dword_18EE07000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Malformed inter-app URL: '%@'", buf, 0x1Cu);
        }
LABEL_32:
        if (!v8)
        {
LABEL_34:
          v3 = 0;
          goto LABEL_11;
        }
LABEL_33:
        CFRelease(v8);
        goto LABEL_34;
      }
    }
  }
LABEL_11:
  v7 = (_QWORD *)MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *v7;
}

uint64_t _XGetSessionInfo(uint64_t result, uint64_t a2)
{
  int v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int32 *v10;
  __int32 *v11;
  pid_t v12;
  __int32 v13;
  size_t v14;
  __int32 *v15;
  __int32 *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int32 *v20;
  __int32 *v21;
  __int32 v22;
  int8x16_t **i;
  int8x16_t *v24;
  const __CFUUID *v25;
  CFStringRef v26;
  CFStringRef v27;
  const __CFString *v28;
  CFURLRef v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t **v32;
  int8x16_t **v33;
  int v34;
  int8x16_t *v35;
  const __CFUUID *v36;
  CFStringRef v37;
  CFStringRef v38;
  const __CFString *v39;
  CFURLRef v40;
  int v41;
  const UInt8 *BytePtr;
  vm_size_t Length;
  __int32 *v44;
  unint64_t v45;
  pid_t v46;
  uint64_t v47;
  _QWORD *v48;
  audit_token_t v49;
  void (**v50)(MIGVariableLengthRefs *__hidden);
  uint64_t v51;
  int8x16_t v52;
  CFTypeRef cf;
  uint64_t v54;
  uint64_t v55;
  CASerializer v56;
  pid_t pidp;
  _DWORD v58[3];

  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 24)
  {
    v4 = -304;
    goto LABEL_7;
  }
  v3 = *(_DWORD *)(result + 24);
  result += 24;
  if (!v3 && *(_DWORD *)(result + 4) > 0x1Fu)
  {
    *(_DWORD *)(a2 + 36) = 16777473;
    v5 = *(_OWORD *)(result + 36);
    *(_OWORD *)v49.val = *(_OWORD *)(result + 20);
    *(_OWORD *)&v49.val[4] = v5;
    pidp = 0;
    result = ClientHasInterAppAudioEntitlement(&v49, &pidp);
    if ((result & 1) == 0)
    {
      v41 = -66748;
LABEL_81:
      *(_DWORD *)(a2 + 32) = v41;
      goto LABEL_8;
    }
    CASerializer::CASerializer(&v56, 0);
    v6 = CADeprecated::TSingleton<IPCAURegistrar>::instance();
    v7 = (_QWORD *)v6;
    v9 = *(_QWORD *)(v6 + 296);
    v8 = *(_QWORD *)(v6 + 304);
    if (v9 != v8)
    {
      v10 = 0;
      v11 = 0;
      v12 = pidp;
      v45 = 0;
      v47 = *(_QWORD *)(v6 + 304);
      v48 = (_QWORD *)v6;
      v46 = pidp;
      do
      {
        if (*(_DWORD *)(v9 + 20) == v12)
        {
          v13 = *(_DWORD *)(v9 + 16);
          v14 = v11 - v10;
          v15 = wmemchr(v10, v13, v14);
          if (v15)
            v16 = v15;
          else
            v16 = v11;
          if (v16 == v11)
          {
            if ((unint64_t)v11 >= v45)
            {
              v17 = v14 + 1;
              if ((v14 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v45 - (_QWORD)v10) >> 1 > v17)
                v17 = (uint64_t)(v45 - (_QWORD)v10) >> 1;
              if (v45 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
                v18 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v18 = v17;
              if (v18)
                v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v18);
              else
                v19 = 0;
              v20 = (__int32 *)(v18 + 4 * v14);
              *v20 = v13;
              v21 = v20 + 1;
              while (v11 != v10)
              {
                v22 = *--v11;
                *--v20 = v22;
              }
              v45 = v18 + 4 * v19;
              if (v10)
                operator delete(v10);
              v10 = v20;
              v11 = v21;
            }
            else
            {
              *v11++ = v13;
            }
            for (i = (int8x16_t **)v7[29]; i != (int8x16_t **)v7[30]; ++i)
            {
              v24 = *i;
              if ((*i)->i32[3] == v13)
              {
                v44 = v11;
                LOBYTE(v50) = 1;
                HIDWORD(v50) = v13;
                v51 = 0;
                v52 = vextq_s8(v24[1], v24[1], 8uLL);
                v25 = CFUUIDCreateFromUUIDBytes(0, *(CFUUIDBytes *)v9);
                if (v25)
                {
                  v26 = CFUUIDCreateString(0, v25);
                  v27 = v26;
                  if (v26)
                  {
                    v28 = CFStringCreateWithFormat(0, 0, CFSTR("com-apple-audiounit:%@/%c"), v26, 72);
                    if (v28)
                    {
                      v29 = CFURLCreateWithString(0, v28, 0);
                      CFRelease(v28);
                    }
                    else
                    {
                      v29 = 0;
                    }
                    CFRelease(v27);
                  }
                  else
                  {
                    v29 = 0;
                  }
                  CFRelease(v25);
                }
                else
                {
                  v29 = 0;
                }
                cf = v29;
                v58[0] = v50;
                CASerializer::Write(&v56, v58);
                CASerializer::Write(&v56, (char *)&v50 + 4);
                operator<<();
                operator<<();
                operator<<();
                CFRelease(cf);
                v30 = v7[37];
                v31 = v7[38];
                while (v30 != v31)
                {
                  if (*(_DWORD *)(v30 + 16) == v13)
                  {
                    v32 = (int8x16_t **)v48[29];
                    v33 = (int8x16_t **)v48[30];
                    if (v32 != v33)
                    {
                      v34 = *(_DWORD *)(v30 + 20);
                      while (1)
                      {
                        v35 = *v32;
                        if ((*v32)->i32[3] == v34)
                          break;
                        if (++v32 == v33)
                          goto LABEL_69;
                      }
                      LOBYTE(v50) = 0;
                      HIDWORD(v50) = v34;
                      v51 = 0;
                      v52 = vextq_s8(v35[1], v35[1], 8uLL);
                      v36 = CFUUIDCreateFromUUIDBytes(0, *(CFUUIDBytes *)v30);
                      if (v36)
                      {
                        v37 = CFUUIDCreateString(0, v36);
                        v38 = v37;
                        if (v37)
                        {
                          v39 = CFStringCreateWithFormat(0, 0, CFSTR("com-apple-audiounit:%@/%c"), v37, 78);
                          if (v39)
                          {
                            v40 = CFURLCreateWithString(0, v39, 0);
                            CFRelease(v39);
                          }
                          else
                          {
                            v40 = 0;
                          }
                          CFRelease(v38);
                        }
                        else
                        {
                          v40 = 0;
                        }
                        CFRelease(v36);
                      }
                      else
                      {
                        v40 = 0;
                      }
                      cf = v40;
                      v58[0] = v50;
                      CASerializer::Write(&v56, v58);
                      CASerializer::Write(&v56, (char *)&v50 + 4);
                      operator<<();
                      operator<<();
                      operator<<();
                      CFRelease(cf);
                    }
                  }
LABEL_69:
                  v30 += 24;
                }
                v8 = v47;
                v7 = v48;
                v12 = v46;
                v11 = v44;
                goto LABEL_19;
              }
            }
          }
          v8 = v47;
          v12 = v46;
        }
LABEL_19:
        v9 += 24;
      }
      while (v9 != v8);
      if (v10)
        operator delete(v10);
    }
    v50 = &off_1E2908610;
    v51 = 0;
    v52.i8[0] = *(_QWORD *)(a2 + 28) != 0;
    v52.i64[1] = 0;
    cf = 0;
    v54 = a2 + 28;
    v55 = a2 + 52;
    *(_QWORD *)(a2 + 28) = 0;
    *(_DWORD *)(a2 + 52) = 0;
    if (v56.var0)
    {
      BytePtr = CFDataGetBytePtr(v56.var0);
      if (v56.var0)
      {
        Length = CFDataGetLength(v56.var0);
LABEL_79:
        v41 = MIGVariableLengthRefs::Write((MIGVariableLengthRefs *)&v50, BytePtr, Length);
        if (!v41)
        {
          v52.i8[0] = 0;
          MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)&v50);
          result = MEMORY[0x193FFD878](&v56);
          *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
          *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
          *(_DWORD *)a2 |= 0x80000000;
          *(_DWORD *)(a2 + 4) = 56;
          *(_DWORD *)(a2 + 24) = 1;
          return result;
        }
        MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)&v50);
        result = MEMORY[0x193FFD878](&v56);
        goto LABEL_81;
      }
    }
    else
    {
      BytePtr = 0;
    }
    Length = 0;
    goto LABEL_79;
  }
  v4 = -309;
LABEL_7:
  *(_DWORD *)(a2 + 32) = v4;
LABEL_8:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

void sub_18F0EE70C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFD878](v1 - 104);
  _Unwind_Resume(a1);
}

uint64_t IPCAudioUnitRegistration_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 90015) >= 0xFFFFFFF1
    && (v5 = (void (*)(void))IPCAURegServer_IPCAudioUnitRegistration_subsystem[5 * (v4 - 90000) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

void AudioConverterXPC_Client::~AudioConverterXPC_Client(AudioConverterXPC_Client *this)
{
  swix::ipc_interface::~ipc_interface(this);
  JUMPOUT(0x193FFE460);
}

swix::message *AudioConverterXPC_Client::dispatch_message@<X0>(swix::message *a1@<X8>)
{
  return swix::message::message(a1);
}

swix::message *swix::message::message(swix::message *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = xpc_null_create();
  *((_QWORD *)this + 2) = 0;
  return this;
}

void AudioConverterXPC_Server::~AudioConverterXPC_Server(AudioConverterXPC_Server *this)
{
  swix::ipc_interface::~ipc_interface(this);
  JUMPOUT(0x193FFE460);
}

void AudioConverterXPC_Server::dispatch_message(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pid_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  xpc_object_t v10;
  UInt32 v11;
  void *v12;
  xpc_object_t v13;
  int v14;
  const void *v15;
  UInt32 v16;
  NSObject *v17;
  unint64_t v18;
  xpc_object_t v19;
  Float64 v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  const AudioClassDescription *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  int64_t v41;
  xpc_object_t v42;
  const AudioClassDescription *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  int64_t v52;
  OSStatus v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  OpaqueAudioComponent *Next;
  uint64_t v60;
  void *v61;
  void *v62;
  xpc_object_t v63;
  void *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  xpc_object_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  xpc_object_t v74;
  UInt32 v75;
  void *v76;
  xpc_object_t v77;
  unsigned int v78;
  BOOL v79;
  Float64 v80;
  const void *bytes_ptr;
  void (**v82)(AudioConverterPropertyMarshaller *__hidden);
  UInt32 v83;
  NSObject *v84;
  Float64 v85;
  xpc_object_t v86;
  void *v87;
  auoop::WorkgroupMirror *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  void *v94;
  void *v95;
  int64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  size_t AllocSize;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  const void *v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  UInt32 v112;
  NSObject *v113;
  const UInt8 *BytePtr;
  size_t Length;
  Float64 mSampleRate;
  Float64 v117;
  xpc_object_t v118;
  xpc_object_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  int v123;
  void *v124;
  xpc_object_t v125;
  Float64 v126;
  void *v127;
  AudioStreamBasicDescription v128;
  AudioStreamBasicDescription v129;
  _DWORD __n[7];
  uint64_t v131;
  _DWORD *v132;
  UInt32 v133;
  AudioComponentDescription inDesc[4];
  __int128 v135;
  xpc_object_t v136;
  AudioStreamBasicDescription v137;
  AudioStreamBasicDescription buf;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  swix::message::message((swix::message *)a3);
  switch(*(_DWORD *)a2)
  {
    case 0x47504E1:
      v6 = getpid();
      MEMORY[0x193FFDB9C](inDesc, a2);
      v7 = *(_QWORD *)&inDesc[0].componentManufacturer;
      *(_QWORD *)a3 = *(_QWORD *)&inDesc[0].componentType;
      *(_QWORD *)&inDesc[0].componentManufacturer = xpc_null_create();
      v8 = *(void **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v7;
      xpc_release(v8);
      v9 = *(void **)&inDesc[0].componentManufacturer;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&inDesc[0].componentFlagsMask;
      xpc_release(v9);
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", 0);
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), "process", v6);
      return;
    case 0x47504E2:
      Next = 0;
      *(_OWORD *)&inDesc[0].componentType = xmmword_18F117060;
      inDesc[0].componentFlagsMask = 0;
      do
        Next = AudioComponentFindNext(Next, inDesc);
      while (Next);
      goto LABEL_32;
    case 0x47504E3:
      swix::coder<AudioStreamBasicDescription>::decode((uint64_t)&buf, *(xpc_object_t *)(a2 + 8), "sourceFormat");
      *(_OWORD *)&inDesc[0].componentType = *(_OWORD *)&buf.mSampleRate;
      *(_OWORD *)&inDesc[0].componentFlagsMask = *(_OWORD *)&buf.mBytesPerPacket;
      *(_QWORD *)&inDesc[1].componentFlags = *(_QWORD *)&buf.mBitsPerChannel;
      swix::coder<AudioStreamBasicDescription>::decode((uint64_t)&buf, *(xpc_object_t *)(a2 + 8), "destinationFormat");
      *(AudioStreamBasicDescription *)&inDesc[2].componentType = buf;
      v35 = (const AudioClassDescription *)swix::coder<std::span<AudioClassDescription const,18446744073709551615ul>>::decode(*(void **)(a2 + 8));
      *(_OWORD *)&v129.mSampleRate = *(_OWORD *)&inDesc[0].componentType;
      *(_OWORD *)&v129.mBytesPerPacket = *(_OWORD *)&inDesc[0].componentFlagsMask;
      *(_QWORD *)&v129.mBitsPerChannel = *(_QWORD *)&inDesc[1].componentFlags;
      v128 = *(AudioStreamBasicDescription *)&inDesc[2].componentType;
      v37 = AudioConverterXPC_Server::instantiateSpecific(a1, &v129, &v128, v35, v36);
      MEMORY[0x193FFDB9C](&buf, a2);
      v38 = *(_QWORD *)&buf.mFormatID;
      *(Float64 *)a3 = buf.mSampleRate;
      *(_QWORD *)&buf.mFormatID = xpc_null_create();
      v39 = *(void **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v38;
      xpc_release(v39);
      v40 = *(void **)&buf.mFormatID;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf.mBytesPerPacket;
      xpc_release(v40);
      if (HIDWORD(v37))
        v41 = 0;
      else
        v41 = (int)v37;
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", v41);
      return;
    case 0x47504E4:
      v135 = 0u;
      memset(&inDesc[1].componentFlags, 0, 48);
      memset(inDesc, 0, 32);
      v42 = xpc_null_create();
      v136 = v42;
      swix::coder<AudioStreamBasicDescription>::decode((uint64_t)&buf, *(xpc_object_t *)(a2 + 8), "sourceFormat");
      *(_OWORD *)&inDesc[0].componentType = *(_OWORD *)&buf.mSampleRate;
      *(_OWORD *)&inDesc[0].componentFlagsMask = *(_OWORD *)&buf.mBytesPerPacket;
      *(_QWORD *)&inDesc[1].componentFlags = *(_QWORD *)&buf.mBitsPerChannel;
      swix::coder<AudioStreamBasicDescription>::decode((uint64_t)&buf, *(xpc_object_t *)(a2 + 8), "destinationFormat");
      *(AudioStreamBasicDescription *)&inDesc[2].componentType = buf;
      v43 = (const AudioClassDescription *)swix::coder<std::span<AudioClassDescription const,18446744073709551615ul>>::decode(*(void **)(a2 + 8));
      v45 = v44;
      *(_QWORD *)&v135 = v43;
      *((_QWORD *)&v135 + 1) = v44;
      swix::xpcobj_coder<applesauce::xpc::object>::decode(&v127, *(xpc_object_t *)(a2 + 8), "ipcResources");
      v46 = v127;
      v136 = v127;
      xpc_release(v42);
      v127 = 0;
      *(_OWORD *)&buf.mSampleRate = *(_OWORD *)&inDesc[0].componentType;
      *(_OWORD *)&buf.mBytesPerPacket = *(_OWORD *)&inDesc[0].componentFlagsMask;
      *(_QWORD *)&buf.mBitsPerChannel = *(_QWORD *)&inDesc[1].componentFlags;
      v137 = *(AudioStreamBasicDescription *)&inDesc[2].componentType;
      v47 = AudioConverterXPC_Server::instantiateSpecific(a1, &buf, &v137, v43, v45);
      if (HIDWORD(v47) || (v48 = v47, !(_DWORD)v47))
        v48 = AudioConverterXPC_Server::setUpRenderer(a1, &v136);
      MEMORY[0x193FFDB9C](&buf, a2);
      v49 = *(_QWORD *)&buf.mFormatID;
      *(Float64 *)a3 = buf.mSampleRate;
      *(_QWORD *)&buf.mFormatID = xpc_null_create();
      v50 = *(void **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v49;
      xpc_release(v50);
      v51 = *(void **)&buf.mFormatID;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf.mBytesPerPacket;
      xpc_release(v51);
      if (HIDWORD(v48))
        v52 = 0;
      else
        v52 = (int)v48;
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", v52);
      xpc_release(v46);
      return;
    case 0x47504E5:
      v19 = xpc_null_create();
      *(_QWORD *)&buf.mSampleRate = v19;
      swix::xpcobj_coder<applesauce::xpc::object>::decode(&v126, *(xpc_object_t *)(a2 + 8), "ipcResources");
      v20 = v126;
      buf.mSampleRate = v126;
      xpc_release(v19);
      v126 = 0.0;
      v21 = AudioConverterXPC_Server::setUpRenderer(a1, (xpc_object_t *)&buf);
      MEMORY[0x193FFDB9C](inDesc, a2);
      v22 = *(_QWORD *)&inDesc[0].componentManufacturer;
      *(_QWORD *)a3 = *(_QWORD *)&inDesc[0].componentType;
      *(_QWORD *)&inDesc[0].componentManufacturer = xpc_null_create();
      v23 = *(void **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v22;
      xpc_release(v23);
      v24 = *(void **)&inDesc[0].componentManufacturer;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&inDesc[0].componentFlagsMask;
      xpc_release(v24);
      if (HIDWORD(v21))
        v25 = 0;
      else
        v25 = (int)v21;
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", v25);
      xpc_release(*(xpc_object_t *)&v20);
      return;
    case 0x47504E6:
      v63 = xpc_null_create();
      *(_QWORD *)&inDesc[0].componentType = 0;
      xpc_dictionary_get_data(*(xpc_object_t *)(a2 + 8), "configParams", (size_t *)&inDesc[0].componentType);
      swix::xpcobj_coder<applesauce::xpc::object>::decode(&v125, *(xpc_object_t *)(a2 + 8), "ipcResources");
      v64 = v125;
      v125 = v63;
      xpc_release(v63);
      v125 = 0;
      v65 = *(uint64_t **)(a1 + 16);
      v66 = *v65;
      v67 = *(_QWORD *)(*v65 + 56);
      v68 = operator new();
      v69 = *(_QWORD *)(v66 + 8);
      *(_QWORD *)&inDesc[0].componentType = v64;
      if (v64 && object_getClass(v64) == (Class)MEMORY[0x1E0C812F8])
      {
        xpc_retain(v64);
        v70 = v64;
      }
      else
      {
        v70 = xpc_null_create();
        *(_QWORD *)&inDesc[0].componentType = v70;
      }
      *(_QWORD *)v68 = off_1E28FFC78;
      *(_QWORD *)(v68 + 8) = v69;
      audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::ipc_node_base(v68 + 16, (xpc_object_t *)inDesc);
      *(_BYTE *)(v68 + 80) = 0;
      *(_BYTE *)(v68 + 96) = 0;
      *(_QWORD *)(v68 + 104) = 0;
      *(_QWORD *)(v68 + 112) = 0;
      *(_DWORD *)(v68 + 120) = 0;
      *(_BYTE *)(v68 + 128) = 0;
      *(_BYTE *)(v68 + 200) = 0;
      *(_QWORD *)(v68 + 208) = MEMORY[0x1E0DDB760] + 16;
      *(_OWORD *)(v68 + 216) = 0u;
      *(_OWORD *)(v68 + 232) = 0u;
      *(_OWORD *)(v68 + 248) = 0u;
      *(_BYTE *)(v68 + 264) = 0;
      *(_QWORD *)(v68 + 272) = v67;
      *(_QWORD *)v68 = &off_1E28FFCD8;
      v100 = *(_QWORD *)(v68 + 40);
      AllocSize = IOSurfaceGetAllocSize(*(IOSurfaceRef *)(v68 + 16));
      *(_QWORD *)(v68 + 280) = v100;
      *(_QWORD *)(v68 + 288) = AllocSize - 16;
      *(_DWORD *)(v68 + 304) = 0;
      *(_QWORD *)(v68 + 312) = 0;
      *(_QWORD *)(v68 + 320) = v100;
      *(_DWORD *)(v100 + 16) = AllocSize - 384;
      *(_QWORD *)(v68 + 296) = v100 + 16;
      *(_QWORD *)(v68 + 328) = v100 + 32;
      *(_QWORD *)(v100 + 24) = 368;
      *(_QWORD *)(v68 + 336) = v100 + 368;
      AudioConverterServer::setup((AudioConverterServer *)v68, "AudioConverterPropertyServer");
      xpc_release(v70);
      v102 = **(_QWORD **)(a1 + 16);
      v103 = *(_QWORD *)(v102 + 48);
      *(_QWORD *)(v102 + 48) = v68;
      if (v103)
        (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
      AudioConverterLog();
      v104 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        inDesc[0].componentType = 136315394;
        *(_QWORD *)&inDesc[0].componentSubType = "RemoteAudioConverter.cpp";
        LOWORD(inDesc[0].componentFlags) = 1024;
        *(UInt32 *)((char *)&inDesc[0].componentFlags + 2) = 146;
        _os_log_impl(&dword_18EE07000, v104, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioConverterService: Created property server", (uint8_t *)inDesc, 0x12u);
      }
      MEMORY[0x193FFDB9C](inDesc, a2);
      v105 = *(_QWORD *)&inDesc[0].componentManufacturer;
      *(_QWORD *)a3 = *(_QWORD *)&inDesc[0].componentType;
      *(_QWORD *)&inDesc[0].componentManufacturer = xpc_null_create();
      v106 = *(void **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v105;
      xpc_release(v106);
      v107 = *(void **)&inDesc[0].componentManufacturer;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&inDesc[0].componentFlagsMask;
      xpc_release(v107);
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", 0);
      xpc_release(v64);
      return;
    case 0x47504E7:
      v71 = **(_QWORD **)(a1 + 16);
      v72 = *(_QWORD *)(v71 + 48);
      *(_QWORD *)(v71 + 48) = 0;
      if (v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
      AudioConverterLog();
      v73 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        inDesc[0].componentType = 136315394;
        *(_QWORD *)&inDesc[0].componentSubType = "RemoteAudioConverter.cpp";
        LOWORD(inDesc[0].componentFlags) = 1024;
        *(UInt32 *)((char *)&inDesc[0].componentFlags + 2) = 153;
        _os_log_impl(&dword_18EE07000, v73, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioConverterService: Destroyed property server", (uint8_t *)inDesc, 0x12u);
      }
LABEL_32:
      MEMORY[0x193FFDB9C](inDesc, a2);
      v60 = *(_QWORD *)&inDesc[0].componentManufacturer;
      *(_QWORD *)a3 = *(_QWORD *)&inDesc[0].componentType;
      *(_QWORD *)&inDesc[0].componentManufacturer = xpc_null_create();
      v61 = *(void **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v60;
      xpc_release(v61);
      v62 = *(void **)&inDesc[0].componentManufacturer;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&inDesc[0].componentFlagsMask;
      xpc_release(v62);
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", 0);
      return;
    case 0x47504E8:
      v53 = AudioConverterDispose(*(AudioConverterRef *)(**(_QWORD **)(a1 + 16) + 8));
      v54 = **(_QWORD **)(a1 + 16);
      v55 = *(_QWORD *)(v54 + 40);
      *(_QWORD *)(v54 + 40) = 0;
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      MEMORY[0x193FFDB9C](inDesc, a2);
      v56 = *(_QWORD *)&inDesc[0].componentManufacturer;
      *(_QWORD *)a3 = *(_QWORD *)&inDesc[0].componentType;
      *(_QWORD *)&inDesc[0].componentManufacturer = xpc_null_create();
      v57 = *(void **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v56;
      xpc_release(v57);
      v58 = *(void **)&inDesc[0].componentManufacturer;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&inDesc[0].componentFlagsMask;
      xpc_release(v58);
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", v53);
      return;
    case 0x47504E9:
      v86 = xpc_null_create();
      swix::xpcobj_coder<applesauce::xpc::object>::decode(&v124, *(xpc_object_t *)(a2 + 8), "workgroups");
      v87 = v124;
      xpc_release(v86);
      v124 = 0;
      v88 = *(auoop::WorkgroupMirror **)(**(_QWORD **)(a1 + 16) + 56);
      *(_QWORD *)&inDesc[0].componentType = v87;
      if (v87 && object_getClass(v87) == (Class)MEMORY[0x1E0C812F8])
        xpc_retain(v87);
      else
        *(_QWORD *)&inDesc[0].componentType = xpc_null_create();
      auoop::WorkgroupMirror::update(v88, (const applesauce::xpc::dict *)inDesc);
      xpc_release(*(xpc_object_t *)&inDesc[0].componentType);
      MEMORY[0x193FFDB9C](inDesc, a2);
      v97 = *(_QWORD *)&inDesc[0].componentManufacturer;
      *(_QWORD *)a3 = *(_QWORD *)&inDesc[0].componentType;
      *(_QWORD *)&inDesc[0].componentManufacturer = xpc_null_create();
      v98 = *(void **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v97;
      xpc_release(v98);
      v99 = *(void **)&inDesc[0].componentManufacturer;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&inDesc[0].componentFlagsMask;
      xpc_release(v99);
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", 0);
      xpc_release(v87);
      return;
    case 0x47504EA:
      v26 = swix::coder<unsigned int>::decode(*(void **)(a2 + 8), "propertyID");
      LODWORD(v131) = 0;
      LOBYTE(v133) = 0;
      v27 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8);
      LODWORD(v132) = v26;
      *(_QWORD *)&v137.mSampleRate = &v131;
      *(_QWORD *)&__n[1] = &v133;
      *(_QWORD *)&buf.mSampleRate = &v132;
      *(_QWORD *)&buf.mFormatID = &v137;
      *(_QWORD *)&buf.mBytesPerPacket = &__n[1];
      *(_QWORD *)&inDesc[0].componentType = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetPropertyInfo::$_0>;
      *(_QWORD *)&inDesc[0].componentManufacturer = &buf;
      v28 = with_resolved(v27, (uint64_t (**)(uint64_t, uint64_t))inDesc);
      v29 = v28;
      v30 = v133;
      if (v28)
        v31 = v28;
      else
        v31 = v131;
      MEMORY[0x193FFDB9C](inDesc, a2);
      v32 = *(_QWORD *)&inDesc[0].componentManufacturer;
      *(_QWORD *)a3 = *(_QWORD *)&inDesc[0].componentType;
      *(_QWORD *)&inDesc[0].componentManufacturer = xpc_null_create();
      v33 = *(void **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v32;
      xpc_release(v33);
      v34 = *(void **)&inDesc[0].componentManufacturer;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&inDesc[0].componentFlagsMask;
      xpc_release(v34);
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", (int)v29);
      if (!v29)
      {
        xpc_dictionary_set_uint64(*(xpc_object_t *)(a3 + 8), "dataSize", v31);
        xpc_dictionary_set_BOOL(*(xpc_object_t *)(a3 + 8), "outWritable", v30 != 0);
      }
      return;
    case 0x47504EB:
      v74 = xpc_null_create();
      v75 = swix::coder<unsigned int>::decode(*(void **)(a2 + 8), "propertyID");
      swix::xpcobj_coder<swix::data>::decode((xpc_object_t *)inDesc, *(xpc_object_t *)(a2 + 8), "inData");
      v76 = *(void **)&inDesc[0].componentType;
      v77 = xpc_null_create();
      *(_QWORD *)&inDesc[0].componentType = v77;
      xpc_release(v74);
      xpc_release(v77);
      v78 = swix::coder<unsigned int>::decode(*(void **)(a2 + 8), "dataSize");
      v79 = xpc_dictionary_get_BOOL(*(xpc_object_t *)(a2 + 8), "inputRequiredForProperty");
      memset(&__n[1], 0, 24);
      v80 = COERCE_DOUBLE(xpc_null_create());
      bytes_ptr = xpc_data_get_bytes_ptr(v76);
      xpc_data_get_length(v76);
      PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)inDesc, bytes_ptr);
      v82 = &off_1E2909960;
      *(_QWORD *)&inDesc[0].componentType = &off_1E2909960;
      __n[0] = v78;
      if (v78)
        std::vector<unsigned char>::__append((std::vector<char> *)&__n[1], v78);
      if (!v79)
      {
        v89 = *(_QWORD *)&__n[1];
        goto LABEL_74;
      }
      buf.mSampleRate = 0.0;
      LODWORD(v137.mSampleRate) = 0;
      v83 = PropertyMarshaller::Deserialize();
      if (!v83)
      {
        v89 = *(_QWORD *)&__n[1];
        if (*(_QWORD *)&inDesc[2].componentType)
          v108 = *(const void **)(*(_QWORD *)&inDesc[2].componentType + 40);
        else
          v108 = 0;
        memcpy(*(void **)&__n[1], v108, __n[0]);
LABEL_74:
        v111 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8);
        v133 = v75;
        v131 = v89;
        v132 = __n;
        *(_QWORD *)&v137.mSampleRate = &v133;
        *(_QWORD *)&v137.mFormatID = &v132;
        *(_QWORD *)&v137.mBytesPerPacket = &v131;
        *(_QWORD *)&buf.mSampleRate = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
        *(_QWORD *)&buf.mFormatID = &v137;
        v112 = with_resolved(v111, (uint64_t (**)(uint64_t, uint64_t))&buf);
        if (v112)
        {
LABEL_86:
          if (v80 == 0.0)
          {
            v117 = COERCE_DOUBLE(xpc_null_create());
          }
          else
          {
            xpc_retain(*(xpc_object_t *)&v80);
            v117 = v80;
          }
          LODWORD(v82) = __n[0];
          if (v112)
          {
            v109 = 0;
            v110 = v112;
          }
          else
          {
            v118 = xpc_null_create();
            v119 = xpc_null_create();
            xpc_release(v119);
            v109 = 1;
            v110 = *(_QWORD *)&v117;
            v117 = *(double *)&v118;
          }
          xpc_release(*(xpc_object_t *)&v117);
          goto LABEL_93;
        }
        PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)&buf, 0);
        *(_QWORD *)&buf.mSampleRate = &off_1E2909960;
        v112 = PropertyMarshaller::Serialize();
        if (v112)
        {
          AudioConverterLog();
          v113 = AudioConverterLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v137.mSampleRate) = 136315906;
            *(_QWORD *)((char *)&v137.mSampleRate + 4) = "RemoteAudioConverter.cpp";
            LOWORD(v137.mFormatFlags) = 1024;
            *(AudioFormatFlags *)((char *)&v137.mFormatFlags + 2) = 222;
            HIWORD(v137.mBytesPerPacket) = 1024;
            v137.mFramesPerPacket = v75;
            LOWORD(v137.mBytesPerFrame) = 1024;
            *(UInt32 *)((char *)&v137.mBytesPerFrame + 2) = v112;
            _os_log_impl(&dword_18EE07000, v113, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterService: PropertyID %u triggers error %d in AudioConverterPropertyMarshaller", (uint8_t *)&v137, 0x1Eu);
          }
        }
        if (*(_QWORD *)&buf.mBytesPerFrame && **(_QWORD **)&buf.mBytesPerFrame)
        {
          BytePtr = CFDataGetBytePtr(**(CFDataRef **)&buf.mBytesPerFrame);
          if (*(_QWORD *)&buf.mBytesPerFrame && **(_QWORD **)&buf.mBytesPerFrame)
          {
            Length = CFDataGetLength(**(CFDataRef **)&buf.mBytesPerFrame);
LABEL_85:
            swix::data::data((swix::data *)&v137, BytePtr, Length);
            mSampleRate = v137.mSampleRate;
            *(_QWORD *)&v137.mSampleRate = xpc_null_create();
            xpc_release(*(xpc_object_t *)&v80);
            xpc_release(*(xpc_object_t *)&v137.mSampleRate);
            PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)&buf);
            v80 = mSampleRate;
            goto LABEL_86;
          }
        }
        else
        {
          BytePtr = 0;
        }
        Length = 0;
        goto LABEL_85;
      }
      AudioConverterLog();
      v84 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.mSampleRate) = 136315906;
        *(_QWORD *)((char *)&buf.mSampleRate + 4) = "RemoteAudioConverter.cpp";
        LOWORD(buf.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 209;
        HIWORD(buf.mBytesPerPacket) = 1024;
        buf.mFramesPerPacket = v75;
        LOWORD(buf.mBytesPerFrame) = 1024;
        *(UInt32 *)((char *)&buf.mBytesPerFrame + 2) = v83;
        _os_log_impl(&dword_18EE07000, v84, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterService: PropertyID %u triggers error %d in AudioConverterPropertyMarshaller", (uint8_t *)&buf, 0x1Eu);
      }
      if (v80 == 0.0)
      {
        v85 = COERCE_DOUBLE(xpc_null_create());
      }
      else
      {
        xpc_retain(*(xpc_object_t *)&v80);
        v85 = v80;
      }
      xpc_release(*(xpc_object_t *)&v85);
      v109 = 0;
      v110 = v83;
LABEL_93:
      PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)inDesc);
      xpc_release(*(xpc_object_t *)&v80);
      if (*(_QWORD *)&__n[1])
        operator delete(*(void **)&__n[1]);
      MEMORY[0x193FFDB9C](inDesc, a2);
      v120 = *(_QWORD *)&inDesc[0].componentManufacturer;
      *(_QWORD *)a3 = *(_QWORD *)&inDesc[0].componentType;
      *(_QWORD *)&inDesc[0].componentManufacturer = xpc_null_create();
      v121 = *(void **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v120;
      xpc_release(v121);
      v122 = *(void **)&inDesc[0].componentManufacturer;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&inDesc[0].componentFlagsMask;
      xpc_release(v122);
      if (v109)
        v123 = 0;
      else
        v123 = v110;
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", v123);
      if (!v123)
      {
        xpc_dictionary_set_value(*(xpc_object_t *)(a3 + 8), "outData", (xpc_object_t)v110);
        xpc_dictionary_set_uint64(*(xpc_object_t *)(a3 + 8), "dataSize", v82);
      }
      if (v109)
        xpc_release((xpc_object_t)v110);
      xpc_release(v76);
      return;
    case 0x47504EC:
      v10 = xpc_null_create();
      v11 = swix::coder<unsigned int>::decode(*(void **)(a2 + 8), "propertyID");
      swix::xpcobj_coder<swix::data>::decode((xpc_object_t *)inDesc, *(xpc_object_t *)(a2 + 8), "inData");
      v12 = *(void **)&inDesc[0].componentType;
      v13 = xpc_null_create();
      *(_QWORD *)&inDesc[0].componentType = v13;
      xpc_release(v10);
      xpc_release(v13);
      v14 = swix::coder<unsigned int>::decode(*(void **)(a2 + 8), "dataSize");
      v15 = xpc_data_get_bytes_ptr(v12);
      xpc_data_get_length(v12);
      PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)inDesc, v15);
      *(_QWORD *)&inDesc[0].componentType = &off_1E2909960;
      buf.mSampleRate = 0.0;
      LODWORD(v137.mSampleRate) = 0;
      v16 = PropertyMarshaller::Deserialize();
      if (v16)
      {
        AudioConverterLog();
        v17 = AudioConverterLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.mSampleRate) = 136315906;
          *(_QWORD *)((char *)&buf.mSampleRate + 4) = "RemoteAudioConverter.cpp";
          LOWORD(buf.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 245;
          HIWORD(buf.mBytesPerPacket) = 1024;
          buf.mFramesPerPacket = v11;
          LOWORD(buf.mBytesPerFrame) = 1024;
          *(UInt32 *)((char *)&buf.mBytesPerFrame + 2) = v16;
          _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterService: PropertyID %u triggering error %d in AudioConverterPropertyMarshaller", (uint8_t *)&buf, 0x1Eu);
        }
        v18 = v16;
      }
      else
      {
        v90 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8);
        v91 = *(_QWORD *)&inDesc[2].componentType;
        if (*(_QWORD *)&inDesc[2].componentType)
          v91 = *(_QWORD *)(*(_QWORD *)&inDesc[2].componentType + 40);
        LODWORD(v132) = v11;
        LODWORD(v131) = v14;
        *(_QWORD *)&__n[1] = v91;
        *(_QWORD *)&v137.mSampleRate = &v132;
        *(_QWORD *)&v137.mFormatID = &v131;
        *(_QWORD *)&v137.mBytesPerPacket = &__n[1];
        *(_QWORD *)&buf.mSampleRate = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
        *(_QWORD *)&buf.mFormatID = &v137;
        v92 = with_resolved(v90, (uint64_t (**)(uint64_t, uint64_t))&buf);
        v18 = v92 | ((unint64_t)(v92 == 0) << 32);
      }
      PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)inDesc);
      MEMORY[0x193FFDB9C](inDesc, a2);
      v93 = *(_QWORD *)&inDesc[0].componentManufacturer;
      *(_QWORD *)a3 = *(_QWORD *)&inDesc[0].componentType;
      *(_QWORD *)&inDesc[0].componentManufacturer = xpc_null_create();
      v94 = *(void **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v93;
      xpc_release(v94);
      v95 = *(void **)&inDesc[0].componentManufacturer;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&inDesc[0].componentFlagsMask;
      xpc_release(v95);
      if (HIDWORD(v18))
        v96 = 0;
      else
        v96 = (int)v18;
      xpc_dictionary_set_int64(*(xpc_object_t *)(a3 + 8), ".error", v96);
      xpc_release(v12);
      return;
    default:
      return;
  }
}

void sub_18F0EF89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint8_t buf,int a32,int a33,__int16 a34,__int16 a35,__int16 a36,__int16 a37)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

__n128 swix::coder<AudioStreamBasicDescription>::decode(uint64_t a1, xpc_object_t xdict, char *key)
{
  _OWORD *data;
  __n128 result;
  __int128 v7;
  size_t length;

  length = 0;
  data = xpc_dictionary_get_data(xdict, key, &length);
  if (length != 40 || data == 0)
  {
    *(_QWORD *)(a1 + 32) = 0;
    result.n128_u64[0] = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    result = *(__n128 *)data;
    v7 = data[1];
    *(_OWORD *)a1 = *data;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)data + 4);
  }
  return result;
}

const void *swix::coder<std::span<AudioClassDescription const,18446744073709551615ul>>::decode(void *a1)
{
  const void *result;
  BOOL v2;
  unint64_t v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  size_t length;

  length = 0;
  result = xpc_dictionary_get_data(a1, "classDescriptions", &length);
  if (result)
    v2 = length == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  v3 = 12 * (length / 0xC);
  if (v3 != length)
  {
    std::to_string(&v13, v3);
    v4 = std::string::insert(&v13, 0, "invalid array size (", 0x14uLL);
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v14, "/", 1uLL);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v12, length);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v12;
    else
      v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    else
      size = v12.__r_.__value_.__l.__size_;
    v10 = std::string::append(&v15, (const std::string::value_type *)v8, size);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    swix::decode_message::throw_error(&v16);
  }
  return result;
}

void sub_18F0EFDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

xpc_object_t swix::xpcobj_coder<applesauce::xpc::object>::decode(_QWORD *a1, xpc_object_t xdict, char *key)
{
  xpc_object_t value;
  xpc_object_t result;

  value = xpc_dictionary_get_value(xdict, key);
  *a1 = value;
  if (value)
    return xpc_retain(value);
  result = xpc_null_create();
  *a1 = result;
  return result;
}

uint64_t swix::coder<unsigned int>::decode(void *a1, const char *a2)
{
  uint64_t result;
  _QWORD *exception;

  result = xpc_dictionary_get_uint64(a1, a2);
  if (HIDWORD(result))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_1E290A260;
  }
  return result;
}

void swix::xpcobj_coder<swix::data>::decode(xpc_object_t *a1, xpc_object_t xdict, char *key)
{
  xpc_object_t value;
  xpc_object_t v5;

  value = xpc_dictionary_get_value(xdict, key);
  if (value)
  {
    v5 = value;
    xpc_retain(value);
    *a1 = v5;
  }
  else
  {
    v5 = xpc_null_create();
    *a1 = v5;
    if (!v5)
      goto LABEL_5;
  }
  if (object_getClass(v5) == (Class)MEMORY[0x1E0C812E8])
  {
    xpc_retain(v5);
    goto LABEL_7;
  }
LABEL_5:
  *a1 = xpc_null_create();
LABEL_7:
  xpc_release(v5);
}

void swix::encode_message::~encode_message(xpc_object_t *this)
{
  xpc_release(this[1]);
  this[1] = 0;
}

void swix::decode_message::throw_error(const std::string *a1)
{
  const std::string *v2;
  std::runtime_error *exception;
  int v4;
  const std::string *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v2 = a1;
    else
      v2 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    v4 = 136315138;
    v5 = v2;
    _os_log_error_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "throwing swix::exception: %s", (uint8_t *)&v4, 0xCu);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
  swix::exception::exception(exception, a1);
}

void sub_18F0F0058(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

std::runtime_error *swix::exception::exception(std::runtime_error *a1, const std::string *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_1E290B340;
  LODWORD(result[1].__vftable) = -307;
  return result;
}

void swix::exception::~exception(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x193FFE460);
}

uint64_t std::construct_at[abi:ne180100]<swix::connection_config,swix::connection_config,swix::connection_config*>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  xpc_object_t v6;
  uint64_t v7;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v5 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v5;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  v6 = xpc_null_create();
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 6) = v6;
  *((_QWORD *)a2 + 7) = 0;
  v7 = *((_QWORD *)a2 + 8);
  *(_WORD *)(a1 + 72) = *((_WORD *)a2 + 36);
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*((_BYTE *)a2 + 120))
  {
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 88, (uint64_t)a2 + 88);
    *(_BYTE *)(a1 + 120) = 1;
  }
  return a1;
}

int64_t swix::coder<int>::decode(void *a1, const char *a2)
{
  int64_t result;
  _QWORD *exception;

  result = xpc_dictionary_get_int64(a1, a2);
  if (result != (int)result)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_1E290A260;
  }
  return result;
}

uint64_t IAAFillCodecInfoFromInternalData(uint64_t result)
{
  __int128 v1;
  __int128 v2;

  switch(*(_QWORD *)result)
  {
    case 0xC00CLL:
      *(_QWORD *)(result + 40) = 16;
      *(_OWORD *)(result + 8) = xmmword_18F117590;
      v1 = xmmword_18F1175A0;
      goto LABEL_9;
    case 0xC00DLL:
      *(_QWORD *)(result + 40) = 16;
      *(_OWORD *)(result + 8) = xmmword_18F117570;
      v1 = xmmword_18F117580;
      goto LABEL_9;
    case 0xC00ELL:
    case 0xC00FLL:
    case 0xC011:
    case 0xC012:
      goto LABEL_5;
    case 0xC010:
      *(_QWORD *)(result + 40) = 16;
      *(_OWORD *)(result + 8) = xmmword_18F1175B0;
      v1 = xmmword_18F1175C0;
      goto LABEL_9;
    case 0xC013:
      *(_QWORD *)(result + 40) = 16;
      *(_OWORD *)(result + 8) = xmmword_18F117550;
      v1 = xmmword_18F117560;
LABEL_9:
      *(_OWORD *)(result + 24) = v1;
      break;
    default:
      if (*(_QWORD *)result == 1)
      {
        *(_QWORD *)(result + 8) = 0;
        *(_OWORD *)(result + 16) = xmmword_18F1175E0;
        *(_OWORD *)(result + 32) = xmmword_18F1175D0;
      }
      else
      {
LABEL_5:
        *(_QWORD *)(result + 8) = 0;
        *(_QWORD *)&v2 = -1;
        *((_QWORD *)&v2 + 1) = -1;
        *(_OWORD *)(result + 16) = v2;
        *(_OWORD *)(result + 32) = v2;
      }
      break;
  }
  return result;
}

char *IAAMalloc(size_t a1)
{
  char *v2;
  char *v3;
  unint64_t v4;

  v2 = (char *)malloc_type_malloc(a1, 0xE8CA8AC7uLL);
  v3 = v2;
  if (v2 && &v2[a1 - 1] >= v2)
  {
    v4 = (unint64_t)&v2[a1 - 2];
    if (v4 >= (unint64_t)(v2 - 1))
      v4 = (unint64_t)(v2 - 1);
    bzero((void *)(v4 + 1), (size_t)&v2[a1 + ~v4]);
  }
  return v3;
}

uint64_t AAReadEncodedAudio(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;
  _BYTE *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  _BYTE *v36;
  char v37;
  unint64_t v38;
  _BYTE *v39;
  char *v40;
  char v41;
  _BYTE *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  unint64_t v80;
  char *v81;
  char v82;
  unint64_t v83;
  char *v84;
  _BYTE *v85;
  char v86;
  int v87;
  unint64_t v88;
  uint64_t *v89;
  _BYTE *v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _BYTE *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  _BYTE *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unsigned int v109;
  unsigned int v110[2];
  uint64_t v111;

  v3 = a3;
  v5 = a1;
  v111 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = *(_QWORD *)(a1 + 600);
  if (v7 != -1)
  {
    AASetAudioBytePos(a1, ((v7 / 0x3E8 * *(unsigned __int16 *)(a1 + 684)) >> 3) + v7 % 0x3E8 * *(unsigned __int16 *)(a1 + 684) / 0x1F40);
    *(_QWORD *)(v5 + 600) = -1;
  }
  v8 = *(_QWORD *)(v5 + 624);
  v9 = *(_QWORD *)(v5 + 616);
  if (v8 != v9 - 1 || *(_QWORD *)(v5 + 632) != *(_QWORD *)(*(_QWORD *)(v5 + 608) + 16 * v8 + 8))
  {
    v10 = 0;
    if (v6)
      v12 = v8 >= v9;
    else
      v12 = 1;
    if (v12)
    {
LABEL_11:
      result = 0;
      *(_QWORD *)(v5 + 672) += v10;
      goto LABEL_127;
    }
    v102 = (uint64_t *)(v5 + 568);
    v13 = (_BYTE *)(v5 + 688);
    v104 = (_BYTE *)(v5 + 688);
    v97 = v3;
    v99 = v5;
    while (1)
    {
      v14 = *(unsigned __int16 *)(v5 + 544);
      switch(v14)
      {
        case 49168:
          v15 = 1045;
          break;
        case 49165:
          v15 = 3982;
          break;
        case 49164:
          v15 = 2000;
          break;
        default:
          result = 4294967285;
          goto LABEL_127;
      }
      v16 = *(_QWORD *)(v5 + 632);
      v17 = v16 / v15;
      v18 = *(_QWORD *)(*(_QWORD *)(v5 + 608) + 16 * v8 + 8);
      v19 = (v18 - 1) / v15;
      if (v16 / v15 <= v19)
        break;
      v20 = 0;
LABEL_113:
      v88 = v9 - 1;
      if (v16 == v18 && v8 < v88)
      {
        *(_QWORD *)(v5 + 624) = ++v8;
        *(_QWORD *)(v5 + 632) = 0;
        v89 = *(uint64_t **)(v5 + 640);
        if (v89)
        {
          v90 = v13;
          v91 = v20;
          v92 = a2;
          v94 = *v89;
          v93 = v89[1];
          v110[0] = 0;
          if (!(*(unsigned int (**)(uint64_t, unsigned int *))(*(_QWORD *)v93 + 16))(v93, v110)
            && v110[0] > (int)v94 + 8)
          {
            *v89 = v94 + 8;
          }
          v8 = *(_QWORD *)(v5 + 624);
          v9 = *(_QWORD *)(v5 + 616);
          a2 = v92;
          v20 = v91;
          v13 = v90;
        }
        v88 = v9 - 1;
      }
      v10 += v20;
      if ((v8 != v88 || *(_QWORD *)(v5 + 632) != *(_QWORD *)(*(_QWORD *)(v5 + 608) + 16 * v88 + 8)) && v8 < v9)
      {
        a2 += v20;
        v6 -= v20;
        if (v6)
          continue;
      }
      goto LABEL_11;
    }
    v98 = v10;
    v20 = 0;
    v95 = v6;
    v96 = a2;
    v21 = a2;
    v22 = v15;
    v108 = (v18 - 1) / v15;
    while (1)
    {
      if (v17 == v19)
      {
        if (*(_QWORD *)(*(_QWORD *)(v5 + 608) + 16 * *(_QWORD *)(v5 + 624) + 8) % v15)
          v22 = *(_QWORD *)(*(_QWORD *)(v5 + 608) + 16 * *(_QWORD *)(v5 + 624) + 8) % v15;
        else
          v22 = v15;
      }
      v23 = v16 % v15;
      if (v22 - v16 % v15 >= v6)
        v24 = v6;
      else
        v24 = v22 - v16 % v15;
      v25 = *(_QWORD *)(v5 + 696);
      v26 = *(_QWORD *)(v5 + 704);
      v27 = v25 - v26;
      if (v25 - v26 >= v24)
        v28 = v24;
      else
        v28 = v25 - v26;
      if (v28)
      {
        if ((int)(v26 >> 3) >= 1)
        {
          v29 = v26 & 0x7FFFFFFF8;
          v26 &= 0xFFFFFFF800000007;
          *(_QWORD *)(v5 + 704) = v26;
          v30 = v25 - v29;
          *(_QWORD *)(v5 + 696) = v30;
          v27 = v30 - v26;
        }
        if (v27 >= (int)v28)
          v28 = (int)v28;
        else
          v28 = v27;
        v31 = v26 & 7;
        v32 = 8 - v31;
        if (v28 >= v32)
          v33 = 8 - v31;
        else
          v33 = v28;
        if (v33)
        {
          v34 = &v13[v31];
          v35 = v33;
          v36 = v21;
          do
          {
            v37 = *v34++;
            *v36++ = v37;
            --v35;
          }
          while (v35);
        }
        if (v28 > v32)
        {
          v38 = v28 - v33;
          if ((uint64_t)(v28 - v33) >= 1)
          {
            v39 = &v21[v33];
            v40 = v13;
            do
            {
              v41 = *v40++;
              *v39++ = v41;
              --v38;
            }
            while (v38);
          }
        }
        *(_QWORD *)(v5 + 704) += v28;
        v42 = &v21[v28];
        v23 += v28;
        v43 = v24 - v28;
        if (v24 == v28)
          goto LABEL_65;
      }
      else
      {
        v42 = v21;
        v43 = v24;
        if (!v24)
          goto LABEL_65;
      }
      v44 = v22 & 7;
      v45 = v22 - v23;
      if (v22 - v23 <= v44)
      {
        v50 = (uint64_t)v42;
        v51 = v20;
        v52 = v22;
        v53 = OAAFileRead(*(_QWORD *)(v5 + 640), v50, v43, 0);
        v22 = v52;
        v19 = v108;
        v20 = v51;
        v54 = v53 == 0;
      }
      else
      {
        v106 = v20;
        v107 = v22;
        v105 = v22 & 7;
        if ((v23 & 7) == 0)
          goto LABEL_81;
        v46 = *(uint64_t **)(v5 + 640);
        if (!v46
          || ((v47 = v46[1],
               v101 = *v46,
               v103 = v23 & 7,
               v48 = v101 - v103,
               v110[0] = 0,
               !(*(unsigned int (**)(uint64_t, unsigned int *))(*(_QWORD *)v47 + 16))(v47, v110))
            ? (v49 = v110[0] > v48)
            : (v49 = 0),
              !v49 || (*v46 = v48, OAAFileRead(*(_QWORD *)(v5 + 640), (uint64_t)v110, 8, 0))))
        {
LABEL_126:
          result = 4294967293;
          v3 = v97;
          v10 = v98;
          goto LABEL_127;
        }
        IAADecrypt64Bits(v102, v110, v110);
        v56 = v103;
        v13 = v104;
        v57 = 8 - v103;
        if (v43 < 8 - v103)
          v57 = v43;
        v58 = v103;
        v59 = v57;
        v60 = v42;
        do
        {
          *v60++ = *((_BYTE *)v110 + v58++);
          --v59;
        }
        while (v59);
        v43 -= v57;
        v22 = v107;
        if (v43 || v57 + v56 > 7)
        {
          v23 += v57;
          v42 += v57;
          v45 = v107 - v23;
          v44 = v105;
LABEL_81:
          if (v43 < v45)
            v45 = v43;
          v65 = v45 & 0xFFFFFFF8;
          if ((v45 & 0xFFFFFFF8) != 0)
          {
            LODWORD(v103) = v45 & 0xFFFFFFF8;
            v66 = v45 & 0xFFFFFFF8;
            v67 = v45;
            if (OAAFileRead(*(_QWORD *)(v5 + 640), (uint64_t)v42, v66, 0))
              goto LABEL_126;
            v100 = v66;
            v101 = v67;
            v68 = v102;
            if (v67 >= 8uLL)
            {
              v69 = (unint64_t)v67 >> 3;
              v70 = (unsigned int *)v42;
              do
              {
                IAADecrypt64Bits(v68, v70, v70);
                v70 += 2;
                --v69;
              }
              while (v69);
            }
            v5 = v99;
            v42 += v100;
            v43 -= v100;
            v23 += v100;
            v13 = v104;
            v44 = v105;
            v22 = v107;
            LODWORD(v45) = v101;
            v65 = v103;
          }
          v20 = v106;
          v19 = v108;
          if (v65 < v45)
          {
            v71 = v106;
            if (v22 - v23 <= v44)
            {
              v87 = OAAFileRead(*(_QWORD *)(v5 + 640), (uint64_t)v42, v43, 0);
              v20 = v71;
              v13 = v104;
              v22 = v107;
              v19 = v108;
              if (v87)
                goto LABEL_126;
            }
            else
            {
              if (OAAFileRead(*(_QWORD *)(v5 + 640), (uint64_t)v110, 8, 0))
                goto LABEL_126;
              IAADecrypt64Bits(v102, v110, v110);
              if (v43 >= 1)
              {
                v72 = v110;
                v73 = v43;
                do
                {
                  v74 = *(_BYTE *)v72;
                  v72 = (unsigned int *)((char *)v72 + 1);
                  *v42++ = v74;
                  --v73;
                }
                while (v73);
              }
              v75 = 8 - v43;
              v76 = *(_QWORD *)(v5 + 696);
              if (*(_QWORD *)(v5 + 704) - v76 + 8 < (unint64_t)(8 - v43))
                v75 = *(_QWORD *)(v5 + 704) - v76 + 8;
              v77 = *(_QWORD *)(v5 + 696) & 7;
              v78 = 8 - v77;
              if (v75 < 8 - v77)
                v78 = v75;
              v20 = v71;
              v13 = v104;
              v22 = v107;
              v19 = v108;
              if (v78)
              {
                v79 = &v104[v77];
                v80 = v78;
                v81 = (char *)v110 + v43;
                do
                {
                  v82 = *v81++;
                  *v79++ = v82;
                  --v80;
                }
                while (v80);
              }
              v83 = v75 - v78;
              if ((uint64_t)(v75 - v78) >= 1)
              {
                v84 = (char *)v110 + v43 + v78;
                v85 = v13;
                do
                {
                  v86 = *v84++;
                  *v85++ = v86;
                  --v83;
                }
                while (v83);
              }
              *(_QWORD *)(v5 + 696) += v75;
            }
          }
          goto LABEL_65;
        }
        v61 = *(_QWORD *)(v5 + 640);
        if (v61)
        {
          v62 = v101 + v57;
          v109 = 0;
          if ((*(unsigned int (**)(_QWORD, unsigned int *))(**(_QWORD **)(v61 + 8) + 16))(*(_QWORD *)(v61 + 8), &v109))
          {
            v63 = 0;
          }
          else
          {
            v63 = v109 > v62;
          }
          if (v63)
          {
            v64 = 0;
            *(_QWORD *)v61 = v62;
          }
          else
          {
            v64 = -5;
          }
          v20 = v106;
          v22 = v107;
        }
        else
        {
          v64 = -5;
          v20 = v106;
        }
        v19 = v108;
        v54 = v64 == 0;
      }
      if (!v54)
        goto LABEL_126;
LABEL_65:
      v16 = *(_QWORD *)(v5 + 632) + v24;
      *(_QWORD *)(v5 + 632) = v16;
      v20 += v24;
      if (v17 < v19)
      {
        v21 += v24;
        ++v17;
        v15 = v22;
        v6 -= v24;
        if (v6)
          continue;
      }
      v8 = *(_QWORD *)(v5 + 624);
      v9 = *(_QWORD *)(v5 + 616);
      v18 = *(_QWORD *)(*(_QWORD *)(v5 + 608) + 16 * v8 + 8);
      v3 = v97;
      v10 = v98;
      v6 = v95;
      a2 = v96;
      goto LABEL_113;
    }
  }
  v10 = 0;
  *(_WORD *)(v5 + 664) = 1;
  result = 4294967272;
LABEL_127:
  *v3 = v10;
  return result;
}

uint64_t IAAFindSection(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  uint64_t v12;

  if (a1)
  {
    LODWORD(v12) = 0;
    if (!(*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v12)
      && v12 >= 9)
    {
      *(_QWORD *)a1 = 8;
    }
  }
  v12 = 0;
  IAAReadULong(a1, &v12);
  v7 = v12;
  IAAReadULong(a1, &v12);
  if (v7 < 1)
    return 4294967272;
  while (1)
  {
    v12 = 0;
    IAAReadULong(a1, &v12);
    v8 = v12;
    v12 = 0;
    IAAReadULong(a1, &v12);
    v9 = v12;
    IAAReadULong(a1, a3);
    if (v8 == a2)
      break;
    if (!--v7)
      return 4294967272;
  }
  if (a1)
  {
    LODWORD(v12) = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v12))
      v11 = 0;
    else
      v11 = v12 > v9;
    if (v11)
      *(_QWORD *)a1 = v9;
  }
  return 0;
}

uint64_t IAAReadULong(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;

  if (OAAFileRead(a1, (uint64_t)&v4, 4, 0))
    return 0;
  *a2 = bswap32(v4);
  return 1;
}

uint64_t IAAReadUShort(uint64_t a1, _WORD *a2)
{
  uint64_t result;
  unsigned __int16 v4;

  result = OAAFileRead(a1, (uint64_t)&v4, 2, 0);
  if (!(_DWORD)result)
    *a2 = bswap32(v4) >> 16;
  return result;
}

uint64_t OAAFileRead(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;

  result = 4294967293;
  if (a1 && a2)
  {
    v10 = 0;
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, unsigned int *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), 0, *(_QWORD *)a1, a3, a2, &v10);
    v8 = v10;
    *(_QWORD *)a1 += v10;
    if (a4)
      *a4 = v8;
    if ((_DWORD)v8)
      v9 = 1;
    else
      v9 = a3 == 0;
    if (v9)
      return 0;
    else
      return 4294967293;
  }
  return result;
}

uint64_t AAValidateFile(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;

  v2 = -5;
  if (a1)
  {
    LODWORD(v6) = 0;
    if (!(*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v6))
      v2 = v6;
  }
  v6 = 0;
  IAAReadULong(a1, &v6);
  v3 = v6;
  v6 = 0;
  IAAReadULong(a1, &v6);
  if (v6 == 1469084982)
    v4 = 0;
  else
    v4 = -6;
  if (v2 == v3)
    return v4;
  else
    return 4294967287;
}

uint64_t AAGetMetaCodec(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned __int16 v5;
  int v6;
  uint64_t v8;
  unsigned __int16 v9;

  v4 = IAAFindSection(a1, 6, &v8);
  if (v4)
  {
    v5 = v4;
  }
  else
  {
    IAAReadULong(a1, &v8);
    IAAReadULong(a1, &v8);
    IAAReadULong(a1, &v8);
    IAAReadULong(a1, &v8);
    IAAReadULong(a1, &v8);
    IAAReadULong(a1, &v8);
    v6 = OAAFileRead(a1, (uint64_t)&v9, 2, 0);
    v5 = __rev16(v9);
    if (v6)
      v5 = 0;
  }
  *a2 = v5;
  return IAAFillCodecInfoFromInternalData((uint64_t)a2);
}

unint64_t IAADecrypt64Bits(uint64_t *a1, unsigned int *a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t result;

  v3 = bswap32(*a2);
  v4 = bswap32(a2[1]);
  v5 = a1[2];
  v6 = a1[3];
  v7 = *a1;
  v8 = a1[1];
  v9 = 10;
  v10 = 4055616968;
  do
  {
    v11 = v4 - ((v5 + 16 * v3) ^ (v3 + v10) ^ (v6 + (v3 >> 5)));
    v4 = v4
       - (((_DWORD)v5 + 16 * (_DWORD)v3) ^ ((_DWORD)v3 + (_DWORD)v10) ^ ((_DWORD)v6 + (v3 >> 5)));
    v12 = v8 + (v4 >> 5);
    result = v3 - ((v7 + 16 * v11) ^ (v11 + v10) ^ v12);
    v3 = v3 - (((_DWORD)v7 + 16 * (_DWORD)v11) ^ ((_DWORD)v11 + (_DWORD)v10) ^ v12);
    v10 = (v10 + 1640531527);
    --v9;
  }
  while (v9 > 2);
  *a3 = BYTE3(result);
  a3[1] = BYTE2(result);
  a3[2] = BYTE1(result);
  a3[3] = result;
  a3[4] = BYTE3(v11);
  a3[5] = BYTE2(v11);
  a3[6] = BYTE1(v11);
  a3[7] = v11;
  return result;
}

uint64_t AASetAudioBytePos(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;

  v2 = *(_QWORD *)(a1 + 616);
  if (!v2)
    return 4294967276;
  v4 = *(_QWORD *)(a1 + 608);
  if (!v4)
    return 4294967276;
  v6 = 0;
  v7 = v2 - 1;
  v8 = 1;
  v9 = a2;
  while (1)
  {
    v10 = *(_QWORD *)(v4 + 16 * v6 + 8);
    if (v7 == v6 || v9 < v10)
      break;
    v6 = v8;
    v17 = v2 > v8++;
    v9 -= v10;
    if (!v17)
      return 4294967275;
  }
  if (v7 == v6)
    v12 = *(_QWORD *)(v4 + 16 * v6 + 8);
  else
    v12 = v9;
  if (v9 < v10)
    v12 = v9;
  *(_QWORD *)(a1 + 632) = v12;
  if (*(_QWORD *)(a1 + 648))
  {
    v13 = *(unsigned __int16 *)(a1 + 682);
    v14 = v12 % v13;
    v12 -= v12 % v13;
    *(_QWORD *)(a1 + 632) = v12;
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)(a1 + 624) = v6;
  v15 = *(_QWORD *)(a1 + 640);
  if (v15)
  {
    v16 = v12 + *(_QWORD *)(v4 + 16 * v6);
    v18 = 0;
    if ((*(unsigned int (**)(_QWORD, unsigned int *))(**(_QWORD **)(v15 + 8) + 16))(*(_QWORD *)(v15 + 8), &v18))
    {
      v17 = 0;
    }
    else
    {
      v17 = v18 > v16;
    }
    if (v17)
      *(_QWORD *)v15 = v16;
  }
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  result = 0;
  if (*(_QWORD *)(a1 + 600) != -1)
    *(_QWORD *)(a1 + 600) = 1000 * (8 * (a2 - v14) % *(unsigned __int16 *)(a1 + 684)) / *(unsigned __int16 *)(a1 + 684)
                          + 1000 * (8 * (a2 - v14) / *(unsigned __int16 *)(a1 + 684));
  return result;
}

void __cxx_global_array_dtor()
{
  uint64_t i;

  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(_ZGRZ38__AUAudioUnit_XPC__doOpen_completion__E23crashHandlerDisableList_[i + 5]) < 0)
      operator delete((void *)_ZGRZ38__AUAudioUnit_XPC__doOpen_completion__E23crashHandlerDisableList_[i + 3]);
  }
}

uint64_t CAVectorUnit_Examine()
{
  return MEMORY[0x1E0DDE8C8]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97D00](theArray, range.location, range.length, applier, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D78](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFArrayRef CFBundleCopyExecutableArchitectures(CFBundleRef bundle)
{
  return (CFArrayRef)MEMORY[0x1E0C98010](bundle);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1E0C98050](bundle, key, value, tableName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1E0C980D0](allocator, bundleURL);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1E0C980E8](bundleID);
}

void *__cdecl CFBundleGetFunctionPointerForName(CFBundleRef bundle, CFStringRef functionName)
{
  return (void *)MEMORY[0x1E0C98108](bundle, functionName);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1E0C98120](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1E0C98150]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1E0C98180](bundle, key);
}

Boolean CFBundleLoadExecutableAndReturnError(CFBundleRef bundle, CFErrorRef *error)
{
  return MEMORY[0x1E0C981A8](bundle, error);
}

Boolean CFCalendarComposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...)
{
  return MEMORY[0x1E0C98228](calendar, at, componentDesc);
}

CFCalendarRef CFCalendarCopyCurrent(void)
{
  return (CFCalendarRef)MEMORY[0x1E0C98230]();
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982E8](alloc, theString);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x1E0C98390](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1E0C983B0](allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1E0C98448](allocator, at);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1E0C98630](err);
}

CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98648](err);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1E0C98660](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFLocaleRef CFLocaleGetSystem(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C987F0]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x1E0C98908]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x1E0C98938](allocator, locale, style);
}

CFStringRef CFNumberFormatterCreateStringWithNumber(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberRef number)
{
  return (CFStringRef)MEMORY[0x1E0C98948](allocator, formatter, number);
}

CFStringRef CFNumberFormatterCreateStringWithValue(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberType numberType, const void *valuePtr)
{
  return (CFStringRef)MEMORY[0x1E0C98950](allocator, formatter, numberType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1E0C989A8](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1E0C98A50](applicationID, userName, hostName);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0C98AA0](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateFromXMLData(CFAllocatorRef allocator, CFDataRef xmlData, CFOptionFlags mutabilityOption, CFStringRef *errorString)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AC8](allocator, xmlData, mutabilityOption, errorString);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD0](allocator, data, options, format, error);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AE0](allocator, stream, streamLength, options, format, error);
}

CFDataRef CFPropertyListCreateXMLData(CFAllocatorRef allocator, CFPropertyListRef propertyList)
{
  return (CFDataRef)MEMORY[0x1E0C98AE8](allocator, propertyList);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x1E0C98B10](stream);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1E0C98B48](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B80](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C40]();
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
  MEMORY[0x1E0C98C80](rl, mode, block);
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C90](rl, source, mode);
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1E0C98CB0](mode, returnAfterSourceHandled, seconds);
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C98CC8](allocator, order, context);
}

void CFRunLoopSourceSignal(CFRunLoopSourceRef source)
{
  MEMORY[0x1E0C98CF0](source);
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D68](rl);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98D78](theSet, applier, context);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1E0C98DA8](theSet);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x1E0C98EE0](theString, cStr, *(_QWORD *)&encoding);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F18](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1E0C98F58](alloc, theString, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98F88](alloc, data, *(_QWORD *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FC8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithPascalString(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C99028](alloc, pStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
  MEMORY[0x1E0C99038](theString, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99060](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

double CFStringGetDoubleValue(CFStringRef str)
{
  double result;

  MEMORY[0x1E0C990D0](str);
  return result;
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1E0C990F0](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

Boolean CFStringGetPascalString(CFStringRef theString, StringPtr buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99148](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1E0C99168]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr)
{
  MEMORY[0x1E0C991B8](str, idx, insertedStr);
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
  MEMORY[0x1E0C99258](theString);
}

void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C99260](theString, locale);
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1E0C992C8](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1E0C992D8](anURL, pathStyle);
}

CFStringRef CFURLCopyPathExtension(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1E0C99320](url);
}

CFStringRef CFURLCopyResourceSpecifier(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99340](anURL);
}

CFStringRef CFURLCopyScheme(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99348](anURL);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C993C8](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99418](allocator, URLBytes, length, *(_QWORD *)&encoding, baseURL);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99438](allocator, filePath, pathStyle, isDirectory, baseURL);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99448](allocator, URLString, baseURL);
}

CFURLRef CFURLGetBaseURL(CFURLRef anURL)
{
  return (CFURLRef)MEMORY[0x1E0C99478](anURL);
}

CFIndex CFURLGetBytes(CFURLRef url, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1E0C99488](url, buffer, bufferLength);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C99490](url, resolveAgainstBase, buffer, maxBufLen);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C994A0](anURL);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1E0C994B8]();
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFUUIDRef CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr)
{
  return (CFUUIDRef)MEMORY[0x1E0C99520](alloc, uuidStr);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1E0C99530](alloc, *(_QWORD *)&bytes.byte0, *(_QWORD *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99538](alloc, uuid);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1;
  uint64_t v2;
  CFUUIDBytes result;

  v1 = MEMORY[0x1E0C99568](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

uint64_t CrashIfClientProvidedBogusAudioBufferList()
{
  return MEMORY[0x1E0DDE8D0]();
}

FSEventStreamRef FSEventStreamCreate(CFAllocatorRef allocator, FSEventStreamCallback callback, FSEventStreamContext *context, CFArrayRef pathsToWatch, FSEventStreamEventId sinceWhen, CFTimeInterval latency, FSEventStreamCreateFlags flags)
{
  return (FSEventStreamRef)MEMORY[0x1E0CA5758](allocator, callback, context, pathsToWatch, sinceWhen, *(_QWORD *)&flags, latency);
}

void FSEventStreamInvalidate(FSEventStreamRef streamRef)
{
  MEMORY[0x1E0CA5768](streamRef);
}

void FSEventStreamSetDispatchQueue(FSEventStreamRef streamRef, dispatch_queue_t q)
{
  MEMORY[0x1E0CA5780](streamRef, q);
}

Boolean FSEventStreamStart(FSEventStreamRef streamRef)
{
  return MEMORY[0x1E0CA5790](streamRef);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBAF0](properties);
}

xpc_object_t IOSurfaceCreateXPCObject(IOSurfaceRef aSurface)
{
  return (xpc_object_t)MEMORY[0x1E0CBBB10](aSurface);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB38](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1E0CBBB40](buffer);
}

IOSurfaceRef IOSurfaceLookupFromXPCObject(xpc_object_t xobj)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBD48](xobj);
}

uint64_t IOSurfaceSetOwnershipIdentity()
{
  return MEMORY[0x1E0CBBE28]();
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
  MEMORY[0x1E0CBBE40](buffer, key, value);
}

MIDIEventPacket *__cdecl MIDIEventListAdd(MIDIEventList *evtlist, ByteCount listSize, MIDIEventPacket *curPacket, MIDITimeStamp time, ByteCount wordCount, const UInt32 *words)
{
  return (MIDIEventPacket *)MEMORY[0x1E0C9E578](evtlist, listSize, curPacket, time, wordCount, words);
}

MIDIEventPacket *__cdecl MIDIEventListInit(MIDIEventList *evtlist, MIDIProtocolID protocol)
{
  return (MIDIEventPacket *)MEMORY[0x1E0C9E580](evtlist, *(_QWORD *)&protocol);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

void *__cdecl OSAtomicDequeue(OSQueueHead *__list, size_t a2)
{
  return (void *)MEMORY[0x1E0C80658](__list, a2);
}

void OSAtomicEnqueue(OSQueueHead *__list, void *__new, size_t a3)
{
  MEMORY[0x1E0C80660](__list, __new, a3);
}

uint64_t SBApplicationStateBeginGeneratingChangeNotifications()
{
  return MEMORY[0x1E0DAB0C8]();
}

uint64_t SBSProcessAssertionCreateForPID()
{
  return MEMORY[0x1E0DAB8E8]();
}

uint64_t SBSProcessAssertionSetFlags()
{
  return MEMORY[0x1E0DAB900]();
}

uint64_t SBSProcessAssertionSetInvalidationCallBack()
{
  return MEMORY[0x1E0DAB908]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

uint64_t WriteStackshotReportWithPID()
{
  return MEMORY[0x1E0D1BD40]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t NextMIDIEvent(const unsigned __int8 *a1, const unsigned __int8 *a2)
{
  return MEMORY[0x1E0DDE8E8](a1, a2);
}

uint64_t MinimalSafetyCheck(const AudioStreamBasicDescription *a1)
{
  return MEMORY[0x1E0DDE8F8](a1);
}

uint64_t CACFPreferencesCopyAppValue(const __CFString *a1, const __CFString *a2)
{
  return MEMORY[0x1E0DDE908](a1, a2);
}

uint64_t CACFPreferencesGetAppFloatValue(const __CFString *a1, const __CFString *a2, BOOL *a3)
{
  return MEMORY[0x1E0DDE910](a1, a2, a3);
}

uint64_t CACFPreferencesGetAppBooleanValue(const __CFString *a1, const __CFString *a2, BOOL *a3)
{
  return MEMORY[0x1E0DDE918](a1, a2, a3);
}

uint64_t CACFPreferencesGetAppIntegerValue(const __CFString *a1, const __CFString *a2, BOOL *a3)
{
  return MEMORY[0x1E0DDE920](a1, a2, a3);
}

uint64_t Read(CADeserializer *a1, AudioChannelLayout **a2, unint64_t *a3)
{
  return MEMORY[0x1E0DDE928](a1, a2, a3);
}

uint64_t CACFString::GetCString(CACFString *this, const __CFString *a2, char *a3, unsigned int *a4)
{
  return MEMORY[0x1E0DDE930](this, a2, a3, a4);
}

uint64_t CACFString::GetStringByteLength(CACFString *this, const __CFString *a2)
{
  return MEMORY[0x1E0DDE938](this, a2);
}

uint64_t RamstadSRC::processMono(RamstadSRC *this, const float *a2, float *a3)
{
  return MEMORY[0x1E0DDE978](this, a2, a3);
}

uint64_t RamstadSRC::processMulti(RamstadSRC *this, const float *const *a2, float *const *a3)
{
  return MEMORY[0x1E0DDE980](this, a2, a3);
}

uint64_t RamstadSRC::processStereo(RamstadSRC *this, const float *a2, const float *a3, float *a4, float *a5, int a6, int a7, int a8, int a9)
{
  return MEMORY[0x1E0DDE988](this, a2, a3, a4, a5);
}

uint64_t RamstadSRC::reset(RamstadSRC *this)
{
  return MEMORY[0x1E0DDE990](this);
}

uint64_t RamstadSRC::setRate(RamstadSRC *this, double a2)
{
  return MEMORY[0x1E0DDE998](this, a2);
}

void RamstadSRC::RamstadSRC(RamstadSRC *this, double a2, double a3)
{
  MEMORY[0x1E0DDE9A0](this, a2, a3);
}

void RamstadSRC::RamstadSRC(RamstadSRC *this, double a2, double a3, double a4)
{
  MEMORY[0x1E0DDE9A8](this, a2, a3, a4);
}

void RamstadSRC::~RamstadSRC(RamstadSRC *this)
{
  MEMORY[0x1E0DDE9B0](this);
}

void SincKernel::SincKernel(SincKernel *this, double a2, double a3)
{
  MEMORY[0x1E0DDE9B8](this, a2, a3);
}

void SincKernel::~SincKernel(SincKernel *this)
{
  MEMORY[0x1E0DDE9C0](this);
}

void XPC_Object::~XPC_Object(XPC_Object *this)
{
  MEMORY[0x1E0DDE9C8](this);
}

uint64_t CADeprecated::XMachServer::XMachServer()
{
  return MEMORY[0x1E0DDE9E8]();
}

uint64_t CADeprecated::CABufferList::AllocateBuffers(CADeprecated::CABufferList *this)
{
  return MEMORY[0x1E0DDE9F0](this);
}

uint64_t CADeprecated::XBasicMIGServer::SetServerDispatchQueue()
{
  return MEMORY[0x1E0DDE9F8]();
}

uint64_t CADeprecated::XMachReceivePort::CreateMachPort(CADeprecated::XMachReceivePort *this)
{
  return MEMORY[0x1E0DDEA08](this);
}

void CADeprecated::XMachReceivePort::~XMachReceivePort(CADeprecated::XMachReceivePort *this)
{
  MEMORY[0x1E0DDEA10](this);
}

uint64_t CADeprecated::XRemoteMachServer::SetServerPort(CADeprecated::XRemoteMachServer *this)
{
  return MEMORY[0x1E0DDEA28](this);
}

uint64_t CADeprecated::XRemoteMachServer::XRemoteMachServer(CADeprecated::XRemoteMachServer *this, const char *a2, const char *a3)
{
  return MEMORY[0x1E0DDEA30](this, a2, a3);
}

void CADeprecated::XRemoteMachServer::~XRemoteMachServer(CADeprecated::XRemoteMachServer *this)
{
  MEMORY[0x1E0DDEA38](this);
}

void CADeprecated::XMachPortSendRight::~XMachPortSendRight(CADeprecated::XMachPortSendRight *this)
{
  MEMORY[0x1E0DDEA48](this);
}

uint64_t CADeprecated::XMachPortDeathListener::SetDeathNotificationDispatchQueue()
{
  return MEMORY[0x1E0DDEA50]();
}

void CADeprecated::XMachPortDeathListener::~XMachPortDeathListener(CADeprecated::XMachPortDeathListener *this)
{
  MEMORY[0x1E0DDEA60](this);
}

uint64_t CADeprecated::CAGuard::Notify(CADeprecated::CAGuard *this)
{
  return MEMORY[0x1E0DDEA70](this);
}

uint64_t CADeprecated::CAGuard::CAGuard(CADeprecated::CAGuard *this, const char *a2)
{
  return MEMORY[0x1E0DDEA80](this, a2);
}

void CADeprecated::CAGuard::~CAGuard(CADeprecated::CAGuard *this)
{
  MEMORY[0x1E0DDEA90](this);
}

uint64_t CADeprecated::CAMutex::CAMutex(CADeprecated::CAMutex *this, const char *a2)
{
  return MEMORY[0x1E0DDEAB8](this, a2);
}

void CADeprecated::CAMutex::~CAMutex(CADeprecated::CAMutex *this)
{
  MEMORY[0x1E0DDEAC8](this);
}

uint64_t CADeprecated::CAPThread::GetScheduledPriority(CADeprecated::CAPThread *this, _opaque_pthread_t *a2)
{
  return MEMORY[0x1E0DDEAF0](this, a2);
}

uint64_t CASerializer::WritePlist(CASerializer *this, const void *a2)
{
  return MEMORY[0x1E0DDEB20](this, a2);
}

uint64_t CASerializer::Write(CASerializer *this, const void *a2)
{
  return MEMORY[0x1E0DDEB28](this, a2);
}

void CASerializer::CASerializer(CASerializer *this, __CFData *a2)
{
  MEMORY[0x1E0DDEB30](this, a2);
}

void CASerializer::~CASerializer(CASerializer *this)
{
  MEMORY[0x1E0DDEB38](this);
}

uint64_t XOSTransactor::endTransaction(XOSTransactor *this)
{
  return MEMORY[0x1E0DDEB78](this);
}

uint64_t XOSTransactor::beginTransaction(XOSTransactor *this)
{
  return MEMORY[0x1E0DDEB80](this);
}

void CABundleLocker::CABundleLocker(CABundleLocker *this)
{
  MEMORY[0x1E0DDEB88](this);
}

void CABundleLocker::~CABundleLocker(CABundleLocker *this)
{
  MEMORY[0x1E0DDEB90](this);
}

uint64_t CACFDictionary::AddCString(CACFDictionary *this, const __CFString *a2, const char *a3)
{
  return MEMORY[0x1E0DDEB98](this, a2, a3);
}

uint64_t CACFDictionary::AddFloat32(CACFDictionary *this, const __CFString *a2, float a3)
{
  return MEMORY[0x1E0DDEBA0](this, a2, a3);
}

uint64_t CACFDictionary::AddDictionary(CACFDictionary *this, const __CFString *a2, const __CFDictionary *a3)
{
  return MEMORY[0x1E0DDEBA8](this, a2, a3);
}

uint64_t CACFDictionary::AddURL(CACFDictionary *this, const __CFString *a2, const __CFURL *a3)
{
  return MEMORY[0x1E0DDEBB0](this, a2, a3);
}

uint64_t CACFDictionary::AddData(CACFDictionary *this, const __CFString *a2, const __CFData *a3)
{
  return MEMORY[0x1E0DDEBC0](this, a2, a3);
}

uint64_t CACFDictionary::AddArray(CACFDictionary *this, const __CFString *a2, const __CFArray *a3)
{
  return MEMORY[0x1E0DDEBC8](this, a2, a3);
}

uint64_t CACFDictionary::AddCFType(CACFDictionary *this, const __CFString *a2, const void *a3)
{
  return MEMORY[0x1E0DDEBD0](this, a2, a3);
}

uint64_t CACFDictionary::AddString(CACFDictionary *this, const __CFString *a2, const __CFString *a3)
{
  return MEMORY[0x1E0DDEBE0](this, a2, a3);
}

uint64_t CACFDictionary::AddUInt32(CACFDictionary *this, const __CFString *a2)
{
  return MEMORY[0x1E0DDEBE8](this, a2);
}

uint64_t CADeserializer::GetAndAdvanceReadPtr(CADeserializer *this)
{
  return MEMORY[0x1E0DDEBF8](this);
}

uint64_t CADeserializer::Read(CADeserializer *this, void *a2)
{
  return MEMORY[0x1E0DDEC00](this, a2);
}

uint64_t CADeserializer::ReadPlist(CADeserializer *this)
{
  return MEMORY[0x1E0DDEC08](this);
}

void CADeserializer::CADeserializer(CADeserializer *this, const __CFData *a2)
{
  MEMORY[0x1E0DDEC10](this, a2);
}

void CADeserializer::CADeserializer(CADeserializer *this, const void *a2)
{
  MEMORY[0x1E0DDEC18](this, a2);
}

void CADeserializer::~CADeserializer(CADeserializer *this)
{
  MEMORY[0x1E0DDEC20](this);
}

uint64_t XPC_Connection::Initialize(XPC_Connection *this)
{
  return MEMORY[0x1E0DDEC38](this);
}

void XPC_Dictionary::~XPC_Dictionary(XPC_Dictionary *this)
{
  MEMORY[0x1E0DDEC48](this);
}

uint64_t BaseOpaqueObject::ResolveOpaqueRef()
{
  return MEMORY[0x1E0DDEC70]();
}

uint64_t BaseOpaqueObject::destroyOpaqueRef(BaseOpaqueObject *this)
{
  return MEMORY[0x1E0DDEC78](this);
}

uint64_t BaseOpaqueObject::checkRTTI()
{
  return MEMORY[0x1E0DDEC80]();
}

void BaseOpaqueObject::BaseOpaqueObject(BaseOpaqueObject *this)
{
  MEMORY[0x1E0DDEC90](this);
}

void BaseOpaqueObject::~BaseOpaqueObject(BaseOpaqueObject *this)
{
  MEMORY[0x1E0DDEC98](this);
}

uint64_t MultiRadixRealFFT::Initialize(MultiRadixRealFFT *this)
{
  return MEMORY[0x1E0DDECA0](this);
}

uint64_t PlatformUtilities::processName(PlatformUtilities *this)
{
  return MEMORY[0x1E0DDECA8](this);
}

uint64_t PlatformUtilities::IsInternalBuild(PlatformUtilities *this)
{
  return MEMORY[0x1E0DDECB0](this);
}

uint64_t SincKernelFactory::ReleaseSincKernel(SincKernelFactory *this, SincKernel *a2)
{
  return MEMORY[0x1E0DDECC0](this, a2);
}

uint64_t SincKernelFactory::ReferenceSincKernel(SincKernelFactory *this, double a2, double a3)
{
  return MEMORY[0x1E0DDECC8](this, a2, a3);
}

uint64_t CASmartPreferences::_RegisterFirstHandler()
{
  return MEMORY[0x1E0DDECE8]();
}

uint64_t CASmartPreferences::instance(CASmartPreferences *this)
{
  return MEMORY[0x1E0DDECF0](this);
}

uint64_t PropertyMarshaller::Deserialize()
{
  return MEMORY[0x1E0DDECF8]();
}

uint64_t PropertyMarshaller::Serialize()
{
  return MEMORY[0x1E0DDED00]();
}

uint64_t SharableMemoryBlock::InitClient()
{
  return MEMORY[0x1E0DDED10]();
}

uint64_t SharableMemoryBlock::InitServer()
{
  return MEMORY[0x1E0DDED18]();
}

uint64_t SharableMemoryBlock::FDClientToken::Reset(SharableMemoryBlock::FDClientToken *this)
{
  return MEMORY[0x1E0DDED20](this);
}

void SharableMemoryBlock::XPCClientToken::~XPCClientToken(SharableMemoryBlock::XPCClientToken *this)
{
  MEMORY[0x1E0DDED28](this);
}

uint64_t SharableMemoryBlock::MachClientToken::Reset(SharableMemoryBlock::MachClientToken *this)
{
  return MEMORY[0x1E0DDED38](this);
}

uint64_t SharableMemoryBlock::Free(SharableMemoryBlock *this)
{
  return MEMORY[0x1E0DDED40](this);
}

uint64_t CAAudioChannelLayout::SetWithTag(CAAudioChannelLayout *this)
{
  return MEMORY[0x1E0DDED48](this);
}

uint64_t CAAudioChannelLayout::NumberChannels(CAAudioChannelLayout *this, const AudioChannelLayout *a2)
{
  return MEMORY[0x1E0DDED50](this, a2);
}

uint64_t CAAudioChannelLayout::SetAllToUnknown(CAAudioChannelLayout *this, AudioChannelLayout *a2)
{
  return MEMORY[0x1E0DDED58](this, a2);
}

uint64_t CAAudioChannelLayout::Set(CAAudioChannelLayout *this, const AudioChannelLayout *a2)
{
  return MEMORY[0x1E0DDED60](this, a2);
}

uint64_t CAAudioChannelLayout::Create(CAAudioChannelLayout *this)
{
  return MEMORY[0x1E0DDED68](this);
}

uint64_t CAAudioChannelLayout::Destroy(CAAudioChannelLayout *this, AudioChannelLayout *a2)
{
  return MEMORY[0x1E0DDED70](this, a2);
}

void CAAudioChannelLayout::CAAudioChannelLayout(CAAudioChannelLayout *this, const AudioChannelLayout *a2)
{
  MEMORY[0x1E0DDED78](this, a2);
}

void CAAudioChannelLayout::CAAudioChannelLayout(CAAudioChannelLayout *this)
{
  MEMORY[0x1E0DDED80](this);
}

void CAAudioChannelLayout::~CAAudioChannelLayout(CAAudioChannelLayout *this)
{
  MEMORY[0x1E0DDED88](this);
}

uint64_t CAAudioChannelLayout::operator=()
{
  return MEMORY[0x1E0DDED90]();
}

{
  return MEMORY[0x1E0DDED98]();
}

uint64_t CAFileSystemUtilities::GetTemporarySubDirectory()
{
  return MEMORY[0x1E0DDEDA0]();
}

uint64_t PlatformUtilities_iOS::IsInternalBuild(PlatformUtilities_iOS *this)
{
  return MEMORY[0x1E0DDEDB8](this);
}

uint64_t PlatformUtilities_iOS::ProductIsAppleTV(PlatformUtilities_iOS *this)
{
  return MEMORY[0x1E0DDEDC8](this);
}

uint64_t PlatformUtilities_iOS::_eaJyFmO(PlatformUtilities_iOS *this)
{
  return MEMORY[0x1E0DDEE00](this);
}

uint64_t CAStreamBasicDescription::FromText(CAStreamBasicDescription *this, const char *a2, AudioStreamBasicDescription *a3)
{
  return MEMORY[0x1E0DDEE08](this, a2, a3);
}

uint64_t MIDI::LegacyPacketList::create()
{
  return MEMORY[0x1E0C9E600]();
}

uint64_t MIDI::LegacyPacketListDeleter::operator()()
{
  return MEMORY[0x1E0C9E608]();
}

uint64_t swix::connection::xpc_connection(swix::connection *this)
{
  return MEMORY[0x1E0DDEE10](this);
}

uint64_t swix::connection::send_and_await_reply(swix::connection *this, const swix::encode_message *a2)
{
  return MEMORY[0x1E0DDEE18](this, a2);
}

uint64_t swix::connection::state::cancel_connection()
{
  return MEMORY[0x1E0DDEE28]();
}

void swix::connection::~connection(swix::connection *this)
{
  MEMORY[0x1E0DDEE30](this);
}

{
  MEMORY[0x1E0DDEE38](this);
}

uint64_t swix::ipc_interface::ipc_interface()
{
  return MEMORY[0x1E0DDEE40]();
}

void swix::ipc_interface::~ipc_interface(swix::ipc_interface *this)
{
  MEMORY[0x1E0DDEE48](this);
}

uint64_t swix::encode_message::encode_message()
{
  return MEMORY[0x1E0DDEE50]();
}

uint64_t swix::encode_message::encode_message(swix::encode_message *this)
{
  return MEMORY[0x1E0DDEE58](this);
}

uint64_t swix::xpc_object_description(swix *this, void *a2)
{
  return MEMORY[0x1E0DDEE60](this, a2);
}

uint64_t swix::listener::listener(swix::listener *this, const swix::connection_config *a2)
{
  return MEMORY[0x1E0DDEE68](this, a2);
}

uint64_t CALog::Scope::SetPriorityThresholdFromPreference(CALog::Scope *this, const __CFString *a2, const __CFString *a3)
{
  return MEMORY[0x1E0DDEE70](this, a2, a3);
}

uint64_t caulk::concurrent::details::lf_read_sync_write_impl::end_mutate(caulk::concurrent::details::lf_read_sync_write_impl *this)
{
  return MEMORY[0x1E0DDB438](this);
}

uint64_t caulk::concurrent::details::lf_read_sync_write_impl::begin_mutate(caulk::concurrent::details::lf_read_sync_write_impl *this)
{
  return MEMORY[0x1E0DDB440](this);
}

uint64_t caulk::concurrent::details::lf_read_sync_write_impl::lf_read_sync_write_impl(caulk::concurrent::details::lf_read_sync_write_impl *this)
{
  return MEMORY[0x1E0DDB448](this);
}

void caulk::concurrent::message::~message(caulk::concurrent::message *this)
{
  MEMORY[0x1E0DDB450](this);
}

uint64_t caulk::concurrent::messenger::enqueue(caulk::concurrent::messenger *this, caulk::concurrent::message *a2)
{
  return MEMORY[0x1E0DDB470](this, a2);
}

uint64_t caulk::concurrent::messenger::messenger()
{
  return MEMORY[0x1E0DDB478]();
}

void caulk::concurrent::messenger::~messenger(caulk::concurrent::messenger *this)
{
  MEMORY[0x1E0DDB488](this);
}

uint64_t caulk::deferred_logger::create_message(caulk::deferred_logger *this, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DDB490](this, a2, a3);
}

uint64_t caulk::deferred_logger::create_v(caulk::deferred_logger *this, void *a2)
{
  return MEMORY[0x1E0DDB498](this, a2);
}

uint64_t caulk::audio_buffer_resource(caulk *this)
{
  return MEMORY[0x1E0DDB4B8](this);
}

uint64_t caulk::pooled_semaphore_mutex::_lock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x1E0DDB4C0](this);
}

uint64_t caulk::pooled_semaphore_mutex::_unlock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x1E0DDB4C8](this);
}

uint64_t caulk::pooled_semaphore_mutex::try_lock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x1E0DDB4D0](this);
}

uint64_t caulk::pooled_semaphore_mutex::pooled_semaphore_mutex(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x1E0DDB4D8](this);
}

uint64_t caulk::rt_safe_memory_resource::rt_allocate(caulk::rt_safe_memory_resource *this)
{
  return MEMORY[0x1E0DDB4E0](this);
}

uint64_t caulk::rt_safe_memory_resource::rt_deallocate(caulk::rt_safe_memory_resource *this, void *a2)
{
  return MEMORY[0x1E0DDB4E8](this, a2);
}

uint64_t caulk::init_realtime_safe_resource(caulk *this)
{
  return MEMORY[0x1E0DDB4F8](this);
}

uint64_t caulk::ipc::mapped_memory::reset(caulk::ipc::mapped_memory *this)
{
  return MEMORY[0x1E0DDB500](this);
}

uint64_t caulk::ipc::mapped_memory::mapped_memory()
{
  return MEMORY[0x1E0DDB508]();
}

uint64_t caulk::ipc::mapped_memory::mapped_memory(caulk::ipc::mapped_memory *this)
{
  return MEMORY[0x1E0DDB510](this);
}

uint64_t caulk::xpc::reply_watchdog_factory::make_timer(caulk::xpc::reply_watchdog_factory *this)
{
  return MEMORY[0x1E0DDB590](this);
}

uint64_t caulk::xpc::reply_watchdog_factory::init2()
{
  return MEMORY[0x1E0DDB598]();
}

uint64_t caulk::xpc::reply_watchdog_factory::reply_watchdog_factory(caulk::xpc::reply_watchdog_factory *this)
{
  return MEMORY[0x1E0DDB5A0](this);
}

uint64_t caulk::mach::this_thread::set_priority()
{
  return MEMORY[0x1E0DDB5A8]();
}

uint64_t caulk::mach::os_workgroup_managed::join(caulk::mach::os_workgroup_managed *this)
{
  return MEMORY[0x1E0DDB5D8](this);
}

uint64_t caulk::mach::os_workgroup_managed::make()
{
  return MEMORY[0x1E0DDB5E0]();
}

uint64_t caulk::mach::os_workgroup_managed::leave(caulk::mach::os_workgroup_managed *this)
{
  return MEMORY[0x1E0DDB5E8](this);
}

void caulk::mach::os_workgroup_managed::~os_workgroup_managed(caulk::mach::os_workgroup_managed *this)
{
  MEMORY[0x1E0DDB5F0](this);
}

uint64_t caulk::mach::thread::get_base_priority(caulk::mach::thread *this, _opaque_pthread_t *a2)
{
  return MEMORY[0x1E0DDB630](this, a2);
}

uint64_t caulk::mach::details::retain_os_object(caulk::mach::details *this, void *a2)
{
  return MEMORY[0x1E0DDB638](this, a2);
}

uint64_t caulk::mach::details::release_os_object(caulk::mach::details *this, void *a2)
{
  return MEMORY[0x1E0DDB640](this, a2);
}

uint64_t caulk::alloc::global_page_cache::instance(caulk::alloc::global_page_cache *this)
{
  return MEMORY[0x1E0DDB680](this);
}

uint64_t caulk::alloc::details::caching_page_allocator_base::deallocate()
{
  return MEMORY[0x1E0DDB698]();
}

uint64_t caulk::alloc::details::caching_page_allocator_base::allocate(caulk::alloc::details::caching_page_allocator_base *this)
{
  return MEMORY[0x1E0DDB6A0](this);
}

uint64_t caulk::thread::attributes::apply_to_this_thread(caulk::thread::attributes *this)
{
  return MEMORY[0x1E0DDB6A8](this);
}

uint64_t caulk::thread::join(caulk::thread *this)
{
  return MEMORY[0x1E0DDB6B0](this);
}

uint64_t caulk::thread::start(caulk::thread *this, caulk::thread::attributes *a2, void *(*a3)(void *), void *a4)
{
  return MEMORY[0x1E0DDB6B8](this, a2, a3, a4);
}

void caulk::thread::~thread(caulk::thread *this)
{
  MEMORY[0x1E0DDB6C8](this);
}

uint64_t caulk::semaphore::timed_wait(caulk::semaphore *this, double a2)
{
  return MEMORY[0x1E0DDB6F8](this, a2);
}

uint64_t caulk::semaphore::signal(caulk::semaphore *this)
{
  return MEMORY[0x1E0DDB700](this);
}

uint64_t caulk::semaphore::semaphore(caulk::semaphore *this)
{
  return MEMORY[0x1E0DDB708](this);
}

void caulk::semaphore::~semaphore(caulk::semaphore *this)
{
  MEMORY[0x1E0DDB710](this);
}

uint64_t RateRamp::OffsetTimes(RateRamp *this, double a2, double a3)
{
  return MEMORY[0x1E0DDEEC8](this, a2, a3);
}

void RateRamp::RateRamp(RateRamp *this)
{
  MEMORY[0x1E0DDEED0](this);
}

uint64_t TruePeak::Reset(TruePeak *this)
{
  return MEMORY[0x1E0DDEF00](this);
}

uint64_t TruePeak::Process(TruePeak *this, uint64_t a2, const float *a3)
{
  return MEMORY[0x1E0DDEF08](this, a2, a3);
}

void TruePeak::TruePeak(TruePeak *this)
{
  MEMORY[0x1E0DDEF10](this);
}

uint64_t CACFArray::AppendData(CACFArray *this, const __CFData *a2)
{
  return MEMORY[0x1E0DDEF18](this, a2);
}

uint64_t RamstadSRC::latencySeconds(RamstadSRC *this)
{
  return MEMORY[0x1E0DDEF38](this);
}

uint64_t RamstadSRC::inputSamplesForOutputSamples(RamstadSRC *this)
{
  return MEMORY[0x1E0DDEF40](this);
}

uint64_t RamstadSRC::outputSamplesForInputSamples(RamstadSRC *this, uint64_t a2, int *a3)
{
  return MEMORY[0x1E0DDEF48](this, a2, a3);
}

uint64_t CACFDictionary::GetFloat32(CACFDictionary *this, const __CFString *a2, float *a3)
{
  return MEMORY[0x1E0DDEF58](this, a2, a3);
}

uint64_t CACFDictionary::GetCACFArray(CACFDictionary *this, const __CFString *a2, CACFArray *a3)
{
  return MEMORY[0x1E0DDEF60](this, a2, a3);
}

uint64_t CACFDictionary::GetDictionary(CACFDictionary *this, const __CFString *a2, const __CFDictionary **a3)
{
  return MEMORY[0x1E0DDEF70](this, a2, a3);
}

uint64_t CACFDictionary::GetKeysAndValues(CACFDictionary *this, const void **a2, const void **a3)
{
  return MEMORY[0x1E0DDEF78](this, a2, a3);
}

uint64_t CACFDictionary::GetCACFDictionary(CACFDictionary *this, const __CFString *a2, CACFDictionary *a3)
{
  return MEMORY[0x1E0DDEF80](this, a2, a3);
}

uint64_t CACFDictionary::GetUInt32FromString(CACFDictionary *this, const __CFString *a2, unsigned int *a3)
{
  return MEMORY[0x1E0DDEF88](this, a2, a3);
}

uint64_t CACFDictionary::GetFloat32FromString(CACFDictionary *this, const __CFString *a2, float *a3)
{
  return MEMORY[0x1E0DDEF90](this, a2, a3);
}

uint64_t CACFDictionary::Size(CACFDictionary *this)
{
  return MEMORY[0x1E0DDEF98](this);
}

uint64_t CACFDictionary::HasKey(CACFDictionary *this, const __CFString *a2)
{
  return MEMORY[0x1E0DDEFA8](this, a2);
}

uint64_t CACFDictionary::GetBool(CACFDictionary *this, const __CFString *a2, BOOL *a3)
{
  return MEMORY[0x1E0DDEFB0](this, a2, a3);
}

uint64_t CACFDictionary::GetKeys(CACFDictionary *this, const void **a2)
{
  return MEMORY[0x1E0DDEFB8](this, a2);
}

uint64_t CACFDictionary::GetString(CACFDictionary *this, const __CFString *a2, const __CFString **a3)
{
  return MEMORY[0x1E0DDEFC8](this, a2, a3);
}

uint64_t CACFDictionary::GetUInt32(CACFDictionary *this, const __CFString *a2, unsigned int *a3)
{
  return MEMORY[0x1E0DDEFD0](this, a2, a3);
}

uint64_t MultiRadixRealFFT::RealOutOfPlaceForwardTransform(MultiRadixRealFFT *this, const float *a2, DSPSplitComplex *a3, float a4)
{
  return MEMORY[0x1E0DDEFE8](this, a2, a3, a4);
}

uint64_t MultiRadixRealFFT::RealOutOfPlaceInverseTransform(MultiRadixRealFFT *this, const DSPSplitComplex *a2, float *a3)
{
  return MEMORY[0x1E0DDEFF0](this, a2, a3);
}

uint64_t CAAudioChannelLayout::operator==()
{
  return MEMORY[0x1E0DDEFF8]();
}

uint64_t MIDI::EventList::size(MIDI::EventList *this)
{
  return MEMORY[0x1E0C9E610](this);
}

uint64_t caulk::concurrent::details::lf_read_sync_write_impl::end_access(caulk::concurrent::details::lf_read_sync_write_impl *this)
{
  return MEMORY[0x1E0DDB718](this);
}

uint64_t caulk::concurrent::details::lf_read_sync_write_impl::begin_access(caulk::concurrent::details::lf_read_sync_write_impl *this)
{
  return MEMORY[0x1E0DDB720](this);
}

uint64_t caulk::ipc::mapped_memory::create_xpc_object(caulk::ipc::mapped_memory *this)
{
  return MEMORY[0x1E0DDB728](this);
}

uint64_t caulk::mach::os_workgroup_managed::copy_mach_port(caulk::mach::os_workgroup_managed *this)
{
  return MEMORY[0x1E0DDB748](this);
}

uint64_t RateRamp::InputDuration(RateRamp *this)
{
  return MEMORY[0x1E0DDF010](this);
}

uint64_t RateRamp::RateForOutputTime(RateRamp *this, double a2)
{
  return MEMORY[0x1E0DDF018](this, a2);
}

uint64_t RateRamp::InputTimeForOutputTime(RateRamp *this, double a2)
{
  return MEMORY[0x1E0DDF020](this, a2);
}

uint64_t RateRamp::Segment(RateRamp *this, double a2, double *a3, double a4, RateRamp *a5)
{
  return MEMORY[0x1E0DDF028](this, a3, a5, a2, a4);
}

uint64_t TruePeak::GetStats()
{
  return MEMORY[0x1E0DDF040]();
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x1E0DE4190](this);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x1E0DE41A0](retstr, this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x1E0DE4208](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x1E0DE4220](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return (const char *)MEMORY[0x1E0DE4270](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4278](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1E0DE4320](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4328](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4330](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x1E0DE4338](this);
}

{
  MEMORY[0x1E0DE4340](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x1E0DE43A8](a1, a2, a3);
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
  MEMORY[0x1E0DE43C0](__ns);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x1E0DE43F8](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4408](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1E0DE4490](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x1E0DE44A8](this, __requested_capacity);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x1E0DE44B0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, int __ev, const std::error_category *__ecat, const char *__what_arg)
{
  return (std::system_error *)MEMORY[0x1E0DE4568](this, *(_QWORD *)&__ev, __ecat, __what_arg);
}

void std::system_error::~system_error(std::system_error *this)
{
  MEMORY[0x1E0DE4580](this);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1E0DE4590]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1E0DE4598]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1E0DE4628]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1E0DE4650]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46D0]();
}

{
  return MEMORY[0x1E0DE46F8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4718]();
}

{
  return MEMORY[0x1E0DE4720]();
}

{
  return MEMORY[0x1E0DE4728]();
}

{
  return MEMORY[0x1E0DE4730]();
}

{
  return MEMORY[0x1E0DE4738]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1E0DE4770](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
  MEMORY[0x1E0DE4778](this);
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1E0DE4780](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x1E0DE47B0]();
}

void std::error_category::~error_category(std::error_category *this)
{
  MEMORY[0x1E0DE47C0](this);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x1E0DE47D0](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
  MEMORY[0x1E0DE47D8](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  MEMORY[0x1E0DE4820](this);
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  MEMORY[0x1E0DE4828](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x1E0DE4838](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
  MEMORY[0x1E0DE4840](this);
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x1E0DE4848]();
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
  MEMORY[0x1E0DE4898](this);
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x1E0DE48A8](this, __lk);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x1E0DE48B0](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x1E0DE4908]();
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x1E0DE4920](*(_QWORD *)&__ev, __what_arg);
}

uint64_t std::pmr::get_default_resource(std::pmr *this)
{
  return MEMORY[0x1E0DE4950](this);
}

BOOL std::__fs::filesystem::__remove(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x1E0DE4A38](a1, __ec);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x1E0DE4A48](a1, __ec);
}

float std::stof(const std::string *__str, size_t *__idx)
{
  float result;

  MEMORY[0x1E0DE4A70](__str, __idx);
  return result;
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4A78](__str, __idx, *(_QWORD *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

unint64_t std::stoul(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4AC8](__str, __idx, *(_QWORD *)&__base);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1E0DE4B38]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

unsigned int std::thread::hardware_concurrency(void)
{
  return MEMORY[0x1E0DE4BB0]();
}

void std::thread::~thread(std::thread *this)
{
  MEMORY[0x1E0DE4BC8](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x1E0DE4D40](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x1E0DE4D50](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D68](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D70](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1E0DE4D80](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x1E0DE4DB0](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

int std::uncaught_exceptions(void)
{
  return MEMORY[0x1E0DE4E08]();
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E28FEC20();
}

void operator delete(void *__p)
{
  off_1E28FEC28(__p);
}

void operator delete(void *__p, std::align_val_t a2)
{
  off_1E28FEC30(__p, a2);
}

uint64_t operator delete()
{
  return off_1E28FEC38();
}

uint64_t operator<<()
{
  return MEMORY[0x1E0DDF0C0]();
}

{
  return MEMORY[0x1E0DDF0C8]();
}

{
  return MEMORY[0x1E0DDF0D0]();
}

{
  return MEMORY[0x1E0DDF0D8]();
}

{
  return MEMORY[0x1E0DDF0E0]();
}

uint64_t operator new[]()
{
  return off_1E28FEC68();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E28FEC70(__sz);
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  return (void *)off_1E28FEC78(__sz, a2);
}

uint64_t operator new()
{
  return off_1E28FEC80();
}

uint64_t operator>>()
{
  return MEMORY[0x1E0DDF0F0]();
}

{
  return MEMORY[0x1E0DDF0F8]();
}

{
  return MEMORY[0x1E0DDF100]();
}

{
  return MEMORY[0x1E0DDF108]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

float __exp10f(float a1)
{
  float result;

  MEMORY[0x1E0C80AD0](a1);
  return result;
}

uint64_t __invert_d3()
{
  return MEMORY[0x1E0C80B18]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

uint64_t __udivti3()
{
  return MEMORY[0x1E0C80C80]();
}

uint64_t _os_assert_log()
{
  return MEMORY[0x1E0C80FF0]();
}

uint64_t _os_crash()
{
  return MEMORY[0x1E0C81000]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _os_log_pack_fill()
{
  return MEMORY[0x1E0C81058]();
}

uint64_t _os_log_pack_size()
{
  return MEMORY[0x1E0C81060]();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _set_user_dir_suffix()
{
  return MEMORY[0x1E0C811A0]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

uint64_t abort_with_reason()
{
  return MEMORY[0x1E0C813C0]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1E0C813D0](a1, *(_QWORD *)&a2);
}

void audit_token_to_au32(audit_token_t *atoken, uid_t *auidp, uid_t *euidp, gid_t *egidp, uid_t *ruidp, gid_t *rgidp, pid_t *pidp, au_asid_t *asidp, au_tid_t *tidp)
{
  MEMORY[0x1E0DE40C8](atoken, auidp, euidp, egidp, ruidp, rgidp, pidp, asidp);
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE40F0](atoken);
}

int audit_token_to_pidversion(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE40F8](atoken);
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x1E0C81708](*(_QWORD *)&bp, service_name, sp);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1E0DE7A50](cls, name, imp, types);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x1E0DE7AC0](cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1E0DE7AC8](cls);
}

objc_property_t class_getProperty(Class cls, const char *name)
{
  return (objc_property_t)MEMORY[0x1E0DE7AD0](cls, name);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1E0DE7AD8](cls);
}

IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return (IMP)MEMORY[0x1E0DE7AF0](cls, name, imp, types);
}

clock_t clock(void)
{
  return MEMORY[0x1E0C82650]();
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x1E0C82668](*(_QWORD *)&__clock_id, __tp);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return MEMORY[0x1E0C826D0](*(_QWORD *)&a1, a2, a3);
}

float cosf(float a1)
{
  float result;

  MEMORY[0x1E0C82B48](a1);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BF8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C28](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1E0C82D08](key);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x1E0C82E10](predicate, context, function);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  MEMORY[0x1E0C82E80](queue, key, context, destructor);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
  MEMORY[0x1E0C82F08](object, queue);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F80](source);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FE0](label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1E0C83010]();
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

long double frexp(long double __x, int *__e)
{
  long double result;

  MEMORY[0x1E0C834E8](__e, __x);
  return result;
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1E0C83580](a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1E0C83590](*(_QWORD *)&a1, a2);
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  return (FILE *)MEMORY[0x1E0C835C8](a1, a2, a3, a4, a5);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1E0C83778]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

uid_t getuid(void)
{
  return MEMORY[0x1E0C83828]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

long double ldexp(long double __x, int __e)
{
  long double result;

  MEMORY[0x1E0C83B40](*(_QWORD *)&__e, __x);
  return result;
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x1E0C83B98]();
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1E0C83BA8](a1);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83BB0](a1, a2);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

float log10f(float a1)
{
  float result;

  MEMORY[0x1E0C83BC8](a1);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1E0C83C38](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1E0C83C80](*(_QWORD *)&error_value);
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1E0C83CB0](msg, *(_QWORD *)&option, *(_QWORD *)&send_size, *(_QWORD *)&rcv_size, *(_QWORD *)&rcv_name, *(_QWORD *)&timeout, *(_QWORD *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
  MEMORY[0x1E0C83CC0](a1);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF8](*(_QWORD *)&task, *(_QWORD *)&name);
}

kern_return_t mach_port_get_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_urefs_t *refs)
{
  return MEMORY[0x1E0C83D30](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&right, refs);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
  MEMORY[0x1E0C840E8](*(_QWORD *)&reply_port);
}

void mig_deallocate(vm_address_t a1, vm_size_t a2)
{
  MEMORY[0x1E0C840F8](a1, a2);
}

mach_port_t mig_get_reply_port(void)
{
  return MEMORY[0x1E0C84100]();
}

void mig_put_reply_port(mach_port_t reply_port)
{
  MEMORY[0x1E0C84110](*(_QWORD *)&reply_port);
}

float nextafterf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C843B0](a1, a2);
  return result;
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1E0C84400](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1E0C84428](*(_QWORD *)&token, state64);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1E0DE7D00](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

Class objc_lookUpClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7D10](name);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7D18](to, from);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1E0DE7FF8](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

uint64_t os_eventlink_activate()
{
  return MEMORY[0x1E0C84698]();
}

uint64_t os_eventlink_associate()
{
  return MEMORY[0x1E0C846A0]();
}

uint64_t os_eventlink_cancel()
{
  return MEMORY[0x1E0C846A8]();
}

uint64_t os_eventlink_create()
{
  return MEMORY[0x1E0C846B0]();
}

uint64_t os_eventlink_create_with_port()
{
  return MEMORY[0x1E0C846B8]();
}

uint64_t os_eventlink_extract_remote_port()
{
  return MEMORY[0x1E0C846C0]();
}

uint64_t os_eventlink_signal_and_wait()
{
  return MEMORY[0x1E0C846D0]();
}

uint64_t os_eventlink_signal_and_wait_until()
{
  return MEMORY[0x1E0C846D8]();
}

uint64_t os_eventlink_wait()
{
  return MEMORY[0x1E0C846E0]();
}

uint64_t os_eventlink_wait_until()
{
  return MEMORY[0x1E0C846E8]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x1E0C84918](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1E0C84940]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x1E0C84948]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x1E0C849A8](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x1E0C849B8]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x1E0C849D0]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

uint64_t os_workgroup_attr_set_interval_type()
{
  return MEMORY[0x1E0C84A28]();
}

int os_workgroup_copy_port(os_workgroup_t wg, mach_port_t *mach_port_out)
{
  return MEMORY[0x1E0C84A40](wg, mach_port_out);
}

uint64_t os_workgroup_interval_copy_current_4AudioToolbox()
{
  return MEMORY[0x1E0C84A68]();
}

uint64_t os_workgroup_interval_create_with_workload_id()
{
  return MEMORY[0x1E0C84A78]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1E0C84BC8](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

uint64_t proc_disable_wakemon()
{
  return MEMORY[0x1E0C84BE8]();
}

int proc_pid_rusage(int pid, int flavor, rusage_info_t *buffer)
{
  return MEMORY[0x1E0C84C28](*(_QWORD *)&pid, *(_QWORD *)&flavor, buffer);
}

uint64_t proc_set_wakemon_defaults()
{
  return MEMORY[0x1E0C84C80]();
}

const char *__cdecl property_getAttributes(objc_property_t property)
{
  return (const char *)MEMORY[0x1E0DE8068](property);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_main_np(void)
{
  return MEMORY[0x1E0C84E08]();
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

int pthread_threadid_np(pthread_t a1, __uint64_t *a2)
{
  return MEMORY[0x1E0C84F38](a1, a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1E0C84F68](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1E0C85030](__ptr, __size);
}

uint64_t sandbox_check_by_audit_token()
{
  return MEMORY[0x1E0C85180]();
}

float scalbnf(float a1, int a2)
{
  float result;

  MEMORY[0x1E0C85248](*(_QWORD *)&a2, a1);
  return result;
}

int sched_yield(void)
{
  return MEMORY[0x1E0C85270]();
}

SEL sel_registerName(const char *str)
{
  return (SEL)MEMORY[0x1E0DE80E8](str);
}

float sinf(float a1)
{
  float result;

  MEMORY[0x1E0C85420](a1);
  return result;
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1E0C85438](*(_QWORD *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

char *__cdecl stpcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1E0C854F0](__dst, __src);
}

char *__cdecl stpncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C854F8](__dst, __src, __n);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1E0C85558](a1, a2, a3, a4);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85568](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1E0C855C8](__big, __little, __len);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  float result;

  MEMORY[0x1E0C85628](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x1E0C857D0](*(_QWORD *)&a1, a2);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x1E0C857E8](__x);
  return result;
}

kern_return_t task_create_identity_token(task_t task, task_id_token_t *token)
{
  return MEMORY[0x1E0C85808](*(_QWORD *)&task, token);
}

kern_return_t task_get_special_port(task_inspect_t task, int which_port, mach_port_t *special_port)
{
  return MEMORY[0x1E0C85828](*(_QWORD *)&task, *(_QWORD *)&which_port, special_port);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1E0C85838](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

uint64_t thread_selfcounts()
{
  return MEMORY[0x1E0C85918]();
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int unsetenv(const char *a1)
{
  return MEMORY[0x1E0C859D0](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

void vDSP_biquad(const vDSP_biquad_SetupStruct *__Setup, float *__Delay, const float *__X, vDSP_Stride __IX, float *__Y, vDSP_Stride __IY, vDSP_Length __N)
{
  MEMORY[0x1E0C8BFC0](__Setup, __Delay, __X, __IX, __Y, __IY, __N);
}

vDSP_biquad_Setup vDSP_biquad_CreateSetup(const double *__Coefficients, vDSP_Length __M)
{
  return (vDSP_biquad_Setup)MEMORY[0x1E0C8BFD0](__Coefficients, __M);
}

void vDSP_biquad_DestroySetup(vDSP_biquad_Setup __setup)
{
  MEMORY[0x1E0C8BFE0](__setup);
}

void vDSP_ctoz(const DSPComplex *__C, vDSP_Stride __IC, const DSPSplitComplex *__Z, vDSP_Stride __IZ, vDSP_Length __N)
{
  MEMORY[0x1E0C8C070](__C, __IC, __Z, __IZ, __N);
}

void vDSP_distancesq(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C0B0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C0D0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_dotprD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C0E0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_maxmgv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C188](__A, __IA, __C, __N);
}

void vDSP_maxv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C1B0](__A, __IA, __C, __N);
}

void vDSP_meanv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C1E8](__A, __IA, __C, __N);
}

void vDSP_meanvD(const double *__A, vDSP_Stride __IA, double *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C1F0](__A, __IA, __C, __N);
}

void vDSP_mmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
  MEMORY[0x1E0C8C250](__A, __IA, __B, __IB, __C, __IC, __M, __N);
}

void vDSP_svdiv(const float *__A, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C2D8](__A, __B, __IB, __C, __IC, __N);
}

void vDSP_sve(const float *__A, vDSP_Stride __I, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C2E8](__A, __I, __C, __N);
}

void vDSP_svesq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C328](__A, __IA, __C, __N);
}

void vDSP_vabs(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C358](__A, __IA, __C, __IC, __N);
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C368](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vasm(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C3C0](__A, __IA, __B, __IB, __C, __D, __ID, __N);
}

void vDSP_vclip(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C3D8](__A, __IA, __B, __C, __D, __ID, __N);
}

void vDSP_vclr(float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C400](__C, __IC, __N);
}

void vDSP_vclrD(double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C408](__C, __IC, __N);
}

void vDSP_vdiv(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C448](__B, __IB, __A, __IA, __C, __IC, __N);
}

void vDSP_vfill(const float *__A, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C460](__A, __C, __IC, __N);
}

void vDSP_vmax(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C6C0](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vmin(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C6D8](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C740](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vrampmul(const float *__I, vDSP_Stride __IS, float *__Start, const float *__Step, float *__O, vDSP_Stride __OS, vDSP_Length __N)
{
  MEMORY[0x1E0C8C7B0](__I, __IS, __Start, __Step, __O, __OS, __N);
}

void vDSP_vrampmuladd(const float *__I, vDSP_Stride __IS, float *__Start, const float *__Step, float *__O, vDSP_Stride __OS, vDSP_Length __N)
{
  MEMORY[0x1E0C8C7D0](__I, __IS, __Start, __Step, __O, __OS, __N);
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C800](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsaddD(const double *__A, vDSP_Stride __IA, const double *__B, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C810](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsma(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C888](__A, __IA, __B, __C, __IC, __D, __ID, __N);
}

void vDSP_vsmsma(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, vDSP_Stride __IC, const float *__D, float *__E, vDSP_Stride __IE, vDSP_Length __N)
{
  MEMORY[0x1E0C8C8C0](__A, __IA, __B, __C, __IC, __D, __E, __IE);
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C8E0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsorti(const float *__C, vDSP_Length *__I, vDSP_Length *__Temporary, vDSP_Length __N, int __Order)
{
  MEMORY[0x1E0C8C900](__C, __I, __Temporary, __N, *(_QWORD *)&__Order);
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C940](__B, __IB, __A, __IA, __C, __IC, __N);
}

void vDSP_zrvadd(const DSPSplitComplex *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CA20](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_zrvdiv(const DSPSplitComplex *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CA28](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_zrvmul(const DSPSplitComplex *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CA38](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_zrvsub(const DSPSplitComplex *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CA48](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_ztoc(const DSPSplitComplex *__Z, vDSP_Stride __IZ, DSPComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CA50](__Z, __IZ, __C, __IC, __N);
}

void vDSP_zvabs(const DSPSplitComplex *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CA60](__A, __IA, __C, __IC, __N);
}

void vDSP_zvadd(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CA70](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_zvdiv(const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CAA0](__B, __IB, __A, __IA, __C, __IC, __N);
}

void vDSP_zvmul(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N, int __Conjugate)
{
  MEMORY[0x1E0C8CAE8](__A, __IA, __B, __IB, __C, __IC, __N, *(_QWORD *)&__Conjugate);
}

void vDSP_zvneg(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CAF8](__A, __IA, __C, __IC, __N);
}

void vDSP_zvsub(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8CB10](__A, __IA, __B, __IB, __C, __IC, __N);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1E0C85A80](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

uint64_t voucher_adopt()
{
  return MEMORY[0x1E0C85B10]();
}

uint64_t voucher_copy()
{
  return MEMORY[0x1E0C85B18]();
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return MEMORY[0x1E0C85B60](msg);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

size_t wcsnlen(const __int32 *a1, size_t a2)
{
  return MEMORY[0x1E0C85C38](a1, a2);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1E0C85CB8](__s, *(_QWORD *)&__c, __n);
}

xmlParserCtxtPtr xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data, const char *chunk, int size, const char *filename)
{
  return (xmlParserCtxtPtr)MEMORY[0x1E0DE8CC0](sax, user_data, chunk, *(_QWORD *)&size, filename);
}

void xmlFreeParserCtxt(xmlParserCtxtPtr ctxt)
{
  MEMORY[0x1E0DE8D50](ctxt);
}

int xmlParseChunk(xmlParserCtxtPtr ctxt, const char *chunk, int size, int terminate)
{
  return MEMORY[0x1E0DE8EA0](ctxt, chunk, *(_QWORD *)&size, *(_QWORD *)&terminate);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x1E0C85DE0](xarray, value);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1E0C85E30](xarray);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1E0C85E90](xarray, index);
}

void xpc_connection_activate(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F50](connection);
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1E0C85F90](name, targetq);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FA0](endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1E0C86048](connection, message);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C86178](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1E0C86198](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1E0C861A8](xdata);
}

uint64_t xpc_dictionary_copy_mach_send()
{
  return MEMORY[0x1E0C86200]();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

int xpc_dictionary_dup_fd(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86230](xdict, key);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86260](xdict, key);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1E0C86278](xdict, key, length);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862A0](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862D0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
  MEMORY[0x1E0C86330](xdict, key, bytes, length);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
  MEMORY[0x1E0C86398](xdict, key, value);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1E0C863F0](connection);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x1E0C86570](xint);
}

uint64_t xpc_mach_send_copy_right()
{
  return MEMORY[0x1E0C865D8]();
}

uint64_t xpc_mach_send_create()
{
  return MEMORY[0x1E0C865E0]();
}

void xpc_main(xpc_connection_handler_t handler)
{
  MEMORY[0x1E0C86608](handler);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1E0C86628]();
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1E0C86660](object);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1E0C86720](string);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C867B0](value);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return MEMORY[0x1E0C867B8](xuint);
}

