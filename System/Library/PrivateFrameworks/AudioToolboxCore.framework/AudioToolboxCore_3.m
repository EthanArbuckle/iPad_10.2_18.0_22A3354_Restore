void sub_18EF4A7AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x1020C40FFEA222ELL);
  _Unwind_Resume(a1);
}

uint64_t ID3FileStream::IsCurFrameRequired(ID3FileStream *this)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v1 = bswap32(*(_DWORD *)((char *)this + 402));
  v2 = *(_DWORD *)(*((_QWORD *)this + 42) + 64);
  v3 = v1 >> 8;
  if (v2 == 2)
  {
    v4 = 5527640;
  }
  else
  {
    v3 = v1;
    v4 = 1415075928;
  }
  if (v4 == v3 && !*((_BYTE *)this + 509))
    return 1;
  if (v2 == 2)
  {
    if ((v3 & 0xFFFF0000) != 0x540000)
    {
LABEL_11:
      if (v2 == 2)
        v5 = 4411213;
      else
        v5 = 1129270605;
      if (v5 == v3
        && (!*((_BYTE *)this + 507) || !*((_BYTE *)this + 506) || !*((_BYTE *)this + 509) || !*((_BYTE *)this + 508)))
      {
        return 1;
      }
      v6 = v2 == 2 ? 5590100 : 1431522388;
      if (v6 == v3 && !*((_BYTE *)this + 504))
        return 1;
      if (v3 == 1347570006)
      {
        if (!*((_BYTE *)this + 505))
          return 1;
      }
      else
      {
        if (v2 == 2)
          v7 = 5065804;
        else
          v7 = 1296845908;
        if (v7 == v3 && !*((_BYTE *)this + 510))
          return 1;
      }
      return 0;
    }
  }
  else if (HIBYTE(v3) != 84)
  {
    goto LABEL_11;
  }
  if (*((_BYTE *)this + 508))
    goto LABEL_11;
  return 1;
}

void ID3FileStream::ProcessTextFrame(ID3FileStream *this, ID3TagBase *a2)
{
  char *v3;
  uint64_t v5;
  int v6;
  CFStringRef v7;
  int v9;
  __CFString **v10;
  const __CFString *v11;
  char HasKey;
  CFIndex Length;
  CFStringRef theString;

  v3 = (char *)*((_QWORD *)this + 55);
  if (v3)
  {
    if (!*((_QWORD *)this + 46))
    {
      v5 = operator new();
      *(_QWORD *)v5 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_WORD *)(v5 + 8) = 257;
      *((_QWORD *)this + 46) = v5;
      v3 = (char *)*((_QWORD *)this + 55);
    }
    theString = 0;
    v6 = ID3TagBase::CopyFrameData(*((ID3TagBase **)this + 42), v3, *((_DWORD *)this + 103), *((_DWORD *)this + 118), (const void **)&theString);
    v7 = theString;
    if (!v6 && theString != 0)
    {
      v9 = ID3TagBase::TranslateV2IDToV3(a2);
      if (v9 > 1414091825)
      {
        if (v9 <= 1414546736)
        {
          switch(v9)
          {
            case 1414091826:
              v10 = InfoDictionaryKeys::sAFDictionary_Title;
              goto LABEL_41;
            case 1414091827:
              v10 = InfoDictionaryKeys::sAFDictionary_SubTitle;
              goto LABEL_41;
            case 1414219097:
              v10 = InfoDictionaryKeys::sAFDictionary_KeySignature;
              goto LABEL_41;
          }
        }
        else if (v9 > 1414746690)
        {
          if (v9 == 1414746691)
          {
            v10 = InfoDictionaryKeys::sAFDictionary_ISRC;
            goto LABEL_41;
          }
          if (v9 == 1415136594)
          {
            v10 = InfoDictionaryKeys::sAFDictionary_Year;
            goto LABEL_41;
          }
        }
        else
        {
          if (v9 == 1414546737)
          {
            v10 = InfoDictionaryKeys::sAFDictionary_Artist;
            goto LABEL_41;
          }
          if (v9 == 1414677323)
          {
            v10 = InfoDictionaryKeys::sAFDictionary_TrackNumber;
            goto LABEL_41;
          }
        }
      }
      else if (v9 <= 1413697357)
      {
        switch(v9)
        {
          case 1413565506:
            v10 = InfoDictionaryKeys::sAFDictionary_Album;
            goto LABEL_41;
          case 1413632077:
            v10 = InfoDictionaryKeys::sAFDictionary_Tempo;
            goto LABEL_41;
          case 1413697357:
            v10 = InfoDictionaryKeys::sAFDictionary_Composer;
            goto LABEL_41;
        }
      }
      else if (v9 > 1413828162)
      {
        if (v9 == 1413828163)
        {
          v10 = InfoDictionaryKeys::sAFDictionary_EncodingApplication;
          goto LABEL_41;
        }
        if (v9 == 1413830740)
        {
          v10 = InfoDictionaryKeys::sAFDictionary_Lyricist;
          goto LABEL_41;
        }
      }
      else
      {
        if (v9 == 1413697358)
        {
          v10 = InfoDictionaryKeys::sAFDictionary_Genre;
          goto LABEL_41;
        }
        if (v9 == 1413697360)
        {
          v10 = InfoDictionaryKeys::sAFDictionary_Copyright;
LABEL_41:
          v11 = *v10;
          if (*v10)
          {
            HasKey = CACFDictionary::HasKey(*((CACFDictionary **)this + 46), *v10);
            v7 = theString;
            if ((HasKey & 1) == 0)
            {
              Length = CFStringGetLength(theString);
              v7 = theString;
              if (Length)
              {
                CACFDictionary::AddString(*((CACFDictionary **)this + 46), v11, theString);
                v7 = theString;
              }
            }
          }
        }
      }
      CFRelease(v7);
    }
  }
}

void sub_18EF4ABFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x1020C40FFEA222ELL);
  _Unwind_Resume(a1);
}

uint64_t ID3FileStream::ProcessCommentFrame(uint64_t this)
{
  char *v1;
  uint64_t v2;
  uint64_t *v3;
  const void *Value;
  _OWORD *v5;
  CACFDictionary *v6;
  CACFDictionary *v7;
  CACFDictionary *v8;
  CACFDictionary *v9;
  CACFDictionary *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef *v18;
  CACFDictionary *v19;
  const __CFDictionary *v20;
  std::bad_alloc *exception;
  std::bad_alloc *v22;
  int v23;
  int v24;

  v1 = *(char **)(this + 440);
  if (!v1)
    return this;
  v2 = this;
  v3 = (uint64_t *)(this + 352);
  this = ID3TagBase::CopyFrameData(*(ID3TagBase **)(this + 336), v1, *(_DWORD *)(v2 + 412), *(_DWORD *)(v2 + 472), (const void **)(v2 + 352));
  if ((_DWORD)this)
    return this;
  this = *v3;
  if (!*v3)
    return this;
  *(_QWORD *)(v2 + 480) = CFDictionaryGetValue((CFDictionaryRef)this, CFSTR("identifier"));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v2 + 352), CFSTR("text"));
  *(_QWORD *)(v2 + 488) = Value;
  this = *(_QWORD *)(v2 + 480);
  if (!this || !Value)
    return this;
  if (*(_BYTE *)(v2 + 508) || CFStringHasPrefix((CFStringRef)this, CFSTR("iTun")))
  {
    v5 = malloc_type_malloc(0x80uLL, 0x7C51E058uLL);
    if (!v5)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v22 = std::bad_alloc::bad_alloc(exception);
    }
    *(_QWORD *)(v2 + 496) = v5;
    v5[6] = 0u;
    v5[7] = 0u;
    v5[4] = 0u;
    v5[5] = 0u;
    v5[2] = 0u;
    v5[3] = 0u;
    *v5 = 0u;
    v5[1] = 0u;
    this = CFStringGetCString(*(CFStringRef *)(v2 + 488), *(char **)(v2 + 496), 128, 0x201u);
    if ((_DWORD)this)
    {
      if (!*(_BYTE *)(v2 + 507))
      {
        this = CFStringCompare(*(CFStringRef *)(v2 + 480), CFSTR("iTunSMPB"), 0);
        if (!this)
        {
          this = ParseiTunesSMPBData((char *)(*(_QWORD *)(v2 + 496) + 9), 119, (AudioFilePacketTableInfo *)(v2 + 160));
          if ((_DWORD)this)
            return this;
          *(_BYTE *)(v2 + 507) = 1;
          v11 = *(_QWORD *)(v2 + 8);
          v23 = 0;
          if (*(_BYTE *)(v11 + 106))
            return this;
          *(_BYTE *)(v11 + 106) = 1;
          v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v11 + 24);
          if (!v12)
            return this;
          v13 = *(_QWORD *)(v11 + 40);
          v14 = *(unsigned int *)(v11 + 8);
          v15 = &v23;
          v16 = 1886283375;
          return v12(v13, v14, v16, v15);
        }
      }
      if (*(_BYTE *)(v2 + 506) && *(_BYTE *)(v2 + 509))
        return this;
      this = CFStringCompare(*(CFStringRef *)(v2 + 480), CFSTR("iTunNORM"), 0);
      if (this)
      {
        if (!*(_BYTE *)(v2 + 509))
        {
          this = CFStringCompare(*(CFStringRef *)(v2 + 480), CFSTR("iTunLOUD"), 0);
          if (!this)
          {
            v6 = (CACFDictionary *)operator new();
            *(_QWORD *)v6 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            *((_WORD *)v6 + 4) = 257;
            *(_QWORD *)(v2 + 376) = v6;
            this = ParseiTunesLOUDData(*(const char **)(v2 + 496), v6, v7);
            if ((_DWORD)this)
            {
              this = *(_QWORD *)(v2 + 376);
              if (this)
              {
                CACFDictionary::~CACFDictionary((CACFDictionary *)this);
                this = MEMORY[0x193FFE460]();
                *(_QWORD *)(v2 + 376) = 0;
              }
            }
            else
            {
              v18 = *(CFTypeRef **)(v2 + 360);
              if (v18)
              {
                v19 = *(CACFDictionary **)(v2 + 376);
                if (*v18)
                {
                  CFRetain(*v18);
                  v20 = (const __CFDictionary *)*v18;
                }
                else
                {
                  v20 = 0;
                }
                return CACFDictionary::AddDictionary(v19, CFSTR("sound check info"), v20);
              }
            }
          }
        }
        return this;
      }
      v9 = (CACFDictionary *)operator new();
      *(_QWORD *)v9 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *((_WORD *)v9 + 4) = 257;
      *(_QWORD *)(v2 + 360) = v9;
      if (ParseiTunesNORMData(*(const char **)(v2 + 496), v9, v10))
      {
        this = *(_QWORD *)(v2 + 360);
        if (this)
        {
          CACFDictionary::~CACFDictionary((CACFDictionary *)this);
          this = MEMORY[0x193FFE460]();
          *(_QWORD *)(v2 + 360) = 0;
        }
        return this;
      }
      this = *(_QWORD *)(v2 + 376);
      if (this)
        this = CACFDictionary::AddDictionary((CACFDictionary *)this, CFSTR("sound check info"), **(const __CFDictionary ***)(v2 + 360));
      *(_BYTE *)(v2 + 506) = 1;
      v17 = *(_QWORD *)(v2 + 8);
      v24 = 0;
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v17 + 24);
      if (v12)
      {
        v13 = *(_QWORD *)(v17 + 40);
        v14 = *(unsigned int *)(v17 + 8);
        v15 = &v24;
        v16 = 1935893603;
        return v12(v13, v14, v16, v15);
      }
    }
  }
  else
  {
    v8 = *(CACFDictionary **)(v2 + 368);
    if (!v8)
    {
      v8 = (CACFDictionary *)operator new();
      *(_QWORD *)v8 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *((_WORD *)v8 + 4) = 257;
      *(_QWORD *)(v2 + 368) = v8;
    }
    this = CACFDictionary::HasKey(v8, CFSTR("comments"));
    if ((this & 1) == 0)
      return CACFDictionary::AddString(*(CACFDictionary **)(v2 + 368), CFSTR("comments"), *(const __CFString **)(v2 + 488));
  }
  return this;
}

void sub_18EF4AFEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x1020C40FFEA222ELL);
  _Unwind_Resume(a1);
}

uint64_t ID3FileStream::ProcessLyricFrame(uint64_t this)
{
  char *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD, _QWORD, uint64_t, int *);
  int v6;

  v1 = *(char **)(this + 440);
  if (v1)
  {
    v2 = this;
    v3 = (_QWORD *)(this + 352);
    this = ID3TagBase::CopyFrameData(*(ID3TagBase **)(this + 336), v1, *(_DWORD *)(v2 + 412), *(_DWORD *)(v2 + 344), (const void **)(v2 + 352));
    if (!(_DWORD)this)
    {
      if (*v3)
      {
        *(_BYTE *)(v2 + 504) = 1;
        v4 = *(_QWORD *)(v2 + 8);
        v6 = 0;
        v5 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, int *))(v4 + 24);
        if (v5)
          return v5(*(_QWORD *)(v4 + 40), *(unsigned int *)(v4 + 8), 1280922179, &v6);
      }
    }
  }
  return this;
}

void ID3FileStream::ProcessMLLTFrame(ID3FileStream *this, __n128 a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  int v7;
  char *v8;
  int v9;
  unsigned int *v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int32 v15;
  unsigned __int32 v16;
  unsigned int v17;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  unsigned int v40;
  unsigned __int32 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  char v46;
  unsigned __int32 v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  __n128 v53;
  uint64_t v54;
  char v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int32 v61;
  unsigned __int32 v62;
  uint64_t v63;
  unsigned __int8 *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  int v73;
  void (*v75)(_QWORD, _QWORD, uint64_t, int *, __n128);
  __n128 v76;
  int v77;

  v2 = *((_QWORD *)this + 55);
  if (!v2)
    return;
  v4 = *(unsigned int *)(*((_QWORD *)this + 42) + 56);
  v5 = (unsigned int *)(v2 + v4);
  v6 = v2 + v4 + (*((_DWORD *)this + 103) - v4);
  if (((v2 + v4) & 3) != 0)
  {
    v7 = 0;
    v8 = (char *)v5 + 1;
    v9 = -8;
    v10 = v5;
    do
    {
      v11 = v9;
      if ((unint64_t)v10 >= v6)
        v12 = 255;
      else
        v12 = *(unsigned __int8 *)v10;
      v7 = v12 | (v7 << 8);
      v10 = (unsigned int *)((char *)v10 + 1);
      v9 = v11 + 8;
      v50 = (v8++ & 3) == 0;
    }
    while (!v50);
    a2.n128_u32[0] = v7 << (16 - v11);
    a2.n128_u32[1] = v11 + 16;
  }
  else
  {
    a2 = 0uLL;
    v10 = (unsigned int *)(v2 + v4);
  }
  v13 = *((_QWORD *)this + 1);
  *(_QWORD *)(v13 + 176) = *(_QWORD *)(v13 + 168);
  v14 = a2.n128_u32[0];
  v15 = HIWORD(a2.n128_u32[0]);
  v16 = a2.n128_u32[1] - 16;
  if ((signed __int32)(a2.n128_u32[1] - 16) < 0)
  {
    if ((((_DWORD)v6 - (_DWORD)v10) & ~((uint64_t)(v6 - (_QWORD)v10) >> 63) & 0xFFFFFFFC) == 0 || v5 > v10)
    {
      v19 = 0;
      do
      {
        v20 = (unsigned __int8 *)v10 + v19;
        v21 = 255;
        if ((unint64_t)v10 + v19 < v6 && v20 >= (unsigned __int8 *)v5)
          v21 = *v20;
        v14 = v21 | (v14 << 8);
        ++v19;
      }
      while ((_DWORD)v19 != 4);
    }
    else
    {
      v14 = bswap32(*v10);
    }
    ++v10;
    v16 = a2.n128_u32[1] + 16;
    v15 |= v14 >> (a2.n128_u8[4] + 16);
    if (a2.n128_u32[1] == -16)
    {
      v22 = 0;
      v17 = 0;
      *(_WORD *)(v13 + 152) = v15;
      goto LABEL_28;
    }
    v17 = v14 << (16 - a2.n128_u8[4]);
  }
  else
  {
    v17 = a2.n128_u32[0] << 16;
  }
  *(_WORD *)(v13 + 152) = v15;
  v22 = v17 >> 8;
  v23 = v16 - 24;
  if ((int)(v16 - 24) >= 0)
  {
    v24 = v17 << 24;
    goto LABEL_38;
  }
LABEL_28:
  if ((((_DWORD)v6 - (_DWORD)v10) & ~((uint64_t)(v6 - (_QWORD)v10) >> 63) & 0xFFFFFFFC) != 0 && v5 <= v10)
  {
    v17 = bswap32(*v10);
  }
  else
  {
    v25 = 0;
    do
    {
      v26 = (unsigned __int8 *)v10 + v25;
      v27 = 255;
      if ((unint64_t)v10 + v25 < v6 && v26 >= (unsigned __int8 *)v5)
        v27 = *v26;
      v17 = v27 | (v17 << 8);
      ++v25;
    }
    while ((_DWORD)v25 != 4);
  }
  v23 = v16 + 8;
  v50 = v16 == -8;
  ++v10;
  v22 |= v17 >> (v16 + 8);
  v24 = v17 << (24 - v16);
  if (v50)
    v24 = 0;
LABEL_38:
  *(_DWORD *)(v13 + 156) = v22;
  v28 = 24;
  if (v23 <= 23)
  {
    v28 = 24 - v23;
    if ((24 - v23) >= 0x20)
    {
      v24 = 0;
      v10 = (unsigned int *)((char *)v10 + ((v28 >> 3) & 0x1FFFFFFC));
      v23 = 0;
      v28 &= 0x1Fu;
      if (!v28)
      {
        v30 = 0;
        goto LABEL_58;
      }
    }
    else
    {
      v24 = 0;
      v23 = 0;
    }
  }
  v29 = v23 - v28;
  if ((int)(v23 - v28) < 0)
  {
    if ((((_DWORD)v6 - (_DWORD)v10) & ~((uint64_t)(v6 - (_QWORD)v10) >> 63) & 0xFFFFFFFC) != 0
      && v5 <= v10)
    {
      v31 = *v10++;
      v24 = bswap32(v31);
      v30 = v29 + 32;
    }
    else
    {
      v32 = 0;
      do
      {
        v33 = (unsigned __int8 *)v10 + v32;
        v34 = 255;
        if ((unint64_t)v10 + v32 < v6 && v33 >= (unsigned __int8 *)v5)
          v34 = *v33;
        v24 = v34 | (v24 << 8);
        ++v32;
      }
      while ((_DWORD)v32 != 4);
      ++v10;
      v30 = v29 + 32;
      if (v29 == -32)
      {
        v24 = 0;
        v23 = 0;
        goto LABEL_58;
      }
    }
    v23 = v24 << -(char)v29;
  }
  else
  {
    v23 = v24 << v28;
    v30 = v29;
  }
  v24 = HIBYTE(v23);
  v35 = v30 - 8;
  if (v30 >= 8)
  {
    v36 = v23 << 8;
    goto LABEL_68;
  }
LABEL_58:
  if ((((_DWORD)v6 - (_DWORD)v10) & ~((uint64_t)(v6 - (_QWORD)v10) >> 63) & 0xFFFFFFFC) != 0 && v5 <= v10)
  {
    v23 = bswap32(*v10);
  }
  else
  {
    v37 = 0;
    do
    {
      v38 = (unsigned __int8 *)v10 + v37;
      v39 = 255;
      if ((unint64_t)v10 + v37 < v6 && v38 >= (unsigned __int8 *)v5)
        v39 = *v38;
      v23 = v39 | (v23 << 8);
      ++v37;
    }
    while ((_DWORD)v37 != 4);
  }
  ++v10;
  v35 = v30 + 24;
  v24 |= v23 >> (v30 + 24);
  if (v30 == -24)
  {
    v40 = 0;
    v36 = 0;
    *(_BYTE *)(v13 + 160) = v24;
LABEL_71:
    if ((((_DWORD)v6 - (_DWORD)v10) & ~((uint64_t)(v6 - (_QWORD)v10) >> 63) & 0xFFFFFFFC) != 0
      && v5 <= v10)
    {
      v36 = bswap32(*v10);
      a2.n128_u32[0] = v36;
    }
    else
    {
      v43 = 0;
      do
      {
        v44 = (unsigned __int8 *)v10 + v43;
        v45 = 255;
        if ((unint64_t)v10 + v43 < v6 && v44 >= (unsigned __int8 *)v5)
          v45 = *v44;
        v36 = v45 | (v36 << 8);
        a2.n128_u32[0] = v36;
        ++v43;
      }
      while ((_DWORD)v43 != 4);
    }
    v46 = 8 - v35;
    v47 = v35 + 24;
    a2.n128_u32[1] = v47;
    v48 = v36 << v46;
    ++v10;
    v40 |= v36 >> v47;
    if (v47)
      v42 = v48;
    else
      v42 = 0;
    if (v47)
      v41 = v47;
    else
      v41 = 0;
    goto LABEL_85;
  }
  v36 = v23 << (8 - v30);
LABEL_68:
  *(_BYTE *)(v13 + 160) = v24;
  v40 = HIBYTE(v36);
  a2.n128_u32[0] = v36;
  v41 = v35 - 8;
  a2.n128_u32[1] = v35 - 8;
  if (v35 - 8 < 0)
    goto LABEL_71;
  v42 = v36 << 8;
LABEL_85:
  *(_BYTE *)(v13 + 161) = v40;
  v49 = v40 + v24;
  if (v49)
    v50 = (v49 & 4) == 0;
  else
    v50 = 0;
  if (v50)
  {
    v51 = v41 + 8 * (v6 - (_DWORD)v10);
    v52 = v51 / v49;
    v76 = a2;
    std::vector<unsigned int>::resize((std::vector<int> *)(v13 + 168), v51 / v49);
    v53 = v76;
    if (v49 <= v51)
    {
      v54 = 0;
      v53.n128_u32[0] = v42;
      v55 = *(_BYTE *)(v13 + 161);
      v56 = ~(-1 << *(_BYTE *)(v13 + 160));
      v57 = *(_QWORD *)(v13 + 168);
      if (v52 <= 1)
        v58 = 1;
      else
        v58 = v52;
      do
      {
        if (v49 - 33 >= 0xFFFFFFE0)
        {
          v60 = v53.n128_u32[0];
          v59 = v53.n128_u32[0] >> (32 - v49);
          v61 = v53.n128_u32[1] - v49;
          v53.n128_u32[1] -= v49;
          if (v53.n128_i32[1] < 0)
          {
            if ((((_DWORD)v6 - (_DWORD)v10) & ~((uint64_t)(v6 - (_QWORD)v10) >> 63) & 0xFFFFFFFC) != 0
              && v5 <= v10)
            {
              v60 = bswap32(*v10);
            }
            else
            {
              v63 = 0;
              do
              {
                v64 = (unsigned __int8 *)v10 + v63;
                v65 = 255;
                if ((unint64_t)v10 + v63 < v6 && v64 >= (unsigned __int8 *)v5)
                  v65 = *v64;
                v60 = v65 | (v60 << 8);
                ++v63;
              }
              while ((_DWORD)v63 != 4);
            }
            v53.n128_u32[1] = v61 + 32;
            ++v10;
            v59 |= v60 >> v61;
            if (v61 == -32)
              v62 = 0;
            else
              v62 = v60 << -(char)v61;
          }
          else
          {
            v62 = v53.n128_u32[0] << v49;
          }
          v53.n128_u32[0] = v62;
        }
        else
        {
          v59 = 0;
        }
        *(_DWORD *)(v57 + 4 * v54++) = (v59 >> v55) & v56;
      }
      while (v54 != v58);
    }
    *((_BYTE *)this + 510) = 1;
    v66 = *((_QWORD *)this + 1);
    v67 = *(_QWORD *)(v66 + 48);
    v68 = *(_QWORD *)(v66 + 56);
    v69 = v68 - v67;
    if (v68 != v67)
    {
      v70 = 0;
      v71 = v69 >> 2;
      v72 = 1;
      do
      {
        v73 = *(_DWORD *)(v67 + 4 * v70);
        v70 = v72++;
      }
      while (v73 != 1296845908 && v71 > v70);
      if (v73 == 1296845908)
      {
        v77 = 0;
        v75 = *(void (**)(_QWORD, _QWORD, uint64_t, int *, __n128))(v66 + 24);
        if (v75)
          v75(*(_QWORD *)(v66 + 40), *(unsigned int *)(v66 + 8), 1296845908, &v77, v53);
      }
    }
  }
}

void ID3FileStream::EndOfFrame(ID3FileStream *this)
{
  const void *v2;
  CACFDictionary *v3;
  void *v4;
  void *v5;

  *((_DWORD *)this + 86) += *((_DWORD *)this + 103);
  v2 = (const void *)*((_QWORD *)this + 44);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 44) = 0;
  }
  if (*((_BYTE *)this + 508))
  {
    v3 = (CACFDictionary *)*((_QWORD *)this + 46);
    if (v3)
    {
      CACFDictionary::~CACFDictionary(v3);
      MEMORY[0x193FFE460]();
      *((_QWORD *)this + 46) = 0;
    }
  }
  v4 = (void *)*((_QWORD *)this + 55);
  if (v4)
  {
    free(v4);
    *((_QWORD *)this + 55) = 0;
  }
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  v5 = (void *)*((_QWORD *)this + 62);
  if (v5)
  {
    free(v5);
    *((_QWORD *)this + 62) = 0;
  }
}

void ID3FileFormat::~ID3FileFormat(ID3FileFormat *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t ID3FileFormat::ExtensionIsThisFormat(ID3FileFormat *this, const __CFString *a2)
{
  return 0;
}

uint64_t ID3FileFormat::FileDataIsThisFormat(ID3FileFormat *this, unsigned int a2, _BYTE *a3)
{
  if (a2 < 3)
    return 0xFFFFFFFFLL;
  if (*(_WORD *)a3 == 17481 && a3[2] == 51)
    return 1;
  return *(_WORD *)a3 == 16724 && a3[2] == 71;
}

void ID3FileFormat::GetExtensions(ID3FileFormat *this, const __CFArray **a2)
{
  *a2 = 0;
}

void ID3FileFormat::GetFileTypeName(ID3FileFormat *this, const __CFString **a2)
{
  *a2 = 0;
}

uint64_t ID3FileFormat::GetAvailableFormatIDs(ID3FileFormat *this, unsigned int *a2, void *a3)
{
  *a2 = 0;
  return 0;
}

uint64_t ID3FileFormat::GetAvailableStreamDescriptions(ID3FileFormat *this, unsigned int a2, unsigned int *a3, void *a4)
{
  *a3 = 0;
  return 0;
}

uint64_t ID3FileFormat::GetHFSCodes(ID3FileFormat *this, unsigned int *a2, void *a3)
{
  *a2 = 0;
  return 0;
}

uint64_t ID3FileFormat::New(ID3FileFormat *this)
{
  return 0;
}

double ID3FileFormat::NewStream(ID3FileFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = -1;
  *(_QWORD *)(v1 + 96) = -1;
  *(_QWORD *)(v1 + 104) = -1;
  *(_QWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 208) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 224) = 0;
  *(_OWORD *)(v1 + 240) = xmmword_18F116F80;
  *(_DWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 300) = 0;
  *(_QWORD *)(v1 + 284) = 0;
  *(_QWORD *)(v1 + 292) = 0;
  *(_DWORD *)(v1 + 328) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)v1 = &off_1E2903148;
  *(_QWORD *)(v1 + 440) = 0;
  *(_DWORD *)(v1 + 448) = 0;
  *(_QWORD *)(v1 + 456) = 0;
  *(_BYTE *)(v1 + 512) = 0;
  *(_BYTE *)(v1 + 536) = 0;
  *(_BYTE *)(v1 + 544) = 0;
  *(_BYTE *)(v1 + 616) = 0;
  *(_QWORD *)(v1 + 340) = 0;
  *(_QWORD *)(v1 + 332) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_QWORD *)(v1 + 384) = 0;
  *(_OWORD *)(v1 + 402) = 0u;
  *(_OWORD *)(v1 + 418) = 0u;
  *(_QWORD *)(v1 + 480) = 0;
  *(_QWORD *)(v1 + 488) = 0;
  *(_QWORD *)(v1 + 503) = 0;
  *(_QWORD *)(v1 + 496) = 0;
  return result;
}

uint64_t std::optional<AudioFileAllowListFilter>::operator=[abi:ne180100]<AudioFileAllowListFilter const&,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 72))
  {
    AudioFileAllowListFilter::operator=(a1, a2);
  }
  else
  {
    *(_BYTE *)(a1 + 64) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 25) = 0u;
    AudioFileAllowListFilter::operator=(a1, a2);
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_18EF4BA4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  if (*(_BYTE *)(v1 + 64))
  {
    v3 = *(void **)(v1 + 40);
    if (v3)
    {
      *(_QWORD *)(v1 + 48) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void NextAudioFile::~NextAudioFile(NextAudioFile *this)
{
  AudioFileObject::~AudioFileObject(this);
  JUMPOUT(0x193FFE460);
}

void NextAudioFile::Create(NextAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t v6;
  AudioFormatID mFormatID;
  int v8;
  BOOL v9;
  int v10;

  v6 = 0;
  mFormatID = a3->mFormatID;
  do
  {
    v8 = *(_DWORD *)&sNextFormatIDs[v6];
    v9 = v8 == mFormatID || v6 == 8;
    v6 += 4;
  }
  while (!v9);
  if (v8 == mFormatID)
  {
    MakeSNDSoundStruct((uint64_t)a3, (uint64_t)this + 140);
    if (!v10 && !AudioFileObject::Create(this, a2, a3))
    {
      (*(void (**)(NextAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, a3->mBytesPerFrame);
      NextAudioFile::WriteHeader(this);
    }
  }
}

uint64_t NextAudioFile::OpenFromDataSource(NextAudioFile *this)
{
  uint64_t v2;
  int8x16_t v3;
  int8x8_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  unsigned int v9;
  int v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  _DWORD v14[6];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, char *, int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, 0, 28, (char *)this + 140, &v10);
  v3 = vrev32q_s8(*(int8x16_t *)((char *)this + 140));
  *(int8x16_t *)((char *)this + 140) = v3;
  v4 = vrev32_s8(*(int8x8_t *)((char *)this + 156));
  *(int8x8_t *)((char *)this + 156) = v4;
  if ((_DWORD)v2)
  {
    v5 = v2;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "NextAudioFile.cpp";
      v13 = 1024;
      v14[0] = 367;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes Failed", buf, 0x12u);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "NextAudioFile.cpp";
      v13 = 1024;
      v14[0] = 300;
      v6 = MEMORY[0x1E0C81028];
      v7 = "%25s:%-5d  NextAudioFile::OpenFromDataSource - ReadHeader Failed";
LABEL_12:
      _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_ERROR, v7, buf, 0x12u);
    }
  }
  else
  {
    if (v4.i32[0] >= 0xFFFF0000)
      *((_DWORD *)this + 39) = v4.u16[0];
    *((_QWORD *)this + 9) = v3.u32[1];
    v5 = ASBDfromSNDSoundStruct((_DWORD *)this + 35, (uint64_t)buf);
    if ((_DWORD)v5
      || (v5 = (*(uint64_t (**)(NextAudioFile *, uint8_t *))(*(_QWORD *)this + 176))(this, buf), (_DWORD)v5))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v12 = "NextAudioFile.cpp";
        v13 = 1024;
        v14[0] = 303;
        v6 = MEMORY[0x1E0C81028];
        v7 = "%25s:%-5d  NextAudioFile::OpenFromDataSource - ParseHeader Failed";
        goto LABEL_12;
      }
    }
    else
    {
      v9 = *((_DWORD *)this + 37);
      if (v9 == -1)
      {
        (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 13) + 16))(*((_QWORD *)this + 13), (char *)this + 148);
        v9 = *((_DWORD *)this + 37);
      }
      (*(void (**)(NextAudioFile *, _QWORD))(*(_QWORD *)this + 232))(this, v9);
      (*(void (**)(NextAudioFile *, _QWORD))(*(_QWORD *)this + 248))(this, (*((_DWORD *)this + 37) / *(_DWORD *)((char *)v14 + 2)));
      (*(void (**)(NextAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, *(_DWORD *)((char *)v14 + 2));
      return 0;
    }
  }
  return v5;
}

uint64_t NextAudioFile::InitializeDataSource(NextAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v3;
  AudioFormatID mFormatID;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v3 = 0;
  v14 = *MEMORY[0x1E0C80C00];
  mFormatID = a2->mFormatID;
  do
  {
    v5 = *(_DWORD *)&sNextFormatIDs[v3];
    v6 = v5 == mFormatID || v3 == 8;
    v3 += 4;
  }
  while (!v6);
  if (v5 != mFormatID)
    return 1718449215;
  MakeSNDSoundStruct((uint64_t)a2, (uint64_t)this + 140);
  v8 = v7;
  if ((_DWORD)v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "NextAudioFile.cpp";
      v12 = 1024;
      v13 = 318;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  MakeSNDSoundStruct Failed", (uint8_t *)&v10, 0x12u);
    }
  }
  else
  {
    NextAudioFile::WriteHeader(this);
  }
  return v8;
}

void NextAudioFile::UpdateDataFormat(NextAudioFile *this, const AudioStreamBasicDescription *a2)
{
  double SNDSoundStruct;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int8x16_t v8;
  int8x16_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int8x16_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  SNDSoundStruct = MakeSNDSoundStruct((uint64_t)a2, (uint64_t)&v13);
  if (!v5
    && !(*(unsigned int (**)(NextAudioFile *, const AudioStreamBasicDescription *, double))(*(_QWORD *)this + 176))(this, a2, SNDSoundStruct))
  {
    v6 = v14;
    v7 = v15;
    *((_DWORD *)this + 39) = v14;
    *((_DWORD *)this + 40) = v7;
    v8 = v13;
    *((_DWORD *)this + 38) = v13.i32[3];
    v9 = vrev32q_s8(v8);
    v10 = bswap32(v6);
    v11 = bswap32(v7);
    v12 = v16;
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, unint64_t, _QWORD))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, 12, 12, (unint64_t)&v9 | 0xC, 0);
  }
}

uint64_t NextAudioFile::UpdateSize(NextAudioFile *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  int v8;
  unsigned int v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(NextAudioFile *))(*(_QWORD *)this + 224))(this);
  *((_DWORD *)this + 37) = v2;
  v8 = 0;
  v9 = bswap32(v2);
  v3 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, int *))(**((_QWORD **)this + 13)
                                                                                          + 56))(*((_QWORD *)this + 13), 0, 8, 4, &v9, &v8);
  if ((_DWORD)v3)
  {
    v4 = v3;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v11 = "NextAudioFile.cpp";
      v12 = 1024;
      v13 = 336;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d  WriteBytes Failed";
LABEL_7:
      _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, v6, buf, 0x12u);
    }
  }
  else
  {
    v4 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), (*((_DWORD *)this + 37) + *((_DWORD *)this + 36)));
    if ((_DWORD)v4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v11 = "NextAudioFile.cpp";
      v12 = 1024;
      v13 = 339;
      v5 = MEMORY[0x1E0C81028];
      v6 = "%25s:%-5d  SetSize Failed";
      goto LABEL_7;
    }
  }
  return v4;
}

BOOL NextAudioFile::IsDataFormatSupported(NextAudioFile *this, const AudioStreamBasicDescription *a2)
{
  int v2;
  _BYTE v4[28];

  MakeSNDSoundStruct((uint64_t)a2, (uint64_t)v4);
  return v2 == 0;
}

uint64_t AudioFileObject::ScanForPackets(AudioFileObject *this, uint64_t a2, DataSource *a3)
{
  if ((*(uint64_t (**)(AudioFileObject *, uint64_t, DataSource *))(*(_QWORD *)this + 240))(this, a2, a3) >= a2)
    return 0;
  else
    return 4294967257;
}

double MakeSNDSoundStruct(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  double result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 1634492791)
  {
    v7 = 27;
    goto LABEL_15;
  }
  if (v2 == 1970037111)
  {
    v7 = 1;
    goto LABEL_15;
  }
  if (v2 != 1819304813)
    return result;
  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 32);
  if ((v3 & 1) == 0)
  {
    HIDWORD(v5) = *(_DWORD *)(a1 + 32);
    LODWORD(v5) = v4 - 8;
    v6 = 3;
    v7 = 2;
    switch((v5 >> 3))
    {
      case 0u:
        goto LABEL_15;
      case 1u:
        goto LABEL_14;
      case 2u:
        v6 = 4;
        goto LABEL_14;
      case 3u:
        v6 = 5;
        goto LABEL_14;
      default:
        return result;
    }
    return result;
  }
  if (v4 == 32)
  {
    v6 = 6;
  }
  else
  {
    if (v4 != 64)
      return result;
    v6 = 7;
  }
LABEL_14:
  v7 = v6;
  if ((v3 & 2) != 0)
  {
LABEL_15:
    v8 = (int)*(double *)a1;
    v9 = *(_DWORD *)(a1 + 28);
    *(_QWORD *)&result = 0x1C2E736E64;
    *(_QWORD *)a2 = 0x1C2E736E64;
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v7;
    *(_DWORD *)(a2 + 16) = v8;
    *(_QWORD *)(a2 + 20) = v9;
  }
  return result;
}

void NextAudioFile::WriteHeader(NextAudioFile *this)
{
  int v1;
  int8x16_t v2;
  int8x8_t v3;
  int v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 9) = 28;
  v2 = vrev32q_s8(*(int8x16_t *)((char *)this + 140));
  v3 = vrev32_s8(*(int8x8_t *)((char *)this + 156));
  v4 = *((_DWORD *)this + 41);
  v1 = 0;
  if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, uint64_t, int8x16_t *, int *))(**((_QWORD **)this + 13)
                                                                                           + 56))(*((_QWORD *)this + 13), 0, 0, 28, &v2, &v1))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v6 = "NextAudioFile.cpp";
      v7 = 1024;
      v8 = 388;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  WriteBytes Failed", buf, 0x12u);
    }
  }
}

uint64_t ASBDfromSNDSoundStruct(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  int v9;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 12) = 10;
  *(double *)a2 = (double)a1[4];
  v2 = a1[5];
  *(_DWORD *)(a2 + 28) = v2;
  *(_DWORD *)(a2 + 20) = 1;
  v3 = a1[3];
  switch(v3)
  {
    case 1:
      v4 = 1970037111;
      goto LABEL_5;
    case 2:
      *(_QWORD *)(a2 + 8) = 0xE6C70636DLL;
      goto LABEL_7;
    case 3:
      *(_QWORD *)(a2 + 8) = 0xE6C70636DLL;
      v5 = 2;
      v6 = 16;
      goto LABEL_14;
    case 4:
      *(_QWORD *)(a2 + 8) = 0xE6C70636DLL;
      v5 = 3;
      v6 = 24;
      goto LABEL_14;
    case 5:
      v7 = 0xE6C70636DLL;
      goto LABEL_12;
    case 6:
      v7 = 0xB6C70636DLL;
LABEL_12:
      *(_QWORD *)(a2 + 8) = v7;
      v5 = 4;
      v6 = 32;
      goto LABEL_14;
    case 7:
      *(_QWORD *)(a2 + 8) = 0xB6C70636DLL;
      v5 = 8;
      v6 = 64;
      goto LABEL_14;
    default:
      if (v3 != 27)
        return 1718449215;
      v4 = 1634492791;
LABEL_5:
      *(_DWORD *)(a2 + 8) = v4;
LABEL_7:
      v5 = 1;
      v6 = 8;
LABEL_14:
      result = 0;
      *(_DWORD *)(a2 + 32) = v6;
      v9 = v5 * v2;
      *(_DWORD *)(a2 + 24) = v9;
      *(_DWORD *)(a2 + 16) = v9;
      return result;
  }
}

void NextAudioFormat::~NextAudioFormat(NextAudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

BOOL NextAudioFormat::FileDataIsThisFormat(NextAudioFormat *this, unsigned int a2, _DWORD *a3)
{
  return a2 >= 4 && *a3 == 1684960046;
}

const __CFArray *NextAudioFormat::GetExtensions(NextAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("snd");
  values[1] = CFSTR("au");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *NextAudioFormat::GetUTIs(NextAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("public.au-audio");
  values[1] = CFSTR("public.ulaw-audio");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *NextAudioFormat::GetMIMETypes(NextAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[4];

  v4[3] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("audio/basic");
  v4[1] = CFSTR("audio/au");
  v4[2] = CFSTR("audio/snd");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 3, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void NextAudioFormat::GetFileTypeName(NextAudioFormat *this, const __CFString **a2)
{
  __CFBundle *v3;
  const __CFString *v4;
  char v5;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_5:
    v4 = (const __CFString *)CFRetain(CFSTR("NeXT/Sun"));
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle)
    goto LABEL_5;
LABEL_3:
  v4 = CFBundleCopyLocalizedString(v3, CFSTR("NeXT/Sun"), CFSTR("NeXT/Sun"), CFSTR("FileTypeNames"));
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_18EF4C6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t NextAudioFormat::GetAvailableFormatIDs(NextAudioFormat *this, unsigned int *a2, void *__dst)
{
  unsigned int v3;
  size_t v4;

  v3 = *a2 >> 2;
  if (v3 >= 3)
    v3 = 3;
  v4 = 4 * v3;
  *a2 = v4;
  if (__dst)
    memcpy(__dst, "mcplwaluwala", v4);
  return 0;
}

uint64_t NextAudioFormat::GetAvailableStreamDescriptions(NextAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  int v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  UInt32 ioPropertyDataSize;
  __int128 outPropertyData;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = 1634492791;
  if (a2 == 1634492791 || (v6 = 1970037111, a2 == 1970037111))
  {
    *(_QWORD *)&v15 = 0;
    outPropertyData = 0u;
    v14 = 0u;
    DWORD2(outPropertyData) = v6;
    ioPropertyDataSize = 40;
    AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, &outPropertyData);
    v9 = 1;
  }
  else
  {
    if (a2 != 1819304813)
    {
      *a3 = 0;
      return 1718449215;
    }
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v7 = (_DWORD *)&v14 + 1;
    outPropertyData = 0u;
    v14 = 0u;
    v8 = -32;
    do
    {
      *(_QWORD *)(v7 - 3) = 0xE6C70636DLL;
      v7[3] = v8 + 40;
      *v7 = 1;
      v7 += 10;
      v8 += 8;
    }
    while (v8);
    *((_QWORD *)&v23 + 1) = 0xB6C70636DLL;
    LODWORD(v25) = 32;
    DWORD1(v24) = 1;
    *(_QWORD *)&v26 = 0xB6C70636DLL;
    DWORD2(v27) = 64;
    HIDWORD(v26) = 1;
    v9 = 6;
  }
  if (*a3 / 0x28 < v9)
    v9 = *a3 / 0x28;
  v10 = 40 * v9;
  *a3 = v10;
  if (__dst)
    memcpy(__dst, &outPropertyData, v10);
  return 0;
}

uint64_t NextAudioFormat::GetHFSCodes(NextAudioFormat *this, unsigned int *a2, void *__dst)
{
  unsigned int v3;
  size_t v4;
  _QWORD __src[3];

  __src[2] = *MEMORY[0x1E0C80C00];
  qmemcpy(__src, "sTxNTXeNSTxN", 12);
  v3 = *a2 >> 2;
  if (v3 >= 3)
    v3 = 3;
  v4 = 4 * v3;
  *a2 = v4;
  if (__dst)
    memcpy(__dst, __src, v4);
  return 0;
}

double NextAudioFormat::New(NextAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 80) = 0x4E65585400000001;
  *(_QWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 96) = -1;
  *(_WORD *)(v1 + 100) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0x100000000;
  *(_DWORD *)(v1 + 136) = 65792;
  result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)v1 = &off_1E2903818;
  *(_QWORD *)(v1 + 8) = 0;
  return result;
}

double NextAudioFormat::NewStream(NextAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = -1;
  *(_QWORD *)(v1 + 96) = -1;
  *(_QWORD *)(v1 + 104) = -1;
  *(_QWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 208) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 224) = 0;
  *(_QWORD *)&result = 112;
  *(_OWORD *)(v1 + 240) = xmmword_18F116F80;
  *(_DWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 300) = 0;
  *(_QWORD *)(v1 + 284) = 0;
  *(_QWORD *)(v1 + 292) = 0;
  *(_DWORD *)(v1 + 328) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)v1 = &off_1E2905C48;
  return result;
}

CA::AudioMetadataDeserializer *CA::AudioMetadataDeserializer::AudioMetadataDeserializer(CA::AudioMetadataDeserializer *this, AudioMetadataMemoryPool *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  CA::AudioMetadataDeserializer::Impl::Impl(v4, (uint64_t)a2);
  *(_QWORD *)this = v5;
  return this;
}

{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  CA::AudioMetadataDeserializer::Impl::Impl(v4, (uint64_t)a2);
  *(_QWORD *)this = v5;
  return this;
}

double CA::AudioMetadataDeserializer::Impl::Impl(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 1065353216;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_DWORD *)(a1 + 576) = 1065353216;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_DWORD *)(a1 + 616) = 1065353216;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_DWORD *)(a1 + 656) = 1065353216;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_DWORD *)(a1 + 696) = 1065353216;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_DWORD *)(a1 + 736) = 1065353216;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 776) = 1065353216;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 816) = 1065353216;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_DWORD *)(a1 + 856) = 1065353216;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_DWORD *)(a1 + 896) = 1065353216;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_DWORD *)(a1 + 936) = 1065353216;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_DWORD *)(a1 + 976) = 1065353216;
  return result;
}

void CA::AudioMetadataDeserializer::~AudioMetadataDeserializer(CA::AudioMetadataDeserializer *this)
{
  std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

{
  std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

uint64_t *std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 944);
    *(_QWORD *)(v2 + 944) = 0;
    if (v3)
      operator delete(v3);
    v4 = *(_QWORD **)(v2 + 920);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    v6 = *(void **)(v2 + 904);
    *(_QWORD *)(v2 + 904) = 0;
    if (v6)
      operator delete(v6);
    v7 = *(_QWORD **)(v2 + 760);
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    v9 = *(void **)(v2 + 744);
    *(_QWORD *)(v2 + 744) = 0;
    if (v9)
      operator delete(v9);
    v10 = *(void **)(v2 + 704);
    *(_QWORD *)(v2 + 704) = 0;
    if (v10)
      operator delete(v10);
    v11 = *(void **)(v2 + 424);
    *(_QWORD *)(v2 + 424) = 0;
    if (v11)
      operator delete(v11);
    v12 = *(_QWORD **)(v2 + 400);
    if (v12)
    {
      do
      {
        v13 = (_QWORD *)*v12;
        operator delete(v12);
        v12 = v13;
      }
      while (v13);
    }
    v14 = *(void **)(v2 + 384);
    *(_QWORD *)(v2 + 384) = 0;
    if (v14)
      operator delete(v14);
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(v2 + 208));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(v2 + 184));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(v2 + 160));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(v2 + 136));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(v2 + 112));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(v2 + 88));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(v2 + 64));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(v2 + 40));
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(v2 + 16));
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<`anonymous namespace'::BlockFormatID,std::vector<`anonymous namespace'::FormatID>>,std::__unordered_map_hasher<`anonymous namespace'::BlockFormatID,std::__hash_value_type<`anonymous namespace'::BlockFormatID,std::vector<`anonymous namespace'::FormatID>>,std::hash<`anonymous namespace'::BlockFormatID>,std::equal_to<`anonymous namespace'::BlockFormatID>,true>,std::__unordered_map_equal<`anonymous namespace'::BlockFormatID,std::__hash_value_type<`anonymous namespace'::BlockFormatID,std::vector<`anonymous namespace'::FormatID>>,std::equal_to<`anonymous namespace'::BlockFormatID>,std::hash<`anonymous namespace'::BlockFormatID>,true>,std::allocator<std::__hash_value_type<`anonymous namespace'::BlockFormatID,std::vector<`anonymous namespace'::FormatID>>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = (void *)v1[3];
      if (v3)
      {
        v1[4] = v3;
        operator delete(v3);
      }
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<`anonymous namespace'::FormatID,std::vector<`anonymous namespace'::FormatID>>,std::__unordered_map_hasher<`anonymous namespace'::FormatID,std::__hash_value_type<`anonymous namespace'::FormatID,std::vector<`anonymous namespace'::FormatID>>,std::hash<`anonymous namespace'::FormatID>,std::equal_to<`anonymous namespace'::FormatID>,true>,std::__unordered_map_equal<`anonymous namespace'::FormatID,std::__hash_value_type<`anonymous namespace'::FormatID,std::vector<`anonymous namespace'::FormatID>>,std::equal_to<`anonymous namespace'::FormatID>,std::hash<`anonymous namespace'::FormatID>,true>,std::allocator<std::__hash_value_type<`anonymous namespace'::FormatID,std::vector<`anonymous namespace'::FormatID>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

_QWORD *CA::AudioMetadataDeserializer::AudioMetadataDeserializer(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t *CA::AudioMetadataDeserializer::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  std::unique_ptr<CA::AudioMetadataDeserializer::Impl>::reset[abi:ne180100](a1, v3);
  return a1;
}

uint64_t CA::AudioMetadataDeserializer::deserialize(uint64_t *a1, _anonymous_namespace_ *a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5)
{
  return CA::AudioMetadataDeserializer::Impl::deserialize(*a1, a2, a3, a4, a5);
}

uint64_t CA::AudioMetadataDeserializer::Impl::deserialize(uint64_t a1, _anonymous_namespace_ *this, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  unsigned int v16;
  NSObject *v17;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t j;
  uint64_t v26;
  uint64_t k;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t m;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t n;
  uint64_t v36;
  uint64_t ii;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned __int16 *v44;
  int v45;
  unsigned __int8 *v46;
  unsigned int data_low;
  uint64_t v48;
  unsigned __int8 *v49;
  const unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  uint64_t *v56;
  NSObject *v57;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  _QWORD *v74;
  unsigned __int16 *v75;
  unsigned __int16 *v76;
  char *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  BOOL v82;
  uint64_t *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  unint64_t *p_shared_owners;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  NSObject *v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  unint64_t *v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  _QWORD *v126;
  unsigned __int16 *v127;
  unsigned __int16 *v128;
  char *v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  NSObject *v157;
  uint64_t v158;
  int v159;
  int v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  char *nn;
  unsigned __int16 *v180;
  unsigned __int16 *v181;
  _QWORD *i1;
  unsigned __int16 *v183;
  unsigned __int16 *v184;
  _QWORD *i2;
  unsigned __int16 *v186;
  unsigned __int16 *v187;
  uint64_t i3;
  uint64_t i4;
  _QWORD *i5;
  unsigned __int16 *v191;
  unsigned __int16 *v192;
  uint64_t i6;
  uint64_t i7;
  _QWORD *i8;
  unsigned __int16 *v196;
  unsigned __int16 *v197;
  uint64_t *i9;
  unsigned int v199;
  BOOL v200;
  uint64_t **v201;
  __int128 v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  int v207;
  unint64_t v208;
  const char *v209;
  size_t v210;
  std::string *v211;
  uint64_t **v212;
  __int128 v213;
  unint64_t *v214;
  unint64_t v215;
  char *v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t **v219;
  __int128 v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t **v225;
  __int128 v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  const char *v233;
  size_t v234;
  std::string *v235;
  uint64_t **v236;
  __int128 v237;
  unint64_t *v238;
  unint64_t v239;
  char *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t **v243;
  __int128 v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t **v249;
  __int128 v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  char *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t *v259;
  uint64_t *v260;
  uint64_t *v261;
  unsigned __int16 v262;
  unsigned __int16 *v263;
  _QWORD *v264;
  unsigned __int16 *v265;
  unsigned __int16 *v266;
  _QWORD *v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  unsigned int v271;
  BOOL v272;
  uint64_t *v273;
  uint64_t v274;
  _QWORD *v275;
  _QWORD *v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  _QWORD *v292;
  unsigned __int16 *v293;
  unsigned __int16 *v294;
  _QWORD *v295;
  uint64_t v296;
  unsigned int v297;
  uint64_t v298;
  unsigned int v299;
  BOOL v300;
  uint64_t *v301;
  uint64_t v302;
  _QWORD *v303;
  _QWORD *v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t v320;
  int8x8_t v321;
  uint8x8_t v322;
  unint64_t v323;
  NSObject *v324;
  uint64_t v325;
  int v326;
  int v327;
  NSObject *v328;
  uint64_t v329;
  int v330;
  NSObject *v331;
  const char *v332;
  uint32_t v333;
  uint64_t **v334;
  uint64_t *i10;
  unint64_t v336;
  unsigned int v337;
  uint64_t *v338;
  uint64_t *v339;
  unsigned __int16 *v340;
  unsigned __int16 *v341;
  uint64_t *v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t *v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t *v356;
  unint64_t *v357;
  unint64_t v358;
  NSObject *v359;
  uint64_t v360;
  int v361;
  int v362;
  uint64_t *v363;
  uint64_t *v364;
  NSObject *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t *v369;
  unint64_t *v370;
  unint64_t v371;
  unsigned __int16 *v372;
  uint64_t *v373;
  unsigned __int16 *v374;
  unsigned __int16 *v375;
  uint64_t *v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t *v379;
  uint64_t *v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t *v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  uint64_t *v396;
  unsigned __int16 *v397;
  unsigned __int16 *v398;
  uint64_t *v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t *v402;
  uint64_t *v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t *v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  uint64_t *v419;
  unsigned __int16 *v420;
  unsigned __int16 *v421;
  uint64_t *v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t *v425;
  uint64_t *v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  uint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t *v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  uint64_t *v442;
  unsigned __int16 *v443;
  unsigned __int16 *v444;
  uint64_t *v445;
  uint64_t *v446;
  uint64_t v447;
  _QWORD *v448;
  uint64_t *v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t *v458;
  uint64_t *v459;
  unint64_t *v460;
  unint64_t v461;
  unsigned __int16 v462;
  unsigned __int16 v463;
  uint64_t **v464;
  uint64_t **v465;
  uint64_t *v466;
  uint64_t **v467;
  uint64_t **v468;
  uint64_t *v469;
  int v470;
  NSObject *v471;
  uint64_t v472;
  int v473;
  int v474;
  NSObject *v475;
  uint64_t v476;
  int v477;
  int v478;
  NSObject *v479;
  uint64_t v480;
  int v481;
  int v482;
  NSObject *v483;
  uint64_t v484;
  int v485;
  int v486;
  NSObject *v487;
  const char *v488;
  NSObject *v489;
  uint64_t v490;
  int v491;
  int v492;
  NSObject *v493;
  uint64_t v494;
  int v495;
  int v496;
  uint64_t *v497;
  uint64_t *v498;
  uint64_t v499;
  uint64_t *v500;
  uint64_t *v501;
  unint64_t *v502;
  unint64_t v503;
  unsigned __int16 *v504;
  uint64_t *v505;
  unsigned __int16 *v506;
  unsigned __int16 *v507;
  uint64_t *v508;
  uint64_t *v509;
  uint64_t v510;
  uint64_t *v511;
  uint64_t *v512;
  uint64_t v513;
  unint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t *v521;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  NSObject *v525;
  uint64_t v526;
  int v527;
  int v528;
  int v529;
  int v530;
  std::__shared_weak_count *v531;
  unint64_t *v532;
  unint64_t v533;
  uint64_t v534;
  char *v535;
  _QWORD *v536;
  char *v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  _QWORD *v543;
  uint64_t v544;
  unsigned __int16 *v545;
  unsigned __int16 *v546;
  uint64_t v547;
  uint64_t *v548;
  uint64_t *v549;
  unint64_t *v550;
  unint64_t v551;
  _QWORD *v552;
  _QWORD *v553;
  uint64_t v554;
  uint64_t v555;
  int8x8_t v556;
  unint64_t v557;
  uint8x8_t v558;
  unint64_t v559;
  unsigned __int16 **v560;
  unsigned __int16 *i11;
  unint64_t v562;
  uint64_t *v564;
  uint64_t **v565;
  uint64_t **v566;
  uint64_t *v567;
  uint64_t **v568;
  uint64_t **v569;
  uint64_t *v570;
  uint64_t v571;
  _QWORD *v572;
  uint64_t v573;
  unint64_t v574;
  uint64_t v575;
  unint64_t v576;
  uint64_t v577;
  _QWORD *v578;
  _QWORD *v579;
  uint64_t v580;
  _QWORD *v581;
  _QWORD *v582;
  uint64_t v583;
  uint64_t *v584;
  uint64_t *v585;
  unint64_t *v586;
  unint64_t v587;
  _QWORD *v588;
  uint64_t *v589;
  uint64_t v590;
  _QWORD *v591;
  _QWORD *v592;
  uint64_t v593;
  uint64_t *v594;
  uint64_t *v595;
  unint64_t *v596;
  _QWORD *v597;
  unint64_t v598;
  NSObject *v599;
  const char *v600;
  NSObject *v601;
  int v602;
  int v603;
  uint64_t v604;
  NSObject *v605;
  NSObject *v606;
  uint64_t v607;
  int v608;
  int v609;
  const char *v610;
  uint64_t v611;
  int v612;
  int v613;
  NSObject *v614;
  uint32_t v615;
  _QWORD *v616;
  uint64_t **v617;
  uint64_t **v618;
  uint64_t *v619;
  uint64_t v620;
  _QWORD *v621;
  _QWORD *v622;
  uint64_t v623;
  uint64_t *v624;
  uint64_t *v625;
  unint64_t *v626;
  unint64_t v627;
  unsigned __int16 *v628;
  unsigned __int16 *v629;
  uint64_t v630;
  uint64_t *v631;
  uint64_t *v632;
  uint64_t *v633;
  uint64_t v634;
  unint64_t v635;
  uint64_t v636;
  unsigned __int16 *v637;
  uint64_t *v638;
  uint64_t v639;
  unsigned __int16 *v640;
  unsigned __int16 *v641;
  NSObject *v642;
  uint64_t v643;
  int v644;
  int v645;
  const char *v646;
  NSObject *v647;
  uint64_t v648;
  int v649;
  int v650;
  NSObject *v651;
  uint64_t v652;
  int v653;
  int v654;
  int v655;
  uint64_t v656;
  int v657;
  int v658;
  _QWORD *v659;
  unsigned __int16 *v660;
  uint64_t **v661;
  uint64_t *v662;
  uint64_t *v663;
  uint64_t *v664;
  uint64_t v665;
  unint64_t v666;
  uint64_t *v667;
  uint64_t *v668[2];
  uint64_t *v669[2];
  uint64_t *v670[2];
  uint64_t *v671[2];
  uint64_t *v672;
  std::__shared_weak_count *v673;
  uint64_t *v674[2];
  uint64_t *v675[2];
  uint64_t *v676;
  std::__shared_weak_count *v677;
  __int128 v678;
  unint64_t v679;
  uint64_t *v680;
  std::__shared_weak_count *v681;
  uint64_t *v682;
  std::__shared_weak_count *v683;
  uint64_t *v684[2];
  uint64_t *v685[2];
  __int128 v686;
  unint64_t v687;
  uint64_t *v688;
  std::__shared_weak_count *v689;
  __int128 v690;
  unint64_t v691;
  uint64_t *v692;
  std::__shared_weak_count *v693;
  __int128 v694;
  unint64_t v695;
  void *__p;
  char *v697;
  char *v698;
  uint64_t *v699[2];
  uint64_t *v700;
  std::__shared_weak_count *v701;
  void *v702;
  char *v703;
  unint64_t v704;
  uint64_t *v705[2];
  uint64_t *v706;
  std::__shared_weak_count *v707;
  unint64_t v708;
  char *v709;
  unint64_t v710;
  unint64_t v711;
  unsigned __int8 v712;
  unint64_t v713;
  int v714;
  std::string v715;
  _BYTE buf[30];
  _BYTE v717[10];
  __int16 v718;
  int v719;
  char __str[8];
  _QWORD *v721;
  unint64_t v722;
  uint64_t v723;

  v723 = *MEMORY[0x1E0C80C00];
  v713 = 0;
  v712 = 0;
  if ((_DWORD)v9)
  {
    v11 = v9;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      return v11;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 503;
    v13 = "%25s:%-5d ...at packet version/type";
    goto LABEL_4;
  }
  v16 = v712;
  if (v712 >= 4u)
  {
    v11 = 4294900723;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      return v11;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 508;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v16 >> 2;
    v13 = "%25s:%-5d Unsupported packet version (%d)";
LABEL_12:
    v14 = v17;
    v15 = 24;
    goto LABEL_13;
  }
  if (v712 != 2)
  {
    if (v712 == 3)
    {
      v11 = 4294900722;
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        return v11;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 517;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 3;
      v13 = "%25s:%-5d Unknown packet type (%d)";
      goto LABEL_12;
    }
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 8) = a1 + 16;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(a1 + 40));
    *(_QWORD *)(a1 + 32) = a1 + 40;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(a1 + 64));
    *(_QWORD *)(a1 + 56) = a1 + 64;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(a1 + 88));
    *(_QWORD *)(a1 + 80) = a1 + 88;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(a1 + 112));
    *(_QWORD *)(a1 + 104) = a1 + 112;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(a1 + 136));
    *(_QWORD *)(a1 + 128) = a1 + 136;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*(_QWORD **)(a1 + 160));
    v19 = *(_QWORD **)(a1 + 184);
    *(_QWORD *)(a1 + 152) = a1 + 160;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(v19);
    *(_QWORD *)(a1 + 176) = a1 + 184;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 224);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 264);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 304);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 344);
    if (*(_QWORD *)(a1 + 408))
    {
      v20 = *(_QWORD **)(a1 + 400);
      if (v20)
      {
        do
        {
          v21 = (_QWORD *)*v20;
          operator delete(v20);
          v20 = v21;
        }
        while (v21);
      }
      *(_QWORD *)(a1 + 400) = 0;
      v22 = *(_QWORD *)(a1 + 392);
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * i) = 0;
      }
      *(_QWORD *)(a1 + 408) = 0;
    }
    if (*(_QWORD *)(a1 + 448))
    {
      *(_QWORD *)(a1 + 440) = 0;
      v24 = *(_QWORD *)(a1 + 432);
      if (v24)
      {
        for (j = 0; j != v24; ++j)
          *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * j) = 0;
      }
      *(_QWORD *)(a1 + 448) = 0;
    }
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 464);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 504);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 544);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(a1 + 584);
    if (*(_QWORD *)(a1 + 728))
    {
      *(_QWORD *)(a1 + 720) = 0;
      v26 = *(_QWORD *)(a1 + 712);
      if (v26)
      {
        for (k = 0; k != v26; ++k)
          *(_QWORD *)(*(_QWORD *)(a1 + 704) + 8 * k) = 0;
      }
      *(_QWORD *)(a1 + 728) = 0;
    }
    if (*(_QWORD *)(a1 + 768))
    {
      v28 = *(_QWORD **)(a1 + 760);
      if (v28)
      {
        do
        {
          v29 = (_QWORD *)*v28;
          operator delete(v28);
          v28 = v29;
        }
        while (v29);
      }
      *(_QWORD *)(a1 + 760) = 0;
      v30 = *(_QWORD *)(a1 + 752);
      if (v30)
      {
        for (m = 0; m != v30; ++m)
          *(_QWORD *)(*(_QWORD *)(a1 + 744) + 8 * m) = 0;
      }
      *(_QWORD *)(a1 + 768) = 0;
    }
    if (*(_QWORD *)(a1 + 928))
    {
      v32 = *(_QWORD **)(a1 + 920);
      if (v32)
      {
        do
        {
          v33 = (_QWORD *)*v32;
          operator delete(v32);
          v32 = v33;
        }
        while (v33);
      }
      *(_QWORD *)(a1 + 920) = 0;
      v34 = *(_QWORD *)(a1 + 912);
      if (v34)
      {
        for (n = 0; n != v34; ++n)
          *(_QWORD *)(*(_QWORD *)(a1 + 904) + 8 * n) = 0;
      }
      *(_QWORD *)(a1 + 928) = 0;
    }
    if (*(_QWORD *)(a1 + 968))
    {
      *(_QWORD *)(a1 + 960) = 0;
      v36 = *(_QWORD *)(a1 + 952);
      if (v36)
      {
        for (ii = 0; ii != v36; ++ii)
          *(_QWORD *)(*(_QWORD *)(a1 + 944) + 8 * ii) = 0;
      }
      *(_QWORD *)(a1 + 968) = 0;
    }
  }
  v711 = 0;
  if ((_DWORD)v38)
  {
    v11 = v38;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      return v11;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 552;
    v13 = "%25s:%-5d ...at packet element count";
LABEL_4:
    v14 = v12;
    v15 = 18;
    goto LABEL_13;
  }
  v661 = (uint64_t **)a4;
  v666 = v711;
  if (v711)
  {
    v40 = 0;
    v664 = (uint64_t *)(a1 + 64);
    v662 = (uint64_t *)(a1 + 16);
    while (1)
    {
      if (v16 == 2)
      {
        LOBYTE(__p) = 0;
        if ((_DWORD)v41)
        {
          v11 = v41;
          if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            return v11;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 561;
          v13 = "%25s:%-5d ...at packet status";
          goto LABEL_4;
        }
        v42 = __p >> 6;
      }
      else
      {
        v42 = 0;
      }
      LOBYTE(v702) = 0;
      if ((_DWORD)v43
        || (v45 = v702 >> 4,
            LOBYTE(__p) = v702 >> 4,
            LOWORD(v715.__r_.__value_.__l.__data_) = 0,
            v702 >= 0x30u)
      {
LABEL_291:
        v11 = v43;
LABEL_292:
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          return v11;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 569;
        v13 = "%25s:%-5d ...at packet element ID";
        goto LABEL_4;
      }
      switch(v45)
      {
        case 0:
        case 1:
        case 2:
          data_low = (unsigned __int16)v708;
          WORD2(__p) = v708;
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          data_low = LOWORD(v715.__r_.__value_.__l.__data_);
          WORD2(__p) = v715.__r_.__value_.__l.__data_;
          HIWORD(__p) = v708;
          break;
        case 4:
          buf[0] = 0;
          if ((_DWORD)v43)
            goto LABEL_291;
          data_low = LOWORD(v715.__r_.__value_.__l.__data_);
          WORD2(__p) = v715.__r_.__value_.__l.__data_;
          HIWORD(__p) = v708;
          LOBYTE(v697) = buf[0];
          break;
        case 8:
          *(_DWORD *)buf = 0;
          if ((_DWORD)v43)
            goto LABEL_291;
          data_low = LOWORD(v715.__r_.__value_.__l.__data_);
          WORD2(__p) = v715.__r_.__value_.__l.__data_;
          HIWORD(__p) = v708;
          LODWORD(v697) = *(_DWORD *)buf;
          break;
        default:
          v11 = 4294900722;
          if (os_log_type_enabled(v647, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 296;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v45;
            _os_log_impl(&dword_18EE07000, v647, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown element type (%d)", buf, 0x18u);
          }
          goto LABEL_292;
      }
      v708 = 0;
      if ((_DWORD)v48)
      {
        v11 = v48;
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          return v11;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 575;
        v13 = "%25s:%-5d ...at packet element size";
        goto LABEL_4;
      }
      if (v42 == 2)
      {
        switch(v45)
        {
          case 0:
            std::__tree<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>>>::__erase_unique<unsigned short>((uint64_t **)(a1 + 8), data_low);
            goto LABEL_133;
          case 1:
            std::__tree<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>>>::__erase_unique<unsigned short>((uint64_t **)(a1 + 32), data_low);
            goto LABEL_133;
          case 2:
            std::__tree<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>>>::__erase_unique<unsigned short>((uint64_t **)(a1 + 56), data_low);
            goto LABEL_133;
          case 3:
            CA::AudioMetadataDeserializer::Impl::expire_stream_format(a1, data_low, HIWORD(__p));
            goto LABEL_133;
          case 4:
            CA::AudioMetadataDeserializer::Impl::expire_track_format(a1, (unsigned __int16 *)&__p + 2);
            goto LABEL_133;
          case 5:
            CA::AudioMetadataDeserializer::Impl::expire_track_uid(a1, data_low, HIWORD(__p));
            goto LABEL_133;
          case 6:
            CA::AudioMetadataDeserializer::Impl::expire_pack_format(a1, data_low, HIWORD(__p));
            goto LABEL_133;
          case 7:
            CA::AudioMetadataDeserializer::Impl::expire_channel_format(a1, data_low, HIWORD(__p));
            goto LABEL_133;
          case 8:
            CA::AudioMetadataDeserializer::Impl::expire_block_format((_QWORD *)a1, (unsigned __int16 *)&__p + 2);
LABEL_133:
            a4 = (uint64_t)v661;
            goto LABEL_134;
          default:
            v11 = 4294900722;
            if (!os_log_type_enabled(v599, OS_LOG_TYPE_ERROR))
              goto LABEL_894;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 668;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v45;
            v600 = "%25s:%-5d Unknown element type expired (%d)";
            break;
        }
LABEL_893:
        _os_log_impl(&dword_18EE07000, v599, OS_LOG_TYPE_ERROR, v600, buf, 0x18u);
LABEL_894:
        if (!os_log_type_enabled(v605, OS_LOG_TYPE_ERROR))
          return v11;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 680;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v40 + 1;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v666;
        v13 = "%25s:%-5d ...at element #%d of %d";
        v14 = v605;
        v15 = 30;
LABEL_13:
        _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);
        return v11;
      }
      v50 = (const unsigned __int8 *)(v708 + v713);
      if (v42 == 1)
        break;
      if (v42)
      {
        v11 = 4294900722;
        if (os_log_type_enabled(v599, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 675;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v42;
          v600 = "%25s:%-5d Unknown element status (%d)";
          goto LABEL_893;
        }
        goto LABEL_894;
      }
      switch(v45)
      {
        case 0:
          v51 = CA::AudioMetadataDeserializer::Impl::decode_programme((CA::AudioMetadataDeserializer::Impl *)a1, this, (const unsigned __int8 *)(v708 + v713), &v713, (unsigned __int16 *)&__p + 2);
          a4 = (uint64_t)v661;
          goto LABEL_127;
        case 1:
          v51 = CA::AudioMetadataDeserializer::Impl::decode_content((CA::AudioMetadataDeserializer::Impl *)a1, this, (const unsigned __int8 *)(v708 + v713), &v713, (unsigned __int16 *)&__p + 2);
          a4 = (uint64_t)v661;
          goto LABEL_127;
        case 2:
          v51 = CA::AudioMetadataDeserializer::Impl::decode_object((CA::AudioMetadataDeserializer::Impl *)a1, this, (const unsigned __int8 *)(v708 + v713), &v713, (unsigned __int16 *)&__p + 2);
          a4 = (uint64_t)v661;
          goto LABEL_127;
        case 3:
          v51 = CA::AudioMetadataDeserializer::Impl::decode_stream_format(a1, this, (const unsigned __int8 *)(v708 + v713), (uint64_t *)&v713, (unsigned __int16 *)&__p + 2);
          a4 = (uint64_t)v661;
          goto LABEL_127;
        case 4:
          v51 = CA::AudioMetadataDeserializer::Impl::decode_track_format(a1, this, (const unsigned __int8 *)(v708 + v713), (uint64_t *)&v713, (unsigned __int16 *)&__p + 2);
          a4 = (uint64_t)v661;
          goto LABEL_127;
        case 5:
          v51 = CA::AudioMetadataDeserializer::Impl::decode_track_uid(a1, this, (const unsigned __int8 *)(v708 + v713), &v713, (unsigned __int16 *)&__p + 2);
          a4 = (uint64_t)v661;
          goto LABEL_127;
        case 6:
          v51 = CA::AudioMetadataDeserializer::Impl::decode_pack_format(a1, this, (const unsigned __int8 *)(v708 + v713), (uint64_t *)&v713, (unsigned __int16 *)&__p + 2);
          a4 = (uint64_t)v661;
          goto LABEL_127;
        case 7:
          v51 = CA::AudioMetadataDeserializer::Impl::decode_channel_format(a1, this, (const unsigned __int8 *)(v708 + v713), (uint64_t *)&v713, (unsigned __int16 *)&__p + 2);
          a4 = (uint64_t)v661;
          goto LABEL_127;
        case 8:
          v715.__r_.__value_.__s.__data_[0] = 0;
          a4 = (uint64_t)v661;
          if ((_DWORD)v68)
          {
            v11 = v68;
            if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
              return v11;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 610;
            v13 = "%25s:%-5d ...at block format type";
            goto LABEL_4;
          }
          v51 = CA::AudioMetadataDeserializer::Impl::decode_block_format(a1, this, v50, &v713, (unsigned __int16 *)&__p + 2, v715.__r_.__value_.__s.__data_[0] >> 5);
LABEL_127:
          v11 = v51;
          break;
        default:
          v11 = 4294900722;
          if (!os_log_type_enabled(v599, OS_LOG_TYPE_ERROR))
            goto LABEL_894;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 617;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v45;
          v600 = "%25s:%-5d Unknown element type (%d)";
          goto LABEL_893;
      }
LABEL_128:
      if ((_DWORD)v11)
        goto LABEL_894;
LABEL_134:
      if (++v40 == v666)
        goto LABEL_135;
    }
    if (v45 == 2)
    {
      v60 = *v664;
      if (!*v664)
        goto LABEL_882;
      v61 = a1 + 64;
      do
      {
        v62 = *(unsigned __int16 *)(v60 + 32);
        v63 = v62 >= data_low;
        if (v62 >= data_low)
          v64 = (uint64_t *)v60;
        else
          v64 = (uint64_t *)(v60 + 8);
        if (v63)
          v61 = v60;
        v60 = *v64;
      }
      while (*v64);
      if ((uint64_t *)v61 == v664 || data_low < *(unsigned __int16 *)(v61 + 32))
      {
LABEL_882:
        v11 = 4294900724;
        if (os_log_type_enabled(v599, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2163;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = data_low;
          v600 = "%25s:%-5d Object extension refers to missing object AO_%04hx";
          goto LABEL_893;
        }
        goto LABEL_894;
      }
      v715.__r_.__value_.__r.__words[0] = 0;
      if (!(_DWORD)v11)
      {
        v66 = *(_QWORD *)(v61 + 40);
        *(_BYTE *)(v66 + 28) = 1;
        *(_QWORD *)(v66 + 32) = v715.__r_.__value_.__r.__words[0];
        goto LABEL_112;
      }
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2169;
        v58 = v65;
        v59 = "%25s:%-5d ...at object extension duration";
        goto LABEL_109;
      }
    }
    else
    {
      if (v45)
      {
        v11 = 4294900722;
        if (os_log_type_enabled(v599, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 632;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v45;
          v600 = "%25s:%-5d Expected element type for extension (%d)";
          goto LABEL_893;
        }
        goto LABEL_894;
      }
      v52 = *v662;
      if (!*v662)
        goto LABEL_884;
      v53 = a1 + 16;
      do
      {
        v54 = *(unsigned __int16 *)(v52 + 32);
        v55 = v54 >= data_low;
        if (v54 >= data_low)
          v56 = (uint64_t *)v52;
        else
          v56 = (uint64_t *)(v52 + 8);
        if (v55)
          v53 = v52;
        v52 = *v56;
      }
      while (*v56);
      if ((uint64_t *)v53 == v662 || data_low < *(unsigned __int16 *)(v53 + 32))
      {
LABEL_884:
        v11 = 4294900724;
        if (os_log_type_enabled(v599, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2419;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = data_low;
          v600 = "%25s:%-5d Programme extension refers to missing programme AP_%04hx";
          goto LABEL_893;
        }
        goto LABEL_894;
      }
      v715.__r_.__value_.__r.__words[0] = 0;
      if (!(_DWORD)v11)
      {
        v67 = *(_QWORD *)(v53 + 40);
        *(_BYTE *)(v67 + 36) = 1;
        *(_QWORD *)(v67 + 40) = v715.__r_.__value_.__r.__words[0];
        goto LABEL_112;
      }
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2425;
        v58 = v57;
        v59 = "%25s:%-5d ...at programme extension end";
LABEL_109:
        _os_log_impl(&dword_18EE07000, v58, OS_LOG_TYPE_ERROR, v59, buf, 0x12u);
      }
    }
LABEL_112:
    a4 = (uint64_t)v661;
    goto LABEL_128;
  }
LABEL_135:
  AudioMetadataMemoryPool::create<AudioMetadataFormatExtended>(buf, *(_QWORD *)a1);
  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](a4, (__int128 *)buf);
  v69 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v70 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v708 = 0;
  v709 = 0;
  v710 = 0;
  v72 = *(_QWORD **)(a1 + 8);
  if (v72 != (_QWORD *)(a1 + 16))
  {
    v73 = (uint64_t *)(a1 + 40);
    do
    {
      v697 = 0;
      __p = 0;
      v698 = 0;
      v74 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t *)(a1 + 224), *((_WORD *)v72 + 16), (_WORD *)v72 + 16);
      v76 = (unsigned __int16 *)v74[3];
      v75 = (unsigned __int16 *)v74[4];
      if (v76 == v75)
      {
LABEL_172:
        v94 = *(_QWORD *)a1;
        v95 = (uint64_t *)v72[5];
        v96 = (std::__shared_weak_count *)v72[6];
        v706 = v95;
        v707 = v96;
        if (v96)
        {
          p_shared_owners = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldxr(p_shared_owners);
          while (__stxr(v98 + 1, p_shared_owners));
          v95 = (uint64_t *)v72[5];
        }
        AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataContent,AudioMetadataContentRefs,AudioMetadataProgramme>(v94, &v706, (uint64_t)v95 + 52, &__p);
        v99 = v707;
        if (v707)
        {
          v100 = (unint64_t *)&v707->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v102 = v72[5];
        v103 = v709;
        if ((unint64_t)v709 >= v710)
        {
          v109 = v708;
          v110 = (uint64_t)&v709[-v708] >> 3;
          v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v112 = v710 - v708;
          if ((uint64_t)(v710 - v708) >> 2 > v111)
            v111 = v112 >> 2;
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
            v113 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v113 = v111;
          if (v113)
            v113 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v113);
          else
            v114 = 0;
          v115 = (_QWORD *)(v113 + 8 * v110);
          *v115 = v102;
          v104 = (char *)(v115 + 1);
          if (v103 != (char *)v109)
          {
            do
            {
              v116 = *((_QWORD *)v103 - 1);
              v103 -= 8;
              *--v115 = v116;
            }
            while (v103 != (char *)v109);
            v103 = (char *)v708;
          }
          v708 = (unint64_t)v115;
          v710 = v113 + 8 * v114;
          if (v103)
            operator delete(v103);
        }
        else
        {
          *(_QWORD *)v709 = v102;
          v104 = v103 + 8;
        }
        v709 = v104;
        v108 = 1;
      }
      else
      {
        v77 = 0;
        while (1)
        {
          v78 = *v73;
          if (!*v73)
            break;
          v79 = *v76;
          v80 = a1 + 40;
          do
          {
            v81 = *(unsigned __int16 *)(v78 + 32);
            v82 = v81 >= v79;
            if (v81 >= v79)
              v83 = (uint64_t *)v78;
            else
              v83 = (uint64_t *)(v78 + 8);
            if (v82)
              v80 = v78;
            v78 = *v83;
          }
          while (*v83);
          if ((uint64_t *)v80 == v73 || v79 < *(unsigned __int16 *)(v80 + 32))
            break;
          v84 = *(_QWORD *)(v80 + 40);
          if (v77 >= v698)
          {
            v86 = (char *)__p;
            v87 = (v77 - (_BYTE *)__p) >> 3;
            v88 = v87 + 1;
            if ((unint64_t)(v87 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v89 = v698 - (_BYTE *)__p;
            if ((v698 - (_BYTE *)__p) >> 2 > v88)
              v88 = v89 >> 2;
            if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
              v90 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v90 = v88;
            if (v90)
              v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v90);
            else
              v91 = 0;
            v92 = (char *)(v90 + 8 * v87);
            *(_QWORD *)v92 = v84;
            v85 = v92 + 8;
            if (v77 != v86)
            {
              do
              {
                v93 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *((_QWORD *)v92 - 1) = v93;
                v92 -= 8;
              }
              while (v77 != v86);
              v77 = (char *)__p;
            }
            __p = v92;
            v697 = v85;
            v698 = (char *)(v90 + 8 * v91);
            if (v77)
              operator delete(v77);
          }
          else
          {
            *(_QWORD *)v77 = v84;
            v85 = v77 + 8;
          }
          v697 = v85;
          ++v76;
          v77 = v85;
          if (v76 == v75)
            goto LABEL_172;
        }
        if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
        {
          v106 = *(_QWORD *)v72[5];
          v107 = *v76;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 695;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v106;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)v717 = v107;
          _os_log_impl(&dword_18EE07000, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d Programme %s refers to missing content ACO_%04hx", buf, 0x22u);
        }
        v108 = 0;
      }
      if (__p)
        operator delete(__p);
      if (!v108)
      {
        v11 = 4294900724;
        goto LABEL_956;
      }
      v117 = (_QWORD *)v72[1];
      if (v117)
      {
        do
        {
          v118 = v117;
          v117 = (_QWORD *)*v117;
        }
        while (v117);
      }
      else
      {
        do
        {
          v118 = (_QWORD *)v72[2];
          v200 = *v118 == (_QWORD)v72;
          v72 = v118;
        }
        while (!v200);
      }
      v72 = v118;
    }
    while (v118 != (_QWORD *)(a1 + 16));
  }
  v119 = *(_QWORD *)a1;
  v120 = *v661;
  v121 = v661[1];
  v705[0] = *v661;
  v705[1] = v121;
  if (v121)
  {
    v122 = (unint64_t *)(v121 + 1);
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
    v120 = *v661;
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataProgramme,AudioMetadataProgrammeRefs,AudioMetadataFormatExtended>(v119, v705, (uint64_t)v120, &v708);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v705);
  v703 = 0;
  v702 = 0;
  v704 = 0;
  v124 = *(_QWORD **)(a1 + 32);
  if (v124 != (_QWORD *)(a1 + 40))
  {
    v125 = (uint64_t *)(a1 + 64);
    do
    {
      v697 = 0;
      __p = 0;
      v698 = 0;
      v126 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t *)(a1 + 264), *((_WORD *)v124 + 16), (_WORD *)v124 + 16);
      v128 = (unsigned __int16 *)v126[3];
      v127 = (unsigned __int16 *)v126[4];
      if (v128 == v127)
      {
LABEL_246:
        v146 = *(_QWORD *)a1;
        v147 = (uint64_t *)v124[5];
        v148 = (std::__shared_weak_count *)v124[6];
        v700 = v147;
        v701 = v148;
        if (v148)
        {
          v149 = (unint64_t *)&v148->__shared_owners_;
          do
            v150 = __ldxr(v149);
          while (__stxr(v150 + 1, v149));
          v147 = (uint64_t *)v124[5];
        }
        AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataObject,AudioMetadataObjectRefs,AudioMetadataContent>(v146, &v700, (uint64_t)(v147 + 3), &__p);
        v151 = v701;
        if (v701)
        {
          v152 = (unint64_t *)&v701->__shared_owners_;
          do
            v153 = __ldaxr(v152);
          while (__stlxr(v153 - 1, v152));
          if (!v153)
          {
            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
            std::__shared_weak_count::__release_weak(v151);
          }
        }
        v154 = v124[5];
        v155 = v703;
        if ((unint64_t)v703 >= v704)
        {
          v161 = (char *)v702;
          v162 = (v703 - (_BYTE *)v702) >> 3;
          v163 = v162 + 1;
          if ((unint64_t)(v162 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v164 = v704 - (_QWORD)v702;
          if ((uint64_t)(v704 - (_QWORD)v702) >> 2 > v163)
            v163 = v164 >> 2;
          if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8)
            v165 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v165 = v163;
          if (v165)
            v165 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v165);
          else
            v166 = 0;
          v167 = (char *)(v165 + 8 * v162);
          *(_QWORD *)v167 = v154;
          v156 = v167 + 8;
          if (v155 != v161)
          {
            do
            {
              v168 = *((_QWORD *)v155 - 1);
              v155 -= 8;
              *((_QWORD *)v167 - 1) = v168;
              v167 -= 8;
            }
            while (v155 != v161);
            v155 = (char *)v702;
          }
          v702 = v167;
          v704 = v165 + 8 * v166;
          if (v155)
            operator delete(v155);
        }
        else
        {
          *(_QWORD *)v703 = v154;
          v156 = v155 + 8;
        }
        v703 = v156;
        v160 = 1;
      }
      else
      {
        v129 = 0;
        while (1)
        {
          v130 = *v125;
          if (!*v125)
            break;
          v131 = *v128;
          v132 = a1 + 64;
          do
          {
            v133 = *(unsigned __int16 *)(v130 + 32);
            v134 = v133 >= v131;
            if (v133 >= v131)
              v135 = (uint64_t *)v130;
            else
              v135 = (uint64_t *)(v130 + 8);
            if (v134)
              v132 = v130;
            v130 = *v135;
          }
          while (*v135);
          if ((uint64_t *)v132 == v125 || v131 < *(unsigned __int16 *)(v132 + 32))
            break;
          v136 = *(_QWORD *)(v132 + 40);
          if (v129 >= v698)
          {
            v138 = (char *)__p;
            v139 = (v129 - (_BYTE *)__p) >> 3;
            v140 = v139 + 1;
            if ((unint64_t)(v139 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v141 = v698 - (_BYTE *)__p;
            if ((v698 - (_BYTE *)__p) >> 2 > v140)
              v140 = v141 >> 2;
            if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8)
              v142 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v142 = v140;
            if (v142)
              v142 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v142);
            else
              v143 = 0;
            v144 = (char *)(v142 + 8 * v139);
            *(_QWORD *)v144 = v136;
            v137 = v144 + 8;
            if (v129 != v138)
            {
              do
              {
                v145 = *((_QWORD *)v129 - 1);
                v129 -= 8;
                *((_QWORD *)v144 - 1) = v145;
                v144 -= 8;
              }
              while (v129 != v138);
              v129 = (char *)__p;
            }
            __p = v144;
            v697 = v137;
            v698 = (char *)(v142 + 8 * v143);
            if (v129)
              operator delete(v129);
          }
          else
          {
            *(_QWORD *)v129 = v136;
            v137 = v129 + 8;
          }
          v697 = v137;
          ++v128;
          v129 = v137;
          if (v128 == v127)
            goto LABEL_246;
        }
        if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
        {
          v158 = *(_QWORD *)v124[5];
          v159 = *v128;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 715;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v158;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)v717 = v159;
          _os_log_impl(&dword_18EE07000, v157, OS_LOG_TYPE_ERROR, "%25s:%-5d Content %s refers to missing object AO_%04hx", buf, 0x22u);
        }
        v160 = 0;
      }
      if (__p)
        operator delete(__p);
      if (!v160)
      {
        v11 = 4294900724;
        goto LABEL_954;
      }
      v169 = (_QWORD *)v124[1];
      if (v169)
      {
        do
        {
          v170 = v169;
          v169 = (_QWORD *)*v169;
        }
        while (v169);
      }
      else
      {
        do
        {
          v170 = (_QWORD *)v124[2];
          v200 = *v170 == (_QWORD)v124;
          v124 = v170;
        }
        while (!v200);
      }
      v124 = v170;
    }
    while (v170 != (_QWORD *)(a1 + 40));
  }
  v171 = *(_QWORD *)a1;
  v172 = *v661;
  v173 = v661[1];
  v699[0] = *v661;
  v699[1] = v173;
  if (v173)
  {
    v174 = (unint64_t *)(v173 + 1);
    do
      v175 = __ldxr(v174);
    while (__stxr(v175 + 1, v174));
    v172 = *v661;
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataContent,AudioMetadataContentRefs,AudioMetadataFormatExtended>(v171, v699, (uint64_t)v172 + 12, &v702);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v699);
  for (jj = a1 + 400;
        ;
        CA::AudioMetadataDeserializer::Impl::check_common_pack_format_ref((uint64_t *)a1, (unsigned __int16 *)(jj + 18)))
  {
    jj = *(_QWORD *)jj;
    if (!jj)
      break;
  }
  for (kk = a1 + 840;
        ;
        CA::AudioMetadataDeserializer::Impl::check_common_pack_format_ref((uint64_t *)a1, (unsigned __int16 *)(kk + 20)))
  {
    kk = *(_QWORD *)kk;
    if (!kk)
      break;
  }
  for (mm = a1 + 800;
        ;
        CA::AudioMetadataDeserializer::Impl::check_common_channel_format_ref((uint64_t *)a1, (unsigned __int16 *)(mm + 20)))
  {
    mm = *(_QWORD *)mm;
    if (!mm)
      break;
  }
  for (nn = v698; nn; nn = *(char **)nn)
  {
    v180 = (unsigned __int16 *)*((_QWORD *)nn + 3);
    v181 = (unsigned __int16 *)*((_QWORD *)nn + 4);
    while (v180 != v181)
    {
      CA::AudioMetadataDeserializer::Impl::check_common_pack_format_ref((uint64_t *)a1, v180);
      v180 += 2;
    }
  }
  for (i1 = *(_QWORD **)(a1 + 560); i1; i1 = (_QWORD *)*i1)
  {
    v183 = (unsigned __int16 *)i1[3];
    v184 = (unsigned __int16 *)i1[4];
    while (v183 != v184)
    {
      CA::AudioMetadataDeserializer::Impl::check_common_pack_format_ref((uint64_t *)a1, v183);
      v183 += 2;
    }
  }
  for (i2 = *(_QWORD **)(a1 + 600); i2; i2 = (_QWORD *)*i2)
  {
    v186 = (unsigned __int16 *)i2[3];
    v187 = (unsigned __int16 *)i2[4];
    while (v186 != v187)
    {
      CA::AudioMetadataDeserializer::Impl::check_common_pack_format_ref((uint64_t *)a1, v186);
      v186 += 2;
    }
  }
  for (i3 = a1 + 640;
        ;
        CA::AudioMetadataDeserializer::Impl::check_common_pack_format_ref((uint64_t *)a1, (unsigned __int16 *)(i3 + 20)))
  {
    i3 = *(_QWORD *)i3;
    if (!i3)
      break;
  }
  for (i4 = a1 + 680;
        ;
        CA::AudioMetadataDeserializer::Impl::check_common_pack_format_ref((uint64_t *)a1, (unsigned __int16 *)(i4 + 20)))
  {
    i4 = *(_QWORD *)i4;
    if (!i4)
      break;
  }
  for (i5 = *(_QWORD **)(a1 + 480); i5; i5 = (_QWORD *)*i5)
  {
    v191 = (unsigned __int16 *)i5[3];
    v192 = (unsigned __int16 *)i5[4];
    while (v191 != v192)
    {
      CA::AudioMetadataDeserializer::Impl::check_common_channel_format_ref((uint64_t *)a1, v191);
      v191 += 2;
    }
  }
  for (i6 = a1 + 880;
        ;
        CA::AudioMetadataDeserializer::Impl::check_common_channel_format_ref((uint64_t *)a1, (unsigned __int16 *)(i6 + 20)))
  {
    i6 = *(_QWORD *)i6;
    if (!i6)
      break;
  }
  v659 = (_QWORD *)(a1 + 904);
  for (i7 = a1 + 920;
        ;
        CA::AudioMetadataDeserializer::Impl::check_common_channel_format_ref((uint64_t *)a1, (unsigned __int16 *)(i7 + 24)))
  {
    i7 = *(_QWORD *)i7;
    if (!i7)
      break;
  }
  for (i8 = *(_QWORD **)(a1 + 960); i8; i8 = (_QWORD *)*i8)
  {
    v196 = (unsigned __int16 *)i8[3];
    v197 = (unsigned __int16 *)i8[4];
    while (v196 != v197)
    {
      CA::AudioMetadataDeserializer::Impl::check_common_channel_format_ref((uint64_t *)a1, v196);
      v196 += 2;
    }
  }
  for (i9 = *(uint64_t **)(a1 + 760); i9; i9 = (uint64_t *)*i9)
  {
    v199 = *((unsigned __int16 *)i9 + 11);
    v200 = v199 > 0xFFF || (v199 & 0xFFF) == 0;
    if (!v200
    {
      snprintf(__str, 0xFuLL, "AT_%04hx%04hx_%02hhx", *((unsigned __int16 *)i9 + 10), v199, *((unsigned __int8 *)i9 + 24));
      AudioMetadataMemoryPool::create<AudioMetadataTrackFormat>(&v694, *(_QWORD *)a1);
      v201 = *(uint64_t ***)a1;
      v202 = v694;
      v690 = v694;
      if (*((_QWORD *)&v694 + 1))
      {
        v203 = (unint64_t *)(*((_QWORD *)&v694 + 1) + 8);
        do
          v204 = __ldxr(v203);
        while (__stxr(v204 + 1, v203));
      }
      AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(v201, (uint64_t **)&v690, (_QWORD *)v202, __str);
      if (*((_QWORD *)&v202 + 1))
      {
        v205 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
        do
          v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        if (!v206)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v202 + 1) + 16))(*((_QWORD *)&v202 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v202 + 1));
        }
      }
      v207 = *((unsigned __int8 *)i9 + 20);
      if (v207 == 1)
      {
        v231 = *((unsigned __int16 *)i9 + 11);
        v232 = v231 - 1;
        if ((unint64_t)(v231 - 1) <= 0x27)
        {
          std::string::basic_string[abi:ne180100]<0>(&v715, "PCM_");
          v233 = CA::ADMCommonFormats::channel_formats_direct_speakers[3 * v232];
          v234 = strlen(v233);
          v235 = std::string::append(&v715, v233, v234);
          *(std::string *)buf = *v235;
          v235->__r_.__value_.__l.__size_ = 0;
          v235->__r_.__value_.__r.__words[2] = 0;
          v235->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v715.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v715.__r_.__value_.__l.__data_);
          v236 = *(uint64_t ***)a1;
          v237 = v694;
          *(_OWORD *)&v715.__r_.__value_.__l.__data_ = v694;
          if (*((_QWORD *)&v694 + 1))
          {
            v238 = (unint64_t *)(*((_QWORD *)&v694 + 1) + 8);
            do
              v239 = __ldxr(v238);
            while (__stxr(v239 + 1, v238));
          }
          if (buf[23] >= 0)
            v240 = buf;
          else
            v240 = *(char **)buf;
          AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(v236, (uint64_t **)&v715, (_QWORD *)(v237 + 8), v240);
          if (*((_QWORD *)&v237 + 1))
          {
            v241 = (unint64_t *)(*((_QWORD *)&v237 + 1) + 8);
            do
              v242 = __ldaxr(v241);
            while (__stlxr(v242 - 1, v241));
            if (!v242)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v237 + 1) + 16))(*((_QWORD *)&v237 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v237 + 1));
            }
          }
          v243 = *(uint64_t ***)a1;
          v244 = v694;
          v686 = v694;
          if (*((_QWORD *)&v694 + 1))
          {
            v245 = (unint64_t *)(*((_QWORD *)&v694 + 1) + 8);
            do
              v246 = __ldxr(v245);
            while (__stxr(v246 + 1, v245));
          }
          AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(v243, (uint64_t **)&v686, (_QWORD *)(v244 + 16), "0001");
          if (*((_QWORD *)&v244 + 1))
          {
            v247 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
            do
              v248 = __ldaxr(v247);
            while (__stlxr(v248 - 1, v247));
            if (!v248)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v244 + 1) + 16))(*((_QWORD *)&v244 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v244 + 1));
            }
          }
          v249 = *(uint64_t ***)a1;
          v250 = v694;
          v678 = v694;
          if (*((_QWORD *)&v694 + 1))
          {
            v251 = (unint64_t *)(*((_QWORD *)&v694 + 1) + 8);
            do
              v252 = __ldxr(v251);
            while (__stxr(v252 + 1, v251));
          }
          AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(v249, (uint64_t **)&v678, (_QWORD *)(v250 + 24), "PCM");
          if (*((_QWORD *)&v250 + 1))
          {
            v253 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
            do
              v254 = __ldaxr(v253);
            while (__stlxr(v254 - 1, v253));
            if (!v254)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v250 + 1) + 16))(*((_QWORD *)&v250 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v250 + 1));
            }
          }
LABEL_416:
          v714 = *((_DWORD *)i9 + 5);
          CA::AudioMetadataDeserializer::Impl::check_common_stream_format_ref((uint64_t *)a1, (unsigned __int16 *)&v714);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v255, v694, *((uint64_t *)&v694 + 1));
          v256 = (std::__shared_weak_count *)*((_QWORD *)&v694 + 1);
          if (!*((_QWORD *)&v694 + 1))
            continue;
          v257 = (unint64_t *)(*((_QWORD *)&v694 + 1) + 8);
          do
            v258 = __ldaxr(v257);
          while (__stlxr(v258 - 1, v257));
LABEL_425:
          if (!v258)
          {
            ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
            std::__shared_weak_count::__release_weak(v256);
          }
          continue;
        }
      }
      else if (v207 == 5)
      {
        v208 = *((unsigned __int16 *)i9 + 11) - 1;
        if (v208 <= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v715, "PCM_");
          v209 = CA::ADMCommonFormats::channel_formats_binaural[2 * v208 + 1];
          v210 = strlen(v209);
          v211 = std::string::append(&v715, v209, v210);
          *(std::string *)buf = *v211;
          v211->__r_.__value_.__l.__size_ = 0;
          v211->__r_.__value_.__r.__words[2] = 0;
          v211->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v715.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v715.__r_.__value_.__l.__data_);
          v212 = *(uint64_t ***)a1;
          v213 = v694;
          *(_OWORD *)&v715.__r_.__value_.__l.__data_ = v694;
          if (*((_QWORD *)&v694 + 1))
          {
            v214 = (unint64_t *)(*((_QWORD *)&v694 + 1) + 8);
            do
              v215 = __ldxr(v214);
            while (__stxr(v215 + 1, v214));
          }
          if (buf[23] >= 0)
            v216 = buf;
          else
            v216 = *(char **)buf;
          AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(v212, (uint64_t **)&v715, (_QWORD *)(v213 + 8), v216);
          if (*((_QWORD *)&v213 + 1))
          {
            v217 = (unint64_t *)(*((_QWORD *)&v213 + 1) + 8);
            do
              v218 = __ldaxr(v217);
            while (__stlxr(v218 - 1, v217));
            if (!v218)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v213 + 1) + 16))(*((_QWORD *)&v213 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v213 + 1));
            }
          }
          v219 = *(uint64_t ***)a1;
          v220 = v694;
          v686 = v694;
          if (*((_QWORD *)&v694 + 1))
          {
            v221 = (unint64_t *)(*((_QWORD *)&v694 + 1) + 8);
            do
              v222 = __ldxr(v221);
            while (__stxr(v222 + 1, v221));
          }
          AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(v219, (uint64_t **)&v686, (_QWORD *)(v220 + 16), "0005");
          if (*((_QWORD *)&v220 + 1))
          {
            v223 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
            do
              v224 = __ldaxr(v223);
            while (__stlxr(v224 - 1, v223));
            if (!v224)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v220 + 1) + 16))(*((_QWORD *)&v220 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v220 + 1));
            }
          }
          v225 = *(uint64_t ***)a1;
          v226 = v694;
          v678 = v694;
          if (*((_QWORD *)&v694 + 1))
          {
            v227 = (unint64_t *)(*((_QWORD *)&v694 + 1) + 8);
            do
              v228 = __ldxr(v227);
            while (__stxr(v228 + 1, v227));
          }
          AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(v225, (uint64_t **)&v678, (_QWORD *)(v226 + 24), "PCM");
          if (*((_QWORD *)&v226 + 1))
          {
            v229 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
            do
              v230 = __ldaxr(v229);
            while (__stlxr(v230 - 1, v229));
            if (!v230)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v226 + 1) + 16))(*((_QWORD *)&v226 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v226 + 1));
            }
          }
          goto LABEL_416;
        }
      }
      v256 = (std::__shared_weak_count *)*((_QWORD *)&v694 + 1);
      if (*((_QWORD *)&v694 + 1))
      {
        v259 = (unint64_t *)(*((_QWORD *)&v694 + 1) + 8);
        do
          v258 = __ldaxr(v259);
        while (__stlxr(v258 - 1, v259));
        goto LABEL_425;
      }
    }
  }
  memset(&v715, 0, sizeof(v715));
  v260 = *(uint64_t **)(a1 + 56);
  v261 = (uint64_t *)(a1 + 64);
  if (v260 != (uint64_t *)(a1 + 64))
  {
    do
    {
      v263 = (unsigned __int16 *)(v260 + 4);
      v262 = *((_WORD *)v260 + 16);
      v694 = 0uLL;
      v695 = 0;
      v264 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t *)(a1 + 304), v262, (_WORD *)v260 + 16);
      v266 = (unsigned __int16 *)v264[3];
      v265 = (unsigned __int16 *)v264[4];
      if (v266 == v265)
      {
LABEL_458:
        v284 = *(_QWORD *)a1;
        v285 = (uint64_t *)v260[5];
        v286 = (std::__shared_weak_count *)v260[6];
        v692 = v285;
        v693 = v286;
        if (v286)
        {
          v287 = (unint64_t *)&v286->__shared_owners_;
          do
            v288 = __ldxr(v287);
          while (__stxr(v288 + 1, v287));
          v285 = (uint64_t *)v260[5];
        }
        AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataObject,AudioMetadataObjectRefs,AudioMetadataObject>(v284, &v692, (uint64_t)(v285 + 14), &v694);
        v289 = v693;
        if (v693)
        {
          v290 = (unint64_t *)&v693->__shared_owners_;
          do
            v291 = __ldaxr(v290);
          while (__stlxr(v291 - 1, v290));
          if (!v291)
          {
            ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
            std::__shared_weak_count::__release_weak(v289);
          }
        }
        v690 = 0uLL;
        v691 = 0;
        v292 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t *)(a1 + 344), *v263, (_WORD *)v260 + 16);
        v294 = (unsigned __int16 *)v292[3];
        v293 = (unsigned __int16 *)v292[4];
        if (v294 == v293)
        {
LABEL_497:
          v312 = *(_QWORD *)a1;
          v313 = (uint64_t *)v260[5];
          v314 = (std::__shared_weak_count *)v260[6];
          v688 = v313;
          v689 = v314;
          if (v314)
          {
            v315 = (unint64_t *)&v314->__shared_owners_;
            do
              v316 = __ldxr(v315);
            while (__stxr(v316 + 1, v315));
            v313 = (uint64_t *)v260[5];
          }
          AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataObject,AudioMetadataObjectRefs,AudioMetadataObject>(v312, &v688, (uint64_t)v313 + 124, &v690);
          v317 = v689;
          if (v689)
          {
            v318 = (unint64_t *)&v689->__shared_owners_;
            do
              v319 = __ldaxr(v318);
            while (__stlxr(v319 - 1, v318));
            if (!v319)
            {
              ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
              std::__shared_weak_count::__release_weak(v317);
            }
          }
          v320 = *v263;
          v321 = *(int8x8_t *)(a1 + 392);
          if (v321)
          {
            v322 = (uint8x8_t)vcnt_s8(v321);
            v322.i16[0] = vaddlv_u8(v322);
            if (v322.u32[0] > 1uLL)
            {
              v323 = *v263;
              if (*(_QWORD *)&v321 <= v320)
                v323 = v320 % *(_QWORD *)&v321;
            }
            else
            {
              v323 = (v321.i32[0] - 1) & v320;
            }
            v334 = *(uint64_t ***)(*(_QWORD *)(a1 + 384) + 8 * v323);
            if (v334)
            {
              for (i10 = *v334; i10; i10 = (uint64_t *)*i10)
              {
                v336 = i10[1];
                if (v336 == v320)
                {
                  if (*((unsigned __int16 *)i10 + 8) == (_DWORD)v320)
                  {
                    v337 = *(_DWORD *)((char *)i10 + 18);
                    if ((uint64_t *)(a1 + 88) != v338)
                    {
                      *(_QWORD *)(v260[5] + 104) = v338[5];
                      break;
                    }
                    if (os_log_type_enabled(v365, OS_LOG_TYPE_ERROR))
                    {
                      v366 = *(_QWORD *)v260[5];
                      *(_DWORD *)buf = 136316162;
                      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 811;
                      *(_WORD *)&buf[18] = 2080;
                      *(_QWORD *)&buf[20] = v366;
                      *(_WORD *)&buf[28] = 1024;
                      *(_DWORD *)v717 = (unsigned __int16)v337;
                      *(_WORD *)&v717[4] = 1024;
                      *(_DWORD *)&v717[6] = HIWORD(v337);
                      v331 = v365;
                      v332 = "%25s:%-5d Object %s refers to missing pack format AP_%04hx%04hx";
                      v333 = 40;
LABEL_514:
                      _os_log_impl(&dword_18EE07000, v331, OS_LOG_TYPE_ERROR, v332, buf, v333);
                    }
                    goto LABEL_515;
                  }
                }
                else
                {
                  if (v322.u32[0] > 1uLL)
                  {
                    if (v336 >= *(_QWORD *)&v321)
                      v336 %= *(_QWORD *)&v321;
                  }
                  else
                  {
                    v336 &= *(_QWORD *)&v321 - 1;
                  }
                  if (v336 != v323)
                    break;
                }
              }
            }
          }
          v686 = 0uLL;
          v687 = 0;
          v340 = (unsigned __int16 *)*v339;
          v341 = (unsigned __int16 *)v339[1];
          if ((unsigned __int16 *)*v339 == v341)
          {
LABEL_552:
            v354 = *(_QWORD *)a1;
            v355 = (uint64_t *)v260[5];
            v356 = (uint64_t *)v260[6];
            v685[0] = v355;
            v685[1] = v356;
            if (v356)
            {
              v357 = (unint64_t *)(v356 + 1);
              do
                v358 = __ldxr(v357);
              while (__stxr(v358 + 1, v357));
              v355 = (uint64_t *)v260[5];
            }
            AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataTrackUID,AudioMetadataTrackUIDRefs,AudioMetadataObject>(v354, v685, (uint64_t)(v355 + 17), &v686);
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v685);
            *(_QWORD *)buf = v260[5];
            std::vector<AudioMetadataObject *>::push_back[abi:ne180100]((void **)&v715.__r_.__value_.__l.__data_, buf);
            v327 = 0;
          }
          else
          {
            v342 = 0;
            while (1)
            {
              if ((uint64_t *)(a1 + 136) == v343)
                break;
              v344 = v343[5];
              if ((unint64_t)v342 >= v687)
              {
                v346 = (uint64_t *)v686;
                v347 = (uint64_t)((uint64_t)v342 - v686) >> 3;
                v348 = v347 + 1;
                if ((unint64_t)(v347 + 1) >> 61)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v349 = v687 - v686;
                if ((uint64_t)(v687 - v686) >> 2 > v348)
                  v348 = v349 >> 2;
                if ((unint64_t)v349 >= 0x7FFFFFFFFFFFFFF8)
                  v350 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v350 = v348;
                if (v350)
                  v350 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v350);
                else
                  v351 = 0;
                v352 = (uint64_t *)(v350 + 8 * v347);
                *v352 = v344;
                v345 = v352 + 1;
                if (v342 != v346)
                {
                  do
                  {
                    v353 = *--v342;
                    *--v352 = v353;
                  }
                  while (v342 != v346);
                  v342 = (uint64_t *)v686;
                }
                *(_QWORD *)&v686 = v352;
                *((_QWORD *)&v686 + 1) = v345;
                v687 = v350 + 8 * v351;
                if (v342)
                  operator delete(v342);
              }
              else
              {
                *v342 = v344;
                v345 = v342 + 1;
              }
              *((_QWORD *)&v686 + 1) = v345;
              v340 += 2;
              v342 = v345;
              if (v340 == v341)
                goto LABEL_552;
            }
            if (os_log_type_enabled(v359, OS_LOG_TYPE_ERROR))
            {
              v360 = *(_QWORD *)v260[5];
              v361 = *v340;
              v362 = v340[1];
              *(_DWORD *)buf = 136316162;
              *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 821;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v360;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)v717 = v361;
              *(_WORD *)&v717[4] = 1024;
              *(_DWORD *)&v717[6] = v362;
              _os_log_impl(&dword_18EE07000, v359, OS_LOG_TYPE_ERROR, "%25s:%-5d Object %s refers to missing track UID ATU_%04hx%04hx", buf, 0x28u);
            }
            v327 = 1;
          }
          if ((_QWORD)v686)
            operator delete((void *)v686);
        }
        else
        {
          v295 = 0;
          while (1)
          {
            v296 = *v261;
            if (!*v261)
              break;
            v297 = *v294;
            v298 = a1 + 64;
            do
            {
              v299 = *(unsigned __int16 *)(v296 + 32);
              v300 = v299 >= v297;
              if (v299 >= v297)
                v301 = (uint64_t *)v296;
              else
                v301 = (uint64_t *)(v296 + 8);
              if (v300)
                v298 = v296;
              v296 = *v301;
            }
            while (*v301);
            if ((uint64_t *)v298 == v261 || v297 < *(unsigned __int16 *)(v298 + 32))
              break;
            v302 = *(_QWORD *)(v298 + 40);
            if ((unint64_t)v295 >= v691)
            {
              v304 = (_QWORD *)v690;
              v305 = (uint64_t)((uint64_t)v295 - v690) >> 3;
              v306 = v305 + 1;
              if ((unint64_t)(v305 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v307 = v691 - v690;
              if ((uint64_t)(v691 - v690) >> 2 > v306)
                v306 = v307 >> 2;
              if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFF8)
                v308 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v308 = v306;
              if (v308)
                v308 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v308);
              else
                v309 = 0;
              v310 = (_QWORD *)(v308 + 8 * v305);
              *v310 = v302;
              v303 = v310 + 1;
              if (v295 != v304)
              {
                do
                {
                  v311 = *--v295;
                  *--v310 = v311;
                }
                while (v295 != v304);
                v295 = (_QWORD *)v690;
              }
              *(_QWORD *)&v690 = v310;
              *((_QWORD *)&v690 + 1) = v303;
              v691 = v308 + 8 * v309;
              if (v295)
                operator delete(v295);
            }
            else
            {
              *v295 = v302;
              v303 = v295 + 1;
            }
            *((_QWORD *)&v690 + 1) = v303;
            ++v294;
            v295 = v303;
            if (v294 == v293)
              goto LABEL_497;
          }
          if (os_log_type_enabled(v328, OS_LOG_TYPE_ERROR))
          {
            v329 = *(_QWORD *)v260[5];
            v330 = *v294;
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 799;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v329;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)v717 = v330;
            v331 = v328;
            v332 = "%25s:%-5d Object %s refers to missing complementary object AO_%04hx";
            v333 = 34;
            goto LABEL_514;
          }
LABEL_515:
          v327 = 1;
        }
        if ((_QWORD)v690)
          operator delete((void *)v690);
      }
      else
      {
        v267 = 0;
        while (1)
        {
          v268 = *v261;
          if (!*v261)
            break;
          v269 = *v266;
          v270 = a1 + 64;
          do
          {
            v271 = *(unsigned __int16 *)(v268 + 32);
            v272 = v271 >= v269;
            if (v271 >= v269)
              v273 = (uint64_t *)v268;
            else
              v273 = (uint64_t *)(v268 + 8);
            if (v272)
              v270 = v268;
            v268 = *v273;
          }
          while (*v273);
          if ((uint64_t *)v270 == v261 || v269 < *(unsigned __int16 *)(v270 + 32))
            break;
          v274 = *(_QWORD *)(v270 + 40);
          if ((unint64_t)v267 >= v695)
          {
            v276 = (_QWORD *)v694;
            v277 = (uint64_t)((uint64_t)v267 - v694) >> 3;
            v278 = v277 + 1;
            if ((unint64_t)(v277 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v279 = v695 - v694;
            if ((uint64_t)(v695 - v694) >> 2 > v278)
              v278 = v279 >> 2;
            if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFF8)
              v280 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v280 = v278;
            if (v280)
              v280 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v280);
            else
              v281 = 0;
            v282 = (_QWORD *)(v280 + 8 * v277);
            *v282 = v274;
            v275 = v282 + 1;
            if (v267 != v276)
            {
              do
              {
                v283 = *--v267;
                *--v282 = v283;
              }
              while (v267 != v276);
              v267 = (_QWORD *)v694;
            }
            *(_QWORD *)&v694 = v282;
            *((_QWORD *)&v694 + 1) = v275;
            v695 = v280 + 8 * v281;
            if (v267)
              operator delete(v267);
          }
          else
          {
            *v267 = v274;
            v275 = v267 + 1;
          }
          *((_QWORD *)&v694 + 1) = v275;
          ++v266;
          v267 = v275;
          if (v266 == v265)
            goto LABEL_458;
        }
        if (os_log_type_enabled(v324, OS_LOG_TYPE_ERROR))
        {
          v325 = *(_QWORD *)v260[5];
          v326 = *v266;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 788;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v325;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)v717 = v326;
          _os_log_impl(&dword_18EE07000, v324, OS_LOG_TYPE_ERROR, "%25s:%-5d Object %s refers to missing object AO_%04hx", buf, 0x22u);
        }
        v327 = 1;
      }
      if ((_QWORD)v694)
        operator delete((void *)v694);
      if (v327)
      {
        v11 = 4294900724;
        goto LABEL_951;
      }
      v363 = (uint64_t *)v260[1];
      if (v363)
      {
        do
        {
          v364 = v363;
          v363 = (uint64_t *)*v363;
        }
        while (v363);
      }
      else
      {
        do
        {
          v364 = (uint64_t *)v260[2];
          v200 = *v364 == (_QWORD)v260;
          v260 = v364;
        }
        while (!v200);
      }
      v260 = v364;
    }
    while (v364 != v261);
  }
  v367 = *(_QWORD *)a1;
  v368 = *v661;
  v369 = v661[1];
  v684[0] = *v661;
  v684[1] = v369;
  if (v369)
  {
    v370 = (unint64_t *)(v369 + 1);
    do
      v371 = __ldxr(v370);
    while (__stxr(v371 + 1, v370));
    v368 = *v661;
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataObject,AudioMetadataObjectRefs,AudioMetadataFormatExtended>(v367, v684, (uint64_t)(v368 + 3), &v715);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v684);
  v694 = 0uLL;
  v695 = 0;
  v372 = *(unsigned __int16 **)(a1 + 80);
  v665 = a1 + 80;
  v667 = (uint64_t *)(a1 + 88);
  if (v372 != (unsigned __int16 *)(a1 + 88))
  {
    do
    {
      v690 = 0uLL;
      v691 = 0;
      v375 = (unsigned __int16 *)*v373;
      v374 = (unsigned __int16 *)v373[1];
      if ((unsigned __int16 *)*v373 != v374)
      {
        v376 = 0;
        while (1)
        {
          if ((uint64_t *)(a1 + 112) == v377)
            break;
          v378 = v377[5];
          if ((unint64_t)v376 >= v691)
          {
            v380 = (uint64_t *)v690;
            v381 = (uint64_t)((uint64_t)v376 - v690) >> 3;
            v382 = v381 + 1;
            if ((unint64_t)(v381 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v383 = v691 - v690;
            if ((uint64_t)(v691 - v690) >> 2 > v382)
              v382 = v383 >> 2;
            if ((unint64_t)v383 >= 0x7FFFFFFFFFFFFFF8)
              v384 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v384 = v382;
            if (v384)
              v384 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v384);
            else
              v385 = 0;
            v386 = (uint64_t *)(v384 + 8 * v381);
            *v386 = v378;
            v379 = v386 + 1;
            if (v376 != v380)
            {
              do
              {
                v387 = *--v376;
                *--v386 = v387;
              }
              while (v376 != v380);
              v376 = (uint64_t *)v690;
            }
            *(_QWORD *)&v690 = v386;
            *((_QWORD *)&v690 + 1) = v379;
            v691 = v384 + 8 * v385;
            if (v376)
              operator delete(v376);
          }
          else
          {
            *v376 = v378;
            v379 = v376 + 1;
          }
          *((_QWORD *)&v690 + 1) = v379;
          v375 += 2;
          v376 = v379;
          if (v375 == v374)
            goto LABEL_606;
        }
        if (os_log_type_enabled(v471, OS_LOG_TYPE_ERROR))
        {
          v472 = **((_QWORD **)v372 + 5);
          v473 = *v375;
          v474 = v375[1];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 841;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v472;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)v717 = v473;
          *(_WORD *)&v717[4] = 1024;
          *(_DWORD *)&v717[6] = v474;
          _os_log_impl(&dword_18EE07000, v471, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format %s refers to missing channel format AC_%04hx%04hx", buf, 0x28u);
        }
        v470 = 1;
        goto LABEL_731;
      }
LABEL_606:
      v388 = *(_QWORD *)a1;
      v389 = (uint64_t *)*((_QWORD *)v372 + 5);
      v390 = (std::__shared_weak_count *)*((_QWORD *)v372 + 6);
      v682 = v389;
      v683 = v390;
      if (v390)
      {
        v391 = (unint64_t *)&v390->__shared_owners_;
        do
          v392 = __ldxr(v391);
        while (__stxr(v392 + 1, v391));
        v389 = (uint64_t *)*((_QWORD *)v372 + 5);
      }
      AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataChannelFormat,AudioMetadataChannelFormatRefs,AudioMetadataPackFormat>(v388, &v682, (uint64_t)v389 + 28, &v690);
      v393 = v683;
      if (v683)
      {
        v394 = (unint64_t *)&v683->__shared_owners_;
        do
          v395 = __ldaxr(v394);
        while (__stlxr(v395 - 1, v394));
        if (!v395)
        {
          ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
          std::__shared_weak_count::__release_weak(v393);
        }
      }
      v686 = 0uLL;
      v687 = 0;
      v398 = (unsigned __int16 *)*v396;
      v397 = (unsigned __int16 *)v396[1];
      if ((unsigned __int16 *)*v396 != v397)
      {
        v399 = 0;
        while (1)
        {
          if (v667 == v400)
            break;
          v401 = v400[5];
          if ((unint64_t)v399 >= v687)
          {
            v403 = (uint64_t *)v686;
            v404 = (uint64_t)((uint64_t)v399 - v686) >> 3;
            v405 = v404 + 1;
            if ((unint64_t)(v404 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v406 = v687 - v686;
            if ((uint64_t)(v687 - v686) >> 2 > v405)
              v405 = v406 >> 2;
            if ((unint64_t)v406 >= 0x7FFFFFFFFFFFFFF8)
              v407 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v407 = v405;
            if (v407)
              v407 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v407);
            else
              v408 = 0;
            v409 = (uint64_t *)(v407 + 8 * v404);
            *v409 = v401;
            v402 = v409 + 1;
            if (v399 != v403)
            {
              do
              {
                v410 = *--v399;
                *--v409 = v410;
              }
              while (v399 != v403);
              v399 = (uint64_t *)v686;
            }
            *(_QWORD *)&v686 = v409;
            *((_QWORD *)&v686 + 1) = v402;
            v687 = v407 + 8 * v408;
            if (v399)
              operator delete(v399);
          }
          else
          {
            *v399 = v401;
            v402 = v399 + 1;
          }
          *((_QWORD *)&v686 + 1) = v402;
          v398 += 2;
          v399 = v402;
          if (v398 == v397)
            goto LABEL_635;
        }
        if (os_log_type_enabled(v475, OS_LOG_TYPE_ERROR))
        {
          v476 = **((_QWORD **)v372 + 5);
          v477 = *v398;
          v478 = v398[1];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 852;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v476;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)v717 = v477;
          *(_WORD *)&v717[4] = 1024;
          *(_DWORD *)&v717[6] = v478;
          _os_log_impl(&dword_18EE07000, v475, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format %s refers to missing pack format AP_%04hx%04hx", buf, 0x28u);
        }
        v470 = 1;
        goto LABEL_729;
      }
LABEL_635:
      v411 = *(_QWORD *)a1;
      v412 = (uint64_t *)*((_QWORD *)v372 + 5);
      v413 = (std::__shared_weak_count *)*((_QWORD *)v372 + 6);
      v680 = v412;
      v681 = v413;
      if (v413)
      {
        v414 = (unint64_t *)&v413->__shared_owners_;
        do
          v415 = __ldxr(v414);
        while (__stxr(v415 + 1, v414));
        v412 = (uint64_t *)*((_QWORD *)v372 + 5);
      }
      AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataPackFormat,AudioMetadataPackFormatRefs,AudioMetadataPackFormat>(v411, &v680, (uint64_t)(v412 + 5), &v686);
      v416 = v681;
      if (v681)
      {
        v417 = (unint64_t *)&v681->__shared_owners_;
        do
          v418 = __ldaxr(v417);
        while (__stlxr(v418 - 1, v417));
        if (!v418)
        {
          ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
          std::__shared_weak_count::__release_weak(v416);
        }
      }
      v678 = 0uLL;
      v679 = 0;
      v421 = (unsigned __int16 *)*v419;
      v420 = (unsigned __int16 *)v419[1];
      if ((unsigned __int16 *)*v419 != v420)
      {
        v422 = 0;
        while (1)
        {
          if (v667 == v423)
            break;
          v424 = v423[5];
          if ((unint64_t)v422 >= v679)
          {
            v426 = (uint64_t *)v678;
            v427 = (uint64_t)((uint64_t)v422 - v678) >> 3;
            v428 = v427 + 1;
            if ((unint64_t)(v427 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v429 = v679 - v678;
            if ((uint64_t)(v679 - v678) >> 2 > v428)
              v428 = v429 >> 2;
            if ((unint64_t)v429 >= 0x7FFFFFFFFFFFFFF8)
              v430 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v430 = v428;
            if (v430)
              v430 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v430);
            else
              v431 = 0;
            v432 = (uint64_t *)(v430 + 8 * v427);
            *v432 = v424;
            v425 = v432 + 1;
            if (v422 != v426)
            {
              do
              {
                v433 = *--v422;
                *--v432 = v433;
              }
              while (v422 != v426);
              v422 = (uint64_t *)v678;
            }
            *(_QWORD *)&v678 = v432;
            *((_QWORD *)&v678 + 1) = v425;
            v679 = v430 + 8 * v431;
            if (v422)
              operator delete(v422);
          }
          else
          {
            *v422 = v424;
            v425 = v422 + 1;
          }
          *((_QWORD *)&v678 + 1) = v425;
          v421 += 2;
          v422 = v425;
          if (v421 == v420)
            goto LABEL_664;
        }
        if (os_log_type_enabled(v479, OS_LOG_TYPE_ERROR))
        {
          v480 = **((_QWORD **)v372 + 5);
          v481 = *v421;
          v482 = v421[1];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 863;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v480;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)v717 = v481;
          *(_WORD *)&v717[4] = 1024;
          *(_DWORD *)&v717[6] = v482;
          _os_log_impl(&dword_18EE07000, v479, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format %s refers to missing encode pack format AP_%04hx%04hx", buf, 0x28u);
        }
        v470 = 1;
        goto LABEL_727;
      }
LABEL_664:
      v434 = *(_QWORD *)a1;
      v435 = (uint64_t *)*((_QWORD *)v372 + 5);
      v436 = (std::__shared_weak_count *)*((_QWORD *)v372 + 6);
      v676 = v435;
      v677 = v436;
      if (v436)
      {
        v437 = (unint64_t *)&v436->__shared_owners_;
        do
          v438 = __ldxr(v437);
        while (__stxr(v438 + 1, v437));
        v435 = (uint64_t *)*((_QWORD *)v372 + 5);
      }
      AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataPackFormat,AudioMetadataPackFormatRefs,AudioMetadataPackFormat>(v434, &v676, (uint64_t)(v435 + 7), &v678);
      v439 = v677;
      if (v677)
      {
        v440 = (unint64_t *)&v677->__shared_owners_;
        do
          v441 = __ldaxr(v440);
        while (__stlxr(v441 - 1, v440));
        if (!v441)
        {
          ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
          std::__shared_weak_count::__release_weak(v439);
        }
      }
      *(_QWORD *)__str = 0;
      v721 = 0;
      v722 = 0;
      v444 = (unsigned __int16 *)*v442;
      v443 = (unsigned __int16 *)v442[1];
      if ((unsigned __int16 *)*v442 != v443)
      {
        v445 = 0;
        while (1)
        {
          if (v667 == v446)
            break;
          v447 = v446[5];
          if ((unint64_t)v445 >= v722)
          {
            v449 = *(uint64_t **)__str;
            v450 = ((uint64_t)v445 - *(_QWORD *)__str) >> 3;
            v451 = v450 + 1;
            if ((unint64_t)(v450 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v452 = v722 - *(_QWORD *)__str;
            if ((uint64_t)(v722 - *(_QWORD *)__str) >> 2 > v451)
              v451 = v452 >> 2;
            if ((unint64_t)v452 >= 0x7FFFFFFFFFFFFFF8)
              v453 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v453 = v451;
            if (v453)
              v453 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v453);
            else
              v454 = 0;
            v455 = (uint64_t *)(v453 + 8 * v450);
            *v455 = v447;
            v448 = v455 + 1;
            if (v445 != v449)
            {
              do
              {
                v456 = *--v445;
                *--v455 = v456;
              }
              while (v445 != v449);
              v445 = *(uint64_t **)__str;
            }
            *(_QWORD *)__str = v455;
            v721 = v448;
            v722 = v453 + 8 * v454;
            if (v445)
              operator delete(v445);
          }
          else
          {
            *v445 = v447;
            v448 = v445 + 1;
          }
          v721 = v448;
          v444 += 2;
          v445 = v448;
          if (v444 == v443)
            goto LABEL_693;
        }
        if (!os_log_type_enabled(v483, OS_LOG_TYPE_ERROR))
        {
LABEL_720:
          v470 = 1;
          goto LABEL_725;
        }
        v484 = **((_QWORD **)v372 + 5);
        v485 = *v444;
        v486 = v444[1];
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 874;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v484;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)v717 = v485;
        *(_WORD *)&v717[4] = 1024;
        *(_DWORD *)&v717[6] = v486;
        v487 = v483;
        v488 = "%25s:%-5d Pack format %s refers to missing decode pack format AP_%04hx%04hx";
        goto LABEL_723;
      }
LABEL_693:
      v457 = *(_QWORD *)a1;
      v458 = (uint64_t *)*((_QWORD *)v372 + 5);
      v459 = (uint64_t *)*((_QWORD *)v372 + 6);
      v675[0] = v458;
      v675[1] = v459;
      if (v459)
      {
        v460 = (unint64_t *)(v459 + 1);
        do
          v461 = __ldxr(v460);
        while (__stxr(v461 + 1, v460));
        v458 = (uint64_t *)*((_QWORD *)v372 + 5);
      }
      AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataPackFormat,AudioMetadataPackFormatRefs,AudioMetadataPackFormat>(v457, v675, (uint64_t)v458 + 68, __str);
      std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v675);
      v462 = v372[16];
      v463 = v372[17];
      if (v464)
      {
        v465 = v464;
        if (v667 == v466)
        {
          if (!os_log_type_enabled(v489, OS_LOG_TYPE_ERROR))
            goto LABEL_720;
          v490 = **((_QWORD **)v372 + 5);
          v491 = *((unsigned __int16 *)v465 + 10);
          v492 = *((unsigned __int16 *)v465 + 11);
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 886;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v490;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)v717 = v491;
          *(_WORD *)&v717[4] = 1024;
          *(_DWORD *)&v717[6] = v492;
          v487 = v489;
          v488 = "%25s:%-5d Pack format %s refers to missing input pack format AP_%04hx%04hx";
          goto LABEL_723;
        }
        *(_QWORD *)(*((_QWORD *)v372 + 5) + 80) = v466[5];
        v462 = v372[16];
        v463 = v372[17];
      }
      if (!v467)
        goto LABEL_703;
      v468 = v467;
      if (v667 != v469)
      {
        *(_QWORD *)(*((_QWORD *)v372 + 5) + 88) = v469[5];
LABEL_703:
        *(_QWORD *)buf = *((_QWORD *)v372 + 5);
        std::vector<AudioMetadataObject *>::push_back[abi:ne180100]((void **)&v694, buf);
        v470 = 0;
        goto LABEL_725;
      }
      if (!os_log_type_enabled(v493, OS_LOG_TYPE_ERROR))
        goto LABEL_724;
      v494 = **((_QWORD **)v372 + 5);
      v495 = *((unsigned __int16 *)v468 + 10);
      v496 = *((unsigned __int16 *)v468 + 11);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 897;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v494;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)v717 = v495;
      *(_WORD *)&v717[4] = 1024;
      *(_DWORD *)&v717[6] = v496;
      v487 = v493;
      v488 = "%25s:%-5d Pack format %s refers to missing output pack format AP_%04hx%04hx";
LABEL_723:
      _os_log_impl(&dword_18EE07000, v487, OS_LOG_TYPE_ERROR, v488, buf, 0x28u);
LABEL_724:
      v470 = 1;
LABEL_725:
      if (*(_QWORD *)__str)
        operator delete(*(void **)__str);
LABEL_727:
      if ((_QWORD)v678)
        operator delete((void *)v678);
LABEL_729:
      if ((_QWORD)v686)
        operator delete((void *)v686);
LABEL_731:
      if ((_QWORD)v690)
        operator delete((void *)v690);
      if (v470)
      {
        v11 = 4294900724;
        goto LABEL_949;
      }
      v497 = (uint64_t *)*((_QWORD *)v372 + 1);
      if (v497)
      {
        do
        {
          v498 = v497;
          v497 = (uint64_t *)*v497;
        }
        while (v497);
      }
      else
      {
        do
        {
          v498 = (uint64_t *)*((_QWORD *)v372 + 2);
          v200 = *v498 == (_QWORD)v372;
          v372 = (unsigned __int16 *)v498;
        }
        while (!v200);
      }
      v372 = (unsigned __int16 *)v498;
    }
    while (v498 != v667);
  }
  v499 = *(_QWORD *)a1;
  v500 = *v661;
  v501 = v661[1];
  v674[0] = *v661;
  v674[1] = v501;
  if (v501)
  {
    v502 = (unint64_t *)(v501 + 1);
    do
      v503 = __ldxr(v502);
    while (__stxr(v503 + 1, v502));
    v500 = *v661;
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataPackFormat,AudioMetadataPackFormatRefs,AudioMetadataFormatExtended>(v499, v674, (uint64_t)v500 + 36, &v694);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v674);
  v690 = 0uLL;
  v691 = 0;
  v504 = *(unsigned __int16 **)(a1 + 104);
  v660 = (unsigned __int16 *)(a1 + 104);
  v663 = (uint64_t *)(a1 + 112);
  if (v504 != (unsigned __int16 *)(a1 + 112))
  {
    do
    {
      v686 = 0uLL;
      v687 = 0;
      v507 = (unsigned __int16 *)*v505;
      v506 = (unsigned __int16 *)v505[1];
      if ((unsigned __int16 *)*v505 == v506)
      {
LABEL_765:
        v520 = *(_QWORD *)a1;
        v521 = (uint64_t *)*((_QWORD *)v504 + 5);
        v522 = (std::__shared_weak_count *)*((_QWORD *)v504 + 6);
        v672 = v521;
        v673 = v522;
        if (v522)
        {
          v523 = (unint64_t *)&v522->__shared_owners_;
          do
            v524 = __ldxr(v523);
          while (__stxr(v524 + 1, v523));
          v521 = (uint64_t *)*((_QWORD *)v504 + 5);
        }
        AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataBlockFormat,AudioMetadataBlockFormatRefs,AudioMetadataChannelFormat>(v520, &v672, (uint64_t)(v521 + 3), &v686);
        v531 = v673;
        if (v673)
        {
          v532 = (unint64_t *)&v673->__shared_owners_;
          do
            v533 = __ldaxr(v532);
          while (__stlxr(v533 - 1, v532));
          if (!v533)
          {
            ((void (*)(std::__shared_weak_count *))v531->__on_zero_shared)(v531);
            std::__shared_weak_count::__release_weak(v531);
          }
        }
        v534 = *((_QWORD *)v504 + 5);
        v535 = (char *)*((_QWORD *)&v690 + 1);
        if (*((_QWORD *)&v690 + 1) >= v691)
        {
          v537 = (char *)v690;
          v538 = (uint64_t)(*((_QWORD *)&v690 + 1) - v690) >> 3;
          v539 = v538 + 1;
          if ((unint64_t)(v538 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v540 = v691 - v690;
          if ((uint64_t)(v691 - v690) >> 2 > v539)
            v539 = v540 >> 2;
          if ((unint64_t)v540 >= 0x7FFFFFFFFFFFFFF8)
            v541 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v541 = v539;
          if (v541)
            v541 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v541);
          else
            v542 = 0;
          v543 = (_QWORD *)(v541 + 8 * v538);
          *v543 = v534;
          v536 = v543 + 1;
          if (v535 != v537)
          {
            do
            {
              v544 = *((_QWORD *)v535 - 1);
              v535 -= 8;
              *--v543 = v544;
            }
            while (v535 != v537);
            v535 = (char *)v690;
          }
          *(_QWORD *)&v690 = v543;
          v691 = v541 + 8 * v542;
          if (v535)
            operator delete(v535);
        }
        else
        {
          **((_QWORD **)&v690 + 1) = v534;
          v536 = v535 + 8;
        }
        *((_QWORD *)&v690 + 1) = v536;
        v530 = 1;
      }
      else
      {
        v508 = 0;
        while (1)
        {
          if ((uint64_t *)(a1 + 208) == v509)
            break;
          v510 = v509[5];
          if ((unint64_t)v508 >= v687)
          {
            v512 = (uint64_t *)v686;
            v513 = (uint64_t)((uint64_t)v508 - v686) >> 3;
            v514 = v513 + 1;
            if ((unint64_t)(v513 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v515 = v687 - v686;
            if ((uint64_t)(v687 - v686) >> 2 > v514)
              v514 = v515 >> 2;
            if ((unint64_t)v515 >= 0x7FFFFFFFFFFFFFF8)
              v516 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v516 = v514;
            if (v516)
              v516 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v516);
            else
              v517 = 0;
            v518 = (uint64_t *)(v516 + 8 * v513);
            *v518 = v510;
            v511 = v518 + 1;
            if (v508 != v512)
            {
              do
              {
                v519 = *--v508;
                *--v518 = v519;
              }
              while (v508 != v512);
              v508 = (uint64_t *)v686;
            }
            *(_QWORD *)&v686 = v518;
            *((_QWORD *)&v686 + 1) = v511;
            v687 = v516 + 8 * v517;
            if (v508)
              operator delete(v508);
          }
          else
          {
            *v508 = v510;
            v511 = v508 + 1;
          }
          *((_QWORD *)&v686 + 1) = v511;
          v507 += 4;
          v508 = v511;
          if (v507 == v506)
            goto LABEL_765;
        }
        if (os_log_type_enabled(v525, OS_LOG_TYPE_ERROR))
        {
          v526 = **((_QWORD **)v504 + 5);
          v527 = *v507;
          v528 = v507[1];
          v529 = *((_DWORD *)v507 + 1);
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 916;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v526;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)v717 = v527;
          *(_WORD *)&v717[4] = 1024;
          *(_DWORD *)&v717[6] = v528;
          v718 = 1024;
          v719 = v529;
          _os_log_impl(&dword_18EE07000, v525, OS_LOG_TYPE_ERROR, "%25s:%-5d Channel format %s refers to missing block format AB_%04hx%04hx_%08x", buf, 0x2Eu);
        }
        v530 = 0;
      }
      if ((_QWORD)v686)
        operator delete((void *)v686);
      if (!v530)
      {
        v11 = 4294900724;
        goto LABEL_947;
      }
      v545 = (unsigned __int16 *)*((_QWORD *)v504 + 1);
      if (v545)
      {
        do
        {
          v546 = v545;
          v545 = *(unsigned __int16 **)v545;
        }
        while (v545);
      }
      else
      {
        do
        {
          v546 = (unsigned __int16 *)*((_QWORD *)v504 + 2);
          v200 = *(_QWORD *)v546 == (_QWORD)v504;
          v504 = v546;
        }
        while (!v200);
      }
      v504 = v546;
    }
    while (v546 != (unsigned __int16 *)v663);
  }
  v547 = *(_QWORD *)a1;
  v548 = *v661;
  v549 = v661[1];
  v671[0] = *v661;
  v671[1] = v549;
  if (v549)
  {
    v550 = (unint64_t *)(v549 + 1);
    do
      v551 = __ldxr(v550);
    while (__stxr(v551 + 1, v550));
    v548 = *v661;
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataChannelFormat,AudioMetadataChannelFormatRefs,AudioMetadataFormatExtended>(v547, v671, (uint64_t)(v548 + 6), &v690);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v671);
  v686 = 0uLL;
  v687 = 0;
  v552 = *(_QWORD **)(a1 + 128);
  if (v552 != (_QWORD *)(a1 + 136))
  {
    v553 = 0;
    do
    {
      v554 = *((unsigned __int16 *)v552 + 16);
      v555 = *((unsigned __int16 *)v552 + 17);
      v556 = *(int8x8_t *)(a1 + 752);
      if (v556)
      {
        v557 = v555 + v554;
        v558 = (uint8x8_t)vcnt_s8(v556);
        v558.i16[0] = vaddlv_u8(v558);
        if (v558.u32[0] > 1uLL)
        {
          v559 = v555 + v554;
          if (v557 >= *(_QWORD *)&v556)
            v559 = v557 % *(_QWORD *)&v556;
        }
        else
        {
          v559 = (v556.i32[0] - 1) & v557;
        }
        v560 = *(unsigned __int16 ***)(*(_QWORD *)(a1 + 744) + 8 * v559);
        if (v560)
        {
          for (i11 = *v560; i11; i11 = *(unsigned __int16 **)i11)
          {
            v562 = *((_QWORD *)i11 + 1);
            if (v562 == v557)
            {
              if (i11[8] == (_DWORD)v554 && i11[9] == (_DWORD)v555)
              {
                if ((uint64_t *)(a1 + 160) != v564)
                {
                  *(_QWORD *)(v552[5] + 12) = v564[5];
                  LOWORD(v555) = *((_WORD *)v552 + 17);
                  break;
                }
                v11 = 4294900724;
                if (!os_log_type_enabled(v651, OS_LOG_TYPE_ERROR))
                  goto LABEL_945;
                v652 = *(_QWORD *)v552[5];
                v653 = i11[10];
                v654 = i11[11];
                v655 = *((unsigned __int8 *)i11 + 24);
                *(_DWORD *)buf = 136316418;
                *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 936;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = v652;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)v717 = v653;
                *(_WORD *)&v717[4] = 1024;
                *(_DWORD *)&v717[6] = v654;
                v718 = 1024;
                v719 = v655;
                v610 = "%25s:%-5d Track UID %s refers to missing track format AT_%04hx%04hx_%02hhx";
                v614 = v651;
                v615 = 46;
LABEL_901:
                _os_log_impl(&dword_18EE07000, v614, OS_LOG_TYPE_ERROR, v610, buf, v615);
                goto LABEL_945;
              }
            }
            else
            {
              if (v558.u32[0] > 1uLL)
              {
                if (v562 >= *(_QWORD *)&v556)
                  v562 %= *(_QWORD *)&v556;
              }
              else
              {
                v562 &= *(_QWORD *)&v556 - 1;
              }
              if (v562 != v559)
                break;
            }
          }
        }
      }
      if (v565)
      {
        v566 = v565;
        if (v663 == v567)
        {
          v11 = 4294900724;
          if (!os_log_type_enabled(v606, OS_LOG_TYPE_ERROR))
            goto LABEL_945;
          v607 = *(_QWORD *)v552[5];
          v608 = *((unsigned __int16 *)v566 + 10);
          v609 = *((unsigned __int16 *)v566 + 11);
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 946;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v607;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)v717 = v608;
          *(_WORD *)&v717[4] = 1024;
          *(_DWORD *)&v717[6] = v609;
          v610 = "%25s:%-5d Track UID %s refers to missing channel format AC_%04hx%04hx";
          goto LABEL_900;
        }
        *(_QWORD *)(v552[5] + 20) = v567[5];
        LOWORD(v555) = *((_WORD *)v552 + 17);
      }
      if (v568)
      {
        v569 = v568;
        if (v667 == v570)
        {
          v11 = 4294900724;
          if (!os_log_type_enabled(v606, OS_LOG_TYPE_ERROR))
            goto LABEL_945;
          v611 = *(_QWORD *)v552[5];
          v612 = *((unsigned __int16 *)v569 + 10);
          v613 = *((unsigned __int16 *)v569 + 11);
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 956;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v611;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)v717 = v612;
          *(_WORD *)&v717[4] = 1024;
          *(_DWORD *)&v717[6] = v613;
          v610 = "%25s:%-5d Track UID %s refers to missing pack format AP_%04hx%04hx";
LABEL_900:
          v614 = v606;
          v615 = 40;
          goto LABEL_901;
        }
        v571 = v552[5];
        *(_QWORD *)(v571 + 28) = v570[5];
      }
      else
      {
        v571 = v552[5];
      }
      if ((unint64_t)v553 >= v687)
      {
        v572 = (_QWORD *)v686;
        v573 = (uint64_t)((uint64_t)v553 - v686) >> 3;
        v574 = v573 + 1;
        if ((unint64_t)(v573 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v575 = v687 - v686;
        if ((uint64_t)(v687 - v686) >> 2 > v574)
          v574 = v575 >> 2;
        if ((unint64_t)v575 >= 0x7FFFFFFFFFFFFFF8)
          v576 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v576 = v574;
        if (v576)
          v576 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v576);
        else
          v577 = 0;
        v578 = (_QWORD *)(v576 + 8 * v573);
        *v578 = v571;
        v579 = v578 + 1;
        if (v553 != v572)
        {
          do
          {
            v580 = *--v553;
            *--v578 = v580;
          }
          while (v553 != v572);
          v553 = (_QWORD *)v686;
        }
        *(_QWORD *)&v686 = v578;
        *((_QWORD *)&v686 + 1) = v579;
        v687 = v576 + 8 * v577;
        if (v553)
          operator delete(v553);
        v553 = v579;
      }
      else
      {
        *v553++ = v571;
      }
      *((_QWORD *)&v686 + 1) = v553;
      v581 = (_QWORD *)v552[1];
      if (v581)
      {
        do
        {
          v582 = v581;
          v581 = (_QWORD *)*v581;
        }
        while (v581);
      }
      else
      {
        do
        {
          v582 = (_QWORD *)v552[2];
          v200 = *v582 == (_QWORD)v552;
          v552 = v582;
        }
        while (!v200);
      }
      v552 = v582;
    }
    while (v582 != (_QWORD *)(a1 + 136));
  }
  v583 = *(_QWORD *)a1;
  v584 = *v661;
  v585 = v661[1];
  v670[0] = *v661;
  v670[1] = v585;
  if (v585)
  {
    v586 = (unint64_t *)(v585 + 1);
    do
      v587 = __ldxr(v586);
    while (__stxr(v587 + 1, v586));
    v584 = *v661;
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataTrackUID,AudioMetadataTrackUIDRefs,AudioMetadataFormatExtended>(v583, v670, (uint64_t)v584 + 84, &v686);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v670);
  v678 = 0uLL;
  v679 = 0;
  v588 = *(_QWORD **)(a1 + 152);
  if (v588 != (_QWORD *)(a1 + 160))
  {
    do
    {
      if ((uint64_t *)(a1 + 184) == v589)
      {
        v11 = 4294900724;
        if (os_log_type_enabled(v601, OS_LOG_TYPE_ERROR))
        {
          v602 = *((unsigned __int16 *)v588 + 16);
          v603 = *((unsigned __int16 *)v588 + 17);
          v604 = *(_QWORD *)v588[5];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 973;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v602;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v603;
          *(_WORD *)v717 = 2080;
          *(_QWORD *)&v717[2] = v604;
          _os_log_impl(&dword_18EE07000, v601, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing stream format AS_%04hx%04hx for track format %s", buf, 0x28u);
        }
        goto LABEL_943;
      }
      v590 = v588[5];
      *(_QWORD *)(v590 + 32) = v589[5];
      *(_QWORD *)buf = v590;
      std::vector<AudioMetadataObject *>::push_back[abi:ne180100]((void **)&v678, buf);
      v591 = (_QWORD *)v588[1];
      if (v591)
      {
        do
        {
          v592 = v591;
          v591 = (_QWORD *)*v591;
        }
        while (v591);
      }
      else
      {
        do
        {
          v592 = (_QWORD *)v588[2];
          v200 = *v592 == (_QWORD)v588;
          v588 = v592;
        }
        while (!v200);
      }
      v588 = v592;
    }
    while (v592 != (_QWORD *)(a1 + 160));
  }
  v593 = *(_QWORD *)a1;
  v594 = *v661;
  v595 = v661[1];
  v669[0] = *v661;
  v669[1] = v595;
  if (v595)
  {
    v596 = (unint64_t *)(v595 + 1);
    v597 = (_QWORD *)(a1 + 864);
    do
      v598 = __ldxr(v596);
    while (__stxr(v598 + 1, v596));
    v594 = *v661;
  }
  else
  {
    v597 = (_QWORD *)(a1 + 864);
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataTrackFormat,AudioMetadataTrackFormatRefs,AudioMetadataFormatExtended>(v593, v669, (uint64_t)(v594 + 9), &v678);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v669);
  *(_QWORD *)__str = 0;
  v721 = 0;
  v722 = 0;
  v616 = *(_QWORD **)(a1 + 176);
  if (v616 == (_QWORD *)(a1 + 184))
  {
LABEL_914:
    v623 = *(_QWORD *)a1;
    v624 = *v661;
    v625 = v661[1];
    v668[0] = *v661;
    v668[1] = v625;
    if (v625)
    {
      v626 = (unint64_t *)(v625 + 1);
      do
        v627 = __ldxr(v626);
      while (__stxr(v627 + 1, v626));
      v624 = *v661;
    }
    AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataStreamFormat,AudioMetadataStreamFormatRefs,AudioMetadataFormatExtended>(v623, v668, (uint64_t)v624 + 60, __str);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v668);
    v628 = *(unsigned __int16 **)(a1 + 200);
    v629 = (unsigned __int16 *)(a1 + 208);
    if (v628 == (unsigned __int16 *)(a1 + 208))
    {
LABEL_933:
      v11 = 0;
      goto LABEL_941;
    }
    v630 = a1 + 944;
    while (1)
    {
      if (v631)
      {
        v632 = v631;
        if (v663 == v633)
        {
          v11 = 4294900724;
          if (!os_log_type_enabled(v642, OS_LOG_TYPE_ERROR))
            goto LABEL_941;
          v656 = **((_QWORD **)v628 + 5);
          v657 = *((unsigned __int16 *)v632 + 12);
          v658 = *((unsigned __int16 *)v632 + 13);
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1009;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v656;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)v717 = v657;
          *(_WORD *)&v717[4] = 1024;
          *(_DWORD *)&v717[6] = v658;
          v646 = "%25s:%-5d Block format %s refers to missing output channel format AC_%04hx%04hx";
LABEL_940:
          _os_log_impl(&dword_18EE07000, v642, OS_LOG_TYPE_ERROR, v646, buf, 0x28u);
          goto LABEL_941;
        }
        *(_QWORD *)(*((_QWORD *)v628 + 5) + 44) = v633[5];
      }
      if (*(_DWORD *)(*((_QWORD *)v628 + 5) + 60))
      {
        v634 = 0;
        v635 = 0;
        while (1)
        {
          v637 = (unsigned __int16 *)(v636 + v634);
          if (v663 == v638)
            break;
          v639 = *((_QWORD *)v628 + 5);
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v639 + 64) + 8 * v635++) + 36) = v638[5];
          v634 += 4;
          if (v635 >= *(unsigned int *)(v639 + 60))
            goto LABEL_927;
        }
        v11 = 4294900724;
        if (os_log_type_enabled(v642, OS_LOG_TYPE_ERROR))
        {
          v643 = **((_QWORD **)v628 + 5);
          v644 = *v637;
          v645 = *(unsigned __int16 *)(v636 + 4 * v635 + 2);
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1019;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v643;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)v717 = v644;
          *(_WORD *)&v717[4] = 1024;
          *(_DWORD *)&v717[6] = v645;
          v646 = "%25s:%-5d Block format %s refers to missing input channel format AC_%04hx%04hx";
          goto LABEL_940;
        }
        goto LABEL_941;
      }
LABEL_927:
      v640 = (unsigned __int16 *)*((_QWORD *)v628 + 1);
      if (v640)
      {
        do
        {
          v641 = v640;
          v640 = *(unsigned __int16 **)v640;
        }
        while (v640);
      }
      else
      {
        do
        {
          v641 = (unsigned __int16 *)*((_QWORD *)v628 + 2);
          v200 = *(_QWORD *)v641 == (_QWORD)v628;
          v628 = v641;
        }
        while (!v200);
      }
      v628 = v641;
      if (v641 == v629)
        goto LABEL_933;
    }
  }
  while (1)
  {
    if (!v617)
    {
      v620 = v616[5];
      goto LABEL_908;
    }
    v618 = v617;
    if (v663 == v619)
      break;
    v620 = v616[5];
    *(_QWORD *)(v620 + 32) = v619[5];
LABEL_908:
    *(_QWORD *)buf = v620;
    std::vector<AudioMetadataObject *>::push_back[abi:ne180100]((void **)__str, buf);
    v621 = (_QWORD *)v616[1];
    if (v621)
    {
      do
      {
        v622 = v621;
        v621 = (_QWORD *)*v621;
      }
      while (v621);
    }
    else
    {
      do
      {
        v622 = (_QWORD *)v616[2];
        v200 = *v622 == (_QWORD)v616;
        v616 = v622;
      }
      while (!v200);
    }
    v616 = v622;
    if (v622 == (_QWORD *)(a1 + 184))
      goto LABEL_914;
  }
  v11 = 4294900724;
  if (os_log_type_enabled(v642, OS_LOG_TYPE_ERROR))
  {
    v648 = *(_QWORD *)v616[5];
    v649 = *((unsigned __int16 *)v618 + 10);
    v650 = *((unsigned __int16 *)v618 + 11);
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 991;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v648;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)v717 = v649;
    *(_WORD *)&v717[4] = 1024;
    *(_DWORD *)&v717[6] = v650;
    v646 = "%25s:%-5d Stream format %s refers to missing channel format AC_%04hx%04hx";
    goto LABEL_940;
  }
LABEL_941:
  if (*(_QWORD *)__str)
    operator delete(*(void **)__str);
LABEL_943:
  if ((_QWORD)v678)
    operator delete((void *)v678);
LABEL_945:
  if ((_QWORD)v686)
    operator delete((void *)v686);
LABEL_947:
  if ((_QWORD)v690)
    operator delete((void *)v690);
LABEL_949:
  if ((_QWORD)v694)
    operator delete((void *)v694);
LABEL_951:
  if (v715.__r_.__value_.__r.__words[0])
    operator delete(v715.__r_.__value_.__l.__data_);
LABEL_954:
  if (v702)
    operator delete(v702);
LABEL_956:
  if (v708)
    operator delete((void *)v708);
  return v11;
}

void sub_18EF50F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  void *a71;
  uint64_t v71;
  void *v73;
  void *v74;
  void *v75;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  v73 = *(void **)(v71 - 128);
  if (v73)
    operator delete(v73);
  if (__p)
    operator delete(__p);
  if (a66)
    operator delete(a66);
  if (a71)
    operator delete(a71);
  if (STACK[0x218])
    operator delete((void *)STACK[0x218]);
  v74 = *(void **)(v71 - 200);
  if (v74)
    operator delete(v74);
  if (STACK[0x278])
    operator delete((void *)STACK[0x278]);
  v75 = *(void **)(v71 - 256);
  if (v75)
    operator delete(v75);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::log()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;

  v1 = &unk_1EE168000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE168000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EE168000;
    }
  }
  return v1[155];
}

void std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *std::unordered_map<`anonymous namespace'::FormatID,`anonymous namespace'::FormatID>::clear[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t `anonymous namespace'::decode_var_uint(_anonymous_namespace_ *this, const unsigned __int8 *a2, _QWORD *a3, unint64_t *a4, unsigned __int8 *a5)
{
  uint64_t result;
  char v10;
  unint64_t v11;

  *a4 = 0;
  while (1)
  {
    LOBYTE(v11) = 0;
    if ((_DWORD)result)
      break;
    v10 = v11;
    *a4 = v11 & 0x7F | (*a4 << 7);
    if ((v10 & 0x80) == 0)
      return 0;
  }
  return result;
}

uint64_t `anonymous namespace'::decode_uint16(_anonymous_namespace_ *this, const unsigned __int8 *a2, unint64_t *a3, unint64_t *a4, unsigned __int16 *a5)
{
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *a3 + 2;
  if (v5 <= (unint64_t)a2)
  {
    v6 = 0;
    *(_WORD *)a4 = bswap32(*(unsigned __int16 *)((char *)this + *a3)) >> 16;
    *a3 = v5;
  }
  else
  {
    v6 = 4294900721;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "AudioMetadataDeserializer.cpp";
      v11 = 1024;
      v12 = 390;
      _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Metadata serialized element truncated...", (uint8_t *)&v9, 0x12u);
    }
  }
  return v6;
}

uint64_t `anonymous namespace'::decode_uint32(_anonymous_namespace_ *this, const unsigned __int8 *a2, unint64_t *a3, unint64_t *a4, unsigned int *a5)
{
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *a3 + 4;
  if (v5 <= (unint64_t)a2)
  {
    v6 = 0;
    *(_DWORD *)a4 = bswap32(*(_DWORD *)((char *)this + *a3));
    *a3 = v5;
  }
  else
  {
    v6 = 4294900721;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "AudioMetadataDeserializer.cpp";
      v11 = 1024;
      v12 = 404;
      _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Metadata serialized element truncated...", (uint8_t *)&v9, 0x12u);
    }
  }
  return v6;
}

uint64_t CA::AudioMetadataDeserializer::Impl::decode_programme(CA::AudioMetadataDeserializer::Impl *this, _anonymous_namespace_ *a2, const unsigned __int8 *a3, unint64_t *a4, unsigned __int16 *a5)
{
  uint64_t **v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t **v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  unsigned __int8 *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t **v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unint64_t *v40;
  unint64_t v41;
  NSObject *v42;
  const char *v43;
  NSObject *v44;
  uint32_t v45;
  unsigned __int8 *v46;
  void *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t **v71;
  unint64_t *v72;
  unint64_t v73;
  char *v74;
  unsigned __int8 *v75;
  unint64_t *v76;
  unint64_t v77;
  NSObject *v78;
  NSObject *v79;
  const char *v80;
  uint64_t **v81;
  _QWORD *v82;
  unint64_t *v83;
  unint64_t v84;
  char *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t **v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  char *v93;
  unsigned __int8 *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  NSObject *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t **v102;
  _QWORD *v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  unsigned __int8 *v107;
  uint64_t v108;
  NSObject *v109;
  unsigned __int8 v110;
  uint64_t v111;
  NSObject *v112;
  uint64_t **v113;
  _QWORD *v114;
  unint64_t *v115;
  unint64_t v116;
  char *v117;
  unsigned __int8 *v118;
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  NSObject *v122;
  uint64_t v123;
  NSObject *v124;
  uint64_t **v125;
  _QWORD *v126;
  unint64_t *v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  NSObject *v131;
  uint64_t v132;
  NSObject *v133;
  NSObject *v134;
  uint64_t *v135;
  uint64_t **v136;
  unsigned int v137;
  uint64_t **v138;
  unsigned int v139;
  void *v140;
  uint64_t v141;
  uint64_t *v142;
  const char *v143;
  uint64_t *v144;
  _QWORD *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  NSObject *v151;
  NSObject *v154;
  uint64_t *v156[2];
  uint64_t *v157[2];
  uint64_t *v158[2];
  uint64_t *v159[2];
  _QWORD *v160;
  std::__shared_weak_count *v161;
  _BYTE v162[17];
  uint64_t v163;
  uint64_t *v164[2];
  void *v165[2];
  uint64_t v166;
  uint64_t *v167[2];
  void *__p[2];
  uint64_t v169;
  uint64_t *v170[2];
  _QWORD *v171;
  uint64_t *v172;
  unsigned __int8 v173;
  _BYTE v174[18];
  uint8_t v175[32];
  uint8_t v176[39];
  char __str[9];
  uint8_t v178[32];
  uint8_t buf[24];
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  AudioMetadataMemoryPool::create<AudioMetadataProgramme>(&v171, *(_QWORD *)this);
  snprintf(__str, 9uLL, "APR_%04hx", *a5);
  v10 = *(uint64_t ***)this;
  v11 = v171;
  v12 = (std::__shared_weak_count *)v172;
  v170[0] = v171;
  v170[1] = v172;
  if (v172)
  {
    v13 = (unint64_t *)(v172 + 1);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v10, v170, v11, __str);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v169 = 0;
  if ((_DWORD)v18)
  {
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2291;
    v20 = "%25s:%-5d ...at programme name";
LABEL_26:
    _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
    goto LABEL_27;
  }
  v21 = *(uint64_t ***)this;
  v22 = v171;
  v23 = (std::__shared_weak_count *)v172;
  v167[0] = v171;
  v167[1] = v172;
  if (v172)
  {
    v24 = (unint64_t *)(v172 + 1);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if (v169 >= 0)
    v26 = (char *)__p;
  else
    v26 = (char *)__p[0];
  AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v21, v167, v22 + 1, v26);
  if (v23)
  {
    v28 = (unint64_t *)&v23->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v165[0] = 0;
  v165[1] = 0;
  v166 = 0;
  if ((_DWORD)v18)
  {
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2298;
    v20 = "%25s:%-5d ...at programme language";
    goto LABEL_26;
  }
  v34 = *(uint64_t ***)this;
  v35 = v171;
  v36 = (std::__shared_weak_count *)v172;
  v164[0] = v171;
  v164[1] = v172;
  if (v172)
  {
    v37 = (unint64_t *)(v172 + 1);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v34, v164, v35 + 2, (char *)v165);
  if (v36)
  {
    v40 = (unint64_t *)&v36->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  *(_OWORD *)&v162[1] = 0uLL;
  v163 = 0;
  if ((_DWORD)v18)
  {
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2305;
      v43 = "%25s:%-5d ...at programme content references";
      v44 = v42;
      v45 = 18;
LABEL_46:
      _os_log_impl(&dword_18EE07000, v44, OS_LOG_TYPE_ERROR, v43, buf, v45);
    }
    goto LABEL_212;
  }
  v18 = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t *)this + 28, *a5, a5);
  v47 = *(void **)(v18 + 24);
  if (v47)
  {
    *(_QWORD *)(v18 + 32) = v47;
    operator delete(v47);
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 40) = 0;
  }
  *(_OWORD *)(v18 + 24) = *(_OWORD *)&v162[1];
  *(_QWORD *)(v18 + 40) = v163;
  v163 = 0;
  *(_OWORD *)&v162[1] = 0uLL;
  if (*a4 >= (unint64_t)a3)
  {
LABEL_186:
    v136 = (uint64_t **)((char *)this + 16);
    v135 = (uint64_t *)*((_QWORD *)this + 2);
    if (v135)
    {
      v137 = *a5;
      while (1)
      {
        while (1)
        {
          v138 = (uint64_t **)v135;
          v139 = *((unsigned __int16 *)v135 + 16);
          if (v137 >= v139)
            break;
          v135 = *v138;
          v136 = v138;
          if (!*v138)
            goto LABEL_195;
        }
        if (v139 >= v137)
          break;
        v135 = v138[1];
        if (!v135)
        {
          v136 = v138 + 1;
          goto LABEL_195;
        }
      }
      v140 = v138;
    }
    else
    {
      v138 = (uint64_t **)((char *)this + 16);
LABEL_195:
      v140 = operator new(0x38uLL);
      *((_WORD *)v140 + 16) = *a5;
      *((_QWORD *)v140 + 5) = 0;
      *((_QWORD *)v140 + 6) = 0;
      *(_QWORD *)v140 = 0;
      *((_QWORD *)v140 + 1) = 0;
      *((_QWORD *)v140 + 2) = v138;
      *v136 = (uint64_t *)v140;
      v141 = **((_QWORD **)this + 1);
      v142 = (uint64_t *)v140;
      if (v141)
      {
        *((_QWORD *)this + 1) = v141;
        v142 = *v136;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 2), v142);
      ++*((_QWORD *)this + 3);
    }
    v145 = v171;
    v144 = v172;
    if (v172)
    {
      v146 = (unint64_t *)(v172 + 1);
      do
        v147 = __ldxr(v146);
      while (__stxr(v147 + 1, v146));
    }
    v148 = (std::__shared_weak_count *)*((_QWORD *)v140 + 6);
    *((_QWORD *)v140 + 5) = v145;
    *((_QWORD *)v140 + 6) = v144;
    if (v148)
    {
      v149 = (unint64_t *)&v148->__shared_owners_;
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    v18 = 0;
    goto LABEL_212;
  }
  while (2)
  {
    v162[0] = 0;
    if ((_DWORD)v48)
    {
      v55 = v48;
      if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2313;
        v143 = "%25s:%-5d ...at programme optional variant code";
        goto LABEL_200;
      }
      goto LABEL_201;
    }
    v50 = v162[0];
    switch(v162[0])
    {
      case 0:
        v51 = v171;
        v52 = (std::__shared_weak_count *)v172;
        v160 = v171;
        v161 = (std::__shared_weak_count *)v172;
        if (v172)
        {
          v53 = (unint64_t *)(v172 + 1);
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        memset(buf, 0, sizeof(buf));
        if ((_DWORD)v55)
        {
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v178 = 136315394;
            *(_QWORD *)&v178[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&v178[12] = 1024;
            *(_DWORD *)&v178[14] = 1939;
            _os_log_impl(&dword_18EE07000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at loudness method", v178, 0x12u);
          }
LABEL_114:
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          v99 = v161;
          if (v161)
          {
            v100 = (unint64_t *)&v161->__shared_owners_;
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
          if (!(_DWORD)v55)
            goto LABEL_171;
          if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2320;
            v143 = "%25s:%-5d ...at programme loudness metadata";
            goto LABEL_200;
          }
          goto LABEL_201;
        }
        v71 = *(uint64_t ***)this;
        *(_QWORD *)v175 = v51;
        *(_QWORD *)&v175[8] = v52;
        if (v52)
        {
          v72 = (unint64_t *)&v52->__shared_owners_;
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 1, v72));
        }
        if ((buf[23] & 0x80u) == 0)
          v74 = (char *)buf;
        else
          v74 = *(char **)buf;
        AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v71, (uint64_t **)v175, v51 + 8, v74);
        if (v52)
        {
          v76 = (unint64_t *)&v52->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        memset(v178, 0, 24);
        if ((_DWORD)v55)
        {
          if (!os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
            goto LABEL_112;
          *(_DWORD *)v176 = 136315394;
          *(_QWORD *)&v176[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&v176[12] = 1024;
          *(_DWORD *)&v176[14] = 1946;
          v79 = v78;
          v80 = "%25s:%-5d ...at loudness regional recommended practice";
          goto LABEL_111;
        }
        v89 = *(uint64_t ***)this;
        v90 = v161;
        *(_QWORD *)v174 = v160;
        *(_QWORD *)&v174[8] = v161;
        if (v161)
        {
          v91 = (unint64_t *)&v161->__shared_owners_;
          do
            v92 = __ldxr(v91);
          while (__stxr(v92 + 1, v91));
        }
        if ((v178[23] & 0x80u) == 0)
          v93 = (char *)v178;
        else
          v93 = *(char **)v178;
        AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v89, (uint64_t **)v174, v51 + 9, v93);
        if (v90)
        {
          v95 = (unint64_t *)&v90->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        v173 = 0;
        if ((_DWORD)v97)
        {
          v55 = v97;
          if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
            goto LABEL_112;
          *(_DWORD *)v176 = 136315394;
          *(_QWORD *)&v176[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&v176[12] = 1024;
          *(_DWORD *)&v176[14] = 1953;
          v79 = v98;
          v80 = "%25s:%-5d ...at loudness flags";
          goto LABEL_111;
        }
        v110 = v173;
        *((_BYTE *)v51 + 104) = v173 >> 6;
        if ((v110 & 0x20) != 0
        {
          v55 = v111;
          if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v176 = 136315394;
            *(_QWORD *)&v176[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&v176[12] = 1024;
            *(_DWORD *)&v176[14] = 1966;
            v79 = v112;
            v80 = "%25s:%-5d ...at integrated loudness";
LABEL_111:
            _os_log_impl(&dword_18EE07000, v79, OS_LOG_TYPE_ERROR, v80, v176, 0x12u);
          }
        }
        else if ((v110 & 0x10) != 0
                   (_DWORD)v121))
        {
          v55 = v121;
          if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v176 = 136315394;
            *(_QWORD *)&v176[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&v176[12] = 1024;
            *(_DWORD *)&v176[14] = 1973;
            v79 = v122;
            v80 = "%25s:%-5d ...at loudness range";
            goto LABEL_111;
          }
        }
        else if ((v110 & 8) != 0
        {
          v55 = v123;
          if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v176 = 136315394;
            *(_QWORD *)&v176[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&v176[12] = 1024;
            *(_DWORD *)&v176[14] = 1980;
            v79 = v124;
            v80 = "%25s:%-5d ...at max true peak";
            goto LABEL_111;
          }
        }
        else if ((v110 & 4) != 0
                   (_DWORD)v130))
        {
          v55 = v130;
          if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v176 = 136315394;
            *(_QWORD *)&v176[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&v176[12] = 1024;
            *(_DWORD *)&v176[14] = 1987;
            v79 = v131;
            v80 = "%25s:%-5d ...at max momentary";
            goto LABEL_111;
          }
        }
        else if ((v110 & 2) != 0
        {
          v55 = v132;
          if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v176 = 136315394;
            *(_QWORD *)&v176[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&v176[12] = 1024;
            *(_DWORD *)&v176[14] = 1994;
            v79 = v133;
            v80 = "%25s:%-5d ...at max short term";
            goto LABEL_111;
          }
        }
        else if ((v110 & 1) != 0)
        {
          if ((_DWORD)v55)
          {
            if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v176 = 136315394;
              *(_QWORD *)&v176[4] = "AudioMetadataDeserializer.cpp";
              *(_WORD *)&v176[12] = 1024;
              *(_DWORD *)&v176[14] = 2001;
              v79 = v134;
              v80 = "%25s:%-5d ...at dialogue loudness";
              goto LABEL_111;
            }
          }
        }
        else
        {
          v55 = 0;
        }
LABEL_112:
        if ((char)v178[23] < 0)
          operator delete(*(void **)v178);
        goto LABEL_114;
      case 1:
        if ((_DWORD)v59)
        {
          v55 = v59;
          if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2327;
            v143 = "%25s:%-5d ...at programme reference screen aspect ratio";
            goto LABEL_200;
          }
          goto LABEL_201;
        }
        v178[0] = 0;
        if ((_DWORD)v61)
        {
          v55 = v61;
          if (!os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
            goto LABEL_201;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2333;
          v143 = "%25s:%-5d ...at programme reference screen screen centre position flags";
          goto LABEL_200;
        }
        if ((_DWORD)v62)
        {
          v55 = v62;
          if (!os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
            goto LABEL_201;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2339;
          v143 = "%25s:%-5d ...at programme reference screen screen centre position coordinates";
          goto LABEL_200;
        }
        if ((_DWORD)v64)
        {
          v55 = v64;
          if (!os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
            goto LABEL_201;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2344;
          v143 = "%25s:%-5d ...at programme reference screen width";
LABEL_200:
          _os_log_impl(&dword_18EE07000, v154, OS_LOG_TYPE_ERROR, v143, buf, 0x12u);
          goto LABEL_201;
        }
        goto LABEL_171;
      case 2:
        memset(buf, 0, sizeof(buf));
        if ((_DWORD)v65)
        {
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v178 = 136315394;
            *(_QWORD *)&v178[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&v178[12] = 1024;
            *(_DWORD *)&v178[14] = 2352;
            _os_log_impl(&dword_18EE07000, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at programme HOA renderer type", v178, 0x12u);
          }
          v67 = 1;
          v18 = v65;
        }
        else
        {
          v81 = *(uint64_t ***)this;
          v82 = v171;
          v159[0] = v171;
          v159[1] = v172;
          if (v172)
          {
            v83 = (unint64_t *)(v172 + 1);
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          if ((buf[23] & 0x80u) == 0)
            v85 = (char *)buf;
          else
            v85 = *(char **)buf;
          AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v81, v159, v82 + 19, v85);
          std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v159);
          memset(v178, 0, 24);
          if ((_DWORD)v87)
          {
            if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v176 = 136315394;
              *(_QWORD *)&v176[4] = "AudioMetadataDeserializer.cpp";
              *(_WORD *)&v176[12] = 1024;
              *(_DWORD *)&v176[14] = 2359;
              _os_log_impl(&dword_18EE07000, v88, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at programme HOA renderer version", v176, 0x12u);
            }
            v67 = 1;
            v18 = v87;
          }
          else
          {
            v102 = *(uint64_t ***)this;
            v103 = v171;
            v158[0] = v171;
            v158[1] = v172;
            if (v172)
            {
              v104 = (unint64_t *)(v172 + 1);
              do
                v105 = __ldxr(v104);
              while (__stxr(v105 + 1, v104));
            }
            if ((v178[23] & 0x80u) == 0)
              v106 = (char *)v178;
            else
              v106 = *(char **)v178;
            AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v102, v158, v103 + 20, v106);
            std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v158);
            memset(v176, 0, 24);
            if ((_DWORD)v108)
            {
              if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v175 = 136315394;
                *(_QWORD *)&v175[4] = "AudioMetadataDeserializer.cpp";
                *(_WORD *)&v175[12] = 1024;
                *(_DWORD *)&v175[14] = 2366;
                _os_log_impl(&dword_18EE07000, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at programme object renderer type", v175, 0x12u);
              }
              v67 = 1;
              v18 = v108;
            }
            else
            {
              v113 = *(uint64_t ***)this;
              v114 = v171;
              v157[0] = v171;
              v157[1] = v172;
              if (v172)
              {
                v115 = (unint64_t *)(v172 + 1);
                do
                  v116 = __ldxr(v115);
                while (__stxr(v116 + 1, v115));
              }
              if ((v176[23] & 0x80u) == 0)
                v117 = (char *)v176;
              else
                v117 = *(char **)v176;
              AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v113, v157, v114 + 21, v117);
              std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v157);
              memset(v175, 0, 24);
              if ((_DWORD)v119)
              {
                if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v174 = 136315394;
                  *(_QWORD *)&v174[4] = "AudioMetadataDeserializer.cpp";
                  *(_WORD *)&v174[12] = 1024;
                  *(_DWORD *)&v174[14] = 2373;
                  _os_log_impl(&dword_18EE07000, v120, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at programme object renderer version", v174, 0x12u);
                }
                v67 = 1;
                v18 = v119;
              }
              else
              {
                v125 = *(uint64_t ***)this;
                v126 = v171;
                v156[0] = v171;
                v156[1] = v172;
                if (v172)
                {
                  v127 = (unint64_t *)(v172 + 1);
                  do
                    v128 = __ldxr(v127);
                  while (__stxr(v128 + 1, v127));
                }
                if ((v175[23] & 0x80u) == 0)
                  v129 = (char *)v175;
                else
                  v129 = *(char **)v175;
                AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v125, v156, v126 + 22, v129);
                std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v156);
                v67 = 0;
              }
              if ((char)v175[23] < 0)
                operator delete(*(void **)v175);
            }
            if ((char)v176[23] < 0)
              operator delete(*(void **)v176);
          }
          if ((char)v178[23] < 0)
            operator delete(*(void **)v178);
        }
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        if (!v67)
          goto LABEL_171;
        goto LABEL_212;
      case 3:
        *(_QWORD *)v178 = 0;
        if (!(_DWORD)v68)
        {
          v69 = v171;
          *(_QWORD *)((char *)v171 + 28) = *(_QWORD *)v178;
          *((_BYTE *)v69 + 24) = 1;
LABEL_171:
          if (*a4 >= (unint64_t)a3)
            goto LABEL_186;
          continue;
        }
        v55 = v68;
        if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2382;
          v143 = "%25s:%-5d ...at programme start time";
          goto LABEL_200;
        }
LABEL_201:
        v18 = v55;
LABEL_212:
        if (*(_QWORD *)&v162[1])
          operator delete(*(void **)&v162[1]);
        if (SHIBYTE(v166) < 0)
          operator delete(v165[0]);
LABEL_27:
        if (SHIBYTE(v169) < 0)
          operator delete(__p[0]);
        v30 = (std::__shared_weak_count *)v172;
        if (v172)
        {
          v31 = (unint64_t *)(v172 + 1);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        return v18;
      case 4:
        *(_QWORD *)v178 = 0;
        if ((_DWORD)v57)
        {
          v55 = v57;
          if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2392;
            v143 = "%25s:%-5d ...at programme end time";
            goto LABEL_200;
          }
          goto LABEL_201;
        }
        v58 = v171;
        v171[5] = *(_QWORD *)v178;
        *((_BYTE *)v58 + 36) = 1;
        goto LABEL_171;
      case 5:
        if (!(_DWORD)v70)
          goto LABEL_171;
        v55 = v70;
        if (!os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
          goto LABEL_201;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2401;
        v143 = "%25s:%-5d ...at programme max ducking depth";
        goto LABEL_200;
      default:
        v18 = 4294900722;
        if (!os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
          goto LABEL_212;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2406;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v50;
        v43 = "%25s:%-5d Unknown programme optional variant (%d)";
        v44 = v151;
        v45 = 24;
        goto LABEL_46;
    }
  }
}

void sub_18EF52958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50)
{
  char v50;
  char v51;
  char v52;
  uint64_t v53;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v51 < 0)
    operator delete(*(void **)(v53 - 240));
  if (a11 < 0)
  {
    operator delete(*(void **)(v53 - 208));
    if (v50 < 0)
    {
LABEL_7:
      operator delete(*(void **)(v53 - 160));
      if ((v52 & 0x80) == 0)
      {
LABEL_11:
        if (__p)
          operator delete(__p);
        if (a36 < 0)
          operator delete(a31);
        if (a44 < 0)
          operator delete(a39);
        std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
        _Unwind_Resume(a1);
      }
LABEL_10:
      operator delete(*(void **)(v53 - 128));
      goto LABEL_11;
    }
  }
  else if (v50 < 0)
  {
    goto LABEL_7;
  }
  if ((v52 & 0x80) == 0)
    goto LABEL_11;
  goto LABEL_10;
}

uint64_t CA::AudioMetadataDeserializer::Impl::decode_content(CA::AudioMetadataDeserializer::Impl *this, _anonymous_namespace_ *a2, const unsigned __int8 *a3, unint64_t *a4, unsigned __int16 *a5)
{
  uint64_t **v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t **v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  unsigned __int8 *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t **v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unint64_t *v40;
  unint64_t v41;
  NSObject *v42;
  const char *v43;
  unsigned __int8 *v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  NSObject *v49;
  uint32_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  NSObject *v60;
  uint64_t **v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  unsigned __int8 *v65;
  unint64_t *v66;
  unint64_t v67;
  NSObject *v68;
  NSObject *v69;
  const char *v70;
  uint64_t **v71;
  unint64_t *v72;
  unint64_t v73;
  char *v74;
  unsigned __int8 *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  NSObject *v79;
  unint64_t *v80;
  unint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  NSObject *v90;
  uint64_t v91;
  NSObject *v92;
  NSObject *v93;
  _QWORD *v94;
  NSObject *v95;
  uint64_t *v96;
  uint64_t *v97;
  _BYTE v98[18];
  uint64_t v99;
  uint64_t *v100[2];
  void *v101[2];
  uint64_t v102;
  uint64_t *v103[2];
  void *__p[2];
  uint64_t v105;
  uint64_t *v106[2];
  uint64_t v107;
  uint64_t *v108;
  unsigned __int8 v109;
  uint64_t *v110[2];
  uint64_t *v111[2];
  char __str[9];
  uint8_t v113[4];
  const char *v114;
  __int16 v115;
  int v116;
  uint8_t v117[32];
  uint8_t buf[24];
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  AudioMetadataMemoryPool::create<AudioMetadataContent>(&v107, *(_QWORD *)this);
  snprintf(__str, 9uLL, "ACO_%04hx", *a5);
  v10 = *(uint64_t ***)this;
  v11 = (_QWORD *)v107;
  v12 = (std::__shared_weak_count *)v108;
  v106[0] = (uint64_t *)v107;
  v106[1] = v108;
  if (v108)
  {
    v13 = (unint64_t *)(v108 + 1);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataContent>(v10, v106, v11, __str);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v105 = 0;
  if ((_DWORD)v18)
  {
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1850;
    v20 = "%25s:%-5d ...at content name";
LABEL_26:
    _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
    goto LABEL_27;
  }
  v21 = *(uint64_t ***)this;
  v22 = v107;
  v23 = (std::__shared_weak_count *)v108;
  v103[0] = (uint64_t *)v107;
  v103[1] = v108;
  if (v108)
  {
    v24 = (unint64_t *)(v108 + 1);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if (v105 >= 0)
    v26 = (char *)__p;
  else
    v26 = (char *)__p[0];
  AudioMetadataMemoryPool::fillString<AudioMetadataContent>(v21, v103, (_QWORD *)(v22 + 8), v26);
  if (v23)
  {
    v28 = (unint64_t *)&v23->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v101[0] = 0;
  v101[1] = 0;
  v102 = 0;
  if ((_DWORD)v18)
  {
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1857;
    v20 = "%25s:%-5d ...at content language";
    goto LABEL_26;
  }
  v34 = *(uint64_t ***)this;
  v35 = v107;
  v36 = (std::__shared_weak_count *)v108;
  v100[0] = (uint64_t *)v107;
  v100[1] = v108;
  if (v108)
  {
    v37 = (unint64_t *)(v108 + 1);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataContent>(v34, v100, (_QWORD *)(v35 + 16), (char *)v101);
  if (v36)
  {
    v40 = (unint64_t *)&v36->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  *(_OWORD *)&v98[2] = 0uLL;
  v99 = 0;
  if ((_DWORD)v18)
  {
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1864;
      v43 = "%25s:%-5d ...at content object references";
      goto LABEL_51;
    }
    goto LABEL_53;
  }
  v45 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t *)this + 33, *a5, a5);
  v46 = (void *)v45[3];
  if (v46)
  {
    v45[4] = v46;
    operator delete(v46);
    v45[3] = 0;
    v45[4] = 0;
    v45[5] = 0;
  }
  *(_OWORD *)(v45 + 3) = *(_OWORD *)&v98[2];
  v45[5] = v99;
  v99 = 0;
  memset(&v98[1], 0, 17);
  if (!(_DWORD)v47)
  {
    v51 = v98[1];
    v52 = v107;
    *(_BYTE *)(v107 + 96) = v98[1] >> 6;
    *(_BYTE *)(v52 + 97) = (v51 >> 2) & 0xF;
    if (*a4 >= (unint64_t)a3)
    {
LABEL_132:
      v94 = std::__tree<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataObject>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::shared_ptr<AudioMetadataObject>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataObject>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)this + 4, *a5, a5);
      std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v94 + 5, v107, (uint64_t)v108);
      v18 = 0;
      goto LABEL_53;
    }
    while (1)
    {
      v98[0] = 0;
      if ((_DWORD)v53)
      {
        v18 = v53;
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          goto LABEL_53;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1880;
        v43 = "%25s:%-5d ...at content optional variant code";
        goto LABEL_51;
      }
      v55 = v98[0];
      if (v98[0])
      {
        v18 = 4294900722;
        if (!os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
          goto LABEL_53;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1892;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v55;
        v43 = "%25s:%-5d Unknown content optional variant (%d)";
        v49 = v95;
        v50 = 24;
        goto LABEL_52;
      }
      v57 = v107;
      v56 = v108;
      v96 = (uint64_t *)v107;
      v97 = v108;
      if (v108)
      {
        v58 = (unint64_t *)(v108 + 1);
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      memset(buf, 0, sizeof(buf));
      if ((_DWORD)v18)
      {
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v117 = 136315394;
          *(_QWORD *)&v117[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&v117[12] = 1024;
          *(_DWORD *)&v117[14] = 1939;
          _os_log_impl(&dword_18EE07000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at loudness method", v117, 0x12u);
        }
        goto LABEL_97;
      }
      v61 = *(uint64_t ***)this;
      v111[0] = (uint64_t *)v57;
      v111[1] = v56;
      if (v56)
      {
        v62 = (unint64_t *)(v56 + 1);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      if ((buf[23] & 0x80u) == 0)
        v64 = (char *)buf;
      else
        v64 = *(char **)buf;
      AudioMetadataMemoryPool::fillString<AudioMetadataContent>(v61, v111, (_QWORD *)(v57 + 36), v64);
      if (v56)
      {
        v66 = (unint64_t *)(v56 + 1);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          (*(void (**)(uint64_t *))(*v56 + 16))(v56);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v56);
        }
      }
      memset(v117, 0, 24);
      if ((_DWORD)v18)
      {
        if (!os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          goto LABEL_95;
        *(_DWORD *)v113 = 136315394;
        v114 = "AudioMetadataDeserializer.cpp";
        v115 = 1024;
        v116 = 1946;
        v69 = v68;
        v70 = "%25s:%-5d ...at loudness regional recommended practice";
        goto LABEL_94;
      }
      v71 = *(uint64_t ***)this;
      v110[0] = v96;
      v110[1] = v97;
      if (v97)
      {
        v72 = (unint64_t *)(v97 + 1);
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      if ((v117[23] & 0x80u) == 0)
        v74 = (char *)v117;
      else
        v74 = *(char **)v117;
      AudioMetadataMemoryPool::fillString<AudioMetadataContent>(v71, v110, (_QWORD *)(v57 + 44), v74);
      if (v97)
      {
        v76 = (unint64_t *)(v97 + 1);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          (*(void (**)(uint64_t *))(*v97 + 16))(v97);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v97);
        }
      }
      v109 = 0;
      if ((_DWORD)v78)
      {
        v18 = v78;
        if (!os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
          goto LABEL_95;
        *(_DWORD *)v113 = 136315394;
        v114 = "AudioMetadataDeserializer.cpp";
        v115 = 1024;
        v116 = 1953;
        v69 = v79;
        v70 = "%25s:%-5d ...at loudness flags";
        goto LABEL_94;
      }
      v82 = v109;
      *(_BYTE *)(v57 + 76) = v109 >> 6;
      if ((v82 & 0x20) != 0
            (_DWORD)v83))
      {
        v18 = v83;
        if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v113 = 136315394;
          v114 = "AudioMetadataDeserializer.cpp";
          v115 = 1024;
          v116 = 1966;
          v69 = v84;
          v70 = "%25s:%-5d ...at integrated loudness";
LABEL_94:
          _os_log_impl(&dword_18EE07000, v69, OS_LOG_TYPE_ERROR, v70, v113, 0x12u);
        }
      }
      else if ((v82 & 0x10) != 0
                 (_DWORD)v85))
      {
        v18 = v85;
        if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v113 = 136315394;
          v114 = "AudioMetadataDeserializer.cpp";
          v115 = 1024;
          v116 = 1973;
          v69 = v86;
          v70 = "%25s:%-5d ...at loudness range";
          goto LABEL_94;
        }
      }
      else if ((v82 & 8) != 0
                 (_DWORD)v87))
      {
        v18 = v87;
        if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v113 = 136315394;
          v114 = "AudioMetadataDeserializer.cpp";
          v115 = 1024;
          v116 = 1980;
          v69 = v88;
          v70 = "%25s:%-5d ...at max true peak";
          goto LABEL_94;
        }
      }
      else if ((v82 & 4) != 0
                 (_DWORD)v89))
      {
        v18 = v89;
        if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v113 = 136315394;
          v114 = "AudioMetadataDeserializer.cpp";
          v115 = 1024;
          v116 = 1987;
          v69 = v90;
          v70 = "%25s:%-5d ...at max momentary";
          goto LABEL_94;
        }
      }
      else if ((v82 & 2) != 0
                 (_DWORD)v91))
      {
        v18 = v91;
        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v113 = 136315394;
          v114 = "AudioMetadataDeserializer.cpp";
          v115 = 1024;
          v116 = 1994;
          v69 = v92;
          v70 = "%25s:%-5d ...at max short term";
          goto LABEL_94;
        }
      }
      else if ((v82 & 1) != 0)
      {
        if ((_DWORD)v18)
        {
          if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v113 = 136315394;
            v114 = "AudioMetadataDeserializer.cpp";
            v115 = 1024;
            v116 = 2001;
            v69 = v93;
            v70 = "%25s:%-5d ...at dialogue loudness";
            goto LABEL_94;
          }
        }
      }
      else
      {
        v18 = 0;
      }
LABEL_95:
      if ((char)v117[23] < 0)
        operator delete(*(void **)v117);
LABEL_97:
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      if (v97)
      {
        v80 = (unint64_t *)(v97 + 1);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          (*(void (**)(uint64_t *))(*v97 + 16))(v97);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v97);
        }
      }
      if ((_DWORD)v18)
      {
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          goto LABEL_53;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1887;
        v43 = "%25s:%-5d ...at content loudness metadata";
        goto LABEL_51;
      }
      if (*a4 >= (unint64_t)a3)
        goto LABEL_132;
    }
  }
  v18 = v47;
  if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1871;
    v43 = "%25s:%-5d ...at content dialogue flags";
LABEL_51:
    v49 = v42;
    v50 = 18;
LABEL_52:
    _os_log_impl(&dword_18EE07000, v49, OS_LOG_TYPE_ERROR, v43, buf, v50);
  }
LABEL_53:
  if (*(_QWORD *)&v98[2])
    operator delete(*(void **)&v98[2]);
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
LABEL_27:
  if (SHIBYTE(v105) < 0)
    operator delete(__p[0]);
  v30 = (std::__shared_weak_count *)v108;
  if (v108)
  {
    v31 = (unint64_t *)(v108 + 1);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v18;
}

void sub_18EF536C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43)
{
  if (__p)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a35 < 0)
    operator delete(a30);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t CA::AudioMetadataDeserializer::Impl::decode_object(CA::AudioMetadataDeserializer::Impl *this, _anonymous_namespace_ *a2, const unsigned __int8 *a3, unint64_t *a4, unsigned __int16 *a5)
{
  unint64_t v5;
  uint64_t **v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t **v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  unsigned __int8 *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  NSObject *v31;
  unint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  void **v35;
  unsigned __int16 *v36;
  unint64_t v37;
  float v38;
  float v39;
  _BOOL4 v40;
  unint64_t v41;
  unint64_t v42;
  int8x8_t prime;
  void *v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  uint8x8_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  NSObject *v59;
  unsigned __int8 *v60;
  _QWORD *v61;
  void *v62;
  NSObject *v63;
  unsigned __int8 *v64;
  _QWORD *v65;
  void *v66;
  NSObject *v67;
  const char *v68;
  unsigned __int8 *v69;
  uint64_t *v70;
  void *v71;
  uint64_t v72;
  float *v73;
  _DWORD *v74;
  void *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unsigned __int8 *v81;
  NSObject *v82;
  uint32_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unsigned __int8 v88;
  _BYTE *v89;
  uint64_t v90;
  double *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  float *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  NSObject *v109;
  _DWORD *v112;
  unint64_t v113;
  unsigned __int8 v114;
  unsigned __int8 v115;
  uint64_t *v116[2];
  void *__p[2];
  uint64_t v118;
  uint64_t *v119[2];
  uint64_t v120;
  uint64_t *v121;
  uint8_t v122[4];
  const char *v123;
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;
  uint8_t v128[32];
  uint8_t v129[32];
  uint8_t v130[32];
  uint8_t buf[31];
  char __str[9];
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  AudioMetadataMemoryPool::create<AudioMetadataObject>(&v120, *(_QWORD *)this);
  snprintf(__str, 9uLL, "AO_%04hx", *a5);
  v11 = *(uint64_t ***)this;
  v12 = (_QWORD *)v120;
  v13 = (std::__shared_weak_count *)v121;
  v119[0] = (uint64_t *)v120;
  v119[1] = v121;
  if (v121)
  {
    v14 = (unint64_t *)(v121 + 1);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataObject>(v11, v119, v12, __str);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v118 = 0;
  if ((_DWORD)v19)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2017;
      _os_log_impl(&dword_18EE07000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at object name", buf, 0x12u);
    }
    goto LABEL_145;
  }
  v21 = *(uint64_t ***)this;
  v22 = v120;
  v23 = (std::__shared_weak_count *)v121;
  v116[0] = (uint64_t *)v120;
  v116[1] = v121;
  if (v121)
  {
    v24 = (unint64_t *)(v121 + 1);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if (v118 >= 0)
    v26 = (char *)__p;
  else
    v26 = (char *)__p[0];
  AudioMetadataMemoryPool::fillString<AudioMetadataObject>(v21, v116, (_QWORD *)(v22 + 8), v26);
  if (v23)
  {
    v28 = (unint64_t *)&v23->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  memset(buf, 0, 24);
  if (!(_DWORD)v19)
  {
    if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
      goto LABEL_102;
    v32 = *a5;
    v33 = *((_QWORD *)this + 49);
    v112 = *(_DWORD **)buf;
    if (v33)
    {
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)v33);
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.u32[0] > 1uLL)
      {
        v5 = *a5;
        if (v33 <= v32)
          v5 = v32 % v33;
      }
      else
      {
        v5 = ((_DWORD)v33 - 1) & v32;
      }
      v35 = *(void ***)(*((_QWORD *)this + 48) + 8 * v5);
      if (v35)
      {
        v36 = (unsigned __int16 *)*v35;
        if (*v35)
        {
          do
          {
            v37 = *((_QWORD *)v36 + 1);
            if (v37 == v32)
            {
              if (v36[8] == (_DWORD)v32)
              {
                v74 = *(_DWORD **)buf;
                goto LABEL_101;
              }
            }
            else
            {
              if (v34.u32[0] > 1uLL)
              {
                if (v37 >= v33)
                  v37 %= v33;
              }
              else
              {
                v37 &= v33 - 1;
              }
              if (v37 != v5)
                break;
            }
            v36 = *(unsigned __int16 **)v36;
          }
          while (v36);
        }
      }
    }
    v36 = (unsigned __int16 *)operator new(0x18uLL);
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = v32;
    v36[8] = v32;
    *(_DWORD *)(v36 + 9) = 0;
    v38 = (float)(unint64_t)(*((_QWORD *)this + 51) + 1);
    v39 = *((float *)this + 104);
    if (v33 && (float)(v39 * (float)v33) >= v38)
    {
      v32 = v5;
      v74 = v112;
      goto LABEL_91;
    }
    v40 = (v33 & (v33 - 1)) == 0;
    if (v33 < 3)
      v40 = 0;
    v41 = (2 * v33) | !v40;
    v42 = vcvtps_u32_f32(v38 / v39);
    if (v41 <= v42)
      prime = (int8x8_t)v42;
    else
      prime = (int8x8_t)v41;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v33 = *((_QWORD *)this + 49);
    }
    if (*(_QWORD *)&prime > v33)
    {
LABEL_57:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v44 = operator new(8 * *(_QWORD *)&prime);
      v45 = (void *)*((_QWORD *)this + 48);
      *((_QWORD *)this + 48) = v44;
      if (v45)
        operator delete(v45);
      v46 = 0;
      *((int8x8_t *)this + 49) = prime;
      do
        *(_QWORD *)(*((_QWORD *)this + 48) + 8 * v46++) = 0;
      while (*(_QWORD *)&prime != v46);
      v47 = (_QWORD *)*((_QWORD *)this + 50);
      if (v47)
      {
        v48 = v47[1];
        v49 = (uint8x8_t)vcnt_s8(prime);
        v49.i16[0] = vaddlv_u8(v49);
        if (v49.u32[0] > 1uLL)
        {
          if (v48 >= *(_QWORD *)&prime)
            v48 %= *(_QWORD *)&prime;
        }
        else
        {
          v48 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*((_QWORD *)this + 48) + 8 * v48) = (char *)this + 400;
        v53 = (_QWORD *)*v47;
        if (*v47)
        {
          do
          {
            v54 = v53[1];
            if (v49.u32[0] > 1uLL)
            {
              if (v54 >= *(_QWORD *)&prime)
                v54 %= *(_QWORD *)&prime;
            }
            else
            {
              v54 &= *(_QWORD *)&prime - 1;
            }
            if (v54 != v48)
            {
              v55 = *((_QWORD *)this + 48);
              if (!*(_QWORD *)(v55 + 8 * v54))
              {
                *(_QWORD *)(v55 + 8 * v54) = v47;
                goto LABEL_82;
              }
              *v47 = *v53;
              *v53 = **(_QWORD **)(*((_QWORD *)this + 48) + 8 * v54);
              **(_QWORD **)(*((_QWORD *)this + 48) + 8 * v54) = v53;
              v53 = v47;
            }
            v54 = v48;
LABEL_82:
            v47 = v53;
            v53 = (_QWORD *)*v53;
            v48 = v54;
          }
          while (v53);
        }
      }
      v33 = (unint64_t)prime;
      goto LABEL_86;
    }
    if (*(_QWORD *)&prime < v33)
    {
      v50 = vcvtps_u32_f32((float)*((unint64_t *)this + 51) / *((float *)this + 104));
      if (v33 < 3 || (v51 = (uint8x8_t)vcnt_s8((int8x8_t)v33), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
      {
        v50 = std::__next_prime(v50);
      }
      else
      {
        v52 = 1 << -(char)__clz(v50 - 1);
        if (v50 >= 2)
          v50 = v52;
      }
      if (*(_QWORD *)&prime <= v50)
        prime = (int8x8_t)v50;
      if (*(_QWORD *)&prime < v33)
      {
        if (!*(_QWORD *)&prime)
        {
          v75 = (void *)*((_QWORD *)this + 48);
          *((_QWORD *)this + 48) = 0;
          v74 = v112;
          if (v75)
            operator delete(v75);
          v33 = 0;
          *((_QWORD *)this + 49) = 0;
          goto LABEL_87;
        }
        goto LABEL_57;
      }
      v33 = *((_QWORD *)this + 49);
    }
LABEL_86:
    v74 = v112;
LABEL_87:
    if ((v33 & (v33 - 1)) != 0)
    {
      if (v33 <= v32)
        v32 %= v33;
    }
    else
    {
      v32 = ((_DWORD)v33 - 1) & v32;
    }
LABEL_91:
    v56 = *((_QWORD *)this + 48);
    v57 = *(_QWORD **)(v56 + 8 * v32);
    if (v57)
    {
      *(_QWORD *)v36 = *v57;
    }
    else
    {
      *(_QWORD *)v36 = *((_QWORD *)this + 50);
      *((_QWORD *)this + 50) = v36;
      *(_QWORD *)(v56 + 8 * v32) = (char *)this + 400;
      if (!*(_QWORD *)v36)
        goto LABEL_100;
      v58 = *(_QWORD *)(*(_QWORD *)v36 + 8);
      if ((v33 & (v33 - 1)) != 0)
      {
        if (v58 >= v33)
          v58 %= v33;
      }
      else
      {
        v58 &= v33 - 1;
      }
      v57 = (_QWORD *)(*((_QWORD *)this + 48) + 8 * v58);
    }
    *v57 = v36;
LABEL_100:
    ++*((_QWORD *)this + 51);
LABEL_101:
    *(_DWORD *)(v36 + 9) = *v74;
LABEL_102:
    memset(v130, 0, 24);
    if ((_DWORD)v19)
    {
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v129 = 136315394;
        *(_QWORD *)&v129[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&v129[12] = 1024;
        *(_DWORD *)&v129[14] = 2033;
        _os_log_impl(&dword_18EE07000, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at object object references", v129, 0x12u);
      }
LABEL_141:
      if (*(_QWORD *)v130)
        operator delete(*(void **)v130);
      goto LABEL_143;
    }
    v61 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t *)this + 38, *a5, a5);
    v62 = (void *)v61[3];
    if (v62)
    {
      v61[4] = v62;
      operator delete(v62);
      v61[3] = 0;
      v61[4] = 0;
      v61[5] = 0;
    }
    *(_OWORD *)(v61 + 3) = *(_OWORD *)v130;
    v61[5] = *(_QWORD *)&v130[16];
    memset(v130, 0, 24);
    memset(v129, 0, 24);
    if ((_DWORD)v19)
    {
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v128 = 136315394;
        *(_QWORD *)&v128[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&v128[12] = 1024;
        *(_DWORD *)&v128[14] = 2040;
        _os_log_impl(&dword_18EE07000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at object complementary object references", v128, 0x12u);
      }
LABEL_139:
      if (*(_QWORD *)v129)
        operator delete(*(void **)v129);
      goto LABEL_141;
    }
    v65 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t *)this + 43, *a5, a5);
    v66 = (void *)v65[3];
    if (v66)
    {
      v65[4] = v66;
      operator delete(v66);
      v65[3] = 0;
      v65[4] = 0;
      v65[5] = 0;
    }
    *(_OWORD *)(v65 + 3) = *(_OWORD *)v129;
    v65[5] = *(_QWORD *)&v129[16];
    memset(v129, 0, 24);
    memset(v128, 0, 24);
    if ((_DWORD)v19)
    {
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v122 = 136315394;
        v123 = "AudioMetadataDeserializer.cpp";
        v124 = 1024;
        v125 = 2047;
        v68 = "%25s:%-5d ...at object track UID references";
        goto LABEL_135;
      }
      goto LABEL_137;
    }
    v71 = (void *)*v70;
    if (*v70)
    {
      v70[1] = (uint64_t)v71;
      operator delete(v71);
      *v70 = 0;
      v70[1] = 0;
      v70[2] = 0;
    }
    *(_OWORD *)v70 = *(_OWORD *)v128;
    v70[2] = *(_QWORD *)&v128[16];
    memset(v128, 0, 24);
    v115 = 0;
    if ((_DWORD)v72)
    {
      v19 = v72;
      if (!os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        goto LABEL_137;
      *(_DWORD *)v122 = 136315394;
      v123 = "AudioMetadataDeserializer.cpp";
      v124 = 1024;
      v125 = 2054;
      v68 = "%25s:%-5d ...at object flags first byte";
    }
    else
    {
      v76 = v115;
      v77 = v120;
      *(_BYTE *)(v120 + 160) = v115 >> 7;
      *(_BYTE *)(v77 + 174) = (v76 & 0x40) != 0;
      *(_BYTE *)(v77 + 168) = (v76 >> 4) & 3;
      *(_BYTE *)(v77 + 169) = v76 & 0xF;
      if ((_DWORD)v78)
      {
        v19 = v78;
        if (!os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)v122 = 136315394;
        v123 = "AudioMetadataDeserializer.cpp";
        v124 = 1024;
        v125 = 2063;
        v68 = "%25s:%-5d ...at object gain";
      }
      else
      {
        if ((_DWORD)v80)
        {
          v19 = v80;
          if (!os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            goto LABEL_137;
          *(_DWORD *)v122 = 136315394;
          v123 = "AudioMetadataDeserializer.cpp";
          v124 = 1024;
          v125 = 2068;
          v68 = "%25s:%-5d ...at object flags second byte";
        }
        else
        {
          v88 = v115;
          v89 = (_BYTE *)v120;
          *(_BYTE *)(v120 + 170) = v115 >> 7;
          v89[171] = (v88 & 0x40) != 0;
          v89[172] = (v88 & 0x20) != 0;
          v89[173] = (v88 & 0x10) != 0;
          if (*a4 >= (unint64_t)a3)
          {
LABEL_172:
            v108 = std::__tree<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataObject>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::shared_ptr<AudioMetadataObject>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataObject>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)this + 7, *a5, a5);
            std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v108 + 5, v120, (uint64_t)v121);
            v19 = 0;
            goto LABEL_137;
          }
          while (2)
          {
            v114 = 0;
            if (!(_DWORD)v90)
            {
              v92 = v114;
              switch(v114)
              {
                case 0u:
                  v113 = 0;
                  if (!(_DWORD)v93)
                  {
                    v94 = v120;
                    *(_BYTE *)(v120 + 16) = 1;
                    *(_QWORD *)(v94 + 20) = v113;
                    goto LABEL_171;
                  }
                  v19 = v93;
                  if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v122 = 136315394;
                    v123 = "AudioMetadataDeserializer.cpp";
                    v124 = 1024;
                    v125 = 2087;
                    v68 = "%25s:%-5d ...at object start timestamp";
                    goto LABEL_135;
                  }
                  break;
                case 1u:
                  v113 = 0;
                  if (!(_DWORD)v106)
                  {
                    v107 = v120;
                    *(_BYTE *)(v120 + 28) = 1;
                    *(_QWORD *)(v107 + 32) = v113;
                    goto LABEL_171;
                  }
                  v19 = v106;
                  if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v122 = 136315394;
                    v123 = "AudioMetadataDeserializer.cpp";
                    v124 = 1024;
                    v125 = 2097;
                    v68 = "%25s:%-5d ...at object start timestamp";
                    goto LABEL_135;
                  }
                  break;
                case 2u:
                  LOBYTE(v113) = 0;
                  if ((_DWORD)v95)
                  {
                    v19 = v95;
                    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v122 = 136315394;
                      v123 = "AudioMetadataDeserializer.cpp";
                      v124 = 1024;
                      v125 = 2107;
                      v68 = "%25s:%-5d ...at object interaction flags";
                      goto LABEL_135;
                    }
                  }
                  else
                  {
                    v96 = v113;
                    v97 = v120;
                    *(_BYTE *)(v120 + 84) = v113 >> 7;
                    *(_BYTE *)(v97 + 85) = (v96 & 0x40) != 0;
                    *(_BYTE *)(v97 + 48) = (v96 & 0x20) != 0;
                    v98 = (v96 >> 3) & 1;
                    *(_BYTE *)(v97 + 86) = (v96 & 8) != 0;
                    *(_BYTE *)(v97 + 64) = (v96 & 4) != 0;
                    *(_BYTE *)(v97 + 80) = (v96 & 4) != 0;
                    if (((v96 >> 6) & 1) != 0)
                    {
                      if ((_DWORD)v99)
                      {
                        v19 = v99;
                        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)v122 = 136315394;
                          v123 = "AudioMetadataDeserializer.cpp";
                          v124 = 1024;
                          v125 = 2120;
                          v68 = "%25s:%-5d ...at object interaction min gain";
                          goto LABEL_135;
                        }
                        break;
                      }
                      if ((_DWORD)v101)
                      {
                        v19 = v101;
                        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)v122 = 136315394;
                          v123 = "AudioMetadataDeserializer.cpp";
                          v124 = 1024;
                          v125 = 2125;
                          v68 = "%25s:%-5d ...at object interaction max gain";
                          goto LABEL_135;
                        }
                        break;
                      }
                      v97 = v120;
                      v98 = *(unsigned __int8 *)(v120 + 86);
                    }
                    if (!v98)
                      goto LABEL_171;
                    v102 = v96 & 4;
                    if ((_DWORD)v103)
                    {
                      v19 = v103;
                      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v122 = 136315394;
                        v123 = "AudioMetadataDeserializer.cpp";
                        v124 = 1024;
                        v125 = 2132;
                        v68 = "%25s:%-5d ...at object min position";
                        goto LABEL_135;
                      }
                    }
                    else
                    {
                      if (!(_DWORD)v104)
                        goto LABEL_171;
                      v19 = v104;
                      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v122 = 136315394;
                        v123 = "AudioMetadataDeserializer.cpp";
                        v124 = 1024;
                        v125 = 2137;
                        v68 = "%25s:%-5d ...at object max position";
                        goto LABEL_135;
                      }
                    }
                  }
                  break;
                case 3u:
                  if (!(_DWORD)v105)
                  {
LABEL_171:
                    if (*a4 < (unint64_t)a3)
                      continue;
                    goto LABEL_172;
                  }
                  v19 = v105;
                  if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v122 = 136315394;
                    v123 = "AudioMetadataDeserializer.cpp";
                    v124 = 1024;
                    v125 = 2145;
                    v68 = "%25s:%-5d ...at object position offset";
                    goto LABEL_135;
                  }
                  break;
                default:
                  v19 = 4294900722;
                  if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v122 = 136315650;
                    v123 = "AudioMetadataDeserializer.cpp";
                    v124 = 1024;
                    v125 = 2150;
                    v126 = 1024;
                    v127 = v92;
                    v68 = "%25s:%-5d Unknown content optional variant (%d)";
                    v82 = v109;
                    v83 = 24;
                    goto LABEL_136;
                  }
                  break;
              }
LABEL_137:
              if (*(_QWORD *)v128)
                operator delete(*(void **)v128);
              goto LABEL_139;
            }
            break;
          }
          v19 = v90;
          if (!os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            goto LABEL_137;
          *(_DWORD *)v122 = 136315394;
          v123 = "AudioMetadataDeserializer.cpp";
          v124 = 1024;
          v125 = 2079;
          v68 = "%25s:%-5d ...at object optional variant code";
        }
      }
    }
LABEL_135:
    v82 = v67;
    v83 = 18;
LABEL_136:
    _os_log_impl(&dword_18EE07000, v82, OS_LOG_TYPE_ERROR, v68, v122, v83);
    goto LABEL_137;
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v130 = 136315394;
    *(_QWORD *)&v130[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&v130[12] = 1024;
    *(_DWORD *)&v130[14] = 2024;
    _os_log_impl(&dword_18EE07000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at object pack format references", v130, 0x12u);
  }
LABEL_143:
  if (*(_QWORD *)buf)
    operator delete(*(void **)buf);
LABEL_145:
  if (SHIBYTE(v118) < 0)
    operator delete(__p[0]);
  v84 = (std::__shared_weak_count *)v121;
  if (v121)
  {
    v85 = (unint64_t *)(v121 + 1);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  return v19;
}

void sub_18EF547C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  if (a34)
    operator delete(a34);
  v36 = *(void **)(v34 - 176);
  if (v36)
    operator delete(v36);
  v37 = *(void **)(v34 - 144);
  if (v37)
    operator delete(v37);
  if (a21 < 0)
    operator delete(a16);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t CA::AudioMetadataDeserializer::Impl::decode_track_format(uint64_t a1, _anonymous_namespace_ *a2, const unsigned __int8 *a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t **v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t **v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  unsigned __int8 *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  NSObject *v36;
  uint64_t **v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t **v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  NSObject *v47;
  int v48;
  uint64_t **v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  unsigned __int8 *v53;
  unint64_t *v54;
  unint64_t v55;
  NSObject *v56;
  uint64_t **v57;
  unint64_t *v58;
  unint64_t v59;
  char *v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t *v68;
  std::__shared_weak_count *v69;
  uint64_t *v70[2];
  void *__p[2];
  uint64_t v72;
  uint64_t *v73[2];
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76[2];
  char __s[8];
  _BYTE v78[18];
  uint8_t v79[32];
  uint8_t buf[24];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  AudioMetadataMemoryPool::create<AudioMetadataTrackFormat>(&v74, *(_QWORD *)a1);
  snprintf(&__s[1], 0xFuLL, "AT_%04hx%04hx_%02hhx", *a5, a5[1], *((unsigned __int8 *)a5 + 4));
  v10 = *(uint64_t ***)a1;
  v11 = v74;
  v12 = (std::__shared_weak_count *)v75;
  v73[0] = v74;
  v73[1] = v75;
  if (v75)
  {
    v13 = (unint64_t *)(v75 + 1);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(v10, v73, v11, &__s[1]);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v72 = 0;
  if ((_DWORD)v18)
  {
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      goto LABEL_88;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2485;
    v20 = "%25s:%-5d ...at track format name";
LABEL_85:
    _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
    goto LABEL_88;
  }
  v21 = *(uint64_t ***)a1;
  v22 = v74;
  v23 = (std::__shared_weak_count *)v75;
  v70[0] = v74;
  v70[1] = v75;
  if (v75)
  {
    v24 = (unint64_t *)(v75 + 1);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if (v72 >= 0)
    v26 = (char *)__p;
  else
    v26 = (char *)__p[0];
  AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(v21, v70, v22 + 1, v26);
  if (v23)
  {
    v28 = (unint64_t *)&v23->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v30 = v74;
  v31 = (std::__shared_weak_count *)v75;
  v68 = v74;
  v69 = (std::__shared_weak_count *)v75;
  if (v75)
  {
    v32 = (unint64_t *)(v75 + 1);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  __s[0] = 0;
  if ((_DWORD)v34)
  {
    v18 = v34;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1907;
      _os_log_impl(&dword_18EE07000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at format definition flags", buf, 0x12u);
    }
    goto LABEL_78;
  }
  if ((__s[0] & 0x80000000) == 0)
  {
    v37 = *(uint64_t ***)a1;
    *(_QWORD *)buf = v30;
    *(_QWORD *)&buf[8] = v31;
    if (v31)
    {
      v38 = (unint64_t *)&v31->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(v37, (uint64_t **)buf, v30 + 2, "0001");
    if (v31)
    {
      v40 = (unint64_t *)&v31->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v42 = *(uint64_t ***)a1;
    *(_QWORD *)v79 = v68;
    *(_QWORD *)&v79[8] = v69;
    if (v69)
    {
      v43 = (unint64_t *)&v69->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(v42, (uint64_t **)v79, v30 + 3, "PCM");
    if (v69)
    {
      v45 = (unint64_t *)&v69->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
LABEL_77:
    v18 = 0;
    goto LABEL_78;
  }
  memset(buf, 0, sizeof(buf));
  if ((_DWORD)v18)
  {
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v79 = 136315394;
      *(_QWORD *)&v79[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&v79[12] = 1024;
      *(_DWORD *)&v79[14] = 1915;
      _os_log_impl(&dword_18EE07000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at format label", v79, 0x12u);
    }
    v48 = 1;
  }
  else
  {
    v49 = *(uint64_t ***)a1;
    v76[0] = v30;
    v76[1] = (uint64_t *)v31;
    if (v31)
    {
      v50 = (unint64_t *)&v31->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    if ((buf[23] & 0x80u) == 0)
      v52 = (char *)buf;
    else
      v52 = *(char **)buf;
    AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(v49, v76, v30 + 2, v52);
    if (v31)
    {
      v54 = (unint64_t *)&v31->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    memset(v79, 0, 24);
    if ((_DWORD)v18)
    {
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v78 = 136315394;
        *(_QWORD *)&v78[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&v78[12] = 1024;
        *(_DWORD *)&v78[14] = 1922;
        _os_log_impl(&dword_18EE07000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at format definition", v78, 0x12u);
      }
      v48 = 1;
    }
    else
    {
      v57 = *(uint64_t ***)a1;
      *(_QWORD *)v78 = v68;
      *(_QWORD *)&v78[8] = v69;
      if (v69)
      {
        v58 = (unint64_t *)&v69->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      if ((v79[23] & 0x80u) == 0)
        v60 = (char *)v79;
      else
        v60 = *(char **)v79;
      AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(v57, (uint64_t **)v78, v30 + 3, v60);
      std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)v78);
      v48 = 0;
    }
    if ((char)v79[23] < 0)
      operator delete(*(void **)v79);
  }
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  if (!v48)
    goto LABEL_77;
  if (!v69)
    goto LABEL_82;
LABEL_78:
  v61 = (unint64_t *)&v69->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
    if ((_DWORD)v18)
      goto LABEL_83;
  }
  else
  {
LABEL_82:
    if ((_DWORD)v18)
    {
LABEL_83:
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        goto LABEL_88;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2491;
      v20 = "%25s:%-5d ...at track format definition";
      goto LABEL_85;
    }
  }
  std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v63, (uint64_t)v74, (uint64_t)v75);
  v18 = 0;
LABEL_88:
  if (SHIBYTE(v72) < 0)
    operator delete(__p[0]);
  v64 = (std::__shared_weak_count *)v75;
  if (v75)
  {
    v65 = (unint64_t *)(v75 + 1);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  return v18;
}

void sub_18EF54F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  char v32;
  uint64_t v33;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  if (v32 < 0)
    operator delete(*(void **)(v33 - 160));
  if (*(char *)(v33 - 105) < 0)
    operator delete(*(void **)(v33 - 128));
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t CA::AudioMetadataDeserializer::Impl::decode_pack_format(uint64_t a1, _anonymous_namespace_ *a2, const unsigned __int8 *a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t **v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t **v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  unsigned __int8 *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  NSObject *v36;
  unsigned __int8 *v37;
  const char *v38;
  NSObject *v39;
  uint32_t v40;
  int v41;
  NSObject *v42;
  uint64_t **v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t **v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t **v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t **v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  uint64_t **v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  NSObject *v64;
  int v65;
  uint64_t **v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  NSObject *v78;
  unsigned __int8 *v79;
  uint64_t *v80;
  void *v81;
  NSObject *v82;
  const char *v83;
  unsigned __int8 *v84;
  uint64_t *v85;
  void *v86;
  uint64_t v87;
  float *v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  NSObject *v92;
  int v93;
  uint64_t v94;
  unsigned __int8 *v95;
  uint64_t *v96;
  void *v97;
  NSObject *v98;
  const char *v99;
  char *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  unsigned __int16 *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unsigned __int16 *v108;
  uint64_t v109;
  char *v110;
  unint64_t v111[2];
  std::__shared_weak_count *v112;
  uint64_t *v113[2];
  void *__p[2];
  uint64_t v115;
  uint64_t *v116[2];
  uint64_t v117;
  uint64_t *v118;
  uint8_t v119[4];
  const char *v120;
  __int16 v121;
  int v122;
  uint8_t v123[32];
  uint8_t v124[32];
  uint8_t v125[36];
  char __str[12];
  uint8_t buf[24];
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  AudioMetadataMemoryPool::create<AudioMetadataPackFormat>(&v117, *(_QWORD *)a1);
  snprintf(__str, 0xCuLL, "AP_%04hx%04hx", *a5, a5[1]);
  v10 = *(uint64_t ***)a1;
  v11 = (_QWORD *)v117;
  v12 = (std::__shared_weak_count *)v118;
  v116[0] = (uint64_t *)v117;
  v116[1] = v118;
  if (v118)
  {
    v13 = (unint64_t *)(v118 + 1);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v10, v116, v11, __str);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v115 = 0;
  if ((_DWORD)v18)
  {
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      goto LABEL_95;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2186;
    v20 = "%25s:%-5d ...at pack format name";
LABEL_94:
    _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
    goto LABEL_95;
  }
  v21 = *(uint64_t ***)a1;
  v22 = v117;
  v23 = (std::__shared_weak_count *)v118;
  v113[0] = (uint64_t *)v117;
  v113[1] = v118;
  if (v118)
  {
    v24 = (unint64_t *)(v118 + 1);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if (v115 >= 0)
    v26 = (char *)__p;
  else
    v26 = (char *)__p[0];
  AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v21, v113, (_QWORD *)(v22 + 8), v26);
  if (v23)
  {
    v28 = (unint64_t *)&v23->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v31 = v117;
  v30 = (std::__shared_weak_count *)v118;
  v111[1] = v117;
  v112 = (std::__shared_weak_count *)v118;
  if (v118)
  {
    v32 = (unint64_t *)(v118 + 1);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v124[0] = 0;
  if (!(_DWORD)v34)
  {
    v41 = v124[0] >> 5;
    *(_BYTE *)(v31 + 24) = v124[0] >> 5;
    switch(v41)
    {
      case 0:
        memset(buf, 0, sizeof(buf));
        if ((_DWORD)v18)
        {
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v125 = 136315394;
            *(_QWORD *)&v125[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&v125[12] = 1024;
            *(_DWORD *)&v125[14] = 2597;
            _os_log_impl(&dword_18EE07000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at format label", v125, 0x12u);
          }
        }
        else
        {
          v66 = *(uint64_t ***)a1;
          *(_QWORD *)v125 = v31;
          *(_QWORD *)&v125[8] = v30;
          if (v30)
          {
            v67 = (unint64_t *)&v30->__shared_owners_;
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
          }
          if ((buf[23] & 0x80u) == 0)
            v69 = (char *)buf;
          else
            v69 = *(char **)buf;
          AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v66, (uint64_t **)v125, (_QWORD *)(v31 + 16), v69);
          if (v30)
          {
            v70 = (unint64_t *)&v30->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        if (!(_DWORD)v18)
          goto LABEL_86;
        goto LABEL_87;
      case 1:
        v56 = *(uint64_t ***)a1;
        *(_QWORD *)buf = v31;
        *(_QWORD *)&buf[8] = v30;
        if (v30)
        {
          v57 = (unint64_t *)&v30->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v56, (uint64_t **)buf, (_QWORD *)(v31 + 16), "0001");
        if (!v30)
          goto LABEL_86;
        v59 = (unint64_t *)&v30->__shared_owners_;
        do
          v47 = __ldaxr(v59);
        while (__stlxr(v47 - 1, v59));
        goto LABEL_68;
      case 2:
        v48 = *(uint64_t ***)a1;
        *(_QWORD *)buf = v31;
        *(_QWORD *)&buf[8] = v30;
        if (v30)
        {
          v49 = (unint64_t *)&v30->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v48, (uint64_t **)buf, (_QWORD *)(v31 + 16), "0002");
        if (!v30)
          goto LABEL_86;
        v51 = (unint64_t *)&v30->__shared_owners_;
        do
          v47 = __ldaxr(v51);
        while (__stlxr(v47 - 1, v51));
        goto LABEL_68;
      case 3:
        v52 = *(uint64_t ***)a1;
        *(_QWORD *)buf = v31;
        *(_QWORD *)&buf[8] = v30;
        if (v30)
        {
          v53 = (unint64_t *)&v30->__shared_owners_;
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v52, (uint64_t **)buf, (_QWORD *)(v31 + 16), "0003");
        if (!v30)
          goto LABEL_86;
        v55 = (unint64_t *)&v30->__shared_owners_;
        do
          v47 = __ldaxr(v55);
        while (__stlxr(v47 - 1, v55));
        goto LABEL_68;
      case 4:
        v43 = *(uint64_t ***)a1;
        *(_QWORD *)buf = v31;
        *(_QWORD *)&buf[8] = v30;
        if (v30)
        {
          v44 = (unint64_t *)&v30->__shared_owners_;
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v43, (uint64_t **)buf, (_QWORD *)(v31 + 16), "0004");
        if (!v30)
          goto LABEL_86;
        v46 = (unint64_t *)&v30->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        goto LABEL_68;
      case 5:
        v60 = *(uint64_t ***)a1;
        *(_QWORD *)buf = v31;
        *(_QWORD *)&buf[8] = v30;
        if (v30)
        {
          v61 = (unint64_t *)&v30->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v60, (uint64_t **)buf, (_QWORD *)(v31 + 16), "0005");
        if (!v30)
          goto LABEL_86;
        v63 = (unint64_t *)&v30->__shared_owners_;
        do
          v47 = __ldaxr(v63);
        while (__stlxr(v47 - 1, v63));
LABEL_68:
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
LABEL_86:
        v18 = 0;
        goto LABEL_87;
      default:
        v18 = 4294900722;
        if (!os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
          goto LABEL_87;
        v65 = *(unsigned __int8 *)(v31 + 24);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2618;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v65;
        v38 = "%25s:%-5d Unknown type definition (%d)";
        v39 = v64;
        v40 = 24;
        goto LABEL_29;
    }
  }
  v18 = v34;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2588;
    v38 = "%25s:%-5d ...at format definition flags";
    v39 = v36;
    v40 = 18;
LABEL_29:
    _os_log_impl(&dword_18EE07000, v39, OS_LOG_TYPE_ERROR, v38, buf, v40);
  }
  if (!v112)
    goto LABEL_91;
LABEL_87:
  v72 = &v112->__shared_owners_;
  do
    v73 = __ldaxr((unint64_t *)v72);
  while (__stlxr(v73 - 1, (unint64_t *)v72));
  if (!v73)
  {
    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
    std::__shared_weak_count::__release_weak(v112);
    if ((_DWORD)v18)
      goto LABEL_92;
  }
  else
  {
LABEL_91:
    if ((_DWORD)v18)
    {
LABEL_92:
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        goto LABEL_95;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2192;
      v20 = "%25s:%-5d ...at pack format definition";
      goto LABEL_94;
    }
  }
  memset(buf, 0, sizeof(buf));
  if (!(_DWORD)v18)
  {
    v81 = (void *)*v80;
    if (*v80)
    {
      v80[1] = (uint64_t)v81;
      operator delete(v81);
      *v80 = 0;
      v80[1] = 0;
      v80[2] = 0;
    }
    *(_OWORD *)v80 = *(_OWORD *)buf;
    v80[2] = *(_QWORD *)&buf[16];
    memset(buf, 0, sizeof(buf));
    memset(v125, 0, 24);
    if ((_DWORD)v18)
    {
      if (!os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        goto LABEL_118;
      *(_DWORD *)v124 = 136315394;
      *(_QWORD *)&v124[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&v124[12] = 1024;
      *(_DWORD *)&v124[14] = 2205;
      v83 = "%25s:%-5d ...at pack format pack format references";
      goto LABEL_117;
    }
    v86 = (void *)*v85;
    if (*v85)
    {
      v85[1] = (uint64_t)v86;
      operator delete(v86);
      *v85 = 0;
      v85[1] = 0;
      v85[2] = 0;
    }
    *(_OWORD *)v85 = *(_OWORD *)v125;
    v85[2] = *(_QWORD *)&v125[16];
    memset(v125, 0, 24);
    HIBYTE(v111[0]) = 0;
    if ((_DWORD)v87)
    {
      v18 = v87;
      if (!os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        goto LABEL_118;
      *(_DWORD *)v124 = 136315394;
      *(_QWORD *)&v124[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&v124[12] = 1024;
      *(_DWORD *)&v124[14] = 2212;
      v83 = "%25s:%-5d ...at pack format flags";
      goto LABEL_117;
    }
    v89 = HIBYTE(v111[0]);
    v90 = v117;
    *(_BYTE *)(v117 + 96) = (HIBYTE(v111[0]) >> 3) & 0xF;
    v91 = *(unsigned __int8 *)(v90 + 24);
    if (v91 == 4)
    {
      *(_BYTE *)(v90 + 60) = (v89 >> 1) & 3;
      *(_BYTE *)(v90 + 61) = v89 & 1;
      if ((_DWORD)v94)
      {
        v18 = v94;
        if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v124 = 136315394;
          *(_QWORD *)&v124[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&v124[12] = 1024;
          *(_DWORD *)&v124[14] = 2267;
          v83 = "%25s:%-5d ...at pack format HOA near field compensation reference distance";
LABEL_117:
          _os_log_impl(&dword_18EE07000, v82, OS_LOG_TYPE_ERROR, v83, v124, 0x12u);
        }
LABEL_118:
        if (*(_QWORD *)v125)
          operator delete(*(void **)v125);
        goto LABEL_120;
      }
LABEL_143:
      if ((v89 & 0x80) != 0
      {
        v18 = v101;
        if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v124 = 136315394;
          *(_QWORD *)&v124[4] = "AudioMetadataDeserializer.cpp";
          *(_WORD *)&v124[12] = 1024;
          *(_DWORD *)&v124[14] = 2274;
          v83 = "%25s:%-5d ...at pack format absolute distance";
          goto LABEL_117;
        }
      }
      else
      {
        std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v100, v117, (uint64_t)v118);
        v18 = 0;
      }
      goto LABEL_118;
    }
    if (v91 != 2)
      goto LABEL_143;
    memset(v124, 0, 24);
    if ((_DWORD)v18)
    {
      if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v123 = 136315394;
        *(_QWORD *)&v123[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&v123[12] = 1024;
        *(_DWORD *)&v123[14] = 2223;
        _os_log_impl(&dword_18EE07000, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at pack format encode pack format references", v123, 0x12u);
      }
      v93 = 1;
      goto LABEL_140;
    }
    v97 = (void *)*v96;
    if (*v96)
    {
      v96[1] = (uint64_t)v97;
      operator delete(v97);
      *v96 = 0;
      v96[1] = 0;
      v96[2] = 0;
    }
    *(_OWORD *)v96 = *(_OWORD *)v124;
    v96[2] = *(_QWORD *)&v124[16];
    memset(v124, 0, 24);
    memset(v123, 0, 24);
    if ((_DWORD)v18)
    {
      if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      {
LABEL_137:
        v93 = 1;
        goto LABEL_138;
      }
      *(_DWORD *)v119 = 136315394;
      v120 = "AudioMetadataDeserializer.cpp";
      v121 = 1024;
      v122 = 2230;
      v99 = "%25s:%-5d ...at pack format decode pack format references";
LABEL_136:
      _os_log_impl(&dword_18EE07000, v98, OS_LOG_TYPE_ERROR, v99, v119, 0x12u);
      goto LABEL_137;
    }
    v102 = *(void **)v18;
    if (*(_QWORD *)v18)
    {
      *(_QWORD *)(v18 + 8) = v102;
      operator delete(v102);
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = 0;
    }
    *(_OWORD *)v18 = *(_OWORD *)v123;
    *(_QWORD *)(v18 + 16) = *(_QWORD *)&v123[16];
    memset(v123, 0, 24);
    if ((v89 & 4) != 0)
    {
      if ((_DWORD)v103)
      {
        v18 = v103;
        if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)v119 = 136315394;
        v120 = "AudioMetadataDeserializer.cpp";
        v121 = 1024;
        v122 = 2238;
        v99 = "%25s:%-5d ...at pack format input pack format reference, major";
        goto LABEL_136;
      }
      if ((_DWORD)v105)
      {
        v18 = v105;
        if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)v119 = 136315394;
        v120 = "AudioMetadataDeserializer.cpp";
        v121 = 1024;
        v122 = 2243;
        v99 = "%25s:%-5d ...at pack format input pack format reference, minor";
        goto LABEL_136;
      }
      *(_DWORD *)v106 = v111[0];
      if ((v89 & 2) == 0)
        goto LABEL_152;
    }
    else if ((v89 & 2) == 0)
    {
LABEL_152:
      v93 = 0;
      goto LABEL_138;
    }
    if ((_DWORD)v107)
    {
      v18 = v107;
      if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
        goto LABEL_137;
      *(_DWORD *)v119 = 136315394;
      v120 = "AudioMetadataDeserializer.cpp";
      v121 = 1024;
      v122 = 2252;
      v99 = "%25s:%-5d ...at pack format output pack format reference, major";
      goto LABEL_136;
    }
    if ((_DWORD)v109)
    {
      v18 = v109;
      if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
        goto LABEL_137;
      *(_DWORD *)v119 = 136315394;
      v120 = "AudioMetadataDeserializer.cpp";
      v121 = 1024;
      v122 = 2257;
      v99 = "%25s:%-5d ...at pack format output pack format reference, minor";
      goto LABEL_136;
    }
    v93 = 0;
    *(_DWORD *)v110 = v111[0];
LABEL_138:
    if (*(_QWORD *)v123)
      operator delete(*(void **)v123);
LABEL_140:
    if (*(_QWORD *)v124)
      operator delete(*(void **)v124);
    if (v93)
      goto LABEL_118;
    goto LABEL_143;
  }
  if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v125 = 136315394;
    *(_QWORD *)&v125[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&v125[12] = 1024;
    *(_DWORD *)&v125[14] = 2198;
    _os_log_impl(&dword_18EE07000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at pack format channel format references", v125, 0x12u);
  }
LABEL_120:
  if (*(_QWORD *)buf)
    operator delete(*(void **)buf);
LABEL_95:
  if (SHIBYTE(v115) < 0)
    operator delete(__p[0]);
  v74 = (std::__shared_weak_count *)v118;
  if (v118)
  {
    v75 = (unint64_t *)(v118 + 1);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  return v18;
}

void sub_18EF55DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t CA::AudioMetadataDeserializer::Impl::decode_channel_format(uint64_t a1, _anonymous_namespace_ *a2, const unsigned __int8 *a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t **v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t **v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  unsigned __int8 *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  NSObject *v36;
  unsigned __int8 *v37;
  const char *v38;
  NSObject *v39;
  uint32_t v40;
  int v41;
  NSObject *v42;
  NSObject *v43;
  int v44;
  uint64_t **v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t **v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t **v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t **v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  uint64_t **v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t **v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  float *v76;
  NSObject *v77;
  uint32_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  char *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  const unsigned __int8 *v96;
  uint64_t v97;
  NSObject *v98;
  int v99;
  unint64_t v100;
  _BYTE v101[9];
  uint64_t *v102;
  uint64_t *v103[2];
  void *__p[2];
  uint64_t v105;
  uint64_t *v106[2];
  uint64_t v107;
  uint64_t *v108;
  uint8_t buf[24];
  __int16 v110;
  int v111;
  char __str[12];
  uint8_t v113[24];
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  AudioMetadataMemoryPool::create<AudioMetadataChannelFormat>(&v107, *(_QWORD *)a1);
  snprintf(__str, 0xCuLL, "AC_%04hx%04hx", *a5, a5[1]);
  v10 = *(uint64_t ***)a1;
  v11 = (_QWORD *)v107;
  v12 = (std::__shared_weak_count *)v108;
  v106[0] = (uint64_t *)v107;
  v106[1] = v108;
  if (v108)
  {
    v13 = (unint64_t *)(v108 + 1);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v10, v106, v11, __str);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v105 = 0;
  if ((_DWORD)v18)
  {
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      goto LABEL_100;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1775;
    v20 = "%25s:%-5d ...at channel format name";
    goto LABEL_98;
  }
  v21 = *(uint64_t ***)a1;
  v22 = v107;
  v23 = (std::__shared_weak_count *)v108;
  v103[0] = (uint64_t *)v107;
  v103[1] = v108;
  if (v108)
  {
    v24 = (unint64_t *)(v108 + 1);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if (v105 >= 0)
    v26 = (char *)__p;
  else
    v26 = (char *)__p[0];
  AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v21, v103, (_QWORD *)(v22 + 8), v26);
  if (v23)
  {
    v28 = (unint64_t *)&v23->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v31 = v107;
  v30 = (std::__shared_weak_count *)v108;
  *(_QWORD *)&v101[1] = v107;
  v102 = v108;
  if (v108)
  {
    v32 = (unint64_t *)(v108 + 1);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  LOBYTE(v100) = 0;
  if (!(_DWORD)v34)
  {
    v41 = v100 >> 5;
    *(_BYTE *)(v31 + 52) = v100 >> 5;
    switch(v41)
    {
      case 0:
        memset(buf, 0, sizeof(buf));
        if ((_DWORD)v18)
        {
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v113 = 136315394;
            *(_QWORD *)&v113[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&v113[12] = 1024;
            *(_DWORD *)&v113[14] = 2597;
            _os_log_impl(&dword_18EE07000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d ...at format label", v113, 0x12u);
          }
        }
        else
        {
          v66 = *(uint64_t ***)a1;
          *(_QWORD *)v113 = v31;
          *(_QWORD *)&v113[8] = v30;
          if (v30)
          {
            v67 = (unint64_t *)&v30->__shared_owners_;
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
          }
          if ((buf[23] & 0x80u) == 0)
            v69 = (char *)buf;
          else
            v69 = *(char **)buf;
          AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v66, (uint64_t **)v113, (_QWORD *)(v31 + 16), v69);
          if (v30)
          {
            v70 = (unint64_t *)&v30->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        if (!(_DWORD)v18)
          goto LABEL_86;
        goto LABEL_87;
      case 1:
        v45 = *(uint64_t ***)a1;
        *(_QWORD *)buf = v31;
        *(_QWORD *)&buf[8] = v30;
        if (v30)
        {
          v46 = (unint64_t *)&v30->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v45, (uint64_t **)buf, (_QWORD *)(v31 + 16), "0001");
        if (!v30)
          goto LABEL_86;
        v48 = (unint64_t *)&v30->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        goto LABEL_70;
      case 2:
        v50 = *(uint64_t ***)a1;
        *(_QWORD *)buf = v31;
        *(_QWORD *)&buf[8] = v30;
        if (v30)
        {
          v51 = (unint64_t *)&v30->__shared_owners_;
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v50, (uint64_t **)buf, (_QWORD *)(v31 + 16), "0002");
        if (!v30)
          goto LABEL_86;
        v53 = (unint64_t *)&v30->__shared_owners_;
        do
          v49 = __ldaxr(v53);
        while (__stlxr(v49 - 1, v53));
        goto LABEL_70;
      case 3:
        v54 = *(uint64_t ***)a1;
        *(_QWORD *)buf = v31;
        *(_QWORD *)&buf[8] = v30;
        if (v30)
        {
          v55 = (unint64_t *)&v30->__shared_owners_;
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v54, (uint64_t **)buf, (_QWORD *)(v31 + 16), "0003");
        if (!v30)
          goto LABEL_86;
        v57 = (unint64_t *)&v30->__shared_owners_;
        do
          v49 = __ldaxr(v57);
        while (__stlxr(v49 - 1, v57));
        goto LABEL_70;
      case 4:
        v58 = *(uint64_t ***)a1;
        *(_QWORD *)buf = v31;
        *(_QWORD *)&buf[8] = v30;
        if (v30)
        {
          v59 = (unint64_t *)&v30->__shared_owners_;
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v58, (uint64_t **)buf, (_QWORD *)(v31 + 16), "0004");
        if (!v30)
          goto LABEL_86;
        v61 = (unint64_t *)&v30->__shared_owners_;
        do
          v49 = __ldaxr(v61);
        while (__stlxr(v49 - 1, v61));
        goto LABEL_70;
      case 5:
        v62 = *(uint64_t ***)a1;
        *(_QWORD *)buf = v31;
        *(_QWORD *)&buf[8] = v30;
        if (v30)
        {
          v63 = (unint64_t *)&v30->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v62, (uint64_t **)buf, (_QWORD *)(v31 + 16), "0005");
        if (!v30)
          goto LABEL_86;
        v65 = (unint64_t *)&v30->__shared_owners_;
        do
          v49 = __ldaxr(v65);
        while (__stlxr(v49 - 1, v65));
LABEL_70:
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
LABEL_86:
        v18 = 0;
        goto LABEL_87;
      default:
        v18 = 4294900722;
        if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          goto LABEL_87;
        v44 = *(unsigned __int8 *)(v31 + 52);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2618;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v44;
        v38 = "%25s:%-5d Unknown type definition (%d)";
        v39 = v43;
        v40 = 24;
        goto LABEL_29;
    }
  }
  v18 = v34;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2588;
    v38 = "%25s:%-5d ...at format definition flags";
    v39 = v36;
    v40 = 18;
LABEL_29:
    _os_log_impl(&dword_18EE07000, v39, OS_LOG_TYPE_ERROR, v38, buf, v40);
  }
LABEL_87:
  v72 = (std::__shared_weak_count *)v102;
  if (!v102)
    goto LABEL_91;
  v73 = (unint64_t *)(v102 + 1);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if ((_DWORD)v18)
      goto LABEL_92;
  }
  else
  {
LABEL_91:
    if ((_DWORD)v18)
    {
LABEL_92:
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        goto LABEL_100;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1781;
      v20 = "%25s:%-5d ...at channel format definition";
      goto LABEL_98;
    }
  }
  v101[0] = 0;
  if ((_DWORD)v75)
  {
    v18 = v75;
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      goto LABEL_100;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1787;
    v20 = "%25s:%-5d ...at channel format flags";
    goto LABEL_98;
  }
  v83 = v101[0];
  if ((v101[0] & 0x80000000) != 0)
  {
    v88 = (unint64_t *)(v107 + 36);
    v84 = 1;
    *(_BYTE *)(v107 + 40) = 1;
    if ((_DWORD)v89)
    {
      v18 = v89;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1797;
        v20 = "%25s:%-5d ...at channel format low pass frequency";
        goto LABEL_98;
      }
      goto LABEL_100;
    }
  }
  else
  {
    v84 = 0;
  }
  if ((v83 & 0x40) != 0
    && (v85 = v107 + 8 * v84,
        *(_BYTE *)(v85 + 40) = 2,
        (_DWORD)v86))
  {
    v18 = v86;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1806;
      v20 = "%25s:%-5d ...at channel format high pass frequency";
LABEL_98:
      v77 = v19;
      v78 = 18;
LABEL_99:
      _os_log_impl(&dword_18EE07000, v77, OS_LOG_TYPE_ERROR, v20, buf, v78);
    }
  }
  else
  {
    *(_QWORD *)v113 = 0;
    if ((_DWORD)v87)
    {
      v18 = v87;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1814;
        v20 = "%25s:%-5d ...at channel format block count";
        goto LABEL_98;
      }
    }
    else
    {
      std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v90, v107, (uint64_t)v108);
      v92 = *(_QWORD *)v113;
      if (*(_QWORD *)v113)
      {
        v93 = 0;
        while (1)
        {
          v100 = 0;
          if ((_DWORD)v94)
          {
            v18 = v94;
            if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
              goto LABEL_100;
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1822;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v93 + 1;
            v110 = 1024;
            v111 = v92;
            v20 = "%25s:%-5d ...at size of block #%d of %d";
            goto LABEL_133;
          }
          v96 = (const unsigned __int8 *)(v100 + *a4);
          v99 = 0;
          if ((_DWORD)v97)
          {
            v18 = v97;
            if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
              goto LABEL_100;
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1829;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v93 + 1;
            v110 = 1024;
            v111 = v92;
            v20 = "%25s:%-5d ...at block #%d of %d, sub ID";
            goto LABEL_133;
          }
          *(_DWORD *)buf = *(_DWORD *)a5;
          *(_DWORD *)&buf[4] = v99;
          v18 = CA::AudioMetadataDeserializer::Impl::decode_block_format(a1, a2, v96, (unint64_t *)a4, (unsigned __int16 *)buf, *(unsigned __int8 *)(v107 + 52));
          if ((_DWORD)v18)
            break;
          if (v92 == ++v93)
            goto LABEL_126;
        }
        if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
          goto LABEL_100;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1834;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v93 + 1;
        v110 = 1024;
        v111 = v92;
        v20 = "%25s:%-5d ...at block #%d of %d";
LABEL_133:
        v77 = v98;
        v78 = 30;
        goto LABEL_99;
      }
LABEL_126:
      v18 = 0;
    }
  }
LABEL_100:
  if (SHIBYTE(v105) < 0)
    operator delete(__p[0]);
  v79 = (std::__shared_weak_count *)v108;
  if (v108)
  {
    v80 = (unint64_t *)(v108 + 1);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  return v18;
}

void sub_18EF5696C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  char v33;
  uint64_t v34;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v34 - 128);
  if (v33 < 0)
    operator delete(__p);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (a23 < 0)
    operator delete(a18);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataProgramme>>>>::__erase_unique<unsigned short>(uint64_t **a1, unsigned __int16 a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)(a1 + 1);
  v3 = a1[1];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = *((unsigned __int16 *)v6 + 16);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && *((unsigned __int16 *)v5 + 16) <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v5 + 5));
      operator delete(v5);
    }
  }
}

void CA::AudioMetadataDeserializer::Impl::expire_stream_format(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;

  v4 = (uint64_t **)(a1 + 176);
  if ((uint64_t *)(a1 + 184) != v5)
  {
    v6 = v5;
    v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v9 = v5;
      do
      {
        v8 = (uint64_t *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v5)
      *v4 = v8;
    v11 = *(uint64_t **)(a1 + 184);
    --*(_QWORD *)(a1 + 192);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v6 + 5));
    operator delete(v6);
  }
}

void CA::AudioMetadataDeserializer::Impl::expire_track_format(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;

  v3 = (uint64_t **)(a1 + 152);
  if ((uint64_t *)(a1 + 160) != v4)
  {
    v5 = v4;
    v6 = (uint64_t *)v4[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      v8 = v4;
      do
      {
        v7 = (uint64_t *)v8[2];
        v9 = *v7 == (_QWORD)v8;
        v8 = v7;
      }
      while (!v9);
    }
    if (*v3 == v4)
      *v3 = v7;
    v10 = *(uint64_t **)(a1 + 160);
    --*(_QWORD *)(a1 + 168);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v10, v5);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v5 + 5));
    operator delete(v5);
  }
}

void CA::AudioMetadataDeserializer::Impl::expire_track_uid(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;

  v4 = (uint64_t **)(a1 + 128);
  if ((uint64_t *)(a1 + 136) != v5)
  {
    v6 = v5;
    v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v9 = v5;
      do
      {
        v8 = (uint64_t *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v5)
      *v4 = v8;
    v11 = *(uint64_t **)(a1 + 136);
    --*(_QWORD *)(a1 + 144);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v6 + 5));
    operator delete(v6);
  }
}

void CA::AudioMetadataDeserializer::Impl::expire_pack_format(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;

  v4 = (uint64_t **)(a1 + 80);
  if ((uint64_t *)(a1 + 88) != v5)
  {
    v6 = v5;
    v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v9 = v5;
      do
      {
        v8 = (uint64_t *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v5)
      *v4 = v8;
    v11 = *(uint64_t **)(a1 + 88);
    --*(_QWORD *)(a1 + 96);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v6 + 5));
    operator delete(v6);
  }
}

void CA::AudioMetadataDeserializer::Impl::expire_channel_format(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;

  v4 = (uint64_t **)(a1 + 104);
  if ((uint64_t *)(a1 + 112) != v5)
  {
    v6 = v5;
    v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v9 = v5;
      do
      {
        v8 = (uint64_t *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v5)
      *v4 = v8;
    v11 = *(uint64_t **)(a1 + 112);
    --*(_QWORD *)(a1 + 120);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v6 + 5));
    operator delete(v6);
  }
}

void CA::AudioMetadataDeserializer::Impl::expire_block_format(_QWORD *a1, unsigned __int16 *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  int8x8_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t ***v17;
  uint64_t **v18;
  unint64_t v19;
  BOOL v20;
  NSObject *v21;
  int v22;
  int v23;
  int v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  int64_t v27;
  int v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t **)(a1 + 25);
  if (a1 + 26 != v5)
  {
    v6 = v5;
    v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v9 = v5;
      do
      {
        v8 = (uint64_t *)v9[2];
        v20 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (!v20);
    }
    if (*v4 == v5)
      *v4 = v8;
    v10 = (uint64_t *)a1[26];
    --a1[27];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v10, v6);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v6 + 5));
    operator delete(v6);
  }
  v11 = (int8x8_t)a1[89];
  if (!*(_QWORD *)&v11)
    goto LABEL_31;
  v12 = *a2;
  v13 = a2[1];
  v14 = v13 + v12;
  v15 = (uint8x8_t)vcnt_s8(v11);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v16 = v13 + v12;
    if (v14 >= *(_QWORD *)&v11)
      v16 = v14 % *(_QWORD *)&v11;
  }
  else
  {
    v16 = (v11.i32[0] - 1) & v14;
  }
  v17 = *(uint64_t ****)(a1[88] + 8 * v16);
  if (!v17 || (v18 = *v17) == 0)
  {
LABEL_31:
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = *a2;
      v23 = a2[1];
      v24 = *((_DWORD *)a2 + 1);
      v28 = 136316674;
      v29 = "AudioMetadataDeserializer.cpp";
      v30 = 1024;
      v31 = 2633;
      v32 = 1024;
      v33 = v22;
      v34 = 1024;
      v35 = v23;
      v36 = 1024;
      v37 = v24;
      v38 = 1024;
      v39 = v22;
      v40 = 1024;
      v41 = v23;
      _os_log_impl(&dword_18EE07000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Expired block format AB_%04hx%04hx_%08x for unknown channel format AC_%04hx%04hx", (uint8_t *)&v28, 0x30u);
    }
    return;
  }
  while (1)
  {
    v19 = (unint64_t)v18[1];
    if (v19 == v14)
      break;
    if (v15.u32[0] > 1uLL)
    {
      if (v19 >= *(_QWORD *)&v11)
        v19 %= *(_QWORD *)&v11;
    }
    else
    {
      v19 &= *(_QWORD *)&v11 - 1;
    }
    if (v19 != v16)
      goto LABEL_31;
LABEL_30:
    v18 = (uint64_t **)*v18;
    if (!v18)
      goto LABEL_31;
  }
  v20 = *((unsigned __int16 *)v18 + 8) == (_DWORD)v12 && *((unsigned __int16 *)v18 + 9) == (_DWORD)v13;
  if (!v20)
    goto LABEL_30;
  v26 = (unsigned __int16 *)v18[3];
  v25 = (unsigned __int16 *)v18[4];
  if (v26 != v25)
  {
    while (__PAIR64__(v26[1], *v26) != __PAIR64__(v13, v12) || *((_DWORD *)v26 + 1) != *((_DWORD *)a2 + 1))
    {
      v26 += 4;
      if (v26 == v25)
        return;
    }
    v27 = (char *)v25 - (char *)(v26 + 4);
    if (v25 != v26 + 4)
      memmove(v26, v26 + 4, (char *)v25 - (char *)(v26 + 4));
    v18[4] = (uint64_t *)((char *)v26 + v27);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<unsigned short>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t *a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = a1[1];
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*v12;
          if (*v12)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v23) = v12;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v29))
                  {
                    *(_QWORD *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*a1 + 8 * v29);
                  **(_QWORD **)(*a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = (void *)*a1;
        *a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v3);
  if (v31)
  {
    *v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v3) = v12;
  if (*v10)
  {
    v32 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_18EF574C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataContent,AudioMetadataContentRefs,AudioMetadataProgramme>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF575D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataProgramme,AudioMetadataProgrammeRefs,AudioMetadataFormatExtended>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF576EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataObject,AudioMetadataObjectRefs,AudioMetadataContent>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF57800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataContent,AudioMetadataContentRefs,AudioMetadataFormatExtended>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF57914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void CA::AudioMetadataDeserializer::Impl::check_common_pack_format_ref(uint64_t *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  uint64_t **v6;
  int v7;
  uint64_t v8;
  const char **v9;
  uint64_t **v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  const char *v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t *v37;
  int v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  int *v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  char *v56;
  char *v57;
  int v58;
  int *v59;
  char *v60;
  char *v61;
  int v62;
  char *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t **v67;
  int v68;
  uint64_t *v69[2];
  uint64_t *v70[2];
  uint64_t *v71[2];
  uint64_t v72;
  uint64_t *v73;
  char __str[12];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v2 = a2[1];
  if (v2 <= 0xFFF && (v2 & 0xFFF) != 0)
  {
    v6 = (uint64_t **)(a1 + 10);
    v7 = *a2;
    {
      snprintf(__str, 0xCuLL, "AP_%04hx%04hx", v7, v2);
      v8 = 0;
      v9 = (const char **)CA::ADMCommonFormats::pack_formats;
      while (v8 != 347)
      {
        if (!strcmp(__str, *v9))
        {
          AudioMetadataMemoryPool::create<AudioMetadataPackFormat>(&v72, *a1);
          v10 = (uint64_t **)*a1;
          v11 = (_QWORD *)v72;
          v12 = (std::__shared_weak_count *)v73;
          v71[0] = (uint64_t *)v72;
          v71[1] = v73;
          if (v73)
          {
            v13 = (unint64_t *)(v73 + 1);
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 + 1, v13));
          }
          AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v10, v71, v11, __str);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v17 = (uint64_t **)*a1;
          v18 = v72;
          v19 = (std::__shared_weak_count *)v73;
          v70[0] = (uint64_t *)v72;
          v70[1] = v73;
          if (v73)
          {
            v20 = (unint64_t *)(v73 + 1);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v17, v70, (_QWORD *)(v18 + 8), CA::ADMCommonFormats::pack_formats[6 * v8 + 1]);
          if (v19)
          {
            v22 = (unint64_t *)&v19->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v24 = (uint64_t **)*a1;
          v25 = v72;
          v26 = (std::__shared_weak_count *)v73;
          v69[0] = (uint64_t *)v72;
          v69[1] = v73;
          if (v73)
          {
            v27 = (unint64_t *)(v73 + 1);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v24, v69, (_QWORD *)(v25 + 16), CA::ADMCommonFormats::pack_formats[6 * v8 + 2]);
          if (v26)
          {
            v29 = (unint64_t *)&v26->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v67 = v6;
          *(_BYTE *)(v72 + 24) = *(_BYTE *)a2;
          while (v8 != 347 && !strcmp(__str, CA::ADMCommonFormats::pack_formats[6 * v8]))
          {
            v31 = CA::ADMCommonFormats::pack_formats[6 * v8 + 4];
            if (v31)
            {
              sscanf(v31, "AP_%04hx%04hx", &v68, (char *)&v68 + 2);
              v33 = v32;
              v35 = (_DWORD *)v32[1];
              v34 = v32[2];
              if ((unint64_t)v35 >= v34)
              {
                v41 = ((uint64_t)v35 - *v32) >> 2;
                if ((unint64_t)(v41 + 1) >> 62)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v42 = v34 - *v32;
                v43 = v42 >> 1;
                if (v42 >> 1 <= (unint64_t)(v41 + 1))
                  v43 = v41 + 1;
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                  v44 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v44 = v43;
                if (v44)
                  v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v44);
                else
                  v45 = 0;
                v55 = (_DWORD *)(v44 + 4 * v41);
                *v55 = v68;
                v36 = v55 + 1;
                v57 = (char *)*v33;
                v56 = (char *)v33[1];
                if (v56 != (char *)*v33)
                {
                  do
                  {
                    v58 = *((_DWORD *)v56 - 1);
                    v56 -= 4;
                    *--v55 = v58;
                  }
                  while (v56 != v57);
                  v56 = (char *)*v33;
                }
                *v33 = (uint64_t)v55;
                v33[1] = (uint64_t)v36;
                v33[2] = v44 + 4 * v45;
                if (v56)
                  operator delete(v56);
              }
              else
              {
                *v35 = v68;
                v36 = v35 + 1;
              }
              v33[1] = (uint64_t)v36;
              CA::AudioMetadataDeserializer::Impl::check_common_pack_format_ref(a1, &v68);
            }
            else
            {
              v38 = *(unsigned __int8 *)(v72 + 24);
              v39 = CA::ADMCommonFormats::pack_formats[6 * v8 + 5];
              switch(v38)
              {
                case 5:
                  LOWORD(v68) = 0;
                  sscanf(CA::ADMCommonFormats::channel_formats_binaural[2 * (_QWORD)v39], "%hx", &v68);
                  v40 = (unsigned __int16)v68 << 16;
                  v38 = 5;
                  break;
                case 4:
                  LOWORD(v68) = 0;
                  sscanf(CA::ADMCommonFormats::channel_formats_hoa[4 * (_QWORD)v39], "%hx", &v68);
                  v40 = (unsigned __int16)v68 << 16;
                  v38 = 4;
                  break;
                case 1:
                  v40 = ((_DWORD)v39 << 16) + 0x10000;
                  break;
                default:
                  std::__throw_bad_optional_access[abi:ne180100]();
              }
              v46 = v40 | v38;
              v48 = (int *)v37[1];
              v47 = v37[2];
              if ((unint64_t)v48 >= v47)
              {
                v50 = ((uint64_t)v48 - *v37) >> 2;
                if ((unint64_t)(v50 + 1) >> 62)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v51 = v47 - *v37;
                v52 = v51 >> 1;
                if (v51 >> 1 <= (unint64_t)(v50 + 1))
                  v52 = v50 + 1;
                if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                  v53 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v53 = v52;
                if (v53)
                  v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v53);
                else
                  v54 = 0;
                v59 = (int *)(v53 + 4 * v50);
                *v59 = v46;
                v49 = v59 + 1;
                v61 = (char *)*v37;
                v60 = (char *)v37[1];
                if (v60 != (char *)*v37)
                {
                  do
                  {
                    v62 = *((_DWORD *)v60 - 1);
                    v60 -= 4;
                    *--v59 = v62;
                  }
                  while (v60 != v61);
                  v60 = (char *)*v37;
                }
                *v37 = (uint64_t)v59;
                v37[1] = (uint64_t)v49;
                v37[2] = v53 + 4 * v54;
                if (v60)
                  operator delete(v60);
              }
              else
              {
                *v48 = v46;
                v49 = v48 + 1;
              }
              v37[1] = (uint64_t)v49;
            }
            ++v8;
          }
          std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v63, v72, (uint64_t)v73);
          v64 = (std::__shared_weak_count *)v73;
          if (v73)
          {
            v65 = (unint64_t *)(v73 + 1);
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          return;
        }
        ++v8;
        v9 += 6;
      }
    }
  }
}

void sub_18EF57E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::unordered_map<`anonymous namespace'::FormatID,std::vector<`anonymous namespace'::FormatID>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t ***v11;
  uint64_t **i;
  unint64_t v13;
  _QWORD *v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  uint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v32;
  _QWORD v33[2];
  char v34;

  v4 = (_QWORD *)a1;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    v32 = v4 + 2;
    do
    {
      v6 = *((unsigned __int16 *)v5 + 8);
      v7 = *((unsigned __int16 *)v5 + 9);
      v8 = v7 + v6;
      v9 = v4[1];
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          v2 = v7 + v6;
          if (v8 >= v9)
            v2 = v8 % v9;
        }
        else
        {
          v2 = ((_DWORD)v9 - 1) & v8;
        }
        v11 = *(uint64_t ****)(*v4 + 8 * v2);
        if (v11)
        {
          for (i = *v11; i; i = (uint64_t **)*i)
          {
            v13 = (unint64_t)i[1];
            if (v13 == v8)
            {
              if (*((unsigned __int16 *)i + 8) == (_DWORD)v6 && *((unsigned __int16 *)i + 9) == (_DWORD)v7)
                goto LABEL_47;
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v9)
                  v13 %= v9;
              }
              else
              {
                v13 &= v9 - 1;
              }
              if (v13 != v2)
                break;
            }
          }
        }
      }
      v15 = operator new(0x30uLL);
      v33[0] = v15;
      v33[1] = v32;
      v34 = 0;
      *v15 = 0;
      v15[1] = v8;
      v16 = *((_DWORD *)v5 + 4);
      v15[3] = 0;
      *((_DWORD *)v15 + 4) = v16;
      v15[4] = 0;
      v15[5] = 0;
      v18 = (_BYTE *)v5[3];
      v17 = (_BYTE *)v5[4];
      v19 = v17 - v18;
      if (v17 != v18)
      {
        if (v19 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v19 >> 2);
        v15[3] = v20;
        v15[4] = v20;
        v15[5] = &v20[4 * v21];
        memmove(v20, v18, v19);
        v15[4] = &v20[4 * (v19 >> 2)];
      }
      v34 = 1;
      v4 = (_QWORD *)a1;
      v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v23 = *(float *)(a1 + 32);
      if (!v9 || (float)(v23 * (float)v9) < v22)
      {
        v24 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v24 = 1;
        v25 = v24 | (2 * v9);
        v26 = vcvtps_u32_f32(v22 / v23);
        if (v25 <= v26)
          v27 = v26;
        else
          v27 = v25;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v27);
        v9 = *(_QWORD *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = ((_DWORD)v9 - 1) & v8;
        }
      }
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v28)
      {
        *(_QWORD *)v33[0] = *v28;
        *v28 = v33[0];
      }
      else
      {
        *(_QWORD *)v33[0] = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v33[0];
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v32;
        if (*(_QWORD *)v33[0])
        {
          v29 = *(_QWORD *)(*(_QWORD *)v33[0] + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v29 >= v9)
              v29 %= v9;
          }
          else
          {
            v29 &= v9 - 1;
          }
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v33[0];
        }
      }
      v33[0] = 0;
      ++*(_QWORD *)(a1 + 24);
LABEL_47:
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return v4;
}

void sub_18EF58198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void CA::AudioMetadataDeserializer::Impl::check_common_channel_format_ref(uint64_t *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::string::size_type v30;
  std::string::size_type *v31;
  char *v32;
  uint64_t **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::string::size_type v46;
  std::string::size_type *v47;
  char *v48;
  unint64_t v49;
  uint64_t **v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t **v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::string::size_type v63;
  std::string::size_type *v64;
  char *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string::size_type *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  std::string::size_type *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  std::string::size_type *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  std::string::size_type *v87;
  std::string::size_type v88;
  uint64_t **v89;
  __int128 v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::string::size_type v95;
  std::__shared_weak_count *size;
  unint64_t *v97;
  unint64_t v98;
  std::string::size_type *v99;
  std::string::size_type v100;
  uint64_t **v101;
  __int128 v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  std::string::size_type *v108;
  std::string::size_type v109;
  uint64_t **v110;
  _QWORD *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  size_t v117;
  std::string *v118;
  uint64_t **v119;
  std::string::size_type v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::string *p_s;
  unint64_t *v125;
  unint64_t v126;
  _DWORD *v127;
  char **v128;
  unint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  char *v137;
  unint64_t *v138;
  uint64_t *v139[2];
  __int128 v140;
  uint64_t *v141[2];
  uint64_t *v142[2];
  __int128 v143;
  uint64_t *v144[2];
  uint64_t *v145[2];
  uint64_t *v146[2];
  std::string v147;
  uint64_t *v148[2];
  std::string::size_type v149;
  uint64_t *v150;
  uint64_t *v151[2];
  uint64_t *v152[2];
  std::string::size_type *v153;
  char *v154;
  unint64_t v155;
  uint64_t *v156[2];
  uint64_t v157;
  uint64_t *v158;
  std::string __s;
  char v160[21];
  char __str[12];
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v2 = a2[1];
  if (v2 > 0xFFF || (v2 & 0xFFF) == 0)
    return;
  v6 = (uint64_t **)(a1 + 13);
  v7 = *a2;
  snprintf(__str, 0xCuLL, "AC_%04hx%04hx", v7, v2);
  AudioMetadataMemoryPool::create<AudioMetadataChannelFormat>(&v157, *a1);
  v8 = (uint64_t **)*a1;
  v9 = (_QWORD *)v157;
  v10 = (std::__shared_weak_count *)v158;
  v156[0] = (uint64_t *)v157;
  v156[1] = v158;
  if (v158)
  {
    v11 = (unint64_t *)(v158 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v8, v156, v9, __str);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = *(unsigned __int8 *)a2;
  v16 = (uint64_t *)v157;
  *(_BYTE *)(v157 + 52) = v15;
  v153 = 0;
  v154 = 0;
  v155 = 0;
  if (v15 == 1)
  {
    v49 = a2[1];
    if (v49 > 0x27)
      goto LABEL_73;
    v50 = (uint64_t **)*a1;
    v51 = (std::__shared_weak_count *)v158;
    v152[0] = v16;
    v152[1] = v158;
    if (v158)
    {
      v52 = (unint64_t *)(v158 + 1);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v50, v152, v16 + 1, CA::ADMCommonFormats::channel_formats_direct_speakers[3 * v49]);
    if (v51)
    {
      v54 = (unint64_t *)&v51->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v56 = (uint64_t **)*a1;
    v57 = v157;
    v58 = (std::__shared_weak_count *)v158;
    v151[0] = (uint64_t *)v157;
    v151[1] = v158;
    if (v158)
    {
      v59 = (unint64_t *)(v158 + 1);
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v56, v151, (_QWORD *)(v57 + 16), "0001");
    if (v58)
    {
      v61 = (unint64_t *)&v58->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    AudioMetadataMemoryPool::create<AudioMetadataBlockFormat>(&v149, *a1);
    v63 = v149;
    v64 = (std::string::size_type *)v154;
    if ((unint64_t)v154 >= v155)
    {
      v81 = v153;
      v82 = (v154 - (char *)v153) >> 3;
      v83 = v82 + 1;
      if ((unint64_t)(v82 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v84 = v155 - (_QWORD)v153;
      if ((uint64_t)(v155 - (_QWORD)v153) >> 2 > v83)
        v83 = v84 >> 2;
      if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
        v85 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v85 = v83;
      if (v85)
        v85 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v85);
      else
        v86 = 0;
      v108 = (std::string::size_type *)(v85 + 8 * v82);
      *v108 = v63;
      v65 = (char *)(v108 + 1);
      if (v64 != v81)
      {
        do
        {
          v109 = *--v64;
          *--v108 = v109;
        }
        while (v64 != v81);
        v64 = v153;
      }
      v153 = v108;
      v155 = v85 + 8 * v86;
      if (v64)
        operator delete(v64);
    }
    else
    {
      *(_QWORD *)v154 = v149;
      v65 = (char *)(v64 + 1);
    }
    v154 = v65;
    snprintf(v160, 0x15uLL, "AB_%s_00000001", (const char *)(*(_QWORD *)v157 + 3));
    v110 = (uint64_t **)*a1;
    v111 = (_QWORD *)v149;
    v112 = (std::__shared_weak_count *)v150;
    v148[0] = (uint64_t *)v149;
    v148[1] = v150;
    if (v150)
    {
      v113 = (unint64_t *)(v150 + 1);
      do
        v114 = __ldxr(v113);
      while (__stxr(v114 + 1, v113));
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(v110, v148, v111, v160);
    if (v112)
    {
      v115 = (unint64_t *)&v112->__shared_owners_;
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v147, "urn:itu:bs:2051:0:speaker:");
    v117 = strlen(CA::ADMCommonFormats::channel_formats_direct_speakers[3 * v49 + 1]);
    v118 = std::string::append(&v147, CA::ADMCommonFormats::channel_formats_direct_speakers[3 * v49 + 1], v117);
    __s = *v118;
    v118->__r_.__value_.__l.__size_ = 0;
    v118->__r_.__value_.__r.__words[2] = 0;
    v118->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    v119 = (uint64_t **)*a1;
    v120 = v149;
    v121 = (std::__shared_weak_count *)v150;
    v146[0] = (uint64_t *)v149;
    v146[1] = v150;
    if (v150)
    {
      v122 = (unint64_t *)(v150 + 1);
      do
        v123 = __ldxr(v122);
      while (__stxr(v123 + 1, v122));
    }
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_s = &__s;
    else
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(v119, v146, (_QWORD *)(v120 + 44), (char *)p_s);
    if (v121)
    {
      v125 = (unint64_t *)&v121->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    v127 = (_DWORD *)v149;
    *(_BYTE *)(v149 + 100) = 0;
    v128 = &CA::ADMCommonFormats::channel_formats_direct_speakers[3 * v49];
    v127[22] = *((_DWORD *)v128 + 4);
    v127[23] = *((_DWORD *)v128 + 5);
    v127[24] = 1065353216;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    size = (std::__shared_weak_count *)v150;
    if (!v150)
      goto LABEL_171;
    v129 = (unint64_t *)(v150 + 1);
    do
      v98 = __ldaxr(v129);
    while (__stlxr(v98 - 1, v129));
LABEL_169:
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    goto LABEL_171;
  }
  if (v15 == 4)
  {
    v33 = (uint64_t **)*a1;
    v34 = (std::__shared_weak_count *)v158;
    v145[0] = v16;
    v145[1] = v158;
    if (v158)
    {
      v35 = (unint64_t *)(v158 + 1);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v33, v145, v16 + 1, "SN3D_ACN_0");
    if (v34)
    {
      v37 = (unint64_t *)&v34->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v39 = (uint64_t **)*a1;
    v40 = v157;
    v41 = (std::__shared_weak_count *)v158;
    v144[0] = (uint64_t *)v157;
    v144[1] = v158;
    if (v158)
    {
      v42 = (unint64_t *)(v158 + 1);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v39, v144, (_QWORD *)(v40 + 16), "0004");
    if (v41)
    {
      v44 = (unint64_t *)&v41->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    AudioMetadataMemoryPool::create<AudioMetadataBlockFormat>(&v147, *a1);
    v46 = v147.__r_.__value_.__r.__words[0];
    v47 = (std::string::size_type *)v154;
    if ((unint64_t)v154 >= v155)
    {
      v69 = v153;
      v70 = (v154 - (char *)v153) >> 3;
      v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v72 = v155 - (_QWORD)v153;
      if ((uint64_t)(v155 - (_QWORD)v153) >> 2 > v71)
        v71 = v72 >> 2;
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
        v73 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v73 = v71;
      if (v73)
        v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v73);
      else
        v74 = 0;
      v87 = (std::string::size_type *)(v73 + 8 * v70);
      *v87 = v46;
      v48 = (char *)(v87 + 1);
      if (v47 != v69)
      {
        do
        {
          v88 = *--v47;
          *--v87 = v88;
        }
        while (v47 != v69);
        v47 = v153;
      }
      v153 = v87;
      v155 = v73 + 8 * v74;
      if (v47)
        operator delete(v47);
    }
    else
    {
      *(_QWORD *)v154 = v147.__r_.__value_.__r.__words[0];
      v48 = (char *)(v47 + 1);
    }
    v154 = v48;
    snprintf((char *)&__s, 0x15uLL, "AB_%s_00000001", (const char *)(*(_QWORD *)v157 + 3));
    v89 = (uint64_t **)*a1;
    v90 = *(_OWORD *)&v147.__r_.__value_.__l.__data_;
    v143 = *(_OWORD *)&v147.__r_.__value_.__l.__data_;
    if (v147.__r_.__value_.__l.__size_)
    {
      v91 = (unint64_t *)(v147.__r_.__value_.__l.__size_ + 8);
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(v89, (uint64_t **)&v143, (_QWORD *)v90, (char *)&__s);
    if (*((_QWORD *)&v90 + 1))
    {
      v93 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v90 + 1) + 16))(*((_QWORD *)&v90 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v90 + 1));
      }
    }
    size = (std::__shared_weak_count *)v147.__r_.__value_.__l.__size_;
    v95 = v147.__r_.__value_.__r.__words[0];
    *(_WORD *)(v147.__r_.__value_.__r.__words[0] + 97) = 256;
    *(_DWORD *)(v95 + 88) = 0;
    if (!size)
      goto LABEL_171;
    v97 = (unint64_t *)&size->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    goto LABEL_169;
  }
  if (v15 != 5)
  {
LABEL_73:
    v66 = (std::__shared_weak_count *)v158;
    if (!v158)
      return;
    v67 = (unint64_t *)(v158 + 1);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    goto LABEL_184;
  }
  v17 = (uint64_t **)*a1;
  v18 = (std::__shared_weak_count *)v158;
  v142[0] = v16;
  v142[1] = v158;
  if (v158)
  {
    v19 = (unint64_t *)(v158 + 1);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v17, v142, v16 + 1, "LeftEar");
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v23 = (uint64_t **)*a1;
  v24 = v157;
  v25 = (std::__shared_weak_count *)v158;
  v141[0] = (uint64_t *)v157;
  v141[1] = v158;
  if (v158)
  {
    v26 = (unint64_t *)(v158 + 1);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v23, v141, (_QWORD *)(v24 + 16), "0005");
  if (v25)
  {
    v28 = (unint64_t *)&v25->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  AudioMetadataMemoryPool::create<AudioMetadataBlockFormat>(&v147, *a1);
  v30 = v147.__r_.__value_.__r.__words[0];
  v31 = (std::string::size_type *)v154;
  if ((unint64_t)v154 >= v155)
  {
    v75 = v153;
    v76 = (v154 - (char *)v153) >> 3;
    v77 = v76 + 1;
    if ((unint64_t)(v76 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v78 = v155 - (_QWORD)v153;
    if ((uint64_t)(v155 - (_QWORD)v153) >> 2 > v77)
      v77 = v78 >> 2;
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
      v79 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v79 = v77;
    if (v79)
      v79 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v79);
    else
      v80 = 0;
    v99 = (std::string::size_type *)(v79 + 8 * v76);
    *v99 = v30;
    v32 = (char *)(v99 + 1);
    if (v31 != v75)
    {
      do
      {
        v100 = *--v31;
        *--v99 = v100;
      }
      while (v31 != v75);
      v31 = v153;
    }
    v153 = v99;
    v155 = v79 + 8 * v80;
    if (v31)
      operator delete(v31);
  }
  else
  {
    *(_QWORD *)v154 = v147.__r_.__value_.__r.__words[0];
    v32 = (char *)(v31 + 1);
  }
  v154 = v32;
  snprintf((char *)&__s, 0x15uLL, "AB_%s_00000001", (const char *)(*(_QWORD *)v157 + 3));
  v101 = (uint64_t **)*a1;
  v102 = *(_OWORD *)&v147.__r_.__value_.__l.__data_;
  v140 = *(_OWORD *)&v147.__r_.__value_.__l.__data_;
  if (v147.__r_.__value_.__l.__size_)
  {
    v103 = (unint64_t *)(v147.__r_.__value_.__l.__size_ + 8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(v101, (uint64_t **)&v140, (_QWORD *)v102, (char *)&__s);
  if (*((_QWORD *)&v102 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
    }
  }
  size = (std::__shared_weak_count *)v147.__r_.__value_.__l.__size_;
  if (v147.__r_.__value_.__l.__size_)
  {
    v107 = (unint64_t *)(v147.__r_.__value_.__l.__size_ + 8);
    do
      v98 = __ldaxr(v107);
    while (__stlxr(v98 - 1, v107));
    goto LABEL_169;
  }
LABEL_171:
  v130 = *a1;
  v131 = v157;
  v132 = (std::__shared_weak_count *)v158;
  v139[0] = (uint64_t *)v157;
  v139[1] = v158;
  if (v158)
  {
    v133 = (unint64_t *)(v158 + 1);
    do
      v134 = __ldxr(v133);
    while (__stxr(v134 + 1, v133));
  }
  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataBlockFormat,AudioMetadataBlockFormatRefs,AudioMetadataChannelFormat>(v130, v139, v131 + 24, &v153);
  if (v132)
  {
    v135 = (unint64_t *)&v132->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v137, v157, (uint64_t)v158);
  if (v153)
    operator delete(v153);
  v66 = (std::__shared_weak_count *)v158;
  if (v158)
  {
    v138 = (unint64_t *)(v158 + 1);
    do
      v68 = __ldaxr(v138);
    while (__stlxr(v68 - 1, v138));
LABEL_184:
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
}

void sub_18EF58C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  void *v34;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  v34 = *(void **)(v32 - 216);
  if (v34)
    operator delete(v34);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v32 - 176);
  _Unwind_Resume(a1);
}

void sub_18EF58D30()
{
  JUMPOUT(0x18EF58D28);
}

uint64_t *std::__tree<std::__value_type<`anonymous namespace'::TrackFormatID,std::shared_ptr<AudioMetadataTrackFormat>>,std::__map_value_compare<`anonymous namespace'::TrackFormatID,std::__value_type<`anonymous namespace'::TrackFormatID,std::shared_ptr<AudioMetadataTrackFormat>>,std::less<`anonymous namespace'::TrackFormatID>,true>,std::allocator<std::__value_type<`anonymous namespace'::TrackFormatID,std::shared_ptr<AudioMetadataTrackFormat>>>>::find<`anonymous namespace'::TrackFormatID>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = a2[1];
  v7 = v2;
  v8 = *((unsigned __int8 *)a2 + 4);
  do
  {
    v9 = *((unsigned __int16 *)v3 + 16);
    if (v9 < v5)
    {
LABEL_6:
      ++v3;
      goto LABEL_9;
    }
    if (v9 > v5)
      goto LABEL_8;
    v10 = *((unsigned __int16 *)v3 + 17);
    if (v10 < v6)
      goto LABEL_6;
    if (v10 <= v6)
    {
      if (*((unsigned __int8 *)v3 + 36) < v8)
        ++v3;
      else
        v7 = v3;
    }
    else
    {
LABEL_8:
      v7 = v3;
    }
LABEL_9:
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v11 = *((unsigned __int16 *)v7 + 16);
  if (v5 < v11)
    return v2;
  if (v5 <= v11)
  {
    v12 = *((unsigned __int16 *)v7 + 17);
    if (v6 < v12 || v6 <= v12 && v8 < *((unsigned __int8 *)v7 + 36))
      return v2;
  }
  return v7;
}

void AudioMetadataMemoryPool::create<AudioMetadataTrackFormat>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;

  v4 = (char *)operator new(0x50uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2917478;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  v11 = v4 + 24;
  v6 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v11);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  v8 = (std::__shared_weak_count *)v6[6];
  v6[5] = (uint64_t)(v4 + 24);
  v6[6] = (uint64_t)v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18EF58EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataTrackFormat>(uint64_t **a1, uint64_t **a2, _QWORD *a3, char *__s)
{
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 __dst;

  v8 = strlen(__s) + 1;
  v9 = operator new[]();
  std::shared_ptr<char []>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(&__dst, v9);
  v10 = (void *)__dst;
  *a3 = __dst;
  memcpy(v10, __s, v8);
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(a1, (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &__dst);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF58FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void CA::AudioMetadataDeserializer::Impl::check_common_stream_format_ref(uint64_t *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  unint64_t v16;
  const char *v17;
  size_t v18;
  std::string *v19;
  uint64_t **v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  const char *v44;
  size_t v45;
  std::string *v46;
  uint64_t **v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::string *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t **v55;
  uint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t **v62;
  uint64_t *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  uint64_t *v74[2];
  uint64_t *v75[2];
  uint64_t *v76[2];
  uint64_t *v77[2];
  uint64_t *v78[2];
  uint64_t *v79[2];
  std::string v80;
  std::string v81;
  uint64_t *v82[2];
  uint64_t *v83;
  uint64_t *v84;
  char __str[12];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v2 = a2[1];
  if (v2 > 0xFFF || (v2 & 0xFFF) == 0)
    return;
  v6 = (uint64_t **)(a1 + 22);
  v7 = *a2;
  snprintf(__str, 0xCuLL, "AS_%04hx%04hx", v7, v2);
  AudioMetadataMemoryPool::create<AudioMetadataStreamFormat>(&v83, *a1);
  v8 = (uint64_t **)*a1;
  v9 = v83;
  v10 = (std::__shared_weak_count *)v84;
  v82[0] = v83;
  v82[1] = v84;
  if (v84)
  {
    v11 = (unint64_t *)(v84 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v8, v82, v9, __str);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = *(unsigned __int8 *)a2;
  if (v15 != 1)
  {
    if (v15 == 5)
    {
      v16 = a2[1] - 1;
      if (v16 <= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v80, "PCM_");
        v17 = CA::ADMCommonFormats::channel_formats_binaural[2 * v16 + 1];
        v18 = strlen(v17);
        v19 = std::string::append(&v80, v17, v18);
        v81 = *v19;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        v20 = (uint64_t **)*a1;
        v21 = v83;
        v22 = (std::__shared_weak_count *)v84;
        v76[0] = v83;
        v76[1] = v84;
        if (v84)
        {
          v23 = (unint64_t *)(v84 + 1);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v81;
        else
          v25 = (std::string *)v81.__r_.__value_.__r.__words[0];
        AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v20, v76, v21 + 1, (char *)v25);
        if (v22)
        {
          v26 = (unint64_t *)&v22->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v28 = (uint64_t **)*a1;
        v29 = v83;
        v30 = (std::__shared_weak_count *)v84;
        v75[0] = v83;
        v75[1] = v84;
        if (v84)
        {
          v31 = (unint64_t *)(v84 + 1);
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v28, v75, v29 + 2, "0005");
        if (v30)
        {
          v33 = (unint64_t *)&v30->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v35 = (uint64_t **)*a1;
        v36 = v83;
        v37 = (std::__shared_weak_count *)v84;
        v74[0] = v83;
        v74[1] = v84;
        if (v84)
        {
          v38 = (unint64_t *)(v84 + 1);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v35, v74, v36 + 3, "PCM");
        if (v37)
        {
          v40 = (unint64_t *)&v37->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        LODWORD(v80.__r_.__value_.__l.__data_) = *(_DWORD *)a2;
        CA::AudioMetadataDeserializer::Impl::check_common_channel_format_ref(a1, (unsigned __int16 *)&v80);
        goto LABEL_79;
      }
    }
LABEL_85:
    v70 = (std::__shared_weak_count *)v84;
    if (!v84)
      return;
    v73 = (unint64_t *)(v84 + 1);
    do
      v72 = __ldaxr(v73);
    while (__stlxr(v72 - 1, v73));
    goto LABEL_88;
  }
  v42 = a2[1];
  v43 = v42 - 1;
  if ((unint64_t)(v42 - 1) > 0x27)
    goto LABEL_85;
  std::string::basic_string[abi:ne180100]<0>(&v80, "PCM_");
  v44 = CA::ADMCommonFormats::channel_formats_direct_speakers[3 * v43];
  v45 = strlen(v44);
  v46 = std::string::append(&v80, v44, v45);
  v81 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  v47 = (uint64_t **)*a1;
  v48 = v83;
  v49 = (std::__shared_weak_count *)v84;
  v79[0] = v83;
  v79[1] = v84;
  if (v84)
  {
    v50 = (unint64_t *)(v84 + 1);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v81;
  else
    v52 = (std::string *)v81.__r_.__value_.__r.__words[0];
  AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v47, v79, v48 + 1, (char *)v52);
  if (v49)
  {
    v53 = (unint64_t *)&v49->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v55 = (uint64_t **)*a1;
  v56 = v83;
  v57 = (std::__shared_weak_count *)v84;
  v78[0] = v83;
  v78[1] = v84;
  if (v84)
  {
    v58 = (unint64_t *)(v84 + 1);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v55, v78, v56 + 2, "0001");
  if (v57)
  {
    v60 = (unint64_t *)&v57->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v62 = (uint64_t **)*a1;
  v63 = v83;
  v64 = (std::__shared_weak_count *)v84;
  v77[0] = v83;
  v77[1] = v84;
  if (v84)
  {
    v65 = (unint64_t *)(v84 + 1);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(v62, v77, v63 + 3, "PCM");
  if (v64)
  {
    v67 = (unint64_t *)&v64->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  LODWORD(v80.__r_.__value_.__l.__data_) = *(_DWORD *)a2;
  CA::AudioMetadataDeserializer::Impl::check_common_channel_format_ref(a1, (unsigned __int16 *)&v80);
LABEL_79:
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v69, (uint64_t)v83, (uint64_t)v84);
  v70 = (std::__shared_weak_count *)v84;
  if (v84)
  {
    v71 = (unint64_t *)(v84 + 1);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
LABEL_88:
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_18EF5952C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1 - 88);
  _Unwind_Resume(a1);
}

char *std::map<`anonymous namespace'::TrackFormatID,std::shared_ptr<AudioMetadataTrackFormat>>::operator[](uint64_t **a1, unsigned __int16 *a2)
{
  unsigned __int16 *v4;
  uint64_t **v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;

  v5 = a1 + 1;
  v4 = (unsigned __int16 *)a1[1];
  if (!v4)
  {
    v9 = a1 + 1;
    goto LABEL_15;
  }
  v6 = *a2;
  v7 = a2[1];
  v8 = *((unsigned __int8 *)a2 + 4);
  do
  {
    while (1)
    {
      v9 = v4;
      v10 = v4[16];
      if (v6 >= v10)
      {
        if (v6 > v10)
          goto LABEL_5;
        v11 = *((unsigned __int16 *)v9 + 17);
        if (v7 >= v11)
          break;
      }
LABEL_10:
      v4 = (unsigned __int16 *)*v9;
      v5 = (uint64_t **)v9;
      if (!*v9)
        goto LABEL_15;
    }
    if (v7 <= v11)
    {
      v12 = *((unsigned __int8 *)v9 + 36);
      if (v8 < v12)
        goto LABEL_10;
      if (v12 >= v8)
        return (char *)(v9 + 5);
    }
LABEL_5:
    v4 = (unsigned __int16 *)v9[1];
  }
  while (v4);
  v5 = (uint64_t **)(v9 + 1);
LABEL_15:
  v13 = v9;
  v9 = operator new(0x38uLL);
  *((_DWORD *)v9 + 8) = *(_DWORD *)a2;
  *((_WORD *)v9 + 18) = a2[2];
  v9[5] = 0;
  v9[6] = 0;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = v13;
  *v5 = v9;
  v14 = (uint64_t *)**a1;
  v15 = v9;
  if (v14)
  {
    *a1 = v14;
    v15 = *v5;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (char *)(v9 + 5);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataObject,AudioMetadataObjectRefs,AudioMetadataObject>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF597EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<`anonymous namespace'::FormatID,std::shared_ptr<AudioMetadataPackFormat>>,std::__map_value_compare<`anonymous namespace'::FormatID,std::__value_type<`anonymous namespace'::FormatID,std::shared_ptr<AudioMetadataPackFormat>>,std::less<`anonymous namespace'::FormatID>,true>,std::allocator<std::__value_type<`anonymous namespace'::FormatID,std::shared_ptr<AudioMetadataPackFormat>>>>::find<`anonymous namespace'::FormatID>(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;

  v5 = *(uint64_t **)(a1 + 8);
  v3 = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (!v5)
    return v3;
  v6 = v3;
  do
  {
    v7 = *((unsigned __int16 *)v4 + 16);
    if (v7 >= a2)
    {
      if (v7 <= a2)
      {
        if (*((unsigned __int16 *)v4 + 17) < a3)
          ++v4;
        else
          v6 = v4;
      }
      else
      {
        v6 = v4;
      }
    }
    else
    {
      ++v4;
    }
    v4 = (uint64_t *)*v4;
  }
  while (v4);
  if (v6 == v3)
    return v3;
  v8 = *((unsigned __int16 *)v6 + 16);
  if (v8 > a2 || v8 >= a2 && *((unsigned __int16 *)v6 + 17) > a3)
    return v3;
  return v6;
}

uint64_t *std::unordered_map<unsigned short,std::vector<`anonymous namespace'::FormatID>>::operator[](uint64_t a1, unsigned __int16 a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t ***v7;
  uint64_t **i;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  float v12;
  float v13;
  _BOOL4 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  void *v32;
  _QWORD v33[2];
  char v34;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v2 = a2;
      if (v5 <= a2)
        v2 = a2 % v5;
    }
    else
    {
      v2 = ((_DWORD)v5 - 1) & a2;
    }
    v7 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v2);
    if (v7)
    {
      for (i = *v7; i; i = (uint64_t **)*i)
      {
        v9 = (unint64_t)i[1];
        if (v9 == a2)
        {
          if (*((unsigned __int16 *)i + 8) == a2)
            return (uint64_t *)(i + 3);
        }
        else
        {
          if (v6.u32[0] > 1uLL)
          {
            if (v9 >= v5)
              v9 %= v5;
          }
          else
          {
            v9 &= v5 - 1;
          }
          if (v9 != v2)
            break;
        }
      }
    }
  }
  v10 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  v33[0] = v11;
  v33[1] = a1 + 16;
  *v11 = 0;
  v11[1] = v4;
  *((_WORD *)v11 + 8) = v4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v34 = 1;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v5 || (float)(v13 * (float)v5) < v12)
  {
    v14 = (v5 & (v5 - 1)) == 0;
    if (v5 < 3)
      v14 = 0;
    v15 = (2 * v5) | !v14;
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v5)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v5)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v5 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v5)
      {
        v5 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(void **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*v10;
          if (*v10)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v10;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v5 = (unint64_t)prime;
          goto LABEL_59;
        }
        v32 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v32)
          operator delete(v32);
        v5 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v5 <= v4)
        v2 = v4 % v5;
      else
        v2 = v4;
    }
    else
    {
      v2 = ((_DWORD)v5 - 1) & v4;
    }
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v29)
  {
    *(_QWORD *)v33[0] = *v29;
    *v29 = v33[0];
  }
  else
  {
    *(_QWORD *)v33[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v33[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v10;
    if (*(_QWORD *)v33[0])
    {
      v30 = *(_QWORD *)(*(_QWORD *)v33[0] + 8);
      if ((v5 & (v5 - 1)) != 0)
      {
        if (v30 >= v5)
          v30 %= v5;
      }
      else
      {
        v30 &= v5 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v33[0];
    }
  }
  i = (uint64_t **)v33[0];
  v33[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  return (uint64_t *)(i + 3);
}

void sub_18EF59C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataTrackUID,AudioMetadataTrackUIDRefs,AudioMetadataObject>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF59DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<AudioMetadataObject *>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((char *)v5 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v10);
    else
      v11 = 0;
    v12 = (_QWORD *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    *v12 = *a2;
    v6 = v12 + 1;
    v15 = (char *)*a1;
    v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v12 = v16;
      }
      while (v14 != v15);
      v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataObject,AudioMetadataObjectRefs,AudioMetadataFormatExtended>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF59F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unordered_map<`anonymous namespace'::FormatID,std::vector<`anonymous namespace'::FormatID>>::operator[](uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[2];
  char v26;

  v5 = *a2;
  v6 = a2[1];
  v7 = v6 + v5;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = v6 + v5;
      if (v7 >= v8)
        v2 = v7 % v8;
    }
    else
    {
      v2 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v2);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t **)*i)
      {
        v12 = (unint64_t)i[1];
        if (v12 == v7)
        {
          if (*((unsigned __int16 *)i + 8) == (_DWORD)v5 && *((unsigned __int16 *)i + 9) == (_DWORD)v6)
            return (uint64_t *)(i + 3);
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v2)
            break;
        }
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0x30uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = *(_DWORD *)a2;
  v15[4] = 0;
  v15[5] = 0;
  v15[3] = 0;
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v14;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (uint64_t **)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  return (uint64_t *)(i + 3);
}

void sub_18EF5A1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataChannelFormat,AudioMetadataChannelFormatRefs,AudioMetadataPackFormat>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5A2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataPackFormat,AudioMetadataPackFormatRefs,AudioMetadataPackFormat>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5A410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unordered_map<`anonymous namespace'::FormatID,`anonymous namespace'::FormatID>::find[abi:ne180100](_QWORD *a1, unsigned __int16 a2, unsigned __int16 a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t ***v7;
  uint64_t **result;
  unint64_t v9;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = a3 + (unint64_t)a2;
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = a3 + (unint64_t)a2;
    if (v4 >= *(_QWORD *)&v3)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = (v3.i32[0] - 1) & v4;
  }
  v7 = *(uint64_t ****)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  for (result = *v7; result; result = (uint64_t **)*result)
  {
    v9 = (unint64_t)result[1];
    if (v9 == v4)
    {
      if (*((unsigned __int16 *)result + 8) == a2 && *((unsigned __int16 *)result + 9) == a3)
        return result;
    }
    else
    {
      if (v5.u32[0] > 1uLL)
      {
        if (v9 >= *(_QWORD *)&v3)
          v9 %= *(_QWORD *)&v3;
      }
      else
      {
        v9 &= *(_QWORD *)&v3 - 1;
      }
      if (v9 != v6)
        return 0;
    }
  }
  return result;
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataPackFormat,AudioMetadataPackFormatRefs,AudioMetadataFormatExtended>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5A5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<`anonymous namespace'::BlockFormatID,std::shared_ptr<AudioMetadataBlockFormat>>,std::__map_value_compare<`anonymous namespace'::BlockFormatID,std::__value_type<`anonymous namespace'::BlockFormatID,std::shared_ptr<AudioMetadataBlockFormat>>,std::less<`anonymous namespace'::BlockFormatID>,true>,std::allocator<std::__value_type<`anonymous namespace'::BlockFormatID,std::shared_ptr<AudioMetadataBlockFormat>>>>::find<`anonymous namespace'::BlockFormatID>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = a2[1];
  v7 = v2;
  v8 = *((_DWORD *)a2 + 1);
  do
  {
    v9 = *((unsigned __int16 *)v3 + 16);
    if (v9 < v5)
    {
LABEL_6:
      ++v3;
      goto LABEL_9;
    }
    if (v9 > v5)
      goto LABEL_8;
    v10 = *((unsigned __int16 *)v3 + 17);
    if (v10 < v6)
      goto LABEL_6;
    if (v10 <= v6)
    {
      if (*((_DWORD *)v3 + 9) < v8)
        ++v3;
      else
        v7 = v3;
    }
    else
    {
LABEL_8:
      v7 = v3;
    }
LABEL_9:
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v11 = *((unsigned __int16 *)v7 + 16);
  if (v5 < v11)
    return v2;
  if (v5 <= v11)
  {
    v12 = *((unsigned __int16 *)v7 + 17);
    if (v6 < v12 || v6 <= v12 && v8 < *((_DWORD *)v7 + 9))
      return v2;
  }
  return v7;
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataBlockFormat,AudioMetadataBlockFormatRefs,AudioMetadataChannelFormat>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5A7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataChannelFormat,AudioMetadataChannelFormatRefs,AudioMetadataFormatExtended>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5A8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataTrackUID,AudioMetadataTrackUIDRefs,AudioMetadataFormatExtended>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5A9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataTrackFormat,AudioMetadataTrackFormatRefs,AudioMetadataFormatExtended>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5AAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataStreamFormat,AudioMetadataStreamFormatRefs,AudioMetadataFormatExtended>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5AC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unordered_map<`anonymous namespace'::BlockFormatID,`anonymous namespace'::FormatID>::find[abi:ne180100](_QWORD *a1, unsigned __int16 *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *result;
  unint64_t v11;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = *((unsigned int *)a2 + 1);
  v6 = v4 + v3 + v5;
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4 + v3 + v5;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = (*(_QWORD *)&v2 - 1) & v6;
  }
  v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  for (result = *v9; result; result = (uint64_t *)*result)
  {
    v11 = result[1];
    if (v11 == v6)
    {
      if (__PAIR64__(*((unsigned __int16 *)result + 9), *((unsigned __int16 *)result + 8)) == __PAIR64__(v4, v3)
        && *((_DWORD *)result + 5) == (_DWORD)v5)
      {
        return result;
      }
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(_QWORD *)&v2)
          v11 %= *(_QWORD *)&v2;
      }
      else
      {
        v11 &= *(_QWORD *)&v2 - 1;
      }
      if (v11 != v8)
        return 0;
    }
  }
  return result;
}

uint64_t *std::unordered_map<`anonymous namespace'::BlockFormatID,std::vector<`anonymous namespace'::FormatID>>::operator[](uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL4 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  void *v36;
  _QWORD v37[2];
  char v38;

  v5 = *a2;
  v6 = a2[1];
  v7 = *((unsigned int *)a2 + 1);
  v8 = v6 + v5 + v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v2 = v6 + v5 + v7;
      if (v8 >= v9)
        v2 = v8 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (__PAIR64__(*((unsigned __int16 *)i + 9), *((unsigned __int16 *)i + 8)) == __PAIR64__(v6, v5)
            && *((_DWORD *)i + 5) == (_DWORD)v7)
          {
            return i + 3;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v2)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x30uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v15[2] = *(_QWORD *)a2;
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  v38 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = (v9 & (v9 - 1)) == 0;
    if (v9 < 3)
      v18 = 0;
    v19 = (2 * v9) | !v18;
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v9)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(void **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*v14;
          if (*v14)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v14;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_56;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_56:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_60;
        }
        v36 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_60:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
  }
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v33)
  {
    *(_QWORD *)v37[0] = *v33;
    *v33 = v37[0];
  }
  else
  {
    *(_QWORD *)v37[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v37[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v14;
    if (*(_QWORD *)v37[0])
    {
      v34 = *(_QWORD *)(*(_QWORD *)v37[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v34 >= v9)
          v34 %= v9;
      }
      else
      {
        v34 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v37[0];
    }
  }
  i = (uint64_t *)v37[0];
  v37[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  return i + 3;
}

void sub_18EF5B120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<`anonymous namespace'::BlockFormatID,std::vector<`anonymous namespace'::FormatID>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<`anonymous namespace'::BlockFormatID,std::vector<`anonymous namespace'::FormatID>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void AudioMetadataMemoryPool::create<AudioMetadataStreamFormat>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;

  v4 = (char *)operator new(0x50uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E29174B0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 9) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  v11 = v4 + 24;
  v6 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v11);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  v8 = (std::__shared_weak_count *)v6[6];
  v6[5] = (uint64_t)(v4 + 24);
  v6[6] = (uint64_t)v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18EF5B258(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataStreamFormat>(uint64_t **a1, uint64_t **a2, _QWORD *a3, char *__s)
{
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 __dst;

  v8 = strlen(__s) + 1;
  v9 = operator new[]();
  std::shared_ptr<char []>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(&__dst, v9);
  v10 = (void *)__dst;
  *a3 = __dst;
  memcpy(v10, __s, v8);
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(a1, (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &__dst);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5B348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::map<`anonymous namespace'::FormatID,std::shared_ptr<AudioMetadataStreamFormat>>::operator[](uint64_t **a1, unsigned __int16 *a2)
{
  unsigned __int16 *v4;
  uint64_t **v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;

  v5 = a1 + 1;
  v4 = (unsigned __int16 *)a1[1];
  if (!v4)
  {
    v8 = a1 + 1;
    goto LABEL_12;
  }
  v6 = *a2;
  v7 = a2[1];
  do
  {
    while (1)
    {
      v8 = v4;
      v9 = v4[16];
      if (v6 >= v9)
        break;
LABEL_6:
      v4 = (unsigned __int16 *)*v8;
      v5 = (uint64_t **)v8;
      if (!*v8)
        goto LABEL_12;
    }
    if (v6 <= v9)
    {
      v10 = *((unsigned __int16 *)v8 + 17);
      if (v7 < v10)
        goto LABEL_6;
      if (v10 >= v7)
        return (char *)(v8 + 5);
    }
    v4 = (unsigned __int16 *)v8[1];
  }
  while (v4);
  v5 = (uint64_t **)(v8 + 1);
LABEL_12:
  v11 = v8;
  v8 = operator new(0x38uLL);
  *((_DWORD *)v8 + 8) = *(_DWORD *)a2;
  v8[5] = 0;
  v8[6] = 0;
  *v8 = 0;
  v8[1] = 0;
  v8[2] = v11;
  *v5 = v8;
  v12 = (uint64_t *)**a1;
  v13 = v8;
  if (v12)
  {
    *a1 = v12;
    v13 = *v5;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (char *)(v8 + 5);
}

_QWORD *std::shared_ptr<char []>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2918080;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18EF5B498(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    MEMORY[0x193FFE43C](v1, 0x1000C8077774924);
  __cxa_rethrow();
}

void sub_18EF5B4C0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<char  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<char  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x193FFE43CLL);
  return result;
}

void std::__shared_ptr_emplace<AudioMetadataStreamFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29174B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataStreamFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29174B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<AudioMetadataTrackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTrackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void AudioMetadataMemoryPool::create<AudioMetadataChannelFormat>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;

  v4 = (char *)operator new(0x70uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E29174E8;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *((_QWORD *)v4 + 13) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  v11 = v4 + 24;
  v6 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v11);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  v8 = (std::__shared_weak_count *)v6[6];
  v6[5] = (uint64_t)(v4 + 24);
  v6[6] = (uint64_t)v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18EF5B690(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(uint64_t **a1, uint64_t **a2, _QWORD *a3, char *__s)
{
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 __dst;

  v8 = strlen(__s) + 1;
  v9 = operator new[]();
  std::shared_ptr<char []>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(&__dst, v9);
  v10 = (void *)__dst;
  *a3 = __dst;
  memcpy(v10, __s, v8);
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(a1, (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &__dst);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5B780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::create<AudioMetadataBlockFormat>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;

  v4 = (char *)operator new(0xE8uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2917440;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *a1 = v4 + 24;
  a1[1] = v4;
  v11 = v4 + 24;
  v6 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v11);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  v8 = (std::__shared_weak_count *)v6[6];
  v6[5] = (uint64_t)(v4 + 24);
  v6[6] = (uint64_t)v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18EF5B890(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(uint64_t **a1, uint64_t **a2, _QWORD *a3, char *__s)
{
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 __dst;

  v8 = strlen(__s) + 1;
  v9 = operator new[]();
  std::shared_ptr<char []>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(&__dst, v9);
  v10 = (void *)__dst;
  *a3 = __dst;
  memcpy(v10, __s, v8);
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(a1, (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &__dst);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5B980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AudioMetadataBlockFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataBlockFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917440;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<AudioMetadataChannelFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29174E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataChannelFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29174E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void AudioMetadataMemoryPool::create<AudioMetadataPackFormat>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;

  v4 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E29173D0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  v11 = v4 + 24;
  v6 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v11);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  v8 = (std::__shared_weak_count *)v6[6];
  v6[5] = (uint64_t)(v4 + 24);
  v6[6] = (uint64_t)v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18EF5BB10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(uint64_t **a1, uint64_t **a2, _QWORD *a3, char *__s)
{
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 __dst;

  v8 = strlen(__s) + 1;
  v9 = operator new[]();
  std::shared_ptr<char []>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(&__dst, v9);
  v10 = (void *)__dst;
  *a3 = __dst;
  memcpy(v10, __s, v8);
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(a1, (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &__dst);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5BC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AudioMetadataPackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29173D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataPackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29173D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<unsigned short>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t `anonymous namespace'::decode_double(_anonymous_namespace_ *this, const unsigned __int8 *a2, unint64_t *a3, unint64_t *a4, double *a5)
{
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = *a3 + 8;
  if (v5 <= (unint64_t)a2)
  {
    v6 = 0;
    v8 = (unsigned __int8 *)this + *a3;
    v9 = (((unint64_t)*v8 << 56) | ((unint64_t)v8[1] << 48) | ((unint64_t)v8[2] << 40) | ((unint64_t)v8[3] << 32) | ((unint64_t)v8[4] << 24) | ((unint64_t)v8[5] << 16) | ((unint64_t)v8[6] << 8))
       + v8[7];
    *a3 = v5;
    *a4 = v9;
  }
  else
  {
    v6 = 4294900721;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "AudioMetadataDeserializer.cpp";
      v13 = 1024;
      v14 = 224;
      _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Metadata serialized element truncated...", (uint8_t *)&v11, 0x12u);
    }
  }
  return v6;
}

uint64_t `anonymous namespace'::decode_float(_anonymous_namespace_ *this, const unsigned __int8 *a2, unint64_t *a3, unint64_t *a4, float *a5)
{
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  unsigned int v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = *a3 + 4;
  if (v5 <= (unint64_t)a2)
  {
    v6 = 0;
    v8 = bswap32(*(_DWORD *)((char *)this + *a3));
    *a3 = v5;
    *(_DWORD *)a4 = v8;
  }
  else
  {
    v6 = 4294900721;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "AudioMetadataDeserializer.cpp";
      v12 = 1024;
      v13 = 310;
      _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Metadata serialized element truncated...", (uint8_t *)&v10, 0x12u);
    }
  }
  return v6;
}

uint64_t `anonymous namespace'::decode_string(_anonymous_namespace_ *a1, const unsigned __int8 *a2, uint64_t *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  _BYTE buf[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  if ((_DWORD)v9)
  {
    v10 = v9;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 375;
      v12 = "%25s:%-5d ...at string length";
LABEL_7:
      _os_log_impl(&dword_18EE07000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
      return v10;
    }
    return v10;
  }
  v13 = *a3;
  v14 = v22;
  if (v22 + *a3 <= (unint64_t)a2)
  {
    if (v22 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v22 >= 0x17)
    {
      v16 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v16 = v22 | 7;
      v17 = v16 + 1;
      v15 = operator new(v16 + 1);
      *(_QWORD *)&buf[8] = v14;
      *(_QWORD *)&buf[16] = v17 | 0x8000000000000000;
      *(_QWORD *)buf = v15;
    }
    else
    {
      buf[23] = v22;
      v15 = buf;
      if (!v22)
      {
LABEL_17:
        *v15 = 0;
        if (*(char *)(a4 + 23) < 0)
          operator delete(*(void **)a4);
        v10 = 0;
        *(_OWORD *)a4 = *(_OWORD *)buf;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)&buf[16];
        *a3 += v14;
        return v10;
      }
    }
    v18 = (char *)a1 + v13;
    v19 = v14;
    do
    {
      v20 = *v18++;
      *v15++ = v20;
      --v19;
    }
    while (v19);
    goto LABEL_17;
  }
  v10 = 4294900721;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioMetadataDeserializer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 379;
    v12 = "%25s:%-5d Metadata serialized element truncated at string content";
    goto LABEL_7;
  }
  return v10;
}

uint64_t `anonymous namespace'::decode_coordinates(_anonymous_namespace_ *a1, const unsigned __int8 *a2, unint64_t *a3, uint64_t a4, float *a5)
{
  char v5;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  float *v16;
  int v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v5 = (char)a5;
  v24 = *MEMORY[0x1E0C80C00];
  LODWORD(v20) = 0;
  if ((_DWORD)v10)
  {
    v12 = v10;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HIDWORD(v20) = 136315394;
      v21 = "AudioMetadataDeserializer.cpp";
      v22 = 1024;
      v23 = 189;
      v14 = "%25s:%-5d ...at position x/azimuth";
LABEL_10:
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v20 + 4, 0x12u);
    }
  }
  else
  {
    HIDWORD(v19) = 0;
    if ((_DWORD)v15)
    {
      v12 = v15;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HIDWORD(v20) = 136315394;
        v21 = "AudioMetadataDeserializer.cpp";
        v22 = 1024;
        v23 = 195;
        v14 = "%25s:%-5d ...at position y/elevation";
        goto LABEL_10;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!(_DWORD)v12)
      {
        *(_BYTE *)(a4 + 12) = v5;
        v18 = HIDWORD(v19);
        *(_DWORD *)a4 = v20;
        *(_DWORD *)(a4 + 4) = v18;
        *(_DWORD *)(a4 + 8) = v19;
        return v12;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HIDWORD(v20) = 136315394;
        v21 = "AudioMetadataDeserializer.cpp";
        v22 = 1024;
        v23 = 201;
        v14 = "%25s:%-5d ...at position z/distance";
        goto LABEL_10;
      }
    }
  }
  return v12;
}

char *std::unordered_map<`anonymous namespace'::BlockFormatID,`anonymous namespace'::FormatID>::operator[](float *a1, unsigned __int16 *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL4 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v35;

  v5 = *a2;
  v6 = a2[1];
  v7 = *((unsigned int *)a2 + 1);
  v8 = v6 + v5 + v7;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v2 = v6 + v5 + v7;
      if (v8 >= v9)
        v2 = v8 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v2);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (__PAIR64__(*((unsigned __int16 *)v12 + 9), *((unsigned __int16 *)v12 + 8)) == __PAIR64__(v6, v5)
              && *((_DWORD *)v12 + 5) == (_DWORD)v7)
            {
              return (char *)(v12 + 3);
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v2)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *(_QWORD *)a2;
  *((_DWORD *)v12 + 6) = 0;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = (v9 & (v9 - 1)) == 0;
    if (v9 < 3)
      v16 = 0;
    v17 = (2 * v9) | !v16;
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v9)
    {
      v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v23)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_56;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_56:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_60;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_60:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
  }
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v32)
  {
    *v12 = *v32;
LABEL_73:
    *v32 = v12;
    goto LABEL_74;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v31[v2] = a1 + 4;
  if (*v12)
  {
    v33 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_73;
  }
LABEL_74:
  ++*((_QWORD *)a1 + 3);
  return (char *)(v12 + 3);
}

void sub_18EF5C680(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::decode_jump_position(_anonymous_namespace_ *a1, const unsigned __int8 *a2, unint64_t *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v9;
  float *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  char v14;
  _BYTE v16[13];
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v16[0] = 0;
  if ((_DWORD)v9)
  {
    v11 = v9;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)&v16[1] = 136315394;
      *(_QWORD *)&v16[5] = "AudioMetadataDeserializer.cpp";
      v17 = 1024;
      v18 = 355;
      v13 = "%25s:%-5d ...at jump position flags";
LABEL_4:
      _os_log_impl(&dword_18EE07000, v12, OS_LOG_TYPE_ERROR, v13, &v16[1], 0x12u);
    }
  }
  else
  {
    v14 = v16[0];
    *(_BYTE *)(a4 + 4) = v16[0] >> 7;
    if ((v14 & 0x40) == 0)
      return 0;
    if ((_DWORD)v11)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)&v16[1] = 136315394;
        *(_QWORD *)&v16[5] = "AudioMetadataDeserializer.cpp";
        v17 = 1024;
        v18 = 363;
        v13 = "%25s:%-5d ...at jump position interpolation length";
        goto LABEL_4;
      }
    }
  }
  return v11;
}

void AudioMetadataMemoryPool::create<AudioMetadataMatrixCoefficient>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;

  v4 = (char *)operator new(0x48uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2917558;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *a1 = v4 + 24;
  a1[1] = v4;
  v11 = v4 + 24;
  v6 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v11);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  v8 = (std::__shared_weak_count *)v6[6];
  v6[5] = (uint64_t)(v4 + 24);
  v6[6] = (uint64_t)v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18EF5C8D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::vector<`anonymous namespace'::FormatID>::push_back[abi:ne180100](void **a1, _DWORD *a2)
{
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((char *)v5 - (_BYTE *)*a1) >> 2;
    if ((unint64_t)(v7 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 1;
    if (v8 >> 1 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
    else
      v11 = 0;
    v12 = (_DWORD *)(v10 + 4 * v7);
    v13 = v10 + 4 * v11;
    *v12 = *a2;
    v6 = v12 + 1;
    v15 = (char *)*a1;
    v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        v16 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *--v12 = v16;
      }
      while (v14 != v15);
      v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataMatrixCoefficient,AudioMetadataMatrix,AudioMetadataBlockFormat>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)(a3 + 4) = v16;
  *(_DWORD *)a3 = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a3 + 4) + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5CABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::create<AudioMetadataZone>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;

  v4 = (char *)operator new(0x40uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2917280;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *((_DWORD *)v4 + 14) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  v11 = v4 + 24;
  v6 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v11);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  v8 = (std::__shared_weak_count *)v6[6];
  v6[5] = (uint64_t)(v4 + 24);
  v6[6] = (uint64_t)v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18EF5CBA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataZone,AudioMetadataZoneExclusions,AudioMetadataBlockFormat>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;

  v8 = a4[1] - *a4;
  v9 = operator new[]();
  std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(&v16, v9);
  *(_QWORD *)a3 = v16;
  *(_DWORD *)(a3 + 8) = v8 >> 3;
  if ((v8 >> 3))
  {
    v10 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)a3 + v10) = *(_QWORD *)(*a4 + v10);
      v10 += 8;
    }
    while ((v8 & 0x7FFFFFFF8) != v10);
  }
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5CCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<`anonymous namespace'::BlockFormatID>::push_back[abi:ne180100](char **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v5 = a2;
    v6 = v5 + 8;
  }
  a1[1] = v6;
}

char *std::map<`anonymous namespace'::BlockFormatID,std::shared_ptr<AudioMetadataBlockFormat>>::operator[](uint64_t **a1, unsigned __int16 *a2)
{
  unsigned __int16 *v4;
  uint64_t **v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = a1 + 1;
  v4 = (unsigned __int16 *)a1[1];
  if (!v4)
  {
    v9 = a1 + 1;
    goto LABEL_15;
  }
  v6 = *a2;
  v7 = a2[1];
  v8 = *((_DWORD *)a2 + 1);
  do
  {
    while (1)
    {
      v9 = v4;
      v10 = v4[16];
      if (v6 >= v10)
      {
        if (v6 > v10)
          goto LABEL_5;
        v11 = *((unsigned __int16 *)v9 + 17);
        if (v7 >= v11)
          break;
      }
LABEL_10:
      v4 = (unsigned __int16 *)*v9;
      v5 = (uint64_t **)v9;
      if (!*v9)
        goto LABEL_15;
    }
    if (v7 <= v11)
    {
      v12 = *((_DWORD *)v9 + 9);
      if (v8 < v12)
        goto LABEL_10;
      if (v12 >= v8)
        return (char *)(v9 + 5);
    }
LABEL_5:
    v4 = (unsigned __int16 *)v9[1];
  }
  while (v4);
  v5 = (uint64_t **)(v9 + 1);
LABEL_15:
  v13 = v9;
  v9 = operator new(0x38uLL);
  v14 = *(_QWORD *)a2;
  v9[5] = 0;
  v9[6] = 0;
  v9[4] = v14;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = v13;
  *v5 = v9;
  v15 = (uint64_t *)**a1;
  v16 = v9;
  if (v15)
  {
    *a1 = v15;
    v16 = *v5;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (char *)(v9 + 5);
}

void std::__shared_ptr_emplace<AudioMetadataZone>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataZone>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917280;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<AudioMetadataMatrixCoefficient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataMatrixCoefficient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t `anonymous namespace'::decode_format_refs(_anonymous_namespace_ *a1, const unsigned __int8 *a2, unint64_t *a3, char **a4, unsigned __int8 *a5)
{
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  NSObject *v33;
  _BYTE v35[12];
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v35[4] = 0;
  if ((_DWORD)v9)
  {
    v11 = v9;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v37 = "AudioMetadataDeserializer.cpp";
      v38 = 1024;
      v39 = 329;
      v13 = "%25s:%-5d ...at format refs count";
      v14 = v12;
      v15 = 18;
LABEL_31:
      _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);
    }
  }
  else
  {
    a4[1] = *a4;
    v16 = *(_DWORD *)&v35[4];
    if (*(_QWORD *)&v35[4])
    {
      v17 = 0;
      while (1)
      {
        if ((_DWORD)v18)
        {
          v11 = v18;
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            return v11;
          *(_DWORD *)buf = 136315906;
          v37 = "AudioMetadataDeserializer.cpp";
          v38 = 1024;
          v39 = 337;
          v40 = 1024;
          v41 = v17 + 1;
          v42 = 1024;
          v43 = v16;
          v13 = "%25s:%-5d ...at format ref #%d of %d, major";
          goto LABEL_30;
        }
        if ((_DWORD)v20)
          break;
        v22 = a4[1];
        v21 = (unint64_t)a4[2];
        if ((unint64_t)v22 >= v21)
        {
          v24 = (v22 - *a4) >> 2;
          if ((unint64_t)(v24 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v25 = v21 - (_QWORD)*a4;
          v26 = v25 >> 1;
          if (v25 >> 1 <= (unint64_t)(v24 + 1))
            v26 = v24 + 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
            v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v27);
          else
            v28 = 0;
          v29 = (char *)(v27 + 4 * v24);
          *(_DWORD *)v29 = *(_DWORD *)v35;
          v23 = v29 + 4;
          v31 = *a4;
          v30 = a4[1];
          if (v30 != *a4)
          {
            do
            {
              v32 = *((_DWORD *)v30 - 1);
              v30 -= 4;
              *((_DWORD *)v29 - 1) = v32;
              v29 -= 4;
            }
            while (v30 != v31);
            v30 = *a4;
          }
          *a4 = v29;
          a4[1] = v23;
          a4[2] = (char *)(v27 + 4 * v28);
          if (v30)
            operator delete(v30);
        }
        else
        {
          *(_DWORD *)v22 = *(_DWORD *)v35;
          v23 = v22 + 4;
        }
        a4[1] = v23;
        ++v17;
        v16 = *(_DWORD *)&v35[4];
        if (v17 >= *(_QWORD *)&v35[4])
          return 0;
      }
      v11 = v20;
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        return v11;
      *(_DWORD *)buf = 136315906;
      v37 = "AudioMetadataDeserializer.cpp";
      v38 = 1024;
      v39 = 342;
      v40 = 1024;
      v41 = v17 + 1;
      v42 = 1024;
      v43 = v16;
      v13 = "%25s:%-5d ...at format ref #%d of %d, minor";
LABEL_30:
      v14 = v33;
      v15 = 30;
      goto LABEL_31;
    }
    return 0;
  }
  return v11;
}

char *std::unordered_map<`anonymous namespace'::FormatID,`anonymous namespace'::FormatID>::operator[](float *a1, unsigned __int16 *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v14;
  float v15;
  _BOOL4 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v35;

  v5 = *a2;
  v6 = a2[1];
  v7 = v6 + v5;
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = v6 + v5;
      if (v7 >= v8)
        v2 = v7 % v8;
    }
    else
    {
      v2 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)v11 + 8) == (_DWORD)v5 && *((unsigned __int16 *)v11 + 9) == (_DWORD)v6)
              return (char *)v11 + 20;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = *(_DWORD *)a2;
  *((_DWORD *)v11 + 5) = 0;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = (v8 & (v8 - 1)) == 0;
    if (v8 < 3)
      v16 = 0;
    v17 = (2 * v8) | !v16;
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v8)
    {
      v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v23)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_59;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_59:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_63;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v8 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v32)
  {
    *v11 = *v32;
LABEL_76:
    *v32 = v11;
    goto LABEL_77;
  }
  *v11 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v11;
  v31[v2] = a1 + 4;
  if (*v11)
  {
    v33 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8)
        v33 %= v8;
    }
    else
    {
      v33 &= v8 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_76;
  }
LABEL_77:
  ++*((_QWORD *)a1 + 3);
  return (char *)v11 + 20;
}

void sub_18EF5D618(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::create<AudioMetadataTrackUID>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;

  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2917360;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 68) = 0u;
  *a1 = v4 + 24;
  a1[1] = v4;
  v11 = v4 + 24;
  v6 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v11);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  v8 = (std::__shared_weak_count *)v6[6];
  v6[5] = (uint64_t)(v4 + 24);
  v6[6] = (uint64_t)v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18EF5D704(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataTrackUID>(uint64_t **a1, uint64_t **a2, _QWORD *a3, char *__s)
{
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 __dst;

  v8 = strlen(__s) + 1;
  v9 = operator new[]();
  std::shared_ptr<char []>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(&__dst, v9);
  v10 = (void *)__dst;
  *a3 = __dst;
  memcpy(v10, __s, v8);
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(a1, (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &__dst);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5D7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::unordered_map<`anonymous namespace'::FormatID,`anonymous namespace'::TrackFormatID>::operator[](float *a1, unsigned __int16 *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v14;
  float v15;
  _BOOL4 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v35;

  v5 = *a2;
  v6 = a2[1];
  v7 = v6 + v5;
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = v6 + v5;
      if (v7 >= v8)
        v2 = v7 % v8;
    }
    else
    {
      v2 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)v11 + 8) == (_DWORD)v5 && *((unsigned __int16 *)v11 + 9) == (_DWORD)v6)
              return (char *)v11 + 20;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = *(_DWORD *)a2;
  *((_DWORD *)v11 + 5) = 0;
  *((_WORD *)v11 + 12) = 0;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = (v8 & (v8 - 1)) == 0;
    if (v8 < 3)
      v16 = 0;
    v17 = (2 * v8) | !v16;
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v8)
    {
      v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v23)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_59;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_59:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_63;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v8 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v32)
  {
    *v11 = *v32;
LABEL_76:
    *v32 = v11;
    goto LABEL_77;
  }
  *v11 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v11;
  v31[v2] = a1 + 4;
  if (*v11)
  {
    v33 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8)
        v33 %= v8;
    }
    else
    {
      v33 &= v8 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_76;
  }
LABEL_77:
  ++*((_QWORD *)a1 + 3);
  return (char *)v11 + 20;
}

void sub_18EF5DBF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AudioMetadataTrackUID>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTrackUID>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void AudioMetadataMemoryPool::create<AudioMetadataObject>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;

  v4 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)v4 = &off_1E29172B8;
  *(_OWORD *)(v4 + 24) = 0u;
  *((_QWORD *)v4 + 2) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *a1 = v4 + 24;
  a1[1] = v4;
  v11 = v4 + 24;
  v6 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v11);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  v8 = (std::__shared_weak_count *)v6[6];
  v6[5] = (uint64_t)(v4 + 24);
  v6[6] = (uint64_t)v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18EF5DD50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataObject>(uint64_t **a1, uint64_t **a2, _QWORD *a3, char *__s)
{
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 __dst;

  v8 = strlen(__s) + 1;
  v9 = operator new[]();
  std::shared_ptr<char []>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(&__dst, v9);
  v10 = (void *)__dst;
  *a3 = __dst;
  memcpy(v10, __s, v8);
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(a1, (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &__dst);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5DE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::decode_content_refs(_anonymous_namespace_ *a1, const unsigned __int8 *a2, unint64_t *a3, _QWORD *a4, unsigned __int8 *a5)
{
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _WORD *v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  _WORD *v29;
  __int16 v30;
  NSObject *v32;
  _BYTE v33[10];
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v33[2] = 0;
  if ((_DWORD)v9)
  {
    v11 = v9;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v35 = "AudioMetadataDeserializer.cpp";
      v36 = 1024;
      v37 = 168;
      v13 = "%25s:%-5d ...at content refs count";
      v14 = v12;
      v15 = 18;
LABEL_4:
      _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);
    }
  }
  else
  {
    a4[1] = *a4;
    v16 = *(_QWORD *)&v33[2];
    if (!*(_QWORD *)&v33[2])
      return 0;
    v17 = 0;
    while (1)
    {
      *(_WORD *)v33 = 0;
      if ((_DWORD)v18)
        break;
      v20 = (_WORD *)a4[1];
      v19 = a4[2];
      if ((unint64_t)v20 >= v19)
      {
        v21 = (_WORD *)*a4;
        v22 = (uint64_t)v20 - *a4;
        if (v22 <= -3)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v23 = v22 >> 1;
        v24 = v19 - (_QWORD)v21;
        if (v24 <= (v22 >> 1) + 1)
          v25 = v23 + 1;
        else
          v25 = v24;
        if (v24 >= 0x7FFFFFFFFFFFFFFELL)
          v26 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v26 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v26);
          v21 = (_WORD *)*a4;
          v20 = (_WORD *)a4[1];
        }
        else
        {
          v27 = 0;
        }
        v28 = (_WORD *)(v26 + 2 * v23);
        *v28 = *(_WORD *)v33;
        v29 = v28 + 1;
        while (v20 != v21)
        {
          v30 = *--v20;
          *--v28 = v30;
        }
        *a4 = v28;
        a4[1] = v29;
        a4[2] = v26 + 2 * v27;
        if (v21)
          operator delete(v21);
        a4[1] = v29;
      }
      else
      {
        *v20 = *(_WORD *)v33;
        a4[1] = v20 + 1;
      }
      if (++v17 == v16)
        return 0;
    }
    v11 = v18;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v35 = "AudioMetadataDeserializer.cpp";
      v36 = 1024;
      v37 = 176;
      v38 = 1024;
      v39 = v17 + 1;
      v40 = 1024;
      v41 = v16;
      v13 = "%25s:%-5d ...at content ref #%d of %d";
      v14 = v32;
      v15 = 30;
      goto LABEL_4;
    }
  }
  return v11;
}

_QWORD *std::__tree<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataObject>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::shared_ptr<AudioMetadataObject>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::shared_ptr<AudioMetadataObject>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 a2, _WORD *a3)
{
  unsigned __int16 *v5;
  uint64_t **v6;
  _QWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (unsigned __int16 *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = v5[16];
        if (v8 <= a2)
          break;
        v5 = (unsigned __int16 *)*v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (unsigned __int16 *)v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = v7;
    v7 = operator new(0x38uLL);
    *((_WORD *)v7 + 16) = *a3;
    v7[5] = 0;
    v7[6] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = v7;
    v10 = (uint64_t *)**a1;
    v11 = v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__shared_ptr_emplace<AudioMetadataObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29172B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29172B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void AudioMetadataMemoryPool::create<AudioMetadataContent>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;

  v4 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2917328;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *((_DWORD *)v4 + 38) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  v11 = v4 + 24;
  v6 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v11);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  v8 = (std::__shared_weak_count *)v6[6];
  v6[5] = (uint64_t)(v4 + 24);
  v6[6] = (uint64_t)v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18EF5E2B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataContent>(uint64_t **a1, uint64_t **a2, _QWORD *a3, char *__s)
{
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 __dst;

  v8 = strlen(__s) + 1;
  v9 = operator new[]();
  std::shared_ptr<char []>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(&__dst, v9);
  v10 = (void *)__dst;
  *a3 = __dst;
  memcpy(v10, __s, v8);
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(a1, (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &__dst);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5E3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AudioMetadataContent>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataContent>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void AudioMetadataMemoryPool::create<AudioMetadataProgramme>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;

  v4 = (char *)operator new(0xF0uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)v4 = &off_1E2917398;
  *(_OWORD *)(v4 + 24) = 0u;
  *((_QWORD *)v4 + 2) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_QWORD *)v4 + 29) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  v11 = v4 + 24;
  v6 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v11);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  v8 = (std::__shared_weak_count *)v6[6];
  v6[5] = (uint64_t)(v4 + 24);
  v6[6] = (uint64_t)v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18EF5E500(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(uint64_t **a1, uint64_t **a2, _QWORD *a3, char *__s)
{
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 __dst;

  v8 = strlen(__s) + 1;
  v9 = operator new[]();
  std::shared_ptr<char []>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>(&__dst, v9);
  v10 = (void *)__dst;
  *a3 = __dst;
  memcpy(v10, __s, v8);
  v15 = *a2;
  v11 = std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(a1, (unint64_t)v15, &v15);
  std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((char **)v11 + 5, &__dst);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EF5E5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AudioMetadataProgramme>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataProgramme>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

BOOL AUv3InstanceBase::CanDo(AUv3InstanceBase *this, unsigned int a2)
{
  _BOOL8 result;
  int v4;
  unsigned __int16 v5;

  if (a2 <= 0x15)
  {
    result = 1;
    if (((1 << a2) & 0x37CEFE) != 0)
      return result;
  }
  if (a2 - 257 >= 2)
  {
    if (a2 - 513 <= 1)
      return *((_DWORD *)this + 12) == 1635086197;
    return 0;
  }
  v4 = *((_DWORD *)this + 12);
  result = 1;
  if (v4 > 1635086952)
  {
    if (v4 == 1635086953)
      return result;
    v5 = 29293;
  }
  else
  {
    if (v4 == 1635085673)
      return result;
    v5 = 28021;
  }
  if (v4 != (v5 | 0x61750000))
    return 0;
  return result;
}

uint64_t AUv3InstanceBase::Close(AUv3InstanceBase *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  (*(void (**)(AUv3InstanceBase *))(*(_QWORD *)this + 64))(this);
  v2 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;

  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 22) = 0;

  }
  v4 = (void *)*((_QWORD *)this + 23);
  if (v4)
  {
    *((_QWORD *)this + 23) = 0;

  }
  v5 = (void *)*((_QWORD *)this + 24);
  if (v5)
  {
    *((_QWORD *)this + 24) = 0;

  }
  AUv3InstanceBase::ParameterMap::setAudioUnit((AUv3InstanceBase *)((char *)this + 200), 0, 0);
  v6 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;

  return 0;
}

uint64_t AUv3InstanceBase::Initialize(AUv3InstanceBase *this)
{
  AUv3InstanceBase *v2;

  v2 = this;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Initialize(void)::{lambda(void)#1}>, (uint64_t)&v2);
}

uint64_t AUv3InstanceBase::Uninitialize(AUv3InstanceBase *this)
{
  AUv3InstanceBase *v2;

  v2 = this;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Uninitialize(void)::{lambda(void)#1}>, (uint64_t)&v2);
}

uint64_t AUv3InstanceBase::Reset(AUv3InstanceBase *this, int a2, int a3)
{
  _QWORD v4[3];
  int v5;
  int v6;

  v5 = a3;
  v6 = a2;
  v4[0] = &v6;
  v4[1] = &v5;
  v4[2] = this;
  return AUv3InstanceBase::NSExceptionBarrier(caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Reset(unsigned int,unsigned int)::{lambda(void)#1}>, (uint64_t)v4);
}

uint64_t AUv3InstanceBase::GetPropertyInfo(AUv3InstanceBase *this, int a2, int a3, int a4, unsigned int *a5, unsigned __int8 *a6)
{
  _QWORD v7[6];
  int v8;
  int v9;
  int v10;

  v9 = a3;
  v10 = a2;
  v8 = a4;
  v7[0] = this;
  v7[1] = &v10;
  v7[2] = &v9;
  v7[3] = &v8;
  v7[4] = a5;
  v7[5] = a6;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::GetPropertyInfo(unsigned int,unsigned int,unsigned int,unsigned int &,unsigned char &)::{lambda(void)#1}>, (uint64_t)v7);
}

uint64_t AUv3InstanceBase::GetProperty(AUv3InstanceBase *this, int a2, int a3, int a4, void *a5, unsigned int *a6)
{
  _QWORD v7[6];
  void *v8;
  int v9;
  int v10;
  int v11;

  v10 = a3;
  v11 = a2;
  v9 = a4;
  v8 = a5;
  v7[0] = this;
  v7[1] = &v11;
  v7[2] = &v10;
  v7[3] = &v9;
  v7[4] = &v8;
  v7[5] = a6;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::GetProperty(unsigned int,unsigned int,unsigned int,void *,unsigned int &)::{lambda(void)#1}>, (uint64_t)v7);
}

uint64_t AUv3InstanceBase::SetProperty(AUv3InstanceBase *this, int a2, int a3, int a4, const void *a5, int a6)
{
  _QWORD v7[6];
  int v8;
  const void *v9;
  int v10;
  int v11;
  int v12;

  v11 = a3;
  v12 = a2;
  v10 = a4;
  v9 = a5;
  v8 = a6;
  v7[0] = this;
  v7[1] = &v12;
  v7[2] = &v11;
  v7[3] = &v10;
  v7[4] = &v9;
  v7[5] = &v8;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::SetProperty(unsigned int,unsigned int,unsigned int,void const*,unsigned int)::{lambda(void)#1}>, (uint64_t)v7);
}

uint64_t AUv3InstanceBase::AddPropertyListener(AUv3InstanceBase *this, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4)
{
  _QWORD v5[4];
  void *v6;
  void (*v7)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int);
  int v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v5[0] = &v8;
  v5[1] = this;
  v5[2] = &v7;
  v5[3] = &v6;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::AddPropertyListener(unsigned int,void (*)(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int),void *)::$_0>, (uint64_t)v5);
}

uint64_t AUv3InstanceBase::RemovePropertyListener(AUv3InstanceBase *this, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4, char a5)
{
  _QWORD v6[5];
  char v7;
  void *v8;
  void (*v9)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int);
  int v10;

  v10 = a2;
  v8 = a4;
  v9 = a3;
  v7 = a5;
  v6[0] = this;
  v6[1] = &v10;
  v6[2] = &v9;
  v6[3] = &v7;
  v6[4] = &v8;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::RemovePropertyListener(unsigned int,void (*)(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int),void *,BOOL)::$_0>, (uint64_t)v6);
}

uint64_t AUv3InstanceBase::AddRenderNotify(id *this, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a3)
{
  objc_msgSend(this[9], "addRenderObserver:userData:", a2, a3);
  return 0;
}

uint64_t AUv3InstanceBase::RemoveRenderNotify(id *this, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a3)
{
  objc_msgSend(this[9], "removeRenderObserver:userData:", a2, a3);
  return 0;
}

uint64_t AUv3InstanceBase::GetParameter(AUv3InstanceBase *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v11;
  _QWORD v12[3];
  void *v13;

  AUv3InstanceBase::ParameterMap::findParameterByScopeElementID((AUv3InstanceBase *)((char *)this + 200), a3, a4, a2);
  v7 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v7;
  if (!v7)
    return 4294956418;
  if (*((_BYTE *)this + 80)
    || (v8 = (void *)v7, objc_msgSend(*((id *)this + 9), "isLocalCachingDisabled")))
  {
    v12[0] = &v13;
    v12[1] = this;
    v12[2] = a5;
    v9 = AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::GetParameter(unsigned int,unsigned int,unsigned int,float &)::$_0>, (uint64_t)v12);
    v8 = v13;
  }
  else
  {
    objc_msgSend(v8, "value");
    v9 = 0;
    *(_DWORD *)a5 = v11;
  }

  return v9;
}

void sub_18EF5EB18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AUv3InstanceBase::SetParameter(AUv3InstanceBase *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5, int a6)
{
  void *v8;
  double v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[4];
  void *v14;
  int v15;
  float v16;

  v16 = a5;
  v15 = a6;
  AUv3InstanceBase::ParameterMap::findParameterByScopeElementID((AUv3InstanceBase *)((char *)this + 200), a3, a4, a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v8;
  v14 = v8;
  if (v8)
  {
    if (*((_BYTE *)this + 80))
    {
      v13[0] = &v14;
      v13[1] = this;
      v13[2] = &v16;
      v13[3] = &v15;
      v11 = AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::$_0>, (uint64_t)v13);
      v10 = v14;
    }
    else
    {
      *(float *)&v9 = a5;
      objc_msgSend(v8, "setValue:originator:", 10, v9);
      v11 = 0;
    }
  }
  else
  {
    v11 = 4294956418;
  }

  return v11;
}

void sub_18EF5EBF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AUv3InstanceBase::Render(AUv3InstanceBase *this, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, uint64_t a5, AudioBufferList *a6)
{
  uint64_t v7;
  _QWORD v9[5];

  v7 = *((_QWORD *)this + 21);
  if (!v7)
    return 4294967292;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN17AUv3RenderAdapter6RenderERjRK14AudioTimeStampjjR15AudioBufferList_block_invoke;
  v9[3] = &__block_descriptor_40_e106_i44__0_I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16I24q28__AudioBufferList_I_1_AudioBuffer_II_v___36l;
  v9[4] = (char *)this + 136;
  return (*(uint64_t (**)(uint64_t, unsigned int *, const AudioTimeStamp *, uint64_t, _QWORD, AudioBufferList *, _QWORD *))(v7 + 16))(v7, a2, a3, a5, a4, a6, v9);
}

uint64_t AUv3InstanceBase::Process(AUv3InstanceBase *this, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, unsigned int a5, const AudioBufferList **a6, unsigned int a7, AudioBufferList **a8)
{
  return 4294967292;
}

uint64_t AUv3InstanceBase::ScheduleParameters(AUv3InstanceBase *this, const AudioUnitParameterEvent *a2, int a3)
{
  _QWORD v4[3];
  int v5;
  const AudioUnitParameterEvent *v6;

  v6 = a2;
  v5 = a3;
  v4[0] = &v6;
  v4[1] = &v5;
  v4[2] = this;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::ScheduleParameters(AudioUnitParameterEvent const*,unsigned int)::$_0>, (uint64_t)v4);
}

uint64_t AUv3InstanceBase::Start(AUv3InstanceBase *this)
{
  AUv3InstanceBase *v2;

  v2 = this;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Start(void)::{lambda(void)#1}>, (uint64_t)&v2);
}

uint64_t AUv3InstanceBase::Stop(AUv3InstanceBase *this)
{
  AUv3InstanceBase *v2;

  v2 = this;
  return AUv3InstanceBase::NSExceptionBarrier((uint64_t (*)(uint64_t *))caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Stop(void)::{lambda(void)#1}>, (uint64_t)&v2);
}

uint64_t AUv3InstanceBase::MIDIEvent(AUv3InstanceBase *this, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4)
{
  unsigned __int8 v6[3];
  uint64_t v7;

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  NextMIDIEvent(v6, (const unsigned __int8 *)&v7);
  (*(void (**)(void))(*((_QWORD *)this + 23) + 16))();
  return 0;
}

uint64_t AUv3InstanceBase::MIDISysEx(AUv3InstanceBase *this, const unsigned __int8 *a2)
{
  (*(void (**)(void))(*((_QWORD *)this + 23) + 16))();
  return 0;
}

uint64_t AUv3InstanceBase::MIDIEventList(AUv3InstanceBase *this, unsigned int a2, const MIDIEventList *a3)
{
  return (*(uint64_t (**)(void))(*((_QWORD *)this + 24) + 16))();
}

uint64_t AUv3InstanceBase::isRemoteV2(AUv3InstanceBase *this)
{
  return 0;
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Stop(void)::{lambda(void)#1}>(uint64_t a1)
{
  objc_msgSend(*(id *)(**(_QWORD **)a1 + 72), "stopHardware");
  return 0;
}

uint64_t AUv3InstanceBase::NSExceptionBarrier(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return a1(&v3);
}

void sub_18EF5EE3C(void *a1)
{
  objc_begin_catch(a1);
  objc_end_catch();
  JUMPOUT(0x18EF5EE2CLL);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Start(void)::{lambda(void)#1}>(uint64_t a1)
{
  void *v1;
  char v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v7;

  v1 = *(void **)(**(_QWORD **)a1 + 72);
  v7 = 0;
  v2 = objc_msgSend(v1, "startHardwareAndReturnError:", &v7);
  v3 = v7;
  v4 = v3;
  if ((v2 & 1) != 0)
    v5 = 0;
  else
    v5 = objc_msgSend(v3, "code");

  return v5;
}

void sub_18EF5EED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::ScheduleParameters(AudioUnitParameterEvent const*,unsigned int)::$_0>(uint64_t *a1, __n128 a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *a1;
  if (**(_DWORD **)(*a1 + 8))
  {
    v3 = 0;
    v4 = *(_QWORD *)(v2 + 16);
    v5 = **(_QWORD **)v2 + 16;
    do
    {
      v6 = *(_DWORD *)(v5 - 4);
      if (v6 == 100)
      {
        a2.n128_u32[0] = 1321042525;
        (*(void (**)(__n128))(*(_QWORD *)(v4 + 176) + 16))(a2);
      }
      else
      {
        if (v6 == 1)
        {
          a2.n128_u32[0] = *(_DWORD *)(v5 + 4);
        }
        else
        {
          (*(void (**)(float))(*(_QWORD *)(v4 + 176) + 16))(*(float *)(v5 + 8));
          a2.n128_u32[0] = *(_DWORD *)(v5 + 12);
        }
        (*(void (**)(__n128))(*(_QWORD *)(v4 + 176) + 16))(a2);
      }
      ++v3;
      v5 += 32;
    }
    while (v3 < **(_DWORD **)(v2 + 8));
  }
  return 0;
}

id AUv3InstanceBase::ParameterMap::findParameterByScopeElementID(AUv3InstanceBase::ParameterMap *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  id *v8;
  id *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  _BOOL4 v13;
  unsigned int v14;
  BOOL v15;
  id *v16;
  id WeakRetained;
  _OWORD v19[2];
  uint64_t v20;

  AUv3InstanceBase::ParameterMap::checkCacheParameters((uint64_t)this);
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  v8 = (id *)*((_QWORD *)this + 3);
  v9 = (id *)*((_QWORD *)this + 4);
  if (v9 != v8)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 4);
    do
    {
      v11 = v10 >> 1;
      v12 = (unsigned int *)&v8[6 * (v10 >> 1)];
      v13 = *v12 < a2;
      if (*v12 == a2)
      {
        v14 = HIDWORD(v8[6 * v11]);
        v15 = v14 == a3;
        v13 = v14 < a3;
        if (v15)
          v13 = LODWORD(v8[6 * v11 + 1]) < a4;
      }
      v16 = (id *)(v12 + 12);
      v10 += ~v11;
      if (v13)
        v8 = v16;
      else
        v10 = v11;
    }
    while (v10);
  }
  if (v8 != v9 && *(_DWORD *)v8 == a2 && *((_DWORD *)v8 + 1) == a3 && *((_DWORD *)v8 + 2) == a4)
    WeakRetained = objc_loadWeakRetained(v8 + 2);
  else
    WeakRetained = 0;
  objc_destroyWeak((id *)v19 + 1);
  return WeakRetained;
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::SetParameter(unsigned int,unsigned int,unsigned int,float,unsigned int)::$_0>(_QWORD ***a1)
{
  _QWORD **v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;

  v1 = *a1;
  v2 = (*a1)[1];
  v3 = AUv3InstanceBase::sAUParameter_address(***a1, AUv3InstanceBase::sSel_address);
  v4 = (unsigned int *)(v2 + 47);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = v5 + 1;
  if (v5 == -1)
  {
    do
    {
      v7 = __ldaxr(v4);
      v6 = v7 + 1;
    }
    while (__stlxr(v6, v4));
  }
  ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, float))v2[48])(v2[9], AUv3InstanceBase::sSel_SetV2Parameter, v3, *(unsigned int *)v1[3], v6, *(float *)v1[2]);
  return 0;
}

uint64_t AUv3InstanceBase::ParameterMap::checkCacheParameters(uint64_t this)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  unsigned __int8 v4;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  id v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD v33[4];
  _QWORD v34[4];
  unsigned __int8 *v35[5];
  id v36;
  int v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _OWORD v41[2];
  int v42;
  BOOL v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void **v48[18];

  v48[16] = *(void ***)MEMORY[0x1E0C80C00];
  v1 = (unsigned __int8 *)(this + 16);
  v2 = atomic_load((unsigned __int8 *)(this + 16));
  if ((v2 & 1) == 0)
  {
    v3 = this;
    os_unfair_recursive_lock_lock_with_options();
    v4 = atomic_load(v1);
    if ((v4 & 1) == 0)
    {
      WeakRetained = objc_loadWeakRetained((id *)v3);
      objc_msgSend(WeakRetained, "parameterTree");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (v6)
      {
        v43 = objc_msgSend(v6, "_autoCreatedForV2AU") != 0;
        memset(v41, 0, sizeof(v41));
        v42 = 1065353216;
        objc_msgSend(v6, "allParameters");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = *(_QWORD *)(v3 + 24);
        v7 = *(_QWORD *)(v3 + 32);
        if (v7 != v8)
        {
          do
          {
            v9 = v7 - 48;
            objc_destroyWeak((id *)(v7 - 32));
            v7 = v9;
          }
          while (v9 != v8);
        }
        v10 = *(_QWORD *)(v3 + 48);
        *(_QWORD *)(v3 + 32) = v8;
        v11 = *(_QWORD *)(v3 + 56);
        if (v11 != v10)
        {
          do
          {
            v12 = v11 - 48;
            objc_destroyWeak((id *)(v11 - 32));
            v11 = v12;
          }
          while (v12 != v10);
        }
        v13 = *(_QWORD **)(v3 + 104);
        *(_QWORD *)(v3 + 56) = v10;
        std::__tree<std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AUParameterGroup * {__strong}>>>::destroy(v13);
        *(_QWORD *)(v3 + 96) = v3 + 104;
        *(_QWORD *)(v3 + 104) = 0;
        *(_QWORD *)(v3 + 112) = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::reserve((uint64_t *)(v3 + 24), objc_msgSend(v32, "count"));
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::reserve((uint64_t *)(v3 + 48), objc_msgSend(v32, "count"));
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::reserve((uint64_t *)&v38, objc_msgSend(v32, "count"));
        v35[4] = (unsigned __int8 *)&v38;
        v36 = 0;
        v37 = 0;
        v35[0] = (unsigned __int8 *)&v43;
        v35[1] = (unsigned __int8 *)v41;
        v35[2] = (unsigned __int8 *)&v36;
        v35[3] = (unsigned __int8 *)v3;
        v14 = v6;
        AUv3InstanceBase::ParameterMap::checkCacheParameters(void)::$_0::operator()(v35, 0, v14);
        if (objc_msgSend(v14, "isGroup"))
        {
          v15 = v14;
          v44 = 0u;
          v45 = 0u;
          v46 = 0u;
          v47 = 0u;
          objc_msgSend(v15, "children");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
          if (v17)
          {
            v18 = *(_QWORD *)v45;
            do
            {
              for (i = 0; i != v17; ++i)
              {
                if (*(_QWORD *)v45 != v18)
                  objc_enumerationMutation(v16);
                v20 = *(id *)(*((_QWORD *)&v44 + 1) + 8 * i);
                TraverseParameterTree<AUv3InstanceBase::ParameterMap::checkCacheParameters(void)::$_0 &>(v15, v20, v35);

              }
              v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
            }
            while (v17);
          }

        }
        v21 = *(uint64_t **)(v3 + 24);
        v22 = *(uint64_t **)(v3 + 32);
        v23 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v21) >> 4));
        v48[0] = (void **)AUv3InstanceBase::ScopeElementIDObj::lessByID;
        if (v22 == v21)
          v24 = 0;
        else
          v24 = v23;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*,false>(v21, v22, (uint64_t (**)(uint64_t *, uint64_t *))v48, v24, 1);
        v25 = *(uint64_t **)(v3 + 48);
        v26 = *(uint64_t **)(v3 + 56);
        v27 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v25) >> 4));
        v48[0] = (void **)AUv3InstanceBase::ScopeElementIDObj::lessByOriginalOrder;
        if (v26 == v25)
          v28 = 0;
        else
          v28 = v27;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*,false>(v25, v26, (uint64_t (**)(uint64_t *, uint64_t *))v48, v28, 1);
        v29 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 4));
        v48[0] = (void **)AUv3InstanceBase::ScopeElementIDObj::lessByAddress;
        if (v39 == v38)
          v30 = 0;
        else
          v30 = v29;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*,false>((uint64_t *)v38, (uint64_t *)v39, (uint64_t (**)(uint64_t *, uint64_t *))v48, v30, 1);
        v31 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 40);
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3321888768;
        v33[2] = ___ZN16AUv3InstanceBase12ParameterMap20checkCacheParametersEv_block_invoke;
        v33[3] = &__block_descriptor_64_ea8_32c79_ZTSNSt3__16vectorIN16AUv3InstanceBase17ScopeElementIDObjENS_9allocatorIS2_EEEE_e46_v24__0q8r__AUParameterAutomationEvent_QQfIQ_16l;
        memset(v34, 0, 24);
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::__init_with_size[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj*,AUv3InstanceBase::ScopeElementIDObj*>(v34, (uint64_t *)v38, (uint64_t *)v39, 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 4));
        v34[3] = v31;
        atomic_store(objc_msgSend(v14, "tokenByAddingParameterAutomationObserver:", v33), (unint64_t *)(v3 + 88));
        objc_storeWeak((id *)(v3 + 128), v14);
        atomic_store(1u, (unsigned __int8 *)(v3 + 16));
        v48[0] = (void **)v34;
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100](v48);

        v48[0] = (void **)&v38;
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100](v48);

      }

    }
    return os_unfair_recursive_lock_unlock();
  }
  return this;
}

void sub_18EF5F5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  a19 = (void **)&a26;
  std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100](&a19);

  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

BOOL AUv3InstanceBase::ScopeElementIDObj::lessByID(int *a1, _DWORD *a2)
{
  int v3;
  _BOOL8 result;
  unsigned int v5;
  unsigned int v6;

  v3 = *a1;
  result = *a1 < *a2;
  if (v3 == *a2)
  {
    v5 = a1[1];
    v6 = a2[1];
    result = v5 < v6;
    if (v5 == v6)
      return a1[2] < a2[2];
  }
  return result;
}

void std::__tree<std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AUParameterGroup * {__strong}>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AUParameterGroup * {__strong}>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AUParameterGroup * {__strong}>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

uint64_t *std::vector<AUv3InstanceBase::ScopeElementIDObj>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 48 * v4;
    std::vector<AUv3InstanceBase::ScopeElementIDObj>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<AUv3InstanceBase::ScopeElementIDObj>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void AUv3InstanceBase::ParameterMap::checkCacheParameters(void)::$_0::operator()(unsigned __int8 **a1, void *a2, void *a3)
{
  id v5;
  unsigned __int8 *v6;
  unint64_t v7;
  id v8;
  _BYTE *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *i;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  float v29;
  float v30;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  int8x8_t prime;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unsigned __int8 *v50;
  int v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  id v57;
  _BYTE *v58;
  int v59;
  unsigned __int8 *v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t **v64;
  uint64_t **v65;
  uint64_t **v66;
  unsigned int v67;
  BOOL v68;
  uint64_t *v69;
  void *v70;
  void *v71;
  int v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t **v76;
  unsigned int v77;
  uint64_t **v78;
  uint64_t v79;
  uint64_t *v80;
  unsigned __int8 *v81;
  unint64_t v82;
  unint64_t v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  unint64_t v94;
  unint64_t v95;
  __int128 v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  __int128 v105;
  uint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  __int128 v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  __int128 v117;
  id v118;
  uint64_t *v119;
  id v121;
  id v122;
  uint64_t v123;
  int v124;
  id v125;
  __int128 v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t *v132;

  v122 = a2;
  v5 = a3;
  v6 = a1[3];
  if ((objc_msgSend(v5, "isGroup") & 1) == 0)
  {
    v121 = v5;
    v125 = 0;
    LODWORD(v126) = objc_msgSend(v121, "_originalOrder");
    if (**a1)
    {
      v7 = objc_msgSend(v121, "address");
      LODWORD(v123) = v7 >> 61;
      HIDWORD(v123) = HIDWORD(v7) & 0x1FFFFFFF;
      v124 = v7;
      goto LABEL_103;
    }
    objc_msgSend(v121, "keyPath");
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v9 = (_BYTE *)objc_msgSend(v8, "UTF8String");
    v10 = *v9;
    if (*v9)
    {
      v11 = v9 + 1;
      LODWORD(v12) = 5381;
      do
      {
        v12 = (33 * v12 + v10);
        v13 = *v11++;
        v10 = v13;
      }
      while (v13);
    }
    else
    {
      v12 = 5381;
    }

    v14 = a1[1];
    v15 = *((_QWORD *)v14 + 1);
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    v17 = v16.u32[0];
    v18 = v15 - 1;
    v19 = v15 - 1;
    v20 = v12;
LABEL_10:
    v21 = v20;
    if (v15)
    {
      if (v16.u32[0] > 1uLL)
      {
        v22 = v20;
        if (v15 <= v20)
          v22 = v20 % v15;
      }
      else
      {
        v22 = v18 & v20;
      }
      v23 = *(uint64_t ***)(*(_QWORD *)v14 + 8 * v22);
      if (v23)
      {
        for (i = *v23; i; i = (uint64_t *)*i)
        {
          v25 = i[1];
          if (v25 == v20)
          {
            if (*((_DWORD *)i + 4) == v20)
            {
              ++v20;
              goto LABEL_10;
            }
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v25 >= v15)
                v25 %= v15;
            }
            else
            {
              v25 &= v19;
            }
            if (v25 != v22)
              break;
          }
        }
      }
      if (v16.u32[0] > 1uLL)
      {
        v12 = v20;
        if (v15 <= v20)
          v12 = v20 % v15;
      }
      else
      {
        v12 = v18 & v20;
      }
      v26 = *(uint64_t **)(*(_QWORD *)v14 + 8 * v12);
      if (v26)
      {
        while (1)
        {
          v26 = (uint64_t *)*v26;
          if (!v26)
            break;
          v27 = v26[1];
          if (v27 == v20)
          {
            if (*((_DWORD *)v26 + 4) == v20)
              goto LABEL_102;
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v27 >= v15)
                v27 %= v15;
            }
            else
            {
              v27 &= v19;
            }
            if (v27 != v12)
              break;
          }
        }
      }
    }
    else
    {
      v20 = v12;
    }
    v28 = operator new(0x18uLL);
    *v28 = 0;
    v28[1] = v21;
    *((_DWORD *)v28 + 4) = v20;
    v29 = (float)(unint64_t)(*((_QWORD *)v14 + 3) + 1);
    v30 = *((float *)v14 + 8);
    if (v15 && (float)(v30 * (float)v15) >= v29)
    {
LABEL_92:
      v47 = *(_QWORD **)v14;
      v48 = *(_QWORD **)(*(_QWORD *)v14 + 8 * v12);
      if (v48)
      {
        *v28 = *v48;
      }
      else
      {
        *v28 = *((_QWORD *)v14 + 2);
        *((_QWORD *)v14 + 2) = v28;
        v47[v12] = v14 + 16;
        if (!*v28)
          goto LABEL_101;
        v49 = *(_QWORD *)(*v28 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v49 >= v15)
            v49 %= v15;
        }
        else
        {
          v49 &= v15 - 1;
        }
        v48 = (_QWORD *)(*(_QWORD *)v14 + 8 * v49);
      }
      *v48 = v28;
LABEL_101:
      ++*((_QWORD *)v14 + 3);
LABEL_102:
      v123 = 0;
      v124 = v20;
LABEL_103:
      objc_storeWeak(&v125, v121);
      *((_QWORD *)&v126 + 1) = objc_msgSend(v121, "address");
      v127 = 0;
      if (v122 && objc_msgSend(v122, "isGroup"))
      {
        v50 = a1[2];
        if (*(id *)v50 != v122)
        {
          v51 = **a1;
          v52 = v121;
          v119 = (uint64_t *)v122;
          objc_msgSend(v119, "identifier");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          v54 = objc_msgSend(v53, "length");

          if (v54)
          {
            v118 = v52;
            if (v51)
            {
              v55 = objc_msgSend(v52, "_clumpID");
            }
            else
            {
              objc_msgSend(v119, "keyPath");
              v57 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v58 = (_BYTE *)objc_msgSend(v57, "UTF8String");
              v59 = *v58;
              if (*v58)
              {
                v60 = v58 + 1;
                LODWORD(v55) = 5381;
                do
                {
                  v55 = (33 * v55 + v59);
                  v61 = *v60++;
                  v59 = v61;
                }
                while (v61);
              }
              else
              {
                v55 = 5381;
              }

            }
            v64 = (uint64_t **)(v6 + 104);
            v63 = *((_QWORD *)v6 + 13);
            v65 = (uint64_t **)(v6 + 104);
            if (!v63)
              goto LABEL_196;
            v66 = (uint64_t **)(v6 + 104);
            do
            {
              v67 = *(_DWORD *)(v63 + 32);
              v68 = v67 >= v55;
              if (v67 >= v55)
                v69 = (uint64_t *)v63;
              else
                v69 = (uint64_t *)(v63 + 8);
              if (v68)
                v66 = (uint64_t **)v63;
              v63 = *v69;
            }
            while (*v69);
            v65 = (uint64_t **)(v6 + 104);
            if (v66 == v64
              || (v65 = (uint64_t **)(v6 + 104), v55 < *((_DWORD *)v66 + 8))
              || (v65 = v66, v66[5] != v119))
            {
LABEL_196:
              if (!v51)
                goto LABEL_197;
              objc_msgSend(v119, "identifier");
              v70 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("clump_%d"), v55);
              v71 = (void *)objc_claimAutoreleasedReturnValue();
              v72 = objc_msgSend(v70, "isEqualToString:", v71);

              v66 = v65;
              if (v72)
              {
LABEL_197:
                while (1)
                {
                  v73 = v119;
                  v74 = v73;
                  v75 = *v64;
                  if (!*v64)
                    break;
                  while (1)
                  {
                    while (1)
                    {
                      v76 = (uint64_t **)v75;
                      v77 = *((_DWORD *)v75 + 8);
                      if (v55 >= v77)
                        break;
                      v75 = *v76;
                      v78 = v76;
                      if (!*v76)
                        goto LABEL_147;
                    }
                    if (v77 >= v55)
                      break;
                    v75 = v76[1];
                    if (!v75)
                    {
                      v78 = v76 + 1;
                      goto LABEL_147;
                    }
                  }
                  LODWORD(v55) = v55 + 1;

                }
                v78 = (uint64_t **)(v6 + 104);
                v76 = (uint64_t **)(v6 + 104);
LABEL_147:
                v66 = (uint64_t **)operator new(0x30uLL);
                *((_DWORD *)v66 + 8) = v55;
                v66[5] = v74;
                *v66 = 0;
                v66[1] = 0;
                v66[2] = (uint64_t *)v76;
                *v78 = (uint64_t *)v66;
                v79 = **((_QWORD **)v6 + 12);
                v80 = (uint64_t *)v66;
                if (v79)
                {
                  *((_QWORD *)v6 + 12) = v79;
                  v80 = *v78;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v6 + 13), v80);
                ++*((_QWORD *)v6 + 14);
              }
            }
            v56 = *((_DWORD *)v66 + 8);
            v52 = v118;
          }
          else
          {
            v56 = 0;
          }

          v81 = a1[2];
          objc_storeStrong((id *)v81, a2);
          *((_DWORD *)v81 + 2) = v56;
          v50 = a1[2];
        }
        v127 = *((_DWORD *)v50 + 2);
      }
      v82 = *((_QWORD *)v6 + 5);
      v83 = *((_QWORD *)v6 + 4);
      if (v83 >= v82)
      {
        v86 = *((_QWORD *)v6 + 3);
        v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - v86) >> 4);
        if (v87 + 1 > 0x555555555555555)
          goto LABEL_192;
        v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - v86) >> 4);
        v89 = 2 * v88;
        if (2 * v88 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x2AAAAAAAAAAAAAALL)
          v90 = 0x555555555555555;
        else
          v90 = v89;
        v132 = (uint64_t *)(v6 + 40);
        if (v90)
          v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v90);
        else
          v91 = 0;
        v92 = v90 + 48 * v87;
        v128 = v90;
        v129 = v92;
        v131 = v90 + 48 * v91;
        *(_DWORD *)(v92 + 8) = v124;
        *(_QWORD *)v92 = v123;
        objc_copyWeak((id *)(v92 + 16), &v125);
        v93 = v126;
        *(_DWORD *)(v92 + 40) = v127;
        *(_OWORD *)(v92 + 24) = v93;
        v130 = v92 + 48;
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::__swap_out_circular_buffer((uint64_t *)v6 + 3, &v128);
        v85 = *((_QWORD *)v6 + 4);
        std::__split_buffer<AUv3InstanceBase::ScopeElementIDObj>::~__split_buffer((uint64_t)&v128);
      }
      else
      {
        *(_DWORD *)(v83 + 8) = v124;
        *(_QWORD *)v83 = v123;
        objc_copyWeak((id *)(v83 + 16), &v125);
        v84 = v126;
        *(_DWORD *)(v83 + 40) = v127;
        *(_OWORD *)(v83 + 24) = v84;
        v85 = v83 + 48;
      }
      v94 = *((_QWORD *)v6 + 8);
      *((_QWORD *)v6 + 4) = v85;
      v95 = *((_QWORD *)v6 + 7);
      if (v95 >= v94)
      {
        v98 = *((_QWORD *)v6 + 6);
        v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - v98) >> 4);
        if (v99 + 1 > 0x555555555555555)
          goto LABEL_192;
        v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - v98) >> 4);
        v101 = 2 * v100;
        if (2 * v100 <= v99 + 1)
          v101 = v99 + 1;
        if (v100 >= 0x2AAAAAAAAAAAAAALL)
          v102 = 0x555555555555555;
        else
          v102 = v101;
        v132 = (uint64_t *)(v6 + 64);
        if (v102)
          v102 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v102);
        else
          v103 = 0;
        v104 = v102 + 48 * v99;
        v128 = v102;
        v129 = v104;
        v131 = v102 + 48 * v103;
        *(_DWORD *)(v104 + 8) = v124;
        *(_QWORD *)v104 = v123;
        objc_copyWeak((id *)(v104 + 16), &v125);
        v105 = v126;
        *(_DWORD *)(v104 + 40) = v127;
        *(_OWORD *)(v104 + 24) = v105;
        v130 = v104 + 48;
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::__swap_out_circular_buffer((uint64_t *)v6 + 6, &v128);
        v97 = *((_QWORD *)v6 + 7);
        std::__split_buffer<AUv3InstanceBase::ScopeElementIDObj>::~__split_buffer((uint64_t)&v128);
      }
      else
      {
        *(_DWORD *)(v95 + 8) = v124;
        *(_QWORD *)v95 = v123;
        objc_copyWeak((id *)(v95 + 16), &v125);
        v96 = v126;
        *(_DWORD *)(v95 + 40) = v127;
        *(_OWORD *)(v95 + 24) = v96;
        v97 = v95 + 48;
      }
      *((_QWORD *)v6 + 7) = v97;
      v106 = (uint64_t *)a1[4];
      v107 = v106[1];
      v108 = v106[2];
      if (v107 < v108)
      {
        *(_DWORD *)(v107 + 8) = v124;
        *(_QWORD *)v107 = v123;
        objc_copyWeak((id *)(v107 + 16), &v125);
        v109 = v126;
        *(_DWORD *)(v107 + 40) = v127;
        *(_OWORD *)(v107 + 24) = v109;
        v110 = v107 + 48;
LABEL_189:
        v106[1] = v110;
        objc_destroyWeak(&v125);

        goto LABEL_190;
      }
      v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - *v106) >> 4);
      if (v111 + 1 <= 0x555555555555555)
      {
        v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108 - *v106) >> 4);
        v113 = 2 * v112;
        if (2 * v112 <= v111 + 1)
          v113 = v111 + 1;
        if (v112 >= 0x2AAAAAAAAAAAAAALL)
          v114 = 0x555555555555555;
        else
          v114 = v113;
        v132 = v106 + 2;
        if (v114)
          v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v114);
        else
          v115 = 0;
        v116 = v114 + 48 * v111;
        v128 = v114;
        v129 = v116;
        v131 = v114 + 48 * v115;
        *(_DWORD *)(v116 + 8) = v124;
        *(_QWORD *)v116 = v123;
        objc_copyWeak((id *)(v116 + 16), &v125);
        v117 = v126;
        *(_DWORD *)(v116 + 40) = v127;
        *(_OWORD *)(v116 + 24) = v117;
        v130 = v116 + 48;
        std::vector<AUv3InstanceBase::ScopeElementIDObj>::__swap_out_circular_buffer(v106, &v128);
        v110 = v106[1];
        std::__split_buffer<AUv3InstanceBase::ScopeElementIDObj>::~__split_buffer((uint64_t)&v128);
        goto LABEL_189;
      }
LABEL_192:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    v32 = v15 < 3 || v17 > 1;
    v33 = v32 | (2 * v15);
    v34 = vcvtps_u32_f32(v29 / v30);
    if (v33 <= v34)
      prime = (int8x8_t)v34;
    else
      prime = (int8x8_t)v33;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v15 = *((_QWORD *)v14 + 1);
    if (*(_QWORD *)&prime > v15)
      goto LABEL_58;
    if (*(_QWORD *)&prime < v15)
    {
      v42 = vcvtps_u32_f32((float)*((unint64_t *)v14 + 3) / *((float *)v14 + 8));
      if (v15 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (*(_QWORD *)&prime <= v42)
        prime = (int8x8_t)v42;
      if (*(_QWORD *)&prime >= v15)
      {
        v15 = *((_QWORD *)v14 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_58:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v36 = operator new(8 * *(_QWORD *)&prime);
          v37 = *(_QWORD **)v14;
          *(_QWORD *)v14 = v36;
          if (v37)
            operator delete(v37);
          v38 = 0;
          *((int8x8_t *)v14 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v14 + 8 * v38++) = 0;
          while (*(_QWORD *)&prime != v38);
          v39 = (_QWORD *)*((_QWORD *)v14 + 2);
          if (v39)
          {
            v40 = v39[1];
            v41 = (uint8x8_t)vcnt_s8(prime);
            v41.i16[0] = vaddlv_u8(v41);
            if (v41.u32[0] > 1uLL)
            {
              if (v40 >= *(_QWORD *)&prime)
                v40 %= *(_QWORD *)&prime;
            }
            else
            {
              v40 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v14 + 8 * v40) = v14 + 16;
            v45 = (_QWORD *)*v39;
            if (*v39)
            {
              do
              {
                v46 = v45[1];
                if (v41.u32[0] > 1uLL)
                {
                  if (v46 >= *(_QWORD *)&prime)
                    v46 %= *(_QWORD *)&prime;
                }
                else
                {
                  v46 &= *(_QWORD *)&prime - 1;
                }
                if (v46 != v40)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v14 + 8 * v46))
                  {
                    *(_QWORD *)(*(_QWORD *)v14 + 8 * v46) = v39;
                    goto LABEL_83;
                  }
                  *v39 = *v45;
                  *v45 = **(_QWORD **)(*(_QWORD *)v14 + 8 * v46);
                  **(_QWORD **)(*(_QWORD *)v14 + 8 * v46) = v45;
                  v45 = v39;
                }
                v46 = v40;
LABEL_83:
                v39 = v45;
                v45 = (_QWORD *)*v45;
                v40 = v46;
              }
              while (v45);
            }
          }
          v15 = (unint64_t)prime;
          goto LABEL_87;
        }
        v62 = *(_QWORD **)v14;
        *(_QWORD *)v14 = 0;
        if (v62)
          operator delete(v62);
        v15 = 0;
        *((_QWORD *)v14 + 1) = 0;
      }
    }
LABEL_87:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v15 <= v21)
        v12 = v21 % v15;
      else
        v12 = v21;
    }
    else
    {
      v12 = ((_DWORD)v15 - 1) & v21;
    }
    goto LABEL_92;
  }
LABEL_190:

}

void sub_18EF6029C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, id *location, void *a15)
{
  void *v15;
  void *v16;

  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

void TraverseParameterTree<AUv3InstanceBase::ParameterMap::checkCacheParameters(void)::$_0 &>(void *a1, void *a2, unsigned __int8 **a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  AUv3InstanceBase::ParameterMap::checkCacheParameters(void)::$_0::operator()(a3, v5, v6);
  if (objc_msgSend(v6, "isGroup"))
  {
    v7 = v6;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    objc_msgSend(v7, "children", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v14;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v14 != v10)
            objc_enumerationMutation(v8);
          v12 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * v11);
          TraverseParameterTree<AUv3InstanceBase::ParameterMap::checkCacheParameters(void)::$_0 &>(v7, v12, a3);

          ++v11;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v9);
    }

  }
}

void sub_18EF60490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*,false>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  id v19;
  __int128 v20;
  int v21;
  id v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  id v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  uint64_t *v39;
  int v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  id v44;
  __int128 v45;
  uint64_t v46;
  id v47;
  __int128 v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  id *v58;
  id v59;
  char v60;
  uint64_t *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  __int128 v66;
  id *v67;
  id *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  __int128 v74;
  uint64_t *v75;
  uint64_t v76;
  id *v77;
  id WeakRetained;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  __int128 v83;
  int64_t v84;
  uint64_t *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id *v93;
  id v94;
  __int128 v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  id v99;
  __int128 v100;
  id v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  id *v110;
  id v111;
  __int128 v112;
  uint64_t v113;
  id v114;
  __int128 v115;
  id v116;
  __int128 v117;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  id *v125;
  id v126;
  char v127;
  uint64_t *v128;
  uint64_t v129;
  id v130;
  __int128 v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t *v136;
  uint64_t *v137;
  id *location;
  id *from;
  id *froma;
  id *to;
  uint64_t v142;
  int v143;
  id v144;
  __int128 v145;
  int v146;
  uint64_t v147;
  int v148;
  id v149;
  __int128 v150;
  int v151;

void sub_18EF61328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id *location)
{
  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

BOOL AUv3InstanceBase::ScopeElementIDObj::lessByOriginalOrder(int *a1, _DWORD *a2)
{
  int v3;
  _BOOL8 result;
  unsigned int v5;
  unsigned int v6;

  v3 = *a1;
  result = *a1 < *a2;
  if (v3 == *a2)
  {
    v5 = a1[1];
    v6 = a2[1];
    result = v5 < v6;
    if (v5 == v6)
      return a1[6] < a2[6];
  }
  return result;
}

BOOL AUv3InstanceBase::ScopeElementIDObj::lessByAddress(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) < *(_QWORD *)(a2 + 32);
}

void ___ZN16AUv3InstanceBase12ParameterMap20checkCacheParametersEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  AudioUnitEventType v17;
  AudioUnitParameterID v18;
  uint64_t v19;
  AudioUnitEvent v20;
  __int128 v21;
  _OWORD v22[2];

  if (a2 >= 1)
  {
    for (i = 0; i != a2; ++i)
    {
      v7 = a3 + 32 * i;
      if (*(_QWORD *)(v7 + 24))
      {
        v8 = *(_QWORD *)(v7 + 8);
        v9 = *(_DWORD *)(v7 + 20);
        v22[0] = 0u;
        v21 = 0u;
        v22[1] = v8;
        v10 = *(uint64_t **)(a1 + 32);
        v11 = *(uint64_t **)(a1 + 40);
        if (v11 != v10)
        {
          v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v10) >> 4);
          do
          {
            v13 = v12 >> 1;
            v14 = &v10[6 * (v12 >> 1)];
            v15 = v14[4];
            v16 = v14 + 6;
            v12 += ~(v12 >> 1);
            if (v15 < v8)
              v10 = v16;
            else
              v12 = v13;
          }
          while (v12);
        }
        if (v10 != v11 && v10[4] == v8)
        {
          if (v9 == 2)
            v17 = kAudioUnitEvent_EndParameterChangeGesture;
          else
            v17 = v9 == 1;
          v20.mEventType = v17;
          v18 = *((_DWORD *)v10 + 2);
          v20.mArgument.mParameter.mAudioUnit = *(AudioUnit *)(a1 + 56);
          v19 = *v10;
          v20.mArgument.mParameter.mParameterID = v18;
          *(_QWORD *)&v20.mArgument.mProperty.mScope = v19;
          AUEventListenerNotify(0, 0, &v20);
        }
        objc_destroyWeak((id *)v22);
      }
    }
  }
}

void sub_18EF61520(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void std::vector<AUv3InstanceBase::ScopeElementIDObj>::__init_with_size[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj*,AUv3InstanceBase::ScopeElementIDObj*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if (a4)
  {
    if (a4 >= 0x555555555555556)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(a4);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[48 * v8];
    while (a2 != a3)
    {
      v9 = *a2;
      *((_DWORD *)v7 + 2) = *((_DWORD *)a2 + 2);
      *(_QWORD *)v7 = v9;
      objc_copyWeak((id *)v7 + 2, (id *)a2 + 2);
      v10 = *(_OWORD *)(a2 + 3);
      *((_DWORD *)v7 + 10) = *((_DWORD *)a2 + 10);
      *(_OWORD *)(v7 + 24) = v10;
      v7 += 48;
      a2 += 6;
    }
    a1[1] = v7;
  }
}

void sub_18EF615F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 6;
        objc_destroyWeak(v4 - 4);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void __copy_helper_block_ea8_32c79_ZTSNSt3__16vectorIN16AUv3InstanceBase17ScopeElementIDObjENS_9allocatorIS2_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  std::vector<AUv3InstanceBase::ScopeElementIDObj>::__init_with_size[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj*,AUv3InstanceBase::ScopeElementIDObj*>(v2, *(uint64_t **)(a2 + 32), *(uint64_t **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4));
}

void __destroy_helper_block_ea8_32c79_ZTSNSt3__16vectorIN16AUv3InstanceBase17ScopeElementIDObjENS_9allocatorIS2_EEEE(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 32);
  std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(uint64_t *a1, uint64_t *a2)
{
  id *v4;
  int v5;
  id WeakRetained;
  __int128 v7;
  id v8;
  uint64_t v9;
  int v10;
  id v11;
  __int128 v12;
  int v13;

  v9 = *a1;
  v10 = *((_DWORD *)a1 + 2);
  v4 = (id *)(a1 + 2);
  objc_moveWeak(&v11, (id *)a1 + 2);
  v12 = *(_OWORD *)(a1 + 3);
  v13 = *((_DWORD *)a1 + 10);
  v5 = *((_DWORD *)a2 + 2);
  *a1 = *a2;
  *((_DWORD *)a1 + 2) = v5;
  WeakRetained = objc_loadWeakRetained((id *)a2 + 2);
  objc_storeWeak(v4, WeakRetained);

  v7 = *(_OWORD *)(a2 + 3);
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *(_OWORD *)(a1 + 3) = v7;
  *a2 = v9;
  *((_DWORD *)a2 + 2) = v10;
  v8 = objc_loadWeakRetained(&v11);
  objc_storeWeak((id *)a2 + 2, v8);

  *(_OWORD *)(a2 + 3) = v12;
  *((_DWORD *)a2 + 10) = v13;
  objc_destroyWeak(&v11);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  int v9;
  uint64_t *v10;

  v8 = (*a4)(a2, a1);
  v9 = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if (v9)
    {
      v10 = a1;
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a1, a2);
      if (!(*a4)(a3, a2))
        return;
      v10 = a2;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(v10, a3);
  }
  else if (v9)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a2, a3);
    if ((*a4)(a2, a1))
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a1, a2);
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a3, a4);
    if ((*a5)(a3, a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a2, a3);
      if ((*a5)(a2, a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a1, a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(a1, a2, a3, a4, a6);
  if ((*a6)(a5, a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a4, a5);
    if ((*a6)(a4, a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a3, a4);
      if ((*a6)(a3, a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a2, a3);
        if ((*a6)(a2, a1))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a1, a2);
      }
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t *v4;
  _BOOL8 v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id *v14;
  id WeakRetained;
  char v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  id v24;
  __int128 v25;
  int v26;

  v4 = a2;
  v6 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      if ((*a3)(a2 - 6, a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AUv3InstanceBase::ScopeElementIDObj *&,AUv3InstanceBase::ScopeElementIDObj *&>(a1, v4 - 6);
      return v6;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(a1, a1 + 6, a2 - 6, a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(a1, a1 + 6, a1 + 12, a2 - 6, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(a1, a1 + 6, a1 + 12, a1 + 18, a2 - 6, a3);
      return v6;
    default:
      v7 = a1 + 12;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(AUv3InstanceBase::ScopeElementIDObj const&,AUv3InstanceBase::ScopeElementIDObj const&),AUv3InstanceBase::ScopeElementIDObj*>(a1, a1 + 6, a1 + 12, a3);
      v8 = a1 + 18;
      if (a1 + 18 == v4)
        return 1;
      v9 = 0;
      v10 = 0;
      v21 = v4;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_14:
    v7 = v8;
    v9 += 48;
    v8 += 6;
    if (v8 == v4)
      return 1;
  }
  v22 = *v8;
  v23 = *((_DWORD *)v8 + 2);
  objc_moveWeak(&v24, (id *)v8 + 2);
  v25 = *(_OWORD *)(v8 + 3);
  v26 = *((_DWORD *)v8 + 10);
  v11 = v9;
  while (1)
  {
    v12 = v11;
    v13 = (char *)a1 + v11;
    *((_QWORD *)v13 + 18) = *(uint64_t *)((char *)a1 + v11 + 96);
    *((_DWORD *)v13 + 38) = *(_DWORD *)((char *)a1 + v11 + 104);
    v14 = (id *)((char *)a1 + v11 + 112);
    WeakRetained = objc_loadWeakRetained(v14);
    objc_storeWeak((id *)v13 + 20, WeakRetained);

    *(_OWORD *)(v13 + 168) = *(_OWORD *)(v13 + 120);
    *((_DWORD *)v13 + 46) = *((_DWORD *)v13 + 34);
    if (v12 == -96)
      break;
    v16 = (*a3)(&v22, (uint64_t *)v13 + 6);
    v11 = v12 - 48;
    if ((v16 & 1) == 0)
    {
      v17 = (uint64_t)a1 + v11 + 144;
      v18 = (uint64_t)a1 + v12 + 120;
      v14 = (id *)((char *)a1 + v12 + 112);
      goto LABEL_12;
    }
  }
  v18 = (uint64_t)(v13 + 120);
  v17 = (uint64_t)a1;
LABEL_12:
  *(_QWORD *)v17 = v22;
  *(_DWORD *)(v17 + 8) = v23;
  v19 = objc_loadWeakRetained(&v24);
  objc_storeWeak(v14, v19);

  *(_OWORD *)v18 = v25;
  *(_DWORD *)(v18 + 16) = v26;
  ++v10;
  v4 = v21;
  if (v10 != 8)
  {
    objc_destroyWeak(&v24);
    goto LABEL_14;
  }
  v6 = v8 + 6 == v21;
  objc_destroyWeak(&v24);
  return v6;
}

void sub_18EF61CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

void std::vector<AUv3InstanceBase::ScopeElementIDObj>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v7 = *(_QWORD *)(v4 - 48);
    v4 -= 48;
    v8 = *(_DWORD *)(v4 + 8);
    *(_QWORD *)(v6 - 48) = v7;
    v6 -= 48;
    *(_DWORD *)(v6 + 8) = v8;
    objc_moveWeak((id *)(v6 + 16), (id *)(v4 + 16));
    v9 = *(_OWORD *)(v4 + 24);
    *(_DWORD *)(v6 + 40) = *(_DWORD *)(v4 + 40);
    *(_OWORD *)(v6 + 24) = v9;
  }
  a2[1] = v6;
  v10 = *a1;
  *a1 = v6;
  a2[1] = v10;
  v11 = a1[1];
  a1[1] = a2[2];
  a2[2] = v11;
  v12 = a1[2];
  a1[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<AUv3InstanceBase::ScopeElementIDObj>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    objc_destroyWeak((id *)(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::GetParameter(unsigned int,unsigned int,unsigned int,float &)::$_0>(_QWORD ***a1)
{
  _QWORD **v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *a1;
  v2 = (*a1)[1];
  v3 = AUv3InstanceBase::sAUParameter_address(***a1, AUv3InstanceBase::sSel_address);
  *(float *)v1[2] = ((float (*)(_QWORD, uint64_t, uint64_t, _QWORD))v2[49])(v2[9], AUv3InstanceBase::sSel_GetV2Parameter, v3, *((unsigned int *)v2 + 94));
  return 0;
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::RemovePropertyListener(unsigned int,void (*)(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int),void *,BOOL)::$_0>(uint64_t **a1)
{
  uint64_t v1;
  _DWORD *v2;
  _QWORD *v3;
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v10;
  uint64_t v11;

  v1 = **a1;
  v2 = (_DWORD *)(*a1)[1];
  v3 = (_QWORD *)(*a1)[2];
  v4 = (_BYTE *)(*a1)[3];
  v5 = (_QWORD *)(*a1)[4];
  os_unfair_recursive_lock_lock_with_options();
  v6 = *(_QWORD *)(v1 + 104);
  v7 = *(_QWORD *)(v1 + 112);
  if (v6 != v7)
  {
    while (1)
    {
      v8 = *(_QWORD *)v6;
      if (*(_DWORD *)(*(_QWORD *)v6 + 24) == *v2
        && *(_QWORD *)(v8 + 32) == *v3
        && (!*v4 || *(_QWORD *)(v8 + 40) == *v5))
      {
        break;
      }
      v6 += 16;
      if (v6 == v7)
        goto LABEL_7;
    }
    if (v6 != v7)
    {
      v10 = (__int128 *)(v6 + 16);
      if (v6 + 16 != v7)
      {
        do
        {
          v11 = *(_QWORD *)v10;
          if (*(_DWORD *)(*(_QWORD *)v10 + 24) != *v2
            || *(_QWORD *)(v11 + 32) != *v3
            || *v4 && *(_QWORD *)(v11 + 40) != *v5)
          {
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v6, v10);
            v6 += 16;
          }
          ++v10;
        }
        while (v10 != (__int128 *)v7);
        v7 = *(_QWORD *)(v1 + 112);
      }
      if (v6 != v7)
      {
        while (v7 != v6)
        {
          v7 -= 16;
          std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v7);
        }
        *(_QWORD *)(v1 + 112) = v6;
      }
    }
  }
LABEL_7:
  os_unfair_recursive_lock_unlock();
  return 0;
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::AddPropertyListener(unsigned int,void (*)(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int),void *)::$_0>(unsigned int ***a1)
{
  uint64_t v1;
  unsigned int *v2;
  const void *v3;
  CFDictionaryRef *v4;
  id *Value;
  id *v6;
  id v7;
  unsigned int *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t result;
  int v23;
  unsigned int *v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unsigned int *v36;
  uint64_t *v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __CFString *v42;
  __CFString *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  _QWORD *v60;
  char *v61;
  __int128 v62;
  int64x2_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  char *v72;
  _QWORD *v73;
  _QWORD *v74;
  char *v75;
  __int128 v76;
  int64x2_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  char *v86;
  _QWORD *v87;
  _QWORD *v88;
  char *v89;
  __int128 v90;
  int64x2_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int64x2_t v96;
  uint64_t v97;
  unsigned int *v98;

  v1 = (uint64_t)*a1;
  v2 = (*a1)[1];
  v3 = (const void *)***a1;
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = (id *)CFDictionaryGetValue(*v4, v3);
  if (!Value || (v6 = Value, ((_BYTE)Value[2] & 2) != 0))
  {
    v21 = **(_DWORD **)v1;
    result = 4294956417;
    if (v21 > 0x13)
      return result;
    v23 = 1 << v21;
    if ((v23 & 0x818) != 0)
    {
      os_unfair_recursive_lock_lock_with_options();
      v24 = *(unsigned int **)v1;
      v25 = *(uint64_t **)(v1 + 16);
      v26 = *(uint64_t **)(v1 + 24);
      v27 = operator new(0x48uLL);
      v28 = v27;
      v27[1] = 0;
      v27[2] = 0;
      *v27 = &off_1E2917638;
      v27[3] = &off_1E2909EA8;
      v29 = (char *)(v27 + 3);
      v30 = *v24;
      v31 = *v25;
      v32 = *v26;
      v27[4] = v2;
      v27[5] = 0;
      *((_DWORD *)v27 + 12) = v30;
      v27[7] = v31;
      v27[8] = v32;
      v33 = *((_QWORD *)v2 + 15);
      v34 = (_QWORD *)*((_QWORD *)v2 + 14);
      if ((unint64_t)v34 >= v33)
      {
        v51 = *((_QWORD *)v2 + 13);
        v52 = ((uint64_t)v34 - v51) >> 4;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v54 = v33 - v51;
        if (v54 >> 3 > v53)
          v53 = v54 >> 3;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
          v55 = 0xFFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        v98 = v2 + 30;
        v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v55);
        v58 = &v56[16 * v52];
        *(_QWORD *)v58 = v29;
        *((_QWORD *)v58 + 1) = v28;
        v60 = (_QWORD *)*((_QWORD *)v2 + 13);
        v59 = (_QWORD *)*((_QWORD *)v2 + 14);
        if (v59 == v60)
        {
          v63 = vdupq_n_s64((unint64_t)v59);
          v61 = &v56[16 * v52];
        }
        else
        {
          v61 = &v56[16 * v52];
          do
          {
            v62 = *((_OWORD *)v59 - 1);
            v59 -= 2;
            *((_OWORD *)v61 - 1) = v62;
            v61 -= 16;
            *v59 = 0;
            v59[1] = 0;
          }
          while (v59 != v60);
          v63 = *(int64x2_t *)(v2 + 26);
        }
        v35 = v58 + 16;
        *((_QWORD *)v2 + 13) = v61;
        *((_QWORD *)v2 + 14) = v58 + 16;
        v96 = v63;
        v92 = *((_QWORD *)v2 + 15);
        *((_QWORD *)v2 + 15) = &v56[16 * v57];
        v97 = v92;
        v95 = v63.i64[0];
        std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v95);
      }
      else
      {
        *v34 = v29;
        v34[1] = v27;
        v35 = v34 + 2;
      }
      *((_QWORD *)v2 + 14) = v35;
    }
    else
    {
      if ((v23 & 0x80100) == 0)
        return result;
      os_unfair_recursive_lock_lock_with_options();
      v36 = *(unsigned int **)v1;
      v38 = *(uint64_t **)(v1 + 16);
      v37 = *(uint64_t **)(v1 + 24);
      v39 = (char *)operator new(0x48uLL);
      *((_QWORD *)v39 + 1) = 0;
      *((_QWORD *)v39 + 2) = 0;
      *(_QWORD *)v39 = &off_1E2917600;
      LODWORD(v36) = *v36;
      v40 = *v38;
      v41 = *v37;
      v42 = CFSTR("format");
      v43 = CFSTR("format");
      *((_QWORD *)v39 + 3) = &off_1E2909E80;
      *((_QWORD *)v39 + 4) = v2;
      *((_QWORD *)v39 + 5) = CFSTR("format");
      *((_DWORD *)v39 + 12) = (_DWORD)v36;
      *((_QWORD *)v39 + 7) = v40;
      *((_QWORD *)v39 + 8) = v41;
      objc_msgSend(*((id *)v2 + 9), "inputBusses");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      AUv3InstanceBase::Proxy(*((AUv3InstanceBase **)v39 + 4));
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "addObserverToAllBusses:forKeyPath:options:context:", v45, CFSTR("format"), 0, v39 + 24);

      objc_msgSend(*(id *)(*((_QWORD *)v39 + 4) + 72), "outputBusses");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      AUv3InstanceBase::Proxy(*((AUv3InstanceBase **)v39 + 4));
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "addObserverToAllBusses:forKeyPath:options:context:", v47, CFSTR("format"), 0, v39 + 24);

      v48 = *((_QWORD *)v2 + 15);
      v49 = (_QWORD *)*((_QWORD *)v2 + 14);
      if ((unint64_t)v49 >= v48)
      {
        v78 = *((_QWORD *)v2 + 13);
        v79 = ((uint64_t)v49 - v78) >> 4;
        v80 = v79 + 1;
        if ((unint64_t)(v79 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v81 = v48 - v78;
        if (v81 >> 3 > v80)
          v80 = v81 >> 3;
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
          v82 = 0xFFFFFFFFFFFFFFFLL;
        else
          v82 = v80;
        v98 = v2 + 30;
        v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v82);
        *(_QWORD *)&v85 = v39 + 24;
        *((_QWORD *)&v85 + 1) = v39;
        v86 = &v83[16 * v79];
        *(_OWORD *)v86 = v85;
        v88 = (_QWORD *)*((_QWORD *)v2 + 13);
        v87 = (_QWORD *)*((_QWORD *)v2 + 14);
        if (v87 == v88)
        {
          v91 = vdupq_n_s64((unint64_t)v87);
          v89 = &v83[16 * v79];
        }
        else
        {
          v89 = &v83[16 * v79];
          do
          {
            v90 = *((_OWORD *)v87 - 1);
            v87 -= 2;
            *((_OWORD *)v89 - 1) = v90;
            v89 -= 16;
            *v87 = 0;
            v87[1] = 0;
          }
          while (v87 != v88);
          v91 = *(int64x2_t *)(v2 + 26);
        }
        v50 = v86 + 16;
        *((_QWORD *)v2 + 13) = v89;
        *((_QWORD *)v2 + 14) = v86 + 16;
        v96 = v91;
        v94 = *((_QWORD *)v2 + 15);
        *((_QWORD *)v2 + 15) = &v83[16 * v84];
        v97 = v94;
        v95 = v91.i64[0];
        std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v95);
      }
      else
      {
        *v49 = v39 + 24;
        v49[1] = v39;
        v50 = v49 + 2;
      }
      *((_QWORD *)v2 + 14) = v50;

    }
  }
  else
  {
    os_unfair_recursive_lock_lock_with_options();
    v7 = v6[1];
    v8 = *(unsigned int **)v1;
    v10 = *(uint64_t **)(v1 + 16);
    v9 = *(uint64_t **)(v1 + 24);
    v11 = operator new(0x48uLL);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = &off_1E2917670;
    v12 = *v8;
    v13 = *v10;
    v14 = *v9;
    v15 = v7;
    v11[3] = &off_1E2909ED0;
    v11[4] = v2;
    v11[5] = v15;
    *((_DWORD *)v11 + 12) = v12;
    v11[7] = v13;
    v11[8] = v14;
    v16 = (void *)*((_QWORD *)v2 + 9);
    AUv3InstanceBase::Proxy((AUv3InstanceBase *)v2);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "addObserver:forKeyPath:options:context:", v17, v11[5], 0, v11 + 3);

    v18 = *((_QWORD *)v2 + 15);
    v19 = (_QWORD *)*((_QWORD *)v2 + 14);
    if ((unint64_t)v19 >= v18)
    {
      v64 = *((_QWORD *)v2 + 13);
      v65 = ((uint64_t)v19 - v64) >> 4;
      v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 60)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v67 = v18 - v64;
      if (v67 >> 3 > v66)
        v66 = v67 >> 3;
      if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
        v68 = 0xFFFFFFFFFFFFFFFLL;
      else
        v68 = v66;
      v98 = v2 + 30;
      v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v68);
      *(_QWORD *)&v71 = v11 + 3;
      *((_QWORD *)&v71 + 1) = v11;
      v72 = &v69[16 * v65];
      *(_OWORD *)v72 = v71;
      v74 = (_QWORD *)*((_QWORD *)v2 + 13);
      v73 = (_QWORD *)*((_QWORD *)v2 + 14);
      if (v73 == v74)
      {
        v77 = vdupq_n_s64((unint64_t)v73);
        v75 = &v69[16 * v65];
      }
      else
      {
        v75 = &v69[16 * v65];
        do
        {
          v76 = *((_OWORD *)v73 - 1);
          v73 -= 2;
          *((_OWORD *)v75 - 1) = v76;
          v75 -= 16;
          *v73 = 0;
          v73[1] = 0;
        }
        while (v73 != v74);
        v77 = *(int64x2_t *)(v2 + 26);
      }
      v20 = v72 + 16;
      *((_QWORD *)v2 + 13) = v75;
      *((_QWORD *)v2 + 14) = v72 + 16;
      v96 = v77;
      v93 = *((_QWORD *)v2 + 15);
      *((_QWORD *)v2 + 15) = &v69[16 * v70];
      v97 = v93;
      v95 = v77.i64[0];
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v95);
    }
    else
    {
      *v19 = v11 + 3;
      v19[1] = v11;
      v20 = v19 + 2;
    }
    *((_QWORD *)v2 + 14) = v20;

  }
  os_unfair_recursive_lock_unlock();
  return 0;
}

void sub_18EF62518(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

void AUv3InstanceBase::ClientPropertyListener::~ClientPropertyListener(id *this)
{

}

{

  JUMPOUT(0x193FFE460);
}

uint64_t AUv3InstanceBase::ClientPropertyListener::call(AUv3InstanceBase::ClientPropertyListener *this, NSObject *a2, NSString *a3)
{
  return (*((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))this + 4))(*((_QWORD *)this + 5), *(_QWORD *)(*((_QWORD *)this + 1) + 40), *((unsigned int *)this + 6), 0, 0);
}

void std::__shared_ptr_emplace<AUv3InstanceBase::ClientPropertyListener>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AUv3InstanceBase::ClientPropertyListener>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<AUv3InstanceBase::ClientPropertyListener>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

id AUv3InstanceBase::Proxy(AUv3InstanceBase *this)
{
  void *v2;
  AUExtensionInstanceProxy *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 11);
  if (!v2)
  {
    v3 = objc_alloc_init(AUExtensionInstanceProxy);
    v4 = (void *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v3;

    objc_msgSend(*((id *)this + 11), "setAuInstance:", this);
    v2 = (void *)*((_QWORD *)this + 11);
  }
  return v2;
}

void AUv3InstanceBase::BusPropertyListener::~BusPropertyListener(AUv3InstanceBase::BusPropertyListener *this)
{
  AUv3InstanceBase::BusPropertyListener::~BusPropertyListener(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E2909E80;
  objc_msgSend(*(id *)(*((_QWORD *)this + 1) + 72), "inputBusses");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  AUv3InstanceBase::Proxy(*((AUv3InstanceBase **)this + 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeObserverFromAllBusses:forKeyPath:context:", v3, *((_QWORD *)this + 2), this);

  objc_msgSend(*(id *)(*((_QWORD *)this + 1) + 72), "outputBusses");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  AUv3InstanceBase::Proxy(*((AUv3InstanceBase **)this + 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeObserverFromAllBusses:forKeyPath:context:", v5, *((_QWORD *)this + 2), this);

}

void AUv3InstanceBase::BusPropertyListener::call(AUv3InstanceBase::BusPropertyListener *this, NSObject *a2, NSString *a3)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  objc_msgSend(*(id *)(*((_QWORD *)this + 1) + 72), "inputBusses");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v6)
  {
    v7 = 0;
    v8 = *(_QWORD *)v23;
    while (2)
    {
      v9 = 0;
      v10 = v7 + v6;
      do
      {
        if (*(_QWORD *)v23 != v8)
          objc_enumerationMutation(v5);
        if (*(NSObject **)(*((_QWORD *)&v22 + 1) + 8 * v9) == v4)
        {
          v16 = (v7 + v9);
          v17 = 1;
LABEL_20:

          (*((void (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))this + 4))(*((_QWORD *)this + 5), *(_QWORD *)(*((_QWORD *)this + 1) + 40), *((unsigned int *)this + 6), v17, v16);
          goto LABEL_21;
        }
        ++v9;
      }
      while (v6 != v9);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
      v7 = v10;
      if (v6)
        continue;
      break;
    }
  }

  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  objc_msgSend(*(id *)(*((_QWORD *)this + 1) + 72), "outputBusses", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v11)
  {
    v12 = 0;
    v13 = *(_QWORD *)v19;
    while (2)
    {
      v14 = 0;
      v15 = v12 + v11;
      do
      {
        if (*(_QWORD *)v19 != v13)
          objc_enumerationMutation(v5);
        if (*(NSObject **)(*((_QWORD *)&v18 + 1) + 8 * v14) == v4)
        {
          v16 = (v12 + v14);
          v17 = 2;
          goto LABEL_20;
        }
        ++v14;
      }
      while (v11 != v14);
      v11 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
      v12 = v15;
      if (v11)
        continue;
      break;
    }
  }

LABEL_21:
}

void sub_18EF629C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AUv3InstanceBase::BusPropertyListener>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AUv3InstanceBase::BusPropertyListener>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<AUv3InstanceBase::BusPropertyListener>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AUv3InstanceBase::GlobalPropertyListener::~GlobalPropertyListener(AUv3InstanceBase::GlobalPropertyListener *this)
{
  AUv3InstanceBase::GlobalPropertyListener::~GlobalPropertyListener(this);
  JUMPOUT(0x193FFE460);
}

{
  AUv3InstanceBase *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E2909ED0;
  v2 = (AUv3InstanceBase *)*((_QWORD *)this + 1);
  v3 = (void *)*((_QWORD *)v2 + 9);
  AUv3InstanceBase::Proxy(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeObserver:forKeyPath:context:", v4, *((_QWORD *)this + 2), this);

}

void std::__shared_ptr_emplace<AUv3InstanceBase::GlobalPropertyListener>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AUv3InstanceBase::GlobalPropertyListener>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<AUv3InstanceBase::GlobalPropertyListener>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::SetProperty(unsigned int,unsigned int,unsigned int,void const*,unsigned int)::{lambda(void)#1}>(uint64_t **a1)
{
  uint64_t v1;
  const void *v2;
  int v3;
  unint64_t v4;
  unsigned __int8 *v5;
  size_t v6;
  CFDictionaryRef *v7;
  _QWORD *Value;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  CFTypeRef *v16;
  void *v17;
  const void *v18;
  void *v19;
  void *WeakRetained;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  os_log_t v25;
  unsigned int v26;
  int v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  unint64_t v38;
  void *v39;
  size_t v40;
  size_t v41;
  char v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  os_log_t v54;
  unsigned int v55;
  int v56;
  _QWORD *v57;
  NSObject *v58;
  uint64_t v59;
  _BOOL8 v60;
  _QWORD *v61;
  NSObject *v62;
  unsigned int v63;
  id AVAudioChannelLayoutClass;
  id v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  int v71;
  int v72;
  BOOL v73;
  void *v74;
  void *v76;
  void *v77;
  id v78;
  id v79;
  CFTypeRef *v80[2];
  int v81;
  _BYTE cf[32];
  __int128 v83;
  char v84;
  _BYTE __dst[32];
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v1 = **a1;
  v2 = (const void *)*(unsigned int *)(*a1)[1];
  v3 = *(_DWORD *)(*a1)[2];
  v4 = *(unsigned int *)(*a1)[3];
  v5 = *(unsigned __int8 **)(*a1)[4];
  LODWORD(v6) = *(_DWORD *)(*a1)[5];
  v81 = 0;
  v7 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v7, v2);
  if (!Value || (v9 = Value, (v10 = Value[10]) == 0))
  {
    v80[0] = (CFTypeRef *)v5;
    v16 = (CFTypeRef *)*(id *)(v1 + 72);
    v80[1] = v16;
    if ((int)v2 > 26)
    {
      if ((int)v2 <= 55)
      {
        if ((int)v2 <= 47)
        {
          if ((_DWORD)v2 != 27)
          {
            if ((_DWORD)v2 == 36)
            {
              v17 = (void *)objc_opt_new();
              objc_msgSend(v17, "setNumber:", *(int *)v5);
              v18 = (const void *)*((_QWORD *)v5 + 1);
              if (v18)
                CFRetain(*((CFTypeRef *)v5 + 1));
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, v18);
              objc_msgSend(v17, "setName:", *(_QWORD *)cf);
              v19 = *(void **)(v1 + 72);
              *(_QWORD *)__dst = 0;
              objc_msgSend(v19, "_setValue:forKey:error:", v17, CFSTR("currentPreset"), __dst);
              v11 = *(id *)__dst;
              if (*(_QWORD *)cf)
                CFRelease(*(CFTypeRef *)cf);

              goto LABEL_32;
            }
            goto LABEL_42;
          }
          *(_QWORD *)(v1 + 368) = 0;
          *(_OWORD *)(v1 + 336) = 0u;
          *(_OWORD *)(v1 + 352) = 0u;
          if (v6 >= 0x28)
            v40 = 40;
          else
            v40 = v6;
          memcpy((void *)(v1 + 336), v5, v40);
          if (*(_QWORD *)(v1 + 344) || *(_QWORD *)(v1 + 352))
          {
            *(_QWORD *)cf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&cf[8] = 3221225472;
            *(_QWORD *)&cf[16] = ___ZN16AUv3InstanceBase16setHostCallbacksEPK16HostCallbackInfom_block_invoke;
            *(_QWORD *)&cf[24] = &__block_descriptor_40_e29_B56__0_d8_d16_q24_d32_q40_d48l;
            *(_QWORD *)&v83 = v1 + 336;
            objc_msgSend(*(id *)(v1 + 72), "setMusicalContextBlock:", cf);
          }
          else
          {
            objc_msgSend(*(id *)(v1 + 72), "setMusicalContextBlock:", 0);
          }
          if (*(_QWORD *)(v1 + 360) || *(_QWORD *)(v1 + 368))
          {
            *(_QWORD *)__dst = MEMORY[0x1E0C809B0];
            *(_QWORD *)&__dst[8] = 3221225472;
            *(_QWORD *)&__dst[16] = ___ZN16AUv3InstanceBase16setHostCallbacksEPK16HostCallbackInfom_block_invoke_2;
            *(_QWORD *)&__dst[24] = &__block_descriptor_40_e21_B40__0_Q8_d16_d24_d32l;
            v86 = v1 + 336;
            objc_msgSend(*(id *)(v1 + 72), "setTransportStateBlock:", __dst);
          }
          else
          {
            objc_msgSend(*(id *)(v1 + 72), "setTransportStateBlock:", 0);
          }
LABEL_122:
          v11 = 0;
          goto LABEL_123;
        }
        if ((_DWORD)v2 != 48)
        {
          if ((_DWORD)v2 == 50)
          {
            *(_QWORD *)cf = 0;
            AUv3InstanceBase::setProperty(unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_0::operator()(v80, CFSTR("fullStateForDocument"), (uint64_t)cf);
LABEL_31:
            v11 = *(id *)cf;
LABEL_32:
            if (v11)
            {
              v12 = objc_msgSend(v11, "code");
LABEL_124:

              goto LABEL_125;
            }
LABEL_123:
            v12 = 0;
            goto LABEL_124;
          }
LABEL_42:
          if (gAudioComponentLogCategory)
          {
            v25 = *(os_log_t *)gAudioComponentLogCategory;
          }
          else
          {
            v57 = (_QWORD *)operator new();
            v57[1] = 0;
            v25 = os_log_create("com.apple.coreaudio", "audiocomp");
            *v57 = v25;
            gAudioComponentLogCategory = (uint64_t)v57;
          }
          v58 = objc_retainAutorelease(v25);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)cf = 136316418;
            *(_QWORD *)&cf[4] = "AUv3Instance.mm";
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 1435;
            *(_WORD *)&cf[18] = 1024;
            *(_DWORD *)&cf[20] = (_DWORD)v2;
            *(_WORD *)&cf[24] = 1024;
            *(_DWORD *)&cf[26] = v3;
            *(_WORD *)&cf[30] = 1024;
            LODWORD(v83) = v4;
            WORD2(v83) = 1024;
            *(_DWORD *)((char *)&v83 + 6) = v6;
            _os_log_impl(&dword_18EE07000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid property id %d (scope %d, element %d, size %d)", cf, 0x2Au);
          }
          v11 = 0;
          v12 = 4294956417;
          goto LABEL_124;
        }
LABEL_37:
        v21 = objc_msgSend(*(id *)(v1 + 72), "renderResourcesAllocated");
        if (v21)
        {
          objc_msgSend(*(id *)(v1 + 72), "transportStateBlock");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(v1 + 72), "musicalContextBlock");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(v1 + 72), "deallocateRenderResources");
        }
        else
        {
          v22 = 0;
          v23 = 0;
        }
        if ((_DWORD)v2 == 63)
        {
          v48 = _Block_copy(*(const void **)v5);
          *(_QWORD *)cf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&cf[8] = 3221225472;
          *(_QWORD *)&cf[16] = ___ZN16AUv3InstanceBase11setPropertyEjjjPKvj_block_invoke_2;
          *(_QWORD *)&cf[24] = &unk_1E2920F98;
          v49 = v48;
          *(_QWORD *)&v83 = v49;
          v50 = _Block_copy(cf);
          objc_msgSend(*(id *)(v1 + 72), "setMIDIOutputEventListBlock:", v50);

        }
        else
        {
          if (v6 >= 0x10)
            v6 = 16;
          else
            v6 = v6;
          if (v6 <= 0xF)
            v41 = 16 - v6;
          else
            v41 = 0;
          bzero(&__dst[v6], v41);
          memcpy(__dst, v5, v6);
          v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 216))(v1);
          *(_QWORD *)cf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&cf[8] = 3221225472;
          *(_QWORD *)&cf[16] = ___ZN16AUv3InstanceBase11setPropertyEjjjPKvj_block_invoke;
          *(_QWORD *)&cf[24] = &__block_descriptor_49_e18_i36__0q8C16q20r_28l;
          v84 = v42;
          v83 = *(_OWORD *)__dst;
          v43 = _Block_copy(cf);
          objc_msgSend(*(id *)(v1 + 72), "setMIDIOutputEventBlock:", v43);

        }
        if (v21)
        {
          objc_msgSend(*(id *)(v1 + 72), "setTransportStateBlock:", v22);
          objc_msgSend(*(id *)(v1 + 72), "setMusicalContextBlock:", v23);
          v51 = *(void **)(v1 + 72);
          v79 = 0;
          objc_msgSend(v51, "allocateRenderResourcesAndReturnError:", &v79);
          v52 = v79;
          if (v52)
          {
            v53 = v52;
            if (gAudioComponentLogCategory)
            {
              v54 = *(os_log_t *)gAudioComponentLogCategory;
            }
            else
            {
              v61 = (_QWORD *)operator new();
              v61[1] = 0;
              v54 = os_log_create("com.apple.coreaudio", "audiocomp");
              *v61 = v54;
              gAudioComponentLogCategory = (uint64_t)v61;
            }
            v62 = objc_retainAutorelease(v54);
            if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__dst = 136315650;
              *(_QWORD *)&__dst[4] = "AUv3Instance.mm";
              *(_WORD *)&__dst[12] = 1024;
              *(_DWORD *)&__dst[14] = 1386;
              *(_WORD *)&__dst[18] = 2112;
              *(_QWORD *)&__dst[20] = v53;
              _os_log_impl(&dword_18EE07000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d Error occured while trying to reinitialize AU when setting MIDIOutputBlock: %@", __dst, 0x1Cu);
            }

            v11 = 0;
            v12 = 4294956447;
            goto LABEL_124;
          }
        }

        goto LABEL_122;
      }
      if ((int)v2 > 1841)
      {
        if ((_DWORD)v2 == 1842)
        {
          v11 = 0;
          objc_msgSend(*(id *)(v1 + 72), "setRequestViewControllerSynchronously:", *v5);
          goto LABEL_123;
        }
        if ((_DWORD)v2 == 3503)
        {
          v11 = 0;
          objc_msgSend(*(id *)(v1 + 72), "setLocalCachingDisabled:", *v5);
          goto LABEL_123;
        }
        goto LABEL_42;
      }
      if ((_DWORD)v2 != 56)
      {
        if ((_DWORD)v2 != 63)
          goto LABEL_42;
        goto LABEL_37;
      }
      WeakRetained = objc_loadWeakRetained((id *)v5);
      objc_msgSend(*(id *)(v1 + 72), "requestViewControllerWithCompletionHandler:", WeakRetained);
LABEL_121:

      goto LABEL_122;
    }
    switch((int)v2)
    {
      case 0:
        *(_QWORD *)cf = 0;
        AUv3InstanceBase::setProperty(unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_0::operator()(v80, CFSTR("fullState"), (uint64_t)cf);
        goto LABEL_31;
      case 1:
        goto LABEL_25;
      case 2:
        if (v6 < 8)
          goto LABEL_59;
        if (v3)
          v26 = v4;
        else
          v26 = 0;
        if (v3)
          v27 = v3;
        else
          v27 = 2;
        AUv3InstanceBase::GetBus((id *)v1, v27, v26, &v81);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = v28;
        v12 = v81;
        if (v81)
          goto LABEL_96;
        objc_msgSend(v28, "format");
        v11 = (id)objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          objc_msgSend(v29, "format");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = objc_msgSend(v30, "streamDescription");
          v32 = *(_OWORD *)v31;
          v33 = *(_OWORD *)(v31 + 16);
          *(_QWORD *)&v83 = *(_QWORD *)(v31 + 32);
          *(_OWORD *)cf = v32;
          *(_OWORD *)&cf[16] = v33;

          *(_QWORD *)cf = *(_QWORD *)v5;
          v34 = objc_alloc((Class)getAVAudioFormatClass());
          objc_msgSend(v29, "format");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "channelLayout");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          v37 = (void *)objc_msgSend(v34, "initWithStreamDescription:channelLayout:", cf, v36);

          *(_QWORD *)__dst = 0;
          objc_msgSend(v29, "setFormat:error:", v37, __dst);
          v11 = *(id *)__dst;

          goto LABEL_32;
        }

        v12 = 4294956445;
        goto LABEL_124;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 9:
      case 10:
        goto LABEL_42;
      case 8:
        if (v6 < 0x28)
          goto LABEL_59;
        if (v3)
          v55 = v4;
        else
          v55 = 0;
        if (v3)
          v56 = v3;
        else
          v56 = 2;
        AUv3InstanceBase::GetBus((id *)v1, v56, v55, &v81);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v81;
        if (v81)
          goto LABEL_96;
        v63 = *((_DWORD *)v5 + 7);
        if (v63 < 3)
        {
          v76 = 0;
          goto LABEL_131;
        }
        AVAudioChannelLayoutClass = getAVAudioChannelLayoutClass();
        objc_msgSend(v29, "format");
        v65 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v65, "channelLayout");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        v67 = v63 | 0x930000;
        if (!v66)
          goto LABEL_130;
        objc_msgSend(v65, "channelLayout");
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        v69 = objc_msgSend(v68, "layout");
        if (v5 && v69)
        {
          objc_msgSend(v65, "channelLayout");
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          v78 = AVAudioChannelLayoutClass;
          v71 = objc_msgSend(v70, "channelCount");
          v72 = *((_DWORD *)v5 + 7);

          v73 = v71 == v72;
          AVAudioChannelLayoutClass = v78;
          if (!v73)
            goto LABEL_130;
          objc_msgSend(v65, "channelLayout");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v67 = *(unsigned int *)objc_msgSend(v66, "layout");
        }
        else
        {

        }
LABEL_130:

        objc_msgSend(AVAudioChannelLayoutClass, "layoutWithLayoutTag:", v67);
        v76 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_131:
        v77 = (void *)objc_msgSend(objc_alloc((Class)getAVAudioFormatClass()), "initWithStreamDescription:channelLayout:", v5, v76);
        *(_QWORD *)cf = 0;
        objc_msgSend(v29, "setFormat:error:", v77, cf);
        v11 = *(id *)cf;

        goto LABEL_32;
      case 11:
        if (v6 < 4)
        {
LABEL_59:
          v11 = 0;
          v12 = 4294967246;
          goto LABEL_124;
        }
        v38 = *(unsigned int *)v5;
        if (v3 == 2)
        {
          objc_msgSend(*(id *)(v1 + 72), "outputBusses");
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)cf = 0;
          objc_msgSend(v74, "setBusCount:error:", v38, cf);
          v11 = *(id *)cf;

          goto LABEL_32;
        }
        if (v3 == 1)
        {
          objc_msgSend(*(id *)(v1 + 72), "inputBusses");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)cf = 0;
          objc_msgSend(v39, "setBusCount:error:", v38, cf);
          v11 = *(id *)cf;

          std::vector<AUv3RenderAdapter::AUInputElement>::resize((char **)(v1 + 144), v38);
          goto LABEL_32;
        }
        v11 = 0;
        v12 = 4294956430;
        goto LABEL_124;
      default:
        if ((_DWORD)v2 == 19)
        {
          AUv3InstanceBase::GetBus((id *)v1, v3, v4, &v81);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = v81;
          if (!v81)
          {
            objc_msgSend(getAVAudioChannelLayoutClass(), "layoutWithLayout:", v5);
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            v45 = objc_alloc((Class)getAVAudioFormatClass());
            objc_msgSend(v29, "format");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            v47 = (void *)objc_msgSend(v45, "initWithStreamDescription:channelLayout:", objc_msgSend(v46, "streamDescription"), v44);

            *(_QWORD *)cf = 0;
            objc_msgSend(v29, "setFormat:error:", v47, cf);
            v11 = *(id *)cf;

            goto LABEL_32;
          }
LABEL_96:

        }
        else
        {
          if ((_DWORD)v2 != 23)
            goto LABEL_42;
LABEL_25:
          AUv3InstanceBase::GetBus((id *)v1, v3, v4, &v81);
          WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
          v12 = v81;
          if (!v81)
          {
            v12 = AUv3RenderAdapter::SetProperty((AUv3RenderAdapter *)(v1 + 136), (int)v2, v3, v4, v5, v6);
            v81 = v12;
            if (!(_DWORD)v12)
            {
              v59 = *(_QWORD *)(v1 + 144);
              v60 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v1 + 152) - v59) >> 3) > v4
                 && *(_DWORD *)(v59 + 40 * v4) != 0;
              objc_msgSend(WeakRetained, "setEnabled:", v60);
              goto LABEL_121;
            }
          }

        }
        v11 = 0;
        goto LABEL_124;
    }
  }
  *(_QWORD *)cf = v5;
  *(_DWORD *)__dst = v6;
  (*(void (**)(uint64_t, _BYTE *, _BYTE *, int *))(*(_QWORD *)v10 + 48))(v10, cf, __dst, &v81);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v12 = v81;
  if (!v81)
  {
    if ((v9[2] & 2) != 0)
    {
      AUv3InstanceBase::GetBus((id *)v1, v3, v4, &v81);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = v24;
      v12 = v81;
      if (!v81)
      {
        objc_msgSend(v24, "setValue:forKey:", v11, v9[1]);
        v12 = 0;
      }
    }
    else
    {
      v13 = *(void **)(v1 + 72);
      v14 = (id)v9[1];
      *(_QWORD *)cf = 0;
      objc_msgSend(v13, "_setValue:forKey:error:", v11, v14, cf);
      v15 = *(id *)cf;

      if (!v15)
      {
        v12 = 0;
        goto LABEL_125;
      }
      v12 = objc_msgSend(v15, "code");
    }

  }
LABEL_125:

  return v12;
}

void sub_18EF63814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id AUv3InstanceBase::GetBus(id *this, int a2, unsigned int a3, int *a4)
{
  void *v6;
  void *v7;
  void *v8;

  if (a2 == 2)
  {
    objc_msgSend(this[9], "outputBusses");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (a2 != 1)
    {
      v8 = 0;
      *a4 = -10866;
      return v8;
    }
    objc_msgSend(this[9], "inputBusses");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v7 = v6;
  if (objc_msgSend(v6, "count") <= (unint64_t)a3)
  {
    *a4 = -10877;

    v8 = 0;
  }
  else
  {
    *a4 = 0;
    objc_msgSend(v7, "objectAtIndexedSubscript:");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v8;
}

void sub_18EF63AEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<AUv3RenderAdapter::AUInputElement>::resize(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    v19 = &v4[40 * a2];
    goto LABEL_21;
  }
  v8 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3) >= v7)
  {
    v19 = &v5[40 * v7];
    v20 = 40 * a2 - 8 * ((v5 - *a1) >> 3);
    do
    {
      *(_DWORD *)v5 = 0;
      v5 += 40;
      v20 -= 40;
    }
    while (v20);
LABEL_21:
    a1[1] = v19;
    return;
  }
  if (a2 > 0x666666666666666)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3);
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0x333333333333333)
    v11 = 0x666666666666666;
  else
    v11 = v10;
  if (v11 > 0x666666666666666)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = (char *)operator new(40 * v11);
  v13 = &v12[40 * v6];
  v14 = v13;
  v15 = 40 * a2 - 40 * v6;
  do
  {
    *(_DWORD *)v14 = 0;
    v14 += 40;
    v15 -= 40;
  }
  while (v15);
  v16 = *a1;
  if (v5 != *a1)
  {
    do
    {
      v17 = *(_OWORD *)(v5 - 40);
      v18 = *(_OWORD *)(v5 - 24);
      *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
      *(_OWORD *)(v13 - 24) = v18;
      *(_OWORD *)(v13 - 40) = v17;
      v13 -= 40;
      v5 -= 40;
    }
    while (v5 != v16);
    v5 = *a1;
  }
  *a1 = v13;
  a1[1] = &v12[40 * a2];
  a1[2] = &v12[40 * v11];
  if (v5)
    operator delete(v5);
}

id getAVAudioChannelLayoutClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVAudioChannelLayoutClass(void)::softClass;
  v7 = getAVAudioChannelLayoutClass(void)::softClass;
  if (!getAVAudioChannelLayoutClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL28getAVAudioChannelLayoutClassv_block_invoke;
    v3[3] = &unk_1E29222D8;
    v3[4] = &v4;
    ___ZL28getAVAudioChannelLayoutClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18EF63D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVAudioFormatClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVAudioFormatClass(void)::softClass;
  v7 = getAVAudioFormatClass(void)::softClass;
  if (!getAVAudioFormatClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL21getAVAudioFormatClassv_block_invoke;
    v3[3] = &unk_1E29222D8;
    v3[4] = &v4;
    ___ZL21getAVAudioFormatClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18EF63DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN16AUv3InstanceBase11setPropertyEjjjPKvj_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *__src)
{
  double v7;
  BOOL v8;
  uint64_t v9;
  size_t v10;
  int v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  double v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;

  v7 = (double)a2;
  v8 = *(_BYTE *)(a1 + 48) == 0;
  if (*(_BYTE *)(a1 + 48))
    v7 = 0.0;
  v16 = v7;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 1;
  v12 = 1;
  if (v8)
    v9 = 0;
  else
    v9 = a2;
  v13 = v9;
  v14 = a4;
  if (a4 >= 0x100)
    v10 = 256;
  else
    v10 = a4;
  memcpy(&v15, __src, v10);
  return (*(uint64_t (**)(_QWORD, double *, uint64_t, int *))(a1 + 32))(*(_QWORD *)(a1 + 40), &v16, a3, &v12);
}

uint64_t ___ZN16AUv3InstanceBase11setPropertyEjjjPKvj_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void AUv3InstanceBase::setProperty(unsigned int,unsigned int,unsigned int,void const*,unsigned int)::$_0::operator()(CFTypeRef **a1, void *a2, uint64_t a3)
{
  id v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v5 = a2;
  v6 = **a1;
  if (v6)
    CFRetain(**a1);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v6);
  -[CFTypeRef _setValue:forKey:error:](a1[1], "_setValue:forKey:error:", cf, v5, a3);
  if (cf)
    CFRelease(cf);

}

void sub_18EF63F24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);

  _Unwind_Resume(a1);
}

uint64_t ___ZN16AUv3InstanceBase16setHostCallbacksEPK16HostCallbackInfom_block_invoke(uint64_t a1, _QWORD *a2, double *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  _QWORD *v14;
  unsigned int (*v15)(_QWORD, _QWORD *, _QWORD *);
  uint64_t v16;
  _QWORD *v17;
  unsigned int (*v18)(_QWORD, unsigned int *, float *, unsigned int *, _QWORD *);
  float v20;
  unsigned int v21;
  unsigned int v22;

  v14 = *(_QWORD **)(a1 + 32);
  v15 = (unsigned int (*)(_QWORD, _QWORD *, _QWORD *))v14[1];
  if (v15 && !v15(*v14, a5, a2))
  {
    v16 = 1;
  }
  else
  {
    if (a5)
      *a5 = 0;
    v16 = 0;
    if (a2)
      *a2 = 0x405E000000000000;
  }
  v21 = 4;
  v22 = 0;
  v20 = 4.0;
  v17 = *(_QWORD **)(a1 + 32);
  v18 = (unsigned int (*)(_QWORD, unsigned int *, float *, unsigned int *, _QWORD *))v17[2];
  if (v18 && !v18(*v17, &v22, &v20, &v21, a7))
  {
    if (a6)
      *a6 = v22;
    if (a3)
      *a3 = v20;
    if (a4)
      *a4 = v21;
    return 1;
  }
  else
  {
    if (a6)
      *a6 = 0;
    if (a3)
      *a3 = 4.0;
    if (a4)
      *a4 = 0;
    if (a7)
      *a7 = 0;
  }
  return v16;
}

uint64_t ___ZN16AUv3InstanceBase16setHostCallbacksEPK16HostCallbackInfom_block_invoke_2(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  unsigned int (*v7)(_QWORD, char *, __int16 *, char *, uint64_t, __int16 *, uint64_t, uint64_t);
  uint64_t v8;
  unsigned int (*v9)(_QWORD, char *, char *, uint64_t, __int16 *, uint64_t, uint64_t);
  __int16 v11;
  __int16 v12;

  v12 = 0;
  v11 = 0;
  v6 = *(_QWORD **)(a1 + 32);
  v7 = (unsigned int (*)(_QWORD, char *, __int16 *, char *, uint64_t, __int16 *, uint64_t, uint64_t))v6[4];
  if (v7)
  {
    if (!v7(*v6, (char *)&v12 + 1, &v12, (char *)&v11 + 1, a3, &v11, a4, a5))
    {
      if (a2)
      {
        v8 = (2 * (HIBYTE(v12) != 0)) | (4 * ((_BYTE)v12 != 0));
LABEL_10:
        *a2 = v8 | (HIBYTE(v11) != 0) | (8 * ((_BYTE)v11 != 0));
        return 1;
      }
      return 1;
    }
    return 0;
  }
  v9 = (unsigned int (*)(_QWORD, char *, char *, uint64_t, __int16 *, uint64_t, uint64_t))v6[3];
  if (!v9 || v9(*v6, (char *)&v12 + 1, (char *)&v11 + 1, a3, &v11, a4, a5))
    return 0;
  if (a2)
  {
    v8 = 2 * (HIBYTE(v12) != 0);
    goto LABEL_10;
  }
  return 1;
}

void ___ZL21getAVAudioFormatClassv_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFAudioLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioFormat");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAudioFormatClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVAudioFormatClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AVFASoftLink.h"), 64, CFSTR("Unable to find class %s"), "AVAudioFormat");

    __break(1u);
  }
}

void sub_18EF64228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void AVFAudioLibrary(void)
{
  void *v0;
  void *v1;
  void *v2;

  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
    AVFAudioLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AVFAudioLibrary()");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("AVFASoftLink.h"), 63, CFSTR("%s"), 0);

    __break(1u);
    free(v1);
  }
}

void sub_18EF64348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _Unwind_Exception *exception_object)
{
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZL28getAVAudioChannelLayoutClassv_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFAudioLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioChannelLayout");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAudioChannelLayoutClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVAudioChannelLayoutClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AVFASoftLink.h"), 65, CFSTR("Unable to find class %s"), "AVAudioChannelLayout");

    __break(1u);
  }
}

void sub_18EF64430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::GetProperty(unsigned int,unsigned int,unsigned int,void *,unsigned int &)::{lambda(void)#1}>(uint64_t **a1)
{
  uint64_t v1;
  const void *v2;
  unsigned int v3;
  unsigned int v4;
  int *v5;
  uint64_t *v6;
  CFDictionaryRef *v8;
  _BYTE *Value;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  int v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t *v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  AUv3InstanceBase::ParameterMap *v42;
  unsigned int v43;
  uint64_t v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;
  uint64_t *v55;
  void *v56;
  id *v57;
  id *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  BOOL v62;
  id WeakRetained;
  unsigned int v64;
  id v65;
  void *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  void *v73;
  void *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  void *v78;
  int v79;
  void *v80;
  void *v81;
  AVAudioChannelLayout *v82;
  size_t v83;
  void *v84;
  unsigned int v85;
  size_t v86;
  void *v87;
  int v88;
  void *v89;
  id v90;
  id v91;
  unint64_t v92;
  void *v93;
  unint64_t v94;
  int v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t j;
  void *v100;
  unint64_t v101;
  void *v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  void *v108;
  os_log_t v109;
  _QWORD *v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  int v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  BOOL v120;
  uint64_t *v121;
  void *v122;
  void *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _OWORD v129[3];
  __int128 v130;
  int v131;
  void *__src[4];
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v1 = **a1;
  v2 = (const void *)*(unsigned int *)(*a1)[1];
  v3 = *(_DWORD *)(*a1)[2];
  v4 = *(_DWORD *)(*a1)[3];
  v5 = (int *)(*a1)[5];
  v6 = *(uint64_t **)(*a1)[4];
  v131 = 0;
  if (*(_BYTE *)(v1 + 80))
  {
    if ((_DWORD)v2 == 20 || (_DWORD)v2 == 12)
      objc_msgSend(*(id *)(v1 + 72), "flushEventSchedule");
  }
  v8 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v8, v2);
  if (Value)
  {
    v10 = Value;
    if (*((_QWORD *)Value + 6))
    {
      if ((Value[16] & 2) != 0)
      {
        AUv3InstanceBase::GetBus((id *)v1, v3, v4, &v131);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = v22;
        v12 = v131;
        if (v131)
        {

          v11 = 0;
          goto LABEL_191;
        }
        objc_msgSend(v22, "valueForKey:", *((_QWORD *)v10 + 1));
        v11 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        if (v3)
        {
          v11 = 0;
          v12 = 4294956430;
LABEL_191:

          return v12;
        }
        if (v4)
        {
          v11 = 0;
          v12 = 4294956419;
          goto LABEL_191;
        }
        if ((_DWORD)v2 == 29
          && *(_QWORD *)(v1 + 72)
          && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 216))(v1)
          && (objc_msgSend(*(id *)(v1 + 72), "isLoadedInProcess") & 1) == 0)
        {
          if (*v5 >= 4)
          {
            v11 = 0;
            v12 = 0;
            *(_DWORD *)v6 = 0;
            goto LABEL_191;
          }
          v11 = 0;
          goto LABEL_190;
        }
        v105 = *(void **)(v1 + 72);
        v106 = *((id *)v10 + 1);
        +[AUAudioUnitProperty propertyWithKey:v2propID:scope:element:](AUAudioUnitProperty, "propertyWithKey:v2propID:scope:element:", v106, *((unsigned int *)v10 + 5), 0, 0);
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        __src[0] = 0;
        objc_msgSend(v105, "_valueForProperty:error:", v107, __src);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v108 = __src[0];

        if (v108)
        {
          v12 = objc_msgSend(v108, "code");

          goto LABEL_191;
        }
      }
      if (v11)
      {
        v12 = std::function<int ()(objc_object *,void *,unsigned int &)>::operator()((uint64_t)(v10 + 24), v11, (uint64_t)v6, (uint64_t)v5);
        goto LABEL_191;
      }
LABEL_190:
      v12 = 4294956445;
      goto LABEL_191;
    }
  }
  if ((int)v2 <= 26)
  {
    switch((int)v2)
    {
      case 2:
        if (*v5 < 8)
          return 4294967246;
        if (v3)
          v15 = v4;
        else
          v15 = 0;
        if (v3)
          v16 = v3;
        else
          v16 = 2;
        AUv3InstanceBase::GetBus((id *)v1, v16, v15, &v131);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = v17;
        v12 = v131;
        if (v131)
          goto LABEL_186;
        objc_msgSend(v17, "format");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = (uint64_t *)objc_msgSend(v19, "streamDescription");

        if (!v20)
          goto LABEL_175;
        *v6 = *v20;
        v21 = 8;
        goto LABEL_111;
      case 3:
        AUv3InstanceBase::ParameterMap::paramIDsForScope((AUv3InstanceBase::ParameterMap *)__src, (AUv3InstanceBase::ParameterMap *)(v1 + 200), v3);
        v84 = __src[0];
        v85 = (LODWORD(__src[1]) - LODWORD(__src[0])) & 0xFFFFFFFC;
        if (v85 >= *v5)
          v86 = *v5;
        else
          v86 = v85;
        memcpy(v6, __src[0], v86);
        *v5 = v86;
        if (v84)
          operator delete(v84);
        return 0;
      case 4:
        if (*v5 < 0x64)
          return 4294967246;
        AUv3InstanceBase::ParameterMap::checkCacheParameters(v1 + 200);
        v137 = 0;
        v135 = 0u;
        v136 = 0u;
        v133 = 0u;
        v134 = 0u;
        memset(__src, 0, sizeof(__src));
        memset((char *)v129 + 8, 0, 40);
        *(_QWORD *)&v129[0] = v3;
        DWORD2(v129[0]) = v4;
        v58 = *(id **)(v1 + 224);
        v57 = *(id **)(v1 + 232);
        if (v57 == v58)
          goto LABEL_94;
        v59 = 0xAAAAAAAAAAAAAAABLL * (((char *)v57 - (char *)v58) >> 4);
        break;
      case 8:
        if (*v5 < 0x28)
          return 4294967246;
        if (v3)
          v71 = v4;
        else
          v71 = 0;
        if (v3)
          v72 = v3;
        else
          v72 = 2;
        AUv3InstanceBase::GetBus((id *)v1, v72, v71, &v131);
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = v73;
        v12 = v131;
        if (v131)
          goto LABEL_186;
        objc_msgSend(v73, "format");
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        v75 = objc_msgSend(v74, "streamDescription");

        if (!v75)
        {
LABEL_175:
          v12 = 4294956445;
          goto LABEL_186;
        }
        v76 = *(_OWORD *)v75;
        v77 = *(_OWORD *)(v75 + 16);
        v6[4] = *(_QWORD *)(v75 + 32);
        *(_OWORD *)v6 = v76;
        *((_OWORD *)v6 + 1) = v77;
        v21 = 40;
LABEL_111:
        *v5 = v21;
        goto LABEL_38;
      case 11:
        if (*v5 < 4)
          return 4294967246;
        if (v3)
        {
          if (v3 == 2)
          {
            objc_msgSend(*(id *)(v1 + 72), "outputBusses");
            v78 = (void *)objc_claimAutoreleasedReturnValue();
            v79 = objc_msgSend(v78, "count");
          }
          else
          {
            if (v3 != 1)
              return 4294956430;
            objc_msgSend(*(id *)(v1 + 72), "inputBusses");
            v78 = (void *)objc_claimAutoreleasedReturnValue();
            v79 = objc_msgSend(v78, "count");
          }
          *(_DWORD *)v6 = v79;

        }
        else
        {
          *(_DWORD *)v6 = 1;
        }
        v12 = 0;
        *v5 = 4;
        return v12;
      case 13:
        objc_msgSend(*(id *)(v1 + 72), "channelCapabilities");
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = v87;
        if (!v87)
          goto LABEL_161;
        v88 = objc_msgSend(v87, "count");
        if (*v5 < (2 * v88))
        {
          v12 = 4294967246;
          goto LABEL_186;
        }
        if (v88 >= 1)
        {
          v112 = 0;
          v113 = v88;
          do
          {
            objc_msgSend(v18, "objectAtIndexedSubscript:", v112);
            v114 = (void *)objc_claimAutoreleasedReturnValue();
            *((_WORD *)v6 + v112) = objc_msgSend(v114, "shortValue");

            ++v112;
          }
          while (v113 != v112);
        }
        goto LABEL_38;
      case 16:
        if (*v5 < 8)
          return 4294967246;
        AUv3InstanceBase::ParameterMap::findParameterByScopeElementID((AUv3InstanceBase::ParameterMap *)(v1 + 200), v3, 0, v4);
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = v89;
        if (v89)
        {
          objc_msgSend(v89, "valueStrings");
          v90 = (id)objc_claimAutoreleasedReturnValue();
          if (v90)
          {

            v91 = v90;
            goto LABEL_163;
          }
LABEL_161:
          v12 = 4294956417;
        }
        else
        {
LABEL_160:
          v12 = 4294956418;
        }
        goto LABEL_186;
      case 19:
        AUv3InstanceBase::GetBus((id *)v1, v3, v4, &v131);
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = v80;
        v12 = v131;
        if (v131)
          goto LABEL_186;
        objc_msgSend(v80, "format");
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v81, "channelLayout");
        v82 = (AVAudioChannelLayout *)objc_claimAutoreleasedReturnValue();

        if (v82)
        {
          v83 = layoutSize(v82);
          if (v83 <= *v5)
          {
            memcpy(v6, -[AVAudioChannelLayout layout](v82, "layout"), v83);
            *v5 = v83;

            goto LABEL_38;
          }
          v12 = 4294967246;
        }
        else
        {
          v12 = 4294956445;
        }

LABEL_186:
        return v12;
      default:
        goto LABEL_158;
    }
    while (1)
    {
      v60 = v59 >> 1;
      v61 = (unsigned int *)&v58[6 * (v59 >> 1)];
      v62 = *v61 >= v3;
      if (*v61 != v3)
        goto LABEL_91;
      if (!HIDWORD(v58[6 * v60]))
        break;
LABEL_93:
      v59 = v60;
      if (!v60)
      {
LABEL_94:
        if (v58 == v57 || *(_DWORD *)v58 != v3 || *((_DWORD *)v58 + 1) || *((_DWORD *)v58 + 2) != v4)
        {
          objc_destroyWeak((id *)&v129[1]);
        }
        else
        {
          WeakRetained = objc_loadWeakRetained(v58 + 2);
          v64 = *((_DWORD *)v58 + 10);
          objc_destroyWeak((id *)&v129[1]);
          if (WeakRetained)
          {
            v65 = objc_loadWeakRetained((id *)(v1 + 200));
            objc_msgSend(v65, "parameterTree", v129[0], v129[1], v129[2]);
            v66 = (void *)objc_claimAutoreleasedReturnValue();
            v67 = objc_msgSend(v66, "_autoCreatedForV2AU");

            objc_msgSend(WeakRetained, "unitName");
            *((_QWORD *)&v134 + 1) = objc_claimAutoreleasedReturnValue();

            LODWORD(v136) = objc_msgSend(WeakRetained, "unit");
            objc_msgSend(WeakRetained, "minValue");
            DWORD1(v136) = v68;
            objc_msgSend(WeakRetained, "maxValue");
            DWORD2(v136) = v69;
            if (v67)
              objc_msgSend(WeakRetained, "_defaultValue");
            else
              objc_msgSend(WeakRetained, "value");
            HIDWORD(v136) = v70;
            v116 = objc_msgSend(WeakRetained, "flags");
            LODWORD(v137) = v116 | 0x8000000;
            LODWORD(v135) = v64;
            v117 = *(_QWORD *)(v1 + 304);
            if (v117)
            {
              v118 = v1 + 304;
              do
              {
                v119 = *(_DWORD *)(v117 + 32);
                v120 = v119 >= v64;
                if (v119 >= v64)
                  v121 = (uint64_t *)v117;
                else
                  v121 = (uint64_t *)(v117 + 8);
                if (v120)
                  v118 = v117;
                v117 = *v121;
              }
              while (*v121);
              if (v118 != v1 + 304 && v64 >= *(_DWORD *)(v118 + 32))
                LODWORD(v137) = v116 | 0x8100000;
            }
            objc_msgSend(WeakRetained, "displayName");
            v122 = (void *)objc_claimAutoreleasedReturnValue();
            v123 = v122;
            if (v122)
            {
              *((_QWORD *)&v135 + 1) = v122;
              stpncpy((char *)__src, (const char *)objc_msgSend(objc_retainAutorelease(v122), "UTF8String"), 0x34uLL);
            }
            else
            {
              *((_QWORD *)&v135 + 1) = &stru_1E2923288;
            }

            v12 = 0;
            v124 = *(_OWORD *)__src;
            v125 = v133;
            *((_OWORD *)v6 + 1) = *(_OWORD *)&__src[2];
            *((_OWORD *)v6 + 2) = v125;
            *(_OWORD *)v6 = v124;
            v126 = v134;
            v127 = v135;
            v128 = v136;
            v6[12] = v137;
            *((_OWORD *)v6 + 4) = v127;
            *((_OWORD *)v6 + 5) = v128;
            *((_OWORD *)v6 + 3) = v126;
            return v12;
          }
        }
        return 4294956418;
      }
    }
    v62 = LODWORD(v58[6 * v60 + 1]) >= v4;
LABEL_91:
    if (!v62)
    {
      v58 = (id *)(v61 + 12);
      v60 = v59 + ~v60;
    }
    goto LABEL_93;
  }
  if ((int)v2 <= 56)
  {
    switch((int)v2)
    {
      case 27:
        if (*v5 < 0x28)
          return 4294967246;
        v12 = 0;
        v13 = *(_OWORD *)(v1 + 336);
        v14 = *(_OWORD *)(v1 + 352);
        v6[4] = *(_QWORD *)(v1 + 368);
        *(_OWORD *)v6 = v13;
        *((_OWORD *)v6 + 1) = v14;
        return v12;
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 36:
      case 37:
        goto LABEL_158;
      case 33:
        if (*v5 < 0x18)
          return 4294967246;
        v37 = *(_DWORD *)v6;
        v38 = v6[1];
        v6[2] = 0;
        AUv3InstanceBase::ParameterMap::findParameterByScopeElementID((AUv3InstanceBase::ParameterMap *)(v1 + 200), v3, 0, v37);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = v39;
        if (!v39)
          goto LABEL_160;
        objc_msgSend(v39, "stringFromValue:", v38);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = v40;
        if (v40)
          v6[2] = (uint64_t)v40;

        v12 = 0;
        goto LABEL_186;
      case 34:
        if (*v5 < 0x10)
          return 4294967246;
        v42 = (AUv3InstanceBase::ParameterMap *)(v1 + 200);
        v43 = *(_DWORD *)v6;
        v44 = *((int *)v6 + 1);
        v45 = objc_loadWeakRetained((id *)(v1 + 200));
        objc_msgSend(v45, "parameterTree");
        v18 = (id)objc_claimAutoreleasedReturnValue();

        v6[1] = 0;
        AUv3InstanceBase::ParameterMap::findParameterByScopeElementID(v42, v3, 0, v43);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = v46;
        if (v46)
        {
          objc_msgSend(v46, "displayNameWithLength:", v44);
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          v49 = v48;
          if (v48)
          {
            v12 = 0;
            v6[1] = (uint64_t)v48;
          }
          else
          {
            v12 = 4294956417;
          }

        }
        else
        {
          v12 = 4294956418;
        }

        goto LABEL_186;
      case 35:
        if (*v5 < 0x10)
          return 4294967246;
        v50 = *(_DWORD *)v6;
        AUv3InstanceBase::ParameterMap::checkCacheParameters(v1 + 200);
        v6[1] = 0;
        v51 = *(_QWORD *)(v1 + 304);
        if (!v51)
          return 4294967246;
        v52 = v1 + 304;
        do
        {
          v53 = *(_DWORD *)(v51 + 32);
          v54 = v53 >= v50;
          if (v53 >= v50)
            v55 = (uint64_t *)v51;
          else
            v55 = (uint64_t *)(v51 + 8);
          if (v54)
            v52 = v51;
          v51 = *v55;
        }
        while (*v55);
        if (v52 == v1 + 304 || *(_DWORD *)(v52 + 32) > v50)
          return 4294967246;
        v18 = *(id *)(v52 + 40);
        objc_msgSend(v18, "displayName");
        v56 = (void *)objc_claimAutoreleasedReturnValue();

        if (v56)
        {
          objc_msgSend(v18, "displayName");
          v6[1] = objc_claimAutoreleasedReturnValue();
        }
        goto LABEL_38;
      case 38:
        if (*v5 < 0x18)
          return 4294967246;
        v33 = *(_DWORD *)v6;
        v34 = v6[1];
        *((_DWORD *)v6 + 4) = 0;
        AUv3InstanceBase::ParameterMap::findParameterByScopeElementID((AUv3InstanceBase::ParameterMap *)(v1 + 200), v3, 0, v33);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = v35;
        if (!v35)
          goto LABEL_160;
        objc_msgSend(v35, "valueFromString:", v34);
        v12 = 0;
        *((_DWORD *)v6 + 4) = v36;
        goto LABEL_186;
      default:
        if ((_DWORD)v2 != 45)
          goto LABEL_158;
        AUv3InstanceBase::ParameterMap::findParameterByScopeElementID((AUv3InstanceBase::ParameterMap *)(v1 + 200), v3, 0, v4);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = v26;
        if (!v26)
          return 4294967246;
        v130 = 0u;
        memset(v129, 0, sizeof(v129));
        objc_msgSend(v26, "dependentParameters", 0);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", v129, __src, 16);
        if (v29)
        {
          v30 = **(_QWORD **)&v129[1];
          do
          {
            for (i = 0; i != v29; ++i)
            {
              if (**(_QWORD **)&v129[1] != v30)
                objc_enumerationMutation(v28);
              v32 = objc_msgSend(*(id *)(*((_QWORD *)&v129[0] + 1) + 8 * i), "unsignedLongLongValue");
              *(_DWORD *)v6 = v32 >> 61;
              *((_DWORD *)v6++ + 1) = v32;
            }
            v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", v129, __src, 16);
          }
          while (v29);
        }

        return 0;
    }
  }
  if ((int)v2 <= 3500)
  {
    if ((_DWORD)v2 != 57)
    {
      if ((_DWORD)v2 == 1849)
      {
        v12 = 0;
        *v6 = *(_QWORD *)(v1 + 72);
        return v12;
      }
      if ((_DWORD)v2 == 2015)
      {
        objc_msgSend(*(id *)(v1 + 72), "osWorkgroup");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = v24;
        if (v24)
          v25 = v24;
        *v6 = (uint64_t)v18;
LABEL_38:

        return 0;
      }
LABEL_158:
      if (gAudioComponentLogCategory)
      {
        v109 = *(os_log_t *)gAudioComponentLogCategory;
      }
      else
      {
        v110 = (_QWORD *)operator new();
        v110[1] = 0;
        v109 = os_log_create("com.apple.coreaudio", "audiocomp");
        *v110 = v109;
        gAudioComponentLogCategory = (uint64_t)v110;
      }
      v111 = objc_retainAutorelease(v109);
      if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__src[0]) = 136316162;
        *(void **)((char *)__src + 4) = "AUv3Instance.mm";
        WORD2(__src[1]) = 1024;
        *(_DWORD *)((char *)&__src[1] + 6) = 1196;
        WORD1(__src[2]) = 1024;
        HIDWORD(__src[2]) = (_DWORD)v2;
        LOWORD(__src[3]) = 1024;
        *(_DWORD *)((char *)&__src[3] + 2) = v3;
        HIWORD(__src[3]) = 1024;
        LODWORD(v133) = v4;
        _os_log_impl(&dword_18EE07000, v111, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid property id %d (scope %d, element %d)", (uint8_t *)__src, 0x24u);
      }
      return 4294956417;
    }
    v92 = *v5 / 0x18uLL;
    objc_msgSend(*(id *)(v1 + 72), "parametersForOverviewWithCount:", v92);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    v94 = objc_msgSend(v93, "count");
    if (v94 >= v92)
      v95 = v92;
    else
      v95 = v94;
    *v5 = 24 * v95;
    v130 = 0u;
    memset(v129, 0, sizeof(v129));
    v96 = v93;
    v97 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", v129, __src, 16);
    if (v97)
    {
      v98 = **(_QWORD **)&v129[1];
      do
      {
        for (j = 0; j != v97; ++j)
        {
          if (**(_QWORD **)&v129[1] != v98)
            objc_enumerationMutation(v96);
          v100 = *(void **)(*((_QWORD *)&v129[0] + 1) + 8 * j);
          *v6 = *(_QWORD *)(v1 + 40);
          v101 = objc_msgSend(v100, "unsignedLongLongValue", *(_QWORD *)&v129[0]);
          *((_DWORD *)v6 + 3) = v101 >> 61;
          *((_DWORD *)v6 + 4) = HIDWORD(v101) & 0x1FFFFFFF;
          *((_DWORD *)v6 + 2) = v101;
          v6 += 3;
        }
        v97 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", v129, __src, 16);
      }
      while (v97);
    }

    return 0;
  }
  if ((_DWORD)v2 == 3501)
  {
    if (*v5 >= 8)
    {
      objc_msgSend(*(id *)(v1 + 72), "XPCListenerEndpoint");
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v102, "_endpoint");
      v103 = (void *)objc_claimAutoreleasedReturnValue();

      if (v103)
        v104 = v103;
      *v6 = (uint64_t)v103;

      return 0;
    }
    return 4294967246;
  }
  if ((_DWORD)v2 != 3502)
  {
    if ((_DWORD)v2 != 3503)
      goto LABEL_158;
    if (*v5)
    {
      v12 = 0;
      *(_BYTE *)v6 = objc_msgSend(*(id *)(v1 + 72), "isLocalCachingDisabled");
      return v12;
    }
    return 4294967246;
  }
  if (*v5 < 8)
    return 4294967246;
  objc_msgSend(*(id *)(v1 + 72), "audioUnitInstanceUUID");
  v91 = (id)objc_claimAutoreleasedReturnValue();
LABEL_163:
  v12 = 0;
  *v6 = (uint64_t)v91;
  return v12;
}

void sub_18EF651E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::function<int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  id v10;

  v9 = a3;
  v10 = a2;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  v7 = (*(uint64_t (**)(uint64_t, id *, uint64_t *, uint64_t))(*(_QWORD *)v6 + 48))(v6, &v10, &v9, a4);

  return v7;
}

void sub_18EF653F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t layoutSize(AVAudioChannelLayout *a1)
{
  AVAudioChannelLayout *v1;
  uint64_t v2;

  v1 = a1;
  if (-[AVAudioChannelLayout layout](v1, "layout"))
  {
    if (*(_DWORD *)-[AVAudioChannelLayout layout](v1, "layout"))
      v2 = 12;
    else
      v2 = 20 * -[AVAudioChannelLayout layout](v1, "layout")[8] + 12;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_18EF65474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AUv3InstanceBase::ParameterMap::paramIDsForScope(AUv3InstanceBase::ParameterMap *this, AUv3InstanceBase::ParameterMap *a2, unsigned int a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int v23;
  _OWORD v24[2];

  AUv3InstanceBase::ParameterMap::checkCacheParameters((uint64_t)a2);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  memset(v24, 0, sizeof(v24));
  v7 = (char *)*((_QWORD *)a2 + 6);
  v6 = (char *)*((_QWORD *)a2 + 7);
  if (v6 != v7)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4);
    do
    {
      v9 = v8 >> 1;
      v10 = &v7[48 * (v8 >> 1)];
      v11 = *(_DWORD *)v10;
      if (*(_DWORD *)v10 != a3)
      {
        v12 = v10 + 48;
        v13 = v8 + ~v9;
        if (v11 < a3)
        {
          v9 = v13;
          v7 = v12;
        }
      }
      v8 = v9;
    }
    while (v9);
  }
  if (v7 < v6)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      if (*(_DWORD *)v7 != a3 || *((_DWORD *)v7 + 1))
        break;
      if (v16 >= v15)
      {
        v18 = (v16 - v14) >> 2;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if ((v15 - v14) >> 1 > v19)
          v19 = (v15 - v14) >> 1;
        v20 = (char *)((unint64_t)(v15 - v14) >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v19);
        if (v20)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((unint64_t)v20);
        else
          v21 = 0;
        v22 = &v20[4 * v18];
        *(_DWORD *)v22 = *((_DWORD *)v7 + 2);
        v17 = v22 + 4;
        while (v16 != v14)
        {
          v23 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        v15 = &v20[4 * v21];
        *(_QWORD *)this = v22;
        *((_QWORD *)this + 1) = v17;
        *((_QWORD *)this + 2) = v15;
        if (v14)
          operator delete(v14);
        v14 = v22;
      }
      else
      {
        *(_DWORD *)v16 = *((_DWORD *)v7 + 2);
        v17 = v16 + 4;
      }
      *((_QWORD *)this + 1) = v17;
      v7 += 48;
      v16 = v17;
    }
    while ((unint64_t)v7 < *((_QWORD *)a2 + 7));
  }
  objc_destroyWeak((id *)v24);
}

void sub_18EF65634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  objc_destroyWeak((id *)va);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::GetPropertyInfo(unsigned int,unsigned int,unsigned int,unsigned int &,unsigned char &)::{lambda(void)#1}>(uint64_t **a1)
{
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  char *v6;
  CFDictionaryRef *v7;
  id *Value;
  id *v9;
  objc_class *v10;
  objc_class *v11;
  objc_selector **v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  unsigned int v24;
  int v25;
  id v26;
  void *v27;
  unsigned int v28;
  int v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  char v35;
  os_log_t v36;
  void *v37;
  NSObject *v38;
  void *v39;
  AVAudioChannelLayout *v40;
  _QWORD *v41;
  void *v43;
  int v44;
  _BYTE __p[12];
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v1 = **a1;
  v2 = (const void *)*(unsigned int *)(*a1)[1];
  v3 = *(unsigned int *)(*a1)[2];
  v4 = *(unsigned int *)(*a1)[3];
  v5 = (_DWORD *)(*a1)[4];
  v6 = (char *)(*a1)[5];
  v44 = 0;
  v7 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = (id *)CFDictionaryGetValue(*v7, v2);
  if (Value)
  {
    v9 = Value;
    *(_QWORD *)__p = 0;
    v10 = (objc_class *)objc_opt_class();
    v11 = (objc_class *)objc_msgSend(v9[1], "UTF8String");
    AUAudioUnitProperties::accessorsForProperty(v10, v11, 0, (objc_selector **)__p, v12);
    *v6 = objc_opt_respondsToSelector() & 1;
    v13 = (*(uint64_t (**)(id *, _QWORD, uint64_t, unint64_t))*v9)(v9, *(_QWORD *)(v1 + 72), v3, v4);
    v14 = v13;
    if ((v13 & 0xFF00000000) == 0)
      return v14;
    if ((_DWORD)v13)
    {
      *v5 = v13;
      if (((_BYTE)v9[2] & 5) != 0)
        return 0;
      v14 = 0;
LABEL_55:
      *v6 = 0;
      return v14;
    }
    if (v9[6])
    {
      if (((_BYTE)v9[2] & 2) != 0)
      {
        AUv3InstanceBase::GetBus((id *)v1, v3, v4, &v44);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = v21;
        v14 = v44;
        if (v44)
        {

          v15 = 0;
          goto LABEL_95;
        }
        objc_msgSend(v21, "valueForKey:", v9[1]);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        if ((_DWORD)v3)
        {
          v15 = 0;
          v14 = 4294956430;
LABEL_95:

          return v14;
        }
        if ((_DWORD)v4)
        {
          v15 = 0;
          v14 = 4294956419;
          goto LABEL_95;
        }
        objc_msgSend(*(id *)(v1 + 72), "valueForKey:", v9[1]);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
      }
      if (v15)
      {
        *v5 = 0;
        v14 = std::function<int ()(objc_object *,void *,unsigned int &)>::operator()((uint64_t)(v9 + 3), v15, 0, (uint64_t)v5);
      }
      else
      {
        v14 = 4294956445;
      }
      goto LABEL_95;
    }
  }
  if ((int)v2 <= 37)
  {
    switch((int)v2)
    {
      case 1:
      case 23:
        if ((_DWORD)v3 != 1)
          return 4294956430;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v1 + 152) - *(_QWORD *)(v1 + 144)) >> 3) <= v4)
          return 4294956419;
        if ((_DWORD)v2 == 23 || (_DWORD)v2 == 1)
        {
          v14 = 0;
          v17 = 16;
          goto LABEL_72;
        }
        return 4294956417;
      case 2:
        if ((_DWORD)v3)
          v24 = v4;
        else
          v24 = 0;
        if ((_DWORD)v3)
          v25 = v3;
        else
          v25 = 2;
        v26 = AUv3InstanceBase::GetBus((id *)v1, v25, v24, &v44);
        v14 = v44;
        if (!v44)
          goto LABEL_42;
        return v14;
      case 3:
        AUv3InstanceBase::ParameterMap::paramIDsForScope((AUv3InstanceBase::ParameterMap *)__p, (AUv3InstanceBase::ParameterMap *)(v1 + 200), v3);
        v27 = *(void **)__p;
        *v5 = (*(_DWORD *)&__p[8] - *(_DWORD *)__p) & 0xFFFFFFFC;
        *v6 = 0;
        if (v27)
          operator delete(v27);
        return 0;
      case 4:
        v14 = 0;
        v23 = 104;
        goto LABEL_54;
      case 8:
        if ((_DWORD)v3)
          v28 = v4;
        else
          v28 = 0;
        if ((_DWORD)v3)
          v29 = v3;
        else
          v29 = 2;
        v30 = AUv3InstanceBase::GetBus((id *)v1, v29, v28, &v44);
        v14 = v44;
        if (!v44)
          goto LABEL_71;
        return v14;
      case 11:
        if ((v3 - 3) < 0xFFFFFFFE)
          return 4294956430;
        v37 = *(void **)(v1 + 72);
        if ((_DWORD)v3 == 1)
          objc_msgSend(v37, "inputBusses");
        else
          objc_msgSend(v37, "outputBusses");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        *v5 = 4;
        *v6 = objc_msgSend(v43, "isCountChangeable");

        return 0;
      case 13:
        objc_msgSend(*(id *)(v1 + 72), "channelCapabilities");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = v31;
        if (v31)
        {
          *v5 = 2 * objc_msgSend(v31, "count");
          *v6 = 0;

          return 0;
        }
        v38 = objc_retainAutorelease((id)*AudioComponentLogCategory());
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          return 4294956417;
        *(_DWORD *)__p = 136316162;
        *(_QWORD *)&__p[4] = "AUv3Instance.mm";
        v46 = 1024;
        v47 = 767;
        v48 = 1024;
        v49 = 13;
        v50 = 1024;
        v51 = v3;
        v52 = 1024;
        v53 = v4;
        goto LABEL_99;
      case 19:
        AUv3InstanceBase::GetBus((id *)v1, v3, v4, &v44);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = v33;
        v14 = v44;
        if (v44)
        {

          return v14;
        }
        *v6 = 1;
        objc_msgSend(v33, "format");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "channelLayout");
        v40 = (AVAudioChannelLayout *)objc_claimAutoreleasedReturnValue();

        if (v40)
        {
          *v5 = layoutSize(v40);

          return 0;
        }

        v14 = 4294956445;
        break;
      case 27:
        v14 = 0;
LABEL_71:
        v17 = 40;
        goto LABEL_72;
      case 29:
        *v5 = 4;
        if (*(_QWORD *)(v1 + 72) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 216))(v1))
          v35 = objc_msgSend(*(id *)(v1 + 72), "isLoadedInProcess");
        else
          v35 = 1;
        v14 = 0;
        *v6 = v35;
        return v14;
      case 33:
        goto LABEL_40;
      case 34:
      case 35:
        v14 = 0;
        v23 = 16;
        goto LABEL_54;
      default:
        goto LABEL_79;
    }
    return v14;
  }
  if ((int)v2 <= 1841)
  {
    if ((int)v2 <= 55)
    {
      if ((_DWORD)v2 != 38)
      {
        if ((_DWORD)v2 == 45)
        {
          AUv3InstanceBase::ParameterMap::findParameterByScopeElementID((AUv3InstanceBase::ParameterMap *)(v1 + 200), v3, 0, v4);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = v18;
          if (!v18)
            return 4294967246;
          objc_msgSend(v18, "dependentParameters");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          *v5 = 8 * objc_msgSend(v20, "count");

          *v6 = 0;
          return 0;
        }
        goto LABEL_79;
      }
LABEL_40:
      v14 = 0;
      v23 = 24;
LABEL_54:
      *v5 = v23;
      goto LABEL_55;
    }
    if ((_DWORD)v2 != 56)
    {
      if ((_DWORD)v2 == 57)
      {
        v14 = 0;
        *v5 = 0;
        goto LABEL_55;
      }
      goto LABEL_79;
    }
LABEL_41:
    v14 = 0;
LABEL_42:
    v17 = 8;
LABEL_72:
    *v5 = v17;
    *v6 = 1;
    return v14;
  }
  if ((int)v2 > 3500)
  {
    if ((_DWORD)v2 != 3501 && (_DWORD)v2 != 3502)
      goto LABEL_79;
LABEL_38:
    v14 = 0;
    v23 = 8;
    goto LABEL_54;
  }
  if ((_DWORD)v2 == 1842)
    goto LABEL_41;
  if ((_DWORD)v2 == 2015)
    goto LABEL_38;
LABEL_79:
  if (gAudioComponentLogCategory)
  {
    v36 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v41 = (_QWORD *)operator new();
    v41[1] = 0;
    v36 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v41 = v36;
    gAudioComponentLogCategory = (uint64_t)v41;
  }
  v38 = objc_retainAutorelease(v36);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__p = 136316162;
    *(_QWORD *)&__p[4] = "AUv3Instance.mm";
    v46 = 1024;
    v47 = 910;
    v48 = 1024;
    v49 = (int)v2;
    v50 = 1024;
    v51 = v3;
    v52 = 1024;
    v53 = v4;
LABEL_99:
    _os_log_impl(&dword_18EE07000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid property id %d (scope %d, element %d)", __p, 0x24u);
  }
  return 4294956417;
}

void sub_18EF65D18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Reset(unsigned int,unsigned int)::{lambda(void)#1}>(_QWORD *a1)
{
  _DWORD **v1;

  v1 = (_DWORD **)*a1;
  if (**(_DWORD **)*a1)
    return 4294956430;
  if (*v1[1])
    return 4294956419;
  objc_msgSend(*((id *)v1[2] + 9), "reset");
  return 0;
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Uninitialize(void)::{lambda(void)#1}>(uint64_t **a1)
{
  uint64_t v1;

  v1 = **a1;
  if (*(_BYTE *)(v1 + 80))
  {
    objc_msgSend(*(id *)(v1 + 72), "deallocateRenderResources");
    *(_BYTE *)(v1 + 80) = 0;
  }
  return 0;
}

uint64_t caulk::function_ref<int ()(void)>::functor_invoker<AUv3InstanceBase::Initialize(void)::{lambda(void)#1}>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char v4;
  id v5;
  void *v6;
  id v8;

  v1 = **a1;
  if (*(_BYTE *)(v1 + 80))
    return 0;
  v3 = *(void **)(v1 + 72);
  v8 = 0;
  v4 = objc_msgSend(v3, "allocateRenderResourcesAndReturnError:", &v8);
  v5 = v8;
  v6 = v5;
  if ((v4 & 1) != 0)
  {
    AUv3RenderAdapter::initialize((AUv3RenderAdapter *)(v1 + 136), *(AUAudioUnit **)(v1 + 72));
    v2 = 0;
    *(_BYTE *)(v1 + 80) = 1;
  }
  else if (v5)
  {
    v2 = objc_msgSend(v5, "code");
  }
  else
  {
    v2 = 0xFFFFFFFFLL;
  }

  return v2;
}

void sub_18EF65F50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AUv3InstanceBase::ParameterMap::setAudioUnit(AUv3InstanceBase::ParameterMap *this, AUv3InstanceBase *a2, AUAudioUnit *a3)
{
  AUAudioUnit *WeakRetained;
  id v6;
  unint64_t *v7;
  unint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  AUAudioUnit *obj;

  obj = a3;
  WeakRetained = (AUAudioUnit *)objc_loadWeakRetained((id *)this);

  if (WeakRetained != obj)
  {
    v6 = objc_loadWeakRetained((id *)this);
    objc_msgSend(v6, "removeObserver:forKeyPath:context:", *((_QWORD *)this + 9), CFSTR("parameterTree"), 0);

    v7 = (unint64_t *)((char *)this + 88);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(0, v7));
    if (v8)
    {
      v9 = objc_loadWeakRetained((id *)this);
      objc_msgSend(v9, "parameterTree");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "removeParameterObserver:", v8);

    }
    atomic_store(0, (unsigned __int8 *)this + 16);
    v11 = objc_storeWeak((id *)this, obj);
    *((_QWORD *)this + 1) = a2;
    v12 = v11;

    if (obj)
    {
      v13 = objc_loadWeakRetained((id *)this);
      objc_msgSend(v13, "addObserver:forKeyPath:options:context:", *((_QWORD *)this + 9), CFSTR("parameterTree"), 3, 0);

      *((_BYTE *)this + 80) = 1;
    }
  }

}

void sub_18EF6607C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18EF66094(void *a1, int a2)
{
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x18EF66004);
  }
  JUMPOUT(0x18EF66084);
}

void ___ZN16AUv3InstanceBase12ParameterMapC2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id WeakRetained;
  void *v4;
  unint64_t *v5;
  unint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  void **v26;
  char v27;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (void *)MEMORY[0x193FFEC70]();
  os_unfair_recursive_lock_lock_with_options();
  WeakRetained = objc_loadWeakRetained((id *)(v1 + 128));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (unint64_t *)(v1 + 88);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(0, v5));
    if (v6)
      objc_msgSend(WeakRetained, "removeParameterObserver:");
    objc_storeWeak((id *)(v1 + 128), 0);
  }

  atomic_store(0, (unsigned __int8 *)(v1 + 16));
  os_unfair_recursive_lock_unlock();
  v7 = objc_loadWeakRetained((id *)v1);
  objc_msgSend(v7, "parameterTree");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = v8;
    if ((int)objc_msgSend(v9, "_autoCreatedForV2AU") >= 2)
    {
      v10 = *(_QWORD *)(v1 + 8);
      os_unfair_recursive_lock_lock_with_options();
      v23 = 0;
      v24 = 0;
      v11 = *(char **)(v10 + 104);
      v12 = *(char **)(v10 + 112);
      v25 = 0;
      v26 = (void **)&v23;
      v27 = 0;
      v13 = v12 - v11;
      if (v12 != v11)
      {
        if (v13 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v13 >> 4);
        v23 = v14;
        v24 = (char *)v14;
        v25 = (char *)&v14[2 * v15];
        v16 = (char *)v14;
        do
        {
          *(_QWORD *)v16 = *(_QWORD *)v11;
          v17 = *((_QWORD *)v11 + 1);
          *((_QWORD *)v16 + 1) = v17;
          if (v17)
          {
            v18 = (unint64_t *)(v17 + 8);
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          v11 += 16;
          v16 += 16;
        }
        while (v11 != v12);
        v24 = v16;
        v20 = v16 - (char *)v14;
        if (v20)
        {
          v21 = 16 * (v20 >> 4);
          v22 = (char *)(v14 + 1);
          do
          {
            if (!*(_QWORD *)v22 || *(_QWORD *)(*(_QWORD *)v22 + 8))
              (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*((_QWORD *)v22 - 1) + 32))(*(_QWORD *)(*((_QWORD *)v22 - 1) + 40), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v22 - 1) + 8) + 40), *(unsigned int *)(*((_QWORD *)v22 - 1) + 24), 0, 0);
            v22 += 16;
            v21 -= 16;
          }
          while (v21);
        }
      }
      v26 = (void **)&v23;
      std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v26);
      os_unfair_recursive_lock_unlock();
    }

  }
  objc_autoreleasePoolPop(v2);
}

void sub_18EF662A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  os_unfair_recursive_lock_unlock();

  _Unwind_Resume(a1);
}

void AUv3InstanceBase::AUv3InstanceBase(AUv3InstanceBase *this, const AudioComponentDescription *a2)
{
  OSType componentType;
  void *v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  __int128 v10;
  _AUParameterTreeObserver *v11;
  uint64_t v12;
  _QWORD v13[6];

  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = off_1E2904130;
  *((_QWORD *)this + 1) = AUIB_Open;
  *((_QWORD *)this + 2) = AUIB_Close;
  componentType = a2->componentType;
  v4 = AUInstanceBase::LookupMethod_Music;
  if ((int)a2->componentType <= 1635086196)
  {
    v5 = componentType - 1635085670;
    v6 = v5 > 0xF;
    v7 = (1 << v5) & 0x8009;
    if (!v6 && v7 != 0)
      goto LABEL_15;
LABEL_14:
    v4 = AUInstanceBase::LookupMethod;
    goto LABEL_15;
  }
  if (componentType != 1635086957 && componentType != 1635086953)
  {
    if (componentType == 1635086197)
    {
      v4 = AUInstanceBase::LookupMethod_Output;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_15:
  *((_QWORD *)this + 3) = v4;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = off_1E2906710;
  v10 = *(_OWORD *)&a2->componentType;
  *((_DWORD *)this + 16) = a2->componentFlagsMask;
  *((_OWORD *)this + 3) = v10;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_BYTE *)this + 216) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  v11 = objc_alloc_init(_AUParameterTreeObserver);
  *((_QWORD *)this + 34) = v11;
  *((_BYTE *)this + 280) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = (char *)this + 304;
  *((_QWORD *)this + 40) = 0;
  v12 = MEMORY[0x1E0C809B0];
  *((_QWORD *)this + 41) = 0;
  v13[0] = v12;
  v13[1] = 3221225472;
  v13[2] = ___ZN16AUv3InstanceBase12ParameterMapC2Ev_block_invoke;
  v13[3] = &__block_descriptor_40_e5_v8__0l;
  v13[4] = (char *)this + 200;
  -[_AUParameterTreeObserver setCallback:](v11, "setCallback:", v13);
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *(_OWORD *)((char *)this + 364) = 0u;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  if (AUv3InstanceBase::sSelectorsOnce[0] != -1)
    dispatch_once(AUv3InstanceBase::sSelectorsOnce, &__block_literal_global_3658);
}

void sub_18EF664F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  id *v15;
  id *v16;
  id *v17;
  uint64_t v19;

  v17 = v16;
  objc_destroyWeak(v17);
  std::__tree<std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AUParameterGroup * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AUParameterGroup * {__strong}>>>::destroy(*(_QWORD **)(v14 + 304));

  a14 = v14 + 248;
  std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::vector<AUv3InstanceBase::ScopeElementIDObj>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  objc_destroyWeak(v15);

  AUv3RenderAdapter::~AUv3RenderAdapter((AUv3RenderAdapter *)(v14 + 136));
  v19 = *(_QWORD *)(v14 + 128);
  *(_QWORD *)(v14 + 128) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  a14 = v14 + 104;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);

  _Unwind_Resume(a1);
}

IMP ___ZN16AUv3InstanceBaseC2ERK25AudioComponentDescription_block_invoke()
{
  objc_class *v0;
  IMP result;

  AUv3InstanceBase::sSel_SetV2Parameter = (uint64_t)sel_setV2Parameter_value_bufferOffset_sequenceNumber_;
  AUv3InstanceBase::sSel_GetV2Parameter = (uint64_t)sel_getV2Parameter_sequenceNumber_;
  AUv3InstanceBase::sSel_address = (uint64_t)sel_address;
  v0 = (objc_class *)objc_opt_class();
  result = class_getMethodImplementation(v0, (SEL)AUv3InstanceBase::sSel_address);
  AUv3InstanceBase::sAUParameter_address = (uint64_t (*)(_QWORD, _QWORD))result;
  return result;
}

void AUv3InstanceBase::DoOpen(AUv3InstanceBase *this, OpaqueAudioComponentInstance *a2, AUAudioUnit *a3)
{
  id *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  objc_class *v24;
  IMP MethodImplementation;
  uint64_t v26;
  uint64_t v27;
  AUAudioUnit *v28;

  v28 = a3;
  *((_QWORD *)this + 5) = a2;
  v6 = (id *)((char *)this + 72);
  objc_storeStrong((id *)this + 9, a3);
  AUv3InstanceBase::ParameterMap::setAudioUnit((AUv3InstanceBase *)((char *)this + 200), this, v28);
  objc_msgSend(*((id *)this + 9), "renderBlock");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
    AudioComponentInstanceSetNoCanDo((uint64_t)a2, 14);
  AudioComponentInstanceSetNoCanDo((uint64_t)a2, 20);
  AudioComponentInstanceSetNoCanDo((uint64_t)a2, 21);
  -[AUAudioUnit inputBusses](v28, "inputBusses");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  std::vector<AUv3RenderAdapter::AUInputElement>::resize((char **)this + 18, objc_msgSend(v8, "count"));

  objc_msgSend(*v6, "scheduleParameterBlock");
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v9;

  v11 = (void *)*((_QWORD *)this + 22);
  if (v11)
  {
    v12 = objc_msgSend(v11, "copy");
    v13 = (void *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v12;

  }
  objc_msgSend(*v6, "scheduleMIDIEventBlock");
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v14;

  v16 = (void *)*((_QWORD *)this + 23);
  if (v16)
  {
    v17 = objc_msgSend(v16, "copy");
    v18 = (void *)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v17;

  }
  objc_msgSend(*v6, "scheduleMIDIEventListBlock");
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = (void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v19;

  v21 = (void *)*((_QWORD *)this + 24);
  if (v21)
  {
    v22 = objc_msgSend(v21, "copy");
    v23 = (void *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = v22;

  }
  v24 = (objc_class *)objc_opt_class();
  *((_QWORD *)this + 49) = class_getMethodImplementation(v24, (SEL)AUv3InstanceBase::sSel_GetV2Parameter);
  MethodImplementation = class_getMethodImplementation(v24, (SEL)AUv3InstanceBase::sSel_SetV2Parameter);
  *((_QWORD *)this + 48) = MethodImplementation;
  if (!*((_QWORD *)this + 49) || !MethodImplementation)
    std::terminate();
  v26 = *((_QWORD *)this + 5);
  if (v26)
  {
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    if (v27)
      *(_BYTE *)(v27 + 80) = objc_msgSend(*v6, "isLoadedInProcess") ^ 1;
  }

}

void sub_18EF667CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void MP4BoxParser_SampleSize::~MP4BoxParser_SampleSize(MP4BoxParser_SampleSize *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_SampleSize::Init(MP4BoxParser **this)
{
  uint64_t result;
  int v3;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  char v10;
  unsigned int v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!(_DWORD)result)
  {
    v3 = *((_DWORD *)this + 5);
    if (v3 != 1937013298 && v3 != 1937011578)
      return 4294967294;
    v5 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
    result = MP4BoxParser::ReadDataSourceBytes(this[1], v5, 8uLL, v11);
    if (!(_DWORD)result)
    {
      *((_DWORD *)this + 16) = bswap32(v11[1]);
      v6 = *((_DWORD *)this + 6);
      v7 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      if (*((_DWORD *)this + 5) == 1937011578)
      {
        v8 = v11[0];
        *((_DWORD *)this + 15) = bswap32(v11[0]);
        if (v8)
          return 0;
        v10 = 2;
      }
      else
      {
        v9 = HIBYTE(v11[0]);
        *((_DWORD *)this + 15) = HIBYTE(v11[0]);
        if (v9 != 16)
          return 2003334207;
        v10 = 1;
      }
      if (*((_DWORD *)this + 16) <= (v6 - v7 - 8) >> v10)
        return 0;
      else
        return 2003334207;
    }
  }
  return result;
}

uint64_t MP4BoxParser_SampleSize::GetSampleSize(MP4BoxParser_SampleSize *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;

  result = 2003334207;
  if (*((_DWORD *)this + 16) <= a2)
    return result;
  *a3 = 0;
  v7 = *((_DWORD *)this + 15);
  if (*((_DWORD *)this + 5) == 1937011578)
  {
    if (v7)
    {
LABEL_4:
      result = 0;
      *a3 = v7;
      return result;
    }
  }
  else if (v7)
  {
    if (v7 != 16)
      return result;
    v8 = 2;
    goto LABEL_9;
  }
  v8 = 4;
LABEL_9:
  v9 = (*(uint64_t (**)(MP4BoxParser_SampleSize *))(*(_QWORD *)this + 24))(this);
  result = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v8 * a2 + (unint64_t)v9 + 8, v8, &v11);
  if (!(_DWORD)result)
  {
    v10 = *((_DWORD *)this + 15);
    if (v10 == 16)
    {
      v7 = bswap32((unsigned __int16)v11) >> 16;
      goto LABEL_4;
    }
    result = 2003334207;
    if (!v10)
    {
      v7 = bswap32(v11);
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t MP4BoxParser_SampleSize::GetByteCount(MP4BoxParser_SampleSize *this)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v6;

  if (*((_DWORD *)this + 5) == 1937011578)
  {
    v2 = *((_DWORD *)this + 15);
    if (v2)
      return (*((_DWORD *)this + 16) * v2);
  }
  v6 = 0;
  if (*((_DWORD *)this + 16))
  {
    v4 = 0;
    LODWORD(v3) = 0;
    while (!MP4BoxParser_SampleSize::GetSampleSize(this, v4, &v6))
    {
      v3 = v6 + v3;
      if (++v4 >= *((_DWORD *)this + 16))
        return v3;
    }
  }
  return 0;
}

OSStatus AudioFileStreamOpen(void *inClientData, AudioFileStream_PropertyListenerProc inPropertyListenerProc, AudioFileStream_PacketsProc inPacketsProc, AudioFileTypeID inFileTypeHint, AudioFileStreamID *outAudioFileStream)
{
  uint64_t v10;
  uint64_t v11;
  OSStatus v12;

  if (!outAudioFileStream)
    return -50;
  v10 = operator new();
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)v10);
  *(_QWORD *)v10 = &off_1E29089D0;
  *(_DWORD *)(v10 + 12) = inFileTypeHint;
  v11 = operator new();
  *(_DWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 88) = -1;
  *(_QWORD *)(v11 + 96) = -1;
  *(_QWORD *)(v11 + 104) = -1;
  *(_QWORD *)(v11 + 136) = 0;
  *(_DWORD *)(v11 + 144) = 0;
  *(_QWORD *)(v11 + 152) = 0;
  *(_WORD *)(v11 + 176) = 0;
  *(_DWORD *)(v11 + 236) = 0;
  *(_QWORD *)(v11 + 112) = 0;
  *(_QWORD *)(v11 + 120) = 0;
  *(_DWORD *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 184) = 0;
  *(_QWORD *)(v11 + 192) = 0;
  *(_DWORD *)(v11 + 200) = 0;
  *(_QWORD *)(v11 + 208) = 0;
  *(_QWORD *)(v11 + 216) = 0;
  *(_BYTE *)(v11 + 232) = 0;
  *(_QWORD *)(v11 + 224) = 0;
  *(_OWORD *)(v11 + 240) = xmmword_18F116F80;
  *(_DWORD *)(v11 + 256) = 0;
  *(_QWORD *)(v11 + 264) = 0;
  *(_QWORD *)(v11 + 300) = 0;
  *(_QWORD *)(v11 + 284) = 0;
  *(_QWORD *)(v11 + 292) = 0;
  *(_DWORD *)(v11 + 328) = 0;
  *(_QWORD *)(v11 + 312) = 0;
  *(_QWORD *)(v11 + 320) = 0;
  *(_QWORD *)(v10 + 16) = v11;
  *(_QWORD *)(v10 + 112) = 0;
  *(_DWORD *)(v10 + 120) = 0;
  *(_WORD *)(v10 + 152) = 0;
  *(_DWORD *)(v10 + 156) = 0;
  *(_WORD *)(v10 + 160) = 0;
  *(_QWORD *)(v10 + 216) = 0;
  *(_QWORD *)(v10 + 224) = 0;
  *(_QWORD *)(v10 + 232) = 0;
  *(_QWORD *)(v10 + 202) = 0;
  *(_QWORD *)(v10 + 194) = 0;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 68) = 0u;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)(v10 + 96) = 0;
  *(_QWORD *)(v10 + 103) = 0;
  *(_QWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = 0;
  *(_BYTE *)(v10 + 192) = 0;
  *(_QWORD *)(v10 + 176) = 0;
  *(_QWORD *)(v10 + 184) = 0;
  *(_QWORD *)(v10 + 168) = 0;
  *(_QWORD *)v11 = &off_1E2908F28;
  *(_QWORD *)(v11 + 8) = v10;
  bzero((void *)(v10 + 240), 0x98uLL);
  v12 = 0;
  *(_QWORD *)(v10 + 32) = inPacketsProc;
  *(_QWORD *)(v10 + 40) = inClientData;
  *(_QWORD *)(v10 + 24) = inPropertyListenerProc;
  *outAudioFileStream = (AudioFileStreamID)*(unsigned int *)(v10 + 8);
  return v12;
}

void sub_18EF66CE0(void *a1, int a2)
{
  BaseOpaqueObject *v2;

  BaseOpaqueObject::~BaseOpaqueObject(v2);
  MEMORY[0x193FFE460](v2, 0x10F1C40B8FC8A45);
  __cxa_begin_catch(a1);
  if (a2 != 2)
    __cxa_rethrow();
  __cxa_end_catch();
  __break(1u);
}

void sub_18EF66D44(void *a1)
{
  __cxa_end_catch();
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EF66CC8);
}

uint64_t AudioFileStreamPrepareToOpen(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a6)
    return 4294967246;
  v12 = operator new();
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)v12);
  *(_QWORD *)v12 = &off_1E29089D0;
  *(_DWORD *)(v12 + 12) = 0;
  v13 = operator new();
  AudioFileStreamRestrictedRecognizer::AudioFileStreamRestrictedRecognizer(v13, a4, a5);
  *(_QWORD *)(v12 + 16) = v13;
  *(_QWORD *)(v12 + 112) = 0;
  *(_DWORD *)(v12 + 120) = 0;
  *(_WORD *)(v12 + 152) = 0;
  *(_DWORD *)(v12 + 156) = 0;
  *(_WORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 224) = 0;
  *(_QWORD *)(v12 + 232) = 0;
  *(_QWORD *)(v12 + 216) = 0;
  *(_QWORD *)(v12 + 202) = 0;
  *(_QWORD *)(v12 + 194) = 0;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 68) = 0u;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 96) = 0;
  *(_QWORD *)(v12 + 103) = 0;
  *(_QWORD *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 136) = 0;
  *(_BYTE *)(v12 + 192) = 0;
  *(_QWORD *)(v12 + 176) = 0;
  *(_QWORD *)(v12 + 184) = 0;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v12 + 168) = 0;
  bzero((void *)(v12 + 240), 0x98uLL);
  v14 = 0;
  *(_QWORD *)(v12 + 32) = a3;
  *(_QWORD *)(v12 + 40) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  *a6 = *(unsigned int *)(v12 + 8);
  return v14;
}

void sub_18EF66EA8(void *a1, int a2)
{
  BaseOpaqueObject *v2;
  uint64_t v3;

  MEMORY[0x193FFE460](v3, 0x10F3C40BA36BB60);
  BaseOpaqueObject::~BaseOpaqueObject(v2);
  MEMORY[0x193FFE460](v2, 0x10F1C40B8FC8A45);
  __cxa_begin_catch(a1);
  if (a2 != 2)
    __cxa_rethrow();
  __cxa_end_catch();
  __break(1u);
}

void sub_18EF66F30(void *a1)
{
  __cxa_end_catch();
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EF66E8CLL);
}

OSStatus AudioFileStreamParseBytes(AudioFileStreamID inAudioFileStream, UInt32 inDataByteSize, const void *inData, AudioFileStreamParseFlags inFlags)
{
  char v4;
  OSStatus result;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  char v11;
  uint64_t (*v12)(_QWORD *, _OWORD *);
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19;

  v4 = inFlags;
  v19 = *MEMORY[0x1E0C80C00];
  if (inDataByteSize && !inData)
    return -50;
  v8 = BaseOpaqueObject::ResolveOpaqueRef();
  v9 = v8;
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v17[0]) = 136315394;
      *(_QWORD *)((char *)v17 + 4) = "AudioFileStream.cpp";
      WORD6(v17[0]) = 1024;
      *(_DWORD *)((char *)v17 + 14) = 122;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  afsw == NULL", (uint8_t *)v17, 0x12u);
    }
    return -50;
  }
  *(_QWORD *)(v8 + 88) += *(unsigned int *)(v8 + 80);
  *(_QWORD *)(v8 + 72) = inData;
  *(_DWORD *)(v8 + 80) = inDataByteSize;
  if (!inDataByteSize && !inData)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 16))(*(_QWORD *)(v8 + 16));
  for (i = *(_QWORD *)(v8 + 16); ; *(_DWORD *)(i + 236) = 0)
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    v11 = v4 | (*(_BYTE *)(i + 176) != 0);
    *(_BYTE *)(i + 176) = v4 & 1 | (*(_BYTE *)(i + 176) != 0);
    if ((v11 & 1) != 0
      && *(_BYTE *)(*(_QWORD *)(i + 8) + 104)
      && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 216))(i) & 1) != 0)
    {
      break;
    }
    v12 = *(uint64_t (**)(_QWORD *, _OWORD *))(i + 240);
    v13 = *(_QWORD *)(i + 248);
    v14 = (_QWORD *)(i + (v13 >> 1));
    if ((v13 & 1) != 0)
      v12 = *(uint64_t (**)(_QWORD *, _OWORD *))(*v14 + v12);
    result = v12(v14, v17);
    *(_BYTE *)(i + 176) = 0;
    i = *(_QWORD *)&v17[0];
    if (result)
      v15 = 1;
    else
      v15 = *(_QWORD *)&v17[0] == 0;
    if (v15)
      return result;
    v16 = *(_QWORD *)(v9 + 16);
    if (v16 != *(_QWORD *)&v17[0])
    {
      *(_QWORD *)(v9 + 16) = *(_QWORD *)&v17[0];
      *(_QWORD *)(i + 8) = v9;
      if (v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        i = *(_QWORD *)(v9 + 16);
      }
    }
    *(_OWORD *)(i + 240) = *(_OWORD *)((char *)v17 + 8);
  }
  return 1685283617;
}

void sub_18EF6714C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18EF66FA8);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioFileStreamSeek(AudioFileStreamID inAudioFileStream, SInt64 inPacketOffset, SInt64 *outDataByteOffset, AudioFileStreamSeekFlags *ioFlags)
{
  uint64_t v7;
  uint64_t v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!outDataByteOffset)
    return -50;
  v7 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v10 = 136315394;
      v11 = "AudioFileStream.cpp";
      v12 = 1024;
      v13 = 148;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  afsw == NULL", (uint8_t *)&v10, 0x12u);
    }
    return -50;
  }
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
    return (*(uint64_t (**)(uint64_t, SInt64, SInt64 *, AudioFileStreamSeekFlags *))(*(_QWORD *)v8 + 48))(v8, inPacketOffset, outDataByteOffset, ioFlags);
  else
    return 1836020325;
}

void sub_18EF672A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18EF67264);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioFileStreamGetPropertyInfo(AudioFileStreamID inAudioFileStream, AudioFileStreamPropertyID inPropertyID, UInt32 *outPropertyDataSize, Boolean *outWritable)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OSStatus v9;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v6 = *(_QWORD *)&inPropertyID;
  v15 = *MEMORY[0x1E0C80C00];
  v7 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      return (*(uint64_t (**)(_QWORD, uint64_t, UInt32 *, Boolean *))(*(_QWORD *)v8 + 24))(*(_QWORD *)(v7 + 16), v6, outPropertyDataSize, outWritable);
    }
    else if ((_DWORD)v6 == 1869640816)
    {
      if (outPropertyDataSize)
        *outPropertyDataSize = (*(_DWORD *)(v7 + 56) - *(_DWORD *)(v7 + 48)) & 0xFFFFFFFC;
      v9 = 0;
      if (outWritable)
        *outWritable = 1;
    }
    else
    {
      return 1886681407;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v11 = 136315394;
      v12 = "AudioFileStream.cpp";
      v13 = 1024;
      v14 = 172;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  afsw == NULL", (uint8_t *)&v11, 0x12u);
    }
    return -50;
  }
  return v9;
}

void sub_18EF6742C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18EF673F8);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioFileStreamGetProperty(AudioFileStreamID inAudioFileStream, AudioFileStreamPropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  OSStatus result;
  _DWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  result = -50;
  if (ioPropertyDataSize)
  {
    v5 = outPropertyData;
    if (outPropertyData)
    {
      v7 = *(_QWORD *)&inPropertyID;
      v8 = BaseOpaqueObject::ResolveOpaqueRef();
      v9 = v8;
      if (v8)
      {
        if ((_DWORD)v7 == 1869640816)
        {
          bzero(v5, *ioPropertyDataSize);
          v10 = (unint64_t)*ioPropertyDataSize >> 2;
          v11 = *(int **)(v9 + 48);
          v12 = (uint64_t)(*(_QWORD *)(v9 + 56) - (_QWORD)v11) >> 2;
          if (v12 >= v10)
            v13 = v10;
          else
            v13 = v12;
          *ioPropertyDataSize = 4 * v13;
          if ((_DWORD)v13)
          {
            do
            {
              v14 = *v11++;
              *v5++ = v14;
              --v13;
            }
            while (v13);
          }
          return 0;
        }
        else
        {
          v15 = *(_QWORD *)(v8 + 16);
          if (v15)
            return (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *, _DWORD *))(*(_QWORD *)v15 + 32))(v15, v7, ioPropertyDataSize, v5);
          else
            return 1886681407;
        }
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          v16 = 136315394;
          v17 = "AudioFileStream.cpp";
          v18 = 1024;
          v19 = 198;
          _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  afsw == NULL", (uint8_t *)&v16, 0x12u);
        }
        return -50;
      }
    }
  }
  return result;
}

void sub_18EF675DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18EF675ACLL);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioFileStreamSetProperty(AudioFileStreamID inAudioFileStream, AudioFileStreamPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  OSStatus v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  int v29;
  const char *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = -50;
  if (inPropertyDataSize && inPropertyData)
  {
    v6 = *(_QWORD *)&inPropertyDataSize;
    v7 = *(_QWORD *)&inPropertyID;
    v8 = BaseOpaqueObject::ResolveOpaqueRef();
    v9 = (_QWORD *)v8;
    if (v8)
    {
      if ((_DWORD)v7 == 1869640816)
      {
        if (v6 >= 4)
        {
          v10 = 0;
          v11 = v6 >> 2;
          v12 = *(char **)(v8 + 56);
          do
          {
            v13 = *((_DWORD *)inPropertyData + v10);
            v14 = (char *)v9[6];
            v15 = (v12 - v14) >> 2;
            if (v12 == v14)
            {
LABEL_11:
              v19 = v9[8];
              if ((unint64_t)v12 >= v19)
              {
                v21 = v15 + 1;
                if ((v15 + 1) >> 62)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v22 = v19 - (_QWORD)v14;
                if (v22 >> 1 > v21)
                  v21 = v22 >> 1;
                if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
                  v23 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v23 = v21;
                if (v23)
                {
                  v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v23);
                  v14 = (char *)v9[6];
                  v12 = (char *)v9[7];
                }
                else
                {
                  v24 = 0;
                }
                v25 = (_DWORD *)(v23 + 4 * v15);
                *v25 = v13;
                v20 = (char *)(v25 + 1);
                while (v12 != v14)
                {
                  v26 = *((_DWORD *)v12 - 1);
                  v12 -= 4;
                  *--v25 = v26;
                }
                v9[6] = v25;
                v9[7] = v20;
                v9[8] = v23 + 4 * v24;
                if (v14)
                  operator delete(v14);
              }
              else
              {
                *(_DWORD *)v12 = v13;
                v20 = v12 + 4;
              }
              v9[7] = v20;
              v12 = v20;
            }
            else
            {
              v16 = 0;
              v17 = 1;
              while (*(_DWORD *)&v14[4 * v16] != v13)
              {
                v16 = v17;
                if (v15 <= v17++)
                  goto LABEL_11;
              }
            }
            ++v10;
          }
          while (v10 != v11);
        }
        return 0;
      }
      else
      {
        v27 = *(_QWORD *)(v8 + 16);
        if (v27)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(_QWORD *)v27 + 40))(v27, v7, v6, inPropertyData);
        else
          return 1886681407;
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v29 = 136315394;
        v30 = "AudioFileStream.cpp";
        v31 = 1024;
        v32 = 223;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  afsw == NULL", (uint8_t *)&v29, 0x12u);
      }
      return -50;
    }
  }
  return v4;
}

void sub_18EF6785C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18EF67818);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioFileStreamClose(AudioFileStreamID inAudioFileStream)
{
  uint64_t v1;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v3 = 136315394;
      v4 = "AudioFileStream.cpp";
      v5 = 1024;
      v6 = 242;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  afsw == NULL", (uint8_t *)&v3, 0x12u);
    }
    return -50;
  }
}

void sub_18EF67978(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18EF6794CLL);
  }
  _Unwind_Resume(a1);
}

void MP4BoxParser_MovieExtendsHeader::~MP4BoxParser_MovieExtendsHeader(MP4BoxParser_MovieExtendsHeader *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_MovieExtendsHeader::Init(MP4BoxParser **this)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;

  result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) != 1835362404)
      return 4294967294;
    if (*((_BYTE *)this + 56) == 1)
    {
      v6 = 0;
      v5 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      result = MP4BoxParser::ReadDataSourceBytes(this[1], v5, 8uLL, &v6);
      if ((_DWORD)result)
        return result;
      v4 = bswap64(v6);
      goto LABEL_10;
    }
    if (!*((_BYTE *)this + 56))
    {
      v7 = 0;
      v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      result = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, &v7);
      if ((_DWORD)result)
        return result;
      v4 = bswap32(v7);
LABEL_10:
      this[8] = (MP4BoxParser *)v4;
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_18EF67BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EF67DD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18EF68034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19)
{
  void *v19;
  std::recursive_mutex *v20;
  void *v21;
  void *v22;
  uint64_t *v24;
  uint64_t v25;

  v24 = a19;
  if (a19 == &a16)
  {
    v25 = 4;
    v24 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_6:

  std::recursive_mutex::unlock(v20);
  _Unwind_Resume(a1);
}

void sub_18EF68300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19)
{
  void *v19;
  std::recursive_mutex *v20;
  void *v21;
  void *v22;
  uint64_t *v24;
  uint64_t v25;

  v24 = a19;
  if (a19 == &a16)
  {
    v25 = 4;
    v24 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_6:

  std::recursive_mutex::unlock(v20);
  _Unwind_Resume(a1);
}

void sub_18EF6859C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19)
{
  void *v19;
  std::recursive_mutex *v20;
  void *v21;
  void *v22;
  uint64_t *v24;
  uint64_t v25;

  v24 = a19;
  if (a19 == &a16)
  {
    v25 = 4;
    v24 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_6:

  std::recursive_mutex::unlock(v20);
  _Unwind_Resume(a1);
}

void sub_18EF6886C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EF68980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EF68A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_18EF68B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::sync_message(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = &off_1E2916260;
  v8[1] = a1;
  v9 = v8;
  v3 = a2;
  *a1 = v3;
  v4 = (uint64_t)v9;
  if (!v9)
    goto LABEL_4;
  if (v9 != v8)
  {
    v4 = (*(uint64_t (**)(void))(*v9 + 16))();
LABEL_4:
    a1[4] = v4;
    goto LABEL_6;
  }
  a1[4] = a1 + 1;
  (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
LABEL_6:

  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_10;
  }
  if (v9)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  a1[5] = 0;
  a1[6] = 0;
  return a1;
}

void sub_18EF68C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  id *v13;
  void *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == &a10)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::sync_proxy(void **a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[4];
  _BYTE v11[24];
  _BYTE *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 1));
  v2 = *a1;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayEE10sync_proxyEv_block_invoke;
  v10[3] = &__block_descriptor_64_ea8_32c69_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayEEEEEE_e17_v16__0__NSError_8l;
  v3 = v11;
  v4 = (uint64_t)v14;
  if (!v14)
    goto LABEL_4;
  if (v14 != v13)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v13[0] + 24))(v13, v11);
LABEL_6:
  objc_msgSend(v2, "synchronousRemoteObjectProxyWithErrorHandler:", v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 == v11)
  {
    v6 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
    v3 = v12;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_11:
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
    goto LABEL_15;
  }
  if (v14)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v5;
}

void sub_18EF68E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v19 = *(_QWORD **)(v17 - 32);
  if (v19 == (_QWORD *)(v17 - 56))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::reply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD aBlock[4];
  _BYTE v9[24];
  _BYTE *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, a1 + 8);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c69_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayEEEEEE_e29_v24__0__NSError_8__NSArray_16l;
  v1 = v9;
  v2 = (uint64_t)v12;
  if (!v12)
    goto LABEL_4;
  if (v12 != v11)
  {
    v2 = (*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
LABEL_4:
    v10 = (_BYTE *)v2;
    goto LABEL_6;
  }
  v10 = v9;
  (*(void (**)(_QWORD *, _BYTE *))(v11[0] + 24))(v11, v9);
LABEL_6:
  v3 = _Block_copy(aBlock);
  if (v10 == v9)
  {
    v4 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_11;
    v4 = 5;
    v1 = v10;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_11:
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
    goto LABEL_15;
  }
  if (v12)
  {
    v6 = 5;
LABEL_15:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v3;
}

void sub_18EF68FCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 32);
  if (v3 == (_QWORD *)(v1 - 56))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 56);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);

}

void sub_18EF69058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c69_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c69_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF69108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSArray * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18EF69154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray *> &&)#1},std::allocator<std::tuple<NSArray *> &>,void ()(NSError,std::tuple<NSArray *>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray *> &&)#1},std::allocator<std::tuple<NSArray *> &>,void ()(NSError,std::tuple<NSArray *>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2916260;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray *> &&)#1},std::allocator<std::tuple<NSArray *> &>,void ()(NSError,std::tuple<NSArray *>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2916260;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray *> &&)#1},std::allocator<std::tuple<NSArray *> &>,void ()(NSError,std::tuple<NSArray *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::async_proxy(void **a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[4];
  _BYTE v11[24];
  _BYTE *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 1));
  v2 = *a1;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEE11async_proxyEv_block_invoke;
  v10[3] = &__block_descriptor_64_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE_e17_v16__0__NSError_8l;
  v3 = v11;
  v4 = (uint64_t)v14;
  if (!v14)
    goto LABEL_4;
  if (v14 != v13)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v13[0] + 24))(v13, v11);
LABEL_6:
  objc_msgSend(v2, "remoteObjectProxyWithErrorHandler:", v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 == v11)
  {
    v6 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
    v3 = v12;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_11:
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
    goto LABEL_15;
  }
  if (v14)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v5;
}

void sub_18EF6937C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v19 = *(_QWORD **)(v17 - 32);
  if (v19 == (_QWORD *)(v17 - 56))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEE11async_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  char v2;

  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

id getAVAudioFormatClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVAudioFormatClass(void)::softClass;
  v7 = getAVAudioFormatClass(void)::softClass;
  if (!getAVAudioFormatClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL21getAVAudioFormatClassv_block_invoke_3776;
    v3[3] = &unk_1E29222D8;
    v3[4] = &v4;
    ___ZL21getAVAudioFormatClassv_block_invoke_3776((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18EF694D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVAudioChannelLayoutClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVAudioChannelLayoutClass(void)::softClass;
  v7 = getAVAudioChannelLayoutClass(void)::softClass;
  if (!getAVAudioChannelLayoutClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL28getAVAudioChannelLayoutClassv_block_invoke_3764;
    v3[3] = &unk_1E29222D8;
    v3[4] = &v4;
    ___ZL28getAVAudioChannelLayoutClassv_block_invoke_3764((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVAudioChannelLayoutClass(void)::softClass;
  v7 = getAVAudioChannelLayoutClass(void)::softClass;
  if (!getAVAudioChannelLayoutClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL28getAVAudioChannelLayoutClassv_block_invoke_7654;
    v3[3] = &unk_1E29222D8;
    v3[4] = &v4;
    ___ZL28getAVAudioChannelLayoutClassv_block_invoke_7654((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVAudioChannelLayoutClass(void)::softClass;
  v7 = getAVAudioChannelLayoutClass(void)::softClass;
  if (!getAVAudioChannelLayoutClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL28getAVAudioChannelLayoutClassv_block_invoke_8034;
    v3[3] = &unk_1E29222D8;
    v3[4] = &v4;
    ___ZL28getAVAudioChannelLayoutClassv_block_invoke_8034((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18EF6958C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL28getAVAudioChannelLayoutClassv_block_invoke_3764(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFAudioLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioChannelLayout");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAudioChannelLayoutClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVAudioChannelLayoutClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AVFASoftLink.h"), 65, CFSTR("Unable to find class %s"), "AVAudioChannelLayout");

    __break(1u);
  }
}

void sub_18EF69668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void AVFAudioLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
    AVFAudioLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AVFAudioLibrary()");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("AVFASoftLink.h"), 63, CFSTR("%s"), 0);

    __break(1u);
    free(v1);
  }
}

{
  void *v0;
  void *v1;
  void *v2;

  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
    AVFAudioLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AVFAudioLibrary()");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("AVFASoftLink.h"), 63, CFSTR("%s"), 0);

    __break(1u);
    free(v1);
  }
}

{
  void *v0;
  void *v1;
  void *v2;

  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
    AVFAudioLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AVFAudioLibrary()");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("AVFASoftLink.h"), 63, CFSTR("%s"), 0);

    __break(1u);
    free(v1);
  }
}

void sub_18EF69788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _Unwind_Exception *exception_object)
{
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZL21getAVAudioFormatClassv_block_invoke_3776(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFAudioLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioFormat");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAudioFormatClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVAudioFormatClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AVFASoftLink.h"), 64, CFSTR("Unable to find class %s"), "AVAudioFormat");

    __break(1u);
  }
}

void sub_18EF69870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EF69944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EF699BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EF69A40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EF69B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_18EF69CC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18EF69E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v12 = v10;

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18EF6A128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v23 = *(_QWORD **)(v21 - 64);
  if (v23 == (_QWORD *)(v21 - 88))
  {
    v24 = 4;
    v23 = (_QWORD *)(v21 - 88);
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_6:
  if (a20 == v20)
  {
    v25 = 4;
  }
  else
  {
    if (!a20)
      goto LABEL_11;
    v25 = 5;
    v20 = a20;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v25))(v20);
LABEL_11:

  a9.super_class = (Class)AUMessageChannel_XPC;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33AUAudioUnitMessageChannelProtocol11objc_objectJEE11async_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  char v2;

  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

uint64_t _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorNS_5tupleIJEEEENS_9allocatorIS8_EEFvS3_OS5_EED1Ev(uint64_t a1)
{

  return a1;
}

void _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorNS_5tupleIJEEEENS_9allocatorIS8_EEFvS3_OS5_EED0Ev(uint64_t a1)
{

  JUMPOUT(0x193FFE460);
}

uint64_t _ZNKSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorNS_5tupleIJEEEENS_9allocatorIS8_EEFvS3_OS5_EE7__cloneEv()
{
  return 0;
}

void *_ZNKSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorNS_5tupleIJEEEENS_9allocatorIS8_EEFvS3_OS5_EE7__cloneEPNS0_6__baseISC_EE(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_1E29135F0;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorNS_5tupleIJEEEENS_9allocatorIS8_EEFvS3_OS5_EE7destroyEv(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorNS_5tupleIJEEEENS_9allocatorIS8_EEFvS3_OS5_EEclEOU8__strongS3_SB_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void sub_18EF6B220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  uint64_t v16;

  operator delete(v15);
  objc_destroyWeak((id *)(v16 - 208));

  _Unwind_Resume(a1);
}

void sub_18EF6B6DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18EF6BB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_18EF6BCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, id a17)
{
  void *v17;
  void *v18;
  uint64_t *v20;
  uint64_t v21;

  v18 = v17;

  v20 = a16;
  if (a16 == &a13)
  {
    v21 = 4;
    v20 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:

  a9.super_class = (Class)AUAudioUnit_XPC;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18EF6BFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18EF6C0AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18EF6C17C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18EF6DD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,void *a22,void *a23,uint64_t a24,std::recursive_mutex *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  void *v61;
  void *v62;

  v61 = *(void **)(v59 + 112);
  if (v61)
  {
    *(_QWORD *)(v59 + 120) = v61;
    operator delete(v61);
  }
  v62 = *(void **)(v59 + 88);
  if (v62)
    operator delete(v62);

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_18EF6E3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, id a16)
{
  void *v16;
  uint64_t *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == &a12)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18EF6E540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
  void *v17;
  void *v18;
  uint64_t *v20;
  uint64_t v21;

  v18 = v17;

  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18EF6E864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18EF6E8F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EF6EA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18EF6EBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18EF6ED44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18EF6EF88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message(v3 - 152);
  _Unwind_Resume(a1);
}

void sub_18EF6F194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19)
{
  void *v19;
  std::recursive_mutex *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t *v25;
  uint64_t v26;

  v25 = a19;
  if (a19 == &a16)
  {
    v26 = 4;
    v25 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:

  std::recursive_mutex::unlock(v20);
  _Unwind_Resume(a1);
}

void sub_18EF6F41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19)
{
  void *v19;
  std::recursive_mutex *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t *v25;
  uint64_t v26;

  v25 = a19;
  if (a19 == &a16)
  {
    v26 = 4;
    v25 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:

  std::recursive_mutex::unlock(v20);
  _Unwind_Resume(a1);
}

void sub_18EF6F690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19)
{
  void *v19;
  std::recursive_mutex *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t *v26;
  uint64_t v27;

  v24 = v22;

  v26 = a19;
  if (a19 == &a16)
  {
    v27 = 4;
    v26 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:

  std::recursive_mutex::unlock(v20);
  _Unwind_Resume(a1);
}

void sub_18EF6F848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EF6FA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::recursive_mutex *a11)
{

  _Unwind_Resume(a1);
}

void sub_18EF70090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  std::mutex *v30;
  id *v31;
  id *v32;
  id *v33;
  id *v34;
  uint64_t v35;

  objc_destroyWeak(v34);
  objc_destroyWeak(v33);
  objc_destroyWeak(v32);
  objc_destroyWeak(v31);
  objc_destroyWeak((id *)(v35 - 208));
  std::mutex::unlock(v30);
  _Unwind_Resume(a1);
}

void sub_18EF70304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, id a14)
{
  void *v14;
  void *v15;
  uint64_t *v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == &a10)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18EF70798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 64);
  if (v12 == (_QWORD *)(v10 - 88))
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 88);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18EF70CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;

  v13 = *(_QWORD **)(v11 - 64);
  if (v13 == (_QWORD *)(v11 - 88))
  {
    v14 = 4;
    v13 = (_QWORD *)(v11 - 88);
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18EF70F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t *v22;
  uint64_t v23;

  v20 = v18;

  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18EF7144C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 80);
  if (v12 == (_QWORD *)(v10 - 104))
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 104);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18EF716AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;
  uint64_t *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18EF71868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;
  uint64_t *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18EF719F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EF71A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18EF71C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == &a10)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18EF71E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;
  uint64_t *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18EF72364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;

  v13 = *(_QWORD **)(v11 - 80);
  if (v13 == (_QWORD *)(v11 - 104))
  {
    v14 = 4;
    v13 = (_QWORD *)(v11 - 104);
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18EF72998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a2);
  v5 = *(_QWORD **)(v3 - 64);
  if (v5 == (_QWORD *)(v3 - 88))
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 88);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18EF72FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a2);
  v6 = *(_QWORD **)(v4 - 64);
  if (v6 == (_QWORD *)(v4 - 88))
  {
    v7 = 4;
    v6 = (_QWORD *)(v4 - 88);
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18EF73280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t *v22;
  uint64_t v23;

  v20 = v18;

  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18EF73468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
  void *v17;
  void *v18;
  void *v19;
  uint64_t *v21;
  uint64_t v22;

  v19 = v17;

  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18EF73620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18EF73754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18EF738A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;
  uint64_t *v18;
  uint64_t v19;

  v16 = v14;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18EF73A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, id a14)
{
  void *v14;
  void *v15;
  uint64_t *v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == &a10)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::sync_message(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = &off_1E2916380;
  v8[1] = a1;
  v9 = v8;
  v3 = a2;
  *(_QWORD *)a1 = v3;
  v4 = (uint64_t)v9;
  if (!v9)
    goto LABEL_4;
  if (v9 != v8)
  {
    v4 = (*(uint64_t (**)(void))(*v9 + 16))();
LABEL_4:
    *(_QWORD *)(a1 + 32) = v4;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 32) = a1 + 8;
  (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
LABEL_6:

  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_10;
  }
  if (v9)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  return a1;
}

void sub_18EF73DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  id *v13;
  void *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == &a10)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::sync_proxy(void **a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[4];
  _BYTE v11[24];
  _BYTE *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 1));
  v2 = *a1;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJbEE10sync_proxyEv_block_invoke;
  v10[3] = &__block_descriptor_64_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJbEEEEEE_e17_v16__0__NSError_8l;
  v3 = v11;
  v4 = (uint64_t)v14;
  if (!v14)
    goto LABEL_4;
  if (v14 != v13)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v13[0] + 24))(v13, v11);
LABEL_6:
  objc_msgSend(v2, "synchronousRemoteObjectProxyWithErrorHandler:", v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 == v11)
  {
    v6 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
    v3 = v12;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_11:
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
    goto LABEL_15;
  }
  if (v14)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v5;
}

void sub_18EF73F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v19 = *(_QWORD **)(v17 - 32);
  if (v19 == (_QWORD *)(v17 - 56))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::reply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD aBlock[4];
  _BYTE v9[24];
  _BYTE *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, a1 + 8);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJbEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJbEEEEEE_e20_v20__0__NSError_8B16l;
  v1 = v9;
  v2 = (uint64_t)v12;
  if (!v12)
    goto LABEL_4;
  if (v12 != v11)
  {
    v2 = (*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
LABEL_4:
    v10 = (_BYTE *)v2;
    goto LABEL_6;
  }
  v10 = v9;
  (*(void (**)(_QWORD *, _BYTE *))(v11[0] + 24))(v11, v9);
LABEL_6:
  v3 = _Block_copy(aBlock);
  if (v10 == v9)
  {
    v4 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_11;
    v4 = 5;
    v1 = v10;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_11:
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
    goto LABEL_15;
  }
  if (v12)
  {
    v6 = 5;
LABEL_15:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v3;
}

void sub_18EF74128(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 32);
  if (v3 == (_QWORD *)(v1 - 56))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 56);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJbEE5replyEv_block_invoke(uint64_t a1, void *a2, char a3)
{
  char v3;

  v3 = a3;
  std::function<void ()(NSError *,std::tuple<BOOL> &&)>::operator()(a1 + 32, a2, (uint64_t)&v3);
}

uint64_t __copy_helper_block_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJbEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJbEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<BOOL> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF74230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJbEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  char v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<BOOL> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL> &&)#1},std::allocator<std::tuple<BOOL> &>,void ()(NSError,std::tuple<BOOL>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL> &&)#1},std::allocator<std::tuple<BOOL> &>,void ()(NSError,std::tuple<BOOL>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2916380;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL> &&)#1},std::allocator<std::tuple<BOOL> &>,void ()(NSError,std::tuple<BOOL>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2916380;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL> &&)#1},std::allocator<std::tuple<BOOL> &>,void ()(NSError,std::tuple<BOOL>)>::operator()(uint64_t a1, id *a2, _BYTE *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  *(_BYTE *)(v6 + 48) = *a3;
}

_QWORD *caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::sync_message(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = &off_1E2916338;
  v8[1] = a1;
  v9 = v8;
  v3 = a2;
  *a1 = v3;
  v4 = (uint64_t)v9;
  if (!v9)
    goto LABEL_4;
  if (v9 != v8)
  {
    v4 = (*(uint64_t (**)(void))(*v9 + 16))();
LABEL_4:
    a1[4] = v4;
    goto LABEL_6;
  }
  a1[4] = a1 + 1;
  (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
LABEL_6:

  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_10;
  }
  if (v9)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  a1[5] = 0;
  a1[6] = 0;
  return a1;
}

void sub_18EF74424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  id *v13;
  void *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == &a10)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::sync_proxy(void **a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[4];
  _BYTE v11[24];
  _BYTE *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 1));
  v2 = *a1;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP8NSStringEE10sync_proxyEv_block_invoke;
  v10[3] = &__block_descriptor_64_ea8_32c70_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP8NSStringEEEEEE_e17_v16__0__NSError_8l;
  v3 = v11;
  v4 = (uint64_t)v14;
  if (!v14)
    goto LABEL_4;
  if (v14 != v13)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v13[0] + 24))(v13, v11);
LABEL_6:
  objc_msgSend(v2, "synchronousRemoteObjectProxyWithErrorHandler:", v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 == v11)
  {
    v6 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
    v3 = v12;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_11:
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
    goto LABEL_15;
  }
  if (v14)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v5;
}

void sub_18EF745C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v19 = *(_QWORD **)(v17 - 32);
  if (v19 == (_QWORD *)(v17 - 56))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::reply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD aBlock[4];
  _BYTE v9[24];
  _BYTE *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, a1 + 8);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP8NSStringEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c70_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP8NSStringEEEEEE_e30_v24__0__NSError_8__NSString_16l;
  v1 = v9;
  v2 = (uint64_t)v12;
  if (!v12)
    goto LABEL_4;
  if (v12 != v11)
  {
    v2 = (*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
LABEL_4:
    v10 = (_BYTE *)v2;
    goto LABEL_6;
  }
  v10 = v9;
  (*(void (**)(_QWORD *, _BYTE *))(v11[0] + 24))(v11, v9);
LABEL_6:
  v3 = _Block_copy(aBlock);
  if (v10 == v9)
  {
    v4 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_11;
    v4 = 5;
    v1 = v10;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_11:
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
    goto LABEL_15;
  }
  if (v12)
  {
    v6 = 5;
LABEL_15:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v3;
}

void sub_18EF74778(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 32);
  if (v3 == (_QWORD *)(v1 - 56))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 56);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP8NSStringEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);

}

void sub_18EF74804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c70_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP8NSStringEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c70_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP8NSStringEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF748B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP8NSStringEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSString * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18EF74900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSString *> &&)#1},std::allocator<std::tuple<NSString *> &>,void ()(NSError,std::tuple<NSString *>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSString *> &&)#1},std::allocator<std::tuple<NSString *> &>,void ()(NSError,std::tuple<NSString *>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2916338;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSString *> &&)#1},std::allocator<std::tuple<NSString *> &>,void ()(NSError,std::tuple<NSString *>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2916338;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSString * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSString *> &&)#1},std::allocator<std::tuple<NSString *> &>,void ()(NSError,std::tuple<NSString *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP21NSXPCListenerEndpointEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSXPCListenerEndpoint * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);

}

void sub_18EF74A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c84_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP21NSXPCListenerEndpointEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c84_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP21NSXPCListenerEndpointEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<NSXPCListenerEndpoint * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF74ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP21NSXPCListenerEndpointEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSXPCListenerEndpoint * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18EF74B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSXPCListenerEndpoint * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSXPCListenerEndpoint *> &&)#1},std::allocator<std::tuple<NSXPCListenerEndpoint *> &>,void ()(NSError,std::tuple<NSXPCListenerEndpoint *>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSXPCListenerEndpoint * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSXPCListenerEndpoint *> &&)#1},std::allocator<std::tuple<NSXPCListenerEndpoint *> &>,void ()(NSError,std::tuple<NSXPCListenerEndpoint *>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2916218;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSXPCListenerEndpoint * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSXPCListenerEndpoint *> &&)#1},std::allocator<std::tuple<NSXPCListenerEndpoint *> &>,void ()(NSError,std::tuple<NSXPCListenerEndpoint *>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2916218;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSXPCListenerEndpoint * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSXPCListenerEndpoint *> &&)#1},std::allocator<std::tuple<NSXPCListenerEndpoint *> &>,void ()(NSError,std::tuple<NSXPCListenerEndpoint *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayIP17AUAudioUnitPresetEEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);

}

void sub_18EF74C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c91_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayIP17AUAudioUnitPresetEEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c91_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayIP17AUAudioUnitPresetEEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF74CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayIP17AUAudioUnitPresetEEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18EF74D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<AUAudioUnitPreset *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> *> &&)#1},std::allocator<std::tuple<NSArray<AUAudioUnitPreset *> *> &>,void ()(NSError,std::tuple<NSArray<AUAudioUnitPreset *> *>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<AUAudioUnitPreset *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> *> &&)#1},std::allocator<std::tuple<NSArray<AUAudioUnitPreset *> *> &>,void ()(NSError,std::tuple<NSArray<AUAudioUnitPreset *> *>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E29162A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<AUAudioUnitPreset *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> *> &&)#1},std::allocator<std::tuple<NSArray<AUAudioUnitPreset *> *> &>,void ()(NSError,std::tuple<NSArray<AUAudioUnitPreset *> *>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E29162A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<AUAudioUnitPreset *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<AUAudioUnitPreset *> *> &&)#1},std::allocator<std::tuple<NSArray<AUAudioUnitPreset *> *> &>,void ()(NSError,std::tuple<NSArray<AUAudioUnitPreset *> *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP12NSDictionaryIP8NSStringP11objc_objectEEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);

}

void sub_18EF74E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c101_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP12NSDictionaryIP8NSStringP11objc_objectEEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c101_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP12NSDictionaryIP8NSStringP11objc_objectEEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF74F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP12NSDictionaryIP8NSStringP11objc_objectEEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18EF74F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSDictionary<NSString *,objc_object *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> *> &&)#1},std::allocator<std::tuple<NSDictionary<NSString *,objc_object *> *> &>,void ()(NSError,std::tuple<NSDictionary<NSString *,objc_object *> *>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSDictionary<NSString *,objc_object *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> *> &&)#1},std::allocator<std::tuple<NSDictionary<NSString *,objc_object *> *> &>,void ()(NSError,std::tuple<NSDictionary<NSString *,objc_object *> *>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2916140;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSDictionary<NSString *,objc_object *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> *> &&)#1},std::allocator<std::tuple<NSDictionary<NSString *,objc_object *> *> &>,void ()(NSError,std::tuple<NSDictionary<NSString *,objc_object *> *>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2916140;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSDictionary<NSString *,objc_object *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary<NSString *,objc_object *> *> &&)#1},std::allocator<std::tuple<NSDictionary<NSString *,objc_object *> *> &>,void ()(NSError,std::tuple<NSDictionary<NSString *,objc_object *> *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP18MIDICIProfileStateEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  std::function<void ()(NSError *,std::tuple<MIDICIProfileState * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);

}

void sub_18EF7508C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c81_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP18MIDICIProfileStateEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c81_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP18MIDICIProfileStateEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<MIDICIProfileState * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF7513C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP18MIDICIProfileStateEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<MIDICIProfileState * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18EF75188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},MIDICIProfileState * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<MIDICIProfileState *> &&)#1},std::allocator<std::tuple<MIDICIProfileState *> &>,void ()(NSError,std::tuple<MIDICIProfileState *>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},MIDICIProfileState * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<MIDICIProfileState *> &&)#1},std::allocator<std::tuple<MIDICIProfileState *> &>,void ()(NSError,std::tuple<MIDICIProfileState *>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E29161D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},MIDICIProfileState * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<MIDICIProfileState *> &&)#1},std::allocator<std::tuple<MIDICIProfileState *> &>,void ()(NSError,std::tuple<MIDICIProfileState *>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E29161D0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},MIDICIProfileState * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<MIDICIProfileState *> &&)#1},std::allocator<std::tuple<MIDICIProfileState *> &>,void ()(NSError,std::tuple<MIDICIProfileState *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP10NSIndexSetEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSIndexSet * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);

}

void sub_18EF752B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c73_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP10NSIndexSetEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c73_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP10NSIndexSetEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<NSIndexSet * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF75360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP10NSIndexSetEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSIndexSet * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18EF753AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSIndexSet * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSIndexSet *> &&)#1},std::allocator<std::tuple<NSIndexSet *> &>,void ()(NSError,std::tuple<NSIndexSet *>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSIndexSet * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSIndexSet *> &&)#1},std::allocator<std::tuple<NSIndexSet *> &>,void ()(NSError,std::tuple<NSIndexSet *>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E29160B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSIndexSet * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSIndexSet *> &&)#1},std::allocator<std::tuple<NSIndexSet *> &>,void ()(NSError,std::tuple<NSIndexSet *>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E29160B0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSIndexSet * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSIndexSet *> &&)#1},std::allocator<std::tuple<NSIndexSet *> &>,void ()(NSError,std::tuple<NSIndexSet *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayIP8NSNumberEEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSArray<NSNumber *> * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);

}

void sub_18EF754D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c81_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayIP8NSNumberEEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c81_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP7NSArrayIP8NSNumberEEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<NSArray<NSNumber *> * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF75580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP7NSArrayIP8NSNumberEEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSArray<NSNumber *> * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18EF755CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<NSNumber *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<NSNumber *> *> &&)#1},std::allocator<std::tuple<NSArray<NSNumber *> *> &>,void ()(NSError,std::tuple<NSArray<NSNumber *> *>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<NSNumber *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<NSNumber *> *> &&)#1},std::allocator<std::tuple<NSArray<NSNumber *> *> &>,void ()(NSError,std::tuple<NSArray<NSNumber *> *>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E29162F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<NSNumber *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<NSNumber *> *> &&)#1},std::allocator<std::tuple<NSArray<NSNumber *> *> &>,void ()(NSError,std::tuple<NSArray<NSNumber *> *>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E29162F0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},NSArray<NSNumber *> * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSArray<NSNumber *> *> &&)#1},std::allocator<std::tuple<NSArray<NSNumber *> *> &>,void ()(NSError,std::tuple<NSArray<NSNumber *> *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::sync_message(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = &off_1E2916410;
  v8[1] = a1;
  v9 = v8;
  v3 = a2;
  *(_QWORD *)a1 = v3;
  v4 = (uint64_t)v9;
  if (!v9)
    goto LABEL_4;
  if (v9 != v8)
  {
    v4 = (*(uint64_t (**)(void))(*v9 + 16))();
LABEL_4:
    *(_QWORD *)(a1 + 32) = v4;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 32) = a1 + 8;
  (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
LABEL_6:

  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_10;
  }
  if (v9)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_18EF757A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  id *v13;
  void *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == &a10)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::sync_proxy(void **a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[4];
  _BYTE v11[24];
  _BYTE *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 1));
  v2 = *a1;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJfEE10sync_proxyEv_block_invoke;
  v10[3] = &__block_descriptor_64_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJfEEEEEE_e17_v16__0__NSError_8l;
  v3 = v11;
  v4 = (uint64_t)v14;
  if (!v14)
    goto LABEL_4;
  if (v14 != v13)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v13[0] + 24))(v13, v11);
LABEL_6:
  objc_msgSend(v2, "synchronousRemoteObjectProxyWithErrorHandler:", v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 == v11)
  {
    v6 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
    v3 = v12;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_11:
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
    goto LABEL_15;
  }
  if (v14)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v5;
}

void sub_18EF7593C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v19 = *(_QWORD **)(v17 - 32);
  if (v19 == (_QWORD *)(v17 - 56))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::reply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD aBlock[4];
  _BYTE v9[24];
  _BYTE *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, a1 + 8);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJfEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJfEEEEEE_e20_v20__0__NSError_8f16l;
  v1 = v9;
  v2 = (uint64_t)v12;
  if (!v12)
    goto LABEL_4;
  if (v12 != v11)
  {
    v2 = (*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
LABEL_4:
    v10 = (_BYTE *)v2;
    goto LABEL_6;
  }
  v10 = v9;
  (*(void (**)(_QWORD *, _BYTE *))(v11[0] + 24))(v11, v9);
LABEL_6:
  v3 = _Block_copy(aBlock);
  if (v10 == v9)
  {
    v4 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_11;
    v4 = 5;
    v1 = v10;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_11:
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
    goto LABEL_15;
  }
  if (v12)
  {
    v6 = 5;
LABEL_15:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v3;
}

void sub_18EF75AF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 32);
  if (v3 == (_QWORD *)(v1 - 56))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 56);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJfEE5replyEv_block_invoke(uint64_t a1, void *a2, float a3)
{
  float v3;

  v3 = a3;
  std::function<void ()(NSError *,std::tuple<float> &&)>::operator()(a1 + 32, a2, (uint64_t)&v3);
}

uint64_t __copy_helper_block_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJfEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJfEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<float> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF75BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJfEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  int v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<float> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<float> &&)#1},std::allocator<std::tuple<float> &>,void ()(NSError,std::tuple<float>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<float> &&)#1},std::allocator<std::tuple<float> &>,void ()(NSError,std::tuple<float>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2916410;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<float> &&)#1},std::allocator<std::tuple<float> &>,void ()(NSError,std::tuple<float>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2916410;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},float>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<float> &&)#1},std::allocator<std::tuple<float> &>,void ()(NSError,std::tuple<float>)>::operator()(uint64_t a1, id *a2, _DWORD *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  *(_DWORD *)(v6 + 48) = *a3;
}

void sub_18EF75E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t *v19;
  uint64_t v20;

  v17 = v15;

  v19 = a13;
  if (a13 == &a10)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18EF75FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18EF76164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t *v20;
  uint64_t v21;

  v18 = v16;

  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18EF76324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP15AUParameterTreeEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  std::function<void ()(NSError *,std::tuple<AUParameterTree * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);

}

void sub_18EF763BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c78_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP15AUParameterTreeEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c78_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP15AUParameterTreeEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<AUParameterTree * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF7646C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP15AUParameterTreeEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<AUParameterTree * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18EF764B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},AUParameterTree * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<AUParameterTree *> &&)#1},std::allocator<std::tuple<AUParameterTree *> &>,void ()(NSError,std::tuple<AUParameterTree *>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},AUParameterTree * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<AUParameterTree *> &&)#1},std::allocator<std::tuple<AUParameterTree *> &>,void ()(NSError,std::tuple<AUParameterTree *>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2916188;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},AUParameterTree * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<AUParameterTree *> &&)#1},std::allocator<std::tuple<AUParameterTree *> &>,void ()(NSError,std::tuple<AUParameterTree *>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2916188;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},AUParameterTree * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<AUParameterTree *> &&)#1},std::allocator<std::tuple<AUParameterTree *> &>,void ()(NSError,std::tuple<AUParameterTree *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

_QWORD *caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::sync_message(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = &off_1E29160F8;
  v8[1] = a1;
  v9 = v8;
  v3 = a2;
  *a1 = v3;
  v4 = (uint64_t)v9;
  if (!v9)
    goto LABEL_4;
  if (v9 != v8)
  {
    v4 = (*(uint64_t (**)(void))(*v9 + 16))();
LABEL_4:
    a1[4] = v4;
    goto LABEL_6;
  }
  a1[4] = a1 + 1;
  (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
LABEL_6:

  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_10;
  }
  if (v9)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  a1[5] = 0;
  a1[6] = 0;
  return a1;
}

void sub_18EF76694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  id *v13;
  void *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == &a10)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::sync_proxy(void **a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[4];
  _BYTE v11[24];
  _BYTE *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 1));
  v2 = *a1;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP11objc_objectEE10sync_proxyEv_block_invoke;
  v10[3] = &__block_descriptor_64_ea8_32c74_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP11objc_objectEEEEEE_e17_v16__0__NSError_8l;
  v3 = v11;
  v4 = (uint64_t)v14;
  if (!v14)
    goto LABEL_4;
  if (v14 != v13)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v13[0] + 24))(v13, v11);
LABEL_6:
  objc_msgSend(v2, "synchronousRemoteObjectProxyWithErrorHandler:", v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 == v11)
  {
    v6 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
    v3 = v12;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_11:
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
    goto LABEL_15;
  }
  if (v14)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v5;
}

void sub_18EF76830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v19 = *(_QWORD **)(v17 - 32);
  if (v19 == (_QWORD *)(v17 - 56))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::reply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD aBlock[4];
  _BYTE v9[24];
  _BYTE *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, a1 + 8);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP11objc_objectEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c74_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP11objc_objectEEEEEE_e20_v24__0__NSError_8_16l;
  v1 = v9;
  v2 = (uint64_t)v12;
  if (!v12)
    goto LABEL_4;
  if (v12 != v11)
  {
    v2 = (*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
LABEL_4:
    v10 = (_BYTE *)v2;
    goto LABEL_6;
  }
  v10 = v9;
  (*(void (**)(_QWORD *, _BYTE *))(v11[0] + 24))(v11, v9);
LABEL_6:
  v3 = _Block_copy(aBlock);
  if (v10 == v9)
  {
    v4 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_11;
    v4 = 5;
    v1 = v10;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_11:
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
    goto LABEL_15;
  }
  if (v12)
  {
    v6 = 5;
LABEL_15:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v3;
}

void sub_18EF769E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 32);
  if (v3 == (_QWORD *)(v1 - 56))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 56);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP11objc_objectEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  std::function<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);

}

void sub_18EF76A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c74_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP11objc_objectEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c74_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP11objc_objectEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF76B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJU8__strongP11objc_objectEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<objc_object * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18EF76B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<objc_object *> &&)#1},std::allocator<std::tuple<objc_object *> &>,void ()(NSError,std::tuple<objc_object *>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<objc_object *> &&)#1},std::allocator<std::tuple<objc_object *> &>,void ()(NSError,std::tuple<objc_object *>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E29160F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<objc_object *> &&)#1},std::allocator<std::tuple<objc_object *> &>,void ()(NSError,std::tuple<objc_object *>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E29160F8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},objc_object * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<objc_object *> &&)#1},std::allocator<std::tuple<objc_object *> &>,void ()(NSError,std::tuple<objc_object *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

void sub_18EF778AC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, caulk::pooled_semaphore_mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 buf)
{
  uint64_t v21;
  unsigned __int8 *v22;
  void *v25;
  void *v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;

  if (a2)
  {
    caulk::pooled_semaphore_mutex::_unlock(a13);
    atomic_store(0, v22);
    caulk::semaphore::signal((caulk::semaphore *)(v21 + 100));
    v25 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      v26 = v25;
      v27 = *(NSObject **)kAUExtensionScope;
      applesauce::dispatch::v1::source::operator*(*(id *)kAUExtensionScope);
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 16))(v26);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v29;
        _os_log_error_impl(&dword_18EE07000, v27, OS_LOG_TYPE_ERROR, "render error: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      __cxa_end_catch();
    }
    JUMPOUT(0x18EF76DF0);
  }
  _Unwind_Resume(a1);
}

void sub_18EF77A08()
{
  JUMPOUT(0x18EF77950);
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int>::~sync_message(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

auoop::RenderPipeUser *caulk::__expected_detail::base<auoop::RenderPipeUser,NSError * {__strong}>::~base(auoop::RenderPipeUser *this)
{
  if (*((_BYTE *)this + 72))
    auoop::RenderPipeUser::~RenderPipeUser(this);
  else

  return this;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJmmmU8__strongP6NSDatabjEE5replyEv_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, char a7, int a8)
{
  _QWORD v12[3];
  id v13;
  char v14;
  int v15;

  v12[0] = a3;
  v12[1] = a4;
  v12[2] = a5;
  v13 = a6;
  v14 = a7;
  v15 = a8;
  std::function<void ()(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int> &&)>::operator()(a1 + 32, a2, (uint64_t)v12);

}

void sub_18EF77B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c73_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJmmmU8__strongP6NSDatabjEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c73_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJmmmU8__strongP6NSDatabjEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF77BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJmmmU8__strongP6NSDatabjEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  __int128 v2;
  __int128 v3;
  char v4;
  int v5;

  v5 = 0;
  v2 = 0u;
  v3 = 0u;
  v4 = 0;
  std::function<void ()(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18EF77C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &&)#1},std::allocator<std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &>,void ()(NSError,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &&)#1},std::allocator<std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &>,void ()(NSError,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E29164A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &&)#1},std::allocator<std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &>,void ()(NSError,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E29164A0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned long,unsigned long,unsigned long,NSData * {__strong},BOOL,unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &&)#1},std::allocator<std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int> &>,void ()(NSError,std::tuple<unsigned long,unsigned long,unsigned long,NSData *,BOOL,unsigned int>)>::operator()(uint64_t a1, id *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  *(_QWORD *)(v6 + 48) = *(_QWORD *)a3;
  *(_QWORD *)(v6 + 56) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(v6 + 64) = *(_QWORD *)(a3 + 16);
  objc_storeStrong((id *)(v6 + 72), *(id *)(a3 + 24));
  *(_BYTE *)(v6 + 80) = *(_BYTE *)(a3 + 32);
  *(_DWORD *)(v6 + 84) = *(_DWORD *)(a3 + 36);

}

void __copy_helper_block_ea8_40c40_ZTSN5caulk8weak_refI15AUAudioUnit_XPCEE(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void __destroy_helper_block_ea8_40c40_ZTSN5caulk8weak_refI15AUAudioUnit_XPCEE(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void postNotificationIfNotPosted<caulk::weak_ref<AUAudioUnit_XPC>>(id *a1, void *a2)
{
  const __CFDictionary *v3;
  uint64_t v4;
  uint64_t v5;
  __CFNotificationCenter *LocalCenter;

  v3 = a2;
  caulk::strong<AURemoteMessageChannel>(a1);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    std::mutex::lock((std::mutex *)(v4 + 656));
    if (!*(_BYTE *)(v5 + 648))
    {
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterPostNotification(LocalCenter, CFSTR("com.apple.coreaudio.AudioComponentInstanceInvalidated"), (const void *)v5, v3, 0);
      *(_BYTE *)(v5 + 648) = 1;
    }
    std::mutex::unlock((std::mutex *)(v5 + 656));
  }

  objc_destroyWeak(a1);
}

void sub_18EF77E48(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  std::mutex *v4;

  std::mutex::unlock(v4);

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18EF77F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EF77FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL,BOOL,NSArray * {__strong},NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>::~sync_message(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJbbU8__strongP7NSArrayS7_bbimmEE5replyEv_block_invoke(uint64_t a1, void *a2, char a3, char a4, void *a5, void *a6, char a7, char a8, int a9, uint64_t a10, uint64_t a11)
{
  _BYTE v16[8];
  id v17;
  id v18;
  char v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v16[0] = a3;
  v16[1] = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a8;
  v21 = a9;
  v22 = a10;
  v23 = a11;
  std::function<void ()(NSError *,std::tuple<BOOL,BOOL,NSArray * {__strong},NSArray * {__strong},BOOL,BOOL,int,unsigned long,unsigned long> &&)>::operator()(a1 + 32, a2, (uint64_t)v16);

}

void sub_18EF7810C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c79_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJbbU8__strongP7NSArrayS6_bbimmEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c79_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJbbU8__strongP7NSArrayS6_bbimmEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<BOOL,BOOL,NSArray * {__strong},NSArray * {__strong},BOOL,BOOL,int,unsigned long,unsigned long> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF781C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJbbU8__strongP7NSArrayS7_bbimmEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  __int16 v2;
  id v3;
  id v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v7 = 0;
  v6 = 0;
  v8 = 0;
  std::function<void ()(NSError *,std::tuple<BOOL,BOOL,NSArray * {__strong},NSArray * {__strong},BOOL,BOOL,int,unsigned long,unsigned long> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18EF7822C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL,BOOL,NSArray * {__strong},NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &&)#1},std::allocator<std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &>,void ()(NSError,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL,BOOL,NSArray * {__strong},NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &&)#1},std::allocator<std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &>,void ()(NSError,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E29163C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL,BOOL,NSArray * {__strong},NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &&)#1},std::allocator<std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &>,void ()(NSError,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E29163C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},BOOL,BOOL,NSArray * {__strong},NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &&)#1},std::allocator<std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long> &>,void ()(NSError,std::tuple<BOOL,BOOL,NSArray *,NSArray *,BOOL,BOOL,int,unsigned long,unsigned long>)>::operator()(uint64_t a1, id *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  *(_BYTE *)(v6 + 48) = *(_BYTE *)a3;
  *(_BYTE *)(v6 + 49) = *(_BYTE *)(a3 + 1);
  objc_storeStrong((id *)(v6 + 56), *(id *)(a3 + 8));
  objc_storeStrong((id *)(v6 + 64), *(id *)(a3 + 16));
  *(_BYTE *)(v6 + 72) = *(_BYTE *)(a3 + 24);
  *(_BYTE *)(v6 + 73) = *(_BYTE *)(a3 + 25);
  *(_DWORD *)(v6 + 76) = *(_DWORD *)(a3 + 28);
  *(_QWORD *)(v6 + 80) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(v6 + 88) = *(_QWORD *)(a3 + 40);

}

void __copy_helper_block_ea8_32c40_ZTSN5caulk8weak_refI15AUAudioUnit_XPCEE(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_ea8_32c40_ZTSN5caulk8weak_refI15AUAudioUnit_XPCEE(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void APAC::RendererDataJSON(unsigned __int8 *a1, float *a2, int a3)
{
  uint64_t *v5;
  char *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  char *v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  unsigned __int8 *v20;
  char *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned __int8 *v25;
  char *v26;
  int v27;
  uint64_t *v28;
  double v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t *v34;
  double v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t *v40;
  double v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  double *v44;
  int v45;
  double v46;
  double *v47;
  uint64_t *v48;
  unsigned __int8 *v49;
  char *v50;
  int v51;
  uint64_t *v52;
  double v53;
  unsigned __int8 *v54;
  char *v55;
  int v56;
  uint64_t *v57;
  double v58;
  unsigned __int8 *v59;
  char *v60;
  int v61;
  uint64_t *v62;
  uint64_t *v63;
  unsigned __int8 *v64;
  char *v65;
  int v66;
  uint64_t *v67;
  double v68;
  unsigned __int8 *v69;
  char *v70;
  int v71;
  double v72;
  double *v73;
  double v74;
  unsigned __int8 *v75;
  char *v76;
  double v77;
  double v78;
  char *v79;
  int v80;
  double v81;
  double *v82;
  uint64_t *v83;
  unsigned __int8 *v84;
  char *v85;
  int v86;
  uint64_t *v87;
  double v88;
  unsigned __int8 *v89;
  char *v90;
  double v91;
  double v92;
  unsigned __int8 *v93;
  char *v94;
  int v95;
  uint64_t *v96;
  uint64_t *v97;
  unsigned __int8 *v98;
  char *v99;
  int v100;
  uint64_t *v101;
  double v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  char *v105;
  double v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t *v110;
  unsigned __int8 *v111;
  char *v112;
  int v113;
  uint64_t *v114;
  uint64_t *v115;
  unsigned __int8 *v116;
  char *v117;
  int v118;
  uint64_t *v119;
  uint64_t *v120;
  unsigned __int8 *v121;
  char *v122;
  int v123;
  uint64_t *v124;
  uint64_t *v125;
  unsigned __int8 *v126;
  char *v127;
  int v128;
  uint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  int v136;
  uint64_t *v137;
  uint64_t *v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  int v142;
  uint64_t *v143;
  int v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  double v150;
  char *v151;
  int v152;
  uint64_t *v153;
  double v154;
  char *v155;
  int v156;
  uint64_t *v157;
  double v158;
  char *v159;
  int v160;
  uint64_t *v161;
  double v162;
  char *v163;
  int v164;
  uint64_t *v165;
  double v166;
  char *v167;
  int v168;
  uint64_t *v169;
  double v170;
  char *v171;
  int v172;
  double v173;
  double *v174;
  unsigned __int8 *v175;
  double v176;
  char *v177;
  int v178;
  uint64_t *v179;
  double v180;
  char *v181;
  int v182;
  uint64_t *v183;
  double v184;
  char *v185;
  int v186;
  uint64_t *v187;
  double v188;
  char *v189;
  double v190;
  uint64_t v191;
  char *v192;
  int v193;
  uint64_t v194;
  double *v195;
  uint64_t *v196;
  unsigned __int8 *v197;
  char *v198;
  int v199;
  uint64_t *v200;
  uint64_t *v201;
  unsigned __int8 *v202;
  char *v203;
  int v204;
  uint64_t *v205;
  uint64_t *v206;
  unsigned __int8 *v207;
  unsigned __int8 *v208;
  unsigned __int8 *v209;
  char *v210;
  int v211;
  uint64_t *v212;
  double v213;
  unsigned __int8 *v214;
  unsigned __int8 *v215;
  unsigned __int8 *v216;
  char *v217;
  double v218;
  uint64_t *v219;
  unsigned __int8 *v220;
  char *v221;
  int v222;
  uint64_t *v223;
  uint64_t *v224;
  unsigned __int8 *v225;
  char *v226;
  int v227;
  uint64_t *v228;
  double v229;
  unsigned __int8 *v230;
  char *v231;
  double v232;
  uint64_t *v233;
  unsigned __int8 *v234;
  char *v235;
  int v236;
  uint64_t *v237;
  uint64_t v238;
  unsigned __int8 *v239;
  char *v240;
  uint64_t v241;
  uint64_t *v242;
  unsigned __int8 *v243;
  char *v244;
  int v245;
  uint64_t *v246;
  uint64_t *v247;
  unsigned __int8 *v248;
  char *v249;
  int v250;
  uint64_t *v251;
  double v252;
  unsigned __int8 *v253;
  char *v254;
  double v255;
  uint64_t v256;
  unsigned __int8 *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  unsigned __int8 *v264;
  char *v265;
  uint64_t v266;
  double v267;
  unsigned __int8 *v268;
  char *v269;
  double v270;
  uint64_t *v271;
  unsigned __int8 *v272;
  char *v273;
  int v274;
  uint64_t *v275;
  uint64_t *v276;
  unsigned __int8 *v277;
  char *v278;
  int v279;
  uint64_t *v280;
  uint64_t v281;
  unsigned __int8 *v282;
  char *v283;
  uint64_t v284;
  char *v285;
  char v286;
  uint64_t v287;
  int v288;
  char *v289;
  char v290;
  uint64_t v291;
  char *v292;
  char v293;
  uint64_t v294;
  char *v295;
  char v296;
  uint64_t v297;
  char *v298;
  char v299;
  uint64_t v300;
  char *v301;
  char v302;
  uint64_t v303;
  char *v304;
  char v305;
  uint64_t v306;
  std::string *v307;
  int v308;
  void *v309;
  std::string *v310;
  char *v311;
  char v312;
  uint64_t *v313;
  double v314;
  unsigned __int8 *v315;
  unsigned __int8 *v316;
  char *v317;
  double v318;
  double v319;
  unsigned __int8 *v320;
  char *v321;
  int v322;
  uint64_t *v323;
  double v324;
  unsigned __int8 *v325;
  char *v326;
  int v327;
  uint64_t *v328;
  double v329;
  unsigned __int8 *v330;
  char *v331;
  double v332;
  uint64_t *v333;
  unsigned __int8 *v334;
  char *v335;
  int v336;
  uint64_t *v337;
  double v338;
  unsigned __int8 *v339;
  unsigned __int8 *v340;
  unsigned __int8 *v341;
  int v342;
  uint64_t *v343;
  double v344;
  unsigned __int8 *v345;
  unsigned __int8 *v346;
  unsigned __int8 *v347;
  int v348;
  uint64_t *v349;
  double v350;
  unsigned __int8 *v351;
  unsigned __int8 *v352;
  unsigned __int8 *v353;
  int v354;
  uint64_t *v355;
  double v356;
  unsigned __int8 *v357;
  unsigned __int8 *v358;
  double *v359;
  double v360;
  uint64_t *v361;
  unsigned __int8 *v362;
  char *v363;
  int v364;
  uint64_t *v365;
  double v366;
  unsigned __int8 *v367;
  unsigned __int8 *v368;
  char *v369;
  int v370;
  uint64_t *v371;
  double v372;
  unsigned __int8 *v373;
  unsigned __int8 *v374;
  char *v375;
  int v376;
  uint64_t *v377;
  double v378;
  unsigned __int8 *v379;
  unsigned __int8 *v380;
  char *v381;
  int v382;
  uint64_t *v383;
  double v384;
  unsigned __int8 *v385;
  unsigned __int8 *v386;
  char *v387;
  int v388;
  uint64_t *v389;
  double v390;
  unsigned __int8 *v391;
  unsigned __int8 *v392;
  char *v393;
  int v394;
  uint64_t *v395;
  double v396;
  unsigned __int8 *v397;
  unsigned __int8 *v398;
  char *v399;
  double v400;
  uint64_t *v401;
  unsigned __int8 *v402;
  char *v403;
  int v404;
  uint64_t *v405;
  uint64_t *v406;
  unsigned __int8 *v407;
  char *v408;
  int v409;
  uint64_t *v410;
  uint64_t *v411;
  unsigned __int8 *v412;
  char *v413;
  int v414;
  uint64_t *v415;
  uint64_t v416;
  unsigned __int8 *v417;
  unsigned __int8 *v418;
  char *v419;
  uint64_t v420;
  unsigned __int8 *v421;
  char *v422;
  char v423;
  uint64_t v424;
  unsigned __int8 *v425;
  char *v426;
  char v427;
  uint64_t v428;
  double v429;
  unsigned __int8 *v430;
  unsigned __int8 *v431;
  char *v432;
  int v433;
  uint64_t *v434;
  double v435;
  unsigned __int8 *v436;
  unsigned __int8 *v437;
  char *v438;
  int v439;
  uint64_t *v440;
  double v441;
  unsigned __int8 *v442;
  unsigned __int8 *v443;
  char *v444;
  int v445;
  uint64_t *v446;
  double v447;
  unsigned __int8 *v448;
  unsigned __int8 *v449;
  char *v450;
  int v451;
  uint64_t *v452;
  double v453;
  unsigned __int8 *v454;
  unsigned __int8 *v455;
  char *v456;
  int v457;
  uint64_t *v458;
  double v459;
  unsigned __int8 *v460;
  unsigned __int8 *v461;
  char *v462;
  double v463;
  uint64_t v464;
  uint64_t *v465;
  unsigned __int8 v466[8];
  uint64_t *v467;
  std::string v468;
  std::string v469;
  unsigned __int8 v470[8];
  uint64_t v471;
  unsigned __int8 v472[8];
  uint64_t v473;
  unsigned __int8 v474[8];
  uint64_t v475;
  unsigned __int8 v476[8];
  uint64_t v477;
  unsigned __int8 v478[8];
  uint64_t v479;
  unsigned __int8 v480[8];
  uint64_t v481;
  unsigned __int8 v482[8];
  uint64_t v483;
  char v484[8];
  double v485;
  char v486[8];
  uint64_t v487;
  char v488[8];
  uint64_t v489;
  char v490[8];
  uint64_t v491;
  char v492[8];
  uint64_t v493;
  char v494[8];
  double v495;
  char v496[8];
  uint64_t *v497;
  char v498[8];
  uint64_t *v499;
  unsigned __int8 v500[8];
  uint64_t v501;
  unsigned __int8 v502[8];
  uint64_t v503;
  char v504[8];
  uint64_t v505;
  char v506[8];
  uint64_t *v507;
  char v508[8];
  uint64_t *v509;
  char v510[8];
  uint64_t *v511;
  char v512[8];
  uint64_t v513;
  char v514[8];
  uint64_t *v515;
  char v516[8];
  double v517;
  char v518[8];
  uint64_t *v519;
  char v520[8];
  uint64_t *v521;
  char v522[8];
  double v523;
  char v524[8];
  uint64_t *v525;
  char v526[8];
  uint64_t *v527;
  char v528[8];
  uint64_t *v529;
  char v530[8];
  double v531;
  char v532[8];
  double v533;
  char v534[8];
  double v535;
  char v536[8];
  double v537;
  char v538[8];
  double v539;
  char v540[8];
  double v541;
  char v542[8];
  double v543;
  char v544[8];
  double v545;
  char v546[8];
  double v547;
  char v548[8];
  double v549;
  char v550[8];
  double v551;
  char v552[8];
  double v553;
  char v554[8];
  uint64_t *v555;
  char v556[8];
  uint64_t v557;
  char v558[8];
  uint64_t *v559;
  char v560[8];
  uint64_t *v561;
  char v562[8];
  double v563;
  char v564[8];
  double v565;
  char v566[8];
  double v567;
  char v568[8];
  double v569;
  char v570[8];
  double v571;
  char v572[8];
  double v573;
  char v574[8];
  double v575;
  char v576[8];
  double v577;
  char v578[8];
  double v579;
  char v580[8];
  double v581;
  char v582[8];
  uint64_t *v583;
  char v584[8];
  uint64_t *v585;
  char v586[8];
  uint64_t *v587;
  char v588[8];
  uint64_t *v589;
  char v590[8];
  uint64_t *v591;
  char v592[8];
  uint64_t *v593;
  char v594[8];
  uint64_t v595;
  char v596[8];
  double v597;
  char v598[8];
  double v599;
  char v600[8];
  uint64_t *v601;
  char v602[8];
  double v603;
  char v604[8];
  double v605;
  char v606[8];
  uint64_t *v607;
  char v608[8];
  double v609;
  char v610[8];
  double v611;
  char v612[8];
  double v613;
  char v614[8];
  uint64_t *v615;
  char v616[8];
  double v617;
  char v618[8];
  double v619;
  char v620[8];
  uint64_t *v621;
  char v622[8];
  double v623;
  char v624[8];
  double v625;
  char v626[8];
  double v627;
  char v628[8];
  double v629;
  char v630[8];
  uint64_t *v631;
  char v632[8];
  double v633;
  char v634[8];
  double v635;
  char v636[8];
  double v637;
  char v638[8];
  double v639;
  char v640[8];
  double v641;
  char v642[8];
  double v643;
  char v644[8];
  uint64_t *v645;
  char v646[8];
  uint64_t *v647;
  char v648[8];
  uint64_t *v649;
  char v650[8];
  uint64_t *v651;
  char v652[8];
  uint64_t *v653;

  if (!a3)
    goto LABEL_79;
  v5 = (uint64_t *)*(unsigned __int8 *)a2;
  v652[0] = 4;
  v653 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v652);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v652);
  v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHasData");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v652);
  v7 = *v6;
  *v6 = 4;
  v652[0] = v7;
  v8 = (uint64_t *)*((_QWORD *)v6 + 1);
  *((_QWORD *)v6 + 1) = v5;
  v653 = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v652);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v653, v7);
  if (*(_BYTE *)a2)
  {
LABEL_79:
    v9 = (uint64_t *)*((unsigned __int16 *)a2 + 1);
    v650[0] = 5;
    v651 = v9;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v650);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v650);
    v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mNumParameters");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v650);
    v11 = *v10;
    *v10 = 5;
    v650[0] = v11;
    v12 = (uint64_t *)*((_QWORD *)v10 + 1);
    *((_QWORD *)v10 + 1) = v9;
    v651 = v12;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v650);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v651, v11);
    if ((_DWORD)v9)
    {
      v13 = 0;
      v465 = v9;
      do
      {
        v14 = (uint64_t *)*((unsigned __int16 *)a2 + v13 + 2);
        v648[0] = 6;
        v649 = v14;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v648);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v648);
        v15 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mParamIndexList");
        v16 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v15, v13);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v648);
        v17 = *v16;
        *v16 = 6;
        v648[0] = v17;
        v18 = (uint64_t *)*((_QWORD *)v16 + 1);
        *((_QWORD *)v16 + 1) = v14;
        v649 = v18;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v648);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v649, v17);
        switch((int)v14)
        {
          case 0:
            v19 = (uint64_t *)*((unsigned __int8 *)a2 + 68);
            v646[0] = 4;
            v647 = v19;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v646);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v646);
            v20 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
            v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v20, "mPositionPresent");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v646);
            v22 = *v21;
            *v21 = 4;
            v646[0] = v22;
            v23 = (uint64_t *)*((_QWORD *)v21 + 1);
            *((_QWORD *)v21 + 1) = v19;
            v647 = v23;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v646);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v647, v22);
            if (*((_BYTE *)a2 + 68))
            {
              v24 = (uint64_t *)*((unsigned __int8 *)a2 + 69);
              v644[0] = 4;
              v645 = v24;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v644);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v644);
              v25 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
              v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v25, "mIsCartesian");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v644);
              v27 = *v26;
              *v26 = 4;
              v644[0] = v27;
              v28 = (uint64_t *)*((_QWORD *)v26 + 1);
              *((_QWORD *)v26 + 1) = v24;
              v645 = v28;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v644);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v645, v27);
              if (*((_BYTE *)a2 + 69))
              {
                v29 = a2[22];
                v642[0] = 7;
                v643 = v29;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v642);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v642);
                v30 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
                v31 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "mCoordinate");
                v32 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v31, 0);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v642);
                v33 = *v32;
                *v32 = 7;
                v642[0] = v33;
                v34 = *((uint64_t **)v32 + 1);
                *((double *)v32 + 1) = v29;
                v643 = *(double *)&v34;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v642);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v643, v33);
                v35 = a2[23];
                v640[0] = 7;
                v641 = v35;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v640);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v640);
                v36 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
                v37 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v36, "mCoordinate");
                v38 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v37, 1uLL);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v640);
                v39 = *v38;
                *v38 = 7;
                v640[0] = v39;
                v40 = *((uint64_t **)v38 + 1);
                *((double *)v38 + 1) = v35;
                v641 = *(double *)&v40;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v38);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v640);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v641, v39);
                v41 = a2[24];
                v638[0] = 7;
                v639 = v41;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v638);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v638);
                v42 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
                v43 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v42, "mCoordinate");
                v44 = (double *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v43, 2uLL);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v638);
                v45 = *(unsigned __int8 *)v44;
                *(_BYTE *)v44 = 7;
                v638[0] = v45;
                v46 = v44[1];
                v44[1] = v41;
                v639 = v46;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v44);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v638);
                v47 = &v639;
              }
              else
              {
                v319 = a2[18];
                v636[0] = 7;
                v637 = v319;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v636);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v636);
                v320 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
                v321 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v320, "mAzimuth");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v636);
                v322 = *v321;
                *v321 = 7;
                v636[0] = v322;
                v323 = *((uint64_t **)v321 + 1);
                *((double *)v321 + 1) = v319;
                v637 = *(double *)&v323;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v321);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v636);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v637, v322);
                v324 = a2[19];
                v634[0] = 7;
                v635 = v324;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v634);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v634);
                v325 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
                v326 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v325, "mElevation");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v634);
                v327 = *v326;
                *v326 = 7;
                v634[0] = v327;
                v328 = *((uint64_t **)v326 + 1);
                *((double *)v326 + 1) = v324;
                v635 = *(double *)&v328;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v326);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v634);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v635, v327);
                v329 = a2[20];
                v632[0] = 7;
                v633 = v329;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v632);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v632);
                v330 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
                v331 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v330, "mRadius");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v632);
                v45 = *v331;
                *v331 = 7;
                v632[0] = v45;
                v332 = *((double *)v331 + 1);
                *((double *)v331 + 1) = v329;
                v633 = v332;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v331);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v632);
                v47 = &v633;
              }
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v47, v45);
            }
            v333 = (uint64_t *)*((unsigned __int8 *)a2 + 84);
            v630[0] = 4;
            v631 = v333;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v630);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v630);
            v334 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
            v335 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v334, "mRotationPresent");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v630);
            v336 = *v335;
            *v335 = 4;
            v630[0] = v336;
            v337 = (uint64_t *)*((_QWORD *)v335 + 1);
            *((_QWORD *)v335 + 1) = v333;
            v631 = v337;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v335);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v630);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v631, v336);
            if (*((_BYTE *)a2 + 84))
            {
              v338 = a2[25];
              v628[0] = 7;
              v629 = v338;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v628);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v628);
              v339 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
              v340 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v339, "mQuaternion");
              v341 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v340, 0);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v628);
              v342 = *v341;
              *v341 = 7;
              v628[0] = v342;
              v343 = *((uint64_t **)v341 + 1);
              *((double *)v341 + 1) = v338;
              v629 = *(double *)&v343;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v341);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v628);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v629, v342);
              v344 = a2[26];
              v626[0] = 7;
              v627 = v344;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v626);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v626);
              v345 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
              v346 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v345, "mQuaternion");
              v347 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v346, 1uLL);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v626);
              v348 = *v347;
              *v347 = 7;
              v626[0] = v348;
              v349 = *((uint64_t **)v347 + 1);
              *((double *)v347 + 1) = v344;
              v627 = *(double *)&v349;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v347);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v626);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v627, v348);
              v350 = a2[27];
              v624[0] = 7;
              v625 = v350;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v624);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v624);
              v351 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
              v352 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v351, "mQuaternion");
              v353 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v352, 2uLL);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v624);
              v354 = *v353;
              *v353 = 7;
              v624[0] = v354;
              v355 = *((uint64_t **)v353 + 1);
              *((double *)v353 + 1) = v350;
              v625 = *(double *)&v355;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v353);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v624);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v625, v354);
              v356 = a2[28];
              v622[0] = 7;
              v623 = v356;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v622);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v622);
              v357 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectPosition");
              v358 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v357, "mQuaternion");
              v359 = (double *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v358, 3uLL);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v622);
              v80 = *(unsigned __int8 *)v359;
              *(_BYTE *)v359 = 7;
              v622[0] = v80;
              v360 = v359[1];
              v359[1] = v356;
              v623 = v360;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v359);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v622);
              v82 = &v623;
              goto LABEL_68;
            }
            break;
          case 1:
            v48 = (uint64_t *)*((unsigned __int8 *)a2 + 116);
            v620[0] = 4;
            v621 = v48;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v620);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v620);
            v49 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectSpread");
            v50 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v49, "mIsCartesian");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v620);
            v51 = *v50;
            *v50 = 4;
            v620[0] = v51;
            v52 = (uint64_t *)*((_QWORD *)v50 + 1);
            *((_QWORD *)v50 + 1) = v48;
            v621 = v52;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v50);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v620);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v621, v51);
            v53 = a2[30];
            v618[0] = 7;
            v619 = v53;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v618);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v618);
            v54 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectSpread");
            v55 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v54, "mWidth");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v618);
            v56 = *v55;
            *v55 = 7;
            v618[0] = v56;
            v57 = *((uint64_t **)v55 + 1);
            *((double *)v55 + 1) = v53;
            v619 = *(double *)&v57;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v618);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v619, v56);
            v58 = a2[31];
            v616[0] = 7;
            v617 = v58;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v616);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v616);
            v59 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectSpread");
            v60 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "mHeight");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v616);
            v61 = *v60;
            *v60 = 7;
            v616[0] = v61;
            v62 = *((uint64_t **)v60 + 1);
            *((double *)v60 + 1) = v58;
            v617 = *(double *)&v62;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v60);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v616);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v617, v61);
            v63 = (uint64_t *)*((unsigned __int8 *)a2 + 117);
            v614[0] = 4;
            v615 = v63;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v614);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v614);
            v64 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectSpread");
            v65 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v64, "mHasDepth");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v614);
            v66 = *v65;
            *v65 = 4;
            v614[0] = v66;
            v67 = (uint64_t *)*((_QWORD *)v65 + 1);
            *((_QWORD *)v65 + 1) = v63;
            v615 = v67;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v614);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v615, v66);
            if (*((_BYTE *)a2 + 117))
            {
              v68 = a2[32];
              v612[0] = 7;
              v613 = v68;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v612);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v612);
              v69 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectSpread");
              v70 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v69, "mDepth");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v612);
              v71 = *v70;
              *v70 = 7;
              v612[0] = v71;
              v72 = *((double *)v70 + 1);
              *((double *)v70 + 1) = v68;
              v613 = v72;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v70);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v612);
              v73 = &v613;
              goto LABEL_62;
            }
            break;
          case 2:
            v74 = a2[33];
            v610[0] = 7;
            v611 = v74;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v610);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v610);
            v75 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mSceneReverb");
            v76 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v75, "mGain");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v610);
            v71 = *v76;
            *v76 = 7;
            v610[0] = v71;
            v77 = *((double *)v76 + 1);
            *((double *)v76 + 1) = v74;
            v611 = v77;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v76);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v610);
            v73 = &v611;
            goto LABEL_62;
          case 3:
            v78 = a2[34];
            v608[0] = 7;
            v609 = v78;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v608);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v608);
            v79 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectDiffuse");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v608);
            v80 = *v79;
            *v79 = 7;
            v608[0] = v80;
            v81 = *((double *)v79 + 1);
            *((double *)v79 + 1) = v78;
            v609 = v81;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v79);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v608);
            v82 = &v609;
            goto LABEL_68;
          case 4:
            v83 = (uint64_t *)*((unsigned __int8 *)a2 + 141);
            v606[0] = 4;
            v607 = v83;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v606);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v606);
            v84 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectChannelLock");
            v85 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v84, "mHasMaxDistance");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v606);
            v86 = *v85;
            *v85 = 4;
            v606[0] = v86;
            v87 = (uint64_t *)*((_QWORD *)v85 + 1);
            *((_QWORD *)v85 + 1) = v83;
            v607 = v87;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v85);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v606);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v607, v86);
            if (!*((_BYTE *)a2 + 141))
              break;
            v88 = a2[36];
            v604[0] = 7;
            v605 = v88;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v604);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v604);
            v89 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectChannelLock");
            v90 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v89, "mHasMaxDistance");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v604);
            v71 = *v90;
            *v90 = 7;
            v604[0] = v71;
            v91 = *((double *)v90 + 1);
            *((double *)v90 + 1) = v88;
            v605 = v91;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v90);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v604);
            v73 = &v605;
LABEL_62:
            v288 = v71;
            goto LABEL_63;
          case 5:
            v92 = a2[37];
            v602[0] = 7;
            v603 = v92;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v602);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v602);
            v93 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectDivergence");
            v94 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v93, "mDivergence");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v602);
            v95 = *v94;
            *v94 = 7;
            v602[0] = v95;
            v96 = *((uint64_t **)v94 + 1);
            *((double *)v94 + 1) = v92;
            v603 = *(double *)&v96;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v94);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v602);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v603, v95);
            v97 = (uint64_t *)*((unsigned __int8 *)a2 + 152);
            v600[0] = 4;
            v601 = v97;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v600);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v600);
            v98 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectDivergence");
            v99 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v98, "mIsCartesian");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v600);
            v100 = *v99;
            *v99 = 4;
            v600[0] = v100;
            v101 = (uint64_t *)*((_QWORD *)v99 + 1);
            *((_QWORD *)v99 + 1) = v97;
            v601 = v101;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v99);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v600);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v601, v100);
            if (*((_BYTE *)a2 + 152))
            {
              v102 = a2[40];
              v598[0] = 7;
              v599 = v102;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v598);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v598);
              v103 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectDivergence");
              v104 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v103, "mIsCartesian");
              v105 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v104, "mPositionRange");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v598);
              v71 = *v105;
              *v105 = 7;
              v598[0] = v71;
              v106 = *((double *)v105 + 1);
              *((double *)v105 + 1) = v102;
              v599 = v106;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v105);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v598);
              v73 = &v599;
            }
            else
            {
              v314 = a2[41];
              v596[0] = 7;
              v597 = v314;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v596);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v596);
              v315 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectDivergence");
              v316 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v315, "mIsCartesian");
              v317 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v316, "mAzimuthRange");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v596);
              v71 = *v317;
              *v317 = 7;
              v596[0] = v71;
              v318 = *((double *)v317 + 1);
              *((double *)v317 + 1) = v314;
              v597 = v318;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v317);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v596);
              v73 = &v597;
            }
            goto LABEL_62;
          case 6:
            v107 = *((unsigned __int8 *)a2 + 168);
            v594[0] = 4;
            v595 = v107;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v594);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v594);
            v108 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mIsScreenSizeAdaptationEnabled");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v594);
            v80 = *v108;
            *v108 = 4;
            v594[0] = v80;
            v109 = *((_QWORD *)v108 + 1);
            *((_QWORD *)v108 + 1) = v107;
            v595 = v109;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v108);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v594);
            v82 = (double *)&v595;
LABEL_68:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v82, v80);
            break;
          case 7:
            v110 = (uint64_t *)*((unsigned __int8 *)a2 + 172);
            v592[0] = 4;
            v593 = v110;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v592);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v592);
            v111 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectZoneExclusion");
            v112 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v111, "mIsZoneDefined");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v592);
            v113 = *v112;
            *v112 = 4;
            v592[0] = v113;
            v114 = (uint64_t *)*((_QWORD *)v112 + 1);
            *((_QWORD *)v112 + 1) = v110;
            v593 = v114;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v112);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v592);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v593, v113);
            if (*((_BYTE *)a2 + 172))
            {
              v115 = (uint64_t *)*((unsigned __int8 *)a2 + 173);
              v590[0] = 4;
              v591 = v115;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v590);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v590);
              v116 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectZoneExclusion");
              v117 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v116, "mKeepPreviousZone");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v590);
              v118 = *v117;
              *v117 = 4;
              v590[0] = v118;
              v119 = (uint64_t *)*((_QWORD *)v117 + 1);
              *((_QWORD *)v117 + 1) = v115;
              v591 = v119;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v117);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v590);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v591, v118);
              if (!*((_BYTE *)a2 + 173))
              {
                v120 = (uint64_t *)*((unsigned __int8 *)a2 + 174);
                v588[0] = 4;
                v589 = v120;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v588);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v588);
                v121 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectZoneExclusion");
                v122 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v121, "mIsCartesian");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v588);
                v123 = *v122;
                *v122 = 4;
                v588[0] = v123;
                v124 = (uint64_t *)*((_QWORD *)v122 + 1);
                *((_QWORD *)v122 + 1) = v120;
                v589 = v124;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v122);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v588);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v589, v123);
                v125 = (uint64_t *)*((unsigned __int8 *)a2 + 175);
                v586[0] = 5;
                v587 = v125;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v586);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v586);
                v126 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectZoneExclusion");
                v127 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v126, "mNumZones");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v586);
                v128 = *v127;
                *v127 = 5;
                v586[0] = v128;
                v129 = (uint64_t *)*((_QWORD *)v127 + 1);
                *((_QWORD *)v127 + 1) = v125;
                v587 = v129;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v127);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v586);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v587, v128);
                v464 = *((unsigned __int8 *)a2 + 175);
                if (*((_BYTE *)a2 + 175))
                {
                  v130 = 0;
                  v131 = 57;
                  do
                  {
                    v132 = (uint64_t *)*((unsigned __int8 *)a2 + v130 + 176);
                    v584[0] = 4;
                    v585 = v132;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v584);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v584);
                    v133 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectZoneExclusion");
                    v134 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v133, "mUsePreDefinedZone");
                    v135 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v134, v130);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v584);
                    v136 = *v135;
                    *v135 = 4;
                    v584[0] = v136;
                    v137 = (uint64_t *)*((_QWORD *)v135 + 1);
                    *((_QWORD *)v135 + 1) = v132;
                    v585 = v137;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v135);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v584);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v585, v136);
                    if (*((_BYTE *)a2 + v130 + 176))
                    {
                      v138 = (uint64_t *)*((unsigned __int8 *)a2 + v130 + 191);
                      v582[0] = 5;
                      v583 = v138;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v582);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v582);
                      v139 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectZoneExclusion");
                      v9 = v465;
                      v140 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v139, "mZoneIndex");
                      v141 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v140, v130);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v582);
                      v142 = *v141;
                      *v141 = 5;
                      v582[0] = v142;
                      v143 = (uint64_t *)*((_QWORD *)v141 + 1);
                      *((_QWORD *)v141 + 1) = v138;
                      v583 = v143;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v141);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v582);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v583, v142);
                    }
                    else
                    {
                      v144 = *((unsigned __int8 *)a2 + 174);
                      v145 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mObjectZoneExclusion");
                      v146 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v145, "mZone");
                      v147 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v146, v130);
                      v148 = (unsigned __int8 *)&a2[v131];
                      if (v144)
                      {
                        v149 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v147, "cartesian");
                        v150 = *((float *)v148 - 5);
                        v580[0] = 7;
                        v581 = v150;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v580);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v580);
                        v151 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v149, "mMinX");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v580);
                        v152 = *v151;
                        *v151 = 7;
                        v580[0] = v152;
                        v153 = *((uint64_t **)v151 + 1);
                        *((double *)v151 + 1) = v150;
                        v581 = *(double *)&v153;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v580);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v581, v152);
                        v154 = a2[v131 - 4];
                        v578[0] = 7;
                        v579 = v154;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v578);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v578);
                        v155 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v149, "mMaxX");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v578);
                        v156 = *v155;
                        *v155 = 7;
                        v578[0] = v156;
                        v157 = *((uint64_t **)v155 + 1);
                        *((double *)v155 + 1) = v154;
                        v579 = *(double *)&v157;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v578);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v579, v156);
                        v158 = a2[v131 - 3];
                        v576[0] = 7;
                        v577 = v158;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v576);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v576);
                        v159 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v149, "mMinY");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v576);
                        v160 = *v159;
                        *v159 = 7;
                        v576[0] = v160;
                        v161 = *((uint64_t **)v159 + 1);
                        *((double *)v159 + 1) = v158;
                        v577 = *(double *)&v161;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v159);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v576);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v577, v160);
                        v162 = a2[v131 - 2];
                        v574[0] = 7;
                        v575 = v162;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v574);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v574);
                        v163 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v149, "mMaxY");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v574);
                        v164 = *v163;
                        *v163 = 7;
                        v574[0] = v164;
                        v165 = *((uint64_t **)v163 + 1);
                        *((double *)v163 + 1) = v162;
                        v575 = *(double *)&v165;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v163);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v574);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v575, v164);
                        v166 = a2[v131 - 1];
                        v572[0] = 7;
                        v573 = v166;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v572);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v572);
                        v167 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v149, "mMinZ");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v572);
                        v168 = *v167;
                        *v167 = 7;
                        v572[0] = v168;
                        v169 = *((uint64_t **)v167 + 1);
                        *((double *)v167 + 1) = v166;
                        v573 = *(double *)&v169;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v167);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v572);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v573, v168);
                        v170 = a2[v131];
                        v570[0] = 7;
                        v571 = v170;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v570);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v570);
                        v171 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v149, "mMaxZ");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v570);
                        v172 = *v171;
                        *v171 = 7;
                        v570[0] = v172;
                        v173 = *((double *)v171 + 1);
                        *((double *)v171 + 1) = v170;
                        v571 = v173;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v171);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v570);
                        v174 = &v571;
                      }
                      else
                      {
                        v175 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v147, "spherical");
                        v176 = *((float *)v148 - 5);
                        v568[0] = 7;
                        v569 = v176;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v568);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v568);
                        v177 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v175, "mMinAzimuth");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v568);
                        v178 = *v177;
                        *v177 = 7;
                        v568[0] = v178;
                        v179 = *((uint64_t **)v177 + 1);
                        *((double *)v177 + 1) = v176;
                        v569 = *(double *)&v179;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v177);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v568);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v569, v178);
                        v180 = a2[v131 - 4];
                        v566[0] = 7;
                        v567 = v180;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v566);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v566);
                        v181 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v175, "mMaxAzimuth");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v566);
                        v182 = *v181;
                        *v181 = 7;
                        v566[0] = v182;
                        v183 = *((uint64_t **)v181 + 1);
                        *((double *)v181 + 1) = v180;
                        v567 = *(double *)&v183;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v181);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v566);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v567, v182);
                        v184 = a2[v131 - 3];
                        v564[0] = 7;
                        v565 = v184;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v564);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v564);
                        v185 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v175, "mMinElevation");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v564);
                        v186 = *v185;
                        *v185 = 7;
                        v564[0] = v186;
                        v187 = *((uint64_t **)v185 + 1);
                        *((double *)v185 + 1) = v184;
                        v565 = *(double *)&v187;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v185);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v564);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v565, v186);
                        v188 = a2[v131 - 2];
                        v562[0] = 7;
                        v563 = v188;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v562);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v562);
                        v189 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v175, "mMzxElevation");
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v562);
                        v172 = *v189;
                        *v189 = 7;
                        v562[0] = v172;
                        v190 = *((double *)v189 + 1);
                        *((double *)v189 + 1) = v188;
                        v563 = v190;
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v189);
                        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v562);
                        v174 = &v563;
                      }
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v174, v172);
                      v9 = v465;
                    }
                    ++v130;
                    v131 += 6;
                  }
                  while (v464 != v130);
                }
              }
            }
            break;
          case 8:
            v191 = *((unsigned __int8 *)a2 + 1037);
            v486[0] = 5;
            v487 = v191;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v486);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v486);
            v192 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mBinauralizationPreset");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v486);
            v193 = *v192;
            *v192 = 5;
            v486[0] = v193;
            v194 = *((_QWORD *)v192 + 1);
            *((_QWORD *)v192 + 1) = v191;
            v487 = v194;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v192);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v486);
            v195 = (double *)&v487;
            goto LABEL_75;
          case 9:
            v196 = (uint64_t *)*((unsigned __int8 *)a2 + 568);
            v528[0] = 5;
            v529 = v196;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v528);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v528);
            v197 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mSceneReverb");
            v198 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v197, "mReverbProcIndex");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v528);
            v199 = *v198;
            *v198 = 5;
            v528[0] = v199;
            v200 = (uint64_t *)*((_QWORD *)v198 + 1);
            *((_QWORD *)v198 + 1) = v196;
            v529 = v200;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v198);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v528);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v529, v199);
            v9 = v465;
            if (*((_BYTE *)a2 + 568) != 1)
              break;
            v201 = (uint64_t *)*((unsigned __int16 *)a2 + 285);
            v526[0] = 5;
            v527 = v201;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v526);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v526);
            v202 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mSceneReverb");
            v203 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v202, "mAUSMReverbPreset");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v526);
            v204 = *v203;
            *v203 = 5;
            v526[0] = v204;
            v205 = (uint64_t *)*((_QWORD *)v203 + 1);
            *((_QWORD *)v203 + 1) = v201;
            v527 = v205;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v203);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v526);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v527, v204);
            v206 = (uint64_t *)*((unsigned __int8 *)a2 + 732);
            v524[0] = 4;
            v525 = v206;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v524);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v524);
            v207 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mSceneReverb");
            v208 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v207, "mReverbParams");
            v209 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v208, "mWetDryMix");
            v210 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v209, "mHasData");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v524);
            v211 = *v210;
            *v210 = 4;
            v524[0] = v211;
            v212 = (uint64_t *)*((_QWORD *)v210 + 1);
            *((_QWORD *)v210 + 1) = v206;
            v525 = v212;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v210);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v524);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v525, v211);
            v213 = a2[182];
            v522[0] = 7;
            v523 = v213;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v522);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v522);
            v214 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mSceneReverb");
            v215 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v214, "mReverbParams");
            v216 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v215, "mWetDryMix");
            v217 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v216, "mValue");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v522);
            v193 = *v217;
            *v217 = 7;
            v522[0] = v193;
            v218 = *((double *)v217 + 1);
            *((double *)v217 + 1) = v213;
            v523 = v218;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v217);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v522);
            v195 = &v523;
            goto LABEL_75;
          case 10:
            v219 = (uint64_t *)*((unsigned __int8 *)a2 + 780);
            v520[0] = 5;
            v521 = v219;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v520);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v520);
            v220 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mPostProcReverb");
            v221 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v220, "mReverbProcIndex");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v520);
            v222 = *v221;
            *v221 = 5;
            v520[0] = v222;
            v223 = (uint64_t *)*((_QWORD *)v221 + 1);
            *((_QWORD *)v221 + 1) = v219;
            v521 = v223;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v221);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v520);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v521, v222);
            v9 = v465;
            if (*((_BYTE *)a2 + 780) != 1)
              break;
            v224 = (uint64_t *)*((unsigned __int8 *)a2 + 781);
            v518[0] = 4;
            v519 = v224;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v518);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v518);
            v225 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mPostProcReverb");
            v226 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v225, "mEarlyReflectionTimeProvided");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v518);
            v227 = *v226;
            *v226 = 4;
            v518[0] = v227;
            v228 = (uint64_t *)*((_QWORD *)v226 + 1);
            *((_QWORD *)v226 + 1) = v224;
            v519 = v228;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v226);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v518);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v519, v227);
            v9 = v465;
            if (!*((_BYTE *)a2 + 781))
              break;
            v229 = a2[196];
            v516[0] = 7;
            v517 = v229;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v516);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v516);
            v230 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mPostProcReverb");
            v231 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v230, "mEarlyReflectionTime");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v516);
            v193 = *v231;
            *v231 = 7;
            v516[0] = v193;
            v232 = *((double *)v231 + 1);
            *((double *)v231 + 1) = v229;
            v517 = v232;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v231);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v516);
            v195 = &v517;
            goto LABEL_75;
          case 11:
            v233 = (uint64_t *)*((unsigned __int8 *)a2 + 792);
            v514[0] = 5;
            v515 = v233;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v514);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v514);
            v234 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
            v235 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v234, "mAuSMProcIndex");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v514);
            v236 = *v235;
            *v235 = 5;
            v514[0] = v236;
            v237 = (uint64_t *)*((_QWORD *)v235 + 1);
            *((_QWORD *)v235 + 1) = v233;
            v515 = v237;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v235);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v514);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v515, v236);
            v9 = v465;
            switch(*((_BYTE *)a2 + 792))
            {
              case 1:
                v238 = *((unsigned __int16 *)a2 + 397);
                v512[0] = 5;
                v513 = v238;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v512);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v512);
                v239 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
                v240 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v239, "mSourceType");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v512);
                v193 = *v240;
                *v240 = 5;
                v512[0] = v193;
                v241 = *((_QWORD *)v240 + 1);
                *((_QWORD *)v240 + 1) = v238;
                v513 = v241;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v240);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v512);
                v195 = (double *)&v513;
                goto LABEL_75;
              case 2:
                v401 = (uint64_t *)*((unsigned __int8 *)a2 + 796);
                v510[0] = 5;
                v511 = v401;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v510);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v510);
                v402 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
                v403 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v402, "mDataLocationIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v510);
                v404 = *v403;
                *v403 = 5;
                v510[0] = v404;
                v405 = (uint64_t *)*((_QWORD *)v403 + 1);
                *((_QWORD *)v403 + 1) = v401;
                v511 = v405;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v403);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v510);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v511, v404);
                v406 = (uint64_t *)*((unsigned __int16 *)a2 + 399);
                v508[0] = 5;
                v509 = v406;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v508);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v508);
                v407 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
                v408 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v407, "mCustomData_TableID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v508);
                v409 = *v408;
                *v408 = 5;
                v508[0] = v409;
                v410 = (uint64_t *)*((_QWORD *)v408 + 1);
                *((_QWORD *)v408 + 1) = v406;
                v509 = v410;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v408);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v508);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v509, v409);
                v411 = (uint64_t *)*((unsigned __int16 *)a2 + 400);
                v506[0] = 5;
                v507 = v411;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v506);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v506);
                v412 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
                v413 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v412, "mCustomData_EntryID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v506);
                v414 = *v413;
                *v413 = 5;
                v506[0] = v414;
                v415 = (uint64_t *)*((_QWORD *)v413 + 1);
                *((_QWORD *)v413 + 1) = v411;
                v507 = v415;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v413);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v506);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v507, v414);
                v416 = *((unsigned __int16 *)a2 + 401);
                v504[0] = 5;
                v505 = v416;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v504);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v504);
                v417 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
                v418 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v417, "mFallbackCustomIR");
                v419 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v418, "mSourceType");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v504);
                v193 = *v419;
                *v419 = 5;
                v504[0] = v193;
                v420 = *((_QWORD *)v419 + 1);
                *((_QWORD *)v419 + 1) = v416;
                v505 = v420;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v419);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v504);
                v195 = (double *)&v505;
                goto LABEL_75;
              case 3:
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v502, "dump not implemented");
                v421 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
                v422 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v421, "mParametricRadiationPattern");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v502);
                v423 = *v422;
                *v422 = v502[0];
                v502[0] = v423;
                v424 = *((_QWORD *)v422 + 1);
                *((_QWORD *)v422 + 1) = v503;
                v503 = v424;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v422);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v502);
                v288 = v502[0];
                v73 = (double *)&v503;
                goto LABEL_63;
              case 4:
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v500, "dump not implemented");
                v425 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mRadiationPattern");
                v426 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v425, "mHOADirectivityModel");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v500);
                v427 = *v426;
                *v426 = v500[0];
                v500[0] = v427;
                v428 = *((_QWORD *)v426 + 1);
                *((_QWORD *)v426 + 1) = v501;
                v501 = v428;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v426);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v500);
                v288 = v500[0];
                v73 = (double *)&v501;
                goto LABEL_63;
              default:
                goto LABEL_76;
            }
            break;
          case 12:
            v242 = (uint64_t *)*((unsigned __int8 *)a2 + 1024);
            v498[0] = 4;
            v499 = v242;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v498);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v498);
            v243 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHPVirtualize");
            v244 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v243, "mBypass");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v498);
            v245 = *v244;
            *v244 = 4;
            v498[0] = v245;
            v246 = (uint64_t *)*((_QWORD *)v244 + 1);
            *((_QWORD *)v244 + 1) = v242;
            v499 = v246;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v244);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v498);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v499, v245);
            v247 = (uint64_t *)*((unsigned __int8 *)a2 + 1025);
            v496[0] = 4;
            v497 = v247;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v496);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v496);
            v248 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHPVirtualize");
            v249 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v248, "mHasDRR");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v496);
            v250 = *v249;
            *v249 = 4;
            v496[0] = v250;
            v251 = (uint64_t *)*((_QWORD *)v249 + 1);
            *((_QWORD *)v249 + 1) = v247;
            v497 = v251;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v249);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v496);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v497, v250);
            v9 = v465;
            if (!*((_BYTE *)a2 + 1025))
              break;
            v252 = a2[257];
            v494[0] = 7;
            v495 = v252;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v494);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v494);
            v253 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHPVirtualize");
            v254 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v253, "mDRR");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v494);
            v193 = *v254;
            *v254 = 7;
            v494[0] = v193;
            v255 = *((double *)v254 + 1);
            *((double *)v254 + 1) = v252;
            v495 = v255;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v254);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v494);
            v195 = &v495;
            goto LABEL_75;
          case 13:
            v256 = *((unsigned __int8 *)a2 + 1032);
            v492[0] = 4;
            v493 = v256;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v492);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v492);
            v257 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHeadLock");
            v258 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v257, "mHeadLocked");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v492);
            v193 = *v258;
            *v258 = 4;
            v492[0] = v193;
            v259 = *((_QWORD *)v258 + 1);
            *((_QWORD *)v258 + 1) = v256;
            v493 = v259;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v258);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v492);
            v195 = (double *)&v493;
            goto LABEL_75;
          case 14:
            v260 = *((unsigned __int8 *)a2 + 1035);
            v490[0] = 4;
            v491 = v260;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v490);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v490);
            v261 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mParallax");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v490);
            v193 = *v261;
            *v261 = 4;
            v490[0] = v193;
            v262 = *((_QWORD *)v261 + 1);
            *((_QWORD *)v261 + 1) = v260;
            v491 = v262;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v261);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v490);
            v195 = (double *)&v491;
            goto LABEL_75;
          case 15:
            v263 = *((unsigned __int8 *)a2 + 1036);
            v488[0] = 5;
            v489 = v263;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v488);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v488);
            v264 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mPreferredDoF");
            v265 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v264, "mDoFIndex");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v488);
            v193 = *v265;
            *v265 = 5;
            v488[0] = v193;
            v266 = *((_QWORD *)v265 + 1);
            *((_QWORD *)v265 + 1) = v263;
            v489 = v266;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v265);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v488);
            v195 = (double *)&v489;
            goto LABEL_75;
          case 16:
            v267 = a2[260];
            v484[0] = 7;
            v485 = v267;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v484);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v484);
            v268 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mFieldOfView");
            v269 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v268, "mAzimuth");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v484);
            v193 = *v269;
            *v269 = 7;
            v484[0] = v193;
            v270 = *((double *)v269 + 1);
            *((double *)v269 + 1) = v267;
            v485 = v270;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v269);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v484);
            v195 = &v485;
            goto LABEL_75;
          case 17:
            v271 = (uint64_t *)*((unsigned __int8 *)a2 + 1044);
            v560[0] = 4;
            v561 = v271;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v560);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v560);
            v272 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
            v273 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v272, "mIsZoneDefined");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v560);
            v274 = *v273;
            *v273 = 4;
            v560[0] = v274;
            v275 = (uint64_t *)*((_QWORD *)v273 + 1);
            *((_QWORD *)v273 + 1) = v271;
            v561 = v275;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v273);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v560);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v561, v274);
            v9 = v465;
            if (!*((_BYTE *)a2 + 1044))
              break;
            v276 = (uint64_t *)*((unsigned __int8 *)a2 + 1045);
            v558[0] = 4;
            v559 = v276;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v558);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v558);
            v277 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
            v278 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v277, "mUsePreDefinedZone");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v558);
            v279 = *v278;
            *v278 = 4;
            v558[0] = v279;
            v280 = (uint64_t *)*((_QWORD *)v278 + 1);
            *((_QWORD *)v278 + 1) = v276;
            v559 = v280;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v278);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v558);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v559, v279);
            if (*((_BYTE *)a2 + 1045))
            {
              v281 = *((unsigned __int8 *)a2 + 1047);
              v556[0] = 5;
              v557 = v281;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v556);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v556);
              v282 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
              v283 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v282, "mZoneIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v556);
              v193 = *v283;
              *v283 = 5;
              v556[0] = v193;
              v284 = *((_QWORD *)v283 + 1);
              *((_QWORD *)v283 + 1) = v281;
              v557 = v284;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v283);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v556);
              v195 = (double *)&v557;
            }
            else
            {
              v361 = (uint64_t *)*((unsigned __int8 *)a2 + 1046);
              v554[0] = 4;
              v555 = v361;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v554);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v554);
              v362 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
              v363 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v362, "mIsCartesian");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v554);
              v364 = *v363;
              *v363 = 4;
              v554[0] = v364;
              v365 = (uint64_t *)*((_QWORD *)v363 + 1);
              *((_QWORD *)v363 + 1) = v361;
              v555 = v365;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v363);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v554);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v555, v364);
              if (*((_BYTE *)a2 + 1046))
              {
                v366 = a2[262];
                v552[0] = 7;
                v553 = v366;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v552);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v552);
                v367 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v368 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v367, "mZone");
                v369 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v368, "mMinX");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v552);
                v370 = *v369;
                *v369 = 7;
                v552[0] = v370;
                v371 = *((uint64_t **)v369 + 1);
                *((double *)v369 + 1) = v366;
                v553 = *(double *)&v371;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v369);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v552);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v553, v370);
                v372 = a2[263];
                v550[0] = 7;
                v551 = v372;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v550);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v550);
                v373 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v374 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v373, "mZone");
                v375 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v374, "mMaxX");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v550);
                v376 = *v375;
                *v375 = 7;
                v550[0] = v376;
                v377 = *((uint64_t **)v375 + 1);
                *((double *)v375 + 1) = v372;
                v551 = *(double *)&v377;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v375);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v550);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v551, v376);
                v378 = a2[264];
                v548[0] = 7;
                v549 = v378;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v548);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v548);
                v379 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v380 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v379, "mZone");
                v381 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v380, "mMinY");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v548);
                v382 = *v381;
                *v381 = 7;
                v548[0] = v382;
                v383 = *((uint64_t **)v381 + 1);
                *((double *)v381 + 1) = v378;
                v549 = *(double *)&v383;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v381);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v548);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v549, v382);
                v384 = a2[265];
                v546[0] = 7;
                v547 = v384;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v546);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v546);
                v385 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v386 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v385, "mZone");
                v387 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v386, "mMaxY");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v546);
                v388 = *v387;
                *v387 = 7;
                v546[0] = v388;
                v389 = *((uint64_t **)v387 + 1);
                *((double *)v387 + 1) = v384;
                v547 = *(double *)&v389;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v387);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v546);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v547, v388);
                v390 = a2[266];
                v544[0] = 7;
                v545 = v390;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v544);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v544);
                v391 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v392 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v391, "mZone");
                v393 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v392, "mMinZ");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v544);
                v394 = *v393;
                *v393 = 7;
                v544[0] = v394;
                v395 = *((uint64_t **)v393 + 1);
                *((double *)v393 + 1) = v390;
                v545 = *(double *)&v395;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v393);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v544);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v545, v394);
                v396 = a2[267];
                v542[0] = 7;
                v543 = v396;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v542);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v542);
                v397 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v398 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v397, "mZone");
                v399 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v398, "mMaxZ");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v542);
                v193 = *v399;
                *v399 = 7;
                v542[0] = v193;
                v400 = *((double *)v399 + 1);
                *((double *)v399 + 1) = v396;
                v543 = v400;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v399);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v542);
                v195 = &v543;
              }
              else
              {
                v429 = a2[268];
                v540[0] = 7;
                v541 = v429;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v540);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v540);
                v430 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v431 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v430, "mZone");
                v432 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v431, "mMinAzimuth");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v540);
                v433 = *v432;
                *v432 = 7;
                v540[0] = v433;
                v434 = *((uint64_t **)v432 + 1);
                *((double *)v432 + 1) = v429;
                v541 = *(double *)&v434;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v432);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v540);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v541, v433);
                v435 = a2[269];
                v538[0] = 7;
                v539 = v435;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v538);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v538);
                v436 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v437 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v436, "mZone");
                v438 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v437, "mMaxAzimuth");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v538);
                v439 = *v438;
                *v438 = 7;
                v538[0] = v439;
                v440 = *((uint64_t **)v438 + 1);
                *((double *)v438 + 1) = v435;
                v539 = *(double *)&v440;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v438);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v538);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v539, v439);
                v441 = a2[270];
                v536[0] = 7;
                v537 = v441;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v536);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v536);
                v442 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v443 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v442, "mZone");
                v444 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v443, "mMinElevation");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v536);
                v445 = *v444;
                *v444 = 7;
                v536[0] = v445;
                v446 = *((uint64_t **)v444 + 1);
                *((double *)v444 + 1) = v441;
                v537 = *(double *)&v446;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v444);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v536);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v537, v445);
                v447 = a2[271];
                v534[0] = 7;
                v535 = v447;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v534);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v534);
                v448 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v449 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v448, "mZone");
                v450 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v449, "mMaxElevation");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v534);
                v451 = *v450;
                *v450 = 7;
                v534[0] = v451;
                v452 = *((uint64_t **)v450 + 1);
                *((double *)v450 + 1) = v447;
                v535 = *(double *)&v452;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v450);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v534);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v535, v451);
                v453 = a2[272];
                v532[0] = 7;
                v533 = v453;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v532);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v532);
                v454 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v455 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v454, "mZone");
                v456 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v455, "mMinDistance");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v532);
                v457 = *v456;
                *v456 = 7;
                v532[0] = v457;
                v458 = *((uint64_t **)v456 + 1);
                *((double *)v456 + 1) = v453;
                v533 = *(double *)&v458;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v456);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v532);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v533, v457);
                v459 = a2[273];
                v530[0] = 7;
                v531 = v459;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v530);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v530);
                v460 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mMaskingZone");
                v461 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v460, "mZone");
                v462 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v461, "mMaxDistance");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v530);
                v193 = *v462;
                *v462 = 7;
                v530[0] = v193;
                v463 = *((double *)v462 + 1);
                *((double *)v462 + 1) = v459;
                v531 = v463;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v462);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v530);
                v195 = &v531;
              }
            }
LABEL_75:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v195, v193);
            v9 = v465;
            break;
          case 18:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v482, "dump not implemented");
            v285 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHOA_Origin");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v482);
            v286 = *v285;
            *v285 = v482[0];
            v482[0] = v286;
            v287 = *((_QWORD *)v285 + 1);
            *((_QWORD *)v285 + 1) = v483;
            v483 = v287;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v285);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v482);
            v288 = v482[0];
            v73 = (double *)&v483;
            goto LABEL_63;
          case 19:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v480, "dump not implemented");
            v289 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHOA_Radius");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v480);
            v290 = *v289;
            *v289 = v480[0];
            v480[0] = v290;
            v291 = *((_QWORD *)v289 + 1);
            *((_QWORD *)v289 + 1) = v481;
            v481 = v291;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v289);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v480);
            v288 = v480[0];
            v73 = (double *)&v481;
            goto LABEL_63;
          case 20:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v478, "dump not implemented");
            v292 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHOA_Rotation");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v478);
            v293 = *v292;
            *v292 = v478[0];
            v478[0] = v293;
            v294 = *((_QWORD *)v292 + 1);
            *((_QWORD *)v292 + 1) = v479;
            v479 = v294;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v292);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v478);
            v288 = v478[0];
            v73 = (double *)&v479;
            goto LABEL_63;
          case 21:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v476, "dump not implemented");
            v295 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHOA_InteriorOrExterior");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v476);
            v296 = *v295;
            *v295 = v476[0];
            v476[0] = v296;
            v297 = *((_QWORD *)v295 + 1);
            *((_QWORD *)v295 + 1) = v477;
            v477 = v297;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v295);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v476);
            v288 = v476[0];
            v73 = (double *)&v477;
            goto LABEL_63;
          case 22:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v474, "dump not implemented");
            v298 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mHOARenderingMatrix");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v474);
            v299 = *v298;
            *v298 = v474[0];
            v474[0] = v299;
            v300 = *((_QWORD *)v298 + 1);
            *((_QWORD *)v298 + 1) = v475;
            v475 = v300;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v298);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v474);
            v288 = v474[0];
            v73 = (double *)&v475;
            goto LABEL_63;
          case 23:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v472, "dump not implemented");
            v301 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mNFCRefDist");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v472);
            v302 = *v301;
            *v301 = v472[0];
            v472[0] = v302;
            v303 = *((_QWORD *)v301 + 1);
            *((_QWORD *)v301 + 1) = v473;
            v473 = v303;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v301);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v472);
            v288 = v472[0];
            v73 = (double *)&v473;
            goto LABEL_63;
          case 24:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v470, "dump not implemented");
            v304 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mPropagationDelay");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v470);
            v305 = *v304;
            *v304 = v470[0];
            v470[0] = v305;
            v306 = *((_QWORD *)v304 + 1);
            *((_QWORD *)v304 + 1) = v471;
            v471 = v306;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v304);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v470);
            v288 = v470[0];
            v73 = (double *)&v471;
LABEL_63:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v73, v288);
            break;
          default:
            std::to_string(&v468, v14);
            v307 = std::string::insert(&v468, 0, "Unknown parameter id ", 0x15uLL);
            v469 = *v307;
            v307->__r_.__value_.__l.__size_ = 0;
            v307->__r_.__value_.__r.__words[2] = 0;
            v307->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v468.__r_.__value_.__l.__data_);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v466, "not implemented");
            v308 = SHIBYTE(v469.__r_.__value_.__r.__words[2]);
            v309 = (void *)v469.__r_.__value_.__r.__words[0];
            if ((v469.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v310 = &v469;
            else
              v310 = (std::string *)v469.__r_.__value_.__r.__words[0];
            v311 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, (char *)v310);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v466);
            v312 = *v311;
            *v311 = v466[0];
            v466[0] = v312;
            v313 = (uint64_t *)*((_QWORD *)v311 + 1);
            *((_QWORD *)v311 + 1) = v467;
            v467 = v313;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v311);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v466);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v467, v466[0]);
            if (v308 < 0)
              operator delete(v309);
            break;
        }
LABEL_76:
        ++v13;
      }
      while ((uint64_t *)v13 != v9);
    }
  }
}

void sub_18EF7B7A8(_Unwind_Exception *a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&STACK[0x518]);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(uint64_t result)
{
  const char *v1;
  int v2;

  switch(*(_BYTE *)result)
  {
    case 1:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::object or m_value.object != nullptr";
      v2 = 1220;
      break;
    case 2:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::array or m_value.array != nullptr";
      v2 = 1221;
      break;
    case 3:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::string or m_value.string != nullptr";
      v2 = 1222;
      break;
    case 8:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::binary or m_value.binary != nullptr";
      v2 = 1223;
      break;
    default:
      return result;
  }
  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(unsigned __int8 *a1, char *__s)
{
  int v4;
  _QWORD *v5;
  uint64_t **v6;
  void **v7;
  char *v8;
  uint64_t **v9;
  void *exception;
  unint64_t v12;
  char *v13;
  std::string v14;
  std::string __p;

  v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *v5 = v5 + 1;
    *((_QWORD *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v12 = *a1;
    if (v12 > 9)
      v13 = "number";
    else
      v13 = off_1E2920928[v12];
    std::string::basic_string[abi:ne180100]<0>(&v14, v13);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "cannot use operator[] with a string argument with ", &v14);
    nlohmann::detail::type_error::create((uint64_t)exception, 305, (uint64_t)&__p);
  }
  v6 = (uint64_t **)*((_QWORD *)a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v7 = (void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)v6, &v14, &__p);
  v8 = (char *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = (char *)operator new(0x48uLL);
    *(std::string *)(v8 + 32) = __p;
    memset(&__p, 0, sizeof(__p));
    v8[56] = 0;
    *((_QWORD *)v8 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v8 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v8 + 56));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8 + 56;
}

void sub_18EF7BE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t i;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  void *v26;
  void *v27;
  void **v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v30 = 0;
  v31 = 0;
  v32 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v30, (*a1)[2]);
    v4 = (uint64_t)(*a1 + 1);
    v5 = (_QWORD *)**a1;
    if (v5 != (_QWORD *)v4)
    {
      v6 = v31;
      do
      {
        if (v6 >= v32)
        {
          v6 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v30, (uint64_t)(v5 + 7));
        }
        else
        {
          *(_BYTE *)v6 = *((_BYTE *)v5 + 56);
          *(_QWORD *)(v6 + 8) = v5[8];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 7));
          *((_BYTE *)v5 + 56) = 0;
          v5[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
          v6 += 16;
        }
        v31 = v6;
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != (_QWORD *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v30, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(**a1, (*a1)[1], &v30);
  }
  for (i = v31; v30 != v31; i = v31)
  {
    v13 = *(unsigned __int8 *)(i - 16);
    v11 = i - 16;
    v12 = v13;
    LOBYTE(v28) = v13;
    v14 = *(uint64_t **)(v11 + 8);
    v29 = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    *(_BYTE *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28);
    v15 = v31;
    v16 = v31 - 16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v31 - 16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v15 - 8, *(unsigned __int8 *)(v15 - 16));
    v31 = v16;
    if (v13 == 1)
    {
      v22 = *v14;
      if ((uint64_t *)*v14 == v14 + 1)
      {
        v12 = 1;
      }
      else
      {
        do
        {
          if (v16 >= v32)
          {
            v16 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v30, v22 + 56);
          }
          else
          {
            *(_BYTE *)v16 = *(_BYTE *)(v22 + 56);
            *(_QWORD *)(v16 + 8) = *(_QWORD *)(v22 + 64);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v22 + 56);
            *(_BYTE *)(v22 + 56) = 0;
            *(_QWORD *)(v22 + 64) = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
            v16 += 16;
          }
          v31 = v16;
          v23 = *(uint64_t **)(v22 + 8);
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = *(uint64_t **)(v22 + 16);
              v9 = *v24 == v22;
              v22 = (uint64_t)v24;
            }
            while (!v9);
          }
          v22 = (uint64_t)v24;
        }
        while (v24 != v14 + 1);
        v14 = v29;
        v12 = v28;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((char *)v14[1]);
      *v14 = (uint64_t)(v14 + 1);
      v14[2] = 0;
      v14[1] = 0;
    }
    else if ((_DWORD)v12 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(*v14, v14[1], &v30);
      v18 = *v14;
      v17 = v14[1];
      if (v17 != *v14)
      {
        v19 = v17 - 16;
        v20 = (unsigned __int8 *)(v17 - 16);
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v19);
          v21 = *v20;
          v20 -= 16;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v19 + 8, v21);
          v9 = v19 == v18;
          v19 = (uint64_t)v20;
        }
        while (!v9);
      }
      v14[1] = v18;
      v12 = 2;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v12);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((char *)(*a1)[1]);
      goto LABEL_45;
    case 1:
      v28 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v28);
      goto LABEL_45;
    case 2:
      v25 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0)
        goto LABEL_46;
      v26 = (void *)*v25;
      break;
    case 7:
      v25 = *a1;
      v27 = (void *)**a1;
      if (!v27)
        goto LABEL_46;
      v25[1] = (uint64_t)v27;
      v26 = v27;
      break;
    default:
      goto LABEL_47;
  }
  operator delete(v26);
LABEL_45:
  v25 = *a1;
LABEL_46:
  operator delete(v25);
LABEL_47:
  v28 = (void **)&v30;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v28);
}

uint64_t **nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(uint64_t **a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a1 + 1, *(unsigned __int8 *)a1);
  return a1;
}

unint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, unint64_t a2)
{
  unsigned __int8 *v3;
  int v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string::value_type v39;
  std::string::size_type size;
  uint64_t v41;
  int v42;
  std::string::size_type v43;
  _BYTE *v44;
  unint64_t v45;
  std::string::value_type v46;
  std::string::size_type v47;
  std::string::size_type v48;
  uint64_t v49;
  std::string::size_type v50;
  uint64_t v51;
  uint64_t v52;
  std::string::size_type v53;
  std::string::size_type v54;
  uint64_t v55;
  void *exception;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[8];
  uint64_t *v69;
  std::string v70;
  unint64_t v71;
  uint64_t v72;
  std::string v73;
  char v74;
  std::string::size_type v75;
  std::string::size_type v76;

  v3 = a1;
  v4 = *a1;
  if (!*a1)
  {
    *a1 = 2;
    v5 = operator new(0x18uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    *((_QWORD *)v3 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
    v4 = *v3;
  }
  if (v4 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v58 = *v3;
    if (v58 > 9)
      v59 = "number";
    else
      v59 = off_1E2920928[v58];
    std::string::basic_string[abi:ne180100]<0>(&v73, v59);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v70, "cannot use operator[] with a numeric argument with ", &v73);
    nlohmann::detail::type_error::create((uint64_t)exception, 305, (uint64_t)&v70);
  }
  v6 = (uint64_t *)*((_QWORD *)v3 + 1);
  v7 = *v6;
  v8 = v6[1];
  v9 = (v8 - *v6) >> 4;
  if (v9 <= a2)
  {
    v10 = a2 - v9 + 1;
    v68[0] = 0;
    v69 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v68);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v68);
    if (a2 - v9 != -1)
    {
      v11 = *v6;
      v12 = v8 - *v6;
      v13 = v12 >> 4;
      v14 = *v6 + (v12 & 0xFFFFFFFFFFFFFFF0);
      v64 = v6;
      v17 = v6[2];
      v16 = (uint64_t)(v6 + 2);
      v15 = v17;
      v18 = *(_QWORD *)(v16 - 8);
      if (v10 > (uint64_t)(v17 - v18) >> 4)
      {
        v19 = v10 + ((uint64_t)(v18 - v11) >> 4);
        if (v19 >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v20 = v15 - v11;
        if (v20 >> 3 > v19)
          v19 = v20 >> 3;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        v72 = v16;
        if (v21)
        {
          v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v21);
          v23 = a2 - v9 + 1;
        }
        else
        {
          v23 = a2 - v9 + 1;
          v22 = 0;
        }
        v48 = v21 + 16 * v13;
        v70.__r_.__value_.__r.__words[0] = v21;
        v70.__r_.__value_.__l.__size_ = v48;
        v70.__r_.__value_.__r.__words[2] = v48;
        v71 = v21 + 16 * v22;
        v49 = 16 * a2 - 16 * v9 + 16;
        v50 = v48 + 16 * v23;
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v48, (uint64_t)v68);
          v48 += 16;
          v49 -= 16;
        }
        while (v49);
        v70.__r_.__value_.__r.__words[2] = v50;
        v70.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(v16, v14, v14, *v64, *v64, v70.__r_.__value_.__l.__size_, v70.__r_.__value_.__l.__size_);
        v51 = v64[1];
        v52 = v70.__r_.__value_.__r.__words[2];
        v75 = v70.__r_.__value_.__r.__words[2];
        v76 = v70.__r_.__value_.__r.__words[2];
        v73.__r_.__value_.__r.__words[0] = v16;
        v73.__r_.__value_.__l.__size_ = (std::string::size_type)&v75;
        v73.__r_.__value_.__r.__words[2] = (std::string::size_type)&v76;
        while (v14 != v51)
        {
          *(_BYTE *)v52 = *(_BYTE *)v14;
          *(_QWORD *)(v52 + 8) = *(_QWORD *)(v14 + 8);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
          *(_BYTE *)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v52);
          v52 = v76 + 16;
          v76 += 16;
          v14 += 16;
        }
        v74 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v73);
        v53 = *v64;
        *v64 = v70.__r_.__value_.__l.__size_;
        v70.__r_.__value_.__r.__words[0] = v53;
        v70.__r_.__value_.__l.__size_ = v53;
        v54 = v64[1];
        v64[1] = v52;
        v70.__r_.__value_.__r.__words[2] = v54;
        v55 = v64[2];
        v64[2] = v71;
        v71 = v55;
        std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v70);
        goto LABEL_42;
      }
      v24 = v18 - v14;
      v61 = v13;
      if (v10 <= (uint64_t)(v18 - v14) >> 4)
      {
        v28 = *(_QWORD *)(v16 - 8);
        v26 = v10;
      }
      else
      {
        v25 = 0;
        v26 = v24 >> 4;
        v66 = v18 + 16 * (v10 - (v24 >> 4));
        v27 = 16 * a2 - 16 * (v9 + (v24 >> 4)) + 16;
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v18 + v25, (uint64_t)v68);
          v25 += 16;
        }
        while (v27 != v25);
        v28 = v66;
        v64[1] = v66;
        if (v18 == v14)
          goto LABEL_42;
      }
      v29 = v14 + 16 * v10;
      v60 = v10;
      v30 = v28 - 16 * v10;
      v31 = v28;
      v65 = v30;
      if (v30 < v18)
      {
        v32 = v28 - 16 * v10;
        v31 = v28;
        do
        {
          *(_BYTE *)v31 = *(_BYTE *)v32;
          *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v32);
          *(_BYTE *)v32 = 0;
          *(_QWORD *)(v32 + 8) = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v31);
          v31 += 16;
          v32 += 16;
        }
        while (v32 < v18);
        v30 = v65;
      }
      v62 = a2;
      v63 = v3;
      v64[1] = v31;
      v67 = v28;
      if (v28 != v29)
      {
        v33 = 0;
        v34 = (uint64_t)(v28 - v29) >> 4;
        v35 = v11 + 16 * v61 + 16 * v34;
        v36 = -16 * v34;
        do
        {
          v37 = v35 + v33;
          v38 = v33 - 16;
          v70.__r_.__value_.__s.__data_[0] = *(_BYTE *)(v35 + v33 - 16);
          v39 = v70.__r_.__value_.__s.__data_[0];
          v70.__r_.__value_.__l.__size_ = *(_QWORD *)(v35 + v33 - 8);
          size = v70.__r_.__value_.__l.__size_;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v33 - 16 + v30);
          *(_BYTE *)(v37 - 16) = 0;
          *(_QWORD *)(v37 - 8) = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v70);
          v41 = v67 + v33;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v70);
          v42 = *(unsigned __int8 *)(v41 - 16);
          v41 -= 16;
          *(_BYTE *)v41 = v39;
          v70.__r_.__value_.__s.__data_[0] = v42;
          v43 = *(_QWORD *)(v41 + 8);
          *(_QWORD *)(v41 + 8) = size;
          v70.__r_.__value_.__l.__size_ = v43;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v41);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v70);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v70.__r_.__value_.__l.__size_, v42);
          v30 = v65;
          v33 = v38;
        }
        while (v36 != v38);
      }
      v44 = v68;
      if (v14 <= (unint64_t)v68)
      {
        v45 = v60;
        if (v64[1] <= (unint64_t)v68)
          v45 = 0;
        v44 = &v68[16 * v45];
      }
      a2 = v62;
      v3 = v63;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v70, (uint64_t)v44);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v70);
        v46 = *(_BYTE *)v14;
        *(_BYTE *)v14 = v70.__r_.__value_.__s.__data_[0];
        v70.__r_.__value_.__s.__data_[0] = v46;
        v47 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v70.__r_.__value_.__l.__size_;
        v70.__r_.__value_.__l.__size_ = v47;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v70);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v70.__r_.__value_.__l.__size_, v70.__r_.__value_.__s.__data_[0]);
        v14 += 16;
        --v26;
      }
      while (v26);
    }
LABEL_42:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v68);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v69, v68[0]);
    v7 = **((_QWORD **)v3 + 1);
  }
  return v7 + 16 * a2;
}

void sub_18EF7C78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a17);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>(uint64_t a1, char *a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_18EF7C884(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>(uint64_t a1, char *a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_18EF7C8F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::type_error::create(uint64_t a1, int a2, uint64_t a3)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  void *__p;
  char v21;
  std::string v22;
  void *v23[2];
  int64_t v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;

  std::string::basic_string[abi:ne180100]<0>(&__p, "type_error");
  std::operator+<char>();
  v6 = std::string::append(&v26, ".", 1uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v25, a2);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v25;
  else
    v8 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  else
    size = v25.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v27, (const std::string::value_type *)v8, size);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v28, "] ", 2uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  v14 = *(char *)(a3 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)a3;
  else
    v15 = *(const std::string::value_type **)a3;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a3 + 23);
  else
    v16 = *(_QWORD *)(a3 + 8);
  v17 = std::string::append(&v22, v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v24 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)v23 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(__p);
  if (v24 >= 0)
    v19 = v23;
  else
    v19 = (void **)v23[0];
  *(_QWORD *)a1 = &off_1E29133D0;
  *(_DWORD *)(a1 + 8) = a2;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const char *)v19);
  *(_QWORD *)a1 = &off_1E2913378;
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
}

void sub_18EF7CAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::exception *v41;

  std::exception::~exception(v41);
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void nlohmann::detail::type_error::~type_error(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E29133D0;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E29133D0;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x193FFE460);
}

void nlohmann::detail::exception::~exception(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E29133D0;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E29133D0;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x193FFE460);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t **v18;
  char *v19;
  uint64_t *v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v32[3];
  char v33;
  char *v34;
  char *v35;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  switch(*(_BYTE *)a1)
  {
    case 1:
      v9 = *(_QWORD **)(a2 + 8);
      v4 = (uint64_t)operator new(0x18uLL);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = v4 + 8;
      v12 = (_QWORD *)*v9;
      v10 = v9 + 1;
      v11 = v12;
      if (v12 == v10)
        goto LABEL_37;
      break;
    case 2:
      v24 = *(uint64_t **)(a2 + 8);
      v4 = (uint64_t)operator new(0x18uLL);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      v25 = *v24;
      v26 = v24[1];
      v27 = v26 - *v24;
      if (v26 != *v24)
      {
        if (v27 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v27 >> 4);
        *(_QWORD *)v4 = v28;
        *(_QWORD *)(v4 + 8) = v28;
        *(_QWORD *)(v4 + 16) = &v28[16 * v29];
        v34 = v28;
        v35 = v28;
        v32[0] = v4 + 16;
        v32[1] = (uint64_t)&v34;
        v32[2] = (uint64_t)&v35;
        v30 = v28;
        v33 = 0;
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v30, v25);
          v25 += 16;
          v30 = v35 + 16;
          v35 += 16;
        }
        while (v25 != v26);
        v33 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v32);
        *(_QWORD *)(v4 + 8) = v30;
      }
      goto LABEL_37;
    case 3:
      v5 = *(__int128 **)(a2 + 8);
      v6 = (std::string *)operator new(0x18uLL);
      v4 = (uint64_t)v6;
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        v6->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      }
      goto LABEL_37;
    case 4:
      v4 = *(unsigned __int8 *)(a2 + 8);
      goto LABEL_37;
    case 5:
    case 6:
    case 7:
      v4 = *(_QWORD *)(a2 + 8);
      goto LABEL_37;
    case 8:
      v8 = *(_QWORD *)(a2 + 8);
      v4 = (uint64_t)operator new(0x20uLL);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)v4, *(const void **)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 8) - *(_QWORD *)v8);
      *(_WORD *)(v4 + 24) = *(_WORD *)(v8 + 24);
LABEL_37:
      *(_QWORD *)(a1 + 8) = v4;
      goto LABEL_38;
    default:
LABEL_38:
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
      return a1;
  }
  while (1)
  {
    v13 = *(_QWORD *)(v4 + 8);
    v14 = (_QWORD *)(v4 + 8);
    if (*(_QWORD *)v4 == v4 + 8)
      goto LABEL_15;
    v15 = *(_QWORD **)(v4 + 8);
    v16 = (_QWORD *)(v4 + 8);
    if (v13)
    {
      do
      {
        v14 = v15;
        v15 = (_QWORD *)v15[1];
      }
      while (v15);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v16[2];
        v17 = *v14 == (_QWORD)v16;
        v16 = v14;
      }
      while (v17);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14 + 4, v11 + 4) & 0x80) != 0)
    {
LABEL_15:
      if (!v13)
      {
        v32[0] = v4 + 8;
        v18 = (uint64_t **)(v4 + 8);
LABEL_20:
        v19 = (char *)operator new(0x48uLL);
        v20 = (uint64_t *)v19;
        if (*((char *)v11 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v19 + 32), (const std::string::value_type *)v11[4], v11[5]);
        }
        else
        {
          v21 = *((_OWORD *)v11 + 2);
          *((_QWORD *)v19 + 6) = v11[6];
          *((_OWORD *)v19 + 2) = v21;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v20 + 7, v11 + 7);
        goto LABEL_24;
      }
      v32[0] = (uint64_t)v14;
      v18 = (uint64_t **)(v14 + 1);
    }
    else
    {
      v18 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(v4, v32, v11 + 4);
    }
    if (!*v18)
      goto LABEL_20;
LABEL_24:
    v22 = (_QWORD *)v11[1];
    if (v22)
    {
      do
      {
        v23 = v22;
        v22 = (_QWORD *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        v23 = (_QWORD *)v11[2];
        v17 = *v23 == (_QWORD)v11;
        v11 = v23;
      }
      while (!v17);
    }
    v11 = v23;
    if (v23 == v10)
      goto LABEL_37;
  }
}

void sub_18EF7CF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(i - 16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(i - 8, *(unsigned __int8 *)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;

  if (a3 != a5)
  {
    v10 = 0;
    do
    {
      *(_BYTE *)(a7 + v10 - 16) = *(_BYTE *)(a3 + v10 - 16);
      *(_QWORD *)(a7 + v10 - 8) = *(_QWORD *)(a3 + v10 - 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3 + v10 - 16);
      *(_BYTE *)(a3 + v10 - 16) = 0;
      *(_QWORD *)(a3 + v10 - 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a7 + v10 - 16);
      v10 -= 16;
    }
    while (a3 + v10 != a5);
    a7 += v10;
  }
  return a7;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 16;
      v5 = (unsigned __int8 *)(v2 - 16);
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
        v6 = *v5;
        v5 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v4 + 8), v6);
        v7 = v4 == v3;
        v4 = (uint64_t)v5;
      }
      while (!v7);
    }
  }
  return a1;
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)(v4 - 16);
      v7 = v4 - 16;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        v8 = *v7;
        v7 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6 + 8, v8);
        v9 = v6 == (_QWORD)v2;
        v6 = (uint64_t)v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(*((_QWORD *)a1 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(a1 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a1 + 64, a1[56]);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  if (a1)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2 + 56);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a2 + 64), *(unsigned __int8 *)(a2 + 56));
    if (*(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

_QWORD *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (a2 > (result[2] - *result) >> 4)
  {
    if (a2 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;

  if (result != a2)
  {
    v5 = result;
    v6 = a3[1];
    do
    {
      if (v6 >= a3[2])
      {
        result = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a3, v5);
        v6 = result;
      }
      else
      {
        *(_BYTE *)v6 = *(_BYTE *)v5;
        *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
        *(_BYTE *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        v6 += 16;
      }
      a3[1] = v6;
      v5 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  v7 = a1[2] - *a1;
  if (v7 >> 3 > v3)
    v3 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v8 = 0xFFFFFFFFFFFFFFFLL;
  else
    v8 = v3;
  v14[4] = v6;
  v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v8);
  v10 = (uint64_t)&v9[16 * v2];
  v14[0] = v9;
  v14[1] = v10;
  v14[3] = &v9[16 * v11];
  *(_BYTE *)v10 = *(_BYTE *)a2;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
  v14[2] = v10 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

void APAC::MetadataJSON(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned __int16 *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  char *v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  char *v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  char *v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  char *v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  unsigned __int8 *v30;
  char *v31;
  int v32;
  uint64_t *v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  char *v39;
  int v40;
  uint64_t *v41;
  uint64_t *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  char *v45;
  int v46;
  uint64_t *v47;
  uint64_t *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  char *v51;
  int v52;
  uint64_t *v53;
  unint64_t v54;
  unsigned __int16 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t *v60;
  char *v61;
  int v62;
  uint64_t *v63;
  uint64_t *v64;
  char *v65;
  int v66;
  uint64_t *v67;
  uint64_t *v68;
  char *v69;
  int v70;
  uint64_t *v71;
  uint64_t *v72;
  char *v73;
  int v74;
  uint64_t *v75;
  uint64_t *v76;
  char *v77;
  int v78;
  uint64_t *v79;
  uint64_t *v80;
  char *v81;
  int v82;
  uint64_t *v83;
  uint64_t *v84;
  char *v85;
  int v86;
  uint64_t *v87;
  uint64_t *v88;
  char *v89;
  int v90;
  uint64_t *v91;
  uint64_t *v92;
  char *v93;
  int v94;
  uint64_t *v95;
  uint64_t *v96;
  unsigned __int8 *v97;
  char *v98;
  int v99;
  uint64_t *v100;
  uint64_t *v101;
  char *v102;
  int v103;
  uint64_t *v104;
  unsigned __int8 *v105;
  uint64_t *v106;
  unsigned __int8 *v107;
  char *v108;
  int v109;
  uint64_t *v110;
  _BYTE *v111;
  uint64_t *v112;
  unsigned __int8 *v113;
  char *v114;
  int v115;
  uint64_t *v116;
  unint64_t v117;
  unsigned __int16 *v118;
  uint64_t *v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  int v123;
  uint64_t *v124;
  unsigned int v125;
  uint64_t v126;
  unsigned __int8 *v127;
  char *v128;
  int v129;
  uint64_t v130;
  uint64_t **v131;
  uint64_t v132;
  unsigned __int8 *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 *v137;
  char *v138;
  uint64_t v139;
  uint64_t *v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  char *v143;
  int v144;
  uint64_t *v145;
  int v146;
  uint64_t *v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  char *v150;
  int v151;
  uint64_t *v152;
  uint64_t *v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  char *v156;
  int v157;
  uint64_t *v158;
  uint64_t *v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  char *v162;
  int v163;
  uint64_t *v164;
  uint64_t *v165;
  unsigned __int8 *v166;
  unsigned __int8 *v167;
  char *v168;
  int v169;
  uint64_t *v170;
  uint64_t v171;
  unsigned __int8 *v172;
  unsigned __int8 *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  unsigned __int8 *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unsigned __int8 *v181;
  char *v182;
  uint64_t v183;
  int v184;
  unsigned __int8 *v185;
  char *v186;
  char v187;
  uint64_t v188;
  unsigned __int8 *v189;
  char *v190;
  char v191;
  uint64_t v192;
  double v193;
  unsigned __int8 *v194;
  unsigned __int8 *v195;
  char *v196;
  int v197;
  uint64_t *v198;
  double v199;
  unsigned __int8 *v200;
  unsigned __int8 *v201;
  char *v202;
  int v203;
  uint64_t *v204;
  double v205;
  unsigned __int8 *v206;
  unsigned __int8 *v207;
  char *v208;
  int v209;
  uint64_t *v210;
  std::string *v211;
  unsigned __int8 *v212;
  int v213;
  void *v214;
  std::string *v215;
  char *v216;
  char v217;
  uint64_t *v218;
  uint64_t *v219;
  unsigned __int8 *v220;
  char *v221;
  int v222;
  uint64_t *v223;
  uint64_t *v224;
  unsigned __int8 *v225;
  char *v226;
  int v227;
  uint64_t *v228;
  uint64_t *v229;
  unsigned __int8 *v230;
  unsigned __int8 *v231;
  char *v232;
  int v233;
  uint64_t *v234;
  uint64_t *v235;
  unsigned __int8 *v236;
  unsigned __int8 *v237;
  char *v238;
  int v239;
  uint64_t *v240;
  uint64_t *v241;
  unsigned __int8 *v242;
  unsigned __int8 *v243;
  char *v244;
  int v245;
  uint64_t *v246;
  unint64_t v247;
  unsigned __int8 *v248;
  uint64_t *v249;
  unsigned __int8 *v250;
  unsigned __int8 *v251;
  unsigned __int8 *v252;
  unsigned __int8 *v253;
  char *v254;
  int v255;
  uint64_t *v256;
  unsigned int v257;
  unsigned __int8 *v258;
  uint64_t *v259;
  unsigned __int8 *v260;
  unsigned __int8 *v261;
  unsigned __int8 *v262;
  unsigned __int8 *v263;
  unsigned __int8 *v264;
  char *v265;
  int v266;
  uint64_t *v267;
  unsigned __int8 *v268;
  uint64_t *v269;
  unsigned __int8 *v270;
  unsigned __int8 *v271;
  unsigned __int8 *v272;
  unsigned __int8 *v273;
  unsigned __int8 *v274;
  unsigned __int8 *v275;
  char *v276;
  int v277;
  uint64_t *v278;
  double v279;
  unsigned __int8 *v280;
  unsigned __int8 *v281;
  unsigned __int8 *v282;
  unsigned __int8 *v283;
  unsigned __int8 *v284;
  unsigned __int8 *v285;
  char *v286;
  int v287;
  uint64_t *v288;
  unsigned __int8 *v289;
  uint64_t *v290;
  unsigned __int8 *v291;
  unsigned __int8 *v292;
  unsigned __int8 *v293;
  unsigned __int8 *v294;
  unsigned __int8 *v295;
  unsigned __int8 *v296;
  char *v297;
  int v298;
  uint64_t *v299;
  uint64_t *v300;
  unsigned __int8 *v301;
  unsigned __int8 *v302;
  unsigned __int8 *v303;
  unsigned __int8 *v304;
  unsigned __int8 *v305;
  unsigned __int8 *v306;
  char *v307;
  int v308;
  uint64_t *v309;
  double v310;
  unsigned __int8 *v311;
  unsigned __int8 *v312;
  unsigned __int8 *v313;
  unsigned __int8 *v314;
  unsigned __int8 *v315;
  unsigned __int8 *v316;
  char *v317;
  int v318;
  uint64_t *v319;
  uint64_t *v320;
  unsigned __int8 *v321;
  unsigned __int8 *v322;
  unsigned __int8 *v323;
  unsigned __int8 *v324;
  unsigned __int8 *v325;
  char *v326;
  int v327;
  uint64_t *v328;
  unsigned __int8 *v329;
  uint64_t *v330;
  unsigned __int8 *v331;
  unsigned __int8 *v332;
  unsigned __int8 *v333;
  unsigned __int8 *v334;
  unsigned __int8 *v335;
  unsigned __int8 *v336;
  char *v337;
  uint64_t *v338;
  uint64_t *v339;
  unsigned __int8 *v340;
  unsigned __int8 *v341;
  unsigned __int8 *v342;
  unsigned __int8 *v343;
  unsigned __int8 *v344;
  unsigned __int8 *v345;
  char *v346;
  int v347;
  uint64_t *v348;
  double v349;
  unsigned __int8 *v350;
  unsigned __int8 *v351;
  unsigned __int8 *v352;
  unsigned __int8 *v353;
  unsigned __int8 *v354;
  unsigned __int8 *v355;
  char *v356;
  int v357;
  double v358;
  double *v359;
  uint64_t *v360;
  unsigned __int8 *v361;
  unsigned __int8 *v362;
  unsigned __int8 *v363;
  unsigned __int8 *v364;
  unsigned __int8 *v365;
  char *v366;
  int v367;
  uint64_t *v368;
  uint64_t *v369;
  unsigned __int8 *v370;
  unsigned __int8 *v371;
  unsigned __int8 *v372;
  unsigned __int8 *v373;
  unsigned __int8 *v374;
  char *v375;
  uint64_t *v376;
  unint64_t v377;
  unsigned __int8 *v378;
  unsigned __int8 *v379;
  uint64_t *v380;
  unsigned __int8 *v381;
  unsigned __int8 *v382;
  unsigned __int8 *v383;
  unsigned __int8 *v384;
  unsigned __int8 *v385;
  unsigned __int8 *v386;
  unsigned __int8 *v387;
  char *v388;
  int v389;
  uint64_t *v390;
  uint64_t *v391;
  unsigned __int8 *v392;
  unsigned __int8 *v393;
  unsigned __int8 *v394;
  unsigned __int8 *v395;
  unsigned __int8 *v396;
  unsigned __int8 *v397;
  unsigned __int8 *v398;
  char *v399;
  int v400;
  uint64_t *v401;
  uint64_t *v402;
  unsigned __int8 *v403;
  unsigned __int8 *v404;
  unsigned __int8 *v405;
  unsigned __int8 *v406;
  unsigned __int8 *v407;
  unsigned __int8 *v408;
  unsigned __int8 *v409;
  char *v410;
  int v411;
  uint64_t *v412;
  float v413;
  double v414;
  unsigned __int8 *v415;
  unsigned __int8 *v416;
  unsigned __int8 *v417;
  unsigned __int8 *v418;
  unsigned __int8 *v419;
  unsigned __int8 *v420;
  unsigned __int8 *v421;
  char *v422;
  int v423;
  uint64_t *v424;
  double v425;
  unsigned __int8 *v426;
  unsigned __int8 *v427;
  unsigned __int8 *v428;
  unsigned __int8 *v429;
  unsigned __int8 *v430;
  unsigned __int8 *v431;
  unsigned __int8 *v432;
  char *v433;
  int v434;
  uint64_t *v435;
  double v436;
  unsigned __int8 *v437;
  unsigned __int8 *v438;
  unsigned __int8 *v439;
  unsigned __int8 *v440;
  unsigned __int8 *v441;
  unsigned __int8 *v442;
  unsigned __int8 *v443;
  char *v444;
  int v445;
  double v446;
  double *v447;
  unsigned __int8 *v448;
  unsigned __int8 *v449;
  unsigned __int8 *v450;
  unsigned __int8 *v451;
  unsigned __int8 *v452;
  unsigned __int8 *v453;
  unsigned __int8 *v454;
  char *v455;
  int v456;
  uint64_t *v457;
  double v458;
  unsigned __int8 *v459;
  unsigned __int8 *v460;
  unsigned __int8 *v461;
  unsigned __int8 *v462;
  unsigned __int8 *v463;
  unsigned __int8 *v464;
  unsigned __int8 *v465;
  char *v466;
  int v467;
  uint64_t *v468;
  double v469;
  unsigned __int8 *v470;
  unsigned __int8 *v471;
  unsigned __int8 *v472;
  unsigned __int8 *v473;
  unsigned __int8 *v474;
  unsigned __int8 *v475;
  unsigned __int8 *v476;
  char *v477;
  double v478;
  unsigned __int8 *v479;
  uint64_t *v480;
  unsigned __int8 *v481;
  unsigned __int8 *v482;
  unsigned __int8 *v483;
  unsigned __int8 *v484;
  unsigned __int8 *v485;
  unsigned __int8 *v486;
  unsigned __int8 *v487;
  char *v488;
  int v489;
  uint64_t *v490;
  unsigned __int8 *v491;
  uint64_t *v492;
  unsigned __int8 *v493;
  unsigned __int8 *v494;
  unsigned __int8 *v495;
  unsigned __int8 *v496;
  unsigned __int8 *v497;
  unsigned __int8 *v498;
  unsigned __int8 *v499;
  unsigned __int8 *v500;
  char *v501;
  int v502;
  uint64_t *v503;
  double v504;
  unsigned __int8 *v505;
  unsigned __int8 *v506;
  unsigned __int8 *v507;
  unsigned __int8 *v508;
  unsigned __int8 *v509;
  unsigned __int8 *v510;
  unsigned __int8 *v511;
  unsigned __int8 *v512;
  char *v513;
  int v514;
  uint64_t *v515;
  unsigned __int8 *v516;
  uint64_t *v517;
  unsigned __int8 *v518;
  unsigned __int8 *v519;
  unsigned __int8 *v520;
  unsigned __int8 *v521;
  unsigned __int8 *v522;
  unsigned __int8 *v523;
  unsigned __int8 *v524;
  unsigned __int8 *v525;
  char *v526;
  int v527;
  uint64_t *v528;
  double v529;
  unsigned __int8 *v530;
  unsigned __int8 *v531;
  unsigned __int8 *v532;
  unsigned __int8 *v533;
  unsigned __int8 *v534;
  unsigned __int8 *v535;
  unsigned __int8 *v536;
  unsigned __int8 *v537;
  char *v538;
  int v539;
  uint64_t *v540;
  double v541;
  unsigned __int8 *v542;
  unsigned __int8 *v543;
  unsigned __int8 *v544;
  unsigned __int8 *v545;
  unsigned __int8 *v546;
  unsigned __int8 *v547;
  unsigned __int8 *v548;
  unsigned __int8 *v549;
  char *v550;
  int v551;
  uint64_t *v552;
  double v553;
  unsigned __int8 *v554;
  unsigned __int8 *v555;
  unsigned __int8 *v556;
  unsigned __int8 *v557;
  unsigned __int8 *v558;
  unsigned __int8 *v559;
  unsigned __int8 *v560;
  unsigned __int8 *v561;
  char *v562;
  int v563;
  uint64_t *v564;
  unsigned __int8 *v565;
  uint64_t *v566;
  unsigned __int8 *v567;
  unsigned __int8 *v568;
  unsigned __int8 *v569;
  unsigned __int8 *v570;
  unsigned __int8 *v571;
  unsigned __int8 *v572;
  unsigned __int8 *v573;
  unsigned __int8 *v574;
  char *v575;
  int v576;
  uint64_t *v577;
  uint64_t *v578;
  unsigned __int8 *v579;
  unsigned __int8 *v580;
  unsigned __int8 *v581;
  unsigned __int8 *v582;
  unsigned __int8 *v583;
  unsigned __int8 *v584;
  unsigned __int8 *v585;
  unsigned __int8 *v586;
  char *v587;
  int v588;
  uint64_t *v589;
  double v590;
  unsigned __int8 *v591;
  unsigned __int8 *v592;
  unsigned __int8 *v593;
  unsigned __int8 *v594;
  unsigned __int8 *v595;
  unsigned __int8 *v596;
  unsigned __int8 *v597;
  unsigned __int8 *v598;
  char *v599;
  int v600;
  uint64_t *v601;
  unsigned __int8 *v602;
  uint64_t *v603;
  unsigned __int8 *v604;
  unsigned __int8 *v605;
  unsigned __int8 *v606;
  unsigned __int8 *v607;
  unsigned __int8 *v608;
  unsigned __int8 *v609;
  unsigned __int8 *v610;
  unsigned __int8 *v611;
  char *v612;
  int v613;
  uint64_t *v614;
  double v615;
  unsigned __int8 *v616;
  unsigned __int8 *v617;
  unsigned __int8 *v618;
  unsigned __int8 *v619;
  unsigned __int8 *v620;
  unsigned __int8 *v621;
  unsigned __int8 *v622;
  unsigned __int8 *v623;
  char *v624;
  int v625;
  uint64_t *v626;
  unsigned __int8 *v627;
  uint64_t *v628;
  unsigned __int8 *v629;
  unsigned __int8 *v630;
  unsigned __int8 *v631;
  unsigned __int8 *v632;
  unsigned __int8 *v633;
  unsigned __int8 *v634;
  unsigned __int8 *v635;
  unsigned __int8 *v636;
  char *v637;
  int v638;
  uint64_t *v639;
  unsigned __int8 *v640;
  uint64_t *v641;
  unsigned __int8 *v642;
  unsigned __int8 *v643;
  unsigned __int8 *v644;
  unsigned __int8 *v645;
  unsigned __int8 *v646;
  unsigned __int8 *v647;
  unsigned __int8 *v648;
  unsigned __int8 *v649;
  char *v650;
  int v651;
  uint64_t *v652;
  double v653;
  unsigned __int8 *v654;
  unsigned __int8 *v655;
  unsigned __int8 *v656;
  unsigned __int8 *v657;
  unsigned __int8 *v658;
  unsigned __int8 *v659;
  unsigned __int8 *v660;
  unsigned __int8 *v661;
  char *v662;
  int v663;
  uint64_t *v664;
  unsigned __int8 *v665;
  uint64_t *v666;
  unsigned __int8 *v667;
  unsigned __int8 *v668;
  unsigned __int8 *v669;
  unsigned __int8 *v670;
  unsigned __int8 *v671;
  unsigned __int8 *v672;
  unsigned __int8 *v673;
  unsigned __int8 *v674;
  char *v675;
  int v676;
  uint64_t *v677;
  double v678;
  unsigned __int8 *v679;
  unsigned __int8 *v680;
  unsigned __int8 *v681;
  unsigned __int8 *v682;
  unsigned __int8 *v683;
  unsigned __int8 *v684;
  unsigned __int8 *v685;
  unsigned __int8 *v686;
  char *v687;
  int v688;
  uint64_t *v689;
  double v690;
  unsigned __int8 *v691;
  unsigned __int8 *v692;
  unsigned __int8 *v693;
  unsigned __int8 *v694;
  unsigned __int8 *v695;
  unsigned __int8 *v696;
  unsigned __int8 *v697;
  unsigned __int8 *v698;
  char *v699;
  int v700;
  double v701;
  double *v702;
  double v703;
  unsigned __int8 *v704;
  unsigned __int8 *v705;
  unsigned __int8 *v706;
  unsigned __int8 *v707;
  unsigned __int8 *v708;
  unsigned __int8 *v709;
  unsigned __int8 *v710;
  unsigned __int8 *v711;
  char *v712;
  double v713;
  uint64_t *v714;
  unsigned __int8 *v715;
  unsigned __int8 *v716;
  unsigned __int8 *v717;
  unsigned __int8 *v718;
  unsigned __int8 *v719;
  unsigned __int8 *v720;
  unsigned __int8 *v721;
  char *v722;
  int v723;
  uint64_t *v724;
  uint64_t *v725;
  unsigned __int8 *v726;
  unsigned __int8 *v727;
  unsigned __int8 *v728;
  unsigned __int8 *v729;
  unsigned __int8 *v730;
  unsigned __int8 *v731;
  unsigned __int8 *v732;
  char *v733;
  int v734;
  uint64_t *v735;
  unsigned __int8 *v736;
  uint64_t *v737;
  unsigned __int8 *v738;
  unsigned __int8 *v739;
  unsigned __int8 *v740;
  unsigned __int8 *v741;
  unsigned __int8 *v742;
  unsigned __int8 *v743;
  unsigned __int8 *v744;
  unsigned __int8 *v745;
  char *v746;
  uint64_t *v747;
  uint64_t *v748;
  unsigned __int8 *v749;
  unsigned __int8 *v750;
  unsigned __int8 *v751;
  unsigned __int8 *v752;
  unsigned __int8 *v753;
  unsigned __int8 *v754;
  unsigned __int8 *v755;
  unsigned __int8 *v756;
  char *v757;
  int v758;
  uint64_t *v759;
  double v760;
  unsigned __int8 *v761;
  unsigned __int8 *v762;
  unsigned __int8 *v763;
  unsigned __int8 *v764;
  unsigned __int8 *v765;
  unsigned __int8 *v766;
  unsigned __int8 *v767;
  unsigned __int8 *v768;
  char *v769;
  int v770;
  uint64_t *v771;
  unsigned __int8 *v772;
  uint64_t *v773;
  unsigned __int8 *v774;
  unsigned __int8 *v775;
  unsigned __int8 *v776;
  unsigned __int8 *v777;
  unsigned __int8 *v778;
  unsigned __int8 *v779;
  unsigned __int8 *v780;
  unsigned __int8 *v781;
  char *v782;
  int v783;
  uint64_t *v784;
  unsigned __int8 *v785;
  uint64_t *v786;
  unsigned __int8 *v787;
  unsigned __int8 *v788;
  unsigned __int8 *v789;
  unsigned __int8 *v790;
  unsigned __int8 *v791;
  unsigned __int8 *v792;
  unsigned __int8 *v793;
  unsigned __int8 *v794;
  char *v795;
  int v796;
  uint64_t *v797;
  unsigned __int8 *v798;
  uint64_t *v799;
  unsigned __int8 *v800;
  unsigned __int8 *v801;
  unsigned __int8 *v802;
  unsigned __int8 *v803;
  unsigned __int8 *v804;
  unsigned __int8 *v805;
  unsigned __int8 *v806;
  unsigned __int8 *v807;
  char *v808;
  int v809;
  uint64_t *v810;
  unint64_t v811;
  float *v812;
  uint64_t *v813;
  unsigned __int8 *v814;
  unsigned __int8 *v815;
  unsigned __int8 *v816;
  unsigned __int8 *v817;
  unsigned __int8 *v818;
  unsigned __int8 *v819;
  unsigned __int8 *v820;
  unsigned __int8 *v821;
  unsigned __int8 *v822;
  unsigned __int8 *v823;
  int v824;
  uint64_t *v825;
  uint64_t v826;
  unsigned __int8 *v827;
  unsigned __int8 *v828;
  unsigned __int8 *v829;
  unsigned __int8 *v830;
  unsigned __int8 *v831;
  unsigned __int8 *v832;
  unsigned __int8 *v833;
  unsigned __int8 *v834;
  unsigned __int8 *v835;
  unsigned __int8 *v836;
  int v837;
  uint64_t v838;
  double *v839;
  float v840;
  double v841;
  unsigned __int8 *v842;
  unsigned __int8 *v843;
  unsigned __int8 *v844;
  unsigned __int8 *v845;
  unsigned __int8 *v846;
  unsigned __int8 *v847;
  unsigned __int8 *v848;
  unsigned __int8 *v849;
  unsigned __int8 *v850;
  unsigned __int8 *v851;
  char *v852;
  int v853;
  uint64_t *v854;
  double v855;
  unsigned __int8 *v856;
  unsigned __int8 *v857;
  unsigned __int8 *v858;
  unsigned __int8 *v859;
  unsigned __int8 *v860;
  unsigned __int8 *v861;
  unsigned __int8 *v862;
  unsigned __int8 *v863;
  unsigned __int8 *v864;
  unsigned __int8 *v865;
  char *v866;
  int v867;
  uint64_t *v868;
  double v869;
  unsigned __int8 *v870;
  unsigned __int8 *v871;
  unsigned __int8 *v872;
  unsigned __int8 *v873;
  unsigned __int8 *v874;
  unsigned __int8 *v875;
  unsigned __int8 *v876;
  unsigned __int8 *v877;
  unsigned __int8 *v878;
  unsigned __int8 *v879;
  char *v880;
  int v881;
  uint64_t *v882;
  double v883;
  unsigned __int8 *v884;
  unsigned __int8 *v885;
  unsigned __int8 *v886;
  unsigned __int8 *v887;
  unsigned __int8 *v888;
  unsigned __int8 *v889;
  unsigned __int8 *v890;
  unsigned __int8 *v891;
  unsigned __int8 *v892;
  unsigned __int8 *v893;
  char *v894;
  int v895;
  uint64_t *v896;
  double v897;
  unsigned __int8 *v898;
  unsigned __int8 *v899;
  unsigned __int8 *v900;
  unsigned __int8 *v901;
  unsigned __int8 *v902;
  unsigned __int8 *v903;
  unsigned __int8 *v904;
  unsigned __int8 *v905;
  unsigned __int8 *v906;
  unsigned __int8 *v907;
  char *v908;
  int v909;
  uint64_t *v910;
  double v911;
  unsigned __int8 *v912;
  unsigned __int8 *v913;
  unsigned __int8 *v914;
  unsigned __int8 *v915;
  unsigned __int8 *v916;
  unsigned __int8 *v917;
  unsigned __int8 *v918;
  unsigned __int8 *v919;
  unsigned __int8 *v920;
  unsigned __int8 *v921;
  char *v922;
  double v923;
  unsigned __int8 *v924;
  unsigned __int8 *v925;
  unsigned __int8 *v926;
  unsigned __int8 *v927;
  unsigned __int8 *v928;
  unsigned __int8 *v929;
  unsigned __int8 *v930;
  unsigned __int8 *v931;
  unsigned __int8 *v932;
  unsigned __int8 *v933;
  char *v934;
  int v935;
  uint64_t *v936;
  double v937;
  unsigned __int8 *v938;
  unsigned __int8 *v939;
  unsigned __int8 *v940;
  unsigned __int8 *v941;
  unsigned __int8 *v942;
  unsigned __int8 *v943;
  unsigned __int8 *v944;
  unsigned __int8 *v945;
  unsigned __int8 *v946;
  unsigned __int8 *v947;
  char *v948;
  int v949;
  uint64_t *v950;
  double v951;
  unsigned __int8 *v952;
  unsigned __int8 *v953;
  unsigned __int8 *v954;
  unsigned __int8 *v955;
  unsigned __int8 *v956;
  unsigned __int8 *v957;
  unsigned __int8 *v958;
  unsigned __int8 *v959;
  unsigned __int8 *v960;
  unsigned __int8 *v961;
  char *v962;
  int v963;
  uint64_t *v964;
  double v965;
  unsigned __int8 *v966;
  unsigned __int8 *v967;
  unsigned __int8 *v968;
  unsigned __int8 *v969;
  unsigned __int8 *v970;
  unsigned __int8 *v971;
  unsigned __int8 *v972;
  unsigned __int8 *v973;
  unsigned __int8 *v974;
  unsigned __int8 *v975;
  char *v976;
  double v977;
  unsigned __int8 *v978;
  uint64_t *v979;
  unsigned __int8 *v980;
  unsigned __int8 *v981;
  unsigned __int8 *v982;
  unsigned __int8 *v983;
  unsigned __int8 *v984;
  char *v985;
  int v986;
  uint64_t *v987;
  unsigned __int8 *v988;
  uint64_t *v989;
  unsigned __int8 *v990;
  unsigned __int8 *v991;
  unsigned __int8 *v992;
  unsigned __int8 *v993;
  unsigned __int8 *v994;
  unsigned __int8 *v995;
  char *v996;
  int v997;
  uint64_t *v998;
  double v999;
  unsigned __int8 *v1000;
  unsigned __int8 *v1001;
  unsigned __int8 *v1002;
  unsigned __int8 *v1003;
  unsigned __int8 *v1004;
  unsigned __int8 *v1005;
  char *v1006;
  int v1007;
  uint64_t *v1008;
  unsigned __int8 *v1009;
  uint64_t *v1010;
  unsigned __int8 *v1011;
  unsigned __int8 *v1012;
  unsigned __int8 *v1013;
  unsigned __int8 *v1014;
  unsigned __int8 *v1015;
  unsigned __int8 *v1016;
  char *v1017;
  int v1018;
  uint64_t *v1019;
  uint64_t *v1020;
  unsigned __int8 *v1021;
  unsigned __int8 *v1022;
  unsigned __int8 *v1023;
  unsigned __int8 *v1024;
  unsigned __int8 *v1025;
  unsigned __int8 *v1026;
  char *v1027;
  int v1028;
  uint64_t *v1029;
  double v1030;
  unsigned __int8 *v1031;
  unsigned __int8 *v1032;
  unsigned __int8 *v1033;
  unsigned __int8 *v1034;
  unsigned __int8 *v1035;
  unsigned __int8 *v1036;
  char *v1037;
  int v1038;
  uint64_t *v1039;
  uint64_t *v1040;
  unsigned __int8 *v1041;
  unsigned __int8 *v1042;
  unsigned __int8 *v1043;
  unsigned __int8 *v1044;
  unsigned __int8 *v1045;
  char *v1046;
  int v1047;
  uint64_t *v1048;
  unsigned __int8 *v1049;
  uint64_t *v1050;
  unsigned __int8 *v1051;
  unsigned __int8 *v1052;
  unsigned __int8 *v1053;
  unsigned __int8 *v1054;
  unsigned __int8 *v1055;
  unsigned __int8 *v1056;
  char *v1057;
  uint64_t *v1058;
  uint64_t *v1059;
  unsigned __int8 *v1060;
  unsigned __int8 *v1061;
  unsigned __int8 *v1062;
  unsigned __int8 *v1063;
  unsigned __int8 *v1064;
  unsigned __int8 *v1065;
  char *v1066;
  int v1067;
  uint64_t *v1068;
  double v1069;
  unsigned __int8 *v1070;
  unsigned __int8 *v1071;
  unsigned __int8 *v1072;
  unsigned __int8 *v1073;
  unsigned __int8 *v1074;
  unsigned __int8 *v1075;
  char *v1076;
  double v1077;
  std::string *v1078;
  unsigned __int8 *v1079;
  unsigned __int8 *v1080;
  unsigned __int8 *v1081;
  unsigned __int8 *v1082;
  int v1083;
  void *v1084;
  std::string *v1085;
  char *v1086;
  char v1087;
  uint64_t *v1088;
  uint64_t *v1089;
  unsigned __int8 *v1090;
  unsigned __int8 *v1091;
  char *v1092;
  int v1093;
  uint64_t *v1094;
  uint64_t *v1095;
  unsigned __int8 *v1096;
  char *v1097;
  int v1098;
  uint64_t *v1099;
  unsigned __int8 *v1100;
  unsigned __int8 *v1101;
  unsigned __int8 *v1102;
  uint64_t *v1103;
  char *v1104;
  int v1105;
  uint64_t *v1106;
  uint64_t *v1107;
  char *v1108;
  int v1109;
  uint64_t *v1110;
  unint64_t v1111;
  float *v1112;
  float *v1113;
  uint64_t *v1114;
  unsigned __int8 *v1115;
  unsigned __int8 *v1116;
  int v1117;
  uint64_t *v1118;
  uint64_t v1119;
  char *v1120;
  int v1121;
  uint64_t v1122;
  uint64_t **v1123;
  uint64_t v1124;
  char *v1125;
  int v1126;
  uint64_t v1127;
  double *v1128;
  uint64_t *v1129;
  unsigned __int8 *v1130;
  char *v1131;
  int v1132;
  uint64_t *v1133;
  uint64_t *v1134;
  unsigned __int8 *v1135;
  char *v1136;
  int v1137;
  uint64_t *v1138;
  unint64_t i;
  double v1140;
  unsigned __int8 *v1141;
  unsigned __int8 *v1142;
  unsigned __int8 *v1143;
  int v1144;
  uint64_t *v1145;
  uint64_t *v1146;
  unsigned __int8 *v1147;
  char *v1148;
  int v1149;
  uint64_t *v1150;
  uint64_t *v1151;
  unsigned __int8 *v1152;
  unsigned __int8 *v1153;
  char *v1154;
  int v1155;
  uint64_t *v1156;
  uint64_t *v1157;
  unsigned __int8 *v1158;
  unsigned __int8 *v1159;
  char *v1160;
  int v1161;
  uint64_t *v1162;
  uint64_t *v1163;
  unsigned __int8 *v1164;
  unsigned __int8 *v1165;
  char *v1166;
  int v1167;
  uint64_t *v1168;
  uint64_t *v1169;
  unsigned __int8 *v1170;
  char *v1171;
  int v1172;
  uint64_t *v1173;
  uint64_t *v1174;
  unsigned __int8 *v1175;
  unsigned __int8 *v1176;
  char *v1177;
  int v1178;
  uint64_t *v1179;
  uint64_t *v1180;
  unsigned __int8 *v1181;
  unsigned __int8 *v1182;
  char *v1183;
  int v1184;
  uint64_t *v1185;
  uint64_t v1186;
  unsigned __int8 *v1187;
  unsigned __int8 *v1188;
  char *v1189;
  uint64_t v1190;
  uint64_t *v1191;
  unsigned __int8 *v1192;
  char *v1193;
  int v1194;
  uint64_t *v1195;
  uint64_t v1196;
  unsigned __int8 *v1197;
  char *v1198;
  uint64_t v1199;
  uint64_t *v1200;
  unsigned __int8 *v1201;
  char *v1202;
  int v1203;
  uint64_t *v1204;
  uint64_t *v1205;
  unsigned __int8 *v1206;
  char *v1207;
  int v1208;
  uint64_t *v1209;
  uint64_t v1210;
  unsigned __int8 *v1211;
  char *v1212;
  uint64_t v1213;
  uint64_t v1214;
  char *v1215;
  uint64_t v1216;
  char *v1217;
  char v1218;
  uint64_t v1219;
  int v1220;
  uint64_t v1221;
  char *v1222;
  uint64_t v1223;
  uint64_t *v1224;
  unsigned __int8 *v1225;
  char *v1226;
  int v1227;
  uint64_t *v1228;
  uint64_t *v1229;
  unsigned __int8 *v1230;
  char *v1231;
  int v1232;
  uint64_t *v1233;
  uint64_t *v1234;
  unsigned __int8 *v1235;
  char *v1236;
  int v1237;
  uint64_t *v1238;
  int v1239;
  uint64_t *v1240;
  unsigned __int8 *v1241;
  char *v1242;
  int v1243;
  uint64_t *v1244;
  uint64_t *v1245;
  unsigned __int8 *v1246;
  char *v1247;
  int v1248;
  uint64_t *v1249;
  uint64_t *v1250;
  unsigned __int8 *v1251;
  char *v1252;
  int v1253;
  uint64_t *v1254;
  uint64_t *v1255;
  unsigned __int8 *v1256;
  char *v1257;
  int v1258;
  uint64_t *v1259;
  uint64_t v1260;
  unsigned __int8 *v1261;
  char *v1262;
  uint64_t v1263;
  uint64_t v1264;
  char *v1265;
  uint64_t v1266;
  double v1267;
  unsigned __int8 *v1268;
  char *v1269;
  int v1270;
  uint64_t *v1271;
  uint64_t *v1272;
  unsigned __int8 *v1273;
  char *v1274;
  int v1275;
  uint64_t *v1276;
  double v1277;
  unsigned __int8 *v1278;
  unsigned __int8 *v1279;
  char *v1280;
  int v1281;
  uint64_t *v1282;
  double v1283;
  unsigned __int8 *v1284;
  unsigned __int8 *v1285;
  char *v1286;
  int v1287;
  uint64_t *v1288;
  double v1289;
  unsigned __int8 *v1290;
  unsigned __int8 *v1291;
  char *v1292;
  int v1293;
  uint64_t *v1294;
  double v1295;
  unsigned __int8 *v1296;
  unsigned __int8 *v1297;
  char *v1298;
  double v1299;
  uint64_t v1300;
  char *v1301;
  uint64_t v1302;
  uint64_t *v1303;
  unsigned __int8 *v1304;
  char *v1305;
  int v1306;
  uint64_t *v1307;
  uint64_t *v1308;
  unsigned __int8 *v1309;
  char *v1310;
  int v1311;
  uint64_t *v1312;
  uint64_t *v1313;
  unsigned __int8 *v1314;
  char *v1315;
  int v1316;
  uint64_t *v1317;
  unint64_t v1318;
  float *v1319;
  float *v1320;
  uint64_t *v1321;
  unsigned __int8 *v1322;
  unsigned __int8 *v1323;
  unsigned __int8 *v1324;
  int v1325;
  uint64_t *v1326;
  double v1327;
  unsigned __int8 *v1328;
  unsigned __int8 *v1329;
  unsigned __int8 *v1330;
  char *v1331;
  int v1332;
  uint64_t *v1333;
  double v1334;
  unsigned __int8 *v1335;
  unsigned __int8 *v1336;
  unsigned __int8 *v1337;
  char *v1338;
  int v1339;
  uint64_t *v1340;
  double v1341;
  unsigned __int8 *v1342;
  unsigned __int8 *v1343;
  unsigned __int8 *v1344;
  char *v1345;
  int v1346;
  uint64_t *v1347;
  double v1348;
  unsigned __int8 *v1349;
  unsigned __int8 *v1350;
  unsigned __int8 *v1351;
  char *v1352;
  int v1353;
  uint64_t *v1354;
  double v1355;
  unsigned __int8 *v1356;
  unsigned __int8 *v1357;
  unsigned __int8 *v1358;
  char *v1359;
  int v1360;
  uint64_t *v1361;
  uint64_t *v1362;
  unsigned __int8 *v1363;
  char *v1364;
  int v1365;
  uint64_t *v1366;
  unint64_t v1367;
  uint64_t *v1368;
  unsigned __int8 *v1369;
  unsigned __int8 *v1370;
  unsigned __int8 *v1371;
  int v1372;
  uint64_t *v1373;
  uint64_t *v1374;
  unsigned __int8 *v1375;
  char *v1376;
  int v1377;
  uint64_t *v1378;
  double v1379;
  unsigned __int8 *v1380;
  char *v1381;
  int v1382;
  uint64_t *v1383;
  double v1384;
  unsigned __int8 *v1385;
  char *v1386;
  int v1387;
  uint64_t *v1388;
  uint64_t v1389;
  unsigned __int8 *v1390;
  char *v1391;
  uint64_t v1392;
  uint64_t *v1393;
  unsigned __int8 *v1394;
  char *v1395;
  int v1396;
  uint64_t *v1397;
  uint64_t *v1398;
  unsigned __int8 *v1399;
  char *v1400;
  int v1401;
  uint64_t *v1402;
  uint64_t v1403;
  unsigned __int8 *v1404;
  char *v1405;
  uint64_t v1406;
  std::string *v1407;
  int v1408;
  void *v1409;
  std::string *v1410;
  char *v1411;
  char v1412;
  uint64_t *v1413;
  uint64_t *v1414;
  unsigned __int8 *v1415;
  char *v1416;
  int v1417;
  uint64_t *v1418;
  uint64_t *v1419;
  unsigned __int8 *v1420;
  char *v1421;
  int v1422;
  uint64_t *v1423;
  uint64_t *v1424;
  unsigned __int8 *v1425;
  char *v1426;
  int v1427;
  uint64_t *v1428;
  uint64_t *v1429;
  unsigned __int8 *v1430;
  char *v1431;
  int v1432;
  uint64_t *v1433;
  uint64_t v1434;
  unsigned __int8 *v1435;
  char *v1436;
  uint64_t v1437;
  double v1438;
  unsigned __int8 *v1439;
  unsigned __int8 *v1440;
  char *v1441;
  int v1442;
  uint64_t *v1443;
  double v1444;
  unsigned __int8 *v1445;
  unsigned __int8 *v1446;
  char *v1447;
  int v1448;
  uint64_t *v1449;
  double v1450;
  unsigned __int8 *v1451;
  unsigned __int8 *v1452;
  char *v1453;
  int v1454;
  uint64_t *v1455;
  double v1456;
  unsigned __int8 *v1457;
  unsigned __int8 *v1458;
  char *v1459;
  double v1460;
  uint64_t v1461;
  unsigned __int8 *v1462;
  char *v1463;
  uint64_t v1464;
  double v1465;
  unsigned __int8 *v1466;
  char *v1467;
  int v1468;
  uint64_t *v1469;
  double v1470;
  unsigned __int8 *v1471;
  char *v1472;
  int v1473;
  uint64_t *v1474;
  double v1475;
  unsigned __int8 *v1476;
  char *v1477;
  int v1478;
  uint64_t *v1479;
  uint64_t *v1480;
  unsigned __int8 *v1481;
  char *v1482;
  int v1483;
  uint64_t *v1484;
  unint64_t j;
  double v1486;
  unsigned __int8 *v1487;
  unsigned __int8 *v1488;
  unsigned __int8 *v1489;
  int v1490;
  uint64_t *v1491;
  uint64_t v1492;
  unsigned int v1493;
  unint64_t v1494;
  uint64_t *v1495;
  unsigned __int8 *v1496;
  unsigned __int8 *v1497;
  unsigned __int8 *v1498;
  unsigned __int8 *v1499;
  char *v1500;
  int v1501;
  uint64_t *v1502;
  uint64_t v1503;
  unsigned int v1504;
  unsigned __int8 *v1505;
  unsigned __int8 *v1506;
  unsigned __int8 *v1507;
  unsigned __int8 *v1508;
  char *v1509;
  int v1510;
  uint64_t *v1511;
  uint64_t *v1512;
  unsigned __int8 *v1513;
  unsigned __int8 *v1514;
  unsigned __int8 *v1515;
  unsigned __int8 *v1516;
  char *v1517;
  int v1518;
  uint64_t *v1519;
  uint64_t v1520;
  unsigned int v1521;
  unsigned __int8 *v1522;
  unsigned __int8 *v1523;
  unsigned __int8 *v1524;
  unsigned __int8 *v1525;
  char *v1526;
  int v1527;
  uint64_t *v1528;
  unsigned __int8 *v1529;
  unsigned int v1530;
  unsigned __int8 *v1531;
  unsigned __int8 *v1532;
  unsigned __int8 *v1533;
  unsigned __int8 *v1534;
  char *v1535;
  int v1536;
  uint64_t *v1537;
  int v1538;
  uint64_t v1539;
  unsigned __int8 *v1540;
  unsigned __int8 *v1541;
  unsigned __int8 *v1542;
  unsigned __int8 *v1543;
  char *v1544;
  int v1545;
  uint64_t v1546;
  uint64_t **v1547;
  uint64_t v1548;
  uint64_t *v1549;
  unsigned __int8 *v1550;
  unsigned __int8 *v1551;
  unsigned __int8 *v1552;
  unsigned __int8 *v1553;
  char *v1554;
  int v1555;
  uint64_t *v1556;
  unsigned int v1557;
  unsigned int v1558;
  unsigned __int8 *v1559;
  unsigned __int8 *v1560;
  unsigned __int8 *v1561;
  unsigned __int8 *v1562;
  char *v1563;
  int v1564;
  uint64_t *v1565;
  uint64_t v1566;
  unsigned __int8 *v1567;
  unsigned __int8 *v1568;
  unsigned __int8 *v1569;
  unsigned __int8 *v1570;
  char *v1571;
  uint64_t v1572;
  uint64_t *v1573;
  unsigned __int8 *v1574;
  unsigned __int8 *v1575;
  unsigned __int8 *v1576;
  unsigned __int8 *v1577;
  char *v1578;
  int v1579;
  uint64_t *v1580;
  uint64_t v1581;
  unsigned int v1582;
  unsigned __int8 *v1583;
  unsigned __int8 *v1584;
  unsigned __int8 *v1585;
  unsigned __int8 *v1586;
  char *v1587;
  int v1588;
  uint64_t *v1589;
  uint64_t v1590;
  unsigned __int8 *v1591;
  unsigned __int8 *v1592;
  unsigned __int8 *v1593;
  unsigned __int8 *v1594;
  char *v1595;
  uint64_t v1596;
  uint64_t v1597;
  unsigned __int8 *v1598;
  unsigned __int8 *v1599;
  unsigned __int8 *v1600;
  unsigned __int8 *v1601;
  char *v1602;
  uint64_t v1603;
  unint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t *v1607;
  uint64_t v1608;
  unint64_t v1609;
  unint64_t v1610;
  uint64_t *v1611;
  unsigned __int8 *v1612;
  unsigned __int8 *v1613;
  unsigned __int8 *v1614;
  unsigned __int8 *v1615;
  unsigned __int8 *v1616;
  unsigned __int8 *v1617;
  int v1618;
  uint64_t *v1619;
  unint64_t v1620;
  uint64_t *v1621;
  unsigned __int8 *v1622;
  unsigned __int8 *v1623;
  char *v1624;
  int v1625;
  uint64_t *v1626;
  unint64_t v1627;
  uint64_t v1628;
  _BYTE *v1629;
  uint64_t *v1630;
  unsigned __int8 *v1631;
  unsigned __int8 *v1632;
  unsigned __int8 *v1633;
  unsigned __int8 *v1634;
  char *v1635;
  int v1636;
  uint64_t *v1637;
  uint64_t *v1638;
  unsigned __int8 *v1639;
  unsigned __int8 *v1640;
  unsigned __int8 *v1641;
  unsigned __int8 *v1642;
  char *v1643;
  int v1644;
  uint64_t *v1645;
  uint64_t v1646;
  uint64_t *v1647;
  unsigned __int8 *v1648;
  unsigned __int8 *v1649;
  unsigned __int8 *v1650;
  unsigned __int8 *v1651;
  char *v1652;
  int v1653;
  uint64_t *v1654;
  unint64_t v1655;
  float *v1656;
  uint64_t *v1657;
  unsigned __int8 *v1658;
  unsigned __int8 *v1659;
  unsigned __int8 *v1660;
  unsigned __int8 *v1661;
  unsigned __int8 *v1662;
  unsigned __int8 *v1663;
  char *v1664;
  int v1665;
  uint64_t *v1666;
  uint64_t *v1667;
  unsigned __int8 *v1668;
  unsigned __int8 *v1669;
  unsigned __int8 *v1670;
  unsigned __int8 *v1671;
  unsigned __int8 *v1672;
  unsigned __int8 *v1673;
  char *v1674;
  int v1675;
  uint64_t *v1676;
  uint64_t *v1677;
  unsigned __int8 *v1678;
  unsigned __int8 *v1679;
  unsigned __int8 *v1680;
  unsigned __int8 *v1681;
  unsigned __int8 *v1682;
  unsigned __int8 *v1683;
  char *v1684;
  int v1685;
  uint64_t *v1686;
  unsigned __int8 *v1687;
  unsigned __int8 *v1688;
  unsigned __int8 *v1689;
  unsigned __int8 *v1690;
  unsigned __int8 *v1691;
  unsigned __int8 *v1692;
  unsigned __int8 *v1693;
  _QWORD *exception;
  _QWORD *v1695;
  int v1696;
  uint64_t v1697;
  float *v1698;
  unsigned __int16 *v1699;
  unsigned __int8 *v1700;
  unsigned __int16 *v1701;
  uint64_t v1702;
  char *v1703;
  unsigned __int8 *v1704;
  unsigned __int8 *v1705;
  unsigned __int8 *v1706;
  unsigned __int16 *v1707;
  float *v1708;
  float *v1709;
  unsigned __int16 *v1710;
  unsigned __int8 *v1711;
  unsigned __int8 *v1712;
  uint64_t v1713;
  unsigned __int8 *v1714;
  unsigned __int8 *v1715;
  unsigned __int8 *v1716;
  uint64_t v1717;
  unsigned __int8 *v1718;
  uint64_t *v1719;
  float *v1720;
  unsigned __int8 *v1721;
  unsigned __int16 *v1722;
  uint64_t v1723;
  unsigned __int8 *v1724;
  float *v1725;
  unint64_t v1726;
  unsigned __int8 *v1727;
  unsigned __int16 *v1728;
  char *v1729;
  unsigned int v1730;
  unsigned __int16 *v1731;
  char *v1732;
  uint64_t v1733;
  char v1734[8];
  uint64_t *v1735;
  char v1736[8];
  uint64_t *v1737;
  char v1738[8];
  uint64_t *v1739;
  char v1740[8];
  uint64_t *v1741;
  char v1742[8];
  uint64_t *v1743;
  char v1744[8];
  uint64_t *v1745;
  char v1746[8];
  uint64_t *v1747;
  char v1748[8];
  uint64_t *v1749;
  char v1750[8];
  uint64_t v1751;
  char v1752[8];
  unint64_t v1753;
  char v1754[8];
  uint64_t *v1755;
  char v1756[8];
  uint64_t v1757;
  char v1758[8];
  uint64_t v1759;
  char v1760[8];
  unint64_t v1761;
  char v1762[8];
  uint64_t *v1763;
  char v1764[8];
  uint64_t v1765;
  char v1766[8];
  unint64_t v1767;
  char v1768[8];
  unint64_t v1769;
  char v1770[8];
  uint64_t *v1771;
  char v1772[8];
  unint64_t v1773;
  char v1774[8];
  uint64_t *v1775;
  unsigned __int8 v1776[8];
  uint64_t *v1777;
  unsigned __int8 v1778[8];
  uint64_t v1779;
  char v1780[8];
  uint64_t v1781;
  char v1782[8];
  uint64_t v1783;
  char v1784[8];
  uint64_t v1785;
  char v1786[8];
  uint64_t *v1787;
  char v1788[8];
  uint64_t *v1789;
  char v1790[8];
  uint64_t *v1791;
  char v1792[8];
  uint64_t *v1793;
  char v1794[8];
  uint64_t v1795;
  char v1796[8];
  uint64_t *v1797;
  char v1798[8];
  double v1799;
  char v1800[8];
  uint64_t *v1801;
  char v1802[8];
  double v1803;
  char v1804[8];
  double v1805;
  char v1806[8];
  double v1807;
  char v1808[8];
  double v1809;
  char v1810[8];
  uint64_t *v1811;
  char v1812[8];
  uint64_t *v1813;
  char v1814[8];
  uint64_t v1815;
  char v1816[8];
  double v1817;
  char v1818[8];
  double v1819;
  char v1820[8];
  uint64_t *v1821;
  char v1822[8];
  uint64_t v1823;
  char v1824[8];
  uint64_t *v1825;
  char v1826[8];
  uint64_t *v1827;
  char v1828[8];
  uint64_t v1829;
  char v1830[8];
  uint64_t *v1831;
  char v1832[8];
  uint64_t *v1833;
  char v1834[8];
  uint64_t v1835;
  char v1836[8];
  uint64_t *v1837;
  char v1838[8];
  uint64_t *v1839;
  char v1840[8];
  uint64_t *v1841;
  char v1842[8];
  uint64_t *v1843;
  char v1844[8];
  uint64_t v1845;
  char v1846[8];
  uint64_t *v1847;
  char v1848[8];
  uint64_t *v1849;
  char v1850[8];
  uint64_t *v1851;
  char v1852[8];
  uint64_t *v1853;
  char v1854[8];
  uint64_t *v1855;
  char v1856[8];
  double v1857;
  char v1858[8];
  double v1859;
  char v1860[8];
  double v1861;
  char v1862[8];
  double v1863;
  char v1864[8];
  double v1865;
  char v1866[8];
  uint64_t *v1867;
  char v1868[8];
  uint64_t *v1869;
  char v1870[8];
  uint64_t *v1871;
  char v1872[8];
  uint64_t *v1873;
  char v1874[8];
  double v1875;
  char v1876[8];
  double v1877;
  char v1878[8];
  double v1879;
  char v1880[8];
  double v1881;
  char v1882[8];
  double v1883;
  char v1884[8];
  double v1885;
  char v1886[8];
  double v1887;
  char v1888[8];
  double v1889;
  char v1890[8];
  uint64_t *v1891;
  char v1892[8];
  double v1893;
  char v1894[8];
  uint64_t v1895;
  char v1896[8];
  uint64_t *v1897;
  char v1898[8];
  uint64_t *v1899;
  char v1900[8];
  uint64_t *v1901;
  char v1902[8];
  uint64_t *v1903;
  char v1904[8];
  uint64_t *v1905;
  char v1906[8];
  uint64_t *v1907;
  char v1908[8];
  uint64_t *v1909;
  char v1910[8];
  uint64_t v1911;
  char v1912[8];
  uint64_t v1913;
  char v1914[8];
  uint64_t v1915;
  char v1916[8];
  uint64_t v1917;
  char v1918[8];
  uint64_t *v1919;
  char v1920[8];
  uint64_t *v1921;
  char v1922[8];
  uint64_t *v1923;
  char v1924[8];
  uint64_t *v1925;
  char v1926[8];
  uint64_t *v1927;
  unsigned __int8 v1928[8];
  uint64_t *v1929;
  char v1930[8];
  double v1931;
  char v1932[8];
  double v1933;
  char v1934[8];
  double v1935;
  char v1936[8];
  double v1937;
  char v1938[8];
  double v1939;
  char v1940[8];
  double v1941;
  char v1942[8];
  double v1943;
  char v1944[8];
  double v1945;
  char v1946[8];
  double v1947;
  char v1948[8];
  double v1949;
  char v1950[8];
  uint64_t v1951;
  char v1952[8];
  uint64_t *v1953;
  char v1954[8];
  uint64_t *v1955;
  char v1956[8];
  uint64_t *v1957;
  char v1958[8];
  uint64_t *v1959;
  char v1960[8];
  double v1961;
  char v1962[8];
  uint64_t *v1963;
  char v1964[8];
  uint64_t *v1965;
  char v1966[8];
  uint64_t *v1967;
  char v1968[8];
  uint64_t *v1969;
  char v1970[8];
  double v1971;
  char v1972[8];
  double v1973;
  char v1974[8];
  double v1975;
  char v1976[8];
  uint64_t *v1977;
  char v1978[8];
  double v1979;
  char v1980[8];
  uint64_t *v1981;
  char v1982[8];
  uint64_t *v1983;
  char v1984[8];
  double v1985;
  char v1986[8];
  uint64_t *v1987;
  char v1988[8];
  double v1989;
  char v1990[8];
  uint64_t *v1991;
  char v1992[8];
  uint64_t *v1993;
  char v1994[8];
  double v1995;
  char v1996[8];
  double v1997;
  char v1998[8];
  double v1999;
  char v2000[8];
  uint64_t *v2001;
  char v2002[8];
  double v2003;
  char v2004[8];
  uint64_t *v2005;
  char v2006[8];
  uint64_t *v2007;
  char v2008[8];
  double v2009;
  char v2010[8];
  double v2011;
  char v2012[8];
  double v2013;
  char v2014[8];
  double v2015;
  char v2016[8];
  double v2017;
  char v2018[8];
  double v2019;
  char v2020[8];
  uint64_t *v2021;
  char v2022[8];
  uint64_t *v2023;
  char v2024[8];
  uint64_t *v2025;
  char v2026[8];
  uint64_t *v2027;
  char v2028[8];
  uint64_t *v2029;
  char v2030[8];
  double v2031;
  char v2032[8];
  uint64_t *v2033;
  char v2034[8];
  uint64_t *v2035;
  char v2036[8];
  uint64_t *v2037;
  char v2038[8];
  double v2039;
  char v2040[8];
  uint64_t *v2041;
  char v2042[8];
  uint64_t *v2043;
  char v2044[8];
  double v2045;
  char v2046[8];
  uint64_t *v2047;
  char v2048[8];
  uint64_t *v2049;
  char v2050[8];
  double v2051;
  char v2052[8];
  uint64_t *v2053;
  char v2054[8];
  uint64_t *v2055;
  char v2056[8];
  uint64_t *v2057;
  char v2058[8];
  double v2059;
  char v2060[8];
  uint64_t *v2061;
  char v2062[8];
  uint64_t *v2063;
  char v2064[8];
  double v2065;
  char v2066[8];
  uint64_t *v2067;
  char v2068[8];
  uint64_t *v2069;
  char v2070[8];
  uint64_t *v2071;
  char v2072[8];
  uint64_t *v2073;
  char v2074[8];
  uint64_t *v2075;
  char v2076[8];
  uint64_t *v2077;
  char v2078[8];
  uint64_t *v2079;
  char v2080[8];
  uint64_t *v2081;
  unsigned __int8 v2082[8];
  uint64_t *v2083;
  std::string v2084;
  std::string v2085;
  char v2086[8];
  double v2087;
  char v2088[8];
  double v2089;
  char v2090[8];
  double v2091;
  char v2092[8];
  uint64_t v2093;
  unsigned __int8 v2094[8];
  uint64_t v2095;
  unsigned __int8 v2096[8];
  uint64_t v2097;
  char v2098[8];
  uint64_t v2099;
  char v2100[8];
  uint64_t v2101;
  char v2102[8];
  uint64_t *v2103;
  char v2104[8];
  uint64_t *v2105;
  char v2106[8];
  uint64_t *v2107;
  char v2108[8];
  uint64_t *v2109;
  char v2110[8];
  uint64_t *v2111;
  char v2112[8];
  uint64_t v2113;
  char v2114[8];
  uint64_t v2115;
  char v2116[8];
  uint64_t v2117;
  char v2118[8];
  uint64_t *v2119;
  char v2120[8];
  uint64_t *v2121;
  char v2122[8];
  uint64_t *v2123;
  char v2124[8];
  uint64_t *v2125;
  char v2126[8];
  uint64_t *v2127;
  char v2128[8];
  uint64_t *v2129;
  char v2130[8];
  uint64_t *v2131;
  char v2132[8];
  uint64_t *v2133;
  char v2134[8];
  uint64_t *v2135;
  char v2136[8];
  uint64_t *v2137;
  char v2138[8];
  uint64_t *v2139;
  char v2140[8];
  uint64_t *v2141;
  char v2142[8];
  uint64_t *v2143;
  char v2144[8];
  uint64_t *v2145;
  char v2146[8];
  uint64_t *v2147;
  char v2148[8];
  uint64_t *v2149;
  char v2150[8];
  uint64_t *v2151;
  char v2152[8];
  uint64_t *v2153;
  char v2154[8];
  uint64_t *v2155;
  char v2156[8];
  uint64_t *v2157;
  char v2158[8];
  uint64_t *v2159;
  char v2160[8];
  uint64_t *v2161;
  unsigned __int8 v2162[8];
  uint64_t *v2163;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = (unsigned __int16 *)v1;
  v6 = v5;
  v2162[0] = 0;
  v2163 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2162);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2162);
  v1731 = v4;
  v7 = (uint64_t *)*v4;
  v2160[0] = 5;
  v2161 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2160);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2160);
  v8 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "header");
  v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8, "syncWords");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2160);
  v10 = *v9;
  *v9 = 5;
  v2160[0] = v10;
  v11 = (uint64_t *)*((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = v7;
  v2161 = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2160);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2161, v10);
  v12 = (uint64_t *)v1731[1];
  v2158[0] = 5;
  v2159 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2158);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2158);
  v13 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "header");
  v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "chunkSize");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2158);
  v15 = *v14;
  *v14 = 5;
  v2158[0] = v15;
  v16 = (uint64_t *)*((_QWORD *)v14 + 1);
  *((_QWORD *)v14 + 1) = v12;
  v2159 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2158);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2159, v15);
  v17 = (uint64_t *)*((unsigned __int8 *)v1731 + 4);
  v2156[0] = 5;
  v2157 = v17;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2156);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2156);
  v18 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "header");
  v19 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "version");
  v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v19, "major");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2156);
  v21 = *v20;
  *v20 = 5;
  v2156[0] = v21;
  v22 = (uint64_t *)*((_QWORD *)v20 + 1);
  *((_QWORD *)v20 + 1) = v17;
  v2157 = v22;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2156);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2157, v21);
  v23 = (uint64_t *)*((unsigned __int8 *)v1731 + 5);
  v2154[0] = 5;
  v2155 = v23;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2154);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2154);
  v24 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "header");
  v25 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v24, "version");
  v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v25, "minor");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2154);
  v27 = *v26;
  *v26 = 5;
  v2154[0] = v27;
  v28 = (uint64_t *)*((_QWORD *)v26 + 1);
  *((_QWORD *)v26 + 1) = v23;
  v2155 = v28;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2154);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2155, v27);
  v29 = (uint64_t *)*((unsigned __int8 *)v1731 + 6);
  v2152[0] = 4;
  v2153 = v29;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2152);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2152);
  v30 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "header");
  v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v30, "informationFrame");
  v1695 = v6;
  v1696 = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2152);
  v32 = *v31;
  *v31 = 4;
  v2152[0] = v32;
  v33 = (uint64_t *)*((_QWORD *)v31 + 1);
  *((_QWORD *)v31 + 1) = v29;
  v2153 = v33;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2152);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2153, v32);
  v34 = (unsigned __int8 *)v1731;
  if (*((_BYTE *)v1731 + 4) != 1 || (v35 = *((unsigned __int8 *)v1731 + 5), (v35 - 4) <= 0xFFFFFFFC))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "unsupported version";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  if (v35 == 3)
  {
    v1095 = (uint64_t *)*((unsigned __int8 *)v1731 + 1451081);
    v1924[0] = 4;
    v1925 = v1095;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1924);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1924);
    v1096 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
    v1097 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1096, "mRendererMetadataPresent");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1924);
    v1098 = *v1097;
    *v1097 = 4;
    v1924[0] = v1098;
    v1099 = (uint64_t *)*((_QWORD *)v1097 + 1);
    *((_QWORD *)v1097 + 1) = v1095;
    v1925 = v1099;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1097);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1924);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1925, v1098);
    if (!*((_BYTE *)v1731 + 1451081))
      goto LABEL_204;
    v1703 = (char *)v1731 + 1451081;
    v1719 = (uint64_t *)(v1731 + 727932);
    if (!*((_BYTE *)v1731 + 6))
      goto LABEL_195;
    v1100 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
    v1101 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1100, "mRendererMetadata");
    v1102 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1101, "mGlobalConfig");
    v1103 = (uint64_t *)*((unsigned __int8 *)v1731 + 1451096);
    v1922[0] = 4;
    v1923 = v1103;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1922);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1922);
    v1104 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mHasData");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1922);
    v1105 = *v1104;
    *v1104 = 4;
    v1922[0] = v1105;
    v1106 = (uint64_t *)*((_QWORD *)v1104 + 1);
    *((_QWORD *)v1104 + 1) = v1103;
    v1923 = v1106;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1104);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1922);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1923, v1105);
    if (*((_BYTE *)v1731 + 1451096))
    {
      v1107 = (uint64_t *)v1731[725549];
      v1920[0] = 5;
      v1921 = v1107;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1920);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1920);
      v1108 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mNumParameters");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1920);
      v1109 = *v1108;
      *v1108 = 5;
      v1920[0] = v1109;
      v1110 = (uint64_t *)*((_QWORD *)v1108 + 1);
      *((_QWORD *)v1108 + 1) = v1107;
      v1921 = v1110;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1108);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1920);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1921, v1109);
      v1713 = v1731[725549];
      if (v1731[725549])
      {
        v1111 = 0;
        v1112 = (float *)(v1731 + 727788);
        v1113 = (float *)(v1731 + 727598);
        v1728 = v1731 + 725550;
        v1710 = v1731 + 727892;
        v1722 = v1731 + 727898;
        v1729 = (char *)v1731 + 1455255;
        v1732 = (char *)v1731 + 1455445;
        v1698 = (float *)(v34 + 1455268);
        v1715 = v34 + 1455576;
        while (2)
        {
          v1114 = (uint64_t *)v1728[v1111];
          v1918[0] = 5;
          v1919 = v1114;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1918);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1918);
          v1115 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mParamIndexList");
          v1116 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1115, v1111);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1918);
          v1117 = *v1116;
          *v1116 = 5;
          v1918[0] = v1117;
          v1118 = (uint64_t *)*((_QWORD *)v1116 + 1);
          *((_QWORD *)v1116 + 1) = v1114;
          v1919 = v1118;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1116);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1918);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1919, v1117);
          switch(v1728[v1111])
          {
            case 0u:
              v1119 = *(unsigned __int8 *)v1113;
              v1916[0] = 4;
              v1917 = v1119;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1916);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1916);
              v1120 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mApplyPostProcReverb");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1916);
              v1121 = *v1120;
              *v1120 = 4;
              v1916[0] = v1121;
              v1122 = *((_QWORD *)v1120 + 1);
              *((_QWORD *)v1120 + 1) = v1119;
              v1917 = v1122;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1120);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1916);
              v1123 = (uint64_t **)&v1917;
              goto LABEL_144;
            case 1u:
              v1264 = *((unsigned __int8 *)v1113 + 1);
              v1914[0] = 4;
              v1915 = v1264;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1914);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1914);
              v1265 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mIs6DoF");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1914);
              v1121 = *v1265;
              *v1265 = 4;
              v1914[0] = v1121;
              v1266 = *((_QWORD *)v1265 + 1);
              *((_QWORD *)v1265 + 1) = v1264;
              v1915 = v1266;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1265);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1914);
              v1123 = (uint64_t **)&v1915;
              goto LABEL_144;
            case 2u:
              v1214 = *((unsigned __int8 *)v1113 + 2);
              v1912[0] = 4;
              v1913 = v1214;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1912);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1912);
              v1215 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mHasSceneRadiationPattern");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1912);
              v1121 = *v1215;
              *v1215 = 4;
              v1912[0] = v1121;
              v1216 = *((_QWORD *)v1215 + 1);
              *((_QWORD *)v1215 + 1) = v1214;
              v1913 = v1216;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1215);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1912);
              v1123 = (uint64_t **)&v1913;
              goto LABEL_144;
            case 3u:
              v1221 = *((unsigned __int8 *)v1113 + 3);
              v1910[0] = 5;
              v1911 = v1221;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1910);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1910);
              v1222 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mTargetPlaybackSystemIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1910);
              v1126 = *v1222;
              *v1222 = 5;
              v1910[0] = v1126;
              v1223 = *((_QWORD *)v1222 + 1);
              *((_QWORD *)v1222 + 1) = v1221;
              v1911 = v1223;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1222);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1910);
              v1128 = (double *)&v1911;
              goto LABEL_156;
            case 4u:
              v1146 = (uint64_t *)*((unsigned __int8 *)v1113 + 6);
              v1908[0] = 5;
              v1909 = v1146;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1908);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1908);
              v1147 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1148 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1147, "mAuthoringToolNameIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1908);
              v1149 = *v1148;
              *v1148 = 5;
              v1908[0] = v1149;
              v1150 = (uint64_t *)*((_QWORD *)v1148 + 1);
              *((_QWORD *)v1148 + 1) = v1146;
              v1909 = v1150;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1148);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1908);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1909, v1149);
              v1151 = (uint64_t *)*((unsigned __int8 *)v1113 + 7);
              v1906[0] = 5;
              v1907 = v1151;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1906);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1906);
              v1152 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1153 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1152, "mAuthoringToolVersion");
              v1154 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1153, "mMajor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1906);
              v1155 = *v1154;
              *v1154 = 5;
              v1906[0] = v1155;
              v1156 = (uint64_t *)*((_QWORD *)v1154 + 1);
              *((_QWORD *)v1154 + 1) = v1151;
              v1907 = v1156;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1154);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1906);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1907, v1155);
              v1157 = (uint64_t *)*((unsigned __int8 *)v1113 + 8);
              v1904[0] = 5;
              v1905 = v1157;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1904);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1904);
              v1158 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1159 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1158, "mAuthoringToolVersion");
              v1160 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1159, "mMinor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1904);
              v1161 = *v1160;
              *v1160 = 5;
              v1904[0] = v1161;
              v1162 = (uint64_t *)*((_QWORD *)v1160 + 1);
              *((_QWORD *)v1160 + 1) = v1157;
              v1905 = v1162;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1160);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1904);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1905, v1161);
              v1163 = (uint64_t *)*((unsigned __int8 *)v1113 + 9);
              v1902[0] = 5;
              v1903 = v1163;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1902);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1902);
              v1164 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1165 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1164, "mAuthoringToolVersion");
              v1166 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1165, "mPatch");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1902);
              v1167 = *v1166;
              *v1166 = 5;
              v1902[0] = v1167;
              v1168 = (uint64_t *)*((_QWORD *)v1166 + 1);
              *((_QWORD *)v1166 + 1) = v1163;
              v1903 = v1168;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1166);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1902);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1903, v1167);
              v1169 = (uint64_t *)*((unsigned __int8 *)v1113 + 10);
              v1900[0] = 5;
              v1901 = v1169;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1900);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1900);
              v1170 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1171 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1170, "mRendererNameIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1900);
              v1172 = *v1171;
              *v1171 = 5;
              v1900[0] = v1172;
              v1173 = (uint64_t *)*((_QWORD *)v1171 + 1);
              *((_QWORD *)v1171 + 1) = v1169;
              v1901 = v1173;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1171);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1900);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1901, v1172);
              v1174 = (uint64_t *)*((unsigned __int8 *)v1113 + 11);
              v1898[0] = 5;
              v1899 = v1174;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1898);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1898);
              v1175 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1176 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1175, "mRendererVersion");
              v1177 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1176, "mMajor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1898);
              v1178 = *v1177;
              *v1177 = 5;
              v1898[0] = v1178;
              v1179 = (uint64_t *)*((_QWORD *)v1177 + 1);
              *((_QWORD *)v1177 + 1) = v1174;
              v1899 = v1179;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1177);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1898);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1899, v1178);
              v1180 = (uint64_t *)*((unsigned __int8 *)v1113 + 12);
              v1896[0] = 5;
              v1897 = v1180;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1896);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1896);
              v1181 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1182 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1181, "mRendererVersion");
              v1183 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1182, "mMinor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1896);
              v1184 = *v1183;
              *v1183 = 5;
              v1896[0] = v1184;
              v1185 = (uint64_t *)*((_QWORD *)v1183 + 1);
              *((_QWORD *)v1183 + 1) = v1180;
              v1897 = v1185;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1183);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1896);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1897, v1184);
              v1186 = *((unsigned __int8 *)v1113 + 13);
              v1894[0] = 5;
              v1895 = v1186;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1894);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1894);
              v1187 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mAuthoringInformation");
              v1188 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1187, "mRendererVersion");
              v1189 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1188, "mPatch");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1894);
              v1126 = *v1189;
              *v1189 = 5;
              v1894[0] = v1126;
              v1190 = *((_QWORD *)v1189 + 1);
              *((_QWORD *)v1189 + 1) = v1186;
              v1895 = v1190;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1189);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1894);
              v1128 = (double *)&v1895;
              goto LABEL_156;
            case 5u:
              v1267 = v1113[4];
              v1892[0] = 7;
              v1893 = v1267;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1892);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1892);
              v1268 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
              v1269 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1268, "mAspectRatio");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1892);
              v1270 = *v1269;
              *v1269 = 7;
              v1892[0] = v1270;
              v1271 = *((uint64_t **)v1269 + 1);
              *((double *)v1269 + 1) = v1267;
              v1893 = *(double *)&v1271;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1269);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1892);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1893, v1270);
              v1272 = (uint64_t *)*((unsigned __int8 *)v1113 + 20);
              v1890[0] = 4;
              v1891 = v1272;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1890);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1890);
              v1273 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
              v1274 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1273, "mIsCartesian");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1890);
              v1275 = *v1274;
              *v1274 = 4;
              v1890[0] = v1275;
              v1276 = (uint64_t *)*((_QWORD *)v1274 + 1);
              *((_QWORD *)v1274 + 1) = v1272;
              v1891 = v1276;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1274);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1890);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1891, v1275);
              if (*((_BYTE *)v1113 + 20))
              {
                v1277 = v1113[6];
                v1888[0] = 7;
                v1889 = v1277;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1888);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1888);
                v1278 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1279 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1278, "mScreenCentrePosition");
                v1280 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1279, "mX");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1888);
                v1281 = *v1280;
                *v1280 = 7;
                v1888[0] = v1281;
                v1282 = *((uint64_t **)v1280 + 1);
                *((double *)v1280 + 1) = v1277;
                v1889 = *(double *)&v1282;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1280);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1888);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1889, v1281);
                v1283 = v1113[7];
                v1886[0] = 7;
                v1887 = v1283;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1886);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1886);
                v1284 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1285 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1284, "mScreenCentrePosition");
                v1286 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1285, "mY");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1886);
                v1287 = *v1286;
                *v1286 = 7;
                v1886[0] = v1287;
                v1288 = *((uint64_t **)v1286 + 1);
                *((double *)v1286 + 1) = v1283;
                v1887 = *(double *)&v1288;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1286);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1886);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1887, v1287);
                v1289 = v1113[8];
                v1884[0] = 7;
                v1885 = v1289;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1884);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1884);
                v1290 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1291 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1290, "mScreenCentrePosition");
                v1292 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1291, "mZ");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1884);
                v1293 = *v1292;
                *v1292 = 7;
                v1884[0] = v1293;
                v1294 = *((uint64_t **)v1292 + 1);
                *((double *)v1292 + 1) = v1289;
                v1885 = *(double *)&v1294;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1292);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1884);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1885, v1293);
                v1295 = v1113[12];
                v1882[0] = 7;
                v1883 = v1295;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1882);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1882);
                v1296 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1297 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1296, "mScreenWidth");
                v1298 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1297, "mX");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1882);
                v1126 = *v1298;
                *v1298 = 7;
                v1882[0] = v1126;
                v1299 = *((double *)v1298 + 1);
                *((double *)v1298 + 1) = v1295;
                v1883 = v1299;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1298);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1882);
                v1128 = &v1883;
              }
              else
              {
                v1438 = v1113[9];
                v1880[0] = 7;
                v1881 = v1438;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1880);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1880);
                v1439 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1440 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1439, "mScreenCentrePosition");
                v1441 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1440, "mAzimuth");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1880);
                v1442 = *v1441;
                *v1441 = 7;
                v1880[0] = v1442;
                v1443 = *((uint64_t **)v1441 + 1);
                *((double *)v1441 + 1) = v1438;
                v1881 = *(double *)&v1443;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1441);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1880);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1881, v1442);
                v1444 = v1113[10];
                v1878[0] = 7;
                v1879 = v1444;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1878);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1878);
                v1445 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1446 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1445, "mScreenCentrePosition");
                v1447 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1446, "mElevation");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1878);
                v1448 = *v1447;
                *v1447 = 7;
                v1878[0] = v1448;
                v1449 = *((uint64_t **)v1447 + 1);
                *((double *)v1447 + 1) = v1444;
                v1879 = *(double *)&v1449;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1447);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1878);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1879, v1448);
                v1450 = v1113[11];
                v1876[0] = 7;
                v1877 = v1450;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1876);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1876);
                v1451 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1452 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1451, "mScreenCentrePosition");
                v1453 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1452, "mRadius");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1876);
                v1454 = *v1453;
                *v1453 = 7;
                v1876[0] = v1454;
                v1455 = *((uint64_t **)v1453 + 1);
                *((double *)v1453 + 1) = v1450;
                v1877 = *(double *)&v1455;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1453);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1876);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1877, v1454);
                v1456 = v1113[12];
                v1874[0] = 7;
                v1875 = v1456;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1874);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1874);
                v1457 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mRefScreen");
                v1458 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1457, "mScreenWidth");
                v1459 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1458, "mAzimuth");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1874);
                v1126 = *v1459;
                *v1459 = 7;
                v1874[0] = v1126;
                v1460 = *((double *)v1459 + 1);
                *((double *)v1459 + 1) = v1456;
                v1875 = v1460;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1459);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1874);
                v1128 = &v1875;
              }
              goto LABEL_156;
            case 6u:
              v1303 = (uint64_t *)*((unsigned __int8 *)v1113 + 56);
              v1872[0] = 5;
              v1873 = v1303;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1872);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1872);
              v1304 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
              v1305 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1304, "mSurroundDownmix");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1872);
              v1306 = *v1305;
              *v1305 = 5;
              v1872[0] = v1306;
              v1307 = (uint64_t *)*((_QWORD *)v1305 + 1);
              *((_QWORD *)v1305 + 1) = v1303;
              v1873 = v1307;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1305);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1872);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1873, v1306);
              v1308 = (uint64_t *)*((unsigned __int8 *)v1113 + 57);
              v1870[0] = 5;
              v1871 = v1308;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1870);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1870);
              v1309 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
              v1310 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1309, "mSurroundToStereoDownmix");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1870);
              v1311 = *v1310;
              *v1310 = 5;
              v1870[0] = v1311;
              v1312 = (uint64_t *)*((_QWORD *)v1310 + 1);
              *((_QWORD *)v1310 + 1) = v1308;
              v1871 = v1312;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1310);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1870);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1871, v1311);
              v1313 = (uint64_t *)*((unsigned __int8 *)v1113 + 58);
              v1868[0] = 5;
              v1869 = v1313;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1868);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1868);
              v1314 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
              v1315 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1314, "mPositionAdjustment");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1868);
              v1316 = *v1315;
              *v1315 = 5;
              v1868[0] = v1316;
              v1317 = (uint64_t *)*((_QWORD *)v1315 + 1);
              *((_QWORD *)v1315 + 1) = v1313;
              v1869 = v1317;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1315);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1868);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1869, v1316);
              v1318 = 0;
              v1319 = v1698;
              do
              {
                v1320 = v1113;
                v1321 = (uint64_t *)v1729[v1318];
                v1866[0] = 4;
                v1867 = v1321;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1866);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1866);
                v1322 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
                v1323 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1322, "mIsAutoTrim");
                v1324 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1323, v1318);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1866);
                v1325 = *v1324;
                *v1324 = 4;
                v1866[0] = v1325;
                v1326 = (uint64_t *)*((_QWORD *)v1324 + 1);
                *((_QWORD *)v1324 + 1) = v1321;
                v1867 = v1326;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1324);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1866);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1867, v1325);
                v1113 = v1320;
                if (!v1729[v1318])
                {
                  v1327 = *(v1319 - 1);
                  v1864[0] = 7;
                  v1865 = v1327;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1864);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1864);
                  v1328 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
                  v1329 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1328, "mMixingGains");
                  v1330 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1329, v1318);
                  v1331 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1330, "mFrontGain");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1864);
                  v1332 = *v1331;
                  *v1331 = 7;
                  v1864[0] = v1332;
                  v1333 = *((uint64_t **)v1331 + 1);
                  *((double *)v1331 + 1) = v1327;
                  v1865 = *(double *)&v1333;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1331);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1864);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1865, v1332);
                  v1334 = *v1319;
                  v1862[0] = 7;
                  v1863 = v1334;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1862);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1862);
                  v1335 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
                  v1336 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1335, "mMixingGains");
                  v1337 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1336, v1318);
                  v1338 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1337, "mBackGain");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1862);
                  v1339 = *v1338;
                  *v1338 = 7;
                  v1862[0] = v1339;
                  v1340 = (uint64_t *)*((_QWORD *)v1338 + 1);
                  *((double *)v1338 + 1) = v1334;
                  v1863 = *(double *)&v1340;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1338);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1862);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1863, v1339);
                  v1341 = v1319[1];
                  v1860[0] = 7;
                  v1861 = v1341;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1860);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1860);
                  v1342 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
                  v1343 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1342, "mMixingGains");
                  v1344 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1343, v1318);
                  v1345 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1344, "mTopGain");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1860);
                  v1346 = *v1345;
                  *v1345 = 7;
                  v1860[0] = v1346;
                  v1347 = *((uint64_t **)v1345 + 1);
                  *((double *)v1345 + 1) = v1341;
                  v1861 = *(double *)&v1347;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1345);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1860);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1861, v1346);
                  v1348 = v1319[2];
                  v1858[0] = 7;
                  v1859 = v1348;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1858);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1858);
                  v1349 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
                  v1350 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1349, "mMixingGains");
                  v1351 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1350, v1318);
                  v1352 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1351, "mEarLevelBalance");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1858);
                  v1353 = *v1352;
                  *v1352 = 7;
                  v1858[0] = v1353;
                  v1354 = *((uint64_t **)v1352 + 1);
                  *((double *)v1352 + 1) = v1348;
                  v1859 = *(double *)&v1354;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1352);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1858);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1859, v1353);
                  v1355 = v1319[3];
                  v1856[0] = 7;
                  v1857 = v1355;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1856);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1856);
                  v1356 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
                  v1357 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1356, "mMixingGains");
                  v1358 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1357, v1318);
                  v1359 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1358, "mHeightBalance");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1856);
                  v1360 = *v1359;
                  *v1359 = 7;
                  v1856[0] = v1360;
                  v1361 = *((uint64_t **)v1359 + 1);
                  *((double *)v1359 + 1) = v1355;
                  v1857 = *(double *)&v1361;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1359);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1856);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1857, v1360);
                }
                ++v1318;
                v1319 += 5;
              }
              while (v1318 != 9);
              v1362 = (uint64_t *)*((unsigned __int8 *)v1320 + 248);
              v1854[0] = 5;
              v1855 = v1362;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1854);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1854);
              v1363 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
              v1364 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1363, "mNumChannels");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1854);
              v1365 = *v1364;
              *v1364 = 5;
              v1854[0] = v1365;
              v1366 = (uint64_t *)*((_QWORD *)v1364 + 1);
              *((_QWORD *)v1364 + 1) = v1362;
              v1855 = v1366;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1364);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1854);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1855, v1365);
              if (*((_BYTE *)v1320 + 248))
              {
                v1367 = 0;
                do
                {
                  v1368 = (uint64_t *)v1732[v1367];
                  v1852[0] = 4;
                  v1853 = v1368;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1852);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1852);
                  v1369 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSupplementaryProductionMetadata");
                  v1370 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1369, "mIsPerChTrimEnabled");
                  v1371 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1370, v1367);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1852);
                  v1372 = *v1371;
                  *v1371 = 4;
                  v1852[0] = v1372;
                  v1373 = (uint64_t *)*((_QWORD *)v1371 + 1);
                  *((_QWORD *)v1371 + 1) = v1368;
                  v1853 = v1373;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1371);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1852);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1853, v1372);
                  ++v1367;
                }
                while (v1367 < *((unsigned __int8 *)v1320 + 248));
              }
              goto LABEL_158;
            case 7u:
              v1224 = (uint64_t *)*(unsigned __int8 *)v1112;
              v1850[0] = 4;
              v1851 = v1224;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1850);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1850);
              v1225 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
              v1226 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1225, "mIsDirectBinauralization");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1850);
              v1227 = *v1226;
              *v1226 = 4;
              v1850[0] = v1227;
              v1228 = (uint64_t *)*((_QWORD *)v1226 + 1);
              *((_QWORD *)v1226 + 1) = v1224;
              v1851 = v1228;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1226);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1850);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1851, v1227);
              if (*(_BYTE *)v1112)
              {
                v1229 = (uint64_t *)*((unsigned int *)v1112 + 1);
                v1848[0] = 5;
                v1849 = v1229;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1848);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1848);
                v1230 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
                v1231 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1230, "mChannelLayoutTag");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1848);
                v1232 = *v1231;
                *v1231 = 5;
                v1848[0] = v1232;
                v1233 = (uint64_t *)*((_QWORD *)v1231 + 1);
                *((_QWORD *)v1231 + 1) = v1229;
                v1849 = v1233;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1231);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1848);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1849, v1232);
              }
              v1234 = (uint64_t *)*((unsigned __int8 *)v1112 + 8);
              v1846[0] = 5;
              v1847 = v1234;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1846);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1846);
              v1235 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
              v1236 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1235, "mHRTFType");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1846);
              v1237 = *v1236;
              *v1236 = 5;
              v1846[0] = v1237;
              v1238 = (uint64_t *)*((_QWORD *)v1236 + 1);
              *((_QWORD *)v1236 + 1) = v1234;
              v1847 = v1238;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1236);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1846);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1847, v1237);
              v1239 = *((unsigned __int8 *)v1112 + 8);
              if (v1239 == 1)
              {
                v1461 = *((unsigned __int8 *)v1112 + 9);
                v1844[0] = 5;
                v1845 = v1461;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1844);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1844);
                v1462 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
                v1463 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1462, "mPredefinedIR_ID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1844);
                v1126 = *v1463;
                *v1463 = 5;
                v1844[0] = v1126;
                v1464 = *((_QWORD *)v1463 + 1);
                *((_QWORD *)v1463 + 1) = v1461;
                v1845 = v1464;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1463);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1844);
                v1128 = (double *)&v1845;
              }
              else
              {
                if (v1239 != 2)
                  goto LABEL_158;
                v1240 = (uint64_t *)v1715[9];
                v1842[0] = 5;
                v1843 = v1240;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1842);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1842);
                v1241 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
                v1242 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1241, "mPredefinedIR_ID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1842);
                v1243 = *v1242;
                *v1242 = 5;
                v1842[0] = v1243;
                v1244 = (uint64_t *)*((_QWORD *)v1242 + 1);
                *((_QWORD *)v1242 + 1) = v1240;
                v1843 = v1244;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1242);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1842);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1843, v1243);
                v1245 = (uint64_t *)v1715[14];
                v1840[0] = 5;
                v1841 = v1245;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1840);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1840);
                v1246 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
                v1247 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1246, "mDataLocationIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1840);
                v1248 = *v1247;
                *v1247 = 5;
                v1840[0] = v1248;
                v1249 = (uint64_t *)*((_QWORD *)v1247 + 1);
                *((_QWORD *)v1247 + 1) = v1245;
                v1841 = v1249;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1247);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1840);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1841, v1248);
                v1250 = (uint64_t *)*((unsigned __int16 *)v1715 + 5);
                v1838[0] = 5;
                v1839 = v1250;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1838);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1838);
                v1251 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
                v1252 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1251, "mCustomData_TableID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1838);
                v1253 = *v1252;
                *v1252 = 5;
                v1838[0] = v1253;
                v1254 = (uint64_t *)*((_QWORD *)v1252 + 1);
                *((_QWORD *)v1252 + 1) = v1250;
                v1839 = v1254;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1252);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1838);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1839, v1253);
                v1255 = (uint64_t *)*((unsigned __int16 *)v1715 + 6);
                v1836[0] = 5;
                v1837 = v1255;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1836);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1836);
                v1256 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
                v1257 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1256, "mCustomData_EntryID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1836);
                v1258 = *v1257;
                *v1257 = 5;
                v1836[0] = v1258;
                v1259 = (uint64_t *)*((_QWORD *)v1257 + 1);
                *((_QWORD *)v1257 + 1) = v1255;
                v1837 = v1259;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1257);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1836);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1837, v1258);
                v1260 = v1715[8];
                v1834[0] = 5;
                v1835 = v1260;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1834);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1834);
                v1261 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mBinauralization");
                v1262 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1261, "mHRTFType");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1834);
                v1126 = *v1262;
                *v1262 = 5;
                v1834[0] = v1126;
                v1263 = *((_QWORD *)v1262 + 1);
                *((_QWORD *)v1262 + 1) = v1260;
                v1835 = v1263;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1262);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1834);
                v1128 = (double *)&v1835;
              }
LABEL_156:
              v1220 = v1126;
LABEL_157:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v1128, v1220);
LABEL_158:
              ++v1111;
              v1112 = (float *)v1715;
              if (v1111 == v1713)
                break;
              continue;
            case 8u:
              v1393 = (uint64_t *)*((unsigned __int8 *)v1112 + 16);
              v1832[0] = 5;
              v1833 = v1393;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1832);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1832);
              v1394 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mHCFilter");
              v1395 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1394, "mDataLocationIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1832);
              v1396 = *v1395;
              *v1395 = 5;
              v1832[0] = v1396;
              v1397 = (uint64_t *)*((_QWORD *)v1395 + 1);
              *((_QWORD *)v1395 + 1) = v1393;
              v1833 = v1397;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1395);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1832);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1833, v1396);
              v1398 = (uint64_t *)*((unsigned __int16 *)v1112 + 9);
              v1830[0] = 5;
              v1831 = v1398;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1830);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1830);
              v1399 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mHCFilter");
              v1400 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1399, "mCustomData_TableID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1830);
              v1401 = *v1400;
              *v1400 = 5;
              v1830[0] = v1401;
              v1402 = (uint64_t *)*((_QWORD *)v1400 + 1);
              *((_QWORD *)v1400 + 1) = v1398;
              v1831 = v1402;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1400);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1830);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1831, v1401);
              v1403 = *((unsigned __int16 *)v1112 + 10);
              v1828[0] = 5;
              v1829 = v1403;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1828);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1828);
              v1404 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mHCFilter");
              v1405 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1404, "mCustomData_EntryID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1828);
              v1126 = *v1405;
              *v1405 = 5;
              v1828[0] = v1126;
              v1406 = *((_QWORD *)v1405 + 1);
              *((_QWORD *)v1405 + 1) = v1403;
              v1829 = v1406;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1405);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1828);
              v1128 = (double *)&v1829;
              goto LABEL_156;
            case 9u:
              v1200 = (uint64_t *)*((unsigned __int8 *)v1112 + 24);
              v1826[0] = 5;
              v1827 = v1200;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1826);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1826);
              v1201 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSPAD");
              v1202 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1201, "mDataLocationIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1826);
              v1203 = *v1202;
              *v1202 = 5;
              v1826[0] = v1203;
              v1204 = (uint64_t *)*((_QWORD *)v1202 + 1);
              *((_QWORD *)v1202 + 1) = v1200;
              v1827 = v1204;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1202);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1826);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1827, v1203);
              v1205 = (uint64_t *)*((unsigned __int16 *)v1112 + 13);
              v1824[0] = 5;
              v1825 = v1205;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1824);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1824);
              v1206 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSPAD");
              v1207 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1206, "mCustomData_TableID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1824);
              v1208 = *v1207;
              *v1207 = 5;
              v1824[0] = v1208;
              v1209 = (uint64_t *)*((_QWORD *)v1207 + 1);
              *((_QWORD *)v1207 + 1) = v1205;
              v1825 = v1209;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1207);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1824);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1825, v1208);
              v1210 = *((unsigned __int16 *)v1112 + 14);
              v1822[0] = 5;
              v1823 = v1210;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1822);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1822);
              v1211 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mSPAD");
              v1212 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1211, "mCustomData_EntryID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1822);
              v1126 = *v1212;
              *v1212 = 5;
              v1822[0] = v1126;
              v1213 = *((_QWORD *)v1212 + 1);
              *((_QWORD *)v1212 + 1) = v1210;
              v1823 = v1213;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1212);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1822);
              v1128 = (double *)&v1823;
              goto LABEL_156;
            case 0xAu:
              v1374 = (uint64_t *)*((unsigned __int8 *)v1112 + 168);
              v1820[0] = 5;
              v1821 = v1374;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1820);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1820);
              v1375 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mDistanceAttenuation");
              v1376 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1375, "mAttnLawIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1820);
              v1377 = *v1376;
              *v1376 = 5;
              v1820[0] = v1377;
              v1378 = (uint64_t *)*((_QWORD *)v1376 + 1);
              *((_QWORD *)v1376 + 1) = v1374;
              v1821 = v1378;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1376);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1820);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1821, v1377);
              v1379 = v1112[44];
              v1818[0] = 7;
              v1819 = v1379;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1818);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1818);
              v1380 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mDistanceAttenuation");
              v1381 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1380, "mRefDistance");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1818);
              v1382 = *v1381;
              *v1381 = 7;
              v1818[0] = v1382;
              v1383 = *((uint64_t **)v1381 + 1);
              *((double *)v1381 + 1) = v1379;
              v1819 = *(double *)&v1383;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1381);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1818);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1819, v1382);
              v1384 = v1112[45];
              v1816[0] = 7;
              v1817 = v1384;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1816);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1816);
              v1385 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mDistanceAttenuation");
              v1386 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1385, "mMaxDistance");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1816);
              v1387 = *v1386;
              *v1386 = 7;
              v1816[0] = v1387;
              v1388 = *((uint64_t **)v1386 + 1);
              *((double *)v1386 + 1) = v1384;
              v1817 = *(double *)&v1388;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1386);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1816);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1817, v1387);
              v1389 = *((unsigned __int8 *)v1112 + 184);
              v1814[0] = 4;
              v1815 = v1389;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1814);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1814);
              v1390 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mDistanceAttenuation");
              v1391 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1390, "mAttnNormIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1814);
              v1121 = *v1391;
              *v1391 = 4;
              v1814[0] = v1121;
              v1392 = *((_QWORD *)v1391 + 1);
              *((_QWORD *)v1391 + 1) = v1389;
              v1815 = v1392;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1391);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1814);
              v1123 = (uint64_t **)&v1815;
LABEL_144:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v1123, v1121);
              goto LABEL_158;
            case 0xBu:
              v1129 = (uint64_t *)*((unsigned __int8 *)v1112 + 188);
              v1812[0] = 4;
              v1813 = v1129;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1812);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1812);
              v1130 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
              v1131 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1130, "mPositionPresent");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1812);
              v1132 = *v1131;
              *v1131 = 4;
              v1812[0] = v1132;
              v1133 = (uint64_t *)*((_QWORD *)v1131 + 1);
              *((_QWORD *)v1131 + 1) = v1129;
              v1813 = v1133;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1131);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1812);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1813, v1132);
              if (*((_BYTE *)v1112 + 188))
              {
                v1134 = (uint64_t *)v1715[189];
                v1810[0] = 4;
                v1811 = v1134;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1810);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1810);
                v1135 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
                v1136 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1135, "mIsCartesian");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1810);
                v1137 = *v1136;
                *v1136 = 4;
                v1810[0] = v1137;
                v1138 = (uint64_t *)*((_QWORD *)v1136 + 1);
                *((_QWORD *)v1136 + 1) = v1134;
                v1811 = v1138;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1136);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1810);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1811, v1137);
                if (v1715[189])
                {
                  for (i = 0; i != 3; ++i)
                  {
                    v1140 = *(float *)&v1710[2 * i];
                    v1808[0] = 7;
                    v1809 = v1140;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1808);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1808);
                    v1141 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
                    v1142 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1141, "mCoordinate");
                    v1143 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1142, i);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1808);
                    v1144 = *v1143;
                    *v1143 = 7;
                    v1808[0] = v1144;
                    v1145 = *((uint64_t **)v1143 + 1);
                    *((double *)v1143 + 1) = v1140;
                    v1809 = *(double *)&v1145;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1143);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1808);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1809, v1144);
                  }
                }
                else
                {
                  v1465 = *((float *)v1715 + 48);
                  v1806[0] = 7;
                  v1807 = v1465;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1806);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1806);
                  v1466 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
                  v1467 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1466, "mAzimuth");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1806);
                  v1468 = *v1467;
                  *v1467 = 7;
                  v1806[0] = v1468;
                  v1469 = *((uint64_t **)v1467 + 1);
                  *((double *)v1467 + 1) = v1465;
                  v1807 = *(double *)&v1469;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1467);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1806);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1807, v1468);
                  v1470 = *((float *)v1715 + 49);
                  v1804[0] = 7;
                  v1805 = v1470;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1804);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1804);
                  v1471 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
                  v1472 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1471, "mElevation");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1804);
                  v1473 = *v1472;
                  *v1472 = 7;
                  v1804[0] = v1473;
                  v1474 = *((uint64_t **)v1472 + 1);
                  *((double *)v1472 + 1) = v1470;
                  v1805 = *(double *)&v1474;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1472);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1804);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1805, v1473);
                  v1475 = *((float *)v1715 + 50);
                  v1802[0] = 7;
                  v1803 = v1475;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1802);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1802);
                  v1476 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
                  v1477 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1476, "mRadius");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1802);
                  v1478 = *v1477;
                  *v1477 = 7;
                  v1802[0] = v1478;
                  v1479 = *((uint64_t **)v1477 + 1);
                  *((double *)v1477 + 1) = v1475;
                  v1803 = *(double *)&v1479;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1477);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1802);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1803, v1478);
                }
              }
              v1480 = (uint64_t *)v1715[204];
              v1800[0] = 4;
              v1801 = v1480;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1800);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1800);
              v1481 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
              v1482 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1481, "mRotationPresent");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1800);
              v1483 = *v1482;
              *v1482 = 4;
              v1800[0] = v1483;
              v1484 = (uint64_t *)*((_QWORD *)v1482 + 1);
              *((_QWORD *)v1482 + 1) = v1480;
              v1801 = v1484;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1482);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1800);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1801, v1483);
              if (v1715[204])
              {
                for (j = 0; j != 4; ++j)
                {
                  v1486 = *(float *)&v1722[2 * j];
                  v1798[0] = 7;
                  v1799 = v1486;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1798);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1798);
                  v1487 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mCameraPerspective");
                  v1488 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1487, "mQuaternion");
                  v1489 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1488, j);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1798);
                  v1490 = *v1489;
                  *v1489 = 7;
                  v1798[0] = v1490;
                  v1491 = *((uint64_t **)v1489 + 1);
                  *((double *)v1489 + 1) = v1486;
                  v1799 = *(double *)&v1491;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1489);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1798);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1799, v1490);
                }
              }
              goto LABEL_158;
            case 0xCu:
              v1191 = (uint64_t *)*((unsigned __int8 *)v1112 + 236);
              v1796[0] = 4;
              v1797 = v1191;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1796);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1796);
              v1192 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mGenericRenderingConfig");
              v1193 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1192, "mHasPreset");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1796);
              v1194 = *v1193;
              *v1193 = 4;
              v1796[0] = v1194;
              v1195 = (uint64_t *)*((_QWORD *)v1193 + 1);
              *((_QWORD *)v1193 + 1) = v1191;
              v1797 = v1195;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1193);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1796);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1797, v1194);
              if (*((_BYTE *)v1112 + 236))
              {
                v1196 = *((unsigned __int16 *)v1112 + 119);
                v1794[0] = 5;
                v1795 = v1196;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1794);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1794);
                v1197 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mGenericRenderingConfig");
                v1198 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1197, "mPresetIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1794);
                v1126 = *v1198;
                *v1198 = 5;
                v1794[0] = v1126;
                v1199 = *((_QWORD *)v1198 + 1);
                *((_QWORD *)v1198 + 1) = v1196;
                v1795 = v1199;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1198);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1794);
                v1128 = (double *)&v1795;
              }
              else
              {
                v1414 = (uint64_t *)*((unsigned __int8 *)v1112 + 240);
                v1792[0] = 5;
                v1793 = v1414;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1792);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1792);
                v1415 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mGenericRenderingConfig");
                v1416 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1415, "mDataLocationIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1792);
                v1417 = *v1416;
                *v1416 = 5;
                v1792[0] = v1417;
                v1418 = (uint64_t *)*((_QWORD *)v1416 + 1);
                *((_QWORD *)v1416 + 1) = v1414;
                v1793 = v1418;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1416);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1792);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1793, v1417);
                v1419 = (uint64_t *)*((unsigned __int16 *)v1112 + 121);
                v1790[0] = 5;
                v1791 = v1419;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1790);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1790);
                v1420 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mGenericRenderingConfig");
                v1421 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1420, "mCustomData_TableID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1790);
                v1422 = *v1421;
                *v1421 = 5;
                v1790[0] = v1422;
                v1423 = (uint64_t *)*((_QWORD *)v1421 + 1);
                *((_QWORD *)v1421 + 1) = v1419;
                v1791 = v1423;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1421);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1790);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1791, v1422);
                v1424 = (uint64_t *)*((unsigned __int16 *)v1112 + 122);
                v1788[0] = 5;
                v1789 = v1424;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1788);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1788);
                v1425 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mGenericRenderingConfig");
                v1426 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1425, "mCustomData_EntryID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1788);
                v1427 = *v1426;
                *v1426 = 5;
                v1788[0] = v1427;
                v1428 = (uint64_t *)*((_QWORD *)v1426 + 1);
                *((_QWORD *)v1426 + 1) = v1424;
                v1789 = v1428;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1426);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1788);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1789, v1427);
                v1429 = (uint64_t *)*((unsigned __int16 *)v1112 + 123);
                v1786[0] = 5;
                v1787 = v1429;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1786);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1786);
                v1430 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mGenericRenderingConfig");
                v1431 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1430, "mFallbackIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1786);
                v1432 = *v1431;
                *v1431 = 5;
                v1786[0] = v1432;
                v1433 = (uint64_t *)*((_QWORD *)v1431 + 1);
                *((_QWORD *)v1431 + 1) = v1429;
                v1787 = v1433;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1431);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1786);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1787, v1432);
                v1434 = *((unsigned int *)v1112 + 62);
                v1784[0] = 5;
                v1785 = v1434;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1784);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1784);
                v1435 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mGenericRenderingConfig");
                v1436 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1435, "mDataByteSize");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1784);
                v1126 = *v1436;
                *v1436 = 5;
                v1784[0] = v1126;
                v1437 = *((_QWORD *)v1436 + 1);
                *((_QWORD *)v1436 + 1) = v1434;
                v1785 = v1437;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1436);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1784);
                v1128 = (double *)&v1785;
              }
              goto LABEL_156;
            case 0xDu:
              v1300 = *((unsigned __int8 *)v1113 + 4);
              v1782[0] = 5;
              v1783 = v1300;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1782);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1782);
              v1301 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mContentKind");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1782);
              v1126 = *v1301;
              *v1301 = 5;
              v1782[0] = v1126;
              v1302 = *((_QWORD *)v1301 + 1);
              *((_QWORD *)v1301 + 1) = v1300;
              v1783 = v1302;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1301);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1782);
              v1128 = (double *)&v1783;
              goto LABEL_156;
            case 0xEu:
              v1124 = *((unsigned __int8 *)v1113 + 5);
              v1780[0] = 5;
              v1781 = v1124;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1780);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1780);
              v1125 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mMaxNumBlocks");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1780);
              v1126 = *v1125;
              *v1125 = 5;
              v1780[0] = v1126;
              v1127 = *((_QWORD *)v1125 + 1);
              *((_QWORD *)v1125 + 1) = v1124;
              v1781 = v1127;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1125);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1780);
              v1128 = (double *)&v1781;
              goto LABEL_156;
            case 0xFu:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v1778, "dump not implemented");
              v1217 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, "mChannelBedHeadphoneMetadata");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1778);
              v1218 = *v1217;
              *v1217 = v1778[0];
              v1778[0] = v1218;
              v1219 = *((_QWORD *)v1217 + 1);
              *((_QWORD *)v1217 + 1) = v1779;
              v1779 = v1219;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1217);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1778);
              v1220 = v1778[0];
              v1128 = (double *)&v1779;
              goto LABEL_157;
            default:
              std::to_string(&v2084, v1728[v1111]);
              v1407 = std::string::insert(&v2084, 0, "Unknown parameter id ", 0x15uLL);
              v2085 = *v1407;
              v1407->__r_.__value_.__l.__size_ = 0;
              v1407->__r_.__value_.__r.__words[2] = 0;
              v1407->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v2084.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v2084.__r_.__value_.__l.__data_);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v1776, "not implemented");
              v1408 = SHIBYTE(v2085.__r_.__value_.__r.__words[2]);
              v1409 = (void *)v2085.__r_.__value_.__r.__words[0];
              if ((v2085.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v1410 = &v2085;
              else
                v1410 = (std::string *)v2085.__r_.__value_.__r.__words[0];
              v1411 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1102, (char *)v1410);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1776);
              v1412 = *v1411;
              *v1411 = v1776[0];
              v1776[0] = v1412;
              v1413 = (uint64_t *)*((_QWORD *)v1411 + 1);
              *((_QWORD *)v1411 + 1) = v1777;
              v1777 = v1413;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1411);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1776);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1777, v1776[0]);
              if (v1408 < 0)
                operator delete(v1409);
              goto LABEL_158;
          }
          break;
        }
      }
    }
    v1492 = *v1719;
    v1493 = -1431655765 * ((unint64_t)(v1719[1] - *v1719) >> 4);
    v1730 = *(unsigned __int16 *)(v1703 + 7);
    if (v1493 >= v1730)
      v1493 = *(unsigned __int16 *)(v1703 + 7);
    if (!v1493)
    {
LABEL_195:
      v1621 = (uint64_t *)*(unsigned __int16 *)(v1703 + 7);
      v1746[0] = 5;
      v1747 = v1621;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1746);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1746);
      v1622 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
      v1623 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1622, "mRendererMetadata");
      v1624 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1623, "mGroupCount");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1746);
      v1625 = *v1624;
      *v1624 = 5;
      v1746[0] = v1625;
      v1626 = (uint64_t *)*((_QWORD *)v1624 + 1);
      *((_QWORD *)v1624 + 1) = v1621;
      v1747 = v1626;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1624);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1746);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1747, v1625);
      v1717 = *(unsigned __int16 *)(v1703 + 7);
      if (*(_WORD *)(v1703 + 7))
      {
        v1627 = 0;
        v1723 = 16;
        do
        {
          v1628 = v1719[3];
          v1629 = (_BYTE *)(v1628 + 40200 * v1627);
          v1630 = (uint64_t *)*v1629;
          v1744[0] = 4;
          v1745 = v1630;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1744);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1744);
          v1631 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1632 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1631, "mRendererMetadata");
          v1633 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1632, "mGroupData");
          v1634 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1633, v1627);
          v1635 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1634, "mHasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1744);
          v1636 = *v1635;
          *v1635 = 4;
          v1744[0] = v1636;
          v1637 = (uint64_t *)*((_QWORD *)v1635 + 1);
          *((_QWORD *)v1635 + 1) = v1630;
          v1745 = v1637;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1635);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1744);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1745, v1636);
          if (*v1629)
          {
            v1638 = (uint64_t *)*(unsigned __int16 *)(v1628 + 40200 * v1627 + 2);
            v1742[0] = 5;
            v1743 = v1638;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1742);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1742);
            v1639 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
            v1640 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1639, "mRendererMetadata");
            v1641 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1640, "mGroupData");
            v1642 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1641, v1627);
            v1643 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1642, "mGroupID");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1742);
            v1644 = *v1643;
            *v1643 = 5;
            v1742[0] = v1644;
            v1645 = (uint64_t *)*((_QWORD *)v1643 + 1);
            *((_QWORD *)v1643 + 1) = v1638;
            v1743 = v1645;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1643);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1742);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1743, v1644);
            v1646 = v1628 + 40200 * v1627;
            v1647 = (uint64_t *)*(unsigned __int8 *)(v1646 + 4);
            v1740[0] = 5;
            v1741 = v1647;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1740);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1740);
            v1648 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
            v1649 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1648, "mRendererMetadata");
            v1650 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1649, "mGroupData");
            v1651 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1650, v1627);
            v1652 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1651, "mNumBlocks");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1740);
            v1653 = *v1652;
            *v1652 = 5;
            v1740[0] = v1653;
            v1654 = (uint64_t *)*((_QWORD *)v1652 + 1);
            *((_QWORD *)v1652 + 1) = v1647;
            v1741 = v1654;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1652);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1740);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1741, v1653);
            v1733 = *(unsigned __int8 *)(v1646 + 4);
            if (*(_BYTE *)(v1646 + 4))
            {
              v1655 = 0;
              v1656 = (float *)(v1628 + v1723);
              do
              {
                v1657 = (uint64_t *)*((unsigned __int16 *)v1656 - 4);
                v1738[0] = 5;
                v1739 = v1657;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1738);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1738);
                v1658 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
                v1659 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1658, "mRendererMetadata");
                v1660 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1659, "mGroupData");
                v1661 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1660, v1627);
                v1662 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1661, "mBlockData");
                v1663 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1662, v1655);
                v1664 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1663, "mRtime");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1738);
                v1665 = *v1664;
                *v1664 = 5;
                v1738[0] = v1665;
                v1666 = (uint64_t *)*((_QWORD *)v1664 + 1);
                *((_QWORD *)v1664 + 1) = v1657;
                v1739 = v1666;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1664);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1738);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1739, v1665);
                v1667 = (uint64_t *)*((unsigned __int8 *)v1656 - 6);
                v1736[0] = 4;
                v1737 = v1667;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1736);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1736);
                v1668 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
                v1669 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1668, "mRendererMetadata");
                v1670 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1669, "mGroupData");
                v1671 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1670, v1627);
                v1672 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1671, "mBlockData");
                v1673 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1672, v1655);
                v1674 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1673, "mHasInterpolationLength");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1736);
                v1675 = *v1674;
                *v1674 = 4;
                v1736[0] = v1675;
                v1676 = (uint64_t *)*((_QWORD *)v1674 + 1);
                *((_QWORD *)v1674 + 1) = v1667;
                v1737 = v1676;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1674);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1736);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1737, v1675);
                if (*((_BYTE *)v1656 - 6))
                {
                  v1677 = (uint64_t *)*((unsigned __int16 *)v1656 - 2);
                  v1734[0] = 5;
                  v1735 = v1677;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1734);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1734);
                  v1678 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
                  v1679 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1678, "mRendererMetadata");
                  v1680 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1679, "mGroupData");
                  v1681 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1680, v1627);
                  v1682 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1681, "mBlockData");
                  v1683 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1682, v1655);
                  v1684 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1683, "mInterpolationLength");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1734);
                  v1685 = *v1684;
                  *v1684 = 5;
                  v1734[0] = v1685;
                  v1686 = (uint64_t *)*((_QWORD *)v1684 + 1);
                  *((_QWORD *)v1684 + 1) = v1677;
                  v1735 = v1686;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1684);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1734);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1735, v1685);
                }
                v1687 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
                v1688 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1687, "mRendererMetadata");
                v1689 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1688, "mGroupData");
                v1690 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1689, v1627);
                v1691 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1690, "mBlockData");
                v1692 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1691, v1655);
                v1693 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1692, "mRendererData");
                APAC::RendererDataJSON(v1693, v1656, 0);
                ++v1655;
                v1656 += 314;
              }
              while (v1733 != v1655);
            }
          }
          ++v1627;
          v1723 += 40200;
        }
        while (v1627 != v1717);
      }
      goto LABEL_204;
    }
    v1494 = 0;
    while (1)
    {
      v1495 = (uint64_t *)*(unsigned __int16 *)(v1492 + 48 * v1494);
      v1774[0] = 5;
      v1775 = v1495;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1774);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1774);
      v1496 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
      v1497 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1496, "mRendererMetadata");
      v1498 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1497, "mGroupConfig");
      v1499 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1498, v1494);
      v1500 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1499, "mGroupID");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1774);
      v1501 = *v1500;
      *v1500 = 5;
      v1774[0] = v1501;
      v1502 = (uint64_t *)*((_QWORD *)v1500 + 1);
      *((_QWORD *)v1500 + 1) = v1495;
      v1775 = v1502;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1500);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1774);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1775, v1501);
      v1503 = v1492 + 48 * v1494;
      v1504 = *(unsigned __int8 *)(v1503 + 2);
      v1772[0] = 4;
      v1773 = v1504;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1772);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1772);
      v1505 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
      v1506 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1505, "mRendererMetadata");
      v1507 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1506, "mGroupConfig");
      v1508 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1507, v1494);
      v1509 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1508, "mIsGlobal");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1772);
      v1510 = *v1509;
      *v1509 = 4;
      v1772[0] = v1510;
      v1511 = (uint64_t *)*((_QWORD *)v1509 + 1);
      *((_QWORD *)v1509 + 1) = v1504;
      v1773 = (unint64_t)v1511;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1509);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1772);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1773, v1510);
      if (!*(_BYTE *)(v1503 + 2))
      {
        v1512 = (uint64_t *)*(unsigned __int16 *)(v1492 + 48 * v1494 + 4);
        v1770[0] = 5;
        v1771 = v1512;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1770);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1770);
        v1513 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
        v1514 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1513, "mRendererMetadata");
        v1515 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1514, "mGroupConfig");
        v1516 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1515, v1494);
        v1517 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1516, "mASCID");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1770);
        v1518 = *v1517;
        *v1517 = 5;
        v1770[0] = v1518;
        v1519 = (uint64_t *)*((_QWORD *)v1517 + 1);
        *((_QWORD *)v1517 + 1) = v1512;
        v1771 = v1519;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1517);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1770);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1771, v1518);
        v1520 = v1492 + 48 * v1494;
        v1521 = *(unsigned __int8 *)(v1520 + 3);
        v1768[0] = 4;
        v1769 = v1521;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1768);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1768);
        v1522 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
        v1523 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1522, "mRendererMetadata");
        v1524 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1523, "mGroupConfig");
        v1525 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1524, v1494);
        v1526 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1525, "mIsPerASC");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1768);
        v1527 = *v1526;
        *v1526 = 4;
        v1768[0] = v1527;
        v1528 = (uint64_t *)*((_QWORD *)v1526 + 1);
        *((_QWORD *)v1526 + 1) = v1521;
        v1769 = (unint64_t)v1528;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1526);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1768);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1769, v1527);
        if (!*(_BYTE *)(v1520 + 3))
        {
          v1548 = v1492 + 48 * v1494;
          v1549 = (uint64_t *)*(unsigned __int16 *)(v1548 + 18);
          v1754[0] = 5;
          v1755 = v1549;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1754);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1754);
          v1550 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1551 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1550, "mRendererMetadata");
          v1552 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1551, "mGroupConfig");
          v1553 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1552, v1494);
          v1554 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1553, "mMemberCount");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1754);
          v1555 = *v1554;
          *v1554 = 5;
          v1754[0] = v1555;
          v1556 = (uint64_t *)*((_QWORD *)v1554 + 1);
          *((_QWORD *)v1554 + 1) = v1549;
          v1755 = v1556;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1554);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1754);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1755, v1555);
          v1557 = *(unsigned __int16 *)(v1548 + 18);
          v1558 = *(unsigned __int8 *)(v1548 + 20);
          v1752[0] = 4;
          v1753 = v1558;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1752);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1752);
          v1559 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1560 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1559, "mRendererMetadata");
          v1561 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1560, "mGroupConfig");
          v1562 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1561, v1494);
          v1563 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1562, "mHasConjunctMembers");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1752);
          v1564 = *v1563;
          *v1563 = 4;
          v1752[0] = v1564;
          v1565 = (uint64_t *)*((_QWORD *)v1563 + 1);
          *((_QWORD *)v1563 + 1) = v1558;
          v1753 = (unint64_t)v1565;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1563);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1752);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1753, v1564);
          if (!*(_BYTE *)(v1548 + 20))
          {
            v1605 = v1492 + 48 * v1494;
            v1608 = *(_QWORD *)(v1605 + 24);
            v1607 = (uint64_t *)(v1605 + 24);
            v1606 = v1608;
            v1609 = (unint64_t)(v1607[1] - v1608) >> 1;
            if (v1609 >= v1557)
              LODWORD(v1609) = v1557;
            if ((_DWORD)v1609)
            {
              v1610 = 0;
              do
              {
                v1611 = (uint64_t *)*(unsigned __int16 *)(v1606 + 2 * v1610);
                v1748[0] = 5;
                v1749 = v1611;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1748);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1748);
                v1612 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
                v1613 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1612, "mRendererMetadata");
                v1614 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1613, "mGroupConfig");
                v1615 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1614, v1494);
                v1616 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1615, "mASCIDList");
                v1617 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1616, v1610);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1748);
                v1618 = *v1617;
                *v1617 = 5;
                v1748[0] = v1618;
                v1619 = (uint64_t *)*((_QWORD *)v1617 + 1);
                *((_QWORD *)v1617 + 1) = v1611;
                v1749 = v1619;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1617);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1748);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1749, v1618);
                ++v1610;
                v1606 = *v1607;
                v1620 = (unint64_t)(v1607[1] - *v1607) >> 1;
                if (v1620 >= v1557)
                  v1620 = v1557;
                else
                  v1620 = v1620;
              }
              while (v1610 < v1620);
            }
            goto LABEL_181;
          }
          v1566 = *(unsigned __int16 *)(v1492 + 48 * v1494 + 22);
          v1750[0] = 5;
          v1751 = v1566;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1750);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1750);
          v1567 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1568 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1567, "mRendererMetadata");
          v1569 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1568, "mGroupConfig");
          v1570 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1569, v1494);
          v1571 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1570, "mStartASCID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1750);
          v1545 = *v1571;
          *v1571 = 5;
          v1750[0] = v1545;
          v1572 = *((_QWORD *)v1571 + 1);
          *((_QWORD *)v1571 + 1) = v1566;
          v1751 = v1572;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1571);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1750);
          v1547 = (uint64_t **)&v1751;
          goto LABEL_180;
        }
        v1529 = (unsigned __int8 *)(v1492 + 48 * v1494);
        v1530 = v1529[6];
        v1529 += 6;
        v1766[0] = 5;
        v1767 = v1530;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1766);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1766);
        v1531 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
        v1532 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1531, "mRendererMetadata");
        v1533 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1532, "mGroupConfig");
        v1534 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1533, v1494);
        v1535 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1534, "mASCType");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1766);
        v1536 = *v1535;
        *v1535 = 5;
        v1766[0] = v1536;
        v1537 = (uint64_t *)*((_QWORD *)v1535 + 1);
        *((_QWORD *)v1535 + 1) = v1530;
        v1767 = (unint64_t)v1537;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1535);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1766);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1767, v1536);
        v1538 = *v1529;
        if (!*v1529)
        {
          v1597 = *(unsigned __int16 *)(v1492 + 48 * v1494 + 16);
          v1764[0] = 5;
          v1765 = v1597;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1764);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1764);
          v1598 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1599 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1598, "mRendererMetadata");
          v1600 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1599, "mGroupConfig");
          v1601 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1600, v1494);
          v1602 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1601, "mChBedID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1764);
          v1545 = *v1602;
          *v1602 = 5;
          v1764[0] = v1545;
          v1603 = *((_QWORD *)v1602 + 1);
          *((_QWORD *)v1602 + 1) = v1597;
          v1765 = v1603;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1602);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1764);
          v1547 = (uint64_t **)&v1765;
          goto LABEL_180;
        }
        if (v1538 == 1)
        {
          v1573 = (uint64_t *)*(unsigned __int16 *)(v1492 + 48 * v1494 + 8);
          v1762[0] = 5;
          v1763 = v1573;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1762);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1762);
          v1574 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1575 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1574, "mRendererMetadata");
          v1576 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1575, "mGroupConfig");
          v1577 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1576, v1494);
          v1578 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1577, "mObjectID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1762);
          v1579 = *v1578;
          *v1578 = 5;
          v1762[0] = v1579;
          v1580 = (uint64_t *)*((_QWORD *)v1578 + 1);
          *((_QWORD *)v1578 + 1) = v1573;
          v1763 = v1580;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1578);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1762);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1763, v1579);
          v1581 = v1492 + 48 * v1494;
          v1582 = *(unsigned __int8 *)(v1581 + 10);
          v1760[0] = 4;
          v1761 = v1582;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1760);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1760);
          v1583 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1584 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1583, "mRendererMetadata");
          v1585 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1584, "mGroupConfig");
          v1586 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1585, v1494);
          v1587 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1586, "mIsObjectInBed");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1760);
          v1588 = *v1587;
          *v1587 = 4;
          v1760[0] = v1588;
          v1589 = (uint64_t *)*((_QWORD *)v1587 + 1);
          *((_QWORD *)v1587 + 1) = v1582;
          v1761 = (unint64_t)v1589;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1587);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1760);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1761, v1588);
          if (*(_BYTE *)(v1581 + 10))
          {
            v1590 = *(unsigned __int16 *)(v1492 + 48 * v1494 + 12);
            v1758[0] = 5;
            v1759 = v1590;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1758);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1758);
            v1591 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
            v1592 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1591, "mRendererMetadata");
            v1593 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1592, "mGroupConfig");
            v1594 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1593, v1494);
            v1595 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1594, "mBedASCID");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1758);
            v1545 = *v1595;
            *v1595 = 5;
            v1758[0] = v1545;
            v1596 = *((_QWORD *)v1595 + 1);
            *((_QWORD *)v1595 + 1) = v1590;
            v1759 = v1596;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1595);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1758);
            v1547 = (uint64_t **)&v1759;
            goto LABEL_180;
          }
        }
        else if (v1538 == 2)
        {
          v1539 = *(unsigned __int16 *)(v1492 + 48 * v1494 + 14);
          v1756[0] = 5;
          v1757 = v1539;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1756);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1756);
          v1540 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "mMetadataFrame");
          v1541 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1540, "mRendererMetadata");
          v1542 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1541, "mGroupConfig");
          v1543 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1542, v1494);
          v1544 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1543, "mHOAID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1756);
          v1545 = *v1544;
          *v1544 = 5;
          v1756[0] = v1545;
          v1546 = *((_QWORD *)v1544 + 1);
          *((_QWORD *)v1544 + 1) = v1539;
          v1757 = v1546;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1544);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1756);
          v1547 = (uint64_t **)&v1757;
LABEL_180:
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v1547, v1545);
        }
      }
LABEL_181:
      ++v1494;
      v1492 = *v1719;
      LODWORD(v1604) = -1431655765 * ((unint64_t)(v1719[1] - *v1719) >> 4);
      if (v1604 >= v1730)
        v1604 = v1730;
      else
        v1604 = v1604;
      if (v1494 >= v1604)
        goto LABEL_195;
    }
  }
  if (v35 == 2)
  {
    if (*((_BYTE *)v1731 + 6))
    {
      v36 = (uint64_t *)*((unsigned __int8 *)v1731 + 8);
      v2150[0] = 4;
      v2151 = v36;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2150);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2150);
      v37 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "staticMetadata");
      v38 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v37, "refScreen");
      v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v38, "hasData");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2150);
      v40 = *v39;
      *v39 = 4;
      v2150[0] = v40;
      v41 = (uint64_t *)*((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v36;
      v2151 = v41;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2150);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2151, v40);
      v42 = (uint64_t *)*((unsigned __int8 *)v1731 + 436);
      v2148[0] = 4;
      v2149 = v42;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2148);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2148);
      v43 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "staticMetadata");
      v44 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "groupStaticData");
      v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v44, "hasData");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2148);
      v46 = *v45;
      *v45 = 4;
      v2148[0] = v46;
      v47 = (uint64_t *)*((_QWORD *)v45 + 1);
      *((_QWORD *)v45 + 1) = v42;
      v2149 = v47;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2148);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2149, v46);
      v48 = (uint64_t *)*((unsigned __int8 *)v1731 + 27872);
      v2146[0] = 5;
      v2147 = v48;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2146);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2146);
      v49 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "staticMetadata");
      v50 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v49, "sceneComponentStaticData");
      v51 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v50, "ASCCount");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2146);
      v52 = *v51;
      *v51 = 5;
      v2146[0] = v52;
      v53 = (uint64_t *)*((_QWORD *)v51 + 1);
      *((_QWORD *)v51 + 1) = v48;
      v2147 = v53;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2146);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2147, v52);
      v1702 = *((unsigned __int8 *)v1731 + 27872);
      if (*((_BYTE *)v1731 + 27872))
      {
        v54 = 0;
        v55 = v1731 + 13978;
        do
        {
          v56 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "staticMetadata");
          v57 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v56, "sceneComponentStaticData");
          v58 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "ASCData");
          v59 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v58, v54);
          v60 = (uint64_t *)v34[1144 * v54 + 27876];
          v2144[0] = 5;
          v2145 = v60;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2144);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2144);
          v61 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "sceneComponentID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2144);
          v62 = *v61;
          *v61 = 5;
          v2144[0] = v62;
          v63 = (uint64_t *)*((_QWORD *)v61 + 1);
          *((_QWORD *)v61 + 1) = v60;
          v2145 = v63;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2144);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2145, v62);
          v64 = (uint64_t *)v34[1144 * v54 + 27877];
          v2142[0] = 5;
          v2143 = v64;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2142);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2142);
          v65 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "sceneComponentType");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2142);
          v66 = *v65;
          *v65 = 5;
          v2142[0] = v66;
          v67 = (uint64_t *)*((_QWORD *)v65 + 1);
          *((_QWORD *)v65 + 1) = v64;
          v2143 = v67;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2142);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2143, v66);
          v68 = (uint64_t *)v34[1144 * v54 + 27878];
          v2140[0] = 5;
          v2141 = v68;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2140);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2140);
          v69 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "startChannelIndex");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2140);
          v70 = *v69;
          *v69 = 5;
          v2140[0] = v70;
          v71 = (uint64_t *)*((_QWORD *)v69 + 1);
          *((_QWORD *)v69 + 1) = v68;
          v2141 = v71;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v69);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2140);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2141, v70);
          v72 = (uint64_t *)v34[1144 * v54 + 27879];
          v2138[0] = 5;
          v2139 = v72;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2138);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2138);
          v73 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "rendererSubType");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2138);
          v74 = *v73;
          *v73 = 5;
          v2138[0] = v74;
          v75 = (uint64_t *)*((_QWORD *)v73 + 1);
          *((_QWORD *)v73 + 1) = v72;
          v2139 = v75;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v73);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2138);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2139, v74);
          v76 = (uint64_t *)v34[1144 * v54 + 27880];
          v2136[0] = 5;
          v2137 = v76;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2136);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2136);
          v77 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "rendererVersion");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2136);
          v78 = *v77;
          *v77 = 5;
          v2136[0] = v78;
          v79 = (uint64_t *)*((_QWORD *)v77 + 1);
          *((_QWORD *)v77 + 1) = v76;
          v2137 = v79;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v77);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2136);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2137, v78);
          v80 = (uint64_t *)*(unsigned int *)&v34[1144 * v54 + 27884];
          v2134[0] = 5;
          v2135 = v80;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2134);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2134);
          v81 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "channelLayoutTag");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2134);
          v82 = *v81;
          *v81 = 5;
          v2134[0] = v82;
          v83 = (uint64_t *)*((_QWORD *)v81 + 1);
          *((_QWORD *)v81 + 1) = v80;
          v2135 = v83;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v81);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2134);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2135, v82);
          v84 = (uint64_t *)v34[1144 * v54 + 27888];
          v2132[0] = 5;
          v2133 = v84;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2132);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2132);
          v85 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "HOAOrder");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2132);
          v86 = *v85;
          *v85 = 5;
          v2132[0] = v86;
          v87 = (uint64_t *)*((_QWORD *)v85 + 1);
          *((_QWORD *)v85 + 1) = v84;
          v2133 = v87;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v85);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2132);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2133, v86);
          v88 = (uint64_t *)v34[1144 * v54 + 27889];
          v2130[0] = 5;
          v2131 = v88;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2130);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2130);
          v89 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "HOAOrdering");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2130);
          v90 = *v89;
          *v89 = 5;
          v2130[0] = v90;
          v91 = (uint64_t *)*((_QWORD *)v89 + 1);
          *((_QWORD *)v89 + 1) = v88;
          v2131 = v91;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v89);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2130);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2131, v90);
          v92 = (uint64_t *)v34[1144 * v54 + 27890];
          v2128[0] = 5;
          v2129 = v92;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2128);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2128);
          v93 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "HOANormalization");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2128);
          v94 = *v93;
          *v93 = 5;
          v2128[0] = v94;
          v95 = (uint64_t *)*((_QWORD *)v93 + 1);
          *((_QWORD *)v93 + 1) = v92;
          v2129 = v95;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v93);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2128);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2129, v94);
          v1726 = v54;
          v96 = (uint64_t *)v34[1144 * v54 + 27892];
          v2126[0] = 4;
          v2127 = v96;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2126);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2126);
          v97 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "NFCRefDist");
          v98 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v97, "hasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2126);
          v99 = *v98;
          *v98 = 4;
          v2126[0] = v99;
          v100 = (uint64_t *)*((_QWORD *)v98 + 1);
          *((_QWORD *)v98 + 1) = v96;
          v2127 = v100;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v98);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2126);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2127, v99);
          v101 = (uint64_t *)v34[1144 * v54 + 27900];
          v2124[0] = 4;
          v2125 = v101;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2124);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2124);
          v102 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "screenRef");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2124);
          v103 = *v102;
          *v102 = 4;
          v2124[0] = v103;
          v104 = (uint64_t *)*((_QWORD *)v102 + 1);
          *((_QWORD *)v102 + 1) = v101;
          v2125 = v104;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v102);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2124);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2125, v103);
          v105 = &v34[1144 * v54 + 27904];
          v106 = (uint64_t *)*v105;
          v2122[0] = 4;
          v2123 = v106;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2122);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2122);
          v107 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
          v108 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v107, "hasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2122);
          v109 = *v108;
          *v108 = 4;
          v2122[0] = v109;
          v110 = (uint64_t *)*((_QWORD *)v108 + 1);
          *((_QWORD *)v108 + 1) = v106;
          v2123 = v110;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v108);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2122);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2123, v109);
          if (*v105)
          {
            v111 = (char *)&v1731[572 * v54 + 13952] + 1;
            v112 = (uint64_t *)*v111;
            v2120[0] = 5;
            v2121 = v112;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2120);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2120);
            v113 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
            v114 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v113, "numParameters");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2120);
            v115 = *v114;
            *v114 = 5;
            v2120[0] = v115;
            v116 = (uint64_t *)*((_QWORD *)v114 + 1);
            *((_QWORD *)v114 + 1) = v112;
            v2121 = v116;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v114);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2120);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2121, v115);
            if (*v111)
            {
              v117 = 0;
              v118 = &v1731[572 * v54];
              v1720 = (float *)(v118 + 13972);
              v1709 = (float *)(v118 + 13974);
              v1708 = (float *)(v118 + 13976);
              v1718 = (unsigned __int8 *)(v118 + 13970);
              v1716 = (unsigned __int8 *)(v118 + 13959);
              v1724 = (unsigned __int8 *)(v118 + 13955);
              v1701 = v118 + 13956;
              v1706 = (unsigned __int8 *)(v118 + 13957);
              v1700 = (unsigned __int8 *)v118 + 27915;
              v1699 = v118 + 13958;
              v1714 = (unsigned __int8 *)(v118 + 13954);
              v1712 = (unsigned __int8 *)v118 + 27907;
              v1711 = (unsigned __int8 *)(v118 + 13953);
              v1707 = v55;
              do
              {
                v119 = (uint64_t *)*((unsigned __int8 *)v55 + v117);
                v2118[0] = 5;
                v2119 = v119;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2118);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2118);
                v120 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                v121 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v120, "paramIndexList");
                v122 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v121, v117);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2118);
                v123 = *v122;
                *v122 = 5;
                v2118[0] = v123;
                v124 = (uint64_t *)*((_QWORD *)v122 + 1);
                *((_QWORD *)v122 + 1) = v119;
                v2119 = v124;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v122);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2118);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2119, v123);
                v125 = *((unsigned __int8 *)v55 + v117);
                switch(*((_BYTE *)v55 + v117))
                {
                  case 0:
                    v126 = *v1711;
                    v2116[0] = 4;
                    v2117 = v126;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2116);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2116);
                    v127 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v128 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v127, "isComplexSH");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2116);
                    v129 = *v128;
                    *v128 = 4;
                    v2116[0] = v129;
                    v130 = *((_QWORD *)v128 + 1);
                    *((_QWORD *)v128 + 1) = v126;
                    v2117 = v130;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v128);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2116);
                    v131 = (uint64_t **)&v2117;
                    goto LABEL_21;
                  case 1:
                    v180 = *v1712;
                    v2114[0] = 4;
                    v2115 = v180;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2114);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2114);
                    v181 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v182 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v181, "isCSPhase");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2114);
                    v129 = *v182;
                    *v182 = 4;
                    v2114[0] = v129;
                    v183 = *((_QWORD *)v182 + 1);
                    *((_QWORD *)v182 + 1) = v180;
                    v2115 = v183;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v182);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2114);
                    v131 = (uint64_t **)&v2115;
                    goto LABEL_21;
                  case 2:
                    v136 = *v1714;
                    v2112[0] = 5;
                    v2113 = v136;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2112);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2112);
                    v137 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v138 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v137, "productionCoordinate");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2112);
                    v129 = *v138;
                    *v138 = 5;
                    v2112[0] = v129;
                    v139 = *((_QWORD *)v138 + 1);
                    *((_QWORD *)v138 + 1) = v136;
                    v2113 = v139;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v138);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2112);
                    v131 = (uint64_t **)&v2113;
                    goto LABEL_21;
                  case 3:
                    v140 = (uint64_t *)*v1724;
                    v2110[0] = 5;
                    v2111 = v140;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2110);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2110);
                    v141 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v142 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v141, "sceneReverb");
                    v143 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v142, "reverbProcIndex");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2110);
                    v144 = *v143;
                    *v143 = 5;
                    v2110[0] = v144;
                    v145 = (uint64_t *)*((_QWORD *)v143 + 1);
                    *((_QWORD *)v143 + 1) = v140;
                    v2111 = v145;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v143);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2110);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2111, v144);
                    v146 = *v1724;
                    if (v146 == 1)
                    {
                      v147 = (uint64_t *)*v1701;
                      v2108[0] = 5;
                      v2109 = v147;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2108);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2108);
                      v148 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                      v149 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v148, "sceneReverb");
                      v150 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v149, "reverbProcPreset");
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2108);
                      v151 = *v150;
                      *v150 = 5;
                      v2108[0] = v151;
                      v152 = (uint64_t *)*((_QWORD *)v150 + 1);
                      *((_QWORD *)v150 + 1) = v147;
                      v2109 = v152;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v150);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2108);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2109, v151);
                      v153 = (uint64_t *)*v1706;
                      v2106[0] = 5;
                      v2107 = v153;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2106);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2106);
                      v154 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                      v155 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v154, "sceneReverb");
                      v156 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v155, "mixLevel");
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2106);
                      v157 = *v156;
                      *v156 = 5;
                      v2106[0] = v157;
                      v158 = (uint64_t *)*((_QWORD *)v156 + 1);
                      *((_QWORD *)v156 + 1) = v153;
                      v2107 = v158;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v156);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2106);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2107, v157);
                      v146 = *v1724;
                    }
                    if (v146 != 2)
                      break;
                    v159 = (uint64_t *)*v1700;
                    v2104[0] = 5;
                    v2105 = v159;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2104);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2104);
                    v160 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v161 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v160, "sceneReverb");
                    v162 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v161, "codeBookID");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2104);
                    v163 = *v162;
                    *v162 = 5;
                    v2104[0] = v163;
                    v164 = (uint64_t *)*((_QWORD *)v162 + 1);
                    *((_QWORD *)v162 + 1) = v159;
                    v2105 = v164;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v162);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2104);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2105, v163);
                    v165 = (uint64_t *)*v1699;
                    v2102[0] = 5;
                    v2103 = v165;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2102);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2102);
                    v166 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v167 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v166, "sceneReverb");
                    v168 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v167, "IRFilterID");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2102);
                    v169 = *v168;
                    *v168 = 5;
                    v2102[0] = v169;
                    v170 = (uint64_t *)*((_QWORD *)v168 + 1);
                    *((_QWORD *)v168 + 1) = v165;
                    v2103 = v170;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v168);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2102);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2103, v169);
                    v171 = *v1706;
                    v2100[0] = 5;
                    v2101 = v171;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2100);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2100);
                    v172 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v173 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v172, "sceneReverb");
                    v174 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v173, "mixLevel");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2100);
                    v129 = *v174;
                    *v174 = 5;
                    v2100[0] = v129;
                    v175 = *((_QWORD *)v174 + 1);
                    *((_QWORD *)v174 + 1) = v171;
                    v2101 = v175;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2100);
                    v131 = (uint64_t **)&v2101;
LABEL_21:
                    v184 = v129;
LABEL_22:
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v131, v184);
                    break;
                  case 4:
                    v132 = *v1716;
                    v2098[0] = 5;
                    v2099 = v132;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2098);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2098);
                    v133 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v134 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v133, "PostProcReverbIndex");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2098);
                    v129 = *v134;
                    *v134 = 5;
                    v2098[0] = v129;
                    v135 = *((_QWORD *)v134 + 1);
                    *((_QWORD *)v134 + 1) = v132;
                    v2099 = v135;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v134);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2098);
                    v131 = (uint64_t **)&v2099;
                    goto LABEL_21;
                  case 5:
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v2096, "dump not implemented");
                    v185 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v186 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v185, "paramIndex 5");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2096);
                    v187 = *v186;
                    *v186 = v2096[0];
                    v2096[0] = v187;
                    v188 = *((_QWORD *)v186 + 1);
                    *((_QWORD *)v186 + 1) = v2097;
                    v2097 = v188;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v186);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2096);
                    v184 = v2096[0];
                    v131 = (uint64_t **)&v2097;
                    goto LABEL_22;
                  case 6:
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v2094, "dump not implemented");
                    v189 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v190 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v189, "paramIndex 6");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2094);
                    v191 = *v190;
                    *v190 = v2094[0];
                    v2094[0] = v191;
                    v192 = *((_QWORD *)v190 + 1);
                    *((_QWORD *)v190 + 1) = v2095;
                    v2095 = v192;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v190);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2094);
                    v184 = v2094[0];
                    v131 = (uint64_t **)&v2095;
                    goto LABEL_22;
                  case 7:
                    v176 = *v1718;
                    v2092[0] = 5;
                    v2093 = v176;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2092);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2092);
                    v177 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v178 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v177, "HCFilterCodeBookID");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2092);
                    v129 = *v178;
                    *v178 = 5;
                    v2092[0] = v129;
                    v179 = *((_QWORD *)v178 + 1);
                    *((_QWORD *)v178 + 1) = v176;
                    v2093 = v179;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v178);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2092);
                    v131 = (uint64_t **)&v2093;
                    goto LABEL_21;
                  case 8:
                    v193 = *v1720;
                    v2090[0] = 7;
                    v2091 = v193;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2090);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2090);
                    v194 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v195 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v194, "hoaRotation");
                    v196 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v195, "pitch");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2090);
                    v197 = *v196;
                    *v196 = 7;
                    v2090[0] = v197;
                    v198 = (uint64_t *)*((_QWORD *)v196 + 1);
                    *((double *)v196 + 1) = v193;
                    v2091 = *(double *)&v198;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v196);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2090);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2091, v197);
                    v199 = *v1709;
                    v2088[0] = 7;
                    v2089 = v199;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2088);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2088);
                    v200 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v201 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v200, "hoaRotation");
                    v202 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v201, "yaw");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2088);
                    v203 = *v202;
                    *v202 = 7;
                    v2088[0] = v203;
                    v204 = (uint64_t *)*((_QWORD *)v202 + 1);
                    *((double *)v202 + 1) = v199;
                    v2089 = *(double *)&v204;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v202);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2088);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2089, v203);
                    v205 = *v1708;
                    v2086[0] = 7;
                    v2087 = v205;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2086);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2086);
                    v206 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v207 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v206, "hoaRotation");
                    v208 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v207, "roll");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2086);
                    v209 = *v208;
                    *v208 = 7;
                    v2086[0] = v209;
                    v210 = (uint64_t *)*((_QWORD *)v208 + 1);
                    *((double *)v208 + 1) = v205;
                    v2087 = *(double *)&v210;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v208);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2086);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2087, v209);
                    v55 = v1707;
                    goto LABEL_28;
                  default:
LABEL_28:
                    std::to_string(&v2084, v125);
                    v211 = std::string::insert(&v2084, 0, "Unknown parameter id ", 0x15uLL);
                    v2085 = *v211;
                    v211->__r_.__value_.__l.__size_ = 0;
                    v211->__r_.__value_.__r.__words[2] = 0;
                    v211->__r_.__value_.__r.__words[0] = 0;
                    if (SHIBYTE(v2084.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v2084.__r_.__value_.__l.__data_);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v2082, "not implemented");
                    v212 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "proprietaryStaticData");
                    v213 = SHIBYTE(v2085.__r_.__value_.__r.__words[2]);
                    v214 = (void *)v2085.__r_.__value_.__r.__words[0];
                    if ((v2085.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v215 = &v2085;
                    else
                      v215 = (std::string *)v2085.__r_.__value_.__r.__words[0];
                    v216 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v212, (char *)v215);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2082);
                    v217 = *v216;
                    *v216 = v2082[0];
                    v2082[0] = v217;
                    v218 = (uint64_t *)*((_QWORD *)v216 + 1);
                    *((_QWORD *)v216 + 1) = v2083;
                    v2083 = v218;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v216);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2082);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2083, v2082[0]);
                    if (v213 < 0)
                      operator delete(v214);
                    break;
                }
                ++v117;
              }
              while (v117 < *v111);
            }
          }
          v34 = (unsigned __int8 *)v1731;
          v219 = (uint64_t *)LOBYTE(v1731[572 * v54 + 13994]);
          v2080[0] = 4;
          v2081 = v219;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2080);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2080);
          v220 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "dolbyStaticData");
          v221 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v220, "hasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2080);
          v222 = *v221;
          *v221 = 4;
          v2080[0] = v222;
          v223 = (uint64_t *)*((_QWORD *)v221 + 1);
          *((_QWORD *)v221 + 1) = v219;
          v2081 = v223;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v221);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2080);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2081, v222);
          v224 = (uint64_t *)LOBYTE(v1731[572 * v54 + 13995]);
          v2078[0] = 4;
          v2079 = v224;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2078);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2078);
          v225 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "extASCStaticData");
          v226 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v225, "hasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2078);
          v227 = *v226;
          *v226 = 4;
          v2078[0] = v227;
          v228 = (uint64_t *)*((_QWORD *)v226 + 1);
          *((_QWORD *)v226 + 1) = v224;
          v2079 = v228;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v226);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2078);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2079, v227);
          ++v54;
          v55 += 572;
        }
        while (v1726 + 1 != v1702);
      }
      v229 = (uint64_t *)v34[173164];
      v2076[0] = 4;
      v2077 = v229;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2076);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2076);
      v230 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "staticMetadata");
      v231 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v230, "extStaticData");
      v232 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v231, "hasData");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2076);
      v233 = *v232;
      *v232 = 4;
      v2076[0] = v233;
      v234 = (uint64_t *)*((_QWORD *)v232 + 1);
      *((_QWORD *)v232 + 1) = v229;
      v2077 = v234;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v232);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2076);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2077, v233);
    }
    v235 = (uint64_t *)v34[174192];
    v2074[0] = 4;
    v2075 = v235;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2074);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2074);
    v236 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
    v237 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v236, "groupDynamicData");
    v238 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v237, "hasData");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2074);
    v239 = *v238;
    *v238 = 4;
    v2074[0] = v239;
    v240 = (uint64_t *)*((_QWORD *)v238 + 1);
    *((_QWORD *)v238 + 1) = v235;
    v2075 = v240;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v238);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2074);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2075, v239);
    v241 = (uint64_t *)v34[206708];
    v2072[0] = 5;
    v2073 = v241;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2072);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2072);
    v242 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
    v243 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v242, "sceneComponentDynamicData");
    v244 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v243, "ASCCount");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2072);
    v245 = *v244;
    *v244 = 5;
    v2072[0] = v245;
    v246 = (uint64_t *)*((_QWORD *)v244 + 1);
    *((_QWORD *)v244 + 1) = v241;
    v2073 = v246;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v244);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2072);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2073, v245);
    v1697 = v34[206708];
    if (v34[206708])
    {
      v247 = 0;
      v1705 = v34 + 206906;
      v1704 = v34 + 206936;
      while (1)
      {
        v248 = &v34[9752 * v247 + 206712];
        v249 = (uint64_t *)*v248;
        v2070[0] = 5;
        v2071 = v249;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2070);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2070);
        v250 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
        v251 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v250, "sceneComponentDynamicData");
        v252 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v251, "ASCData");
        v253 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v252, v247);
        v254 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v253, "ASCType");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2070);
        v255 = *v254;
        *v254 = 5;
        v2070[0] = v255;
        v256 = (uint64_t *)*((_QWORD *)v254 + 1);
        *((_QWORD *)v254 + 1) = v249;
        v2071 = v256;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v254);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2070);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2071, v255);
        v257 = *v248;
        if (!*v248)
          break;
        if (v257 == 1)
        {
          v360 = (uint64_t *)v34[9752 * v247 + 206780];
          v2028[0] = 5;
          v2029 = v360;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2028);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2028);
          v361 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
          v362 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v361, "sceneComponentDynamicData");
          v363 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v362, "ASCData");
          v364 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v363, v247);
          v365 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v364, "objectMetadata");
          v366 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v365, "objectID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2028);
          v367 = *v366;
          *v366 = 5;
          v2028[0] = v367;
          v368 = (uint64_t *)*((_QWORD *)v366 + 1);
          *((_QWORD *)v366 + 1) = v360;
          v2029 = v368;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v366);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2028);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2029, v367);
          v1721 = &v34[9752 * v247 + 206781];
          v369 = (uint64_t *)*v1721;
          v2026[0] = 5;
          v2027 = v369;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2026);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2026);
          v370 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
          v371 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v370, "sceneComponentDynamicData");
          v372 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v371, "ASCData");
          v373 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v372, v247);
          v374 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v373, "objectMetadata");
          v375 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v374, "numBlocks");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2026);
          LODWORD(v366) = *v375;
          *v375 = 5;
          v2026[0] = (char)v366;
          v376 = (uint64_t *)*((_QWORD *)v375 + 1);
          *((_QWORD *)v375 + 1) = v369;
          v2027 = v376;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v375);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2026);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2027, (int)v366);
          if (*v1721)
          {
            v377 = 0;
            v1725 = (float *)v1704;
            v378 = v1705;
            do
            {
              v379 = &v34[9752 * v247 + 206784 + 500 * v377];
              v380 = (uint64_t *)*v379;
              v2024[0] = 4;
              v2025 = v380;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2024);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2024);
              v381 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
              v382 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v381, "sceneComponentDynamicData");
              v383 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v382, "ASCData");
              v384 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v383, v247);
              v385 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v384, "objectMetadata");
              v386 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v385, "blockData");
              v387 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v386, v377);
              v388 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v387, "isNewBlk");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2024);
              v389 = *v388;
              *v388 = 4;
              v2024[0] = v389;
              v390 = (uint64_t *)*((_QWORD *)v388 + 1);
              *((_QWORD *)v388 + 1) = v380;
              v2025 = v390;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v388);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2024);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2025, v389);
              if (v377 && v377 < *v1721 - 1)
              {
                v391 = (uint64_t *)*(unsigned __int16 *)&v34[9752 * v247 + 206786 + 500 * v377];
                v2022[0] = 5;
                v2023 = v391;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2022);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2022);
                v392 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                v393 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v392, "sceneComponentDynamicData");
                v394 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v393, "ASCData");
                v395 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v394, v247);
                v396 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v395, "objectMetadata");
                v397 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v396, "blockData");
                v398 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v397, v377);
                v399 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v398, "rtime");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2022);
                v400 = *v399;
                *v399 = 5;
                v2022[0] = v400;
                v401 = (uint64_t *)*((_QWORD *)v399 + 1);
                *((_QWORD *)v399 + 1) = v391;
                v2023 = v401;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v399);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2022);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2023, v400);
              }
              if (*v379)
              {
                v1727 = &v34[9752 * v247 + 206788 + 500 * v377];
                v402 = (uint64_t *)*v1727;
                v2020[0] = 4;
                v2021 = v402;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2020);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2020);
                v403 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                v404 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v403, "sceneComponentDynamicData");
                v405 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v404, "ASCData");
                v406 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v405, v247);
                v407 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v406, "objectMetadata");
                v408 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v407, "blockData");
                v409 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v408, v377);
                v410 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v409, "cartesian");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2020);
                v411 = *v410;
                *v410 = 4;
                v2020[0] = v411;
                v412 = (uint64_t *)*((_QWORD *)v410 + 1);
                *((_QWORD *)v410 + 1) = v402;
                v2021 = v412;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v410);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2020);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2021, v411);
                v413 = *(float *)&v34[9752 * v247 + 206792 + 500 * v377];
                v414 = v413;
                if (*v1727)
                {
                  v2018[0] = 7;
                  v2019 = v413;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2018);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2018);
                  v415 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v416 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v415, "sceneComponentDynamicData");
                  v417 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v416, "ASCData");
                  v418 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v417, v247);
                  v419 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v418, "objectMetadata");
                  v420 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v419, "blockData");
                  v421 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v420, v377);
                  v422 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v421, "X");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2018);
                  v423 = *v422;
                  *v422 = 7;
                  v2018[0] = v423;
                  v424 = *((uint64_t **)v422 + 1);
                  *((double *)v422 + 1) = v414;
                  v2019 = *(double *)&v424;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v422);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2018);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2019, v423);
                  v425 = *(float *)&v34[9752 * v247 + 206796 + 500 * v377];
                  v2016[0] = 7;
                  v2017 = v425;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2016);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2016);
                  v426 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v427 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v426, "sceneComponentDynamicData");
                  v428 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v427, "ASCData");
                  v429 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v428, v247);
                  v430 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v429, "objectMetadata");
                  v431 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v430, "blockData");
                  v432 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v431, v377);
                  v433 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v432, "Y");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2016);
                  v434 = *v433;
                  *v433 = 7;
                  v2016[0] = v434;
                  v435 = *((uint64_t **)v433 + 1);
                  *((double *)v433 + 1) = v425;
                  v2017 = *(double *)&v435;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v433);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2016);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2017, v434);
                  v436 = *(float *)&v34[9752 * v247 + 206800 + 500 * v377];
                  v2014[0] = 7;
                  v2015 = v436;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2014);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2014);
                  v437 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v438 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v437, "sceneComponentDynamicData");
                  v439 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v438, "ASCData");
                  v440 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v439, v247);
                  v441 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v440, "objectMetadata");
                  v442 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v441, "blockData");
                  v443 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v442, v377);
                  v444 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v443, "Z");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2014);
                  v445 = *v444;
                  *v444 = 7;
                  v2014[0] = v445;
                  v446 = *((double *)v444 + 1);
                  *((double *)v444 + 1) = v436;
                  v2015 = v446;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v444);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2014);
                  v447 = &v2015;
                }
                else
                {
                  v2012[0] = 7;
                  v2013 = v413;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2012);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2012);
                  v448 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v449 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v448, "sceneComponentDynamicData");
                  v450 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v449, "ASCData");
                  v451 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v450, v247);
                  v452 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v451, "objectMetadata");
                  v453 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v452, "blockData");
                  v454 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v453, v377);
                  v455 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v454, "azimuth");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2012);
                  v456 = *v455;
                  *v455 = 7;
                  v2012[0] = v456;
                  v457 = *((uint64_t **)v455 + 1);
                  *((double *)v455 + 1) = v414;
                  v2013 = *(double *)&v457;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v455);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2012);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2013, v456);
                  v458 = *(float *)&v34[9752 * v247 + 206796 + 500 * v377];
                  v2010[0] = 7;
                  v2011 = v458;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2010);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2010);
                  v459 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v460 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v459, "sceneComponentDynamicData");
                  v461 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v460, "ASCData");
                  v462 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v461, v247);
                  v463 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v462, "objectMetadata");
                  v464 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v463, "blockData");
                  v465 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v464, v377);
                  v466 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v465, "elevation");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2010);
                  v467 = *v466;
                  *v466 = 7;
                  v2010[0] = v467;
                  v468 = *((uint64_t **)v466 + 1);
                  *((double *)v466 + 1) = v458;
                  v2011 = *(double *)&v468;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v466);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2010);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2011, v467);
                  v469 = *(float *)&v34[9752 * v247 + 206800 + 500 * v377];
                  v2008[0] = 7;
                  v2009 = v469;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2008);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2008);
                  v470 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v471 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v470, "sceneComponentDynamicData");
                  v472 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v471, "ASCData");
                  v473 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v472, v247);
                  v474 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v473, "objectMetadata");
                  v475 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v474, "blockData");
                  v476 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v475, v377);
                  v477 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v476, "distance");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2008);
                  v445 = *v477;
                  *v477 = 7;
                  v2008[0] = v445;
                  v478 = *((double *)v477 + 1);
                  *((double *)v477 + 1) = v469;
                  v2009 = v478;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v477);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2008);
                  v447 = &v2009;
                }
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v447, v445);
                v479 = &v34[9752 * v247 + 206804 + 500 * v377];
                v480 = (uint64_t *)*v479;
                v2006[0] = 4;
                v2007 = v480;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2006);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2006);
                v481 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                v482 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v481, "sceneComponentDynamicData");
                v483 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v482, "ASCData");
                v484 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v483, v247);
                v485 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v484, "objectMetadata");
                v486 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v485, "blockData");
                v487 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v486, v377);
                v488 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v487, "hasADMMetadata");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2006);
                v489 = *v488;
                *v488 = 4;
                v2006[0] = v489;
                v490 = (uint64_t *)*((_QWORD *)v488 + 1);
                *((_QWORD *)v488 + 1) = v480;
                v2007 = v490;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v488);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2006);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2007, v489);
                if (*v479)
                {
                  v491 = &v34[9752 * v247 + 206808 + 500 * v377];
                  v492 = (uint64_t *)*v491;
                  v2004[0] = 4;
                  v2005 = v492;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2004);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2004);
                  v493 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v494 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v493, "sceneComponentDynamicData");
                  v495 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v494, "ASCData");
                  v496 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v495, v247);
                  v497 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v496, "objectMetadata");
                  v498 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v497, "blockData");
                  v499 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v498, v377);
                  v500 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v499, "absoluteDistance");
                  v501 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v500, "hasData");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2004);
                  v502 = *v501;
                  *v501 = 4;
                  v2004[0] = v502;
                  v503 = (uint64_t *)*((_QWORD *)v501 + 1);
                  *((_QWORD *)v501 + 1) = v492;
                  v2005 = v503;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v501);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2004);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2005, v502);
                  if (*v491)
                  {
                    v504 = *(float *)&v34[9752 * v247 + 206812 + 500 * v377];
                    v2002[0] = 7;
                    v2003 = v504;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2002);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2002);
                    v505 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v506 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v505, "sceneComponentDynamicData");
                    v507 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v506, "ASCData");
                    v508 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v507, v247);
                    v509 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v508, "objectMetadata");
                    v510 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v509, "blockData");
                    v511 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v510, v377);
                    v512 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v511, "absoluteDistance");
                    v513 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v512, "distance");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2002);
                    v514 = *v513;
                    *v513 = 7;
                    v2002[0] = v514;
                    v515 = *((uint64_t **)v513 + 1);
                    *((double *)v513 + 1) = v504;
                    v2003 = *(double *)&v515;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v513);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2002);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2003, v514);
                  }
                  v516 = &v34[9752 * v247 + 206816 + 500 * v377];
                  v517 = (uint64_t *)*v516;
                  v2000[0] = 4;
                  v2001 = v517;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2000);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2000);
                  v518 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v519 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v518, "sceneComponentDynamicData");
                  v520 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v519, "ASCData");
                  v521 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v520, v247);
                  v522 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v521, "objectMetadata");
                  v523 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v522, "blockData");
                  v524 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v523, v377);
                  v525 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v524, "spread");
                  v526 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v525, "hasData");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2000);
                  v527 = *v526;
                  *v526 = 4;
                  v2000[0] = v527;
                  v528 = (uint64_t *)*((_QWORD *)v526 + 1);
                  *((_QWORD *)v526 + 1) = v517;
                  v2001 = v528;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v526);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2000);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2001, v527);
                  if (*v516)
                  {
                    v529 = *(float *)&v34[9752 * v247 + 206820 + 500 * v377];
                    v1998[0] = 7;
                    v1999 = v529;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1998);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1998);
                    v530 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v531 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v530, "sceneComponentDynamicData");
                    v532 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v531, "ASCData");
                    v533 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v532, v247);
                    v534 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v533, "objectMetadata");
                    v535 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v534, "blockData");
                    v536 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v535, v377);
                    v537 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v536, "spread");
                    v538 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v537, "width");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1998);
                    v539 = *v538;
                    *v538 = 7;
                    v1998[0] = v539;
                    v540 = *((uint64_t **)v538 + 1);
                    *((double *)v538 + 1) = v529;
                    v1999 = *(double *)&v540;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v538);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1998);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1999, v539);
                    v541 = *(float *)&v34[9752 * v247 + 206824 + 500 * v377];
                    v1996[0] = 7;
                    v1997 = v541;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1996);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1996);
                    v542 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v543 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v542, "sceneComponentDynamicData");
                    v544 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v543, "ASCData");
                    v545 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v544, v247);
                    v546 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v545, "objectMetadata");
                    v547 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v546, "blockData");
                    v548 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v547, v377);
                    v549 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v548, "spread");
                    v550 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v549, "height");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1996);
                    v551 = *v550;
                    *v550 = 7;
                    v1996[0] = v551;
                    v552 = *((uint64_t **)v550 + 1);
                    *((double *)v550 + 1) = v541;
                    v1997 = *(double *)&v552;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v550);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1996);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1997, v551);
                    v553 = *(float *)&v34[9752 * v247 + 206828 + 500 * v377];
                    v1994[0] = 7;
                    v1995 = v553;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1994);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1994);
                    v554 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v555 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v554, "sceneComponentDynamicData");
                    v556 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v555, "ASCData");
                    v557 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v556, v247);
                    v558 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v557, "objectMetadata");
                    v559 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v558, "blockData");
                    v560 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v559, v377);
                    v561 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v560, "spread");
                    v562 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v561, "depth");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1994);
                    v563 = *v562;
                    *v562 = 7;
                    v1994[0] = v563;
                    v564 = *((uint64_t **)v562 + 1);
                    *((double *)v562 + 1) = v553;
                    v1995 = *(double *)&v564;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v562);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1994);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1995, v563);
                  }
                  v565 = &v34[9752 * v247 + 206832 + 500 * v377];
                  v566 = (uint64_t *)*v565;
                  v1992[0] = 4;
                  v1993 = v566;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1992);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1992);
                  v567 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v568 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v567, "sceneComponentDynamicData");
                  v569 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v568, "ASCData");
                  v570 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v569, v247);
                  v571 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v570, "objectMetadata");
                  v572 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v571, "blockData");
                  v573 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v572, v377);
                  v574 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v573, "gain");
                  v575 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v574, "hasData");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1992);
                  v576 = *v575;
                  *v575 = 4;
                  v1992[0] = v576;
                  v577 = (uint64_t *)*((_QWORD *)v575 + 1);
                  *((_QWORD *)v575 + 1) = v566;
                  v1993 = v577;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v575);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1992);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1993, v576);
                  if (*v565)
                  {
                    v578 = (uint64_t *)v34[9752 * v247 + 206833 + 500 * v377];
                    v1990[0] = 4;
                    v1991 = v578;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1990);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1990);
                    v579 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v580 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v579, "sceneComponentDynamicData");
                    v581 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v580, "ASCData");
                    v582 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v581, v247);
                    v583 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v582, "objectMetadata");
                    v584 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v583, "blockData");
                    v585 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v584, v377);
                    v586 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v585, "gain");
                    v587 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v586, "isDB");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1990);
                    v588 = *v587;
                    *v587 = 4;
                    v1990[0] = v588;
                    v589 = (uint64_t *)*((_QWORD *)v587 + 1);
                    *((_QWORD *)v587 + 1) = v578;
                    v1991 = v589;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v587);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1990);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1991, v588);
                    v590 = *(float *)&v34[9752 * v247 + 206836 + 500 * v377];
                    v1988[0] = 7;
                    v1989 = v590;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1988);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1988);
                    v591 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v592 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v591, "sceneComponentDynamicData");
                    v593 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v592, "ASCData");
                    v594 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v593, v247);
                    v595 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v594, "objectMetadata");
                    v596 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v595, "blockData");
                    v597 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v596, v377);
                    v598 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v597, "gain");
                    v599 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v598, "gain");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1988);
                    v600 = *v599;
                    *v599 = 7;
                    v1988[0] = v600;
                    v601 = *((uint64_t **)v599 + 1);
                    *((double *)v599 + 1) = v590;
                    v1989 = *(double *)&v601;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v599);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1988);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1989, v600);
                  }
                  v602 = &v34[9752 * v247 + 206840 + 500 * v377];
                  v603 = (uint64_t *)*v602;
                  v1986[0] = 4;
                  v1987 = v603;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1986);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1986);
                  v604 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v605 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v604, "sceneComponentDynamicData");
                  v606 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v605, "ASCData");
                  v607 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v606, v247);
                  v608 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v607, "objectMetadata");
                  v609 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v608, "blockData");
                  v610 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v609, v377);
                  v611 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v610, "diffuse");
                  v612 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v611, "hasData");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1986);
                  v613 = *v612;
                  *v612 = 4;
                  v1986[0] = v613;
                  v614 = (uint64_t *)*((_QWORD *)v612 + 1);
                  *((_QWORD *)v612 + 1) = v603;
                  v1987 = v614;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v612);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1986);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1987, v613);
                  if (*v602)
                  {
                    v615 = *(float *)&v34[9752 * v247 + 206844 + 500 * v377];
                    v1984[0] = 7;
                    v1985 = v615;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1984);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1984);
                    v616 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v617 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v616, "sceneComponentDynamicData");
                    v618 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v617, "ASCData");
                    v619 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v618, v247);
                    v620 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v619, "objectMetadata");
                    v621 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v620, "blockData");
                    v622 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v621, v377);
                    v623 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v622, "diffuse");
                    v624 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v623, "diffuse");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1984);
                    v625 = *v624;
                    *v624 = 7;
                    v1984[0] = v625;
                    v626 = *((uint64_t **)v624 + 1);
                    *((double *)v624 + 1) = v615;
                    v1985 = *(double *)&v626;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v624);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1984);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1985, v625);
                  }
                  v627 = &v34[9752 * v247 + 206848 + 500 * v377];
                  v628 = (uint64_t *)*v627;
                  v1982[0] = 4;
                  v1983 = v628;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1982);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1982);
                  v629 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v630 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v629, "sceneComponentDynamicData");
                  v631 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v630, "ASCData");
                  v632 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v631, v247);
                  v633 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v632, "objectMetadata");
                  v634 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v633, "blockData");
                  v635 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v634, v377);
                  v636 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v635, "channelLock");
                  v637 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v636, "channelLock");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1982);
                  v638 = *v637;
                  *v637 = 4;
                  v1982[0] = v638;
                  v639 = (uint64_t *)*((_QWORD *)v637 + 1);
                  *((_QWORD *)v637 + 1) = v628;
                  v1983 = v639;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v637);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1982);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1983, v638);
                  if (*v627)
                  {
                    v640 = &v34[9752 * v247 + 206849 + 500 * v377];
                    v641 = (uint64_t *)*v640;
                    v1980[0] = 4;
                    v1981 = v641;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1980);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1980);
                    v642 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v643 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v642, "sceneComponentDynamicData");
                    v644 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v643, "ASCData");
                    v645 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v644, v247);
                    v646 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v645, "objectMetadata");
                    v647 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v646, "blockData");
                    v648 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v647, v377);
                    v649 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v648, "channelLock");
                    v650 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v649, "hasMaxDistance");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1980);
                    v651 = *v650;
                    *v650 = 4;
                    v1980[0] = v651;
                    v652 = (uint64_t *)*((_QWORD *)v650 + 1);
                    *((_QWORD *)v650 + 1) = v641;
                    v1981 = v652;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v650);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1980);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1981, v651);
                    if (*v640)
                    {
                      v653 = *(float *)&v34[9752 * v247 + 206852 + 500 * v377];
                      v1978[0] = 7;
                      v1979 = v653;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1978);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1978);
                      v654 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                      v655 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v654, "sceneComponentDynamicData");
                      v656 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v655, "ASCData");
                      v657 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v656, v247);
                      v658 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v657, "objectMetadata");
                      v659 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v658, "blockData");
                      v660 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v659, v377);
                      v661 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v660, "channelLock");
                      v662 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v661, "maxDistance");
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1978);
                      v663 = *v662;
                      *v662 = 7;
                      v1978[0] = v663;
                      v664 = *((uint64_t **)v662 + 1);
                      *((double *)v662 + 1) = v653;
                      v1979 = *(double *)&v664;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v662);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1978);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1979, v663);
                    }
                  }
                  v665 = &v34[9752 * v247 + 206856 + 500 * v377];
                  v666 = (uint64_t *)*v665;
                  v1976[0] = 4;
                  v1977 = v666;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1976);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1976);
                  v667 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v668 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v667, "sceneComponentDynamicData");
                  v669 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v668, "ASCData");
                  v670 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v669, v247);
                  v671 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v670, "objectMetadata");
                  v672 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v671, "blockData");
                  v673 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v672, v377);
                  v674 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v673, "objectDivergence");
                  v675 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v674, "hasData");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1976);
                  v676 = *v675;
                  *v675 = 4;
                  v1976[0] = v676;
                  v677 = (uint64_t *)*((_QWORD *)v675 + 1);
                  *((_QWORD *)v675 + 1) = v666;
                  v1977 = v677;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v675);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1976);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1977, v676);
                  if (*v665)
                  {
                    v678 = *(float *)&v34[9752 * v247 + 206860 + 500 * v377];
                    v1974[0] = 7;
                    v1975 = v678;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1974);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1974);
                    v679 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v680 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v679, "sceneComponentDynamicData");
                    v681 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v680, "ASCData");
                    v682 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v681, v247);
                    v683 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v682, "objectMetadata");
                    v684 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v683, "blockData");
                    v685 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v684, v377);
                    v686 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v685, "objectDivergence");
                    v687 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v686, "objectDivergence");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1974);
                    v688 = *v687;
                    *v687 = 7;
                    v1974[0] = v688;
                    v689 = *((uint64_t **)v687 + 1);
                    *((double *)v687 + 1) = v678;
                    v1975 = *(double *)&v689;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v687);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1974);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1975, v688);
                    if (*v1727)
                    {
                      v690 = *(float *)&v34[9752 * v247 + 206864 + 500 * v377];
                      v1972[0] = 7;
                      v1973 = v690;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1972);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1972);
                      v691 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                      v692 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v691, "sceneComponentDynamicData");
                      v693 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v692, "ASCData");
                      v694 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v693, v247);
                      v695 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v694, "objectMetadata");
                      v696 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v695, "blockData");
                      v697 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v696, v377);
                      v698 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v697, "objectDivergence");
                      v699 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v698, "positionRange");
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1972);
                      v700 = *v699;
                      *v699 = 7;
                      v1972[0] = v700;
                      v701 = *((double *)v699 + 1);
                      *((double *)v699 + 1) = v690;
                      v1973 = v701;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v699);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1972);
                      v702 = &v1973;
                    }
                    else
                    {
                      v703 = *(float *)&v34[9752 * v247 + 206868 + 500 * v377];
                      v1970[0] = 7;
                      v1971 = v703;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1970);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1970);
                      v704 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                      v705 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v704, "sceneComponentDynamicData");
                      v706 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v705, "ASCData");
                      v707 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v706, v247);
                      v708 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v707, "objectMetadata");
                      v709 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v708, "blockData");
                      v710 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v709, v377);
                      v711 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v710, "objectDivergence");
                      v712 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v711, "azimuthRange");
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1970);
                      v700 = *v712;
                      *v712 = 7;
                      v1970[0] = v700;
                      v713 = *((double *)v712 + 1);
                      *((double *)v712 + 1) = v703;
                      v1971 = v713;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v712);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1970);
                      v702 = &v1971;
                    }
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v702, v700);
                  }
                  v714 = (uint64_t *)v34[9752 * v247 + 206876 + 500 * v377];
                  v1968[0] = 4;
                  v1969 = v714;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1968);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1968);
                  v715 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v716 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v715, "sceneComponentDynamicData");
                  v717 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v716, "ASCData");
                  v718 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v717, v247);
                  v719 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v718, "objectMetadata");
                  v720 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v719, "blockData");
                  v721 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v720, v377);
                  v722 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v721, "screenRef");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1968);
                  v723 = *v722;
                  *v722 = 4;
                  v1968[0] = v723;
                  v724 = (uint64_t *)*((_QWORD *)v722 + 1);
                  *((_QWORD *)v722 + 1) = v714;
                  v1969 = v724;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v722);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1968);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1969, v723);
                  v725 = (uint64_t *)v34[9752 * v247 + 206879 + 500 * v377];
                  v1966[0] = 4;
                  v1967 = v725;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1966);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1966);
                  v726 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v727 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v726, "sceneComponentDynamicData");
                  v728 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v727, "ASCData");
                  v729 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v728, v247);
                  v730 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v729, "objectMetadata");
                  v731 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v730, "blockData");
                  v732 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v731, v377);
                  v733 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v732, "headLocked");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1966);
                  v734 = *v733;
                  *v733 = 4;
                  v1966[0] = v734;
                  v735 = (uint64_t *)*((_QWORD *)v733 + 1);
                  *((_QWORD *)v733 + 1) = v725;
                  v1967 = v735;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v733);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1966);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1967, v734);
                  v736 = &v34[9752 * v247 + 206880 + 500 * v377];
                  v737 = (uint64_t *)*v736;
                  v1964[0] = 4;
                  v1965 = v737;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1964);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1964);
                  v738 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v739 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v738, "sceneComponentDynamicData");
                  v740 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v739, "ASCData");
                  v741 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v740, v247);
                  v742 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v741, "objectMetadata");
                  v743 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v742, "blockData");
                  v744 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v743, v377);
                  v745 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v744, "headphoneVirtualize");
                  v746 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v745, "hasData");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1964);
                  LODWORD(v733) = *v746;
                  *v746 = 4;
                  v1964[0] = (char)v733;
                  v747 = (uint64_t *)*((_QWORD *)v746 + 1);
                  *((_QWORD *)v746 + 1) = v737;
                  v1965 = v747;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v746);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1964);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1965, (int)v733);
                  if (*v736)
                  {
                    v748 = (uint64_t *)v34[9752 * v247 + 206881 + 500 * v377];
                    v1962[0] = 4;
                    v1963 = v748;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1962);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1962);
                    v749 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v750 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v749, "sceneComponentDynamicData");
                    v751 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v750, "ASCData");
                    v752 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v751, v247);
                    v753 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v752, "objectMetadata");
                    v754 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v753, "blockData");
                    v755 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v754, v377);
                    v756 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v755, "headphoneVirtualize");
                    v757 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v756, "bypass");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1962);
                    v758 = *v757;
                    *v757 = 4;
                    v1962[0] = v758;
                    v759 = (uint64_t *)*((_QWORD *)v757 + 1);
                    *((_QWORD *)v757 + 1) = v748;
                    v1963 = v759;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v757);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1962);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1963, v758);
                    v760 = *(float *)&v34[9752 * v247 + 206884 + 500 * v377];
                    v1960[0] = 7;
                    v1961 = v760;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1960);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1960);
                    v761 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v762 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v761, "sceneComponentDynamicData");
                    v763 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v762, "ASCData");
                    v764 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v763, v247);
                    v765 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v764, "objectMetadata");
                    v766 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v765, "blockData");
                    v767 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v766, v377);
                    v768 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v767, "headphoneVirtualize");
                    v769 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v768, "DRR");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1960);
                    v770 = *v769;
                    *v769 = 7;
                    v1960[0] = v770;
                    v771 = *((uint64_t **)v769 + 1);
                    *((double *)v769 + 1) = v760;
                    v1961 = *(double *)&v771;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v769);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1960);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1961, v770);
                  }
                  v772 = &v34[9752 * v247 + 206888 + 500 * v377];
                  v773 = (uint64_t *)*v772;
                  v1958[0] = 4;
                  v1959 = v773;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1958);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1958);
                  v774 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                  v775 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v774, "sceneComponentDynamicData");
                  v776 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v775, "ASCData");
                  v777 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v776, v247);
                  v778 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v777, "objectMetadata");
                  v779 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v778, "blockData");
                  v780 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v779, v377);
                  v781 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v780, "zoneExclusion");
                  v782 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v781, "isZoneDefined");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1958);
                  v783 = *v782;
                  *v782 = 4;
                  v1958[0] = v783;
                  v784 = (uint64_t *)*((_QWORD *)v782 + 1);
                  *((_QWORD *)v782 + 1) = v773;
                  v1959 = v784;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v782);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1958);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1959, v783);
                  if (*v772)
                  {
                    v785 = &v34[9752 * v247 + 206889 + 500 * v377];
                    v786 = (uint64_t *)*v785;
                    v1956[0] = 4;
                    v1957 = v786;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1956);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1956);
                    v787 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                    v788 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v787, "sceneComponentDynamicData");
                    v789 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v788, "ASCData");
                    v790 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v789, v247);
                    v791 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v790, "objectMetadata");
                    v792 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v791, "blockData");
                    v793 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v792, v377);
                    v794 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v793, "zoneExclusion");
                    v795 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v794, "keepPreviousZone");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1956);
                    v796 = *v795;
                    *v795 = 4;
                    v1956[0] = v796;
                    v797 = (uint64_t *)*((_QWORD *)v795 + 1);
                    *((_QWORD *)v795 + 1) = v786;
                    v1957 = v797;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v795);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1956);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1957, v796);
                    if (*v785)
                    {
                      v798 = &v34[9752 * v247 + 206890 + 500 * v377];
                      v799 = (uint64_t *)*v798;
                      v1954[0] = 5;
                      v1955 = v799;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1954);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1954);
                      v800 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                      v801 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v800, "sceneComponentDynamicData");
                      v802 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v801, "ASCData");
                      v803 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v802, v247);
                      v804 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v803, "objectMetadata");
                      v805 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v804, "blockData");
                      v806 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v805, v377);
                      v807 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v806, "zoneExclusion");
                      v808 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v807, "numZones");
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1954);
                      v809 = *v808;
                      *v808 = 5;
                      v1954[0] = v809;
                      v810 = (uint64_t *)*((_QWORD *)v808 + 1);
                      *((_QWORD *)v808 + 1) = v799;
                      v1955 = v810;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v808);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1954);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1955, v809);
                      if (*v798)
                      {
                        v811 = 0;
                        v812 = v1725;
                        do
                        {
                          v813 = (uint64_t *)v378[v811 - 15];
                          v1952[0] = 4;
                          v1953 = v813;
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1952);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1952);
                          v814 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                          v815 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v814, "sceneComponentDynamicData");
                          v816 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v815, "ASCData");
                          v817 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v816, v247);
                          v818 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v817, "objectMetadata");
                          v819 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v818, "blockData");
                          v820 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v819, v377);
                          v821 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v820, "zoneExclusion");
                          v822 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v821, "usePreDefinedZone");
                          v823 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v822, v811);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1952);
                          v824 = *v823;
                          *v823 = 4;
                          v1952[0] = v824;
                          v825 = (uint64_t *)*((_QWORD *)v823 + 1);
                          *((_QWORD *)v823 + 1) = v813;
                          v1953 = v825;
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v823);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1952);
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1953, v824);
                          if (v378[v811 - 15])
                          {
                            v826 = v378[v811];
                            v1950[0] = 5;
                            v1951 = v826;
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1950);
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1950);
                            v827 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                            v34 = (unsigned __int8 *)v1731;
                            v828 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v827, "sceneComponentDynamicData");
                            v829 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v828, "ASCData");
                            v830 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v829, v247);
                            v831 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v830, "objectMetadata");
                            v832 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v831, "blockData");
                            v833 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v832, v377);
                            v834 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v833, "zoneExclusion");
                            v835 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v834, "zoneIndex");
                            v836 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v835, v811);
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1950);
                            v837 = *v836;
                            *v836 = 5;
                            v1950[0] = v837;
                            v838 = *((_QWORD *)v836 + 1);
                            *((_QWORD *)v836 + 1) = v826;
                            v1951 = v838;
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v836);
                            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1950);
                            v839 = (double *)&v1951;
                          }
                          else
                          {
                            v840 = *(v812 - 3);
                            v841 = v840;
                            v34 = (unsigned __int8 *)v1731;
                            if (*v1727)
                            {
                              v1948[0] = 7;
                              v1949 = v840;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1948);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1948);
                              v842 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v843 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v842, "sceneComponentDynamicData");
                              v844 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v843, "ASCData");
                              v845 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v844, v247);
                              v846 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v845, "objectMetadata");
                              v847 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v846, "blockData");
                              v848 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v847, v377);
                              v849 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v848, "zoneExclusion");
                              v850 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v849, "zone");
                              v851 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v850, v811);
                              v852 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v851, "minX");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1948);
                              v853 = *v852;
                              *v852 = 7;
                              v1948[0] = v853;
                              v854 = *((uint64_t **)v852 + 1);
                              *((double *)v852 + 1) = v841;
                              v1949 = *(double *)&v854;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v852);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1948);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1949, v853);
                              v855 = *(v812 - 2);
                              v1946[0] = 7;
                              v1947 = v855;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1946);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1946);
                              v856 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v857 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v856, "sceneComponentDynamicData");
                              v858 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v857, "ASCData");
                              v859 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v858, v247);
                              v860 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v859, "objectMetadata");
                              v861 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v860, "blockData");
                              v862 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v861, v377);
                              v863 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v862, "zoneExclusion");
                              v864 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v863, "zone");
                              v865 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v864, v811);
                              v866 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v865, "maxX");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1946);
                              v867 = *v866;
                              *v866 = 7;
                              v1946[0] = v867;
                              v868 = *((uint64_t **)v866 + 1);
                              *((double *)v866 + 1) = v855;
                              v1947 = *(double *)&v868;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v866);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1946);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1947, v867);
                              v869 = *(v812 - 1);
                              v1944[0] = 7;
                              v1945 = v869;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1944);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1944);
                              v870 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v871 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v870, "sceneComponentDynamicData");
                              v872 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v871, "ASCData");
                              v873 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v872, v247);
                              v874 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v873, "objectMetadata");
                              v875 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v874, "blockData");
                              v876 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v875, v377);
                              v877 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v876, "zoneExclusion");
                              v878 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v877, "zone");
                              v879 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v878, v811);
                              v880 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v879, "minY");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1944);
                              v881 = *v880;
                              *v880 = 7;
                              v1944[0] = v881;
                              v882 = *((uint64_t **)v880 + 1);
                              *((double *)v880 + 1) = v869;
                              v1945 = *(double *)&v882;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v880);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1944);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1945, v881);
                              v883 = *v812;
                              v1942[0] = 7;
                              v1943 = v883;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1942);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1942);
                              v884 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v885 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v884, "sceneComponentDynamicData");
                              v886 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v885, "ASCData");
                              v887 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v886, v247);
                              v888 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v887, "objectMetadata");
                              v889 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v888, "blockData");
                              v890 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v889, v377);
                              v891 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v890, "zoneExclusion");
                              v892 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v891, "zone");
                              v893 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v892, v811);
                              v894 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v893, "maxY");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1942);
                              v895 = *v894;
                              *v894 = 7;
                              v1942[0] = v895;
                              v896 = (uint64_t *)*((_QWORD *)v894 + 1);
                              *((double *)v894 + 1) = v883;
                              v1943 = *(double *)&v896;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v894);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1942);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1943, v895);
                              v897 = v812[1];
                              v1940[0] = 7;
                              v1941 = v897;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1940);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1940);
                              v898 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v899 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v898, "sceneComponentDynamicData");
                              v900 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v899, "ASCData");
                              v901 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v900, v247);
                              v902 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v901, "objectMetadata");
                              v903 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v902, "blockData");
                              v904 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v903, v377);
                              v905 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v904, "zoneExclusion");
                              v906 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v905, "zone");
                              v907 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v906, v811);
                              v908 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v907, "minZ");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1940);
                              v909 = *v908;
                              *v908 = 7;
                              v1940[0] = v909;
                              v910 = *((uint64_t **)v908 + 1);
                              *((double *)v908 + 1) = v897;
                              v1941 = *(double *)&v910;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v908);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1940);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1941, v909);
                              v911 = v812[2];
                              v1938[0] = 7;
                              v1939 = v911;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1938);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1938);
                              v912 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v913 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v912, "sceneComponentDynamicData");
                              v914 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v913, "ASCData");
                              v915 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v914, v247);
                              v916 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v915, "objectMetadata");
                              v917 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v916, "blockData");
                              v918 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v917, v377);
                              v919 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v918, "zoneExclusion");
                              v920 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v919, "zone");
                              v921 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v920, v811);
                              v922 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v921, "maxZ");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1938);
                              v837 = *v922;
                              *v922 = 7;
                              v1938[0] = v837;
                              v923 = *((double *)v922 + 1);
                              *((double *)v922 + 1) = v911;
                              v1939 = v923;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v922);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1938);
                              v839 = &v1939;
                            }
                            else
                            {
                              v1936[0] = 7;
                              v1937 = v840;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1936);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1936);
                              v924 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v925 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v924, "sceneComponentDynamicData");
                              v926 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v925, "ASCData");
                              v927 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v926, v247);
                              v928 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v927, "objectMetadata");
                              v929 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v928, "blockData");
                              v930 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v929, v377);
                              v931 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v930, "zoneExclusion");
                              v932 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v931, "zone");
                              v933 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v932, v811);
                              v934 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v933, "minAzimuth");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1936);
                              v935 = *v934;
                              *v934 = 7;
                              v1936[0] = v935;
                              v936 = *((uint64_t **)v934 + 1);
                              *((double *)v934 + 1) = v841;
                              v1937 = *(double *)&v936;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v934);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1936);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1937, v935);
                              v937 = *(v812 - 2);
                              v1934[0] = 7;
                              v1935 = v937;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1934);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1934);
                              v938 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v939 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v938, "sceneComponentDynamicData");
                              v940 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v939, "ASCData");
                              v941 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v940, v247);
                              v942 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v941, "objectMetadata");
                              v943 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v942, "blockData");
                              v944 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v943, v377);
                              v945 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v944, "zoneExclusion");
                              v946 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v945, "zone");
                              v947 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v946, v811);
                              v948 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v947, "maxAzimuth");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1934);
                              v949 = *v948;
                              *v948 = 7;
                              v1934[0] = v949;
                              v950 = *((uint64_t **)v948 + 1);
                              *((double *)v948 + 1) = v937;
                              v1935 = *(double *)&v950;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v948);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1934);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1935, v949);
                              v951 = *(v812 - 1);
                              v1932[0] = 7;
                              v1933 = v951;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1932);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1932);
                              v952 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v953 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v952, "sceneComponentDynamicData");
                              v954 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v953, "ASCData");
                              v955 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v954, v247);
                              v956 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v955, "objectMetadata");
                              v957 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v956, "blockData");
                              v958 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v957, v377);
                              v959 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v958, "zoneExclusion");
                              v960 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v959, "zone");
                              v961 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v960, v811);
                              v962 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v961, "minElevation");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1932);
                              v963 = *v962;
                              *v962 = 7;
                              v1932[0] = v963;
                              v964 = *((uint64_t **)v962 + 1);
                              *((double *)v962 + 1) = v951;
                              v1933 = *(double *)&v964;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v962);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1932);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v1933, v963);
                              v965 = *v812;
                              v1930[0] = 7;
                              v1931 = v965;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1930);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1930);
                              v966 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
                              v967 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v966, "sceneComponentDynamicData");
                              v968 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v967, "ASCData");
                              v969 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v968, v247);
                              v970 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v969, "objectMetadata");
                              v971 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v970, "blockData");
                              v972 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v971, v377);
                              v973 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v972, "zoneExclusion");
                              v974 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v973, "zone");
                              v975 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v974, v811);
                              v976 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v975, "maxElevation");
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1930);
                              v837 = *v976;
                              *v976 = 7;
                              v1930[0] = v837;
                              v977 = *((double *)v976 + 1);
                              *((double *)v976 + 1) = v965;
                              v1931 = v977;
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v976);
                              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1930);
                              v839 = &v1931;
                            }
                          }
                          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v839, v837);
                          ++v811;
                          v812 += 6;
                        }
                        while (v811 < *v798);
                      }
                    }
                  }
                }
              }
              ++v377;
              v378 += 500;
              v1725 += 125;
            }
            while (v377 < *v1721);
          }
          goto LABEL_104;
        }
        if (v257 != 2)
        {
          std::to_string(&v2084, v257);
          v1078 = std::string::insert(&v2084, 0, "Unknown ASC type ", 0x11uLL);
          v2085 = *v1078;
          v1078->__r_.__value_.__l.__size_ = 0;
          v1078->__r_.__value_.__r.__words[2] = 0;
          v1078->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v2084.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v2084.__r_.__value_.__l.__data_);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v1928, "not implemented");
          v1079 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
          v1080 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1079, "sceneComponentDynamicData");
          v1081 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1080, "ASCData");
          v1082 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1081, v247);
          v1083 = SHIBYTE(v2085.__r_.__value_.__r.__words[2]);
          v1084 = (void *)v2085.__r_.__value_.__r.__words[0];
          if ((v2085.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v1085 = &v2085;
          else
            v1085 = (std::string *)v2085.__r_.__value_.__r.__words[0];
          v1086 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1082, (char *)v1085);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1928);
          v1087 = *v1086;
          *v1086 = v1928[0];
          v1928[0] = v1087;
          v1088 = (uint64_t *)*((_QWORD *)v1086 + 1);
          *((_QWORD *)v1086 + 1) = v1929;
          v1929 = v1088;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1086);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1928);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1929, v1928[0]);
          if (v1083 < 0)
            operator delete(v1084);
          goto LABEL_104;
        }
        v258 = &v34[9752 * v247 + 206748];
        v259 = (uint64_t *)*v258;
        v2048[0] = 4;
        v2049 = v259;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2048);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2048);
        v260 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
        v261 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v260, "sceneComponentDynamicData");
        v262 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v261, "ASCData");
        v263 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v262, v247);
        v264 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v263, "HOAMetadata");
        v265 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v264, "hasADMMetadata");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2048);
        v266 = *v265;
        *v265 = 4;
        v2048[0] = v266;
        v267 = (uint64_t *)*((_QWORD *)v265 + 1);
        *((_QWORD *)v265 + 1) = v259;
        v2049 = v267;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v265);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2048);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2049, v266);
        if (*v258)
        {
          v268 = &v34[9752 * v247 + 206752];
          v269 = (uint64_t *)*v268;
          v2046[0] = 4;
          v2047 = v269;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2046);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2046);
          v270 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
          v271 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v270, "sceneComponentDynamicData");
          v272 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v271, "ASCData");
          v273 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v272, v247);
          v274 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v273, "HOAMetadata");
          v275 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v274, "absoluteDistance");
          v276 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v275, "hasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2046);
          v277 = *v276;
          *v276 = 4;
          v2046[0] = v277;
          v278 = (uint64_t *)*((_QWORD *)v276 + 1);
          *((_QWORD *)v276 + 1) = v269;
          v2047 = v278;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2046);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2047, v277);
          if (*v268)
          {
            v279 = *(float *)&v34[9752 * v247 + 206756];
            v2044[0] = 7;
            v2045 = v279;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2044);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2044);
            v280 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
            v281 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v280, "sceneComponentDynamicData");
            v282 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v281, "ASCData");
            v283 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v282, v247);
            v284 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v283, "HOAMetadata");
            v285 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v284, "absoluteDistance");
            v286 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v285, "distance");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2044);
            v287 = *v286;
            *v286 = 7;
            v2044[0] = v287;
            v288 = *((uint64_t **)v286 + 1);
            *((double *)v286 + 1) = v279;
            v2045 = *(double *)&v288;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v286);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2044);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2045, v287);
          }
          v289 = &v34[9752 * v247 + 206760];
          v290 = (uint64_t *)*v289;
          v2042[0] = 4;
          v2043 = v290;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2042);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2042);
          v291 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
          v292 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v291, "sceneComponentDynamicData");
          v293 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v292, "ASCData");
          v294 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v293, v247);
          v295 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v294, "HOAMetadata");
          v296 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v295, "gain");
          v297 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v296, "hasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2042);
          v298 = *v297;
          *v297 = 4;
          v2042[0] = v298;
          v299 = (uint64_t *)*((_QWORD *)v297 + 1);
          *((_QWORD *)v297 + 1) = v290;
          v2043 = v299;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v297);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2042);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2043, v298);
          if (*v289)
          {
            v300 = (uint64_t *)v34[9752 * v247 + 206761];
            v2040[0] = 4;
            v2041 = v300;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2040);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2040);
            v301 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
            v302 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v301, "sceneComponentDynamicData");
            v303 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v302, "ASCData");
            v304 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v303, v247);
            v305 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v304, "HOAMetadata");
            v306 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v305, "gain");
            v307 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v306, "isDB");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2040);
            v308 = *v307;
            *v307 = 4;
            v2040[0] = v308;
            v309 = (uint64_t *)*((_QWORD *)v307 + 1);
            *((_QWORD *)v307 + 1) = v300;
            v2041 = v309;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v307);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2040);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2041, v308);
            v310 = *(float *)&v34[9752 * v247 + 206764];
            v2038[0] = 7;
            v2039 = v310;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2038);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2038);
            v311 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
            v312 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v311, "sceneComponentDynamicData");
            v313 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v312, "ASCData");
            v314 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v313, v247);
            v315 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v314, "HOAMetadata");
            v316 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v315, "gain");
            v317 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v316, "gain");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2038);
            v318 = *v317;
            *v317 = 7;
            v2038[0] = v318;
            v319 = *((uint64_t **)v317 + 1);
            *((double *)v317 + 1) = v310;
            v2039 = *(double *)&v319;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v317);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2038);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2039, v318);
          }
          v320 = (uint64_t *)v34[9752 * v247 + 206770];
          v2036[0] = 4;
          v2037 = v320;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2036);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2036);
          v321 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
          v322 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v321, "sceneComponentDynamicData");
          v323 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v322, "ASCData");
          v324 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v323, v247);
          v325 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v324, "HOAMetadata");
          v326 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v325, "headLocked");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2036);
          v327 = *v326;
          *v326 = 4;
          v2036[0] = v327;
          v328 = (uint64_t *)*((_QWORD *)v326 + 1);
          *((_QWORD *)v326 + 1) = v320;
          v2037 = v328;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v326);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2036);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2037, v327);
          v329 = &v34[9752 * v247 + 206772];
          v330 = (uint64_t *)*v329;
          v2034[0] = 4;
          v2035 = v330;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2034);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2034);
          v331 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
          v332 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v331, "sceneComponentDynamicData");
          v333 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v332, "ASCData");
          v334 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v333, v247);
          v335 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v334, "HOAMetadata");
          v336 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v335, "headphoneVirtualize");
          v337 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v336, "hasData");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2034);
          LODWORD(v326) = *v337;
          *v337 = 4;
          v2034[0] = (char)v326;
          v338 = (uint64_t *)*((_QWORD *)v337 + 1);
          *((_QWORD *)v337 + 1) = v330;
          v2035 = v338;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v337);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2034);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2035, (int)v326);
          if (*v329)
          {
            v339 = (uint64_t *)v34[9752 * v247 + 206773];
            v2032[0] = 4;
            v2033 = v339;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2032);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2032);
            v340 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
            v341 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v340, "sceneComponentDynamicData");
            v342 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v341, "ASCData");
            v343 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v342, v247);
            v344 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v343, "HOAMetadata");
            v345 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v344, "headphoneVirtualize");
            v346 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v345, "bypass");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2032);
            v347 = *v346;
            *v346 = 4;
            v2032[0] = v347;
            v348 = (uint64_t *)*((_QWORD *)v346 + 1);
            *((_QWORD *)v346 + 1) = v339;
            v2033 = v348;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v346);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2032);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2033, v347);
            v349 = *(float *)&v34[9752 * v247 + 206776];
            v2030[0] = 7;
            v2031 = v349;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2030);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2030);
            v350 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
            v351 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v350, "sceneComponentDynamicData");
            v352 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v351, "ASCData");
            v353 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v352, v247);
            v354 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v353, "HOAMetadata");
            v355 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v354, "headphoneVirtualize");
            v356 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v355, "DRR");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2030);
            v357 = *v356;
            *v356 = 7;
            v2030[0] = v357;
            v358 = *((double *)v356 + 1);
            *((double *)v356 + 1) = v349;
            v2031 = v358;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v356);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2030);
            v359 = &v2031;
LABEL_96:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v359, v357);
          }
        }
LABEL_104:
        ++v247;
        v1705 += 9752;
        v1704 += 9752;
        if (v247 == v1697)
          goto LABEL_105;
      }
      v978 = &v34[9752 * v247 + 206716];
      v979 = (uint64_t *)*v978;
      v2068[0] = 4;
      v2069 = v979;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2068);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2068);
      v980 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
      v981 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v980, "sceneComponentDynamicData");
      v982 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v981, "ASCData");
      v983 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v982, v247);
      v984 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v983, "channelMetadata");
      v985 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v984, "hasADMMetadata");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2068);
      v986 = *v985;
      *v985 = 4;
      v2068[0] = v986;
      v987 = (uint64_t *)*((_QWORD *)v985 + 1);
      *((_QWORD *)v985 + 1) = v979;
      v2069 = v987;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v985);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2068);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2069, v986);
      if (!*v978)
        goto LABEL_104;
      v988 = &v34[9752 * v247 + 206720];
      v989 = (uint64_t *)*v988;
      v2066[0] = 4;
      v2067 = v989;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2066);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2066);
      v990 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
      v991 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v990, "sceneComponentDynamicData");
      v992 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v991, "ASCData");
      v993 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v992, v247);
      v994 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v993, "channelMetadata");
      v995 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v994, "absoluteDistance");
      v996 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v995, "hasData");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2066);
      v997 = *v996;
      *v996 = 4;
      v2066[0] = v997;
      v998 = (uint64_t *)*((_QWORD *)v996 + 1);
      *((_QWORD *)v996 + 1) = v989;
      v2067 = v998;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v996);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2066);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2067, v997);
      if (*v988)
      {
        v999 = *(float *)&v34[9752 * v247 + 206724];
        v2064[0] = 7;
        v2065 = v999;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2064);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2064);
        v1000 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
        v1001 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1000, "sceneComponentDynamicData");
        v1002 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1001, "ASCData");
        v1003 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1002, v247);
        v1004 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1003, "channelMetadata");
        v1005 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1004, "absoluteDistance");
        v1006 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1005, "distance");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2064);
        v1007 = *v1006;
        *v1006 = 7;
        v2064[0] = v1007;
        v1008 = *((uint64_t **)v1006 + 1);
        *((double *)v1006 + 1) = v999;
        v2065 = *(double *)&v1008;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1006);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2064);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2065, v1007);
      }
      v1009 = &v34[9752 * v247 + 206728];
      v1010 = (uint64_t *)*v1009;
      v2062[0] = 4;
      v2063 = v1010;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2062);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2062);
      v1011 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
      v1012 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1011, "sceneComponentDynamicData");
      v1013 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1012, "ASCData");
      v1014 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1013, v247);
      v1015 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1014, "channelMetadata");
      v1016 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1015, "gain");
      v1017 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1016, "hasData");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2062);
      v1018 = *v1017;
      *v1017 = 4;
      v2062[0] = v1018;
      v1019 = (uint64_t *)*((_QWORD *)v1017 + 1);
      *((_QWORD *)v1017 + 1) = v1010;
      v2063 = v1019;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1017);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2062);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2063, v1018);
      if (*v1009)
      {
        v1020 = (uint64_t *)v34[9752 * v247 + 206729];
        v2060[0] = 4;
        v2061 = v1020;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2060);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2060);
        v1021 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
        v1022 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1021, "sceneComponentDynamicData");
        v1023 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1022, "ASCData");
        v1024 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1023, v247);
        v1025 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1024, "channelMetadata");
        v1026 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1025, "gain");
        v1027 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1026, "isDB");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2060);
        v1028 = *v1027;
        *v1027 = 4;
        v2060[0] = v1028;
        v1029 = (uint64_t *)*((_QWORD *)v1027 + 1);
        *((_QWORD *)v1027 + 1) = v1020;
        v2061 = v1029;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1027);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2060);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2061, v1028);
        v1030 = *(float *)&v34[9752 * v247 + 206732];
        v2058[0] = 7;
        v2059 = v1030;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2058);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2058);
        v1031 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
        v1032 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1031, "sceneComponentDynamicData");
        v1033 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1032, "ASCData");
        v1034 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1033, v247);
        v1035 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1034, "channelMetadata");
        v1036 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1035, "gain");
        v1037 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1036, "gain");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2058);
        v1038 = *v1037;
        *v1037 = 7;
        v2058[0] = v1038;
        v1039 = *((uint64_t **)v1037 + 1);
        *((double *)v1037 + 1) = v1030;
        v2059 = *(double *)&v1039;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1037);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2058);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v2059, v1038);
      }
      v1040 = (uint64_t *)v34[9752 * v247 + 206738];
      v2056[0] = 4;
      v2057 = v1040;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2056);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2056);
      v1041 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
      v1042 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1041, "sceneComponentDynamicData");
      v1043 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1042, "ASCData");
      v1044 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1043, v247);
      v1045 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1044, "channelMetadata");
      v1046 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1045, "headLocked");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2056);
      v1047 = *v1046;
      *v1046 = 4;
      v2056[0] = v1047;
      v1048 = (uint64_t *)*((_QWORD *)v1046 + 1);
      *((_QWORD *)v1046 + 1) = v1040;
      v2057 = v1048;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1046);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2056);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2057, v1047);
      v1049 = &v34[9752 * v247 + 206740];
      v1050 = (uint64_t *)*v1049;
      v2054[0] = 4;
      v2055 = v1050;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2054);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2054);
      v1051 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
      v1052 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1051, "sceneComponentDynamicData");
      v1053 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1052, "ASCData");
      v1054 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1053, v247);
      v1055 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1054, "channelMetadata");
      v1056 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1055, "headphoneVirtualize");
      v1057 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1056, "hasData");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2054);
      LODWORD(v1046) = *v1057;
      *v1057 = 4;
      v2054[0] = (char)v1046;
      v1058 = (uint64_t *)*((_QWORD *)v1057 + 1);
      *((_QWORD *)v1057 + 1) = v1050;
      v2055 = v1058;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1057);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2054);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2055, (int)v1046);
      if (!*v1049)
        goto LABEL_104;
      v1059 = (uint64_t *)v34[9752 * v247 + 206741];
      v2052[0] = 4;
      v2053 = v1059;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2052);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2052);
      v1060 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
      v1061 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1060, "sceneComponentDynamicData");
      v1062 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1061, "ASCData");
      v1063 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1062, v247);
      v1064 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1063, "channelMetadata");
      v1065 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1064, "headphoneVirtualize");
      v1066 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1065, "bypass");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2052);
      v1067 = *v1066;
      *v1066 = 4;
      v2052[0] = v1067;
      v1068 = (uint64_t *)*((_QWORD *)v1066 + 1);
      *((_QWORD *)v1066 + 1) = v1059;
      v2053 = v1068;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1066);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2052);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2053, v1067);
      v1069 = *(float *)&v34[9752 * v247 + 206744];
      v2050[0] = 7;
      v2051 = v1069;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2050);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2050);
      v1070 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
      v1071 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1070, "sceneComponentDynamicData");
      v1072 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1071, "ASCData");
      v1073 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v1072, v247);
      v1074 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1073, "channelMetadata");
      v1075 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1074, "headphoneVirtualize");
      v1076 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1075, "DRR");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2050);
      v357 = *v1076;
      *v1076 = 7;
      v2050[0] = v357;
      v1077 = *((double *)v1076 + 1);
      *((double *)v1076 + 1) = v1069;
      v2051 = v1077;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1076);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2050);
      v359 = &v2051;
      goto LABEL_96;
    }
LABEL_105:
    v1089 = (uint64_t *)v34[1445216];
    v1926[0] = 4;
    v1927 = v1089;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1926);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1926);
    v1090 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v2162, "dynamicMetadata");
    v1091 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1090, "extDynamicData");
    v1092 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v1091, "hasData");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1926);
    v1093 = *v1092;
    *v1092 = 4;
    v1926[0] = v1093;
    v1094 = (uint64_t *)*((_QWORD *)v1092 + 1);
    *((_QWORD *)v1092 + 1) = v1089;
    v1927 = v1094;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1092);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v1926);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v1927, v1093);
  }
LABEL_204:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(v1695, (uint64_t)v2162, v1696);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2162);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v2163, v2162[0]);
}

void sub_18EF86990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t **a37)
{
  uint64_t v37;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&STACK[0x4D8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v37 - 128);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a37, *(unsigned __int8 *)(v37 - 128));
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(_QWORD *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  lconv *v9;
  char *thousands_sep;
  char *decimal_point;
  _OWORD *v12;
  __int128 v13;
  unint64_t v14;
  __int128 v16;
  _OWORD v17[5];
  lconv *v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  _OWORD *v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917C20;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E29133A0;
  v6[1].__shared_owners_ = (uint64_t)a1;
  *(_QWORD *)&v16 = v6 + 1;
  *((_QWORD *)&v16 + 1) = v6;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v17[0] = v16;
  memset(&v17[1], 0, 64);
  v9 = localeconv();
  v18 = v9;
  thousands_sep = v9->thousands_sep;
  if (thousands_sep)
    LOBYTE(thousands_sep) = *thousands_sep;
  v19 = (char)thousands_sep;
  decimal_point = v9->decimal_point;
  if (v9->decimal_point)
    LOBYTE(decimal_point) = *decimal_point;
  v20 = (char)decimal_point;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v53 = 32;
  v12 = operator new(0x208uLL);
  v54 = v12;
  v56 = 0x8000000000000208;
  v55 = 512;
  *(_QWORD *)&v13 = 0x2020202020202020;
  *((_QWORD *)&v13 + 1) = 0x2020202020202020;
  *v12 = v13;
  v12[1] = v13;
  v12[2] = v13;
  v12[3] = v13;
  v12[4] = v13;
  v12[5] = v13;
  v12[6] = v13;
  v12[7] = v13;
  v12[8] = v13;
  v12[9] = v13;
  v12[10] = v13;
  v12[11] = v13;
  v12[12] = v13;
  v12[13] = v13;
  v12[14] = v13;
  v12[15] = v13;
  v12[16] = v13;
  v12[17] = v13;
  v12[18] = v13;
  v12[19] = v13;
  v12[20] = v13;
  v12[21] = v13;
  v12[22] = v13;
  v12[23] = v13;
  v12[24] = v13;
  v12[25] = v13;
  v12[26] = v13;
  v12[27] = v13;
  v12[28] = v13;
  v12[29] = v13;
  v12[30] = v13;
  v12[31] = v13;
  *((_BYTE *)v12 + 512) = 0;
  v57 = 0;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump((char *)v17, a2, a3 >= 0, a3 & ~(a3 >> 31), 0);
  return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v17);
}

void sub_18EF87658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)va);
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(char *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int v10;
  char **v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t (*v16)(void);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  uint64_t (*v30)(void);
  double v31;
  _BYTE *v32;
  unint64_t v33;
  _BYTE *v34;
  unsigned int v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  void (*v39)(void);
  uint64_t v40;
  char **v41;
  unint64_t v42;
  uint64_t (***v43)(void);
  char *v44;
  unsigned __int8 **v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  BOOL v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned __int8 **v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned int v76;
  char *v77;
  uint64_t v78;
  void (*v79)(void);
  unint64_t v80;
  char *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  char *v88;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t (***v131)(void);
  unsigned int v132;
  unsigned int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  char *v144;
  unsigned int v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  _BYTE *v154;
  int v155;
  char v156;
  char v157;
  unsigned __int8 v158;
  const char *v159;
  int v160;
  unint64_t v161;

  switch(*(_BYTE *)a2)
  {
    case 0:
      goto LABEL_29;
    case 1:
      v9 = **(_QWORD **)a1;
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16))
      {
        v16 = *(uint64_t (**)(void))(v9 + 8);
        return v16();
      }
      if (a3)
      {
        (*(void (**)(void))(v9 + 8))();
        v10 = a5 + a4;
        v11 = (char **)(a1 + 608);
        if (a1[631] < 0)
        {
          v12 = *((_QWORD *)a1 + 77);
          if (v12 >= v10)
            goto LABEL_6;
        }
        else
        {
          v12 = a1[631];
          if (v10 <= v12)
          {
LABEL_6:
            v13 = *(_QWORD **)(a2 + 8);
            v14 = (_QWORD *)*v13;
            if (v13[2] == 1)
            {
              v15 = (_QWORD *)*v13;
            }
            else
            {
              v80 = 0;
              do
              {
                v81 = a1 + 608;
                if (a1[631] < 0)
                  v81 = *v11;
                (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, v81, (a5 + a4));
                (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 34);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v14 + 4);
                (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "\": ", 3);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v14 + 7, 1, a4, (a5 + a4));
                (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, ",\n", 2);
                v82 = (_QWORD *)v14[1];
                if (v82)
                {
                  do
                  {
                    v15 = v82;
                    v82 = (_QWORD *)*v82;
                  }
                  while (v82);
                }
                else
                {
                  do
                  {
                    v15 = (_QWORD *)v14[2];
                    v59 = *v15 == (_QWORD)v14;
                    v14 = v15;
                  }
                  while (!v59);
                }
                ++v80;
                v13 = *(_QWORD **)(a2 + 8);
                v14 = v15;
              }
              while (v80 < v13[2] - 1);
            }
            v83 = v13 + 1;
            if (v15 == v83)
              __assert_rtn("dump", "serializer.hpp", 138, "i != val.m_value.object->cend()");
            v84 = (_QWORD *)v15[1];
            if (v84)
            {
              do
              {
                v85 = v84;
                v84 = (_QWORD *)*v84;
              }
              while (v84);
            }
            else
            {
              v87 = v15;
              do
              {
                v85 = (_QWORD *)v87[2];
                v59 = *v85 == (_QWORD)v87;
                v87 = v85;
              }
              while (!v59);
            }
            if (v85 != v83)
              __assert_rtn("dump", "serializer.hpp", 139, "std::next(i) == val.m_value.object->cend()");
            v88 = a1 + 608;
            if (a1[631] < 0)
              v88 = *v11;
            (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, v88, (a5 + a4));
            (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 34);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v15 + 4);
            (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "\": ", 3);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v15 + 7, 1, a4, (a5 + a4));
            (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 10);
            v79 = *(void (**)(void))(**(_QWORD **)a1 + 8);
            goto LABEL_139;
          }
        }
        std::string::resize((std::string *)(a1 + 608), 2 * v12, 32);
        goto LABEL_6;
      }
      (*(void (**)(void))v9)();
      v54 = *(_QWORD *)(a2 + 8);
      v55 = *(_QWORD **)v54;
      if (*(_QWORD *)(v54 + 16) != 1)
      {
        v56 = 0;
        do
        {
          (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v55 + 4);
          (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "\":", 2);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v55 + 7, 0, a4, a5);
          (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 44);
          v57 = (_QWORD *)v55[1];
          v58 = v55;
          if (v57)
          {
            do
            {
              v55 = v57;
              v57 = (_QWORD *)*v57;
            }
            while (v57);
          }
          else
          {
            do
            {
              v55 = (_QWORD *)v58[2];
              v59 = *v55 == (_QWORD)v58;
              v58 = v55;
            }
            while (!v59);
          }
          ++v56;
          v54 = *(_QWORD *)(a2 + 8);
        }
        while (v56 < *(_QWORD *)(v54 + 16) - 1);
      }
      v60 = (_QWORD *)(v54 + 8);
      if (v55 == v60)
        __assert_rtn("dump", "serializer.hpp", 166, "i != val.m_value.object->cend()");
      v61 = (_QWORD *)v55[1];
      if (v61)
      {
        do
        {
          v62 = v61;
          v61 = (_QWORD *)*v61;
        }
        while (v61);
      }
      else
      {
        v86 = v55;
        do
        {
          v62 = (_QWORD *)v86[2];
          v59 = *v62 == (_QWORD)v86;
          v86 = v62;
        }
        while (!v59);
      }
      if (v62 != v60)
        __assert_rtn("dump", "serializer.hpp", 167, "std::next(i) == val.m_value.object->cend()");
      (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v55 + 4);
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "\":", 2);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v55 + 7, 0, a4, a5);
LABEL_140:
      v30 = ***(uint64_t (****)(void))a1;
      return v30();
    case 2:
      v17 = *(uint64_t **)(a2 + 8);
      v18 = *v17;
      v19 = v17[1];
      v20 = **(_QWORD **)a1;
      if (v18 == v19)
      {
        v16 = *(uint64_t (**)(void))(v20 + 8);
        return v16();
      }
      if (a3)
      {
        (*(void (**)(void))(v20 + 8))();
        v21 = a5 + a4;
        v22 = a1 + 608;
        if (a1[631] < 0)
        {
          v23 = *((_QWORD *)a1 + 77);
          if (v23 >= v21)
            goto LABEL_14;
        }
        else
        {
          v23 = a1[631];
          if (v21 <= v23)
          {
LABEL_14:
            v24 = *(uint64_t **)(a2 + 8);
            v26 = *v24;
            v25 = v24[1];
            if (v26 != v25 - 16)
            {
              do
              {
                v27 = a1 + 608;
                if (a1[631] < 0)
                  v27 = *(char **)v22;
                (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, v27, (a5 + a4));
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v26, 1, a4, (a5 + a4));
                (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, ",\n", 2);
                v26 += 16;
                v28 = *(uint64_t **)(a2 + 8);
                v25 = v28[1];
              }
              while (v26 != v25 - 16);
              v26 = *v28;
            }
            if (v26 == v25)
              __assert_rtn("dump", "serializer.hpp", 208, "not val.m_value.array->empty()");
            v29 = a1 + 608;
            if (a1[631] < 0)
              v29 = *(char **)v22;
            (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, v29, (a5 + a4));
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16, 1, a4, (a5 + a4));
            (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 10);
            if (a1[631] < 0)
              v22 = *(char **)v22;
            (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, v22, a5);
            goto LABEL_124;
          }
        }
        std::string::resize((std::string *)(a1 + 608), 2 * v23, 32);
        goto LABEL_14;
      }
      (*(void (**)(void))v20)();
      v49 = *(uint64_t **)(a2 + 8);
      v51 = *v49;
      v50 = v49[1];
      if (v51 == v50 - 16)
      {
        v52 = v51;
      }
      else
      {
        v52 = v51;
        do
        {
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v52, 0, a4, a5);
          (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 44);
          v52 += 16;
          v53 = *(uint64_t **)(a2 + 8);
          v50 = v53[1];
        }
        while (v52 != v50 - 16);
        v51 = *v53;
      }
      if (v51 == v50)
        __assert_rtn("dump", "serializer.hpp", 229, "not val.m_value.array->empty()");
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v52, 0, a4, a5);
LABEL_124:
      v30 = ***(uint64_t (****)(void))a1;
      return v30();
    case 3:
      (***(void (****)(void))a1)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, *(uint64_t **)(a2 + 8));
      v30 = ***(uint64_t (****)(void))a1;
      return v30();
    case 4:
      v16 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 8);
      return v16();
    case 5:
      v33 = *(_QWORD *)(a2 + 8);
      if (!v33)
        goto LABEL_46;
      v34 = a1 + 16;
      if ((v33 & 0x8000000000000000) != 0)
      {
        *v34 = 45;
        v33 = -(uint64_t)v33;
        v35 = 1;
        if (v33 >= 0xA)
        {
          v66 = v33;
          while (1)
          {
            if (v66 <= 0x63)
            {
              ++v35;
              goto LABEL_185;
            }
            if (v66 <= 0x3E7)
            {
              v35 += 2;
              goto LABEL_185;
            }
            if (v66 >> 4 <= 0x270)
              break;
            v35 += 4;
            v37 = v66 >= 0x186A0;
            v66 /= 0x2710uLL;
            if (!v37)
              goto LABEL_185;
          }
          v35 += 3;
        }
LABEL_185:
        ++v35;
LABEL_186:
        if (v35 < 0x3F)
        {
          v38 = (uint64_t)&v34[v35];
          if (v33 >= 0x64)
          {
            do
            {
              v128 = v33 / 0x64;
              *(_WORD *)(v38 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v33 % 0x64];
              v38 -= 2;
              v130 = v33 >> 4;
              v33 /= 0x64uLL;
            }
            while (v130 > 0x270);
            goto LABEL_191;
          }
LABEL_190:
          v128 = v33;
LABEL_191:
          if (v128 >= 0xA)
          {
            *(_WORD *)(v38 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v128];
LABEL_195:
            v131 = *(uint64_t (****)(void))a1;
LABEL_267:
            v16 = (*v131)[1];
            return v16();
          }
          LOBYTE(v33) = v128;
LABEL_194:
          *(_BYTE *)(v38 - 1) = v33 + 48;
          goto LABEL_195;
        }
        goto LABEL_272;
      }
      if (v33 >= 0xA)
      {
        v35 = 1;
        v36 = *(_QWORD *)(a2 + 8);
        while (v36 > 0x63)
        {
          if (v36 <= 0x3E7)
          {
            v35 += 2;
            goto LABEL_186;
          }
          if (v36 >> 4 <= 0x270)
          {
            v35 += 3;
            goto LABEL_186;
          }
          v35 += 4;
          v37 = v36 >= 0x186A0;
          v36 /= 0x2710uLL;
          if (!v37)
            goto LABEL_186;
        }
        goto LABEL_185;
      }
      goto LABEL_41;
    case 6:
      v33 = *(_QWORD *)(a2 + 8);
      if (v33)
      {
        if (v33 >= 0xA)
        {
          v63 = 1;
          v64 = *(_QWORD *)(a2 + 8);
          while (1)
          {
            if (v64 <= 0x63)
            {
              ++v63;
              goto LABEL_174;
            }
            if (v64 <= 0x3E7)
            {
              v63 += 2;
              goto LABEL_174;
            }
            if (v64 >> 4 <= 0x270)
              break;
            v63 += 4;
            v37 = v64 >= 0x186A0;
            v64 /= 0x2710uLL;
            if (!v37)
              goto LABEL_174;
          }
          v63 += 3;
LABEL_174:
          if (v63 < 0x3F)
          {
            v38 = (uint64_t)&a1[v63 + 16];
            if (v33 >= 0x64)
            {
              do
              {
                v128 = v33 / 0x64;
                *(_WORD *)(v38 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v33 % 0x64];
                v38 -= 2;
                v129 = v33 >> 4;
                v33 /= 0x64uLL;
              }
              while (v129 > 0x270);
              goto LABEL_191;
            }
            goto LABEL_190;
          }
LABEL_272:
          __assert_rtn("dump_integer", "serializer.hpp", 726, "n_chars < number_buffer.size() - 1");
        }
LABEL_41:
        v38 = (uint64_t)(a1 + 17);
        goto LABEL_194;
      }
LABEL_46:
      v30 = ***(uint64_t (****)(void))a1;
      return v30();
    case 7:
      v31 = *(double *)(a2 + 8);
      if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_29:
        v16 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 8);
        return v16();
      }
      if ((*(_QWORD *)&v31 & 0x8000000000000000) != 0)
      {
        v31 = -v31;
        v32 = a1 + 17;
        a1[16] = 45;
      }
      else
      {
        v32 = a1 + 16;
      }
      if (v31 == 0.0)
      {
        *(_WORD *)v32 = 11824;
        v32[2] = 48;
        goto LABEL_266;
      }
      if (a1 + 80 - v32 <= 16)
        __assert_rtn("to_chars", "to_chars.hpp", 1082, "last - first >= std::numeric_limits<FloatType>::max_digits10");
      if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        __assert_rtn("grisu2", "to_chars.hpp", 889, "std::isfinite(value)");
      if (v31 <= 0.0)
        __assert_rtn("grisu2", "to_chars.hpp", 890, "value > 0");
      v67 = *(_QWORD *)&v31 & 0xFFFFFFFFFFFFFLL;
      v161 = a1 + 80 - v32;
      if (*(_QWORD *)&v31 >> 52)
      {
        v70 = (*(_QWORD *)&v31 >> 52) - 1075;
        v72 = 2 * (v67 | 0x10000000000000);
        v71 = (*(_QWORD *)&v31 >> 52) - 1076;
        v90 = *(_QWORD *)&v31 >> 53;
        v91 = 4 * (v67 | 0x10000000000000);
        v92 = (*(_QWORD *)&v31 >> 52) - 1077;
        v93 = 0x10000000000000;
        if (v67)
        {
          v91 = 2 * (v67 | 0x10000000000000);
          v92 = (*(_QWORD *)&v31 >> 52) - 1076;
          v93 = v67 | 0x10000000000000;
        }
        if (v90)
          v68 = v91;
        else
          v68 = 2 * (v67 | 0x10000000000000);
        if (v90)
          v69 = v92;
        else
          v69 = (*(_QWORD *)&v31 >> 52) - 1076;
        if (v90)
          v67 = v93;
        else
          v67 |= 0x10000000000000uLL;
      }
      else
      {
        v68 = 2 * v67;
        v69 = -1075;
        v70 = 4294966222;
        v71 = -1075;
        v72 = 2 * v67;
      }
      v94 = nlohmann::detail::dtoa_impl::diyfp::normalize(v72 | 1, v71);
      v96 = v95;
      v97 = v69 - v95;
      if (v69 - (int)v95 < 0)
      {
        v159 = "delta >= 0";
        v160 = 162;
      }
      else
      {
        v98 = (v68 - 1) << v97;
        if (v98 >> v97 == v68 - 1)
        {
          v99 = v94;
          v100 = nlohmann::detail::dtoa_impl::diyfp::normalize(v67, v70);
          if ((_DWORD)v96 != v101)
            __assert_rtn("grisu2", "to_chars.hpp", 828, "m_plus.e == v.e");
          if ((int)v96 <= -1501)
            __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 466, "e >= -1500");
          if ((int)v96 >= 1501)
            __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 467, "e <= 1500");
          v102 = 78913 * (-61 - (int)v96) / 0x40000;
          if ((int)v96 < -61)
            ++v102;
          if (v102 <= -315)
            __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 472, "index >= 0");
          v103 = (int)((v102 + 307 + (((__int16)(v102 + 307) >> 28) & 7)) << 16) >> 19;
          if (v103 >= 0x4F)
            __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 473, "static_cast<std::size_t>(index) < kCachedPowers.size()");
          v104 = (uint64_t *)((char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
                           + 16 * (unsigned __int16)v103);
          v105 = v104[1];
          if ((int)v105 + (int)v96 <= -125)
            __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 476, "kAlpha <= cached.e + e + 64");
          if ((int)v105 + (int)v96 >= -95)
            __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 477, "kGamma >= cached.e + e + 64");
          v106 = *v104;
          v107 = nlohmann::detail::dtoa_impl::diyfp::mul(v100, v96, *v104);
          v109 = v108;
          v110 = nlohmann::detail::dtoa_impl::diyfp::mul(v98, v96, v106);
          v112 = v111;
          v113 = nlohmann::detail::dtoa_impl::diyfp::mul(v99, v96, v106);
          v115 = v114;
          if (v114 <= -61)
            __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 601, "M_plus.e >= kAlpha");
          if (v114 >= -31)
            __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 602, "M_plus.e <= kGamma");
          v116 = v110 + 1;
          v117 = v113 - 1;
          v118 = nlohmann::detail::dtoa_impl::diyfp::sub(v113 - 1, v114, v116, v112);
          v119 = nlohmann::detail::dtoa_impl::diyfp::sub(v117, v115, v107, v109);
          v120 = -v115;
          v121 = v117 >> -(char)v115;
          if (!(_DWORD)v121)
            __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 623, "p1 > 0");
          v122 = v119;
          v123 = HIDWORD(v105);
          v124 = (1 << v120) - 1;
          v125 = v124 & v117;
          if (v121 <= 0x3B9AC9FF)
          {
            if (v121 <= 0x5F5E0FF)
            {
              if (v121 <= 0x98967F)
              {
                if (v121 <= 0xF423F)
                {
                  v132 = v121 >> 5;
                  v133 = v121 >> 4;
                  if (v121 <= 9)
                    v134 = 1;
                  else
                    v134 = 10;
                  if (v121 <= 9)
                    v135 = 1;
                  else
                    v135 = 2;
                  if (v121 <= 0x63)
                    v136 = v135;
                  else
                    v136 = 3;
                  if (v121 <= 0x63)
                    v137 = v134;
                  else
                    v137 = 100;
                  if (v121 <= 0x3E7)
                    v138 = v136;
                  else
                    v138 = 4;
                  if (v121 <= 0x3E7)
                    v139 = v137;
                  else
                    v139 = 1000;
                  if (v133 <= 0x270)
                    v140 = v138;
                  else
                    v140 = 5;
                  if (v133 <= 0x270)
                    v141 = v139;
                  else
                    v141 = 10000;
                  if (v132 <= 0xC34)
                    v127 = v140;
                  else
                    v127 = 6;
                  if (v132 > 0xC34)
                    v126 = 100000;
                  else
                    v126 = v141;
                }
                else
                {
                  v126 = 1000000;
                  v127 = 7;
                }
              }
              else
              {
                v126 = 10000000;
                v127 = 8;
              }
            }
            else
            {
              v126 = 100000000;
              v127 = 9;
            }
          }
          else
          {
            v126 = 1000000000;
            v127 = 10;
          }
          v142 = 0;
          v143 = -1;
          v144 = (char *)v127;
          do
          {
            v145 = v121 / v126;
            if (v121 / v126 >= 0xA)
              __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 659, "d <= 9");
            v121 = v121 % v126;
            v146 = (char *)(v142 + 1);
            v32[v142] = v145 + 48;
            if ((v121 << v120) + v125 <= v118)
            {
              v150 = (_DWORD)v144 + v143;
              nlohmann::detail::dtoa_impl::grisu2_round((uint64_t)v32, (char *)(v142 + 1), v122, v118, (v121 << v120) + v125, (unint64_t)v126 << v120);
              goto LABEL_239;
            }
            v126 /= 0xAu;
            --v143;
            ++v142;
          }
          while (v144 != v146);
          if (v125 <= v118)
            __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 746, "p2 > delta");
          v147 = 0;
          do
          {
            if (v125 >= 0x199999999999999ALL)
              __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 757, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
            v148 = (10 * v125) >> v120;
            if (v148 >= 0xA)
              __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 766, "d <= 9");
            v32[v147 + (_QWORD)v146] = v148 + 48;
            v149 = 5 * v118;
            v125 = (10 * v125) & v124;
            v118 *= 10;
            v122 *= 10;
            ++v147;
          }
          while (v125 > 2 * v149);
          v146 += v147;
          v150 = ~(v147 - 1);
          nlohmann::detail::dtoa_impl::grisu2_round((uint64_t)v32, v146, v122, v118, v125, 1 << v120);
LABEL_239:
          if ((int)v146 >= 18)
            __assert_rtn("to_chars", "to_chars.hpp", 1092, "len <= std::numeric_limits<FloatType>::max_digits10");
          if (v161 <= 0x15)
            __assert_rtn("to_chars", "to_chars.hpp", 1100, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
          if (v161 == 22)
            __assert_rtn("to_chars", "to_chars.hpp", 1101, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
          v151 = v150 - (int)v123 + (uint64_t)(int)v146;
          if (v150 - (_DWORD)v123 < 0 || (int)v151 > 15)
          {
            if ((v151 - 16) >= 0xFFFFFFF1)
            {
              if (((v150 - (_DWORD)v123) & 0x80000000) == 0)
                __assert_rtn("format_buffer", "to_chars.hpp", 1006, "k > n");
              v152 = &v32[v151];
              memmove(v152 + 1, v152, (int)v146 - (unint64_t)v151);
              *v152 = 46;
              goto LABEL_266;
            }
            if ((_DWORD)v151 != 0 && v151 < 0xFFFFFFFD)
            {
              if ((_DWORD)v146 == 1)
              {
                v153 = 1;
              }
              else
              {
                memmove(v32 + 2, v32 + 1, (int)v146 - 1);
                v32[1] = 46;
                v153 = (int)v146 + 1;
              }
              v154 = &v32[v153];
              *v154 = 101;
              if ((int)v151 <= -999)
                __assert_rtn("append_exponent", "to_chars.hpp", 926, "e > -1000");
              if ((int)v151 >= 1001)
                __assert_rtn("append_exponent", "to_chars.hpp", 927, "e < 1000");
              v155 = v151 - 1;
              if ((int)v151 >= 1)
                v156 = 43;
              else
                v156 = 45;
              if (v155 < 0)
                v155 = 1 - v151;
              v154[1] = v156;
              if (v155 > 9)
              {
                if (v155 > 0x63)
                {
                  v154[2] = (unsigned __int16)v155 / 0x64u + 48;
                  v158 = (unsigned __int16)v155 % 0x64u;
                  v154[3] = (v158 / 0xAu) | 0x30;
                  v154[4] = (v158 % 0xAu) | 0x30;
                  goto LABEL_266;
                }
                v154[2] = v155 / 0xAu + 48;
                v157 = (v155 % 0xAu) | 0x30;
              }
              else
              {
                v154[2] = 48;
                v157 = v155 + 48;
              }
              v154[3] = v157;
            }
            else
            {
              memmove(&v32[-(int)v151 + 2], v32, (int)v146);
              *(_WORD *)v32 = 11824;
              memset(v32 + 2, 48, -(int)v151);
            }
          }
          else
          {
            memset(&v32[(int)v146], 48, v150 - (int)v123);
            v32[v151] = 46;
            v32[(int)v151 + 1] = 48;
          }
LABEL_266:
          v131 = *(uint64_t (****)(void))a1;
          goto LABEL_267;
        }
        v159 = "((x.f << delta) >> delta) == x.f";
        v160 = 163;
      }
      __assert_rtn("normalize_to", "to_chars.hpp", v160, v159);
    case 8:
      v39 = *(void (**)(void))(**(_QWORD **)a1 + 8);
      if (!a3)
      {
        v39();
        v45 = *(unsigned __int8 ***)(a2 + 8);
        v47 = *v45;
        v46 = v45[1];
        if (v47 != v46)
        {
          while (v47 != v46 - 1)
          {
            v48 = *v47++;
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v48);
            (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 44);
            v46 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 8) + 8);
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v47);
        }
        (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "],\"subtype\":", 12);
        v65 = *(_QWORD *)(a2 + 8);
        if (*(_BYTE *)(v65 + 25))
        {
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v65 + 24));
          goto LABEL_140;
        }
        v16 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 8);
        return v16();
      }
      v39();
      v40 = (a5 + a4);
      v41 = (char **)(a1 + 608);
      if (a1[631] < 0)
      {
        v42 = *((_QWORD *)a1 + 77);
        if (v42 >= v40)
        {
          v43 = *(uint64_t (****)(void))a1;
          goto LABEL_94;
        }
      }
      else
      {
        v42 = a1[631];
        if (v40 <= v42)
        {
          v43 = *(uint64_t (****)(void))a1;
          v44 = a1 + 608;
          goto LABEL_95;
        }
      }
      std::string::resize((std::string *)(a1 + 608), 2 * v42, 32);
      v43 = *(uint64_t (****)(void))a1;
      v44 = a1 + 608;
      if ((a1[631] & 0x80000000) == 0)
      {
LABEL_95:
        ((void (*)(uint64_t (***)(void), char *, uint64_t))(*v43)[1])(v43, v44, v40);
        (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "\"bytes\": [", 10);
        v73 = *(unsigned __int8 ***)(a2 + 8);
        v75 = *v73;
        v74 = v73[1];
        if (v75 != v74)
        {
          if (v75 != v74 - 1)
          {
            do
            {
              v76 = *v75++;
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v76);
              (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, ", ", 2);
            }
            while (v75 != (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1));
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v75);
        }
        (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "],\n", 3);
        v77 = a1 + 608;
        if (a1[631] < 0)
          v77 = *v41;
        (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, v77, v40);
        (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "\"subtype\": ", 11);
        v78 = *(_QWORD *)(a2 + 8);
        if (*(_BYTE *)(v78 + 25))
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v78 + 24));
        else
          (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "null", 4);
        (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 10);
        v79 = *(void (**)(void))(**(_QWORD **)a1 + 8);
LABEL_139:
        v79();
        goto LABEL_140;
      }
LABEL_94:
      v44 = *v41;
      goto LABEL_95;
    case 9:
      v16 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 8);
      return v16();
    default:
      __assert_rtn("dump", "serializer.hpp", 363, "false");
  }
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0)
    operator delete(*(void **)(a1 + 608));
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  _QWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t (*v24)(void);
  int v25;
  void *exception;
  char *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t *v31;
  void *v32;
  std::string v33;
  std::string v34;
  std::string v35;
  __int128 v36;
  std::string::size_type v37;
  char __str[8];
  std::string::size_type v39;
  char v40;

  v2 = *((char *)a2 + 23);
  v3 = a2[1];
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  if (!v3)
    return result;
  v5 = (_QWORD *)result;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = v2 >> 31;
  v13 = result + 90;
  do
  {
    if ((v12 & 1) != 0)
      v14 = (uint64_t *)*a2;
    else
      v14 = a2;
    v15 = *((unsigned __int8 *)v14 + v8);
    if (v7)
      v6 = v15 & 0x3F | (v6 << 6);
    else
      v6 = (0xFFu >> nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v15]) & v15;
    v16 = 16 * v7
        + nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v15]
        + 256;
    if (v16 >= 0x190)
      __assert_rtn("decode", "serializer.hpp", 892, "index < 400");
    v7 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v16];
    if (v7 == 1)
    {
      v18 = *((_DWORD *)v5 + 158);
      if ((v18 - 1) >= 2)
      {
        if (!v18)
        {
          v40 = 3;
          *(_DWORD *)__str = 0;
          snprintf(__str, 3uLL, "%.2X", v15);
          exception = __cxa_allocate_exception(0x20uLL);
          std::to_string(&v33, v8);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v34, "invalid UTF-8 byte at index ", &v33);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v35, &v34, ": 0x");
          if (v40 >= 0)
            v27 = __str;
          else
            v27 = *(char **)__str;
          if (v40 >= 0)
            v28 = v40;
          else
            v28 = v39;
          v29 = std::string::append(&v35, v27, v28);
          v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          v37 = v29->__r_.__value_.__r.__words[2];
          v36 = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          nlohmann::detail::type_error::create((uint64_t)exception, 316, (uint64_t)&v36);
        }
        __assert_rtn("dump_escaped", "serializer.hpp", 562, "false");
      }
      v8 -= v9 != 0;
      if (v18 != 1)
      {
        v7 = 0;
        v9 = 0;
        v11 = v10;
        goto LABEL_39;
      }
      v19 = v13 + v10;
      v11 = v10 + 3;
      *(_WORD *)v19 = -16401;
      *(_BYTE *)(v19 + 2) = -67;
      v20 = v10 - 497;
      goto LABEL_36;
    }
    if (!v7)
    {
      switch(v6)
      {
        case 8u:
          v17 = 25180;
          goto LABEL_34;
        case 9u:
          v17 = 29788;
          goto LABEL_34;
        case 0xAu:
          v17 = 28252;
          goto LABEL_34;
        case 0xBu:
          goto LABEL_27;
        case 0xCu:
          v17 = 26204;
          goto LABEL_34;
        case 0xDu:
          v17 = 29276;
          goto LABEL_34;
        default:
          if (v6 == 34)
          {
            v17 = 8796;
            goto LABEL_34;
          }
          if (v6 == 92)
          {
            v17 = 23644;
LABEL_34:
            *(_WORD *)(v13 + v11) = v17;
            v11 += 2;
            goto LABEL_35;
          }
LABEL_27:
          if (v6 > 0x1F)
          {
            if ((v2 & 0x80u) == 0)
              v23 = a2;
            else
              v23 = (uint64_t *)*a2;
            *(_BYTE *)(v13 + v11++) = *((_BYTE *)v23 + v8);
          }
          else
          {
            result = snprintf((char *)(v13 + v11), 7uLL, "\\u%04x", v6);
            v11 += 6;
          }
LABEL_35:
          v20 = v11 - 500;
          break;
      }
LABEL_36:
      if (v20 <= 0xC)
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v13, v11);
        v7 = 0;
        v11 = 0;
        v10 = 0;
        v9 = 0;
      }
      else
      {
        v7 = 0;
        v9 = 0;
        v10 = v11;
      }
      goto LABEL_39;
    }
    if ((v2 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    *(_BYTE *)(v13 + v11++) = *((_BYTE *)v21 + v8);
    ++v9;
LABEL_39:
    ++v8;
    v2 = *((char *)a2 + 23);
    v12 = v2 >> 31;
    v22 = a2[1];
    if (v2 >= 0)
      v22 = *((unsigned __int8 *)a2 + 23);
  }
  while (v8 < v22);
  if (v7)
  {
    v25 = *((_DWORD *)v5 + 158);
    switch(v25)
    {
      case 1:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v13, v10);
        v24 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
        break;
      case 2:
        v24 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
        break;
      case 0:
        v40 = 3;
        *(_DWORD *)__str = 0;
        v31 = (uint64_t *)*a2;
        if (v2 >= 0)
          v31 = a2;
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v31 + v22 - 1));
        v32 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        nlohmann::detail::type_error::create((uint64_t)v32, 316, (uint64_t)&v36);
      default:
        __assert_rtn("dump_escaped", "serializer.hpp", 625, "false");
    }
    return v24();
  }
  else if (v11)
  {
    v24 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
    return v24();
  }
  return result;
}

void sub_18EF892A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  int v40;

  if (a33 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
    {
LABEL_6:
      if (a39 < 0)
        operator delete(a34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v39);
  goto LABEL_6;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(_QWORD *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  char *v5;
  char v6;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  LOBYTE(v2) = a2;
  if (a2 < 0xA)
  {
    v3 = 1;
LABEL_8:
    v6 = v2 | 0x30;
    goto LABEL_9;
  }
  if (a2 >= 0x64)
  {
    *(_WORD *)((char *)a1 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[(a2 - 100 * ((41 * a2) >> 12))];
    v3 = 3;
    v2 = (41 * a2) >> 12;
    goto LABEL_8;
  }
  v5 = (char *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[a2];
  *((_BYTE *)a1 + 17) = v5[1];
  v6 = *v5;
  v3 = 2;
LABEL_9:
  *((_BYTE *)a1 + 16) = v6;
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)*a1 + 8))(*a1, a1 + 2, v3);
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::mul(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((a3 * (unint64_t)HIDWORD(a1)) >> 32)
       + HIDWORD(a3) * (unint64_t)HIDWORD(a1)
       + ((HIDWORD(a3) * (unint64_t)a1) >> 32)
       + ((((a3 * (unint64_t)a1) >> 32)
         + (HIDWORD(a3) * a1)
         + (a3 * HIDWORD(a1))
         + 0x80000000) >> 32);
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::sub(unint64_t a1, int a2, unint64_t a3, int a4)
{
  BOOL v4;
  unint64_t result;
  const char *v6;
  int v7;

  if (a2 != a4)
  {
    v6 = "x.e == y.e";
    v7 = 66;
LABEL_6:
    __assert_rtn("sub", "to_chars.hpp", v7, v6);
  }
  v4 = a1 >= a3;
  result = a1 - a3;
  if (!v4)
  {
    v6 = "x.f >= y.f";
    v7 = 67;
    goto LABEL_6;
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_round(uint64_t this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;

  if ((int)a2 <= 0)
    __assert_rtn("grisu2_round", "to_chars.hpp", 545, "len >= 1");
  if (a3 > a4)
    __assert_rtn("grisu2_round", "to_chars.hpp", 546, "dist <= delta");
  if (a4 < a5)
    __assert_rtn("grisu2_round", "to_chars.hpp", 547, "rest <= delta");
  if (!a6)
    __assert_rtn("grisu2_round", "to_chars.hpp", 548, "ten_k > 0");
  if (a5 < a3 && a4 - a5 >= a6)
  {
    v6 = ((_DWORD)a2 - 1);
    v7 = -(uint64_t)a5;
    v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3)
        break;
      v9 = *(unsigned __int8 *)(this + v6);
      if (v9 == 48)
        __assert_rtn("grisu2_round", "to_chars.hpp", 573, "buf[len - 1] != '0'");
      *(_BYTE *)(this + v6) = v9 - 1;
      if (v8 >= a3)
        break;
      v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return this;
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::normalize(uint64_t result, unint64_t a2)
{
  if (!result)
    __assert_rtn("normalize", "to_chars.hpp", 143, "x.f != 0");
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

void nlohmann::detail::output_string_adapter<char,std::string>::write_character(uint64_t a1, std::string::value_type a2)
{
  std::string::push_back(*(std::string **)(a1 + 8), a2);
}

std::string *nlohmann::detail::output_string_adapter<char,std::string>::write_characters(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

void nlohmann::detail::output_string_adapter<char,std::string>::~output_string_adapter()
{
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void ADTSAudioStream::~ADTSAudioStream(ADTSAudioStream *this)
{
  AudioFileStreamObject::~AudioFileStreamObject(this);
  JUMPOUT(0x193FFE460);
}

uint64_t ADTSAudioStream::GetPropertyInfo(UInt32 *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  const void *v9;
  UInt32 v10;
  UInt32 outPropertyDataSize;

  if (a2 == 1768174433)
  {
    if (!a3)
      goto LABEL_9;
    v6 = 8;
LABEL_8:
    *a3 = v6;
LABEL_9:
    if (a4)
    {
      result = 0;
      *a4 = 0;
      return result;
    }
    return 0;
  }
  if (a2 != 1835493731)
  {
    if (a2 != 1768174437)
      return AudioFileStreamObject::GetPropertyInfo((AudioFileStreamObject *)this, a2, a3, a4);
    if (!a3)
      goto LABEL_9;
    v6 = 4;
    goto LABEL_8;
  }
  v8 = *((_QWORD *)this + 1);
  v9 = *(const void **)(v8 + 136);
  if (v9)
  {
    outPropertyDataSize = 0;
    result = AudioFormatGetPropertyInfo(0x78686D63u, 0xCu, v9, &outPropertyDataSize);
    if (a3 && !(_DWORD)result)
    {
      v10 = outPropertyDataSize;
      goto LABEL_15;
    }
  }
  else
  {
    if (*((_BYTE *)this + 177))
      return 1685348671;
    if (*(_DWORD *)(v8 + 112))
      result = 1970170687;
    else
      result = 1836020325;
    if (a4)
    {
      *a4 = 0;
      v8 = *((_QWORD *)this + 1);
    }
    if (*(_BYTE *)(v8 + 108))
    {
      if (!a3)
        return 0;
      result = 0;
      v10 = this[32];
LABEL_15:
      *a3 = v10;
    }
  }
  return result;
}

uint64_t ADTSAudioStream::GetProperty(ADTSAudioStream *this, int a2, unsigned int *a3, _QWORD *__dst)
{
  unsigned int *v7;
  uint64_t Property;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  const void *v19;
  size_t v21;
  const void *v22;
  __int128 v23;
  __int128 v24;
  OSType v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  uint64_t PropertyInfo;
  _QWORD *v30;
  size_t v31;
  Boolean outWritable;
  UInt32 outPropertyDataSize;
  UInt32 ioPropertyDataSize[2];
  UInt32 outSize;
  __int128 outPropertyData;
  __int128 v37;
  uint64_t v38;

  if (a2 > 1768174432)
  {
    if (a2 == 1768174433)
    {
      Property = 561211770;
      if (a3 && *a3 == 8)
      {
        Property = 0;
        *__dst = *((_QWORD *)this + 51);
      }
      return Property;
    }
    if (a2 != 1835493731)
    {
      if (a2 != 1768174437)
        return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
      Property = 561211770;
      if (!a3 || *a3 != 4)
        return Property;
      Property = 0;
      v11 = *((_DWORD *)this + 101);
      goto LABEL_21;
    }
    v18 = *((_QWORD *)this + 1);
    v19 = *(const void **)(v18 + 136);
    if (v19)
    {
      AudioFormatGetProperty(0x78686D63u, 0xCu, v19, a3, __dst);
      return 0;
    }
    if (*((_BYTE *)this + 177))
      return 1685348671;
    if (*(_DWORD *)(v18 + 112))
      Property = 1970170687;
    else
      Property = 1836020325;
    if (!*(_BYTE *)(v18 + 108))
      return Property;
    v21 = *a3;
    if ((_DWORD)v21 != *((_DWORD *)this + 32))
      return 561211770;
    v22 = (const void *)*((_QWORD *)this + 15);
LABEL_77:
    memcpy(__dst, v22, v21);
    return 0;
  }
  if (a2 == 1668112752)
  {
    v12 = *((_QWORD *)this + 1);
    v13 = *(const void **)(v12 + 136);
    if (v13)
    {
      if (*a3 != *((_DWORD *)this + 36))
        return 561211770;
      ioPropertyDataSize[0] = 32;
      Property = AudioFormatGetProperty(0x7868636Cu, 0xCu, v13, ioPropertyDataSize, &outPropertyData);
      if ((_DWORD)Property)
        return Property;
      v11 = **(_DWORD **)(*((_QWORD *)this + 1) + 136);
LABEL_21:
      *(_DWORD *)__dst = v11;
      return Property;
    }
    if (*((_BYTE *)this + 177))
      return 1685348671;
    if (*(_DWORD *)(v12 + 112))
      Property = 1970170687;
    else
      Property = 1836020325;
    if (!*(_BYTE *)(v12 + 109))
      return Property;
    v21 = *a3;
    if ((_DWORD)v21 != *((_DWORD *)this + 36))
      return 561211770;
    v22 = (const void *)*((_QWORD *)this + 17);
    goto LABEL_77;
  }
  if (a2 == 1684434292)
  {
    v14 = *((_QWORD *)this + 1);
    v15 = *(const void **)(v14 + 136);
    if (v15)
    {
      v38 = 0;
      outPropertyData = 0u;
      v37 = 0u;
      v16 = AudioFormatGetProperty(0x78686173u, 0xCu, v15, a3, &outPropertyData);
      if (*a3 == 40)
      {
        Property = v16;
        if (!(_DWORD)v16)
        {
          v17 = v37;
          *(_OWORD *)__dst = outPropertyData;
          *((_OWORD *)__dst + 1) = v17;
          __dst[4] = v38;
        }
        return Property;
      }
      return 561211770;
    }
    if (!*((_BYTE *)this + 177))
    {
      if (*(_DWORD *)(v14 + 112))
        Property = 1970170687;
      else
        Property = 1836020325;
      if (!*(_BYTE *)(v14 + 105))
        return Property;
      if (*a3 != 40)
        return 561211770;
      Property = 0;
      v23 = *(_OWORD *)((char *)this + 24);
      v24 = *(_OWORD *)((char *)this + 40);
      __dst[4] = *((_QWORD *)this + 7);
      *(_OWORD *)__dst = v23;
      *((_OWORD *)__dst + 1) = v24;
      return Property;
    }
    return 1685348671;
  }
  if (a2 != 1718383476)
    return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
  v7 = *(unsigned int **)(*((_QWORD *)this + 1) + 136);
  if (!v7)
  {
    a2 = 1718383476;
    return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
  }
  Property = 1836020325;
  v9 = bswap32(*v7);
  if (v9 <= 1902207330)
  {
    if (v9 <= 1885430114)
    {
      if (v9 != 1633772320)
      {
        if (v9 != 1633772392)
        {
          v10 = 1633772400;
          goto LABEL_58;
        }
LABEL_65:
        outSize = 2;
        v25 = 1633772392;
        v26 = 96;
LABEL_66:
        if (v26 <= *a3)
        {
          *(_QWORD *)ioPropertyDataSize = 0;
          v27 = OpenCodecComponent(v25, (OpaqueAudioComponentInstance **)ioPropertyDataSize, 0x61646563u);
          if ((_DWORD)v27)
            return v27;
          outPropertyDataSize = 88;
          AudioFormatGetPropertyInfo(0x78686D63u, 0xCu, *(const void **)(*((_QWORD *)this + 1) + 136), &outPropertyDataSize);
          v28 = malloc_type_calloc(1uLL, outPropertyDataSize, 0x4F8856E0uLL);
          AudioFormatGetProperty(0x78686D63u, 0xCu, *(const void **)(*((_QWORD *)this + 1) + 136), &outPropertyDataSize, v28);
          outWritable = 0;
          PropertyInfo = AudioCodecGetPropertyInfo(*(AudioCodec *)ioPropertyDataSize, 0x6163666Cu, &outSize, &outWritable);
          if ((_DWORD)PropertyInfo)
          {
            Property = PropertyInfo;
            AudioComponentInstanceDispose(*(AudioComponentInstance *)ioPropertyDataSize);
          }
          else
          {
            std::vector<unsigned char>::vector(&outPropertyData, outSize);
            v30 = (_QWORD *)outPropertyData;
            *(_DWORD *)outPropertyData = outPropertyDataSize;
            v30[1] = v28;
            Property = AudioCodecGetProperty(*(AudioCodec *)ioPropertyDataSize, 0x6163666Cu, &outSize, v30);
            if (!(_DWORD)Property)
            {
              v31 = outSize;
              *a3 = outSize;
              memcpy(__dst, (const void *)outPropertyData, v31);
            }
            AudioComponentInstanceDispose(*(AudioComponentInstance *)ioPropertyDataSize);
            if ((_QWORD)outPropertyData)
            {
              *((_QWORD *)&outPropertyData + 1) = outPropertyData;
              operator delete((void *)outPropertyData);
            }
          }
          return Property;
        }
        return 561211770;
      }
      goto LABEL_63;
    }
    if (v9 == 1885430115)
      goto LABEL_63;
    if (v9 == 1885430632)
      goto LABEL_65;
    v10 = 1885430640;
LABEL_58:
    if (v9 != v10)
      return Property;
    goto LABEL_64;
  }
  if (v9 <= 2053202274)
  {
    if (v9 == 1902207331)
      goto LABEL_63;
    if (v9 == 1902207848)
      goto LABEL_65;
    v10 = 1902207856;
    goto LABEL_58;
  }
  switch(v9)
  {
    case 2053202800:
LABEL_64:
      outSize = 3;
      v25 = 1633772400;
      v26 = 144;
      goto LABEL_66;
    case 2053202792:
      goto LABEL_65;
    case 2053202275:
LABEL_63:
      v25 = 1633772320;
      outSize = 1;
      v26 = 48;
      goto LABEL_66;
  }
  return Property;
}

void sub_18EF89D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ADTSAudioStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v18;
  int v19;
  int v20;
  int v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v28;
  unsigned int v29;
  char *v30;
  int v31;
  char *v32;
  size_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v39;
  size_t v40;
  uint64_t v41;
  const unsigned __int8 *v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v54;
  int v55;
  uint64_t v56;
  const unsigned __int8 *v58;
  unsigned __int8 *v59;
  OSStatus Property;
  int v61;
  int v62;
  size_t v63;
  void *v64;
  uint64_t v65;
  void (*v66)(_QWORD, _QWORD, uint64_t, uint64_t *);
  void (*v67)(_QWORD, _QWORD, uint64_t, uint64_t *);
  void (*v68)(_QWORD, _QWORD, uint64_t, uint64_t *);
  void (*v69)(_QWORD, _QWORD, uint64_t, uint64_t *);
  void (*v70)(_QWORD, _QWORD, uint64_t, uint64_t *);
  void (*v71)(_QWORD, _QWORD, uint64_t, uint64_t *);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  int v78;
  int v79;
  int v80;
  _QWORD *v81;
  OSStatus v82;
  void *__dst[3];
  Boolean outWritable;
  UInt32 ioPropertyDataSize;
  uint64_t outPropertyData;
  const unsigned __int8 *v87;
  size_t size;
  uint64_t v89;
  OpaqueAudioComponentInstance *v90;

  v4 = *(_DWORD *)(a1 + 236);
  if (v4 <= 77)
  {
    if (v4 == -1)
      return 0;
    if (!v4)
      goto LABEL_10;
    goto LABEL_7;
  }
  if (v4 == 95)
  {
    v6 = *(_QWORD *)(a1 + 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 116);
    goto LABEL_50;
  }
  if (v4 != 78)
  {
LABEL_7:
    v5 = 0;
    goto LABEL_93;
  }
  while (1)
  {
LABEL_10:
    v8 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(v8 + 88);
    v9 = *(_QWORD *)(v8 + 96);
    v11 = v10 + *(unsigned int *)(v8 + 80);
    v12 = v9 < v10 || v11 <= v9;
    if (v12 || (_DWORD)v11 == (_DWORD)v9)
    {
      v5 = 0;
      v55 = 78;
      goto LABEL_94;
    }
    v13 = 0;
    *(_BYTE *)(a1 + 425) = 0;
    *(_OWORD *)(a1 + 428) = 0u;
    *(_OWORD *)(a1 + 444) = 0u;
    *(_OWORD *)(a1 + 460) = 0u;
    *(_OWORD *)(a1 + 472) = 0u;
    v14 = *(_QWORD *)(v8 + 88);
    v15 = *(_QWORD *)(v8 + 96);
    v16 = v14 + *(unsigned int *)(v8 + 80);
    v18 = v15 < v14 || v16 <= v15;
    v19 = v16 - v15;
    if (v18)
      v20 = 0;
    else
      v20 = v19;
    if (!v18 && v19)
      v13 = *(_QWORD *)(v8 + 72) + (v15 - v14);
    v21 = ADTSAudioStream::ScanForSyncWord(a1, v20, v13, (_DWORD *)(a1 + 428), a1 + 432, 1, 0, &outPropertyData);
    *(_BYTE *)(a1 + 425) = v21;
    v22 = *(unsigned __int16 *)(a1 + 476);
    *(_DWORD *)(a1 + 256) = v22;
    v6 = *(_QWORD *)(a1 + 8);
    v23 = *(unsigned int *)(v6 + 80);
    v25 = *(_QWORD *)(v6 + 88);
    v24 = *(_QWORD *)(v6 + 96);
    v26 = v25 + v23;
    v28 = v24 < v25 || v26 <= v24;
    v29 = v26 - v24;
    if (v28)
      v7 = 0;
    else
      v7 = v29;
    if (v7 < v22)
    {
      *(_QWORD *)(a1 + 272) = v24;
      v30 = *(char **)(v6 + 72);
      if (v30 == *(char **)(v6 + 128))
      {
        if (v29)
          v31 = v28;
        else
          v31 = 1;
        if (v31)
          v32 = 0;
        else
          v32 = &v30[(v24 - v25)];
        memmove(v30, v32, v7);
        v33 = *(unsigned __int16 *)(a1 + 476);
        v6 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v6 + 120) < v33)
        {
          *(_DWORD *)(v6 + 120) = v33;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v33);
          v6 = *(_QWORD *)(a1 + 8);
        }
        *(_DWORD *)(v6 + 116) = v7;
        *(_QWORD *)(v6 + 96) = *(_QWORD *)(v6 + 88) + *(unsigned int *)(v6 + 80);
      }
      else
      {
        if (*(_DWORD *)(v6 + 120) < v22)
        {
          *(_DWORD *)(v6 + 120) = v22;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v22);
          v6 = *(_QWORD *)(a1 + 8);
        }
        LODWORD(v7) = 0;
        *(_DWORD *)(v6 + 116) = 0;
      }
LABEL_50:
      v34 = *(_DWORD *)(a1 + 256) - v7;
      v35 = *(_QWORD *)(v6 + 88);
      v36 = *(_QWORD *)(v6 + 96);
      v37 = v35 + *(unsigned int *)(v6 + 80);
      if (v37 <= v36 || v36 < v35)
        v39 = 0;
      else
        v39 = v37 - v36;
      if (v34 <= v39)
        v34 = v39;
      LODWORD(outPropertyData) = v34;
      v40 = v34 + v7;
      if (*(_DWORD *)(v6 + 120) < v40)
      {
        *(_DWORD *)(v6 + 120) = v40;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v40);
        v6 = *(_QWORD *)(a1 + 8);
      }
      StreamBuffer::Copy((_QWORD *)(v6 + 72), (unsigned int *)&outPropertyData, (unsigned __int8 *)(*(_QWORD *)(v6 + 128) + *(unsigned int *)(v6 + 116)));
      v6 = *(_QWORD *)(a1 + 8);
      LODWORD(v23) = *(_DWORD *)(v6 + 116) + outPropertyData;
      *(_DWORD *)(v6 + 116) = v23;
      if (v23 < *(_DWORD *)(a1 + 256))
      {
        v5 = 0;
        v55 = 95;
        goto LABEL_94;
      }
      v24 = *(_QWORD *)(a1 + 272);
      v41 = *(_QWORD *)(v6 + 128);
      *(_QWORD *)(v6 + 88) = v24;
      *(_QWORD *)(v6 + 96) = v24;
      *(_QWORD *)(v6 + 72) = v41;
      *(_DWORD *)(v6 + 80) = v23;
      v21 = *(unsigned __int8 *)(a1 + 425);
      v25 = v24;
    }
    if (v21)
      break;
    *(_QWORD *)(v6 + 96) = v25 + v23;
  }
  v42 = 0;
  v43 = v25 + v23;
  v44 = v24 < v25 || v43 <= v24;
  v45 = v44;
  v46 = v43 - v24;
  if (!v44 && v46)
    v42 = (const unsigned __int8 *)(*(_QWORD *)(v6 + 72) + (v24 - v25));
  outPropertyData = 0;
  LOWORD(v87) = 0;
  HIDWORD(v87) = 0;
  if (v45)
    v47 = 0;
  else
    v47 = v46;
  if (!ADTSHeader::Deserialize((ADTSHeader *)&outPropertyData, v42, v47))
  {
    if ((outPropertyData & 0x1000) != 0)
      v48 = 7;
    else
      v48 = 9;
    *(_DWORD *)(a1 + 352) = v48;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a1 + 432);
  v49 = *(_QWORD *)(a1 + 8);
  v50 = *(_QWORD *)(v49 + 96) + *(unsigned int *)(a1 + 428);
  *(_QWORD *)(a1 + 104) = v50;
  *(_QWORD *)(v49 + 96) = v50;
  *(_DWORD *)(a1 + 128) = 0;
  v51 = *(_QWORD *)(v49 + 88);
  v52 = v51 + *(unsigned int *)(v49 + 80);
  if (v52 <= v50 || v50 < v51)
    v54 = 0;
  else
    v54 = v52 - v50;
  if (v54 < *(unsigned __int16 *)(a1 + 476))
  {
    v5 = 2003334207;
    goto LABEL_93;
  }
  v90 = 0;
  v56 = OpenCodecComponent(0x61616320u, &v90, 0x61646563u);
  if ((_DWORD)v56)
  {
    v5 = v56;
    goto LABEL_93;
  }
  ioPropertyDataSize = 32;
  v58 = &v42[*(unsigned int *)(a1 + 428)];
  __dst[0] = 0;
  if (v58[2] > 0x3Fu)
  {
    v59 = 0;
  }
  else
  {
    CADeprecated::CAAutoFree<unsigned char>::allocBytes(__dst, *(unsigned __int16 *)(a1 + 476), 0);
    v59 = (unsigned __int8 *)__dst[0];
    memcpy(__dst[0], &v42[*(unsigned int *)(a1 + 428)], *(unsigned __int16 *)(a1 + 476));
    v59[2] |= 0x40u;
    v58 = v59;
  }
  LODWORD(outPropertyData) = *(unsigned __int16 *)(a1 + 476);
  v87 = v58;
  LODWORD(size) = 0;
  v89 = 0;
  Property = AudioCodecGetProperty(v90, 0x6D327364u, &ioPropertyDataSize, &outPropertyData);
  if (Property)
  {
    AudioComponentInstanceDispose(v90);
    v61 = 15;
  }
  else
  {
    v61 = 0;
  }
  if (v59)
    free(v59);
  if (Property)
  {
    v62 = 0;
    goto LABEL_106;
  }
  v63 = size;
  if ((_DWORD)size)
  {
    *(_DWORD *)(a1 + 128) = size;
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 120), v63, 0);
    v89 = *(_QWORD *)(a1 + 120);
    if (AudioCodecGetProperty(v90, 0x6D327364u, &ioPropertyDataSize, &outPropertyData))
    {
      *(_DWORD *)(a1 + 128) = 0;
      v64 = *(void **)(a1 + 120);
      if (v64)
      {
        free(v64);
        *(_QWORD *)(a1 + 120) = 0;
      }
      v62 = 0;
LABEL_113:
      v65 = *(_QWORD *)(a1 + 8);
      LODWORD(outPropertyData) = 1;
      if (!*(_BYTE *)(v65 + 104))
      {
        *(_BYTE *)(v65 + 104) = 1;
        v66 = *(void (**)(_QWORD, _QWORD, uint64_t, uint64_t *))(v65 + 24);
        if (v66)
        {
          v66(*(_QWORD *)(v65 + 40), *(unsigned int *)(v65 + 8), 1717988724, &outPropertyData);
          v65 = *(_QWORD *)(a1 + 8);
        }
      }
      if (*(_DWORD *)(a1 + 128))
      {
        LODWORD(outPropertyData) = 1;
        *(_BYTE *)(v65 + 108) = 1;
        v67 = *(void (**)(_QWORD, _QWORD, uint64_t, uint64_t *))(v65 + 24);
        if (v67)
        {
          v67(*(_QWORD *)(v65 + 40), *(unsigned int *)(v65 + 8), 1835493731, &outPropertyData);
          v65 = *(_QWORD *)(a1 + 8);
        }
      }
      if (v62)
      {
        LODWORD(outPropertyData) = 1;
        *(_BYTE *)(v65 + 108) = 1;
        v68 = *(void (**)(_QWORD, _QWORD, uint64_t, uint64_t *))(v65 + 24);
        if (v68)
        {
          v68(*(_QWORD *)(v65 + 40), *(unsigned int *)(v65 + 8), 1718383476, &outPropertyData);
          v65 = *(_QWORD *)(a1 + 8);
        }
      }
      LODWORD(outPropertyData) = 1;
      if (!*(_BYTE *)(v65 + 105))
      {
        *(_BYTE *)(v65 + 105) = 1;
        v69 = *(void (**)(_QWORD, _QWORD, uint64_t, uint64_t *))(v65 + 24);
        if (v69)
        {
          v69(*(_QWORD *)(v65 + 40), *(unsigned int *)(v65 + 8), 1684434292, &outPropertyData);
          v65 = *(_QWORD *)(a1 + 8);
        }
      }
      LODWORD(outPropertyData) = 1;
      v70 = *(void (**)(_QWORD, _QWORD, uint64_t, uint64_t *))(v65 + 24);
      if (v70)
      {
        v70(*(_QWORD *)(v65 + 40), *(unsigned int *)(v65 + 8), 1685022310, &outPropertyData);
        v65 = *(_QWORD *)(a1 + 8);
      }
      LODWORD(outPropertyData) = 1;
      if (!*(_DWORD *)(v65 + 112))
      {
        *(_DWORD *)(v65 + 112) = 1;
        v71 = *(void (**)(_QWORD, _QWORD, uint64_t, uint64_t *))(v65 + 24);
        if (v71)
          v71(*(_QWORD *)(v65 + 40), *(unsigned int *)(v65 + 8), 1919247481, &outPropertyData);
      }
      v72 = 0;
      *(_QWORD *)a2 = a1;
      *(_OWORD *)(a2 + 8) = xmmword_18F116F70;
      v73 = *(_QWORD *)(a1 + 8);
      v74 = *(_QWORD *)(v73 + 88);
      v75 = *(_QWORD *)(v73 + 96);
      v76 = v74 + *(unsigned int *)(v73 + 80);
      v77 = v75 < v74 || v76 <= v75;
      v78 = v77;
      v79 = v76 - v75;
      if (!v77 && v79)
        v72 = *(_QWORD *)(v73 + 72) + (v75 - v74);
      v5 = 0;
      *(_QWORD *)(a2 + 32) = v72;
      if (v78)
        v80 = 0;
      else
        v80 = v79;
      *(_DWORD *)(a2 + 24) = v80;
      return v5;
    }
    outWritable = 0;
    v62 = 0;
    if (AudioCodecGetPropertyInfo(v90, 0x6163666Cu, &ioPropertyDataSize, &outWritable) || ioPropertyDataSize < 0x30)
      goto LABEL_153;
    std::vector<unsigned char>::vector(__dst, ioPropertyDataSize);
    v81 = __dst[0];
    *(_DWORD *)__dst[0] = *(_DWORD *)(a1 + 128);
    v81[1] = *(_QWORD *)(a1 + 120);
    v82 = AudioCodecGetProperty(v90, 0x6163666Cu, &ioPropertyDataSize, v81);
    if (v82)
    {
      AudioComponentInstanceDispose(v90);
      v62 = 0;
      v61 = 15;
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, void *))(*(_QWORD *)a1 + 64))(a1, ioPropertyDataSize, __dst[0]);
      v61 = 0;
      v62 = 1;
    }
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      operator delete(__dst[0]);
    }
    if (!v82)
    {
LABEL_153:
      AudioComponentInstanceDispose(v90);
      if ((_DWORD)size)
      {
        v61 = 0;
        *(_DWORD *)(a1 + 128) = size;
      }
      else
      {
        *(_DWORD *)(a1 + 236) = -1;
        v61 = 1;
      }
    }
LABEL_106:
    if (v61 == 1)
      return 2003334207;
    goto LABEL_113;
  }
  v5 = 2003334207;
  AudioComponentInstanceDispose(v90);
LABEL_93:
  v55 = -1;
LABEL_94:
  *(_DWORD *)(a1 + 236) = v55;
  return v5;
}

void sub_18EF8A528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ADTSAudioStream::GeneratePackets(uint64_t a1)
{
  int v2;
  size_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v19;
  unsigned int v20;
  size_t v21;
  uint64_t v22;
  const void *v23;
  size_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v30;
  size_t v31;
  uint64_t v32;
  const void *v33;
  _BOOL4 v36;
  size_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  SInt64 v43;
  AudioStreamPacketDescription *v44;
  UInt32 v45;
  unsigned int v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v52;
  unsigned int v53;
  char *v54;
  int v55;
  char *v56;
  size_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v63;
  size_t v64;
  uint64_t v65;
  const void *v66;
  _WORD *v67;
  uint64_t v70;
  uint64_t v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  void (*v79)(_QWORD, _QWORD, uint64_t, unsigned int *);
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  BOOL v88;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  int v100;
  const void *v101;
  UInt32 v102;
  int v103;
  int v104;
  int v105;
  char v106;
  int v107;
  int v108;
  UInt32 v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  int v121;
  SInt64 v122;
  AudioStreamPacketDescription *v123;
  UInt32 v124;
  unsigned __int8 *v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL4 v129;
  unsigned int v130;
  size_t v131;
  _BOOL4 v132;
  int v133;
  BOOL v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  BOOL v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  BOOL v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int v150[11];
  size_t size;

  v2 = *(_DWORD *)(a1 + 236);
  if (v2 <= 282)
  {
    if (v2 > 275)
    {
      if (v2 == 276)
        goto LABEL_140;
      if (v2 == 280)
        goto LABEL_22;
    }
    else
    {
      if (v2 == -1)
        return 0;
      if (!v2)
        goto LABEL_20;
    }
    goto LABEL_16;
  }
  if (v2 <= 313)
  {
    if (v2 == 283)
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(_DWORD *)(v12 + 116);
      goto LABEL_41;
    }
    if (v2 == 300)
    {
      v5 = *(_DWORD *)(a1 + 256);
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_68;
    }
    goto LABEL_16;
  }
  if (v2 == 314)
  {
    v10 = *(_QWORD *)(a1 + 8);
    LODWORD(v11) = *(_DWORD *)(v10 + 116);
    goto LABEL_95;
  }
  if (v2 == 328)
    goto LABEL_249;
  if (v2 != 419)
  {
LABEL_16:
    result = 0;
    v9 = -1;
    goto LABEL_262;
  }
  LODWORD(v3) = *(_DWORD *)(a1 + 256);
  v4 = *(unsigned __int8 **)(a1 + 264);
LABEL_198:
  v150[0] = v3;
  StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), v150, v4);
  v119 = v150[0];
  v120 = *(_DWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 264) += v150[0];
  v121 = v120 - v119;
  *(_DWORD *)(a1 + 256) = v121;
  if (v121)
  {
    result = 0;
    v9 = 419;
    goto LABEL_262;
  }
  if (!*(_DWORD *)(a1 + 200))
  {
    *(_DWORD *)(a1 + 200) = 1;
    CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), 1);
  }
  v122 = *(unsigned int *)(a1 + 352);
  v123 = *(AudioStreamPacketDescription **)(a1 + 192);
  v123->mStartOffset = v122;
  v124 = *(_DWORD *)(a1 + 340);
  v123->mVariableFramesInPacket = 0;
  v123->mDataByteSize = v124 - v122;
  AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v124, 1u, *(const void **)(a1 + 288), v123, 1);
  ++*(_QWORD *)(a1 + 184);
LABEL_20:
  while (1)
  {
    v14 = *(_DWORD *)(a1 + 400);
    if (v14)
      break;
LABEL_22:
    v12 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(v12 + 88);
    v15 = *(_QWORD *)(v12 + 96);
    v17 = v16 + *(unsigned int *)(v12 + 80);
    v13 = v17 - v15;
    v19 = v15 < v16 || v17 <= v15 || (_DWORD)v17 == (_DWORD)v15;
    if (v19)
    {
      result = 0;
      v9 = 280;
      goto LABEL_262;
    }
    if (*(_BYTE *)(a1 + 356))
    {
      v20 = *(_DWORD *)(a1 + 360);
      v21 = *(_DWORD *)(a1 + 352) - v20;
      *(_DWORD *)(a1 + 256) = v21;
      if (v21 > v13)
      {
        *(_QWORD *)(a1 + 272) = v15;
        v22 = *(_QWORD *)(v12 + 72);
        if (v22 == *(_QWORD *)(v12 + 128))
        {
          if ((_DWORD)v17 == (_DWORD)v15)
            v23 = 0;
          else
            v23 = (const void *)(v22 + (v15 - v16));
          memmove(*(void **)(v12 + 72), v23, (v17 - v15));
          v24 = (*(_DWORD *)(a1 + 352) - *(_DWORD *)(a1 + 360));
          v12 = *(_QWORD *)(a1 + 8);
          if (*(_DWORD *)(v12 + 120) < v24)
          {
            *(_DWORD *)(v12 + 120) = v24;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v24);
            v12 = *(_QWORD *)(a1 + 8);
          }
          *(_DWORD *)(v12 + 116) = v13;
          *(_QWORD *)(v12 + 96) = *(_QWORD *)(v12 + 88) + *(unsigned int *)(v12 + 80);
        }
        else
        {
          if (*(_DWORD *)(v12 + 120) < v21)
          {
            *(_DWORD *)(v12 + 120) = v21;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v21);
            v12 = *(_QWORD *)(a1 + 8);
          }
          v13 = 0;
          *(_DWORD *)(v12 + 116) = 0;
        }
LABEL_41:
        v25 = *(_DWORD *)(a1 + 256) - v13;
        v26 = *(_QWORD *)(v12 + 88);
        v27 = *(_QWORD *)(v12 + 96);
        v28 = v26 + *(unsigned int *)(v12 + 80);
        if (v28 <= v27 || v27 < v26)
          v30 = 0;
        else
          v30 = v28 - v27;
        if (v25 <= v30)
          v25 = v30;
        v150[0] = v25;
        v31 = v25 + v13;
        if (*(_DWORD *)(v12 + 120) < v31)
        {
          *(_DWORD *)(v12 + 120) = v31;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v31);
          v12 = *(_QWORD *)(a1 + 8);
        }
        StreamBuffer::Copy((_QWORD *)(v12 + 72), v150, (unsigned __int8 *)(*(_QWORD *)(v12 + 128) + *(unsigned int *)(v12 + 116)));
        v12 = *(_QWORD *)(a1 + 8);
        v13 = *(_DWORD *)(v12 + 116) + v150[0];
        *(_DWORD *)(v12 + 116) = v13;
        if (v13 < *(_DWORD *)(a1 + 256))
        {
          result = 0;
          v9 = 283;
          goto LABEL_262;
        }
        v15 = *(_QWORD *)(a1 + 272);
        v32 = *(_QWORD *)(v12 + 128);
        *(_QWORD *)(v12 + 88) = v15;
        *(_QWORD *)(v12 + 96) = v15;
        *(_QWORD *)(v12 + 72) = v32;
        *(_DWORD *)(v12 + 80) = v13;
        v20 = *(_DWORD *)(a1 + 360);
        v17 = v15 + v13;
        v16 = v15;
      }
      v33 = 0;
      if (v15 >= v16 && v15 < v17 && v13 != 0)
        v33 = (const void *)(*(_QWORD *)(v12 + 72) + (v15 - v16));
      memcpy((void *)(a1 + 364 + v20), v33, *(_DWORD *)(a1 + 352) - v20);
      if (*(unsigned __int8 *)(a1 + 364) == 255 && *(unsigned __int8 *)(a1 + 365) >= 0xF0u)
      {
        v36 = ADTSAudioStream::ParseADTSPacket(a1, *(_DWORD *)(a1 + 352), a1 + 364, (uint64_t)v150, 0);
        *(_BYTE *)(a1 + 356) = v36;
        v37 = (unsigned __int16)size;
        v38 = *(_DWORD *)(a1 + 352);
        if (v38 > (unsigned __int16)size)
          return 1885563711;
        *(_DWORD *)(a1 + 340) = (unsigned __int16)size;
        if (v36)
        {
          if (*(_DWORD *)(a1 + 284) < v37)
          {
            *(_DWORD *)(a1 + 284) = v37;
            CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v37, 0);
            v38 = *(_DWORD *)(a1 + 352);
          }
          memcpy(*(void **)(a1 + 288), (const void *)(a1 + 364), v38);
          v6 = *(_QWORD *)(a1 + 8);
          v39 = *(unsigned int *)(a1 + 352);
          *(_QWORD *)(v6 + 96) += (v39 - *(_DWORD *)(a1 + 360));
          v5 = *(_DWORD *)(a1 + 340) - v39;
          *(_DWORD *)(a1 + 256) = v5;
          v7 = (unsigned __int8 *)(*(_QWORD *)(a1 + 288) + v39);
          *(_QWORD *)(a1 + 264) = v7;
LABEL_68:
          v150[0] = v5;
          StreamBuffer::Copy((_QWORD *)(v6 + 72), v150, v7);
          v40 = v150[0];
          v41 = *(_DWORD *)(a1 + 256);
          *(_QWORD *)(a1 + 264) += v150[0];
          v42 = v41 - v40;
          *(_DWORD *)(a1 + 256) = v42;
          if (v42)
          {
            result = 0;
            v9 = 300;
            goto LABEL_262;
          }
          v43 = *(unsigned int *)(a1 + 352);
          v44 = *(AudioStreamPacketDescription **)(a1 + 192);
          v44->mStartOffset = v43;
          v45 = *(_DWORD *)(a1 + 340);
          v44->mVariableFramesInPacket = 0;
          v44->mDataByteSize = v45 - v43;
          AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v45, 1u, *(const void **)(a1 + 288), v44, 1);
          ++*(_QWORD *)(a1 + 184);
        }
      }
      *(_DWORD *)(a1 + 360) = 0;
      *(_BYTE *)(a1 + 356) = 0;
    }
    if (!*(_BYTE *)(a1 + 373))
      goto LABEL_157;
    v46 = *(_DWORD *)(a1 + 376);
    v47 = 10 - v46;
    *(_DWORD *)(a1 + 256) = v47;
    v10 = *(_QWORD *)(a1 + 8);
    v49 = *(_QWORD *)(v10 + 88);
    v48 = *(_QWORD *)(v10 + 96);
    v50 = v49 + *(unsigned int *)(v10 + 80);
    v52 = v48 < v49 || v50 <= v48;
    v53 = v50 - v48;
    if (v52)
      v11 = 0;
    else
      v11 = v53;
    if (v11 < v47)
    {
      *(_QWORD *)(a1 + 272) = v48;
      v54 = *(char **)(v10 + 72);
      if (v54 == *(char **)(v10 + 128))
      {
        if (v53)
          v55 = v52;
        else
          v55 = 1;
        if (v55)
          v56 = 0;
        else
          v56 = &v54[(v48 - v49)];
        memmove(v54, v56, v11);
        v57 = (10 - *(_DWORD *)(a1 + 376));
        v10 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v10 + 120) < v57)
        {
          *(_DWORD *)(v10 + 120) = v57;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v57);
          v10 = *(_QWORD *)(a1 + 8);
        }
        *(_DWORD *)(v10 + 116) = v11;
        *(_QWORD *)(v10 + 96) = *(_QWORD *)(v10 + 88) + *(unsigned int *)(v10 + 80);
      }
      else
      {
        if (*(_DWORD *)(v10 + 120) < v47)
        {
          *(_DWORD *)(v10 + 120) = v47;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v47);
          v10 = *(_QWORD *)(a1 + 8);
        }
        LODWORD(v11) = 0;
        *(_DWORD *)(v10 + 116) = 0;
      }
LABEL_95:
      v58 = *(_DWORD *)(a1 + 256) - v11;
      v59 = *(_QWORD *)(v10 + 88);
      v60 = *(_QWORD *)(v10 + 96);
      v61 = v59 + *(unsigned int *)(v10 + 80);
      if (v61 <= v60 || v60 < v59)
        v63 = 0;
      else
        v63 = v61 - v60;
      if (v58 <= v63)
        v58 = v63;
      v150[0] = v58;
      v64 = v58 + v11;
      if (*(_DWORD *)(v10 + 120) < v64)
      {
        *(_DWORD *)(v10 + 120) = v64;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v64);
        v10 = *(_QWORD *)(a1 + 8);
      }
      StreamBuffer::Copy((_QWORD *)(v10 + 72), v150, (unsigned __int8 *)(*(_QWORD *)(v10 + 128) + *(unsigned int *)(v10 + 116)));
      v10 = *(_QWORD *)(a1 + 8);
      v53 = *(_DWORD *)(v10 + 116) + v150[0];
      *(_DWORD *)(v10 + 116) = v53;
      if (v53 < *(_DWORD *)(a1 + 256))
      {
        result = 0;
        v9 = 314;
        goto LABEL_262;
      }
      v48 = *(_QWORD *)(a1 + 272);
      v65 = *(_QWORD *)(v10 + 128);
      *(_QWORD *)(v10 + 88) = v48;
      *(_QWORD *)(v10 + 96) = v48;
      *(_QWORD *)(v10 + 72) = v65;
      *(_DWORD *)(v10 + 80) = v53;
      v46 = *(_DWORD *)(a1 + 376);
      v50 = v48 + v53;
      v49 = v48;
    }
    v66 = 0;
    v67 = (_WORD *)(a1 + 380);
    if (v48 >= v49 && v48 < v50 && v53)
      v66 = (const void *)(*(_QWORD *)(v10 + 72) + (v48 - v49));
    memcpy((void *)(a1 + 380 + v46), v66, 10 - v46);
    if (*v67 == 17481 && *(_BYTE *)(a1 + 382) == 51)
    {
      v70 = *(int *)(a1 + 376);
      *(_DWORD *)(a1 + 404) = -(int)v70;
      v71 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(v71 + 88) - v70;
      if (*(char *)(a1 + 416) < 0)
      {
        v72 = 0;
        v73 = *(_QWORD *)(v71 + 48);
        v74 = *(_QWORD *)(v71 + 56) - v73;
        if (v74)
        {
          v75 = 0;
          v76 = v74 >> 2;
          v77 = 1;
          do
          {
            v19 = *(_DWORD *)(v73 + 4 * v75) == 1768174437;
            v72 = v19;
            v75 = v77++;
          }
          while (!v19 && v76 > v75);
        }
        *(_BYTE *)(a1 + 416) = v72;
        if (v72)
          goto LABEL_131;
      }
      else
      {
        if (!*(_BYTE *)(a1 + 416))
          goto LABEL_133;
LABEL_131:
        v150[0] = 0;
        v79 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v71 + 24);
        if (v79)
          v79(*(_QWORD *)(v71 + 40), *(unsigned int *)(v71 + 8), 1768174437, v150);
      }
LABEL_133:
      v80 = ID3Size(0xAu, (const unsigned __int8 *)(a1 + 380), (int *)(a1 + 396));
      *(_DWORD *)(a1 + 392) = v80;
      v81 = *(_DWORD *)(a1 + 376);
      v82 = v80 - v81;
      if (v80 > v81)
      {
        while (1)
        {
          *(_DWORD *)(a1 + 256) = v82;
          if (!v82)
            break;
LABEL_249:
          v139 = *(_QWORD *)(a1 + 8);
          v141 = *(_QWORD *)(v139 + 88);
          v140 = *(_QWORD *)(v139 + 96);
          v142 = v141 + *(unsigned int *)(v139 + 80);
          v143 = v140 < v141 || v142 <= v140;
          if (v143 || (v144 = v142 - v140, (_DWORD)v142 == (_DWORD)v140))
          {
            result = 0;
            v9 = 328;
            goto LABEL_262;
          }
          v145 = *(unsigned int *)(a1 + 256);
          v146 = v140 + v145;
          v147 = v145 >= v144;
          v148 = v145 - v144;
          if (v147)
            v146 = v142;
          if (v147)
            v82 = v148;
          else
            v82 = 0;
          *(_QWORD *)(v139 + 96) = v146;
        }
      }
      goto LABEL_156;
    }
    if (*v67 == 16724 && *(_BYTE *)(a1 + 382) == 71)
      goto LABEL_133;
LABEL_156:
    *(_DWORD *)(a1 + 376) = 0;
    *(_BYTE *)(a1 + 373) = 0;
LABEL_157:
    *(_DWORD *)(a1 + 348) = 0;
    v95 = *(_QWORD *)(a1 + 8);
    v96 = *(_QWORD *)(v95 + 88);
    v97 = *(_QWORD *)(v95 + 96);
    v98 = v96 + *(unsigned int *)(v95 + 80);
    v99 = v97 < v96 || v98 <= v97;
    v100 = v99;
    if (v99 || (_DWORD)v98 == (_DWORD)v97)
      v101 = 0;
    else
      v101 = (const void *)(*(_QWORD *)(v95 + 72) + (v97 - v96));
    v102 = 0;
    v103 = 0;
    if (v100)
      v104 = *(_DWORD *)(v95 + 80);
    else
      v104 = v97 - v96;
    if (v100)
      v105 = 0;
    else
      v105 = v98 - v97;
    v149 = 0;
    if (*(_BYTE *)(a1 + 332))
      v106 = 0;
    else
      v106 = 3;
    *(_BYTE *)(a1 + 344) = 0;
    *(_DWORD *)(a1 + 400) = 0;
    while (ADTSAudioStream::ScanForSyncWord(a1, v105, (uint64_t)v101, (_DWORD *)&v149 + 1, (uint64_t)v150, 0, v106, &v149))
    {
      v107 = *(_DWORD *)(a1 + 348);
      v102 = HIDWORD(v149);
      if (!v107)
        v103 = HIDWORD(v149);
      v108 = (unsigned __int16)size;
      if (v105 - HIDWORD(v149) >= (unsigned __int16)size)
      {
        *(_DWORD *)(a1 + 348) = v107 + 1;
        v109 = v102 + v108;
        v102 = v109;
      }
      else
      {
        *(_BYTE *)(a1 + 344) = 1;
        *(_DWORD *)(a1 + 336) = v102 + v104;
        *(_DWORD *)(a1 + 340) = v108;
        v109 = v102 + v108;
      }
      HIDWORD(v149) = v109;
      if (*(_BYTE *)(a1 + 332))
      {
        *(_BYTE *)(a1 + 332) = 0;
        v106 = 3;
      }
    }
    *(_DWORD *)(a1 + 400) = v149;
    v110 = *(_DWORD *)(a1 + 348);
    if (v110)
    {
      if (*(_DWORD *)(a1 + 200) < v110)
      {
        v111 = (1 << -__clz(v110 - 1));
        *(_DWORD *)(a1 + 200) = v111;
        CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), v111);
      }
      v112 = 0;
      HIDWORD(v149) = v103;
      while (ADTSAudioStream::ScanForSyncWord(a1, v105, (uint64_t)v101, (_DWORD *)&v149 + 1, (uint64_t)v150, 0, 1, &v149))
      {
        v113 = HIDWORD(v149);
        v114 = (unsigned __int16)size;
        if (v105 - HIDWORD(v149) >= (unsigned __int16)size)
        {
          v115 = *(_DWORD *)(a1 + 352);
          v116 = *(_QWORD *)(a1 + 192) + 16 * v112;
          *(_QWORD *)v116 = (v115 + HIDWORD(v149));
          *(_DWORD *)(v116 + 8) = 0;
          *(_DWORD *)(v116 + 12) = v114 - v115;
        }
        HIDWORD(v149) = v113 + v114;
        ++v112;
      }
      AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v102, *(_DWORD *)(a1 + 348), v101, *(AudioStreamPacketDescription **)(a1 + 192), 1);
      *(_QWORD *)(a1 + 184) += *(unsigned int *)(a1 + 348);
    }
    v117 = *(_QWORD *)(a1 + 8);
    v118 = *(_QWORD *)(v117 + 96) + v102;
    *(_QWORD *)(v117 + 96) = v118;
    if (*(_BYTE *)(a1 + 344))
    {
      v3 = *(unsigned int *)(a1 + 340);
      if (*(_DWORD *)(a1 + 284) < v3)
      {
        *(_DWORD *)(a1 + 284) = v3;
        CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v3, 0);
        LODWORD(v3) = *(_DWORD *)(a1 + 340);
      }
      *(_DWORD *)(a1 + 256) = v3;
      v4 = *(unsigned __int8 **)(a1 + 288);
      *(_QWORD *)(a1 + 264) = v4;
      goto LABEL_198;
    }
    v125 = 0;
    v126 = *(_QWORD *)(v117 + 88);
    v127 = v126 + *(unsigned int *)(v117 + 80);
    v129 = v118 < v126 || v127 <= v118;
    v130 = v127 - v118;
    if (v129)
      v131 = 0;
    else
      v131 = v130;
    if (!v129 && v130)
      v125 = (unsigned __int8 *)(*(_QWORD *)(v117 + 72) + (v118 - v126));
    if (!(_DWORD)v131)
      goto LABEL_220;
    if ((_DWORD)v131 == 1)
    {
      v132 = *v125 == 255;
      *(_BYTE *)(a1 + 356) = v132;
      v133 = *v125;
      v134 = v133 == 73 || v133 == 84;
      goto LABEL_229;
    }
    if (v131 <= *(_DWORD *)(a1 + 352) - 1)
    {
      v132 = 0;
      if (*v125 == 255)
        v132 = v125[1] > 0xEFu;
      *(_BYTE *)(a1 + 356) = v132;
    }
    else
    {
LABEL_220:
      v132 = 0;
      *(_BYTE *)(a1 + 356) = 0;
    }
    if ((_DWORD)v131 == 2)
    {
      v135 = *v125;
      v136 = 68;
      if (v135 != 73)
      {
        v137 = 0;
        if (v135 != 84)
          goto LABEL_232;
        v136 = 65;
      }
      v134 = v125[1] == v136;
      goto LABEL_229;
    }
    if ((v131 - 3) <= 6)
    {
      v138 = *v125;
      if (v138 != 84)
      {
        v137 = 0;
        if (v138 == 73)
        {
          if (v125[1] != 68 || (v137 = 1, v125[2] != 51))
            v137 = 0;
        }
LABEL_232:
        *(_BYTE *)(a1 + 373) = v137;
        if (!v132)
          goto LABEL_234;
LABEL_233:
        *(_DWORD *)(a1 + 360) = v131;
        bzero((void *)(a1 + 364), *(unsigned int *)(a1 + 352));
        memcpy((void *)(a1 + 364), v125, v131);
        v137 = *(unsigned __int8 *)(a1 + 373);
        goto LABEL_234;
      }
      v137 = 0;
      if (v125[1] != 65)
        goto LABEL_232;
      v134 = v125[2] == 71;
LABEL_229:
      v137 = v134;
      goto LABEL_232;
    }
    v137 = 0;
    *(_BYTE *)(a1 + 373) = 0;
    if (v132)
      goto LABEL_233;
LABEL_234:
    if (v137)
    {
      *(_DWORD *)(a1 + 376) = v131;
      *(_WORD *)(a1 + 388) = 0;
      *(_QWORD *)(a1 + 380) = 0;
      memcpy((void *)(a1 + 380), v125, v131);
    }
    *(_QWORD *)(v117 + 96) = *(_QWORD *)(v117 + 88) + *(unsigned int *)(v117 + 80);
  }
  *(_DWORD *)(a1 + 256) = v14;
LABEL_140:
  while (1)
  {
    v83 = *(_QWORD *)(a1 + 8);
    v85 = *(_QWORD *)(v83 + 88);
    v84 = *(_QWORD *)(v83 + 96);
    v86 = v85 + *(unsigned int *)(v83 + 80);
    v87 = v86 - v84;
    v88 = v84 < v85 || v86 <= v84;
    if (v88 || (_DWORD)v86 == (_DWORD)v84)
      break;
    v90 = *(unsigned int *)(a1 + 256);
    v91 = v84 + v90;
    v92 = v90 >= v87;
    v93 = v90 - v87;
    if (v92)
      v91 = v86;
    if (v92)
      v94 = v93;
    else
      v94 = 0;
    *(_QWORD *)(v83 + 96) = v91;
    *(_DWORD *)(a1 + 256) = v94;
    if (!v94)
    {
      *(_DWORD *)(a1 + 400) = 0;
      goto LABEL_22;
    }
  }
  result = 0;
  v9 = 276;
LABEL_262:
  *(_DWORD *)(a1 + 236) = v9;
  return result;
}

uint64_t ADTSAudioStream::HandleDiscontinuity(ADTSAudioStream *this)
{
  *((_DWORD *)this + 59) = 0;
  *((_BYTE *)this + 332) = 1;
  *((_BYTE *)this + 344) = 0;
  *((_BYTE *)this + 356) = 0;
  *((_BYTE *)this + 373) = 0;
  return 0;
}

BOOL ADTSAudioStream::ParseADTSPacket(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  char Bits;
  char v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int16 v16;
  int v17;
  int v18;
  int v19;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  if (a2 <= 6)
    return 0;
  v23 = v5;
  v24 = v6;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_DWORD *)(a4 + 8) = 1633772320;
  *(_DWORD *)(a4 + 20) = 1024;
  *(_QWORD *)&v21 = a3;
  *((_QWORD *)&v21 + 1) = 8 * a2;
  v22 = a3;
  if ((unsigned __int16)CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 0xCu) != 4095)
    return 0;
  *(_BYTE *)(a4 + 46) = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 1u);
  Bits = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 2u);
  *(_BYTE *)(a4 + 47) = Bits;
  if (Bits)
    return 0;
  v12 = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 1u);
  *(_BYTE *)(a4 + 48) = v12;
  v13 = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 2u);
  *(_BYTE *)(a4 + 49) = v13;
  v14 = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 4u);
  *(_BYTE *)(a4 + 51) = v14;
  *(double *)a4 = gAACSampleRates[v14];
  *(_BYTE *)(a4 + 50) = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 1u);
  v15 = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 3u);
  *(_BYTE *)(a4 + 53) = v15;
  *(_BYTE *)(a4 + 52) = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 2u);
  CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 2u);
  v16 = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 0xDu);
  *(_WORD *)(a4 + 44) = v16;
  if (v16 < 7u)
    return 0;
  CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 0xBu);
  if (CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 2u))
    return 0;
  v17 = v13;
  if (v15)
  {
    if (v15 == 7)
      v18 = 8;
    else
      v18 = v15;
    *(_DWORD *)(a4 + 28) = v18;
    *(_DWORD *)(a4 + 40) = gAACChannelConfigToLayoutTag[v15];
  }
  else if (a5)
  {
    if (!v12)
      CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 0x10u);
    CABitStreamReader::ReadBits((CABitStreamReader *)&v21, BYTE12(v22) & 7);
    v20[0] = v21;
    v20[1] = v22;
    ParseADTSChannelConfig((CABitStreamReader *)v20, (int *)(a4 + 28), (int *)(a4 + 40));
    v17 = *(unsigned __int8 *)(a4 + 49);
  }
  if (!v17)
  {
    v17 = 1;
    *(_BYTE *)(a4 + 49) = 1;
  }
  v19 = *(char *)(a1 + 417);
  if (v19 == -1)
  {
    *(_BYTE *)(a1 + 417) = *(_BYTE *)(a4 + 46);
    *(_WORD *)(a1 + 418) = *(_WORD *)(a4 + 47);
    *(_BYTE *)(a1 + 420) = v17;
    *(_DWORD *)(a1 + 421) = *(_DWORD *)(a4 + 50);
    return 1;
  }
  return v19 == *(unsigned __int8 *)(a4 + 46)
      && *(char *)(a1 + 418) == *(unsigned __int8 *)(a4 + 47)
      && *(char *)(a1 + 420) == v17
      && *(char *)(a1 + 419) == *(unsigned __int8 *)(a4 + 48)
      && *(char *)(a1 + 421) == *(unsigned __int8 *)(a4 + 50)
      && *(char *)(a1 + 422) == *(unsigned __int8 *)(a4 + 51)
      && *(char *)(a1 + 423) == *(unsigned __int8 *)(a4 + 52)
      && *(char *)(a1 + 424) == *(unsigned __int8 *)(a4 + 53);
}

uint64_t ADTSAudioStream::ScanForSyncWord(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5, int a6, char a7, _DWORD *a8)
{
  int v10;
  uint64_t result;
  unsigned __int8 *v16;
  BOOL v17;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  void (*v28)(_QWORD, _QWORD, uint64_t, int *);
  unsigned int v29;
  unsigned int v30;
  int v31;
  _DWORD *v33;
  int v34;
  int v35;

  v10 = *a4;
  *a8 = 0;
  if (v10 > a2 - *(_DWORD *)(a1 + 352))
  {
    result = 0;
    v10 = a2;
    goto LABEL_42;
  }
  v33 = a4;
  while (1)
  {
    v16 = (unsigned __int8 *)(a3 + v10);
    if (*v16 == 255 && v16[1] >= 0xF0u)
    {
      if (ADTSAudioStream::ParseADTSPacket(a1, a2 - v10, a3 + v10, a5, a6))
      {
        result = 1;
        goto LABEL_41;
      }
      goto LABEL_38;
    }
    if ((a7 & 1) != 0)
      break;
LABEL_38:
    v27 = v10++ < a2 - *(_DWORD *)(a1 + 352);
    if (!v27)
    {
LABEL_39:
      result = 0;
      goto LABEL_40;
    }
  }
  v17 = *(_WORD *)v16 == 17481 && v16[2] == 51;
  if (v17)
  {
    v19 = a2 - v10;
    if ((a2 - v10) < 0xA)
      goto LABEL_39;
    v20 = *(_QWORD *)(a1 + 8);
    v21 = (_DWORD)v16 - *(_QWORD *)(v20 + 72);
    *(_DWORD *)(a1 + 404) = v21;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(v20 + 88) + v21;
    if ((a7 & 2) != 0)
    {
      LODWORD(v22) = *(char *)(a1 + 416);
      if ((v22 & 0x80000000) != 0)
      {
        v23 = *(_QWORD *)(v20 + 48);
        v22 = *(_QWORD *)(v20 + 56) - v23;
        if (v22)
        {
          v24 = 0;
          v25 = v22 >> 2;
          v26 = 1;
          do
          {
            v17 = *(_DWORD *)(v23 + 4 * v24) == 1768174437;
            LODWORD(v22) = v17;
            v24 = v26++;
            v27 = !v17 && v25 > v24;
          }
          while (v27);
        }
        *(_BYTE *)(a1 + 416) = v22;
      }
      if ((_DWORD)v22)
      {
        v35 = 0;
        v28 = *(void (**)(_QWORD, _QWORD, uint64_t, int *))(v20 + 24);
        if (v28)
          v28(*(_QWORD *)(v20 + 40), *(unsigned int *)(v20 + 8), 1768174437, &v35);
      }
    }
  }
  else
  {
    if (*(_WORD *)v16 != 16724 || v16[2] != 71)
      goto LABEL_38;
    v19 = a2 - v10;
    if ((a2 - v10) < 0xA)
      goto LABEL_39;
  }
  v29 = ID3Size(0xAu, (const unsigned __int8 *)(a3 + v10), &v34);
  if (!v29)
  {
    v31 = 2;
    goto LABEL_37;
  }
  v30 = v29;
  if (v19 >= v29)
  {
    v31 = v29 - 1;
LABEL_37:
    v10 += v31;
    goto LABEL_38;
  }
  result = 0;
  *a8 = v10 - a2 + v30;
LABEL_40:
  v10 = a2;
LABEL_41:
  a4 = v33;
LABEL_42:
  *a4 = v10;
  return result;
}

uint64_t DSPGraph::Exception::what(DSPGraph::Exception *this)
{
  uint64_t result;

  result = (uint64_t)this + 72;
  if (*((char *)this + 95) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t DSPGraph::Exception::print(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  const char *v7;
  unsigned int v8;
  void **v9;
  uint64_t v10;
  void *p_p;
  uint64_t v12;
  const char *v13;
  const char *v14;
  const char *v15;
  void *__p;
  uint64_t v18;
  unsigned __int8 v19;

  v7 = DSPGraph::errstring((DSPGraph *)*(unsigned int *)(a1 + 8));
  DSPGraph::printi(a2, a4, "DSPGraph::Exception\n");
  v8 = a4 + 4;
  DSPGraph::printi(a2, v8, "status: %d", *(_DWORD *)(a1 + 8));
  if (*v7)
  {
    DSPGraph::strprintf((DSPGraph *)"'%s' ", &__p, v7);
    v9 = (v19 & 0x80u) == 0 ? &__p : (void **)__p;
    v10 = (v19 & 0x80u) == 0 ? v19 : v18;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v9, v10);
    if ((char)v19 < 0)
      operator delete(__p);
  }
  DSPGraph::print4cc(a2, *(_DWORD *)(a1 + 8));
  DSPGraph::strprintf((DSPGraph *)" %d\n", &__p, *(unsigned int *)(a1 + 8));
  if ((v19 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v19 & 0x80u) == 0)
    v12 = v19;
  else
    v12 = v18;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)p_p, v12);
  if ((char)v19 < 0)
    operator delete(__p);
  v13 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v13 = *(const char **)v13;
  DSPGraph::printi(a2, v8, "file: %s\n", v13);
  DSPGraph::printi(a2, v8, "lineno: %d\n", *(_DWORD *)(a1 + 40));
  v14 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v14 = *(const char **)v14;
  DSPGraph::printi(a2, v8, "function: %s\n", v14);
  v15 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    v15 = *(const char **)v15;
  return DSPGraph::printi(a2, v8, "description: %s\n", v15);
}

void sub_18EF8B88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Exception::print(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DSPGraph::Exception::print(a1, MEMORY[0x1E0DE4A60], a3, a3);
}

void _CAInitDefaultDeferredLog(void)
{
  if (gDefaultDeferredLogOnce != -1)
    dispatch_once(&gDefaultDeferredLogOnce, &__block_literal_global_4295);
}

void ___Z25_CAInitDefaultDeferredLogv_block_invoke()
{
  caulk::deferred_logger *v0;
  void *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  v0 = (caulk::deferred_logger *)CADefaultLog();
  caulk::deferred_logger::create_v(v0, v1);
  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)&gCADefaultDeferredLog, &v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

BOOL CAShouldEmitRateLimitedRTErrorLog(void)
{
  uint64_t v0;
  unsigned int v2;
  unsigned int v3;

  v0 = mach_absolute_time();
  if (v0 <= gLastRateLimitedRTLogHostTime + 24000000)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)&gMessageCount);
      v3 = v2 + 1;
    }
    while (__stlxr(v3, (unsigned int *)&gMessageCount));
    return v3 < 0x1A;
  }
  else
  {
    gMessageCount = 0;
    gLastRateLimitedRTLogHostTime = v0;
    return 1;
  }
}

void std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<unsigned int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

BOOL VBAP::find_duplicate_vertex(VBAP *this, const float *a2, const float *a3, const float *a4)
{
  uint64_t v8;
  float *v9;
  unint64_t v10;
  unsigned int v11;
  vDSP_Length v12;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](this);
  v9 = (float *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v10 < 2)
    return 0;
  v11 = 2;
  v12 = 1;
  do
  {
    vDSP_vsmul((const float *)this, 1, (const float *)this + v12, v9, 1, v12);
    vDSP_vsma(a2, 1, &a2[v12], v9, 1, v9, 1, v12);
    vDSP_vsma(a3, 1, &a3[v12], v9, 1, v9, 1, v12);
    HIDWORD(v15) = 0;
    vDSP_maxv(v9, 1, (float *)&v15 + 1, v12);
    result = *((float *)&v15 + 1) > 1.0;
    v12 = v11++;
  }
  while (*((float *)&v15 + 1) <= 1.0 && v12 < (unint64_t)a4);
  return result;
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_18EF8BC04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VBAP::delaunayTriangulation(size_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7;
  unint64_t v8;
  double v9;
  float64x2_t v10;
  double v11;
  double v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  unint64_t v16;
  float64_t *v17;
  double *v18;
  double *v19;
  uint64_t v20;
  float *v21;
  double *v22;
  double *v23;
  double *v24;
  float v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  std::vector<int> *v36;
  void *v37;
  uint64_t v38;
  size_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  double v56;
  double v57;
  double v58;
  double *v59;
  float64_t *v60;
  double v61;
  double v62;
  _QWORD *v64;
  float64_t v65;
  uint64_t v66;
  int one_delaunay3;
  int v68;
  float64_t v69;
  std::vector<int>::pointer begin;
  size_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  size_t v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  int v125;
  char *v126;
  uint64_t v127;
  unsigned int v128;
  unint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  int32x2_t v134;
  uint64_t v135;
  float64x2_t v136;
  char *v137;
  uint64_t v138;
  float64x2_t v139;
  int v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  unsigned int v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  int v150;
  size_t v151;
  size_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  uint64_t v182;
  float64x2_t v183;
  uint64_t v184;
  uint64_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  int32x2_t v190;
  uint64_t v191;
  int v192;
  int v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  void **v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  void *v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  size_t v208;
  _QWORD *v209;
  _QWORD *v210;
  unint64_t v211;
  int v212;
  int v213;
  unint64_t v214;
  char v215;
  float64x2_t v216;
  float64x2_t v217;
  uint64_t v218;
  uint64_t v219;
  float64x2_t *v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  uint64_t v229;
  unsigned int v230;
  unint64_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t *v234;
  unint64_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t *v238;
  unint64_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t *v242;
  unint64_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t *v246;
  uint64_t j;
  float64x2_t *v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  uint64_t k;
  float64x2_t *v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  unint64_t v257;
  unint64_t v258;
  float64x2_t v259;
  float64x2_t *v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t *v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  unint64_t v277;
  unint64_t v279;
  uint64_t v280;
  char *v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  char *v285;
  uint64_t v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  size_t v291;
  _QWORD *v292;
  _QWORD *v293;
  uint64_t v294;
  char *v295;
  uint64_t *v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  _QWORD *v304;
  uint64_t *v305;
  _QWORD *v306;
  uint64_t *v307;
  uint64_t *i;
  uint64_t v309;
  uint64_t v310;
  int subtriangle_containment;
  uint64_t v312;
  float64x2_t v313;
  int v314;
  size_t v315;
  int v316;
  uint64_t v317;
  float64x2_t v318;
  float64x2_t v319;
  int v320;
  _DWORD *v321;
  float64_t v322;
  float64_t v323;
  unint64_t v324;
  _DWORD *v325;
  _DWORD *v327;
  float64_t v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  BOOL v338;
  uint64_t v339;
  _DWORD *v340;
  uint64_t *v341;
  uint64_t v342;
  int32x2_t *v343;
  float64_t v344;
  uint64_t v345;
  int32x2_t *v346;
  int32x2_t *v347;
  int32x2_t *v348;
  int v349;
  uint64_t v350;
  _DWORD *v351;
  uint64_t *v352;
  uint64_t v353;
  int64x2_t v354;
  int64x2_t v355;
  int64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  uint64_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  int64x2_t v363;
  int64x2_t v364;
  int8x16_t v365;
  __int32 v366;
  float64x2_t *v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  int64x2_t v374;
  int64x2_t v375;
  int64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  int8x16_t v382;
  float64x2_t v383;
  double v384;
  int32x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  double v389;
  int32x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  double v394;
  int32x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  double v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  double v406;
  int32x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  double v414;
  int32x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  double v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  double v422;
  int32x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  BOOL v434;
  BOOL v435;
  int8x16_t v436;
  int8x16_t v437;
  unint64_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  _DWORD *v445;
  uint64_t *v446;
  uint64_t v447;
  int v449;
  float64x2_t v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t v453;
  float64_t v454;
  int v455;
  int v456;
  uint64_t v457;
  double *v458;
  double *v459;
  CDelaunayTriangles3D *v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  double v468;
  char *v469;
  float64x2_t v470;
  double v471;
  int64x2_t v472;
  size_t v473;
  float64x2_t v474;
  float64x2_t v475;
  char *v476;
  int64x2_t v477;
  unint64_t v478;
  double v479;
  uint64_t v480;
  double v481;
  int64x2_t v482;
  float64x2_t v484;
  unint64_t v485;
  double v486;
  float64x2_t v487;
  unint64_t v488;
  char *v489;
  uint64_t v490;
  double v491;
  double v492;
  uint64_t *v493;
  unint64_t v494;
  double v495;
  uint64_t __p;
  uint64_t __pa;
  char *__pb;
  float64x2_t __pc;
  int64x2_t __pd;
  CDelaunayTriangles3D *v501;
  int v502;
  CDelaunayTriangles3D *v503[2];
  double *v504[3];
  double *v505[3];
  CDelaunayTriangles3D *v506[3];
  _OWORD v507[6];
  float64x2_t v508[6];
  float64x2_t v509[6];
  float64x2_t v510[6];
  int32x2_t v511[2];
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t buf[3];
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  uint64_t v521;

  v521 = *MEMORY[0x1E0C80C00];
  v7 = (uint64_t)(a2[1] - *a2) >> 2;
  v8 = (int)(v7 / 3);
  std::vector<double>::vector(v506, v8);
  std::vector<double>::vector(v505, v8);
  std::vector<double>::vector(v504, v8);
  v473 = a1;
  v16 = v7 / 3;
  v17 = (float64_t *)v506[0];
  v18 = v505[0];
  v19 = v504[0];
  __p = (v7 / 3) - 1;
  if ((int)(v7 / 3) >= 1)
  {
    v20 = (v7 / 3);
    v21 = (float *)(*a2 + 8);
    v22 = (double *)v506[0];
    v23 = v505[0];
    v24 = v504[0];
    do
    {
      *v22++ = *(v21 - 2);
      *v23++ = *(v21 - 1);
      v25 = *v21;
      v21 += 3;
      v9 = v25;
      *v24++ = v25;
      --v20;
    }
    while (v20);
  }
  if (CDelaunayTriangles3D::check_coplanar(v17, v18, v19, (const double *)(v7 / 3), v9, v10, v11, v12, v13, v14, v15))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_8:
      v32 = 4294967246;
      goto LABEL_359;
    }
    LODWORD(buf[0].f64[0]) = 136315906;
    *(_QWORD *)((char *)buf[0].f64 + 4) = "VBAP.cpp";
    WORD2(buf[0].f64[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].f64[1] + 6) = 779;
    WORD1(buf[1].f64[0]) = 2080;
    *(_QWORD *)((char *)buf[1].f64 + 4) = "delaunayTriangulation";
    WORD2(buf[1].f64[1]) = 1024;
    *(_DWORD *)((char *)&buf[1].f64[1] + 6) = 779;
    v31 = MEMORY[0x1E0C81028];
LABEL_7:
    _os_log_impl(&dword_18EE07000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: Delaunay Triangulation Error: Convex hull could not be created. Check for overlapping speakers. ", (uint8_t *)buf, 0x22u);
    goto LABEL_8;
  }
  v33 = *(_QWORD *)(a3 + 8);
  v34 = (v33 - *(_QWORD *)a3) >> 2;
  v35 = 2 * v16 - 4;
  v478 = v34 / 3;
  v480 = v35;
  if (v34 / 3 == v35)
  {
    if (v473 + 224 != a3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v473 + 224), *(char **)a3, v33, v34);
    goto LABEL_70;
  }
  v36 = (std::vector<int> *)(v473 + 224);
  std::vector<unsigned int>::resize((std::vector<int> *)(v473 + 224), (3 * v35));
  v37 = *(void **)(v473 + 224);
  v38 = *(_QWORD *)(v473 + 232) - (_QWORD)v37;
  if (v38 >= 1)
    bzero(v37, 4 * (((unint64_t)v38 >> 2) - ((unint64_t)v38 > 3)) + 4);
  v501 = (CDelaunayTriangles3D *)(v473 + 176);
  std::__list_imp<ID3FrameInfo>::clear((_QWORD *)(v473 + 176));
  v39 = v473 + 200;
  v40 = (v7 / 3);
  v41 = *(_QWORD *)(v473 + 216);
  if (v41 <= v16)
  {
    if (v41 < v40)
    {
      v44 = operator new(0x18uLL);
      v45 = v44;
      *v44 = 0;
      v44[1] = 0;
      *((_DWORD *)v44 + 4) = 0;
      if (v40 + ~v41)
      {
        v488 = v40 - v41;
        v46 = v41 - v40 + 1;
        v47 = v44;
        do
        {
          v44 = operator new(0x18uLL);
          *v44 = v47;
          v44[1] = 0;
          v47[1] = v44;
          v47 = v44;
          *((_DWORD *)v44 + 4) = 0;
          _CF = __CFADD__(v46++, 1);
        }
        while (!_CF);
        v48 = v488;
      }
      else
      {
        v48 = 1;
      }
      v44[1] = v39;
      v51 = *(_QWORD *)(v473 + 200);
      *v45 = v51;
      *(_QWORD *)(v51 + 8) = v45;
      *(_QWORD *)(v473 + 200) = v44;
      *(_QWORD *)(v473 + 216) = v48 + v41;
    }
  }
  else
  {
    if (v40 <= v41 >> 1)
    {
      v43 = *(uint64_t **)(v473 + 208);
      if ((v7 / 3))
      {
        v49 = v40 + 1;
        do
        {
          v43 = (uint64_t *)v43[1];
          --v49;
        }
        while (v49 > 1);
      }
    }
    else
    {
      v42 = v41 - v40;
      if ((uint64_t)(v41 - v40) < 1)
      {
        v50 = v40 - v41 + 1;
        v43 = (uint64_t *)(v473 + 200);
        do
        {
          v43 = (uint64_t *)v43[1];
          --v50;
        }
        while (v50 > 1);
      }
      else
      {
        v43 = (uint64_t *)(v473 + 200);
        do
        {
          v43 = (uint64_t *)*v43;
          --v42;
        }
        while (v42);
      }
    }
    std::list<int>::erase(v473 + 200, v43, (uint64_t *)(v473 + 200));
  }
  v52 = *(_QWORD *)(v473 + 208);
  if (v52 != v39)
  {
    v53 = 0;
    do
    {
      *(_DWORD *)(v52 + 16) = v53;
      v52 = *(_QWORD *)(v52 + 8);
      ++v53;
    }
    while (v52 != v39);
  }
  if ((int)__p < 2)
  {
    v55 = 0;
  }
  else
  {
    v54 = 0;
    v55 = 0;
    v56 = *v17;
    v57 = *v18;
    v58 = (*v18 - v18[1]) * (*v18 - v18[1]) + (*v17 - v17[1]) * (*v17 - v17[1]) + (*v19 - v19[1]) * (*v19 - v19[1]);
    v59 = v18 + 2;
    v60 = v17 + 2;
    do
    {
      v61 = *v19 - v19[v54 + 2];
      v62 = (v57 - v59[v54]) * (v57 - v59[v54]) + (v56 - v60[v54]) * (v56 - v60[v54]) + v61 * v61;
      _NF = v62 < v58;
      if (v62 < v58)
        v58 = (v57 - v59[v54]) * (v57 - v59[v54]) + (v56 - v60[v54]) * (v56 - v60[v54]) + v61 * v61;
      ++v54;
      if (_NF)
        v55 = v54;
    }
    while (__p - 1 != v54);
  }
  LODWORD(buf[0].f64[0]) = 0;
  HIDWORD(buf[0].f64[0]) = v55 + 1;
  v64 = operator new(0x18uLL);
  v65 = buf[0].f64[0];
  v64[1] = v501;
  v64[2] = *(_QWORD *)&v65;
  v66 = *(_QWORD *)(v473 + 176);
  *v64 = v66;
  *(_QWORD *)(v66 + 8) = v64;
  *(_QWORD *)(v473 + 176) = v64;
  ++*(_QWORD *)(v473 + 192);
  one_delaunay3 = CDelaunayTriangles3D::find_one_delaunay3(v501, v17, v18, v19, (int *)HIDWORD(*(_QWORD *)&v65), SLODWORD(v65));
  if (one_delaunay3 < 0)
  {
    v68 = CDelaunayTriangles3D::find_one_delaunay3(v501, v17, v18, v19, *(int **)&v65, SHIDWORD(v65));
    *(_QWORD *)&v69 = HIDWORD(*(_QWORD *)&v65);
  }
  else
  {
    v68 = one_delaunay3;
    v69 = v65;
    *(_QWORD *)&v65 >>= 32;
  }
  if (v68 < 1)
  {
    LODWORD(v74) = 0;
LABEL_68:
    v72 = v480;
    goto LABEL_69;
  }
  begin = v36->__begin_;
  *begin = LODWORD(v65);
  begin[1] = LODWORD(v69);
  begin[2] = v68;
  v511[0] = (int32x2_t)__PAIR64__(LODWORD(v69), v68);
  CDelaunayTriangles3D::add_edge_to_buffer(v501, v511);
  v511[0] = (int32x2_t)__PAIR64__(v68, LODWORD(v65));
  CDelaunayTriangles3D::add_edge_to_buffer(v501, v511);
  CDelaunayTriangles3D::check_avail_vertices(v501, LODWORD(v65) | (*(_QWORD *)&v69 << 32), v68);
  if (!*(_QWORD *)(v473 + 216))
  {
    LODWORD(v74) = 1;
    goto LABEL_68;
  }
  v71 = v473 + 176;
  v72 = v480;
  if (v480 <= 1)
    v73 = 1;
  else
    v73 = v480;
  __pa = v73;
  v74 = 1;
  v75 = v473;
  v493 = (uint64_t *)(v473 + 224);
  while (2)
  {
    if (*(_QWORD *)(v75 + 192))
    {
      v76 = (_QWORD *)v71;
      v77 = *(_QWORD **)(v75 + 184);
      if (v77 != v76)
      {
        v78 = v76;
        while (1)
        {
          v78 = (_QWORD *)*v78;
          v79 = (int *)v78[2];
          v80 = CDelaunayTriangles3D::find_one_delaunay3(v501, v17, v18, v19, v79, SHIDWORD(v79));
          if ((v80 & 0x80000000) == 0)
            break;
          if (v78 == v77)
          {
            *(_QWORD *)&buf[0].f64[0] = v79;
LABEL_66:
            v72 = v480;
            v36 = (std::vector<int> *)(v473 + 224);
            goto LABEL_69;
          }
        }
        *(_QWORD *)&buf[0].f64[0] = v79;
        if (v74 == __pa)
        {
          LODWORD(v74) = __pa;
          goto LABEL_66;
        }
        v81 = v80;
        v36 = (std::vector<int> *)(v473 + 224);
        v82 = *v493;
        *(_DWORD *)(*v493 + 4 * (3 * v74)) = (_DWORD)v79;
        *(_DWORD *)(v82 + 4 * (3 * v74 + 1)) = HIDWORD(v79);
        *(_DWORD *)(v82 + 4 * (3 * v74 + 2)) = v80;
        v71 = v473 + 176;
        std::list<std::array<int,2ul>>::remove(v501, buf);
        v511[0] = (int32x2_t)__PAIR64__(HIDWORD(v79), v81);
        CDelaunayTriangles3D::add_edge_to_buffer(v501, v511);
        v511[0] = (int32x2_t)__PAIR64__(v81, v79);
        CDelaunayTriangles3D::add_edge_to_buffer(v501, v511);
        ++v74;
        v488 = v488 & 0xFFFFFFFF00000000 | v81;
        CDelaunayTriangles3D::check_avail_vertices(v501, (unint64_t)v79, v81);
        v75 = v473;
        v72 = v480;
        if (*(_QWORD *)(v473 + 216))
          continue;
      }
    }
    break;
  }
LABEL_69:
  if ((_DWORD)v74 != v72)
  {
    std::vector<unsigned int>::resize(v36, v74);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    LODWORD(buf[0].f64[0]) = 136315906;
    *(_QWORD *)((char *)buf[0].f64 + 4) = "VBAP.cpp";
    WORD2(buf[0].f64[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].f64[1] + 6) = 792;
    WORD1(buf[1].f64[0]) = 2080;
    *(_QWORD *)((char *)buf[1].f64 + 4) = "delaunayTriangulation";
    WORD2(buf[1].f64[1]) = 1024;
    *(_DWORD *)((char *)&buf[1].f64[1] + 6) = 792;
    v31 = MEMORY[0x1E0C81028];
    goto LABEL_7;
  }
LABEL_70:
  v83 = v473;
  if (*(_DWORD *)v473 == 1 && *(_QWORD *)(v473 + 304) >= 2uLL)
  {
    v85 = *(_QWORD *)(v473 + 224);
    v84 = *(_QWORD *)(v473 + 232);
    if ((unint64_t)(v84 - v85) >= 0xC)
    {
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v489 = 0;
      v89 = 0;
      v90 = 0;
      v494 = 0;
      __pb = 0;
      v91 = 0;
      v485 = 0;
      LODWORD(v92) = 0;
      do
      {
        v93 = 0;
        v94 = 0;
        v95 = 0;
        v96 = ((uint64_t)(*(_QWORD *)(v473 + 64) - *(_QWORD *)(v473 + 56)) >> 2) / 3uLL;
        do
        {
          v97 = *(_DWORD *)(v85 + 4 * (v86 + v93));
          if (v97 >= v96)
            *((_DWORD *)buf[0].f64 + v94++) = v97;
          else
            v95 = *(_DWORD *)(v85 + 4 * (v86 + v93));
          ++v93;
        }
        while (v93 != 3);
        if (v94 == 2)
        {
          v502 = v92;
          if ((unint64_t)v90 >= v494)
          {
            v98 = (v90 - v89) >> 2;
            v99 = v98 + 1;
            if ((unint64_t)(v98 + 1) >> 62)
              goto LABEL_368;
            if ((uint64_t)(v494 - (_QWORD)v89) >> 1 > v99)
              v99 = (uint64_t)(v494 - (_QWORD)v89) >> 1;
            if (v494 - (unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
              v100 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v100 = v99;
            if (v100)
            {
              v101 = v89;
              v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v100);
              v103 = v101;
            }
            else
            {
              v103 = v89;
              v102 = 0;
            }
            v104 = (char *)(v100 + 4 * v98);
            *(_DWORD *)v104 = v95;
            v105 = v104 + 4;
            while (v90 != v103)
            {
              v106 = *((_DWORD *)v90 - 1);
              v90 -= 4;
              *((_DWORD *)v104 - 1) = v106;
              v104 -= 4;
            }
            v494 = v100 + 4 * v102;
            if (v103)
              operator delete(v103);
            v90 = v105;
            v89 = v104;
            LODWORD(v92) = v502;
          }
          else
          {
            *(_DWORD *)v90 = v95;
            v90 += 4;
          }
          if (HIDWORD(buf[0].f64[0]) >= LODWORD(buf[0].f64[0]))
            v107 = LODWORD(buf[0].f64[0]);
          else
            v107 = HIDWORD(buf[0].f64[0]);
          if (LODWORD(buf[0].f64[0]) <= HIDWORD(buf[0].f64[0]))
            v108 = HIDWORD(buf[0].f64[0]);
          else
            v108 = LODWORD(buf[0].f64[0]);
          if (v88 >= v489)
          {
            v109 = (v88 - v87) >> 3;
            v110 = v109 + 1;
            if ((unint64_t)(v109 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((v489 - v87) >> 2 > v110)
              v110 = (v489 - v87) >> 2;
            v111 = 0x1FFFFFFFFFFFFFFFLL;
            if ((unint64_t)(v489 - v87) < 0x7FFFFFFFFFFFFFF8)
              v111 = v110;
            v476 = v89;
            if (v111)
            {
              v490 = v108;
              if (v111 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v112 = v111;
              v113 = (char *)operator new(8 * v111);
              v111 = v112;
              v108 = v490;
            }
            else
            {
              v113 = 0;
            }
            v114 = &v113[8 * v109];
            *(_QWORD *)v114 = v107 | (v108 << 32);
            v115 = v114 + 8;
            while (v88 != v87)
            {
              v116 = *((_QWORD *)v88 - 1);
              v88 -= 8;
              *((_QWORD *)v114 - 1) = v116;
              v114 -= 8;
            }
            v489 = &v113[8 * v111];
            if (v87)
              operator delete(v87);
            v87 = v114;
            v88 = v115;
            LODWORD(v92) = v502;
            v89 = v476;
          }
          else
          {
            *(_QWORD *)v88 = v107 | (v108 << 32);
            v88 += 8;
          }
          if ((unint64_t)v91 >= v485)
          {
            v118 = v89;
            v119 = (v91 - __pb) >> 2;
            v120 = v119 + 1;
            if ((unint64_t)(v119 + 1) >> 62)
LABEL_368:
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v485 - (_QWORD)__pb) >> 1 > v120)
              v120 = (uint64_t)(v485 - (_QWORD)__pb) >> 1;
            if (v485 - (unint64_t)__pb >= 0x7FFFFFFFFFFFFFFCLL)
              v121 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v121 = v120;
            if (v121)
              v121 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v121);
            else
              v122 = 0;
            v123 = (char *)(v121 + 4 * v119);
            *(_DWORD *)v123 = v502;
            v117 = v123 + 4;
            if (v91 == __pb)
            {
              v124 = __pb;
            }
            else
            {
              v124 = __pb;
              do
              {
                v125 = *((_DWORD *)v91 - 1);
                v91 -= 4;
                *((_DWORD *)v123 - 1) = v125;
                v123 -= 4;
              }
              while (v91 != __pb);
            }
            v485 = v121 + 4 * v122;
            if (v124)
              operator delete(v124);
            __pb = v123;
            LODWORD(v92) = v502;
            v89 = v118;
          }
          else
          {
            *(_DWORD *)v91 = v92;
            v117 = v91 + 4;
          }
          v85 = *(_QWORD *)(v473 + 224);
          v84 = *(_QWORD *)(v473 + 232);
          v91 = v117;
        }
        v92 = (v92 + 1);
        v86 += 3;
      }
      while (v92 < ((v84 - v85) >> 2) / 3uLL);
      v126 = v89;
      if (v88 != v87)
      {
        v127 = 0;
        v128 = 0;
        v129 = (v88 - v87) >> 3;
        do
        {
          v130 = v128;
          v131 = v127;
          v127 = ++v128;
          if (v129 > v128)
          {
            v26.f64[0] = *(float64_t *)&v87[8 * v131];
            v132 = v128;
            v133 = v128;
            while (1)
            {
              v134 = vceq_s32(*(int32x2_t *)&v26.f64[0], *(int32x2_t *)&v87[8 * v132]);
              if ((v134.i32[0] & v134.i32[1] & 1) != 0)
                break;
              v132 = ++v133;
              if (v129 <= v133)
                goto LABEL_162;
            }
            v135 = *(unsigned int *)&v126[4 * v131];
            v136.f64[0] = *((float64_t *)v506[0] + v135);
            v136.f64[1] = v505[0][v135];
            v27.f64[0] = v504[0][v135];
            v137 = &v126[4 * v132];
            v138 = *(unsigned int *)v137;
            v28.f64[0] = *((float64_t *)v506[0] + v138);
            v139.f64[0] = v504[0][v138];
            v140 = LODWORD(v26.f64[0]);
            v26.f64[0] = *((float64_t *)v506[0] + LODWORD(v26.f64[0]));
            v141.f64[0] = v504[0][v140];
            v29.f64[0] = v505[0][v138];
            v142 = vnegq_f64(v29);
            v29.f64[1] = v139.f64[0];
            v139.f64[1] = v28.f64[0];
            v30.f64[0] = v505[0][v140];
            v143 = vmlaq_f64(vmulq_f64(v26, v142), v30, v28);
            v30.f64[1] = v141.f64[0];
            v141.f64[1] = v26.f64[0];
            v26 = vmulq_f64(v136, vmlaq_f64(vmulq_f64(v30, vnegq_f64(v139)), v141, v29));
            v26.f64[0] = vmulq_f64(v27, v143).f64[0] + vaddvq_f64(v26);
            if (v26.f64[0] >= 0.0)
              v144 = v130;
            else
              v144 = v133;
            if (v26.f64[0] < 0.0)
              v133 = v130;
            v145 = *(_QWORD *)(v473 + 224);
            *(_DWORD *)(v145 + 4 * (3 * *(_DWORD *)&__pb[4 * v131])) = *(_DWORD *)&v126[4 * v144];
            *(_DWORD *)(v145 + 4 * (3 * *(_DWORD *)&__pb[4 * v131] + 1)) = *(_DWORD *)&v126[4 * v133];
            v146 = &v87[8 * v132];
            *(_DWORD *)(v145 + 4 * (3 * *(_DWORD *)&__pb[4 * v131] + 2)) = *(_DWORD *)v146;
            v147 = &__pb[4 * v132];
            *(_DWORD *)(v145 + 4 * (3 * *(_DWORD *)v147)) = *(_DWORD *)&v126[4 * v133];
            *(_DWORD *)(v145 + 4 * (3 * *(_DWORD *)v147 + 1)) = *(_DWORD *)&v126[4 * v144];
            *(_DWORD *)(v145 + 4 * (3 * *(_DWORD *)v147 + 2)) = *((_DWORD *)v146 + 1);
            v148 = v146 + 8;
            if (v146 + 8 == v88)
            {
              v88 = v146;
            }
            else
            {
              do
              {
                v149 = v148;
                v150 = *((_DWORD *)v148 + 1);
                *((_DWORD *)v148 - 2) = *(_DWORD *)v148;
                *((_DWORD *)v148 - 1) = v150;
                v148 += 8;
              }
              while (v148 != v88);
              v88 = v149;
            }
            v151 = v90 - (v137 + 4);
            if (v151)
              memmove(v137, v137 + 4, v151);
            v152 = v91 - (v147 + 4);
            if (v152)
              memmove(v147, v147 + 4, v152);
            v90 = &v137[v151];
            v91 = &v147[v152];
          }
LABEL_162:
          v129 = (v88 - v87) >> 3;
        }
        while (v129 > v128);
      }
      if (__pb)
        operator delete(__pb);
      if (v126)
        operator delete(v126);
      v83 = v473;
      if (v87)
        operator delete(v87);
    }
  }
  v153 = *(_QWORD *)(v83 + 232) - *(_QWORD *)(v83 + 224);
  v154 = (v153 >> 1) + (v153 >> 2);
  v155 = *(_QWORD *)(v83 + 248);
  v156 = *(char **)(v83 + 256);
  v157 = (uint64_t)&v156[-v155] >> 3;
  if (v154 <= v157)
  {
    if (v154 >= v157)
      goto LABEL_188;
    v156 = (char *)(v155 + 8 * v154);
    goto LABEL_185;
  }
  v158 = v154 - v157;
  v159 = *(_QWORD *)(v83 + 264);
  if (v154 - v157 <= (v159 - (uint64_t)v156) >> 3)
  {
    bzero(*(void **)(v83 + 256), 8 * v158);
    v156 += 8 * v158;
LABEL_185:
    *(_QWORD *)(v83 + 256) = v156;
    goto LABEL_188;
  }
  if (v154 >> 61)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v160 = v159 - v155;
  if (v160 >> 2 > v154)
    v154 = v160 >> 2;
  if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8)
    v161 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v161 = v154;
  v162 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v161);
  v163 = *(char **)(v473 + 248);
  v164 = *(char **)(v473 + 256);
  v165 = &v162[8 * v157];
  v167 = &v162[8 * v166];
  bzero(v165, 8 * v158);
  v156 = &v165[8 * v158];
  while (v164 != v163)
  {
    v168 = *((_QWORD *)v164 - 1);
    v164 -= 8;
    *((_QWORD *)v165 - 1) = v168;
    v165 -= 8;
  }
  v83 = v473;
  *(_QWORD *)(v473 + 248) = v165;
  *(_QWORD *)(v473 + 256) = v156;
  *(_QWORD *)(v473 + 264) = v167;
  if (v163)
  {
    operator delete(v163);
    v156 = *(char **)(v473 + 256);
  }
LABEL_188:
  vDSP_vclrD(*(double **)(v83 + 248), 1, (uint64_t)&v156[-*(_QWORD *)(v83 + 248)] >> 3);
  v177 = *(_QWORD *)(v473 + 224);
  v176 = *(_QWORD *)(v473 + 232);
  if ((unint64_t)(v176 - v177) >= 0xC)
  {
    v179 = 1;
    v180 = 8;
    v181 = 2;
    do
    {
      v182 = *(int *)(v177 + 4 * (v181 - 2));
      v183.f64[0] = *((float64_t *)v506[0] + v182);
      v183.f64[1] = v505[0][v182];
      v169.f64[0] = v504[0][v182];
      v184 = *(int *)(v177 + 4 * (v181 - 1));
      v170.f64[0] = *((float64_t *)v506[0] + v184);
      v173.f64[0] = v505[0][v184];
      v171.f64[0] = v504[0][v184];
      v185 = *(int *)(v177 + 4 * v181);
      v172.f64[0] = *((float64_t *)v506[0] + v185);
      v175.f64[0] = v505[0][v185];
      v174.f64[0] = v504[0][v185];
      v186.f64[0] = v173.f64[0];
      v186.f64[1] = v171.f64[0];
      v187.f64[0] = v174.f64[0];
      v187.f64[1] = v172.f64[0];
      v188.f64[0] = v171.f64[0];
      v188.f64[1] = v170.f64[0];
      v189.f64[0] = v175.f64[0];
      v189.f64[1] = v174.f64[0];
      if (fabs(vmulq_f64(v169, vmlaq_f64(vmulq_f64(v172, vnegq_f64(v173)), v175, v170)).f64[0]+ vaddvq_f64(vmulq_f64(v183, vmlaq_f64(vmulq_f64(v189, vnegq_f64(v188)), v187, v186)))) > 0.00000011920929)
      {
        v170.f64[1] = v173.f64[0];
        v172.f64[1] = v505[0][v185];
        buf[0] = v183;
        buf[1] = v169;
        buf[2] = v170;
        v518 = v171;
        v519 = v172;
        v520 = v174;
        __invert_d3();
        v190 = v511[1];
        v169 = v513;
        v170 = v515;
        v171.f64[0] = v512.f64[0];
        v172.f64[0] = v514.f64[0];
        v173.f64[0] = v516.f64[0];
        v191 = *(_QWORD *)(v473 + 248);
        *(int32x2_t *)(v191 + 8 * (v180 - 8)) = v511[0];
        *(float64_t *)(v191 + 8 * (v180 - 7)) = v169.f64[0];
        *(float64_t *)(v191 + 8 * (v180 - 6)) = v170.f64[0];
        *(int32x2_t *)(v191 + 8 * (v180 - 5)) = v190;
        *(float64_t *)(v191 + 8 * (v180 - 4)) = v169.f64[1];
        *(float64_t *)(v191 + 8 * (v180 - 3)) = v170.f64[1];
        *(float64_t *)(v191 + 8 * (v180 - 2)) = v171.f64[0];
        *(float64_t *)(v191 + 8 * (v180 - 1)) = v172.f64[0];
        *(float64_t *)(v191 + 8 * v180) = v173.f64[0];
        v177 = *(_QWORD *)(v473 + 224);
        v176 = *(_QWORD *)(v473 + 232);
      }
      v178 = ((v176 - v177) >> 2) / 3uLL;
      v338 = v178 > v179++;
      v180 += 9;
      v181 += 3;
    }
    while (v338);
  }
  else
  {
    v178 = (v176 - v177) / 0xCuLL;
  }
  v192 = vcvtmd_s64_f64(log((float)v178 * 0.125) / 1.38629436);
  if (v192 >= 6)
    v192 = 6;
  if (v478 == v480)
  {
    v193 = v192 & ~(v192 >> 31);
    v194 = (8 << (2 * (v192 & ~(v192 >> 31))));
    v196 = *a4;
    v195 = (uint64_t)a4[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v195 - (uint64_t)*a4) >> 3) == v194)
    {
      v197 = (void **)(v473 + 272);
      if ((uint64_t **)(v473 + 272) != a4)
      {
        v198 = *(_QWORD *)(v473 + 288);
        v199 = *(_QWORD **)(v473 + 272);
        if (0xAAAAAAAAAAAAAAABLL * ((v198 - (uint64_t)v199) >> 3) >= v194)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v473 + 280) - (_QWORD)v199) >> 3) >= v194)
          {
            v307 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::list<int> *,std::list<int> *,std::list<int> *,0>(*a4, a4[1], *(uint64_t **)(v473 + 272));
            for (i = *(uint64_t **)(v473 + 280); i != v307; std::__list_imp<ID3FrameInfo>::clear(i))
              i -= 3;
            *(_QWORD *)(v473 + 280) = v307;
            goto LABEL_291;
          }
          v305 = &v196[(uint64_t)(*(_QWORD *)(v473 + 280) - (_QWORD)v199) >> 3];
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::list<int> *,std::list<int> *,std::list<int> *,0>(*a4, v305, *(uint64_t **)(v473 + 272));
          v207 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::list<int>>,std::list<int>*,std::list<int>*,std::list<int>*>((uint64_t)v305, v195, *(_QWORD **)(v473 + 280));
        }
        else
        {
          if (v199)
          {
            v200 = *(_QWORD **)(v473 + 280);
            v201 = *(void **)(v473 + 272);
            if (v200 != v199)
            {
              do
              {
                v200 -= 3;
                std::__list_imp<ID3FrameInfo>::clear(v200);
              }
              while (v200 != v199);
              v201 = *v197;
            }
            *(_QWORD *)(v473 + 280) = v199;
            operator delete(v201);
            v198 = 0;
            *v197 = 0;
            *(_QWORD *)(v473 + 280) = 0;
            *(_QWORD *)(v473 + 288) = 0;
          }
          v202 = 0xAAAAAAAAAAAAAAABLL * (v198 >> 3);
          v203 = 2 * v202;
          if (2 * v202 <= v194)
            v203 = v194;
          if (v202 >= 0x555555555555555)
            v204 = 0xAAAAAAAAAAAAAAALL;
          else
            v204 = v203;
          if (v204 > 0xAAAAAAAAAAAAAAALL)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v205 = std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v204);
          *(_QWORD *)(v473 + 272) = v205;
          *(_QWORD *)(v473 + 280) = v205;
          *(_QWORD *)(v473 + 288) = &v205[3 * v206];
          v207 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::list<int>>,std::list<int>*,std::list<int>*,std::list<int>*>((uint64_t)v196, v195, v205);
        }
        *(_QWORD *)(v473 + 280) = v207;
      }
LABEL_291:
      v32 = 0;
      *(_DWORD *)(v473 + 296) = v193;
      goto LABEL_359;
    }
  }
  v459 = v505[0];
  v460 = v506[0];
  v458 = v504[0];
  v208 = v473;
  v210 = *(_QWORD **)(v473 + 272);
  v209 = *(_QWORD **)(v473 + 280);
  if (v209 != v210)
  {
    do
    {
      v209 -= 3;
      std::__list_imp<ID3FrameInfo>::clear(v209);
    }
    while (v209 != v210);
    v208 = v473;
    v177 = *(_QWORD *)(v473 + 224);
    v176 = *(_QWORD *)(v473 + 232);
  }
  *(_QWORD *)(v208 + 280) = v210;
  v211 = ((v176 - v177) >> 2) / 3uLL;
  v212 = vcvtmd_s64_f64(log((float)v211 * 0.125) / 1.38629436);
  v455 = v212;
  if (v212 >= 6)
    v213 = 6;
  else
    v213 = v212;
  v214 = v213 & ~(v213 >> 31);
  v215 = 2 * (v213 & ~(v213 >> 31));
  v469 = (char *)operator new(96 << (v215 + 3));
  bzero(v469, 96 * (((96 << (v215 + 3)) - 96) / 0x60uLL) + 96);
  v218 = 0;
  if (8 << v215 <= 1)
    v219 = 1;
  else
    v219 = (8 << v215);
  v220 = (float64x2_t *)MEMORY[0x1E0C83FD0];
  v221 = (float64x2_t)vdupq_n_s64(0x416312D000000000uLL);
  v216.f64[0] = 10000000.0;
  v222 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
  v217.f64[0] = 0.0000001;
  __asm
  {
    FMOV            V7.2D, #0.5
    FMOV            V30.2D, #1.0
  }
  do
  {
    v226 = v220[3];
    buf[2] = v220[2];
    v518 = v226;
    v227 = v220[5];
    v519 = v220[4];
    v520 = v227;
    v228 = v220[1];
    buf[0] = *v220;
    buf[1] = v228;
    if (v213 < 1)
    {
      LOBYTE(v230) = v218;
    }
    else
    {
      v229 = 0;
      v230 = v218;
      do
      {
        if ((v230 & 3) == 2)
        {
          v239 = 0;
          v508[2] = buf[2];
          v508[3] = v518;
          v508[4] = v519;
          v508[5] = v520;
          v508[0] = buf[0];
          v508[1] = buf[1];
          do
          {
            v241 = v508[v239 / 2];
            v240 = v508[v239 / 2 + 1];
            v242 = (float64x2_t *)&v511[v239];
            *v242 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q7, v241.f64[0]), (float64x2_t)xmmword_18F117010, v241, 1), (float64x2_t)xmmword_18F117020, v240.f64[0]);
            v242[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v241, (float64x2_t)0), (float64x2_t)0, v241, 1), _Q7, v240);
            v239 += 4;
          }
          while (v239 != 12);
        }
        else if ((v230 & 3) == 1)
        {
          v235 = 0;
          v509[2] = buf[2];
          v509[3] = v518;
          v509[4] = v519;
          v509[5] = v520;
          v509[0] = buf[0];
          v509[1] = buf[1];
          do
          {
            v237 = v509[v235 / 2];
            v236 = v509[v235 / 2 + 1];
            v238 = (float64x2_t *)&v511[v235];
            *v238 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_18F117030, v237.f64[0]), (float64x2_t)xmmword_18F117020, v237, 1), (float64x2_t)0, v236.f64[0]);
            v238[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v237, _Q7), _Q7, v237, 1), _Q30, v236);
            v235 += 4;
          }
          while (v235 != 12);
        }
        else if ((v230 & 3) != 0)
        {
          v243 = 0;
          v507[2] = buf[2];
          v507[3] = v518;
          v507[4] = v519;
          v507[5] = v520;
          v507[0] = buf[0];
          v507[1] = buf[1];
          do
          {
            v245 = (float64x2_t)v507[v243 / 2];
            v244 = (float64x2_t)v507[v243 / 2 + 1];
            v246 = (float64x2_t *)&v511[v243];
            *v246 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_18F117020, v245.f64[0]), (float64x2_t)xmmword_18F117030, v245, 1), _Q7, v244.f64[0]);
            v246[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v245, _Q7), _Q7, v245, 1), (float64x2_t)0, v244);
            v243 += 4;
          }
          while (v243 != 12);
        }
        else
        {
          v231 = 0;
          v510[2] = buf[2];
          v510[3] = v518;
          v510[4] = v519;
          v510[5] = v520;
          v510[0] = buf[0];
          v510[1] = buf[1];
          do
          {
            v233 = v510[v231 / 2];
            v232 = v510[v231 / 2 + 1];
            v234 = (float64x2_t *)&v511[v231];
            *v234 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_18F117040, v233.f64[0]), _Q7, v233, 1), (float64x2_t)xmmword_18F117030, v232.f64[0]);
            v234[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v233, (float64x2_t)0), (float64x2_t)0, v233, 1), _Q7, v232);
            v231 += 4;
          }
          while (v231 != 12);
        }
        buf[2] = v513;
        v518 = v514;
        v519 = v515;
        v520 = v516;
        buf[0] = *(float64x2_t *)v511[0].i8;
        buf[1] = v512;
        for (j = 0; j != 6; j += 2)
        {
          v248 = &buf[j];
          v250 = buf[j];
          v249 = buf[j + 1];
          v251 = vabsq_f64(v249);
          v251.f64[0] = v251.f64[0] + vaddvq_f64(vabsq_f64(v250));
          if (v251.f64[0] > 0.0)
          {
            v251.f64[0] = 1.0 / v251.f64[0];
            *(_QWORD *)&v250.f64[1] = vextq_s8((int8x16_t)v250, (int8x16_t)v250, 8uLL).u64[0];
            *v248 = vmulq_n_f64(v250, v251.f64[0]);
            v248[1] = vmulq_f64(v249, v251);
          }
        }
        v230 >>= 2;
        ++v229;
      }
      while (v229 != v214);
    }
    for (k = 0; k != 6; k += 2)
    {
      v253 = &buf[k];
      v254 = buf[k];
      v255 = buf[k + 1];
      v256 = vmulq_f64(v255, v255);
      v256.f64[0] = 1.0 / sqrt(v256.f64[0] + vaddvq_f64(vmulq_f64(v254, v254)));
      *v253 = vmulq_n_f64(v254, v256.f64[0]);
      v253[1] = vmulq_f64(v255, v256);
    }
    v257 = *(_OWORD *)&vmulq_f64(v518, v216);
    v258 = *(_OWORD *)&vmulq_f64(v520, v216);
    v259 = vmulq_f64(v519, v221);
    v260 = (float64x2_t *)&v469[96 * v218];
    v261 = vrndxq_f64(vmulq_f64(buf[0], v221));
    v262 = vrndxq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmulq_f64(buf[1], v216));
    v263 = vmulq_f64(vrndxq_f64(vmulq_f64(buf[2], v221)), v222);
    v260[2] = v263;
    v264 = v260 + 2;
    v265 = vrndxq_f64((float64x2_t)v257);
    v266 = vmulq_f64(vrndxq_f64(v259), v222);
    v260[4] = v266;
    v267 = vmulq_f64(v262, v217);
    v268 = vmulq_f64(v261, v222);
    v269 = vmulq_f64(v265, v217);
    *v260 = v268;
    v260[1] = v267;
    v270 = vmulq_f64(vrndxq_f64((float64x2_t)v258), v217);
    v260[3] = v269;
    v260[5] = v270;
    v271 = vextq_s8((int8x16_t)v268, (int8x16_t)v268, 8uLL).u64[0];
    v272 = vextq_s8((int8x16_t)v263, (int8x16_t)v263, 8uLL).u64[0];
    v273 = vextq_s8((int8x16_t)v266, (int8x16_t)v266, 8uLL).u64[0];
    switch(v230 & 7)
    {
      case 0u:
        *v260 = vnegq_f64(v268);
        v260[1] = vnegq_f64(v267);
        v260[2] = vnegq_f64(v263);
        v260[3] = vnegq_f64(v269);
        v260[4] = vnegq_f64(v266);
        v260[5] = vnegq_f64(v270);
        break;
      case 1u:
        *(_QWORD *)&v268.f64[1] = v271;
        *v260 = vnegq_f64(v268);
        v260[1] = v267;
        *(_QWORD *)&v263.f64[1] = v272;
        *v264 = vnegq_f64(v263);
        v260[3] = v269;
        *(_QWORD *)&v266.f64[1] = v273;
        v266 = vnegq_f64(v266);
        goto LABEL_256;
      case 2u:
        *(_QWORD *)&v268.f64[1] = v271;
        *v260 = vmulq_f64(v268, (float64x2_t)xmmword_18F117050);
        v260[1] = vnegq_f64(v267);
        *(_QWORD *)&v263.f64[1] = v272;
        *v264 = vmulq_f64(v263, (float64x2_t)xmmword_18F117050);
        v260[3] = vnegq_f64(v269);
        *(_QWORD *)&v266.f64[1] = v273;
        v266 = vmulq_f64(v266, (float64x2_t)xmmword_18F117050);
        goto LABEL_255;
      case 3u:
        *(_QWORD *)&v268.f64[1] = v271;
        *v260 = vmulq_f64(v268, (float64x2_t)xmmword_18F117050);
        v260[1] = v267;
        *(_QWORD *)&v263.f64[1] = v272;
        *v264 = vmulq_f64(v263, (float64x2_t)xmmword_18F117050);
        v260[3] = v269;
        *(_QWORD *)&v266.f64[1] = v273;
        v266 = vmulq_f64(v266, (float64x2_t)xmmword_18F117050);
        goto LABEL_256;
      case 4u:
        *(_QWORD *)&v268.f64[1] = v271;
        *v260 = vmulq_f64(v268, (float64x2_t)xmmword_18F116FD0);
        v260[1] = vnegq_f64(v267);
        *(_QWORD *)&v263.f64[1] = v272;
        *v264 = vmulq_f64(v263, (float64x2_t)xmmword_18F116FD0);
        v260[3] = vnegq_f64(v269);
        *(_QWORD *)&v266.f64[1] = v273;
        v266 = vmulq_f64(v266, (float64x2_t)xmmword_18F116FD0);
        goto LABEL_255;
      case 5u:
        *(_QWORD *)&v268.f64[1] = v271;
        *v260 = vmulq_f64(v268, (float64x2_t)xmmword_18F116FD0);
        v260[1] = v267;
        *(_QWORD *)&v263.f64[1] = v272;
        *v264 = vmulq_f64(v263, (float64x2_t)xmmword_18F116FD0);
        v260[3] = v269;
        *(_QWORD *)&v266.f64[1] = v273;
        v266 = vmulq_f64(v266, (float64x2_t)xmmword_18F116FD0);
        goto LABEL_256;
      case 6u:
        *(_QWORD *)&v268.f64[1] = v271;
        *v260 = v268;
        v260[1] = vnegq_f64(v267);
        *(_QWORD *)&v263.f64[1] = v272;
        *v264 = v263;
        v260[3] = vnegq_f64(v269);
        *(_QWORD *)&v266.f64[1] = v273;
LABEL_255:
        v270 = vnegq_f64(v270);
LABEL_256:
        v260[4] = v266;
        v260[5] = v270;
        break;
      default:
        break;
    }
    ++v218;
  }
  while (v218 != v219);
  v274 = 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(96 * (((96 << (2 * (v213 & ~(v213 >> 31)) + 3)) - 96) / 0x60uLL)
                  + 96) >> 5);
  v275 = *(_QWORD *)(v473 + 272);
  v276 = *(_QWORD **)(v473 + 280);
  v277 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v276 - v275) >> 3);
  _CF = v274 >= v277;
  v279 = v274 - v277;
  *(float64x2_t *)v503 = _Q30;
  if (v274 <= v277)
  {
    v291 = v473;
    v281 = v469;
    if (!_CF)
    {
      v304 = (_QWORD *)(v275 + 24 * v274);
      while (v276 != v304)
      {
        v276 -= 3;
        std::__list_imp<ID3FrameInfo>::clear(v276);
      }
      *(_QWORD *)(v473 + 280) = v304;
    }
  }
  else
  {
    v280 = *(_QWORD *)(v473 + 288);
    v281 = v469;
    if (0xAAAAAAAAAAAAAAABLL * ((v280 - (uint64_t)v276) >> 3) >= v279)
    {
      v306 = &v276[3 * v279];
      do
      {
        *v276 = v276;
        v276[1] = v276;
        v276[2] = 0;
        v276 += 3;
      }
      while (v276 != v306);
      v291 = v473;
      *(_QWORD *)(v473 + 280) = v306;
    }
    else
    {
      if (v274 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v282 = 0xAAAAAAAAAAAAAAABLL * ((v280 - v275) >> 3);
      v283 = 2 * v282;
      if (2 * v282 <= v274)
        v283 = v274;
      if (v282 >= 0x555555555555555)
        v284 = 0xAAAAAAAAAAAAAAALL;
      else
        v284 = v283;
      v285 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v284);
      v287 = &v285[24 * v277];
      v288 = &v285[24 * v274];
      v289 = v287;
      do
      {
        *(_QWORD *)v289 = v289;
        *((_QWORD *)v289 + 1) = v289;
        *((_QWORD *)v289 + 2) = 0;
        v289 += 24;
      }
      while (v289 != v288);
      v290 = &v285[24 * v286];
      v291 = v473;
      v292 = *(_QWORD **)(v473 + 272);
      v293 = *(_QWORD **)(v473 + 280);
      if (v293 == v292)
      {
        *(_QWORD *)(v473 + 272) = v287;
        *(_QWORD *)(v473 + 280) = v288;
        *(_QWORD *)(v473 + 288) = v290;
      }
      else
      {
        v294 = 0;
        do
        {
          v295 = &v287[v294 * 8];
          v296 = (uint64_t *)(v295 - 24);
          v297 = &v293[v294];
          *((_QWORD *)v295 - 3) = v295 - 24;
          *((_QWORD *)v295 - 2) = v295 - 24;
          *((_QWORD *)v295 - 1) = 0;
          v298 = v293[v294 - 1];
          if (v298)
          {
            v299 = *(v297 - 3);
            v300 = (uint64_t *)*(v297 - 2);
            v301 = *v300;
            *(_QWORD *)(v301 + 8) = *(_QWORD *)(v299 + 8);
            **(_QWORD **)(v299 + 8) = v301;
            v302 = *v296;
            *(_QWORD *)(v302 + 8) = v300;
            *v300 = v302;
            *v296 = v299;
            *(_QWORD *)(v299 + 8) = v296;
            *((_QWORD *)v295 - 1) = v298;
            *(v297 - 1) = 0;
          }
          v294 -= 3;
        }
        while (&v293[v294] != v292);
        v303 = *(_QWORD **)(v473 + 272);
        v293 = *(_QWORD **)(v473 + 280);
        *(_QWORD *)(v473 + 272) = &v287[v294 * 8];
        *(_QWORD *)(v473 + 280) = v288;
        *(_QWORD *)(v473 + 288) = v290;
        if (v293 != v303)
        {
          do
          {
            v293 -= 3;
            std::__list_imp<ID3FrameInfo>::clear(v293);
          }
          while (v293 != v303);
          v293 = v303;
        }
      }
      if (v293)
        operator delete(v293);
    }
  }
  if ((_DWORD)v211)
  {
    v309 = 0;
    v449 = ~(-1 << v215);
    v457 = v211;
    v456 = 7 << v215;
    do
    {
      v310 = *(int *)(*(_QWORD *)(v291 + 224) + 12 * v309);
      v216.f64[0] = v458[v310];
      v481 = *((double *)v460 + v310);
      v495 = v459[v310];
      __pc = v216;
      subtriangle_containment = CDelaunayTriangles3D::find_subtriangle_containment(v214, v481, v495, v216.f64[0]);
      v312 = *(int *)(*(_QWORD *)(v291 + 224) + 12 * v309 + 4);
      v313.f64[0] = v458[v312];
      v470 = v313;
      v471 = *((double *)v460 + v312);
      v491 = v459[v312];
      v314 = CDelaunayTriangles3D::find_subtriangle_containment(v214, v471, v491, v313.f64[0]);
      v315 = v291;
      v316 = v314;
      v317 = *(int *)(*(_QWORD *)(v315 + 224) + 12 * v309 + 8);
      v318.f64[0] = *((float64_t *)v460 + v317);
      v319.f64[0] = v458[v317];
      v461 = v319;
      v462 = v318;
      v486 = v459[v317];
      v320 = CDelaunayTriangles3D::find_subtriangle_containment(v214, v318.f64[0], v486, v319.f64[0]);
      *(_QWORD *)&buf[0].f64[0] = buf;
      *(_QWORD *)&buf[0].f64[1] = buf;
      buf[1].f64[0] = 0.0;
      std::__list_imp<ID3FrameInfo>::clear(buf);
      v321 = operator new(0x18uLL);
      v321[4] = subtriangle_containment;
      v322 = buf[0].f64[0];
      *(float64_t *)v321 = buf[0].f64[0];
      *((_QWORD *)v321 + 1) = buf;
      *(_QWORD *)(*(_QWORD *)&v322 + 8) = v321;
      v323 = buf[1].f64[0];
      v324 = *(_QWORD *)&buf[1].f64[0] + 1;
      *(_QWORD *)&buf[0].f64[0] = v321;
      ++*(_QWORD *)&buf[1].f64[0];
      if (v316 != subtriangle_containment)
      {
        v325 = operator new(0x18uLL);
        v325[4] = v316;
        *(_QWORD *)v325 = v321;
        *((_QWORD *)v325 + 1) = buf;
        *((_QWORD *)v321 + 1) = v325;
        v324 = *(_QWORD *)&v323 + 2;
        v321 = v325;
        *(_QWORD *)&buf[0].f64[0] = v325;
        *(_QWORD *)&buf[1].f64[0] = *(_QWORD *)&v323 + 2;
      }
      if (v320 != subtriangle_containment && v320 != v316)
      {
        v327 = operator new(0x18uLL);
        v327[4] = v320;
        *(_QWORD *)v327 = v321;
        *((_QWORD *)v327 + 1) = buf;
        *((_QWORD *)v321 + 1) = v327;
        ++v324;
        *(_QWORD *)&buf[0].f64[0] = v327;
        *(_QWORD *)&buf[1].f64[0] = v324;
      }
      std::list<int>::__sort<std::__less<void,void>>(*(uint64_t *)&buf[0].f64[1], (uint64_t)buf, v324);
      v328 = buf[0].f64[1];
      v329 = *(_DWORD *)(*(_QWORD *)&buf[0].f64[1] + 16);
      if (*(_QWORD *)&buf[1].f64[0] < 2uLL)
      {
        v291 = v473;
        v339 = *(_QWORD *)(v473 + 272);
        v340 = operator new(0x18uLL);
        v341 = (uint64_t *)(v339 + 24 * v329);
        v340[4] = v309;
        *((_QWORD *)v340 + 1) = v341;
        v342 = *v341;
        *(_QWORD *)v340 = *v341;
        *(_QWORD *)(v342 + 8) = v340;
        *v341 = (uint64_t)v340;
        ++v341[2];
        v281 = v469;
      }
      else
      {
        v330 = 0;
        v331 = *(_DWORD *)(*(_QWORD *)&buf[0].f64[0] + 16) ^ v329;
        if ((v456 & v331) != 0)
        {
          v332 = v274 - 1;
          v281 = v469;
        }
        else
        {
          v332 = v274 - 1;
          v281 = v469;
          if (v455 >= 1)
          {
            v333 = v214;
            v334 = v449;
            v335 = v456;
            do
            {
              v336 = v335;
              v337 = v334;
              v335 |= v335 >> 2;
              v334 >>= 2;
              v338 = (v335 & v331) != 0 || v333-- <= 1;
            }
            while (!v338);
            v330 = v336 & v329;
            v332 = v337 | v329;
          }
        }
        v343 = v511;
        v511[0] = (int32x2_t)v511;
        v511[1] = (int32x2_t)v511;
        v512.f64[0] = 0.0;
        if (v332 - v330 != -1)
        {
          v344 = 0.0;
          v345 = v332 - v330 + 1;
          v346 = v511;
          do
          {
            v347 = (int32x2_t *)operator new(0x18uLL);
            v347[2].i32[0] = 0;
            *v347 = (int32x2_t)v346;
            v347[1] = (int32x2_t)v511;
            v346[1] = (int32x2_t)v347;
            ++*(_QWORD *)&v344;
            v346 = v347;
            v511[0] = (int32x2_t)v347;
            v512.f64[0] = v344;
          }
          while (v345 != *(_QWORD *)&v344);
          v343 = (int32x2_t *)v511[1];
          if ((int32x2_t *)v511[1] == v511)
          {
            v281 = v469;
          }
          else
          {
            v348 = (int32x2_t *)v511[1];
            v281 = v469;
            do
            {
              v348[2].i32[0] = v330;
              v348 = (int32x2_t *)v348[1];
              ++v330;
            }
            while (v348 != v511);
          }
        }
        if (*(float64x2_t **)&v328 != buf)
        {
          do
          {
            v349 = *(_DWORD *)(*(_QWORD *)&v328 + 16);
            v350 = *(_QWORD *)(v473 + 272);
            v351 = operator new(0x18uLL);
            v352 = (uint64_t *)(v350 + 24 * v349);
            v351[4] = v309;
            *((_QWORD *)v351 + 1) = v352;
            v353 = *v352;
            *(_QWORD *)v351 = *v352;
            *(_QWORD *)(v353 + 8) = v351;
            *v352 = (uint64_t)v351;
            ++v352[2];
            std::list<int>::remove(v511, *(_DWORD *)(*(_QWORD *)&v328 + 16));
            v328 = *(double *)(*(_QWORD *)&v328 + 8);
          }
          while (*(float64x2_t **)&v328 != buf);
          v343 = (int32x2_t *)v511[1];
        }
        if (v343 != v511)
        {
          *(double *)v354.i64 = v481;
          *(double *)&v354.i64[1] = v495;
          *(double *)v355.i64 = v471;
          *(double *)&v355.i64[1] = v491;
          v356.i64[0] = *(_QWORD *)&v462.f64[0];
          *(double *)&v356.i64[1] = v486;
          v357.f64[0] = __pc.f64[0];
          v357.f64[1] = v481;
          v358.f64[0] = v470.f64[0];
          v358.f64[1] = v471;
          v359 = *(_QWORD *)(v473 + 272);
          v360 = vnegq_f64((float64x2_t)v354);
          v361 = vnegq_f64(__pc);
          v362 = vmlaq_f64(vmulq_f64(v358, v360), (float64x2_t)v355, v357);
          *(_QWORD *)&v492 = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v361, (float64x2_t)v355, 1), v470, (float64x2_t)v354, 1);
          v484 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v362, 1);
          v487 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v362.f64[0], 0);
          v362.f64[0] = v461.f64[0];
          v362.f64[1] = v462.f64[0];
          v363 = (int64x2_t)vmlaq_f64(vmulq_f64(v362, vnegq_f64((float64x2_t)v355)), (float64x2_t)v356, v358);
          *(_QWORD *)&v479 = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v470), (float64x2_t)v356, 1), v461, (float64x2_t)v355, 1);
          v482 = v354;
          v475 = (float64x2_t)vdupq_lane_s64(v363.i64[0], 0);
          v477 = (int64x2_t)*(unint64_t *)&__pc.f64[0];
          v474 = (float64x2_t)vdupq_laneq_s64(v363, 1);
          v364 = (int64x2_t)vmlaq_f64(vmulq_f64(v362, v360), (float64x2_t)v356, v357);
          v365 = (int8x16_t)vzip1q_s64((int64x2_t)__pc, (int64x2_t)v470);
          v467 = (float64x2_t)vdupq_lane_s64(v364.i64[0], 0);
          *(_QWORD *)&v468 = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v361, (float64x2_t)v356, 1), v461, (float64x2_t)v354, 1);
          v472 = v355;
          v463 = (float64x2_t)vzip1q_s64((int64x2_t)*(unint64_t *)&__pc.f64[0], (int64x2_t)*(unint64_t *)&v470.f64[0]);
          v464 = (float64x2_t)vzip2q_s64(v354, v355);
          v465 = (float64x2_t)vzip1q_s64(v354, v355);
          v466 = (float64x2_t)vdupq_laneq_s64(v364, 1);
          v452 = vextq_s8((int8x16_t)v464, (int8x16_t)v464, 8uLL).u64[0];
          v453 = vextq_s8((int8x16_t)v465, (int8x16_t)v465, 8uLL).u64[0];
          __pd = v356;
          v454 = *(double *)v365.i64;
          v450 = (float64x2_t)vextq_s8((int8x16_t)v356, (int8x16_t)v356, 8uLL);
          v451 = vextq_s8(v365, v365, 8uLL).u64[0];
          do
          {
            v366 = v343[2].i32[0];
            v367 = (float64x2_t *)&v281[96 * v366];
            v369 = *v367;
            v368 = v367[1];
            v371 = v367[2];
            v370 = v367[3];
            v373 = v367[4];
            v372 = v367[5];
            v374 = (int64x2_t)*(unint64_t *)&v367[1].f64[0];
            v375 = (int64x2_t)*(unint64_t *)&v367[3].f64[0];
            v376 = (int64x2_t)*(unint64_t *)&v367[5].f64[0];
            v377 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v367, (int64x2_t)v371);
            v378 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v367, (int64x2_t)v371);
            v379 = (float64x2_t)vzip1q_s64((int64x2_t)v374.u64[0], (int64x2_t)v375.u64[0]);
            v380 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v377, v492), v487, v378), v484, v379);
            v381 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v373, __pd), v492), v487, (float64x2_t)vzip2q_s64((int64x2_t)v373, __pd)), v484, (float64x2_t)vzip1q_s64((int64x2_t)v376.u64[0], (int64x2_t)*(unint64_t *)&v461.f64[0]));
            v382 = (int8x16_t)vdupq_n_s64(0x8000000000000000);
            v383 = (float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v381, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v381), (int8x16_t)vcgtzq_f64(v381)));
            v384 = v383.f64[0]
                 + vaddvq_f64((float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v380, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v380), (int8x16_t)vcgtzq_f64(v380))));
            if (fabs(v384) != 3.0
              || (v383.f64[0] = v384,
                  v385 = (int32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v383)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v383))), (vmvn_s8((int8x8_t)vceq_s32(v385, vdup_lane_s32(v385, 1))).u8[0] & 1) == 0))
            {
              v386 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v373, v482), v479), v475, (float64x2_t)vzip2q_s64((int64x2_t)v373, v482)), v474, (float64x2_t)vzip1q_s64(v376, v477));
              v387 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v377, v479), v475, v378), v474, v379);
              v388 = (float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v386, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v386), (int8x16_t)vcgtzq_f64(v386)));
              v389 = v388.f64[0]
                   + vaddvq_f64((float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v387, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v387), (int8x16_t)vcgtzq_f64(v387))));
              if (fabs(v389) != 3.0
                || (v388.f64[0] = v389,
                    v390 = (int32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v388)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v388))), (vmvn_s8((int8x8_t)vceq_s32(v390, vdup_lane_s32(v390, 1))).u8[0] & 1) == 0))
              {
                v391 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v373, v472), v468), v467, (float64x2_t)vzip2q_s64((int64x2_t)v373, v472)), v466, (float64x2_t)vzip1q_s64(v376, (int64x2_t)*(unint64_t *)&v470.f64[0]));
                v392 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v377, v468), v467, v378), v466, v379);
                v393 = (float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v391, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v391), (int8x16_t)vcgtzq_f64(v391)));
                v394 = v393.f64[0]
                     + vaddvq_f64((float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v392, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v392), (int8x16_t)vcgtzq_f64(v392))));
                if (fabs(v394) != 3.0
                  || (v393.f64[0] = v394,
                      v395 = (int32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v393)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v393))), (vmvn_s8((int8x8_t)vceq_s32(v395, vdup_lane_s32(v395, 1))).u8[0] & 1) == 0))
                {
                  v396.f64[0] = v367[1].f64[0];
                  v396.f64[1] = v367->f64[0];
                  v397.f64[0] = v367[3].f64[0];
                  v397.f64[1] = v367[2].f64[0];
                  v398 = vnegq_f64(v369);
                  v399 = vnegq_f64(v368);
                  v400 = vmlaq_f64(vmulq_f64(v397, v398), v371, v396);
                  *(_QWORD *)&v401 = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v399, v371, 1), v370, v369, 1);
                  v402 = vmulq_n_f64((float64x2_t)vzip1q_s64(__pd, (int64x2_t)v373), v401);
                  v403 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v465, v401), v464, v400.f64[0]), v463, v400, 1);
                  v404 = vmlaq_laneq_f64(vmlaq_n_f64(v402, (float64x2_t)vzip2q_s64(__pd, (int64x2_t)v373), v400.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)*(unint64_t *)&v461.f64[0], v376), v400, 1);
                  v405 = (float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v404, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v404), (int8x16_t)vcgtzq_f64(v404)));
                  v406 = v405.f64[0]
                       + vaddvq_f64((float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v403, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v403), (int8x16_t)vcgtzq_f64(v403))));
                  if (fabs(v406) != 3.0
                    || (v405.f64[0] = v406,
                        v407 = (int32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v405)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v405))), (vmvn_s8((int8x8_t)vceq_s32(v407, vdup_lane_s32(v407, 1))).u8[0] & 1) == 0))
                  {
                    v408.f64[0] = v367[5].f64[0];
                    v408.f64[1] = v367[4].f64[0];
                    v409.f64[0] = v367[2].f64[0];
                    *(_QWORD *)&v409.f64[1] = vextq_s8((int8x16_t)v371, (int8x16_t)v371, 8uLL).u64[0];
                    *(_QWORD *)&v397.f64[1] = vextq_s8((int8x16_t)v397, (int8x16_t)v397, 8uLL).u64[0];
                    v410 = vmlaq_f64(vmulq_f64(v408, vnegq_f64(v409)), v373, v397);
                    *(_QWORD *)&v409.f64[0] = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(vnegq_f64(v370), v373, 1), v372, (float64x2_t)vdupq_laneq_s64((int64x2_t)v371, 1));
                    v411 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v465, v409.f64[0]), v464, v410.f64[0]), v463, v410, 1);
                    v412 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(__pd, (int64x2_t)v369), v409.f64[0]), (float64x2_t)vzip2q_s64(__pd, (int64x2_t)v369), v410.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)*(unint64_t *)&v461.f64[0], v374), v410, 1);
                    v413 = (float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v412, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v412), (int8x16_t)vcgtzq_f64(v412)));
                    v414 = v413.f64[0]
                         + vaddvq_f64((float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v411, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v411), (int8x16_t)vcgtzq_f64(v411))));
                    if (fabs(v414) != 3.0
                      || (v413.f64[0] = v414,
                          v415 = (int32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v413)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v413))), (vmvn_s8((int8x8_t)vceq_s32(v415, vdup_lane_s32(v415, 1))).u8[0] & 1) == 0))
                    {
                      *(_QWORD *)&v398.f64[1] = vextq_s8((int8x16_t)v398, (int8x16_t)v398, 8uLL).u64[0];
                      *(_QWORD *)&v408.f64[1] = vextq_s8((int8x16_t)v408, (int8x16_t)v408, 8uLL).u64[0];
                      *(_QWORD *)&v396.f64[1] = vextq_s8((int8x16_t)v396, (int8x16_t)v396, 8uLL).u64[0];
                      v416.f64[0] = v367[4].f64[0];
                      *(_QWORD *)&v416.f64[1] = vextq_s8((int8x16_t)v373, (int8x16_t)v373, 8uLL).u64[0];
                      v417 = vmlaq_f64(vmulq_f64(v408, v398), v416, v396);
                      *(_QWORD *)&v418 = *(_OWORD *)&vmlaq_f64(vmulq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v373, 1), v399), v372, (float64x2_t)vdupq_laneq_s64((int64x2_t)v369, 1));
                      v419 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v465, v418), v464, v417.f64[0]), v463, v417, 1);
                      v420 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(__pd, (int64x2_t)v371), v418), (float64x2_t)vzip2q_s64(__pd, (int64x2_t)v371), v417.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)*(unint64_t *)&v461.f64[0], v375), v417, 1);
                      v421 = (float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v420, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v420), (int8x16_t)vcgtzq_f64(v420)));
                      v422 = v421.f64[0]
                           + vaddvq_f64((float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v419, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v419), (int8x16_t)vcgtzq_f64(v419))));
                      if (fabs(v422) != 3.0
                        || (v421.f64[0] = v422,
                            v423 = (int32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v421)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v421))), (vmvn_s8((int8x8_t)vceq_s32(v423, vdup_lane_s32(v423, 1))).u8[0] & 1) == 0))
                      {
                        v424 = vsubq_f64(v371, v369);
                        v425 = vsubq_f64(v370, v368);
                        v426 = vsubq_f64(v373, v369);
                        v427 = vsubq_f64(v372, v368);
                        v428 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v425), v426, 1), v427, v424, 1);
                        v427.f64[1] = v426.f64[0];
                        v425.f64[1] = v424.f64[0];
                        v429 = vmlaq_f64(vmulq_f64(v427, vnegq_f64(v424)), v426, v425);
                        v430 = vmulq_f64(v429, v429);
                        if (v430.f64[1] + vmulq_f64(v428, v428).f64[0] + v430.f64[0] <= 0.000001)
                          goto LABEL_354;
                        v431 = (float64x2_t)vextq_s8((int8x16_t)v429, (int8x16_t)v429, 8uLL);
                        v432.f64[0] = v428.f64[0];
                        v432.f64[1] = v429.f64[0];
                        v433 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v377, v428.f64[0]), v378, v429.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)v368, (int64x2_t)v370), v431.f64[0]);
                        v434 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v428, v373), v429, v373, 1), v431, v372).f64[0] < -0.00000011920929
                            && v433.f64[1] < -0.00000011920929;
                        v435 = v434 && v433.f64[0] < -0.00000011920929;
                        v436 = (int8x16_t)vnegq_f64(v432);
                        v437 = (int8x16_t)vnegq_f64(v431);
                        v438 = v435 ? -1 : 0;
                        v439 = (float64x2_t)vdupq_n_s64(v438);
                        v440 = (float64x2_t)vbslq_s8((int8x16_t)v439, v437, (int8x16_t)v431);
                        v441 = (float64x2_t)vbslq_s8((int8x16_t)v439, v436, (int8x16_t)v432);
                        v439.f64[0] = v465.f64[0];
                        *(_QWORD *)&v439.f64[1] = v453;
                        v442.f64[0] = v464.f64[0];
                        *(_QWORD *)&v442.f64[1] = v452;
                        v443 = vmlaq_laneq_f64(vmulq_n_f64(v439, v441.f64[0]), v442, v441, 1);
                        v442.f64[0] = v454;
                        *(_QWORD *)&v442.f64[1] = v451;
                        v444 = vmlaq_n_f64(v443, v442, v440.f64[0]);
                        if (v444.f64[0] >= -0.00000011920929
                          || v444.f64[1] >= -0.00000011920929
                          || vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v462, v441), v450, v441, 1), v440, v461).f64[0] >= -0.00000011920929)
                        {
LABEL_354:
                          v445 = operator new(0x18uLL);
                          v446 = (uint64_t *)(v359 + 24 * v366);
                          v445[4] = v309;
                          *((_QWORD *)v445 + 1) = v446;
                          v447 = *v446;
                          *(_QWORD *)v445 = *v446;
                          *(_QWORD *)(v447 + 8) = v445;
                          *v446 = (uint64_t)v445;
                          ++v446[2];
                        }
                      }
                    }
                  }
                }
              }
            }
            v343 = (int32x2_t *)v343[1];
          }
          while (v343 != v511);
        }
        std::__list_imp<ID3FrameInfo>::clear(v511);
        v291 = v473;
      }
      std::__list_imp<ID3FrameInfo>::clear(buf);
      ++v309;
    }
    while (v309 != v457);
  }
  operator delete(v281);
  v32 = 0;
  *(_DWORD *)(v291 + 296) = v214;
LABEL_359:
  if (v504[0])
  {
    v504[1] = v504[0];
    operator delete(v504[0]);
  }
  if (v505[0])
  {
    v505[1] = v505[0];
    operator delete(v505[0]);
  }
  if (v506[0])
  {
    v506[1] = v506[0];
    operator delete(v506[0]);
  }
  return v32;
}

void sub_18EF8DF24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;
  void *v7;

  v3 = v2;
  *(_QWORD *)(v3 + 280) = v1;
  v5 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v5;
    operator delete(v5);
  }
  v6 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v6;
    operator delete(v6);
  }
  v7 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void sub_18EF8DF38(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p)
{
  operator delete(__p);
  JUMPOUT(0x18EF8E030);
}

void sub_18EF8DF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v69;
  void *v70;
  void *v72;
  void *v73;
  void *v74;

  if (__p)
  {
    operator delete(__p);
    if (!v70)
    {
LABEL_3:
      if (!v69)
      {
LABEL_8:
        v72 = (void *)STACK[0x208];
        if (STACK[0x208])
        {
          STACK[0x210] = (unint64_t)v72;
          operator delete(v72);
        }
        v73 = (void *)STACK[0x220];
        if (STACK[0x220])
        {
          STACK[0x228] = (unint64_t)v73;
          operator delete(v73);
        }
        v74 = (void *)STACK[0x238];
        if (STACK[0x238])
        {
          STACK[0x240] = (unint64_t)v74;
          operator delete(v74);
        }
        _Unwind_Resume(a1);
      }
LABEL_15:
      JUMPOUT(0x18EF8E02CLL);
    }
  }
  else if (!v70)
  {
    goto LABEL_3;
  }
  operator delete(v70);
  if (!v69)
    goto LABEL_8;
  goto LABEL_15;
}

void sub_18EF8DF9C()
{
  JUMPOUT(0x18EF8E040);
}

void sub_18EF8DFA4()
{
  JUMPOUT(0x18EF8E050);
}

void sub_18EF8DFAC()
{
  JUMPOUT(0x18EF8E060);
}

void sub_18EF8DFB4(void *a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x18EF8E060);
}

void sub_18EF8DFE0(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;

  __cxa_end_catch();
  v2 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_18EF8DFEC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x18EF8E060);
}

void sub_18EF8DFFC(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_18EF8E004()
{
  JUMPOUT(0x18EF8E020);
}

void sub_18EF8E010()
{
  uint64_t v0;

  std::__list_imp<ID3FrameInfo>::clear(&STACK[0x3D0]);
  std::__list_imp<ID3FrameInfo>::clear(v0 - 224);
  JUMPOUT(0x18EF8E028);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    v7 = &v4[4 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void VBAP::lineUnitSphereIntersection(VBAP *this, const float *__A, float *a3, float *a4)
{
  float v7;
  float v8;
  float v9;
  float __D;
  float v11;
  float __B;
  uint64_t v13;
  float v14;
  float __C[3];

  v14 = 0.0;
  v13 = 0;
  vDSP_vsub((const float *)this, 1, __A, 1, __C, 1, 3uLL);
  vDSP_dotpr(__C, 1, __C, 1, &v14, 3uLL);
  vDSP_dotpr((const float *)this, 1, __C, 1, (float *)&v13 + 1, 3uLL);
  *((float *)&v13 + 1) = *((float *)&v13 + 1) + *((float *)&v13 + 1);
  vDSP_dotpr((const float *)this, 1, (const float *)this, 1, (float *)&v13, 3uLL);
  *(float *)&v13 = *(float *)&v13 + -1.0;
  v7 = (float)(*(float *)&v13 * (float)(v14 * -4.0)) + (float)(*((float *)&v13 + 1) * *((float *)&v13 + 1));
  if (v7 >= 0.0)
  {
    v8 = sqrtf(v7);
    v9 = (float)-(float)(*((float *)&v13 + 1) - v8) / (float)(v14 + v14);
    __D = (float)-(float)(*((float *)&v13 + 1) + v8) / (float)(v14 + v14);
    v11 = 1.0 - v9;
    __B = 1.0 - __D;
    vDSP_vsmsma((const float *)this, 1, &__B, __A, 1, &__D, a3 + 3, 1, 3uLL);
    vDSP_vsmsma((const float *)this, 1, &v11, __A, 1, &v9, a3, 1, 3uLL);
  }
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  int v17;

  v4 = *a1;
  v6 = *(_DWORD **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v6 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v10;
    if (v13)
    {
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v13);
      v8 = *(_DWORD **)v4;
      v6 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = (_DWORD *)(v13 + 4 * v9);
    v16 = v13 + 4 * v14;
    *v15 = *a2;
    v7 = v15 + 1;
    while (v6 != v8)
    {
      v17 = *--v6;
      *--v15 = v17;
    }
    *(_QWORD *)v4 = v15;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

_QWORD *std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_18EF8E41C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  size_t v19;
  _QWORD v20[5];

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v15 = v3 + 24 * a2;
      if (v4 != v15)
      {
        v16 = a1[1];
        do
        {
          v18 = *(void **)(v16 - 24);
          v16 -= 24;
          v17 = v18;
          if (v18)
          {
            *(_QWORD *)(v4 - 16) = v17;
            operator delete(v17);
          }
          v4 = v16;
        }
        while (v16 != v15);
      }
      a1[1] = v15;
    }
  }
  else
  {
    v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
    {
      v19 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v19);
      a1[1] = v4 + v19;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v20[4] = a1 + 2;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v10);
      v12 = &v11[24 * v5];
      v20[0] = v11;
      v20[1] = v12;
      v20[3] = &v11[24 * v13];
      v14 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v14);
      v20[2] = &v12[v14];
      std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v20);
      std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v20);
    }
  }
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<int *,int *,std::back_insert_iterator<std::vector<unsigned int>>>(int *a1, int *a2, uint64_t a3)
{
  int *v5;
  _DWORD *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;

  if (a1 != a2)
  {
    v5 = a1;
    v6 = *(_DWORD **)(a3 + 8);
    do
    {
      v7 = *v5;
      v8 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v6 >= v8)
      {
        v10 = *(_DWORD **)a3;
        v11 = ((uint64_t)v6 - *(_QWORD *)a3) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v13 = v8 - (_QWORD)v10;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v14);
          v10 = *(_DWORD **)a3;
          v6 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          v15 = 0;
        }
        v16 = (_DWORD *)(v14 + 4 * v11);
        *v16 = v7;
        v9 = v16 + 1;
        while (v6 != v10)
        {
          v17 = *--v6;
          *--v16 = v17;
        }
        *(_QWORD *)a3 = v16;
        *(_QWORD *)(a3 + 8) = v9;
        *(_QWORD *)(a3 + 16) = v14 + 4 * v15;
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v6 = v7;
        v9 = v6 + 1;
      }
      *(_QWORD *)(a3 + 8) = v9;
      ++v5;
      v6 = v9;
    }
    while (v5 != a2);
  }
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if ((char *)v5 != a3)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a3, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_18EF8E800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 16) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_18EF8E914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::list<int> *,std::list<int> *,std::list<int> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (a3 != v5)
      {
        v6 = v5[1];
        for (i = (uint64_t *)a3[1]; (uint64_t *)v6 != v5 && i != a3; i = (uint64_t *)i[1])
        {
          *((_DWORD *)i + 4) = *(_DWORD *)(v6 + 16);
          v6 = *(_QWORD *)(v6 + 8);
        }
        if (i == a3)
        {
          if ((uint64_t *)v6 != v5)
          {
            v9 = (uint64_t *)operator new(0x18uLL);
            v10 = v9;
            *v9 = 0;
            v9[1] = 0;
            *((_DWORD *)v9 + 4) = *(_DWORD *)(v6 + 16);
            v11 = *(_QWORD *)(v6 + 8);
            if ((uint64_t *)v11 == v5)
            {
              v12 = 1;
            }
            else
            {
              v12 = 1;
              v13 = v9;
              do
              {
                v9 = (uint64_t *)operator new(0x18uLL);
                *v9 = (uint64_t)v13;
                v9[1] = 0;
                *((_DWORD *)v9 + 4) = *(_DWORD *)(v11 + 16);
                v13[1] = (uint64_t)v9;
                ++v12;
                v11 = *(_QWORD *)(v11 + 8);
                v13 = v9;
              }
              while ((uint64_t *)v11 != v5);
            }
            v14 = *a3;
            *(_QWORD *)(v14 + 8) = v10;
            *v10 = v14;
            *a3 = (uint64_t)v9;
            v9[1] = (uint64_t)a3;
            a3[2] += v12;
          }
        }
        else
        {
          std::list<int>::erase((uint64_t)a3, i, a3);
        }
      }
      v5 += 3;
      a3 += 3;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_18EF8EA54(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_18EF8EA74(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::list<int>>,std::list<int>*,std::list<int>*,std::list<int>*>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;

  if (a1 == a2)
    return a3;
  v4 = a1;
  v5 = 0;
  v6 = a3;
  do
  {
    *v6 = v6;
    v6[1] = v6;
    v6[2] = 0;
    v7 = *(_QWORD *)(v4 + 8);
    if (v7 != v4)
    {
      v8 = 1;
      v9 = v6;
      do
      {
        v10 = operator new(0x18uLL);
        v10[4] = *(_DWORD *)(v7 + 16);
        *(_QWORD *)v10 = v9;
        *((_QWORD *)v10 + 1) = v6;
        *((_QWORD *)v9 + 1) = v10;
        *v6 = v10;
        v6[2] = v8;
        v7 = *(_QWORD *)(v7 + 8);
        ++v8;
        v9 = v10;
      }
      while (v7 != v4);
    }
    v4 += 24;
    v6 += 3;
    v5 += 24;
  }
  while (v4 != a2);
  return v6;
}

void sub_18EF8EB44(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;

  std::__list_imp<ID3FrameInfo>::clear(v2);
  if (v2 != v1)
  {
    v5 = v1 - 3;
    do
    {
      std::__list_imp<ID3FrameInfo>::clear((_QWORD *)((char *)v5 + v3));
      v3 -= 24;
    }
    while (v3);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::list<int>::erase(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (__p != a3)
  {
    v5 = *a3;
    v6 = *__p;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    do
    {
      v7 = (uint64_t *)__p[1];
      --*(_QWORD *)(a1 + 16);
      operator delete(__p);
      __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

size_t VBAP::VBAP(size_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t **a5)
{
  void **v8;
  unint64_t v9;
  const float **v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int32 *v19;
  int v20;
  int v21;
  unint64_t v22;
  __int32 *v23;
  __int32 *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  double v35;
  __double2 v36;
  __double2 v37;
  float v38;
  float v39;
  float sinval;
  VBAP *v41;
  const float *v42;
  const float *v43;
  NSObject *v44;
  const char *v45;
  int v46;
  vDSP_Length v47;
  double v48;
  float64x2_t v49;
  double v50;
  double v51;
  float64x2_t v52;
  double v53;
  float64x2_t v54;
  unint64_t v55;
  const float *v56;
  unsigned int v57;
  uint64_t v58;
  float64_t *v59;
  const double *v60;
  const double *v61;
  const double *v62;
  BOOL v63;
  int v64;
  NSObject *v65;
  const char *v66;
  unint64_t v67;
  float64x2_t v68;
  float64x2_t v69;
  double *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  float v80;
  float v81;
  float32x2_t *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  unint64_t v87;
  float32x2_t v88;
  uint64_t v89;
  float32x2_t v90;
  uint64_t v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  float v97;
  __int32 **v99;
  __int32 *v100;
  __int32 *v101;
  __int32 *v102;
  __int32 v103;
  __int32 *v104;
  __int32 *v105;
  uint64_t v106;
  __int32 *v107;
  __int32 *v108;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  void *v115;
  char *v116;
  void *v117;
  void *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  void *v136;
  char *v137;
  void *v138;
  void *v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  const float **v147;
  uint64_t v148;
  unsigned int v149;
  _QWORD *v151;
  _QWORD *v152;
  float32x2_t v153;
  const float **v154;
  _QWORD *v155;
  void *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  void *v160;
  void *v161;
  float32x2_t v162;
  float32x2_t v163;
  float32x2_t v164;
  void *v165;
  float32x2_t v166;
  uint64_t v167;
  float32x2_t v168;
  void *v169;
  void *v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  int **v174;
  int *v175;
  int *v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  float v180;
  const float *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  float v185;
  float v186;
  float v187;
  int v188;
  float *v189;
  float v190;
  float v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  float v196;
  float v197;
  float v198;
  float32x2_t **p_C;
  float32x2_t *v200;
  uint64_t v201;
  unint64_t v202;
  _DWORD *v203;
  _DWORD *v204;
  const float **v205;
  char *v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  float *v212;
  float v213;
  float v214;
  float v215;
  unsigned int v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  const double *v221;
  uint64_t v222;
  const float *v223;
  double *v224;
  double *v225;
  double *v226;
  float32x2_t *v227;
  double *v228;
  double v229;
  float64x2_t v230;
  double v231;
  double v232;
  float64x2_t v233;
  double v234;
  float64x2_t v235;
  BOOL v236;
  vDSP_Length *v237;
  vDSP_Length *v238;
  uint64_t i;
  unint64_t v240;
  unint64_t v241;
  vDSP_Length v242;
  float32x2_t *v243;
  vDSP_Length v244;
  __int32 *v245;
  __int32 v246;
  float *v247;
  unint64_t v248;
  uint64_t m;
  uint64_t v250;
  char *v251;
  char *v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  const float **v256;
  uint64_t v257;
  uint64_t v258;
  const float *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  char *v266;
  char *v267;
  int v268;
  unint64_t v269;
  uint64_t v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t n;
  char *v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  uint64_t v279;
  const float *v280;
  float v281;
  uint64_t v282;
  char *v283;
  float *v284;
  uint64_t v285;
  float v286;
  float v287;
  float v288;
  float v289;
  unsigned int v290;
  char *v291;
  uint64_t *v292;
  unint64_t v293;
  _QWORD *v294;
  _QWORD *v295;
  float *v296;
  float64x2_t v297;
  float64x2_t v298;
  char *v299;
  char *v300;
  void *v301;
  void *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  float *v309;
  uint64_t v310;
  const float *v311;
  vDSP_Length *v312;
  uint64_t v313;
  const float *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  float v318;
  uint64_t v319;
  float v320;
  float v321;
  uint64_t v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  uint64_t j;
  unsigned int v329;
  float v330;
  const float *v331;
  int v332;
  int v333;
  uint64_t k;
  float v335;
  float64x2_t v336;
  float64x2_t v337;
  double v338;
  uint64_t v340;
  float v341;
  float v342;
  _QWORD *v343;
  float *v344;
  uint64_t v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  char *v350;
  _DWORD *v351;
  char *v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  BOOL v356;
  unint64_t v357;
  uint64_t v358;
  _DWORD *v359;
  unint64_t v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  char v364;
  unint64_t v366;
  char **v367;
  _QWORD *v368;
  uint64_t *v369;
  const float **v370;
  char **v373;
  char **v374;
  __int32 **v375;
  void **v376;
  void *__p;
  char *v378;
  char *v379;
  void *v380;
  char *v381;
  char *v382;
  double *v383[3];
  double *v384[3];
  CDelaunayTriangles3D *v385[3];
  void *v386[3];
  float __B;
  float v388;
  float v389;
  float *v390[3];
  float *v391[3];
  VBAP *v392[3];
  uint64_t v393;
  double *__A;
  double *v395;
  uint64_t v396;
  double v397;
  double v398;
  double v399;
  _QWORD v400[2];
  uint64_t v401;
  int v402;
  uint64_t v403;
  int v404;
  float32x2_t *__C;
  float32x2_t *v406;
  float32x2_t v407;
  float v408;
  float32x2_t v409;
  float v410;
  void **v411;
  int v412;
  float32x2_t v413;
  float v414;
  float32x2_t buf[8];

  buf[5] = *(float32x2_t *)MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v375 = (__int32 **)(a1 + 8);
  v8 = (void **)(a1 + 32);
  v9 = ((a3[1] - *a3) >> 1) + ((a3[1] - *a3) >> 2);
  buf[0].i32[0] = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 32), v9, buf);
  v10 = (const float **)(a1 + 56);
  v11 = ((a3[1] - *a3) >> 1) + ((a3[1] - *a3) >> 2);
  buf[0].i32[0] = 0;
  v376 = v8;
  std::vector<float>::vector((_QWORD *)(a1 + 56), v11, buf);
  buf[0].i32[0] = 0;
  v374 = (char **)(a1 + 80);
  std::vector<float>::vector((_QWORD *)(a1 + 80), 6uLL, buf);
  *(_OWORD *)(a1 + 104) = 0u;
  v373 = (char **)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  v12 = (uint64_t *)(a1 + 152);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 176;
  *(_QWORD *)(a1 + 184) = a1 + 176;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 200;
  *(_QWORD *)(a1 + 208) = a1 + 200;
  *(_QWORD *)(a1 + 216) = 0;
  std::__list_imp<ID3FrameInfo>::clear((_QWORD *)(a1 + 176));
  std::__list_imp<ID3FrameInfo>::clear((_QWORD *)(a1 + 200));
  *(_OWORD *)(a1 + 224) = 0u;
  v13 = (_QWORD *)(a1 + 224);
  *(_WORD *)(a1 + 314) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)a1 = 1;
  v14 = a3[1] - *a3;
  *(_DWORD *)(a1 + 300) = v14 >> 2;
  if ((v14 >> 2) && (a2[1] - *a2) >> 2 == v14 >> 2)
  {
    v367 = (char **)(a1 + 128);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    std::vector<float>::vector(v392, ((unint64_t)v14 >> 2));
    std::vector<float>::vector(v391, *(unsigned int *)(a1 + 300));
    std::vector<float>::vector(v390, *(unsigned int *)(a1 + 300));
    LODWORD(v15) = *(_DWORD *)(a1 + 300);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = *a2;
      v18 = *a3;
      v19 = *(__int32 **)(a1 + 16);
      do
      {
        v20 = *(_DWORD *)(v17 + 4 * v16);
        v21 = *(_DWORD *)(v18 + 4 * v16);
        v22 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v19 >= v22)
        {
          v24 = *v375;
          v25 = ((char *)v19 - (char *)*v375) >> 3;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v27 = v22 - (_QWORD)v24;
          if (v27 >> 2 > v26)
            v26 = v27 >> 2;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            if (v28 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v29 = (char *)operator new(8 * v28);
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[8 * v25];
          *(_DWORD *)v30 = v20;
          *((_DWORD *)v30 + 1) = v21;
          v31 = v30;
          if (v19 != v24)
          {
            do
            {
              v32 = *((_QWORD *)v19 - 1);
              v19 -= 2;
              *((_QWORD *)v31 - 1) = v32;
              v31 -= 8;
            }
            while (v19 != v24);
            v19 = *v375;
          }
          v23 = (__int32 *)(v30 + 8);
          *(_QWORD *)(a1 + 8) = v31;
          *(_QWORD *)(a1 + 16) = v30 + 8;
          *(_QWORD *)(a1 + 24) = &v29[8 * v28];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *v19 = v20;
          v19[1] = v21;
          v23 = v19 + 2;
        }
        *(_QWORD *)(a1 + 16) = v23;
        v17 = *a2;
        v18 = *a3;
        v33 = *(_QWORD *)(a1 + 56);
        v34 = (float *)(v33 + 4 * (3 * v16));
        v35 = *(float *)(*a2 + 4 * v16) * 0.0174532925;
        v36 = __sincos_stret(*(float *)(*a3 + 4 * v16) * 0.0174532925);
        v37 = __sincos_stret(v35);
        v38 = v37.__cosval * v36.__cosval;
        v39 = v37.__sinval * v36.__cosval;
        *v34 = v38;
        v34[1] = v39;
        sinval = v36.__sinval;
        v34[2] = sinval;
        v41 = v392[0];
        *((float *)v392[0] + v16) = v38;
        v42 = v391[0];
        v391[0][v16] = *(float *)(v33 + 4 * (3 * v16 + 1));
        v43 = v390[0];
        v390[0][v16] = *(float *)(v33 + 4 * (3 * v16 + 2));
        ++v16;
        v15 = *(unsigned int *)(a1 + 300);
        v19 = v23;
        v8 = v376;
      }
      while (v16 < v15);
      v12 = (uint64_t *)(a1 + 152);
      v10 = (const float **)(a1 + 56);
      v13 = (_QWORD *)(a1 + 224);
    }
    else
    {
      v41 = v392[0];
      v42 = v391[0];
      v43 = v390[0];
    }
    if (VBAP::find_duplicate_vertex(v41, v42, v43, (const float *)v15))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        buf[0].i32[0] = 136315906;
        *(float32x2_t *)((char *)buf + 4) = (float32x2_t)"VBAP.cpp";
        buf[1].i16[2] = 1024;
        *(__int32 *)((char *)&buf[1].i32[1] + 2) = 112;
        buf[2].i16[1] = 2080;
        *(float32x2_t *)((char *)&buf[2] + 4) = (float32x2_t)"initialize";
        buf[3].i16[2] = 1024;
        *(__int32 *)((char *)&buf[3].i32[1] + 2) = 112;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Duplicate vertices were found",
          (uint8_t *)buf,
          0x22u);
      }
      v46 = -50;
      goto LABEL_377;
    }
    if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 16)
    {
      LODWORD(__C) = 0;
      vDSP_distancesq(*v10, 1, *v10 + 3, 1, (float *)&__C, 3uLL);
      if (fabsf(*(float *)&__C + -4.0) < 0.00001)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          buf[0].i32[0] = 136315906;
          *(float32x2_t *)((char *)buf + 4) = (float32x2_t)"VBAP.cpp";
          buf[1].i16[2] = 1024;
          *(__int32 *)((char *)&buf[1].i32[1] + 2) = 121;
          buf[2].i16[1] = 2080;
          *(float32x2_t *)((char *)&buf[2] + 4) = (float32x2_t)"initialize";
          buf[3].i16[2] = 1024;
          *(__int32 *)((char *)&buf[3].i32[1] + 2) = 121;
          _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d CADSPUtility:%s:%d: Diametrically opposed speakers; No need to generate convex hull",
            (uint8_t *)buf,
            0x22u);
        }
        v46 = 0;
        *(_BYTE *)(a1 + 314) = 1;
        goto LABEL_377;
      }
      *(_BYTE *)(a1 + 314) = 0;
    }
    v47 = *(unsigned int *)(a1 + 300);
    if ((_DWORD)v47 == 1)
    {
      *(_WORD *)(a1 + 312) = 1;
      buf[0].i32[0] = 0;
      std::vector<float>::resize(v374, 0, buf);
      goto LABEL_376;
    }
    v370 = v10;
    vDSP_meanv(*v10, 3, &__B, v47);
    vDSP_meanv((const float *)(*(_QWORD *)(a1 + 56) + 4), 3, &v388, *(unsigned int *)(a1 + 300));
    vDSP_meanv((const float *)(*(_QWORD *)(a1 + 56) + 8), 3, &v389, *(unsigned int *)(a1 + 300));
    std::vector<float>::vector(v386, (3 * *(_DWORD *)(a1 + 300)));
    std::vector<double>::vector(v385, *(unsigned int *)(a1 + 300));
    std::vector<double>::vector(v384, *(unsigned int *)(a1 + 300));
    std::vector<double>::vector(v383, *(unsigned int *)(a1 + 300));
    if (*(_DWORD *)(a1 + 300))
    {
      v55 = 0;
      v56 = *v370;
      v57 = 2;
      do
      {
        v58 = v57 - 2;
        vDSP_vsub(&__B, 1, &v56[v58], 1, (float *)v386[0] + v58, 1, 3uLL);
        v56 = *(const float **)(a1 + 56);
        v59 = (float64_t *)v385[0];
        *((double *)v385[0] + v55) = v56[v58];
        v60 = v384[0];
        v384[0][v55] = v56[v57 - 1];
        v48 = v56[v57];
        v61 = v383[0];
        v383[0][v55++] = v48;
        v62 = (const double *)*(unsigned int *)(a1 + 300);
        v57 += 3;
      }
      while (v55 < (unint64_t)v62);
    }
    else
    {
      v62 = 0;
      v59 = (float64_t *)v385[0];
      v60 = v384[0];
      v61 = v383[0];
    }
    v63 = CDelaunayTriangles3D::check_coplanar(v59, v60, v61, v62, v48, v49, v50, v51, v52, v53, v54);
    *(_BYTE *)(a1 + 312) = v63;
    *(_BYTE *)(a1 + 313) = !v63;
    v64 = *(_DWORD *)a1;
    if (v63)
    {
      if (v64 == 1)
      {
        v64 = 0;
        *(_DWORD *)a1 = 0;
      }
      v380 = 0;
      v381 = 0;
      v382 = 0;
      __p = 0;
      v378 = 0;
      v379 = 0;
      goto LABEL_203;
    }
    v380 = 0;
    v381 = 0;
    v382 = 0;
    __p = 0;
    v378 = 0;
    v379 = 0;
    if (v64 != 1)
      goto LABEL_203;
    v46 = VBAP::delaunayTriangulation(a1, v386, a4, a5);
    if (v46)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        buf[0].i32[0] = 136315906;
        *(float32x2_t *)((char *)buf + 4) = (float32x2_t)"VBAP.cpp";
        buf[1].i16[2] = 1024;
        *(__int32 *)((char *)&buf[1].i32[1] + 2) = 163;
        buf[2].i16[1] = 2080;
        *(float32x2_t *)((char *)&buf[2] + 4) = (float32x2_t)"initialize";
        buf[3].i16[2] = 1024;
        *(__int32 *)((char *)&buf[3].i32[1] + 2) = 163;
        v65 = MEMORY[0x1E0C81028];
        v66 = "%25s:%-5d CADSPUtility:%s:%d: VBAP error, Delaunay triangulation issue";
        goto LABEL_364;
      }
LABEL_365:
      v364 = 0;
      goto LABEL_367;
    }
    __A = 0;
    v395 = 0;
    v396 = 0;
    v67 = (uint64_t)(*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 2;
    v413.i32[0] = 0;
    v368 = v13;
    v369 = v12;
    std::vector<float>::resize((char **)&__A, v67, &v413);
    v70 = __A;
    if ((unint64_t)((char *)v395 - (char *)__A) >= 0xC)
    {
      LODWORD(v71) = 0;
      v72 = (((char *)v395 - (char *)__A) >> 2) / 3uLL;
      v73 = *v13;
      v74 = (float *)v386[0];
      do
      {
        v75 = 0;
        v76 = (3 * v71);
        v77 = 3 * *(_DWORD *)(v73 + 4 * v76);
        v78 = 3 * *(_DWORD *)(v73 + 4 * (v76 + 1));
        v79 = 3 * *(_DWORD *)(v73 + 4 * (v76 + 2));
        do
        {
          v80 = v74[(v77 + v75)];
          v81 = v74[(v79 + v75)];
          buf[0].f32[v75] = v74[(v78 + v75)] - v80;
          *((float *)&__C + v75++) = v81 - v80;
        }
        while (v75 != 3);
        v82 = (float32x2_t *)((char *)v70 + 4 * v76);
        v83 = vcvtq_f64_f32(buf[0]);
        v68.f64[0] = buf[1].f32[0];
        v84 = vcvtq_f64_f32((float32x2_t)__C);
        v69.f64[0] = *(float *)&v406;
        v85 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v68), v84, 1), v69, v83, 1);
        v69.f64[1] = v84.f64[0];
        v68.f64[1] = v83.f64[0];
        v86 = vmlaq_f64(vmulq_f64(v69, vnegq_f64(v83)), v84, v68);
        v68 = vmulq_f64(v86, v86);
        v84.f64[0] = vmulq_f64(v85, v85).f64[0];
        v85.f64[1] = v86.f64[0];
        v68.f64[0] = 1.0 / sqrt(v68.f64[1] + v84.f64[0] + v68.f64[0]);
        *v82 = vcvt_f32_f64(vmulq_n_f64(v85, v68.f64[0]));
        *(float *)v86.f64 = vmulq_laneq_f64(v68, v86, 1).f64[0];
        v82[1].i32[0] = LODWORD(v86.f64[0]);
        v71 = (v71 + 1);
      }
      while (v72 > v71);
      v366 = v72;
      memset(buf, 0, 24);
      v414 = 0.0;
      v413 = 0;
      v412 = 0;
      v411 = 0;
      std::vector<std::vector<unsigned int>>::__clear[abi:ne180100](v12);
      LODWORD(v87) = 0;
      v88 = (float32x2_t)vdup_n_s32(0x47C35000u);
      do
      {
        v89 = (3 * v87);
        v90.i32[0] = *((_DWORD *)v70 + v89);
        v90.i32[1] = *((_DWORD *)v70 + (v89 + 1));
        v413 = vrnda_f32(vmul_f32(v90, v88));
        v414 = roundf(*((float *)v70 + (v89 + 2)) * 100000.0);
        if ((_DWORD)v87)
        {
          if (*(_QWORD *)&buf[1] != *(_QWORD *)buf)
          {
            v91 = 0;
            v92 = 0;
            v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[1] - *(_QWORD *)buf) >> 3);
            while (1)
            {
              v94 = 0;
              v95 = *(_QWORD *)(*(_QWORD *)buf + 24 * v91);
              v411 = *(void ***)v95;
              v412 = *(_DWORD *)(v95 + 8);
              do
              {
                v96 = *(float *)((char *)&v411 + v94 * 4);
                v97 = v413.f32[v94];
              }
              while (v96 == v97 && v94++ != 2);
              if (v96 == v97)
                goto LABEL_74;
              if (v93 - 1 == v91)
                break;
              v91 = ++v92;
              if (v93 <= v92)
                goto LABEL_75;
            }
            std::vector<std::vector<float>>::resize((uint64_t *)buf, v92 + 2);
            v91 = v92 + 1;
            __C = (float32x2_t *)(*(_QWORD *)buf + 24 * v91);
            std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&__C, &v413);
            std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&__C, (_DWORD *)&v413 + 1);
            std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&__C, &v414);
            std::vector<std::vector<float>>::resize(v369, v92 + 2);
LABEL_74:
            std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<int *,int *,std::back_insert_iterator<std::vector<unsigned int>>>((int *)(*v368 + 4 * v89), (int *)(*v368 + 4 * v89 + 12), *v369 + 24 * v91);
          }
        }
        else
        {
          std::vector<std::vector<float>>::resize((uint64_t *)buf, 1uLL);
          __C = (float32x2_t *)buf[0];
          std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&__C, &v413);
          std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&__C, (_DWORD *)&v413 + 1);
          std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&__C, &v414);
          std::vector<std::vector<float>>::resize(v369, 1uLL);
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<int *,int *,std::back_insert_iterator<std::vector<unsigned int>>>((int *)(*v368 + 4 * v89), (int *)(*v368 + 4 * (v89 + 3)), *v369);
        }
LABEL_75:
        v87 = (v87 + 1);
      }
      while (v366 > v87);
    }
    else
    {
      memset(buf, 0, 24);
      v414 = 0.0;
      v413 = 0;
      v412 = 0;
      v411 = 0;
      std::vector<std::vector<unsigned int>>::__clear[abi:ne180100](v12);
    }
    v99 = *(__int32 ***)(a1 + 152);
    if (v99 == *(__int32 ***)(a1 + 160))
    {
      v12 = v369;
    }
    else
    {
      v12 = v369;
      do
      {
        v100 = *v99;
        v101 = v99[1];
        if (*v99 != v101)
        {
          v102 = *v99;
          do
          {
            v103 = *v102++;
            v104 = wmemchr(v102, v103, v101 - v102);
            if (v104)
              v105 = v104;
            else
              v105 = v101;
            v106 = v105 - v102 + 1;
            v107 = &v100[v106];
            v108 = v107 + 1;
            if (v107 != v101 && v108 != v101)
            {
              do
              {
                if (*v108 != *v100)
                  v100[v106++] = *v108;
                ++v108;
              }
              while (v108 != v101);
            }
            v101 = &v100[v106];
            v100 = v102;
          }
          while (v106 != 1);
          if (v102 != v99[1])
            v99[1] = v102;
        }
        v99 += 3;
      }
      while (v99 != *(__int32 ***)(a1 + 160));
    }
    v8 = v376;
    if (v12 != (uint64_t *)&__p)
    {
      v110 = *v12;
      v111 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v99 - *v12) >> 3);
      v112 = (uint64_t)v379;
      v113 = (char *)__p;
      if (0xAAAAAAAAAAAAAAABLL * ((v379 - (_BYTE *)__p) >> 3) < v111)
      {
        if (__p)
        {
          v114 = v378;
          v115 = __p;
          if (v378 != __p)
          {
            v116 = v378;
            do
            {
              v118 = (void *)*((_QWORD *)v116 - 3);
              v116 -= 24;
              v117 = v118;
              if (v118)
              {
                *((_QWORD *)v114 - 2) = v117;
                operator delete(v117);
              }
              v114 = v116;
            }
            while (v116 != v113);
            v115 = __p;
          }
          v378 = v113;
          operator delete(v115);
          v112 = 0;
          __p = 0;
          v378 = 0;
          v379 = 0;
        }
        if (v111 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_393;
        v119 = 0xAAAAAAAAAAAAAAABLL * (v112 >> 3);
        v120 = 2 * v119;
        if (2 * v119 <= v111)
          v120 = v111;
        v121 = v119 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v120;
        if (v121 > 0xAAAAAAAAAAAAAAALL)
LABEL_393:
          std::vector<float>::__throw_length_error[abi:ne180100]();
        __p = std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v121);
        v378 = (char *)__p;
        v379 = (char *)__p + 24 * v122;
        v123 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>((uint64_t)&v379, v110, (uint64_t)v99, __p);
        goto LABEL_116;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v378 - (_BYTE *)__p) >> 3) < v111)
      {
        v124 = v110 + 8 * ((v378 - (_BYTE *)__p) >> 3);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(*v12, v124, (char *)__p);
        v123 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>((uint64_t)&v379, v124, (uint64_t)v99, v378);
LABEL_116:
        v378 = v123;
        goto LABEL_123;
      }
      v125 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(*v12, (uint64_t)v99, (char *)__p);
      v126 = v378;
      if (v378 != v125)
      {
        v127 = v378;
        do
        {
          v129 = (void *)*((_QWORD *)v127 - 3);
          v127 -= 24;
          v128 = v129;
          if (v129)
          {
            *((_QWORD *)v126 - 2) = v128;
            operator delete(v128);
          }
          v126 = v127;
        }
        while (v127 != v125);
      }
      v378 = v125;
    }
LABEL_123:
    v131 = (uint64_t)buf[0];
    v130 = (uint64_t)buf[1];
    v132 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[1] - *(_QWORD *)buf) >> 3);
    v133 = (uint64_t)v382;
    v134 = (char *)v380;
    if (0xAAAAAAAAAAAAAAABLL * ((v382 - (_BYTE *)v380) >> 3) >= v132)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v381 - (_BYTE *)v380) >> 3) >= v132)
      {
        v146 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(*(_QWORD *)buf, *(_QWORD *)&buf[1], (char *)v380);
        v299 = v381;
        if (v381 != v146)
        {
          v300 = v381;
          do
          {
            v302 = (void *)*((_QWORD *)v300 - 3);
            v300 -= 24;
            v301 = v302;
            if (v302)
            {
              *((_QWORD *)v299 - 2) = v301;
              operator delete(v301);
            }
            v299 = v300;
          }
          while (v300 != v146);
        }
        goto LABEL_143;
      }
      v145 = *(_QWORD *)buf + 8 * ((v381 - (_BYTE *)v380) >> 3);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(*(_QWORD *)buf, v145, (char *)v380);
      v144 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)&v382, v145, v130, v381);
    }
    else
    {
      if (v380)
      {
        v135 = v381;
        v136 = v380;
        if (v381 != v380)
        {
          v137 = v381;
          do
          {
            v139 = (void *)*((_QWORD *)v137 - 3);
            v137 -= 24;
            v138 = v139;
            if (v139)
            {
              *((_QWORD *)v135 - 2) = v138;
              operator delete(v138);
            }
            v135 = v137;
          }
          while (v137 != v134);
          v136 = v380;
        }
        v381 = v134;
        operator delete(v136);
        v133 = 0;
        v380 = 0;
        v381 = 0;
        v382 = 0;
      }
      if (v132 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_392;
      v140 = 0xAAAAAAAAAAAAAAABLL * (v133 >> 3);
      v141 = 2 * v140;
      if (2 * v140 <= v132)
        v141 = 0xAAAAAAAAAAAAAAABLL * ((v130 - v131) >> 3);
      v142 = v140 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v141;
      if (v142 > 0xAAAAAAAAAAAAAAALL)
LABEL_392:
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v380 = std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v142);
      v381 = (char *)v380;
      v382 = (char *)v380 + 24 * v143;
      v144 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)&v382, v131, v130, v380);
    }
    v146 = v144;
LABEL_143:
    v381 = v146;
    LODWORD(v403) = 925353388;
    v147 = (const float **)v380;
    if (v146 != v380)
    {
      v148 = 0;
      v149 = 1;
      do
      {
        vDSP_vsmul(v147[3 * v148], 1, (const float *)&v403, (float *)v147[3 * v148], 1, 3uLL);
        v148 = v149;
        v147 = (const float **)v380;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v381 - (_BYTE *)v380) >> 3) > v149++);
    }
    v151 = *(_QWORD **)(a1 + 152);
    v152 = *(_QWORD **)(a1 + 160);
    if (v151 == v152)
    {
      v152 = *(_QWORD **)(a1 + 152);
      v154 = v370;
    }
    else
    {
      v153 = buf[0];
      v154 = v370;
      do
      {
        if (v151[1] - *v151 > 0xFuLL)
        {
          v151 += 3;
          *(_QWORD *)&v153 += 24;
        }
        else
        {
          if (v151 + 3 == v152)
          {
            v157 = v151;
          }
          else
          {
            v155 = v151;
            do
            {
              v156 = (void *)*v155;
              if (*v155)
              {
                v155[1] = v156;
                operator delete(v156);
                *v155 = 0;
                v155[1] = 0;
                v155[2] = 0;
              }
              v157 = v155 + 3;
              *(_OWORD *)v155 = *(_OWORD *)(v155 + 3);
              v155[2] = v155[5];
              v155[4] = 0;
              v155[5] = 0;
              v155[3] = 0;
              v158 = v155 + 6;
              v155 += 3;
            }
            while (v158 != v152);
            v152 = *(_QWORD **)(a1 + 160);
          }
          if (v152 != v157)
          {
            v159 = v152;
            do
            {
              v161 = (void *)*(v159 - 3);
              v159 -= 3;
              v160 = v161;
              if (v161)
              {
                *(v152 - 2) = v160;
                operator delete(v160);
              }
              v152 = v159;
            }
            while (v159 != v157);
          }
          *(_QWORD *)(a1 + 160) = v157;
          v162 = (float32x2_t)(*(_QWORD *)&v153 + 24);
          v163 = buf[1];
          if (*(_QWORD *)&v153 + 24 == *(_QWORD *)&buf[1])
          {
            v166 = v153;
          }
          else
          {
            v164 = v153;
            do
            {
              v165 = **(void ***)&v164;
              if (**(_QWORD **)&v164)
              {
                *(_QWORD *)(*(_QWORD *)&v164 + 8) = v165;
                operator delete(v165);
                **(_QWORD **)&v164 = 0;
                *(_QWORD *)(*(_QWORD *)&v164 + 8) = 0;
                *(_QWORD *)(*(_QWORD *)&v164 + 16) = 0;
              }
              v166 = (float32x2_t)(*(_QWORD *)&v164 + 24);
              *(_OWORD *)*(_QWORD *)&v164 = *(_OWORD *)(*(_QWORD *)&v164 + 24);
              *(_QWORD *)(*(_QWORD *)&v164 + 16) = *(_QWORD *)(*(_QWORD *)&v164 + 40);
              *(_QWORD *)(*(_QWORD *)&v164 + 32) = 0;
              *(_QWORD *)(*(_QWORD *)&v164 + 40) = 0;
              *(_QWORD *)(*(_QWORD *)&v164 + 24) = 0;
              v167 = *(_QWORD *)&v164 + 48;
              *(_QWORD *)&v164 += 24;
            }
            while (v167 != *(_QWORD *)&v163);
            v162 = buf[1];
          }
          v8 = v376;
          if (*(_QWORD *)&v162 != *(_QWORD *)&v166)
          {
            v168 = v162;
            do
            {
              v170 = *(void **)(*(_QWORD *)&v168 - 24);
              *(_QWORD *)&v168 -= 24;
              v169 = v170;
              if (v170)
              {
                *(_QWORD *)(*(_QWORD *)&v162 - 16) = v169;
                operator delete(v169);
              }
              v162 = v168;
            }
            while (*(_QWORD *)&v168 != *(_QWORD *)&v166);
          }
          buf[1] = v166;
          v152 = *(_QWORD **)(a1 + 160);
          v154 = v370;
        }
      }
      while (v151 != v152);
      v151 = (_QWORD *)*v12;
    }
    LODWORD(__C) = 0;
    std::vector<float>::resize(v374, v152 - v151, &__C);
    v171 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 3);
    LODWORD(__C) = 0;
    std::vector<float>::resize(v373, v171, &__C);
    v172 = *(_QWORD *)(a1 + 152);
    if (*(_QWORD *)(a1 + 160) != v172)
    {
      v173 = 0;
      do
      {
        v174 = (int **)(v172 + 24 * v173);
        v175 = *v174;
        v176 = v174[1];
        v177 = *v374;
        v178 = (char *)v176 - (char *)v175;
        if (v178)
        {
          v179 = v178 >> 2;
          v180 = (float)(unint64_t)(v178 >> 2);
          v181 = *v154;
          v182 = (3 * v173);
          v183 = (v182 + 1);
          v184 = (v182 + 2);
          v185 = *(float *)&v177[4 * v182];
          v186 = *(float *)&v177[4 * v183];
          v187 = *(float *)&v177[4 * v184];
          if (v179 <= 1)
            v179 = 1;
          do
          {
            v188 = *v175++;
            v185 = (float)(v181[3 * v188] / v180) + v185;
            *(float *)&v177[4 * v182] = v185;
            v186 = v186 + (float)(v181[3 * v188 + 1] / v180);
            *(float *)&v177[4 * v183] = v186;
            v187 = v187 + (float)(v181[3 * v188 + 2] / v180);
            *(float *)&v177[4 * v184] = v187;
            --v179;
          }
          while (v179);
        }
        else
        {
          v182 = (3 * v173);
        }
        LODWORD(v401) = 0;
        vDSP_dotpr(*(const float **)(*(_QWORD *)buf + 24 * v173), 1, (const float *)&v177[4 * v182], 1, (float *)&v401, 3uLL);
        if (*(float *)&v401 == 0.0)
        {
          v192 = 0;
          *(_DWORD *)&(*v373)[4 * v173] = 1065353216;
          v193 = *(_QWORD *)(*(_QWORD *)buf + 24 * v173);
          v194 = (uint64_t)&(*v374)[4 * v182];
          do
          {
            v409.f32[v192] = *(float *)(v194 + v192 * 4) - (float)(*(float *)(v193 + v192 * 4) / 100000.0);
            v407.f32[v192] = *(float *)(v194 + v192 * 4) + (float)(*(float *)(v193 + v192 * 4) / 100000.0);
            ++v192;
          }
          while (v192 != 3);
          VBAP::lineUnitSphereIntersection((VBAP *)&v409, (const float *)&v407, (float *)&__C, v189);
          v195 = 0;
          v196 = 0.0;
          v197 = 0.0;
          do
          {
            v198 = *(float *)&(*v374)[4 * v182 + v195];
            v197 = (float)(v198 - *(float *)((char *)&__C + v195)) * (float)(v198 - *(float *)((char *)&__C + v195))
                 + v197;
            v196 = (float)(v198 - *(float *)((char *)&v406 + v195 + 4))
                 * (float)(v198 - *(float *)((char *)&v406 + v195 + 4))
                 + v196;
            v195 += 4;
          }
          while (v195 != 12);
          p_C = (float32x2_t **)((char *)&v406 + 4);
          if (v196 <= v197)
            p_C = &__C;
          v200 = *p_C;
          v201 = (uint64_t)&(*v374)[4 * v182];
          *(_DWORD *)(v201 + 8) = *((_DWORD *)p_C + 2);
          *(_QWORD *)v201 = v200;
        }
        else
        {
          LODWORD(__C) = 0;
          vDSP_dotpr((const float *)&(*v374)[4 * v182], 1, (const float *)&(*v374)[4 * v182], 1, (float *)&__C, 3uLL);
          v190 = sqrtf(*(float *)&__C);
          *(float *)&(*v373)[4 * v173] = v190;
          v191 = 1.0 / v190;
          *(float *)&__C = v191;
          if (*(float *)&v401 < 0.0)
            *(float *)&__C = -v191;
          vDSP_vsmul((const float *)&(*v374)[4 * v182], 1, (const float *)&__C, (float *)&(*v374)[4 * v182], 1, 3uLL);
        }
        ++v173;
        v172 = *(_QWORD *)(a1 + 152);
        v8 = v376;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 160) - v172) >> 3) > v173);
    }
    __C = buf;
    std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__C);
    if (*(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 152))
    {
      *(_DWORD *)a1 = 0;
      buf[0].i32[0] = 0;
      std::vector<float>::assign(v374, 6uLL, buf);
    }
    if (__A)
      operator delete(__A);
    v64 = *(_DWORD *)a1;
LABEL_203:
    if (v64)
      goto LABEL_204;
    v414 = 0.0;
    v413 = 0;
    v412 = 0;
    v411 = 0;
    v410 = 0.0;
    v409 = 0;
    v408 = 0.0;
    v407 = 0;
    v404 = 0;
    v403 = 0;
    v402 = 0;
    v401 = 0;
    memset(v400, 0, 12);
    LODWORD(v217) = *(_DWORD *)(a1 + 300);
    if (!*(_BYTE *)(a1 + 313))
    {
      v398 = 0.0;
      v399 = 0.0;
      v397 = 0.0;
      __C = 0;
      std::vector<double>::vector(buf, (v217 + 1), &__C);
      v218 = (*(_DWORD *)(a1 + 300) + 1);
      __A = 0;
      std::vector<double>::vector(&__C, v218, &__A);
      v219 = (*(_DWORD *)(a1 + 300) + 1);
      v393 = 0;
      std::vector<double>::vector(&__A, v219, &v393);
      v220 = *(unsigned int *)(a1 + 300);
      v221 = (const double *)buf[0];
      if ((_DWORD)v220)
      {
        v222 = 0;
        v223 = *v370;
        v224 = (double *)__C;
        v225 = (double *)buf[0];
        v226 = __A;
        do
        {
          *v225++ = v223[v222];
          *v224++ = v223[(v222 + 1)];
          *v226++ = v223[(v222 + 2)];
          v222 += 3;
        }
        while (3 * v220 != v222);
      }
      vDSP_meanvD(v221, 1, &v399, (v220 + 1));
      vDSP_meanvD((const double *)__C, 1, &v398, (*(_DWORD *)(a1 + 300) + 1));
      vDSP_meanvD(__A, 1, &v397, (*(_DWORD *)(a1 + 300) + 1));
      v398 = -v398;
      v399 = -v399;
      v397 = -v397;
      vDSP_vsaddD((const double *)buf[0], 1, &v399, (double *)buf[0], 1, (*(_DWORD *)(a1 + 300) + 1));
      vDSP_vsaddD((const double *)__C, 1, &v398, (double *)__C, 1, (*(_DWORD *)(a1 + 300) + 1));
      vDSP_vsaddD(__A, 1, &v397, __A, 1, (*(_DWORD *)(a1 + 300) + 1));
      v227 = __C;
      v228 = __A;
      v236 = CDelaunayTriangles3D::check_coplanar((float64_t *)buf[0], (const double *)__C, __A, (const double *)(*(_DWORD *)(a1 + 300) + 1), v229, v230, v231, v232, v233, v234, v235);
      if (v228)
      {
        v395 = v228;
        operator delete(v228);
        v227 = __C;
      }
      if (v227)
      {
        v406 = v227;
        operator delete(v227);
      }
      if (buf[0])
      {
        buf[1] = buf[0];
        operator delete(*(void **)buf);
      }
      v217 = *(unsigned int *)(a1 + 300);
      if (v236)
      {
        if (v217 < 3)
        {
          vDSP_meanv(*v370, 3, (float *)&v413, *(unsigned int *)(a1 + 300));
          vDSP_meanv((const float *)(*(_QWORD *)(a1 + 56) + 4), 3, (float *)&v413 + 1, *(unsigned int *)(a1 + 300));
          vDSP_meanv((const float *)(*(_QWORD *)(a1 + 56) + 8), 3, &v414, *(unsigned int *)(a1 + 300));
        }
        else
        {
          v237 = (vDSP_Length *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(*(unsigned int *)(a1 + 300));
          v238 = v237;
          for (i = 0; i != v217; ++i)
            v237[i] = 0;
          v240 = ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 2) + 3;
          LODWORD(__C) = 0;
          std::vector<float>::vector(buf, v240, &__C);
          v241 = *(unsigned int *)(a1 + 300);
          LODWORD(__A) = 0;
          std::vector<float>::vector(&__C, v241, &__A);
          v242 = *(unsigned int *)(a1 + 300);
          v243 = __C;
          if ((_DWORD)v242)
          {
            v244 = 0;
            v245 = *v375;
            do
            {
              v238[v244] = v244;
              v246 = *v245;
              v245 += 2;
              v243->i32[v244++] = v246;
            }
            while (v242 != v244);
          }
          else
          {
            v242 = 0;
          }
          vDSP_vsorti((const float *)v243, v238, 0, v242, -1);
          v308 = *(unsigned int *)(a1 + 300);
          v309 = (float *)buf[0];
          if ((_DWORD)v308)
          {
            v310 = 0;
            v311 = *v370;
            v312 = v238;
            do
            {
              v313 = *v312++;
              v314 = &v311[3 * v313];
              v309[v310] = *v314;
              v309[(v310 + 1)] = v314[1];
              v309[(v310 + 2)] = v314[2];
              v310 += 3;
            }
            while (3 * v308 != v310);
          }
          v315 = 0;
          v316 = *(_QWORD *)&buf[1] - 12;
          do
          {
            *(float *)(v316 + v315 * 4) = v309[v315];
            ++v315;
          }
          while (v315 != 3);
          if ((_DWORD)v308)
          {
            v317 = 0;
            v318 = 0.0;
            do
            {
              v318 = v318
                   + (float)((float)((float)(v309[v317] * v309[(v317 + 4)])
                                   - (float)(v309[(v317 + 3)] * v309[(v317 + 1)]))
                           * 0.5);
              v317 += 3;
            }
            while (3 * v308 != v317);
            v319 = 0;
            v321 = v413.f32[1];
            v320 = v413.f32[0];
            v322 = 3 * v308;
            do
            {
              v323 = v309[(v319 + 3)];
              v320 = v320
                   + (float)((float)((float)((float)(v309[v319] + v323)
                                           * (float)((float)(v309[v319] * v309[(v319 + 4)])
                                                   - (float)(v323 * v309[(v319 + 1)])))
                                   / 6.0)
                           / v318);
              v413.f32[0] = v320;
              v324 = v309[(v319 + 1)];
              v325 = v309[(v319 + 4)];
              v326 = (float)((float)((float)(v324 + v325)
                                   * (float)((float)(v309[v319] * v325)
                                           - (float)(v309[(v319 + 3)] * v324)))
                           / 6.0)
                   / v318;
              v327 = v309[2];
              v321 = v321 + v326;
              v413.f32[1] = v321;
              v414 = v327;
              v319 += 3;
            }
            while (v322 != v319);
          }
          if (!__C || (v406 = __C, operator delete(__C), (v309 = (float *)buf[0]) != 0))
          {
            buf[1] = (float32x2_t)v309;
            operator delete(v309);
          }
          if (v238)
            operator delete(v238);
        }
        for (j = 0; j != 3; ++j)
          *(float *)((char *)&v411 + j * 4) = -v413.f32[j];
        v329 = *(_DWORD *)(a1 + 300);
        v330 = 0.0;
        if (v329 >= 2)
        {
          v331 = *v370;
          v332 = 1;
          v333 = 3;
          do
          {
            for (k = 0; k != 3; ++k)
            {
              v335 = v413.f32[k];
              v409.f32[k] = v335 + v331[k];
              v407.f32[k] = v335 + v331[(v333 + k)];
            }
            v336 = vcvtq_f64_f32(v409);
            v297.f64[0] = v410;
            v337 = vcvtq_f64_f32(v407);
            v298.f64[0] = v408;
            v338 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v297), v337, 1), v298, v336, 1).f64[0];
            v298.f64[1] = v337.f64[0];
            v297.f64[1] = v336.f64[0];
            v298 = vmlaq_f64(vmulq_f64(v298, vnegq_f64(v336)), v337, v297);
            v330 = v338;
            *(float32x2_t *)&v297.f64[0] = vcvt_f32_f64(v298);
            if (fabsf(v330) >= 0.00001 || fabsf(*(float *)v297.f64) >= 0.00001)
              break;
            ++v332;
            v333 += 3;
          }
          while (fabsf(*((float *)v297.f64 + 1)) < 0.00001 && v332 != v329);
          *(float64_t *)((char *)v400 + 4) = v297.f64[0];
        }
        v340 = 0;
        *(float *)v400 = v330;
        do
        {
          v341 = *(float *)((char *)&v411 + v340);
          v342 = *(float *)((char *)v400 + v340);
          *(float *)((char *)&v403 + v340) = v341 + v342;
          *(float *)((char *)&v401 + v340) = v341 - v342;
          v340 += 4;
        }
        while (v340 != 12);
        VBAP::lineUnitSphereIntersection((VBAP *)&v403, (const float *)&v401, (float *)*v374, v296);
        goto LABEL_204;
      }
    }
    vDSP_meanv(*v370, 3, (float *)&v413, v217);
    vDSP_meanv((const float *)(*(_QWORD *)(a1 + 56) + 4), 3, (float *)&v413 + 1, *(unsigned int *)(a1 + 300));
    vDSP_meanv((const float *)(*(_QWORD *)(a1 + 56) + 8), 3, &v414, *(unsigned int *)(a1 + 300));
    if ((float)((float)(fabsf(v413.f32[0]) + fabsf(v413.f32[1])) + fabsf(v414)) >= 0.00003)
    {
      for (m = 0; m != 3; ++m)
        *(float *)((char *)&v411 + m * 4) = -v413.f32[m];
      VBAP::lineUnitSphereIntersection((VBAP *)&v413, (const float *)&v411, (float *)*v374, v247);
      if (!*(_BYTE *)(a1 + 313))
      {
LABEL_242:
        v250 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80);
        if ((unint64_t)v250 >= 0xC)
        {
          v251 = 0;
          v252 = 0;
          v253 = 0;
          LODWORD(v254) = 0;
          v255 = (v250 >> 2) / 3uLL;
          v256 = v370;
          do
          {
            v257 = *(unsigned int *)(a1 + 300);
            if ((_DWORD)v257)
            {
              v258 = 0;
              v260 = 3 * v257;
              while (1)
              {
                v259 = *v256;
                if ((float)((float)(vabds_f32(*(float *)&(*v374)[4 * (3 * v254)], v259[v258])+ vabds_f32(*(float *)&(*v374)[4 * (3 * v254 + 1)], v259[(v258 + 1)]))+ vabds_f32(*(float *)&(*v374)[4 * (3 * v254 + 2)], v259[(v258 + 2)])) < 0.00000035763)break;
                v258 += 3;
                if (v260 == v258)
                  goto LABEL_266;
              }
              if ((unint64_t)v252 >= v253)
              {
                v261 = (v252 - v251) >> 2;
                v262 = v261 + 1;
                if ((unint64_t)(v261 + 1) >> 62)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)(v253 - (_QWORD)v251) >> 1 > v262)
                  v262 = (uint64_t)(v253 - (_QWORD)v251) >> 1;
                if (v253 - (unint64_t)v251 >= 0x7FFFFFFFFFFFFFFCLL)
                  v263 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v263 = v262;
                if (v263)
                {
                  v263 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v263);
                  v265 = v12;
                }
                else
                {
                  v265 = v12;
                  v264 = 0;
                }
                v266 = (char *)(v263 + 4 * v261);
                *(_DWORD *)v266 = v254;
                v267 = v266 + 4;
                while (v252 != v251)
                {
                  v268 = *((_DWORD *)v252 - 1);
                  v252 -= 4;
                  *((_DWORD *)v266 - 1) = v268;
                  v266 -= 4;
                }
                v253 = v263 + 4 * v264;
                if (v251)
                  operator delete(v251);
                v251 = v266;
                v252 = v267;
                v256 = v370;
                v12 = v265;
              }
              else
              {
                *(_DWORD *)v252 = v254;
                v252 += 4;
              }
            }
LABEL_266:
            v254 = (v254 + 1);
          }
          while (v255 > v254);
          if (v252 == v251)
          {
            v8 = v376;
          }
          else
          {
            v269 = 0;
            v270 = *(_QWORD *)(a1 + 88);
            v271 = 1;
            v8 = v376;
            do
            {
              v272 = (uint64_t)&(*v374)[12 * *(int *)&v251[4 * v269]];
              v273 = v270 - (v272 + 12);
              if (v270 != v272 + 12)
                memmove(&(*v374)[12 * *(int *)&v251[4 * v269]], (const void *)(v272 + 12), v270 - (v272 + 12));
              v270 = v272 + v273;
              *(_QWORD *)(a1 + 88) = v272 + v273;
              v269 = v271++;
            }
            while (v269 < (v252 - v251) >> 2);
          }
          if (v251)
            operator delete(v251);
        }
LABEL_204:
        v202 = ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2) / 3uLL;
        *(_QWORD *)(a1 + 304) = v202;
        std::vector<float>::resize(v367, v202);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
        std::vector<float>::reserve(v8, ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2)+ ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 2));
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v8, *(char **)(a1 + 56), *(_QWORD *)(a1 + 64), (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 2);
        v204 = *(_DWORD **)(a1 + 80);
        v203 = *(_DWORD **)(a1 + 88);
        buf[0] = (float32x2_t)v8;
        while (v204 != v203)
          std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)buf, v204++);
        if (*(_DWORD *)a1 != 1)
          goto LABEL_361;
        v205 = (const float **)v380;
        v206 = v381;
        if (v381 == v380)
          goto LABEL_361;
        v207 = 0;
        v208 = 0;
        while (1)
        {
          v209 = (uint64_t *)((char *)__p + 24 * v207);
          if ((unint64_t)(v209[1] - *v209) <= 0xC)
          {
            v210 = 0;
            buf[1].i32[0] = 0;
            buf[0] = 0;
            v211 = *v209;
            v212 = (float *)*v8;
            v213 = 0.0;
            v214 = 0.0;
            v215 = 0.0;
            do
            {
              v216 = 3 * *(_DWORD *)(v211 + v210);
              v213 = v212[v216] + v213;
              buf[0].f32[0] = v213;
              v214 = v212[v216 + 1] + v214;
              buf[0].f32[1] = v214;
              v215 = v212[v216 + 2] + v215;
              buf[1].f32[0] = v215;
              v210 += 4;
            }
            while (v210 != 12);
            LODWORD(__C) = 0;
            vDSP_dotpr((const float *)buf, 1, v205[3 * v207], 1, (float *)&__C, 3uLL);
            if (*(float *)&__C <= 0.0)
            {
              for (n = 0; n != 12; n += 4)
                vDSP_meanv((const float *)(*(_QWORD *)(a1 + 32) + n), 3, (float *)((char *)&__A + n), ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2) / 3uLL);
              v407.i32[0] = 0;
              vDSP_sve((const float *)&__A, 1, (float *)&v407, 3uLL);
              v407.f32[0] = 1.0 / sqrtf(v407.f32[0]);
              vDSP_vsmul((const float *)&__A, 1, (const float *)&v407, (float *)&__C, 1, 3uLL);
              *(float *)&v403 = -v407.f32[0];
              vDSP_vsmul((const float *)&__A, 1, (const float *)&v403, (float *)&v406 + 1, 1, 3uLL);
              vDSP_distancesq((const float *)&__A, 1, (const float *)&__C, 1, (float *)&v409, 3uLL);
              vDSP_distancesq((const float *)&__A, 1, (const float *)&v406 + 1, 1, (float *)&v409 + 1, 3uLL);
              v275 = v378;
              if (v378 == __p)
              {
                v278 = 0;
              }
              else
              {
                v276 = 0;
                v277 = 0;
                v278 = 0;
                v279 = 12;
                if (v409.f32[0] > v409.f32[1])
                  v279 = 0;
                v280 = (const float *)((char *)&__C + v279);
                v281 = 3.4028e38;
                v275 = (char *)__p;
                do
                {
                  v282 = 0;
                  buf[1].i32[0] = 0;
                  buf[0] = 0;
                  v283 = &v275[24 * v276];
                  v284 = (float *)*v8;
                  v285 = *(_QWORD *)v283;
                  v286 = (float)(unint64_t)((uint64_t)(*((_QWORD *)v283 + 1) - *(_QWORD *)v283) >> 2);
                  v287 = 0.0;
                  v288 = 0.0;
                  v289 = 0.0;
                  do
                  {
                    v290 = 3 * *(_DWORD *)(v285 + v282);
                    v287 = v287 + (float)(v284[v290] / v286);
                    buf[0].f32[0] = v287;
                    v288 = v288 + (float)(v284[v290 + 1] / v286);
                    buf[0].f32[1] = v288;
                    v289 = v289 + (float)(v284[v290 + 2] / v286);
                    buf[1].f32[0] = v289;
                    v282 += 4;
                  }
                  while (v282 != 12);
                  vDSP_distancesq(v280, 1, (const float *)buf, 1, (float *)&v409, 3uLL);
                  if (v409.f32[0] < v281)
                  {
                    v413 = buf[0];
                    v414 = buf[1].f32[0];
                    v278 = v277;
                    v281 = v409.f32[0];
                  }
                  v275 = (char *)__p;
                  v276 = ++v277;
                }
                while (0xAAAAAAAAAAAAAAABLL * ((v378 - (_BYTE *)__p) >> 3) > v277);
              }
              v291 = &v275[24 * v278];
              v292 = (uint64_t *)(v291 + 8);
              if (*((_QWORD *)v291 + 1) - *(_QWORD *)v291 <= 0xCuLL)
              {
                v293 = *(_QWORD *)(a1 + 168);
                v294 = *(_QWORD **)(a1 + 160);
                if ((unint64_t)v294 >= v293)
                {
                  v303 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v294 - *v12) >> 3);
                  if (v303 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v304 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v293 - *v12) >> 3);
                  v305 = 2 * v304;
                  if (2 * v304 <= v303 + 1)
                    v305 = v303 + 1;
                  if (v304 >= 0x555555555555555)
                    v306 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v306 = v305;
                  buf[4] = (float32x2_t)(a1 + 168);
                  if (v306)
                    v306 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v306);
                  else
                    v307 = 0;
                  v343 = (_QWORD *)(v306 + 24 * v303);
                  buf[0] = (float32x2_t)v306;
                  buf[1] = (float32x2_t)v343;
                  buf[2] = (float32x2_t)v343;
                  buf[3] = (float32x2_t)(v306 + 24 * v307);
                  *v343 = 0;
                  v343[1] = 0;
                  v343[2] = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v343, *(const void **)v291, *v292, (*v292 - *(_QWORD *)v291) >> 2);
                  *(_QWORD *)&buf[2] += 24;
                  std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(v12, buf);
                  v295 = *(_QWORD **)(a1 + 160);
                  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)buf);
                }
                else
                {
                  *v294 = 0;
                  v294[1] = 0;
                  v294[2] = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v294, *(const void **)v291, *v292, (*v292 - *(_QWORD *)v291) >> 2);
                  v295 = v294 + 3;
                  *(_QWORD *)(a1 + 160) = v295;
                }
                *(_QWORD *)(a1 + 160) = v295;
                vDSP_vadd(*((const float **)v380 + 3 * v278), 1, (const float *)&v413, 1, (float *)buf, 1, 3uLL);
                vDSP_vsub(*((const float **)v380 + 3 * v278), 1, (const float *)&v413, 1, (float *)&buf[1] + 1, 1, 3uLL);
                VBAP::lineUnitSphereIntersection((VBAP *)buf, (const float *)&buf[1] + 1, (float *)&__C, v344);
                vDSP_distancesq((const float *)&__A, 1, (const float *)&__C, 1, (float *)&v409, 3uLL);
                vDSP_distancesq((const float *)&__A, 1, (const float *)&v406 + 1, 1, (float *)&v409 + 1, 3uLL);
                std::vector<float>::resize(v374, ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2) + 3);
                v345 = 12;
                if (v409.f32[1] <= v409.f32[0])
                  v345 = 0;
                v346 = (char *)&__C + v345;
                v347 = *(_QWORD *)(a1 + 88);
                v348 = *(_QWORD *)v346;
                *(_DWORD *)(v347 - 4) = *((_DWORD *)v346 + 2);
                *(_QWORD *)(v347 - 12) = v348;
                v350 = *(char **)(a1 + 112);
                v349 = *(_QWORD *)(a1 + 120);
                if ((unint64_t)v350 >= v349)
                {
                  v352 = *v373;
                  v353 = (v350 - *v373) >> 2;
                  v354 = v353 + 1;
                  if ((unint64_t)(v353 + 1) >> 62)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v355 = v349 - (_QWORD)v352;
                  if (v355 >> 1 > v354)
                    v354 = v355 >> 1;
                  v356 = (unint64_t)v355 >= 0x7FFFFFFFFFFFFFFCLL;
                  v357 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v356)
                    v357 = v354;
                  if (v357)
                  {
                    v357 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v357);
                    v352 = *(char **)(a1 + 104);
                    v350 = *(char **)(a1 + 112);
                  }
                  else
                  {
                    v358 = 0;
                  }
                  v359 = (_DWORD *)(v357 + 4 * v353);
                  v360 = v357 + 4 * v358;
                  *v359 = 1065353216;
                  v351 = v359 + 1;
                  while (v350 != v352)
                  {
                    v361 = *((_DWORD *)v350 - 1);
                    v350 -= 4;
                    *--v359 = v361;
                  }
                  *(_QWORD *)(a1 + 104) = v359;
                  *(_QWORD *)(a1 + 112) = v351;
                  *(_QWORD *)(a1 + 120) = v360;
                  if (v352)
                    operator delete(v352);
                }
                else
                {
                  *(_DWORD *)v350 = 1065353216;
                  v351 = v350 + 4;
                }
                *(_QWORD *)(a1 + 112) = v351;
                ++*(_QWORD *)(a1 + 304);
                std::vector<float>::resize(v367, ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2) + 1);
                v362 = *(_QWORD *)(a1 + 88);
                v411 = v8;
                v363 = -12;
                do
                {
                  std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&v411, (_DWORD *)(v362 + v363));
                  v363 += 4;
                }
                while (v363);
              }
LABEL_361:
              v46 = VBAP::delaunayTriangulation(a1, v8, a4, a5);
              if (v46)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  buf[0].i32[0] = 136315906;
                  *(float32x2_t *)((char *)buf + 4) = (float32x2_t)"VBAP.cpp";
                  buf[1].i16[2] = 1024;
                  *(__int32 *)((char *)&buf[1].i32[1] + 2) = 198;
                  buf[2].i16[1] = 2080;
                  *(float32x2_t *)((char *)&buf[2] + 4) = (float32x2_t)"initialize";
                  buf[3].i16[2] = 1024;
                  *(__int32 *)((char *)&buf[3].i32[1] + 2) = 198;
                  v65 = MEMORY[0x1E0C81028];
                  v66 = "%25s:%-5d CADSPUtility:%s:%d: VBAP error; Delaunay triangulation issue";
LABEL_364:
                  _os_log_impl(&dword_18EE07000, v65, OS_LOG_TYPE_ERROR, v66, (uint8_t *)buf, 0x22u);
                }
                goto LABEL_365;
              }
              v364 = 1;
LABEL_367:
              buf[0] = (float32x2_t)&__p;
              std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              buf[0] = (float32x2_t)&v380;
              std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              if (v383[0])
              {
                v383[1] = v383[0];
                operator delete(v383[0]);
              }
              if (v384[0])
              {
                v384[1] = v384[0];
                operator delete(v384[0]);
              }
              if (v385[0])
              {
                v385[1] = v385[0];
                operator delete(v385[0]);
              }
              if (v386[0])
              {
                v386[1] = v386[0];
                operator delete(v386[0]);
              }
              if ((v364 & 1) != 0)
LABEL_376:
                v46 = 0;
LABEL_377:
              if (v390[0])
              {
                v390[1] = v390[0];
                operator delete(v390[0]);
              }
              if (v391[0])
              {
                v391[1] = v391[0];
                operator delete(v391[0]);
              }
              if (v392[0])
              {
                v392[1] = v392[0];
                operator delete(v392[0]);
              }
              if (v46)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  buf[0].i32[0] = 136315906;
                  *(float32x2_t *)((char *)buf + 4) = (float32x2_t)"VBAP.cpp";
                  buf[1].i16[2] = 1024;
                  *(__int32 *)((char *)&buf[1].i32[1] + 2) = 35;
                  buf[2].i16[1] = 2080;
                  *(float32x2_t *)((char *)&buf[2] + 4) = (float32x2_t)"VBAP";
                  buf[3].i16[2] = 1024;
                  *(__int32 *)((char *)&buf[3].i32[1] + 2) = 35;
                  v44 = MEMORY[0x1E0C81028];
                  v45 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Initialization Error; Check for duplicate vertices";
LABEL_386:
                  _os_log_impl(&dword_18EE07000, v44, OS_LOG_TYPE_ERROR, v45, (uint8_t *)buf, 0x22u);
                }
              }
              else
              {
                *(_BYTE *)(a1 + 315) = 1;
              }
              return a1;
            }
            v205 = (const float **)v380;
            v206 = v381;
          }
          v207 = ++v208;
          if (0xAAAAAAAAAAAAAAABLL * ((v206 - (char *)v205) >> 3) <= v208)
            goto LABEL_361;
        }
      }
      v248 = 3;
    }
    else
    {
      v248 = 0;
    }
    std::vector<float>::resize(v374, v248);
    goto LABEL_242;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    buf[0].i32[0] = 136315906;
    *(float32x2_t *)((char *)buf + 4) = (float32x2_t)"VBAP.cpp";
    buf[1].i16[2] = 1024;
    *(__int32 *)((char *)&buf[1].i32[1] + 2) = 40;
    buf[2].i16[1] = 2080;
    *(float32x2_t *)((char *)&buf[2] + 4) = (float32x2_t)"VBAP";
    buf[3].i16[2] = 1024;
    *(__int32 *)((char *)&buf[3].i32[1] + 2) = 40;
    v44 = MEMORY[0x1E0C81028];
    v45 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Initialization Error; Empty or inconsistent vertex set";
    goto LABEL_386;
  }
  return a1;
}

void sub_18EF91164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, void *a14, void **a15, _QWORD *a16, _QWORD *a17, uint64_t a18, uint64_t a19, void **a20,void **a21,void **a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p)
{
  _QWORD *v54;
  uint64_t v55;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;

  *(_QWORD *)(v55 - 192) = v55 - 176;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 192));
  if (__p)
    operator delete(__p);
  a53 = (uint64_t)&a24;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  a24 = (uint64_t)&a27;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  a47 = v54 + 34;
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  v57 = (void *)v54[31];
  if (v57)
  {
    v54[32] = v57;
    operator delete(v57);
  }
  v58 = *a13;
  if (*a13)
  {
    v54[29] = v58;
    operator delete(v58);
  }
  std::__list_imp<ID3FrameInfo>::clear(a16);
  std::__list_imp<ID3FrameInfo>::clear(a17);
  a47 = a14;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  v59 = *a12;
  if (*a12)
  {
    v54[17] = v59;
    operator delete(v59);
  }
  v60 = *a20;
  if (*a20)
  {
    v54[14] = v60;
    operator delete(v60);
  }
  v61 = *a21;
  if (*a21)
  {
    v54[11] = v61;
    operator delete(v61);
  }
  v62 = *a15;
  if (*a15)
  {
    v54[8] = v62;
    operator delete(v62);
  }
  v63 = *a23;
  if (*a23)
  {
    v54[5] = v63;
    operator delete(v63);
  }
  v64 = *a22;
  if (*a22)
  {
    v54[2] = v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void VBAP::~VBAP(VBAP *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  v10 = (void **)((char *)this + 272);
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v2 = (void *)*((_QWORD *)this + 31);
  if (v2)
  {
    *((_QWORD *)this + 32) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 28);
  if (v3)
  {
    *((_QWORD *)this + 29) = v3;
    operator delete(v3);
  }
  std::__list_imp<ID3FrameInfo>::clear((_QWORD *)this + 25);
  std::__list_imp<ID3FrameInfo>::clear((_QWORD *)this + 22);
  v10 = (void **)((char *)this + 152);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 8) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 5) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 2) = v9;
    operator delete(v9);
  }
}

const __CFString *acv2::BlockCopyConverter::ConverterName(acv2::BlockCopyConverter *this)
{
  return CFSTR("BlockCopyConverter");
}

uint64_t acv2::BlockCopyConverter::Reset(acv2::BlockCopyConverter *this)
{
  return 0;
}

uint64_t acv2::BlockCopyConverter::GetPropertyInfo(acv2::BlockCopyConverter *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t result;
  unsigned __int16 v5;
  int v6;

  result = 1886547824;
  if (a2 <= 1836016242)
  {
    if (a2 != 1667850867 && a2 != 1668244083)
    {
      v6 = 1835623027;
      goto LABEL_11;
    }
  }
  else if (a2 > 2020175986)
  {
    if (a2 != 2020569203)
    {
      v5 = 28787;
      goto LABEL_10;
    }
  }
  else if (a2 != 1836016243)
  {
    v5 = 25203;
LABEL_10:
    v6 = v5 | 0x78690000;
LABEL_11:
    if (a2 != v6)
      return result;
  }
  if (a3)
    *a3 = 4;
  result = 0;
  if (a4)
    *a4 = 0;
  return result;
}

uint64_t acv2::BlockCopyConverter::SetProperty(acv2::BlockCopyConverter *this, unsigned int a2, unsigned int a3, const void *a4)
{
  return 1886547824;
}

uint64_t acv2::BlockCopyConverter::NeedsBufferedInput(acv2::BlockCopyConverter *this)
{
  return 0;
}

uint64_t ___ZL13AUPBEnableSPIv_block_invoke()
{
  uint64_t result;

  result = os_variant_has_internal_diagnostics();
  AUPBEnableSPI(void)::isAppleInternal = result;
  return result;
}

uint64_t AUPBAddServerListener(uint64_t a1, uint64_t a2)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (AUPBEnableSPI(void)::isAppleInternal)
    return -[AUPBClientManager addNewServerListener:withUserData:](+[AUPBClientManager sharedInstance](AUPBClientManager, "sharedInstance"), "addNewServerListener:withUserData:", a1, a2);
  else
    return 561145191;
}

uint64_t AUPBRemoveServerListener(uint64_t a1, uint64_t a2)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (AUPBEnableSPI(void)::isAppleInternal)
    return -[AUPBClientManager removeServerListener:withUserData:](+[AUPBClientManager sharedInstance](AUPBClientManager, "sharedInstance"), "removeServerListener:withUserData:", a1, a2);
  else
    return 561145191;
}

uint64_t AUPBUnregister(uint64_t a1)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (AUPBEnableSPI(void)::isAppleInternal)
    return -[AUPBServer unregisterBlock:](+[AUPBServer sharedInstance](AUPBServer, "sharedInstance"), "unregisterBlock:", a1);
  else
    return 561145191;
}

uint64_t AUPBUnregisterAU(uint64_t a1, uint64_t a2)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (AUPBEnableSPI(void)::isAppleInternal)
    return -[AUPBServer unregisterAU:](+[AUPBServer sharedInstance](AUPBServer, "sharedInstance"), "unregisterAU:", a2);
  else
    return 561145191;
}

uint64_t AUPBAddPropertyListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (AUPBEnableSPI(void)::isAppleInternal)
    return -[AUPBClientManager addPropertyListener:onServer:block:property:withUserData:](+[AUPBClientManager sharedInstance](AUPBClientManager, "sharedInstance"), "addPropertyListener:onServer:block:property:withUserData:", a4, a1, a2, a3, a5);
  else
    return 561145191;
}

uint64_t AUPBRemovePropertyListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (AUPBEnableSPI(void)::isAppleInternal)
    return -[AUPBClientManager removePropertyListener:onServer:block:property:withUserData:](+[AUPBClientManager sharedInstance](AUPBClientManager, "sharedInstance"), "removePropertyListener:onServer:block:property:withUserData:", a4, a1, a2, a3, a5);
  else
    return 561145191;
}

uint64_t AUPBCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (AUPBEnableSPI(void)::isAppleInternal)
    return -[AUPBClientManager copyPBProperty:onServer:block:intoValue:](+[AUPBClientManager sharedInstance](AUPBClientManager, "sharedInstance"), "copyPBProperty:onServer:block:intoValue:", a3, a1, a2, a4);
  else
    return 561145191;
}

uint64_t AUPBSetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (AUPBEnableSPI(void)::isAppleInternal)
    return -[AUPBClientManager setPBProperty:onServer:block:value:](+[AUPBClientManager sharedInstance](AUPBClientManager, "sharedInstance"), "setPBProperty:onServer:block:value:", a3, a1, a2, a4);
  else
    return 561145191;
}

uint64_t RemoteAudioUnitGetPropertyInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (AUPBEnableSPI(void)::isAppleInternal)
    return -[AUPBClientManager getAUPropertyInfo:onServer:audioUnit:scope:element:intoDataSize:writeable:](+[AUPBClientManager sharedInstance](AUPBClientManager, "sharedInstance"), "getAUPropertyInfo:onServer:audioUnit:scope:element:intoDataSize:writeable:", a3, a1, a2, a4, a5, a6, a7);
  else
    return 561145191;
}

uint64_t RemoteAudioUnitGetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;

  v14 = a6;
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (AUPBEnableSPI(void)::isAppleInternal)
    return -[AUPBClientManager getAUProperty:onServer:audioUnit:scope:element:copiedIntoBufer:withSize:](+[AUPBClientManager sharedInstance](AUPBClientManager, "sharedInstance"), "getAUProperty:onServer:audioUnit:scope:element:copiedIntoBufer:withSize:", a3, a1, a2, a4, a5, &v14, a7);
  else
    return 561145191;
}

uint64_t RemoteAudioUnitSetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v15;

  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (!AUPBEnableSPI(void)::isAppleInternal)
    return 561145191;
  LODWORD(v15) = a7;
  return -[AUPBClientManager setAUProperty:onServer:audioUnit:scope:element:withValue:size:](+[AUPBClientManager sharedInstance](AUPBClientManager, "sharedInstance"), "setAUProperty:onServer:audioUnit:scope:element:withValue:size:", a3, a1, a2, a4, a5, a6, v15);
}

uint64_t RemoteAudioUnitGetParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (AUPBEnableSPI(void)::isAppleInternal)
    return -[AUPBClientManager getAUParameter:onServer:audioUnit:scope:element:copiedIntoValue:](+[AUPBClientManager sharedInstance](AUPBClientManager, "sharedInstance"), "getAUParameter:onServer:audioUnit:scope:element:copiedIntoValue:", a3, a1, a2, a4, a5, a6);
  else
    return 561145191;
}

uint64_t RemoteAudioUnitSetParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  AUPBClientManager *v12;
  double v13;

  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (!AUPBEnableSPI(void)::isAppleInternal)
    return 561145191;
  v12 = +[AUPBClientManager sharedInstance](AUPBClientManager, "sharedInstance");
  *(float *)&v13 = a6;
  return -[AUPBClientManager setAUParameter:onServer:audioUnit:scope:element:value:](v12, "setAUParameter:onServer:audioUnit:scope:element:value:", a3, a1, a2, a4, a5, v13);
}

uint64_t RemoteAudioUnitGetPropertySerial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (AUPBEnableSPI(void)::isAppleInternal)
    return -[AUPBClientManager getSerialAUProperty:onServer:audioUnit:scope:element:inData:](+[AUPBClientManager sharedInstance](AUPBClientManager, "sharedInstance"), "getSerialAUProperty:onServer:audioUnit:scope:element:inData:", a3, a1, a2, a4, a5, a6);
  else
    return 561145191;
}

uint64_t RemoteAudioUnitSetPropertySerial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AUPBEnableSPI(void)::onceToken != -1)
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4329);
  if (AUPBEnableSPI(void)::isAppleInternal)
    return -[AUPBClientManager setSerialAUProperty:onServer:audioUnit:scope:element:toData:](+[AUPBClientManager sharedInstance](AUPBClientManager, "sharedInstance"), "setSerialAUProperty:onServer:audioUnit:scope:element:toData:", a3, a1, a2, a4, a5, a6);
  else
    return 561145191;
}

void DSPGraph::CalculationBox::~CalculationBox(DSPGraph::CalculationBox *this)
{
  *(_QWORD *)this = &off_1E290CFF8;
  DSPGraph::Box::~Box(this);
}

{
  *(_QWORD *)this = &off_1E290CFF8;
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::Box::ClassName(DSPGraph::Box *this)
{
  return "Box";
}

uint64_t DSPGraph::CalculationBox::canProcessInPlace(DSPGraph::CalculationBox *this)
{
  return 1;
}

double DSPGraph::CalculationBox::setParameter(DSPGraph::CalculationBox *this, int a2, unsigned int a3, unsigned int a4, float a5)
{
  double *v6;
  double result;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  __int128 v20;
  __int128 v21;

  if (a2)
    DSPGraph::Box::setParameter(this, a5);
  if (a3 != 1 || *((_DWORD *)this + 194))
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "setParameter");
    std::to_string(&v16, a3);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v17, "CalculationBox can't get parameter in scope ", &v16);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v18, &v17, " with parameter ID ");
    std::to_string(&v15, 0);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v15;
    else
      v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    else
      size = v15.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v18, (const std::string::value_type *)v9, size);
    v19 = *v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    DSPGraph::ThrowException(-10866, &v21, 178, &v20, (__int128 *)&v19);
  }
  if (*((_QWORD *)this + 103) <= (unint64_t)a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "setParameter");
    std::to_string(&v16, a4);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v17, "CalculationBox can't set input scope element ", &v16);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v18, &v17, " with parameter ID ");
    std::to_string(&v15, 0);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v15;
    else
      v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    else
      v13 = v15.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v18, (const std::string::value_type *)v12, v13);
    v19 = *v14;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    DSPGraph::ThrowException(-10877, &v21, 173, &v20, (__int128 *)&v19);
  }
  v6 = (double *)((char *)this + 16 * a4);
  result = a5;
  v6[99] = result;
  *((_DWORD *)v6 + 200) = 1;
  return result;
}

void sub_18EF92260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a38 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v38 - 41) < 0)
    operator delete(*(void **)(v38 - 64));
  if (*(char *)(v38 - 17) < 0)
    operator delete(*(void **)(v38 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::CalculationBox::getParameter(DSPGraph::CalculationBox *this, int a2, unsigned int a3, unsigned int a4)
{
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  int v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a2)
    DSPGraph::Box::getParameter(this);
  if (a3 != 2)
  {
    if (a3 == 1 && !*((_DWORD *)this + 194))
    {
      if (*((_QWORD *)this + 103) <= (unint64_t)a4)
      {
        std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v23, "getParameter");
        std::to_string(&v19, a4);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v20, "CalculationBox can't get input scope element ", &v19);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v21, &v20, " with parameter ID ");
        std::to_string(&v18, 0);
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &v18;
        else
          v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
        else
          size = v18.__r_.__value_.__l.__size_;
        v12 = std::string::append(&v21, (const std::string::value_type *)v10, size);
        v22 = *v12;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        DSPGraph::ThrowException(-10877, &v24, 137, &v23, (__int128 *)&v22);
      }
      return DSPGraph::CalculationBox::Value::operator float<float>((uint64_t)this + 16 * a4 + 792);
    }
LABEL_10:
    std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v23, "getParameter");
    std::to_string(&v19, a3);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v20, "CalculationBox can't get parameter in scope ", &v19);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v21, &v20, " with parameter ID ");
    std::to_string(&v18, 0);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v18;
    else
      v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    else
      v8 = v18.__r_.__value_.__l.__size_;
    v9 = std::string::append(&v21, (const std::string::value_type *)v7, v8);
    v22 = *v9;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    DSPGraph::ThrowException(-10866, &v24, 150, &v23, (__int128 *)&v22);
  }
  if (*((_DWORD *)this + 195))
    goto LABEL_10;
  DSPGraph::CalculationBox::calculate((uint64_t)&v24, (uint64_t)this, a4);
  if (!v25)
  {
    v13 = v24;
    std::string::basic_string[abi:ne180100]<0>(&v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v22, "getParameter");
    std::to_string(&v18, a4);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v19, "CalculationBox can't get output scope element ", &v18);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v20, &v19, " with parameter ID ");
    std::to_string(&v17, 0);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v17;
    else
      v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    else
      v15 = v17.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v20, (const std::string::value_type *)v14, v15);
    v21 = *v16;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    DSPGraph::ThrowException(v13, &v23, 144, (__int128 *)&v22, (__int128 *)&v21);
  }
  return DSPGraph::CalculationBox::Value::operator float<float>((uint64_t)&v24);
}

void sub_18EF92634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a38 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v38 - 73) < 0)
    operator delete(*(void **)(v38 - 96));
  if (*(char *)(v38 - 49) < 0)
    operator delete(*(void **)(v38 - 72));
  _Unwind_Resume(exception_object);
}

_DWORD *DSPGraph::CalculationBox::getParameterList@<X0>(_DWORD *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _DWORD *v4;

  if (a2 == 2)
  {
    if (!this[195])
    {
LABEL_4:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v4 = operator new(4uLL);
      *a3 = v4;
      *v4 = 0;
      this = v4 + 1;
      a3[1] = this;
      a3[2] = this;
      return this;
    }
  }
  else if (a2 == 1 && !this[194])
  {
    goto LABEL_4;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return this;
}

uint64_t DSPGraph::CalculationBox::getParameterInfo@<X0>(uint64_t this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v4;
  int v5;
  unint64_t v6;

  if (!a3)
  {
    if (a2 == 2)
    {
      if (!*(_DWORD *)(this + 780))
      {
        *(_DWORD *)(a4 + 48) = 0;
        strcpy((char *)a4, "output parameter");
        *(_BYTE *)(a4 + 17) = 0;
        *(_WORD *)(a4 + 18) = 0;
        *(_DWORD *)(a4 + 20) = 0;
        *(_QWORD *)(a4 + 24) = 0;
        *(_OWORD *)(a4 + 32) = xmmword_18F10BFF0;
        *(_QWORD *)(a4 + 56) = 0;
        *(_DWORD *)(a4 + 64) = 0;
        *(_QWORD *)(a4 + 72) = 0;
        *(_DWORD *)(a4 + 80) = 26;
        *(_QWORD *)(a4 + 84) = 0x7F7FFFFFFF7FFFFFLL;
        v6 = 0x4000000000000000;
        goto LABEL_12;
      }
    }
    else if (a2 == 1 && !*(_DWORD *)(this + 776))
    {
      *(_DWORD *)(a4 + 48) = 0;
      strcpy((char *)a4, "input parameter");
      *(_OWORD *)(a4 + 16) = unk_18F10BFA8;
      *(_OWORD *)(a4 + 32) = xmmword_18F10BFB8;
      *(_QWORD *)(a4 + 56) = 0;
      *(_DWORD *)(a4 + 64) = 0;
      *(_QWORD *)(a4 + 72) = 0;
      *(_DWORD *)(a4 + 80) = 26;
      *(_QWORD *)(a4 + 84) = 0x7F7FFFFFFF7FFFFFLL;
      v6 = 0xC000000000000000;
LABEL_12:
      *(_QWORD *)(a4 + 92) = v6;
      v4 = 1;
      goto LABEL_10;
    }
    v4 = 0;
    v5 = -10866;
    goto LABEL_9;
  }
  v4 = 0;
  v5 = 1869640255;
LABEL_9:
  *(_DWORD *)a4 = v5;
LABEL_10:
  *(_BYTE *)(a4 + 104) = v4;
  return this;
}

double DSPGraph::CalculationBox::desc@<D0>(DSPGraph::CalculationBox *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  double result;

  v2 = *((_DWORD *)this + 193);
  *(_DWORD *)a2 = 1668183148;
  *(_DWORD *)(a2 + 4) = v2;
  *(_QWORD *)&result = 1633841016;
  *(_QWORD *)(a2 + 8) = 1633841016;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

unint64_t DSPGraph::CalculationBox::getPropertyInfo(DSPGraph::CalculationBox *this, unsigned int a2, uint64_t a3)
{
  uint64_t PropertyInfo;
  unint64_t v5;

  if (a2 >= 0xA)
  {
    PropertyInfo = DSPGraph::Box::getPropertyInfo(this, a2, a3);
    v5 = PropertyInfo & 0xFFFFFFFF00000000;
  }
  else
  {
    LODWORD(PropertyInfo) = -10866;
    if ((_DWORD)a3 == 2)
    {
      v5 = 0;
      if (*((_DWORD *)this + 195) == 1)
        LODWORD(PropertyInfo) = dword_18F10C080[a2];
      else
        LODWORD(PropertyInfo) = -10866;
    }
    else if ((_DWORD)a3 == 1)
    {
      if (*((_DWORD *)this + 194) == 1)
        LODWORD(PropertyInfo) = dword_18F10C080[a2];
      else
        LODWORD(PropertyInfo) = -10866;
      if (*((_DWORD *)this + 194) == 1)
        v5 = 0x100000000;
      else
        v5 = 0;
    }
    else
    {
      v5 = 0;
    }
  }
  return v5 | PropertyInfo;
}

uint64_t DSPGraph::CalculationBox::getProperty(DSPGraph::CalculationBox *this, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *a6)
{
  unsigned int v8;
  unsigned int v9;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  int v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  __int128 v28;
  __int128 v29;
  char v30;
  uint64_t v31;

  v8 = a4;
  v9 = a3;
  v31 = *MEMORY[0x1E0C80C00];
  if (a2 > 9)
    return DSPGraph::Box::getProperty(this, a2, a3, a4, a5, a6);
  if ((_DWORD)a3 != 2)
  {
    if ((_DWORD)a3 == 1 && *((_DWORD *)this + 194) == 1)
    {
      if (*((_QWORD *)this + 103) <= (unint64_t)a4)
      {
        std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v28, "getProperty");
        std::to_string(&v24, v8);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v25, "CalculationBox can't get input scope element ", &v24);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v26, &v25, " with property ID ");
        std::to_string(&v23, a2);
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v23;
        else
          v15 = (std::string *)v23.__r_.__value_.__r.__words[0];
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        else
          size = v23.__r_.__value_.__l.__size_;
        v17 = std::string::append(&v26, (const std::string::value_type *)v15, size);
        v27 = *v17;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        DSPGraph::ThrowException(-10877, &v29, 262, &v28, (__int128 *)&v27);
      }
      return DSPGraph::CalculationBox::getValueAsProperty((uint64_t)this + 16 * a4 + 792, a2, (int *)a5, a6);
    }
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v28, "getProperty");
    std::to_string(&v24, v9);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v25, "CalculationBox can't get property in scope ", &v24);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v26, &v25, " with property ID ");
    std::to_string(&v23, a2);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v23;
    else
      v12 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      v13 = v23.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v26, (const std::string::value_type *)v12, v13);
    v27 = *v14;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    DSPGraph::ThrowException(-10866, &v29, 275, &v28, (__int128 *)&v27);
  }
  if (*((_DWORD *)this + 195) != 1)
    goto LABEL_11;
  DSPGraph::CalculationBox::calculate((uint64_t)&v29, (uint64_t)this, a4);
  if (!v30)
  {
    v18 = v29;
    std::string::basic_string[abi:ne180100]<0>(&v28, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v27, "getProperty");
    std::to_string(&v23, v8);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v24, "CalculationBox can't get output scope element ", &v23);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v25, &v24, " with property ID ");
    std::to_string(&v22, a2);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v22;
    else
      v19 = (std::string *)v22.__r_.__value_.__r.__words[0];
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    else
      v20 = v22.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v25, (const std::string::value_type *)v19, v20);
    v26 = *v21;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    DSPGraph::ThrowException(v18, &v28, 269, (__int128 *)&v27, (__int128 *)&v26);
  }
  return DSPGraph::CalculationBox::getValueAsProperty((uint64_t)&v29, a2, (int *)a5, a6);
}

void sub_18EF92D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a38 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (a45 < 0)
    operator delete(a40);
  if (*(char *)(v45 - 81) < 0)
    operator delete(*(void **)(v45 - 104));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::CalculationBox::setProperty(uint64_t this, unsigned int a2, unsigned int a3, unsigned int a4, int a5, double *a6)
{
  uint64_t v7;
  int v8;
  double v9;
  double v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  __int128 v24;
  __int128 v25;

  if (a2 > 9)
    return DSPGraph::Box::setProperty((DSPGraph::Box *)this, a2, a3, a4, a5, a6);
  if (a3 != 1 || *(_DWORD *)(this + 776) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v24, "setProperty");
    std::to_string(&v20, a3);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v21, "CalculationBox can't set property in scope ", &v20);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v22, &v21, " with property ID ");
    std::to_string(&v19, a2);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v19;
    else
      v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    else
      size = v19.__r_.__value_.__l.__size_;
    v13 = std::string::append(&v22, (const std::string::value_type *)v11, size);
    v23 = *v13;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    DSPGraph::ThrowException(-10866, &v25, 313, &v24, (__int128 *)&v23);
  }
  if (*(_QWORD *)(this + 824) <= (unint64_t)a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v24, "setProperty");
    std::to_string(&v20, a4);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v21, "CalculationBox can't set input scope element ", &v20);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v22, &v21, " with property ID ");
    std::to_string(&v19, a2);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v19;
    else
      v14 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    else
      v15 = v19.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v22, (const std::string::value_type *)v14, v15);
    v23 = *v16;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    DSPGraph::ThrowException(-10877, &v25, 308, &v24, (__int128 *)&v23);
  }
  v7 = this + 16 * a4 + 792;
  switch(a2)
  {
    case 0u:
      if (a5 != 1)
        goto LABEL_28;
      v8 = 0;
      *(_QWORD *)&v9 = *(char *)a6;
      goto LABEL_23;
    case 1u:
      if (a5 != 2)
        goto LABEL_28;
      v8 = 0;
      *(_QWORD *)&v9 = *(__int16 *)a6;
      goto LABEL_23;
    case 2u:
      if (a5 != 4)
        goto LABEL_28;
      v8 = 0;
      *(_QWORD *)&v9 = *(int *)a6;
      goto LABEL_23;
    case 3u:
    case 7u:
      if (a5 != 8)
        goto LABEL_28;
      v8 = 0;
      v9 = *a6;
      goto LABEL_23;
    case 4u:
      if (a5 != 1)
        goto LABEL_28;
      v8 = 0;
      *(_QWORD *)&v9 = *(unsigned __int8 *)a6;
      goto LABEL_23;
    case 5u:
      if (a5 != 2)
        goto LABEL_28;
      v8 = 0;
      *(_QWORD *)&v9 = *(unsigned __int16 *)a6;
      goto LABEL_23;
    case 6u:
      if (a5 != 4)
        goto LABEL_28;
      v8 = 0;
      *(_QWORD *)&v9 = *(unsigned int *)a6;
LABEL_23:
      *(double *)v7 = v9;
      goto LABEL_24;
    case 8u:
      if (a5 != 4)
        goto LABEL_28;
      v10 = *(float *)a6;
      goto LABEL_27;
    case 9u:
      if (a5 == 8)
      {
        v10 = *a6;
LABEL_27:
        *(double *)v7 = v10;
        v8 = 1;
LABEL_24:
        this = 0;
        *(_DWORD *)(v7 + 8) = v8;
      }
      else
      {
LABEL_28:
        this = 561211770;
      }
      break;
    default:
      return this;
  }
  return this;
}

void sub_18EF93198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 73) < 0)
    operator delete(*(void **)(v34 - 96));
  if (a16 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v34 - 41) < 0)
    operator delete(*(void **)(v34 - 64));
  if (*(char *)(v34 - 17) < 0)
    operator delete(*(void **)(v34 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::CalculationBox::hasPresetData(DSPGraph::CalculationBox *this)
{
  return 0;
}

uint64_t DSPGraph::CalculationBox::getValueAsProperty(uint64_t result, int a2, int *a3, _BYTE *a4)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  char *v22;

  switch(a2)
  {
    case 0:
      if (!*a3)
        return 561211770;
      v6 = *(unsigned int *)(result + 8);
      if ((_DWORD)v6 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v22 = &v21;
      v7 = ((uint64_t (*)(char **, uint64_t))off_1E2920AD8[v6])(&v22, result);
      goto LABEL_8;
    case 1:
      if (*a3 < 2)
        return 561211770;
      v16 = *(unsigned int *)(result + 8);
      if ((_DWORD)v16 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v22 = &v21;
      v17 = ((uint64_t (*)(char **, uint64_t))off_1E2920AE8[v16])(&v22, result);
      goto LABEL_29;
    case 2:
      if (*a3 < 4)
        return 561211770;
      v11 = *(unsigned int *)(result + 8);
      if ((_DWORD)v11 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v22 = &v21;
      v12 = ((uint64_t (*)(char **, uint64_t))off_1E2920AF8[v11])(&v22, result);
      goto LABEL_33;
    case 3:
      if (*a3 < 8)
        return 561211770;
      v13 = *(unsigned int *)(result + 8);
      if ((_DWORD)v13 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v22 = &v21;
      v14 = ((uint64_t (*)(char **, uint64_t))off_1E2920B08[v13])(&v22, result);
      goto LABEL_21;
    case 4:
      if (!*a3)
        return 561211770;
      v8 = *(unsigned int *)(result + 8);
      if ((_DWORD)v8 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v22 = &v21;
      v7 = ((uint64_t (*)(char **, uint64_t))off_1E2920B18[v8])(&v22, result);
LABEL_8:
      *a4 = v7;
      v9 = 1;
      goto LABEL_37;
    case 5:
      if (*a3 < 2)
        return 561211770;
      v18 = *(unsigned int *)(result + 8);
      if ((_DWORD)v18 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v22 = &v21;
      v17 = ((uint64_t (*)(char **, uint64_t))off_1E2920B28[v18])(&v22, result);
LABEL_29:
      *(_WORD *)a4 = v17;
      v9 = 2;
      goto LABEL_37;
    case 6:
      if (*a3 < 4)
        return 561211770;
      v19 = *(unsigned int *)(result + 8);
      if ((_DWORD)v19 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v22 = &v21;
      v12 = ((uint64_t (*)(char **, uint64_t))off_1E2920B38[v19])(&v22, result);
LABEL_33:
      *(_DWORD *)a4 = v12;
      goto LABEL_36;
    case 7:
      if (*a3 < 8)
        return 561211770;
      v15 = *(unsigned int *)(result + 8);
      if ((_DWORD)v15 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v22 = &v21;
      v14 = ((uint64_t (*)(char **, uint64_t))off_1E2920B48[v15])(&v22, result);
LABEL_21:
      *(_QWORD *)a4 = v14;
      goto LABEL_22;
    case 8:
      if (*a3 < 4)
        return 561211770;
      DSPGraph::CalculationBox::Value::operator float<float>(result);
      *(_DWORD *)a4 = v20;
LABEL_36:
      v9 = 4;
      goto LABEL_37;
    case 9:
      if (*a3 < 8)
        return 561211770;
      v10 = *(unsigned int *)(result + 8);
      if ((_DWORD)v10 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v22 = &v21;
      *(double *)a4 = ((double (*)(char **, uint64_t))off_1E2920B58[v10])(&v22, result);
LABEL_22:
      v9 = 8;
LABEL_37:
      result = 0;
      *a3 = v9;
      return result;
    default:
      return result;
  }
}

uint64_t DSPGraph::CalculationBox::calculate(uint64_t this, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;

  v3 = this;
  if (a3)
  {
    v4 = -10877;
LABEL_3:
    *(_DWORD *)this = v4;
    *(_BYTE *)(this + 16) = 0;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 784))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 824);
        if (!v5)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        if (v5 == 1)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        v6 = *(unsigned int *)(a2 + 800);
        if ((_DWORD)v6 == -1 || (v7 = *(unsigned int *)(a2 + 816), (_DWORD)v7 == -1))
          std::__throw_bad_variant_access[abi:ne180100]();
        v37 = (uint64_t)&v39;
        this = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1E29209D8[2 * v6] + v7))(&v37, a2 + 792, a2 + 808);
        goto LABEL_49;
      case 1:
        v26 = *(_QWORD *)(a2 + 824);
        if (!v26)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        if (v26 == 1)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        v27 = *(unsigned int *)(a2 + 800);
        if ((_DWORD)v27 == -1 || (v28 = *(unsigned int *)(a2 + 816), (_DWORD)v28 == -1))
          std::__throw_bad_variant_access[abi:ne180100]();
        v37 = (uint64_t)&v39;
        this = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1E29209F8[2 * v27] + v28))(&v37, a2 + 792, a2 + 808);
        goto LABEL_49;
      case 2:
        v20 = *(_QWORD *)(a2 + 824);
        if (!v20)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        if (v20 == 1)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        v16 = a2 + 792;
        v17 = (uint64_t *)(a2 + 808);
        goto LABEL_30;
      case 3:
        v23 = *(_QWORD *)(a2 + 824);
        if (!v23)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        if (v23 == 1)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        v24 = *(unsigned int *)(a2 + 800);
        if ((_DWORD)v24 == -1 || (v25 = *(unsigned int *)(a2 + 816), (_DWORD)v25 == -1))
          std::__throw_bad_variant_access[abi:ne180100]();
        v37 = (uint64_t)&v39;
        this = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1E2920A38[2 * v24] + v25))(&v37, a2 + 792, a2 + 808);
        goto LABEL_49;
      case 4:
        if (!*(_QWORD *)(a2 + 824))
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        v16 = a2 + 792;
        v37 = -1;
        v38 = 0;
        v17 = &v37;
LABEL_30:
        this = DSPGraph::CalculationBox::Value::operator*(v16, (uint64_t)v17);
LABEL_49:
        *(_QWORD *)v3 = this;
        *(_QWORD *)(v3 + 8) = v8;
        break;
      case 5:
        if (!*(_QWORD *)(a2 + 824))
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        v29 = a2 + 792;
        this = DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(a2 + 792);
        if ((_DWORD)this)
        {
          v30 = boost::container::vector<DSPGraph::CalculationBox::Value,boost::container::dtl::static_storage_allocator<DSPGraph::CalculationBox::Value,2ul,0ul,true>,void>::operator[](v29);
          this = DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(v30);
LABEL_54:
          v31 = this;
        }
        else
        {
          v31 = 0;
        }
LABEL_65:
        *(_QWORD *)v3 = v31;
        *(_DWORD *)(v3 + 8) = 0;
        break;
      case 6:
        if (!*(_QWORD *)(a2 + 824))
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        v33 = a2 + 792;
        this = DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(a2 + 792);
        if ((this & 1) != 0)
        {
          v34 = 1;
        }
        else
        {
          v36 = boost::container::vector<DSPGraph::CalculationBox::Value,boost::container::dtl::static_storage_allocator<DSPGraph::CalculationBox::Value,2ul,0ul,true>,void>::operator[](v33);
          this = DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(v36);
          v34 = this;
        }
        *(_QWORD *)v3 = v34;
        *(_DWORD *)(v3 + 8) = 0;
        *(_BYTE *)(v3 + 16) = 1;
        return this;
      case 7:
        if (!*(_QWORD *)(a2 + 824))
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        this = DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(a2 + 792);
        goto LABEL_64;
      case 8:
        if (!*(_QWORD *)(a2 + 824))
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        v22 = (_OWORD *)(a2 + 792);
        goto LABEL_68;
      case 9:
        v19 = *(_QWORD *)(a2 + 824);
        if (!v19)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        if (v19 == 1)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        this = DSPGraph::CalculationBox::Value::operator==(a2 + 792, a2 + 808);
        goto LABEL_54;
      case 0xA:
        v35 = *(_QWORD *)(a2 + 824);
        if (!v35)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        if (v35 == 1)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        this = DSPGraph::CalculationBox::Value::operator==(a2 + 792, a2 + 808);
        goto LABEL_64;
      case 0xB:
        v15 = *(_QWORD *)(a2 + 824);
        if (!v15)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        if (v15 == 1)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        this = DSPGraph::CalculationBox::Value::operator<(a2 + 792, a2 + 808);
        goto LABEL_64;
      case 0xC:
        v18 = *(_QWORD *)(a2 + 824);
        if (!v18)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        if (v18 == 1)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        this = DSPGraph::CalculationBox::Value::operator>(a2 + 792, a2 + 808);
        goto LABEL_54;
      case 0xD:
        v32 = *(_QWORD *)(a2 + 824);
        if (!v32)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        if (v32 == 1)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        this = DSPGraph::CalculationBox::Value::operator>(a2 + 792, a2 + 808);
LABEL_64:
        v31 = this ^ 1;
        goto LABEL_65;
      case 0xE:
        v14 = *(_QWORD *)(a2 + 824);
        if (!v14)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        if (v14 == 1)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        this = DSPGraph::CalculationBox::Value::operator<(a2 + 792, a2 + 808);
        goto LABEL_54;
      case 0xF:
        v21 = *(_QWORD *)(a2 + 824);
        if (!v21)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        if (v21 == 1)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        v10 = (_OWORD *)(a2 + 792);
        v11 = (_OWORD *)(a2 + 808);
        v12 = a2 + 808;
        v13 = a2 + 792;
        goto LABEL_34;
      case 0x10:
        v9 = *(_QWORD *)(a2 + 824);
        if (!v9)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        if (v9 == 1)
          __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
        v10 = (_OWORD *)(a2 + 792);
        v11 = (_OWORD *)(a2 + 808);
        v12 = a2 + 792;
        v13 = a2 + 808;
LABEL_34:
        this = DSPGraph::CalculationBox::Value::operator<(v12, v13);
        if ((_DWORD)this)
          v22 = v11;
        else
          v22 = v10;
LABEL_68:
        *(_OWORD *)v3 = *v22;
        break;
      default:
        v4 = -10863;
        goto LABEL_3;
    }
    *(_BYTE *)(v3 + 16) = 1;
  }
  return this;
}

uint64_t DSPGraph::CalculationBox::Value::operator*(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  char *v7;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2 == -1 || (_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v7 = &v6;
  return ((uint64_t (*)(char **, uint64_t, uint64_t))*(&off_1E2920A18[2 * v2] + v3))(&v7, a1, a2);
}

uint64_t DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_1E2920AC8[v1])(&v4, a1);
}

uint64_t boost::container::vector<DSPGraph::CalculationBox::Value,boost::container::dtl::static_storage_allocator<DSPGraph::CalculationBox::Value,2ul,0ul,true>,void>::operator[](uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32) <= 1uLL)
    __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
  return a1 + 16;
}

uint64_t DSPGraph::CalculationBox::Value::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  char *v7;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2 == -1 || (_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v7 = &v6;
  return ((uint64_t (*)(char **, uint64_t, uint64_t))*(&off_1E2920A78[2 * v2] + v3))(&v7, a1, a2);
}

uint64_t DSPGraph::CalculationBox::Value::operator<(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  char *v7;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2 == -1 || (_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v7 = &v6;
  return ((uint64_t (*)(char **, uint64_t, uint64_t))*(&off_1E2920A58[2 * v2] + v3))(&v7, a1, a2);
}

uint64_t DSPGraph::CalculationBox::Value::operator>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  char *v7;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2 == -1 || (_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v7 = &v6;
  return ((uint64_t (*)(char **, uint64_t, uint64_t))*(&off_1E2920A98[2 * v2] + v3))(&v7, a1, a2);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator>(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 > *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator>(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, uint64_t *a2, double *a3)
{
  return *a3 < (double)*a2;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator>(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, uint64_t *a3)
{
  return *a2 > (double)*a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator>(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 > *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator<(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 < *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator<(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, uint64_t *a2, double *a3)
{
  return *a3 > (double)*a2;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator<(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, uint64_t *a3)
{
  return *a2 < (double)*a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator<(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 < *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator==(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator==(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, uint64_t *a2, double *a3)
{
  return *a3 == (double)*a2;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator==(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, uint64_t *a3)
{
  return *a2 == (double)*a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator==(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(void)::{lambda(BOOL)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(void)::{lambda(BOOL)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return *a2 != 0.0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator/(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  return *a2 / *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator/(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, uint64_t *a2, double *a3)
{
  double v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = *a3;
  v4 = 0x7FF0000000000000;
  v5 = 0xFFF0000000000000;
  if (!*a2)
    v5 = 0x7FF8000000000000;
  if (*a2 <= 0)
    v4 = v5;
  if (v3 == 0.0)
    return v4;
  else
    *(double *)&result = (double)*a2 / v3;
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator/(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, uint64_t *a3)
{
  return *a2 / (double)*a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator/(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, double *a3)
{
  double v3;
  uint64_t result;

  v3 = *a2;
  if (*a3 == 0.0)
  {
    if (v3 <= 0.0)
    {
      if (v3 >= 0.0)
        *(double *)&result = NAN;
      else
        *(double *)&result = -INFINITY;
    }
    else
    {
      *(double *)&result = INFINITY;
    }
  }
  else
  {
    *(double *)&result = v3 / *a3;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator*(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 * *a2;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator*(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, uint64_t *a2, double *a3)
{
  return *a3 * (double)*a2;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator*(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, uint64_t *a3)
{
  return *a2 * (double)*a3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator*(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 * *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator-(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 - *a3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator-(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, uint64_t *a2, double *a3)
{
  return (double)*a2 - *a3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator-(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, uint64_t *a3)
{
  return *a2 - (double)*a3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator-(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 - *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator+(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 + *a2;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator+(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, uint64_t *a2, double *a3)
{
  return *a3 + (double)*a2;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator+(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, uint64_t *a3)
{
  return *a2 + (double)*a3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator+(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 + *a3;
}

uint64_t DSPGraph::CalculationBox::Value::operator float<float>(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_1E2920AB8[v1])(&v4, a1);
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator double<double>(void)::{lambda(double)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, uint64_t *a2)
{
  return (double)*a2;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator double<double>(void)::{lambda(double)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator float<float>(void)::{lambda(float)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, uint64_t *a2)
{
  return (float)*a2;
}

float std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator float<float>(void)::{lambda(float)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned long long<unsigned long long>(void)::{lambda(unsigned long long)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned long long<unsigned long long>(void)::{lambda(unsigned long long)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return (unint64_t)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned int<unsigned int>(void)::{lambda(unsigned int)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned int<unsigned int>(void)::{lambda(unsigned int)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned short<unsigned short>(void)::{lambda(unsigned short)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned short<unsigned short>(void)::{lambda(unsigned short)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return (int)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned char<unsigned char>(void)::{lambda(unsigned char)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned char<unsigned char>(void)::{lambda(unsigned char)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return (int)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator long long<long long>(void)::{lambda(long long)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator long long<long long>(void)::{lambda(long long)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return (uint64_t)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator int<int>(void)::{lambda(int)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator int<int>(void)::{lambda(int)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return (int)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator short<short>(void)::{lambda(short)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, __int16 *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator short<short>(void)::{lambda(short)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return (int)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator signed char<signed char>(void)::{lambda(signed char)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator signed char<signed char>(void)::{lambda(signed char)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return (int)*a2;
}

void boost::container::dtl::static_storage_allocator<DSPGraph::CalculationBox::Value,2ul,0ul,true>::on_capacity_overflow(boost::container *a1)
{
  boost::container::throw_bad_alloc(a1);
}

void boost::container::throw_bad_alloc(boost::container *this)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  *exception = &off_1E290B368;
  exception[1] = "boost::container::bad_alloc thrown";
}

void boost::container::bad_alloc::~bad_alloc(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x193FFE460);
}

const char *boost::container::exception::what(boost::container::exception *this)
{
  if (*((_QWORD *)this + 1))
    return (const char *)*((_QWORD *)this + 1);
  else
    return "unknown boost::container exception";
}

void MP4BoxParser_TimeToSample::~MP4BoxParser_TimeToSample(MP4BoxParser_TimeToSample *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_TimeToSample::Init(MP4BoxParser **this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  NSObject *v9;
  const char *v10;
  unsigned int v12;
  uint64_t DataSourceBytes;
  unsigned int v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!(_DWORD)v2)
  {
    if (*((_DWORD *)this + 5) != 1937011827)
      return 4294967294;
    v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
    v4 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
    v5 = (unint64_t)this[3];
    v6 = v5 >= v4;
    v7 = v5 - v4;
    if (!v6 || v7 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 0xFFFFFFFFLL;
      v15 = 136315394;
      v16 = "MP4_BoxParser_TimeToSample.cpp";
      v17 = 1024;
      v18 = 83;
      v9 = MEMORY[0x1E0C81028];
      v10 = "%25s:%-5d  TimeToSample box too small to contain its entry count";
LABEL_9:
      _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v15, 0x12u);
      return 0xFFFFFFFFLL;
    }
    v12 = v4;
    DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, (char *)this + 60);
    if (!(_DWORD)DataSourceBytes)
    {
      v14 = bswap32(*((_DWORD *)this + 15));
      *((_DWORD *)this + 15) = v14;
      if ((unint64_t)this[3] - v12 - 4 >= 8 * (unint64_t)v14)
        return 0;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 0xFFFFFFFFLL;
      v15 = 136315394;
      v16 = "MP4_BoxParser_TimeToSample.cpp";
      v17 = 1024;
      v18 = 92;
      v9 = MEMORY[0x1E0C81028];
      v10 = "%25s:%-5d  TimeToSample box too small to contain its entries";
      goto LABEL_9;
    }
    v2 = DataSourceBytes;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v15 = 136315394;
      v16 = "MP4_BoxParser_TimeToSample.cpp";
      v17 = 1024;
      v18 = 86;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Can't read TimeToSample box entry count", (uint8_t *)&v15, 0x12u);
    }
  }
  return v2;
}

void std::__function::__func<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0,std::allocator<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0>,void ()(void const*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

__n128 std::__function::__func<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0,std::allocator<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0>,void ()(void const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2915BA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0,std::allocator<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0>,void ()(void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2915BA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0,std::allocator<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0>,void ()(void const*)>::operator()(uint64_t result, int8x8_t **a2)
{
  uint64_t v2;
  int8x8_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int8x8_t v6;
  int32x2_t v7;

  v2 = *(unsigned int *)(*(_QWORD *)(result + 8) + 60);
  if ((_DWORD)v2)
  {
    v3 = *a2;
    v4 = *(uint64_t **)(result + 16);
    v5 = *v4;
    do
    {
      v6 = *v3++;
      v7 = (int32x2_t)vrev32_s8(v6);
      v5 += vmul_lane_s32(v7, v7, 1).u32[0];
      --v2;
    }
    while (v2);
    *v4 = v5;
  }
  return result;
}

uint64_t ID3CallbackProc(_DWORD *a1, int a2, unsigned int a3, int a4, void **a5, unsigned int *a6)
{
  uint64_t result;
  unsigned int v8;

  if (a2)
    return 0;
  v8 = a1[2];
  if (a4 + a3 > v8)
    return 4294967272;
  result = 0;
  *a5 = (void *)(*(_QWORD *)a1 + a3);
  *a6 = v8 - a3;
  return result;
}

uint64_t AudioFormatProperty_ID3TagToDictionary(unsigned __int8 *a1, int a2, __CFDictionary **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFIndex v7;
  unsigned int v8;
  const __CFAllocator *v9;
  uint64_t v10;
  unsigned int v11;
  const __CFString *v12;
  uint64_t v13;
  CFTypeID v14;
  __CFDictionary *v15;
  uint64_t v16;
  __CFDictionary *v18;
  __int16 v19;
  __CFDictionary *v20;
  __CFString *v21;
  CFTypeRef v22;
  __int16 v23;
  int v24;
  CFTypeRef Mutable;
  __int16 v26;
  CFTypeRef cf;
  UInt8 bytes[4];
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;

  v37 = 0;
  v4 = 2003329396;
  v35 = a1;
  v36 = a2;
  if (!ID3ParserOpen((uint64_t)&v35, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, unsigned __int8 **, unsigned int *))ID3CallbackProc, &v37))
  {
    v34 = 0;
    v33 = 4;
    v5 = BaseOpaqueObject::ResolveOpaqueRef();
    if (v5
      && !(*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, int *, unsigned int *))(*(_QWORD *)v5 + 32))(v5, 0, 0, 1717792372, &v33, &v34))
    {
      *(_DWORD *)bytes = 0;
      cf = 0;
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v26 = 257;
      v24 = 0;
      v33 = 4;
      v6 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v6)
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)v6 + 32))(v6, 0, 0, 1953916274, &v33, &v24);
      if (v24 == 2)
        v7 = 3;
      else
        v7 = 4;
      v29 = 0;
      if (v34)
      {
        v8 = 0;
        v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        do
        {
          v33 = 12;
          v30 = v8;
          v10 = BaseOpaqueObject::ResolveOpaqueRef();
          if (v10
            && !(*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t, int *, unsigned int *))(*(_QWORD *)v10 + 32))(v10, 8, &v29, 1718185574, &v33, &v31))
          {
            v11 = bswap32(v31);
            *(_DWORD *)bytes = v11;
            if (v24 == 2)
              *(_DWORD *)bytes = v11 >> 8;
            v12 = CFStringCreateWithBytes(v9, bytes, v7, 0x201u, 0);
            if (v12)
            {
              v33 = 8;
              v30 = v8;
              v13 = BaseOpaqueObject::ResolveOpaqueRef();
              if (v13
                && !(*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t, int *, CFTypeRef *))(*(_QWORD *)v13 + 32))(v13, 4, &v32, 1717854580, &v33, &cf))
              {
                v14 = CFGetTypeID(cf);
                if (v14 == CFDictionaryGetTypeID())
                {
                  v21 = 0;
                  v22 = cf;
                  v23 = 0;
                  CACFDictionary::GetString((CACFDictionary *)&v22, CFSTR("identifier"), (const __CFString **)&v21);
                  if (v21)
                  {
                    v20 = 0;
                    if (CACFDictionary::GetDictionary((CACFDictionary *)&Mutable, v12, &v20))
                    {
                      v18 = v20;
                      v19 = 256;
                      CACFDictionary::AddDictionary((CACFDictionary *)&v18, v21, (const __CFDictionary *)cf);
                    }
                    else
                    {
                      v18 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                      v19 = 257;
                      if (CACFDictionary::AddDictionary((CACFDictionary *)&v18, v21, (const __CFDictionary *)cf))CACFDictionary::AddDictionary((CACFDictionary *)&Mutable, v12, v18);
                    }
                    CACFDictionary::~CACFDictionary((CACFDictionary *)&v18);
                  }
                  CACFDictionary::~CACFDictionary((CACFDictionary *)&v22);
                }
                else
                {
                  CACFDictionary::AddCFType((CACFDictionary *)&Mutable, v12, cf);
                }
                CFRelease(cf);
                cf = 0;
              }
              CFRelease(v12);
            }
          }
          ++v8;
        }
        while (v8 < v34);
      }
      if (CACFDictionary::Size((CACFDictionary *)&Mutable))
      {
        if (Mutable)
        {
          CFRetain(Mutable);
          v15 = (__CFDictionary *)Mutable;
        }
        else
        {
          v15 = 0;
        }
        v4 = 0;
        *a3 = v15;
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
    }
    v16 = BaseOpaqueObject::ResolveOpaqueRef();
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return v4;
}

void sub_18EF94C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va2);
  _Unwind_Resume(a1);
}

void sub_18EF94D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18EF94DD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EF94E6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SetAllowedClassesForAUAudioUnitHostXPCInterface(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v4 = a1;
  objc_msgSend(v4, "classesForSelector:argumentIndex:ofReply:", sel_propertiesChanged_, 0, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(v1, "mutableCopy");

  objc_opt_self();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  objc_msgSend(v2, "addObject:", objc_opt_class());
  objc_msgSend(v4, "setClasses:forSelector:argumentIndex:ofReply:", v2, sel_propertiesChanged_, 0, 0);
  if (getAVSpeechSynthesisMarkerClass() && getAVSpeechSynthesisProviderRequestClass())
  {
    objc_msgSend(v2, "addObject:", getAVSpeechSynthesisMarkerClass());
    objc_msgSend(v2, "addObject:", getAVSpeechSynthesisProviderRequestClass());
    objc_msgSend(v4, "setClasses:forSelector:argumentIndex:ofReply:", v2, sel_speechSynthesisMetadataAvailable_speechRequest_, 0, 0);
  }

}

void sub_18EF95008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id getAVSpeechSynthesisMarkerClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVSpeechSynthesisMarkerClass(void)::softClass;
  v7 = getAVSpeechSynthesisMarkerClass(void)::softClass;
  if (!getAVSpeechSynthesisMarkerClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL31getAVSpeechSynthesisMarkerClassv_block_invoke;
    v3[3] = &unk_1E29222D8;
    v3[4] = &v4;
    ___ZL31getAVSpeechSynthesisMarkerClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18EF950E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVSpeechSynthesisProviderRequestClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVSpeechSynthesisProviderRequestClass(void)::softClass;
  v7 = getAVSpeechSynthesisProviderRequestClass(void)::softClass;
  if (!getAVSpeechSynthesisProviderRequestClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL40getAVSpeechSynthesisProviderRequestClassv_block_invoke;
    v3[3] = &unk_1E29222D8;
    v3[4] = &v4;
    ___ZL40getAVSpeechSynthesisProviderRequestClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18EF95198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL40getAVSpeechSynthesisProviderRequestClassv_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFAudioLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVSpeechSynthesisProviderRequest");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVSpeechSynthesisProviderRequestClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                          + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVSpeechSynthesisProviderRequestClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AVFASoftLink.h"), 67, CFSTR("Unable to find class %s"), "AVSpeechSynthesisProviderRequest");

    __break(1u);
  }
}

void sub_18EF95274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EF95394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _Unwind_Exception *exception_object)
{
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZL31getAVSpeechSynthesisMarkerClassv_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFAudioLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVSpeechSynthesisMarker");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVSpeechSynthesisMarkerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVSpeechSynthesisMarkerClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AVFASoftLink.h"), 69, CFSTR("Unable to find class %s"), "AVSpeechSynthesisMarker");

    __break(1u);
  }
}

void sub_18EF9547C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EF956AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EF957A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18EF9586C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_18EF959F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EF95AD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CreateAUAudioUnitXPCInterface()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE169DC0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  ConfigureAUAudioUnitXPCInterface(v0);
  objc_claimAutoreleasedReturnValue();

  return v0;
}

void sub_18EF95BF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ConfigureAUAudioUnitXPCInterface(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id AVSpeechSynthesisProviderRequestClass;
  void *v38;
  id v39;
  uint8_t buf[8];
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;

  v1 = a1;
  objc_msgSend(v1, "classesForSelector:argumentIndex:ofReply:", sel_valueForProperty_propagateError_reply_, 1, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "mutableCopy");

  objc_opt_self();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v4);

  objc_opt_self();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v5);

  objc_msgSend(v1, "setXPCType:forSelector:argumentIndex:ofReply:", MEMORY[0x1E0C812F8], sel_createRenderPipe_formats_maxFrames_midiOutSizeHint_resources_reply_, 4, 0);
  v6 = (void *)objc_msgSend(v3, "mutableCopy");
  objc_opt_self();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v7);

  objc_opt_self();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v8);

  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_valueForProperty_propagateError_reply_, 1, 1);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_setValue_forProperty_propagateError_reply_, 0, 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_valueForKey_reply_, 1, 1);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_setValue_forKey_reply_, 0, 0);

  v9 = (void *)MEMORY[0x1E0C99E60];
  objc_opt_self();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_self();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_self();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setWithObjects:", v10, v11, v12, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v13, sel_valueForProperty_propagateError_reply_, 0, 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v13, sel_valueForKey_reply_, 0, 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v13, sel_setValue_forProperty_propagateError_reply_, 1, 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v13, sel_setValue_forProperty_propagateError_reply_, 1, 1);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v13, sel_setValue_forKey_reply_, 1, 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v13, sel_setValue_forKey_reply_, 1, 1);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v13, sel_setBusFormat_scope_format_reply_, 1, 1);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v13, sel_setBusCount_scope_reply_, 1, 1);

  v14 = (void *)objc_msgSend(v3, "mutableCopy");
  objc_opt_self();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObject:", v15);

  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v14, sel_open_instanceUUID_reply_, 3, 1);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v14, sel_open_instanceUUID_reply_, 4, 1);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v14, sel_getBusses_reply_, 1, 1);

  v16 = (void *)objc_msgSend(v3, "mutableCopy");
  objc_opt_self();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addObject:", v17);

  objc_opt_self();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addObject:", v18);

  objc_opt_self();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addObject:", v19);

  objc_opt_self();
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addObject:", v20);

  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v16, sel_getParameterTree_, 1, 1);
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "infoDictionary");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("AUAudioUnitViewsSupported"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (v23 && (v24 = objc_msgSend(v23, "BOOLValue"), v23, !v24))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Not supporting AUAudioUnitViews in this audio unit interface.", buf, 2u);
    }
  }
  else
  {
    v25 = (void *)objc_msgSend(v3, "mutableCopy");
    v46 = 0;
    v47 = &v46;
    v48 = 0x2050000000;
    v26 = (void *)getAUAudioUnitViewConfigurationClass(void)::softClass;
    v49 = getAUAudioUnitViewConfigurationClass(void)::softClass;
    if (!getAUAudioUnitViewConfigurationClass(void)::softClass)
    {
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v42 = 3221225472;
      v43 = ___ZL36getAUAudioUnitViewConfigurationClassv_block_invoke;
      v44 = &unk_1E29222D8;
      v45 = &v46;
      ___ZL36getAUAudioUnitViewConfigurationClassv_block_invoke((uint64_t)buf);
      v26 = (void *)v47[3];
    }
    v27 = objc_retainAutorelease(v26);
    _Block_object_dispose(&v46, 8);
    objc_msgSend(v25, "addObject:", v27);
    objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v25, sel_supportedViewConfigurations_reply_, 0, 0);
    objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v25, sel_selectViewConfiguration_reply_, 0, 0);

  }
  v28 = (void *)objc_msgSend(v3, "mutableCopy");
  objc_opt_self();
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "addObject:", v29);

  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v28, sel_loadUserPresets_, 1, 1);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v28, sel_saveUserPreset_state_reply_, 0, 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v28, sel_presetStateFor_reply_, 0, 0);

  v30 = (void *)objc_msgSend(v3, "mutableCopy");
  v46 = 0;
  v47 = &v46;
  v48 = 0x2050000000;
  v31 = (void *)getAVAudioFormatClass(void)::softClass;
  v49 = getAVAudioFormatClass(void)::softClass;
  if (!getAVAudioFormatClass(void)::softClass)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v42 = 3221225472;
    v43 = ___ZL21getAVAudioFormatClassv_block_invoke_4422;
    v44 = &unk_1E29222D8;
    v45 = &v46;
    ___ZL21getAVAudioFormatClassv_block_invoke_4422((uint64_t)buf);
    v31 = (void *)v47[3];
  }
  v32 = objc_retainAutorelease(v31);
  _Block_object_dispose(&v46, 8);
  objc_msgSend(v30, "addObject:", v32);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v30, sel_setBusFormat_scope_format_reply_, 2, 0);

  v33 = (void *)objc_msgSend(v3, "mutableCopy");
  objc_opt_self();
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "addObject:", v34);

  objc_opt_self();
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "addObject:", v35);

  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v33, sel_profileStateForCable_channel_reply_, 1, 1);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v33, sel_enableProfile_cable_onChannel_reply_, 0, 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v33, sel_disableProfile_cable_onChannel_reply_, 0, 0);

  objc_msgSend(v1, "setXPCType:forSelector:argumentIndex:ofReply:", MEMORY[0x1E0C812F8], sel_updateWorkgroupMirror_reply_, 0, 0);
  v36 = (void *)objc_msgSend(v3, "mutableCopy");
  AVSpeechSynthesisProviderRequestClass = getAVSpeechSynthesisProviderRequestClass();
  if (AVSpeechSynthesisProviderRequestClass)
    objc_msgSend(v36, "addObject:", AVSpeechSynthesisProviderRequestClass);
  v46 = 0;
  v47 = &v46;
  v48 = 0x2050000000;
  v38 = (void *)getAVSpeechSynthesisProviderVoiceClass(void)::softClass;
  v49 = getAVSpeechSynthesisProviderVoiceClass(void)::softClass;
  if (!getAVSpeechSynthesisProviderVoiceClass(void)::softClass)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v42 = 3221225472;
    v43 = ___ZL38getAVSpeechSynthesisProviderVoiceClassv_block_invoke;
    v44 = &unk_1E29222D8;
    v45 = &v46;
    ___ZL38getAVSpeechSynthesisProviderVoiceClassv_block_invoke((uint64_t)buf);
    v38 = (void *)v47[3];
  }
  v39 = objc_retainAutorelease(v38);
  _Block_object_dispose(&v46, 8);
  if (v39)
    objc_msgSend(v36, "addObject:", v39);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v36, sel_synthesizeSpeechRequest_reply_, 0, 0);
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v36, sel_getSpeechVoices_, 1, 1);

  return v1;
}

void sub_18EF96484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

Class ___ZL36getAUAudioUnitViewConfigurationClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
    CoreAudioKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreAudioKitLibrary()");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AUAudioUnit_Internal.h"), 352, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("AUAudioUnitViewConfiguration");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAUAudioUnitViewConfigurationClass()_block_invoke");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("AUAudioUnit_Internal.h"), 355, CFSTR("Unable to find class %s"), "AUAudioUnitViewConfiguration");

LABEL_8:
    __break(1u);
  }
  getAUAudioUnitViewConfigurationClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18EF96740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZL21getAVAudioFormatClassv_block_invoke_4422(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFAudioLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioFormat");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVAudioFormatClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVAudioFormatClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AVFASoftLink.h"), 64, CFSTR("Unable to find class %s"), "AVAudioFormat");

    __break(1u);
  }
}

void sub_18EF96848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL38getAVSpeechSynthesisProviderVoiceClassv_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AVFAudioLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVSpeechSynthesisProviderVoice");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVSpeechSynthesisProviderVoiceClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVSpeechSynthesisProviderVoiceClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AVFASoftLink.h"), 68, CFSTR("Unable to find class %s"), "AVSpeechSynthesisProviderVoice");

    __break(1u);
  }
}

void sub_18EF96928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *std::vector<CA::ADMLabel>::__push_back_slow_path<CA::ADMLabel>(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v2 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x492492492492492)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(56 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[56 * v2];
  *v8 = 0;
  v8[24] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v8[24] = 1;
  }
  v9 = &v7[56 * v6];
  v10 = &v7[56 * v2];
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v10 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v11 = v8 + 56;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = &v8[v14];
      v8[v14 - 56] = 0;
      v16 = &v13[v14];
      v8[v14 - 32] = 0;
      if (v13[v14 - 32])
      {
        v17 = v16 - 56;
        v18 = *(_OWORD *)(v16 - 56);
        *(_QWORD *)&v8[v14 - 40] = *((_QWORD *)v16 - 5);
        *(_OWORD *)&v8[v14 - 56] = v18;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 2) = 0;
        *(_QWORD *)v17 = 0;
        *(v15 - 32) = 1;
      }
      v19 = *(_OWORD *)(v16 - 24);
      *((_QWORD *)v15 - 1) = *((_QWORD *)v16 - 1);
      *(_OWORD *)(v15 - 24) = v19;
      *((_QWORD *)v16 - 2) = 0;
      *((_QWORD *)v16 - 1) = 0;
      *((_QWORD *)v16 - 3) = 0;
      v14 -= 56;
    }
    while (&v13[v14] != v12);
    v13 = (char *)*a1;
    v20 = (uint64_t)a1[1];
    *a1 = &v8[v14];
    a1[1] = v11;
    a1[2] = v9;
    while ((char *)v20 != v13)
    {
      v20 -= 56;
      std::__destroy_at[abi:ne180100]<CA::ADMLabel,0>(v20);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void std::__destroy_at[abi:ne180100]<CA::ADMAlternativeValueSet,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 32);
  std::vector<CA::ADMLabel>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
}

uint64_t acv2::AudioConverterV2::getPropertyInfo(acv2::AudioConverterV2 *this, uint64_t a2, unsigned int *a3, BOOL *a4)
{
  uint64_t v8;
  OpaqueAudioComponentInstance **PropertyDelegate;
  uint64_t v10;
  int v12;
  int v13;
  int v14;
  uint64_t OutputLayoutSize;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  acv2::CodecConverter *v24;
  char v25[4];
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;

  if (*((_BYTE *)this + 12) || !*((_BYTE *)this + 13))
  {
    v25[0] = 0;
    v31 = 0;
  }
  else
  {
    v32[1] = 2739;
    v33 = a2;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    kdebug_trace();
    v25[0] = 1;
    v26 = 2739;
    v27 = a2;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    LOBYTE(v32[0]) = 0;
    v31 = 1;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v32);
  }
  v8 = *((_QWORD *)this + 4);
  PropertyDelegate = acv2::AudioConverterChain::GetPropertyDelegate((acv2::AudioConverterChain *)v8, a2);
  if (PropertyDelegate)
  {
    v10 = (*((uint64_t (**)(OpaqueAudioComponentInstance **, uint64_t, unsigned int *, BOOL *))*PropertyDelegate
           + 10))(PropertyDelegate, a2, a3, a4);
    goto LABEL_7;
  }
  v10 = 1886547824;
  if ((int)a2 > 1835626095)
  {
    if ((int)a2 > 1886546284)
    {
      if ((a2 - 1936876385) > 0x10 || ((1 << (a2 - 97)) & 0x18101) == 0)
      {
        if ((_DWORD)a2 != 1886546285)
        {
          v12 = 1919837298;
LABEL_51:
          if ((_DWORD)a2 != v12)
            goto LABEL_7;
          goto LABEL_52;
        }
        if (a3)
        {
          v21 = *(_QWORD **)(v8 + 104);
          v22 = *(_QWORD **)(v8 + 112);
          if (v21 == v22)
          {
            v23 = *(_QWORD **)(v8 + 104);
          }
          else
          {
            while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v21 + 120))(*v21) & 1) == 0)
            {
              if (++v21 == v22)
              {
                v21 = v22;
                break;
              }
            }
            v23 = v21;
            v21 = *(_QWORD **)(v8 + 112);
          }
          *a3 = 8 * (v23 != v21);
        }
        if (a4)
        {
          v24 = *(acv2::CodecConverter **)(v8 + 344);
          if (v24)
          {
            v10 = 0;
            *a4 = acv2::CodecConverter::PrimeInfoIsWritable(v24);
            goto LABEL_7;
          }
LABEL_48:
          v10 = 0;
          *a4 = 0;
          goto LABEL_7;
        }
LABEL_88:
        v10 = 0;
        goto LABEL_7;
      }
    }
    else
    {
      if ((int)a2 > 1868786719)
      {
        if ((_DWORD)a2 != 1868786720)
        {
          if ((_DWORD)a2 != 1885627760)
            goto LABEL_7;
LABEL_40:
          if (!a3)
            goto LABEL_47;
          v16 = 4;
LABEL_46:
          *a3 = v16;
          goto LABEL_47;
        }
        v32[0] = 0;
        OutputLayoutSize = acv2::AudioConverterChain::GetOutputLayoutSize((acv2::AudioConverterChain *)v8, v32, &v37);
        goto LABEL_59;
      }
      if ((_DWORD)a2 != 1835626096)
      {
        if ((_DWORD)a2 != 1835884912)
          goto LABEL_7;
        if (a3)
        {
          v13 = *(unsigned __int8 *)(v8 + 416);
          if (!*(_BYTE *)(v8 + 416))
          {
LABEL_54:
            *a3 = v13;
            goto LABEL_55;
          }
          v14 = *(_DWORD *)(v8 + 28) * *(_DWORD *)(v8 + 68);
LABEL_29:
          v13 = 4 * v14;
          goto LABEL_54;
        }
LABEL_55:
        if (a4)
        {
          v10 = 0;
LABEL_57:
          *a4 = 1;
          goto LABEL_7;
        }
        goto LABEL_88;
      }
    }
    if (*(_QWORD *)(v8 + 296) == *(_QWORD *)(v8 + 304))
      goto LABEL_7;
    goto LABEL_52;
  }
  if ((int)a2 <= 1667850866)
  {
    if ((int)a2 > 1633906531)
    {
      if ((_DWORD)a2 != 1633906532)
      {
        if ((_DWORD)a2 == 1633906803)
        {
          v18 = *(_QWORD **)(v8 + 104);
          v19 = *(_QWORD **)(v8 + 112);
          if (v18 == v19)
            goto LABEL_81;
          while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v18 + 136))(*v18) & 1) == 0)
          {
            if (++v18 == v19)
            {
              v18 = v19;
              break;
            }
          }
          if (v18 == *(_QWORD **)(v8 + 112))
          {
LABEL_81:
            if (a3)
              *a3 = 0;
LABEL_47:
            if (a4)
              goto LABEL_48;
            goto LABEL_88;
          }
          if (a3)
          {
            v13 = 8;
            goto LABEL_54;
          }
        }
        else
        {
          if ((_DWORD)a2 != 1667788144)
            goto LABEL_7;
          if (a3)
          {
            v14 = *(_DWORD *)(v8 + 68);
            goto LABEL_29;
          }
        }
        goto LABEL_55;
      }
LABEL_44:
      if (!a3)
        goto LABEL_47;
      v16 = 40;
      goto LABEL_46;
    }
    if ((_DWORD)a2 != 1633903204)
    {
      if ((_DWORD)a2 != 1633904996)
        goto LABEL_7;
      goto LABEL_44;
    }
    v20 = *(_QWORD *)(v8 + 344);
    if (!v20 || !*(_BYTE *)(v20 + 196))
      goto LABEL_7;
LABEL_52:
    if (!a3)
      goto LABEL_55;
    v13 = 4;
    goto LABEL_54;
  }
  if ((int)a2 <= 1684632679)
  {
    if ((_DWORD)a2 != 1667850867 && (_DWORD)a2 != 1668244083)
    {
      v12 = 1684171124;
      goto LABEL_51;
    }
    goto LABEL_40;
  }
  if ((_DWORD)a2 == 1684632680 || (_DWORD)a2 == 1684892024)
    goto LABEL_52;
  if ((_DWORD)a2 != 1768123424)
    goto LABEL_7;
  v32[0] = 0;
  OutputLayoutSize = acv2::AudioConverterChain::GetInputLayoutSize((acv2::AudioConverterChain *)v8, v32, &v37);
LABEL_59:
  v10 = OutputLayoutSize;
  if (a3)
  {
    v17 = v32[0];
    if ((_DWORD)OutputLayoutSize)
      v17 = 0;
    *a3 = v17;
  }
  if (a4)
    goto LABEL_57;
LABEL_7:
  if (v31)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v25);
  return v10;
}

void sub_18EF9703C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a9);
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterV2::fillBuffer(acv2::AudioConverterV2 *this, int (*a2)(OpaqueAudioConverter *, unsigned int *, void **, void *), void *a3, unsigned int *a4, void *a5)
{
  uint64_t v5;
  UInt32 v8;
  UInt32 v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t message;
  caulk::concurrent::message *v18;
  uint64_t v19;
  uint64_t v20;
  caulk::concurrent::message *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _DWORD v29[12];
  void *v30;
  void *v31;
  char v32;
  _QWORD v33[3];
  AudioBufferList v34;
  void *v35;
  int (*v36)(OpaqueAudioConverter *, unsigned int *, void **, void *);

  v35 = a3;
  v36 = a2;
  v5 = *((_QWORD *)this + 4);
  if (!*(_BYTE *)(v5 + 96))
  {
    if (a2)
    {
      if (a4)
      {
        if (a5)
        {
          if (!*(_BYTE *)(v5 + 81) && !*(_BYTE *)(v5 + 80))
          {
            v8 = 1;
            v34.mNumberBuffers = 1;
            if ((*(_BYTE *)(v5 + 52) & 0x20) == 0)
              v8 = *(_DWORD *)(v5 + 68);
            v9 = *a4;
            v34.mBuffers[0].mNumberChannels = v8;
            v34.mBuffers[0].mDataByteSize = v9;
            v34.mBuffers[0].mData = a5;
            v10 = *(_DWORD *)(v5 + 56);
            v33[0] = this;
            v33[1] = &v36;
            v33[2] = &v35;
            ACBaseAudioSpan::ACBaseAudioSpan((ACBaseAudioSpan *)v29, v9 / v10, &v34, 0);
            v11 = *((_QWORD *)this + 4);
            *(_QWORD *)&v28 = caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterV2::fillBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,void **,void *),void *,unsigned int *,void *)::$_0>;
            *((_QWORD *)&v28 + 1) = v33;
            v12 = acv2::AudioConverterChain::ProduceOutput(v11, &v28, (ACBaseAudioSpan *)v29);
            if ((v12 & 0xFF00000000) != 0)
              v13 = 0;
            else
              v13 = v12;
            v14 = *(_DWORD *)(*((_QWORD *)this + 4) + 56) * v29[0];
            *a4 = v14;
            if (!(_DWORD)v13 && v14 != v34.mBuffers[0].mDataByteSize)
              std::terminate();
            if (v32 && v30)
            {
              v31 = v30;
              std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v30);
            }
            return v13;
          }
          v16 = _os_log_pack_size();
          message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v16 + 88, 16);
          if (message)
          {
            v18 = (caulk::concurrent::message *)message;
LABEL_28:
            *(_WORD *)_os_log_pack_fill() = 0;
            caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v18);
          }
        }
        else
        {
          v26 = _os_log_pack_size();
          v27 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v26 + 88, 16);
          if (v27)
          {
            v18 = (caulk::concurrent::message *)v27;
            goto LABEL_28;
          }
        }
      }
      else
      {
        v24 = _os_log_pack_size();
        v25 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v24 + 88, 16);
        if (v25)
        {
          v18 = (caulk::concurrent::message *)v25;
          goto LABEL_28;
        }
      }
    }
    else
    {
      v22 = _os_log_pack_size();
      v23 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v22 + 88, 16);
      if (v23)
      {
        v18 = (caulk::concurrent::message *)v23;
        goto LABEL_28;
      }
    }
    return 4294967246;
  }
  v13 = 1869627199;
  v19 = _os_log_pack_size();
  v20 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v19 + 88, 16);
  if (v20)
  {
    v21 = (caulk::concurrent::message *)v20;
    *(_WORD *)_os_log_pack_fill() = 0;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v21);
  }
  return v13;
}

void sub_18EF97304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24)
  {
    if (a19)
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void AudioConverterAPI::isOOPPropertyInfo(AudioConverterAPI *this, unsigned int *a2, unsigned __int8 *a3)
{
  if (a2)
    *a2 = 4;
  if (a3)
    *a3 = 0;
}

uint64_t AudioConverterAPI::isOOP(AudioConverterAPI *this)
{
  return 0;
}

uint64_t AudioConverterAPI::isOOP(AudioConverterAPI *this, unsigned int *a2, _DWORD *a3)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t message;
  caulk::concurrent::message *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  if (!a2)
  {
    v6 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v6 + 88, 16);
    if (message)
    {
      v8 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
LABEL_10:
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v8);
    }
    return 4294967246;
  }
  if (!a3)
  {
    v9 = _os_log_pack_size();
    v10 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v9 + 88, 16);
    if (v10)
    {
      v8 = (caulk::concurrent::message *)v10;
      v11 = (_DWORD *)_os_log_pack_fill();
      *v11 = 67109120;
      v11[1] = 1869574207;
      goto LABEL_10;
    }
    return 4294967246;
  }
  if (*a2 < 4)
    return 561211770;
  v5 = (*(uint64_t (**)(AudioConverterAPI *))(*(_QWORD *)this + 104))(this);
  result = 0;
  *a3 = v5;
  return result;
}

uint64_t caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterV2::convertComplexBuffer(unsigned int,AudioBufferList const*,AudioBufferList*)::$_1>(_BYTE ***a1, ACBaseAudioSpan *this)
{
  _BYTE **v2;
  uint64_t v4;

  v2 = *a1;
  if (***a1)
  {
    *(_DWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    ACBaseAudioSpan::resetMetadataEvents((uint64_t *)this);
    return 0x100000000;
  }
  else
  {
    memcpy(*((void **)this + 2), *(const void **)v2[1], 16 * (**(_DWORD **)v2[1] - 1) + 24);
    v4 = *(unsigned int *)v2[2];
    **v2 = 1;
    return v4 | 0x100000000;
  }
}

uint64_t caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterV2::fillComplexBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *),void *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription *,AudioStreamPacketDependencyInfo *)::$_1>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;

  v3 = *a1;
  v4 = *(unsigned int **)(a2 + 16);
  v5 = *v4;
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 16 * v5;
    do
    {
      v8 = *(unsigned int *)(a2 + 12);
      v9 = *(_QWORD *)(a2 + 16) + v6;
      *(_DWORD *)(v9 + 12) = v8;
      bzero(*(void **)(v9 + 16), v8);
      v6 += 16;
    }
    while (v7 != v6);
    v4 = *(unsigned int **)(a2 + 16);
  }
  v15 = *(_DWORD *)(a2 + 4);
  v14 = *(_QWORD *)(a2 + 32);
  if (v14)
    v10 = &v14;
  else
    v10 = 0;
  v11 = (*(uint64_t (**)(_QWORD, unsigned int *, unsigned int *, uint64_t *, _QWORD))v3)(*(_QWORD *)(v3 + 16), &v15, v4, v10, *(_QWORD *)(v3 + 8));
  if (v11)
  {
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = v14;
    v12 = 0x100000000;
    v11 = v15;
  }
  return v12 | v11;
}

uint64_t caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterV2::fillBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,void **,void *),void *,unsigned int *,void *)::$_0>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;

  v2 = *a1;
  v3 = **a1;
  v4 = *(unsigned int **)(a2 + 16);
  v5 = *v4;
  if ((_DWORD)v5)
  {
    v7 = 0;
    v8 = 16 * v5;
    do
    {
      v9 = *(unsigned int *)(a2 + 12);
      v10 = *(_QWORD *)(a2 + 16) + v7;
      *(_DWORD *)(v10 + 12) = v9;
      bzero(*(void **)(v10 + 16), v9);
      v7 += 16;
    }
    while (v8 != v7);
    v4 = *(unsigned int **)(a2 + 16);
  }
  v11 = v4 + 3;
  v12 = (*(uint64_t (**)(_QWORD, _DWORD *, _DWORD *, _QWORD))v2[1])(*(unsigned int *)(v3 + 8), v11, v11 + 1, *(_QWORD *)v2[2]);
  if (v12)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0x100000000;
    v12 = *v11 / *(_DWORD *)(*(_QWORD *)(v3 + 32) + 16);
  }
  return v13 | v12;
}

acv2::AudioConverterChain *std::unique_ptr<acv2::AudioConverterChain>::reset[abi:ne180100](acv2::AudioConverterChain **a1, acv2::AudioConverterChain *a2)
{
  acv2::AudioConverterChain *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    acv2::AudioConverterChain::~AudioConverterChain(result);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void AudioConverterAPI::~AudioConverterAPI(AudioConverterAPI *this)
{
  *(_QWORD *)this = off_1E2906EF0;
  if (*((_BYTE *)this + 28))
  {
    *((_BYTE *)this + 28) = 0;
    kdebug_trace();
  }
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

void AudioConverterPrepare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[6];
  _QWORD block[5];
  _QWORD v9[3];
  int v10;

  v4 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x1E0C80D50], QOS_CLASS_USER_INITIATED, 0);
  v5 = dispatch_queue_create("AudioConverterPrepareQueue", v4);
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v6 = MEMORY[0x1E0C809B0];
  v10 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __AudioConverterPrepare_block_invoke;
  block[3] = &unk_1E2920C08;
  block[4] = v9;
  dispatch_async(v5, block);
  dispatch_async(v5, &__block_literal_global_4571);
  v7[0] = v6;
  v7[1] = 0x40000000;
  v7[2] = __AudioConverterPrepare_block_invoke_3;
  v7[3] = &unk_1E2920C70;
  v7[4] = a3;
  v7[5] = v9;
  dispatch_barrier_async(v5, v7);
  _Block_object_dispose(v9, 8);
  if (v5)
    dispatch_release(v5);
}

void sub_18EF97B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AudioConverterNewInternal(const AudioStreamBasicDescription *a1, const AudioStreamBasicDescription *a2, uint64_t a3, const AudioClassDescription *a4, _QWORD *a5, uint64_t (*a6)(const AudioStreamBasicDescription *a1, const AudioStreamBasicDescription *a2, unsigned int a3, const AudioClassDescription *a4, int a5), uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  int AppBooleanValue;
  int v18;
  int v19;
  NSObject *v20;
  __int128 v21;
  int v22;
  NSObject *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  double v29;
  int16x8_t v30;
  void **v31;
  size_t v32;
  double v33;
  int16x8_t v34;
  void **v35;
  size_t v36;
  NSObject *v37;
  double v38;
  int16x8_t v39;
  const char *v40;
  void **v41;
  double v42;
  int16x8_t v43;
  void **v44;
  void **v45;
  void **v46;
  void *v48[2];
  char v49;
  void *__p[2];
  uint64_t v51;
  void *v52[2];
  uint64_t v53;
  void *v54[2];
  uint64_t v55;
  __int128 v56;
  _BYTE v57[24];
  __int128 v58;
  _BYTE v59[24];
  int v60;
  _OWORD v61[3];
  _OWORD v62[3];
  _BYTE buf[18];
  __int16 v64;
  const char *v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  void **v69;
  __int16 v70;
  void **v71;
  __int16 v72;
  void **v73;
  __int16 v74;
  _BYTE v75[10];
  char v76;
  _QWORD v77[22];

  v77[19] = *MEMORY[0x1E0C80C00];
  if (gWorkgroundInitOnce != -1)
    dispatch_once(&gWorkgroundInitOnce, &__block_literal_global_12);
  v16 = a6(a1, a2, a3, a4, a7);
  LOBYTE(v54[0]) = 0;
  AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("converterkTracesPermitted"), CFSTR("com.apple.coreaudio"), (BOOL *)v54);
  if (LOBYTE(v54[0]))
    v18 = AppBooleanValue;
  else
    v18 = 0;
  if (v18 == 1)
  {
    *(_BYTE *)(v16 + 13) = 1;
    *(_DWORD *)(v16 + 24) = a8;
    *(_BYTE *)(v16 + 28) = BYTE4(a8);
  }
  *a5 = *(unsigned int *)(v16 + 8);
  memset(v62, 0, 40);
  memset(v61, 0, 40);
  v60 = 40;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, int *, _OWORD *))(*(_QWORD *)v16 + 48))(v16, 1633904996, &v60, v62);
  if (v19)
  {
    AudioConverterLog();
    v20 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AudioConverter.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 968;
      v64 = 1024;
      LODWORD(v65) = v19;
      _os_log_impl(&dword_18EE07000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to determine actual converter source format (err:%d)", buf, 0x18u);
    }
    v21 = *(_OWORD *)&a1->mBytesPerPacket;
    v62[0] = *(_OWORD *)&a1->mSampleRate;
    v62[1] = v21;
    *(_QWORD *)&v62[2] = *(_QWORD *)&a1->mBitsPerChannel;
  }
  v60 = 40;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, int *, _OWORD *))(*(_QWORD *)v16 + 48))(v16, 1633906532, &v60, v61);
  if (v22)
  {
    AudioConverterLog();
    v23 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AudioConverter.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 977;
      v64 = 1024;
      LODWORD(v65) = v22;
      _os_log_impl(&dword_18EE07000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to determine actual converter destination format (err:%d)", buf, 0x18u);
    }
    v24 = *(_OWORD *)&a2->mBytesPerPacket;
    v61[0] = *(_OWORD *)&a2->mSampleRate;
    v61[1] = v24;
    *(_QWORD *)&v61[2] = *(_QWORD *)&a2->mBitsPerChannel;
  }
  v25 = *(_OWORD *)&a1->mBytesPerPacket;
  v58 = *(_OWORD *)&a1->mSampleRate;
  *(_OWORD *)v59 = v25;
  *(_QWORD *)&v59[16] = *(_QWORD *)&a1->mBitsPerChannel;
  v26 = *(_OWORD *)&a2->mBytesPerPacket;
  v56 = *(_OWORD *)&a2->mSampleRate;
  *(_OWORD *)v57 = v26;
  *(_QWORD *)&v57[16] = *(_QWORD *)&a2->mBitsPerChannel;
  v54[0] = 0;
  v54[1] = 0;
  v55 = 0;
  v52[0] = 0;
  v52[1] = 0;
  v53 = 0;
  v27 = (_QWORD *)MEMORY[0x1E0DE4F60];
  v28 = MEMORY[0x1E0DE4FB8];
  if (*(double *)v62 != *(double *)&v58
    || *((_QWORD *)&v62[0] + 1) != *((_QWORD *)&v58 + 1)
    || LODWORD(v62[1]) != *(_DWORD *)v59
    || *(_OWORD *)((char *)&v62[1] + 4) != *(_OWORD *)&v59[4])
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" (actually: ", 12);
    CA::StreamDescription::AsString((CA::StreamDescription *)__p, v62, v29, v30);
    if (v51 >= 0)
      v31 = __p;
    else
      v31 = (void **)__p[0];
    v32 = strlen((const char *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v31, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)")", 1);
    if (SHIBYTE(v51) < 0)
      operator delete(__p[0]);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)&buf[8]);
    *(_OWORD *)v54 = *(_OWORD *)__p;
    v55 = v51;
    *(_QWORD *)buf = *v27;
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v27[3];
    *(_QWORD *)&buf[8] = v28 + 16;
    if (v76 < 0)
      operator delete(*(void **)&v75[2]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x193FFE3A0](v77);
  }
  if (*(double *)v61 != *(double *)&v56
    || *((_QWORD *)&v61[0] + 1) != *((_QWORD *)&v56 + 1)
    || LODWORD(v61[1]) != *(_DWORD *)v57
    || *(_OWORD *)((char *)&v61[1] + 4) != *(_OWORD *)&v57[4])
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" (actually: ", 12);
    CA::StreamDescription::AsString((CA::StreamDescription *)__p, v61, v33, v34);
    if (v51 >= 0)
      v35 = __p;
    else
      v35 = (void **)__p[0];
    v36 = strlen((const char *)v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v35, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)")", 1);
    if (SHIBYTE(v51) < 0)
      operator delete(__p[0]);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)&buf[8]);
    *(_OWORD *)v52 = *(_OWORD *)__p;
    v53 = v51;
    *(_QWORD *)buf = *v27;
    *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v27[3];
    *(_QWORD *)&buf[8] = v28 + 16;
    if (v76 < 0)
      operator delete(*(void **)&v75[2]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x193FFE3A0](v77);
  }
  AudioConverterLog();
  v37 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    if (a6 == newAudioConverter)
      v40 = "in process";
    else
      v40 = "out of process";
    v41 = __p;
    CA::StreamDescription::AsString((CA::StreamDescription *)__p, &v58, v38, v39);
    if (v51 < 0)
      v41 = (void **)__p[0];
    if (v55 >= 0)
      v44 = v54;
    else
      v44 = (void **)v54[0];
    CA::StreamDescription::AsString((CA::StreamDescription *)v48, &v56, v42, v43);
    if (v49 >= 0)
      v45 = v48;
    else
      v45 = (void **)v48[0];
    v46 = v52;
    if (v53 < 0)
      v46 = (void **)v52[0];
    *(_DWORD *)buf = 136316930;
    *(_QWORD *)&buf[4] = "AudioConverter.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 997;
    v64 = 2080;
    v65 = v40;
    v66 = 2048;
    v67 = v16;
    v68 = 2080;
    v69 = v41;
    v70 = 2080;
    v71 = v44;
    v72 = 2080;
    v73 = v45;
    v74 = 2080;
    *(_QWORD *)v75 = v46;
    _os_log_impl(&dword_18EE07000, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Created a new %s converter -> %p, from %s%s to %s%s", buf, 0x4Eu);
    if (v49 < 0)
      operator delete(v48[0]);
    if (SHIBYTE(v51) < 0)
      operator delete(__p[0]);
  }
  if (SHIBYTE(v53) < 0)
    operator delete(v52[0]);
  if (SHIBYTE(v55) < 0)
    operator delete(v54[0]);
  return 0;
}

void sub_18EF98324(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,__int128 a46,__int128 a47,uint64_t a48,uint64_t a49,__int128 a50,__int128 a51,uint64_t a52,uint64_t a53,int buf,int a55,int a56,__int16 a57,__int16 a58,__int16 a59,__int16 a60,int a61,int a62,__int16 a63)
{
  __int16 a66;
  uint64_t a67;
  __int16 a68;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(const AudioStreamBasicDescription *, const AudioStreamBasicDescription *, unsigned int, const AudioClassDescription *, int);
  uint64_t v72;
  int *v75;
  int v76;
  NSObject *v77;
  const char *v78;
  __int128 v79;
  void *v80;
  __int128 v81;
  void *v82;
  NSObject *v83;
  const char *v84;
  __int128 v85;
  void *v86;
  __int128 v87;
  void *v88;

  if (a2)
  {
    std::ostringstream::~ostringstream((uint64_t)&buf);
    if (a26 < 0)
      operator delete(__p);
    v75 = (int *)__cxa_begin_catch(a1);
    if (a2 == 2)
    {
      v76 = *v75;
      AudioConverterLog();
      v77 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (v71 == newAudioConverter)
          v78 = "in process";
        else
          v78 = "out of process";
        v79 = *(_OWORD *)(v70 + 16);
        a50 = *(_OWORD *)v70;
        a51 = v79;
        a52 = *(_QWORD *)(v70 + 32);
        v80 = &a37;
        CA::StreamDescription::AsString((CA::StreamDescription *)&a37, &a50, *(double *)&a50, (int16x8_t)v79);
        if (a42 < 0)
          v80 = a37;
        v81 = *(_OWORD *)(v69 + 16);
        a46 = *(_OWORD *)v69;
        a47 = v81;
        a48 = *(_QWORD *)(v69 + 32);
        CA::StreamDescription::AsString((CA::StreamDescription *)&a28, &a46, *(double *)&a46, (int16x8_t)v81);
        if (a33 >= 0)
          v82 = &a28;
        else
          v82 = a28;
        buf = 136316418;
        *(_QWORD *)(v72 + 4) = "AudioConverter.cpp";
        a57 = 1024;
        *(_DWORD *)(v72 + 14) = 1007;
        a60 = 2080;
        *(_QWORD *)(v72 + 20) = v78;
        a63 = 2080;
        *(_QWORD *)(v72 + 30) = v80;
        a66 = 2080;
        a67 = (uint64_t)v82;
        a68 = 1024;
        *(_DWORD *)(v72 + 50) = v76;
        _os_log_impl(&dword_18EE07000, v77, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create a new %s converter -> from %s to %s, with status %i", (uint8_t *)&buf, 0x36u);
        if (a33 < 0)
          operator delete(a28);
        if (a42 < 0)
          operator delete(a37);
      }
    }
    else
    {
      AudioConverterLog();
      v83 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (v71 == newAudioConverter)
          v84 = "in process";
        else
          v84 = "out of process";
        v85 = *(_OWORD *)(v70 + 16);
        a50 = *(_OWORD *)v70;
        a51 = v85;
        a52 = *(_QWORD *)(v70 + 32);
        v86 = &a37;
        CA::StreamDescription::AsString((CA::StreamDescription *)&a37, &a50, *(double *)&a50, (int16x8_t)v85);
        if (a42 < 0)
          v86 = a37;
        v87 = *(_OWORD *)(v69 + 16);
        a46 = *(_OWORD *)v69;
        a47 = v87;
        a48 = *(_QWORD *)(v69 + 32);
        CA::StreamDescription::AsString((CA::StreamDescription *)&a28, &a46, *(double *)&a46, (int16x8_t)v87);
        if (a33 >= 0)
          v88 = &a28;
        else
          v88 = a28;
        buf = 136316162;
        *(_QWORD *)(v72 + 4) = "AudioConverter.cpp";
        a57 = 1024;
        *(_DWORD *)(v72 + 14) = 1013;
        a60 = 2080;
        *(_QWORD *)(v72 + 20) = v84;
        a63 = 2080;
        *(_QWORD *)(v72 + 30) = v86;
        a66 = 2080;
        a67 = (uint64_t)v88;
        _os_log_impl(&dword_18EE07000, v83, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception when creating new %s converter -> from %s to %s", (uint8_t *)&buf, 0x30u);
        if (a33 < 0)
          operator delete(a28);
        if (a42 < 0)
          operator delete(a37);
      }
    }
    __cxa_end_catch();
    if ((v68 & 0xFF00000000) != 0)
      kdebug_trace();
    *a10 = 0;
    JUMPOUT(0x18EF982CCLL);
  }
  _Unwind_Resume(a1);
}

void sub_18EF98684(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18EF9867CLL);
  JUMPOUT(0x18EF983CCLL);
}

void sub_18EF98690(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18EF9867CLL);
  JUMPOUT(0x18EF983D0);
}

uint64_t AudioConverterNewWithOptions(AudioStreamBasicDescription *a1, const AudioStreamBasicDescription *a2, uint64_t a3, _QWORD *a4)
{
  int v8;
  int AppBooleanValue;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t (*v16)(const AudioStreamBasicDescription *, const AudioStreamBasicDescription *, unsigned int, const AudioClassDescription *, int);
  uint64_t v17;
  BOOL v19[4];
  int v20;
  __int128 v21;
  __int128 v22;
  BOOL v23;
  BOOL v24[4];
  int v25;
  __int128 v26;
  __int128 v27;

  v8 = forcedOutOfProcess(a1, a2);
  v19[0] = 0;
  AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("converterkTracesPermitted"), CFSTR("com.apple.coreaudio"), v19);
  if (!v19[0] || AppBooleanValue == 0)
  {
    v11 = 0;
  }
  else
  {
    if (v8)
      v12 = 2758;
    else
      v12 = 2742;
    kdebug_trace();
    v11 = v12 | 0x100000000;
  }
  v24[0] = 0;
  v13 = CACFPreferencesGetAppBooleanValue(CFSTR("converterkTracesPermitted"), CFSTR("com.apple.coreaudio"), v24);
  v14 = 0;
  if (v24[0] && v13)
  {
    if (v8)
      v15 = 2752;
    else
      v15 = 2736;
    v25 = v15;
    v26 = 0u;
    v27 = 0u;
    kdebug_trace();
    v20 = v15;
    v21 = 0u;
    v22 = 0u;
    v24[0] = 0;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v24);
    v14 = 1;
  }
  v19[0] = v14;
  v23 = v14;
  if (v8)
    v16 = (uint64_t (*)(const AudioStreamBasicDescription *, const AudioStreamBasicDescription *, unsigned int, const AudioClassDescription *, int))newAudioConverterOOP;
  else
    v16 = newAudioConverter;
  v17 = AudioConverterNewInternal(a1, a2, 0, 0, a4, v16, a3, v11);
  if (v23)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v19);
  return v17;
}

void sub_18EF9883C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a10);
  _Unwind_Resume(exception_object);
}

uint64_t forcedOutOfProcess(AudioStreamBasicDescription *a1, const AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID;
  BOOL v5;
  AudioFormatID v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  unint64_t ForcedInstantiationMode;
  AudioFormatID v11;
  BOOL v12;

  mFormatID = a1->mFormatID;
  v5 = mFormatID == 1634754915 || mFormatID == 1902211171 || mFormatID == 1885433955;
  if (!v5
    || ((v6 = a2->mFormatID, v6 != 1718382635) ? (v7 = v6 == 1885564203) : (v7 = 1),
        !v7 ? (v8 = v6 == 1819304813) : (v8 = 1),
        !v8))
  {
    ForcedInstantiationMode = getForcedInstantiationMode(a1);
    if (!HIDWORD(ForcedInstantiationMode))
    {
      v11 = a1->mFormatID;
      v12 = v11 == 1819304813 || v11 == 1885564203;
      if (v12 || !_os_feature_enabled_impl())
        return 0;
      else
        return checkForDecoderExemption(a1->mFormatID) ^ 1;
    }
    return (_DWORD)ForcedInstantiationMode == 1;
  }
  if (_os_feature_enabled_impl())
    v9 = checkForDecoderExemption(a1->mFormatID) ^ 1;
  else
    v9 = 0;
  ForcedInstantiationMode = getForcedInstantiationMode(a1);
  if (HIDWORD(ForcedInstantiationMode))
    return (_DWORD)ForcedInstantiationMode == 1;
  return v9;
}

uint64_t checkForDecoderExemption(unsigned int a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFTypeID v4;
  int16x8_t v5;
  int32x4_t v6;
  uint32x4_t v7;
  char *v8;
  const __CFAllocator *v9;
  void **v10;
  CFStringRef v11;
  void **v12;
  CFIndex Count;
  CFIndex v14;
  char v15;
  const __CFString *ValueAtIndex;
  CFTypeID v17;
  CFTypeID v18;
  CFIndex v19;
  const void *v20;
  CFIndex v21;
  const void *v22;
  CFTypeID v23;
  CFTypeID v24;
  NSObject *v25;
  void **v26;
  void **v27;
  uint64_t v28;
  NSObject *v29;
  void **v30;
  const char *v31;
  void **v32;
  void **v33;
  const __CFArray *theArray;
  CFTypeRef *v36[2];
  CFTypeRef v37;
  CFTypeRef v38;
  void *__p[2];
  char v40;
  void *v41[2];
  char v42;
  unsigned int cf2;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  void **v49;
  __int16 v50;
  void **v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  cf2 = a1;
  v2 = (const __CFArray *)CFPreferencesCopyAppValue(CFSTR("exemptFromForcedOOPDecoder"), CFSTR("com.apple.coreaudio"));
  if (!v2)
    return 0;
  v3 = v2;
  v4 = CFGetTypeID(v2);
  if (v4 != CFArrayGetTypeID())
  {
    v28 = 0;
    goto LABEL_57;
  }
  v5.i32[0] = bswap32(a1);
  *(int8x8_t *)v5.i8 = vzip1_s8(*(int8x8_t *)v5.i8, *(int8x8_t *)v5.i8);
  v6.i64[0] = 0x1F0000001FLL;
  v6.i64[1] = 0x1F0000001FLL;
  v7.i64[0] = 0x5F0000005FLL;
  v7.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)v5.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v7, (uint32x4_t)vsraq_n_s32(v6, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v5.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v5.i8, (int8x8_t)0x2E002E002E002ELL);
  v42 = 4;
  LODWORD(v41[0]) = vmovn_s16(v5).u32[0];
  BYTE4(v41[0]) = 0;
  v8 = (char *)getprogname();
  std::string::basic_string[abi:ne180100]<0>(__p, v8);
  v38 = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v42 >= 0)
    v10 = v41;
  else
    v10 = (void **)v41[0];
  v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v10, 0x8000100u);
  v37 = 0;
  v38 = v11;
  if (v40 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v36[0] = &v38;
  v36[1] = &v37;
  v37 = CFStringCreateWithCString(v9, (const char *)v12, 0x8000100u);
  Count = CFArrayGetCount(v3);
  if (Count < 1)
  {
    v15 = 0;
    goto LABEL_52;
  }
  v14 = 0;
  v15 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v3, v14);
    v17 = CFGetTypeID(ValueAtIndex);
    if (v17 == CFNumberGetTypeID() && CFEqual(ValueAtIndex, &cf2))
    {
      AudioConverterLog();
      v29 = AudioConverterLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        goto LABEL_51;
      v30 = v41;
      if (v42 < 0)
        v30 = (void **)v41[0];
      *(_DWORD *)buf = 136315650;
      v45 = "AudioConverter.cpp";
      v46 = 1024;
      v47 = 690;
      v48 = 2080;
      v49 = v30;
      v31 = "%25s:%-5d Decoding from the format %s is exempted from being forced out of process.";
      goto LABEL_50;
    }
    v18 = CFGetTypeID(ValueAtIndex);
    if (v18 == CFStringGetTypeID())
      break;
LABEL_33:
    if (++v14 == Count)
      goto LABEL_52;
  }
  if (CFEqual(ValueAtIndex, v38))
  {
    AudioConverterLog();
    v29 = AudioConverterLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      goto LABEL_51;
    v32 = v41;
    if (v42 < 0)
      v32 = (void **)v41[0];
    *(_DWORD *)buf = 136315650;
    v45 = "AudioConverter.cpp";
    v46 = 1024;
    v47 = 699;
    v48 = 2080;
    v49 = v32;
    v31 = "%25s:%-5d Decoding from the format %s is exempted from being forced out of process. ";
    goto LABEL_50;
  }
  if (!CFEqual(ValueAtIndex, v37))
  {
    theArray = CFStringCreateArrayBySeparatingStrings(v9, ValueAtIndex, CFSTR("+"));
    v19 = CFArrayGetCount(theArray);
    if (v19 > 1)
    {
      v20 = CFArrayGetValueAtIndex(theArray, 0);
      if (CFEqual(v20, v37))
      {
        v21 = 1;
        while (1)
        {
          v22 = CFArrayGetValueAtIndex(theArray, v21);
          v23 = CFGetTypeID(v22);
          if (v23 == CFStringGetTypeID())
          {
            if (CFEqual(v22, v38))
              break;
          }
          v24 = CFGetTypeID(v22);
          if (v24 == CFNumberGetTypeID())
          {
            if (CFEqual(v22, &cf2))
              break;
          }
          if (v19 == ++v21)
            goto LABEL_32;
        }
        AudioConverterLog();
        v25 = AudioConverterLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v26 = v41;
          if (v42 < 0)
            v26 = (void **)v41[0];
          v27 = __p;
          if (v40 < 0)
            v27 = (void **)__p[0];
          *(_DWORD *)buf = 136315906;
          v45 = "AudioConverter.cpp";
          v46 = 1024;
          v47 = 727;
          v48 = 2080;
          v49 = v26;
          v50 = 2080;
          v51 = v27;
          _os_log_impl(&dword_18EE07000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Decoding from the format %s for the process %s is exempted from being forced out of process. ", buf, 0x26u);
        }
        v15 = 1;
      }
    }
LABEL_32:
    CFRelease(theArray);
    goto LABEL_33;
  }
  AudioConverterLog();
  v29 = AudioConverterLog(void)::gLog;
  if (!os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    goto LABEL_51;
  v33 = __p;
  if (v40 < 0)
    v33 = (void **)__p[0];
  *(_DWORD *)buf = 136315650;
  v45 = "AudioConverter.cpp";
  v46 = 1024;
  v47 = 707;
  v48 = 2080;
  v49 = v33;
  v31 = "%25s:%-5d Decoders for the process %s is exempted from being forced out of process. mode";
LABEL_50:
  _os_log_impl(&dword_18EE07000, v29, OS_LOG_TYPE_DEFAULT, v31, buf, 0x1Cu);
LABEL_51:
  v15 = 1;
LABEL_52:
  applesauce::raii::v1::detail::ScopeGuard<checkForDecoderExemption::{lambda(void)#1},applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(v36);
  if (v40 < 0)
    operator delete(__p[0]);
  if (v42 < 0)
    operator delete(v41[0]);
  v28 = v15 & 1;
LABEL_57:
  CFRelease(v3);
  return v28;
}

void sub_18EF98EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, CFTypeRef *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  applesauce::raii::v1::detail::ScopeGuard<checkForDecoderExemption::{lambda(void)#1},applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(&a14);
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

uint64_t getForcedInstantiationMode(AudioStreamBasicDescription *a1)
{
  char *v2;
  uint64_t v3;
  audit_token_t *v4;
  uint64_t v5;
  AudioFormatID mFormatID;
  BOOL v7;
  task_name_t *v8;
  __SecTask *v9;
  __SecTask *v10;
  const __CFBoolean *v11;
  const __CFBoolean *v12;
  CFTypeID v13;
  int v14;
  __SecTask *v15;
  __SecTask *v16;
  const __CFBoolean *v17;
  const __CFBoolean *v18;
  CFTypeID v19;
  int Value;
  unsigned int AppBooleanValue;
  uint64_t v22;
  audit_token_t *p_task_info_outCnt;
  uint64_t result;
  audit_token_t v25;
  audit_token_t task_info_outCnt;

  if (PlatformUtilities::IsInternalBuild((PlatformUtilities *)a1))
  {
    v2 = getenv("CoreAudio_loadAudioConverterOutOfProcess");
    if (v2)
    {
      std::string::basic_string[abi:ne180100]<0>(&task_info_outCnt, v2);
      v3 = HIBYTE(task_info_outCnt.val[5]);
      if ((task_info_outCnt.val[5] & 0x80000000) != 0)
        v3 = *(_QWORD *)&task_info_outCnt.val[2];
      if (v3 == 2)
      {
        p_task_info_outCnt = *(audit_token_t **)task_info_outCnt.val;
        if ((task_info_outCnt.val[5] & 0x80000000) == 0)
          p_task_info_outCnt = &task_info_outCnt;
        if (LOWORD(p_task_info_outCnt->val[0]) == 20302)
        {
LABEL_10:
          v5 = 0;
          if (SHIBYTE(task_info_outCnt.val[5]) < 0)
            goto LABEL_39;
          goto LABEL_40;
        }
      }
      else if (v3 == 1)
      {
        v4 = *(audit_token_t **)task_info_outCnt.val;
        if ((task_info_outCnt.val[5] & 0x80000000) == 0)
          v4 = &task_info_outCnt;
        if (LOBYTE(v4->val[0]) == 48)
          goto LABEL_10;
      }
      v5 = 1;
      if (SHIBYTE(task_info_outCnt.val[5]) < 0)
LABEL_39:
        operator delete(*(void **)task_info_outCnt.val);
LABEL_40:
      v22 = 0x100000000;
      return v5 | v22;
    }
  }
  mFormatID = a1->mFormatID;
  v7 = mFormatID == 1819304813 || mFormatID == 1885564203;
  v8 = (task_name_t *)MEMORY[0x1E0C83DA0];
  if (!v7)
  {
    task_info_outCnt.val[0] = 8;
    if (task_info(*MEMORY[0x1E0C83DA0], 0xFu, (task_info_t)&v25, task_info_outCnt.val))
      goto LABEL_45;
    task_info_outCnt = v25;
    v15 = SecTaskCreateWithAuditToken(0, &task_info_outCnt);
    if (v15)
    {
      v16 = v15;
      v17 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v15, CFSTR("com.apple.coreaudio.LoadDecodersInProcess"), 0);
      if (v17)
      {
        v18 = v17;
        v19 = CFGetTypeID(v17);
        if (v19 == CFBooleanGetTypeID())
        {
          Value = CFBooleanGetValue(v18);
          CFRelease(v18);
          CFRelease(v16);
          if (Value)
            goto LABEL_28;
          goto LABEL_17;
        }
        CFRelease(v18);
      }
      CFRelease(v16);
    }
  }
LABEL_17:
  task_info_outCnt.val[0] = 8;
  if (!task_info(*v8, 0xFu, (task_info_t)&v25, task_info_outCnt.val))
  {
    task_info_outCnt = v25;
    v9 = SecTaskCreateWithAuditToken(0, &task_info_outCnt);
    if (!v9)
      goto LABEL_31;
    v10 = v9;
    v11 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v9, CFSTR("com.apple.coreaudio.LoadConvertersInProcess"), 0);
    if (v11)
    {
      v12 = v11;
      v13 = CFGetTypeID(v11);
      if (v13 == CFBooleanGetTypeID())
      {
        v14 = CFBooleanGetValue(v12);
        CFRelease(v12);
        CFRelease(v10);
        if (v14)
        {
LABEL_28:
          v5 = 0;
          goto LABEL_40;
        }
LABEL_31:
        if (!PlatformUtilities::IsInternalBuild(v9)
          || (LOBYTE(task_info_outCnt.val[0]) = 0,
              AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("loadAudioConverterOutOfProcess"), CFSTR("com.apple.coreaudio"), (BOOL *)&task_info_outCnt), !LOBYTE(task_info_outCnt.val[0])))
        {
          v22 = 0;
          v5 = 0;
          return v5 | v22;
        }
        v5 = AppBooleanValue;
        goto LABEL_40;
      }
      CFRelease(v12);
    }
    CFRelease(v10);
    goto LABEL_31;
  }
  _os_assert_log();
  _os_crash();
  __break(1u);
LABEL_45:
  _os_assert_log();
  result = _os_crash();
  __break(1u);
  return result;
}

CFTypeRef **applesauce::raii::v1::detail::ScopeGuard<checkForDecoderExemption(unsigned int)::{lambda(void)#2},applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(CFTypeRef **a1)
{
  CFRelease(**a1);
  return a1;
}

CFTypeRef **applesauce::raii::v1::detail::ScopeGuard<checkForDecoderExemption(unsigned int)::{lambda(void)#1},applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(CFTypeRef **a1)
{
  CFRelease(**a1);
  CFRelease(*a1[1]);
  return a1;
}

OSStatus AudioConverterNewSpecific(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, UInt32 inNumberClassDescriptions, const AudioClassDescription *inClassDescriptions, AudioConverterRef *outAudioConverter)
{
  uint64_t v7;
  int v10;
  int AppBooleanValue;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t (*v18)(const AudioStreamBasicDescription *, const AudioStreamBasicDescription *, unsigned int, const AudioClassDescription *, int);
  OSStatus v19;
  BOOL v21[4];
  int v22;
  __int128 v23;
  __int128 v24;
  BOOL v25;
  BOOL v26[4];
  int v27;
  __int128 v28;
  __int128 v29;

  v7 = *(_QWORD *)&inNumberClassDescriptions;
  v10 = forcedOutOfProcess((AudioStreamBasicDescription *)inSourceFormat, inDestinationFormat);
  v21[0] = 0;
  AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("converterkTracesPermitted"), CFSTR("com.apple.coreaudio"), v21);
  if (!v21[0] || AppBooleanValue == 0)
  {
    v13 = 0;
  }
  else
  {
    if (v10)
      v14 = 2758;
    else
      v14 = 2742;
    kdebug_trace();
    v13 = v14 | 0x100000000;
  }
  v26[0] = 0;
  v15 = CACFPreferencesGetAppBooleanValue(CFSTR("converterkTracesPermitted"), CFSTR("com.apple.coreaudio"), v26);
  v16 = 0;
  if (v26[0] && v15)
  {
    if (v10)
      v17 = 2752;
    else
      v17 = 2736;
    v27 = v17;
    v28 = 0u;
    v29 = 0u;
    kdebug_trace();
    v22 = v17;
    v23 = 0u;
    v24 = 0u;
    v26[0] = 0;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v26);
    v16 = 1;
  }
  v21[0] = v16;
  v25 = v16;
  if (v10)
    v18 = (uint64_t (*)(const AudioStreamBasicDescription *, const AudioStreamBasicDescription *, unsigned int, const AudioClassDescription *, int))newAudioConverterOOP;
  else
    v18 = newAudioConverter;
  v19 = AudioConverterNewInternal(inSourceFormat, inDestinationFormat, v7, inClassDescriptions, outAudioConverter, v18, 0, v13);
  if (v25)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v21);
  return v19;
}

void sub_18EF993D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a10);
  _Unwind_Resume(exception_object);
}

uint64_t AudioConverterInstantiateInternal(AudioStreamBasicDescription *a1, const AudioStreamBasicDescription *a2, int a3, uint64_t a4, const AudioClassDescription *a5, OpaqueAudioConverter **a6)
{
  const char *v12;
  NSObject *v13;
  unint64_t ForcedInstantiationMode;
  int v15;
  uint64_t v16;
  NSObject *v17;
  _BOOL4 v18;
  int v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  int AppBooleanValue;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint8_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint8_t v33;
  BOOL v35[4];
  int v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[4];
  _BYTE v40[36];
  uint8_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a4)
    v12 = "specific ";
  else
    v12 = "";
  AudioConverterLog();
  v13 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)v40 = "AudioConverter.cpp";
    *(_WORD *)&v40[8] = 1024;
    *(_DWORD *)&v40[10] = 1082;
    *(_WORD *)&v40[14] = 2080;
    *(_QWORD *)&v40[16] = v12;
    *(_WORD *)&v40[24] = 1024;
    *(_DWORD *)&v40[26] = a3;
    _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Requested Instantiation mode for %sAudio Converter: %u", buf, 0x22u);
  }
  ForcedInstantiationMode = getForcedInstantiationMode(a1);
  if (HIDWORD(ForcedInstantiationMode))
    v15 = ForcedInstantiationMode;
  else
    v15 = a3;
  v16 = v15 | a3 & 0xBFFFFFFE;
  if ((v15 & 1) != 0)
  {
    AudioConverterLog();
    v22 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v40 = "AudioConverter.cpp";
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)&v40[10] = 1091;
      *(_WORD *)&v40[14] = 2080;
      *(_QWORD *)&v40[16] = v12;
      _os_log_impl(&dword_18EE07000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Instantiating %sAudio Converter out of process", buf, 0x1Cu);
    }
    buf[0] = 0;
    AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("converterkTracesPermitted"), CFSTR("com.apple.coreaudio"), (BOOL *)buf);
    if (buf[0])
      v24 = AppBooleanValue;
    else
      v24 = 0;
    if (v24 == 1)
    {
      kdebug_trace();
      v25 = 0x100000AC6;
    }
    else
    {
      v25 = 0;
    }
    v35[0] = 0;
    v27 = CACFPreferencesGetAppBooleanValue(CFSTR("converterkTracesPermitted"), CFSTR("com.apple.coreaudio"), v35);
    if (v35[0])
      v28 = v27;
    else
      v28 = 0;
    if (v28 == 1)
    {
      v36 = 2752;
      v37 = 0u;
      v38 = 0u;
      kdebug_trace();
      *(_DWORD *)v40 = 2752;
      memset(&v40[4], 0, 32);
      v35[0] = 0;
      AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v35);
      v29 = 1;
    }
    else
    {
      v29 = 0;
    }
    buf[0] = v29;
    v41 = v29;
    v30 = AudioConverterNewInternal(a1, a2, a4, a5, a6, (uint64_t (*)(const AudioStreamBasicDescription *, const AudioStreamBasicDescription *, unsigned int, const AudioClassDescription *, int))newAudioConverterOOP, v16, v25);
    goto LABEL_44;
  }
  AudioConverterLog();
  v17 = AudioConverterLog(void)::gLog;
  v18 = os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT);
  if ((v15 & 0x40000000) == 0)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v40 = "AudioConverter.cpp";
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)&v40[10] = 1111;
      *(_WORD *)&v40[14] = 2080;
      *(_QWORD *)&v40[16] = v12;
      _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Instantiating %sAudio Converter in process", buf, 0x1Cu);
    }
    buf[0] = 0;
    v19 = CACFPreferencesGetAppBooleanValue(CFSTR("converterkTracesPermitted"), CFSTR("com.apple.coreaudio"), (BOOL *)buf);
    if (buf[0])
      v20 = v19;
    else
      v20 = 0;
    if (v20 == 1)
    {
      kdebug_trace();
      v21 = 0x100000AB6;
    }
    else
    {
      v21 = 0;
    }
    v35[0] = 0;
    v31 = CACFPreferencesGetAppBooleanValue(CFSTR("converterkTracesPermitted"), CFSTR("com.apple.coreaudio"), v35);
    if (v35[0])
      v32 = v31;
    else
      v32 = 0;
    if (v32 == 1)
    {
      v36 = 2736;
      v37 = 0u;
      v38 = 0u;
      kdebug_trace();
      *(_DWORD *)v40 = 2736;
      memset(&v40[4], 0, 32);
      v35[0] = 0;
      AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v35);
      v33 = 1;
    }
    else
    {
      v33 = 0;
    }
    buf[0] = v33;
    v41 = v33;
    v30 = AudioConverterNewInternal(a1, a2, a4, a5, a6, newAudioConverter, v16, v21);
LABEL_44:
    v26 = v30;
    if (v41)
      AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)buf);
    return v26;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)v40 = "AudioConverter.cpp";
    *(_WORD *)&v40[8] = 1024;
    *(_DWORD *)&v40[10] = 1103;
    *(_WORD *)&v40[14] = 2080;
    *(_QWORD *)&v40[16] = v12;
    _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Instantiating %sAudio Converter in process XPC", buf, 0x1Cu);
  }
  return AudioConverterNewInternal(a1, a2, a4, a5, a6, (uint64_t (*)(const AudioStreamBasicDescription *, const AudioStreamBasicDescription *, unsigned int, const AudioClassDescription *, int))newAudioConverterInProcessXPC, v16, 0);
}

void sub_18EF998F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a20)
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a15);
  _Unwind_Resume(exception_object);
}

uint64_t AudioConverterInstantiate(AudioStreamBasicDescription *a1, const AudioStreamBasicDescription *a2, int a3, OpaqueAudioConverter **a4)
{
  return AudioConverterInstantiateInternal(a1, a2, a3, 0, 0, a4);
}

uint64_t std::optional<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::scoped_lookup>::emplace[abi:ne180100]<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>&,unsigned int const&,void>(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int *v4;
  unsigned int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  signed int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  int v25;

  if (*(_BYTE *)(a1 + 40))
  {
    v4 = *(unsigned int **)(a1 + 32);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
    }
    *(_BYTE *)(a1 + 40) = 0;
  }
  v6 = *a3;
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v7 = (unsigned int *)(a2 + 48);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = atomic_load((unint64_t *)(*(_QWORD *)a1 + 40));
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 8);
    v11 = *(_QWORD *)v9;
    v25 = v6;
    v12 = *(_QWORD *)(v11 + 24);
    if (v12)
    {
      v13 = (*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v12 + 48))(v12, &v25) % *(_DWORD *)(v9 + 8);
      if (v13 >= 3)
        v14 = 0;
      else
        v14 = v10;
      v15 = v13 + v14 - 3;
      v16 = -1;
      v17 = v13;
      do
      {
        v18 = v15;
        v19 = (unsigned int *)atomic_load((unint64_t *)(v9 + 8 * v17 + 16));
        if (v19 == (unsigned int *)-1)
        {
          if (v16 < 0)
            v16 = v17;
        }
        else
        {
          if (!v19)
            goto LABEL_24;
          if (v19[1] == v6)
          {
            *(_QWORD *)(a1 + 32) = v19;
            do
              v21 = __ldaxr(v19);
            while (__stlxr(v21 + 1, v19));
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            *(_BYTE *)(a1 + 24) = 1;
            goto LABEL_27;
          }
        }
        if (v18 >= 3)
          v20 = 0;
        else
          v20 = v10;
        v15 = v18 + v20 - 3;
        v17 = v18;
      }
      while (v18 != v13);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_24:
        *(_QWORD *)(a1 + 32) = 0;
        goto LABEL_27;
      }
      __break(1u);
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_27:
  v22 = (unsigned int *)(*(_QWORD *)a1 + 48);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterReset::$_0>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<SetConverterAsAuxiliary(OpaqueAudioConverter *)::$_0>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 12) = 1;
  return 0;
}

OSStatus AudioConverterGetPropertyInfo(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  _QWORD v5[3];
  uint64_t (*v6[3])(uint64_t, uint64_t);
  Boolean *v7;
  UInt32 *v8;
  AudioConverterPropertyID v9;

  v9 = inPropertyID;
  v7 = outWritable;
  v8 = outSize;
  v5[0] = &v9;
  v5[1] = &v8;
  v5[2] = &v7;
  v6[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetPropertyInfo::$_0>;
  v6[1] = (uint64_t (*)(uint64_t, uint64_t))v5;
  return with_resolved((int)inAudioConverter, v6);
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetPropertyInfo::$_0>(unsigned int ***a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = ***a1;
  v4 = *(_QWORD *)(*a1)[1];
  v5 = *(_QWORD *)(*a1)[2];
  v6 = *a2;
  if ((_DWORD)v3 != 1869574207)
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v6 + 40))(a2, v3, v4, v5);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 96))(a2, v4, v5);
  return 0;
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>(unsigned int ***a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = ***a1;
  v4 = *(_QWORD *)(*a1)[1];
  v5 = *(_QWORD *)(*a1)[2];
  v6 = *a2;
  if ((_DWORD)v3 == 1869574207)
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v6 + 112))(a2, v4, v5);
  else
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v6 + 48))(a2, v3, v4, v5);
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>(unsigned int ***a1, uint64_t a2)
{
  unsigned int **v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*CryptorFromSerializedRecipeSymbolLoc)(_QWORD, uint64_t, CFTypeRef *);
  NSObject *v10;
  uint64_t v12;
  uint64_t message;
  caulk::concurrent::message *v14;
  _DWORD *v15;
  CFTypeRef cf;
  _BYTE buf[24];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = ***a1;
  v4 = *(uint64_t **)(*a1)[2];
  if (!v4)
  {
    v12 = _os_log_pack_size();
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v12 + 88, 16);
    if (message)
    {
      v14 = (caulk::concurrent::message *)message;
      v15 = (_DWORD *)_os_log_pack_fill();
      *v15 = 67109120;
      v15[1] = v3;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v14);
    }
    return 4294967246;
  }
  v6 = *v2[1];
  if ((_DWORD)v3 != 1668309874)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 56))(a2, v3, v6, v4);
  if (v6 >= 8)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2))
    {
      v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 56))(a2, 1668309874, v6, v4);
    }
    else
    {
      cf = 0;
      v8 = *v4;
      if (!MediaToolboxLibraryCore(char **)::frameworkLibrary)
      {
        *(_OWORD *)buf = xmmword_1E2921478;
        *(_QWORD *)&buf[16] = 0;
        MediaToolboxLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
      }
      v7 = 2003329396;
      if (!MediaToolboxLibraryCore(char **)::frameworkLibrary
        || !getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc())
      {
        goto LABEL_13;
      }
      CryptorFromSerializedRecipeSymbolLoc = (uint64_t (*)(_QWORD, uint64_t, CFTypeRef *))getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc();
      if (!CryptorFromSerializedRecipeSymbolLoc)
      {
        dlerror();
        abort_report_np();
      }
      v7 = CryptorFromSerializedRecipeSymbolLoc(*MEMORY[0x1E0C9AE00], v8, &cf);
      if (!(_DWORD)v7)
      {
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a2 + 56))(a2, 1668310371, 8, &cf);
        CFRelease(cf);
      }
      else
      {
LABEL_13:
        AudioConverterLog();
        v10 = AudioConverterLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AudioConverterInternal.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 132;
          _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create a limited Cryptor from the context, returning kAudioConverterErr_UnspecifiedError", buf, 0x12u);
        }
      }
    }
    if ((_DWORD)v7 != 1886547824)
      return v7;
    v3 = **v2;
    v6 = *v2[1];
    v4 = *(uint64_t **)v2[2];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 56))(a2, v3, v6, v4);
  }
  return 561211770;
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertBuffer::$_0>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t message;
  caulk::concurrent::message *v7;
  char *v8;
  uint64_t v9;
  const char *v10;

  v3 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 64))(a2, ***a1, *(_QWORD *)(*a1)[1], *(_QWORD *)(*a1)[2], *(_QWORD *)(*a1)[3]);
  if (isRenderStatusConcerning(v3))
  {
    v4 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2) ? 15 : 11;
    v5 = _os_log_pack_size() + 88;
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v5 + v4, 16);
    if (message)
    {
      v7 = (caulk::concurrent::message *)message;
      v8 = (char *)(message + v5);
      v9 = _os_log_pack_fill();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2))
        v10 = "out-of-process";
      else
        v10 = "in-process";
      stpcpy(v8, v10);
      *(_DWORD *)v9 = 134218498;
      *(_QWORD *)(v9 + 4) = a2;
      *(_WORD *)(v9 + 12) = 2080;
      *(_QWORD *)(v9 + 14) = v8;
      *(_WORD *)(v9 + 22) = 1024;
      *(_DWORD *)(v9 + 24) = v3;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v7);
    }
  }
  return v3;
}

uint64_t isRenderStatusConcerning(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 > 561145202)
  {
    if (a1 != 561145203 && a1 != 1869627199)
    {
      v3 = 2003329396;
LABEL_8:
      if (a1 != v3)
        return 0;
    }
  }
  else if (a1 != -50 && a1 != -4)
  {
    v3 = 560164718;
    goto LABEL_8;
  }
  return result;
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterFillComplexBuffer::$_0>(_QWORD ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t message;
  caulk::concurrent::message *v7;
  char *v8;
  uint64_t v9;
  const char *v10;

  v3 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 80))(a2, ***a1, *(*a1)[1], *(*a1)[2], *(*a1)[3], *(*a1)[4], 0);
  if (isRenderStatusConcerning(v3))
  {
    v4 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2) ? 15 : 11;
    v5 = _os_log_pack_size() + 88;
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v5 + v4, 16);
    if (message)
    {
      v7 = (caulk::concurrent::message *)message;
      v8 = (char *)(message + v5);
      v9 = _os_log_pack_fill();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2))
        v10 = "out-of-process";
      else
        v10 = "in-process";
      stpcpy(v8, v10);
      *(_DWORD *)v9 = 134218498;
      *(_QWORD *)(v9 + 4) = a2;
      *(_WORD *)(v9 + 12) = 2080;
      *(_QWORD *)(v9 + 14) = v8;
      *(_WORD *)(v9 + 22) = 1024;
      *(_DWORD *)(v9 + 24) = v3;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v7);
    }
  }
  return v3;
}

uint64_t AudioConverterFillComplexBufferWithPacketDependencyInfo(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD v8[6];
  uint64_t (*v9[3])(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = a3;
  v15 = a2;
  v12 = a5;
  v13 = a4;
  v10 = a7;
  v11 = a6;
  if (!a7)
    return 4294967246;
  v8[0] = &v15;
  v8[1] = &v14;
  v8[2] = &v13;
  v8[3] = &v12;
  v8[4] = &v11;
  v8[5] = &v10;
  v9[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterFillComplexBufferWithPacketDependencyInfo::$_0>;
  v9[1] = (uint64_t (*)(uint64_t, uint64_t))v8;
  return with_resolved(a1, v9);
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterFillComplexBufferWithPacketDependencyInfo::$_0>(_QWORD ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t message;
  caulk::concurrent::message *v7;
  char *v8;
  uint64_t v9;
  const char *v10;

  v3 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 80))(a2, ***a1, *(*a1)[1], *(*a1)[2], *(*a1)[3], *(*a1)[4], *(*a1)[5]);
  if (isRenderStatusConcerning(v3))
  {
    v4 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2) ? 15 : 11;
    v5 = _os_log_pack_size() + 88;
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v5 + v4, 16);
    if (message)
    {
      v7 = (caulk::concurrent::message *)message;
      v8 = (char *)(message + v5);
      v9 = _os_log_pack_fill();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2))
        v10 = "out-of-process";
      else
        v10 = "in-process";
      stpcpy(v8, v10);
      *(_DWORD *)v9 = 134218498;
      *(_QWORD *)(v9 + 4) = a2;
      *(_WORD *)(v9 + 12) = 2080;
      *(_QWORD *)(v9 + 14) = v8;
      *(_WORD *)(v9 + 22) = 1024;
      *(_DWORD *)(v9 + 24) = v3;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v7);
    }
  }
  return v3;
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterConvertComplexBuffer::$_0>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t message;
  caulk::concurrent::message *v7;
  char *v8;
  uint64_t v9;
  const char *v10;

  v3 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 88))(a2, ***a1, *(_QWORD *)(*a1)[1], *(_QWORD *)(*a1)[2]);
  if (isRenderStatusConcerning(v3))
  {
    v4 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2) ? 15 : 11;
    v5 = _os_log_pack_size() + 88;
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v5 + v4, 16);
    if (message)
    {
      v7 = (caulk::concurrent::message *)message;
      v8 = (char *)(message + v5);
      v9 = _os_log_pack_fill();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2))
        v10 = "out-of-process";
      else
        v10 = "in-process";
      stpcpy(v8, v10);
      *(_DWORD *)v9 = 134218498;
      *(_QWORD *)(v9 + 4) = a2;
      *(_WORD *)(v9 + 12) = 2080;
      *(_QWORD *)(v9 + 14) = v8;
      *(_WORD *)(v9 + 22) = 1024;
      *(_DWORD *)(v9 + 24) = v3;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v7);
    }
  }
  return v3;
}

uint64_t AudioConverterReleaseHardwareCodec()
{
  return 0;
}

uint64_t AudioConverterAcquireHardwareCodec()
{
  return 0;
}

uint64_t MP4GetRollGroupDescription(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __n128 a6)
{
  uint64_t v6;
  int v9;
  int *v10;
  MP4BoxParser **v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  char *v39;
  _WORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _WORD *v47;
  __int16 v48;
  char *v49;
  char *v50;
  size_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  void *v62;
  NSObject *v63;
  NSObject *v64;
  const char *v65;
  NSObject *v66;
  NSObject *v67;
  NSObject *v68;
  const char *v69;
  NSObject *v70;
  NSObject *v71;
  NSObject *v72;
  NSObject *v74;
  MP4BoxParser *v75;
  MP4BoxParser *v77;
  int *v78;
  MP4BoxParser **v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  _QWORD *v83;
  unsigned int v85;
  unsigned __int16 v86;
  void (**v87)(MP4BoxParser *__hidden);
  MP4BoxParser *v88;
  char v89;
  int v90;
  unint64_t v91;
  char v92;
  int v93;
  char v94;
  int v95;
  unsigned int v96;
  char v97;
  int v98;
  unsigned int v99;
  unint64_t v100;
  _BYTE v101[32];
  uint8_t buf[4];
  const char *v103;
  __int16 v104;
  int v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 == a2)
    return 0;
  v9 = 0;
  v10 = &v95;
  v11 = &v88;
  v83 = (_QWORD *)(a5 + 8);
  a6.n128_u64[0] = 136315394;
  v12 = 1;
  while (2)
  {
    v13 = 0;
    v14 = v9;
    v9 = v12;
    while (*(_DWORD *)(v6 + 16) != 1936158820)
    {
LABEL_7:
      v6 = *(_QWORD *)(v6 + 8);
      if (v6 == a2)
        return 0;
    }
    if (v13 != v14)
    {
      ++v13;
      goto LABEL_7;
    }
    v82 = a6;
    v80 = a1;
    v81 = a3;
    v15 = *(_QWORD *)(v6 + 32) + a3;
    v87 = &off_1E2902718;
    v79 = v11;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, v15);
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v87 = &off_1E2909C98;
    v98 = 0;
    v99 = 0;
    v93 = 8;
    v100 = 0;
    *(_WORD *)v101 = 0;
    memset(&v101[4], 0, 28);
    *(_QWORD *)v10 = 0;
    v78 = v10;
    *((_BYTE *)v10 + 8) = 0;
    v16 = MP4BoxParser_SampleGroupDescription::Init((MP4BoxParser **)&v87);
    if ((_DWORD)v16)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = v82.n128_u32[0];
        v103 = "MP4_BoxParser_RollGroupUtility.cpp";
        v104 = 1024;
        v105 = 35;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4GetRollGroupDescription: Failed to read GroupDescription box", buf, 0x12u);
      }
      goto LABEL_109;
    }
    if (v95 != a4)
      goto LABEL_99;
    v17 = ((uint64_t (*)(MP4BoxParser_Full *))v87[3])((MP4BoxParser_Full *)&v87);
    if (!v94 || v101[0])
      goto LABEL_56;
    v18 = v17;
    v101[1] = v97;
    v19 = v98;
    if (!v97)
      v19 = 0;
    *(_DWORD *)&v101[4] = v19;
    v20 = v100;
    v21 = *(_QWORD *)&v101[8];
    if (v99 > (unint64_t)((uint64_t)(*(_QWORD *)&v101[24] - *(_QWORD *)&v101[8]) >> 1))
    {
      v22 = *(_QWORD *)&v101[16];
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v99);
      v25 = *(char **)&v101[8];
      v26 = *(char **)&v101[16];
      v27 = &v24[(v22 - v21) & 0xFFFFFFFFFFFFFFFELL];
      if (*(_QWORD *)&v101[16] != *(_QWORD *)&v101[8])
      {
        v27 = &v24[(v22 - v21) & 0xFFFFFFFFFFFFFFFELL];
        do
        {
          v28 = *((_WORD *)v26 - 1);
          v26 -= 2;
          *((_WORD *)v27 - 1) = v28;
          v27 -= 2;
        }
        while (v26 != v25);
      }
      *(_QWORD *)&v101[8] = v27;
      *(_QWORD *)&v101[16] = &v24[(v22 - v21) & 0xFFFFFFFFFFFFFFFELL];
      *(_QWORD *)&v101[24] = &v24[2 * v23];
      if (v25)
        operator delete(v25);
    }
    if (!v99)
    {
LABEL_56:
      v101[0] = 1;
      *(_QWORD *)a5 = *(_QWORD *)v101;
      if (v101 == (_BYTE *)a5)
      {
        v16 = 0;
        goto LABEL_96;
      }
      v50 = *(char **)&v101[8];
      v49 = *(char **)&v101[16];
      v51 = *(_QWORD *)&v101[16] - *(_QWORD *)&v101[8];
      v52 = (uint64_t)(*(_QWORD *)&v101[16] - *(_QWORD *)&v101[8]) >> 1;
      v53 = *(_QWORD *)(a5 + 24);
      v54 = *(char **)(a5 + 8);
      if (v52 <= (uint64_t)(v53 - (_QWORD)v54) >> 1)
      {
        v58 = *(_BYTE **)(a5 + 16);
        v59 = (v58 - v54) >> 1;
        if (v59 < v52)
        {
          if (v58 != v54)
          {
            v60 = (v58 - v54) >> 1;
            memmove(*(void **)(a5 + 8), *(const void **)&v101[8], v58 - v54);
            v59 = v60;
            v54 = *(char **)(a5 + 16);
          }
          v61 = &v50[2 * v59];
          v51 = v49 - v61;
          if (v49 == v61)
            goto LABEL_78;
          v62 = v54;
          goto LABEL_77;
        }
      }
      else
      {
        if (v54)
        {
          *(_QWORD *)(a5 + 16) = v54;
          operator delete(v54);
          v53 = 0;
          *v83 = 0;
          v83[1] = 0;
          v83[2] = 0;
        }
        if ((v51 & 0x8000000000000000) != 0
          || (v53 <= v52 ? (v55 = v52) : (v55 = v53),
              v53 >= 0x7FFFFFFFFFFFFFFELL ? (v56 = 0x7FFFFFFFFFFFFFFFLL) : (v56 = v55),
              v56 < 0))
        {
LABEL_116:
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v56);
        *(_QWORD *)(a5 + 8) = v54;
        *(_QWORD *)(a5 + 16) = v54;
        *(_QWORD *)(a5 + 24) = &v54[2 * v57];
      }
      if (v49 == v50)
      {
LABEL_78:
        v16 = 0;
        *(_QWORD *)(a5 + 16) = &v54[v51];
        goto LABEL_96;
      }
      v62 = v54;
      v61 = v50;
LABEL_77:
      memmove(v62, v61, v51);
      goto LABEL_78;
    }
    v29 = 0;
    v30 = v20 + v18;
    while (1)
    {
      v31 = v96;
      v86 = 0;
      if (v96)
        goto LABEL_29;
      v85 = 0;
      v32 = v91;
      v33 = ((uint64_t (*)(MP4BoxParser_Full *))v87[3])((MP4BoxParser_Full *)&v87);
      v20 += 4;
      v34 = v91;
      if (v32 <= v33)
        v34 = 0;
      if (v34 < v20)
        break;
      v16 = MP4BoxParser::ReadDataSourceBytes(v88, v30, 4uLL, &v85);
      if ((_DWORD)v16)
      {
        v71 = MEMORY[0x1E0C81028];
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_96;
        *(_DWORD *)buf = v82.n128_u32[0];
        v103 = "MP4_BoxParser_SampleGroupDescription.cpp";
        v104 = 1024;
        v105 = 80;
        v68 = v71;
        v69 = "%25s:%-5d  Couldn't read sample group description entry size";
        goto LABEL_89;
      }
      v30 += 4;
      v31 = bswap32(v85);
LABEL_29:
      v35 = v91;
      v36 = ((uint64_t (*)(MP4BoxParser_Full *))v87[3])((MP4BoxParser_Full *)&v87);
      v20 += v31;
      v37 = v91;
      if (v35 <= v36)
        v37 = 0;
      if (v37 < v20)
      {
        v63 = MEMORY[0x1E0C81028];
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v82.n128_u32[0];
          v103 = "MP4_BoxParser_SampleGroupDescription.cpp";
          v104 = 1024;
          v105 = 87;
          v64 = v63;
          v65 = "%25s:%-5d  'sgpd' box is too small for the group description entry";
          goto LABEL_94;
        }
        goto LABEL_95;
      }
      if (v31 != 2)
      {
        v66 = MEMORY[0x1E0C81028];
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v82.n128_u32[0];
          v103 = "MP4_BoxParser_SampleGroupDescription.cpp";
          v104 = 1024;
          v105 = 89;
          v64 = v66;
          v65 = "%25s:%-5d  Unexpected entry size in 'sgpd' box";
          goto LABEL_94;
        }
        goto LABEL_95;
      }
      v16 = MP4BoxParser::ReadDataSourceBytes(v88, v30, 2uLL, &v86);
      if ((_DWORD)v16)
      {
        v67 = MEMORY[0x1E0C81028];
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_96;
        *(_DWORD *)buf = v82.n128_u32[0];
        v103 = "MP4_BoxParser_SampleGroupDescription.cpp";
        v104 = 1024;
        v105 = 92;
        v68 = v67;
        v69 = "%25s:%-5d  Couldn't read sample group description entry";
LABEL_89:
        _os_log_impl(&dword_18EE07000, v68, OS_LOG_TYPE_ERROR, v69, buf, 0x12u);
        goto LABEL_96;
      }
      v38 = (int)bswap32(v86) >> 16;
      if (v95 == 1886547820)
      {
        if (v38 <= 0)
        {
          v74 = MEMORY[0x1E0C81028];
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_95;
          *(_DWORD *)buf = v82.n128_u32[0];
          v103 = "MP4_BoxParser_SampleGroupDescription.cpp";
          v104 = 1024;
          v105 = 101;
          v64 = v74;
          v65 = "%25s:%-5d  Unexpected entry for preroll group";
          goto LABEL_94;
        }
      }
      else if (v95 == 1919904876 && (v38 & 0x80000000) == 0)
      {
        v72 = MEMORY[0x1E0C81028];
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_95;
        *(_DWORD *)buf = v82.n128_u32[0];
        v103 = "MP4_BoxParser_SampleGroupDescription.cpp";
        v104 = 1024;
        v105 = 98;
        v64 = v72;
        v65 = "%25s:%-5d  Unexpected entry for roll recovery group";
LABEL_94:
        _os_log_impl(&dword_18EE07000, v64, OS_LOG_TYPE_ERROR, v65, buf, 0x12u);
        goto LABEL_95;
      }
      v39 = *(char **)&v101[16];
      if (*(_QWORD *)&v101[16] >= *(_QWORD *)&v101[24])
      {
        v41 = *(char **)&v101[8];
        v42 = *(_QWORD *)&v101[16] - *(_QWORD *)&v101[8];
        if ((uint64_t)(*(_QWORD *)&v101[16] - *(_QWORD *)&v101[8]) < -2)
          goto LABEL_116;
        v43 = v42 >> 1;
        if (*(_QWORD *)&v101[24] - *(_QWORD *)&v101[8] <= (unint64_t)((v42 >> 1) + 1))
          v44 = v43 + 1;
        else
          v44 = *(_QWORD *)&v101[24] - *(_QWORD *)&v101[8];
        v45 = 0x7FFFFFFFFFFFFFFFLL;
        if (*(_QWORD *)&v101[24] - *(_QWORD *)&v101[8] < 0x7FFFFFFFFFFFFFFEuLL)
          v45 = v44;
        if (v45)
        {
          v45 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v45);
          v41 = *(char **)&v101[8];
          v39 = *(char **)&v101[16];
        }
        else
        {
          v46 = 0;
        }
        v47 = (_WORD *)(v45 + 2 * v43);
        *v47 = v38;
        v40 = v47 + 1;
        while (v39 != v41)
        {
          v48 = *((_WORD *)v39 - 1);
          v39 -= 2;
          *--v47 = v48;
        }
        *(_QWORD *)&v101[8] = v47;
        *(_QWORD *)&v101[16] = v40;
        *(_QWORD *)&v101[24] = v45 + 2 * v46;
        if (v41)
          operator delete(v41);
      }
      else
      {
        **(_WORD **)&v101[16] = v38;
        v40 = v39 + 2;
      }
      *(_QWORD *)&v101[16] = v40;
      v30 += 2;
      if (++v29 >= v99)
        goto LABEL_56;
    }
    v70 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = v82.n128_u32[0];
      v103 = "MP4_BoxParser_SampleGroupDescription.cpp";
      v104 = 1024;
      v105 = 77;
      v64 = v70;
      v65 = "%25s:%-5d  'sgpd' box is too small for the group description entry size";
      goto LABEL_94;
    }
LABEL_95:
    v16 = 0;
    v94 = 0;
LABEL_96:
    if (!(_DWORD)v16 && v94 || (*(_QWORD *)(a5 + 16) = *(_QWORD *)(a5 + 8), !(_DWORD)v16))
    {
LABEL_99:
      v87 = &off_1E2909C98;
      if (*(_QWORD *)&v101[8])
      {
        *(_QWORD *)&v101[16] = *(_QWORD *)&v101[8];
        operator delete(*(void **)&v101[8]);
      }
      v75 = v88;
      v87 = &off_1E2902718;
      v88 = 0;
      v10 = v78;
      if (v75)
        (*(void (**)(MP4BoxParser *))(*(_QWORD *)v75 + 8))(v75);
      v16 = 0;
      v12 = v9 + 1;
      v6 = *(_QWORD *)(a2 + 8);
      a1 = v80;
      a3 = v81;
      a6 = v82;
      v11 = v79;
      if (v6 == a2)
        return v16;
      continue;
    }
    break;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = v82.n128_u32[0];
    v103 = "MP4_BoxParser_RollGroupUtility.cpp";
    v104 = 1024;
    v105 = 40;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4GetRollGroupDescription: Failed to parse GroupDescription", buf, 0x12u);
  }
LABEL_109:
  v87 = &off_1E2909C98;
  if (*(_QWORD *)&v101[8])
  {
    *(_QWORD *)&v101[16] = *(_QWORD *)&v101[8];
    operator delete(*(void **)&v101[8]);
  }
  v77 = v88;
  v87 = &off_1E2902718;
  v88 = 0;
  if (v77)
    (*(void (**)(MP4BoxParser *))(*(_QWORD *)v77 + 8))(v77);
  return v16;
}

void sub_18EF9AE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  _Unwind_Resume(exception_object);
}

void MP4GetRollGroup(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint8_t *a5, unsigned int a6, uint64_t a7)
{
  uint64_t v8;
  int v11;
  _BYTE *v12;
  int v13;
  void (**v14)(MP4BoxParser *__hidden);
  void (**v15)(MP4BoxParser_SampleToGroupRunLength *__hidden);
  int v16;
  int v17;
  int v18;
  void (**v20)(MP4BoxParser_SampleToGroupRunLength *__hidden);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL RollGroupWithSampleToGroupBox;
  uint64_t v25;
  uint64_t v26;
  void (**v27)(MP4BoxParser *__hidden);
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE buf[18];
  int v38;
  uint64_t v39;
  char v40;
  int v41;
  char v42;
  int v43;
  char v44;
  int v45;
  __int16 v46;
  char v47;
  void *v48[6];
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a7 = 0;
  *(_QWORD *)(a7 + 40) = *(_QWORD *)(a7 + 32);
  v8 = *(_QWORD *)(a2 + 8);
  if (v8 == a2)
    goto LABEL_26;
  v11 = 0;
  v12 = &buf[8];
  v13 = 1;
  v14 = &off_1E2902718;
  v15 = &off_1E2909CC8;
  while (2)
  {
    v16 = 0;
    v17 = v11;
    v11 = v13;
    while (1)
    {
      v18 = *(_DWORD *)(v8 + 16);
      if (v18 != 1935828848 && v18 != 1668507504)
        goto LABEL_11;
      if (v16 == v17)
        break;
      ++v16;
LABEL_11:
      v8 = *(_QWORD *)(v8 + 8);
      if (v8 == a2)
        goto LABEL_26;
    }
    if (v18 == 1668507504)
    {
      v26 = *(_QWORD *)(v8 + 32) + a3;
      v27 = v14;
      *(_QWORD *)buf = v14;
      v28 = v12;
      v29 = a3;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, v26);
      buf[16] = 0;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 8;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      *(_QWORD *)buf = &off_1E29099F8;
      v47 = 0;
      memset(v48, 0, sizeof(v48));
      v49 = 0u;
      v30 = a1;
      v31 = a1;
      v32 = v29;
      LOBYTE(v29) = MP4GetRollGroupWithSampleToGroupBox(v31, a2, v29, a4, (uint64_t)buf, a5, a6, a7);
      MP4BoxParser_SampleToGroupCompact::~MP4BoxParser_SampleToGroupCompact((MP4BoxParser_SampleToGroupCompact *)buf);
      v14 = v27;
      v12 = v28;
      v15 = &off_1E2909CC8;
      a3 = v32;
      a1 = v30;
      if ((v29 & 1) != 0)
        goto LABEL_26;
LABEL_22:
      v13 = v11 + 1;
      v8 = *(_QWORD *)(a2 + 8);
      if (v8 == a2)
        goto LABEL_26;
      continue;
    }
    break;
  }
  if (v18 == 1935828848)
  {
    v20 = v15;
    v21 = *(_QWORD *)(v8 + 32) + a3;
    *(_QWORD *)buf = v14;
    v33 = v12;
    v22 = a3;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, v21);
    buf[16] = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 8;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    *(_QWORD *)buf = v20;
    LODWORD(v48[0]) = 0;
    memset(&v48[1], 0, 32);
    v23 = v22;
    RollGroupWithSampleToGroupBox = MP4GetRollGroupWithSampleToGroupBox(a1, a2, v22, a4, (uint64_t)buf, a5, a6, a7);
    *(_QWORD *)buf = v20;
    if (v48[2])
    {
      v48[3] = v48[2];
      operator delete(v48[2]);
    }
    v25 = *(_QWORD *)&buf[8];
    v14 = &off_1E2902718;
    *(_QWORD *)buf = &off_1E2902718;
    *(_QWORD *)&buf[8] = 0;
    if (v25)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      v14 = &off_1E2902718;
    }
    v12 = v33;
    v15 = v20;
    a3 = v23;
    if (!RollGroupWithSampleToGroupBox)
      goto LABEL_22;
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "MP4_BoxParser_RollGroupUtility.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 75;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4GetRollSampleGroup: Unknown SampleToGroup box type", buf, 0x12u);
  }
LABEL_26:
  if (!*(_BYTE *)a7)
    *(_QWORD *)(a7 + 40) = *(_QWORD *)(a7 + 32);
}

void sub_18EF9B1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  MP4BoxParser_SampleToGroupCompact::~MP4BoxParser_SampleToGroupCompact((MP4BoxParser_SampleToGroupCompact *)&a15);
  _Unwind_Resume(a1);
}

BOOL MP4GetRollGroupWithSampleToGroupBox(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint8_t *a6, unsigned int a7, uint64_t a8)
{
  _BOOL8 result;
  __n128 v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint8_t *v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  unsigned int *v39;
  uint64_t v40;
  int v41;
  const char *v42;
  __int16 v43;
  int v44;
  uint8_t v45[32];
  uint8_t buf[4];
  void *__p[3];
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5))
  {
    result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136315394;
    __p[0] = "MP4_BoxParser_RollGroupUtility.cpp";
    LOWORD(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 2) = 97;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4GetRollSampleGroup: Failed to parse SampleToGroup box", buf, 0x12u);
    return 0;
  }
  if (*(_DWORD *)(a5 + 64) != a4 || *(_BYTE *)(a5 + 68) != 0)
    return 0;
  if (*(_BYTE *)(a5 + 60))
  {
    v38 = 0;
    v39 = 0;
    v40 = 0;
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a5 + 32))(a5, &v38))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        __p[0] = "MP4_BoxParser_RollGroupUtility.cpp";
        LOWORD(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 2) = 109;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4GetRollSampleGroup: Failed to load SampleToGroup table", buf, 0x12u);
      }
LABEL_59:
      if (v38)
      {
        v39 = (unsigned int *)v38;
        operator delete(v38);
      }
      return 1;
    }
    *(_WORD *)buf = 0;
    memset(__p, 0, sizeof(__p));
    v48 = 0;
    if (*(_BYTE *)(a5 + 77) && MP4GetRollGroupDescription(a1, a2, a3, a4, (uint64_t)buf, v18))
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_57;
      *(_DWORD *)v45 = 136315394;
      *(_QWORD *)&v45[4] = "MP4_BoxParser_RollGroupUtility.cpp";
      *(_WORD *)&v45[12] = 1024;
      *(_DWORD *)&v45[14] = 116;
      v19 = MEMORY[0x1E0C81028];
      v20 = "%25s:%-5d  MP4GetRollSampleGroup: Failed to load local RollGroupDescription";
LABEL_21:
      v21 = v45;
LABEL_22:
      _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, v20, v21, 0x12u);
      goto LABEL_57;
    }
    if (*(_BYTE *)(a5 + 76) && !*a6)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_57;
      *(_DWORD *)v45 = 136315394;
      *(_QWORD *)&v45[4] = "MP4_BoxParser_RollGroupUtility.cpp";
      *(_WORD *)&v45[12] = 1024;
      *(_DWORD *)&v45[14] = 120;
      v19 = MEMORY[0x1E0C81028];
      v20 = "%25s:%-5d  MP4GetRollSampleGroup: Lacks necessary global roll group description";
      goto LABEL_21;
    }
    memset(v45, 0, 24);
    v22 = (unsigned int *)v38;
    v23 = v39;
    if (v38 != v39)
    {
      v24 = 0;
      while (1)
      {
        v25 = v22[1];
        v26 = (unsigned __int16)v25;
        if ((_WORD)v25)
        {
          if ((v25 & 0x10000) != 0)
            v27 = buf;
          else
            v27 = a6;
          if (!*v27)
            goto LABEL_57;
          v28 = (v25 & 0x10000) == 0;
          if ((v25 & 0x10000) != 0)
            v29 = (uint64_t *)((char *)&__p[1] + 4);
          else
            v29 = (uint64_t *)(a6 + 16);
          v30 = *v29;
          v31 = (uint64_t *)(a6 + 8);
          if (!v28)
            v31 = (uint64_t *)((char *)__p + 4);
          v32 = *v31;
          if (v26 > (v30 - v32) >> 1)
            goto LABEL_57;
          *(_QWORD *)&v45[8] = *v22;
          *(_WORD *)&v45[16] = *(_WORD *)(v32 + 2 * (v26 - 1));
          SampleToRollDistanceTable::append_entry(a8, (__int128 *)v45);
        }
        v33 = *v22;
        v22 += 2;
        v24 += v33;
        *(_QWORD *)v45 = v24;
        if (v22 == v23)
          goto LABEL_40;
      }
    }
    v24 = 0;
LABEL_40:
    v34 = __OFSUB__(a7, v24);
    v35 = a7 - v24;
    if ((v35 < 0) ^ v34 | (v35 == 0))
      goto LABEL_57;
    if (buf[0])
      goto LABEL_42;
    if (MP4GetRollGroupDescription(a1, a2, a3, a4, (uint64_t)buf, v18))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v41 = 136315394;
        v42 = "MP4_BoxParser_RollGroupUtility.cpp";
        v43 = 1024;
        v44 = 169;
        v19 = MEMORY[0x1E0C81028];
        v20 = "%25s:%-5d  MP4GetRollSampleGroup: Failed to load local RollGroupDescription when looking for default description";
        v21 = (uint8_t *)&v41;
        goto LABEL_22;
      }
      goto LABEL_57;
    }
    if (buf[0])
    {
LABEL_42:
      if (buf[1])
      {
        v36 = LOWORD(__p[0]);
        if (((uint64_t)__p[0] & 0x10000) != 0)
          a6 = buf;
        goto LABEL_53;
      }
    }
    if (*a6 && a6[1])
    {
      v36 = *((_DWORD *)a6 + 1);
LABEL_53:
      if (v36)
      {
        if (*a6)
        {
          v37 = *((_QWORD *)a6 + 1);
          if (v36 <= (unint64_t)((*((_QWORD *)a6 + 2) - v37) >> 1))
          {
            *(_QWORD *)&v45[8] = v35;
            *(_WORD *)&v45[16] = *(_WORD *)(v37 + 2 * (v36 - 1));
            SampleToRollDistanceTable::append_entry(a8, (__int128 *)v45);
          }
        }
      }
    }
LABEL_57:
    if (*(void **)((char *)__p + 4))
    {
      *(void **)((char *)&__p[1] + 4) = *(void **)((char *)__p + 4);
      operator delete(*(void **)((char *)__p + 4));
    }
    goto LABEL_59;
  }
  return 1;
}

void sub_18EF9B6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void EC3AudioStream::~EC3AudioStream(EC3AudioStream *this)
{
  EC3AudioStream::~EC3AudioStream(this);
  JUMPOUT(0x193FFE460);
}

{
  EC3StreamParser *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2904468;
  v2 = (EC3StreamParser *)*((_QWORD *)this + 51);
  if (v2)
  {
    EC3StreamParser::~EC3StreamParser(v2);
    MEMORY[0x193FFE460]();
  }
  *((_BYTE *)this + 438) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 108) = 0;
  *((_DWORD *)this + 123) = 0;
  v3 = (void *)*((_QWORD *)this + 60);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 60) = 0;
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

uint64_t EC3AudioStream::Flush(EC3AudioStream *this)
{
  UInt32 v2;
  AudioStreamPacketDescription *v3;
  NSObject *v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  UInt32 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 106) && *((_DWORD *)this + 107) && *((_DWORD *)this + 123))
  {
    if (*((_BYTE *)this + 438))
      EC3AudioStream::NotifyFormatChange(this, (const AudioStreamBasicDescription *)this + 11);
    if (!*((_DWORD *)this + 50))
    {
      *((_DWORD *)this + 50) = 1;
      CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)this + 24, 1);
    }
    v2 = *((_DWORD *)this + 123);
    v3 = (AudioStreamPacketDescription *)*((_QWORD *)this + 24);
    v3->mStartOffset = 0;
    v3->mVariableFramesInPacket = 0;
    v3->mDataByteSize = v2;
    if (kASSubSytemEC3)
    {
      v4 = *(NSObject **)kASSubSytemEC3;
      if (!*(_QWORD *)kASSubSytemEC3)
      {
LABEL_14:
        AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v2, 1u, *((const void **)this + 60), v3, 0);
        ++*((_QWORD *)this + 23);
        *((_BYTE *)this + 438) = 0;
        *((_QWORD *)this + 53) = 0;
        *((_DWORD *)this + 108) = 0;
        *((_DWORD *)this + 123) = 0;
        return 0;
      }
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v6 = 136315906;
      v7 = "EC3AudioStream.cpp";
      v8 = 1024;
      v9 = 382;
      v10 = 2048;
      v11 = 0;
      v12 = 1024;
      v13 = v2;
      _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d found packet: offset = %lld, size = %d", (uint8_t *)&v6, 0x22u);
      v2 = *((_DWORD *)this + 123);
      v3 = (AudioStreamPacketDescription *)*((_QWORD *)this + 24);
    }
    goto LABEL_14;
  }
  return 0;
}

uint64_t EC3AudioStream::GetPropertyInfo(EC3AudioStream *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  unsigned int v4;

  if (a2 > 1768174432)
  {
    if (a2 == 1768174433)
    {
      if (!a3)
        goto LABEL_17;
      v4 = 8;
LABEL_16:
      *a3 = v4;
LABEL_17:
      if (a4)
        *a4 = 0;
      return 0;
    }
    if (a2 == 1768174437)
    {
      if (!a3)
        goto LABEL_17;
      v4 = 4;
      goto LABEL_16;
    }
  }
  else
  {
    if (a2 == 1634494051)
    {
      if (a3)
        *a3 = 4;
      if (a4)
        *a4 = 1;
      return 0;
    }
    if (a2 == 1668112752)
    {
      if (!a3)
        goto LABEL_17;
      v4 = 32;
      goto LABEL_16;
    }
  }
  return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
}

uint64_t EC3AudioStream::GetProperty(EC3AudioStream *this, int a2, unsigned int *a3, _QWORD *__dst)
{
  uint64_t v7;
  const void *v8;
  uint64_t result;
  __int128 v10;
  int v11;
  unint64_t v12;
  int v13;
  _DWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if (a2 > 1718383475)
  {
    if (a2 == 1718383476)
    {
      result = AudioFileStreamObject::GetProperty(this, 1718383476, a3, __dst);
      if (!(_DWORD)result)
      {
        if (*a3 >= 0x30)
        {
          v12 = *a3 / 0x30uLL;
          v13 = *((_DWORD *)this + 11);
          v14 = (_DWORD *)__dst + 5;
          do
          {
            *v14 = v13;
            v14 += 12;
            --v12;
          }
          while (v12);
        }
        return 0;
      }
      return result;
    }
    if (a2 == 1768174433)
    {
      result = 561211770;
      if (a3 && *a3 == 8)
      {
        result = 0;
        *__dst = *((_QWORD *)this + 46);
      }
      return result;
    }
    if (a2 != 1768174437)
      return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
    result = 561211770;
    if (!a3 || *a3 != 4)
      return result;
    result = 0;
    v11 = *((_DWORD *)this + 91);
LABEL_18:
    *(_DWORD *)__dst = v11;
    return result;
  }
  if (a2 == 1634494051)
  {
    result = 561211770;
    if (!a3 || *a3 != 4)
      return result;
    result = 0;
    v11 = *((unsigned __int8 *)this + 437);
    goto LABEL_18;
  }
  if (a2 == 1668112752)
  {
    result = 561211770;
    if (a3 && *a3 >= 0x20)
    {
      result = 0;
      *(_OWORD *)__dst = 0u;
      *((_OWORD *)__dst + 1) = 0u;
      *(_DWORD *)__dst = *((_DWORD *)this + 100);
      *a3 = 32;
    }
    return result;
  }
  if (a2 != 1684434292)
    return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
  v7 = *((_QWORD *)this + 1);
  v8 = *(const void **)(v7 + 136);
  if (v8)
  {
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    result = AudioFormatGetProperty(0x78686173u, 0xCu, v8, a3, &v17);
    if (*a3 == 40)
    {
      if (!(_DWORD)result)
      {
        v10 = v18;
        *(_OWORD *)__dst = v17;
        *((_OWORD *)__dst + 1) = v10;
        __dst[4] = v19;
      }
      return result;
    }
    return 561211770;
  }
  if (*((_BYTE *)this + 177))
    return 1685348671;
  if (*(_DWORD *)(v7 + 112))
    result = 1970170687;
  else
    result = 1836020325;
  if (*(_BYTE *)(v7 + 105))
  {
    if (*a3 == 40)
    {
      result = 0;
      v15 = *(_OWORD *)((char *)this + 24);
      v16 = *(_OWORD *)((char *)this + 40);
      __dst[4] = *((_QWORD *)this + 7);
      *(_OWORD *)__dst = v15;
      *((_OWORD *)__dst + 1) = v16;
      return result;
    }
    return 561211770;
  }
  return result;
}

uint64_t EC3AudioStream::SetProperty(EC3AudioStream *this, int a2, unsigned int a3, _DWORD *a4)
{
  uint64_t result;

  if (a2 != 1634494051)
    return 1886681407;
  result = 0;
  *((_BYTE *)this + 437) = *a4 != 0;
  return result;
}

uint64_t EC3AudioStream::GetBitRate(EC3AudioStream *this, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  LODWORD(v2) = *((_DWORD *)this + 99);
  if ((_DWORD)v2)
    goto LABEL_4;
  v3 = *((_QWORD *)this + 40);
  if (v3)
  {
    v2 = v3 / *((_QWORD *)this + 26);
LABEL_4:
    result = 0;
    *a2 = v2;
    return result;
  }
  return 1836020325;
}

uint64_t EC3AudioStream::ParseHeader(EC3AudioStream *this, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  EC3AudioStream *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (kASSubSytemEC3)
  {
    v4 = *(NSObject **)kASSubSytemEC3;
    if (!*(_QWORD *)kASSubSytemEC3)
      goto LABEL_7;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v25 = 136315650;
    v26 = "EC3AudioStream.cpp";
    v27 = 1024;
    v28 = 336;
    v29 = 2048;
    v30 = this;
    _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d EC3AudioStream(%p):ParseHeader", (uint8_t *)&v25, 0x1Cu);
  }
LABEL_7:
  v5 = *((_DWORD *)this + 59);
  if (v5 != -1)
  {
    if (v5 == 347)
      goto LABEL_15;
    if (v5)
    {
      v6 = -1;
LABEL_38:
      *((_DWORD *)this + 59) = v6;
    }
    else
    {
      do
      {
        v7 = MEMORY[0x1E0C81028];
        if ((!kASSubSytemEC3 || (v7 = *(NSObject **)kASSubSytemEC3) != 0)
          && os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          v25 = 136315394;
          v26 = "EC3AudioStream.cpp";
          v27 = 1024;
          v28 = 344;
          _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d >>STREAM_WAIT_FOR_DATA  A", (uint8_t *)&v25, 0x12u);
        }
LABEL_15:
        v8 = *((_QWORD *)this + 1);
        v9 = *(unsigned int *)(v8 + 80);
        v11 = *(_QWORD *)(v8 + 88);
        v10 = *(_QWORD *)(v8 + 96);
        v12 = v11 + v9;
        if (*((_BYTE *)this + 332))
          v13 = 10;
        else
          v13 = 12;
        v14 = v10 < v11 || v12 <= v10;
        if (v14 || v13 > (int)v12 - (int)v10)
        {
          v6 = 347;
          goto LABEL_38;
        }
      }
      while (!EC3AudioStream::Resync(this));
      v15 = 0;
      *(_QWORD *)a2 = this;
      *(_OWORD *)(a2 + 8) = xmmword_18F116F70;
      v16 = *((_QWORD *)this + 1);
      v17 = *(_QWORD *)(v16 + 88);
      v18 = *(_QWORD *)(v16 + 96);
      v19 = v17 + *(unsigned int *)(v16 + 80);
      v20 = v18 < v17 || v19 <= v18;
      v21 = v20;
      v22 = v19 - v18;
      if (!v20 && v22)
        v15 = *(_QWORD *)(v16 + 72) + (v18 - v17);
      *(_QWORD *)(a2 + 32) = v15;
      if (v21)
        v23 = 0;
      else
        v23 = v22;
      *(_DWORD *)(a2 + 24) = v23;
    }
  }
  return 0;
}

uint64_t EC3AudioStream::GeneratePackets(EC3AudioStream *this)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t result;
  unsigned int v8;
  unsigned __int8 *v9;
  NSObject **v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  _WORD *v40;
  unsigned int v41;
  BOOL v42;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  void (*v54)(_QWORD, _QWORD, uint64_t, uint8_t *);
  size_t v55;
  uint64_t v56;
  unsigned int v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned __int8 *v69;
  UInt32 v70;
  AudioStreamPacketDescription *v71;
  NSObject *v72;
  int v73;
  unsigned __int8 *v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  char v89;
  int v90;
  unsigned int v91;
  UInt32 v92;
  NSObject *v93;
  _BOOL4 v94;
  char *v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  NSObject *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  int v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  int v120;
  int v121;
  uint64_t v122;
  void (*v123)(_QWORD, _QWORD, uint64_t, uint8_t *);
  UInt32 v124;
  AudioStreamPacketDescription *v125;
  NSObject *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  NSObject *v131;
  NSObject **v132;
  NSObject *v133;
  NSObject *v134;
  uint64_t v135;
  NSObject *v136;
  int v137;
  NSObject *v138;
  NSObject *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  NSObject *v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _BOOL4 v155;
  unsigned int v156;
  size_t v157;
  uint64_t v158;
  unsigned __int8 *v160;
  int v161;
  int v162;
  int v164;
  int v165;
  BOOL v166;
  int v167;
  int v168;
  int v170;
  AudioFileStreamWrapper *v171;
  uint64_t v172;
  unsigned int v173;
  NSObject *v174;
  NSObject *v175;
  unsigned int v176;
  int v177;
  int v178;
  const char *v179;
  uint64_t v180;
  const char *v181;
  NSObject *v182;
  uint32_t v183;
  int v184;
  NSObject *v185;
  NSObject *v186;
  void **v187;
  unsigned int v188;
  unsigned int v189;
  unsigned __int8 *v190;
  unsigned int v191[2];
  uint8_t buf[4];
  const char *v193;
  __int16 v194;
  int v195;
  __int16 v196;
  _BYTE v197[10];
  _BYTE v198[6];
  unsigned int v199;
  __int16 v200;
  int v201;
  __int16 v202;
  int v203;
  uint64_t v204;

  v204 = *MEMORY[0x1E0C80C00];
  if (kASSubSytemEC3)
  {
    v2 = *(NSObject **)kASSubSytemEC3;
    if (!*(_QWORD *)kASSubSytemEC3)
      goto LABEL_7;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    v193 = "EC3AudioStream.cpp";
    v194 = 1024;
    v195 = 652;
    v196 = 2048;
    *(_QWORD *)v197 = this;
    _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d ->EC3AudioStream(%p)::GeneratePackets", buf, 0x1Cu);
  }
LABEL_7:
  if (*((_BYTE *)this + 332))
    v3 = 10;
  else
    v3 = 12;
  v188 = v3;
  v4 = *((_DWORD *)this + 59);
  if (v4 > 668)
  {
    switch(v4)
    {
      case 669:
        goto LABEL_52;
      case 792:
        v8 = *((_DWORD *)this + 64);
        v9 = (unsigned __int8 *)*((_QWORD *)this + 33);
        goto LABEL_142;
      case 984:
        v5 = *((_DWORD *)this + 64);
        v6 = (unsigned __int8 *)*((_QWORD *)this + 33);
LABEL_301:
        *(_DWORD *)buf = v5;
        StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)buf, v6);
        v146 = *(_DWORD *)buf;
        v147 = *((_DWORD *)this + 64);
        *((_QWORD *)this + 33) += *(unsigned int *)buf;
        v148 = v147 - v146;
        *((_DWORD *)this + 64) = v148;
        if (!v148)
        {
          v149 = *((_DWORD *)this + 107);
          if (*((_DWORD *)this + 122) < v149)
          {
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)this + 60, *((unsigned int *)this + 107));
            *((_DWORD *)this + 122) = v149;
          }
          *((_DWORD *)this + 123) = v149;
          goto LABEL_20;
        }
        result = 0;
        v164 = 984;
        goto LABEL_389;
    }
    goto LABEL_17;
  }
  if (v4 == -1)
    return 0;
  if (!v4)
  {
    while (1)
    {
LABEL_20:
      v10 = (NSObject **)kASSubSytemEC3;
      v11 = MEMORY[0x1E0C81028];
      if (!kASSubSytemEC3 || (v11 = *(NSObject **)kASSubSytemEC3) != 0)
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          v12 = *(_QWORD *)(*((_QWORD *)this + 1) + 88);
          *(_DWORD *)buf = 136315650;
          v193 = "EC3AudioStream.cpp";
          v194 = 1024;
          v195 = 663;
          v196 = 2048;
          *(_QWORD *)v197 = v12;
          _os_log_impl(&dword_18EE07000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d buffer file position %qd", buf, 0x1Cu);
          v10 = (NSObject **)kASSubSytemEC3;
        }
        v13 = MEMORY[0x1E0C81028];
        if (!v10 || (v13 = *v10) != 0)
        {
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            v14 = *(_QWORD *)(*((_QWORD *)this + 1) + 96);
            *(_DWORD *)buf = 136315650;
            v193 = "EC3AudioStream.cpp";
            v194 = 1024;
            v195 = 664;
            v196 = 2048;
            *(_QWORD *)v197 = v14;
            _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d current file position %qd", buf, 0x1Cu);
            v10 = (NSObject **)kASSubSytemEC3;
          }
          v15 = MEMORY[0x1E0C81028];
          if (!v10 || (v15 = *v10) != 0)
          {
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              v16 = *((_QWORD *)this + 1);
              v17 = *(unsigned int *)(v16 + 80);
              v19 = *(_QWORD *)(v16 + 88);
              v18 = *(_QWORD *)(v16 + 96);
              if (v18 >= v19 + v17 || v18 < v19)
                v21 = v17;
              else
                v21 = v18 - v19;
              *(_DWORD *)buf = 136315650;
              v193 = "EC3AudioStream.cpp";
              v194 = 1024;
              v195 = 665;
              v196 = 1024;
              *(_DWORD *)v197 = v21;
              _os_log_impl(&dword_18EE07000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d current offset %d", buf, 0x18u);
              v10 = (NSObject **)kASSubSytemEC3;
            }
            v22 = MEMORY[0x1E0C81028];
            if (!v10 || (v22 = *v10) != 0)
            {
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                v23 = *((_QWORD *)this + 1);
                v24 = *(unsigned int *)(v23 + 80);
                v26 = *(_QWORD *)(v23 + 88);
                v25 = *(_QWORD *)(v23 + 96);
                v27 = v26 + v24;
                if (v27 <= v25 || v25 < v26)
                  v29 = 0;
                else
                  v29 = v27 - v25;
                *(_DWORD *)buf = 136315650;
                v193 = "EC3AudioStream.cpp";
                v194 = 1024;
                v195 = 666;
                v196 = 1024;
                *(_DWORD *)v197 = v29;
                _os_log_impl(&dword_18EE07000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d bytes available %d", buf, 0x18u);
                v10 = (NSObject **)kASSubSytemEC3;
              }
              v30 = MEMORY[0x1E0C81028];
              if ((!v10 || (v30 = *v10) != 0) && os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                v193 = "EC3AudioStream.cpp";
                v194 = 1024;
                v195 = 667;
                _os_log_impl(&dword_18EE07000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d >>STREAM_WAIT_FOR_DATA  B", buf, 0x12u);
              }
            }
          }
        }
      }
LABEL_52:
      v31 = *((_QWORD *)this + 1);
      v32 = *(_QWORD *)(v31 + 88);
      v33 = *(_QWORD *)(v31 + 96);
      v34 = v32 + *(unsigned int *)(v31 + 80);
      v35 = v33 < v32 || v34 <= v33;
      if (v35 || (v36 = v34 - v33) == 0)
      {
        result = 0;
        v164 = 669;
        goto LABEL_389;
      }
      if (*((_BYTE *)this + 352))
      {
        v37 = *((unsigned int *)this + 84);
        v38 = (int)v37;
        v39 = 10 - (int)v37 >= v36 ? v36 : (10 - v37);
        v40 = (_WORD *)((char *)this + 340);
        memcpy((char *)this + v37 + 340, (const void *)(*(_QWORD *)(v31 + 72) + (v33 - v32)), v39);
        v41 = *((_DWORD *)this + 84) + v39;
        *((_DWORD *)this + 84) = v41;
        if (v41 >= 3)
        {
          v42 = *v40 == 17481 && *((_BYTE *)this + 342) == 51;
          if (!v42 && (*v40 != 16724 || *((_BYTE *)this + 342) != 71))
            goto LABEL_86;
          if (v41 != 10)
          {
            if (v41 < 0xB)
              goto LABEL_87;
LABEL_86:
            *((_BYTE *)this + 352) = 0;
            *((_DWORD *)this + 84) = 0;
            goto LABEL_87;
          }
          v44 = ID3Size(0xAu, (const unsigned __int8 *)this + 340, (int *)&v190);
          if (v44)
          {
            v45 = v44;
            (*(void (**)(EC3AudioStream *))(*(_QWORD *)this + 16))(this);
            *((_DWORD *)this + 91) = -(int)v38;
            v46 = *((_QWORD *)this + 1);
            *((_QWORD *)this + 46) = *(_QWORD *)(v46 + 88) - v38;
            v47 = *((char *)this + 376);
            if (v47 < 0)
            {
              v47 = 0;
              v48 = *(_QWORD *)(v46 + 48);
              v49 = *(_QWORD *)(v46 + 56) - v48;
              if (v49)
              {
                v50 = 0;
                v51 = v49 >> 2;
                v52 = 1;
                do
                {
                  v42 = *(_DWORD *)(v48 + 4 * v50) == 1768174437;
                  v47 = v42;
                  v50 = v52++;
                }
                while (!v42 && v51 > v50);
              }
              *((_BYTE *)this + 376) = v47;
            }
            if (v47)
            {
              *(_DWORD *)buf = 0;
              v54 = *(void (**)(_QWORD, _QWORD, uint64_t, uint8_t *))(v46 + 24);
              if (v54)
              {
                v54(*(_QWORD *)(v46 + 40), *(unsigned int *)(v46 + 8), 1768174437, buf);
                v46 = *((_QWORD *)this + 1);
              }
            }
            *(_QWORD *)(v46 + 96) += (v39 + v45 - 10);
            *((_BYTE *)this + 352) = 0;
          }
        }
      }
LABEL_87:
      if (*((_BYTE *)this + 333))
      {
        LODWORD(v55) = 0;
        v56 = *((unsigned int *)this + 84);
        v57 = v188 - v56;
        if (v188 > v56)
        {
          v58 = 0;
          v59 = *((_QWORD *)this + 1);
          v60 = *(_QWORD *)(v59 + 88);
          v61 = *(_QWORD *)(v59 + 96);
          v62 = v60 + *(unsigned int *)(v59 + 80);
          v64 = v61 < v60 || v62 <= v61;
          v65 = v62 - v61;
          if (v64)
            v66 = 0;
          else
            v66 = v65;
          if (v66 >= v57)
            v55 = v57;
          else
            v55 = v66;
          if (!v64 && v65)
            v58 = (const void *)(*(_QWORD *)(v59 + 72) + (v61 - v60));
          memcpy((char *)this + v56 + 340, v58, v55);
          LODWORD(v56) = *((_DWORD *)this + 84) + v55;
          *((_DWORD *)this + 84) = v56;
        }
        v67 = *((unsigned __int8 *)this + 340);
        if (v67 == 11)
        {
          if (*((_BYTE *)this + 341) != 119)
            goto LABEL_108;
        }
        else if (v67 != 119 || *((_BYTE *)this + 341) != 11)
        {
LABEL_108:
          if (v56 >= 2)
          {
LABEL_135:
            *((_BYTE *)this + 333) = 0;
            *((_DWORD *)this + 84) = 0;
            goto LABEL_136;
          }
          goto LABEL_112;
        }
        if (v56 >= v188)
        {
          v190 = 0;
          *(_QWORD *)v191 = 0;
          v68 = EC3AudioStream::ParseOneCycle(this, 0xCu, (char *)this + 340, &v191[1], v191, (const unsigned __int8 **)&v190);
          if (v68)
          {
            if (v68 == 1717662832)
              goto LABEL_387;
          }
          else
          {
            v69 = v190;
            if (v190)
            {
              v70 = v191[0];
              if (v191[0])
              {
                if (*((_BYTE *)this + 438))
                  EC3AudioStream::NotifyFormatChange(this, (const AudioStreamBasicDescription *)this + 11);
                if (!*((_DWORD *)this + 50))
                {
                  *((_DWORD *)this + 50) = 1;
                  CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)this + 24, 1);
                }
                v71 = (AudioStreamPacketDescription *)*((_QWORD *)this + 24);
                v71->mStartOffset = 0;
                v71->mVariableFramesInPacket = 0;
                v71->mDataByteSize = v70;
                v72 = MEMORY[0x1E0C81028];
                if ((!kASSubSytemEC3 || (v72 = *(NSObject **)kASSubSytemEC3) != 0)
                  && os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315906;
                  v193 = "EC3AudioStream.cpp";
                  v194 = 1024;
                  v195 = 752;
                  v196 = 2048;
                  *(_QWORD *)v197 = 0;
                  *(_WORD *)&v197[8] = 1024;
                  *(_DWORD *)v198 = v70;
                  _os_log_impl(&dword_18EE07000, v72, OS_LOG_TYPE_DEBUG, "%25s:%-5d found packet: offset = %lld, size = %d", buf, 0x22u);
                  v71 = (AudioStreamPacketDescription *)*((_QWORD *)this + 24);
                }
                AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v70, 1u, v69, v71, 1);
                ++*((_QWORD *)this + 23);
                *((_BYTE *)this + 438) = 0;
                *((_QWORD *)this + 53) = 0;
                *((_DWORD *)this + 108) = 0;
                *((_DWORD *)this + 123) = 0;
                if (!v191[1])
                {
                  v73 = EC3AudioStream::ParseOneCycle(this, 0xCu, (char *)this + 340, &v191[1], v191, (const unsigned __int8 **)&v190);
                  if (v73)
                  {
                    v184 = v73;
                    if (kASSubSytemEC3)
                    {
                      v185 = *(NSObject **)kASSubSytemEC3;
                      if (!*(_QWORD *)kASSubSytemEC3)
                      {
LABEL_387:
                        result = 1685348671;
                        *((_BYTE *)this + 177) = 1;
                        goto LABEL_388;
                      }
                    }
                    else
                    {
                      v185 = MEMORY[0x1E0C81028];
                    }
                    if (!os_log_type_enabled(v185, OS_LOG_TYPE_DEBUG))
                      goto LABEL_387;
                    *(_DWORD *)buf = 136315650;
                    v193 = "EC3AudioStream.cpp";
                    v194 = 1024;
                    v195 = 762;
                    v196 = 1024;
                    *(_DWORD *)v197 = v184;
                    v181 = "%25s:%-5d ERROR: unexpected failure in ParseOneCycle, err = %d";
                    v182 = v185;
                    v183 = 24;
                    goto LABEL_386;
                  }
                  v74 = v190;
                  v75 = v191[0];
                  if (v190 || v191[0])
                  {
                    if (kASSubSytemEC3)
                    {
                      v186 = *(NSObject **)kASSubSytemEC3;
                      if (!*(_QWORD *)kASSubSytemEC3)
                        goto LABEL_387;
                    }
                    else
                    {
                      v186 = MEMORY[0x1E0C81028];
                    }
                    if (!os_log_type_enabled(v186, OS_LOG_TYPE_DEBUG))
                      goto LABEL_387;
                    *(_DWORD *)buf = 136315906;
                    v193 = "EC3AudioStream.cpp";
                    v194 = 1024;
                    v195 = 766;
                    v196 = 2048;
                    *(_QWORD *)v197 = v74;
                    *(_WORD *)&v197[8] = 1024;
                    *(_DWORD *)v198 = v75;
                    v181 = "%25s:%-5d ERROR: we should not have a full packet because we just cached a header, outPacketB"
                           "uf = %p, outPacketSize = %d";
                    v182 = v186;
                    v183 = 34;
                    goto LABEL_386;
                  }
                }
              }
            }
            if (v55 >= v191[1])
              v76 = v191[1];
            else
              v76 = v55;
            *(_QWORD *)(*((_QWORD *)this + 1) + 96) += v76;
          }
          goto LABEL_135;
        }
LABEL_112:
        if (v56 < v188)
          goto LABEL_136;
        goto LABEL_135;
      }
LABEL_136:
      if (*((_DWORD *)this + 106) && (v77 = *((_DWORD *)this + 107)) != 0)
      {
        v78 = *((_DWORD *)this + 123);
        if (v77 <= v78)
          goto LABEL_147;
        if (*((_DWORD *)this + 122) < v77)
        {
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)this + 60, *((unsigned int *)this + 107));
          *((_DWORD *)this + 122) = v77;
          v77 = *((_DWORD *)this + 107);
          v78 = *((_DWORD *)this + 123);
        }
        v8 = v77 - v78;
        *((_DWORD *)this + 64) = v77 - v78;
        v9 = (unsigned __int8 *)(*((_QWORD *)this + 60) + v78);
        *((_QWORD *)this + 33) = v9;
LABEL_142:
        *(_DWORD *)buf = v8;
        StreamBuffer::Copy((_QWORD *)(*((_QWORD *)this + 1) + 72), (unsigned int *)buf, v9);
        v79 = *(_DWORD *)buf;
        v80 = *((_DWORD *)this + 64);
        *((_QWORD *)this + 33) += *(unsigned int *)buf;
        v81 = v80 - v79;
        *((_DWORD *)this + 64) = v81;
        if (v81)
        {
          result = 0;
          v164 = 792;
          goto LABEL_389;
        }
        v82 = *((_DWORD *)this + 107);
        if (*((_DWORD *)this + 122) < v82)
        {
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)this + 60, *((unsigned int *)this + 107));
          *((_DWORD *)this + 122) = v82;
        }
      }
      else
      {
        v82 = 0;
        *((_BYTE *)this + 438) = 0;
        *((_QWORD *)this + 53) = 0;
        *((_DWORD *)this + 108) = 0;
      }
      *((_DWORD *)this + 123) = v82;
LABEL_147:
      v83 = 0;
      v84 = *((_QWORD *)this + 1);
      v85 = *(_QWORD *)(v84 + 88);
      v86 = *(_QWORD *)(v84 + 96);
      v87 = v85 + *(unsigned int *)(v84 + 80);
      v88 = v86 < v85 || v87 <= v86;
      v89 = v88;
      v90 = v87 - v86;
      if (!v88 && (_DWORD)v87 != (_DWORD)v86)
        v83 = (char *)(*(_QWORD *)(v84 + 72) + (v86 - v85));
      if (!v90)
        v89 = 1;
      if ((v89 & 1) == 0)
      {
        v191[1] = 0;
        if ((int)v188 <= v90)
        {
          v91 = 0;
          v92 = 0;
          v187 = (void **)((char *)this + 192);
          while (1)
          {
            while (1)
            {
              if (!EC3AudioStream::ScanForSyncWord((uint64_t)this, v90, (uint64_t)v83, (int *)&v191[1]))
              {
                if (v91)
                {
                  AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v92, v91, v83, *((AudioStreamPacketDescription **)this + 24), 1);
                  *(_QWORD *)(*((_QWORD *)this + 1) + 96) += v92;
                  v191[1] -= v92;
                  *((_QWORD *)this + 23) += v91;
                }
                if (kASSubSytemEC3)
                {
                  v139 = *(NSObject **)kASSubSytemEC3;
                  v140 = v191[1];
                  if (!*(_QWORD *)kASSubSytemEC3)
                  {
LABEL_290:
                    *(_QWORD *)(*((_QWORD *)this + 1) + 96) += v140;
                    v191[1] = 0;
                    goto LABEL_291;
                  }
                }
                else
                {
                  v139 = MEMORY[0x1E0C81028];
                  v140 = v191[1];
                }
                if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136316162;
                  v193 = "EC3AudioStream.cpp";
                  v194 = 1024;
                  v195 = 828;
                  v196 = 1024;
                  *(_DWORD *)v197 = v140;
                  *(_WORD *)&v197[4] = 1024;
                  *(_DWORD *)&v197[6] = v90;
                  *(_WORD *)v198 = 1024;
                  *(_DWORD *)&v198[2] = v140;
                  _os_log_impl(&dword_18EE07000, v139, OS_LOG_TYPE_DEBUG, "%25s:%-5d did not find sync word, index = %d, size = %d, skipping to %d", buf, 0x24u);
                }
                goto LABEL_290;
              }
              if (kASSubSytemEC3)
              {
                if ((*(_BYTE *)(kASSubSytemEC3 + 8) & 1) != 0)
                {
                  v93 = *(NSObject **)kASSubSytemEC3;
                  if (*(_QWORD *)kASSubSytemEC3)
                  {
                    if (os_log_type_enabled(*(os_log_t *)kASSubSytemEC3, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136316162;
                      v193 = "EC3AudioStream.cpp";
                      v194 = 1024;
                      v195 = 838;
                      v196 = 1024;
                      *(_DWORD *)v197 = v191[1];
                      *(_WORD *)&v197[4] = 1024;
                      *(_DWORD *)&v197[6] = v90;
                      *(_WORD *)v198 = 1024;
                      *(_DWORD *)&v198[2] = v90 - v191[1];
                      _os_log_impl(&dword_18EE07000, v93, OS_LOG_TYPE_DEBUG, "%25s:%-5d --> searching for packet at index %d, size %d, remaining %d", buf, 0x24u);
                    }
                  }
                }
              }
              v191[0] = 0;
              v189 = 0;
              v190 = 0;
              v94 = *((_DWORD *)this + 106) && *((_DWORD *)this + 107) != 0;
              v95 = &v83[v191[1]];
              v96 = EC3AudioStream::ParseOneCycle(this, v90 - v191[1], v95, v191, &v189, (const unsigned __int8 **)&v190);
              if (!v96)
                break;
              v97 = v96;
              if (v96 == 1717662832)
                goto LABEL_387;
              v98 = *((_QWORD *)this + 1);
              if (v91)
              {
                AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v92, v91, v83, *((AudioStreamPacketDescription **)this + 24), 1);
                v98 = *((_QWORD *)this + 1);
                v99 = *(_QWORD *)(v98 + 96) + v92;
                *(_QWORD *)(v98 + 96) = v99;
                v100 = v191[1] - v92;
                v191[1] -= v92;
                *((_QWORD *)this + 23) += v91;
                v92 = 0;
              }
              else
              {
                v100 = v191[1];
                v99 = *(_QWORD *)(v98 + 96);
              }
              v102 = v191[0];
              if (v191[0] <= 1)
                v102 = 1;
              v103 = v100 + v102;
              v104 = v99 + v103;
              *(_QWORD *)(v98 + 96) = v99 + v103;
              if (!kASSubSytemEC3)
              {
                v105 = MEMORY[0x1E0C81028];
LABEL_190:
                if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
                {
                  v106 = *(_QWORD *)(v98 + 88);
                  v107 = v106 + *(unsigned int *)(v98 + 80);
                  if (v107 <= v104 || v104 < v106)
                    v109 = 0;
                  else
                    v109 = v107 - v104;
                  *(_DWORD *)buf = 136316162;
                  v193 = "EC3AudioStream.cpp";
                  v194 = 1024;
                  v195 = 868;
                  v196 = 1024;
                  *(_DWORD *)v197 = v97;
                  *(_WORD *)&v197[4] = 1024;
                  *(_DWORD *)&v197[6] = v103;
                  *(_WORD *)v198 = 1024;
                  *(_DWORD *)&v198[2] = v109;
                  _os_log_impl(&dword_18EE07000, v105, OS_LOG_TYPE_DEBUG, "%25s:%-5d Error: searching for packet (%d), skipping to index %d, remaining %d", buf, 0x24u);
                  v98 = *((_QWORD *)this + 1);
                  v104 = *(_QWORD *)(v98 + 96);
                }
                goto LABEL_198;
              }
              v105 = *(NSObject **)kASSubSytemEC3;
              if (*(_QWORD *)kASSubSytemEC3)
                goto LABEL_190;
LABEL_198:
              v83 = 0;
              v110 = *(_QWORD *)(v98 + 88);
              v111 = v110 + *(unsigned int *)(v98 + 80);
              v112 = v104 < v110 || v111 <= v104;
              v113 = v112;
              v114 = v111 - v104;
              if (!v112 && v114)
                v83 = (char *)(*(_QWORD *)(v98 + 72) + (v104 - v110));
              v91 = 0;
              if (v113)
                v90 = 0;
              else
                v90 = v114;
              v191[1] = 0;
              if (v90 < (int)v188)
                goto LABEL_291;
            }
            if (v190 && v189)
              break;
            if (*((_DWORD *)this + 106) && *((_DWORD *)this + 107))
            {
              v171 = (AudioFileStreamWrapper *)*((_QWORD *)this + 1);
              if (v91)
              {
                AudioFileStreamWrapper::CallPacketsProc(v171, v92, v91, v83, *((AudioStreamPacketDescription **)this + 24), 1);
                v171 = (AudioFileStreamWrapper *)*((_QWORD *)this + 1);
                v172 = *((_QWORD *)v171 + 12) + v92;
                *((_QWORD *)v171 + 12) = v172;
                v173 = v191[1] - v92;
                v191[1] -= v92;
                *((_QWORD *)this + 23) += v91;
              }
              else
              {
                v173 = v191[1];
                v172 = *((_QWORD *)v171 + 12);
              }
              *((_QWORD *)v171 + 12) = v172 + v173 + v191[0];
              goto LABEL_291;
            }
LABEL_255:
            v132 = (NSObject **)kASSubSytemEC3;
            if (kASSubSytemEC3)
            {
              v133 = *(NSObject **)kASSubSytemEC3;
              if (!*(_QWORD *)kASSubSytemEC3)
                goto LABEL_279;
            }
            else
            {
              v133 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              v193 = "EC3AudioStream.cpp";
              v194 = 1024;
              v195 = 959;
              v196 = 1024;
              *(_DWORD *)v197 = v191[1];
              _os_log_impl(&dword_18EE07000, v133, OS_LOG_TYPE_DEBUG, "%25s:%-5d ---index   %d", buf, 0x18u);
              v132 = (NSObject **)kASSubSytemEC3;
            }
            if (v132)
            {
              v134 = *v132;
              if (!*v132)
                goto LABEL_279;
            }
            else
            {
              v134 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
            {
              v135 = *((_QWORD *)this + 3);
              *(_DWORD *)buf = 136315650;
              v193 = "EC3AudioStream.cpp";
              v194 = 1024;
              v195 = 961;
              v196 = 2048;
              *(_QWORD *)v197 = v135;
              _os_log_impl(&dword_18EE07000, v134, OS_LOG_TYPE_DEBUG, "%25s:%-5d    srate %g", buf, 0x1Cu);
              v132 = (NSObject **)kASSubSytemEC3;
            }
            if (v132)
            {
              v136 = *v132;
              if (!*v132)
                goto LABEL_279;
            }
            else
            {
              v136 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
            {
              v137 = *((_DWORD *)this + 11);
              *(_DWORD *)buf = 136315650;
              v193 = "EC3AudioStream.cpp";
              v194 = 1024;
              v195 = 962;
              v196 = 1024;
              *(_DWORD *)v197 = v137;
              _os_log_impl(&dword_18EE07000, v136, OS_LOG_TYPE_DEBUG, "%25s:%-5d    framesPerPacket %d", buf, 0x18u);
              v132 = (NSObject **)kASSubSytemEC3;
            }
            if (!v132)
            {
              v138 = MEMORY[0x1E0C81028];
LABEL_277:
              if (os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315650;
                v193 = "EC3AudioStream.cpp";
                v194 = 1024;
                v195 = 963;
                v196 = 1024;
                *(_DWORD *)v197 = v92;
                _os_log_impl(&dword_18EE07000, v138, OS_LOG_TYPE_DEBUG, "%25s:%-5d    numberOfBytes    %d", buf, 0x18u);
              }
              goto LABEL_279;
            }
            v138 = *v132;
            if (*v132)
              goto LABEL_277;
LABEL_279:
            if ((signed int)(v90 - v191[1]) < (int)v188)
            {
              if (v91)
              {
                AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v92, v91, v83, *((AudioStreamPacketDescription **)this + 24), 1);
                *(_QWORD *)(*((_QWORD *)this + 1) + 96) += v92;
                *((_QWORD *)this + 23) += v91;
              }
              goto LABEL_291;
            }
          }
          if (*((_BYTE *)this + 438))
          {
            if (kASSubSytemEC3)
            {
              v101 = *(NSObject **)kASSubSytemEC3;
              if (!*(_QWORD *)kASSubSytemEC3)
                goto LABEL_215;
            }
            else
            {
              v101 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              v193 = "EC3AudioStream.cpp";
              v194 = 1024;
              v195 = 882;
              v196 = 1024;
              *(_DWORD *)v197 = v91;
              _os_log_impl(&dword_18EE07000, v101, OS_LOG_TYPE_DEBUG, "%25s:%-5d FORMAT CHANGED  np %d", buf, 0x18u);
            }
LABEL_215:
            if (v91)
            {
              AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v92, v91, v83, *((AudioStreamPacketDescription **)this + 24), 1);
              v83 = 0;
              v115 = *((_QWORD *)this + 1);
              v116 = *(_QWORD *)(v115 + 96) + v92;
              *(_QWORD *)(v115 + 96) = v116;
              v191[1] -= v92;
              *((_QWORD *)this + 23) += v91;
              v117 = *(_QWORD *)(v115 + 88);
              v118 = v117 + *(unsigned int *)(v115 + 80);
              v119 = v116 < v117 || v118 <= v116;
              v120 = v119;
              v121 = v118 - v116;
              if (!v119 && v121)
                v83 = (char *)(*(_QWORD *)(v115 + 72) + (v116 - v117));
              if (v120)
                v90 = 0;
              else
                v90 = v121;
            }
            EC3AudioStream::NotifyFormatChange(this, (const AudioStreamBasicDescription *)this + 11);
            v91 = 0;
            if (*((_BYTE *)this + 438))
              goto LABEL_404;
          }
          if (!*((_QWORD *)this + 15) || !*((_DWORD *)this + 32))
          {
LABEL_404:
            if (!EC3AudioStream::ConstructMagicCookie(this, v189, v190))
            {
              v122 = *((_QWORD *)this + 1);
              *(_DWORD *)buf = 1;
              *(_BYTE *)(v122 + 108) = 1;
              v123 = *(void (**)(_QWORD, _QWORD, uint64_t, uint8_t *))(v122 + 24);
              if (v123)
                v123(*(_QWORD *)(v122 + 40), *(unsigned int *)(v122 + 8), 1835493731, buf);
            }
          }
          if (v94)
          {
            if (!*((_DWORD *)this + 50))
            {
              *((_DWORD *)this + 50) = 1;
              CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems(v187, 1);
            }
            v124 = v189;
            v125 = (AudioStreamPacketDescription *)*v187;
            v125->mStartOffset = 0;
            v125->mVariableFramesInPacket = 0;
            v125->mDataByteSize = v124;
            if (kASSubSytemEC3)
            {
              v126 = *(NSObject **)kASSubSytemEC3;
              if (!*(_QWORD *)kASSubSytemEC3)
                goto LABEL_249;
            }
            else
            {
              v126 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315906;
              v193 = "EC3AudioStream.cpp";
              v194 = 1024;
              v195 = 915;
              v196 = 2048;
              *(_QWORD *)v197 = 0;
              *(_WORD *)&v197[8] = 1024;
              *(_DWORD *)v198 = v124;
              _os_log_impl(&dword_18EE07000, v126, OS_LOG_TYPE_DEBUG, "%25s:%-5d found packet: offset = %lld, size = %d", buf, 0x22u);
              v125 = (AudioStreamPacketDescription *)*v187;
            }
LABEL_249:
            AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v124, 1u, v190, v125, 1);
            ++*((_QWORD *)this + 23);
            LODWORD(v128) = v191[1];
LABEL_254:
            *((_BYTE *)this + 438) = 0;
            *((_QWORD *)this + 53) = 0;
            *((_DWORD *)this + 108) = 0;
            *((_DWORD *)this + 123) = 0;
            v92 = v191[0] + v128;
            v191[1] = v191[0] + v128;
            goto LABEL_255;
          }
          if (v190 != (unsigned __int8 *)v95)
          {
            if (kASSubSytemEC3)
            {
              v174 = *(NSObject **)kASSubSytemEC3;
              if (!*(_QWORD *)kASSubSytemEC3)
                goto LABEL_387;
            }
            else
            {
              v174 = MEMORY[0x1E0C81028];
            }
            if (!os_log_type_enabled(v174, OS_LOG_TYPE_DEBUG))
              goto LABEL_387;
            *(_DWORD *)buf = 136315394;
            v193 = "EC3AudioStream.cpp";
            v194 = 1024;
            v195 = 923;
            v181 = "%25s:%-5d expected a full packet in the stream buffer";
            v182 = v174;
            v183 = 18;
LABEL_386:
            _os_log_impl(&dword_18EE07000, v182, OS_LOG_TYPE_DEBUG, v181, buf, v183);
            goto LABEL_387;
          }
          if (*((_DWORD *)this + 50) < v91 + 1)
          {
            v127 = (1 << -__clz(v91));
            *((_DWORD *)this + 50) = v127;
            CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems(v187, v127);
          }
          v128 = v191[1];
          v129 = v189;
          v130 = (uint64_t)*v187 + 16 * v91;
          *(_QWORD *)v130 = v191[1];
          *(_DWORD *)(v130 + 8) = 0;
          *(_DWORD *)(v130 + 12) = v129;
          if (kASSubSytemEC3)
          {
            v131 = *(NSObject **)kASSubSytemEC3;
            if (!*(_QWORD *)kASSubSytemEC3)
            {
LABEL_253:
              ++v91;
              goto LABEL_254;
            }
          }
          else
          {
            v131 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315906;
            v193 = "EC3AudioStream.cpp";
            v194 = 1024;
            v195 = 931;
            v196 = 2048;
            *(_QWORD *)v197 = v128;
            *(_WORD *)&v197[8] = 1024;
            *(_DWORD *)v198 = v129;
            _os_log_impl(&dword_18EE07000, v131, OS_LOG_TYPE_DEBUG, "%25s:%-5d found packet: offset = %lld, size = %d", buf, 0x22u);
          }
          goto LABEL_253;
        }
      }
LABEL_291:
      if (*((_DWORD *)this + 106))
      {
        v141 = *((_DWORD *)this + 107);
        if (v141)
        {
          v142 = *((_DWORD *)this + 123);
          v143 = v141 - v142;
          if (v141 > v142)
          {
            v144 = MEMORY[0x1E0C81028];
            if ((!kASSubSytemEC3 || (v144 = *(NSObject **)kASSubSytemEC3) != 0)
              && os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315906;
              v193 = "EC3AudioStream.cpp";
              v194 = 1024;
              v195 = 981;
              v196 = 1024;
              *(_DWORD *)v197 = v143;
              *(_WORD *)&v197[4] = 1024;
              *(_DWORD *)&v197[6] = v141;
              _os_log_impl(&dword_18EE07000, v144, OS_LOG_TYPE_DEBUG, "%25s:%-5d reading %d bytes into partial packet data, total size = %d", buf, 0x1Eu);
              v141 = *((_DWORD *)this + 107);
            }
            if (*((_DWORD *)this + 122) < v141)
            {
              CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)this + 60, v141);
              *((_DWORD *)this + 122) = v141;
              v141 = *((_DWORD *)this + 107);
            }
            v145 = *((unsigned int *)this + 123);
            v5 = v141 - v145;
            *((_DWORD *)this + 64) = v141 - v145;
            v6 = (unsigned __int8 *)(*((_QWORD *)this + 60) + v145);
            *((_QWORD *)this + 33) = v6;
            goto LABEL_301;
          }
        }
      }
      v150 = *((_QWORD *)this + 1);
      v151 = *(_QWORD *)(v150 + 88);
      v152 = *(_QWORD *)(v150 + 96);
      v153 = v151 + *(unsigned int *)(v150 + 80);
      v155 = v152 < v151 || v153 <= v152;
      v156 = v153 - v152;
      if (v155)
        v157 = 0;
      else
        v157 = v156;
      if (v155 || !v156)
        goto LABEL_369;
      v158 = *(_QWORD *)(v150 + 72);
      if (!(_DWORD)v157 || v158 == 0)
        goto LABEL_369;
      v160 = (unsigned __int8 *)(v158 + (v152 - v151));
      v161 = *((unsigned __int8 *)this + 333);
      if (!*((_BYTE *)this + 333) && v157 < v188)
      {
        v162 = *v160;
        if ((_DWORD)v157 == 1)
        {
          v161 = v162 == 11 || v162 == 119;
          *((_BYTE *)this + 333) = v161;
          if (v162 != 119 && v162 != 11)
            goto LABEL_342;
        }
        else
        {
          if (v162 == 11)
          {
            if (v160[1] != 119)
              goto LABEL_334;
          }
          else if (v162 != 119 || v160[1] != 11)
          {
LABEL_334:
            *((_BYTE *)this + 333) = 0;
            goto LABEL_342;
          }
          v161 = 1;
          *((_BYTE *)this + 333) = 1;
        }
        *((_DWORD *)this + 84) = v157;
        *((_DWORD *)this + 87) = 0;
        *(_QWORD *)((char *)this + 340) = 0;
        memcpy((char *)this + 340, v160, v157);
        *((_BYTE *)this + 352) = 0;
      }
      if (v161)
        goto LABEL_369;
LABEL_342:
      if (*((_BYTE *)this + 352) || v157 > 0xA)
        goto LABEL_369;
      if ((_DWORD)v157 == 2)
      {
        v167 = *v160;
        v168 = 68;
        if (v167 != 73)
        {
          if (v167 != 84)
          {
            *((_BYTE *)this + 352) = 0;
            goto LABEL_369;
          }
          v168 = 65;
        }
        v42 = v160[1] == v168;
        *((_BYTE *)this + 352) = v42;
        if (v42)
          goto LABEL_368;
      }
      else
      {
        if ((_DWORD)v157 != 1)
        {
          if (*(_WORD *)v160 == 17481 && v160[2] == 51)
          {
            *((_BYTE *)this + 352) = 1;
          }
          else
          {
            v170 = *(unsigned __int16 *)v160 ^ 0x4154 | v160[2] ^ 0x47;
            *((_BYTE *)this + 352) = v170 == 0;
            if (v170)
              goto LABEL_369;
          }
LABEL_368:
          *((_DWORD *)this + 84) = v157;
          *((_WORD *)this + 174) = 0;
          *(_QWORD *)((char *)this + 340) = 0;
          memcpy((char *)this + 340, v160, v157);
          goto LABEL_369;
        }
        v165 = *v160;
        v166 = v165 == 73;
        if (v165 == 84)
          v166 = 1;
        *((_BYTE *)this + 352) = v166;
        if (v165 == 73 || v165 == 84)
          goto LABEL_368;
      }
LABEL_369:
      v175 = MEMORY[0x1E0C81028];
      if ((!kASSubSytemEC3 || (v175 = *(NSObject **)kASSubSytemEC3) != 0)
        && os_log_type_enabled(v175, OS_LOG_TYPE_DEBUG))
      {
        v176 = *((_DWORD *)this + 84);
        v177 = *((unsigned __int8 *)this + 333);
        v178 = *((unsigned __int8 *)this + 352);
        if (v157 <= v176)
          v179 = "";
        else
          v179 = "Warning: discarding few bytes:";
        *(_DWORD *)buf = 136316674;
        if (!(_DWORD)v157)
          v179 = "";
        v193 = "EC3AudioStream.cpp";
        v194 = 1024;
        v195 = 1027;
        v196 = 2080;
        *(_QWORD *)v197 = v179;
        *(_WORD *)&v197[8] = 1024;
        *(_DWORD *)v198 = v157;
        *(_WORD *)&v198[4] = 1024;
        v199 = v176;
        v200 = 1024;
        v201 = v177;
        v202 = 1024;
        v203 = v178;
        _os_log_impl(&dword_18EE07000, v175, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s bytes remaining in buffer %d, mPossiblePartialSyncWordBytes %d, mHasPossiblePartialSyncWord %d, mHasPossiblePartialID3Tag %d", buf, 0x34u);
        v150 = *((_QWORD *)this + 1);
      }
      v180 = *(_QWORD *)(v150 + 88) + *(unsigned int *)(v150 + 80);
      if (*(_QWORD *)(v150 + 96) < v180)
        *(_QWORD *)(v150 + 96) = v180;
    }
  }
LABEL_17:
  result = 0;
LABEL_388:
  v164 = -1;
LABEL_389:
  *((_DWORD *)this + 59) = v164;
  return result;
}

uint64_t EC3AudioStream::HandleDiscontinuity(EC3AudioStream *this)
{
  *((_DWORD *)this + 59) = 0;
  *((_BYTE *)this + 438) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 108) = 0;
  *((_DWORD *)this + 123) = 0;
  *((_BYTE *)this + 333) = 0;
  *((_BYTE *)this + 352) = 0;
  EC3AudioStream::Resync(this);
  return 0;
}

uint64_t EC3AudioStream::GetLoudnessInfo(EC3AudioStream *this, CACFDictionary *a2)
{
  CFMutableDictionaryRef Mutable;
  __int16 v6;

  if (*((_DWORD *)this + 104) < 0xFFFFFFE1)
    return 0xFFFFFFFFLL;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = 257;
  CACFDictionary::AddFloat32(a2, CFSTR("dialnorm"), (float)*((int *)this + 104));
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return 0;
}

void sub_18EF9D834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

uint64_t EC3AudioStream::Resync(EC3AudioStream *this)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  const unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v11;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v22;
  int v23;
  int v24;
  NSObject *v25;
  char v26;
  unsigned int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v40;
  void (*v41)(_QWORD, _QWORD, uint64_t, _BYTE *);
  uint64_t v42;
  OSStatus PropertyInfo;
  _DWORD *v44;
  uint64_t v45;
  NSObject **v46;
  NSObject *v47;
  NSObject *v48;
  unsigned int v49;
  int v50;
  NSObject *v51;
  int v52;
  NSObject *v53;
  uint8_t *v54;
  NSObject *v55;
  int v56;
  NSObject *v57;
  uint8_t *v58;
  NSObject *v59;
  int v60;
  NSObject *v61;
  int v62;
  uint64_t v63;
  void (*v64)(_QWORD, _QWORD, uint64_t, uint8_t *);
  void (*v65)(_QWORD, _QWORD, uint64_t, uint8_t *);
  void (*v66)(_QWORD, _QWORD, uint64_t, uint8_t *);
  void (*v67)(_QWORD, _QWORD, uint64_t, uint8_t *);
  void (*v68)(_QWORD, _QWORD, uint64_t, uint8_t *);
  void (*v69)(_QWORD, _QWORD, uint64_t, uint8_t *);
  AudioStreamPacketDescription *v70;
  NSObject *v71;
  const unsigned __int8 **v73;
  void **v74;
  UInt32 outPropertyDataSize;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  void *outPropertyData;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint8_t v86[16];
  uint8_t v87[4];
  const char *v88;
  __int16 v89;
  int v90;
  __int16 v91;
  uint8_t *v92;
  _BYTE buf[48];
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v73 = (const unsigned __int8 **)((char *)this + 424);
  if (*((_DWORD *)this + 106) && (v2 = *((_DWORD *)this + 107)) != 0)
  {
    v3 = *((_DWORD *)this + 123);
    v4 = v2 - v3;
    if (v2 > v3)
    {
      v5 = 0;
      v6 = *((_QWORD *)this + 1);
      v7 = *(_QWORD *)(v6 + 88);
      v8 = *(_QWORD *)(v6 + 96);
      v9 = v7 + *(unsigned int *)(v6 + 80);
      v11 = v8 < v7 || v9 <= v8;
      v12 = v9 - v8;
      if (v11)
        v13 = 0;
      else
        v13 = v12;
      if (v13 >= v4)
        v14 = v4;
      else
        v14 = v13;
      if (!v11 && v12)
        v5 = (const unsigned __int8 *)(*(_QWORD *)(v6 + 72) + (v8 - v7));
      EC3AudioStream::EC3Packet::AppendPacketData(v73, v5, v14);
      *(_QWORD *)(*((_QWORD *)this + 1) + 96) += v14;
    }
  }
  else
  {
    *((_BYTE *)this + 438) = 0;
    *((_QWORD *)this + 53) = 0;
    *((_DWORD *)this + 108) = 0;
    *((_DWORD *)this + 123) = 0;
  }
  v15 = 0;
  if (*((_BYTE *)this + 332))
    v16 = 10;
  else
    v16 = 12;
  v17 = *((_QWORD *)this + 1);
  v18 = *(_QWORD *)(v17 + 88);
  v19 = *(_QWORD *)(v17 + 96);
  v20 = v18 + *(unsigned int *)(v17 + 80);
  v22 = v19 < v18 || v20 <= v19;
  v23 = v20 - v19;
  if (v22)
    v24 = 0;
  else
    v24 = v23;
  v85 = 0;
  if (!v22 && v23)
    v15 = *(_QWORD *)(v17 + 72) + (v19 - v18);
  if (!kASSubSytemEC3)
  {
    v25 = MEMORY[0x1E0C81028];
LABEL_40:
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "EC3AudioStream.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 207;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = this;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v24;
      *(_WORD *)&buf[34] = 2048;
      *(_QWORD *)&buf[36] = v19;
      _os_log_impl(&dword_18EE07000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d EC3AudioStream(%p):Resync bytesAvailable %d  fpos %qd", buf, 0x2Cu);
    }
    goto LABEL_42;
  }
  v25 = *(NSObject **)kASSubSytemEC3;
  if (*(_QWORD *)kASSubSytemEC3)
    goto LABEL_40;
LABEL_42:
  v26 = 0;
  v74 = (void **)((char *)this + 192);
  do
  {
    v27 = v85;
    if ((int)(v24 - v85) < v16)
      goto LABEL_148;
    v28 = EC3AudioStream::ScanForSyncWord((uint64_t)this, v24, v15, (int *)&v85);
    v27 = v85;
    if (!v28)
      goto LABEL_148;
    v83 = 0;
    v84 = 0;
    v81 = 0;
    v82 = 0;
    outPropertyData = 0;
    v80 = 0;
    v29 = EC3AudioStream::ParseOneCycle(this, v24 - v85, (char *)(v15 + v85), &v84, &v83, (const unsigned __int8 **)&v82);
    if (!v29)
    {
      v31 = v82;
      if (!v82 || (v32 = v83) == 0)
      {
        v26 = 0;
        v85 += v84;
        v30 = 5;
        goto LABEL_143;
      }
      v33 = *((_QWORD *)this + 1);
      if (*(_DWORD *)(v33 + 112))
      {
LABEL_134:
        if (!*((_DWORD *)this + 50))
        {
          *((_DWORD *)this + 50) = 1;
          CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems(v74, 1);
        }
        v70 = (AudioStreamPacketDescription *)*v74;
        v70->mStartOffset = 0;
        v70->mVariableFramesInPacket = 0;
        v70->mDataByteSize = v32;
        if (kASSubSytemEC3)
        {
          v71 = *(NSObject **)kASSubSytemEC3;
          if (!*(_QWORD *)kASSubSytemEC3)
          {
LABEL_142:
            AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v32, 1u, v31, v70, 1);
            ++*((_QWORD *)this + 23);
            *((_BYTE *)this + 438) = 0;
            *((_QWORD *)this + 53) = 0;
            *((_DWORD *)this + 108) = 0;
            *((_DWORD *)this + 123) = 0;
            v85 += v84;
            v30 = 5;
            v26 = 1;
            goto LABEL_143;
          }
        }
        else
        {
          v71 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "EC3AudioStream.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 311;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = 0;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v32;
          _os_log_impl(&dword_18EE07000, v71, OS_LOG_TYPE_DEBUG, "%25s:%-5d found packet: offset = %lld, size = %d", buf, 0x22u);
          v70 = (AudioStreamPacketDescription *)*v74;
        }
        goto LABEL_142;
      }
      v34 = *(_OWORD *)((char *)this + 456);
      v76 = *(_OWORD *)((char *)this + 440);
      v77 = v34;
      v78 = *((_QWORD *)this + 59);
      *((_DWORD *)this + 29) = *((_DWORD *)this + 108);
      v35 = v84;
      v36 = v85;
      *((_QWORD *)this + 13) = *(_QWORD *)(v33 + 96) - v32 + v85 + (unint64_t)v84;
      (*(void (**)(EC3AudioStream *, __int128 *))(*(_QWORD *)this + 56))(this, &v76);
      v37 = 1700998451;
      if (*((_DWORD *)this + 8) == 1700998451)
      {
        v38 = 0;
      }
      else
      {
        v38 = *(_DWORD *)v73 < 2u;
        if (*(_DWORD *)v73 >= 2u)
          v37 = 1700998451;
        else
          v37 = 1633889587;
      }
      *((_BYTE *)this + 332) = v38;
      *((_DWORD *)this + 4) = v37;
      if ((!*((_QWORD *)this + 15) || !*((_DWORD *)this + 32))
        && !EC3AudioStream::ConstructMagicCookie(this, v32, v31))
      {
        v40 = *((_QWORD *)this + 1);
        *(_DWORD *)buf = 1;
        *(_BYTE *)(v40 + 108) = 1;
        v41 = *(void (**)(_QWORD, _QWORD, uint64_t, _BYTE *))(v40 + 24);
        if (v41)
          v41(*(_QWORD *)(v40 + 40), *(unsigned int *)(v40 + 8), 1835493731, buf);
      }
      outPropertyDataSize = 0;
      v94 = 0;
      *(_OWORD *)buf = v76;
      *(_OWORD *)&buf[16] = v77;
      LODWORD(v94) = *((_DWORD *)this + 32);
      v42 = *((_QWORD *)this + 15);
      *(_QWORD *)&buf[32] = v78;
      *(_QWORD *)&buf[40] = v42;
      PropertyInfo = AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, buf, &outPropertyDataSize);
      if (PropertyInfo || outPropertyDataSize < 0x30)
      {
        if (kASSubSytemEC3)
        {
          v48 = *(NSObject **)kASSubSytemEC3;
          if (!*(_QWORD *)kASSubSytemEC3)
          {
LABEL_78:
            v26 = 0;
            *((_BYTE *)this + 438) = 0;
            *((_QWORD *)this + 53) = 0;
            *((_DWORD *)this + 108) = 0;
            *((_DWORD *)this + 123) = 0;
            v49 = v35 + v36;
            v30 = 5;
            v85 = v49;
            goto LABEL_143;
          }
        }
        else
        {
          v48 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v86, PropertyInfo);
          *(_DWORD *)v87 = 136315650;
          v88 = "EC3AudioStream.cpp";
          v89 = 1024;
          v90 = 280;
          v91 = 2080;
          v92 = v86;
          _os_log_impl(&dword_18EE07000, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d ERROR: could not get format list items for the stream, err = %s", v87, 0x1Cu);
        }
        goto LABEL_78;
      }
      std::vector<AudioFormatListItem>::resize((char **)&outPropertyData, outPropertyDataSize / 0x30uLL);
      v44 = outPropertyData;
      outPropertyDataSize = (v80 - (_DWORD)outPropertyData) & 0xFFFFFFF0;
      if (!AudioFormatGetProperty(0x666C7374u, 0x38u, buf, &outPropertyDataSize, outPropertyData))
      {
        v45 = outPropertyDataSize;
        *((_DWORD *)this + 100) = v44[12 * (outPropertyDataSize / 0x30) - 2];
        (*(void (**)(EC3AudioStream *, uint64_t, _DWORD *))(*(_QWORD *)this + 64))(this, v45, v44);
      }
      v46 = (NSObject **)kASSubSytemEC3;
      if (kASSubSytemEC3)
      {
        v47 = *(NSObject **)kASSubSytemEC3;
        if (!*(_QWORD *)kASSubSytemEC3)
          goto LABEL_118;
      }
      else
      {
        v47 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        v50 = *((unsigned __int8 *)this + 332);
        *(_DWORD *)v87 = 136315650;
        v88 = "EC3AudioStream.cpp";
        v89 = 1024;
        v90 = 287;
        v91 = 1024;
        LODWORD(v92) = v50;
        _os_log_impl(&dword_18EE07000, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d isAC3Stream %d", v87, 0x18u);
        v46 = (NSObject **)kASSubSytemEC3;
      }
      if (v46)
      {
        v51 = *v46;
        if (!*v46)
          goto LABEL_118;
      }
      else
      {
        v51 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        v52 = *((_DWORD *)this + 29);
        *(_DWORD *)v87 = 136315650;
        v88 = "EC3AudioStream.cpp";
        v89 = 1024;
        v90 = 288;
        v91 = 1024;
        LODWORD(v92) = v52;
        _os_log_impl(&dword_18EE07000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d packetSizeUpperBound %d", v87, 0x18u);
        v46 = (NSObject **)kASSubSytemEC3;
      }
      if (v46)
      {
        v53 = *v46;
        if (!*v46)
          goto LABEL_118;
      }
      else
      {
        v53 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        v54 = (uint8_t *)*((_QWORD *)this + 13);
        *(_DWORD *)v87 = 136315650;
        v88 = "EC3AudioStream.cpp";
        v89 = 1024;
        v90 = 289;
        v91 = 2048;
        v92 = v54;
        _os_log_impl(&dword_18EE07000, v53, OS_LOG_TYPE_DEBUG, "%25s:%-5d dataOffset %qd", v87, 0x1Cu);
        v46 = (NSObject **)kASSubSytemEC3;
      }
      if (v46)
      {
        v55 = *v46;
        if (!*v46)
          goto LABEL_118;
      }
      else
      {
        v55 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
      {
        v56 = *((_DWORD *)this + 100);
        *(_DWORD *)v87 = 136315650;
        v88 = "EC3AudioStream.cpp";
        v89 = 1024;
        v90 = 291;
        v91 = 1024;
        LODWORD(v92) = v56;
        _os_log_impl(&dword_18EE07000, v55, OS_LOG_TYPE_DEBUG, "%25s:%-5d layoutTag 0x%x", v87, 0x18u);
        v46 = (NSObject **)kASSubSytemEC3;
      }
      if (v46)
      {
        v57 = *v46;
        if (!*v46)
          goto LABEL_118;
      }
      else
      {
        v57 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      {
        v58 = (uint8_t *)*((_QWORD *)this + 3);
        *(_DWORD *)v87 = 136315650;
        v88 = "EC3AudioStream.cpp";
        v89 = 1024;
        v90 = 292;
        v91 = 2048;
        v92 = v58;
        _os_log_impl(&dword_18EE07000, v57, OS_LOG_TYPE_DEBUG, "%25s:%-5d sampleRate %g", v87, 0x1Cu);
        v46 = (NSObject **)kASSubSytemEC3;
      }
      if (v46)
      {
        v59 = *v46;
        if (!*v46)
          goto LABEL_118;
      }
      else
      {
        v59 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        v60 = *((_DWORD *)this + 11);
        *(_DWORD *)v87 = 136315650;
        v88 = "EC3AudioStream.cpp";
        v89 = 1024;
        v90 = 293;
        v91 = 1024;
        LODWORD(v92) = v60;
        _os_log_impl(&dword_18EE07000, v59, OS_LOG_TYPE_DEBUG, "%25s:%-5d framesPerPacket %d", v87, 0x18u);
        v46 = (NSObject **)kASSubSytemEC3;
      }
      if (v46)
      {
        v61 = *v46;
        if (!*v46)
        {
LABEL_118:
          v63 = *((_QWORD *)this + 1);
          *(_DWORD *)v87 = 1;
          if (!*(_BYTE *)(v63 + 104))
          {
            *(_BYTE *)(v63 + 104) = 1;
            v64 = *(void (**)(_QWORD, _QWORD, uint64_t, uint8_t *))(v63 + 24);
            if (v64)
            {
              v64(*(_QWORD *)(v63 + 40), *(unsigned int *)(v63 + 8), 1717988724, v87);
              v63 = *((_QWORD *)this + 1);
            }
          }
          *(_DWORD *)v87 = 1;
          if (!*(_BYTE *)(v63 + 105))
          {
            *(_BYTE *)(v63 + 105) = 1;
            v65 = *(void (**)(_QWORD, _QWORD, uint64_t, uint8_t *))(v63 + 24);
            if (v65)
            {
              v65(*(_QWORD *)(v63 + 40), *(unsigned int *)(v63 + 8), 1684434292, v87);
              v63 = *((_QWORD *)this + 1);
            }
          }
          *(_DWORD *)v87 = 1;
          *(_BYTE *)(v63 + 108) = 1;
          v66 = *(void (**)(_QWORD, _QWORD, uint64_t, uint8_t *))(v63 + 24);
          if (v66)
          {
            v66(*(_QWORD *)(v63 + 40), *(unsigned int *)(v63 + 8), 1718383476, v87);
            v63 = *((_QWORD *)this + 1);
          }
          *(_DWORD *)v87 = 1;
          if (!*(_BYTE *)(v63 + 109))
          {
            *(_BYTE *)(v63 + 109) = 1;
            v67 = *(void (**)(_QWORD, _QWORD, uint64_t, uint8_t *))(v63 + 24);
            if (v67)
            {
              v67(*(_QWORD *)(v63 + 40), *(unsigned int *)(v63 + 8), 1668112752, v87);
              v63 = *((_QWORD *)this + 1);
            }
          }
          *(_DWORD *)v87 = 1;
          v68 = *(void (**)(_QWORD, _QWORD, uint64_t, uint8_t *))(v63 + 24);
          if (v68)
          {
            v68(*(_QWORD *)(v63 + 40), *(unsigned int *)(v63 + 8), 1685022310, v87);
            v63 = *((_QWORD *)this + 1);
          }
          *(_DWORD *)v87 = 1;
          if (!*(_DWORD *)(v63 + 112))
          {
            *(_DWORD *)(v63 + 112) = 1;
            v69 = *(void (**)(_QWORD, _QWORD, uint64_t, uint8_t *))(v63 + 24);
            if (v69)
              v69(*(_QWORD *)(v63 + 40), *(unsigned int *)(v63 + 8), 1919247481, v87);
          }
          goto LABEL_134;
        }
      }
      else
      {
        v61 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        v62 = *((_DWORD *)this + 13);
        *(_DWORD *)v87 = 136315650;
        v88 = "EC3AudioStream.cpp";
        v89 = 1024;
        v90 = 294;
        v91 = 1024;
        LODWORD(v92) = v62;
        _os_log_impl(&dword_18EE07000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d channelsPerFrame %d", v87, 0x18u);
      }
      goto LABEL_118;
    }
    if (v29 == 1717662832)
    {
      v30 = 1;
      *((_BYTE *)this + 177) = 1;
      *((_DWORD *)this + 59) = -1;
    }
    else
    {
      v39 = v84;
      if (v84 <= 1)
        v39 = 1;
      v85 += v39;
      v30 = 4;
    }
LABEL_143:
    if (outPropertyData)
      operator delete(outPropertyData);
  }
  while (v30 == 4);
  if (v30 == 5)
  {
    v27 = v85;
LABEL_148:
    *(_QWORD *)(*((_QWORD *)this + 1) + 96) += v27;
    return v26 & 1;
  }
  v26 = 1;
  return v26 & 1;
}

void sub_18EF9E3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const unsigned __int8 **EC3AudioStream::EC3Packet::AppendPacketData(const unsigned __int8 **this, const unsigned __int8 *__src, size_t __n)
{
  unsigned int v3;
  const unsigned __int8 **v5;
  const unsigned __int8 *v6;
  const unsigned __int8 *v7;
  int v8;
  int v9;

  if (__src)
  {
    v3 = __n;
    if ((_DWORD)__n)
    {
      v5 = this;
      v7 = this[7];
      this += 7;
      v6 = v7;
      if (v7 != __src)
      {
        v8 = *((_DWORD *)v5 + 17);
        v9 = v8 + __n;
        if (*((_DWORD *)v5 + 16) < (v8 + __n))
        {
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)this, (v8 + __n));
          *((_DWORD *)v5 + 16) = v9;
          v6 = v5[7];
          v8 = *((_DWORD *)v5 + 17);
        }
        this = (const unsigned __int8 **)memcpy((void *)&v6[v8], __src, v3);
        *((_DWORD *)v5 + 17) += v3;
      }
    }
  }
  return this;
}

BOOL EC3AudioStream::ScanForSyncWord(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  BOOL v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  void (*v26)(_QWORD, _QWORD, uint64_t, uint8_t *);
  NSObject *v27;
  _BOOL8 result;
  NSObject *v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (kASSubSytemEC3)
  {
    v8 = *(NSObject **)kASSubSytemEC3;
    if (!*(_QWORD *)kASSubSytemEC3)
      goto LABEL_7;
  }
  else
  {
    v8 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a4;
    *(_DWORD *)buf = 136315906;
    v31 = "EC3AudioStream.cpp";
    v32 = 1024;
    v33 = 1088;
    v34 = 1024;
    v35 = a2;
    v36 = 1024;
    v37 = v9;
    _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d ->ScanForSyncWord %d %d", buf, 0x1Eu);
  }
LABEL_7:
  if (*(_BYTE *)(a1 + 332))
    v10 = -10;
  else
    v10 = -12;
  v11 = *a4;
  v12 = v10 + a2;
  if (*a4 > v10 + a2)
  {
    v13 = *a4;
LABEL_41:
    *a4 = v13;
    if (kASSubSytemEC3)
    {
      v27 = *(NSObject **)kASSubSytemEC3;
      if (!*(_QWORD *)kASSubSytemEC3)
        return 0;
    }
    else
    {
      v27 = MEMORY[0x1E0C81028];
    }
    result = os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    *(_DWORD *)buf = 136315906;
    v31 = "EC3AudioStream.cpp";
    v32 = 1024;
    v33 = 1126;
    v34 = 1024;
    v35 = a2;
    v36 = 1024;
    v37 = v13;
    _os_log_impl(&dword_18EE07000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d <-ScanForSyncWord DID NOT find sync word, buf size = %d, index = %d", buf, 0x1Eu);
    return 0;
  }
  while (1)
  {
    v14 = (unsigned __int8 *)(a3 + v11);
    v15 = *v14;
    if (v15 != 11)
      break;
    if (v14[1] == 119)
      goto LABEL_28;
LABEL_15:
    v16 = *(_WORD *)v14 == 17481 && v14[2] == 51;
    if (!v16 && (*(_WORD *)v14 != 16724 || v14[2] != 71))
      goto LABEL_40;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v18 = *(_QWORD *)(a1 + 8);
    v19 = (_DWORD)v14 - *(_QWORD *)(v18 + 72);
    *(_DWORD *)(a1 + 364) = v19;
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(v18 + 88) + v19;
    if (*(char *)(a1 + 376) < 0)
    {
      v20 = *(_QWORD *)(v18 + 48);
      v21 = *(_QWORD *)(v18 + 56) - v20;
      if (v21)
      {
        v22 = 0;
        v23 = v21 >> 2;
        v24 = 1;
        do
        {
          v16 = *(_DWORD *)(v20 + 4 * v22) == 1768174437;
          LODWORD(v21) = v16;
          v22 = v24++;
          v25 = !v16 && v23 > v22;
        }
        while (v25);
      }
      *(_BYTE *)(a1 + 376) = v21;
      if (!(_DWORD)v21)
        goto LABEL_40;
LABEL_37:
      *(_DWORD *)buf = 0;
      v26 = *(void (**)(_QWORD, _QWORD, uint64_t, uint8_t *))(v18 + 24);
      if (v26)
        v26(*(_QWORD *)(v18 + 40), *(unsigned int *)(v18 + 8), 1768174437, buf);
      v11 = v11 + ID3Size(a2 - v11, (const unsigned __int8 *)(a3 + v11), (int *)buf) - 1;
      goto LABEL_40;
    }
    if (*(_BYTE *)(a1 + 376))
      goto LABEL_37;
LABEL_40:
    v13 = v11 + 1;
    v25 = v11++ < v12;
    if (!v25)
      goto LABEL_41;
  }
  if (v15 != 119 || v14[1] != 11)
    goto LABEL_15;
LABEL_28:
  if (ParseAC3Header((unsigned __int8 *)(a3 + v11), a2 - v11, 0, 0, 0, 0, 0, 0))
    goto LABEL_40;
  *a4 = v11;
  if (kASSubSytemEC3)
  {
    v29 = *(NSObject **)kASSubSytemEC3;
    if (!*(_QWORD *)kASSubSytemEC3)
      return 1;
  }
  else
  {
    v29 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v31 = "EC3AudioStream.cpp";
    v32 = 1024;
    v33 = 1105;
    v34 = 1024;
    v35 = a2;
    v36 = 1024;
    v37 = v11;
    _os_log_impl(&dword_18EE07000, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d <-ScanForSyncWord found sync word, buf size = %d, index = %d", buf, 0x1Eu);
  }
  return 1;
}

uint64_t EC3AudioStream::ParseOneCycle(EC3AudioStream *this, unsigned int a2, char *a3, unsigned int *a4, unsigned int *a5, const unsigned __int8 **a6)
{
  size_t v8;
  signed int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _BYTE *v15;
  int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  int v22;
  int *v23;
  int v24;
  unint64_t v25;
  int64_t v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  char v31;
  int v32;
  __int128 v34;
  int v35;
  NSObject *v36;
  const unsigned __int8 **v37;
  unsigned int *v38;
  _BOOL4 v39;
  BOOL v41;
  unsigned int v42;
  int v43;
  signed int v44;
  const char *v45;
  NSObject *v46;
  const char *v47;
  int v48;
  signed int v49;
  size_t v50;
  NSObject *v51;
  unsigned int v52;
  int v53;
  NSObject *v54;
  unsigned int v55;
  int v56;
  uint64_t v58;
  unint64_t v59;
  signed int *v60;
  signed int v61;
  const unsigned __int8 **v62;
  uint64_t v63;
  unsigned int *v64;
  const unsigned __int8 **v65;
  char *v66;
  BOOL v67;
  unsigned int v68;
  BOOL v69[16];
  __int128 v70;
  uint64_t v71;
  _BYTE v72[5];
  _DWORD v73[4];
  unsigned int v74;
  const char *v75;
  __int16 v76;
  int v77;
  __int16 v78;
  _BYTE v79[10];
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v30 = *((_BYTE *)this + 332) == 0;
  *a4 = 0;
  if (v30)
    v8 = 12;
  else
    v8 = 10;
  *a5 = 0;
  *a6 = 0;
  v66 = a3;
  if (!a3 || v8 > a2)
  {
    if (kASSubSytemEC3)
    {
      v19 = *(NSObject **)kASSubSytemEC3;
      if (!*(_QWORD *)kASSubSytemEC3)
        return 0xFFFFFFFFLL;
    }
    else
    {
      v19 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      v74 = 136316162;
      v75 = "EC3AudioStream.cpp";
      v76 = 1024;
      v77 = 418;
      v78 = 2048;
      *(_QWORD *)v79 = this;
      *(_WORD *)&v79[8] = 2048;
      *(_QWORD *)&v80 = v66;
      WORD4(v80) = 1024;
      *(_DWORD *)((char *)&v80 + 10) = a2;
      _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d EC3AudioStream(%p): invalid inputs, inBuf = %p, inBufSize = %d", (uint8_t *)&v74, 0x2Cu);
    }
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)&v72[1] = 0;
  MEMORY[0x1E0C80A78](this);
  v14 = (char *)&v58 - v13;
  v15 = (_BYTE *)*((_QWORD *)this + 51);
  v16 = *v15;
  v17 = *v15 == 0;
  if (*((_DWORD *)this + 106))
    v18 = *((_DWORD *)this + 107) != 0;
  else
    v18 = 0;
  v60 = v11;
  v63 = v12;
  if (!kASSubSytemEC3)
  {
    v21 = MEMORY[0x1E0C81028];
LABEL_20:
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      v74 = 136316162;
      v75 = "EC3AudioStream.cpp";
      v76 = 1024;
      v77 = 434;
      v78 = 1024;
      *(_DWORD *)v79 = a2;
      *(_WORD *)&v79[4] = 1024;
      *(_DWORD *)&v79[6] = v17;
      LOWORD(v80) = 1024;
      *(_DWORD *)((char *)&v80 + 2) = v18;
      _os_log_impl(&dword_18EE07000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d -> inBufSize = %d, isFirstCycle = %d, hadPartialPacket = %d", (uint8_t *)&v74, 0x24u);
    }
    goto LABEL_22;
  }
  v21 = *(NSObject **)kASSubSytemEC3;
  if (*(_QWORD *)kASSubSytemEC3)
    goto LABEL_20;
LABEL_22:
  v64 = a5;
  v65 = (const unsigned __int8 **)((char *)this + 424);
  v62 = a6;
  if (v18)
  {
    v22 = *((_DWORD *)this + 106);
  }
  else
  {
    v22 = 0;
    *((_BYTE *)this + 438) = 0;
    *((_QWORD *)this + 53) = 0;
    *((_DWORD *)this + 108) = 0;
    *((_DWORD *)this + 123) = 0;
  }
  memcpy(v14, v66, v8);
  v24 = 0;
  v25 = 0;
  v71 = 0;
  v61 = a2;
  v59 = a2;
  v26 = a2 - v8;
  v27 = (double *)((char *)this + 440);
  *(_OWORD *)v69 = 0u;
  v70 = 0u;
  while (1)
  {
    v73[0] = 0;
    v72[0] = 0;
    v68 = 0;
    EC3StreamParser::AssessPacketHeader((EC3StreamParser *)v14, (const void *)v8, (unsigned int *)&v72[1], (unsigned int *)v72, v69, (AudioStreamBasicDescription *)v73, &v68, v23);
    v20 = v28;
    if (!v16 && !(_DWORD)v28)
    {
      if (v24 == *((_DWORD *)this + 101))
        *((_DWORD *)this + 104) = v68;
      v20 = EC3StreamParser::AssessPacket(*((char ***)this + 51), (unsigned __int8 *)v14, v8, v22, &v74, &v67);
    }
    v29 = *(unsigned int *)&v72[1];
    v30 = (_DWORD)v20 != -2 || *(unsigned int *)&v72[1] == 0;
    v31 = !v30;
    if ((_DWORD)v20 && (v31 & 1) == 0)
    {
      if (kASSubSytemEC3)
      {
        v36 = *(NSObject **)kASSubSytemEC3;
        v38 = v64;
        v37 = v65;
        if (!*(_QWORD *)kASSubSytemEC3)
          goto LABEL_111;
      }
      else
      {
        v36 = MEMORY[0x1E0C81028];
        v38 = v64;
        v37 = v65;
      }
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        goto LABEL_111;
      v74 = 136315906;
      v75 = "EC3AudioStream.cpp";
      v76 = 1024;
      v77 = 467;
      v78 = 2048;
      *(_QWORD *)v79 = this;
      *(_WORD *)&v79[8] = 1024;
      LODWORD(v80) = v20;
      v45 = "%25s:%-5d EC3AudioStream(%p): AssessPacketHeader or AssessPacket failed, err = %d";
LABEL_110:
      _os_log_impl(&dword_18EE07000, v36, OS_LOG_TYPE_DEBUG, v45, (uint8_t *)&v74, 0x22u);
      goto LABEL_111;
    }
    v32 = v22 | v72[0];
    if (!v32)
    {
      v20 = 0xFFFFFFFFLL;
LABEL_68:
      v39 = v32 != 0;
      goto LABEL_80;
    }
    if (v22 && v72[0])
    {
      v20 = 0;
      goto LABEL_68;
    }
    if (!*((_BYTE *)this + 332) && !v72[0] && v73[0] == 1)
      ++v24;
    if (!*(_DWORD *)&v72[1])
    {
      v20 = 0xFFFFFFFFLL;
      goto LABEL_71;
    }
    if (*((_BYTE *)this + 436))
    {
      if (*(double *)v69 == *v27 && DWORD1(v70) == *((_DWORD *)this + 115))
        goto LABEL_57;
      if (!*((_BYTE *)this + 437) || *(_DWORD *)v65)
      {
        v20 = 560226676;
LABEL_71:
        v38 = v64;
        v37 = v65;
        if (kASSubSytemEC3)
        {
          v36 = *(NSObject **)kASSubSytemEC3;
          if (!*(_QWORD *)kASSubSytemEC3)
            goto LABEL_111;
        }
        else
        {
          v36 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
          goto LABEL_111;
        v74 = 136315906;
        v75 = "EC3AudioStream.cpp";
        v76 = 1024;
        v77 = 493;
        v78 = 2048;
        *(_QWORD *)v79 = this;
        *(_WORD *)&v79[8] = 1024;
        LODWORD(v80) = v20;
        v45 = "%25s:%-5d EC3AudioStream(%p): AddSubPacketInfo failed, err = %d";
        goto LABEL_110;
      }
      *((_BYTE *)this + 438) = 1;
    }
    else
    {
      *((_BYTE *)this + 436) = 1;
    }
    v34 = v70;
    *(_OWORD *)v27 = *(_OWORD *)v69;
    *(_OWORD *)((char *)this + 456) = v34;
    *((_QWORD *)this + 59) = v71;
LABEL_57:
    v25 += v29;
    ++*((_DWORD *)this + 106);
    *((_DWORD *)this + 107) += v29;
    v35 = *((_DWORD *)this + 112) == 1700998451 ? 4096 : 3840;
    *((_DWORD *)this + 108) += v35;
    if ((uint64_t)v25 > v26)
      break;
    if (++v22 >= 0x48)
    {
      v38 = v64;
      v37 = v65;
      if (v25 <= v59)
      {
        v20 = 0;
        v39 = 1;
        goto LABEL_81;
      }
      v20 = 1717662832;
      if (kASSubSytemEC3)
      {
        v36 = *(NSObject **)kASSubSytemEC3;
        if (!*(_QWORD *)kASSubSytemEC3)
          goto LABEL_111;
      }
      else
      {
        v36 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        v74 = 136315906;
        v75 = "EC3AudioStream.cpp";
        v76 = 1024;
        v77 = 509;
        v78 = 2048;
        *(_QWORD *)v79 = this;
        *(_WORD *)&v79[8] = 1024;
        LODWORD(v80) = 1717662832;
        v45 = "%25s:%-5d EC3AudioStream(%p): entire packet data must be within given buffer boundary, err = %d";
        goto LABEL_110;
      }
LABEL_111:
      v41 = (_DWORD)v20 == 0;
LABEL_112:
      if (*(_DWORD *)v37)
      {
        v48 = *((_DWORD *)this + 107);
        if (v48)
        {
          v49 = v48 - *((_DWORD *)this + 123);
          if (v49 >= v61)
            v50 = v61;
          else
            v50 = v49;
          if ((v50 & 0x80000000) != 0)
          {
            v20 = 1717662832;
            if (kASSubSytemEC3)
            {
              v46 = *(NSObject **)kASSubSytemEC3;
              if (!*(_QWORD *)kASSubSytemEC3)
                return v20;
            }
            else
            {
              v46 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
            {
              v74 = 136316162;
              v75 = "EC3AudioStream.cpp";
              v76 = 1024;
              v77 = 558;
              v78 = 2048;
              *(_QWORD *)v79 = this;
              *(_WORD *)&v79[8] = 1024;
              LODWORD(v80) = v50;
              WORD2(v80) = 1024;
              *(_DWORD *)((char *)&v80 + 6) = 1717662832;
              v47 = "%25s:%-5d EC3AudioStream(%p): trying to cache partial packet data, but mEC3Packet actual packet size"
                    " or cached packet size is incorrect, bytesToCopy = %d, err = %d";
LABEL_134:
              _os_log_impl(&dword_18EE07000, v46, OS_LOG_TYPE_DEBUG, v47, (uint8_t *)&v74, 0x28u);
            }
            goto LABEL_135;
          }
          if ((_DWORD)v50)
          {
            EC3AudioStream::EC3Packet::AppendPacketData(v37, (const unsigned __int8 *)v66, v50);
            *v60 = v50;
          }
        }
      }
      *v62 = 0;
      *v38 = 0;
      if (!v41)
        goto LABEL_135;
LABEL_121:
      if (!kASSubSytemEC3)
        return 0;
      if ((*(_BYTE *)(kASSubSytemEC3 + 8) & 1) != 0)
      {
        v51 = *(NSObject **)kASSubSytemEC3;
        if (*(_QWORD *)kASSubSytemEC3)
        {
          if (os_log_type_enabled(*(os_log_t *)kASSubSytemEC3, OS_LOG_TYPE_DEBUG))
          {
            v52 = *v38;
            v53 = *v60;
            v74 = 136315906;
            v75 = "EC3AudioStream.cpp";
            v76 = 1024;
            v77 = 578;
            v78 = 1024;
            *(_DWORD *)v79 = v52;
            *(_WORD *)&v79[4] = 1024;
            *(_DWORD *)&v79[6] = v53;
            _os_log_impl(&dword_18EE07000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d <- outPacketSize = %d, outBufBytesConsumed = %d", (uint8_t *)&v74, 0x1Eu);
          }
        }
      }
      return 0;
    }
    memcpy(v14, &v66[v25], v8);
  }
  v20 = 0;
  v39 = (v22 - 71) < 0xFFFFFFB8 && v25 <= v59;
LABEL_80:
  v38 = v64;
  v37 = v65;
LABEL_81:
  v41 = (_DWORD)v20 == 0;
  if ((_DWORD)v20 || !v39)
    goto LABEL_112;
  v42 = *((_DWORD *)this + 123);
  if (!v42)
  {
    *v62 = (const unsigned __int8 *)v66;
    *v38 = v25;
    *v60 = v25;
    goto LABEL_121;
  }
  v43 = *((_DWORD *)this + 107);
  v44 = v43 - v42;
  if ((int)(v43 - v42) >= 0 && v44 <= v61)
  {
    if (v43 != v42)
    {
      EC3AudioStream::EC3Packet::AppendPacketData(v37, (const unsigned __int8 *)v66, v43 - v42);
      *v60 = v44;
      v42 = *((_DWORD *)this + 123);
    }
    *v62 = (const unsigned __int8 *)*((_QWORD *)this + 60);
    *v38 = v42;
    goto LABEL_121;
  }
  v20 = 1717662832;
  if (kASSubSytemEC3)
  {
    v46 = *(NSObject **)kASSubSytemEC3;
    if (!*(_QWORD *)kASSubSytemEC3)
      return v20;
  }
  else
  {
    v46 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
  {
    v74 = 136316162;
    v75 = "EC3AudioStream.cpp";
    v76 = 1024;
    v77 = 533;
    v78 = 2048;
    *(_QWORD *)v79 = this;
    *(_WORD *)&v79[8] = 1024;
    LODWORD(v80) = v44;
    WORD2(v80) = 1024;
    *(_DWORD *)((char *)&v80 + 6) = 1717662832;
    v47 = "%25s:%-5d EC3AudioStream(%p): trying to complete partial packet data, but mEC3Packet actual packet size or cac"
          "hed packet size is incorrect, bytesToCopy = %d, err = %d";
    goto LABEL_134;
  }
LABEL_135:
  if (kASSubSytemEC3)
  {
    v54 = *(NSObject **)kASSubSytemEC3;
    if (!*(_QWORD *)kASSubSytemEC3)
      return v20;
  }
  else
  {
    v54 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
  {
    v55 = *v38;
    v56 = *v60;
    CAX4CCString::CAX4CCString((CAX4CCString *)v73, v20);
    v74 = 136316418;
    v75 = "EC3AudioStream.cpp";
    v76 = 1024;
    v77 = 575;
    v78 = 1024;
    *(_DWORD *)v79 = v61;
    *(_WORD *)&v79[4] = 1024;
    *(_DWORD *)&v79[6] = v55;
    LOWORD(v80) = 1024;
    *(_DWORD *)((char *)&v80 + 2) = v56;
    WORD3(v80) = 2080;
    *((_QWORD *)&v80 + 1) = v73;
    _os_log_impl(&dword_18EE07000, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d ERROR: inBufSize = %d, outPacketSize = %d, outBufBytesConsumed = %d, err = %s", (uint8_t *)&v74, 0x2Eu);
  }
  return v20;
}

uint64_t EC3AudioStream::ConstructMagicCookie(EC3AudioStream *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  int v7;
  unsigned int v8;
  BOOL v9;
  size_t v10;
  unsigned __int8 **v11;
  unsigned int v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = 0xFFFFFFFFLL;
  if (!a2 || !a3)
    return v3;
  v7 = *((_DWORD *)this + 8);
  v19 = 45;
  v20 = 11;
  if (v7 == 1633889587)
    v8 = 11;
  else
    v8 = 0;
  if (*((_BYTE *)this + 332))
    v9 = v7 == 1700998451;
  else
    v9 = 1;
  if (v9)
    v10 = v8 + 45;
  else
    v10 = v8;
  v11 = (unsigned __int8 **)((char *)this + 120);
  CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)this + 15, v10);
  *((_DWORD *)this + 32) = v10;
  if (v7 == 1633889587)
  {
    v3 = ConvertAC3HeaderToAC3MP4Cookie(a3, a2, *v11, &v20);
    v12 = v20;
    v13 = v20;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v3 = 0;
  }
  if (v7 == 1700998451 || !*((_BYTE *)this + 332))
  {
    v3 = ConvertEAC3HeaderToEAC3MP4Cookie(a3, a2, &(*v11)[v13], &v19);
    if ((_DWORD)v3)
      goto LABEL_18;
LABEL_24:
    v15 = v19 + v12;
    *((_DWORD *)this + 32) = v19 + v12;
    if (kASSubSytemEC3)
    {
      v16 = *(NSObject **)kASSubSytemEC3;
      if (!*(_QWORD *)kASSubSytemEC3)
        return v3;
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      CAFormatter::CAFormatter((CAFormatter *)&v18, *v11, v15);
      *(_DWORD *)buf = 136315906;
      v22 = "EC3AudioStream.cpp";
      v23 = 1024;
      v24 = 630;
      v25 = 1024;
      v26 = v15;
      v27 = 2080;
      v28 = v18;
      _os_log_impl(&dword_18EE07000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d magic cookie, size = %d { %s }", buf, 0x22u);
      if (v18)
        free(v18);
    }
    return v3;
  }
  v19 = 0;
  if (!(_DWORD)v3)
    goto LABEL_24;
LABEL_18:
  if (*v11)
  {
    free(*v11);
    *v11 = 0;
  }
  *((_DWORD *)this + 32) = 0;
  if (kASSubSytemEC3)
  {
    v14 = *(NSObject **)kASSubSytemEC3;
    if (!*(_QWORD *)kASSubSytemEC3)
      return v3;
  }
  else
  {
    v14 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    v22 = "EC3AudioStream.cpp";
    v23 = 1024;
    v24 = 624;
    v25 = 1024;
    v26 = v3;
    _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d got a bad magic cookie, err = %d!", buf, 0x18u);
  }
  return v3;
}

void *CADeprecated::CAAutoFree<unsigned char>::reallocBytes(void **a1, size_t a2)
{
  void *result;
  std::bad_alloc *exception;
  std::bad_alloc *v6;

  result = reallocf(*a1, a2);
  if (a2 && !result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v6 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

uint64_t EC3AudioStream::NotifyFormatChange(EC3AudioStream *this, const AudioStreamBasicDescription *a2)
{
  NSObject *v4;
  int16x8_t v5;
  void **v6;
  int16x8_t v7;
  void **v8;
  uint64_t result;
  uint64_t v10;
  uint64_t (*v11)(_QWORD, _QWORD, uint64_t, _OWORD *);
  _OWORD v12[2];
  uint64_t v13;
  void *__p[2];
  char v15;
  _OWORD v16[2];
  uint64_t v17;
  void *v18[2];
  char v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  void **v25;
  __int16 v26;
  void **v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (kASSubSytemEC3)
  {
    v4 = *(NSObject **)kASSubSytemEC3;
    if (!*(_QWORD *)kASSubSytemEC3)
      goto LABEL_15;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(int16x8_t *)((char *)this + 40);
    v16[0] = *(_OWORD *)((char *)this + 24);
    v16[1] = v5;
    v17 = *((_QWORD *)this + 7);
    v6 = v18;
    CA::StreamDescription::AsString((CA::StreamDescription *)v18, v16, *(double *)v16, v5);
    if (v19 < 0)
      v6 = (void **)v18[0];
    v7 = *(int16x8_t *)&a2->mBytesPerPacket;
    v12[0] = *(_OWORD *)&a2->mSampleRate;
    v12[1] = v7;
    v13 = *(_QWORD *)&a2->mBitsPerChannel;
    CA::StreamDescription::AsString((CA::StreamDescription *)__p, v12, *(double *)v12, v7);
    if (v15 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    v21 = "EC3AudioStream.cpp";
    v22 = 1024;
    v23 = 399;
    v24 = 2080;
    v25 = v6;
    v26 = 2080;
    v27 = v8;
    _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d FORMAT CHANGED:\n %s ->\n %s", buf, 0x26u);
    if (v15 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
  }
LABEL_15:
  result = (*(uint64_t (**)(EC3AudioStream *, const AudioStreamBasicDescription *))(*(_QWORD *)this + 56))(this, a2);
  v10 = *((_QWORD *)this + 1);
  LODWORD(v16[0]) = 1;
  if (!*(_BYTE *)(v10 + 105))
  {
    *(_BYTE *)(v10 + 105) = 1;
    v11 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, _OWORD *))(v10 + 24);
    if (v11)
      return v11(*(_QWORD *)(v10 + 40), *(unsigned int *)(v10 + 8), 1684434292, v16);
  }
  return result;
}

os_log_t std::__call_once_proxy[abi:ne180100]<std::tuple<EC3AudioStream::EC3AudioStream(void)::$_0 &&>>()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "asec3");
  *v0 = result;
  kASSubSytemEC3 = (uint64_t)v0;
  return result;
}

void EC3AudioStream::EC3AudioStream(EC3AudioStream *this)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  char v5;
  _BYTE *v6;
  _BYTE buf[12];
  __int16 v8;
  int v9;
  __int16 v10;
  EC3AudioStream *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = -1;
  *((_QWORD *)this + 12) = -1;
  *((_QWORD *)this + 13) = -1;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_WORD *)this + 88) = 0;
  *((_DWORD *)this + 59) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_DWORD *)this + 50) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_BYTE *)this + 232) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_OWORD *)this + 15) = xmmword_18F116F80;
  *((_DWORD *)this + 64) = 0;
  *((_QWORD *)this + 33) = 0;
  *(_QWORD *)((char *)this + 300) = 0;
  *(_QWORD *)((char *)this + 284) = 0;
  *(_QWORD *)((char *)this + 292) = 0;
  *((_DWORD *)this + 82) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *(_QWORD *)this = &off_1E2904468;
  *((_WORD *)this + 166) = 0;
  *((_DWORD *)this + 84) = 0;
  *((_BYTE *)this + 352) = 0;
  *((_BYTE *)this + 376) = -1;
  *(_QWORD *)((char *)this + 429) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_DWORD *)this + 104) = 0;
  *(_WORD *)((char *)this + 437) = 1;
  *((_QWORD *)this + 61) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  v2 = atomic_load(&EC3AudioStream::EC3AudioStream(void)::onceflag);
  if (v2 != -1)
  {
    *(_QWORD *)buf = &v5;
    v6 = buf;
    std::__call_once(&EC3AudioStream::EC3AudioStream(void)::onceflag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<EC3AudioStream::EC3AudioStream(void)::$_0 &&>>);
  }
  if (kASSubSytemEC3)
  {
    v3 = *(NSObject **)kASSubSytemEC3;
    if (!*(_QWORD *)kASSubSytemEC3)
      goto LABEL_9;
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "EC3AudioStream.cpp";
    v8 = 1024;
    v9 = 138;
    v10 = 2048;
    v11 = this;
    _os_log_impl(&dword_18EE07000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d EC3AudioStream(%p): -> constructed", buf, 0x1Cu);
  }
LABEL_9:
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  v4 = operator new();
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 4) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 8) = v4 + 16;
  *(_QWORD *)(v4 + 32) = 1;
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(_QWORD *)(v4 + 168) = 0;
  *(_QWORD *)(v4 + 192) = 1;
  *(_OWORD *)(v4 + 44) = 0u;
  *(_OWORD *)(v4 + 60) = 0u;
  *(_OWORD *)(v4 + 76) = 0u;
  *(_OWORD *)(v4 + 92) = 0u;
  *(_OWORD *)(v4 + 108) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_OWORD *)(v4 + 140) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_DWORD *)(v4 + 40) = 1;
  *(_DWORD *)(v4 + 52) = 1;
  *((_QWORD *)this + 51) = v4;
}

void sub_18EF9FA1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  *(_BYTE *)(v1 + 438) = 0;
  *(_QWORD *)(v1 + 424) = 0;
  *(_DWORD *)(v1 + 432) = 0;
  *(_DWORD *)(v1 + 492) = 0;
  v3 = *(void **)(v1 + 480);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(v1 + 480) = 0;
  }
  AudioFileStreamObject::~AudioFileStreamObject((AudioFileStreamObject *)v1);
  _Unwind_Resume(a1);
}

uint64_t unilaterally_billed_shared_memory::get_raw_ptr(IOSurfaceRef *this, size_t a2)
{
  uint64_t result;

  if (IOSurfaceGetAllocSize(*this) > a2)
    return (uint64_t)IOSurfaceGetBaseAddress(*this) + a2;
  _os_assert_log();
  result = _os_crash();
  __break(1u);
  return result;
}

void unilaterally_billed_shared_memory::~unilaterally_billed_shared_memory(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void acv2::ChannelMixerConverter::~ChannelMixerConverter(acv2::ChannelMixerConverter *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E290AFF8;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  acv2::AudioConverterBase::~AudioConverterBase(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E290AFF8;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x193FFE460);
}

const __CFString *acv2::ChannelMixerConverter::ConverterName(acv2::ChannelMixerConverter *this)
{
  return CFSTR("ChannelMixerConverter");
}

uint64_t acv2::CBRConverter::SetProperty(acv2::CBRConverter *this, unsigned int a2, unsigned int a3, const void *a4)
{
  return 1886547824;
}

void acv2::ChannelMixerConverter::ConvertBufferList(uint64_t a1, vDSP_Length __N, uint64_t *a3, uint64_t *a4)
{
  unsigned int v5;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  float *v11;
  float v12;
  uint64_t v13;
  const float *v14;
  const float *v15;
  float *v16;
  float v17;
  uint64_t v18;
  char *v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  BOOL v26;
  uint64_t v27;
  const void *v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  float v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t i;
  uint64_t v39;
  void *v40;
  unsigned int v41;
  unsigned int v42;
  float *v43;
  size_t v44;
  float *v45;
  const void *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  size_t v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v59;
  BOOL v60;
  int v61;
  uint64_t __B;
  int v63;

  v5 = __N;
  v7 = *(_DWORD *)(a1 + 68);
  v57 = *(_DWORD *)(a1 + 28);
  if ((v57 & 0x20) != 0)
  {
    v8 = 1;
    if ((v7 & 0x20) != 0)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 44);
    if ((v7 & 0x20) != 0)
    {
LABEL_3:
      v9 = 1;
      goto LABEL_6;
    }
  }
  v9 = *(_DWORD *)(a1 + 84);
LABEL_6:
  v10 = *(unsigned int *)(a1 + 168);
  v61 = v9;
  if ((_DWORD)v10 != 1)
  {
    if (v10 == 2 && *(_DWORD *)(a1 + 172) == 1)
    {
      v11 = *(float **)(a1 + 176);
      v12 = *v11;
      if (*v11 == v11[1])
      {
        v13 = *a3;
        if ((v57 & 0x20) != 0)
        {
          v15 = *(const float **)(v13 + 32);
          v14 = *(const float **)(v13 + 16);
        }
        else
        {
          v14 = *(const float **)(v13 + 16);
          v15 = v14 + 1;
        }
        v43 = *(float **)(*a4 + 16);
        *(float *)&__B = *v11;
        if (v12 == 0.0)
        {
          if (v9 == 1)
          {
            v44 = 4 * __N;
            v45 = v43;
LABEL_76:
            bzero(v45, v44);
            return;
          }
          if ((_DWORD)__N)
          {
            v47 = 0;
            do
            {
              v43[v47] = 0.0;
              v47 += v9;
              --v5;
            }
            while (v5);
          }
        }
        else if (v12 == 1.0)
        {
          vDSP_vadd(v14, v8, v15, v8, v43, v9, __N);
        }
        else
        {
          vDSP_vasm(v14, v8, v15, v8, (const float *)&__B, v43, v9, __N);
        }
        return;
      }
    }
    goto LABEL_16;
  }
  if (*(_DWORD *)(a1 + 172) != 2 || (v16 = *(float **)(a1 + 176), v17 = *v16, *v16 != v16[1]))
  {
LABEL_16:
    v21 = *(_QWORD *)(a1 + 208);
    if (v21)
    {
      __B = *(_QWORD *)(a1 + 200);
      v63 = 0;
      std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&__B, v21);
      v10 = *(unsigned int *)(a1 + 168);
    }
    if (!v10)
    {
      v37 = *(unsigned int *)(a1 + 172);
LABEL_55:
      if (v37)
      {
        for (i = 0; i < v37; ++i)
        {
          if (((*(_QWORD *)(*(_QWORD *)(a1 + 200) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
          {
            v39 = *a4;
            if ((v7 & 0x20) != 0)
              v40 = *(void **)(v39 + 16 * i + 16);
            else
              v40 = (void *)(*(_QWORD *)(v39 + 16) + 4 * i);
            if (v61 == 1)
            {
              bzero(v40, 4 * v5);
              v37 = *(unsigned int *)(a1 + 172);
            }
            else if (v5)
            {
              v41 = 0;
              v42 = v5;
              do
              {
                *((_DWORD *)v40 + v41) = 0;
                v41 += v61;
                --v42;
              }
              while (v42);
            }
          }
        }
      }
      return;
    }
    v22 = 0;
    v23 = 0;
    v24 = v61;
    v26 = v8 == 1 && v61 == 1;
    v60 = v26;
    while (1)
    {
      v27 = *a3;
      v28 = (v57 & 0x20) != 0 ? *(const void **)(v27 + 16 * v22 + 16) : (const void *)(*(_QWORD *)(v27 + 16) + 4 * v22);
      if (*(_DWORD *)(a1 + 172))
        break;
      v37 = 0;
LABEL_52:
      if (++v22 >= v10)
        goto LABEL_55;
    }
    v59 = v22;
    v29 = 0;
    while (1)
    {
      v30 = *a4;
      if ((v7 & 0x20) != 0)
        v31 = *(void **)(v30 + 16 * v29 + 16);
      else
        v31 = (void *)(*(_QWORD *)(v30 + 16) + 4 * v29);
      LODWORD(__B) = 0;
      v32 = *(float *)(*(_QWORD *)(a1 + 176) + 4 * v23);
      *(float *)&__B = v32;
      if (v32 == 0.0)
        goto LABEL_49;
      v33 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * (v29 >> 6)) & (1 << v29);
      if (v32 == 1.0)
      {
        if (!v33)
        {
          if (v60)
          {
            memcpy(v31, v28, 4 * v5);
            goto LABEL_44;
          }
          if (v5)
          {
            v34 = 0;
            v35 = 0;
            v36 = v5;
            do
            {
              *((_DWORD *)v31 + v34) = *((_DWORD *)v28 + v35);
              v35 += v8;
              v34 += v24;
              --v36;
            }
            while (v36);
          }
LABEL_48:
          *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * (v29 >> 6)) |= 1 << v29;
          goto LABEL_49;
        }
        vDSP_vadd((const float *)v28, v8, (const float *)v31, v61, (float *)v31, v61, v5);
      }
      else
      {
        if (!v33)
        {
          vDSP_vsmul((const float *)v28, v8, (const float *)&__B, (float *)v31, v61, v5);
LABEL_44:
          v24 = v61;
          goto LABEL_48;
        }
        vDSP_vsma((const float *)v28, v8, (const float *)&__B, (const float *)v31, v61, (float *)v31, v61, v5);
      }
      v24 = v61;
LABEL_49:
      ++v29;
      ++v23;
      v37 = *(unsigned int *)(a1 + 172);
      if (v29 >= v37)
      {
        v10 = *(unsigned int *)(a1 + 168);
        v22 = v59;
        goto LABEL_52;
      }
    }
  }
  v18 = *a4;
  if ((v7 & 0x20) != 0)
  {
    v20 = *(_DWORD **)(v18 + 32);
    v19 = *(char **)(v18 + 16);
  }
  else
  {
    v19 = *(char **)(v18 + 16);
    v20 = v19 + 4;
  }
  v46 = *(const void **)(*a3 + 16);
  *(float *)&__B = v17;
  if (v17 != 0.0)
  {
    if (v17 == 1.0)
    {
      if (v8 == 1 && v9 == 1)
      {
        memcpy(v19, v46, 4 * __N);
      }
      else if ((_DWORD)__N)
      {
        v52 = 0;
        v53 = 0;
        v54 = __N;
        do
        {
          *(_DWORD *)&v19[4 * v52] = *((_DWORD *)v46 + v53);
          v53 += v8;
          v52 += v9;
          --v54;
        }
        while (v54);
        if (v9 != 1)
        {
          v55 = 0;
          do
          {
            v20[v55] = *(_DWORD *)&v19[4 * v55];
            v55 += v9;
            --v5;
          }
          while (v5);
          return;
        }
      }
      else if (v9 != 1)
      {
        return;
      }
      v51 = 4 * v5;
    }
    else
    {
      vDSP_vsmul((const float *)v46, v8, (const float *)&__B, (float *)v19, v9, __N);
      if (v61 != 1)
      {
        if (v5)
        {
          v56 = 0;
          do
          {
            v20[v56] = *(_DWORD *)&v19[4 * v56];
            v56 += v61;
            --v5;
          }
          while (v5);
        }
        return;
      }
      v51 = 4 * v5;
    }
    memcpy(v20, v19, v51);
    return;
  }
  if (v9 == 1)
  {
    bzero(v19, 4 * __N);
    v45 = (float *)v20;
    v44 = 4 * v5;
    goto LABEL_76;
  }
  if ((_DWORD)__N)
  {
    v48 = 0;
    v49 = __N;
    do
    {
      *(_DWORD *)&v19[4 * v48] = 0;
      v48 += v9;
      --v49;
    }
    while (v49);
    v50 = 0;
    do
    {
      v20[v50] = 0;
      v50 += v9;
      --v5;
    }
    while (v5);
  }
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t acv2::normalizeMixMap(uint64_t this, int a2, float *a3, float *a4)
{
  int v4;
  float v5;
  float v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float v11;

  if (a2)
  {
    v4 = 0;
    v5 = 0.0;
    do
    {
      v6 = 0.0;
      if ((_DWORD)this)
      {
        v7 = v4;
        v8 = this;
        do
        {
          v6 = v6 + fabsf(a3[v7]);
          v7 += a2;
          --v8;
        }
        while (v8);
      }
      if (v6 > v5)
        v5 = v6;
      ++v4;
    }
    while (v4 != a2);
    v9 = (a2 * this);
    if (v5 != 0.0 && (_DWORD)v9 != 0)
    {
      v11 = 1.0 / v5;
      do
      {
        *a3 = v11 * *a3;
        ++a3;
        --v9;
      }
      while (v9);
    }
  }
  return this;
}

uint64_t acv2::ChannelMixerConverter::SetMixMap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t result;
  int v8;

  v5 = *(char **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = (v4 - *(_QWORD *)a2) >> 2;
  result = *(unsigned int *)(a1 + 168);
  v8 = *(_DWORD *)(a1 + 172);
  if (v6 == v8 * (_DWORD)result)
  {
    if (a1 + 176 != a2)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 176), v5, v4, v6);
      result = *(unsigned int *)(a1 + 168);
      v8 = *(_DWORD *)(a1 + 172);
    }
    result = acv2::normalizeMixMap(result, v8, *(float **)(a1 + 176), (float *)v6);
    *(_BYTE *)(a1 + 224) = 1;
  }
  return result;
}

OSStatus ExtAudioFileOpenURL(CFURLRef inURL, ExtAudioFileRef *outExtAudioFile)
{
  OSStatus result;
  uint64_t v5;
  OSStatus v6;
  CAXException *exception;
  unsigned int v8;
  _BYTE v9[16];
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  _BYTE *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  result = -50;
  if (inURL && outExtAudioFile)
  {
    *outExtAudioFile = 0;
    v5 = operator new();
    ExtAudioFile::ExtAudioFile((ExtAudioFile *)v5);
    if (*(_DWORD *)(v5 + 32))
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v9, 0xFFFEFBFB);
        *(_DWORD *)buf = 136315906;
        v11 = "ExtAudioFile.cpp";
        v12 = 1024;
        v13 = 214;
        v14 = 2080;
        v15 = v9;
        v16 = 2080;
        v17 = "file already open";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "file already open", -66565);
    }
    else
    {
      v6 = AudioFileOpenURL(inURL, kAudioFileReadPermission, 0, (AudioFileID *)(v5 + 16));
      if (!v6)
      {
        *(_BYTE *)(v5 + 28) = 1;
        *(_DWORD *)(v5 + 32) = 1;
        ExtAudioFile::GetExistingFileInfo((ExtAudioFile *)v5, 0);
        result = 0;
        *outExtAudioFile = (ExtAudioFileRef)*(unsigned int *)(v5 + 8);
        return result;
      }
      v8 = v6;
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v9, v8);
        *(_DWORD *)buf = 136315906;
        v11 = "ExtAudioFile.cpp";
        v12 = 1024;
        v13 = 215;
        v14 = 2080;
        v15 = v9;
        v16 = 2080;
        v17 = "open audio file";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "open audio file", v8);
    }
  }
  return result;
}

void sub_18EFA0504(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;
  int v6;
  int *v7;

  if (!a2)
    _Unwind_Resume(exception_object);
  __cxa_free_exception(v3);
  if (a2 == 4)
  {
    v6 = *((_DWORD *)__cxa_begin_catch(exception_object) + 2);
  }
  else if (a2 == 3)
  {
    v6 = *((_DWORD *)__cxa_begin_catch(exception_object) + 66);
  }
  else
  {
    v7 = (int *)__cxa_begin_catch(exception_object);
    if (a2 != 2)
    {
      __cxa_end_catch();
LABEL_9:
      if (v2)
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
LABEL_14:
      JUMPOUT(0x18EFA0360);
    }
    v6 = *v7;
  }
  __cxa_end_catch();
  if (!v6)
    goto LABEL_14;
  goto LABEL_9;
}

OSStatus ExtAudioFileWrapAudioFileID(AudioFileID inFileID, Boolean inForWriting, ExtAudioFileRef *outExtAudioFile)
{
  return ExtAudioFileWrapAudioFileIDWithPreferredFormatID((uint64_t)inFileID, inForWriting, 0, outExtAudioFile);
}

uint64_t ExtAudioFileWrapAudioFileIDWithPreferredFormatID(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  CAXException *exception;
  _BYTE v12[16];
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  _BYTE *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  result = 4294967246;
  if (a1 && a4)
  {
    *a4 = 0;
    v9 = operator new();
    ExtAudioFile::ExtAudioFile((ExtAudioFile *)v9);
    if (*(_DWORD *)(v9 + 32))
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v12, 0xFFFEFBFB);
        *(_DWORD *)buf = 136315906;
        v14 = "ExtAudioFile.cpp";
        v15 = 1024;
        v16 = 226;
        v17 = 2080;
        v18 = v12;
        v19 = 2080;
        v20 = "file already open";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "file already open", -66565);
    }
    *(_QWORD *)(v9 + 16) = a1;
    *(_BYTE *)(v9 + 28) = 0;
    if (a2)
      v10 = 3;
    else
      v10 = 1;
    *(_DWORD *)(v9 + 32) = v10;
    ExtAudioFile::GetExistingFileInfo((ExtAudioFile *)v9, a3);
    if (a2)
      ExtAudioFile::FileFormatChanged((ExtAudioFile *)v9, 0, 0, 0);
    result = 0;
    *a4 = *(unsigned int *)(v9 + 8);
  }
  return result;
}

void sub_18EFA07B4(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;
  int v6;
  int *v7;

  if (!a2)
    _Unwind_Resume(exception_object);
  __cxa_free_exception(v3);
  if (a2 == 4)
  {
    v6 = *((_DWORD *)__cxa_begin_catch(exception_object) + 2);
  }
  else if (a2 == 3)
  {
    v6 = *((_DWORD *)__cxa_begin_catch(exception_object) + 66);
  }
  else
  {
    v7 = (int *)__cxa_begin_catch(exception_object);
    if (a2 != 2)
    {
      __cxa_end_catch();
LABEL_9:
      if (v2)
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
LABEL_14:
      JUMPOUT(0x18EFA06B0);
    }
    v6 = *v7;
  }
  __cxa_end_catch();
  if (!v6)
    goto LABEL_14;
  goto LABEL_9;
}

OSStatus ExtAudioFileCreateWithURL(CFURLRef inURL, AudioFileTypeID inFileType, const AudioStreamBasicDescription *inStreamDesc, const AudioChannelLayout *inChannelLayout, UInt32 inFlags, ExtAudioFileRef *outExtAudioFile)
{
  OSStatus result;
  const AudioStreamBasicDescription *v12;
  uint64_t v13;
  __int128 v14;
  CAXException *exception;
  _BYTE v21[16];
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BYTE *v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  result = -50;
  if (inURL && inStreamDesc && outExtAudioFile)
  {
    v12 = *(const AudioStreamBasicDescription **)&inFileType;
    *outExtAudioFile = 0;
    v13 = operator new();
    ExtAudioFile::ExtAudioFile((ExtAudioFile *)v13);
    if (*(_DWORD *)(v13 + 32))
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v21, 0xFFFEFBFB);
        *(_DWORD *)buf = 136315906;
        v23 = "ExtAudioFile.cpp";
        v24 = 1024;
        v25 = 241;
        v26 = 2080;
        v27 = v21;
        v28 = 2080;
        v29 = "file already open";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "file already open", -66565);
    }
    *(_DWORD *)(v13 + 24) = (_DWORD)v12;
    v14 = *(_OWORD *)&inStreamDesc->mBytesPerPacket;
    *(_OWORD *)(v13 + 168) = *(_OWORD *)&inStreamDesc->mSampleRate;
    *(_OWORD *)(v13 + 184) = v14;
    *(_QWORD *)(v13 + 200) = *(_QWORD *)&inStreamDesc->mBitsPerChannel;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(v13 + 208) = _Q0;
    if (inChannelLayout)
      CAAudioChannelLayout::operator=();
    *(_DWORD *)(v13 + 32) = 2;
    ExtAudioFile::FileFormatChanged((ExtAudioFile *)v13, inURL, v12, inFlags);
    result = 0;
    *outExtAudioFile = (ExtAudioFileRef)*(unsigned int *)(v13 + 8);
  }
  return result;
}

void sub_18EFA0A60(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v3;
  int v6;
  int *v7;

  if (!a2)
    _Unwind_Resume(exception_object);
  __cxa_free_exception(v3);
  if (a2 == 4)
  {
    v6 = *((_DWORD *)__cxa_begin_catch(exception_object) + 2);
  }
  else if (a2 == 3)
  {
    v6 = *((_DWORD *)__cxa_begin_catch(exception_object) + 66);
  }
  else
  {
    v7 = (int *)__cxa_begin_catch(exception_object);
    if (a2 != 2)
    {
      __cxa_end_catch();
LABEL_9:
      if (v2)
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
LABEL_14:
      JUMPOUT(0x18EFA0960);
    }
    v6 = *v7;
  }
  __cxa_end_catch();
  if (!v6)
    goto LABEL_14;
  goto LABEL_9;
}

OSStatus ExtAudioFileDispose(ExtAudioFileRef inExtAudioFile)
{
  ExtAudioFile *v1;
  uint64_t v2;
  void *v3;
  ExtAudioFile *v4;
  OSStatus v5;

  v1 = (ExtAudioFile *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!v1)
    return -50;
  v4 = v1;
  v5 = ExtAudioFile::Close(v1, v2, v3);
  (*(void (**)(ExtAudioFile *))(*(_QWORD *)v4 + 8))(v4);
  return v5;
}

OSStatus ExtAudioFileRead(ExtAudioFileRef inExtAudioFile, UInt32 *ioNumberFrames, AudioBufferList *ioData)
{
  OSStatus v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  unsigned int v10;
  UInt32 v11;
  UInt32 mDataByteSize;
  unsigned int v13;
  UInt32 v14;
  signed int v15;
  unsigned int v16;
  OpaqueAudioConverter *v17;
  OSStatus v18;
  unsigned int InputProc;
  UInt32 v20;
  uint64_t mNumberBuffers;
  unint64_t v22;
  unsigned int v23;
  OpaqueAudioConverter *v24;
  OSStatus v25;
  CAXException *exception;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  UInt32 v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unsigned int v35;
  unsigned int v37;
  UInt32 ioOutputDataPacketSize;
  UInt32 v39;
  uint8_t v40[16];
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint8_t *v46;
  __int16 v47;
  const char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v3 = -50;
  if (ioNumberFrames)
  {
    if (ioData)
    {
      v6 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v6)
      {
        v7 = v6;
        CrashIfClientProvidedBogusAudioBufferList();
        if (*(_QWORD *)(v7 + 152) && (*(_BYTE *)(v7 + 236) & 0x20) != 0)
          v9 = *(_DWORD *)(v7 + 252);
        else
          v9 = 1;
        if (ioData->mNumberBuffers == v9)
        {
          v10 = *(_DWORD *)(v7 + 284);
          if (v10)
          {
            v11 = *ioNumberFrames;
            if (!*(_QWORD *)(v7 + 112))
            {
              ExtAudioFile::AllocateBuffers(v7, 0);
              v10 = *(_DWORD *)(v7 + 284);
            }
            mDataByteSize = ioData->mBuffers[0].mDataByteSize;
            v13 = mDataByteSize / v10;
            if (mDataByteSize / v10 >= v11)
              v14 = v11;
            else
              v14 = mDataByteSize / v10;
            v39 = v14;
            *(_DWORD *)(v7 + 300) = -1;
            if (*(_DWORD *)(v7 + 244) == 1)
            {
              v15 = *(_DWORD *)(v7 + 84);
              if (v15 >= 1)
              {
                do
                {
                  if (v13 < v15)
                    v15 = v13;
                  ioOutputDataPacketSize = v15;
                  v16 = *(_DWORD *)(v7 + 188);
                  if (v16)
                    *(_DWORD *)(v7 + 300) = (v15 + v16 - 1) / v16;
                  v17 = *(OpaqueAudioConverter **)(v7 + 152);
                  if (v17)
                  {
                    v18 = AudioConverterFillComplexBuffer(v17, (AudioConverterComplexInputDataProc)ExtAudioFile::ReadInputProc, (void *)v7, &ioOutputDataPacketSize, ioData, 0);
                    if (v18)
                    {
                      v35 = v18;
                      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                      {
                        CAX4CCString::CAX4CCString((CAX4CCString *)v40, v35);
                        *(_DWORD *)buf = 136315906;
                        v42 = "ExtAudioFile.cpp";
                        v43 = 1024;
                        v44 = 1197;
                        v45 = 2080;
                        v46 = v40;
                        v47 = 2080;
                        v48 = "convert audio packets (pcm read)";
                        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
                      }
                      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
                      CAXException::CAXException(exception, "convert audio packets (pcm read)", v35);
                      goto LABEL_69;
                    }
                  }
                  else
                  {
                    InputProc = ExtAudioFile::ReadInputProc(0, (OpaqueAudioConverter *)&ioOutputDataPacketSize, (AudioStreamPacketDescription **)ioData, 0, (AudioStreamPacketDescription **)v7, v8);
                    if (InputProc)
                    {
                      v37 = InputProc;
                      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                      {
                        CAX4CCString::CAX4CCString((CAX4CCString *)v40, v37);
                        *(_DWORD *)buf = 136315906;
                        v42 = "ExtAudioFile.cpp";
                        v43 = 1024;
                        v44 = 1195;
                        v45 = 2080;
                        v46 = v40;
                        v47 = 2080;
                        v48 = "read audio file";
                        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
                      }
                      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
                      CAXException::CAXException(exception, "read audio file", v37);
                      goto LABEL_69;
                    }
                  }
                  v20 = ioOutputDataPacketSize;
                  if (!ioOutputDataPacketSize)
                    goto LABEL_52;
                  v15 = *(_DWORD *)(v7 + 84) - ioOutputDataPacketSize;
                  *(_DWORD *)(v7 + 84) = v15;
                  mNumberBuffers = ioData->mNumberBuffers;
                  if ((int)mNumberBuffers >= 1)
                  {
                    v22 = mNumberBuffers + 1;
                    do
                      ioData->mBuffers[(v22-- - 2)].mDataByteSize = mDataByteSize;
                    while (v22 > 1);
                    v15 = *(_DWORD *)(v7 + 84);
                  }
                }
                while (v15 > 0);
              }
            }
            v23 = *(_DWORD *)(v7 + 188);
            if (v23)
              *(_DWORD *)(v7 + 300) = v14 / v23 + 1;
            v24 = *(OpaqueAudioConverter **)(v7 + 152);
            if (v24)
            {
              if (!v14)
              {
                v20 = 0;
LABEL_52:
                v3 = 0;
                *ioNumberFrames = v20;
                return v3;
              }
              v25 = AudioConverterFillComplexBuffer(v24, (AudioConverterComplexInputDataProc)ExtAudioFile::ReadInputProc, (void *)v7, &v39, ioData, 0);
              if (v25)
              {
                if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                {
                  CAX4CCString::CAX4CCString((CAX4CCString *)v40, v25);
                  *(_DWORD *)buf = 136315906;
                  v42 = "ExtAudioFile.cpp";
                  v43 = 1024;
                  v44 = 1222;
                  v45 = 2080;
                  v46 = v40;
                  v47 = 2080;
                  v48 = "convert audio packets (read)";
                  _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
                }
                exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
                CAXException::CAXException(exception, "convert audio packets (read)", v25);
                goto LABEL_69;
              }
            }
            else
            {
              v27 = ExtAudioFile::ReadInputProc(0, (OpaqueAudioConverter *)&v39, (AudioStreamPacketDescription **)ioData, 0, (AudioStreamPacketDescription **)v7, v8);
              if (v27)
              {
                if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                {
                  CAX4CCString::CAX4CCString((CAX4CCString *)v40, v27);
                  *(_DWORD *)buf = 136315906;
                  v42 = "ExtAudioFile.cpp";
                  v43 = 1024;
                  v44 = 1217;
                  v45 = 2080;
                  v46 = v40;
                  v47 = 2080;
                  v48 = "read audio file";
                  _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
                }
                exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
                CAXException::CAXException(exception, "read audio file", v27);
                goto LABEL_69;
              }
            }
            v20 = v39;
            if (*(_DWORD *)(v7 + 244) == 1)
            {
              v28 = *(_QWORD *)(v7 + 72);
              v29 = *(_QWORD *)(v7 + 64) + v39;
              if (v28 && v29 > v28)
              {
                if (v29 - v28 <= v39)
                  v30 = v29 - v28;
                else
                  v30 = v39;
                v31 = ioData->mNumberBuffers;
                if ((int)v31 >= 1)
                {
                  v32 = *(_DWORD *)(v7 + 248) * v30;
                  v33 = v31 + 1;
                  do
                    ioData->mBuffers[(v33-- - 2)].mDataByteSize -= v32;
                  while (v33 > 1);
                }
                v20 -= v30;
                v29 = v28;
              }
              *(_QWORD *)(v7 + 56) = (uint64_t)((double)v29 / *(double *)(v7 + 216));
              *(_QWORD *)(v7 + 64) = v29;
            }
            goto LABEL_52;
          }
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v40, 0xFFFEFBF9);
            *(_DWORD *)buf = 136315906;
            v42 = "ExtAudioFile.cpp";
            v43 = 1024;
            v44 = 1175;
            v45 = 2080;
            v46 = v40;
            v47 = 2080;
            v48 = "client maximum packet size is 0";
            _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(exception, "client maximum packet size is 0", -66567);
        }
        else
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v40, 0xFFFFFFCE);
            *(_DWORD *)buf = 136315906;
            v42 = "ExtAudioFile.cpp";
            v43 = 1024;
            v44 = 1173;
            v45 = 2080;
            v46 = v40;
            v47 = 2080;
            v48 = "wrong number of buffers";
            _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(exception, "wrong number of buffers", -50);
        }
LABEL_69:
      }
    }
  }
  return v3;
}

void sub_18EFA12A8(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_free_exception(v2);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x18EFA0EF8);
  }
  _Unwind_Resume(exception_object);
}

OSStatus ExtAudioFileWrite(ExtAudioFileRef inExtAudioFile, UInt32 inNumberFrames, const AudioBufferList *ioData)
{
  uint64_t v5;
  ExtAudioFile *v6;

  if (!ioData)
    return -50;
  v5 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v5)
    return -50;
  v6 = (ExtAudioFile *)v5;
  CrashIfClientProvidedBogusAudioBufferList();
  return ExtAudioFile::Write(v6, inNumberFrames, ioData);
}

OSStatus ExtAudioFileWriteAsync(ExtAudioFileRef inExtAudioFile, UInt32 inNumberFrames, const AudioBufferList *ioData)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  double Current;
  int v10;
  uint64_t v12;
  int v13;
  AT::RingBuffer *v14;
  AT::RingBuffer *v15;
  uint64_t v16;
  CADeprecated::CABufferList *v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  caulk::thread *v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  CAXException *exception;
  uint64_t v38;
  std::string __p;
  std::string v40;
  __int16 v41;
  int v42;
  _BYTE v43[29];
  uint64_t v44;
  std::error_code v45;
  std::error_code v46;

  v44 = *MEMORY[0x1E0C80C00];
  if (inNumberFrames && !ioData)
    return -50;
  v5 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v5)
    return -50;
  v6 = v5;
  if (ioData)
    CrashIfClientProvidedBogusAudioBufferList();
  v7 = CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::instance();
  if (!*(_QWORD *)(v6 + 328))
  {
    if (*(_DWORD *)(v6 + 232))
      v12 = v6 + 224;
    else
      v12 = v6 + 168;
    v13 = *(_DWORD *)(v6 + 88) / *(_DWORD *)(v12 + 24);
    *(_DWORD *)(v6 + 336) = v13;
    v14 = (AT::RingBuffer *)operator new();
    v15 = v14;
    if ((*(_BYTE *)(v12 + 12) & 0x20) != 0)
      v16 = *(unsigned int *)(v12 + 28);
    else
      v16 = 1;
    AT::RingBuffer::RingBuffer(v14, (_anonymous_namespace_::EABLImpl *)v16, *(_DWORD *)(v12 + 24), 3 * v13);
    *(_QWORD *)(v6 + 328) = v15;
    v17 = (CADeprecated::CABufferList *)CADeprecated::CABufferList::New((uint64_t)"", *(_DWORD *)(v12 + 12), *(_DWORD *)(v12 + 28));
    *(_QWORD *)(v6 + 344) = v17;
    CADeprecated::CABufferList::AllocateBuffers(v17);
    *(_QWORD *)(v6 + 352) = CADeprecated::CABufferList::New((uint64_t)"", *(_DWORD *)(v12 + 12), *(_DWORD *)(v12 + 28));
    std::mutex::lock((std::mutex *)v7);
    v19 = *(uint64_t **)(v7 + 120);
    v18 = *(_QWORD *)(v7 + 128);
    if ((unint64_t)v19 >= v18)
    {
      v21 = *(_QWORD *)(v7 + 112);
      v22 = ((uint64_t)v19 - v21) >> 3;
      if ((unint64_t)(v22 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v23 = v18 - v21;
      v24 = v23 >> 2;
      if (v23 >> 2 <= (unint64_t)(v22 + 1))
        v24 = v22 + 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        if (v25 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v26 = (char *)operator new(8 * v25);
      }
      else
      {
        v26 = 0;
      }
      v27 = (uint64_t *)&v26[8 * v22];
      v28 = &v26[8 * v25];
      *v27 = v6;
      v20 = v27 + 1;
      v30 = *(char **)(v7 + 112);
      v29 = *(char **)(v7 + 120);
      if (v29 != v30)
      {
        do
        {
          v31 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *--v27 = v31;
        }
        while (v29 != v30);
        v29 = *(char **)(v7 + 112);
      }
      *(_QWORD *)(v7 + 112) = v27;
      *(_QWORD *)(v7 + 120) = v20;
      *(_QWORD *)(v7 + 128) = v28;
      if (v29)
        operator delete(v29);
    }
    else
    {
      *v19 = v6;
      v20 = v19 + 1;
    }
    v32 = *(_QWORD *)(v7 + 136);
    *(_QWORD *)(v7 + 120) = v20;
    if (!v32)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ExtAudioFile");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v40, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        LOBYTE(v41) = 1;
        *(_QWORD *)v43 = 0x10000003DLL;
        *(_DWORD *)&v43[16] = 2;
        v43[20] = 1;
        *(_DWORD *)&v43[24] = 1;
        v43[28] = 1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v40 = __p;
        LOBYTE(v41) = 1;
        *(_QWORD *)v43 = 0x10000003DLL;
        *(_DWORD *)&v43[16] = 2;
        v43[20] = 1;
        *(_DWORD *)&v43[24] = 1;
        v43[28] = 1;
      }
      v33 = (caulk::thread *)operator new();
      *(_QWORD *)v33 = 0;
      *((_BYTE *)v33 + 8) = 0;
      v34 = operator new();
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)v34, (__int128 *)&v40);
      *(_OWORD *)(v34 + 32) = *(_OWORD *)v43;
      *(_OWORD *)(v34 + 45) = *(_OWORD *)&v43[13];
      *(_QWORD *)(v34 + 64) = v7;
      caulk::thread::start(v33, (caulk::thread::attributes *)v34, (void *(*)(void *))caulk::thread_proxy<std::tuple<caulk::thread::attributes,ExtAudioFileAsyncWriteMgr::AddClient(ExtAudioFile *)::{lambda(void)#1},std::tuple<>>>, (void *)v34);
      std::unique_ptr<caulk::thread>::reset[abi:ne180100]((caulk::thread **)(v7 + 136), v33);
      if ((_BYTE)v41 && SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
    }
    std::mutex::unlock((std::mutex *)v7);
    *(_QWORD *)(v6 + 368) = 0;
    *(_QWORD *)(v6 + 376) = 0;
    if (inNumberFrames)
      goto LABEL_8;
    return 0;
  }
  if (!inNumberFrames)
    return 0;
LABEL_8:
  *(_QWORD *)&v45.__val_ = AT::RingBuffer::Store(*(AT::RingBuffer **)(v6 + 328), ioData, inNumberFrames, *(_QWORD *)(v6 + 368));
  CheckRingBufferResult(v45, -66569, "store ring buffer");
  *(_QWORD *)(v6 + 368) += inNumberFrames;
  v38 = 0;
  *(_QWORD *)&v46.__val_ = AT::RingBuffer::GetTimeBounds(*(AT::RingBuffer **)(*(_QWORD *)(v6 + 328) + 48), (uint64_t *)&__p, &v38);
  CheckRingBufferResult(v46, -66570, "get ring buffer time bounds on store");
  if (v38 - *(_QWORD *)(v6 + 376) >= *(unsigned int *)(v6 + 336))
    std::condition_variable::notify_one((std::condition_variable *)(v7 + 64));
  v8 = *(_DWORD *)(v6 + 360);
  *(_DWORD *)(v6 + 360) = 0;
  if (v8)
  {
    Current = CFAbsoluteTimeGetCurrent();
    if (Current >= *(double *)&ExtAudioFile::WriteFramesAsync(unsigned int,AudioBufferList const*)::lastLogTime + 1.0)
    {
      v35 = CADefaultLog();
      if (v35)
      {
        v36 = v35;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v40.__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ExtAudioFile.cpp";
          WORD2(v40.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v40.__r_.__value_.__r.__words[1] + 6) = 1495;
          WORD1(v40.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v40.__r_.__value_.__r.__words[2]) = v8;
          v41 = 1024;
          v42 = ExtAudioFile::WriteFramesAsync(unsigned int,AudioBufferList const*)::messagesThrottled;
          _os_log_impl(&dword_18EE07000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d ExtAudioFileWriteAsync error %d (%d prior errors not logged)", (uint8_t *)&v40, 0x1Eu);
        }
      }
      v10 = 0;
      ExtAudioFile::WriteFramesAsync(unsigned int,AudioBufferList const*)::lastLogTime = *(_QWORD *)&Current;
    }
    else
    {
      v10 = ExtAudioFile::WriteFramesAsync(unsigned int,AudioBufferList const*)::messagesThrottled + 1;
    }
    ExtAudioFile::WriteFramesAsync(unsigned int,AudioBufferList const*)::messagesThrottled = v10;
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "", v8);
  }
  return v8;
}

void sub_18EFA1930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::mutex *v22;

  if (a2)
  {
    if (a15 < 0)
      operator delete(__p);
    std::mutex::unlock(v22);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x18EFA157CLL);
  }
  _Unwind_Resume(exception_object);
}

OSStatus ExtAudioFileSeek(ExtAudioFileRef inExtAudioFile, SInt64 inFrameOffset)
{
  ExtAudioFile *v3;

  v3 = (ExtAudioFile *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!v3)
    return -50;
  ExtAudioFile::Seek(v3, inFrameOffset);
  return 0;
}

OSStatus ExtAudioFileTell(ExtAudioFileRef inExtAudioFile, SInt64 *outFrameOffset)
{
  uint64_t v3;
  uint64_t v4;
  OSStatus result;

  if (!outFrameOffset)
    return -50;
  v3 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v3)
    return -50;
  v4 = v3;
  result = 0;
  *outFrameOffset = *(_QWORD *)(v4 + 56);
  return result;
}

OSStatus ExtAudioFileGetPropertyInfo(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  uint64_t v7;
  int v8;
  OSStatus v9;
  uint64_t v10;
  Boolean v11;
  _DWORD *exception;

  v7 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v7)
    return -50;
  if ((int)inPropertyID > 1668116594)
  {
    if ((int)inPropertyID > 1718448242)
    {
      if ((int)inPropertyID > 1768907378)
      {
        if (inPropertyID != 1768907379)
        {
          if (inPropertyID != 2020635753)
            goto LABEL_47;
          LODWORD(v10) = 16;
          goto LABEL_41;
        }
        goto LABEL_37;
      }
      if (inPropertyID != 1718448243)
      {
        if (inPropertyID != 1768907366)
          goto LABEL_47;
        LODWORD(v10) = 8;
        goto LABEL_41;
      }
    }
    else
    {
      if ((int)inPropertyID > 1717792373)
      {
        if (inPropertyID != 1717792374)
        {
          if (inPropertyID == 1717988724)
          {
            v11 = 0;
            LODWORD(v10) = 40;
            goto LABEL_42;
          }
          goto LABEL_47;
        }
        goto LABEL_37;
      }
      if (inPropertyID != 1668116595)
      {
        if (inPropertyID != 1717791855)
          goto LABEL_47;
        v10 = *(_QWORD *)(v7 + 264);
        if (v10)
LABEL_18:
          LODWORD(v10) = *(_DWORD *)(v10 + 12);
LABEL_41:
        v11 = 1;
        goto LABEL_42;
      }
    }
    v11 = 0;
    LODWORD(v10) = 4;
    goto LABEL_42;
  }
  if ((int)inPropertyID > 1634101611)
  {
    if ((int)inPropertyID <= 1667657075)
    {
      if (inPropertyID == 1634101612)
        goto LABEL_26;
      if (inPropertyID != 1667460207)
        goto LABEL_47;
      v10 = *(_QWORD *)(v7 + 272);
      if (v10)
        goto LABEL_18;
      goto LABEL_41;
    }
    if (inPropertyID == 1667657076)
    {
      LODWORD(v10) = 40;
      goto LABEL_41;
    }
    if (inPropertyID != 1668112750)
      goto LABEL_47;
LABEL_37:
    LODWORD(v10) = 4;
    goto LABEL_41;
  }
  if ((int)inPropertyID <= 1633903461)
  {
    if (inPropertyID == 593916525)
    {
      v11 = *(_DWORD *)(v7 + 188) == 1;
      goto LABEL_27;
    }
    v8 = 610889316;
LABEL_25:
    if (inPropertyID == v8)
      goto LABEL_26;
LABEL_47:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -66561;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  if (inPropertyID != 1633903462)
  {
    v8 = 1633906294;
    goto LABEL_25;
  }
LABEL_26:
  v11 = 0;
LABEL_27:
  LODWORD(v10) = 8;
LABEL_42:
  if (outSize)
    *outSize = v10;
  v9 = 0;
  if (outWritable)
    *outWritable = v11;
  return v9;
}

OSStatus ExtAudioFileGetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  uint64_t v8;
  uint64_t v9;
  OSStatus result;
  CFMutableDictionaryRef NumberFrames;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int FilePacketTable;
  _DWORD *exception;
  struct type_info *v21;
  _DWORD *v22;
  UInt32 outSize;
  _BYTE buf[18];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!ioPropertyDataSize)
    return -50;
  v8 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v8)
    return -50;
  v9 = v8;
  outSize = 0;
  result = ExtAudioFileGetPropertyInfo(inExtAudioFile, inPropertyID, &outSize, 0);
  if (!result)
  {
    if (*ioPropertyDataSize < outSize)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ExtendedAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 294;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid property size", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(4uLL);
      *exception = -66562;
LABEL_59:
      __cxa_throw(exception, v21, 0);
    }
    if ((int)inPropertyID <= 1668116594)
    {
      if ((int)inPropertyID <= 1634101611)
      {
        if ((int)inPropertyID <= 1633903461)
        {
          if (inPropertyID == 593916525)
          {
            NumberFrames = (CFMutableDictionaryRef)ExtAudioFile::GetNumberFrames((ExtAudioFile *)v9);
            goto LABEL_47;
          }
          if (inPropertyID == 610889316)
          {
            NumberFrames = ExtAudioFile::GetInstrumentation((ExtAudioFile *)v9);
LABEL_47:
            *(_QWORD *)outPropertyData = NumberFrames;
            goto LABEL_55;
          }
          goto LABEL_60;
        }
        if (inPropertyID == 1633903462)
        {
          NumberFrames = (CFMutableDictionaryRef)ExtAudioFile::GetConverterConfig(*(ExtAudioFile **)(v9 + 152));
          goto LABEL_47;
        }
        if (inPropertyID == 1633906294)
        {
          v14 = *(_QWORD *)(v9 + 152);
          goto LABEL_44;
        }
        goto LABEL_60;
      }
      if ((int)inPropertyID <= 1667657075)
      {
        if (inPropertyID == 1634101612)
        {
          v14 = *(_QWORD *)(v9 + 16);
          goto LABEL_44;
        }
        if (inPropertyID != 1667460207)
          goto LABEL_60;
        v12 = *(_QWORD *)(v9 + 272);
LABEL_22:
        if (v12)
          v13 = *(unsigned int *)(v12 + 12);
        else
          v13 = 0;
        memcpy(outPropertyData, (const void *)(v12 + 16), v13);
        goto LABEL_55;
      }
      if (inPropertyID != 1667657076)
      {
        if (inPropertyID != 1668112750)
          goto LABEL_60;
        v18 = *(_DWORD *)(v9 + 164);
        goto LABEL_52;
      }
      v15 = *(_OWORD *)(v9 + 224);
      v16 = *(_OWORD *)(v9 + 240);
      v17 = *(_QWORD *)(v9 + 256);
LABEL_50:
      *((_QWORD *)outPropertyData + 4) = v17;
      *(_OWORD *)outPropertyData = v15;
      *((_OWORD *)outPropertyData + 1) = v16;
      goto LABEL_55;
    }
    if ((int)inPropertyID > 1718448242)
    {
      if ((int)inPropertyID > 1768907378)
      {
        if (inPropertyID != 1768907379)
        {
          if (inPropertyID == 2020635753)
          {
            FilePacketTable = ExtAudioFile::GetFilePacketTable((AudioFileID *)v9, (AudioFilePacketTableInfo *)buf);
            if (FilePacketTable)
            {
              v22 = __cxa_allocate_exception(4uLL);
              *v22 = FilePacketTable;
              __cxa_throw(v22, MEMORY[0x1E0DE4EF0], 0);
            }
            *(_OWORD *)outPropertyData = *(_OWORD *)buf;
            goto LABEL_55;
          }
          goto LABEL_60;
        }
        v18 = *(_DWORD *)(v9 + 88);
      }
      else
      {
        if (inPropertyID != 1718448243)
        {
          if (inPropertyID == 1768907366)
          {
            v14 = *(_QWORD *)(v9 + 112);
LABEL_44:
            *(_QWORD *)outPropertyData = v14;
LABEL_55:
            result = 0;
            *ioPropertyDataSize = outSize;
            return result;
          }
LABEL_60:
          exception = __cxa_allocate_exception(4uLL);
          *exception = -66561;
          v21 = (struct type_info *)MEMORY[0x1E0DE4EF0];
          goto LABEL_59;
        }
        v18 = *(_DWORD *)(v9 + 280);
      }
    }
    else
    {
      if ((int)inPropertyID > 1717792373)
      {
        if (inPropertyID == 1717792374)
        {
          v18 = *(unsigned __int8 *)(v9 + 161);
          goto LABEL_52;
        }
        if (inPropertyID != 1717988724)
          goto LABEL_60;
        v15 = *(_OWORD *)(v9 + 168);
        v16 = *(_OWORD *)(v9 + 184);
        v17 = *(_QWORD *)(v9 + 200);
        goto LABEL_50;
      }
      if (inPropertyID != 1668116595)
      {
        if (inPropertyID != 1717791855)
          goto LABEL_60;
        v12 = *(_QWORD *)(v9 + 264);
        goto LABEL_22;
      }
      v18 = *(_DWORD *)(v9 + 284);
    }
LABEL_52:
    *(_DWORD *)outPropertyData = v18;
    goto LABEL_55;
  }
  return result;
}

void sub_18EFA2230(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (a2 == 4 || a2 == 3)
    {
      __cxa_begin_catch(a1);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(a1);
      __cxa_end_catch();
    }
    JUMPOUT(0x18EFA1F2CLL);
  }
  _Unwind_Resume(a1);
}

OSStatus ExtAudioFileSetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  Float64 v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v16;
  int v17;
  __n128 v18;
  OSStatus v19;
  CAXException *exception;
  Float64 v21;
  uint64_t v22;
  _DWORD *v23;
  struct type_info *v24;
  _BOOL4 v26;
  _BOOL4 *inPropertyDataa;
  int v28;
  int v29;
  AudioStreamBasicDescription buf;
  _QWORD v31[4];

  v31[3] = *MEMORY[0x1E0C80C00];
  v7 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v7)
  {
    LODWORD(v10) = -50;
    return v10;
  }
  v9 = v7;
  if ((int)inPropertyID <= 1668112749)
  {
    if ((int)inPropertyID <= 1633903461)
    {
      if (inPropertyID == 593916525)
      {
        inPropertyDataa = *(_BOOL4 **)inPropertyData;
        if (*(_DWORD *)(v7 + 188) == 1)
        {
          v19 = AudioFileSetProperty(*(AudioFileID *)(v7 + 16), 0x70636E74u, 8u, &inPropertyDataa);
          if (!v19)
            goto LABEL_48;
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v31, v19);
            LODWORD(buf.mSampleRate) = 136315906;
            *(_QWORD *)((char *)&buf.mSampleRate + 4) = "ExtAudioFile.cpp";
            LOWORD(buf.mFormatFlags) = 1024;
            *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 498;
            HIWORD(buf.mBytesPerPacket) = 2080;
            *(_QWORD *)&buf.mFramesPerPacket = v31;
            LOWORD(buf.mChannelsPerFrame) = 2080;
            *(_QWORD *)((char *)&buf.mChannelsPerFrame + 2) = "Couldn't set number of packets on audio file";
            _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&buf, 0x26u);
          }
          exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(exception, "Couldn't set number of packets on audio file", v19);
        }
        else
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v31, 0xFFFEFBFA);
            LODWORD(buf.mSampleRate) = 136315906;
            *(_QWORD *)((char *)&buf.mSampleRate + 4) = "ExtAudioFile.cpp";
            LOWORD(buf.mFormatFlags) = 1024;
            *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 497;
            HIWORD(buf.mBytesPerPacket) = 2080;
            *(_QWORD *)&buf.mFramesPerPacket = v31;
            LOWORD(buf.mChannelsPerFrame) = 2080;
            *(_QWORD *)((char *)&buf.mChannelsPerFrame + 2) = "SetNumberFrames only supported for PCM";
            _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&buf, 0x26u);
          }
          exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(exception, "SetNumberFrames only supported for PCM", -66566);
        }
      }
      if (inPropertyID == 610889331)
      {
        v17 = *(_DWORD *)inPropertyData;
        *(_BYTE *)(v7 + 408) = *(_DWORD *)inPropertyData != 0;
        if (v17)
          *(_QWORD *)(v7 + 416) = 0;
        v10 = *(_QWORD *)(v7 + 152);
        if (v10)
        {
          v26 = v17 != 0;
          v29 = 610889331;
          v28 = 4;
          inPropertyDataa = &v26;
          v31[0] = &v29;
          v31[1] = &v28;
          v31[2] = &inPropertyDataa;
          *(_QWORD *)&buf.mSampleRate = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
          *(_QWORD *)&buf.mFormatID = v31;
          with_resolved(v10, (uint64_t (**)(uint64_t, uint64_t))&buf);
          goto LABEL_48;
        }
        return v10;
      }
    }
    else
    {
      switch(inPropertyID)
      {
        case 0x61636366u:
          buf.mSampleRate = *(Float64 *)inPropertyData;
          ExtAudioFile::SetConverterProperty((ExtAudioFile *)v7, 1633906803, 8, &buf, 0, v8);
          goto LABEL_48;
        case 0x63636C6Fu:
          CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)&buf, (const AudioChannelLayout *)inPropertyData);
          v18.n128_f64[0] = ExtAudioFile::SetClientFormat((ExtAudioFile *)v9, (AudioStreamBasicDescription *)(v9 + 224), &buf);
          goto LABEL_35;
        case 0x63666D74u:
          if (inPropertyDataSize > 0x23)
          {
            v11 = *((_OWORD *)inPropertyData + 1);
            *(_OWORD *)&buf.mSampleRate = *(_OWORD *)inPropertyData;
            *(_OWORD *)&buf.mBytesPerPacket = v11;
            *(_QWORD *)&buf.mBitsPerChannel = *((_QWORD *)inPropertyData + 4);
            ExtAudioFile::SetClientFormat((ExtAudioFile *)v7, &buf, 0);
            goto LABEL_48;
          }
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.mSampleRate) = 136315394;
            *(_QWORD *)((char *)&buf.mSampleRate + 4) = "ExtendedAudioFile.cpp";
            LOWORD(buf.mFormatFlags) = 1024;
            *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 369;
            _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  bad property size", (uint8_t *)&buf, 0x12u);
          }
          v23 = __cxa_allocate_exception(4uLL);
          *v23 = -66562;
LABEL_58:
          __cxa_throw(v23, v24, 0);
      }
    }
LABEL_57:
    v23 = __cxa_allocate_exception(4uLL);
    *v23 = -66561;
    v24 = (struct type_info *)MEMORY[0x1E0DE4EF0];
    goto LABEL_58;
  }
  if ((int)inPropertyID > 1768907365)
  {
    switch(inPropertyID)
    {
      case 0x696F6266u:
        v21 = *(double *)inPropertyData;
        if (!*(_BYTE *)(v7 + 120))
        {
          v22 = *(_QWORD *)(v7 + 112);
          if (v22)
            MEMORY[0x193FFE43C](v22, 0x1000C8077774924);
        }
        *(Float64 *)(v9 + 112) = v21;
        *(_BYTE *)(v9 + 120) = *(_QWORD *)&v21 != 0;
        break;
      case 0x696F6273u:
        *(_DWORD *)(v7 + 88) = *(_DWORD *)inPropertyData;
        break;
      case 0x78707469u:
        LODWORD(v10) = 0;
        v12 = *(double *)inPropertyData;
        *(_QWORD *)(v9 + 392) = *(_QWORD *)inPropertyData;
        v13 = *((_QWORD *)inPropertyData + 1);
        *(_QWORD *)(v9 + 400) = v13;
        v14 = *(_QWORD *)&v12 - 1;
        v16 = (v13 & *((_DWORD *)inPropertyData + 3)) != 0xFFFFFFFF || v14 < 0xFFFFFFFFFFFFFFFELL;
        *(_BYTE *)(v9 + 384) = v16;
        return v10;
      default:
        goto LABEL_57;
    }
    ExtAudioFile::AllocateBuffers(v9, 0);
    LODWORD(v10) = 0;
    return v10;
  }
  if (inPropertyID != 1668112750)
  {
    if (inPropertyID != 1717791855)
    {
      if (inPropertyID == 1717792374)
      {
        *(_BYTE *)(v7 + 161) = *(_DWORD *)inPropertyData != 0;
        ExtAudioFile::SetClientFormat((ExtAudioFile *)v7, (AudioStreamBasicDescription *)(v7 + 224), 0);
LABEL_48:
        LODWORD(v10) = 0;
        return v10;
      }
      goto LABEL_57;
    }
    CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)&buf, (const AudioChannelLayout *)inPropertyData);
    CAAudioChannelLayout::operator=();
    if (*(_DWORD *)(v9 + 32) != 1)
      ExtAudioFile::FileFormatChanged((ExtAudioFile *)v9, 0, 0, 0);
LABEL_35:
    MEMORY[0x193FFDAD0](&buf, v18);
    goto LABEL_48;
  }
  LODWORD(v10) = 0;
  *(_DWORD *)(v9 + 164) = *(_DWORD *)inPropertyData;
  return v10;
}

void sub_18EFA2848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  if (a2)
  {
    __cxa_free_exception(v13);
    if (a2 == 4 || a2 == 3)
    {
      __cxa_begin_catch(exception_object);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(exception_object);
      __cxa_end_catch();
    }
    JUMPOUT(0x18EFA26A0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ParseADTSChannelConfig(CABitStreamReader *a1, int *a2, int *a3)
{
  uint64_t result;
  int Bits;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int *v20;
  int v21;

  result = CABitStreamReader::ReadBits(a1, 3u);
  if ((_DWORD)result == 5)
  {
    CABitStreamReader::ReadBits(a1, 0xAu);
    Bits = CABitStreamReader::ReadBits(a1, 4u);
    v8 = CABitStreamReader::ReadBits(a1, 4u);
    v9 = CABitStreamReader::ReadBits(a1, 4u);
    v10 = CABitStreamReader::ReadBits(a1, 2u);
    result = CABitStreamReader::ReadBits(a1, 0xAu);
    if (Bits < 1)
    {
      v11 = 0;
    }
    else
    {
      v11 = 0;
      do
      {
        if (CABitStreamReader::ReadBits(a1, 1u))
          v12 = 2;
        else
          v12 = 1;
        v11 += v12;
        result = CABitStreamReader::ReadBits(a1, 4u);
        --Bits;
      }
      while (Bits);
    }
    if (v8 < 1)
    {
      v15 = 0;
    }
    else
    {
      v15 = 0;
      do
      {
        if (CABitStreamReader::ReadBits(a1, 1u))
          v16 = 2;
        else
          v16 = 1;
        v15 += v16;
        result = CABitStreamReader::ReadBits(a1, 4u);
        --v8;
      }
      while (v8);
    }
    if (v9 < 1)
    {
      v17 = 0;
    }
    else
    {
      v17 = 0;
      do
      {
        if (CABitStreamReader::ReadBits(a1, 1u))
          v18 = 2;
        else
          v18 = 1;
        v17 += v18;
        result = CABitStreamReader::ReadBits(a1, 4u);
        --v9;
      }
      while (v9);
    }
    v13 = v11 + v10 + v15 + v17;
    v19 = (v11 << 24) | (v15 << 16) | (v17 << 8) | v10;
    if (v19 == 50331648)
    {
      v14 = 7471107;
    }
    else
    {
      v20 = &dword_18F10C138;
      do
      {
        v14 = *v20;
        if (!*v20)
          break;
        v21 = *(v20 - 1);
        v20 += 2;
      }
      while (v21 != v19);
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  *a2 = v13;
  *a3 = v14;
  return result;
}

uint64_t MPEGAudioMaximumNumberOfDependentPackets(const AudioStreamBasicDescription *a1, unsigned int a2)
{
  AudioFormatID mFormatID;
  double v4;
  double mSampleRate;
  UInt32 mBytesPerPacket;
  UInt32 mFramesPerPacket;
  UInt32 mChannelsPerFrame;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;

  mFormatID = a1->mFormatID;
  if (mFormatID - 778924081 < 2)
    return 1;
  if (mFormatID != 778924083)
    return 0;
  if (a2)
  {
    v4 = (double)a2;
    mSampleRate = a1->mSampleRate;
  }
  else
  {
    mBytesPerPacket = a1->mBytesPerPacket;
    if (mBytesPerPacket && (mFramesPerPacket = a1->mFramesPerPacket) != 0)
    {
      mSampleRate = a1->mSampleRate;
      v4 = a1->mSampleRate / (double)mFramesPerPacket * (double)mBytesPerPacket * 8.0 / 1000.0;
    }
    else
    {
      mSampleRate = a1->mSampleRate;
      v4 = 32.0;
      if (a1->mSampleRate <= 24000.0)
        v4 = 8.0;
    }
  }
  mChannelsPerFrame = a1->mChannelsPerFrame;
  if (mChannelsPerFrame == 1)
    v9 = -17;
  else
    v9 = -32;
  if (mChannelsPerFrame == 1)
    v10 = -9;
  else
    v10 = -17;
  if (mSampleRate <= 24000.0)
    v11 = v10;
  else
    v11 = v9;
  v12 = (int)(v4 * (double)(125 * a1->mFramesPerPacket) / (double)mSampleRate) + v11 - 6;
  if (v12 < 1)
  {
    if (mChannelsPerFrame == 1)
      return 18;
    else
      return 8;
  }
  else
  {
    if (mSampleRate <= 24000.0)
      v13 = 257;
    else
      v13 = 511;
    return v13 / v12 + 2;
  }
}

void MP4BoxParser_iTunesMeaningDataItem::~MP4BoxParser_iTunesMeaningDataItem(MP4BoxParser_iTunesMeaningDataItem *this)
{
  MP4BoxParser_iTunesMeaningDataItem::~MP4BoxParser_iTunesMeaningDataItem(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E2909B40;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
    free(v2);
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t MP4BoxParser_iTunesMeaningDataItem::Init(MP4BoxParser_iTunesMeaningDataItem *this)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t DataSourceBytes;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  void *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  std::bad_alloc *exception;
  std::bad_alloc *v24;
  _DWORD v25[2];
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = MP4BoxParser::Initialize(this);
  if (!(_DWORD)v2)
  {
    if (*((_DWORD *)this + 5) == 757935405)
    {
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v2 = 0;
      v8 = (*(unsigned int (**)(MP4BoxParser_iTunesMeaningDataItem *))(*(_QWORD *)this + 24))(this);
      while (1)
      {
        v9 = *((_QWORD *)this + 3);
        if (v9 <= (*(unsigned int (**)(MP4BoxParser_iTunesMeaningDataItem *))(*(_QWORD *)this + 24))(this))
          v10 = 0;
        else
          v10 = *((_QWORD *)this + 3);
        if (v10 < v7 + 8)
          return v2;
        DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v8, 8uLL, v25);
        if ((_DWORD)DataSourceBytes)
          break;
        v13 = v25[0];
        v12 = v25[1];
        v14 = *((_QWORD *)this + 3);
        if (v14 <= (*(unsigned int (**)(MP4BoxParser_iTunesMeaningDataItem *))(*(_QWORD *)this + 24))(this))
          v15 = 0;
        else
          v15 = *((_QWORD *)this + 3);
        v16 = bswap32(v13);
        v7 += v16;
        if (v15 < v7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v27 = "MP4_BoxParser_Meta.cpp";
            v28 = 1024;
            v29 = 521;
            v20 = MEMORY[0x1E0C81028];
            v21 = "%25s:%-5d  '----' box is too small for the child box size";
            goto LABEL_46;
          }
          return 0xFFFFFFFFLL;
        }
        if (v16 <= 7)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return 0xFFFFFFFFLL;
          *(_DWORD *)buf = 136315394;
          v27 = "MP4_BoxParser_Meta.cpp";
          v28 = 1024;
          v29 = 522;
          v20 = MEMORY[0x1E0C81028];
          v21 = "%25s:%-5d  child box size is too small for its box header";
LABEL_46:
          _os_log_impl(&dword_18EE07000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0x12u);
          return 0xFFFFFFFFLL;
        }
        v17 = bswap32(v12);
        switch(v17)
        {
          case 0x64617461u:
            if (v3)
            {
              v2 = 0;
            }
            else
            {
              if (v16 <= 0xF)
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  return 0xFFFFFFFFLL;
                *(_DWORD *)buf = 136315394;
                v27 = "MP4_BoxParser_Meta.cpp";
                v28 = 1024;
                v29 = 571;
                v20 = MEMORY[0x1E0C81028];
                v21 = "%25s:%-5d  'data' box is too small to contain data";
                goto LABEL_46;
              }
              v2 = 0;
              *((_QWORD *)this + 10) = v8 + 16;
              *((_DWORD *)this + 18) = v16 - 16;
              ++v6;
            }
            v3 = 1;
            break;
          case 0x6E616D65u:
            if (v4)
            {
              v2 = 0;
            }
            else
            {
              if (v16 <= 0xB)
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  return 0xFFFFFFFFLL;
                *(_DWORD *)buf = 136315394;
                v27 = "MP4_BoxParser_Meta.cpp";
                v28 = 1024;
                v29 = 548;
                v20 = MEMORY[0x1E0C81028];
                v21 = "%25s:%-5d  'name' box is too small to contain a name";
                goto LABEL_46;
              }
              *((_DWORD *)this + 14) = v16 - 12;
              v18 = malloc_type_malloc((v16 - 12), 0x2C8E6D5CuLL);
              v19 = v18;
              if ((_DWORD)v16 != 12 && !v18)
              {
                exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                v24 = std::bad_alloc::bad_alloc(exception);
              }
              bzero(v18, (v16 - 12));
              *((_QWORD *)this + 8) = v19;
              v2 = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v8 + 12, *((unsigned int *)this + 14), v19);
              if ((_DWORD)v2)
              {
                free(*((void **)this + 8));
                *((_QWORD *)this + 8) = 0;
                *((_DWORD *)this + 14) = 0;
              }
              ++v6;
            }
            v4 = 1;
            break;
          case 0x6D65616Eu:
            if (v5)
            {
              v2 = 0;
            }
            else
            {
              if (v16 <= 0xB)
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  return 0xFFFFFFFFLL;
                *(_DWORD *)buf = 136315394;
                v27 = "MP4_BoxParser_Meta.cpp";
                v28 = 1024;
                v29 = 530;
                v20 = MEMORY[0x1E0C81028];
                v21 = "%25s:%-5d  'mean' box is too small to contain a meaning";
                goto LABEL_46;
              }
              v2 = 0;
              ++v6;
            }
            v5 = 1;
            break;
          default:
            v2 = 0;
            break;
        }
        v8 += v16;
        if (v6 >= 3)
          return v2;
      }
      v2 = DataSourceBytes;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v27 = "MP4_BoxParser_Meta.cpp";
        v28 = 1024;
        v29 = 516;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to read child box header", buf, 0x12u);
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return v2;
}

void MP4BoxParser_iTunesDataItem::~MP4BoxParser_iTunesDataItem(MP4BoxParser_iTunesDataItem *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_iTunesDataItem::Init(MP4BoxParser **this)
{
  uint64_t result;
  unsigned int v3;

  result = MP4BoxParser::Initialize((MP4BoxParser *)this);
  if (!(_DWORD)result)
  {
    v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
    if (MP4BoxParser::ReadDataSourceBytes(this[1], v3, 0x10uLL, this + 7)
      || *((_DWORD *)this + 15) != 1635017060)
    {
      bzero(this + 7, 0x10uLL);
      return 4294966295;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void MP4BoxParser_Meta::~MP4BoxParser_Meta(MP4BoxParser_Meta *this)
{
  MP4BoxParser_Meta::~MP4BoxParser_Meta(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E29071E0;
  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    std::__list_imp<MP4BoxInfo>::clear(*((uint64_t **)this + 8));
    MEMORY[0x193FFE460](v2, 0x1020C4062D53EE8);
  }
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t MP4BoxParser_Meta::Init(MP4BoxParser_Meta *this)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(MP4BoxParser *__hidden);
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  result = MP4BoxParser_Full::Initialize(this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) == 1835365473)
    {
      v3 = (_QWORD *)operator new();
      *v3 = v3;
      v3[1] = v3;
      v3[2] = 0;
      *((_QWORD *)this + 8) = v3;
      v4 = *((_QWORD *)this + 1);
      v5 = (*(uint64_t (**)(MP4BoxParser_Meta *))(*(_QWORD *)this + 24))(this);
      FillMP4BoxTable(v4, v5, *((_QWORD *)this + 3), *((__n128 ***)this + 8), 1, 0);
      v6 = *((_QWORD *)this + 8);
      v7 = *(_QWORD *)(v6 + 8);
      if (v7 != v6)
      {
        while (*(_DWORD *)(v7 + 16) != 1751411826)
        {
          v7 = *(_QWORD *)(v7 + 8);
          if (v7 == v6)
            return 0;
        }
        v8 = *((_QWORD *)this + 1);
        v10 = &off_1E2902718;
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v8 + 88))(&v11);
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = 8;
        v10 = &off_1E2909600;
        if (!MP4BoxParser_HandlerReference::Init((MP4BoxParser **)&v10))
          *((_DWORD *)this + 18) = v17;
        v9 = v11;
        v10 = &off_1E2902718;
        v11 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      return 0;
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

void sub_18EFA3444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void MP4BoxParser_iTunesMeta::~MP4BoxParser_iTunesMeta(MP4BoxParser_iTunesMeta *this)
{
  MP4BoxParser_Meta::~MP4BoxParser_Meta(this);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_iTunesMeta::Init(MP4BoxParser_iTunesMeta *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = MP4BoxParser_Meta::Init(this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 18) != 1835297138)
      return 4294966295;
    v3 = *((_QWORD *)this + 8);
    v4 = *(_QWORD *)(v3 + 8);
    if (v4 == v3)
    {
      return 4294966295;
    }
    else
    {
      while (*(_DWORD *)(v4 + 16) != 1768715124)
      {
        v4 = *(_QWORD *)(v4 + 8);
        if (v4 == v3)
          return 4294966295;
      }
      return 0;
    }
  }
  return result;
}

void MP4BoxParser_iTunesSMPBMeta::~MP4BoxParser_iTunesSMPBMeta(MP4BoxParser_iTunesSMPBMeta *this)
{
  MP4BoxParser_Meta::~MP4BoxParser_Meta(this);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_iTunesSMPBMeta::Init(AudioFilePacketTableInfo *this)
{
  uint64_t v2;
  unsigned int DataSizeForMeaningName;
  size_t v4;
  char *v5;
  char *v6;
  unsigned int *v7;
  std::bad_alloc *exception;
  std::bad_alloc *v10;
  SInt32 mRemainderFrames;

  v2 = MP4BoxParser_iTunesMeta::Init((MP4BoxParser_iTunesMeta *)this);
  if (!(_DWORD)v2)
  {
    DataSizeForMeaningName = MP4BoxParser_iTunesMeta::GetDataSizeForMeaningName((MP4BoxParser_iTunesMeta *)this, "iTunSMPB");
    this[4].mRemainderFrames = DataSizeForMeaningName;
    if (DataSizeForMeaningName)
    {
      v4 = DataSizeForMeaningName;
      v5 = (char *)malloc_type_malloc(DataSizeForMeaningName, 0x2C8E6D5CuLL);
      if (!v5)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v10 = std::bad_alloc::bad_alloc(exception);
      }
      v6 = v5;
      bzero(v5, v4);
      mRemainderFrames = this[4].mRemainderFrames;
      if (MP4BoxParser_iTunesMeta::GetDataForMeaningName((MP4BoxParser_iTunesMeta *)this, "iTunSMPB", v6, (unsigned int *)&mRemainderFrames, v7))v2 = 0;
      else
        v2 = ParseiTunesSMPBData(v6 + 9, mRemainderFrames - 9, this + 5);
      free(v6);
    }
    else
    {
      return 4294966295;
    }
  }
  return v2;
}

const char *MP4BoxParser_iTunesMeta::GetDataSizeForMeaningName(MP4BoxParser_iTunesMeta *this, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(MP4BoxParser *__hidden);
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  char *__s1;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 8);
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 == v2)
    return 0;
  v5 = *(_QWORD *)(v2 + 8);
  while (*(_DWORD *)(v5 + 16) != 1768715124)
  {
    v5 = *(_QWORD *)(v5 + 8);
    if (v5 == v2)
      return 0;
  }
  while (*(_DWORD *)(v3 + 16) != 1768715124)
  {
    v3 = *(_QWORD *)(v3 + 8);
    if (v3 == v2)
      return 0;
  }
  v7 = *(_QWORD *)(v3 + 40);
  if (!v7)
    return 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 88))(&v21, *((_QWORD *)this + 1), *(_QWORD *)(v5 + 32));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, *(_QWORD *)(v5 + 24));
  v8 = *(_QWORD *)(v7 + 8);
  if (v8 == v7)
    goto LABEL_35;
  v9 = 0;
  while (2)
  {
    v10 = 0;
    v11 = v8;
    do
    {
      if (*(_DWORD *)(v11 + 16) == 757935405)
        ++v10;
      v11 = *(_QWORD *)(v11 + 8);
    }
    while (v11 != v7);
    if (v9 >= v10)
      break;
    v12 = 0;
    v13 = v8;
    while (*(_DWORD *)(v13 + 16) != 757935405)
    {
LABEL_21:
      v13 = *(_QWORD *)(v13 + 8);
      if (v13 == v7)
        goto LABEL_34;
    }
    if (v12 != v9)
    {
      ++v12;
      goto LABEL_21;
    }
    v14 = *(_QWORD *)(v13 + 32);
    v22 = &off_1E2902718;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 88))(&v23, v21, v14);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v22 = &off_1E2909B40;
    v28 = 8;
    v29 = 0;
    __s1 = 0;
    v31 = 0;
    v32 = 0;
    v15 = MP4BoxParser_iTunesMeaningDataItem::Init((MP4BoxParser_iTunesMeaningDataItem *)&v22);
    v16 = __s1;
    if (v15)
      goto LABEL_24;
    if (__s1 && v29 == 8)
    {
      if (!strncmp(__s1, a2, 8uLL))
      {
        a2 = (const char *)v31;
        v22 = &off_1E2909B40;
        free(v16);
        v20 = v23;
        v22 = &off_1E2902718;
        v23 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        v18 = 0;
        goto LABEL_36;
      }
      v22 = &off_1E2909B40;
LABEL_30:
      free(v16);
    }
    else
    {
LABEL_24:
      v22 = &off_1E2909B40;
      if (__s1)
        goto LABEL_30;
    }
    v17 = v23;
    v22 = &off_1E2902718;
    v23 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v8 = *(_QWORD *)(v7 + 8);
LABEL_34:
    ++v9;
    if (v8 != v7)
      continue;
    break;
  }
LABEL_35:
  v18 = 1;
LABEL_36:
  v19 = v21;
  v21 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if ((v18 & 1) != 0)
    return 0;
  return a2;
}

void sub_18EFA3924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_iTunesMeta::GetDataForMeaningName(MP4BoxParser_iTunesMeta *this, const char *a2, void *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  unint64_t v22;
  MP4BoxParser *v23;
  int DataSourceBytes;
  MP4BoxParser *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  void (**v30)(MP4BoxParser *__hidden);
  MP4BoxParser *v31;
  char v32;
  int v33;
  uint64_t v34;
  char v35;
  int v36;
  int v37;
  char *__s1;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 8);
  v6 = *(_QWORD *)(v5 + 8);
  if (v6 == v5)
    return 4294966295;
  v10 = *(_QWORD *)(v5 + 8);
  while (*(_DWORD *)(v10 + 16) != 1768715124)
  {
    v10 = *(_QWORD *)(v10 + 8);
    if (v10 == v5)
      return 4294966295;
  }
  while (*(_DWORD *)(v6 + 16) != 1768715124)
  {
    v6 = *(_QWORD *)(v6 + 8);
    if (v6 == v5)
      return 4294966295;
  }
  v12 = *(_QWORD *)(v6 + 40);
  if (!v12)
    return 4294966295;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, void *, unsigned int *, unsigned int *))(**((_QWORD **)this + 1) + 88))(&v29, *((_QWORD *)this + 1), *(_QWORD *)(v10 + 32), a3, a4, a5);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, *(_QWORD *)(v10 + 24));
  v13 = *(_QWORD *)(v12 + 8);
  if (v13 == v12)
    goto LABEL_44;
  v14 = 0;
  while (2)
  {
    v15 = 0;
    v16 = v13;
    do
    {
      if (*(_DWORD *)(v16 + 16) == 757935405)
        ++v15;
      v16 = *(_QWORD *)(v16 + 8);
    }
    while (v16 != v12);
    if (v14 >= v15)
      break;
    v17 = 0;
    v18 = v13;
    while (*(_DWORD *)(v18 + 16) != 757935405)
    {
LABEL_20:
      v18 = *(_QWORD *)(v18 + 8);
      if (v18 == v12)
        goto LABEL_33;
    }
    if (v17 != v14)
    {
      ++v17;
      goto LABEL_20;
    }
    v19 = *(_QWORD *)(v18 + 32);
    v30 = &off_1E2902718;
    (*(void (**)(MP4BoxParser **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v29 + 88))(&v31, v29, v19);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v30 = &off_1E2909B40;
    v36 = 8;
    v37 = 0;
    __s1 = 0;
    v39 = 0;
    v40 = 0;
    v20 = MP4BoxParser_iTunesMeaningDataItem::Init((MP4BoxParser_iTunesMeaningDataItem *)&v30);
    v21 = __s1;
    if (v20)
      goto LABEL_23;
    if (__s1)
    {
      if (strncmp(__s1, a2, 8uLL) || (v22 = *a4, v22 < v39))
      {
        v30 = &off_1E2909B40;
        goto LABEL_29;
      }
      v28 = v39;
      DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(v31, v40, v22, a3);
      v21 = __s1;
      if (!DataSourceBytes)
      {
        *a4 = v28;
        v30 = &off_1E2909B40;
        if (v21)
          free(v21);
        v25 = v31;
        v30 = &off_1E2902718;
        v31 = 0;
        if (v25)
          (*(void (**)(MP4BoxParser *))(*(_QWORD *)v25 + 8))(v25);
        v26 = v29;
        v29 = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        return 0;
      }
LABEL_23:
      v30 = &off_1E2909B40;
      if (v21)
LABEL_29:
        free(v21);
    }
    else
    {
      v30 = &off_1E2909B40;
    }
    v23 = v31;
    v30 = &off_1E2902718;
    v31 = 0;
    if (v23)
      (*(void (**)(MP4BoxParser *))(*(_QWORD *)v23 + 8))(v23);
    v13 = *(_QWORD *)(v12 + 8);
LABEL_33:
    ++v14;
    if (v13 != v12)
      continue;
    break;
  }
LABEL_44:
  v27 = v29;
  v29 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  return 4294966295;
}

void sub_18EFA3C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (a19)
    free(a19);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void MP4BoxParser_iTunesNORMMeta::~MP4BoxParser_iTunesNORMMeta(MP4BoxParser_iTunesNORMMeta *this)
{
  MP4BoxParser_Meta::~MP4BoxParser_Meta(this);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_iTunesNORMMeta::Init(MP4BoxParser_iTunesNORMMeta *this)
{
  uint64_t result;
  unsigned int DataSizeForMeaningName;

  result = MP4BoxParser_Meta::Init(this);
  if (!(_DWORD)result)
  {
    DataSizeForMeaningName = MP4BoxParser_iTunesMeta::GetDataSizeForMeaningName(this, "iTunNORM");
    *((_DWORD *)this + 19) = DataSizeForMeaningName;
    if (DataSizeForMeaningName)
      return 0;
    else
      return 4294966295;
  }
  return result;
}

uint64_t InitiiTunesMetaItemFromInfoDictionary(unsigned __int8 *a1, unsigned int a2, const __CFDictionary *a3, int a4, int *a5)
{
  uint64_t v9;
  const __CFString *InfoDictionaryKeyForMetaItemKey;
  char String;
  const __CFString *v12;
  unint64_t v13;
  int v14;
  unsigned int Length;
  char *v16;
  SInt32 IntValue;
  size_t v18;
  const __CFString *v19;
  char *v20;
  CFStringEncoding SystemEncoding;
  unint64_t v22;
  BOOL v23;
  char *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 v28;
  int v29;
  char *buffer;
  CFIndex usedBufLen;
  const __CFDictionary *v33;
  __int16 v34;
  CFStringRef theString;
  CFRange v36;

  if (!a1 || a2 >= 0x10)
  {
    theString = 0;
    v33 = a3;
    v34 = 0;
    InfoDictionaryKeyForMetaItemKey = GetInfoDictionaryKeyForMetaItemKey(a4);
    String = CACFDictionary::GetString((CACFDictionary *)&v33, InfoDictionaryKeyForMetaItemKey, &theString);
    v12 = theString;
    if (!theString)
      String = 0;
    if ((String & 1) == 0)
    {
      v9 = 4294966294;
      goto LABEL_84;
    }
    v13 = a2;
    *a5 = 0;
    v9 = 4294966295;
    if (a4 > -1452051406)
    {
      if (a4 <= 1668313715)
      {
        if (a4 != -1452051405 && a4 != -1451987089)
        {
          v14 = -1451789708;
          goto LABEL_25;
        }
      }
      else
      {
        if (a4 > 1953329262)
        {
          if (a4 != 1953655662)
          {
            if (a4 != 1953329263)
              goto LABEL_84;
            IntValue = CFStringGetIntValue(v12);
            if (!a1)
            {
              Length = 2;
              goto LABEL_83;
            }
            *((_WORD *)a1 + 12) = bswap32(IntValue) >> 16;
            *((_DWORD *)a1 + 1) = 1869639028;
            Length = 2;
            goto LABEL_54;
          }
          LOWORD(usedBufLen) = 0;
          LOWORD(buffer) = 0;
          if (ParseTrackNumberString(v12, (unsigned __int16 *)&usedBufLen, (unsigned __int16 *)&buffer))
          {
            if (a1)
            {
              if (a2 < 0x20)
                goto LABEL_84;
              v26 = bswap32((unsigned __int16)usedBufLen) >> 16;
              v27 = bswap32((unsigned __int16)buffer) >> 16;
              *((_WORD *)a1 + 12) = 0;
              *((_WORD *)a1 + 13) = v26;
              *((_DWORD *)a1 + 7) = (unsigned __int16)v27;
            }
            Length = 8;
            goto LABEL_46;
          }
LABEL_45:
          Length = 0;
LABEL_46:
          v23 = 0;
          goto LABEL_47;
        }
        if (a4 != 1668313716)
        {
          v14 = 1769173603;
          goto LABEL_25;
        }
      }
    }
    else
    {
      if (a4 > -1453101709)
      {
        if (a4 > -1452841619)
        {
          if (a4 == -1452841618)
          {
            Length = CFStringGetLength(v12);
            v18 = Length + 1;
            CADeprecated::CAAutoFree<char>::CAAutoFree(&usedBufLen, v18);
            v19 = theString;
            v20 = (char *)usedBufLen;
            SystemEncoding = CFStringGetSystemEncoding();
            CFStringGetCString(v19, v20, v18, SystemEncoding);
            v22 = 0;
            v23 = 1;
            v24 = (char *)usedBufLen;
            while (strcmp(v24, kGenreTable[v22]))
            {
              v23 = v22++ < 0x93;
              if (v22 == 148)
              {
                v23 = 0;
                v25 = 1;
                goto LABEL_68;
              }
            }
            if (v23)
              Length = 2;
            v25 = v22 + 1;
LABEL_68:
            if (a1)
            {
              if ((unint64_t)Length + 24 > v13)
              {
                if (v24)
                  free(v24);
                goto LABEL_29;
              }
              if (v23)
              {
                *((_DWORD *)a1 + 6) = bswap32(v25) >> 16;
              }
              else
              {
                memcpy(a1 + 24, v24, Length);
                v23 = 0;
              }
            }
            if (v24)
              free(v24);
LABEL_47:
            if (!a1)
            {
LABEL_83:
              v9 = 0;
              *a5 = Length + 24;
              goto LABEL_84;
            }
            if (v23)
            {
              v28 = 0;
              *((_DWORD *)a1 + 1) = 1701998183;
LABEL_82:
              a1[19] = v28;
              *(_DWORD *)a1 = bswap32(Length + 24);
              *((_DWORD *)a1 + 2) = bswap32(Length + 16);
              *((_DWORD *)a1 + 3) = 1635017060;
              *((_WORD *)a1 + 8) = 0;
              a1[18] = 0;
              *((_DWORD *)a1 + 5) = 0;
              goto LABEL_83;
            }
            *((_DWORD *)a1 + 1) = bswap32(a4);
            v28 = 1;
            if (a4 <= -1451987090)
            {
              if (a4 > -1453039240)
              {
                if (a4 > -1452383892)
                {
                  if (a4 == -1452383891)
                    goto LABEL_82;
                  v29 = -1452051405;
                }
                else
                {
                  if (a4 == -1453039239)
                    goto LABEL_82;
                  v29 = -1452841618;
                }
              }
              else if (a4 > -1453230733)
              {
                if (a4 == -1453230732)
                  goto LABEL_82;
                v29 = -1453101708;
              }
              else
              {
                if (a4 == -1455336876)
                  goto LABEL_82;
                v29 = -1453233054;
              }
            }
            else if (a4 <= 1769173602)
            {
              if (a4 > 1668313715)
              {
                if (a4 == 1668313716)
                  goto LABEL_82;
                goto LABEL_81;
              }
              if (a4 == -1451987089)
                goto LABEL_82;
              v29 = -1451789708;
            }
            else
            {
              if (a4 > 1937009002)
              {
                if (a4 == 1937009003)
                {
LABEL_54:
                  v28 = 21;
                  goto LABEL_82;
                }
LABEL_81:
                v28 = 0;
                goto LABEL_82;
              }
              if (a4 == 1769173603)
                goto LABEL_82;
              v29 = 1886745188;
            }
            if (a4 == v29)
              goto LABEL_82;
            goto LABEL_81;
          }
          v14 = -1452383891;
        }
        else
        {
          if (a4 == -1453101708)
            goto LABEL_26;
          v14 = -1453039239;
        }
LABEL_25:
        if (a4 == v14)
          goto LABEL_26;
LABEL_84:
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v33);
        return v9;
      }
      if (a4 != -1455336876 && a4 != -1453233054)
      {
        v14 = -1453230732;
        goto LABEL_25;
      }
    }
LABEL_26:
    v36.length = CFStringGetLength(v12);
    usedBufLen = 0;
    v36.location = 0;
    if (CFStringGetBytes(theString, v36, 0x8000100u, 0, 0, 0, 256, &usedBufLen))
    {
      Length = usedBufLen;
      if (a1)
      {
        if ((unint64_t)usedBufLen + 24 > a2)
        {
LABEL_29:
          v9 = 4294966295;
          goto LABEL_84;
        }
        CADeprecated::CAAutoFree<char>::CAAutoFree(&buffer, (usedBufLen + 1));
        CFStringGetCString(theString, buffer, Length + 1, 0x8000100u);
        v16 = buffer;
        memcpy(a1 + 24, buffer, Length);
        if (v16)
          free(v16);
      }
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  return 4294966295;
}

void sub_18EFA4300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a12);
  _Unwind_Resume(a1);
}

const __CFString *GetInfoDictionaryKeyForMetaItemKey(int a1)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  int v6;
  const __CFString *v7;
  BOOL v8;
  const __CFString *v9;
  BOOL v10;
  const __CFString *v11;
  const __CFString *v12;

  if (a1 <= -1452051406)
  {
    if (a1 <= -1453101709)
    {
      v6 = -1455336876;
      v7 = CFSTR("artist");
      if (a1 == -1453230732)
        v12 = CFSTR("lyricist");
      else
        v12 = 0;
      if (a1 == -1453233054)
        v9 = CFSTR("album");
      else
        v9 = v12;
LABEL_35:
      if (a1 == v6)
        return v7;
      else
        return v9;
    }
    if (a1 > -1452841619)
    {
      if (a1 != -1452841618)
      {
        v10 = a1 == -1452383891;
        v11 = CFSTR("title");
LABEL_29:
        if (v10)
          return v11;
        else
          return 0;
      }
      return CFSTR("genre");
    }
    v6 = -1453101708;
    v7 = CFSTR("comments");
    v8 = a1 == -1453039239;
    v9 = CFSTR("year");
LABEL_33:
    if (!v8)
      v9 = 0;
    goto LABEL_35;
  }
  if (a1 > 1735291492)
  {
    if (a1 <= 1953329262)
    {
      if (a1 != 1735291493)
      {
        v10 = a1 == 1769173603;
        v11 = CFSTR("ISRC");
        goto LABEL_29;
      }
      return CFSTR("genre");
    }
    v6 = 1953329263;
    v7 = CFSTR("tempo");
    v8 = a1 == 1953655662;
    v9 = CFSTR("track number");
    goto LABEL_33;
  }
  v1 = CFSTR("copyright");
  if (a1 != 1668313716)
    v1 = 0;
  if (a1 == -1451789708)
    v2 = CFSTR("composer");
  else
    v2 = v1;
  v3 = CFSTR("subtitle");
  v4 = CFSTR("encoding application");
  if (a1 != -1451987089)
    v4 = 0;
  if (a1 != -1452051405)
    v3 = v4;
  if (a1 <= -1451789709)
    return v3;
  else
    return v2;
}

_QWORD *CADeprecated::CAAutoFree<char>::CAAutoFree(_QWORD *a1, size_t size)
{
  void *v4;
  void *v5;
  std::bad_alloc *exception;
  std::bad_alloc *v8;

  *a1 = 0;
  v4 = malloc_type_malloc(size, 0x2C8E6D5CuLL);
  v5 = v4;
  if (size && !v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v8 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v4, size);
  *a1 = v5;
  return a1;
}

BOOL ParseTrackNumberString(const __CFString *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int Length;
  size_t v7;
  char *v8;
  CFStringEncoding SystemEncoding;
  char *v10;
  uint64_t v11;
  unsigned __int16 v12;
  __int16 v13;
  int v14;
  _BOOL8 v15;
  int v17;
  char *v18;

  Length = CFStringGetLength(a1);
  v7 = Length + 1;
  CADeprecated::CAAutoFree<char>::CAAutoFree(&v18, v7);
  v8 = v18;
  SystemEncoding = CFStringGetSystemEncoding();
  CFStringGetCString(a1, v8, v7, SystemEncoding);
  v17 = 0;
  v10 = v18;
  if (Length)
  {
    v11 = 0;
    v12 = Length;
    while (v18[v11] - 48 <= 9)
    {
      if (Length == ++v11)
        goto LABEL_9;
    }
    if (!(_WORD)v11)
    {
      v15 = 0;
      goto LABEL_20;
    }
    sscanf(v18, "%d", &v17);
    *a2 = v17;
    v12 = v11 + 1;
    v10 = v18;
  }
  else
  {
    v12 = 0;
  }
LABEL_9:
  if (v12 >= Length)
  {
LABEL_16:
    v15 = *a2 != 0;
    if (!v10)
      return v15;
  }
  else
  {
    v13 = 0;
    v14 = v12;
    while (v10[v14] - 48 <= 9)
    {
      ++v13;
      if (++v14 > Length)
        goto LABEL_18;
    }
    if (v13)
    {
      sscanf(&v10[v12], "%d", &v17);
      *a3 = v17;
      v10 = v18;
      goto LABEL_16;
    }
LABEL_18:
    v15 = *a2 != 0;
  }
LABEL_20:
  free(v10);
  return v15;
}

void sub_18EFA4704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12)
    free(a12);
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(MP4BoxParser_iTunesMeta *this, int a2, CACFDictionary *a3)
{
  uint64_t v5;
  int v6;
  const __CFString *v7;
  const __CFString *InfoDictionaryKeyForMetaItemKey;
  const void *v9;
  const __CFNumber *v11;
  CFTypeID v12;
  const __CFData *v13;
  __CFString *TrackNumberString;
  __CFString *v15;
  CFTypeID v16;
  const __CFLocale *System;
  const __CFAllocator *v18;
  __CFNumberFormatter *v19;
  __CFNumberFormatter *v20;
  const __CFString *StringWithNumber;
  const __CFString *v22;
  int valuePtr;
  CFStringRef theString;

  v5 = 4294966295;
  if (a2 <= -1452051406)
  {
    if (a2 <= -1453101709)
    {
      if (a2 == -1455336876 || a2 == -1453233054)
        goto LABEL_21;
      v6 = -1453230732;
    }
    else if (a2 > -1452841619)
    {
      if (a2 == -1452841618)
        goto LABEL_21;
      v6 = -1452383891;
    }
    else
    {
      if (a2 == -1453101708)
        goto LABEL_21;
      v6 = -1453039239;
    }
LABEL_20:
    if (a2 != v6)
      return v5;
    goto LABEL_21;
  }
  if (a2 > 1735291492)
  {
    if (a2 <= 1953329262)
    {
      if (a2 == 1735291493)
        goto LABEL_21;
      v6 = 1769173603;
      goto LABEL_20;
    }
    if (a2 == 1953329263)
    {
      theString = 0;
      v5 = MP4BoxParser_iTunesMeta::CopyMetaItemData(this, 1953329263, (const void **)&theString);
      if ((_DWORD)v5)
        return v5;
      v11 = (const __CFNumber *)theString;
      if (!theString)
        return v5;
      valuePtr = 0;
      v16 = CFGetTypeID(theString);
      v5 = 0;
      if (v16 != CFNumberGetTypeID()
        || (v5 = 0, !CFNumberGetValue(v11, kCFNumberSInt32Type, &valuePtr))
        || valuePtr < 1)
      {
LABEL_46:
        v9 = v11;
LABEL_27:
        CFRelease(v9);
        return v5;
      }
      System = CFLocaleGetSystem();
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v19 = CFNumberFormatterCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], System, kCFNumberFormatterDecimalStyle);
      if (v19)
      {
        v20 = v19;
        StringWithNumber = CFNumberFormatterCreateStringWithNumber(v18, v19, v11);
        if (StringWithNumber)
        {
          v22 = StringWithNumber;
          if (CFStringGetLength(StringWithNumber))
          {
            CACFDictionary::AddString(a3, CFSTR("tempo"), v22);
            v5 = 0;
          }
          else
          {
            v5 = 4294966295;
          }
          CFRelease(v22);
        }
        else
        {
          v5 = 0;
        }
        CFRelease(v20);
        goto LABEL_46;
      }
    }
    else
    {
      if (a2 != 1953655662)
        return v5;
      theString = 0;
      v5 = MP4BoxParser_iTunesMeta::CopyMetaItemData(this, 1953655662, (const void **)&theString);
      if ((_DWORD)v5)
        return v5;
      v11 = (const __CFNumber *)theString;
      if (!theString)
        return v5;
      v12 = CFGetTypeID(theString);
      if (v12 == CFDataGetTypeID())
      {
        TrackNumberString = MP4BoxParser_iTunesMeta::CreateTrackNumberString(v11, v13);
        if (!TrackNumberString)
        {
          v5 = 4294966295;
          goto LABEL_46;
        }
        v15 = TrackNumberString;
        CACFDictionary::AddString(a3, CFSTR("track number"), TrackNumberString);
        CFRelease(v15);
      }
    }
    v5 = 0;
    goto LABEL_46;
  }
  if (a2 > -1451789709)
  {
    if (a2 == -1451789708)
      goto LABEL_21;
    v6 = 1668313716;
    goto LABEL_20;
  }
  if (a2 != -1452051405)
  {
    v6 = -1451987089;
    goto LABEL_20;
  }
LABEL_21:
  theString = 0;
  v5 = MP4BoxParser_iTunesMeta::CopyMetaItemData(this, a2, (const void **)&theString);
  if (!(_DWORD)v5)
  {
    v7 = theString;
    if (theString)
    {
      if (CFStringGetLength(theString))
      {
        InfoDictionaryKeyForMetaItemKey = GetInfoDictionaryKeyForMetaItemKey(a2);
        CACFDictionary::AddString(a3, InfoDictionaryKeyForMetaItemKey, v7);
        v5 = 0;
      }
      else
      {
        v5 = 4294966295;
      }
      v9 = v7;
      goto LABEL_27;
    }
  }
  return v5;
}

uint64_t MP4BoxParser_iTunesMeta::CopyMetaItemData(MP4BoxParser_iTunesMeta *this, int a2, const void **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t DataSourceBytes;
  uint64_t v10;
  uint64_t i;
  size_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  BOOL v15;
  unsigned int v16;
  const void *v17;
  int v18;
  unsigned int v19;
  const char *v20;
  int v21;
  unsigned int v22;
  MP4BoxParser *v23;
  uint64_t v24;
  const void *v25;
  std::bad_alloc *exception;
  std::bad_alloc *v27;
  unint64_t v28;
  uint64_t v29;
  void (**v30)(MP4BoxParser *__hidden);
  MP4BoxParser *v31;
  char v32;
  int v33;
  uint64_t v34;
  char v35;
  int v36;
  unsigned int v37;
  unsigned __int8 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 8);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 == v3)
    return 4294966295;
  v7 = *(_QWORD *)(v3 + 8);
  while (*(_DWORD *)(v7 + 16) != 1768715124)
  {
    v7 = *(_QWORD *)(v7 + 8);
    if (v7 == v3)
      return 4294966295;
  }
  while (*(_DWORD *)(v4 + 16) != 1768715124)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v3)
      return 4294966295;
  }
  v10 = *(_QWORD *)(v4 + 40);
  if (!v10)
    return 4294966295;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 88))(&v29, *((_QWORD *)this + 1), *(_QWORD *)(v7 + 32));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, *(_QWORD *)(v7 + 24));
  for (i = *(_QWORD *)(v10 + 8); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v10)
    {
      DataSourceBytes = 4294966295;
      goto LABEL_52;
    }
    if (*(_DWORD *)(i + 16) == a2)
      break;
  }
  v30 = &off_1E2902718;
  (*(void (**)(MP4BoxParser **__return_ptr))(*(_QWORD *)v29 + 88))(&v31);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 8;
  v30 = &off_1E2909488;
  DataSourceBytes = MP4BoxParser_iTunesDataItem::Init((MP4BoxParser **)&v30);
  if ((_DWORD)DataSourceBytes)
    goto LABEL_50;
  v12 = bswap32(v37) - 16;
  v13 = (unsigned __int16 *)malloc_type_malloc(v12, 0x2C8E6D5CuLL);
  v14 = v13;
  if (v13)
    v15 = 1;
  else
    v15 = (_DWORD)v12 == 0;
  if (!v15)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v27 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v13, v12);
  v16 = ((uint64_t (*)(MP4BoxParser *))v30[3])((MP4BoxParser *)&v30);
  DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(v31, v16 + 16, v12, v14);
  if (!(_DWORD)DataSourceBytes)
  {
    DataSourceBytes = 4294966293;
    if (v38 <= 0xCu)
    {
      if (v38)
      {
        if (v38 != 1)
          goto LABEL_48;
        v17 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v14, v12, 0x8000100u, 0);
        goto LABEL_32;
      }
      if (a2 == 1668249202)
      {
        puts("kiTunesArtworkKey");
        goto LABEL_47;
      }
      if (a2 != 1953655662)
      {
        if (a2 != 1735291493)
          goto LABEL_48;
        if (v12 >= 2)
        {
          v18 = (int)bswap32(*v14) >> 16;
          if (v18 <= 147)
          {
            v19 = v18 - 1;
            if (v19 <= 0x93)
              v20 = kGenreTable[v19];
            else
              v20 = "Blues";
LABEL_58:
            v25 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v20, 0x201u);
LABEL_59:
            DataSourceBytes = 0;
            *a3 = v25;
            goto LABEL_49;
          }
LABEL_44:
          DataSourceBytes = 0;
LABEL_49:
          free(v14);
          goto LABEL_50;
        }
LABEL_47:
        DataSourceBytes = 0;
        goto LABEL_48;
      }
    }
    else if (v38 - 13 >= 2)
    {
      if (v38 != 18)
      {
        if (v38 == 21)
        {
          DataSourceBytes = 0;
          switch(bswap32(v37))
          {
            case 0x11u:
              v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt8Type, v14);
              goto LABEL_32;
            case 0x12u:
              LOWORD(v28) = bswap32(*v14) >> 16;
              v25 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, &v28);
              goto LABEL_59;
            case 0x14u:
              LODWORD(v28) = *(unsigned __int8 *)v14 << 24;
              v25 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &v28);
              goto LABEL_59;
            case 0x18u:
              v28 = (unint64_t)*(unsigned __int8 *)v14 << 56;
              v25 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &v28);
              goto LABEL_59;
            default:
              goto LABEL_48;
          }
        }
        goto LABEL_48;
      }
      if (v12 >= 2)
      {
        v21 = (int)bswap32(*v14) >> 16;
        if (v21 <= 147)
        {
          v22 = v21 - 1;
          if (v22 <= 0x93)
            v20 = kGenreTable[v22];
          else
            v20 = "Blues";
          goto LABEL_58;
        }
        goto LABEL_44;
      }
      goto LABEL_47;
    }
    v17 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v14, v12);
LABEL_32:
    DataSourceBytes = 0;
    *a3 = v17;
  }
LABEL_48:
  if (v14)
    goto LABEL_49;
LABEL_50:
  v23 = v31;
  v30 = &off_1E2902718;
  v31 = 0;
  if (v23)
    (*(void (**)(MP4BoxParser *))(*(_QWORD *)v23 + 8))(v23);
LABEL_52:
  v24 = v29;
  v29 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return DataSourceBytes;
}

void sub_18EFA4F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

__CFString *MP4BoxParser_iTunesMeta::CreateTrackNumberString(MP4BoxParser_iTunesMeta *this, const __CFData *a2)
{
  CFIndex Length;
  const UInt8 *BytePtr;
  __CFString *v5;
  const UInt8 *v6;
  uint64_t v7;
  int v8;
  const __CFAllocator *v9;
  CFNumberRef v10;
  const __CFNumber *v11;
  const __CFLocale *System;
  __CFNumberFormatter *v13;
  __CFNumberFormatter *v14;
  CFStringRef StringWithNumber;
  const __CFString *v16;
  __CFString *Mutable;
  uint64_t v18;
  int v19;
  __int16 v21;
  __int16 valuePtr;

  Length = CFDataGetLength(this);
  BytePtr = CFDataGetBytePtr(this);
  v5 = 0;
  if (!BytePtr || Length < 4)
    return v5;
  v6 = BytePtr;
  v7 = BytePtr[1];
  if (Length < (unint64_t)(v7 + 4))
    return 0;
  v8 = bswap32(*(unsigned __int16 *)&BytePtr[v7 + 2]);
  valuePtr = HIWORD(v8);
  if (v8 >> 16 < 1)
    return 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, &valuePtr);
  if (!v10)
    return 0;
  v11 = v10;
  System = CFLocaleGetSystem();
  v13 = CFNumberFormatterCreate(v9, System, kCFNumberFormatterDecimalStyle);
  if (!v13)
    goto LABEL_23;
  v14 = v13;
  StringWithNumber = CFNumberFormatterCreateStringWithNumber(v9, v13, v11);
  if (!StringWithNumber)
  {
    CFRelease(v14);
LABEL_23:
    v5 = 0;
LABEL_24:
    CFRelease(v11);
    return v5;
  }
  v16 = StringWithNumber;
  Mutable = CFStringCreateMutable(v9, 128);
  v5 = Mutable;
  if (!Mutable)
    goto LABEL_17;
  CFStringAppend(Mutable, v16);
  v18 = v6[1];
  if (Length >= (unint64_t)(v18 + 6))
  {
    v19 = bswap32(*(unsigned __int16 *)&v6[v18 + 4]);
    v21 = HIWORD(v19);
    if (valuePtr <= v19 >> 16)
    {
      CFRelease(v11);
      v11 = CFNumberCreate(v9, kCFNumberSInt16Type, &v21);
      if (v11)
      {
        CFRelease(v16);
        v16 = CFNumberFormatterCreateStringWithNumber(v9, v14, v11);
        if (v16)
        {
          CFStringAppend(v5, CFSTR("/"));
          CFStringAppend(v5, v16);
        }
      }
    }
  }
  if (!CFStringGetLength(v5))
  {
    CFRelease(v5);
    v5 = 0;
  }
  if (v16)
LABEL_17:
    CFRelease(v16);
  CFRelease(v14);
  if (v11)
    goto LABEL_24;
  return v5;
}

uint64_t MP4BoxParser_iTunesMeta::GetStoreKind(MP4BoxParser_iTunesMeta *this)
{
  int v1;
  uint64_t result;
  CFNumberRef v3;
  unsigned __int8 valuePtr;
  CFNumberRef number;

  number = 0;
  valuePtr = 0;
  v1 = MP4BoxParser_iTunesMeta::CopyMetaItemData(this, 1937009003, (const void **)&number);
  result = 0;
  if (!v1)
  {
    v3 = number;
    if (number)
    {
      CFNumberGetValue(number, kCFNumberSInt8Type, &valuePtr);
      CFRelease(v3);
      return valuePtr;
    }
  }
  return result;
}

void MP4BoxParser_iTunesNORMMeta::FillSoundCheckDictionary(MP4BoxParser_iTunesNORMMeta *this, CACFDictionary *a2)
{
  unsigned int DataSizeForMeaningName;
  int v5;
  size_t v7;
  void *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  size_t v12;
  _DWORD *v13;
  _DWORD *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  std::bad_alloc *exception;
  std::bad_alloc *v21;
  unsigned int v22;
  char v23[256];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DataSizeForMeaningName = MP4BoxParser_iTunesMeta::GetDataSizeForMeaningName(this, "iTunNORM");
  *((_DWORD *)this + 19) = DataSizeForMeaningName;
  if (DataSizeForMeaningName)
  {
    v5 = *((_DWORD *)this + 20);
    if (v5 && DataSizeForMeaningName >= 45 * v5)
    {
      v7 = DataSizeForMeaningName + 1;
      v8 = malloc_type_malloc(v7, 0x2C8E6D5CuLL);
      v9 = v8;
      if (!(_DWORD)v7 || v8)
      {
        bzero(v8, v7);
        if (!v9)
          return;
        v22 = *((_DWORD *)this + 19);
        if (MP4BoxParser_iTunesMeta::GetDataForMeaningName(this, "iTunNORM", v9, &v22, v10))
          goto LABEL_18;
        v11 = 5 * v5;
        v12 = 4 * (5 * v5);
        v13 = malloc_type_malloc(v12, 0x2C8E6D5CuLL);
        if (v13)
        {
          v14 = v13;
          bzero(v13, v12);
          v15 = 0;
          if (v11 <= 1)
            v16 = 1;
          else
            v16 = v11;
          v17 = 4 * v16;
          v18 = (const char *)v9;
          do
          {
            sscanf(v18, "%X", &v14[v15 / 4]);
            v18 += 9;
            v15 += 4;
          }
          while (v17 != v15);
          FillStringFromValues(v23, v14, (unsigned int *)*((unsigned int *)this + 20));
          v19 = *((unsigned int *)this + 20);
          CACFDictionary::AddCString(a2, CFSTR("sc ave perceived power coeff"), v23);
          FillStringFromValues(v23, &v14[v19], (unsigned int *)*((unsigned int *)this + 20));
          LODWORD(v19) = *((_DWORD *)this + 20) + v19;
          CACFDictionary::AddCString(a2, CFSTR("sc max perceived power coeff"), v23);
          FillStringFromValues(v23, &v14[v19], (unsigned int *)*((unsigned int *)this + 20));
          LODWORD(v19) = *((_DWORD *)this + 20) + v19;
          CACFDictionary::AddCString(a2, CFSTR("sc max perceived power msec"), v23);
          FillStringFromValues(v23, &v14[v19], (unsigned int *)*((unsigned int *)this + 20));
          LODWORD(v19) = *((_DWORD *)this + 20) + v19;
          CACFDictionary::AddCString(a2, CFSTR("sc peak amplitude"), v23);
          FillStringFromValues(v23, &v14[v19], (unsigned int *)*((unsigned int *)this + 20));
          CACFDictionary::AddCString(a2, CFSTR("sc peak amplitude msec"), v23);
          free(v14);
LABEL_18:
          free(v9);
          return;
        }
      }
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v21 = std::bad_alloc::bad_alloc(exception);
    }
  }
}

uint64_t FillStringFromValues(char *a1, _DWORD *a2, unsigned int *a3)
{
  unsigned int v3;
  uint64_t result;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  int v11;

  v3 = a3;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  result = snprintf(a1, 0x100uLL, "%u", *a2);
  if (v3 >= 2)
  {
    v7 = &a1[strlen(a1)];
    v8 = a1 + 256;
    v9 = v3 - 1;
    v10 = a2 + 1;
    do
    {
      v11 = *v10++;
      snprintf(v7, v8 - v7, "%s%u", " ", v11);
      result = strlen(v7);
      v7 += result;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t AudioFormatProperty_ISOChannelLayoutSizeForChannelLayout(const AudioChannelLayout *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t result;
  signed int mChannelLayoutTag;
  UInt32 mNumberChannelDescriptions;
  uint8x8_t v7;
  unsigned __int8 v8;

  result = 1718449215;
  *a3 = 0;
  if (a2 >= 4)
  {
    mChannelLayoutTag = a1->mChannelLayoutTag;
    if (a1->mChannelLayoutTag == 0x10000)
    {
      if (a2 < 8)
        return result;
      v7 = (uint8x8_t)vcnt_s8((int8x8_t)a1->mChannelBitmap);
      v7.i16[0] = vaddlv_u8(v7);
      mNumberChannelDescriptions = v7.i32[0];
    }
    else if (mChannelLayoutTag)
    {
      mNumberChannelDescriptions = (unsigned __int16)a1->mChannelLayoutTag;
    }
    else
    {
      if (a2 < 0xC)
        return result;
      mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
      if (20 * (unint64_t)mNumberChannelDescriptions + 12 > a2)
        return result;
    }
    if (!mNumberChannelDescriptions)
      return result;
    if (mChannelLayoutTag <= 9306118)
    {
      if (mChannelLayoutTag > 7864324)
      {
        if (mChannelLayoutTag <= 8323079)
        {
          if (mChannelLayoutTag == 7864325)
          {
            v8 = 5;
            goto LABEL_61;
          }
          if (mChannelLayoutTag == 8126470)
          {
            v8 = 6;
            goto LABEL_61;
          }
        }
        else
        {
          switch(mChannelLayoutTag)
          {
            case 8323080:
              v8 = 7;
              goto LABEL_61;
            case 8585219:
              v8 = 9;
              goto LABEL_61;
            case 8650756:
              v8 = 10;
              goto LABEL_61;
          }
        }
      }
      else if (mChannelLayoutTag <= 6946817)
      {
        if (mChannelLayoutTag == 6553601)
        {
          v8 = 1;
          goto LABEL_61;
        }
        if (mChannelLayoutTag == 6619138)
        {
          v8 = 2;
          goto LABEL_61;
        }
      }
      else
      {
        switch(mChannelLayoutTag)
        {
          case 6946818:
            v8 = 21;
            goto LABEL_61;
          case 7471107:
            v8 = 3;
            goto LABEL_61;
          case 7602180:
            v8 = 4;
            goto LABEL_61;
        }
      }
    }
    else if (mChannelLayoutTag <= 13500427)
    {
      if (mChannelLayoutTag <= 11993095)
      {
        if (mChannelLayoutTag == 9306119)
        {
          v8 = 11;
          goto LABEL_61;
        }
        if (mChannelLayoutTag == 9633794)
        {
          v8 = 8;
          goto LABEL_61;
        }
      }
      else
      {
        switch(mChannelLayoutTag)
        {
          case 11993096:
            v8 = 12;
            goto LABEL_61;
          case 12058632:
            v8 = 14;
            goto LABEL_61;
          case 13369368:
            v8 = 13;
            goto LABEL_61;
        }
      }
    }
    else if (mChannelLayoutTag > 13697037)
    {
      switch(mChannelLayoutTag)
      {
        case 13697038:
          v8 = 18;
          goto LABEL_61;
        case 13762572:
          v8 = 19;
          goto LABEL_61;
        case 13828110:
          v8 = 20;
          goto LABEL_61;
      }
    }
    else
    {
      switch(mChannelLayoutTag)
      {
        case 13500428:
          v8 = 15;
          goto LABEL_61;
        case 13565962:
          result = 16;
          *a3 = 16;
          return result;
        case 13631500:
          v8 = 17;
LABEL_61:
          *a3 = v8;
          return 16;
      }
    }
    return 4 * mNumberChannelDescriptions + 16;
  }
  return result;
}

uint64_t AudioFormatProperty_ISOChannelLayoutForChannelLayout(AudioChannelLayout *a1, unsigned int a2, unsigned int *a3, unsigned __int8 *a4)
{
  unsigned int v8;
  uint64_t PropertyInfo;
  unsigned int v10;
  UInt32 mNumberChannelDescriptions;
  int v12;
  AudioChannelBitmap *p_mChannelBitmap;
  std::vector<char>::pointer begin;
  uint64_t Property;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  __int128 v21;
  BOOL v22;
  uint64_t v24;
  __int128 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  __int128 v32;
  int v33;
  UInt32 outPropertyDataSize;
  std::vector<char> v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int v40;
  unsigned __int8 v41;

  v41 = 0;
  v8 = AudioFormatProperty_ISOChannelLayoutSizeForChannelLayout(a1, a2, &v41);
  if (*a3 >= v8)
  {
    v10 = v8;
    if (a1->mChannelLayoutTag == 0x10000)
    {
      LOBYTE(mNumberChannelDescriptions) = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)a1->mChannelBitmap));
    }
    else if (a1->mChannelLayoutTag)
    {
      LOBYTE(mNumberChannelDescriptions) = a1->mChannelLayoutTag;
    }
    else
    {
      mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
    }
    bzero(a4, v8);
    *(_QWORD *)a4 = 0x6C6E686310000000;
    a4[8] = 1;
    a4[12] = 17;
    a4[13] = mNumberChannelDescriptions;
    v12 = v41;
    a4[14] = v41;
    if (v12)
    {
      PropertyInfo = 0;
      a4[15] = 0;
      *a3 = 16;
      return PropertyInfo;
    }
    a4[15] = mNumberChannelDescriptions;
    v36 = a4 + 16;
    v37 = a4 + 16;
    v38 = &a4[v10];
    v39 = 0x2000000000;
    v40 = ((_DWORD)a4 + 16) & 3;
    memset(&v35, 0, sizeof(v35));
    outPropertyDataSize = 0;
    if (a1->mChannelLayoutTag)
    {
      if (a1->mChannelLayoutTag == 0x10000)
      {
        p_mChannelBitmap = &a1->mChannelBitmap;
        PropertyInfo = AudioFormatGetPropertyInfo(0x636D7062u, 4u, p_mChannelBitmap, &outPropertyDataSize);
        if ((_DWORD)PropertyInfo)
          return PropertyInfo;
        if (outPropertyDataSize)
        {
          std::vector<unsigned char>::__append(&v35, outPropertyDataSize);
          begin = v35.__begin_;
        }
        else
        {
          begin = 0;
        }
        Property = AudioFormatGetProperty(0x636D7062u, 4u, p_mChannelBitmap, &outPropertyDataSize, begin);
      }
      else
      {
        PropertyInfo = AudioFormatGetPropertyInfo(0x636D706Cu, 4u, a1, &outPropertyDataSize);
        if ((_DWORD)PropertyInfo)
          return PropertyInfo;
        if (outPropertyDataSize)
        {
          std::vector<unsigned char>::__append(&v35, outPropertyDataSize);
          begin = v35.__begin_;
        }
        else
        {
          begin = 0;
        }
        Property = AudioFormatGetProperty(0x636D706Cu, 4u, a1, &outPropertyDataSize, begin);
      }
      PropertyInfo = Property;
      if ((_DWORD)Property)
        goto LABEL_25;
    }
    else
    {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v35, (char *)a1, (char *)a1 + a2, a2);
      begin = v35.__begin_;
    }
    PropertyInfo = 1718449215;
    if ((std::vector<char>::pointer)(v35.__end_ - begin) < (std::vector<char>::pointer)0xC)
    {
LABEL_25:
      if (!begin)
        return PropertyInfo;
      goto LABEL_56;
    }
    if (!*((_DWORD *)begin + 2))
    {
LABEL_53:
      AT::TBitstreamWriter<unsigned int>::Flush((uint64_t)&v36);
      PropertyInfo = 0;
      v27 = HIDWORD(v39) + 8 * ((_DWORD)v38 - (_DWORD)v37);
      v28 = v27 - 32;
      v29 = v27 - 25;
      if (v28 >= 0)
        v29 = v28;
      v30 = v10 - (v29 >> 3);
      *a3 = v30;
      *(_DWORD *)a4 = bswap32(v30);
LABEL_56:
      v35.__end_ = begin;
      operator delete(begin);
      return PropertyInfo;
    }
    v16 = 0;
    while (1)
    {
      v17 = &begin[20 * v16];
      v20 = *((_DWORD *)v17 + 3);
      v18 = v17 + 12;
      v19 = v20;
      if (v20 > 199)
        break;
      if (v19 != 100)
      {
        if ((v19 - 38) < 8 || (v19 + 1) < 2)
          goto LABEL_56;
LABEL_45:
        v24 = 0;
        while (v19 != sChannelLabelsForISOSpeakerPositions[v24])
        {
          if (++v24 == 45)
          {
            v25 = *(_OWORD *)v18;
            v33 = *((_DWORD *)v18 + 4);
            v32 = v25;
            SetDefaultChannelPosition((uint64_t)&v32);
            goto LABEL_49;
          }
        }
        v26 = v24;
        goto LABEL_52;
      }
      v21 = *(_OWORD *)v18;
      v33 = *((_DWORD *)v18 + 4);
      v32 = v21;
LABEL_49:
      if ((DWORD1(v32) & 0xFFFFFFFD) != 0)
        goto LABEL_56;
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v36, 126, 8u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v36, bswap32(-(int)*((float *)&v32 + 2)) >> 16, 0x10u);
      v26 = (int)*((float *)&v32 + 3);
LABEL_52:
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v36, v26, 8u);
      if (++v16 >= (unint64_t)*((unsigned int *)begin + 2))
        goto LABEL_53;
    }
    if ((v19 - 200) < 8)
      goto LABEL_56;
    v22 = (v19 - 301) > 4 || v19 == 303;
    if (!v22 || v19 == 400)
      goto LABEL_56;
    goto LABEL_45;
  }
  return 561211770;
}

void sub_18EFA5B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatProperty_ChannelLayoutSizeForISOChannelLayout(unsigned int a1, unsigned int *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  unsigned int *v8;
  unsigned __int8 *v9;
  int v10;
  char v11;
  uint64_t v12;
  char *v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v24;
  unsigned int v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  BOOL v51;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  char v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unint64_t v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  unint64_t *v79;
  char v80;
  BOOL Bit;
  unint64_t v82;
  int v83;
  unsigned int v84;
  char v85;
  int v86;
  char v87;
  unsigned int v88;
  unsigned int *v89[2];
  unsigned __int8 *v90;
  int64_t v91;

  v8 = a2;
  v89[0] = a2;
  v89[1] = a2;
  v9 = (unsigned __int8 *)a2 + a1;
  v90 = v9;
  LODWORD(v91) = 0;
  if ((a2 & 3) != 0)
  {
    v10 = 0;
    v11 = a2 ^ 3;
    v12 = ((a2 ^ 3) & 3) + 1;
    v13 = (char *)a2 + 1;
    v14 = 8 * ((a2 ^ 3) & 3) + 8;
    v15 = (unsigned __int8 *)a2;
    do
    {
      if (v15 >= v9)
        v16 = 255;
      else
        v16 = *v15;
      v10 = v16 | (v10 << 8);
      ++v15;
    }
    while ((v13++ & 3) != 0);
    a2 = (unsigned int *)((char *)a2 + v12);
    v89[0] = (unsigned int *)((char *)v8 + v12);
    v18 = v10 << ((8 * (v11 & 3)) ^ 0x18);
    LODWORD(v91) = v18;
  }
  else
  {
    v18 = 0;
    v14 = 0;
  }
  v19 = 560360820;
  if (a1 < 0xC)
    return v19;
  v20 = v9 - (unsigned __int8 *)a2;
  v21 = v14 - 32;
  if (v14 - 32 < 0)
  {
    if ((v20 & ~(v20 >> 63) & 0xFFFFFFFC) != 0 && a2 >= v8)
    {
      v25 = bswap32(*a2);
    }
    else
    {
      v24 = 0;
      v25 = v18;
      do
      {
        v26 = (unsigned __int8 *)a2 + v24;
        v27 = 255;
        if ((char *)a2 + v24 < (char *)v9 && v26 >= (unsigned __int8 *)v8)
          v27 = *v26;
        v25 = v27 | (v25 << 8);
        ++v24;
      }
      while ((_DWORD)v24 != 4);
    }
    v89[0] = ++a2;
    v22 = (v25 >> v14) | v18;
    v18 = v25 << -(char)v14;
    if (!v14)
      v18 = 0;
    LODWORD(v91) = v18;
    v21 = v14;
  }
  else
  {
    v22 = v18;
  }
  if (v22 > a1)
    return v19;
  HIDWORD(v91) = v21 - 32;
  if (v21 - 32 < 0)
  {
    if ((((_DWORD)v9 - (_DWORD)a2) & ~((v9 - (unsigned __int8 *)a2) >> 63) & 0xFFFFFFFC) != 0 && a2 >= v8)
    {
      v29 = bswap32(*a2);
    }
    else
    {
      v30 = 0;
      v29 = v18;
      do
      {
        v31 = (unsigned __int8 *)a2 + v30;
        v32 = v29 << 8;
        LODWORD(v91) = v32;
        v33 = 255;
        if ((char *)a2 + v30 < (char *)v9 && v31 >= (unsigned __int8 *)v8)
          v33 = *v31;
        v29 = v33 | v32;
        LODWORD(v91) = v29;
        ++v30;
      }
      while ((_DWORD)v30 != 4);
    }
    v89[0] = ++a2;
    v28 = (v29 >> v21) | v18;
    if (!v21)
    {
      v34 = 0;
      v18 = 0;
      v91 = 0xFFFFFFF800000000;
      goto LABEL_43;
    }
    v18 = v29 << -(char)v21;
    LODWORD(v91) = v18;
  }
  else
  {
    v21 -= 32;
    v28 = v18;
  }
  v34 = HIBYTE(v18);
  v35 = v21 - 8;
  HIDWORD(v91) = v21 - 8;
  if (v21 - 8 >= 0)
  {
    v36 = v18 << 8;
    goto LABEL_53;
  }
LABEL_43:
  if ((((_DWORD)v9 - (_DWORD)a2) & ~((v9 - (unsigned __int8 *)a2) >> 63) & 0xFFFFFFFC) != 0 && a2 >= v8)
  {
    v18 = bswap32(*a2);
  }
  else
  {
    v37 = 0;
    do
    {
      v38 = (unsigned __int8 *)a2 + v37;
      v39 = v18 << 8;
      LODWORD(v91) = v39;
      v40 = 255;
      if ((char *)a2 + v37 < (char *)v9 && v38 >= (unsigned __int8 *)v8)
        v40 = *v38;
      v18 = v40 | v39;
      LODWORD(v91) = v18;
      ++v37;
    }
    while ((_DWORD)v37 != 4);
  }
  v89[0] = ++a2;
  v35 = v21 + 24;
  v34 |= v18 >> (v21 + 24);
  if (v21 == -24)
  {
    v41 = 0;
    v36 = 0;
    v91 = 0xFFFFFFE800000000;
    goto LABEL_56;
  }
  v36 = v18 << (8 - v21);
LABEL_53:
  v41 = v36 >> 8;
  v42 = v35 - 24;
  LODWORD(v91) = v36;
  HIDWORD(v91) = v35 - 24;
  if (v35 - 24 >= 0)
  {
    v43 = v36 << 24;
    goto LABEL_70;
  }
LABEL_56:
  if ((((_DWORD)v9 - (_DWORD)a2) & ~((v9 - (unsigned __int8 *)a2) >> 63) & 0xFFFFFFFC) != 0 && a2 >= v8)
  {
    v36 = bswap32(*a2);
  }
  else
  {
    v44 = 0;
    do
    {
      v45 = (unsigned __int8 *)a2 + v44;
      v46 = v36 << 8;
      LODWORD(v91) = v46;
      v47 = 255;
      if ((char *)a2 + v44 < (char *)v9 && v45 >= (unsigned __int8 *)v8)
        v47 = *v45;
      v36 = v47 | v46;
      LODWORD(v91) = v36;
      ++v44;
    }
    while ((_DWORD)v44 != 4);
  }
  v48 = v36 << (24 - v35);
  v49 = v35 + 8;
  v89[0] = ++a2;
  v41 |= v36 >> v49;
  if (v49)
    v43 = v48;
  else
    v43 = 0;
  if (v49)
    v42 = v49;
  else
    v42 = 0;
LABEL_70:
  LODWORD(v91) = v43;
  if (v28 != 1667788396)
    return v19;
  v50 = v34;
  if (v22 <= 0xD && !(_BYTE)v34)
    return v19;
  v51 = v22 < 0x10;
  if (v34 != 1)
    v51 = 0;
  if (v34 > 1u || v51 || v41)
    return v19;
  if (!a3 && !(_BYTE)v34)
    return 4294967246;
  if ((_BYTE)v34)
  {
    v53 = v43 >> 28;
    v54 = v42 - 4;
    HIDWORD(v91) = v42 - 4;
    if (v42 - 4 < 0)
    {
      v58 = v43 >> 28;
      AT::TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v89, a2);
      a2 = ++v89[0];
      v53 = (v91 >> SBYTE4(v91)) | v58;
      v54 = HIDWORD(v91) + 32;
      if (HIDWORD(v91) == -32)
      {
        v87 = v58;
        v59 = 0;
        v91 = 0xFFFFFFFC00000000;
LABEL_95:
        AT::TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v89, a2);
        a2 = ++v89[0];
        v59 |= v91 >> SBYTE4(v91);
        v56 = HIDWORD(v91) + 32;
        if (HIDWORD(v91) == -32)
          v57 = 0;
        else
          v57 = (_DWORD)v91 << -BYTE4(v91);
        LOBYTE(v53) = v87;
        goto LABEL_101;
      }
      v55 = (_DWORD)v91 << -BYTE4(v91);
    }
    else
    {
      v55 = 16 * v43;
    }
    v59 = v55 >> 28;
    v56 = v54 - 4;
    v91 = __PAIR64__(v56, v55);
    if (v56 >= 0)
    {
      v57 = 16 * v55;
      goto LABEL_101;
    }
    v87 = v53;
    goto LABEL_95;
  }
  v53 = HIBYTE(v43);
  v56 = v42 - 8;
  HIDWORD(v91) = v42 - 8;
  if (v42 - 8 < 0)
  {
    v60 = HIBYTE(v43);
    AT::TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v89, a2);
    a2 = ++v89[0];
    v53 = (v91 >> SBYTE4(v91)) | v60;
    v56 = HIDWORD(v91) + 32;
    if (HIDWORD(v91) == -32)
      v57 = 0;
    else
      v57 = (_DWORD)v91 << -BYTE4(v91);
  }
  else
  {
    v57 = v43 << 8;
  }
  LOBYTE(v59) = 1;
LABEL_101:
  LODWORD(v91) = v57;
  if (v53 != 1 || (v59 & 0xE) != 0)
    return v19;
  if (v50)
  {
    v61 = HIBYTE(v57);
    v56 -= 8;
    HIDWORD(v91) = v56;
    if (v56 < 0)
    {
      AT::TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v89, a2);
      a2 = ++v89[0];
      v56 = HIDWORD(v91) + 32;
      v88 = (v91 >> SBYTE4(v91)) | v61;
      if (HIDWORD(v91) == -32)
      {
        v63 = 0;
        v91 = 0xFFFFFFF800000000;
        goto LABEL_113;
      }
      v57 = (_DWORD)v91 << -BYTE4(v91);
    }
    else
    {
      v62 = (unint64_t)v57 << 8;
      v88 = HIDWORD(v62);
      v57 = v62;
    }
    LODWORD(v91) = v57;
  }
  else
  {
    v88 = *(_DWORD *)(a3 + 28);
  }
  v63 = HIBYTE(v57);
  v64 = v56 - 8;
  HIDWORD(v91) = v64;
  if (v64 >= 0)
  {
    v65 = v57 << 8;
    goto LABEL_116;
  }
LABEL_113:
  AT::TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v89, a2);
  a2 = ++v89[0];
  v66 = BYTE4(v91);
  v63 |= v91 >> SBYTE4(v91);
  v64 = HIDWORD(v91) + 32;
  HIDWORD(v91) += 32;
  if (HIDWORD(v91))
    v65 = (_DWORD)v91 << -v66;
  else
    v65 = 0;
LABEL_116:
  LODWORD(v91) = v65;
  v67 = v63;
  switch((char)v63)
  {
    case 0:
      if (!v50)
      {
        v84 = v88;
        goto LABEL_175;
      }
      v68 = HIBYTE(v65);
      v64 -= 8;
      HIDWORD(v91) = v64;
      if (v64 < 0)
      {
        AT::TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v89, a2);
        LODWORD(a2) = LODWORD(v89[0]) + 4;
        ++v89[0];
        v85 = BYTE4(v91);
        v68 |= v91 >> SBYTE4(v91);
        v64 = HIDWORD(v91) + 32;
        HIDWORD(v91) += 32;
        if (HIDWORD(v91))
          v69 = (_DWORD)v91 << -v85;
        else
          v69 = 0;
      }
      else
      {
        v69 = v65 << 8;
      }
      LODWORD(v91) = v69;
      v84 = v88;
      if (v68 == v88)
      {
LABEL_175:
        v73 = 0;
        v70 = v14 - v64 + 8 * ((_DWORD)a2 - (_DWORD)v90 + v20);
        v72 = 1;
        v71 = v84;
        if (v67)
          goto LABEL_146;
        goto LABEL_135;
      }
      return v19;
    case 1:
      v70 = 0;
      v71 = 0;
      v73 = 6553601;
      goto LABEL_145;
    case 2:
      v70 = 0;
      v71 = 0;
      v72 = 1;
      v73 = 6619138;
      if (!v67)
        goto LABEL_135;
      goto LABEL_146;
    case 3:
      v70 = 0;
      v71 = 0;
      v73 = 7471107;
      goto LABEL_145;
    case 4:
      v70 = 0;
      v71 = 0;
      v73 = 7602180;
      goto LABEL_145;
    case 5:
      v70 = 0;
      v71 = 0;
      v73 = 7864325;
      goto LABEL_145;
    case 6:
      v70 = 0;
      v71 = 0;
      v73 = 8126470;
      goto LABEL_145;
    case 7:
      v70 = 0;
      v71 = 0;
      v73 = 8323080;
      goto LABEL_145;
    case 8:
      v70 = 0;
      v71 = 0;
      v73 = 9633794;
      goto LABEL_145;
    case 9:
      v70 = 0;
      v71 = 0;
      v73 = 8585219;
      goto LABEL_145;
    case 10:
      v70 = 0;
      v71 = 0;
      v73 = 8650756;
      goto LABEL_145;
    case 11:
      v70 = 0;
      v71 = 0;
      v73 = 9306119;
      goto LABEL_145;
    case 12:
      v70 = 0;
      v71 = 0;
      v72 = 1;
      v73 = 11993096;
      if (!v67)
        goto LABEL_135;
      goto LABEL_146;
    case 13:
      v70 = 0;
      v71 = 0;
      v73 = 13369368;
      goto LABEL_145;
    case 14:
      v70 = 0;
      v71 = 0;
      v73 = 12058632;
      goto LABEL_145;
    case 15:
      v70 = 0;
      v71 = 0;
      v73 = 13500428;
      goto LABEL_145;
    case 16:
      v70 = 0;
      v71 = 0;
      v73 = 13565962;
      goto LABEL_145;
    case 17:
      v70 = 0;
      v71 = 0;
      v73 = 13631500;
      goto LABEL_145;
    case 18:
      v70 = 0;
      v71 = 0;
      v73 = 13697038;
      goto LABEL_145;
    case 19:
      v70 = 0;
      v71 = 0;
      v73 = 13762572;
      goto LABEL_145;
    case 20:
      v70 = 0;
      v71 = 0;
      v73 = 13828110;
      goto LABEL_145;
    case 21:
      v70 = 0;
      v71 = 0;
      v73 = 6946818;
LABEL_145:
      v72 = 1;
      if (v67)
        goto LABEL_146;
      goto LABEL_135;
    default:
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v73 = -65536;
      if (!v67)
      {
LABEL_135:
        v74 = 0;
        v75 = v71;
        goto LABEL_168;
      }
LABEL_146:
      if (!v50)
      {
        if (v22 < 0x16)
          return v19;
        v79 = (unint64_t *)((char *)v8 + 14);
        goto LABEL_158;
      }
      v86 = v71;
      v76 = v73;
      AT::TBitstreamReader<unsigned int>::SkipBits((uint64_t)v89, 4);
      v77 = v91 >> 29;
      HIDWORD(v91) -= 3;
      if (v91 < 0)
      {
        AT::TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v89, v89[0]++);
        v80 = BYTE4(v91);
        v77 |= v91 >> SBYTE4(v91);
        HIDWORD(v91) += 32;
        if (HIDWORD(v91))
          v78 = (_DWORD)v91 << -v80;
        else
          v78 = 0;
      }
      else
      {
        v78 = 8 * v91;
      }
      LODWORD(v91) = v78;
      Bit = AT::TBitstreamReader<unsigned int>::GetBit((uint64_t)v89);
      if ((_BYTE)v77)
        return v19;
      v73 = v76;
      v71 = v86;
      if (Bit)
      {
        if (v22 < 0x18)
          return v19;
        v79 = (unint64_t *)(v8 + 4);
LABEL_158:
        v82 = *v79;
        if (v82)
        {
          v74 = bswap64(v82);
          v75 = v73 & 0x1F;
          goto LABEL_168;
        }
      }
      if ((v73 & 0x1F) == v88)
        v83 = v72;
      else
        v83 = 1;
      if (v83)
        v75 = v71;
      else
        v75 = v73 & 0x1F;
      if ((v73 & 0x1F) == v88)
      {
        v74 = 0;
LABEL_168:
        *a4 = 20 * v75 + 12;
        v19 = 0;
        if (a5)
        {
          *(_DWORD *)a5 = v67;
          *(_DWORD *)(a5 + 4) = v73;
          *(_DWORD *)(a5 + 8) = v88;
          *(_DWORD *)(a5 + 12) = v71;
          *(_DWORD *)(a5 + 16) = v70;
          *(_QWORD *)(a5 + 24) = v74;
        }
        return v19;
      }
      break;
  }
  return v19;
}

uint64_t AT::TBitstreamReader<unsigned int>::FillCacheFrom(uint64_t result, unsigned int *a2)
{
  unint64_t v2;
  unsigned int *v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;

  v3 = *(unsigned int **)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  if ((((_DWORD)v2 - (_DWORD)a2) & ~((uint64_t)(v2 - (_QWORD)a2) >> 63) & 0xFFFFFFFC) != 0)
  {
    v4 = v3 >= a2;
    v5 = v3 == a2;
  }
  else
  {
    v4 = 1;
    v5 = 0;
  }
  if (!v5 && v4)
  {
    v6 = 0;
    v7 = *(_DWORD *)(result + 24);
    do
    {
      v8 = (unsigned __int8 *)a2 + v6;
      v9 = v7 << 8;
      *(_DWORD *)(result + 24) = v9;
      v10 = 255;
      if ((unint64_t)a2 + v6 < v2 && v8 >= (unsigned __int8 *)v3)
        v10 = *v8;
      v7 = v9 | v10;
      *(_DWORD *)(result + 24) = v7;
      ++v6;
    }
    while ((_DWORD)v6 != 4);
  }
  else
  {
    *(_DWORD *)(result + 24) = bswap32(*a2);
  }
  return result;
}

uint64_t AT::TBitstreamReader<unsigned int>::SkipBits(uint64_t result, int a2)
{
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  int v16;

  v2 = *(_DWORD *)(result + 28);
  v3 = a2 - v2;
  if (a2 > v2)
  {
    *(_QWORD *)(result + 24) = 0;
    v2 = 0;
    if (v3 >= 0x20)
    {
      *(_QWORD *)result += (v3 >> 3) & 0x1FFFFFFC;
      a2 = v3 & 0x1F;
    }
    else
    {
      a2 = v3;
    }
  }
  if ((a2 - 33) >= 0xFFFFFFE0)
  {
    v4 = *(_DWORD *)(result + 24);
    v5 = v2 - a2;
    *(_DWORD *)(result + 28) = v5;
    if (v5 < 0)
    {
      v8 = *(_QWORD *)(result + 8);
      v7 = *(_QWORD *)(result + 16);
      v9 = *(unsigned int **)result;
      if ((((_DWORD)v7 - *(_DWORD *)result) & ~((uint64_t)(v7 - *(_QWORD *)result) >> 63) & 0xFFFFFFFC) == 0
        || v8 > (unint64_t)v9)
      {
        v11 = 0;
        do
        {
          v12 = (unsigned __int8 *)v9 + v11;
          v13 = v4 << 8;
          *(_DWORD *)(result + 24) = v13;
          v14 = 255;
          if ((unint64_t)v9 + v11 < v7 && (unint64_t)v12 >= v8)
            v14 = *v12;
          v4 = v14 | v13;
          *(_DWORD *)(result + 24) = v4;
          ++v11;
        }
        while ((_DWORD)v11 != 4);
      }
      else
      {
        v4 = bswap32(*v9);
      }
      v15 = v4 << -(char)v5;
      v16 = v5 + 32;
      *(_DWORD *)(result + 28) = v16;
      *(_QWORD *)result = v9 + 1;
      if (v16)
        v6 = v15;
      else
        v6 = 0;
    }
    else
    {
      v6 = v4 << a2;
    }
    *(_DWORD *)(result + 24) = v6;
  }
  return result;
}

BOOL AT::TBitstreamReader<unsigned int>::GetBit(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;

  v2 = *(_DWORD *)(a1 + 24);
  v1 = *(_DWORD *)(a1 + 28);
  v3 = v2 >> 31;
  *(_DWORD *)(a1 + 28) = v1 - 1;
  if (v1 - 1 < 0)
  {
    v6 = *(unsigned int **)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    v7 = *(unsigned int **)a1;
    if ((((_DWORD)v5 - *(_DWORD *)a1) & ~((uint64_t)(v5 - *(_QWORD *)a1) >> 63) & 0xFFFFFFFC) != 0)
    {
      v8 = v6 >= v7;
      v9 = v6 == v7;
    }
    else
    {
      v8 = 1;
      v9 = 0;
    }
    if (!v9 && v8)
    {
      v10 = 0;
      do
      {
        v11 = (unsigned __int8 *)v7 + v10;
        v12 = v2 << 8;
        *(_DWORD *)(a1 + 24) = v12;
        v13 = 255;
        if ((unint64_t)v7 + v10 < v5 && v11 >= (unsigned __int8 *)v6)
          v13 = *v11;
        v2 = v13 | v12;
        *(_DWORD *)(a1 + 24) = v2;
        ++v10;
      }
      while ((_DWORD)v10 != 4);
    }
    else
    {
      v2 = bswap32(*v7);
    }
    v14 = v2 << (1 - v1);
    v15 = v1 + 31;
    *(_DWORD *)(a1 + 28) = v15;
    *(_QWORD *)a1 = v7 + 1;
    v3 |= v2 >> v15;
    if (v15)
      v4 = v14;
    else
      v4 = 0;
  }
  else
  {
    v4 = 2 * v2;
  }
  *(_DWORD *)(a1 + 24) = v4;
  return v3 != 0;
}

uint64_t AudioFormatProperty_ChannelLayoutForISOChannelLayout(unsigned int a1, unsigned int *a2, const AudioStreamBasicDescription *a3, unsigned int *a4, AudioChannelLayout *a5)
{
  uint64_t v9;
  size_t v10;
  AudioChannelLayoutTag v11;
  unsigned int v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned int *v19;
  int v20;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t PropertyInfo;
  uint64_t Property;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  BOOL v30;
  unsigned int v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  UInt32 v35;
  char v36;
  __int16 v37;
  uint64_t v38;
  _DWORD *v39;
  char *v40;
  __int128 v41;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  int v52;
  unsigned int v53;
  float *v54;
  float v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  unsigned int v68;
  int v69;
  float *v70;
  __int128 v71;
  __int128 v72;
  unsigned int v73;
  void *outPropertyData[3];
  UInt32 outPropertyDataSize;

  v73 = 0;
  v71 = xmmword_18F10C258;
  v72 = unk_18F10C268;
  v9 = AudioFormatProperty_ChannelLayoutSizeForISOChannelLayout(a1, a2, (uint64_t)a3, &v73, (uint64_t)&v71);
  if (!(_DWORD)v9)
  {
    v10 = *a4;
    if (v10 < v73)
      return 561211770;
    bzero(a5, v10);
    v11 = DWORD1(v71);
    v12 = DWORD1(v71) & 0xFFFF0000;
    if (DWORD1(v71) <= 0xFFFEFFFF && v12 && !*((_QWORD *)&v72 + 1))
    {
      v9 = 0;
      *a4 = 12;
      a5->mChannelBitmap = 0;
      a5->mNumberChannelDescriptions = 0;
      a5->mChannelLayoutTag = v11;
      return v9;
    }
    if (v12 == -65536)
      return 1718449215;
    v9 = 560360820;
    if (v12)
    {
      if (DWORD1(v71))
      {
        outPropertyDataSize = 0;
        PropertyInfo = AudioFormatGetPropertyInfo(0x636D706Cu, 4u, (char *)&v71 + 4, &outPropertyDataSize);
        if (!(_DWORD)PropertyInfo)
        {
          std::vector<unsigned char>::vector(outPropertyData, outPropertyDataSize);
          Property = AudioFormatGetProperty(0x636D706Cu, 4u, (char *)&v71 + 4, &outPropertyDataSize, outPropertyData[0]);
          v26 = outPropertyData[0];
          if ((_DWORD)Property)
          {
            v9 = Property;
          }
          else
          {
            a5->mChannelLayoutTag = 0;
            a5->mNumberChannelDescriptions = 0;
            v34 = v26[2];
            if (v34)
            {
              v35 = 0;
              v36 = 0;
              v37 = 0;
              v38 = *((_QWORD *)&v72 + 1);
              do
              {
                if ((v38 & (1 << v36)) == 0)
                {
                  v39 = &v26[5 * v37];
                  v40 = (char *)a5 + 20 * v35++;
                  a5->mNumberChannelDescriptions = v35;
                  v41 = *(_OWORD *)(v39 + 3);
                  *((_DWORD *)v40 + 7) = v39[7];
                  *(_OWORD *)(v40 + 12) = v41;
                  v34 = v26[2];
                }
                v36 = ++v37;
              }
              while (v34 > v37);
            }
            else
            {
              v35 = 0;
            }
            if (v35 == DWORD2(v71))
            {
              *a4 = 20 * v35 + 12;
              TryToCollapseAudioChannelLayoutToATag(a4, a5);
              v9 = 0;
              v26 = outPropertyData[0];
            }
          }
          if (v26)
          {
            outPropertyData[1] = v26;
            operator delete(v26);
          }
          return v9;
        }
        return PropertyInfo;
      }
    }
    else if (!(_DWORD)v71)
    {
      v13 = v72;
      if ((_DWORD)v72)
      {
        v14 = (unsigned __int8 *)a2 + a1;
        if ((a2 & 3) != 0)
        {
          v15 = 0;
          v16 = (a2 ^ 3) & 3;
          v17 = (unsigned __int8 *)a2 + 1;
          v18 = 8 * ((a2 ^ 3) & 3) + 8;
          v19 = a2;
          do
          {
            if (v19 >= (unsigned int *)v14)
              v20 = 255;
            else
              v20 = *(unsigned __int8 *)v19;
            v15 = v20 | (v15 << 8);
            v19 = (unsigned int *)((char *)v19 + 1);
          }
          while ((v17++ & 3) != 0);
          v22 = (unsigned __int8 *)a2 + v16 + 1;
          v23 = v15 << ((8 * v16) ^ 0x18);
        }
        else
        {
          v23 = 0;
          v18 = 0;
          v22 = (unsigned __int8 *)a2;
        }
        v27 = HIDWORD(v71);
        v28 = v72 - v18;
        v29 = &v22[((v72 - v18) >> 3) & 0x1FFFFFFC];
        if ((v72 - v18) >= 0x20)
          v28 = (v72 - v18) & 0x1F;
        else
          v29 = v22;
        v30 = (int)v72 <= v18;
        if ((int)v72 > v18)
          v31 = 0;
        else
          v31 = v23;
        if ((int)v72 > v18)
          v32 = 0;
        else
          v32 = v18;
        if ((int)v72 > v18)
          v33 = (unsigned int *)v29;
        else
          v33 = (unsigned int *)v22;
        if (!v30)
          v13 = v28;
        if ((v13 - 33) >= 0xFFFFFFE0)
        {
          v32 -= v13;
          if (v32 < 0)
          {
            if ((((_DWORD)v14 - (_DWORD)v33) & ~((v14 - (unsigned __int8 *)v33) >> 63) & 0xFFFFFFFC) != 0
              && v33 >= a2)
            {
              v31 = bswap32(*v33);
            }
            else
            {
              v43 = 0;
              do
              {
                v44 = (unsigned __int8 *)v33 + v43;
                v45 = 255;
                if ((char *)v33 + v43 < (char *)v14 && v44 >= (unsigned __int8 *)a2)
                  v45 = *v44;
                v31 = v45 | (v31 << 8);
                ++v43;
              }
              while ((_DWORD)v43 != 4);
            }
            ++v33;
            if (v32 == -32)
              v31 = 0;
            else
              v31 <<= -(char)v32;
            if (v32 == -32)
              v32 = 0;
            else
              v32 += 32;
          }
          else
          {
            v31 <<= v13;
          }
        }
        if (!HIDWORD(v71))
        {
LABEL_130:
          a5->mNumberChannelDescriptions = v27;
          *a4 = 20 * v27 + 12;
          TryToCollapseAudioChannelLayoutToATag(a4, a5);
          return 0;
        }
        v46 = 0;
        while (1)
        {
          v47 = (char *)a5 + 20 * v46;
          *((_DWORD *)v47 + 3) = -1;
          v48 = v47 + 12;
          if (v32 + 8 * ((int)v14 - (int)v33) < 8)
            return v9;
          v49 = HIBYTE(v31);
          if (v32 - 8 < 0)
          {
            if (v33 >= a2
              && (((_DWORD)v14 - (_DWORD)v33) & ~((v14 - (unsigned __int8 *)v33) >> 63) & 0xFFFFFFFC) != 0)
            {
              v31 = bswap32(*v33);
            }
            else
            {
              v50 = 0;
              do
              {
                v51 = (unsigned __int8 *)v33 + v50;
                v52 = 255;
                if ((char *)v33 + v50 < (char *)v14 && v51 >= (unsigned __int8 *)a2)
                  v52 = *v51;
                v31 = v52 | (v31 << 8);
                ++v50;
              }
              while ((_DWORD)v50 != 4);
            }
            v53 = v31 << (8 - v32);
            v32 += 24;
            ++v33;
            v49 |= v31 >> v32;
            if (v32)
              v31 = v53;
            else
              v31 = 0;
            if (!v32)
              v32 = 0;
          }
          else
          {
            v31 <<= 8;
            v32 -= 8;
          }
          if (v49 <= 0x7Du)
            break;
          if (v49 == 126)
          {
            if (v32 + 8 * ((int)v14 - (int)v33) < 24)
              return v9;
            *v48 = 0x200000064;
            v56 = HIWORD(v31);
            v57 = v32 - 16;
            if (v32 - 16 < 0)
            {
              if ((((_DWORD)v14 - (_DWORD)v33) & ~((v14 - (unsigned __int8 *)v33) >> 63) & 0xFFFFFFFC) != 0
                && v33 >= a2)
              {
                v31 = bswap32(*v33);
              }
              else
              {
                v59 = 0;
                do
                {
                  v60 = (unsigned __int8 *)v33 + v59;
                  v61 = 255;
                  if ((char *)v33 + v59 < (char *)v14 && v60 >= (unsigned __int8 *)a2)
                    v61 = *v60;
                  v31 = v61 | (v31 << 8);
                  ++v59;
                }
                while ((_DWORD)v59 != 4);
              }
              v62 = v31 << (16 - v32);
              v63 = v32 + 16;
              ++v33;
              v56 |= v31 >> v63;
              if (v63)
                v58 = v62;
              else
                v58 = 0;
              if (v63)
                v57 = v63;
              else
                v57 = 0;
            }
            else
            {
              v58 = v31 << 16;
            }
            a5->mChannelDescriptions[v46].mCoordinates[0] = (float)-((int)bswap32(v56) >> 16);
            v64 = HIBYTE(v58);
            v32 = v57 - 8;
            if (v57 - 8 < 0)
            {
              if ((((_DWORD)v14 - (_DWORD)v33) & ~((v14 - (unsigned __int8 *)v33) >> 63) & 0xFFFFFFFC) != 0
                && v33 >= a2)
              {
                v58 = bswap32(*v33);
              }
              else
              {
                v65 = 0;
                do
                {
                  v66 = (unsigned __int8 *)v33 + v65;
                  v67 = 255;
                  if ((char *)v33 + v65 < (char *)v14 && v66 >= (unsigned __int8 *)a2)
                    v67 = *v66;
                  v58 = v67 | (v58 << 8);
                  ++v65;
                }
                while ((_DWORD)v65 != 4);
              }
              v68 = v58 << (8 - v57);
              v69 = v57 + 24;
              ++v33;
              v64 |= v58 >> v69;
              if (v69)
                v31 = v68;
              else
                v31 = 0;
              if (v69)
                v32 = v69;
              else
                v32 = 0;
            }
            else
            {
              v31 = v58 << 8;
            }
            v55 = (float)(char)v64;
LABEL_128:
            v70 = (float *)(&a5->mChannelLayoutTag + 5 * v46);
            v70[6] = v55;
            v70[7] = 1.0;
          }
LABEL_129:
          if (++v46 == v27)
            goto LABEL_130;
        }
        if (v49 > 0x2Cu)
          goto LABEL_129;
        *(_DWORD *)v48 = sChannelLabelsForISOSpeakerPositions[v49];
        if (v49 - 39 > 1)
          goto LABEL_129;
        *v48 = 0x200000064;
        v54 = (float *)((char *)&sCoordinatesForISOSpeakerPositions + 8 * v49);
        a5->mChannelDescriptions[v46].mCoordinates[0] = -*v54;
        v55 = v54[1];
        goto LABEL_128;
      }
    }
  }
  return v9;
}

void sub_18EFA6DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TryToCollapseAudioChannelLayoutToATag(unsigned int *a1, AudioChannelLayout *a2)
{
  uint64_t result;
  AudioChannelLayoutTag v5;
  BOOL v6;
  unsigned int v7;

  v7 = -65536;
  result = AudioFormatProperty_TagForChannelLayout(a2, &v7);
  if (!(_DWORD)result)
  {
    v5 = v7;
    v6 = v7 == -65536 || v7 == 0;
    if (!v6 && v7 != 0x10000)
    {
      a2->mChannelBitmap = 0;
      a2->mNumberChannelDescriptions = 0;
      a2->mChannelLayoutTag = v5;
      *a1 = 12;
    }
  }
  return result;
}

uint64_t AudioFileStreamObject::GetPropertyInfo(AudioFileStreamObject *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;

  if (*((_BYTE *)this + 177))
    return 1685348671;
  result = 1836020325;
  if (*(_DWORD *)(*((_QWORD *)this + 1) + 112))
    v6 = 1970170687;
  else
    v6 = 1836020325;
  if (a4)
    *a4 = 0;
  if (a2 > 1885564531)
  {
    if (a2 > 1886090593)
    {
      if (a2 > 1886616164)
      {
        if (a2 == 1886616165 || a2 == 1920098672)
        {
LABEL_55:
          if (a3)
          {
            result = 0;
            v8 = 4;
            goto LABEL_64;
          }
          return 0;
        }
        v7 = 1919247481;
        goto LABEL_54;
      }
      if (a2 == 1886090594)
        goto LABEL_55;
      if (a2 != 1886283375)
      {
        v7 = 1886547302;
LABEL_54:
        if (a2 == v7)
          goto LABEL_55;
        goto LABEL_73;
      }
      goto LABEL_47;
    }
    if (a2 > 1886086255)
    {
      if (a2 == 1886086256)
        goto LABEL_47;
      if (a2 != 1886086770)
      {
        v9 = 1886089836;
LABEL_46:
        if (a2 != v9)
          goto LABEL_73;
LABEL_47:
        if (!a3)
          return 0;
        result = 0;
        v8 = 16;
        goto LABEL_64;
      }
    }
    else
    {
      if (a2 == 1885564532)
      {
        v10 = *((_QWORD *)this + 12);
LABEL_59:
        result = v6;
        if (v10 < 0)
          return result;
        goto LABEL_62;
      }
      if (a2 == 1885957732)
        goto LABEL_47;
      if (a2 != 1886085753)
        goto LABEL_73;
    }
LABEL_49:
    if (!a3)
      return 0;
    result = 0;
    v8 = 24;
    goto LABEL_64;
  }
  if (a2 > 1685022309)
  {
    if (a2 <= 1718775914)
    {
      if (a2 == 1685022310)
      {
        if ((*((_QWORD *)this + 13) & 0x8000000000000000) != 0)
          return result;
LABEL_62:
        if (a3)
        {
          result = 0;
          v8 = 8;
          goto LABEL_64;
        }
        return 0;
      }
      if (a2 == 1717988724)
        goto LABEL_55;
      if (a2 != 1718383476)
        goto LABEL_73;
      if (*(_BYTE *)(*((_QWORD *)this + 1) + 108) && *((_QWORD *)this + 9) != *((_QWORD *)this + 8))
        v6 = 0;
      if (a3)
        *a3 = (*((_DWORD *)this + 18) - *((_DWORD *)this + 16)) & 0xFFFFFFF0;
      return v6;
    }
    if (a2 != 1718775915)
    {
      if (a2 == 1835493731)
      {
        result = v6;
        if (*(_BYTE *)(*((_QWORD *)this + 1) + 108))
        {
          if (a3)
          {
            result = 0;
            v8 = *((_DWORD *)this + 32);
            goto LABEL_64;
          }
          return 0;
        }
        return result;
      }
      v9 = 1852403300;
      goto LABEL_46;
    }
    goto LABEL_49;
  }
  if (a2 <= 1652125802)
  {
    if (a2 == 1633841264)
      goto LABEL_62;
    if (a2 != 1650683508)
    {
      v7 = 1651663220;
      goto LABEL_54;
    }
    v10 = *((_QWORD *)this + 11);
    goto LABEL_59;
  }
  if (a2 == 1652125803)
    goto LABEL_49;
  if (a2 != 1668112752)
  {
    if (a2 == 1684434292)
    {
      if (!*(_BYTE *)(*((_QWORD *)this + 1) + 105))
        return result;
      if (!a3)
        return 0;
      result = 0;
      v8 = 40;
LABEL_64:
      *a3 = v8;
      return result;
    }
LABEL_73:
    if (a3)
      *a3 = 0;
    result = 1886681407;
    if (a4)
      *a4 = 0;
    return result;
  }
  result = v6;
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 109))
  {
    if (a3)
    {
      result = 0;
      v8 = *((_DWORD *)this + 36);
      goto LABEL_64;
    }
    return 0;
  }
  return result;
}

uint64_t AudioFileStreamObject::GetProperty(AudioFileStreamObject *this, int a2, unsigned int *a3, _QWORD *__dst)
{
  uint64_t v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t (*v11)(void);
  const void *v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  double v20;
  uint64_t v21;
  int v22;
  int v23;

  if (*((_BYTE *)this + 177))
    return 1685348671;
  v7 = *((_QWORD *)this + 1);
  v8 = *(_DWORD *)(v7 + 112);
  if (v8)
    v4 = 1970170687;
  else
    v4 = 1836020325;
  v9 = 1886681407;
  if (a2 > 1885564531)
  {
    if (a2 > 1886090593)
    {
      if (a2 > 1886616164)
      {
        switch(a2)
        {
          case 1886616165:
            if (*a3 == 4)
            {
              v9 = 0;
              v10 = *((_DWORD *)this + 28);
              goto LABEL_101;
            }
            break;
          case 1920098672:
            if (*a3 == 4)
            {
              v22 = (*(uint64_t (**)(AudioFileStreamObject *))(*(_QWORD *)this + 160))(this);
              v9 = 0;
              *(_DWORD *)__dst = v22;
              return v9;
            }
            break;
          case 1919247481:
            if (*a3 == 4)
            {
              v9 = 0;
              *(_DWORD *)__dst = v8;
              return v9;
            }
            break;
          default:
            return v9;
        }
      }
      else
      {
        if (a2 == 1886090594)
          return v4;
        if (a2 != 1886283375)
        {
          if (a2 == 1886547302)
            return v4;
          return v9;
        }
        if (!*(_BYTE *)(v7 + 106))
          return v4;
        if (*a3 >= 0x10)
        {
          v9 = 0;
          *(_OWORD *)__dst = *((_OWORD *)this + 10);
          *a3 = 16;
          return v9;
        }
      }
      return 561211770;
    }
    if (a2 > 1886086255)
    {
      switch(a2)
      {
        case 1886086256:
          if (*a3 != 16)
            return 561211770;
          if (!__dst)
            return 4294967246;
          if ((*__dst & 0x8000000000000000) != 0)
            return 1885563711;
          v11 = *(uint64_t (**)(void))(*(_QWORD *)this + 184);
          break;
        case 1886086770:
          if (*a3 != 24)
            return 561211770;
          return (*(uint64_t (**)(AudioFileStreamObject *, _QWORD, _QWORD *))(*(_QWORD *)this + 144))(this, __dst[1], __dst);
        case 1886089836:
          if (*a3 != 16)
            return 561211770;
          if (!__dst)
            return 4294967246;
          if ((*__dst & 0x8000000000000000) != 0)
            return 1885563711;
          v11 = *(uint64_t (**)(void))(*(_QWORD *)this + 168);
          break;
        default:
          return v9;
      }
    }
    else
    {
      if (a2 == 1885564532)
      {
        v21 = *((_QWORD *)this + 12);
        if (v21 < 0)
          return v4;
        goto LABEL_71;
      }
      if (a2 == 1885957732)
        goto LABEL_52;
      if (a2 != 1886085753)
        return v9;
      if (*a3 != 24)
        return 561211770;
      v11 = *(uint64_t (**)(void))(*(_QWORD *)this + 192);
    }
    return v11();
  }
  if (a2 <= 1685022309)
  {
    if (a2 <= 1652125802)
    {
      if (a2 == 1633841264)
      {
        if (*a3 == 8)
        {
          v20 = AudioFileStreamObject::AverageBytesPerPacket(this);
          v9 = 0;
          *(double *)__dst = v20;
          return v9;
        }
        return 561211770;
      }
      if (a2 != 1650683508)
      {
        if (a2 != 1651663220)
          return v9;
        if (*a3 == 4)
        {
          v23 = 0;
          v9 = (*(uint64_t (**)(AudioFileStreamObject *, int *))(*(_QWORD *)this + 104))(this, &v23);
          if (!(_DWORD)v9)
          {
            v10 = v23;
LABEL_101:
            *(_DWORD *)__dst = v10;
          }
          return v9;
        }
        return 561211770;
      }
      v21 = *((_QWORD *)this + 11);
      if (v21 < 0)
        return v4;
LABEL_71:
      if (*a3 == 8)
      {
        v9 = 0;
        *__dst = v21;
        return v9;
      }
      return 561211770;
    }
    if (a2 != 1652125803)
    {
      if (a2 != 1668112752)
      {
        if (a2 != 1684434292)
          return v9;
        if (!*(_BYTE *)(v7 + 105))
          return v4;
        if (*a3 == 40)
        {
          v9 = 0;
          v16 = *(_OWORD *)((char *)this + 24);
          v17 = *(_OWORD *)((char *)this + 40);
          __dst[4] = *((_QWORD *)this + 7);
          *(_OWORD *)__dst = v16;
          *((_OWORD *)__dst + 1) = v17;
          return v9;
        }
        return 561211770;
      }
      if (!*(_BYTE *)(v7 + 109))
        return v4;
      v15 = *a3;
      if ((_DWORD)v15 != *((_DWORD *)this + 36))
        return 561211770;
      v12 = (const void *)*((_QWORD *)this + 17);
      goto LABEL_97;
    }
    if (*a3 != 24)
      return 561211770;
    v11 = *(uint64_t (**)(void))(*(_QWORD *)this + 200);
    return v11();
  }
  if (a2 > 1718775914)
  {
    if (a2 != 1718775915)
    {
      if (a2 == 1835493731)
      {
        if (!*(_BYTE *)(v7 + 108))
          return v4;
        v15 = *a3;
        if ((_DWORD)v15 != *((_DWORD *)this + 32))
          return 561211770;
        v12 = (const void *)*((_QWORD *)this + 15);
LABEL_97:
        v14 = __dst;
        goto LABEL_98;
      }
      if (a2 != 1852403300)
        return v9;
LABEL_52:
      if (a2 == 1885957732)
        v18 = 0xFFFFFFFFLL;
      else
        v18 = 1;
      if (*a3 != 16)
        return 561211770;
      if (__dst)
      {
        if ((*__dst & 0x8000000000000000) == 0)
          return (*(uint64_t (**)(AudioFileStreamObject *, uint64_t, _QWORD *))(*(_QWORD *)this + 176))(this, v18, __dst);
        return 1885563711;
      }
      return 4294967246;
    }
    if (*a3 != 24)
      return 561211770;
    return (*(uint64_t (**)(AudioFileStreamObject *, _QWORD, char *, char *))(*(_QWORD *)this + 152))(this, *__dst, (char *)__dst + 8, (char *)__dst + 16);
  }
  if (a2 == 1685022310)
  {
    v21 = *((_QWORD *)this + 13);
    if (v21 < 0)
      return v4;
    goto LABEL_71;
  }
  if (a2 == 1717988724)
  {
    if (!*(_BYTE *)(v7 + 104))
      return v4;
    if (*a3 == 4)
    {
      v9 = 0;
      v10 = *((_DWORD *)this + 4);
      goto LABEL_101;
    }
    return 561211770;
  }
  if (a2 != 1718383476)
    return v9;
  if (*(_BYTE *)(v7 + 108))
  {
    v12 = (const void *)*((_QWORD *)this + 8);
    v13 = *((_QWORD *)this + 9) - (_QWORD)v12;
    if (v13)
    {
      if (v13 > (unint64_t)*a3)
        return 561211770;
      *a3 = 16 * (v13 >> 4);
      v14 = __dst;
      v15 = 16 * (v13 >> 4);
LABEL_98:
      memcpy(v14, v12, v15);
      return 0;
    }
  }
  return v4;
}

uint64_t AudioFileStreamObject::SetProperty(AudioFileStreamObject *this, unsigned int a2, unsigned int a3, const void *a4)
{
  return 1886681407;
}

uint64_t AudioFileStreamObject::Seek(AudioFileStreamObject *this, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  double v30;
  unsigned int v31;
  float v32;
  float v33;
  int v34;
  float v35;
  float v36;
  double v37;
  uint64_t v38[3];

  result = 1836020325;
  v6 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v6 + 105))
  {
    v10 = *((unsigned int *)this + 10);
    if ((_DWORD)v10)
    {
      *a3 = v10 * a2;
      *a4 = 0;
LABEL_4:
      result = 0;
      *((_DWORD *)this + 59) = 0;
      *((_QWORD *)this + 23) = a2;
      v11 = *((_QWORD *)this + 13) + *a3;
      *(_QWORD *)(v6 + 88) = v11;
      *(_QWORD *)(v6 + 96) = v11;
      *(_DWORD *)(v6 + 80) = 0;
      *(_QWORD *)(v6 + 72) = 0;
      return result;
    }
    v12 = (uint64_t *)*((_QWORD *)this + 19);
    if (v12)
    {
      if (v12[3] < a2)
        return 4294967257;
      CompressedPacketTable::operator[]((uint64_t)v38, v12, a2);
      *a3 = v38[0];
      *a4 = 0;
      v6 = *((_QWORD *)this + 1);
      goto LABEL_4;
    }
    v13 = *((_QWORD *)this + 11);
    if (v13 >= 1)
    {
      v14 = *((_QWORD *)this + 12);
      if (v14 >= 1)
      {
        v15 = (double)v13 / (double)v14;
        v16 = *(_QWORD *)(v6 + 168);
        v17 = *(_QWORD *)(v6 + 176);
        v18 = v17 - v16;
        if (v17 != v16)
        {
          v19 = *(unsigned __int16 *)(v6 + 152);
          if (*(_WORD *)(v6 + 152))
          {
            v20 = *(_DWORD *)(v6 + 156);
            if (v20)
            {
              if (a2 / v19 < (v18 >> 2))
              {
                v21 = 0.0;
                v22 = a2;
                if (v19 <= a2)
                {
                  v23 = 0;
                  v24 = 0;
                  v22 = a2;
                  do
                  {
                    v23 += (*(_DWORD *)(v16 + 4 * v24) + v20);
                    v22 -= v19;
                    ++v24;
                  }
                  while (v22 >= v19);
LABEL_33:
                  v21 = (double)v23;
                  goto LABEL_34;
                }
                goto LABEL_34;
              }
            }
          }
        }
        if (*(_BYTE *)(v6 + 192))
        {
          if (*(_WORD *)(v6 + 206))
          {
            v27 = *(unsigned __int16 *)(v6 + 208);
            if (*(_WORD *)(v6 + 208))
            {
              v28 = *(_QWORD *)(v6 + 216);
              if (a2 / v27 < ((unint64_t)(*(_QWORD *)(v6 + 224) - v28) >> 2))
              {
                v21 = 0.0;
                v22 = a2;
                if (v27 <= a2)
                {
                  v23 = 0;
                  v29 = 0;
                  v22 = a2;
                  do
                  {
                    v23 += *(_DWORD *)(v28 + 4 * v29) * *(unsigned __int16 *)(v6 + 204);
                    v22 -= v27;
                    ++v29;
                  }
                  while (v22 >= v27);
                  goto LABEL_33;
                }
LABEL_34:
                v30 = v21 + (double)v22 * v15;
LABEL_47:
                *a3 = (uint64_t)v30;
                *a4 = 1;
                goto LABEL_48;
              }
            }
          }
        }
        if ((*(_DWORD *)(v6 + 248) & 0x14) == 4)
        {
          v31 = 1120403456;
          v32 = (float)v14;
          v33 = (float)((float)a2 * 100.0) / (float)v14;
          if (v33 > 100.0)
            v33 = 100.0;
          if ((int)v33 >= 99)
            v34 = 99;
          else
            v34 = (int)v33;
          LOBYTE(v31) = *(_BYTE *)(v6 + v34 + 264);
          v35 = (float)v31;
          if ((int)v33 > 98)
          {
            v36 = 256.0;
          }
          else
          {
            LOBYTE(v32) = *(_BYTE *)(v34 + v6 + 265);
            v36 = (float)LODWORD(v32);
          }
          v15 = (float)((float)(v35 + (float)((float)(v36 - v35) * (float)(v33 - (float)v34))) * (float)v13);
          v37 = 0.00390625;
          goto LABEL_46;
        }
LABEL_43:
        v37 = (double)a2;
LABEL_46:
        v30 = v15 * v37;
        goto LABEL_47;
      }
    }
    v25 = *((_QWORD *)this + 26);
    if (v25)
    {
      v26 = *((_QWORD *)this + 27);
      if (v26 > 0)
      {
        v15 = (double)v26 / (double)v25;
        goto LABEL_43;
      }
    }
    if (!a2 && (*((_QWORD *)this + 13) & 0x8000000000000000) == 0)
    {
      *a3 = 0;
LABEL_48:
      *((_BYTE *)this + 176) = 1;
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t AudioFileStreamObject::GetBitRate(AudioFileStreamObject *this, unsigned int *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 40);
  if (!v2)
    return 1836020325;
  result = 0;
  *a2 = v2 / *((_QWORD *)this + 26);
  return result;
}

uint64_t AudioFileStreamObject::GeneratePackets(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  AudioStreamPacketDescription *v44;
  unsigned int v45;
  int v46;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50[2];
  UInt32 v51;
  UInt32 v52;
  AudioStreamPacketDescription v53;

  v2 = 2003334207;
  v3 = *(_DWORD *)(a1 + 236);
  if (v3 > 148)
  {
    if (v3 == 152)
    {
      LODWORD(v7) = *(_DWORD *)(a1 + 256);
      v8 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_23;
    }
    if (v3 == 149)
    {
      v5 = *(_QWORD *)(a1 + 8);
      v6 = *(_QWORD *)(v5 + 96);
      goto LABEL_14;
    }
  }
  else
  {
    if (v3 == -1)
      return 0;
    if (!v3)
    {
      for (i = *(_QWORD *)(a1 + 184); ; *(_QWORD *)(a1 + 184) = i)
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, i, a1 + 312, a1 + 304))
        {
          goto LABEL_51;
        }
        *(_QWORD *)(a1 + 312) += *(_QWORD *)(a1 + 104);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) & 0x8000000000000000) == 0)
        {
          v9 = *(_QWORD *)(a1 + 312) + *(unsigned int *)(a1 + 304);
          v10 = *(_QWORD *)(a1 + 104);
          if (v9 > (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) + v10)
            goto LABEL_51;
        }
        v5 = *(_QWORD *)(a1 + 8);
        v6 = *(_QWORD *)(a1 + 312);
        *(_QWORD *)(v5 + 96) = v6;
LABEL_14:
        v11 = *(_QWORD *)(v5 + 88);
        v12 = v11 + *(unsigned int *)(v5 + 80);
        v13 = v6 < v11 || v12 <= v6;
        if (v13 || (v14 = v12 - v6) == 0)
        {
          v2 = 0;
          v46 = 149;
          goto LABEL_53;
        }
        v7 = *(unsigned int *)(a1 + 304);
        if (v7 <= v14)
          break;
        if (*(_DWORD *)(a1 + 284) < v7)
        {
          *(_DWORD *)(a1 + 284) = v7;
          CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v7, 0);
          LODWORD(v7) = *(_DWORD *)(a1 + 304);
        }
        *(_DWORD *)(a1 + 256) = v7;
        v8 = *(unsigned __int8 **)(a1 + 288);
        *(_QWORD *)(a1 + 264) = v8;
LABEL_23:
        v50[0] = v7;
        StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), v50, v8);
        v15 = v50[0];
        v16 = *(_DWORD *)(a1 + 256);
        *(_QWORD *)(a1 + 264) += v50[0];
        v17 = v16 - v15;
        *(_DWORD *)(a1 + 256) = v17;
        if (v17)
        {
          v2 = 0;
          v46 = 152;
          goto LABEL_53;
        }
        if (*(_DWORD *)(a1 + 40))
        {
          v18 = *(unsigned int *)(a1 + 304);
          v19 = *(_QWORD *)(a1 + 8);
          v20 = *(_QWORD *)(v19 + 16);
          *(_QWORD *)(v20 + 224) += *(unsigned int *)(v20 + 44);
          v21 = *(_QWORD *)(v20 + 216) + v18;
          ++*(_QWORD *)(v20 + 208);
          *(_QWORD *)(v20 + 216) = v21;
          (*(void (**)(_QWORD))(v19 + 32))(*(_QWORD *)(v19 + 40));
        }
        else
        {
          v37 = *(uint64_t **)(a1 + 152);
          v53.mStartOffset = 0;
          CompressedPacketTable::operator[]((uint64_t)v50, v37, *(_QWORD *)(a1 + 184));
          v53.mDataByteSize = v52;
          CompressedPacketTable::operator[]((uint64_t)v50, v37, *(_QWORD *)(a1 + 184));
          v53.mVariableFramesInPacket = v51;
          AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), *(_DWORD *)(a1 + 304), 1u, *(const void **)(a1 + 288), &v53, 1);
        }
        i = *(_QWORD *)(a1 + 184) + 1;
LABEL_59:
        ;
      }
      v53.mStartOffset = *(_QWORD *)(a1 + 184);
      v48 = v14;
      v49 = 0;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) & 0x8000000000000000) == 0)
      {
        v22 = v6 + v48;
        v23 = *(_QWORD *)(a1 + 104);
        if (v22 > (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) + v23)
        {
          v24 = *(_DWORD *)(a1 + 104);
          v48 = v24 - v6 + (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
        }
      }
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, AudioStreamPacketDescription *, unsigned int *))(*(_QWORD *)a1 + 208))(a1, v6, &v48, &v53, &v49);
      if ((_DWORD)v25)
      {
        v2 = v25;
        if ((_DWORD)v25 == 1685348671)
        {
          *(_BYTE *)(a1 + 177) = 1;
          v2 = 1685348671;
        }
        goto LABEL_52;
      }
      v26 = v49;
      if (!v49)
        goto LABEL_52;
      v27 = 0;
      v28 = *(_QWORD *)(a1 + 8);
      v29 = *(_QWORD *)(v28 + 88);
      v30 = *(_QWORD *)(v28 + 96);
      v31 = v29 + *(unsigned int *)(v28 + 80);
      if (v30 >= v29 && v31 > v30 && (_DWORD)v31 - (_DWORD)v30 != 0)
        v27 = (const void *)(*(_QWORD *)(v28 + 72) + (v30 - v29));
      if (!*(_DWORD *)(a1 + 40))
      {
        if (*(_DWORD *)(a1 + 200) < v49)
        {
          v38 = (1 << -__clz(v49 - 1));
          *(_DWORD *)(a1 + 200) = v38;
          CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), v38);
        }
        v39 = *(uint64_t **)(a1 + 152);
        if (v39)
        {
          v40 = *(_QWORD *)(a1 + 184);
          if (v40 > v39[3])
            goto LABEL_52;
          CompressedPacketTable::operator[]((uint64_t)v50, *(uint64_t **)(a1 + 152), v40);
          if (v49)
          {
            v41 = 0;
            v42 = 0;
            v43 = *(_QWORD *)v50;
            do
            {
              CompressedPacketTable::operator[]((uint64_t)v50, v39, v42 + *(_QWORD *)(a1 + 184));
              *(_QWORD *)(*(_QWORD *)(a1 + 192) + v41 * 16) = *(_QWORD *)v50 - v43;
              CompressedPacketTable::operator[]((uint64_t)v50, v39, v42 + *(_QWORD *)(a1 + 184));
              *(_DWORD *)(*(_QWORD *)(a1 + 192) + v41 * 16 + 12) = v52;
              CompressedPacketTable::operator[]((uint64_t)v50, v39, v42 + *(_QWORD *)(a1 + 184));
              v44 = *(AudioStreamPacketDescription **)(a1 + 192);
              v44[v41].mVariableFramesInPacket = v51;
              ++v42;
              v45 = v49;
              ++v41;
            }
            while (v42 < v49);
          }
          else
          {
            v45 = 0;
            v44 = *(AudioStreamPacketDescription **)(a1 + 192);
          }
          AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v48, v45, v27, v44, 1);
          goto LABEL_58;
        }
        v26 = v49;
        v28 = *(_QWORD *)(a1 + 8);
      }
      v34 = v48;
      v35 = *(_QWORD *)(v28 + 16);
      *(_QWORD *)(v35 + 224) += *(_DWORD *)(v35 + 44) * v26;
      v36 = *(_QWORD *)(v35 + 216) + v34;
      *(_QWORD *)(v35 + 208) += v26;
      *(_QWORD *)(v35 + 216) = v36;
      (*(void (**)(_QWORD))(v28 + 32))(*(_QWORD *)(v28 + 40));
LABEL_58:
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) += v48;
      i = *(_QWORD *)(a1 + 184) + v49;
      goto LABEL_59;
    }
  }
LABEL_51:
  v2 = 0;
LABEL_52:
  v46 = -1;
LABEL_53:
  *(_DWORD *)(a1 + 236) = v46;
  return v2;
}

uint64_t AudioFileStreamObject::PrintObject(AudioFileStreamObject *this, __sFILE *a2)
{
  return fprintf(a2, "AudioFileStreamObject %p\n", this);
}

uint64_t AudioFileStreamObject::GetPacketInfo(AudioFileStreamObject *this, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;

  v7 = *((unsigned int *)this + 10);
  if ((_DWORD)v7)
  {
    result = 0;
    *a3 = v7 * a2;
    *a4 = v7;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 19);
    if (v9)
    {
      result = 1885563711;
      if ((a2 & 0x8000000000000000) == 0 && v9[3] > a2)
      {
        CompressedPacketTable::operator[]((uint64_t)&v10, v9, a2);
        *a3 = v10;
        CompressedPacketTable::operator[]((uint64_t)&v10, v9, a2);
        result = 0;
        *a4 = v11;
      }
    }
    else
    {
      return 1970170687;
    }
  }
  return result;
}

uint64_t AudioFileStreamObject::PacketToFrame(AudioFileStreamObject *this, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;

  if (a2 < 0)
    return 1885563711;
  v6 = *((unsigned int *)this + 11);
  if ((_DWORD)v6)
  {
    result = 0;
    v8 = v6 * a2;
LABEL_4:
    *a3 = v8;
    return result;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 19);
  if (v9 && v9[3] > a2)
  {
    CompressedPacketTable::operator[]((uint64_t)v12, v9, a2);
    result = 0;
    v8 = v13;
    goto LABEL_4;
  }
  if (!a2)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  result = 1970170687;
  v10 = *((_QWORD *)this + 28);
  if (v10 >= 1)
  {
    v11 = *((_QWORD *)this + 26);
    if (v11 >= 1)
    {
      result = 0;
      v8 = (uint64_t)((double)v10 / (double)v11 * (double)a2);
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t AudioFileStreamObject::FrameToPacket(AudioFileStreamObject *this, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  _DWORD v20[6];
  _QWORD v21[3];
  _QWORD v22[5];

  v7 = *((unsigned int *)this + 11);
  if ((_DWORD)v7)
  {
    result = 0;
    v9 = a2 / v7;
    *a3 = a2 / v7;
LABEL_3:
    v10 = a2 - v9 * v7;
LABEL_4:
    *a4 = v10;
    return result;
  }
  v12 = *((_QWORD *)this + 19);
  if (v12)
  {
    v21[0] = 0;
    v21[1] = 0;
    v21[2] = a2;
    v22[0] = v12;
    v13 = *(_QWORD *)(v12 + 24);
    v22[1] = 0;
    std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,CompressedPacketTable::iterator,CompressedPacketTable::iterator,AudioStreamPacketDescriptionExtended,std::__identity,std::__less<void,void>>((uint64_t)&v18, (uint64_t)v22, v13, (uint64_t)v21);
    v14 = v19;
    if (v19 != *(_QWORD *)(v12 + 24))
    {
      *a3 = v19;
      CompressedPacketTable::operator[]((uint64_t)v20, v18, v14);
      result = 0;
      v10 = a2 - v20[4];
      goto LABEL_4;
    }
  }
  if (!a2)
  {
    result = 0;
    *a3 = 0;
    *a4 = 0;
    return result;
  }
  result = 1970170687;
  v15 = *((_QWORD *)this + 28);
  if (v15 >= 1)
  {
    v16 = *((_QWORD *)this + 26);
    if (v16 >= 1)
    {
      result = 0;
      v17 = (double)v15 / (double)v16;
      *a3 = (uint64_t)((double)a2 / v17);
      v7 = v17;
      v9 = a2 / v7;
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t AudioFileStreamObject::PacketToRollDistance(AudioFileStreamObject *this, AudioPacketRollDistanceTranslation *a2)
{
  int v3;
  SInt64 mPacket;
  unsigned int outPropertyData;
  UInt32 ioPropertyDataSize;
  int inSpecifier;

  v3 = *((_DWORD *)this + 8);
  ioPropertyDataSize = 4;
  inSpecifier = v3;
  outPropertyData = 0;
  AudioFormatGetProperty(0x64726C6Cu, 4u, &inSpecifier, &ioPropertyDataSize, &outPropertyData);
  mPacket = outPropertyData;
  if (a2->mPacket < outPropertyData)
    mPacket = a2->mPacket;
  a2->mRollDistance = mPacket;
  return 0;
}

uint64_t AudioFileStreamObject::ScanForIndependentPacket(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (a2 != 1)
  {
    result = 0;
    v6 = *a3 - 1;
LABEL_10:
    a3[1] = v6;
    return result;
  }
  if (*(_DWORD *)(a1 + 40))
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(a1 + 152);
  if (v7)
  {
    v4 = *(_QWORD *)(v7 + 24);
LABEL_7:
    v6 = *a3 + 1;
    if (v6 >= v4)
    {
      result = 0;
      v6 = -1;
    }
    else
    {
      result = 0;
    }
    goto LABEL_10;
  }
  return 1885563711;
}

uint64_t AudioFileStreamObject::PacketToDependencyInfo(AudioFileStreamObject *this, AudioPacketDependencyInfoTranslation *a2)
{
  int v3;
  UInt32 mPacket;
  UInt32 outPropertyData;
  UInt32 ioPropertyDataSize;
  int inSpecifier;

  v3 = *((_DWORD *)this + 8);
  ioPropertyDataSize = 4;
  inSpecifier = v3;
  outPropertyData = 0;
  AudioFormatGetProperty(0x64726C6Cu, 4u, &inSpecifier, &ioPropertyDataSize, &outPropertyData);
  mPacket = outPropertyData;
  if (a2->mPacket < outPropertyData)
    mPacket = a2->mPacket;
  a2->mIsIndependentlyDecodable = 1;
  a2->mNumberPrerollPackets = mPacket;
  return 0;
}

uint64_t AudioFileStreamObject::PacketToByte(AudioFileStreamObject *this, AudioBytePacketTranslation *a2)
{
  uint64_t result;
  SInt64 mPacket;
  uint64_t v6;
  AudioBytePacketTranslationFlags v7;
  SInt64 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  SInt64 v12[3];

  result = 1885563711;
  mPacket = a2->mPacket;
  if ((mPacket & 0x8000000000000000) == 0)
  {
    v6 = *((unsigned int *)this + 10);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = mPacket * v6;
LABEL_4:
      a2->mByte = v8;
LABEL_5:
      result = 0;
      a2->mFlags = v7;
      return result;
    }
    v9 = (uint64_t *)*((_QWORD *)this + 19);
    if (!v9)
    {
      v10 = *((_QWORD *)this + 11);
      if (v10 < 1 || (v11 = *((_QWORD *)this + 12), v11 <= 0))
      {
        v11 = *((_QWORD *)this + 26);
        if (v11 < 1)
          return 1836020325;
        v10 = *((_QWORD *)this + 27);
      }
      a2->mByte = vcvtmd_s64_f64((double)v10 / (double)v11 * (double)mPacket);
      v7 = 1;
      goto LABEL_5;
    }
    if (mPacket < v9[3])
    {
      CompressedPacketTable::operator[]((uint64_t)v12, v9, mPacket);
      v7 = 0;
      v8 = v12[0];
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t AudioFileStreamObject::ByteToPacket(AudioFileStreamObject *this, AudioBytePacketTranslation *a2)
{
  unint64_t mByte;
  unint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  SInt64 v10;
  SInt64 v11;
  SInt64 v12;
  unsigned int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  int v19;
  double v20;
  uint64_t *v21;
  SInt64 v22;
  _DWORD v23[6];
  _QWORD v24[3];
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(_BYTE *, uint64_t);

  mByte = a2->mByte;
  if (a2->mByte < 0)
    return 1885563711;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4)
  {
    result = 0;
    a2->mPacket = mByte / v4;
    *(_QWORD *)&a2->mByteOffsetInPacket = (mByte % v4);
    return result;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 19);
  if (!v6)
  {
    v15 = *((_QWORD *)this + 11);
    if (v15 < 1 || (v16 = *((_QWORD *)this + 12), v16 <= 0))
    {
      v16 = *((_QWORD *)this + 26);
      if (v16 < 1)
        return 1836020325;
      v15 = *((_QWORD *)this + 27);
    }
    result = 0;
    v17 = (double)v15 / (double)v16;
    v18 = (double)(uint64_t)mByte / v17;
    a2->mPacket = vcvtmd_s64_f64(v18);
    a2->mByteOffsetInPacket = vcvtmd_u64_f64(v17 * (v18 - (double)(uint64_t)floor(v18)));
    a2->mFlags = 1;
    return result;
  }
  v24[1] = 0;
  v24[2] = 0;
  v24[0] = mByte;
  v7 = v6[3];
  v27 = (uint64_t (*)(_BYTE *, uint64_t))byte_less_than;
  v25 = v6;
  v26 = 0;
  std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,CompressedPacketTable::iterator,CompressedPacketTable::iterator,AudioStreamPacketDescriptionExtended,std::__identity,BOOL (*)(AudioStreamPacketDescriptionExtended const&,AudioStreamPacketDescriptionExtended const&)>((uint64_t)&v21, (uint64_t)&v25, v7, (uint64_t)v24, &v27);
  v8 = v6[3];
  v9 = v22;
  if (v22 == v8)
  {
    v10 = v8 - 1;
    CompressedPacketTable::operator[]((uint64_t)&v25, v6, v8 - 1);
    v11 = (SInt64)v25 + HIDWORD(v26);
    v12 = a2->mByte;
    if (a2->mByte >= v11)
    {
      v14 = (double)v11 / (double)v6[3];
      v20 = (double)v12 / v14;
      v10 = vcvtmd_s64_f64(v20);
      v13 = vcvtmd_u64_f64(v14 * (v20 - (double)(uint64_t)floor(v20)));
      HIDWORD(v14) = 1;
    }
    else
    {
      v13 = v12 - (_DWORD)v25;
      HIDWORD(v14) = 0;
    }
    LODWORD(v14) = v13;
    a2->mPacket = v10;
    *(double *)&a2->mByteOffsetInPacket = v14;
  }
  else
  {
    a2->mPacket = v22;
    v19 = a2->mByte;
    CompressedPacketTable::operator[]((uint64_t)v23, v21, v9);
    *(_QWORD *)&a2->mByteOffsetInPacket = (v19 - v23[0]);
  }
  return 0;
}

uint64_t AudioFileStreamObject::ByteRangeToPacketRange(AudioFileStreamObject *this, uint64_t a2, unsigned int *a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;

  v8 = a2 - *((_QWORD *)this + 13);
  v9 = *((unsigned int *)this + 10);
  if ((_DWORD)v9)
  {
    v10 = v8 + *a3;
    v11 = (v8 + v9 - 1) / v9;
    *a4 = v11;
    v12 = v10 / v9 - v11;
    *a5 = v12;
    v13 = *((_DWORD *)this + 10) * v12;
  }
  else
  {
    v14 = (uint64_t *)*((_QWORD *)this + 19);
    if (!v14)
      return 1970170687;
    v15 = v14[3];
    if (!v15)
      goto LABEL_11;
    v16 = 0;
    do
    {
      CompressedPacketTable::operator[]((uint64_t)&v24, v14, v16 + (v15 >> 1));
      if (v24 >= v8)
      {
        v15 >>= 1;
      }
      else
      {
        v16 += (v15 >> 1) + 1;
        v15 += ~(v15 >> 1);
      }
    }
    while (v15);
    v17 = v14[3];
    if (v17 != v16)
    {
      v19 = v17 - v16;
      v20 = v8 + *a3;
      v21 = v16;
      do
      {
        CompressedPacketTable::operator[]((uint64_t)&v24, v14, v21 + (v19 >> 1));
        if (v24 + v25 > v20)
        {
          v19 >>= 1;
        }
        else
        {
          v21 += (v19 >> 1) + 1;
          v19 += ~(v19 >> 1);
        }
      }
      while (v19);
      *a5 = v21 - v16;
      *a4 = v16;
      CompressedPacketTable::operator[]((uint64_t)&v24, v14, v21 - 1);
      v22 = v24;
      CompressedPacketTable::operator[]((uint64_t)&v24, v14, v21 - 1);
      v23 = v22 + v25;
      CompressedPacketTable::operator[]((uint64_t)&v24, v14, v16);
      v13 = v23 - v24;
    }
    else
    {
LABEL_11:
      v13 = 0;
      *a4 = 0;
      *a5 = 0;
    }
  }
  result = 0;
  *a3 = v13;
  return result;
}

BOOL byte_less_than(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,CompressedPacketTable::iterator,CompressedPacketTable::iterator,AudioStreamPacketDescriptionExtended,std::__identity,BOOL (*)(AudioStreamPacketDescriptionExtended const&,AudioStreamPacketDescriptionExtended const&)>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(_BYTE *, uint64_t))
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _BYTE v14[24];

  v6 = (_QWORD *)result;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = a3 - v7;
  if (a3 != v7)
  {
    do
    {
      v11 = v8 >> 1;
      v12 = *(uint64_t **)a2;
      v13 = *(_QWORD *)(a2 + 8) + (v8 >> 1);
      CompressedPacketTable::operator[]((uint64_t)v14, *(uint64_t **)a2, v13);
      result = (*a5)(v14, a4);
      if ((_DWORD)result)
      {
        *(_QWORD *)a2 = v12;
        *(_QWORD *)(a2 + 8) = v13 + 1;
        v11 = v8 + ~v11;
      }
      v8 = v11;
    }
    while (v11);
    v7 = *(_QWORD *)(a2 + 8);
  }
  *v6 = *(_QWORD *)a2;
  v6[1] = v7;
  return result;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,CompressedPacketTable::iterator,CompressedPacketTable::iterator,AudioStreamPacketDescriptionExtended,std::__identity,std::__less<void,void>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;

  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = a3 - v6;
  if (a3 != v6)
  {
    do
    {
      v9 = v7 >> 1;
      v10 = *(uint64_t **)a2;
      v11 = *(_QWORD *)(a2 + 8) + (v7 >> 1);
      result = CompressedPacketTable::operator[]((uint64_t)v12, *(uint64_t **)a2, v11);
      if (v13 < *(_QWORD *)(a4 + 16))
      {
        *(_QWORD *)a2 = v10;
        *(_QWORD *)(a2 + 8) = v11 + 1;
        v9 = v7 + ~v9;
      }
      v7 = v9;
    }
    while (v9);
    v6 = *(_QWORD *)(a2 + 8);
  }
  *v5 = *(_QWORD *)a2;
  v5[1] = v6;
  return result;
}

uint64_t AudioFileStreamWrapper::CallPacketsProc(AudioFileStreamWrapper *this, UInt32 a2, unsigned int a3, const void *a4, AudioStreamPacketDescription *a5, int a6)
{
  UInt32 v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  UInt32 *p_mVariableFramesInPacket;
  UInt32 v12;
  uint64_t v13;
  uint64_t v14;

  if (a5)
  {
    v6 = LODWORD(a5[a3 - 1].mStartOffset) + a5[a3 - 1].mDataByteSize - LODWORD(a5->mStartOffset);
    v7 = *((_QWORD *)this + 2);
    v8 = *(_DWORD *)(v7 + 44);
    if (v8)
    {
      v9 = v8 * a3;
    }
    else
    {
      v9 = 0;
      if (a3)
      {
        v10 = a3;
        p_mVariableFramesInPacket = &a5->mVariableFramesInPacket;
        do
        {
          v12 = *p_mVariableFramesInPacket;
          p_mVariableFramesInPacket += 4;
          v9 += v12;
          --v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v7 = *((_QWORD *)this + 2);
    v9 = *(_DWORD *)(v7 + 44) * a3;
    v6 = a2;
  }
  if (a6)
  {
    v13 = *(_QWORD *)(v7 + 208);
    v14 = *(_QWORD *)(v7 + 224);
    *(_QWORD *)(v7 + 216) += v6;
    *(_QWORD *)(v7 + 224) = v14 + v9;
    *(_QWORD *)(v7 + 208) = v13 + a3;
  }
  return (*((uint64_t (**)(_QWORD))this + 4))(*((_QWORD *)this + 5));
}

void *CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems(void **a1, uint64_t a2)
{
  void *result;
  std::bad_alloc *exception;
  std::bad_alloc *v6;

  result = reallocf(*a1, 16 * a2);
  if (a2 && !result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v6 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

double AudioFileStreamObject::AverageBytesPerPacket(AudioFileStreamObject *this)
{
  unsigned int v1;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  _DWORD v9[6];
  _QWORD v10[3];

  v1 = *((_DWORD *)this + 10);
  if (v1)
    return (double)v1;
  v3 = (uint64_t *)*((_QWORD *)this + 19);
  if (v3)
  {
    v4 = v3[3];
    CompressedPacketTable::operator[]((uint64_t)v10, v3, v4 - 1);
    v5 = v10[0];
    CompressedPacketTable::operator[]((uint64_t)v9, v3, v4 - 1);
    v6 = (double)(v5 + v9[3]);
    v7 = (double)v4;
  }
  else
  {
    v8 = *((_QWORD *)this + 26);
    if (v8 < 1)
      return 1836020320.0;
    v6 = (double)*((uint64_t *)this + 27);
    v7 = (double)v8;
  }
  return v6 / v7;
}

void AudioFileStreamWrapper::~AudioFileStreamWrapper(AudioFileStreamWrapper *this)
{
  AudioFileStreamWrapper::~AudioFileStreamWrapper(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1E29089D0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 17);
  if (v3)
    free(v3);
  v4 = (void *)*((_QWORD *)this + 27);
  if (v4)
  {
    *((_QWORD *)this + 28) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 21);
  if (v5)
  {
    *((_QWORD *)this + 22) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 16);
  if (v6)
  {
    free(v6);
    *((_QWORD *)this + 16) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 7) = v7;
    operator delete(v7);
  }
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

uint64_t AudioFileStreamWrapper::PrintObject(AudioFileStreamWrapper *this, __sFILE *a2)
{
  return fprintf(a2, "AudioFileStreamWrapper %p\n", this);
}

BOOL TOpaqueObject<AudioFileStreamWrapper,OpaqueAudioFileStreamID *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<AudioFileStreamWrapper>::sRTTI || a2 == (void *)MEMORY[0x1E0DDEC88];
}

void AudioFileStreamRecognizer::~AudioFileStreamRecognizer(AudioFileStreamRecognizer *this)
{
  AudioFileStreamObject::~AudioFileStreamObject(this);
  JUMPOUT(0x193FFE460);
}

uint64_t AudioFileStreamRecognizer::Seek(AudioFileStreamRecognizer *this, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  return 1836020325;
}

uint64_t AudioFileStreamRecognizer::ParseHeader(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  size_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v12;
  unsigned int v13;
  char *v14;
  int v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  size_t v23;
  int v24;
  uint64_t v25;
  const void *v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  AudioFileFormatRegistry *AudioFileFormatRegistry;
  AudioFileFormatRegistry *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _DWORD *FormatForData;
  int v36;
  uint64_t v37;
  EC3AudioStream *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;

  v2 = *(_DWORD *)(a1 + 236);
  if (v2 == -1)
    return 0;
  if (v2)
  {
    if (v2 != 1464)
    {
      result = 0;
LABEL_84:
      v24 = -1;
      goto LABEL_85;
    }
    v5 = *(_QWORD *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(v5 + 116);
  }
  else
  {
    *(_DWORD *)(a1 + 256) = 128;
    v5 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(v5 + 88);
    v8 = *(_QWORD *)(v5 + 96);
    v10 = v9 + *(unsigned int *)(v5 + 80);
    v12 = v8 < v9 || v10 <= v8;
    v13 = v10 - v8;
    if (v12)
      v6 = 0;
    else
      v6 = v13;
    if (v6 > 0x7F)
      goto LABEL_43;
    *(_QWORD *)(a1 + 272) = v8;
    v14 = *(char **)(v5 + 72);
    if (v14 == *(char **)(v5 + 128))
    {
      if (v13)
        v15 = v12;
      else
        v15 = 1;
      if (v15)
        v16 = 0;
      else
        v16 = &v14[(v8 - v9)];
      memmove(v14, v16, v6);
      v5 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v5 + 120) <= 0x7Fu)
      {
        *(_DWORD *)(v5 + 120) = 128;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), 0x80uLL);
        v5 = *(_QWORD *)(a1 + 8);
      }
      *(_DWORD *)(v5 + 116) = v6;
      *(_QWORD *)(v5 + 96) = *(_QWORD *)(v5 + 88) + *(unsigned int *)(v5 + 80);
    }
    else
    {
      if (*(_DWORD *)(v5 + 120) <= 0x7Fu)
      {
        *(_DWORD *)(v5 + 120) = 128;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), 0x80uLL);
        v5 = *(_QWORD *)(a1 + 8);
      }
      LODWORD(v6) = 0;
      *(_DWORD *)(v5 + 116) = 0;
    }
  }
  v17 = *(_DWORD *)(a1 + 256) - v6;
  v18 = *(_QWORD *)(v5 + 88);
  v19 = *(_QWORD *)(v5 + 96);
  v20 = v18 + *(unsigned int *)(v5 + 80);
  if (v20 <= v19 || v19 < v18)
    v22 = 0;
  else
    v22 = v20 - v19;
  if (v17 <= v22)
    v17 = v22;
  v49 = v17;
  v23 = v17 + v6;
  if (*(_DWORD *)(v5 + 120) < v23)
  {
    *(_DWORD *)(v5 + 120) = v23;
    CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), v23);
    v5 = *(_QWORD *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(v5 + 116);
  }
  StreamBuffer::Copy((_QWORD *)(v5 + 72), &v49, (unsigned __int8 *)(*(_QWORD *)(v5 + 128) + v6));
  v5 = *(_QWORD *)(a1 + 8);
  v13 = *(_DWORD *)(v5 + 116) + v49;
  *(_DWORD *)(v5 + 116) = v13;
  if (v13 < *(_DWORD *)(a1 + 256))
  {
    result = 0;
    v24 = 1464;
LABEL_85:
    *(_DWORD *)(a1 + 236) = v24;
    return result;
  }
  v8 = *(_QWORD *)(a1 + 272);
  v25 = *(_QWORD *)(v5 + 128);
  *(_QWORD *)(v5 + 88) = v8;
  *(_QWORD *)(v5 + 96) = v8;
  *(_QWORD *)(v5 + 72) = v25;
  *(_DWORD *)(v5 + 80) = v13;
  v10 = v8 + v13;
  v9 = v8;
LABEL_43:
  v26 = 0;
  v27 = v8 >= v9 && v8 < v10;
  v28 = !v27;
  if (v27 && v13)
    v26 = (const void *)(*(_QWORD *)(v5 + 72) + (v8 - v9));
  if (v28)
    v29 = 0;
  else
    v29 = v13;
  AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
  v31 = AudioFileFormatRegistry;
  v32 = *(_QWORD *)(a1 + 8);
  v33 = *(_DWORD *)(v32 + 12);
  if (!v33
    || (v34 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *(_DWORD *)(v32 + 12))) == 0
    || (FormatForData = (_DWORD *)v34,
        (*(unsigned int (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)v34 + 24))(v34, v29, v26) != 1))
  {
    if ((*(unsigned int (**)(_QWORD, uint64_t, const void *))(**((_QWORD **)v31 + 8) + 24))(*((_QWORD *)v31 + 8), v29, v26) == 1)
    {
      FormatForData = (_DWORD *)*((_QWORD *)v31 + 8);
    }
    else
    {
      FormatForData = (_DWORD *)AudioFileFormatRegistry::GetFormatForData(v31, v29, v26);
      if (!FormatForData)
      {
        if (!v33)
          goto LABEL_83;
        v48 = AudioFileFormatRegistry::Get(v31, v33);
        if (!v48)
          goto LABEL_83;
        FormatForData = (_DWORD *)v48;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)v48 + 24))(v48, v29, v26))
          goto LABEL_83;
      }
    }
  }
  v36 = FormatForData[2];
  v37 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)FormatForData + 120))(FormatForData);
  if (v37)
  {
    v38 = (EC3AudioStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 144))(v37);
    if (!v38)
      goto LABEL_83;
  }
  else
  {
    if ((v36 & 0xFBFFFFFF) != 0x61632D33)
    {
LABEL_83:
      result = 1954115647;
      goto LABEL_84;
    }
    v38 = (EC3AudioStream *)operator new();
    EC3AudioStream::EC3AudioStream(v38);
  }
  v39 = 0;
  *((_DWORD *)v38 + 4) = v36;
  *(_QWORD *)a2 = v38;
  *(_OWORD *)(a2 + 8) = xmmword_18F116F80;
  v40 = *(_QWORD *)(a1 + 8);
  v41 = *(_QWORD *)(v40 + 88);
  v42 = *(_QWORD *)(v40 + 96);
  v43 = v41 + *(unsigned int *)(v40 + 80);
  v44 = v42 < v41 || v43 <= v42;
  v45 = v44;
  v46 = v43 - v42;
  if (!v44 && v46)
    v39 = *(_QWORD *)(v40 + 72) + (v42 - v41);
  result = 0;
  *(_QWORD *)(a2 + 32) = v39;
  if (v45)
    v47 = 0;
  else
    v47 = v46;
  *(_DWORD *)(a2 + 24) = v47;
  return result;
}

void sub_18EFA8F18(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x193FFE460](v2, 0x10B1C404537FDE6);
  __cxa_begin_catch(a1);
  *(_DWORD *)(v1 + 236) = -1;
  __cxa_end_catch();
  JUMPOUT(0x18EFA8EFCLL);
}

void AudioFileStreamObject::~AudioFileStreamObject(AudioFileStreamObject *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1E29084F0;
  v2 = (void *)*((_QWORD *)this + 36);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 36) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 24);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 24) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 17);
  if (v4)
  {
    free(v4);
    *((_QWORD *)this + 17) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 15);
  if (v5)
  {
    free(v5);
    *((_QWORD *)this + 15) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 9) = v6;
    operator delete(v6);
  }
}

void AudioFileStreamRestrictedRecognizer::~AudioFileStreamRestrictedRecognizer(AudioFileStreamRestrictedRecognizer *this)
{
  AudioFileStreamRestrictedRecognizer::~AudioFileStreamRestrictedRecognizer(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2909B70;
  if (*((_BYTE *)this + 432))
    AudioFileAllowListFilter::~AudioFileAllowListFilter((AudioFileStreamRestrictedRecognizer *)((char *)this + 360));
  v2 = (void *)*((_QWORD *)this + 42);
  if (v2)
  {
    *((_QWORD *)this + 43) = v2;
    operator delete(v2);
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

uint64_t AudioFileStreamRestrictedRecognizer::SetProperty(AudioFileStreamRestrictedRecognizer *this, int a2, unsigned int a3, CFDictionaryRef *a4)
{
  uint64_t result;
  AudioFileAllowListFilter *v7;

  if (a2 != 1634495607)
    return 1886681407;
  if (a3 < 8)
    return 561211770;
  v7 = (AudioFileStreamRestrictedRecognizer *)((char *)this + 360);
  if (*((_BYTE *)this + 432))
  {
    AudioFileAllowListFilter::~AudioFileAllowListFilter(v7);
    *((_BYTE *)this + 432) = 0;
  }
  AudioFileAllowListFilter::AudioFileAllowListFilter(v7, *a4);
  result = 0;
  *((_BYTE *)this + 432) = 1;
  return result;
}

uint64_t AudioFileStreamRestrictedRecognizer::Seek(AudioFileStreamRestrictedRecognizer *this, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  return 1836020325;
}

uint64_t AudioFileStreamRestrictedRecognizer::ParseHeader(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v12;
  unsigned int v13;
  char *v14;
  int v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  size_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  AudioFileFormatRegistry *AudioFileFormatRegistry;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  EC3AudioStream *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  int v63;
  int v64;
  __int128 *v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  EC3AudioStream *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  int v82;
  int v83;
  int v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  unsigned int v90[2];
  unsigned int *v91;

  if (!*(_BYTE *)(a1 + 432))
    return 1852797029;
  v2 = (_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 236);
  if (v3 == -1)
    return 0;
  if (v3)
  {
    if (v3 != 1539)
      goto LABEL_113;
    v5 = *(_QWORD *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(v5 + 116);
    goto LABEL_31;
  }
  *(_DWORD *)(a1 + 256) = 128;
  v5 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(v5 + 88);
  v8 = *(_QWORD *)(v5 + 96);
  v10 = v9 + *(unsigned int *)(v5 + 80);
  v12 = v8 < v9 || v10 <= v8;
  v13 = v10 - v8;
  if (v12)
    v6 = 0;
  else
    v6 = v13;
  if (v6 <= 0x7F)
  {
    *(_QWORD *)(a1 + 272) = v8;
    v14 = *(char **)(v5 + 72);
    if (v14 == *(char **)(v5 + 128))
    {
      if (v13)
        v15 = v12;
      else
        v15 = 1;
      if (v15)
        v16 = 0;
      else
        v16 = &v14[(v8 - v9)];
      memmove(v14, v16, v6);
      v5 = v2[1];
      if (*(_DWORD *)(v5 + 120) <= 0x7Fu)
      {
        *(_DWORD *)(v5 + 120) = 128;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), 0x80uLL);
        v5 = v2[1];
      }
      *(_DWORD *)(v5 + 116) = v6;
      *(_QWORD *)(v5 + 96) = *(_QWORD *)(v5 + 88) + *(unsigned int *)(v5 + 80);
    }
    else
    {
      if (*(_DWORD *)(v5 + 120) <= 0x7Fu)
      {
        *(_DWORD *)(v5 + 120) = 128;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), 0x80uLL);
        v5 = v2[1];
      }
      LODWORD(v6) = 0;
      *(_DWORD *)(v5 + 116) = 0;
    }
LABEL_31:
    v17 = *((_DWORD *)v2 + 64) - v6;
    v18 = *(_QWORD *)(v5 + 88);
    v19 = *(_QWORD *)(v5 + 96);
    v20 = v18 + *(unsigned int *)(v5 + 80);
    if (v20 <= v19 || v19 < v18)
      v22 = 0;
    else
      v22 = v20 - v19;
    if (v17 <= v22)
      v17 = v22;
    v90[0] = v17;
    v23 = v17 + v6;
    if (*(_DWORD *)(v5 + 120) < v23)
    {
      *(_DWORD *)(v5 + 120) = v23;
      CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), v23);
      v5 = v2[1];
      LODWORD(v6) = *(_DWORD *)(v5 + 116);
    }
    StreamBuffer::Copy((_QWORD *)(v5 + 72), v90, (unsigned __int8 *)(*(_QWORD *)(v5 + 128) + v6));
    v5 = v2[1];
    v13 = *(_DWORD *)(v5 + 116) + v90[0];
    *(_DWORD *)(v5 + 116) = v13;
    if (v13 < *((_DWORD *)v2 + 64))
    {
      v7 = 0;
      v24 = 1539;
      goto LABEL_114;
    }
    v8 = v2[34];
    v25 = *(_QWORD *)(v5 + 128);
    *(_QWORD *)(v5 + 88) = v8;
    *(_QWORD *)(v5 + 96) = v8;
    *(_QWORD *)(v5 + 72) = v25;
    *(_DWORD *)(v5 + 80) = v13;
    v10 = v8 + v13;
    v9 = v8;
  }
  v26 = 0;
  v27 = (uint64_t)(v2 + 45);
  v28 = v8 >= v9 && v8 < v10;
  v29 = !v28;
  if (v28 && v13)
    v26 = *(_QWORD *)(v5 + 72) + (v8 - v9);
  if (v29)
    v30 = 0;
  else
    v30 = v13;
  AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(**((_QWORD **)AudioFileFormatRegistry + 8) + 24))(*((_QWORD **)AudioFileFormatRegistry + 8), v30, v26) == 1)
  {
    v32 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)AudioFileFormatRegistry + 8) + 120))(*((_QWORD **)AudioFileFormatRegistry + 8));
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 144))(v32);
    v34 = (void **)(v33 + 512);
    if (*(_BYTE *)(v33 + 536))
    {
      v35 = *v34;
      if (*v34)
      {
        *(_QWORD *)(v33 + 520) = v35;
        operator delete(v35);
      }
      *(_BYTE *)(v33 + 536) = 0;
    }
    *v34 = 0;
    *(_QWORD *)(v33 + 520) = 0;
    *(_QWORD *)(v33 + 528) = 0;
    std::vector<AudioFileInfo>::__init_with_size[abi:ne180100]<AudioFileInfo*,AudioFileInfo*>(v34, (const void *)v2[42], v2[43], (uint64_t)(v2[43] - v2[42]) >> 4);
    *(_BYTE *)(v33 + 536) = 1;
    if (*((_BYTE *)v2 + 432))
      std::optional<AudioFileAllowListFilter>::operator=[abi:ne180100]<AudioFileAllowListFilter const&,void>(v33 + 544, (uint64_t)(v2 + 45));
    v36 = 0;
    *(_QWORD *)a2 = v33;
    *(_OWORD *)(a2 + 8) = xmmword_18F116F80;
    v37 = v2[1];
    v38 = *(_QWORD *)(v37 + 88);
    v39 = *(_QWORD *)(v37 + 96);
    v40 = v38 + *(unsigned int *)(v37 + 80);
    v41 = v39 < v38 || v40 <= v39;
    v42 = v41;
    v43 = v40 - v39;
    if (!v41 && v43)
      v36 = *(_QWORD *)(v37 + 72) + (v39 - v38);
    v7 = 0;
    *(_QWORD *)(a2 + 32) = v36;
    if (v42)
      v44 = 0;
    else
      v44 = v43;
    *(_DWORD *)(a2 + 24) = v44;
    return v7;
  }
  v45 = v2[42];
  v88 = v2[43];
  if (v45 == v88)
    goto LABEL_131;
  v85 = v2;
  v46 = 0;
  v86 = (uint64_t)(v2 + 45);
  v87 = a2;
  do
  {
    AudioFileAllowListFilter::GetAllowedTypes((uint64_t)v90, v27, v45);
    v47 = *(unsigned int **)v90;
    v48 = v91;
    if (*(unsigned int **)v90 == v91)
    {
      v54 = 1;
      if (*(_QWORD *)v90)
LABEL_91:
        operator delete(v47);
      goto LABEL_92;
    }
    v49 = *(unsigned int **)v90;
    while (1)
    {
      v50 = *v49;
      v51 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *v49);
      v52 = v51;
      if (!v51
        || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 24))(v51, v30, v26) != 1)
      {
        goto LABEL_87;
      }
      v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 120))(v52);
      if (v53)
      {
        v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 144))(v53);
        goto LABEL_86;
      }
      if ((v50 & 0xFBFFFFFF) == 0x61632D33)
        break;
LABEL_86:
      if (v46)
        goto LABEL_96;
LABEL_87:
      if (++v49 == v48)
      {
        v54 = 1;
        v27 = v86;
        a2 = v87;
        if (v47)
          goto LABEL_91;
        goto LABEL_92;
      }
    }
    v55 = (EC3AudioStream *)operator new();
    EC3AudioStream::EC3AudioStream(v55);
    v46 = (uint64_t)v55;
LABEL_96:
    v56 = 0;
    *(_DWORD *)(v46 + 16) = v50;
    a2 = v87;
    *(_QWORD *)v87 = v46;
    *(_OWORD *)(v87 + 8) = xmmword_18F116F80;
    v57 = v85[1];
    v58 = *(_QWORD *)(v57 + 88);
    v59 = *(_QWORD *)(v57 + 96);
    v60 = v58 + *(unsigned int *)(v57 + 80);
    v61 = v59 < v58 || v60 <= v59;
    v62 = v61;
    v63 = v60 - v59;
    if (v61)
    {
      v27 = v86;
    }
    else
    {
      v27 = v86;
      if (v63)
        v56 = *(_QWORD *)(v57 + 72) + (v59 - v58);
    }
    v54 = 0;
    *(_QWORD *)(v87 + 32) = v56;
    if (v62)
      v64 = 0;
    else
      v64 = v63;
    *(_DWORD *)(v87 + 24) = v64;
    if (v47)
      goto LABEL_91;
LABEL_92:
    if ((v54 & 1) == 0)
      return 0;
    v45 += 16;
  }
  while (v45 != v88);
  v2 = v85;
  if (v46)
    goto LABEL_113;
  v66 = (__int128 *)v85[42];
  if (v66 == (__int128 *)v85[43])
    goto LABEL_131;
  v89 = *v66;
  AudioFileAllowListFilter::GetAllowedTypes((uint64_t)v90, v27, (uint64_t)&v89);
  v68 = *(unsigned int **)v90;
  v67 = v91;
  if (*(unsigned int **)v90 == v91)
  {
LABEL_126:
    v74 = 0;
    v75 = 1;
    v7 = 0;
    goto LABEL_127;
  }
  v69 = *(unsigned int **)v90;
  while (2)
  {
    v70 = *v69;
    v71 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *v69);
    v72 = v71;
    if (!v71 || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v71 + 24))(v71, v30, v26))
      goto LABEL_125;
    v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 120))(v72);
    if (v73)
    {
      v74 = (EC3AudioStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 144))(v73);
      if (v74)
        goto LABEL_133;
      goto LABEL_125;
    }
    if ((v70 & 0xFBFFFFFF) != 0x61632D33)
    {
LABEL_125:
      if (++v69 == v67)
        goto LABEL_126;
      continue;
    }
    break;
  }
  v74 = (EC3AudioStream *)operator new();
  EC3AudioStream::EC3AudioStream(v74);
LABEL_133:
  v76 = 0;
  *((_DWORD *)v74 + 4) = v70;
  *(_QWORD *)a2 = v74;
  *(_OWORD *)(a2 + 8) = xmmword_18F116F80;
  v77 = v85[1];
  v78 = *(_QWORD *)(v77 + 88);
  v79 = *(_QWORD *)(v77 + 96);
  v80 = v78 + *(unsigned int *)(v77 + 80);
  v81 = v79 < v78 || v80 <= v79;
  v82 = v81;
  v83 = v80 - v79;
  if (!v81 && v83)
    v76 = *(_QWORD *)(v77 + 72) + (v79 - v78);
  v75 = 0;
  v7 = 0;
  *(_QWORD *)(a2 + 32) = v76;
  if (v82)
    v84 = 0;
  else
    v84 = v83;
  *(_DWORD *)(a2 + 24) = v84;
LABEL_127:
  if (v68)
    operator delete(v68);
  if (v75)
  {
    v2 = v85;
    if (!v74)
    {
LABEL_131:
      *((_DWORD *)v2 + 59) = -1;
      return 1954115647;
    }
LABEL_113:
    v7 = 0;
    v24 = -1;
LABEL_114:
    *((_DWORD *)v2 + 59) = v24;
  }
  return v7;
}

void sub_18EFA9760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  if (v12)
    operator delete(v12);
  _Unwind_Resume(exception_object);
}

uint64_t AudioFileStreamWrapper::CallPropertyListener(uint64_t this, uint64_t a2, int a3)
{
  int v3;
  uint64_t (*v4)(_QWORD, _QWORD, uint64_t, int *);
  int v5;

  v5 = a3;
  if ((int)a2 > 1819243875)
  {
    if ((int)a2 > 1886283374)
    {
      switch((_DWORD)a2)
      {
        case 0x706E666F:
          if (*(_BYTE *)(this + 106))
            return this;
          *(_BYTE *)(this + 106) = 1;
          break;
        case 0x70726D66:
          if (*(_BYTE *)(this + 107))
            return this;
          *(_BYTE *)(this + 107) = 1;
          break;
        case 0x72656479:
          if (*(_DWORD *)(this + 112))
            return this;
          *(_DWORD *)(this + 112) = 1;
          break;
      }
      goto LABEL_19;
    }
    if ((_DWORD)a2 == 1819243876)
    {
      if (*(_BYTE *)(this + 110))
        return this;
      *(_BYTE *)(this + 110) = 1;
      goto LABEL_19;
    }
    v3 = 1835493731;
    goto LABEL_17;
  }
  if ((int)a2 <= 1717988723)
  {
    if ((_DWORD)a2 == 1668112752)
    {
      if (*(_BYTE *)(this + 109))
        return this;
      *(_BYTE *)(this + 109) = 1;
    }
    else if ((_DWORD)a2 == 1684434292)
    {
      if (*(_BYTE *)(this + 105))
        return this;
      *(_BYTE *)(this + 105) = 1;
    }
    goto LABEL_19;
  }
  if ((_DWORD)a2 != 1717988724)
  {
    v3 = 1718383476;
LABEL_17:
    if ((_DWORD)a2 == v3)
      *(_BYTE *)(this + 108) = 1;
    goto LABEL_19;
  }
  if (*(_BYTE *)(this + 104))
    return this;
  *(_BYTE *)(this + 104) = 1;
LABEL_19:
  v4 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, int *))(this + 24);
  if (v4)
    return v4(*(_QWORD *)(this + 40), *(unsigned int *)(this + 8), a2, &v5);
  return this;
}

uint64_t AudioFileStreamObject::GetPacketTable(AudioFileStreamObject *this)
{
  uint64_t result;
  int v3;

  result = *((_QWORD *)this + 19);
  if (!result)
  {
    if (*(_BYTE *)(*((_QWORD *)this + 1) + 105))
    {
      result = operator new();
      v3 = *((_DWORD *)this + 11);
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_DWORD *)(result + 32) = v3;
      *((_QWORD *)this + 19) = result;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AudioFileStreamRestrictedRecognizer::AudioFileStreamRestrictedRecognizer(uint64_t a1, unsigned int a2, const void *a3)
{
  uint64_t v5;

  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = -1;
  *(_QWORD *)(a1 + 96) = -1;
  *(_QWORD *)(a1 + 104) = -1;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 236) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 240) = xmmword_18F116F80;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 284) = 0;
  *(_QWORD *)(a1 + 292) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)a1 = &off_1E2909B70;
  v5 = a2;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  std::vector<AudioFileInfo>::vector((_QWORD *)(a1 + 336), a2);
  *(_BYTE *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  memcpy(*(void **)(a1 + 336), a3, 16 * v5);
  return a1;
}

void sub_18EFA9AF4(_Unwind_Exception *a1)
{
  AudioFileStreamObject *v1;

  AudioFileStreamObject::~AudioFileStreamObject(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<AudioFileInfo>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<AudioFileInfo>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_18EFA9B60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void XAtomicPoolAllocator::allocChunk(XAtomicPoolAllocator *this)
{
  char *v2;
  unint64_t v3;
  unint64_t i;
  unsigned int *v5;
  unsigned int v6;

  v2 = (char *)malloc_type_malloc(*((_QWORD *)this + 2), 0x8DD98034uLL);
  OSAtomicEnqueue((OSQueueHead *)this + 4, v2, *((_QWORD *)this + 10));
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    for (i = 0; i < v3; ++i)
    {
      OSAtomicEnqueue((OSQueueHead *)this + 2, v2, *((_QWORD *)this + 6));
      v3 = *((_QWORD *)this + 1);
      v2 += *(_QWORD *)this;
    }
  }
  v5 = (unsigned int *)((char *)this + 96);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + v3, v5));
}

void caulk::concurrent::condition_message::~condition_message(caulk::concurrent::condition_message *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E290B390;
  v2 = (char *)this + 40;
  v3 = (char *)*((_QWORD *)this + 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  caulk::concurrent::message::~message(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E290B390;
  v2 = (char *)this + 40;
  v3 = (char *)*((_QWORD *)this + 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      caulk::concurrent::message::~message(this);
      JUMPOUT(0x193FFE460);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

void XAtomicPoolAllocator::~XAtomicPoolAllocator(XAtomicPoolAllocator *this)
{
  OSQueueHead *v2;
  void *v3;

  v2 = (OSQueueHead *)((char *)this + 64);
  while (1)
  {
    v3 = OSAtomicDequeue(v2, *((_QWORD *)this + 10));
    if (!v3)
      break;
    free(v3);
  }
}

uint64_t caulk::concurrent::condition_message::perform(caulk::concurrent::condition_message *this)
{
  uint64_t v1;

  atomic_store(0, (unsigned __int8 *)this + 32);
  v1 = *((_QWORD *)this + 8);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void _ZNSt3__110__function6__funcIN29AUScheduledParameterRefresher9mWorkToDoMUlvE_ENS_9allocatorIS3_EEFvvEED0Ev()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *_ZNKSt3__110__function6__funcIN29AUScheduledParameterRefresher9mWorkToDoMUlvE_ENS_9allocatorIS3_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2913488;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIN29AUScheduledParameterRefresher9mWorkToDoMUlvE_ENS_9allocatorIS3_EEFvvEE7__cloneEPNS0_6__baseIS6_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2913488;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIN29AUScheduledParameterRefresher9mWorkToDoMUlvE_ENS_9allocatorIS3_EEFvvEEclEv(uint64_t a1)
{
  AUScheduledParameterRefresher::performPendingMessages(*(AUScheduledParameterRefresher **)(a1 + 8));
}

void AUScheduledParameterRefresher::performPendingMessages(AUScheduledParameterRefresher *this)
{
  os_unfair_lock_s *v2;
  unint64_t *v3;
  unsigned int *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;

  v2 = (os_unfair_lock_s *)((char *)this + 8);
  os_unfair_lock_lock((os_unfair_lock_t)this + 2);
  v3 = (unint64_t *)((char *)this + 216);
  v4 = (unsigned int *)((char *)this + 112);
  while (1)
  {
    v5 = (unint64_t *)*((_QWORD *)this + 35);
    if (v5)
      goto LABEL_8;
    do
      v6 = (unint64_t *)__ldaxr(v3);
    while (__stxr(0, v3));
    if (!v6)
      break;
    v5 = 0;
    do
    {
      v7 = (unint64_t)v5;
      v5 = v6;
      v6 = (unint64_t *)atomic_load(v6);
      atomic_store(v7, v5);
    }
    while (v6);
    *((_QWORD *)this + 35) = v5;
LABEL_8:
    v8 = atomic_load(v5);
    *((_QWORD *)this + 35) = v8;
    (**(void (***)(AUScheduledParameterRefresher *, unint64_t, unint64_t))this)(this, v5[1], v5[2]);
    OSAtomicEnqueue((OSQueueHead *)this + 3, v5, *((_QWORD *)this + 8));
    do
      v9 = __ldxr(v4);
    while (__stxr(v9 + 1, v4));
  }
  os_unfair_lock_unlock(v2);
}

void sub_18EFA9E70(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t FormatFromESDS(unsigned __int8 *a1, int a2, unsigned int *a3)
{
  char *v6;
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  _BYTE v24[296];
  _DWORD v25[10];
  uint64_t v26;
  uint64_t v27;
  _DWORD v28[276];
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v25[2] = 0;
  v26 = 0;
  v27 = 0;
  v28[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v28);
  v30 = 0u;
  v29 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v25);
  v6 = (char *)&a1[a2];
  v22[0] = a1;
  v22[1] = v6;
  v23 = 0;
  if ((a1 & 3) != 0 && a2)
  {
    v7 = 0;
    v8 = (_BYTE)a1 + 1;
    v9 = -8;
    do
    {
      v10 = v9;
      v11 = *a1++;
      v7 = v11 | (v7 << 8);
      v9 += 8;
      if ((v8 & 3) == 0)
        break;
      ++v8;
    }
    while (a1 < (unsigned __int8 *)v6);
    v22[0] = a1;
    LODWORD(v23) = v7 << (24 - v9);
    HIDWORD(v23) = v10 + 16;
  }
  v12 = MP4AudioESDS::Deserialize((uint64_t)v24, (uint64_t)v22, 0, 0);
  v13 = v12;
  if (a3 && !(_DWORD)v12)
  {
    if ((v26 - 1) > 0x29)
      v14 = 0;
    else
      v14 = *(_DWORD *)&aMcaaCaarcaatca[4 * (v26 - 1)];
    *a3 = v14;
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v13;
}

void sub_18EFAA054(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2 + 1504);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_ChannelLayoutFromESDS(unsigned __int8 *a1, int a2, AudioChannelLayout *a3)
{
  char *v6;
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  AudioChannelLayoutTag v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  unsigned int v23;
  _BYTE v24[296];
  _DWORD v25[10];
  uint64_t v26;
  uint64_t v27;
  _DWORD v28[212];
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v25[2] = 0;
  v26 = 0;
  v27 = 0;
  v28[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v28);
  v30 = 0u;
  v29 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v25);
  v6 = (char *)&a1[a2];
  v21[0] = a1;
  v21[1] = v6;
  v22 = 0;
  if ((a1 & 3) != 0 && a2)
  {
    v7 = 0;
    v8 = (_BYTE)a1 + 1;
    v9 = -8;
    do
    {
      v10 = v9;
      v11 = *a1++;
      v7 = v11 | (v7 << 8);
      v9 += 8;
      if ((v8 & 3) == 0)
        break;
      ++v8;
    }
    while (a1 < (unsigned __int8 *)v6);
    v21[0] = a1;
    LODWORD(v22) = v7 << (24 - v9);
    HIDWORD(v22) = v10 + 16;
  }
  v12 = MP4AudioESDS::Deserialize((uint64_t)v24, (uint64_t)v21, 0, 0);
  if (!(_DWORD)v12)
  {
    v12 = 560360820;
    if (!DecoderConfigDescr::GetChannelLayoutTag((DecoderConfigDescr *)v25, &v23))
    {
      v13 = v23;
      if (v23)
      {
        v12 = 0;
        a3->mChannelBitmap = 0;
        a3->mNumberChannelDescriptions = 0;
        a3->mChannelLayoutTag = v13;
      }
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v12;
}

void sub_18EFAA244(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2 + 1504);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_ASBDFromESD(unsigned __int8 *a1, int a2, AudioStreamBasicDescription *a3)
{
  char *v6;
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  unsigned int v24[10];
  uint64_t v25;
  uint64_t v26;
  _DWORD v27[276];
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v24[2] = 0;
  v25 = 0;
  v26 = 0;
  v27[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v27);
  v28 = 0u;
  v29 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v24);
  v6 = (char *)&a1[a2];
  v22[0] = a1;
  v22[1] = v6;
  v23 = 0;
  if ((a1 & 3) != 0 && a2)
  {
    v7 = 0;
    v8 = (_BYTE)a1 + 1;
    v9 = -8;
    do
    {
      v10 = v9;
      v11 = *a1++;
      v7 = v11 | (v7 << 8);
      v9 += 8;
      if ((v8 & 3) == 0)
        break;
      ++v8;
    }
    while (a1 < (unsigned __int8 *)v6);
    v22[0] = a1;
    LODWORD(v23) = v7 << (24 - v9);
    HIDWORD(v23) = v10 + 16;
  }
  v12 = DecoderConfigDescr::Deserialize(v24, (uint64_t)v22, 0, 1);
  v14 = v12;
  if (a3 && !(_DWORD)v12)
  {
    if (DecoderConfigDescr::MakeStreamDescription((DecoderConfigDescr *)v24, a3, v13) || !a3->mFormatID)
      v14 = 1718449215;
    else
      v14 = 0;
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v14;
}

void sub_18EFAA420(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2 + 1208);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_ChannelLayoutFromESD(unsigned __int8 *a1, int a2, AudioChannelLayout *a3)
{
  char *v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  AudioChannelLayoutTag v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  unsigned int v21;
  unsigned int v22[10];
  uint64_t v23;
  uint64_t v24;
  _DWORD v25[276];
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v4 = (char *)&a1[a2];
  v19[0] = a1;
  v19[1] = v4;
  v20 = 0;
  if ((a1 & 3) != 0 && a2)
  {
    v5 = 0;
    v6 = (_BYTE)a1 + 1;
    v7 = -8;
    do
    {
      v8 = v7;
      v9 = *a1++;
      v5 = v9 | (v5 << 8);
      v7 += 8;
      if ((v6 & 3) == 0)
        break;
      ++v6;
    }
    while (a1 < (unsigned __int8 *)v4);
    v19[0] = a1;
    LODWORD(v20) = v5 << (24 - v7);
    HIDWORD(v20) = v8 + 16;
  }
  v22[2] = 0;
  v23 = 0;
  v24 = 0;
  v25[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v25);
  v26 = 0u;
  v27 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v22);
  v10 = DecoderConfigDescr::Deserialize(v22, (uint64_t)v19, 0, 1);
  if (!(_DWORD)v10)
  {
    v10 = 560360820;
    if (!DecoderConfigDescr::GetChannelLayoutTag((DecoderConfigDescr *)v22, &v21))
    {
      v11 = v21;
      if (v21)
      {
        v10 = 0;
        a3->mChannelBitmap = 0;
        a3->mNumberChannelDescriptions = 0;
        a3->mChannelLayoutTag = v11;
      }
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v10;
}

void sub_18EFAA5F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2 + 1208);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_ESDFromESDSSize(unsigned __int8 *a1, int a2, unsigned int *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  char v22[296];
  _DWORD v23[10];
  uint64_t v24;
  uint64_t v25;
  _DWORD v26[276];
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 2003329396;
  v5 = a1;
  v23[2] = 0;
  v24 = 0;
  v25 = 0;
  v26[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v26);
  v28 = 0u;
  v27 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v23);
  v6 = &v5[a2];
  v20[0] = v5;
  v20[1] = v6;
  v21 = 0;
  if ((v5 & 3) != 0 && a2)
  {
    v7 = 0;
    v8 = (_BYTE)v5 + 1;
    v9 = -8;
    do
    {
      v10 = v9;
      v11 = *v5++;
      v7 = v11 | (v7 << 8);
      v9 += 8;
      if ((v8 & 3) == 0)
        break;
      ++v8;
    }
    while (v5 < v6);
    v20[0] = v5;
    LODWORD(v21) = v7 << (24 - v9);
    HIDWORD(v21) = v10 + 16;
  }
  v12 = MP4AudioESDS::Deserialize((uint64_t)v22, (uint64_t)v20, 0, 0);
  if (!(_DWORD)v12)
    *a3 = v23[1] + 5;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v12;
}

void sub_18EFAA7CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2 + 1504);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_ESDFromESDS(unsigned __int8 *a1, int a2, void *a3, unsigned int *a4)
{
  int v8;
  char v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t v14;
  size_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  unsigned int v25;
  char v26[296];
  _DWORD v27[10];
  uint64_t v28;
  uint64_t v29;
  _DWORD v30[212];
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v27[2] = 0;
  v28 = 0;
  v29 = 0;
  v30[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v30);
  v32 = 0u;
  v31 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v27);
  v25 = 0;
  v23[0] = a1;
  v23[1] = &a1[a2];
  v24 = 0;
  if ((a1 & 3) != 0 && a2)
  {
    v8 = 0;
    v9 = (_BYTE)a1 + 1;
    v10 = -8;
    v11 = a1;
    do
    {
      v12 = v10;
      v13 = *v11++;
      v8 = v13 | (v8 << 8);
      v10 += 8;
      if ((v9 & 3) == 0)
        break;
      ++v9;
    }
    while (v11 < &a1[a2]);
    v23[0] = v11;
    LODWORD(v24) = v8 << (24 - v10);
    HIDWORD(v24) = v12 + 16;
  }
  v14 = MP4AudioESDS::Deserialize((uint64_t)v26, (uint64_t)v23, (int *)&v25, 0);
  if (!(_DWORD)v14)
  {
    v15 = (v27[1] + 5);
    if (*a4 >= v15)
    {
      *a4 = v15;
      memcpy(a3, &a1[v25], v15);
      v14 = 0;
    }
    else
    {
      v14 = 561211770;
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return v14;
}

void sub_18EFAA9D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2 + 1504);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_ESDSFromESDSize(unsigned __int8 *a1, int a2, unsigned int *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  unsigned int v22[10];
  uint64_t v23;
  uint64_t v24;
  _DWORD v25[276];
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 2003329396;
  v5 = a1;
  v22[2] = 0;
  v23 = 0;
  v24 = 0;
  v25[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v25);
  v26 = 0u;
  v27 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v22);
  v6 = &v5[a2];
  v20[0] = v5;
  v20[1] = v6;
  v21 = 0;
  if ((v5 & 3) != 0 && a2)
  {
    v7 = 0;
    v8 = (_BYTE)v5 + 1;
    v9 = -8;
    do
    {
      v10 = v9;
      v11 = *v5++;
      v7 = v11 | (v7 << 8);
      v9 += 8;
      if ((v8 & 3) == 0)
        break;
      ++v8;
    }
    while (v5 < v6);
    v20[0] = v5;
    LODWORD(v21) = v7 << (24 - v9);
    HIDWORD(v21) = v10 + 16;
  }
  *a3 = 0;
  v12 = DecoderConfigDescr::Deserialize(v22, (uint64_t)v20, 0, 1);
  if (!(_DWORD)v12)
    *a3 = v22[1] + 19;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v12;
}

void sub_18EFAABA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2 + 1208);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_ESDSFromESD(unsigned __int8 *a1, unsigned int a2, char *a3, unsigned int *a4)
{
  uint64_t v4;
  int v9;
  char v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD v32[276];
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = 2003329396;
  if (a3 && a4)
  {
    v25[0] = a1;
    v25[1] = &a1[a2];
    v26 = 0;
    if ((a1 & 3) != 0 && a2)
    {
      v9 = 0;
      v10 = (_BYTE)a1 + 1;
      v11 = -8;
      v12 = a1;
      do
      {
        v13 = v11;
        v14 = *v12++;
        v9 = v14 | (v9 << 8);
        v11 += 8;
        if ((v10 & 3) == 0)
          break;
        ++v10;
      }
      while (v12 < &a1[a2]);
      v25[0] = v12;
      LODWORD(v26) = v9 << (24 - v11);
      HIDWORD(v26) = v13 + 16;
    }
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32[2] = 0;
    MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v32);
    v33 = 0u;
    v34 = 0u;
    DecoderConfigDescr::cleanup((DecoderConfigDescr *)&v27);
    v4 = DecoderConfigDescr::Deserialize(&v27, (uint64_t)v25, 0, 1);
    if (!(_DWORD)v4)
    {
      v4 = 561211770;
      v15 = v28;
      if (v28 + 5 == a2 && *a4 >= v28 + 19)
      {
        *a4 = v28 + 19;
        *a3 = 3;
        v16 = v15 + 14;
        v4 = 2003329396;
        if (!((v15 + 14) >> 28))
        {
          v17 = (8 * v16) & 0x7F000000 | (((v16 >> 7) & 0x7F) << 8) & 0xFF80FF80 | (((v16 >> 14) & 0x7F) << 16) | v16 & 0x7F;
          a3[1] = (v17 | 0x80808000) >> 24;
          a3[2] = (v17 | 0x80808000) >> 16;
          a3[3] = (unsigned __int16)((((v16 >> 7) & 0x7F) << 8) | v16 & 0x7F | 0x8000) >> 8;
          a3[4] = v16 & 0x7F;
          *(_WORD *)(a3 + 5) = 0;
          a3[7] = 0;
          memcpy(a3 + 8, a1, a2);
          v4 = 0;
          a3[v15 + 13] = 6;
          a3[v16] = 0x80;
          a3[v15 + 15] = 0x80;
          a3[v15 + 16] = 0x80;
          a3[v15 + 17] = 1;
          a3[v15 + 18] = 2;
        }
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  return v4;
}

void sub_18EFAAE58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2 + 1208);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_FormatIDFromISOAudioSampleEntry(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v4;

  v2 = *(_DWORD *)(a1 + 4);
  v4 = bswap32(v2);
  if (v2 == 1630826605)
    return FormatFromESDS((unsigned __int8 *)(a1 + 48), a2 - 48, &v4);
  else
    return 0;
}

uint64_t AudioFormatProperty_FLACdfLaAtomFromOldFLACMagicCookie(_DWORD *a1, unsigned int a2, char *a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[4];
  int v14;
  _BYTE v15[32];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = 1718449215;
  *(_QWORD *)&v15[24] = 0;
  if (a2 >= 0x34)
  {
    if (a2 < 0x39)
      goto LABEL_8;
    v4 = bswap32(a1[1]);
    if (v4 == 1684425825)
      return v3;
    if (v4 == 1718775137)
    {
      if (a2 < 0x4C)
        return v3;
      a2 = bswap32(a1[3]) - 12;
      if (a2 < 0x34)
        return v3;
      v5 = 6;
    }
    else
    {
LABEL_8:
      v5 = 0;
    }
    v6 = a2 - v5 * 4;
    v7 = (char *)&a1[v5];
    if (v6 < 0x38)
    {
      v10 = *(_OWORD *)(v7 + 12);
      v11 = *(_OWORD *)(v7 + 28);
      *(_OWORD *)v15 = *(_OWORD *)v7;
      *(_OWORD *)&v15[12] = v10;
      v16 = v11;
      v9 = *(_QWORD *)(v7 + 44);
    }
    else
    {
      v8 = *((_OWORD *)v7 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v7;
      *(_OWORD *)&v15[16] = v8;
      v16 = *((_OWORD *)v7 + 2);
      v9 = *((_QWORD *)v7 + 6);
    }
    v17 = v9;
    *(int8x16_t *)v15 = vrev32q_s8(*(int8x16_t *)v15);
    *(int8x8_t *)&v15[16] = vrev32_s8(*(int8x8_t *)&v15[16]);
    *(_DWORD *)&v15[24] = bswap32(*(unsigned int *)&v15[24]);
    *(_QWORD *)&v16 = bswap64(v16);
    *(_OWORD *)a3 = xmmword_18F117070;
    v13[0] = a3 + 16;
    v13[1] = a3 + 16;
    v13[2] = a3 + 50;
    v13[3] = 0x2000000000;
    v14 = ((_DWORD)a3 + 16) & 3;
    FLACPackStreamInfo((uint64_t)v13, (uint64_t)v15);
    return 0;
  }
  return v3;
}

uint64_t AudioFormatProperty_ASBDForISOPCMConfig(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  _BOOL4 v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  result = 1718449215;
  if (bswap32(*(_DWORD *)a1) < 0xE || *(_DWORD *)(a1 + 4) != 1131242352)
    return result;
  v4 = *(_DWORD *)(a2 + 8);
  if (v4 == 1718641517)
  {
    v5 = (*(_BYTE *)(a1 + 12) & 1) == 0;
    v6 = *(unsigned __int8 *)(a1 + 13);
    goto LABEL_12;
  }
  if (v4 != 1819304813)
  {
    if (v4 != 1768973165)
      return 4294967246;
    v5 = (*(_BYTE *)(a1 + 12) & 1) == 0;
    v6 = *(unsigned __int8 *)(a1 + 13);
    goto LABEL_9;
  }
  v5 = (*(_BYTE *)(a1 + 12) & 1) == 0;
  v6 = *(unsigned __int8 *)(a1 + 13);
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
LABEL_12:
    v7 = 9;
    if (v6 != 32 && v6 != 64)
      return result;
    goto LABEL_14;
  }
LABEL_9:
  if (v6 > 0x20 || ((1 << v6) & 0x101010000) == 0)
    return result;
  v7 = 12;
LABEL_14:
  result = 0;
  v8 = *(_DWORD *)(a2 + 28);
  if (v5)
    v9 = 2;
  else
    v9 = 0;
  *(_DWORD *)(a2 + 8) = 1819304813;
  *(_DWORD *)(a2 + 12) = v7 | v9;
  v10 = v8 * (v6 >> 3);
  *(_DWORD *)(a2 + 16) = v10;
  *(_DWORD *)(a2 + 20) = 1;
  *(_DWORD *)(a2 + 24) = v10;
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t AudioFormatProperty_ISOPCMConfigForASBD(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  unsigned int v5;

  result = 1718449215;
  if (a1[2] == 1819304813)
  {
    *(_WORD *)(a2 + 12) = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = 0x436D63700E000000;
    v4 = a1[3];
    *(_BYTE *)(a2 + 12) = (v4 & 2) == 0;
    v5 = a1[8];
    if ((v4 & 1) != 0)
    {
      if (v5 == 32 || v5 == 64)
      {
LABEL_11:
        result = 0;
        *(_BYTE *)(a2 + 13) = v5;
      }
    }
    else if (v5 <= 0x20 && ((1 << v5) & 0x101010000) != 0)
    {
      goto LABEL_11;
    }
  }
  return result;
}

void DialogueAnchor::AADialogueAnchorAnalyzer::~AADialogueAnchorAnalyzer(AudioUnit *this)
{
  DialogueAnchor::AADialogueAnchorAnalyzer::~AADialogueAnchorAnalyzer(this);
  JUMPOUT(0x193FFE460);
}

{
  AudioUnit v2;
  AudioUnit v3;
  OpaqueAudioComponentInstance *v4;
  OpaqueAudioComponentInstance *v5;
  OpaqueAudioConverter *v6;
  OpaqueAudioComponentInstance *v7;
  uint64_t i;
  OpaqueAudioComponentInstance *v9;

  *this = (AudioUnit)&off_1E2909E18;
  AudioUnitUninitialize(this[34]);
  AudioComponentInstanceDispose(this[34]);
  removeGatedLoudness((_QWORD **)this + 43);
  v2 = this[55];
  this[55] = 0;
  if (v2)
    (*(void (**)(AudioUnit))(*(_QWORD *)v2 + 8))(v2);
  v3 = this[54];
  this[54] = 0;
  if (v3)
    (*(void (**)(AudioUnit))(*(_QWORD *)v3 + 8))(v3);
  v4 = this[48];
  if (v4)
  {
    this[49] = v4;
    operator delete(v4);
  }
  v5 = this[45];
  if (v5)
  {
    this[46] = v5;
    operator delete(v5);
  }
  AudioUnitUninitialize(this[11]);
  AudioComponentInstanceDispose(this[11]);
  v6 = this[20];
  if (v6)
    AudioConverterDispose(v6);
  v7 = this[28];
  if (v7)
  {
    this[29] = v7;
    operator delete(v7);
  }
  for (i = 0; i != -6; i -= 3)
  {
    v9 = this[i + 24];
    if (v9)
    {
      this[i + 25] = v9;
      operator delete(v9);
    }
  }
  *this = (AudioUnit)&off_1E2903E88;
  MEMORY[0x193FFDAD0](this + 6);
}

uint64_t DialogueAnchor::AADialogueAnchorAnalyzer::Prepare(DialogueAnchor::AADialogueAnchorAnalyzer *this, uint64_t a2, uint64_t a3, int *a4)
{
  int AppBooleanValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t Property;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint8_t *p_buf;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unint64_t v21;
  uint64_t v22;
  AudioUnit *v23;
  OpaqueAudioComponent *Next;
  NSObject *v25;
  const char *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  NSObject *v31;
  const char *v32;
  OpaqueAudioComponent *v34;
  AudioComponentInstance *v35;
  OpaqueAudioComponentInstance *v36;
  NSObject *v37;
  const char *v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  AudioComponentDescription v42;
  UInt32 ioDataSize;
  int inData;
  _BYTE v45[12];
  __int16 v46;
  int v47;
  _BYTE ioPropertyDataSize[24];
  uint64_t v49;
  int v50;
  AudioStreamBasicDescription buf;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  AppBooleanValue = DialogueAnchor::AADialogueAnchorAnalyzer::Prepare(void)::sDAFileLoggingFlag;
  if (DialogueAnchor::AADialogueAnchorAnalyzer::Prepare(void)::sDAFileLoggingFlag == -1)
  {
    AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("dialogue_anchor_write_files"), CFSTR("com.apple.coreaudio"), 0);
    DialogueAnchor::AADialogueAnchorAnalyzer::Prepare(void)::sDAFileLoggingFlag = AppBooleanValue;
  }
  *((_BYTE *)this + 424) = AppBooleanValue > 0;
  if (AppBooleanValue >= 1)
  {
    CASmartPreferences::Read((CASmartPreferences *)CFSTR("dialogue_anchor_write_files_ring_buffer_mode"), CFSTR("com.apple.coreaudio"), (const __CFString *)&DialogueAnchor::AADialogueAnchorAnalyzer::Prepare(void)::capturerRingBufferModeOption, a4);
    if ((DialogueAnchor::AADialogueAnchorAnalyzer::Prepare(void)::capturerRingBufferModeOption - 1) > 2)
      v6 = 290;
    else
      v6 = qword_18F10C430[DialogueAnchor::AADialogueAnchorAnalyzer::Prepare(void)::capturerRingBufferModeOption - 1];
    if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once != -1)
      dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_4887);
    if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction)
      v7 = NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction(v6, "/tmp/DialogueAnchorAnalyzer", "dnnVadInput", 1667327590, 0, &DialogueAnchor::kCommonASBD);
    else
      v7 = 0;
    v8 = *((_QWORD *)this + 54);
    *((_QWORD *)this + 54) = v7;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v7 = *((_QWORD *)this + 54);
    }
    if (v7)
    {
      if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once != -1)
        dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_4887);
      if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction)
        v9 = NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction(v6, "/tmp/DialogueAnchorAnalyzer", "dnnVadOutput", 1667327590, 0, &DialogueAnchor::kCommonASBD);
      else
        v9 = 0;
      v12 = *((_QWORD *)this + 55);
      *((_QWORD *)this + 55) = v9;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v9 = *((_QWORD *)this + 55);
      }
      if (v9)
        goto LABEL_25;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.mSampleRate) = 136315394;
        *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
        LOWORD(buf.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 493;
        v10 = MEMORY[0x1E0C81028];
        v11 = "%25s:%-5d  Failed to create vad output capturer";
        goto LABEL_31;
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 484;
      v10 = MEMORY[0x1E0C81028];
      v11 = "%25s:%-5d  Failed to create vad input capturer";
LABEL_31:
      _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&buf, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
LABEL_25:
  if (*((double *)this + 32) != 48000.0)
  {
    buf.mSampleRate = *((Float64 *)this + 32);
    *(_OWORD *)&buf.mFormatID = xmmword_18F116FC0;
    *(_QWORD *)&buf.mBytesPerFrame = 0x100000004;
    buf.mBitsPerChannel = 32;
    Property = AudioConverterNewWithOptions(&buf, &DialogueAnchor::kCommonASBD, 0, (_QWORD *)this + 20);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_77;
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 109;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  Failed to create resampler AudioConverter";
LABEL_36:
      p_buf = ioPropertyDataSize;
LABEL_76:
      _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_ERROR, v15, p_buf, 0x12u);
      goto LABEL_77;
    }
    v16 = *((_QWORD *)this + 20);
    *(_QWORD *)ioPropertyDataSize = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterReset::$_0>;
    *(_QWORD *)&ioPropertyDataSize[8] = &v42;
    Property = with_resolved(v16, (uint64_t (**)(uint64_t, uint64_t))ioPropertyDataSize);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_77;
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 114;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  Failed to reset resampler AudioConverter";
      goto LABEL_36;
    }
  }
  v18 = *((_DWORD *)this + 63);
  if (v18 >= 3)
  {
    *(_DWORD *)ioPropertyDataSize = 0;
    v19 = caulk::numeric::exceptional_mul<unsigned int>(v18, 0x14u);
    *(_DWORD *)ioPropertyDataSize = caulk::numeric::exceptional_add<unsigned int>(12, v19);
    v20 = (unsigned int *)CAAudioChannelLayout::Create((CAAudioChannelLayout *)*((unsigned int *)this + 63));
    Property = AudioFormatGetProperty(0x636D706Cu, 4u, (char *)this + 264, (UInt32 *)ioPropertyDataSize, v20);
    if ((_DWORD)Property)
    {
      MEMORY[0x193FFDAAC](v20);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_77;
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 138;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  Failed to get channel layout for tag";
LABEL_75:
      p_buf = (uint8_t *)&buf;
      goto LABEL_76;
    }
    v21 = v20[2];
    if ((_DWORD)v21)
    {
      if (v20[3] == 3)
      {
        *((_DWORD *)this + 62) = 0;
        MEMORY[0x193FFDAAC](v20);
LABEL_44:
        v18 = *((_DWORD *)this + 63);
        goto LABEL_45;
      }
      v27 = 0;
      v28 = 8;
      while (v21 - 1 != v27)
      {
        v29 = v20[v28];
        v28 += 5;
        ++v27;
        if (v29 == 3)
        {
          v30 = v27 < v21;
          *((_DWORD *)this + 62) = v27;
          MEMORY[0x193FFDAAC](v20);
          if (v30)
            goto LABEL_44;
          goto LABEL_65;
        }
      }
    }
    MEMORY[0x193FFDAAC](v20);
LABEL_65:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_68;
    LODWORD(buf.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 139;
    v25 = MEMORY[0x1E0C81028];
    v26 = "%25s:%-5d  Input channel layout doesn't have center channel";
    goto LABEL_67;
  }
LABEL_45:
  if (v18 != 2)
    goto LABEL_91;
  if (*((_QWORD *)this + 20))
  {
    LODWORD(buf.mSampleRate) = 0;
    std::vector<float>::resize((char **)this + 28, 0x400uLL, &buf);
  }
  v22 = 0;
  v23 = (AudioUnit *)((char *)this + 88);
  do
  {
    LODWORD(buf.mSampleRate) = 0;
    std::vector<float>::resize((char **)((char *)this + v22 + 168), 0x400uLL, &buf);
    v22 += 24;
  }
  while (v22 != 48);
  *((_DWORD *)this + 54) = 0;
  *(_OWORD *)&v42.componentType = *(_OWORD *)"xfuaytcslppa";
  v42.componentFlagsMask = 0;
  Next = AudioComponentFindNext(0, &v42);
  if (!Next)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_68:
      Property = 0xFFFFFFFFLL;
      goto LABEL_77;
    }
    LODWORD(buf.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 155;
    v25 = MEMORY[0x1E0C81028];
    v26 = "%25s:%-5d  failed to find Scotty component";
LABEL_67:
    _os_log_impl(&dword_18EE07000, v25, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, 0x12u);
    goto LABEL_68;
  }
  Property = AudioComponentInstanceNew(Next, (AudioComponentInstance *)this + 11);
  if ((_DWORD)Property)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_77;
    LODWORD(buf.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 157;
    v14 = MEMORY[0x1E0C81028];
    v15 = "%25s:%-5d  Could not instantiate Scotty component";
    goto LABEL_75;
  }
  Property = AudioUnitSetParameter(*v23, 2u, 0, 0, 1.0, 0);
  if ((_DWORD)Property)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_77;
    LODWORD(buf.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 161;
    v14 = MEMORY[0x1E0C81028];
    v15 = "%25s:%-5d  Could not set Scotty single center channel parameter";
    goto LABEL_75;
  }
  Property = AudioUnitSetParameter(*v23, 5u, 0, 0, 0.0, 0);
  if ((_DWORD)Property)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_77;
    LODWORD(buf.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 165;
    v14 = MEMORY[0x1E0C81028];
    v15 = "%25s:%-5d  Could not set Scotty highpass cut-off frequency";
    goto LABEL_75;
  }
  Property = AudioUnitSetParameter(*v23, 8u, 0, 0, 0.0, 0);
  if ((_DWORD)Property)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_77;
    LODWORD(buf.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 167;
    v14 = MEMORY[0x1E0C81028];
    v15 = "%25s:%-5d  Could not disable Scotty smoothing";
    goto LABEL_75;
  }
  buf.mSampleRate = *((Float64 *)this + 32);
  *(_OWORD *)&buf.mFormatID = xmmword_18F116FC0;
  *(_QWORD *)&buf.mBytesPerFrame = 0x200000004;
  buf.mBitsPerChannel = 32;
  *(Float64 *)ioPropertyDataSize = buf.mSampleRate;
  *(_OWORD *)&ioPropertyDataSize[8] = xmmword_18F116FC0;
  v49 = 0x100000004;
  v50 = 32;
  Property = AudioUnitSetProperty(*((AudioUnit *)this + 11), 8u, 1u, 0, &buf, 0x28u);
  if ((_DWORD)Property)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v45 = 136315394;
      *(_QWORD *)&v45[4] = "AADialogueAnchorAnalyzer.cpp";
      v46 = 1024;
      v47 = 174;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  Could not set Scotty input stream format property";
LABEL_90:
      p_buf = v45;
      goto LABEL_76;
    }
    goto LABEL_77;
  }
  Property = AudioUnitSetProperty(*v23, 8u, 2u, 0, ioPropertyDataSize, 0x28u);
  if ((_DWORD)Property)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v45 = 136315394;
      *(_QWORD *)&v45[4] = "AADialogueAnchorAnalyzer.cpp";
      v46 = 1024;
      v47 = 176;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  Could not set Scotty output stream format property";
      goto LABEL_90;
    }
LABEL_77:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 497;
      v31 = MEMORY[0x1E0C81028];
      v32 = "%25s:%-5d  Failed to setup center channel extractor";
LABEL_79:
      _os_log_impl(&dword_18EE07000, v31, OS_LOG_TYPE_ERROR, v32, (uint8_t *)&buf, 0x12u);
      return Property;
    }
    return Property;
  }
  Property = AudioUnitInitialize(*v23);
  if ((_DWORD)Property)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v45 = 136315394;
      *(_QWORD *)&v45[4] = "AADialogueAnchorAnalyzer.cpp";
      v46 = 1024;
      v47 = 180;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  Could not initialize Scotty component";
      goto LABEL_90;
    }
    goto LABEL_77;
  }
LABEL_91:
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 38) = 1;
  *(_QWORD *)&v42.componentType = DialogueAnchor::AADialogueAnchorAnalyzer::SetUpDnnVadGraph(void)::$_0::operator()(CFSTR("/Library/Audio/Tunings/DialogueAnchorAnalyzer/nnvad.propstrip"));
  LOWORD(v42.componentManufacturer) = 1;
  *(_QWORD *)v45 = DialogueAnchor::AADialogueAnchorAnalyzer::SetUpDnnVadGraph(void)::$_0::operator()(CFSTR("/Library/Audio/Tunings/DialogueAnchorAnalyzer/nnvad.austrip"));
  *(_WORD *)&v45[8] = 1;
  ioDataSize = 4;
  inData = 1536;
  *(_OWORD *)&buf.mSampleRate = *(_OWORD *)"xfuagpsdlppa";
  buf.mBytesPerPacket = 0;
  v34 = AudioComponentFindNext(0, (const AudioComponentDescription *)&buf);
  if (v34)
  {
    v35 = (AudioComponentInstance *)((char *)this + 272);
    v36 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 34);
    if (v36)
    {
      AudioUnitUninitialize(v36);
      AudioComponentInstanceDispose(*v35);
    }
    Property = AudioComponentInstanceNew(v34, (AudioComponentInstance *)this + 34);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_128;
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 419;
      v37 = MEMORY[0x1E0C81028];
      v38 = "%25s:%-5d  Could not instantiate dspGraph component";
      goto LABEL_127;
    }
    Property = AudioUnitSetProperty(*v35, 8u, 1u, 0, &DialogueAnchor::kCommonASBD, 0x28u);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_128;
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 423;
      v37 = MEMORY[0x1E0C81028];
      v38 = "%25s:%-5d  Could not set mDnnVadGraph input stream format property";
      goto LABEL_127;
    }
    Property = AudioUnitSetProperty(*v35, 8u, 2u, 0, &DialogueAnchor::kCommonASBD, 0x28u);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_128;
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 425;
      v37 = MEMORY[0x1E0C81028];
      v38 = "%25s:%-5d  Could not set mDnnVadGraph output stream format property";
      goto LABEL_127;
    }
    Property = AudioUnitSetProperty(*v35, 0xEu, 0, 0, &inData, 4u);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_128;
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 427;
      v37 = MEMORY[0x1E0C81028];
      v38 = "%25s:%-5d  Could not set mDnnVadGraph maxFramesPerSlice property";
      goto LABEL_127;
    }
    Property = AudioUnitSetProperty(*v35, 0x64737067u, 0, 0, DialogueAnchor::AADialogueAnchorAnalyzer::SetUpDnnVadGraph(void)::kGraphRef, 8u);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_128;
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 429;
      v37 = MEMORY[0x1E0C81028];
      v38 = "%25s:%-5d  Could not set dsp graph file property";
      goto LABEL_127;
    }
    Property = AudioUnitSetProperty(*v35, 0x70727370u, 0, 0, &v42, 8u);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_128;
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 431;
      v37 = MEMORY[0x1E0C81028];
      v38 = "%25s:%-5d  Could not set graph property strip";
      goto LABEL_127;
    }
    Property = AudioUnitSetProperty(*v35, 0x61757370u, 0, 0, v45, 8u);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_128;
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 433;
      v37 = MEMORY[0x1E0C81028];
      v38 = "%25s:%-5d  Could not set graph au strip";
      goto LABEL_127;
    }
    Property = AudioUnitInitialize(*v35);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_128;
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 437;
      v37 = MEMORY[0x1E0C81028];
      v38 = "%25s:%-5d  Could not initialize mDnnVadGraph";
      goto LABEL_127;
    }
    Property = AudioUnitGetProperty(*v35, 0xEu, 0, 0, &inData, &ioDataSize);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_128;
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 441;
      v37 = MEMORY[0x1E0C81028];
      v38 = "%25s:%-5d  Could not get dnnVadGraph maxFramesPerSlice";
      goto LABEL_127;
    }
    *((_DWORD *)this + 88) = inData;
    Property = AudioUnitReset(*((AudioUnit *)this + 34), 0, 0);
    if ((_DWORD)Property && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 445;
      v37 = MEMORY[0x1E0C81028];
      v38 = "%25s:%-5d  Could not reset dnn vad graph AU";
LABEL_127:
      _os_log_impl(&dword_18EE07000, v37, OS_LOG_TYPE_ERROR, v38, ioPropertyDataSize, 0x12u);
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)ioPropertyDataSize = 136315394;
      *(_QWORD *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 412;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  failed to find dspGraph component", ioPropertyDataSize, 0x12u);
    }
    Property = 0xFFFFFFFFLL;
  }
LABEL_128:
  CACFDictionary::~CACFDictionary((CACFDictionary *)v45);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v42);
  if ((_DWORD)Property)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return Property;
    LODWORD(buf.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 500;
    v31 = MEMORY[0x1E0C81028];
    v32 = "%25s:%-5d  Failed to setup NNVAD";
    goto LABEL_79;
  }
  v39 = vcvtd_n_u64_f64(48000.0 / *((double *)this + 1), 0xAuLL);
  v40 = *((_DWORD *)this + 88);
  if (v40 > v39)
    v39 = *((_DWORD *)this + 88);
  LODWORD(buf.mSampleRate) = 0;
  std::vector<float>::resize((char **)this + 45, (unint64_t)((double)(v39 + v40) + 0.5), &buf);
  *((_DWORD *)this + 89) = 0;
  v41 = *((unsigned int *)this + 88);
  LODWORD(buf.mSampleRate) = 0;
  std::vector<float>::resize((char **)this + 48, v41, &buf);
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_DWORD *)this + 84) = 1;
  Property = initGatedLoudness((CAAudioChannelLayout *)1, 6553601, (_QWORD *)this + 43, 48000.0);
  if (!(_DWORD)Property)
  {
    *((_QWORD *)this + 51) = 0;
    *((_QWORD *)this + 52) = 0;
    return Property;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 518;
    v31 = MEMORY[0x1E0C81028];
    v32 = "%25s:%-5d  Could not initialize gated loudness";
    goto LABEL_79;
  }
  return Property;
}

void sub_18EFAC370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

uint64_t DialogueAnchor::AADialogueAnchorAnalyzer::PushAudio(DialogueAnchor::AADialogueAnchorAnalyzer *this, unsigned int a2, const AudioBufferList *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v10;
  DialogueAnchor::CenterChannelExtractor *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  const AudioTimeStamp *v18;
  uint64_t v19;
  char *mData;
  OpaqueAudioConverter *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  NSObject *v32;
  const char *v33;
  NSObject *v34;
  const char *v35;
  NSObject *v36;
  const char *v37;
  uint8_t *v38;
  NSObject *v41;
  const char *v42;
  uint8_t *v43;
  unsigned int v45;
  AudioTimeStamp *inTimeStamp;
  _QWORD v48[3];
  unsigned int v49;
  AudioBufferList *inInputBufferLists;
  AudioBufferList *ioOutputBufferLists;
  AudioUnitRenderActionFlags ioActionFlags;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  int v56;
  _BYTE v57[12];
  _BYTE v58[12];
  _BYTE inInputDataProcUserData[24];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 9) + a2;
  v4 = *((_QWORD *)this + 7);
  if (v3 >= v4)
    v3 = *((_QWORD *)this + 7);
  v49 = 0;
  *((_QWORD *)this + 9) = v3;
  *((float *)this + 20) = (float)((float)v3 * 100.0) / (float)v4;
  v5 = *((_QWORD *)this + 45);
  v6 = (unint64_t)(*((_QWORD *)this + 46) - v5) >> 2;
  v7 = (unsigned int *)((char *)this + 356);
  v48[1] = (char *)this + 356;
  v48[0] = v6;
  v48[2] = v5;
  if (!a2)
    return 0;
  v10 = 0;
  v11 = (DialogueAnchor::AADialogueAnchorAnalyzer *)((char *)this + 88);
  inTimeStamp = (AudioTimeStamp *)((char *)this + 280);
  v12 = *((_DWORD *)this + 89);
LABEL_5:
  v13 = a2 - v10;
  if (a2 <= v10)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)inInputDataProcUserData = 136315394;
      *(_QWORD *)&inInputDataProcUserData[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&inInputDataProcUserData[12] = 1024;
      *(_DWORD *)&inInputDataProcUserData[14] = 202;
      v36 = MEMORY[0x1E0C81028];
      v37 = "%25s:%-5d  Input is already eaten!";
LABEL_66:
      v38 = inInputDataProcUserData;
LABEL_67:
      _os_log_impl(&dword_18EE07000, v36, OS_LOG_TYPE_ERROR, v37, v38, 0x12u);
    }
LABEL_68:
    v19 = 0xFFFFFFFFLL;
    goto LABEL_69;
  }
  if (v6 <= v12)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)inInputDataProcUserData = 136315394;
      *(_QWORD *)&inInputDataProcUserData[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&inInputDataProcUserData[12] = 1024;
      *(_DWORD *)&inInputDataProcUserData[14] = 203;
      v36 = MEMORY[0x1E0C81028];
      v37 = "%25s:%-5d  Output is already full!";
      goto LABEL_66;
    }
    goto LABEL_68;
  }
  v14 = v6 - v12;
  if (*((_DWORD *)this + 63) != 2)
  {
    mData = (char *)a3->mBuffers[*((unsigned int *)this + 62)].mData;
    v21 = (OpaqueAudioConverter *)*((_QWORD *)this + 20);
    if (v21)
    {
      *(_DWORD *)&inInputDataProcUserData[4] = 0;
      *(_DWORD *)inInputDataProcUserData = a2;
      *(_QWORD *)&inInputDataProcUserData[8] = &v49;
      *(_QWORD *)&inInputDataProcUserData[16] = mData;
      v18 = inTimeStamp;
      v19 = DialogueAnchor::CenterChannelExtractor::PushResampler(v21, inInputDataProcUserData, (int *)v48);
      if ((_DWORD)v19)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v57 = 136315394;
          *(_QWORD *)&v57[4] = "AADialogueAnchorAnalyzer.cpp";
          *(_WORD *)v58 = 1024;
          *(_DWORD *)&v58[2] = 261;
          v41 = MEMORY[0x1E0C81028];
          v42 = "%25s:%-5d  Failed to resample center channel";
LABEL_79:
          v43 = v57;
LABEL_87:
          _os_log_impl(&dword_18EE07000, v41, OS_LOG_TYPE_ERROR, v42, v43, 0x12u);
        }
LABEL_69:
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)inInputDataProcUserData = 136315394;
          *(_QWORD *)&inInputDataProcUserData[4] = "AADialogueAnchorAnalyzer.cpp";
          *(_WORD *)&inInputDataProcUserData[12] = 1024;
          *(_DWORD *)&inInputDataProcUserData[14] = 606;
          v34 = MEMORY[0x1E0C81028];
          v35 = "%25s:%-5d  Center Channel Extraction failed";
          goto LABEL_71;
        }
        return v19;
      }
    }
    else
    {
      if (v13 >= v14)
        v22 = v6 - v12;
      else
        v22 = a2 - v10;
      if (v22)
      {
        memmove((void *)(v5 + 4 * v12), &mData[4 * v10], 4 * v22);
        v12 = *v7;
      }
      *v7 = v12 + v22;
      v49 = v10 + v22;
      v18 = inTimeStamp;
    }
    goto LABEL_31;
  }
  v15 = *((unsigned int *)this + 54);
  if (1024 - (int)v15 >= v13)
    v16 = a2 - v10;
  else
    v16 = 1024 - v15;
  if (v16)
  {
    v45 = v14;
    memmove((void *)(*((_QWORD *)this + 21) + 4 * v15), (char *)a3->mBuffers[0].mData + 4 * v10, 4 * v16);
    memmove((void *)(*((_QWORD *)this + 24) + 4 * *((unsigned int *)this + 54)), (const void *)(*(_QWORD *)&a3[1].mBuffers[0].mNumberChannels + 4 * v49), 4 * v16);
    v14 = v45;
    LODWORD(v15) = *((_DWORD *)this + 54);
    v10 = v49;
  }
  v17 = v15 + v16;
  *((_DWORD *)this + 54) = v17;
  v49 = v10 + v16;
  v18 = inTimeStamp;
  if (v17 != 1024)
    goto LABEL_31;
  if (*((_QWORD *)this + 20))
  {
    v19 = DialogueAnchor::CenterChannelExtractor::PushScotty(v11, *((float **)this + 28), 1024);
    if (!(_DWORD)v19)
    {
      *(_DWORD *)buf = 0;
      *(_QWORD *)inInputDataProcUserData = 1024;
      *(_QWORD *)&inInputDataProcUserData[8] = buf;
      *(_QWORD *)&inInputDataProcUserData[16] = *((_QWORD *)this + 28);
      v19 = DialogueAnchor::CenterChannelExtractor::PushResampler(*((OpaqueAudioConverter **)this + 20), inInputDataProcUserData, (int *)v48);
      if (!(_DWORD)v19)
      {
        if (*(_DWORD *)buf != 1024)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_68;
          *(_DWORD *)v57 = 136315394;
          *(_QWORD *)&v57[4] = "AADialogueAnchorAnalyzer.cpp";
          *(_WORD *)v58 = 1024;
          *(_DWORD *)&v58[2] = 238;
          v36 = MEMORY[0x1E0C81028];
          v37 = "%25s:%-5d  Failed to consume Scotty output";
          v38 = v57;
          goto LABEL_67;
        }
        goto LABEL_31;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v57 = 136315394;
        *(_QWORD *)&v57[4] = "AADialogueAnchorAnalyzer.cpp";
        *(_WORD *)v58 = 1024;
        *(_DWORD *)&v58[2] = 237;
        v41 = MEMORY[0x1E0C81028];
        v42 = "%25s:%-5d  Scotty resampling failed";
        goto LABEL_79;
      }
      goto LABEL_69;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_69;
    *(_DWORD *)inInputDataProcUserData = 136315394;
    *(_QWORD *)&inInputDataProcUserData[4] = "AADialogueAnchorAnalyzer.cpp";
    *(_WORD *)&inInputDataProcUserData[12] = 1024;
    *(_DWORD *)&inInputDataProcUserData[14] = 227;
    v41 = MEMORY[0x1E0C81028];
    v42 = "%25s:%-5d  Push Scotty to internal buffer failed";
LABEL_86:
    v43 = inInputDataProcUserData;
    goto LABEL_87;
  }
  if (v14 <= 0x3FF)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_68;
    *(_DWORD *)inInputDataProcUserData = 136315394;
    *(_QWORD *)&inInputDataProcUserData[4] = "AADialogueAnchorAnalyzer.cpp";
    *(_WORD *)&inInputDataProcUserData[12] = 1024;
    *(_DWORD *)&inInputDataProcUserData[14] = 240;
    v36 = MEMORY[0x1E0C81028];
    v37 = "%25s:%-5d  Not enough room for Scotty output";
    goto LABEL_66;
  }
  v19 = DialogueAnchor::CenterChannelExtractor::PushScotty(v11, (float *)(v5 + 4 * *v7), v14);
  if ((_DWORD)v19)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_69;
    *(_DWORD *)inInputDataProcUserData = 136315394;
    *(_QWORD *)&inInputDataProcUserData[4] = "AADialogueAnchorAnalyzer.cpp";
    *(_WORD *)&inInputDataProcUserData[12] = 1024;
    *(_DWORD *)&inInputDataProcUserData[14] = 245;
    v41 = MEMORY[0x1E0C81028];
    v42 = "%25s:%-5d  Push Scotty to output buffer failed";
    goto LABEL_86;
  }
  *v7 += 1024;
LABEL_31:
  v12 = *((_DWORD *)this + 89);
  v23 = *((unsigned int *)this + 88);
  while (1)
  {
    if (v12 < v23)
    {
      v10 = v49;
      if (v49 < a2)
        goto LABEL_5;
      return 0;
    }
    ioActionFlags = 512;
    *(_QWORD *)inInputDataProcUserData = 1;
    *(_DWORD *)&inInputDataProcUserData[8] = 1;
    *(_DWORD *)&inInputDataProcUserData[12] = 4 * v23;
    *(_QWORD *)&inInputDataProcUserData[16] = *((_QWORD *)this + 48);
    *(_QWORD *)v57 = 1;
    *(_DWORD *)&v57[8] = 1;
    *(_DWORD *)v58 = 4 * v23;
    *(_QWORD *)&v58[4] = *((_QWORD *)this + 45);
    inInputBufferLists = (AudioBufferList *)v57;
    ioOutputBufferLists = (AudioBufferList *)inInputDataProcUserData;
    if (*((_BYTE *)this + 424))
    {
      v19 = (*(uint64_t (**)(_QWORD, uint64_t, _BYTE *, uint64_t, uint64_t))(**((_QWORD **)this + 54) + 96))(*((_QWORD *)this + 54), v23, v57, 1, (uint64_t)*((double *)this + 35));
      if ((_DWORD)v19)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_60;
        *(_DWORD *)buf = 136315394;
        v54 = "AADialogueAnchorAnalyzer.cpp";
        v55 = 1024;
        v56 = 554;
        v32 = MEMORY[0x1E0C81028];
        v33 = "%25s:%-5d  couldn't write vad input";
        goto LABEL_59;
      }
      LODWORD(v23) = *((_DWORD *)this + 88);
    }
    v19 = AudioUnitProcessMultiple(*((AudioUnit *)this + 34), &ioActionFlags, v18, v23, 1u, (const AudioBufferList **)&inInputBufferLists, 1u, &ioOutputBufferLists);
    if ((_DWORD)v19)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_60;
      *(_DWORD *)buf = 136315394;
      v54 = "AADialogueAnchorAnalyzer.cpp";
      v55 = 1024;
      v56 = 566;
      v32 = MEMORY[0x1E0C81028];
      v33 = "%25s:%-5d  Call to dnnVad AudioUnitProcessMultiple failed";
      goto LABEL_59;
    }
    v24 = *((unsigned int *)this + 88);
    v25 = *((double *)this + 35) + (double)v24;
    *((double *)this + 35) = v25;
    if (*((_BYTE *)this + 424))
      break;
LABEL_40:
    v26 = v24;
    *((_QWORD *)this + 51) += v24;
    v27 = (char *)*((_QWORD *)this + 48);
    if ((_DWORD)v24)
    {
      if (*(float *)v27 == 0.0)
      {
        v30 = 0;
        while (v26 - 1 != v30)
        {
          v31 = *(float *)&v27[4 * v30++ + 4];
          if (v31 != 0.0)
          {
            if (v30 < v26)
              goto LABEL_42;
            break;
          }
        }
      }
      else
      {
LABEL_42:
        *((_QWORD *)this + 52) += v26;
      }
    }
    loudnessMeasurementGenerateBlocks(*((int **)this + 43), v26, v27);
    v28 = *((unsigned int *)this + 88);
    v29 = *((unsigned int *)this + 89);
    v23 = v28;
    if ((_DWORD)v29 != (_DWORD)v28)
    {
      memmove(*((void **)this + 45), (const void *)(*((_QWORD *)this + 45) + 4 * v28), 4 * v29 - 4 * v28);
      v23 = *((unsigned int *)this + 88);
      LODWORD(v28) = *((_DWORD *)this + 89);
    }
    v12 = v28 - v23;
    *v7 = v12;
  }
  v19 = (*(uint64_t (**)(_QWORD, uint64_t, AudioBufferList *, uint64_t, uint64_t))(**((_QWORD **)this + 55) + 96))(*((_QWORD *)this + 55), v24, ioOutputBufferLists, 1, (uint64_t)v25);
  if (!(_DWORD)v19)
  {
    LODWORD(v24) = *((_DWORD *)this + 88);
    goto LABEL_40;
  }
  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    goto LABEL_60;
  *(_DWORD *)buf = 136315394;
  v54 = "AADialogueAnchorAnalyzer.cpp";
  v55 = 1024;
  v56 = 571;
  v32 = MEMORY[0x1E0C81028];
  v33 = "%25s:%-5d  couldn't write vad output";
LABEL_59:
  _os_log_impl(&dword_18EE07000, v32, OS_LOG_TYPE_ERROR, v33, buf, 0x12u);
LABEL_60:
  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    return v19;
  *(_DWORD *)inInputDataProcUserData = 136315394;
  *(_QWORD *)&inInputDataProcUserData[4] = "AADialogueAnchorAnalyzer.cpp";
  *(_WORD *)&inInputDataProcUserData[12] = 1024;
  *(_DWORD *)&inInputDataProcUserData[14] = 612;
  v34 = MEMORY[0x1E0C81028];
  v35 = "%25s:%-5d  VAD processing failed";
LABEL_71:
  _os_log_impl(&dword_18EE07000, v34, OS_LOG_TYPE_ERROR, v35, inInputDataProcUserData, 0x12u);
  return v19;
}

uint64_t DialogueAnchor::AADialogueAnchorAnalyzer::CompleteFinal(DialogueAnchor::AADialogueAnchorAnalyzer *this, float a2, float a3)
{
  const CFDictionaryKeyCallBacks *v4;
  const CFDictionaryValueCallBacks *v5;
  uint64_t v6;
  float v7;
  __CFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _QWORD v13[2];
  _QWORD v14[2];
  __CFDictionary *v15;
  __CFDictionary *v16;
  __int16 v17;
  CFMutableDictionaryRef Mutable;
  __int16 v19;

  computeItuLoudnessValue(*((_QWORD *)this + 43));
  computeEbuLoudnessRange(*((_QWORD *)this + 43));
  v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v19 = 257;
  v16 = CFDictionaryCreateMutable(0, 0, v4, v5);
  v17 = 257;
  v6 = *((_QWORD *)this + 43);
  if (*(_BYTE *)(v6 + 2148))
  {
    CACFDictionary::AddFloat32((CACFDictionary *)&v16, CFSTR("aa itu loudness"), *(float *)(v6 + 2144));
    v6 = *((_QWORD *)this + 43);
  }
  if (*(_BYTE *)(v6 + 2156))
    CACFDictionary::AddFloat32((CACFDictionary *)&v16, CFSTR("aa ebu loudness range"), *(float *)(v6 + 2152));
  v7 = (double)*((unint64_t *)this + 52) * 100.0 / (double)*((unint64_t *)this + 51);
  CACFDictionary::AddFloat32((CACFDictionary *)&v16, CFSTR("aa speech activity percentage"), v7);
  if (CACFDictionary::Size((CACFDictionary *)&v16))
    CACFDictionary::AddDictionary((CACFDictionary *)&Mutable, CFSTR("dialogue anchor parameters"), v16);
  v15 = 0;
  if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, CFSTR("dialogue anchor parameters")))
  {
    CACFDictionary::GetDictionary((CACFDictionary *)&Mutable, CFSTR("dialogue anchor parameters"), &v15);
    v8 = v15;
  }
  else
  {
    v8 = 0;
  }
  v14[0] = 8;
  v14[1] = v8;
  v13[0] = 1;
  v13[1] = v14;
  v12 = 1;
  (*(void (**)(DialogueAnchor::AADialogueAnchorAnalyzer *, const __CFString *, _QWORD *, int *))(*(_QWORD *)this + 48))(this, CFSTR("dialogue anchor parameters"), v13, &v12);
  v9 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v16);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return 0;
}

void sub_18EFACE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v7 - 48));
  _Unwind_Resume(a1);
}

uint64_t DialogueAnchor::CenterChannelExtractor::PushScotty(DialogueAnchor::CenterChannelExtractor *this, float *a2, int a3)
{
  uint64_t v4;
  AudioUnitRenderActionFlags ioActionFlags;
  AudioBufferList *inInputBufferLists;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  AudioBufferList *ioOutputBufferLists;
  uint64_t v14;
  int v15;
  int v16;
  float *v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v14 = 1;
  v15 = 1;
  v16 = 4 * a3;
  v17 = a2;
  ioOutputBufferLists = (AudioBufferList *)&v14;
  v8 = 2;
  v9 = 0x100000000001;
  v10 = *((_QWORD *)this + 10);
  v11 = 0x100000000001;
  v12 = *((_QWORD *)this + 13);
  inInputBufferLists = (AudioBufferList *)&v8;
  ioActionFlags = 512;
  v4 = AudioUnitProcessMultiple(*(AudioUnit *)this, &ioActionFlags, (const AudioTimeStamp *)((char *)this + 8), 0x400u, 1u, (const AudioBufferList **)&inInputBufferLists, 1u, &ioOutputBufferLists);
  if ((_DWORD)v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v19 = "AADialogueAnchorAnalyzer.cpp";
      v20 = 1024;
      v21 = 336;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Call to Scotty AudioUnitProcessMultiple failed", buf, 0x12u);
    }
  }
  else
  {
    *((double *)this + 1) = *((double *)this + 1) + 1024.0;
    *((_DWORD *)this + 32) = 0;
  }
  return v4;
}

uint64_t DialogueAnchor::CenterChannelExtractor::PushResampler(OpaqueAudioConverter *a1, void *inInputDataProcUserData, int *a3)
{
  int v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  UInt32 v7;
  unsigned int v8;
  uint64_t v9;
  UInt32 ioOutputDataPacketSize;
  AudioBufferList outOutputData;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  *(_QWORD *)&outOutputData.mNumberBuffers = 1;
  outOutputData.mBuffers[0].mNumberChannels = 1;
  v5 = (_DWORD *)*((_QWORD *)a3 + 1);
  v4 = *((_QWORD *)a3 + 2);
  v6 = *v5;
  v7 = v3 - v6;
  outOutputData.mBuffers[0].mDataByteSize = 4 * v7;
  outOutputData.mBuffers[0].mData = (void *)(v4 + 4 * v6);
  ioOutputDataPacketSize = v7;
  v8 = AudioConverterFillComplexBuffer(a1, (AudioConverterComplexInputDataProc)DialogueAnchor::resamplerCallback, inInputDataProcUserData, &ioOutputDataPacketSize, &outOutputData, 0);
  if (v8 == 1836086393)
    v9 = 0;
  else
    v9 = v8;
  if ((_DWORD)v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "AADialogueAnchorAnalyzer.cpp";
      v15 = 1024;
      v16 = 300;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  resampling error", buf, 0x12u);
    }
  }
  else
  {
    *v5 += ioOutputDataPacketSize;
  }
  return v9;
}

uint64_t DialogueAnchor::resamplerCallback(DialogueAnchor *this, OpaqueAudioConverter *a2, unsigned int *a3, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  AudioStreamPacketDescription *v6;
  int v7;
  uint64_t result;
  char *v9;

  v6 = a5[1];
  v7 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 >= (*(_DWORD *)a5 - LODWORD(v6->mStartOffset)))
    v7 = *(_DWORD *)a5 - LODWORD(v6->mStartOffset);
  if (v7)
  {
    result = 0;
    *(_DWORD *)a2 = v7;
    v9 = (char *)a5[2] + 4 * LODWORD(v6->mStartOffset);
    a3[3] = 4 * v7;
    LODWORD(v6->mStartOffset) += v7;
  }
  else
  {
    v9 = 0;
    a3[3] = 0;
    result = 1836086393;
  }
  *((_QWORD *)a3 + 2) = v9;
  return result;
}

CFPropertyListRef DialogueAnchor::AADialogueAnchorAnalyzer::SetUpDnnVadGraph(void)::$_0::operator()(CFStringRef filePath)
{
  const __CFAllocator *v1;
  CFURLRef v2;
  __CFReadStream *v3;
  CFPropertyListRef v4;
  CFTypeRef cf;
  CFURLRef fileURL;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], filePath, kCFURLPOSIXPathStyle, 0);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&fileURL, v2);
  v3 = CFReadStreamCreateWithFile(v1, fileURL);
  CFReadStreamOpen(v3);
  cf = 0;
  v4 = CFPropertyListCreateWithStream(0, v3, 0, 0, 0, (CFErrorRef *)&cf);
  if (cf)
    CFRelease(cf);
  CFReadStreamClose(v3);
  CFRelease(v3);
  if (fileURL)
    CFRelease(fileURL);
  return v4;
}

void sub_18EFAD25C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::URLRef::~URLRef((const void **)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::URLRef::~URLRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t ParseMPEGSyncWord(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  if (a1 < 0xFFE00000)
    return 0;
  v2 = bitsToVersion[(a1 >> 19) & 3];
  if (!(_DWORD)v2)
    return 0;
  v3 = bitsToLayer[(a1 >> 17) & 3];
  if (!(_DWORD)v3)
    return 0;
  *(_DWORD *)a2 = a1;
  *(_BYTE *)(a2 + 4) = v2;
  *(_BYTE *)(a2 + 5) = v3;
  if ((unsigned __int16)a1 >> 12 == 15)
    return 0;
  v4 = (char *)&BitRateTable + 64 * (unint64_t)MPEGBitRates[4 * v2 + v3];
  v5 = *(_DWORD *)&v4[4 * ((unsigned __int16)a1 >> 12)];
  if (!v5)
    return 0;
  v6 = (a1 >> 10) & 3;
  if (v6 == 3)
    return 0;
  v7 = MPEGSampleRates[4 * v2 + v6];
  if (!v7)
    return 0;
  v8 = *((_DWORD *)v4 + 14);
  *(_DWORD *)(a2 + 16) = 1000 * v5;
  *(_DWORD *)(a2 + 20) = v5;
  *(double *)(a2 + 24) = (double)v7;
  if ((~a1 & 0xC0) != 0)
    v9 = 2;
  else
    v9 = 1;
  *(_DWORD *)(a2 + 52) = v9;
  if ((_DWORD)v3 == 1)
  {
    *(_DWORD *)(a2 + 32) = 778924081;
    *(_DWORD *)(a2 + 44) = 384;
    v11 = 48000;
    goto LABEL_21;
  }
  if ((_DWORD)v3 == 2)
  {
    *(_DWORD *)(a2 + 32) = 778924082;
    *(_DWORD *)(a2 + 44) = 1152;
    v11 = 144000;
    goto LABEL_21;
  }
  if ((_DWORD)v3 != 3)
    return 0;
  *(_DWORD *)(a2 + 32) = 778924083;
  if (v7 <= 0x5DC0)
    v10 = 576;
  else
    v10 = 1152;
  *(_DWORD *)(a2 + 44) = v10;
  v11 = 125 * v10;
LABEL_21:
  v13 = v11 * v5 / v7;
  v14 = v11 * v8 / v7;
  *(_DWORD *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 12) = v14;
  if ((_DWORD)v3 == 1)
  {
    v15 = (v11 * v8 / v7) & 0xFFFC;
    *(_DWORD *)(a2 + 8) = v13 & 0xFFFC;
    *(_DWORD *)(a2 + 12) = v15;
    if ((a1 & 0x200) != 0)
    {
      *(_DWORD *)(a2 + 8) = (v13 & 0xFFFC) + 4;
      v16 = v15 + 4;
LABEL_26:
      *(_DWORD *)(a2 + 12) = v16;
    }
  }
  else if ((a1 & 0x200) != 0)
  {
    *(_DWORD *)(a2 + 8) = v13 + 1;
    v16 = v14 + 1;
    goto LABEL_26;
  }
  return 1;
}

void MPEGPacketParser::MPEGPacketParser(MPEGPacketParser *this, unsigned int *a2, unsigned int a3)
{
  *(_BYTE *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (a3 >= 4)
    *(_BYTE *)this = ParseMPEGSyncWord(bswap32(*a2), (uint64_t)this + 8);
}

uint64_t MPEGPacketParser_ASBDFromMPEGPacket(unsigned int *a1, unsigned int a2, AudioStreamBasicDescription *a3)
{
  uint64_t v3;
  __int128 v5;
  _OWORD v7[4];

  v3 = 2003329396;
  if (a1)
  {
    if (a2 >= 4)
    {
      memset(v7, 0, sizeof(v7));
      if (ParseMPEGSyncWord(bswap32(*a1), (uint64_t)v7))
      {
        v3 = 0;
        v5 = *(_OWORD *)((char *)&v7[2] + 8);
        *(_OWORD *)&a3->mSampleRate = *(_OWORD *)((char *)&v7[1] + 8);
        *(_OWORD *)&a3->mBytesPerPacket = v5;
        *(_QWORD *)&a3->mBitsPerChannel = *((_QWORD *)&v7[3] + 1);
      }
    }
    else
    {
      return 561213539;
    }
  }
  return v3;
}

float32x4_t *Float32ToNativeInt32_ARM(float32x4_t *a1, int32x4_t *a2, unsigned int a3)
{
  return Float32ToNativeInt32Scaled_ARM(a1, a2, a3, 2147500000.0);
}

unsigned int *NativeInt16ToSwapInt32(int16x8_t *a1, uint32x4_t *a2, unsigned int a3, char a4)
{
  NativeInt16ToNativeInt32_ARM(a1, a2, a3, a4);
  return SwapPCM32_Portable((unsigned int *)a2, a2, a3);
}

unsigned int *SwapInt16ToSwapInt32(int8x8_t *a1, int32x4_t *a2, unsigned int a3, int a4)
{
  SwapInt16ToNativeInt32_Portable(a1, a2, a3, a4);
  return SwapPCM32_Portable((unsigned int *)a2, a2, a3);
}

unsigned int *NativeInt24ToSwapInt32(unsigned __int8 *a1, unsigned int *a2, unsigned int a3, char a4)
{
  NativeInt24ToNativeInt32_ARM(a1, (uint64_t)a2, a3, a4);
  return SwapPCM32_Portable(a2, a2, a3);
}

unsigned int *SwapInt24ToSwapInt32(unsigned __int8 *a1, int *a2, unsigned int a3, char a4, uint64_t a5, int *a6)
{
  SwapInt24ToNativeInt32_Portable(a1, a2, a3, a4, a5, a6);
  return SwapPCM32_Portable((unsigned int *)a2, a2, a3);
}

_OWORD *SwapInt32ToSwapInt16(unsigned int *a1, int8x16_t *a2, unsigned int a3, char a4)
{
  SwapInt32ToNativeInt16_Portable(a1, a2->i32, a3, a4);
  return SwapPCM16_ARM(a2, a2, a3);
}

int *SwapInt32ToSwapInt24(unsigned int *a1, unsigned __int8 *a2, unsigned int a3, char a4)
{
  SwapInt32ToNativeInt24_Portable(a1, (uint64_t)a2, a3, a4);
  return SwapPCM24_Portable((int *)a2, (PCMSInt24Swap *)a2, a3);
}

float32x4_t **StereoInterleaveFloat32ToInt16(float32x4_t *a1, float32x4_t *a2, __int16 *a3, unsigned int a4)
{
  float32x4_t *v5[3];

  v5[2] = *(float32x4_t **)MEMORY[0x1E0C80C00];
  v5[0] = a1;
  v5[1] = a2;
  return StereoInterleaveFloat32ToNativeInt16Scaled_ARM(v5, a3, a4, 32768.0);
}

const __int16 *StereoDeinterleaveInt16ToFloat32(const __int16 *a1, float32x4_t *a2, float32x4_t *a3, unsigned int a4)
{
  float32x4_t *v5[3];

  v5[2] = *(float32x4_t **)MEMORY[0x1E0C80C00];
  v5[0] = a2;
  v5[1] = a3;
  return StereoDeinterleaveNativeInt16ToScaledFloat32_ARM(a1, v5, a4, 0.000030518);
}

void AIFFAudioFile::~AIFFAudioFile(AIFFAudioFile *this)
{
  AIFFAudioFile::~AIFFAudioFile(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E2902A50;
  if (*((_QWORD *)this + 58))
  {
    v2 = BaseOpaqueObject::ResolveOpaqueRef();
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  *(_QWORD *)this = off_1E2905308;
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  AudioFileObject::~AudioFileObject(this);
}

uint64_t AIFFAudioFile::Create(AIFFAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = AudioFileObject::Create(this, a2, a3);
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "AIFFAudioFile.cpp";
      v11 = 1024;
      v12 = 1032;
      v6 = MEMORY[0x1E0C81028];
      v7 = "%25s:%-5d  Couldn't create a new audio file object";
LABEL_7:
      _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v9, 0x12u);
    }
  }
  else
  {
    v5 = AIFFAudioFile::InitializeAIFFChunks(this);
    if ((_DWORD)v5 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "AIFFAudioFile.cpp";
      v11 = 1024;
      v12 = 1035;
      v6 = MEMORY[0x1E0C81028];
      v7 = "%25s:%-5d  InitializeAIFFChunks";
      goto LABEL_7;
    }
  }
  return v5;
}

uint64_t AIFFAudioFile::InitializeDataSource(AIFFAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = AIFFAudioFile::InitializeAIFFChunks(this);
  if ((_DWORD)v2 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "AIFFAudioFile.cpp";
    v6 = 1024;
    v7 = 1060;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  InitializeAIFFChunks", (uint8_t *)&v4, 0x12u);
  }
  return v2;
}

uint64_t AIFFAudioFile::Close(AIFFAudioFile *this)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 100) & 2) == 0
    || (v6 = 0,
        (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v6),
        (v6 & 1) == 0)
    || (v5 = 0,
        v4 = 0,
        result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, char *, int *))(**((_QWORD **)this + 13)
                                                                                            + 56))(*((_QWORD *)this + 13), 2, 0, 1, &v5, &v4), !(_DWORD)result))
  {
    v3 = *((_QWORD *)this + 13);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    result = 0;
    *((_QWORD *)this + 13) = 0;
  }
  return result;
}

uint64_t AIFFAudioFile::UpdateDataFormat(AIFFAudioFile *this, AudioStreamBasicDescription *a2)
{
  uint64_t v4;
  UInt32 mBitsPerChannel;
  unsigned int FormatFromStreamDescription;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  int v16;
  unsigned int v17;
  _BYTE v18[22];
  _BYTE __src[256];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(__src, 0, sizeof(__src));
  v4 = (*(uint64_t (**)(AIFFAudioFile *))(*(_QWORD *)this + 176))(this);
  if (!(_DWORD)v4)
  {
    mBitsPerChannel = a2->mBitsPerChannel;
    *(_WORD *)v18 = a2->mChannelsPerFrame;
    *(_WORD *)&v18[6] = mBitsPerChannel;
    ConvertToIeeeExtended(&v18[8], a2->mSampleRate);
    FormatFromStreamDescription = GetFormatFromStreamDescription(a2);
    v8 = *(_QWORD *)this;
    if (a2->mBytesPerPacket)
      v9 = (*(uint64_t (**)(AIFFAudioFile *))(v8 + 224))(this) / a2->mBytesPerPacket;
    else
      LODWORD(v9) = a2->mFramesPerPacket * (*(uint64_t (**)(AIFFAudioFile *))(v8 + 240))(this);
    if (*((_DWORD *)this + 21) == 1095321155)
    {
      FormatFromStreamDescription = GetFormatFromStreamDescription(a2);
      GetCompressionName((__int128 *)a2, (AudioStreamBasicDescription *)__src, v10);
      v11 = __src[0];
      v12 = (__src[0] + 24) & 0x1FE;
      if (((__src[0] + 24) & 0x1FE) == 0)
        return 0;
    }
    else
    {
      v11 = 0;
      v12 = 24;
      v17 = 24;
    }
    v16 = 1296912195;
    v17 = bswap32(v12);
    *(_WORD *)v18 = bswap32(*(unsigned __int16 *)v18) >> 16;
    *(_DWORD *)&v18[2] = bswap32(v9);
    *(_WORD *)&v18[6] = bswap32(*(unsigned __int16 *)&v18[6]) >> 16;
    *(_DWORD *)&v18[18] = bswap32(FormatFromStreamDescription);
    if (v11)
    {
      CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v15, v12, 1);
      v13 = (char *)v15;
      v14 = *(_QWORD *)&v18[14];
      *(_OWORD *)v15 = *(_OWORD *)v18;
      *(_QWORD *)(v13 + 14) = v14;
      memcpy(v13 + 22, __src, v11 + 1);
      v4 = (*(uint64_t (**)(AIFFAudioFile *, uint64_t, uint64_t, char *))(*(_QWORD *)this + 768))(this, 1129270605, v12, v13);
      if (v15)
        free(v15);
    }
    else
    {
      return (*(uint64_t (**)(AIFFAudioFile *, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)this + 768))(this, 1129270605, v12, v18);
    }
  }
  return v4;
}

void sub_18EFADD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

uint64_t AIFFAudioFile::UpdateSize(AIFFAudioFile *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  const char *v35;
  __int16 v36;
  int v37;
  uint8_t buf[4];
  _BYTE v39[10];
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  v1 = *((_QWORD *)this + 18);
  v2 = *((_QWORD *)this + 19) - v1;
  if (!v2)
  {
LABEL_5:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v39 = "AIFFAudioFile.cpp";
      *(_WORD *)&v39[8] = 1024;
      v40 = 1564;
      v9 = MEMORY[0x1E0C81028];
      v10 = "%25s:%-5d  Couldn't get the sound data chunk info";
LABEL_7:
      _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_ERROR, v10, buf, 0x12u);
    }
    return 0;
  }
  v4 = 0;
  v5 = 0;
  v6 = *((unsigned int *)this + 10);
  v7 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
  while (1)
  {
    v8 = (_DWORD *)(v1 + 24 * v4);
    if (*v8 == 1397968452)
      break;
    v4 = ++v5;
    if (v7 <= v5)
      goto LABEL_5;
  }
  v13 = (*(uint64_t (**)(AIFFAudioFile *))(*(_QWORD *)this + 224))(this);
  v14 = v1 + 24 * v4;
  v17 = *(_QWORD *)(v14 + 8);
  v16 = (_QWORD *)(v14 + 8);
  v15 = v17;
  if (v13 >= v17 - 16)
    v18 = 0;
  else
    v18 = v15 - (*(uint64_t (**)(AIFFAudioFile *))(*(_QWORD *)this + 224))(this) - 16;
  *v16 = (*(unsigned int (**)(AIFFAudioFile *))(*(_QWORD *)this + 224))(this) + 16;
  v32 = 0;
  v19 = (*(uint64_t (**)(AIFFAudioFile *, _DWORD *, int *))(*(_QWORD *)this + 776))(this, v8, &v32);
  if (!(_DWORD)v19)
  {
    if (v18)
    {
      ChunkyAudioFile::MoveUpTrailingChunks(this, v5, v18);
      v23 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 16))(*((_QWORD *)this + 13), &v33);
      if ((_DWORD)v23)
      {
        v11 = v23;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return v11;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v39 = "AIFFAudioFile.cpp";
        *(_WORD *)&v39[8] = 1024;
        v40 = 1581;
        v20 = MEMORY[0x1E0C81028];
        v21 = "%25s:%-5d  GetSize failed";
        goto LABEL_16;
      }
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), v33 - v18);
    }
    v24 = *((_QWORD *)this + 18);
    v25 = *((_QWORD *)this + 19) - v24;
    if (v25)
    {
      v26 = 0;
      v27 = 0xAAAAAAAAAAAAAAABLL * (v25 >> 3);
      v28 = 1;
      while (*(_DWORD *)(v24 + 24 * v26) != 1129270605)
      {
        v26 = v28;
        if (v27 <= v28++)
          goto LABEL_27;
      }
      *(_DWORD *)&v39[6] = bswap32((*(uint64_t (**)(AIFFAudioFile *))(*(_QWORD *)this + 224))(this) / v6);
      v30 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _BYTE *, char *))(**((_QWORD **)this + 13)
                                                                                         + 56))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v24 + 24 * v26 + 16) + 10, 4, &v39[6], (char *)&v33 + 4);
      if ((_DWORD)v30)
      {
        v11 = v30;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return v11;
        v34 = 136315394;
        v35 = "AIFFAudioFile.cpp";
        v36 = 1024;
        v37 = 1592;
        v20 = MEMORY[0x1E0C81028];
        v21 = "%25s:%-5d  Write Container ckSize failed";
      }
      else
      {
        v31 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 16))(*((_QWORD *)this + 13), &v33);
        if ((_DWORD)v31)
        {
          v11 = v31;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return v11;
          v34 = 136315394;
          v35 = "AIFFAudioFile.cpp";
          v36 = 1024;
          v37 = 1596;
          v20 = MEMORY[0x1E0C81028];
          v21 = "%25s:%-5d  GetSize failed";
        }
        else
        {
          LODWORD(v33) = bswap32(v33 - 8);
          v11 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *, char *))(**((_QWORD **)this + 13)
                                                                                               + 56))(*((_QWORD *)this + 13), 0, 4, 4, &v33, (char *)&v33 + 4);
          if (!(_DWORD)v11 || !os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return v11;
          v34 = 136315394;
          v35 = "AIFFAudioFile.cpp";
          v36 = 1024;
          v37 = 1600;
          v20 = MEMORY[0x1E0C81028];
          v21 = "%25s:%-5d  Write Container ckSize failed";
        }
      }
      v22 = (uint8_t *)&v34;
      goto LABEL_17;
    }
LABEL_27:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v39 = "AIFFAudioFile.cpp";
      *(_WORD *)&v39[8] = 1024;
      v40 = 1587;
      v9 = MEMORY[0x1E0C81028];
      v10 = "%25s:%-5d  Couldn't get the offset of the common chunk";
      goto LABEL_7;
    }
    return 0;
  }
  v11 = v19;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v39 = "AIFFAudioFile.cpp";
    *(_WORD *)&v39[8] = 1024;
    v40 = 1573;
    v20 = MEMORY[0x1E0C81028];
    v21 = "%25s:%-5d  Write Sound Data Chunk failed";
LABEL_16:
    v22 = buf;
LABEL_17:
    _os_log_impl(&dword_18EE07000, v20, OS_LOG_TYPE_ERROR, v21, v22, 0x12u);
  }
  return v11;
}

uint64_t AIFFAudioFile::GetMagicCookieData(AIFFAudioFile *this, unsigned int *a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  __int16 v14;
  _WORD *v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _WORD v23[5];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = 2003334207;
  if (!a2 || !a3)
    return v3;
  if (*((_DWORD *)this + 8) == 1667326771)
  {
    v21 = 0;
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _WORD *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                              + 48))(*((_QWORD *)this + 13), 0, *((_QWORD *)this + 9) + 8, 10, v23, &v21);
    if ((_DWORD)v3)
      return v3;
    v14 = 0;
    v15 = v23;
    v16 = v21;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0xF6400000000;
    if (v21 < 0xA)
      goto LABEL_18;
    if (v23[0] != 2935)
    {
      if (v23[0] != 30475)
        goto LABEL_18;
      v17 = 1;
    }
    LOBYTE(v14) = 1;
LABEL_18:
    if (AC3PacketParser::IsValid((AC3PacketParser *)&v14) && *a2 >= 0xB)
      AC3PacketParser::GetMagicCookie((AC3PacketParser *)&v14, a3, a2);
    if (v19)
      free(v19);
    return v3;
  }
  v6 = *((_QWORD *)this + 18);
  v7 = *((_QWORD *)this + 19);
  v8 = v7 - v6;
  if (v7 == v6)
  {
LABEL_13:
    *a2 = 0;
    return 1667787583;
  }
  else
  {
    v9 = 0;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 1;
    while (*(_DWORD *)(v6 + 24 * v9) != 2002876005)
    {
      v9 = v11;
      if (v10 <= v11++)
        goto LABEL_13;
    }
    v22 = *(_DWORD *)(v6 + 24 * v9 + 8) - 8;
    if (*a2 >= v22)
    {
      v3 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v6 + 24 * v9 + 16) + 8);
      *a2 = v22;
    }
    else
    {
      return 561211770;
    }
  }
  return v3;
}

void sub_18EFAE464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (a19)
    free(a19);
  _Unwind_Resume(exception_object);
}

uint64_t AIFFAudioFile::SetMagicCookieData(AIFFAudioFile *this, uint64_t a2, const void *a3)
{
  size_t v6;
  _DWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t Property;
  UInt32 ioPropertyDataSize;
  __int128 outPropertyData;
  __int128 v14;
  uint64_t v15;
  _DWORD *v16;

  v16 = 0;
  v6 = a2;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v16, a2 + 8, 0);
  v7 = v16;
  *v16 = 2002876005;
  v7[1] = bswap32(a2);
  memcpy(v7 + 2, a3, v6);
  v8 = (*(uint64_t (**)(AIFFAudioFile *, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)this + 768))(this, 2002876005, a2, v7 + 2);
  if (!(_DWORD)v8)
  {
    v9 = *(_OWORD *)((char *)this + 40);
    outPropertyData = *(_OWORD *)((char *)this + 24);
    v14 = v9;
    v15 = *((_QWORD *)this + 7);
    ioPropertyDataSize = 40;
    Property = AudioFormatGetProperty(0x666D7469u, a2, a3, &ioPropertyDataSize, &outPropertyData);
    v8 = Property;
    if (!(_DWORD)Property
      || ((_DWORD)Property == 1718449215 || (_DWORD)Property == 560360820)
      && HIDWORD(v14)
      && *(double *)&outPropertyData > 0.0
      && (_DWORD)v14)
    {
      (*(void (**)(AIFFAudioFile *, __int128 *))(*(_QWORD *)this + 184))(this, &outPropertyData);
      v8 = 0;
    }
  }
  free(v7);
  return v8;
}

void sub_18EFAE5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  free(v16);
  _Unwind_Resume(a1);
}

uint64_t AIFFAudioFile::GetMarkerListSize(AIFFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t result;
  unsigned __int16 v12;
  int v13;

  if (a3)
    *a3 = 1;
  if (!a2)
    return 0;
  v4 = *((_QWORD *)this + 18);
  v5 = *((_QWORD *)this + 19);
  v6 = v5 - v4;
  if (v5 == v4)
  {
LABEL_8:
    result = 0;
    *a2 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 1;
    while (*(_DWORD *)(v4 + 24 * v7) != 1296126539)
    {
      v7 = v9;
      if (v8 <= v9++)
        goto LABEL_8;
    }
    v13 = 2;
    v12 = 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned __int16 *, int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v4 + 24 * v7 + 16) + 8, 2, &v12, &v13);
    if (!(_DWORD)result)
      *a2 = 40 * ((int)bswap32(v12) >> 16) + 8;
  }
  return result;
}

uint64_t AIFFAudioFile::GetMarkerList(AIFFAudioFile *this, unsigned int *a2, AudioFileMarkerList *a3)
{
  return (*(uint64_t (**)(AIFFAudioFile *, unsigned int *, AudioFileMarkerList *, uint64_t))(*(_QWORD *)this + 816))(this, a2, a3, 1);
}

uint64_t AIFFAudioFile::SetMarkerList(AIFFAudioFile *this, unsigned int a2, const AudioFileMarkerList *a3)
{
  uint64_t v3;
  uint64_t mNumberMarkers;
  double *v6;
  unsigned int v7;
  const __CFString *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v13;
  unsigned __int8 buffer[256];
  uint64_t v15;

  v3 = (uint64_t)a3;
  v15 = *MEMORY[0x1E0C80C00];
  mNumberMarkers = a3->mNumberMarkers;
  CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v13, (262 * mNumberMarkers + 2), 0);
  *(_BYTE *)v13 = BYTE1(mNumberMarkers);
  *((_BYTE *)v13 + 1) = mNumberMarkers;
  if ((_DWORD)mNumberMarkers)
  {
    v6 = (double *)(v3 + 24);
    LODWORD(v3) = 2;
    do
    {
      *((_BYTE *)v13 + v3) = BYTE1(*(_DWORD *)v6);
      *((_BYTE *)v13 + (v3 + 1)) = *(_DWORD *)v6;
      v7 = vcvtmd_u64_f64(*(v6 - 2) + 0.5);
      *((_BYTE *)v13 + (v3 + 2)) = HIBYTE(v7);
      *((_BYTE *)v13 + (v3 + 3)) = BYTE2(v7);
      *((_BYTE *)v13 + (v3 + 4)) = BYTE1(v7);
      *((_BYTE *)v13 + (v3 + 5)) = v7;
      v8 = (const __CFString *)*((_QWORD *)v6 - 1);
      if (v8 && CFStringGetPascalString(v8, buffer, 256, 0x8000100u))
      {
        v9 = buffer[0];
      }
      else
      {
        *(_WORD *)buffer = 16129;
        v9 = 1;
      }
      v10 = v3 + 6;
      memcpy((char *)v13 + v10, buffer, v9 + 1);
      v3 = ((buffer[0] + 2) & 0x1FE) + v10;
      v6 += 5;
      --mNumberMarkers;
    }
    while (mNumberMarkers);
  }
  else
  {
    v3 = 2;
  }
  v11 = (*(uint64_t (**)(AIFFAudioFile *, uint64_t, uint64_t, void *))(*(_QWORD *)this + 768))(this, 1296126539, v3, v13);
  if (v13)
    free(v13);
  return v11;
}

void sub_18EFAE8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9)
    free(a9);
  _Unwind_Resume(exception_object);
}

uint64_t AIFFAudioFile::GetRegionListSize(AIFFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  return 1886681407;
}

uint64_t AIFFAudioFile::GetRegionList(AIFFAudioFile *this, unsigned int *a2, AudioFileRegionList *a3)
{
  *a2 = 0;
  return 1886681407;
}

uint64_t AIFFAudioFile::SetRegionList(AIFFAudioFile *this, unsigned int a2, const AudioFileRegionList *a3)
{
  return 1886681407;
}

uint64_t AIFFAudioFile::SetChannelLayout(AIFFAudioFile *this, uint64_t a2, const AudioChannelLayout *a3)
{
  uint64_t Property;
  int8x8_t *v7;
  uint64_t v8;
  unsigned int *v9;
  void *__dst;
  UInt32 ioPropertyDataSize;
  int outPropertyData;

  ioPropertyDataSize = 4;
  outPropertyData = 0;
  Property = AudioFormatGetProperty(0x6E63686Du, a2, a3, &ioPropertyDataSize, &outPropertyData);
  if (!(_DWORD)Property)
  {
    if (outPropertyData == *((_DWORD *)this + 13))
    {
      __dst = 0;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes(&__dst, a2, 1);
      v7 = (int8x8_t *)__dst;
      memcpy(__dst, a3, a2);
      v8 = v7[1].u32[0];
      *v7 = vrev32_s8(*v7);
      v7[1].i32[0] = bswap32(v8);
      if ((_DWORD)v8)
      {
        v9 = (unsigned int *)&v7[3] + 1;
        do
        {
          *((int8x16_t *)v9 - 1) = vrev32q_s8(*((int8x16_t *)v9 - 1));
          *v9 = bswap32(*v9);
          v9 += 5;
          --v8;
        }
        while (v8);
      }
      Property = (*(uint64_t (**)(AIFFAudioFile *, uint64_t, uint64_t, int8x8_t *))(*(_QWORD *)this + 768))(this, 1128808782, a2, v7);
      free(v7);
    }
    else
    {
      return 4294967246;
    }
  }
  return Property;
}

void sub_18EFAEA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9)
    free(a9);
  _Unwind_Resume(exception_object);
}

uint64_t AIFFAudioFile::GetInfoDictionary(AIFFAudioFile *this, CACFDictionary *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  void *v14;
  signed int v15;
  const __CFString *v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  uint64_t v26;
  void *v27;
  signed int v28;
  const __CFString *v29;
  const __CFString *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  uint64_t v39;
  void *v40;
  signed int v41;
  const __CFString *v42;
  const __CFString *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int *v51;
  uint64_t v52;
  void *v53;
  signed int v54;
  const __CFString *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  BOOL v68;
  unsigned int v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  char *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  AudioFileObject *v83;
  CFIndex v85;
  const __CFString *v86;
  std::bad_alloc *exception;
  std::bad_alloc *v88;
  double v89;
  unsigned int v90;
  void *v91;

  v91 = 0;
  v90 = 0;
  v4 = *((_QWORD *)this + 18);
  v5 = *((_QWORD *)this + 19) - v4;
  if (v5)
  {
    v6 = 0;
    v7 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    v8 = 1;
    while (*(_DWORD *)(v4 + 24 * v6) != 1312902469)
    {
      v6 = v8;
      v9 = v7 > v8++;
      if (!v9)
        goto LABEL_15;
    }
    v10 = v4 + 24 * v6;
    v13 = *(_QWORD *)(v10 + 8);
    v12 = (unsigned int *)(v10 + 8);
    v11 = v13;
    if (v13 >= 9)
    {
      CADeprecated::CAAutoFree<AIFF_TextChunk>::allocBytes(&v91, v11);
      v14 = v91;
      if (v91)
      {
        if (!(*(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, void *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v4 + 24 * v6 + 16), *v12, v91, &v90)&& v90 >= *v12)
        {
          v15 = bswap32(*((_DWORD *)v14 + 1));
          *((_DWORD *)v14 + 1) = v15;
          v16 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v14 + 8, v15, 0x600u, 0);
          v17 = v16;
          if (v16)
          {
            if (CFStringGetLength(v16))
              CACFDictionary::AddString(a2, CFSTR("title"), v17);
            CFRelease(v17);
          }
        }
        free(v14);
        v91 = 0;
      }
    }
  }
LABEL_15:
  v18 = *((_QWORD *)this + 18);
  v19 = *((_QWORD *)this + 19) - v18;
  if (v19)
  {
    v20 = 0;
    v21 = 0xAAAAAAAAAAAAAAABLL * (v19 >> 3);
    v22 = 1;
    while (*(_DWORD *)(v18 + 24 * v20) != 1096111176)
    {
      v20 = v22;
      v9 = v21 > v22++;
      if (!v9)
        goto LABEL_29;
    }
    v23 = v18 + 24 * v20;
    v26 = *(_QWORD *)(v23 + 8);
    v25 = (unsigned int *)(v23 + 8);
    v24 = v26;
    if ((v26 & 0xFFFFFFF8) != 0)
    {
      v90 = 0;
      CADeprecated::CAAutoFree<AIFF_TextChunk>::allocBytes(&v91, v24);
      v27 = v91;
      if (v91)
      {
        if (!(*(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, void *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v18 + 24 * v20 + 16), *v25, v91, &v90)&& v90 >= *v25)
        {
          v28 = bswap32(*((_DWORD *)v27 + 1));
          *((_DWORD *)v27 + 1) = v28;
          v29 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v27 + 8, v28, 0x600u, 0);
          v30 = v29;
          if (v29)
          {
            if (CFStringGetLength(v29))
              CACFDictionary::AddString(a2, CFSTR("artist"), v30);
            CFRelease(v30);
          }
        }
        free(v27);
        v91 = 0;
      }
    }
  }
LABEL_29:
  v31 = *((_QWORD *)this + 18);
  v32 = *((_QWORD *)this + 19) - v31;
  if (v32)
  {
    v33 = 0;
    v34 = 0xAAAAAAAAAAAAAAABLL * (v32 >> 3);
    v35 = 1;
    while (*(_DWORD *)(v31 + 24 * v33) != 677587232)
    {
      v33 = v35;
      v9 = v34 > v35++;
      if (!v9)
        goto LABEL_43;
    }
    v36 = v31 + 24 * v33;
    v39 = *(_QWORD *)(v36 + 8);
    v38 = (unsigned int *)(v36 + 8);
    v37 = v39;
    if ((v39 & 0xFFFFFFF8) != 0)
    {
      v90 = 0;
      CADeprecated::CAAutoFree<AIFF_TextChunk>::allocBytes(&v91, v37);
      v40 = v91;
      if (v91)
      {
        if (!(*(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, void *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v31 + 24 * v33 + 16), *v38, v91, &v90)&& v90 >= *v38)
        {
          v41 = bswap32(*((_DWORD *)v40 + 1));
          *((_DWORD *)v40 + 1) = v41;
          v42 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v40 + 8, v41, 0x600u, 0);
          v43 = v42;
          if (v42)
          {
            if (CFStringGetLength(v42))
              CACFDictionary::AddString(a2, CFSTR("copyright"), v43);
            CFRelease(v43);
          }
        }
        free(v40);
        v91 = 0;
      }
    }
  }
LABEL_43:
  v44 = *((_QWORD *)this + 18);
  v45 = *((_QWORD *)this + 19) - v44;
  if (v45)
  {
    v46 = 0;
    v47 = 0xAAAAAAAAAAAAAAABLL * (v45 >> 3);
    v48 = 1;
    while (*(_DWORD *)(v44 + 24 * v46) != 1095650895)
    {
      v46 = v48;
      v9 = v47 > v48++;
      if (!v9)
        goto LABEL_55;
    }
    v49 = v44 + 24 * v46;
    v52 = *(_QWORD *)(v49 + 8);
    v51 = (unsigned int *)(v49 + 8);
    v50 = v52;
    if ((v52 & 0xFFFFFFF8) != 0)
    {
      v90 = 0;
      CADeprecated::CAAutoFree<AIFF_TextChunk>::allocBytes(&v91, v50);
      v53 = v91;
      if (v91)
      {
        if (!(*(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, void *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v44 + 24 * v46 + 16), *v51, v91, &v90)&& v90 >= *v51)
        {
          v54 = bswap32(*((_DWORD *)v53 + 1));
          *((_DWORD *)v53 + 1) = v54;
          v55 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v53 + 8, v54, 0x600u, 0);
          if (v55)
          {
            AppendCommentStringToDictionary(a2, v55);
            CFRelease(v55);
          }
        }
        free(v53);
        v91 = 0;
      }
    }
  }
LABEL_55:
  v56 = *((_QWORD *)this + 18);
  v57 = *((_QWORD *)this + 19) - v56;
  if (v57)
  {
    v58 = 0;
    v59 = 0xAAAAAAAAAAAAAAABLL * (v57 >> 3);
    v60 = 1;
    while (*(_DWORD *)(v56 + 24 * v58) != 1129270612)
    {
      v58 = v60;
      v9 = v59 > v60++;
      if (!v9)
        goto LABEL_83;
    }
    v61 = v56 + 24 * v58;
    v64 = *(_QWORD *)(v61 + 8);
    v63 = (unsigned int *)(v61 + 8);
    v62 = v64;
    if (v64 >= 0x13)
    {
      v65 = v62;
      v90 = 0;
      v66 = (unsigned __int16 *)malloc_type_malloc(v62, 0x7C51E058uLL);
      v67 = v66;
      if (v65)
        v68 = v66 == 0;
      else
        v68 = 0;
      if (v68)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v88 = std::bad_alloc::bad_alloc(exception);
      }
      if (v66)
      {
        if (!(*(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, unsigned __int16 *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, *(_QWORD *)(v56 + 24 * v58 + 16), *v63, v66, &v90))
        {
          v69 = v90;
          v70 = *(_QWORD *)v63;
          if (v90 >= *(_QWORD *)v63)
          {
            *((_DWORD *)v67 + 1) = bswap32(*((_DWORD *)v67 + 1));
            v71 = v67[4];
            v72 = __rev16(v71);
            v67[4] = v72;
            if (v71)
            {
              v73 = (char *)(v67 + 5);
              v74 = v69 - 8;
              v75 = 10;
              v76 = 1;
              do
              {
                *(_DWORD *)v73 = bswap32(*(_DWORD *)v73);
                *((_WORD *)v73 + 2) = bswap32(*((unsigned __int16 *)v73 + 2)) >> 16;
                v77 = *((unsigned __int16 *)v73 + 3);
                v78 = __rev16(v77);
                *((_WORD *)v73 + 3) = v78;
                if (v77)
                {
                  v79 = v78 + (v78 & 1) + 8;
                }
                else
                {
                  v80 = v73[8];
                  if ((v80 & 1) != 0)
                    v81 = 9;
                  else
                    v81 = 10;
                  v79 = v81 + v80;
                }
                v75 += v79;
                v73 += v79;
              }
              while (v75 < v74 && v76++ < v72);
              if (!v67[7])
              {
                v85 = v67[8];
                if (v67[8])
                {
                  if (v70 >= v85 + 18)
                  {
                    v86 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v67 + 18, v85, 0x600u, 0);
                    if (v86)
                    {
                      AppendCommentStringToDictionary(a2, v86);
                      CFRelease(v86);
                    }
                  }
                }
              }
            }
          }
        }
        free(v67);
      }
    }
  }
LABEL_83:
  if (*((_QWORD *)this + 58))
    FillInfoDictionaryFromID3Parser(a2);
  v89 = 0.0;
  v83 = (AudioFileObject *)(*(uint64_t (**)(AIFFAudioFile *, double *))(*(_QWORD *)this + 544))(this, &v89);
  if (!(_DWORD)v83)
    AudioFileObject::AddDurationToInfoDictionary(v83, a2, &v89);
  return 0;
}

void sub_18EFAF11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  free(v12);
  if (a12)
    free(a12);
  _Unwind_Resume(a1);
}

uint64_t ChunkyAudioFile::GetLoudnessInfoSize(ChunkyAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  *a2 = 8;
  *a3 = 1;
  return 0;
}

uint64_t AIFFAudioFile::GetLyrics(AIFFAudioFile *this, const __CFString **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  const __CFString *Value;
  CFDictionaryRef theDict;
  int v9;
  uint64_t v10;
  _BYTE v11[8];
  int v12;

  v3 = 1667787583;
  v9 = 12;
  v10 = 1431522388;
  v4 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v4)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v4 + 32))(v4, 8, &v10, 1718185574, &v9, v11))
    {
      theDict = 0;
      v9 = 8;
      v6 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v6)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t, int *, CFDictionaryRef *))(*(_QWORD *)v6 + 32))(v6, 4, &v12, 1717854580, &v9, &theDict))
        {
          Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("text"));
          *a2 = Value;
          if (Value)
            CFRetain(Value);
          CFRelease(theDict);
          return 0;
        }
      }
    }
  }
  return v3;
}

uint64_t ChunkyAudioFile::IsValidFilePosition(ChunkyAudioFile *this, uint64_t a2)
{
  int v3;
  unsigned int v4;

  v3 = (*(uint64_t (**)(ChunkyAudioFile *))(*(_QWORD *)this + 808))(this);
  if (a2 <= 0xFFFFFFFFLL)
    v4 = 0;
  else
    v4 = 1868981823;
  if (v3)
    return 0;
  else
    return v4;
}

uint64_t AIFFAudioFile::FileCode(AIFFAudioFile *this)
{
  return 1179603533;
}

uint64_t ChunkyAudioFile::PaddedChunkSize(ChunkyAudioFile *this, uint64_t a2)
{
  return (a2 + *((unsigned __int8 *)this + 188) - 1) & -(uint64_t)*((unsigned __int8 *)this + 188);
}

BOOL ChunkyAudioFile::FileTypeUsesDS64(ChunkyAudioFile *this)
{
  int v1;

  v1 = *((_DWORD *)this + 21);
  return v1 == 1380333108 || v1 == 1113011764;
}

BOOL ChunkyAudioFile::FileTypeSupports64BitDataOffsets(ChunkyAudioFile *this)
{
  int v1;

  v1 = *((_DWORD *)this + 21);
  return v1 == 1113011764 || v1 == 1380333108 || v1 == 1463170150;
}

uint64_t AIFFAudioFile::GetMarkerList(AIFFAudioFile *this, unsigned int *a2, AudioFileMarkerList *a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  const __CFAllocator *v22;
  AudioFile_SMPTE_Time *i;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  unsigned int v27;
  unsigned int v28;
  CFStringRef v29;
  unsigned int v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  unsigned int v33;
  unsigned __int8 pStr[256];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  *a2 = 0;
  v5 = *((_QWORD *)this + 18);
  v6 = *((_QWORD *)this + 19);
  v7 = v6 - v5;
  if (v6 == v5)
    return 0;
  v12 = 0;
  v13 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
  v14 = 1;
  while (*(_DWORD *)(v5 + 24 * v12) != 1296126539)
  {
    v12 = v14;
    if (v13 <= v14++)
      return 0;
  }
  v33 = 2;
  v32 = 0;
  v17 = *(_QWORD *)(v5 + 24 * v12 + 16) + 8;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v17, 2, &v32, &v33);
  if (!(_DWORD)result)
  {
    v18 = v33;
    v19 = bswap32(v32);
    v32 = HIWORD(v19);
    if ((int)(v4 / 0x28) >= v19 >> 16)
      v20 = (v19 >> 16);
    else
      v20 = v4 / 0x28;
    a3->mSMPTE_TimeType = 0;
    a3->mNumberMarkers = v20;
    if ((_DWORD)v20)
    {
      v21 = v17 + v18;
      v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      for (i = &a3->mMarkers[0].mSMPTETime; ; i += 5)
      {
        v31 = 0;
        v30 = 0;
        v33 = 2;
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v21, 2, &v31, &v33);
        if ((_DWORD)result)
          break;
        v24 = v21 + v33;
        v33 = 4;
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v24, 4, &v30, &v33);
        if ((_DWORD)result)
          break;
        v25 = v24 + v33;
        v33 = 1;
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned __int8 *, unsigned int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v25, 1, pStr, &v33);
        if ((_DWORD)result)
          break;
        v33 = pStr[0];
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v25 + 1);
        if ((_DWORD)result)
          break;
        v26 = pStr[0];
        v27 = bswap32(v31) >> 16;
        v31 = v27;
        v28 = bswap32(v30);
        v30 = v28;
        if (a4)
        {
          v29 = CFStringCreateWithPascalString(v22, pStr, 0x8000100u);
          LOWORD(v27) = v31;
          v28 = v30;
        }
        else
        {
          v29 = 0;
        }
        v21 = ((v26 + 2) & 0x1FE) + v25;
        *(_QWORD *)&i[-2].mSubFrameSampleOffset = v29;
        i[-1].mSubFrameSampleOffset = (__int16)v27;
        *(double *)&i[-3].mSubFrameSampleOffset = (double)v28;
        *i = 0;
        i[1] = 0;
        *a2 += 40;
        if (!--v20)
          return 0;
      }
      return result;
    }
    return 0;
  }
  return result;
}

void *CADeprecated::CAAutoFree<AIFF_TextChunk>::allocBytes(void **a1, size_t size)
{
  void *v4;
  void *result;
  std::bad_alloc *exception;
  std::bad_alloc *v7;

  v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  result = malloc_type_malloc(size, 0x7C51E058uLL);
  if (size && !result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v7 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

uint64_t GetFormatFromStreamDescription(const AudioStreamBasicDescription *a1)
{
  uint64_t result;
  UInt32 mBitsPerChannel;
  AudioFormatFlags mFormatFlags;

  result = a1->mFormatID;
  if ((_DWORD)result == 1819304813)
  {
    mBitsPerChannel = a1->mBitsPerChannel;
    mFormatFlags = a1->mFormatFlags;
    if (mBitsPerChannel == 8)
    {
      if ((mFormatFlags & 4) != 0)
        return 1313820229;
      else
        return 1918990112;
    }
    else if ((~mFormatFlags & 0xE) != 0)
    {
      if ((~mFormatFlags & 0xB) == 0)
      {
        if (mBitsPerChannel == 32)
        {
          return 1718367026;
        }
        else if (mBitsPerChannel == 64)
        {
          return 1718367796;
        }
      }
    }
    else
    {
      switch(mBitsPerChannel)
      {
        case 0x10u:
          return 1953984371;
        case 0x20u:
          return 1768829746;
        case 0x18u:
          return 1768829492;
      }
    }
  }
  return result;
}

void GetCompressionName(__int128 *a1, AudioStreamBasicDescription *a2, unsigned __int8 *a3)
{
  __int128 v4;
  unsigned __int8 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  UInt32 ioPropertyDataSize;
  CFStringRef outPropertyData;
  char buffer[256];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  outPropertyData = 0;
  ioPropertyDataSize = 8;
  v4 = a1[1];
  v6 = *a1;
  v7 = v4;
  v8 = *((_QWORD *)a1 + 4);
  *(_QWORD *)&v6 = 0;
  HIDWORD(v7) = 0;
  *(_OWORD *)&a2->mSampleRate = 0u;
  *(_OWORD *)&a2->mBytesPerPacket = 0u;
  *(_OWORD *)&a2->mBitsPerChannel = 0u;
  *(_OWORD *)&a2[1].mFormatID = 0u;
  *(_OWORD *)&a2[1].mBytesPerFrame = 0u;
  *(_OWORD *)&a2[2].mSampleRate = 0u;
  *(_OWORD *)&a2[2].mBytesPerPacket = 0u;
  *(_OWORD *)&a2[2].mBitsPerChannel = 0u;
  *(_OWORD *)&a2[3].mFormatID = 0u;
  *(_OWORD *)&a2[3].mBytesPerFrame = 0u;
  *(_OWORD *)&a2[4].mSampleRate = 0u;
  *(_OWORD *)&a2[4].mBytesPerPacket = 0u;
  *(_OWORD *)&a2[4].mBitsPerChannel = 0u;
  *(_OWORD *)&a2[5].mFormatID = 0u;
  *(_OWORD *)&a2[5].mBytesPerFrame = 0u;
  *(_OWORD *)&a2[6].mSampleRate = 0u;
  if (AudioFormatGetProperty(0x666E616Du, 0x28u, &v6, &ioPropertyDataSize, &outPropertyData)
    || !CFStringGetCString(outPropertyData, buffer, 256, 0x8000100u))
  {
    LOBYTE(a2->mSampleRate) = 7;
    *(_DWORD *)((char *)&a2->mSampleRate + 1) = 1852534389;
    HIDWORD(a2->mSampleRate) = 1853321070;
  }
  else
  {
    v5 = strlen(buffer);
    LOBYTE(a2->mSampleRate) = v5;
    memcpy((char *)&a2->mSampleRate + 1, buffer, v5);
  }
  if (outPropertyData)
    CFRelease(outPropertyData);
}

uint64_t AIFFAudioFile::InitializeAIFFChunks(AIFFAudioFile *this)
{
  int v2;
  __int128 v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  signed int v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  char **v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  int8x8_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  AudioStreamBasicDescription v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  __int128 v68;
  int8x8_t v69;
  unsigned __int16 mChannelsPerFrame;
  unsigned int v71;
  unsigned __int16 mBitsPerChannel;
  char v73[10];
  unsigned int FormatFromStreamDescription;
  _BYTE v75[12];
  _DWORD v76[3];
  uint8_t buf[4];
  const char *v78;
  __int16 v79;
  int v80;
  _BYTE v81[256];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 21);
  v3 = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&v64.mSampleRate = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&v64.mBytesPerPacket = v3;
  *(_QWORD *)&v64.mBitsPerChannel = *((_QWORD *)this + 7);
  if (v2 == 1095321155)
  {
    *(_DWORD *)&v75[8] = -1568648896;
    *(_QWORD *)v75 = 0x446564552;
  }
  memset(v81, 0, sizeof(v81));
  v69.i32[0] = 1129270605;
  mChannelsPerFrame = v64.mChannelsPerFrame;
  v65 = 0;
  mBitsPerChannel = v64.mBitsPerChannel;
  ConvertToIeeeExtended(v73, v64.mSampleRate);
  v71 = 0;
  if (v2 == 1095321155)
  {
    FormatFromStreamDescription = GetFormatFromStreamDescription(&v64);
    GetCompressionName((__int128 *)&v64, (AudioStreamBasicDescription *)v81, v4);
    v5 = (v81[0] + 24) & 0x1FE;
  }
  else
  {
    v5 = 18;
  }
  v69.i32[1] = v5;
  v66 = 1179405394;
  v6 = *((unsigned __int8 *)this + 138);
  if (*((_BYTE *)this + 138))
  {
    v7 = *((_DWORD *)this + 46) + v5;
    v8 = 4068 - v7;
    v67 = 4068 - v7;
    if (v2 == 1095321155)
    {
      v8 = 4056 - v7;
      v67 = 4056 - v7;
    }
  }
  else
  {
    v8 = 0;
    v67 = 0;
  }
  v68 = xmmword_18F117080;
  if (v6)
    v9 = v8 + 8;
  else
    v9 = 0;
  v10 = v5 + v9 + 28;
  if (v2 == 1095321155)
  {
    v10 += *(_DWORD *)&v75[4] + 8;
    v11 = 1128679745;
  }
  else
  {
    v11 = 1179011393;
  }
  *(_QWORD *)&v62 = 0x8464F524DLL;
  *((_QWORD *)&v62 + 1) = v10 + 8;
  v63 = 0;
  v76[0] = 1297239878;
  v76[1] = bswap32(v10);
  v76[2] = v11;
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _DWORD *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                             + 56))(*((_QWORD *)this + 13), 0, 0, 12, v76, &v65);
  if ((_DWORD)v12)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v78 = "AIFFAudioFile.cpp";
      v79 = 1024;
      v80 = 910;
      v13 = MEMORY[0x1E0C81028];
LABEL_62:
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d  FSWrite Failed", buf, 0x12u);
      return v12;
    }
    return v12;
  }
  v14 = (char **)((char *)this + 144);
  v16 = *((_QWORD *)this + 19);
  v15 = *((_QWORD *)this + 20);
  if (v16 >= v15)
  {
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)*v14) >> 3);
    v19 = v18 + 1;
    if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)*v14) >> 3);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0x555555555555555)
      v21 = 0xAAAAAAAAAAAAAAALL;
    else
      v21 = v19;
    if (v21)
      v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v21);
    else
      v22 = 0;
    v23 = v21 + 24 * v18;
    v24 = v21 + 24 * v22;
    *(_OWORD *)v23 = v62;
    *(_QWORD *)(v23 + 16) = v63;
    v17 = v23 + 24;
    v26 = (char *)*((_QWORD *)this + 18);
    v25 = (char *)*((_QWORD *)this + 19);
    if (v25 != v26)
    {
      do
      {
        v27 = *(_OWORD *)(v25 - 24);
        *(_QWORD *)(v23 - 8) = *((_QWORD *)v25 - 1);
        *(_OWORD *)(v23 - 24) = v27;
        v23 -= 24;
        v25 -= 24;
      }
      while (v25 != v26);
      v25 = *v14;
    }
    *((_QWORD *)this + 18) = v23;
    *((_QWORD *)this + 19) = v17;
    *((_QWORD *)this + 20) = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *(_OWORD *)v16 = v62;
    *(_QWORD *)(v16 + 16) = v63;
    v17 = v16 + 24;
  }
  *((_QWORD *)this + 19) = v17;
  v28 = v65;
  if (v2 != 1095321155)
  {
LABEL_56:
    *(_QWORD *)&v62 = v69.u32[0] | 0x800000000;
    *((_QWORD *)&v62 + 1) = v69.i32[1] + 8;
    v63 = v28;
    if (v2 == 1095321155)
    {
      v42 = vrev32_s8(v69);
      v43 = bswap32(mChannelsPerFrame) >> 16;
      v44 = bswap32(v71);
      v45 = bswap32(mBitsPerChannel) >> 16;
      FormatFromStreamDescription = bswap32(FormatFromStreamDescription);
      v46 = 30;
    }
    else
    {
      v46 = (v69.i32[1] + 8);
      v42 = vrev32_s8(v69);
      v43 = bswap32(mChannelsPerFrame) >> 16;
      v44 = bswap32(v71);
      v45 = bswap32(mBitsPerChannel) >> 16;
    }
    v69 = v42;
    mChannelsPerFrame = v43;
    v71 = v44;
    mBitsPerChannel = v45;
    v12 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, int8x8_t *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                  + 56))(*((_QWORD *)this + 13), 0, v28, v46, &v69, &v65);
    if ((_DWORD)v12)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v78 = "AIFFAudioFile.cpp";
        v79 = 1024;
        v80 = 946;
        v13 = MEMORY[0x1E0C81028];
        goto LABEL_62;
      }
    }
    else
    {
      v49 = *((_QWORD *)this + 19);
      v48 = *((_QWORD *)this + 20);
      if (v49 >= v48)
      {
        v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (_QWORD)*v14) >> 3);
        v52 = v51 + 1;
        if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (_QWORD)*v14) >> 3);
        if (2 * v53 > v52)
          v52 = 2 * v53;
        if (v53 >= 0x555555555555555)
          v54 = 0xAAAAAAAAAAAAAAALL;
        else
          v54 = v52;
        if (v54)
          v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v54);
        else
          v55 = 0;
        v56 = v54 + 24 * v51;
        v57 = v54 + 24 * v55;
        *(_OWORD *)v56 = v62;
        *(_QWORD *)(v56 + 16) = v63;
        v50 = v56 + 24;
        v59 = (char *)*((_QWORD *)this + 18);
        v58 = (char *)*((_QWORD *)this + 19);
        if (v58 != v59)
        {
          do
          {
            v60 = *(_OWORD *)(v58 - 24);
            *(_QWORD *)(v56 - 8) = *((_QWORD *)v58 - 1);
            *(_OWORD *)(v56 - 24) = v60;
            v56 -= 24;
            v58 -= 24;
          }
          while (v58 != v59);
          v58 = *v14;
        }
        *((_QWORD *)this + 18) = v56;
        *((_QWORD *)this + 19) = v50;
        *((_QWORD *)this + 20) = v57;
        if (v58)
          operator delete(v58);
      }
      else
      {
        *(_OWORD *)v49 = v62;
        *(_QWORD *)(v49 + 16) = v63;
        v50 = v49 + 24;
      }
      *((_QWORD *)this + 19) = v50;
      v61 = v28 + v65;
      if (v2 == 1095321155)
      {
        v12 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _BYTE *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                  + 56))(*((_QWORD *)this + 13), 0, v61, (v81[0] + 2) & 0x1FE, v81, &v65);
        if ((_DWORD)v12)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return v12;
          *(_DWORD *)buf = 136315394;
          v78 = "AIFFAudioFile.cpp";
          v79 = 1024;
          v80 = 956;
          v13 = MEMORY[0x1E0C81028];
          goto LABEL_62;
        }
        v61 += v65;
      }
      if (*((_BYTE *)this + 138))
      {
        *(_QWORD *)&v62 = 0x8464C4C52;
        *((_QWORD *)&v62 + 1) = (int)v8 + 8;
        v63 = v61;
        v66 = 1380731974;
        v67 = bswap32(v8);
        v12 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, int *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                                 + 56))(*((_QWORD *)this + 13), 0, v61, 8, &v66, &v65);
        if ((_DWORD)v12)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return v12;
          *(_DWORD *)buf = 136315394;
          v78 = "AIFFAudioFile.cpp";
          v79 = 1024;
          v80 = 969;
          v13 = MEMORY[0x1E0C81028];
          goto LABEL_62;
        }
        std::vector<ChunkInfo64>::push_back[abi:ne180100]((void **)this + 18, &v62);
        v61 += v8 + (unint64_t)v65;
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), v61);
      }
      *(_QWORD *)&v62 = 0x853534E44;
      *((_QWORD *)&v62 + 1) = 16;
      v63 = v61;
      v68 = xmmword_18F117090;
      v12 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, __int128 *, unsigned int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v61, 16, &v68, &v65);
      if (!(_DWORD)v12)
      {
        std::vector<ChunkInfo64>::push_back[abi:ne180100]((void **)this + 18, &v62);
        *((_QWORD *)this + 9) = v61 + v65;
        *((_DWORD *)this + 20) = 1;
        (*(void (**)(AIFFAudioFile *, _QWORD))(*(_QWORD *)this + 232))(this, 0);
        (*(void (**)(AIFFAudioFile *, _QWORD))(*(_QWORD *)this + 248))(this, 0);
        (*(void (**)(AIFFAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, v64.mBytesPerPacket);
        return 0;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v78 = "AIFFAudioFile.cpp";
        v79 = 1024;
        v80 = 983;
        v13 = MEMORY[0x1E0C81028];
        goto LABEL_62;
      }
    }
    return v12;
  }
  *(_QWORD *)&v62 = *(unsigned int *)v75 | 0x800000000;
  *(_DWORD *)v75 = bswap32(*(unsigned int *)v75);
  *((_QWORD *)&v62 + 1) = *(int *)&v75[4] + 8;
  v63 = v65;
  *(int8x8_t *)&v75[4] = vrev32_s8(*(int8x8_t *)&v75[4]);
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _BYTE *, unsigned int *))(**((_QWORD **)this + 13)
                                                                                            + 56))(*((_QWORD *)this + 13), 0, v65, 12, v75, &v65);
  if (!(_DWORD)v12)
  {
    v30 = *((_QWORD *)this + 19);
    v29 = *((_QWORD *)this + 20);
    if (v30 >= v29)
    {
      v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)*v14) >> 3);
      v33 = v32 + 1;
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)*v14) >> 3);
      if (2 * v34 > v33)
        v33 = 2 * v34;
      if (v34 >= 0x555555555555555)
        v35 = 0xAAAAAAAAAAAAAAALL;
      else
        v35 = v33;
      if (v35)
        v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v35);
      else
        v36 = 0;
      v37 = v35 + 24 * v32;
      v38 = v35 + 24 * v36;
      *(_OWORD *)v37 = v62;
      *(_QWORD *)(v37 + 16) = v63;
      v31 = v37 + 24;
      v40 = (char *)*((_QWORD *)this + 18);
      v39 = (char *)*((_QWORD *)this + 19);
      if (v39 != v40)
      {
        do
        {
          v41 = *(_OWORD *)(v39 - 24);
          *(_QWORD *)(v37 - 8) = *((_QWORD *)v39 - 1);
          *(_OWORD *)(v37 - 24) = v41;
          v37 -= 24;
          v39 -= 24;
        }
        while (v39 != v40);
        v39 = *v14;
      }
      *((_QWORD *)this + 18) = v37;
      *((_QWORD *)this + 19) = v31;
      *((_QWORD *)this + 20) = v38;
      if (v39)
        operator delete(v39);
    }
    else
    {
      *(_OWORD *)v30 = v62;
      *(_QWORD *)(v30 + 16) = v63;
      v31 = v30 + 24;
    }
    *((_QWORD *)this + 19) = v31;
    v28 += v65;
    goto LABEL_56;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v78 = "AIFFAudioFile.cpp";
    v79 = 1024;
    v80 = 923;
    v13 = MEMORY[0x1E0C81028];
    goto LABEL_62;
  }
  return v12;
}

void std::vector<ChunkInfo64>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  char *v16;
  char *v17;
  __int128 v18;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v5 >= v4)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v11);
    else
      v12 = 0;
    v13 = v11 + 24 * v8;
    v14 = v11 + 24 * v12;
    v15 = *a2;
    *(_QWORD *)(v13 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v13 = v15;
    v7 = (void *)(v13 + 24);
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *(_OWORD *)(v16 - 24);
        *(_QWORD *)(v13 - 8) = *((_QWORD *)v16 - 1);
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        v16 -= 24;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = (void *)v13;
    a1[1] = v7;
    a1[2] = (void *)v14;
    if (v16)
      operator delete(v16);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
    v7 = v5 + 24;
  }
  a1[1] = v7;
}

uint64_t AIFFID3CallbackProc(_QWORD *a1, int a2, unsigned int a3, unsigned int a4, void **a5, unsigned int *a6)
{
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  int64_t v15;
  unsigned int v16;
  size_t v17;
  void *v18;
  void *v19;
  std::bad_alloc *exception;
  std::bad_alloc *v21;
  unsigned int v22;
  int64_t v23;

  if (a2 == 1)
  {
    v13 = (void *)a1[60];
    if (v13)
      free(v13);
    result = 0;
    a1[60] = 0;
  }
  else if (a2)
  {
    return 0;
  }
  else
  {
    v23 = 0;
    (*(void (**)(_QWORD, int64_t *))(*(_QWORD *)a1[13] + 24))(a1[13], &v23);
    v11 = a1[59];
    if ((uint64_t)(a4 + (unint64_t)a3 + v11) <= v23)
    {
      if (a4 <= 0x400)
        v14 = 1024;
      else
        v14 = a4;
      v15 = v11 + v14;
      v16 = v23 - v11;
      if (v15 <= v23)
        v17 = v14;
      else
        v17 = v16;
      v18 = malloc_type_malloc(v17, 0x2C8E6D5CuLL);
      v19 = v18;
      if ((_DWORD)v17 && !v18)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v21 = std::bad_alloc::bad_alloc(exception);
      }
      bzero(v18, v17);
      a1[60] = v19;
      v22 = 0;
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, size_t, void *, unsigned int *))(*(_QWORD *)a1[13]
                                                                                                 + 48))(a1[13], 0, a1[59] + a3, v17, v19, &v22);
      if (!(_DWORD)result)
      {
        *a5 = (void *)a1[60];
        *a6 = v22;
      }
    }
    else
    {
      return 4294967272;
    }
  }
  return result;
}

void AIFFAudioFormat::~AIFFAudioFormat(AIFFAudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

const __CFArray *AIFFAudioFormat::GetExtensions(AIFFAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("aiff");
  values[1] = CFSTR("aif");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *AIFFAudioFormat::GetUTIs(AIFFAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("public.aiff-audio");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *AIFFAudioFormat::GetMIMETypes(AIFFAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("audio/aiff");
  values[1] = CFSTR("audio/x-aiff");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void AIFFAudioFormat::GetFileTypeName(AIFFAudioFormat *this, const __CFString **a2)
{
  __CFBundle *v3;
  const __CFString *v4;
  char v5;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_5:
    v4 = (const __CFString *)CFRetain(CFSTR("AIFF"));
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle)
    goto LABEL_5;
LABEL_3:
  v4 = CFBundleCopyLocalizedString(v3, CFSTR("AIFF"), CFSTR("AIFF"), CFSTR("FileTypeNames"));
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_18EFB079C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t AIFFAudioFormat::GetAvailableFormatIDs(AIFFAudioFormat *this, unsigned int *a2, void *__dst)
{
  size_t v3;
  int __src;

  __src = 1819304813;
  if (*a2 >= 4)
    v3 = 4;
  else
    v3 = *a2 & 0xFFFFFFFC;
  *a2 = v3;
  if (__dst)
    memcpy(__dst, &__src, v3);
  return 0;
}

uint64_t AIFFAudioFormat::GetAvailableStreamDescriptions(AIFFAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  _OWORD v9[10];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a2 == 1819304813)
  {
    v4 = (_DWORD *)&v9[1] + 1;
    memset(v9, 0, sizeof(v9));
    v5 = -32;
    do
    {
      *(_QWORD *)(v4 - 3) = 0xE6C70636DLL;
      v4[3] = v5 + 40;
      *v4 = 1;
      v4 += 10;
      v5 += 8;
    }
    while (v5);
    v6 = *a3 / 0x28;
    if (v6 >= 4)
      v6 = 4;
    v7 = 40 * v6;
    *a3 = v7;
    if (__dst)
      memcpy(__dst, v9, v7);
    return 0;
  }
  else
  {
    *a3 = 0;
    return 1718449215;
  }
}

uint64_t AIFFAudioFormat::GetHFSCodes(AIFFAudioFormat *this, unsigned int *a2, void *__dst)
{
  size_t v3;
  int __src;

  __src = 1095321158;
  if (*a2 >= 4)
    v3 = 4;
  else
    v3 = *a2 & 0xFFFFFFFC;
  *a2 = v3;
  if (__dst)
    memcpy(__dst, &__src, v3);
  return 0;
}

double AIFFAudioFormat::NewStream(AIFFAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = -1;
  *(_QWORD *)(v1 + 96) = -1;
  *(_QWORD *)(v1 + 104) = -1;
  *(_QWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 208) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 224) = 0;
  *(_QWORD *)&result = 112;
  *(_OWORD *)(v1 + 240) = xmmword_18F116F80;
  *(_DWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 300) = 0;
  *(_QWORD *)(v1 + 284) = 0;
  *(_QWORD *)(v1 + 292) = 0;
  *(_DWORD *)(v1 + 328) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)v1 = &off_1E2904D28;
  *(_BYTE *)(v1 + 400) = 0;
  return result;
}

void AIFCAudioFormat::~AIFCAudioFormat(AIFCAudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

BOOL AIFCAudioFormat::FileDataIsThisFormat(AIFCAudioFormat *this, unsigned int a2, _DWORD *a3)
{
  if (a2 < 0xC)
    return 0;
  return *a3 == 1297239878 && a3[2] == 1128679745;
}

const __CFArray *AIFCAudioFormat::GetExtensions(AIFCAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[4];

  v4[3] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("aifc");
  v4[1] = CFSTR("aiff");
  v4[2] = CFSTR("aif");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 3, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *AIFCAudioFormat::GetUTIs(AIFCAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("public.aifc-audio");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *AIFCAudioFormat::GetMIMETypes(AIFCAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("audio/aiff");
  values[1] = CFSTR("audio/x-aiff");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void AIFCAudioFormat::GetFileTypeName(AIFCAudioFormat *this, const __CFString **a2)
{
  __CFBundle *v3;
  const __CFString *v4;
  char v5;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_5:
    v4 = (const __CFString *)CFRetain(CFSTR("AIFC"));
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle)
    goto LABEL_5;
LABEL_3:
  v4 = CFBundleCopyLocalizedString(v3, CFSTR("AIFC"), CFSTR("AIFC"), CFSTR("FileTypeNames"));
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_18EFB0C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t AIFCAudioFormat::GetAvailableFormatIDs(AIFCAudioFormat *this, unsigned int *a2, void *__dst)
{
  unsigned int v3;
  size_t v4;
  _BYTE v6[40];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  qmemcpy(v6, "mcplwaluwala3CAM6CAM4amiCMDQ2MDQplcQmsga", sizeof(v6));
  v3 = *a2 >> 2;
  if (v3 >= 0xA)
    v3 = 10;
  v4 = 4 * v3;
  *a2 = v4;
  if (__dst)
    memcpy(__dst, v6, v4);
  return 0;
}

uint64_t AIFCAudioFormat::GetAvailableStreamDescriptions(AIFCAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  int v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  size_t v11;
  UInt32 ioPropertyDataSize;
  __int128 outPropertyData;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a2 <= 1634169708)
  {
    if (a2 <= 1363430705)
    {
      if (a2 != 1296122675)
      {
        v6 = 1296122678;
LABEL_16:
        if (a2 != v6)
          goto LABEL_26;
      }
    }
    else if (a2 != 1363430706 && a2 != 1363430723)
    {
      v6 = 1365470320;
      goto LABEL_16;
    }
LABEL_21:
    *(_QWORD *)&v15 = 0;
    outPropertyData = 0u;
    v14 = 0u;
    DWORD2(outPropertyData) = a2;
LABEL_22:
    v9 = 1;
    if (__dst)
      goto LABEL_23;
LABEL_13:
    result = 0;
    *a3 = 40 * v9;
    return result;
  }
  if (a2 <= 1768775987)
  {
    if (a2 == 1634169709)
      goto LABEL_21;
    if (a2 != 1634492791)
    {
LABEL_26:
      result = 1718449215;
      *a3 = 0;
      return result;
    }
LABEL_20:
    *(_QWORD *)&v15 = 0;
    outPropertyData = 0u;
    v14 = 0u;
    DWORD2(outPropertyData) = a2;
    ioPropertyDataSize = 40;
    AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, &outPropertyData);
    goto LABEL_22;
  }
  if (a2 == 1768775988 || a2 == 1970037111)
    goto LABEL_20;
  if (a2 != 1819304813)
    goto LABEL_26;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  outPropertyData = 0u;
  v14 = 0u;
  v7 = (_DWORD *)&v14 + 1;
  v8 = -32;
  v30 = 0;
  do
  {
    *(_QWORD *)(v7 - 3) = 0xE6C70636DLL;
    v7[3] = v8 + 40;
    *v7 = 1;
    v7 += 10;
    v8 += 8;
  }
  while (v8);
  *((_QWORD *)&v23 + 1) = 0xB6C70636DLL;
  LODWORD(v25) = 32;
  DWORD1(v24) = 1;
  *(_QWORD *)&v26 = 0xB6C70636DLL;
  DWORD2(v27) = 64;
  HIDWORD(v26) = 1;
  *((_QWORD *)&v28 + 1) = 0xA6C70636DLL;
  LODWORD(v30) = 8;
  DWORD1(v29) = 1;
  v9 = 7;
  if (!__dst)
    goto LABEL_13;
LABEL_23:
  if (*a3 / 0x28 < v9)
    v9 = *a3 / 0x28;
  v11 = 40 * v9;
  *a3 = v11;
  memcpy(__dst, &outPropertyData, v11);
  return 0;
}

uint64_t AIFCAudioFormat::GetHFSCodes(AIFCAudioFormat *this, unsigned int *a2, void *__dst)
{
  size_t v3;
  int __src;

  __src = 1095321155;
  if (*a2 >= 4)
    v3 = 4;
  else
    v3 = *a2 & 0xFFFFFFFC;
  *a2 = v3;
  if (__dst)
    memcpy(__dst, &__src, v3);
  return 0;
}

double AIFCAudioFormat::New(AIFCAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 80) = 0x4149464300000001;
  *(_QWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 96) = -1;
  *(_WORD *)(v1 + 100) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0x100000000;
  *(_DWORD *)(v1 + 136) = 65792;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  result = 2.51689377e93;
  *(_OWORD *)(v1 + 168) = xmmword_18F1170A0;
  *(_DWORD *)(v1 + 184) = 16;
  *(_WORD *)(v1 + 188) = 258;
  *(_QWORD *)v1 = &off_1E2902A50;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 448) = 0;
  *(_QWORD *)(v1 + 472) = 0;
  *(_QWORD *)(v1 + 480) = 0;
  *(_QWORD *)(v1 + 464) = 0;
  return result;
}

double AIFCAudioFormat::NewStream(AIFCAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = -1;
  *(_QWORD *)(v1 + 96) = -1;
  *(_QWORD *)(v1 + 104) = -1;
  *(_QWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 208) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 224) = 0;
  *(_QWORD *)&result = 112;
  *(_OWORD *)(v1 + 240) = xmmword_18F116F80;
  *(_DWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 300) = 0;
  *(_QWORD *)(v1 + 284) = 0;
  *(_QWORD *)(v1 + 292) = 0;
  *(_DWORD *)(v1 + 328) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)v1 = &off_1E2904D28;
  *(_BYTE *)(v1 + 400) = 0;
  return result;
}

__n128 std::construct_at[abi:ne180100]<CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient*>(__n128 *a1, uint64_t a2)
{
  unint64_t v2;
  __n128 v3;
  unint64_t v4;
  __n128 v5;
  unint64_t v6;
  __n128 v7;
  __n128 result;

  v2 = *(_QWORD *)a2;
  a1->n128_u32[2] = *(_DWORD *)(a2 + 8);
  a1->n128_u64[0] = v2;
  a1[1].n128_u8[0] = 0;
  a1[2].n128_u8[8] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    v3 = *(__n128 *)(a2 + 16);
    a1[2].n128_u64[0] = *(_QWORD *)(a2 + 32);
    a1[1] = v3;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    a1[2].n128_u8[8] = 1;
  }
  v4 = *(_QWORD *)(a2 + 48);
  a1[3].n128_u8[8] = 0;
  a1[3].n128_u64[0] = v4;
  a1[5].n128_u8[0] = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v5 = *(__n128 *)(a2 + 56);
    a1[4].n128_u64[1] = *(_QWORD *)(a2 + 72);
    *(__n128 *)((char *)a1 + 56) = v5;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    a1[5].n128_u8[0] = 1;
  }
  v6 = *(_QWORD *)(a2 + 88);
  a1[6].n128_u8[0] = 0;
  a1[5].n128_u64[1] = v6;
  a1[7].n128_u8[8] = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v7 = *(__n128 *)(a2 + 96);
    a1[7].n128_u64[0] = *(_QWORD *)(a2 + 112);
    a1[6] = v7;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    a1[7].n128_u8[8] = 1;
  }
  result = *(__n128 *)(a2 + 128);
  a1[8] = result;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMMatrixCoefficient>>(unint64_t a1)
{
  if (a1 >= 0x1C71C71C71C71C8)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(144 * a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMZone>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a1);
}

void AUv3RenderAdapter::~AUv3RenderAdapter(AUv3RenderAdapter *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;

  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

uint64_t AUv3RenderAdapter::SetProperty(AUv3RenderAdapter *this, int a2, int a3, unsigned int a4, _QWORD *a5, unsigned int a6)
{
  _DWORD *v9;
  _OWORD *v10;
  _DWORD *v12;

  if (a3 != 1)
    return 4294956430;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3) <= a4)
    return 4294956419;
  if (a2 == 23)
  {
    if (a6 >= 0x10)
    {
      os_unfair_recursive_lock_lock_with_options();
      v12 = (_DWORD *)(*((_QWORD *)this + 1) + 40 * a4);
      *v12 = 2 * (*a5 != 0);
      v10 = v12 + 2;
      goto LABEL_13;
    }
    return 4294956445;
  }
  if (a2 != 1)
    return 4294956417;
  if (a6 < 0x10)
    return 4294956445;
  os_unfair_recursive_lock_lock_with_options();
  v9 = (_DWORD *)(*((_QWORD *)this + 1) + 40 * a4);
  *v9 = *a5 != 0;
  v10 = v9 + 6;
LABEL_13:
  *v10 = *(_OWORD *)a5;
  os_unfair_recursive_lock_unlock();
  return 0;
}

void AUv3RenderAdapter::initialize(AUv3RenderAdapter *this, AUAudioUnit *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  AUAudioUnit *v6;

  v6 = a2;
  -[AUAudioUnit renderBlock](v6, "renderBlock");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");
  v5 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v4;

}

void sub_18EFB1454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ___ZN17AUv3RenderAdapter6RenderERjRK14AudioTimeStampjjR15AudioBufferList_block_invoke(uint64_t a1, AudioUnitRenderActionFlags *a2, const AudioTimeStamp *a3, uint64_t inNumberFrames, unint64_t a5, AudioBufferList *a6)
{
  uint64_t v6;
  int v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) - v6) >> 3) <= a5)
    return 4294956419;
  v7 = *(_DWORD *)(v6 + 40 * a5);
  if (v7 == 1)
    return AudioUnitRender(*(AudioUnit *)(v6 + 40 * a5 + 24), a2, a3, *(_DWORD *)(v6 + 40 * a5 + 32), inNumberFrames, a6);
  if (v7 == 2)
    return (*(uint64_t (**)(_QWORD, AudioUnitRenderActionFlags *, const AudioTimeStamp *, unint64_t, uint64_t))(v6 + 40 * a5 + 8))(*(_QWORD *)(v6 + 40 * a5 + 16), a2, a3, a5, inNumberFrames);
  return 4294956420;
}

void AUHostingServiceClient::create(uint64_t *a1, AudioComponentDescription *a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  void *v10;
  unint64_t i;
  void *v12;
  __CFString *v13;
  id v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  __CFString *v21;
  id v22;
  id v23;
  Class isa;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  BOOL v33;
  uint64_t *v34;
  int AUHostingInstantiationPolicy;
  char *AUHostingProcessUUID;
  char *v37;
  os_unfair_lock_s *v38;
  os_unfair_lock_t *v39;
  uint64_t v40;
  uint64_t v41;
  os_unfair_lock_s *v42;
  __CFString *v43;
  id v44;
  id v45;
  char *v46;
  uint64_t v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  __CFString *v53;
  unint64_t v54;
  os_unfair_lock_s *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  void *v59;
  os_unfair_lock_t *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  os_unfair_lock_t *v76;
  uint64_t v77;
  _QWORD v78[2];
  objc_class *v79;
  id v80;
  id v81;
  os_unfair_lock_s *v82;
  __CFString *v83;
  id v84;
  uint64_t *v85;
  id v86;
  id v87;
  os_unfair_lock_s *v88;
  AudioComponentDescription v89;
  NSUUID v90;
  std::__shared_weak_count *v91;
  os_unfair_lock_t lock;
  uint64_t v93;
  void (*v94)(uint64_t);
  void *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  _QWORD v100[3];
  os_unfair_lock_t *v101;
  os_unfair_lock_t v102[2];
  char v103;
  char v104;
  os_unfair_lock_t *v105;
  os_unfair_lock_t *v106;
  id v107;
  __int128 v108;
  __int128 v109;
  _OWORD v110[2];
  _BYTE v111[24];
  _BYTE *v112;
  uint64_t v113;

  v85 = a1;
  v113 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v86 = a5;
  v89 = *a2;
  v9 = v8;
  v10 = v9;
  if (!v9 || !objc_msgSend(v9, "count"))
  {
    v13 = CFSTR("com.apple.audio.AUHostingService.arm64e");
    goto LABEL_22;
  }
  objc_msgSend(v10, "count");
  for (i = 0; objc_msgSend(v10, "count") > i; ++i)
  {
    objc_msgSend(v10, "objectAtIndexedSubscript:", i);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "intValue");

  }
  if (getenv("CoreAudio_AUHostingService_mismatchMode"))
  {
    memset(v110, 0, sizeof(v110));
    v108 = 0u;
    v109 = 0u;
    v14 = v10;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v108, v102, 16);
    if (v15)
    {
      v88 = (os_unfair_lock_s *)v78;
      v16 = 0;
      v17 = 0;
      v18 = *(_QWORD *)v109;
      do
      {
        for (j = 0; j != v15; ++j)
        {
          if (*(_QWORD *)v109 != v18)
            objc_enumerationMutation(v14);
          v20 = *(void **)(*((_QWORD *)&v108 + 1) + 8 * j);
          if (objc_msgSend(v20, "intValue") == 16777228)
            v16 = 1;
          else
            v17 |= objc_msgSend(v20, "intValue") == 16777223;
        }
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v108, v102, 16);
      }
      while (v15);

      if ((v16 & v17 & 1) != 0)
      {
        v13 = CFSTR("com.apple.audio.AUHostingService.x86-64");
        goto LABEL_22;
      }
    }
    else
    {

    }
  }
  v13 = CFSTR("com.apple.audio.AUHostingService.arm64e");
LABEL_22:

  std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::__value_func[abi:ne180100]((uint64_t)v100, a4);
  v21 = v13;
  v22 = v86;
  v23 = *(id *)getAUHostingProcessUUID(&v89);
  getAUHostingServiceInstance(&v90, v23);
  isa = v90.super.isa;
  std::mutex::lock((std::mutex *)v90.super.isa);
  if (*((_BYTE *)isa + 64))
  {
    v25 = (os_unfair_lock_s *)v23;
    AUHostingServiceProcessManager::instance((AUHostingServiceProcessManager *)&lock);
    v26 = v93;
    v108 = 0uLL;
    v88 = v25;
    -[os_unfair_lock_s getUUIDBytes:](v25, "getUUIDBytes:", &v108);
    v104 = 16;
    *(_OWORD *)v102 = v108;
    v103 = 0;
    v27 = (uint64_t **)(v26 + 24);
    v28 = std::__tree<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>>>::find<std::string>(v26 + 24, v102);
    if ((uint64_t *)(v26 + 32) != v28)
    {
      v29 = v28;
      v30 = (uint64_t *)v28[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
      else
      {
        v32 = v28;
        do
        {
          v31 = (uint64_t *)v32[2];
          v33 = *v31 == (_QWORD)v32;
          v32 = v31;
        }
        while (!v33);
      }
      if (*v27 == v28)
        *v27 = v31;
      v34 = *(uint64_t **)(v26 + 32);
      --*(_QWORD *)(v26 + 40);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v34, v29);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>,0>((uint64_t)(v29 + 4));
      operator delete(v29);
    }
    if (lock)
      os_unfair_lock_unlock(lock);

    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v23 = (id)objc_claimAutoreleasedReturnValue();
    AUHostingInstantiationPolicy = getAUHostingInstantiationPolicy();
    if (AUHostingInstantiationPolicy == 1)
    {
      AUHostingServiceProcessManager::instance((AUHostingServiceProcessManager *)v102);
      v37 = AUHostingServiceProcessManager::uuidForDescriptor((uint64_t **)v102[1], (const AudioComponentDescription *)v89.componentManufacturer);
      objc_storeStrong((id *)v37, v23);
      if (v102[0])
        os_unfair_lock_unlock(v102[0]);
    }
    else if (AUHostingInstantiationPolicy == 2)
    {
      AUHostingProcessUUID = getAUHostingProcessUUID(&v89);
      objc_storeStrong((id *)AUHostingProcessUUID, v23);
    }

  }
  if (!v101)
  {
    v38 = v21;
    v102[0] = (os_unfair_lock_t)&off_1E2915B10;
    v102[1] = v38;
    v105 = v102;
    if (v101 == v100)
    {
      std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::__clone((uint64_t)v102, &v108);
      (*(void (**)(os_unfair_lock_t *))&(*v105)[8]._os_unfair_lock_opaque)(v105);
      v105 = 0;
      (*(void (**)(os_unfair_lock_t *, os_unfair_lock_t *))&(*v101)[6]._os_unfair_lock_opaque)(v101, v102);
      (*(void (**)(os_unfair_lock_t *))&(*v101)[8]._os_unfair_lock_opaque)(v101);
      v101 = 0;
      v105 = v102;
      (*(void (**)(__int128 *, _QWORD *))(v108 + 24))(&v108, v100);
      (*(void (**)(__int128 *))(v108 + 32))(&v108);
      v101 = (os_unfair_lock_t *)v100;
      v39 = v105;
    }
    else
    {
      std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::__clone((uint64_t)v102, v100);
      (*(void (**)(os_unfair_lock_t *))&(*v105)[8]._os_unfair_lock_opaque)(v105);
      v39 = v101;
      v105 = v101;
      v101 = (os_unfair_lock_t *)v100;
    }
    if (v39 == v102)
    {
      v40 = 4;
      v39 = v102;
    }
    else
    {
      if (!v39)
        goto LABEL_50;
      v40 = 5;
    }
    (*(void (**)(void))&(*v39)[2 * v40]._os_unfair_lock_opaque)();
  }
LABEL_50:
  v88 = (os_unfair_lock_s *)v23;
  v102[0] = v88;
  if (!v101)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(os_unfair_lock_t *, os_unfair_lock_t *))&(*v101)[12]._os_unfair_lock_opaque)(v101, v102);
  v87 = (id)objc_claimAutoreleasedReturnValue();

  if (!v87)
  {
    *v85 = 0;
    goto LABEL_89;
  }
  v41 = operator new();
  std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::__value_func[abi:ne180100]((uint64_t)v111, (uint64_t)v100);
  v42 = v88;
  v43 = v21;
  v44 = v87;
  v84 = v22;
  v82 = v42;
  *(_QWORD *)v41 = v82;
  v78[1] = v41 + 8;
  std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::__value_func[abi:ne180100](v41 + 8, (uint64_t)v111);
  v45 = v44;
  *(_QWORD *)(v41 + 40) = v45;
  v83 = v43;
  *(_QWORD *)(v41 + 48) = v83;
  v46 = (char *)operator new(0x78uLL);
  *((_QWORD *)v46 + 1) = 0;
  *((_QWORD *)v46 + 2) = 0;
  *(_QWORD *)v46 = &off_1E2917B40;
  v47 = MEMORY[0x193FFE25C](v46 + 24);
  *(_OWORD *)(v46 + 104) = 0u;
  *(_OWORD *)(v46 + 88) = 0u;
  *(_QWORD *)(v41 + 56) = v47;
  *(_QWORD *)(v41 + 64) = v46;
  v81 = v84;
  *(_QWORD *)(v41 + 72) = v81;
  if (!*(_QWORD *)(v41 + 40))
    __assert_rtn("AUHostingServiceClient", "AUHostingServiceClient.mm", 219, "_connection");
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE1715D0);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v79 = isa;
  v80 = v22;
  ConfigureAUAudioUnitXPCInterface(v48);
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "setRemoteObjectInterface:", v48);

  v50 = *(_QWORD *)(v41 + 56);
  v49 = *(std::__shared_weak_count **)(v41 + 64);
  v98 = v50;
  v99 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v52 = __ldxr(p_shared_owners);
    while (__stxr(v52 + 1, p_shared_owners));
    v53 = v21;
    *((_QWORD *)&v108 + 1) = 3321888768;
    *(_QWORD *)&v109 = ___ZN22AUHostingServiceClientC2EP6NSUUIDP8NSStringNSt3__18functionIFP15NSXPCConnectionS1_EEES7_S1__block_invoke;
    *((_QWORD *)&v109 + 1) = &__block_descriptor_48_ea8_32c105_ZTSKZN22AUHostingServiceClientC1EP6NSUUIDP8NSStringNSt3__18functionIFP15NSXPCConnectionS1_EEES7_S1_E3__0_e5_v8__0l;
    v78[0] = v110;
    *(_QWORD *)&v110[0] = v50;
    *((_QWORD *)&v110[0] + 1) = v49;
    do
      v54 = __ldxr(p_shared_owners);
    while (__stxr(v54 + 1, p_shared_owners));
  }
  else
  {
    v53 = v21;
    *((_QWORD *)&v108 + 1) = 3321888768;
    *(_QWORD *)&v109 = ___ZN22AUHostingServiceClientC2EP6NSUUIDP8NSStringNSt3__18functionIFP15NSXPCConnectionS1_EEES7_S1__block_invoke;
    *((_QWORD *)&v109 + 1) = &__block_descriptor_48_ea8_32c105_ZTSKZN22AUHostingServiceClientC1EP6NSUUIDP8NSStringNSt3__18functionIFP15NSXPCConnectionS1_EEES7_S1_E3__0_e5_v8__0l;
    v78[0] = v110;
    v110[0] = v50;
  }
  v55 = (os_unfair_lock_s *)MEMORY[0x1E0C809B0];
  *(_QWORD *)&v108 = MEMORY[0x1E0C809B0];
  objc_msgSend(v45, "setInterruptionHandler:", &v108, v78[0]);
  lock = v55;
  v93 = 3321888768;
  v94 = ___ZN22AUHostingServiceClientC2EP6NSUUIDP8NSStringNSt3__18functionIFP15NSXPCConnectionS1_EEES7_S1__block_invoke_104;
  v95 = &__block_descriptor_48_ea8_32c105_ZTSKZN22AUHostingServiceClientC1EP6NSUUIDP8NSStringNSt3__18functionIFP15NSXPCConnectionS1_EEES7_S1_E3__0_e5_v8__0l;
  v96 = v50;
  v97 = v49;
  if (v49)
  {
    v56 = (unint64_t *)&v49->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  isa = v79;
  v22 = v80;
  v21 = v53;
  objc_msgSend(v45, "setInvalidationHandler:", &lock);
  objc_msgSend(v45, "resume");
  caulk::xpc::sync_message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::sync_message(v102, *(void **)(v41 + 40));
  caulk::xpc::message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::sync_proxy((void **)v102);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  caulk::xpc::message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::reply((uint64_t)v102);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "establishConnection:", v59);

  v60 = v106;
  if (v106 == &v102[1])
  {
    v61 = 4;
    v60 = &v102[1];
  }
  else
  {
    if (!v106)
      goto LABEL_69;
    v61 = 5;
  }
  (*(void (**)(void))&(*v60)[2 * v61]._os_unfair_lock_opaque)();
LABEL_69:

  v62 = v97;
  if (v97)
  {
    v63 = (unint64_t *)&v97->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v110[0] + 1);
  if (*((_QWORD *)&v110[0] + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v110[0] + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v99;
  if (v99)
  {
    v69 = (unint64_t *)&v99->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }

  *v85 = v41;
  v71 = v112;
  if (v112 == v111)
  {
    v72 = 4;
    v71 = v111;
    goto LABEL_88;
  }
  if (v112)
  {
    v72 = 5;
LABEL_88:
    (*(void (**)(void))(*v71 + 8 * v72))();
  }
LABEL_89:

  std::mutex::unlock((std::mutex *)isa);
  v73 = v91;
  if (v91)
  {
    v74 = (unint64_t *)&v91->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }

  v76 = v101;
  if (v101 == v100)
  {
    v77 = 4;
    v76 = (os_unfair_lock_t *)v100;
    goto LABEL_98;
  }
  if (v101)
  {
    v77 = 5;
LABEL_98:
    (*(void (**)(void))&(*v76)[2 * v77]._os_unfair_lock_opaque)();
  }

}

void sub_18EFB1E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _Unwind_Exception *exception_object, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,os_unfair_lock_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char *a38,os_unfair_lock_t lock,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  std::mutex *v48;
  char *v49;
  uint64_t v50;

  if (lock)
    os_unfair_lock_unlock(lock);

  std::mutex::unlock(v48);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a25);

  v49 = a38;
  if (a38 == &a35)
  {
    v50 = 4;
    v49 = &a35;
  }
  else
  {
    if (!a38)
      goto LABEL_4;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_4:

  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

char *getAUHostingProcessUUID(const AudioComponentDescription *a1)
{
  unsigned __int8 v2;
  char *v3;
  int AUHostingInstantiationPolicy;
  uint64_t v5;
  void *v6;
  os_unfair_lock_t lock[2];

  if ((v2 & 1) == 0
  {
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    getAUHostingProcessUUID(AudioComponentDescription const&)::the_uuid = objc_claimAutoreleasedReturnValue();
  }
  v3 = (char *)&getAUHostingProcessUUID(AudioComponentDescription const&)::the_uuid;
  AUHostingInstantiationPolicy = getAUHostingInstantiationPolicy();
  if (AUHostingInstantiationPolicy)
  {
    if (AUHostingInstantiationPolicy == 1)
    {
      AUHostingServiceProcessManager::instance((AUHostingServiceProcessManager *)lock);
      v3 = AUHostingServiceProcessManager::uuidForDescriptor((uint64_t **)lock[1], (const AudioComponentDescription *)a1->componentManufacturer);
      if (lock[0])
        os_unfair_lock_unlock(lock[0]);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)getAUHostingProcessUUID(AudioComponentDescription const&)::the_uuid;
    getAUHostingProcessUUID(AudioComponentDescription const&)::the_uuid = v5;

  }
  return v3;
}

void sub_18EFB2210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock)
{
  _Unwind_Resume(a1);
}

void getAUHostingServiceInstance(NSUUID *a1, void *a2)
{
  id v3;
  os_unfair_lock_t v4;
  id v5;
  os_unfair_lock_s *v6;
  uint64_t **v7;
  uint64_t **v8;
  objc_class *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t **v14;
  _QWORD *v15;
  uint64_t **v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  objc_class *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  os_unfair_lock_t lock[2];
  __int128 v32;
  void *__p[2];
  uint64_t v34;
  _QWORD v35[2];
  char v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  AUHostingServiceProcessManager::instance((AUHostingServiceProcessManager *)lock);
  v4 = lock[1];
  v5 = v3;
  v37 = 0uLL;
  objc_msgSend(v5, "getUUIDBytes:", &v37);
  HIBYTE(v34) = 16;
  *(_OWORD *)__p = v37;
  LOBYTE(v34) = 0;
  v6 = v4 + 6;
  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>>>::find<std::string>((uint64_t)&v4[6], __p);
  v8 = v7;
  if (&v4[8] == (os_unfair_lock_s *)v7)
  {
    v12 = (char *)operator new(0x60uLL);
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
    *(_QWORD *)v12 = &off_1E2917408;
    *((_QWORD *)v12 + 11) = 0;
    *((_QWORD *)v12 + 3) = 850045863;
    *((_OWORD *)v12 + 2) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
    *(_OWORD *)(v12 + 73) = 0u;
    *(_QWORD *)&v32 = v12 + 24;
    *((_QWORD *)&v32 + 1) = v12;
    v13 = *v8;
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v13;
          v15 = v13 + 4;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v13 + 4) & 0x80) == 0)
            break;
          v13 = *v14;
          v16 = v14;
          if (!*v14)
            goto LABEL_14;
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v15, __p) & 0x80) == 0)
          break;
        v16 = v14 + 1;
        v13 = v14[1];
        if (!v13)
          goto LABEL_14;
      }
      v17 = (char *)v14;
    }
    else
    {
      v14 = v8;
      v16 = v8;
LABEL_14:
      v17 = (char *)operator new(0x48uLL);
      v35[0] = v17;
      v35[1] = v8;
      *((_OWORD *)v17 + 2) = *(_OWORD *)__p;
      v18 = v34;
      *((_QWORD *)v17 + 7) = 0;
      *((_QWORD *)v17 + 8) = 0;
      *((_QWORD *)v17 + 6) = v18;
      v36 = 1;
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = v14;
      *v16 = (uint64_t *)v17;
      v19 = **(_QWORD ***)&v6->_os_unfair_lock_opaque;
      v20 = (uint64_t *)v17;
      if (v19)
      {
        *(_QWORD *)&v6->_os_unfair_lock_opaque = v19;
        v20 = *v16;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v8, v20);
      ++*(_QWORD *)&v4[10]._os_unfair_lock_opaque;
      v35[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
    }
    v21 = v32;
    v32 = 0uLL;
    v22 = (std::__shared_weak_count *)*((_QWORD *)v17 + 8);
    *(_OWORD *)(v17 + 56) = v21;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    a1->super.isa = *(Class *)(v17 + 56);
    v25 = (objc_class *)*((_QWORD *)v17 + 8);
    a1[1].super.isa = v25;
    if (v25)
    {
      v26 = (unint64_t *)((char *)v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (SHIBYTE(v34) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v9 = (objc_class *)v7[8];
    a1->super.isa = (Class)v7[7];
    a1[1].super.isa = v9;
    if (v9)
    {
      v10 = (unint64_t *)((char *)v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }

  if (lock[0])
    os_unfair_lock_unlock(lock[0]);

}

void sub_18EFB24FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, uint64_t a10, char a11)
{
  void *v11;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  if (lock)
    os_unfair_lock_unlock(lock);

  _Unwind_Resume(a1);
}

void ___ZN22AUHostingServiceClientC2EP6NSUUIDP8NSStringNSt3__18functionIFP15NSXPCConnectionS1_EEES7_S1__block_invoke(uint64_t a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  os_log_t v6;
  void *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  {
    auhs_log_category(void)::category = 0;
    *(_QWORD *)algn_1EE168B28 = 0;
    v6 = os_log_create("com.apple.coreaudio", "AUHostingService");
    v7 = (void *)auhs_log_category(void)::category;
    auhs_log_category(void)::category = (uint64_t)v6;

  }
  v3 = objc_retainAutorelease((id)auhs_log_category(void)::category);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v8 = 136315394;
    v9 = "AUHostingServiceClient.mm";
    v10 = 1024;
    v11 = 238;
    _os_log_impl(&dword_18EE07000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d [AUHostingService Client] connection interrupted.", (uint8_t *)&v8, 0x12u);
  }
  v4 = *(_QWORD *)(a1 + 32);
  std::recursive_mutex::lock((std::recursive_mutex *)v4);
  v5 = *(_QWORD *)(v4 + 88);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  std::recursive_mutex::unlock((std::recursive_mutex *)v4);
}

void sub_18EFB2674(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN22AUHostingServiceClientC2EP6NSUUIDP8NSStringNSt3__18functionIFP15NSXPCConnectionS1_EEES7_S1__block_invoke_104(uint64_t a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  os_log_t v6;
  void *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  {
    auhs_log_category(void)::category = 0;
    *(_QWORD *)algn_1EE168B28 = 0;
    v6 = os_log_create("com.apple.coreaudio", "AUHostingService");
    v7 = (void *)auhs_log_category(void)::category;
    auhs_log_category(void)::category = (uint64_t)v6;

  }
  v3 = objc_retainAutorelease((id)auhs_log_category(void)::category);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v8 = 136315394;
    v9 = "AUHostingServiceClient.mm";
    v10 = 1024;
    v11 = 242;
    _os_log_impl(&dword_18EE07000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d [AUHostingService Client] connection invalidated.", (uint8_t *)&v8, 0x12u);
  }
  v4 = *(_QWORD *)(a1 + 32);
  std::recursive_mutex::lock((std::recursive_mutex *)v4);
  v5 = *(_QWORD *)(v4 + 88);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  std::recursive_mutex::unlock((std::recursive_mutex *)v4);
}

void sub_18EFB27CC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *caulk::xpc::sync_message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::sync_message(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = &off_1E29164E8;
  v8[1] = a1;
  v9 = v8;
  v3 = a2;
  *a1 = v3;
  v4 = (uint64_t)v9;
  if (!v9)
    goto LABEL_4;
  if (v9 != v8)
  {
    v4 = (*(uint64_t (**)(void))(*v9 + 16))();
LABEL_4:
    a1[4] = v4;
    goto LABEL_6;
  }
  a1[4] = a1 + 1;
  (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
LABEL_6:

  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_10;
  }
  if (v9)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  a1[5] = 0;
  return a1;
}

void sub_18EFB28DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  id *v13;
  void *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == &a10)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::sync_proxy(void **a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[4];
  _BYTE v11[24];
  _BYTE *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 1));
  v2 = *a1;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEE10sync_proxyEv_block_invoke;
  v10[3] = &__block_descriptor_64_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE_e17_v16__0__NSError_8l;
  v3 = v11;
  v4 = (uint64_t)v14;
  if (!v14)
    goto LABEL_4;
  if (v14 != v13)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v13[0] + 24))(v13, v11);
LABEL_6:
  objc_msgSend(v2, "synchronousRemoteObjectProxyWithErrorHandler:", v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 == v11)
  {
    v6 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
    v3 = v12;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_11:
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
    goto LABEL_15;
  }
  if (v14)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v5;
}

void sub_18EFB2A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v19 = *(_QWORD **)(v17 - 32);
  if (v19 == (_QWORD *)(v17 - 56))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id caulk::xpc::message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::reply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD aBlock[4];
  _BYTE v9[24];
  _BYTE *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, a1 + 8);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE_e17_v16__0__NSError_8l;
  v1 = v9;
  v2 = (uint64_t)v12;
  if (!v12)
    goto LABEL_4;
  if (v12 != v11)
  {
    v2 = (*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
LABEL_4:
    v10 = (_BYTE *)v2;
    goto LABEL_6;
  }
  v10 = v9;
  (*(void (**)(_QWORD *, _BYTE *))(v11[0] + 24))(v11, v9);
LABEL_6:
  v3 = _Block_copy(aBlock);
  if (v10 == v9)
  {
    v4 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_11;
    v4 = 5;
    v1 = v10;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_11:
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
    goto LABEL_15;
  }
  if (v12)
  {
    v6 = 5;
LABEL_15:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v3;
}

void sub_18EFB2C30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 32);
  if (v3 == (_QWORD *)(v1 - 56))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 56);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEE5replyEv_block_invoke(uint64_t a1, void *a2)
{
  char v2;

  v2 = 0;
  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

void ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  char v2;

  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

void _ZNSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EED0Ev()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *_ZNKSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E29164E8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E29164E8;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EEclEOU8__strongSC_SF_(uint64_t a1, id *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 8) + 40), *a2);
}

uint64_t __copy_helper_block_ea8_32c105_ZTSKZN22AUHostingServiceClientC1EP6NSUUIDP8NSStringNSt3__18functionIFP15NSXPCConnectionS1_EEES7_S1_E3__0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c105_ZTSKZN22AUHostingServiceClientC1EP6NSUUIDP8NSStringNSt3__18functionIFP15NSXPCConnectionS1_EEES7_S1_E3__0(uint64_t a1)
{
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<caulk::synchronized<AUHostingServiceClient::SharedState,std::recursive_mutex,caulk::empty_atomic_interface<AUHostingServiceClient::SharedState>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::synchronized<AUHostingServiceClient::SharedState,std::recursive_mutex,caulk::empty_atomic_interface<AUHostingServiceClient::SharedState>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<caulk::synchronized<AUHostingServiceClient::SharedState,std::recursive_mutex,caulk::empty_atomic_interface<AUHostingServiceClient::SharedState>>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 88);
  v3 = *(_QWORD **)(a1 + 112);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 24));
}

uint64_t std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::~__func(uint64_t a1)
{

  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E2915B10;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E2915B10;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::destroy(uint64_t a1)
{

}

void std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

id std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::operator()(uint64_t a1, id *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  unsigned __int8 v7;
  NSObject *v8;
  void *v9;
  xpc_object_t v10;
  _xpc_connection_s *v11;
  xpc_object_t v12;
  void *v13;
  void *v14;
  void *v15;
  os_log_t v17;
  void *v18;
  xpc_object_t values;
  _BYTE buf[12];
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(void **)(a1 + 8);
  v5 = v3;
  v6 = v4;
  {
    auhs_log_category(void)::category = 0;
    *(_QWORD *)algn_1EE168B28 = 0;
    v17 = os_log_create("com.apple.coreaudio", "AUHostingService");
    v18 = (void *)auhs_log_category(void)::category;
    auhs_log_category(void)::category = (uint64_t)v17;

  }
  v8 = objc_retainAutorelease((id)auhs_log_category(void)::category);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUHostingServiceClient.mm";
    v21 = 1024;
    v22 = 98;
    _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Creating new client connection", buf, 0x12u);
  }
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithServiceName:", v6);
  objc_msgSend(v9, "resume");
  *(_QWORD *)buf = "listener-name";
  values = xpc_string_create("AUHostingServiceMain");
  v10 = xpc_dictionary_create((const char *const *)buf, &values, 1uLL);
  objc_msgSend(v9, "_xpcConnection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  v12 = xpc_connection_send_message_with_reply_sync(v11, v10);

  if (object_getClass(v12) == (Class)MEMORY[0x1E0C81310])
  {
    v15 = 0;
  }
  else
  {
    xpc_dictionary_get_value(v12, "listener-endpoint");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_opt_new();
    objc_msgSend(v14, "_setEndpoint:", v13);
    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithListenerEndpoint:", v14);

  }
  return v15;
}

void sub_18EFB3144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t getAUHostingInstantiationPolicy(void)
{
  char *v0;
  const char *v1;
  uint64_t result;

  v0 = getenv("CoreAudio_AUHostingServiceProcessesPolicy");
  if (!v0)
    return 2;
  v1 = v0;
  if (!strcmp(v0, "oneProcessPerHost"))
    return 2;
  if (!strcmp(v1, "oneProcessPerManufacturer"))
    return 1;
  result = strcmp(v1, "oneProcessPerAudioUnit");
  if ((_DWORD)result)
    return 2;
  return result;
}

void AUHostingServiceProcessManager::instance(AUHostingServiceProcessManager *this)
{
  unsigned __int8 v2;

  if ((v2 & 1) == 0
  {
    AUHostingServiceProcessManager::instance(void)::manager = 0;
    qword_1EE1685C0 = 0;
    qword_1EE1685B8 = (uint64_t)&qword_1EE1685C0;
    qword_1EE1685E0 = 0;
    qword_1EE1685D8 = 0;
    qword_1EE1685C8 = 0;
    unk_1EE1685D0 = &qword_1EE1685D8;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&AUHostingServiceProcessManager::instance(void)::manager);
  *(_QWORD *)this = &AUHostingServiceProcessManager::instance(void)::manager;
  *((_QWORD *)this + 1) = &qword_1EE1685B8;
}

char *AUHostingServiceProcessManager::uuidForDescriptor(uint64_t **this, const AudioComponentDescription *a2)
{
  unsigned int v2;
  char *v4;
  char *v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  void *v18;

  v2 = a2;
  v5 = (char *)(this + 1);
  v4 = (char *)this[1];
  if (!v4)
    goto LABEL_12;
  v6 = (char *)(this + 1);
  do
  {
    v7 = *((_DWORD *)v4 + 8);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (char **)v4;
    else
      v9 = (char **)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v5 && *((_DWORD *)v6 + 8) <= a2)
    return v6 + 40;
LABEL_12:
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = *(uint64_t **)v5;
  v12 = v5;
  if (*(_QWORD *)v5)
  {
    while (1)
    {
      while (1)
      {
        v12 = v11;
        v13 = *((_DWORD *)v11 + 8);
        if (v13 <= v2)
          break;
        v11 = (uint64_t *)*v12;
        v5 = (char *)v12;
        if (!*v12)
          goto LABEL_19;
      }
      if (v13 >= v2)
        break;
      v11 = (uint64_t *)v12[1];
      if (!v11)
      {
        v5 = (char *)(v12 + 1);
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v14 = v12;
    v12 = operator new(0x30uLL);
    *((_DWORD *)v12 + 8) = v2;
    v12[5] = 0;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *(_QWORD *)v5 = v12;
    v15 = (uint64_t *)**this;
    v16 = v12;
    if (v15)
    {
      *this = v15;
      v16 = *(uint64_t **)v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[1], v16);
    this[2] = (uint64_t *)((char *)this[2] + 1);
  }
  v18 = (void *)v12[5];
  v17 = v12 + 5;
  *v17 = v10;

  return (char *)v17;
}

_QWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>>>::find<std::string>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  char v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<AUHostingServiceInstance>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AUHostingServiceInstance>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<AUHostingServiceInstance>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJjEE5replyEv_block_invoke(uint64_t a1, void *a2, int a3)
{
  int v3;

  v3 = a3;
  std::function<void ()(NSError *,std::tuple<unsigned int> &&)>::operator()(a1 + 32, a2, (uint64_t)&v3);
}

void ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJjEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  int v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<unsigned int> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2916530;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2916530;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::operator()(uint64_t a1, id *a2, _DWORD *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  *(_DWORD *)(v6 + 48) = *a3;
}

void AUHostingServiceClient::~AUHostingServiceClient(AUHostingServiceClient *this)
{
  std::mutex *v2;
  void *v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v10)();
  id v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  AUHostingServiceClient *v27;
  uint64_t v28;
  std::mutex *v29;
  std::__shared_weak_count *v30;
  id v31;
  _QWORD v32[3];
  _QWORD *v33;
  id v34;
  int v35;
  uint64_t (**aBlock)();
  uint64_t v37;
  void *v38;
  uint64_t (***p_aBlock)();
  _BYTE v40[24];
  _BYTE *v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  getAUHostingServiceInstance((NSUUID *)&v29, *(void **)this);
  v2 = v29;
  std::mutex::lock(v29);
  v3 = (void *)*((_QWORD *)this + 5);
  aBlock = &off_1E2916530;
  v37 = (uint64_t)&v31;
  p_aBlock = &aBlock;
  v4 = v3;
  v31 = v4;
  v5 = v32;
  v6 = (uint64_t)p_aBlock;
  if (!p_aBlock)
    goto LABEL_4;
  if (p_aBlock != &aBlock)
  {
    v6 = (*p_aBlock)[2]();
LABEL_4:
    v33 = (_QWORD *)v6;
    goto LABEL_6;
  }
  v33 = v32;
  ((void (*)(uint64_t (***)(), _QWORD *))aBlock[3])(&aBlock, v32);
LABEL_6:

  v7 = p_aBlock;
  if (p_aBlock == &aBlock)
  {
    v8 = 4;
    v7 = &aBlock;
  }
  else
  {
    if (!p_aBlock)
      goto LABEL_11;
    v8 = 5;
  }
  (*v7)[v8]();
LABEL_11:
  v34 = 0;
  v35 = 0;
  v9 = v33;
  v10 = (uint64_t (**)())MEMORY[0x1E0C809B0];
  if (!v33)
  {
    v43 = 0;
    v11 = v31;
    aBlock = (uint64_t (**)())MEMORY[0x1E0C809B0];
    v37 = 3321888768;
    v38 = ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJjEE10sync_proxyEv_block_invoke;
    p_aBlock = (uint64_t (***)())&__block_descriptor_64_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJjEEEEEE_e17_v16__0__NSError_8l;
    v12 = v40;
LABEL_19:
    v41 = v9;
    goto LABEL_20;
  }
  if (v33 == v32)
  {
    v43 = v42;
    (*(void (**)(_QWORD *, _QWORD *))(v32[0] + 24))(v32, v42);
    v9 = v43;
  }
  else
  {
    v9 = (_QWORD *)(*(uint64_t (**)(void))(*v33 + 16))();
    v43 = v9;
  }
  v11 = v31;
  aBlock = v10;
  v37 = 3321888768;
  v38 = ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJjEE10sync_proxyEv_block_invoke;
  p_aBlock = (uint64_t (***)())&__block_descriptor_64_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJjEEEEEE_e17_v16__0__NSError_8l;
  v12 = v40;
  if (!v9)
    goto LABEL_19;
  if (v9 != v42)
  {
    v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
    goto LABEL_19;
  }
  v41 = v40;
  (*(void (**)(_QWORD *, _BYTE *))(v42[0] + 24))(v42, v40);
LABEL_20:
  objc_msgSend(v11, "synchronousRemoteObjectProxyWithErrorHandler:", &aBlock);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v41 == v40)
  {
    v14 = 4;
  }
  else
  {
    if (!v41)
      goto LABEL_25;
    v14 = 5;
    v12 = v41;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v14))(v12);
LABEL_25:
  v15 = v43;
  if (v43 == v42)
  {
    v16 = 4;
    v15 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_30;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_30:
  v17 = v33;
  if (!v33)
  {
    v43 = 0;
    aBlock = v10;
    v37 = 3321888768;
    v38 = ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJjEE5replyEv_block_invoke;
    p_aBlock = (uint64_t (***)())&__block_descriptor_64_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJjEEEEEE_e20_v20__0__NSError_8I16l;
    v18 = v40;
LABEL_38:
    v41 = v17;
    goto LABEL_39;
  }
  if (v33 == v32)
  {
    v43 = v42;
    (*(void (**)(_QWORD *, _QWORD *))(v32[0] + 24))(v32, v42);
    v17 = v43;
  }
  else
  {
    v17 = (_QWORD *)(*(uint64_t (**)(void))(*v33 + 16))();
    v43 = v17;
  }
  aBlock = v10;
  v37 = 3321888768;
  v38 = ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJjEE5replyEv_block_invoke;
  p_aBlock = (uint64_t (***)())&__block_descriptor_64_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJjEEEEEE_e20_v20__0__NSError_8I16l;
  v18 = v40;
  if (!v17)
    goto LABEL_38;
  if (v17 != v42)
  {
    v17 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
    goto LABEL_38;
  }
  v41 = v40;
  (*(void (**)(_QWORD *, _BYTE *))(v42[0] + 24))(v42, v40);
LABEL_39:
  v19 = _Block_copy(&aBlock);
  if (v41 == v40)
  {
    v20 = 4;
  }
  else
  {
    if (!v41)
      goto LABEL_44;
    v20 = 5;
    v18 = v41;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v20))(v18);
LABEL_44:
  v21 = v43;
  if (v43 == v42)
  {
    v22 = 4;
    v21 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_49;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_49:
  objc_msgSend(v13, "closeHost:", v19);

  objc_msgSend(*((id *)this + 5), "invalidate");
  LOBYTE(v2[1].__m_.__sig) = v35 == 0;

  if (v33 == v32)
  {
    v23 = 4;
    goto LABEL_53;
  }
  if (v33)
  {
    v23 = 5;
    v5 = v33;
LABEL_53:
    (*(void (**)(_QWORD *))(*v5 + 8 * v23))(v5);
  }

  std::mutex::unlock(v2);
  v24 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  v27 = (AUHostingServiceClient *)*((_QWORD *)this + 4);
  if (v27 == (AUHostingServiceClient *)((char *)this + 8))
  {
    v28 = 4;
    v27 = (AUHostingServiceClient *)((char *)this + 8);
    goto LABEL_63;
  }
  if (v27)
  {
    v28 = 5;
LABEL_63:
    (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
  }

}

void sub_18EFB3AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;

  if (!a2)
    _Unwind_Resume(exception_object);
  v27 = *(_QWORD **)(v25 - 80);
  if (v27 == (_QWORD *)(v25 - 104))
  {
    v28 = 4;
    v27 = (_QWORD *)(v25 - 104);
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_7:
  __clang_call_terminate(exception_object);
}

void AUHostingServiceClient::setInvalidationHandler(std::recursive_mutex *a1, uint64_t a2)
{
  std::recursive_mutex *v4;

  v4 = a1 + 1;
  std::recursive_mutex::lock(a1);
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](v4, a2);
  if (a1)
    std::recursive_mutex::unlock(a1);
}

BOOL AUHostingServiceClient::loadRemotely(AUHostingServiceClient *this, AudioComponentDescription *a2)
{
  void *v4;
  unsigned __int8 v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  unsigned __int8 v12;
  NSObject *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v21;
  UInt32 componentFlagsMask;
  void *v23;
  uint8_t v24[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  id v29;
  _BYTE buf[12];
  __int16 v31;
  int v32;
  __int16 v33;
  void *v34;
  _BYTE *v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_opt_new();
  CAFormatter::CAFormatter((CAFormatter *)&v23, a2);
  {
    caulk::log_category::log_category((caulk::log_category *)&auhs_log_category(void)::category, "com.apple.coreaudio", "AUHostingService");
  }
  v6 = objc_retainAutorelease((id)auhs_log_category(void)::category);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUHostingServiceClient.mm";
    v31 = 1024;
    v32 = 304;
    v33 = 2080;
    v34 = v23;
    _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_INFO, "%25s:%-5d Requesting to load Audio Unit remotely: %s", buf, 0x1Cu);
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    objc_msgSend(v7, "UUIDString");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v8, CFSTR("audioUnitInstanceUUID"));

  }
  caulk::xpc::sync_message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::sync_message(buf, *((void **)this + 5));
  caulk::xpc::message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::sync_proxy((void **)buf);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = *(_OWORD *)&a2->componentType;
  componentFlagsMask = a2->componentFlagsMask;
  caulk::xpc::message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::reply((uint64_t)buf);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "loadAudioUnitInRemoteHost:config:reply:", &v21, v4, v10);

  v11 = v36;
  if (v36)
  {
    {
      caulk::log_category::log_category((caulk::log_category *)&auhs_log_category(void)::category, "com.apple.coreaudio", "AUHostingService");
    }
    v13 = objc_retainAutorelease((id)auhs_log_category(void)::category);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = v36;
      *(_DWORD *)v24 = 136315650;
      v25 = "AUHostingServiceClient.mm";
      v26 = 1024;
      v27 = 315;
      v28 = 2112;
      v29 = v14;
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error while loading Audio Unit in remote host: %@", v24, 0x1Cu);

    }
    v15 = v36;
  }
  else
  {
    v15 = 0;
  }

  v18 = v35;
  if (v35 == &buf[8])
  {
    v19 = 4;
    v18 = &buf[8];
  }
  else
  {
    if (!v35)
      goto LABEL_17;
    v19 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v18 + 8 * v19))(v18, v16, v17);
LABEL_17:

  if (v23)
    free(v23);

  return v11 == 0;
}

void sub_18EFB3F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;

  if (a12)
    free(a12);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<APComponent_NSExtension *,std::shared_ptr<APComponent_NSExtension>::__shared_ptr_default_delete<APComponent_NSExtension,APComponent_NSExtension>,std::allocator<APComponent_NSExtension>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<APComponent_NSExtension *,std::shared_ptr<APComponent_NSExtension>::__shared_ptr_default_delete<APComponent_NSExtension,APComponent_NSExtension>,std::allocator<APComponent_NSExtension>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

int64x2_t *AudioComponentVector::add(int64x2_t *result, __int128 *a2)
{
  int64x2_t *v3;
  int64x2_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = result;
  v4 = result + 1;
  v5 = result[1].u64[0];
  v6 = (_QWORD *)result->i64[1];
  if ((unint64_t)v6 >= v5)
  {
    v11 = ((uint64_t)v6 - result->i64[0]) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = v5 - result->i64[0];
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v30 = (uint64_t *)v4;
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v14);
    v17 = &v15[16 * v11];
    v18 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v18 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v22 = (_QWORD *)v3->i64[0];
    v21 = (_QWORD *)v3->i64[1];
    if (v21 == (_QWORD *)v3->i64[0])
    {
      v25 = vdupq_n_s64((unint64_t)v21);
      v23 = &v15[16 * v11];
    }
    else
    {
      v23 = &v15[16 * v11];
      do
      {
        v24 = *((_OWORD *)v21 - 1);
        v21 -= 2;
        *((_OWORD *)v23 - 1) = v24;
        v23 -= 16;
        *v21 = 0;
        v21[1] = 0;
      }
      while (v21 != v22);
      v25 = *v3;
    }
    v10 = v17 + 16;
    v3->i64[0] = (uint64_t)v23;
    v3->i64[1] = (uint64_t)(v17 + 16);
    v28 = v25;
    v26 = v3[1].i64[0];
    v3[1].i64[0] = (uint64_t)&v15[16 * v16];
    v29 = v26;
    v27 = v25.i64[0];
    result = (int64x2_t *)std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v27);
  }
  else
  {
    *v6 = *(_QWORD *)a2;
    v7 = *((_QWORD *)a2 + 1);
    v6[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = v6 + 2;
  }
  v3->i64[1] = (uint64_t)v10;
  v3[1].i8[8] = 0;
  return result;
}

AudioComponentVector *AudioComponentVector::append(AudioComponentVector *this, AudioComponentVector *a2, const AudioComponentVector *a3)
{
  AudioComponentVector *v3;
  uint64_t *v4;
  char *end;
  uint64_t v6;
  _BYTE *value;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const AudioComponentVector *v13;
  _QWORD *v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];

  v3 = this;
  if ((char *)a3 - (char *)a2 >= 1)
  {
    v4 = (uint64_t *)a2;
    end = (char *)this->__end_;
    v6 = ((char *)a3 - (char *)a2) >> 4;
    value = this->__end_cap_.__value_;
    if (v6 <= (value - end) >> 4)
    {
      if (v6 <= 0)
      {
        v18 = (uint64_t *)a2 + 2 * v6;
        for (this = (AudioComponentVector *)std::vector<std::shared_ptr<APComponent>>::__move_range((uint64_t)this, (uint64_t)this->__end_, (unint64_t)this->__end_, &end[16 * v6]); v4 != v18; end += 16)
        {
          v24 = *v4;
          v25 = v4[1];
          v4 += 2;
          this = (AudioComponentVector *)std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](end, v24, v25);
        }
      }
      else
      {
        if (a2 == a3)
        {
          v14 = this->__end_;
        }
        else
        {
          v13 = a2;
          v14 = this->__end_;
          do
          {
            *v14 = v13->__begin_;
            v15 = (char *)v13->__end_;
            v14[1] = v15;
            if (v15)
            {
              v16 = (unint64_t *)(v15 + 8);
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
            v13 = (const AudioComponentVector *)((char *)v13 + 16);
            v14 += 2;
          }
          while (v13 != a3);
        }
        this->__end_ = v14;
      }
    }
    else
    {
      v8 = (end - (char *)this->__begin_) >> 4;
      if ((unint64_t)(v8 + v6) >> 60)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v9 = value - (char *)this->__begin_;
      v10 = v9 >> 3;
      if (v9 >> 3 <= (unint64_t)(v8 + v6))
        v10 = v8 + v6;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
        v11 = 0xFFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      v26[4] = &v3->__end_cap_;
      if (v11)
        v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v11);
      else
        v12 = 0;
      v19 = (uint64_t *)(v11 + 16 * v8);
      v26[0] = v11;
      v26[1] = v19;
      v26[3] = v11 + 16 * v12;
      v20 = &v19[2 * v6];
      do
      {
        *v19 = *v4;
        v21 = v4[1];
        v19[1] = v21;
        if (v21)
        {
          v22 = (unint64_t *)(v21 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v19 += 2;
        v4 += 2;
      }
      while (v19 != v20);
      v26[2] = v20;
      std::vector<std::shared_ptr<APComponent>>::__swap_out_circular_buffer(v3, v26, end);
      this = (AudioComponentVector *)std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)v26);
    }
  }
  v3->mSorted = 0;
  return this;
}

_QWORD *AudioComponentVector::remove(AudioComponentVector *this, APComponent *a2)
{
  __int128 *begin;
  __int128 *end;
  char *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  APComponent *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12[0] = &off_1E2915A80;
  v12[1] = &v11;
  v13 = v12;
  begin = (__int128 *)this->__begin_;
  end = (__int128 *)this->__end_;
  if (this->__begin_ == end)
  {
LABEL_15:
    v5 = (char *)begin;
    goto LABEL_16;
  }
  v5 = (char *)this->__end_;
  while (1)
  {
    if (!v13)
      goto LABEL_22;
    if (((*(uint64_t (**)(_QWORD *, __int128 *))(*v13 + 48))(v13, begin) & 1) != 0)
      break;
    if (++begin == end)
      goto LABEL_16;
  }
  if (begin != end)
  {
    v6 = begin + 1;
    if (begin + 1 != end)
    {
      v5 = (char *)begin;
      while (v13)
      {
        if (((*(uint64_t (**)(_QWORD *, __int128 *))(*v13 + 48))(v13, v6) & 1) == 0)
        {
          std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v5, v6);
          v5 += 16;
        }
        if (++v6 == end)
          goto LABEL_16;
      }
LABEL_22:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    goto LABEL_15;
  }
LABEL_16:
  std::vector<std::shared_ptr<APComponent>>::erase((uint64_t)this, (uint64_t)v5, (uint64_t)this->__end_);
  result = v13;
  if (v13 == v12)
  {
    v10 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*result + 8 * v10))(result, v7, v8);
}

void sub_18EFB444C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AudioComponentVector::remove(APComponent *)::$_0,std::allocator<AudioComponentVector::remove(APComponent *)::$_0>,BOOL ()(std::shared_ptr<APComponent> &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AudioComponentVector::remove(APComponent *)::$_0,std::allocator<AudioComponentVector::remove(APComponent *)::$_0>,BOOL ()(std::shared_ptr<APComponent> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915A80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AudioComponentVector::remove(APComponent *)::$_0,std::allocator<AudioComponentVector::remove(APComponent *)::$_0>,BOOL ()(std::shared_ptr<APComponent> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915A80;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AudioComponentVector::remove(APComponent *)::$_0,std::allocator<AudioComponentVector::remove(APComponent *)::$_0>,BOOL ()(std::shared_ptr<APComponent> &)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *a2 == **(_QWORD **)(a1 + 8);
}

char *std::vector<std::shared_ptr<APComponent>>::__init_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<APComponent>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_18EFB459C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0,std::allocator<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0>,BOOL ()(APComponent &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0,std::allocator<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0>,BOOL ()(APComponent &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915A38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0,std::allocator<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0>,BOOL ()(APComponent &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915A38;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0,std::allocator<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0>,BOOL ()(APComponent &)>::operator()(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  int v4;
  int v6;

  if (a2[8] != 3)
    return 0;
  v2 = *(_DWORD **)(a1 + 8);
  if (*v2 && a2[9] == *v2)
    return 0;
  v4 = v2[1];
  if (v4 && a2[10] == v4)
    return 0;
  v6 = v2[2];
  return !v6 || a2[11] != v6;
}

void std::__introsort<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  BOOL v32;
  BOOL v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __int128 *v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t *v96;
  uint64_t *v97;
  __int128 *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  __int128 v107;
  __int128 v108;

void sub_18EFB50F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  unint64_t *p_shared_owners;
  unint64_t v18;

  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v6 = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 0);
  result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 0);
  if (v6 < 0)
  {
    v13 = *a1;
    if ((result & 0x80000000) != 0)
    {
      *a1 = *a3;
      *a3 = v13;
      v16 = a3 + 1;
      v12 = a1 + 1;
    }
    else
    {
      *a1 = *a2;
      *a2 = v13;
      v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 0);
      if ((result & 0x80000000) == 0)
        return result;
      v15 = *a2;
      *a2 = *a3;
      *a3 = v15;
      v16 = a3 + 1;
      v12 = a2 + 1;
    }
    v10 = v16;
    goto LABEL_10;
  }
  if ((result & 0x80000000) != 0)
  {
    v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    v10 = a2 + 1;
    v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    result = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 0);
    if ((result & 0x80000000) != 0)
    {
      v11 = *a1;
      *a1 = *a2;
      v12 = a1 + 1;
      *a2 = v11;
LABEL_10:
      v17 = *v12;
      *v12 = *v10;
      *v10 = v17;
    }
  }
  return result;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a2, a3);
  result = APComponent::Key::sortCompare((_DWORD *)(*a4 + 36), (_DWORD *)(*a3 + 36), 0);
  if ((result & 0x80000000) != 0)
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 0);
    if ((result & 0x80000000) != 0)
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      result = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 0);
      if ((result & 0x80000000) != 0)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a2, a3, a4);
  result = APComponent::Key::sortCompare((_DWORD *)(*a5 + 36), (_DWORD *)(*a4 + 36), 0);
  if ((result & 0x80000000) != 0)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    result = APComponent::Key::sortCompare((_DWORD *)(*a4 + 36), (_DWORD *)(*a3 + 36), 0);
    if ((result & 0x80000000) != 0)
    {
      v13 = *a3;
      *a3 = *a4;
      *a4 = v13;
      v14 = a3[1];
      a3[1] = a4[1];
      a4[1] = v14;
      result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 0);
      if ((result & 0x80000000) != 0)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        v16 = a2[1];
        a2[1] = a3[1];
        a3[1] = v16;
        result = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 0);
        if ((result & 0x80000000) != 0)
        {
          v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
          v18 = a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((APComponent::Key::sortCompare((_DWORD *)(*(a2 - 2) + 36), (_DWORD *)(*a1 + 36), 0) & 0x80000000) != 0)
      {
        v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v8 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, a1 + 4);
      v9 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if ((APComponent::Key::sortCompare((_DWORD *)(*v9 + 36), (_DWORD *)(*v8 + 36), 0) & 0x80000000) != 0)
    {
      v20 = *(_OWORD *)v9;
      v12 = v20;
      *v9 = 0;
      v9[1] = 0;
      v13 = (_DWORD *)(v12 + 36);
      v14 = v10;
      while (1)
      {
        std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)a1 + v14 + 48, (__int128 *)((char *)a1 + v14 + 32));
        if (v14 == -32)
          break;
        v15 = APComponent::Key::sortCompare(v13, (_DWORD *)(*(uint64_t *)((char *)a1 + v14 + 16) + 36), 0);
        v14 -= 16;
        if ((v15 & 0x80000000) == 0)
        {
          v16 = (uint64_t)a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v16, &v20);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

void sub_18EFB57C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *,false>(uint64_t *a1, char *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  BOOL v32;
  BOOL v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __int128 *v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t *v96;
  uint64_t *v97;
  __int128 *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  __int128 v107;
  __int128 v108;

void sub_18EFB6250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  unint64_t *p_shared_owners;
  unint64_t v18;

  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v6 = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 1);
  result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 1);
  if (v6 < 0)
  {
    v13 = *a1;
    if ((result & 0x80000000) != 0)
    {
      *a1 = *a3;
      *a3 = v13;
      v16 = a3 + 1;
      v12 = a1 + 1;
    }
    else
    {
      *a1 = *a2;
      *a2 = v13;
      v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 1);
      if ((result & 0x80000000) == 0)
        return result;
      v15 = *a2;
      *a2 = *a3;
      *a3 = v15;
      v16 = a3 + 1;
      v12 = a2 + 1;
    }
    v10 = v16;
    goto LABEL_10;
  }
  if ((result & 0x80000000) != 0)
  {
    v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    v10 = a2 + 1;
    v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    result = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 1);
    if ((result & 0x80000000) != 0)
    {
      v11 = *a1;
      *a1 = *a2;
      v12 = a1 + 1;
      *a2 = v11;
LABEL_10:
      v17 = *v12;
      *v12 = *v10;
      *v10 = v17;
    }
  }
  return result;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a2, a3);
  result = APComponent::Key::sortCompare((_DWORD *)(*a4 + 36), (_DWORD *)(*a3 + 36), 1);
  if ((result & 0x80000000) != 0)
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 1);
    if ((result & 0x80000000) != 0)
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      result = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 1);
      if ((result & 0x80000000) != 0)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a2, a3, a4);
  result = APComponent::Key::sortCompare((_DWORD *)(*a5 + 36), (_DWORD *)(*a4 + 36), 1);
  if ((result & 0x80000000) != 0)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    result = APComponent::Key::sortCompare((_DWORD *)(*a4 + 36), (_DWORD *)(*a3 + 36), 1);
    if ((result & 0x80000000) != 0)
    {
      v13 = *a3;
      *a3 = *a4;
      *a4 = v13;
      v14 = a3[1];
      a3[1] = a4[1];
      a4[1] = v14;
      result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 1);
      if ((result & 0x80000000) != 0)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        v16 = a2[1];
        a2[1] = a3[1];
        a3[1] = v16;
        result = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 1);
        if ((result & 0x80000000) != 0)
        {
          v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
          v18 = a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(uint64_t *a1, char *a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v20;

  v4 = 1;
  switch((a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if ((APComponent::Key::sortCompare((_DWORD *)(*((_QWORD *)a2 - 2) + 36), (_DWORD *)(*a1 + 36), 1) & 0x80000000) != 0)
      {
        v5 = *a1;
        *a1 = *((_QWORD *)a2 - 2);
        *((_QWORD *)a2 - 2) = v5;
        v6 = a1[1];
        a1[1] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v6;
      }
      break;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, (uint64_t *)a2 - 2);
      break;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, a1 + 4, (uint64_t *)a2 - 2);
      break;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, (uint64_t *)a2 - 2);
      break;
    default:
      v7 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, a1 + 4);
      v8 = a1 + 6;
      if (a1 + 6 == (uint64_t *)a2)
      {
LABEL_19:
        v4 = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        while (1)
        {
          if ((APComponent::Key::sortCompare((_DWORD *)(*v8 + 36), (_DWORD *)(*v7 + 36), 1) & 0x80000000) != 0)
          {
            v20 = *(_OWORD *)v8;
            v11 = v20;
            *v8 = 0;
            v8[1] = 0;
            v12 = (_DWORD *)(v11 + 36);
            v13 = v9;
            while (1)
            {
              std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)a1 + v13 + 48, (__int128 *)((char *)a1 + v13 + 32));
              if (v13 == -32)
                break;
              v14 = APComponent::Key::sortCompare(v12, (_DWORD *)(*(uint64_t *)((char *)a1 + v13 + 16) + 36), 1);
              v13 -= 16;
              if ((v14 & 0x80000000) == 0)
              {
                v15 = (uint64_t)a1 + v13 + 48;
                goto LABEL_12;
              }
            }
            v15 = (uint64_t)a1;
LABEL_12:
            std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v15, &v20);
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
            if (*((_QWORD *)&v20 + 1))
            {
              v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
              do
                v18 = __ldaxr(v17);
              while (__stlxr(v18 - 1, v17));
              if (!v18)
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
            }
            if (++v10 == 8)
              break;
          }
          v7 = v8;
          v9 += 16;
          v8 += 2;
          if (v8 == (uint64_t *)a2)
            goto LABEL_19;
        }
        v4 = v8 + 2 == (uint64_t *)a2;
      }
      break;
  }
  return v4;
}

void sub_18EFB6928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id dictionaryFromComponentDescription(const AudioComponentDescription *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v10[0] = CFSTR("type");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1->componentType);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v4;
  v10[1] = CFSTR("subtype");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1->componentSubType);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v11[1] = v5;
  v10[2] = CFSTR("manufacturer");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1->componentManufacturer);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11[2] = v6;
  v10[3] = CFSTR("version");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[3] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_18EFB6A68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void dictionaryToComponentDescription(NSDictionary *a1, AudioComponentDescription *a2, unsigned int *a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSDictionary *v9;

  v9 = a1;
  -[NSDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", CFSTR("type"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  a2->componentType = objc_msgSend(v5, "unsignedIntValue");

  -[NSDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", CFSTR("subtype"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  a2->componentSubType = objc_msgSend(v6, "unsignedIntValue");

  -[NSDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", CFSTR("manufacturer"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  a2->componentManufacturer = objc_msgSend(v7, "unsignedIntValue");

  a2->componentFlags = 0;
  a2->componentFlagsMask = 0;
  -[NSDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", CFSTR("version"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *a3 = objc_msgSend(v8, "unsignedIntValue");

}

void sub_18EFB6B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void MP4BoxParser_SampleGroupDescription::~MP4BoxParser_SampleGroupDescription(MP4BoxParser_SampleGroupDescription *this)
{
  MP4BoxParser_SampleGroupDescription::~MP4BoxParser_SampleGroupDescription(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E2909C98;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t MP4BoxParser_SampleGroupDescription::Init(MP4BoxParser **this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v11;
  uint64_t DataSourceBytes;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  NSObject *v22;
  const char *v23;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  unsigned int v29[4];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if ((_DWORD)v2)
    return v2;
  if (*((_DWORD *)this + 5) != 1936158820)
    return 4294967294;
  v3 = (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this);
  v4 = *((unsigned __int8 *)this + 56);
  v5 = 16;
  if (v4 == 1)
    v5 = 12;
  if (*((_BYTE *)this + 56))
    v6 = v5;
  else
    v6 = 8;
  v7 = (unint64_t)this[3];
  v8 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
  v9 = (unint64_t)this[3];
  if (v7 <= v8 || v9 < v6)
  {
    if (v9 > (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this) && (unint64_t)this[3] >= 4)
    {
      DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, v29);
      if ((_DWORD)DataSourceBytes)
      {
        v2 = DataSourceBytes;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v25 = 136315394;
          v26 = "MP4_BoxParser_SampleGroupDescription.cpp";
          v27 = 1024;
          v28 = 165;
          v13 = MEMORY[0x1E0C81028];
          v14 = "%25s:%-5d  couldn't read grouping type";
LABEL_21:
          _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v25, 0x12u);
          return v2;
        }
        return v2;
      }
      v11 = v29[0];
    }
    *((_DWORD *)this + 16) = bswap32(v11);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_40:
      v2 = 0;
      *((_BYTE *)this + 60) = 0;
      return v2;
    }
    v25 = 136315394;
    v26 = "MP4_BoxParser_SampleGroupDescription.cpp";
    v27 = 1024;
    v28 = 169;
    v22 = MEMORY[0x1E0C81028];
    v23 = "%25s:%-5d  'sgpd' box is too small for its basic contents";
    goto LABEL_39;
  }
  v15 = MP4BoxParser::ReadDataSourceBytes(this[1], v3, v6, v29);
  if (!(_DWORD)v15)
  {
    v16 = bswap32(v29[0]);
    *((_DWORD *)this + 16) = v16;
    if (v4)
    {
      v17 = bswap32(v29[1]);
      *((_DWORD *)this + 17) = v17;
      if (v4 == 1)
      {
        v18 = 2;
      }
      else
      {
        *((_BYTE *)this + 72) = 1;
        *((_DWORD *)this + 19) = bswap32(v29[2]);
        v18 = 3;
      }
    }
    else
    {
      if (v16 != 1886547820 && v16 != 1919904876)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_40;
        v25 = 136315394;
        v26 = "MP4_BoxParser_SampleGroupDescription.cpp";
        v27 = 1024;
        v28 = 183;
        v22 = MEMORY[0x1E0C81028];
        v23 = "%25s:%-5d  'sgpd' box has sample group entries of unknown size";
        goto LABEL_39;
      }
      v17 = 2;
      *((_DWORD *)this + 17) = 2;
      v18 = 1;
    }
    v19 = bswap32(v29[v18]);
    *((_DWORD *)this + 20) = v19;
    this[11] = (MP4BoxParser *)v6;
    v20 = (unint64_t)this[3];
    if (v20 > (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this))
    {
      v21 = v17 ? v17 : 4;
      if ((unint64_t)this[3] >= v6 + v21 * (unint64_t)v19)
      {
        v2 = 0;
        *((_BYTE *)this + 60) = 1;
        return v2;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_40;
    v25 = 136315394;
    v26 = "MP4_BoxParser_SampleGroupDescription.cpp";
    v27 = 1024;
    v28 = 206;
    v22 = MEMORY[0x1E0C81028];
    v23 = "%25s:%-5d  'sbgp' box is too small for its group description entries";
LABEL_39:
    _os_log_impl(&dword_18EE07000, v22, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&v25, 0x12u);
    goto LABEL_40;
  }
  v2 = v15;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v25 = 136315394;
    v26 = "MP4_BoxParser_SampleGroupDescription.cpp";
    v27 = 1024;
    v28 = 173;
    v13 = MEMORY[0x1E0C81028];
    v14 = "%25s:%-5d  couldn't read 'sgpd' box fields";
    goto LABEL_21;
  }
  return v2;
}

uint64_t FLACPackStreamInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_DWORD *)a2, 0x10u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_DWORD *)(a2 + 4), 0x10u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_DWORD *)(a2 + 8), 0x18u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_DWORD *)(a2 + 12), 0x18u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_DWORD *)(a2 + 16), 0x14u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_DWORD *)(a2 + 20) - 1, 3u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_DWORD *)(a2 + 24) - 1, 5u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_QWORD *)(a2 + 32) >> 4, 0x20u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(unsigned __int8 *)(a2 + 32), 4u);
  v4 = 0;
  v5 = a2 + 40;
  do
    AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(unsigned __int8 *)(v5 + v4++), 8u);
  while (v4 != 16);
  return AT::TBitstreamWriter<unsigned int>::Flush(a1);
}

uint64_t FLACUnpackStreamInfo(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  int v39;
  unsigned int *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  int v47;
  unsigned int *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  int v55;
  unsigned int *v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned int v71;
  int v72;
  unsigned int *v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v90;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  int v97;

  v3 = *(_DWORD *)(result + 24);
  v2 = *(_DWORD *)(result + 28);
  v4 = HIWORD(v3);
  v5 = v2 - 16;
  *(_DWORD *)(result + 28) = v2 - 16;
  if (v2 - 16 < 0)
  {
    v8 = *(_QWORD *)(result + 8);
    v7 = *(_QWORD *)(result + 16);
    v9 = *(unsigned int **)result;
    if ((((_DWORD)v7 - *(_DWORD *)result) & ~((uint64_t)(v7 - *(_QWORD *)result) >> 63) & 0xFFFFFFFC) == 0
      || v8 > (unint64_t)v9)
    {
      v11 = 0;
      do
      {
        v12 = (unsigned __int8 *)v9 + v11;
        v13 = v3 << 8;
        *(_DWORD *)(result + 24) = v13;
        v14 = 255;
        if ((unint64_t)v9 + v11 < v7 && (unint64_t)v12 >= v8)
          v14 = *v12;
        v3 = v14 | v13;
        *(_DWORD *)(result + 24) = v3;
        ++v11;
      }
      while ((_DWORD)v11 != 4);
    }
    else
    {
      v3 = bswap32(*v9);
      *(_DWORD *)(result + 24) = v3;
    }
    v15 = v9 + 1;
    *(_QWORD *)result = v9 + 1;
    v5 = v2 + 16;
    *(_DWORD *)(result + 28) = v2 + 16;
    v4 |= v3 >> (v2 + 16);
    if (v2 == -16)
    {
      v16 = 0;
      v6 = 0;
      *(_DWORD *)a2 = v4;
      *(_QWORD *)(result + 24) = 0xFFFFFFF000000000;
      goto LABEL_19;
    }
    v6 = v3 << (16 - v2);
  }
  else
  {
    v6 = v3 << 16;
  }
  *(_DWORD *)a2 = v4;
  v16 = HIWORD(v6);
  v17 = v5 - 16;
  *(_DWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 28) = v5 - 16;
  if (v5 - 16 >= 0)
  {
    v18 = v6 << 16;
    goto LABEL_31;
  }
  v8 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v15 = *(unsigned int **)result;
LABEL_19:
  if ((((_DWORD)v7 - (_DWORD)v15) & ~((uint64_t)(v7 - (_QWORD)v15) >> 63) & 0xFFFFFFFC) == 0
    || v8 > (unint64_t)v15)
  {
    v20 = 0;
    do
    {
      v21 = (unsigned __int8 *)v15 + v20;
      v22 = v6 << 8;
      *(_DWORD *)(result + 24) = v22;
      v23 = 255;
      if ((unint64_t)v15 + v20 < v7 && (unint64_t)v21 >= v8)
        v23 = *v21;
      v6 = v23 | v22;
      *(_DWORD *)(result + 24) = v6;
      ++v20;
    }
    while ((_DWORD)v20 != 4);
  }
  else
  {
    v6 = bswap32(*v15);
    *(_DWORD *)(result + 24) = v6;
  }
  v24 = v15 + 1;
  *(_QWORD *)result = v15 + 1;
  v17 = v5 + 16;
  *(_DWORD *)(result + 28) = v5 + 16;
  v16 |= v6 >> (v5 + 16);
  if (v5 == -16)
  {
    v25 = 0;
    v18 = 0;
    *(_DWORD *)(a2 + 4) = v16;
    *(_QWORD *)(result + 24) = 0xFFFFFFE800000000;
    goto LABEL_35;
  }
  v18 = v6 << (16 - v5);
LABEL_31:
  *(_DWORD *)(a2 + 4) = v16;
  v25 = v18 >> 8;
  v26 = v17 - 24;
  *(_DWORD *)(result + 24) = v18;
  *(_DWORD *)(result + 28) = v17 - 24;
  if (v17 - 24 >= 0)
  {
    v27 = v18 << 24;
    goto LABEL_45;
  }
  v8 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v24 = *(unsigned int **)result;
LABEL_35:
  if ((((_DWORD)v7 - (_DWORD)v24) & ~((uint64_t)(v7 - (_QWORD)v24) >> 63) & 0xFFFFFFFC) != 0
    && v8 <= (unint64_t)v24)
  {
    v18 = bswap32(*v24);
    *(_DWORD *)(result + 24) = v18;
  }
  else
  {
    v28 = 0;
    do
    {
      v29 = (unsigned __int8 *)v24 + v28;
      v30 = v18 << 8;
      *(_DWORD *)(result + 24) = v18 << 8;
      v31 = 255;
      if ((unint64_t)v24 + v28 < v7 && (unint64_t)v29 >= v8)
        v31 = *v29;
      v18 = v31 | v30;
      *(_DWORD *)(result + 24) = v18;
      ++v28;
    }
    while ((_DWORD)v28 != 4);
  }
  v32 = v24 + 1;
  *(_QWORD *)result = v32;
  v26 = v17 + 8;
  v25 |= v18 >> (v17 + 8);
  if (v17 == -8)
  {
    v33 = 0;
    v27 = 0;
    *(_DWORD *)(a2 + 8) = v25;
    *(_QWORD *)(result + 24) = 0xFFFFFFE800000000;
    goto LABEL_49;
  }
  v27 = v18 << (24 - v17);
LABEL_45:
  *(_DWORD *)(a2 + 8) = v25;
  v33 = v27 >> 8;
  v34 = v26 - 24;
  *(_DWORD *)(result + 24) = v27;
  *(_DWORD *)(result + 28) = v26 - 24;
  if (v26 - 24 >= 0)
  {
    v35 = v27 << 24;
    goto LABEL_59;
  }
  v8 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v32 = *(unsigned int **)result;
LABEL_49:
  if ((((_DWORD)v7 - (_DWORD)v32) & ~((uint64_t)(v7 - (_QWORD)v32) >> 63) & 0xFFFFFFFC) != 0
    && v8 <= (unint64_t)v32)
  {
    v27 = bswap32(*v32);
  }
  else
  {
    v36 = 0;
    do
    {
      v37 = (unsigned __int8 *)v32 + v36;
      v38 = v27 << 8;
      *(_DWORD *)(result + 24) = v27 << 8;
      v39 = 255;
      if ((unint64_t)v32 + v36 < v7 && (unint64_t)v37 >= v8)
        v39 = *v37;
      v27 = v39 | v38;
      *(_DWORD *)(result + 24) = v27;
      ++v36;
    }
    while ((_DWORD)v36 != 4);
  }
  v40 = v32 + 1;
  *(_QWORD *)result = v40;
  v34 = v26 + 8;
  v33 |= v27 >> (v26 + 8);
  if (v26 == -8)
  {
    v41 = 0;
    v35 = 0;
    *(_DWORD *)(a2 + 12) = v33;
    *(_QWORD *)(result + 24) = 0xFFFFFFEC00000000;
    goto LABEL_63;
  }
  v35 = v27 << (24 - v26);
LABEL_59:
  *(_DWORD *)(a2 + 12) = v33;
  v41 = v35 >> 12;
  v42 = v34 - 20;
  *(_DWORD *)(result + 24) = v35;
  *(_DWORD *)(result + 28) = v34 - 20;
  if (v34 - 20 >= 0)
  {
    v43 = v35 << 20;
    goto LABEL_73;
  }
  v8 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v40 = *(unsigned int **)result;
LABEL_63:
  if ((((_DWORD)v7 - (_DWORD)v40) & ~((uint64_t)(v7 - (_QWORD)v40) >> 63) & 0xFFFFFFFC) != 0
    && v8 <= (unint64_t)v40)
  {
    v35 = bswap32(*v40);
  }
  else
  {
    v44 = 0;
    do
    {
      v45 = (unsigned __int8 *)v40 + v44;
      v46 = v35 << 8;
      *(_DWORD *)(result + 24) = v35 << 8;
      v47 = 255;
      if ((unint64_t)v40 + v44 < v7 && (unint64_t)v45 >= v8)
        v47 = *v45;
      v35 = v47 | v46;
      *(_DWORD *)(result + 24) = v35;
      ++v44;
    }
    while ((_DWORD)v44 != 4);
  }
  v48 = v40 + 1;
  *(_QWORD *)result = v48;
  v42 = v34 + 12;
  v41 |= v35 >> (v34 + 12);
  if (v34 == -12)
  {
    v49 = 0;
    v43 = 0;
    *(_DWORD *)(a2 + 16) = v41;
    *(_QWORD *)(result + 24) = 0xFFFFFFFD00000000;
    goto LABEL_77;
  }
  v43 = v35 << (20 - v34);
LABEL_73:
  *(_DWORD *)(a2 + 16) = v41;
  v49 = v43 >> 29;
  v50 = v42 - 3;
  *(_DWORD *)(result + 24) = v43;
  *(_DWORD *)(result + 28) = v42 - 3;
  if (v42 - 3 >= 0)
  {
    v51 = 8 * v43;
    goto LABEL_87;
  }
  v8 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v48 = *(unsigned int **)result;
LABEL_77:
  if ((((_DWORD)v7 - (_DWORD)v48) & ~((uint64_t)(v7 - (_QWORD)v48) >> 63) & 0xFFFFFFFC) != 0
    && v8 <= (unint64_t)v48)
  {
    v43 = bswap32(*v48);
  }
  else
  {
    v52 = 0;
    do
    {
      v53 = (unsigned __int8 *)v48 + v52;
      v54 = v43 << 8;
      *(_DWORD *)(result + 24) = v43 << 8;
      v55 = 255;
      if ((unint64_t)v48 + v52 < v7 && (unint64_t)v53 >= v8)
        v55 = *v53;
      v43 = v55 | v54;
      *(_DWORD *)(result + 24) = v43;
      ++v52;
    }
    while ((_DWORD)v52 != 4);
  }
  v56 = v48 + 1;
  *(_QWORD *)result = v56;
  v50 = v42 + 29;
  v49 |= v43 >> (v42 + 29);
  if (v42 == -29)
  {
    v57 = 0;
    v51 = 0;
    *(_DWORD *)(a2 + 20) = v49 + 1;
    *(_QWORD *)(result + 24) = 0xFFFFFFFB00000000;
    goto LABEL_91;
  }
  v51 = v43 << (3 - v42);
LABEL_87:
  *(_DWORD *)(a2 + 20) = v49 + 1;
  v57 = v51 >> 27;
  v58 = v50 - 5;
  *(_DWORD *)(result + 24) = v51;
  *(_DWORD *)(result + 28) = v50 - 5;
  if (v50 - 5 >= 0)
  {
    v59 = 32 * v51;
    goto LABEL_101;
  }
  v8 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v56 = *(unsigned int **)result;
LABEL_91:
  if ((((_DWORD)v7 - (_DWORD)v56) & ~((uint64_t)(v7 - (_QWORD)v56) >> 63) & 0xFFFFFFFC) != 0
    && v8 <= (unint64_t)v56)
  {
    v51 = bswap32(*v56);
  }
  else
  {
    v60 = 0;
    do
    {
      v61 = (unsigned __int8 *)v56 + v60;
      v62 = v51 << 8;
      *(_DWORD *)(result + 24) = v62;
      v63 = 255;
      if ((unint64_t)v56 + v60 < v7 && (unint64_t)v61 >= v8)
        v63 = *v61;
      v51 = v63 | v62;
      *(_DWORD *)(result + 24) = v51;
      ++v60;
    }
    while ((_DWORD)v60 != 4);
  }
  v58 = v50 + 27;
  *(_QWORD *)result = v56 + 1;
  v57 |= v51 >> (v50 + 27);
  v59 = v51 << (5 - v50);
  if (v50 == -27)
    v59 = 0;
LABEL_101:
  *(_DWORD *)(a2 + 24) = v57 + 1;
  *(_DWORD *)(result + 24) = v59;
  *(_DWORD *)(result + 28) = v58 - 32;
  if (v58 - 32 < 0)
  {
    v66 = *(_QWORD *)(result + 8);
    v65 = *(_QWORD *)(result + 16);
    v67 = *(unsigned int **)result;
    if ((((_DWORD)v65 - *(_DWORD *)result) & ~((uint64_t)(v65 - *(_QWORD *)result) >> 63) & 0xFFFFFFFC) != 0
      && v66 <= (unint64_t)v67)
    {
      v68 = bswap32(*v67);
      *(_DWORD *)(result + 24) = v68;
    }
    else
    {
      v69 = 0;
      v68 = v59;
      do
      {
        v70 = (unsigned __int8 *)v67 + v69;
        v71 = v68 << 8;
        *(_DWORD *)(result + 24) = v68 << 8;
        v72 = 255;
        if ((unint64_t)v67 + v69 < v65 && (unint64_t)v70 >= v66)
          v72 = *v70;
        v68 = v72 | v71;
        *(_DWORD *)(result + 24) = v68;
        ++v69;
      }
      while ((_DWORD)v69 != 4);
    }
    v73 = v67 + 1;
    *(_QWORD *)result = v67 + 1;
    v64 = (v68 >> v58) | v59;
    if (!v58)
    {
      v75 = 0;
      v59 = 0;
      v74 = 16 * v64;
      *(_QWORD *)(result + 24) = 0xFFFFFFFC00000000;
      goto LABEL_117;
    }
    v59 = v68 << -(char)v58;
    *(_DWORD *)(result + 24) = v59;
  }
  else
  {
    v58 -= 32;
    v64 = v59;
  }
  v74 = 16 * v64;
  v75 = v59 >> 28;
  *(_DWORD *)(result + 28) = v58 - 4;
  if (v58 - 4 >= 0)
  {
    v76 = 16 * v59;
    goto LABEL_128;
  }
  v66 = *(_QWORD *)(result + 8);
  v65 = *(_QWORD *)(result + 16);
  v73 = *(unsigned int **)result;
LABEL_117:
  if ((((_DWORD)v65 - (_DWORD)v73) & ~((uint64_t)(v65 - (_QWORD)v73) >> 63) & 0xFFFFFFFC) != 0
    && v66 <= (unint64_t)v73)
  {
    v59 = bswap32(*v73);
  }
  else
  {
    v77 = 0;
    do
    {
      v78 = (unsigned __int8 *)v73 + v77;
      v79 = v59 << 8;
      *(_DWORD *)(result + 24) = v79;
      v80 = 255;
      if ((unint64_t)v73 + v77 < v65 && (unint64_t)v78 >= v66)
        v80 = *v78;
      v59 = v80 | v79;
      *(_DWORD *)(result + 24) = v59;
      ++v77;
    }
    while ((_DWORD)v77 != 4);
  }
  v81 = v59 << (4 - v58);
  v82 = v58 + 28;
  *(_DWORD *)(result + 28) = v82;
  *(_QWORD *)result = v73 + 1;
  v75 |= v59 >> v82;
  if (v82)
    v76 = v81;
  else
    v76 = 0;
LABEL_128:
  v83 = 0;
  *(_DWORD *)(result + 24) = v76;
  *(_QWORD *)(a2 + 32) = v74 + v75;
  do
  {
    v85 = *(_DWORD *)(result + 24);
    v84 = *(_DWORD *)(result + 28);
    v86 = HIBYTE(v85);
    *(_DWORD *)(result + 28) = v84 - 8;
    if (v84 - 8 < 0)
    {
      v89 = *(_QWORD *)(result + 8);
      v88 = *(_QWORD *)(result + 16);
      v90 = *(unsigned int **)result;
      if ((((_DWORD)v88 - *(_DWORD *)result) & ~((uint64_t)(v88 - *(_QWORD *)result) >> 63) & 0xFFFFFFFC) == 0
        || v89 > (unint64_t)v90)
      {
        v92 = 0;
        do
        {
          v93 = (unsigned __int8 *)v90 + v92;
          v94 = v85 << 8;
          *(_DWORD *)(result + 24) = v94;
          v95 = 255;
          if ((unint64_t)v90 + v92 < v88 && (unint64_t)v93 >= v89)
            v95 = *v93;
          v85 = v95 | v94;
          *(_DWORD *)(result + 24) = v85;
          ++v92;
        }
        while ((_DWORD)v92 != 4);
      }
      else
      {
        v85 = bswap32(*v90);
      }
      v96 = v85 << (8 - v84);
      v97 = v84 + 24;
      *(_DWORD *)(result + 28) = v97;
      *(_QWORD *)result = v90 + 1;
      v86 |= v85 >> v97;
      if (v97)
        v87 = v96;
      else
        v87 = 0;
    }
    else
    {
      v87 = v85 << 8;
    }
    *(_DWORD *)(result + 24) = v87;
    *(_BYTE *)(a2 + v83++ + 40) = v86;
  }
  while (v83 != 16);
  return result;
}

void ACQEventManager::ACQEventManager(ACQEventManager *this)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  std::__thread_struct *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;

  v1 = 0;
  GetACQEventManager(void)::sACQEventManager[0] = 0;
  qword_1EE1467B0 = 0;
  do
  {
    v2 = &GetACQEventManager(void)::sACQEventManager[v1];
    *((_QWORD *)v2 + 11) = 0;
    v2[96] = 0;
    v2[120] = 0;
    *((_DWORD *)v2 + 32) = 0;
    *((_QWORD *)v2 + 4) = 0;
    *((_QWORD *)v2 + 5) = 0;
    *((_QWORD *)v2 + 3) = 0;
    *((_DWORD *)v2 + 12) = 0;
    v1 += 120;
    *((_QWORD *)v2 + 7) = 0;
    *((_QWORD *)v2 + 8) = 0;
  }
  while (v1 != 1920);
  v3 = 0;
  qword_1EE146F38 = 0;
  do
  {
    v4 = &GetACQEventManager(void)::sACQEventManager[v3];
    *((_QWORD *)v4 + 252) = 0;
    v4[2024] = 0;
    v4[2048] = 0;
    *((_DWORD *)v4 + 514) = 0;
    *((_QWORD *)v4 + 244) = 0;
    *((_DWORD *)v4 + 494) = 0;
    *(_OWORD *)&GetACQEventManager(void)::sACQEventManager[v3 + 1960] = 0uLL;
    v3 += 120;
    *((_OWORD *)v4 + 124) = 0uLL;
  }
  while (v3 != 1920);
  byte_1EE1476C0 = 0;
  *(&byte_1EE1476C0 + 122920) = 0;
  if (CACFPreferencesGetAppBooleanValue(CFSTR("acq_event_trace"), CFSTR("com.apple.coreaudio"), 0))
  {
    if (byte_1EE1656E8)
    {
      if (byte_1EE1656E0)
        std::thread::~thread((std::thread *)&byte_1EE1656D8);
      MEMORY[0x193FFDDC4](&byte_1EE1476C0);
      *(&byte_1EE1476C0 + 122920) = 0;
    }
    caulk::semaphore::semaphore((caulk::semaphore *)&byte_1EE1476C0);
    v5 = 0;
    qword_1EE1476D0 = 0;
    do
    {
      v6 = &GetACQEventManager(void)::sACQEventManager[v5];
      *((_QWORD *)v6 + 495) = 0;
      v7 = &GetACQEventManager(void)::sACQEventManager[v5 + 3928];
      v6[3968] = 0;
      v6[3992] = 0;
      *((_DWORD *)v6 + 1000) = 0;
      *((_QWORD *)v6 + 487) = 0;
      *((_OWORD *)v6 + 244) = 0uLL;
      *((_DWORD *)v6 + 980) = 0;
      v5 += 120;
      *(_OWORD *)v7 = 0uLL;
    }
    while (v5 != 122880);
    byte_1EE1656D8 = 0;
    byte_1EE1656E0 = 0;
    v8 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v8);
    v9 = (uint64_t *)operator new();
    *v9 = (uint64_t)v8;
    v9[1] = (uint64_t)&byte_1EE1476C0;
    v11 = v9;
    v10 = pthread_create((pthread_t *)&byte_1EE1656D8, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,ACQTraceState::ACQTraceState(void)::$_0>>, v9);
    if (v10)
    {
      std::__throw_system_error(v10, "thread constructor failed");
      __break(1u);
      JUMPOUT(0x18EFB7AE0);
    }
    v11 = 0;
    std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,ACQTraceState::ACQTraceState(void)::$_0>>::~unique_ptr[abi:ne180100](&v11);
    byte_1EE1656E0 = 1;
    byte_1EE1656E8 = 1;
  }
}

void std::__optional_destruct_base<ACQTraceState,false>::~__optional_destruct_base[abi:ne180100]()
{
  if (byte_1EE1656E8)
  {
    if (byte_1EE1656E0)
      std::thread::~thread((std::thread *)&byte_1EE1656D8);
    JUMPOUT(0x193FFDDC4);
  }
}

void std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,ACQTraceState::ACQTraceState(void)::$_0>>(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  ACQTraceState::HandleLogging(*(ACQTraceState **)(a1 + 8));
}

void sub_18EFB7BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,ACQTraceState::ACQTraceState(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,ACQTraceState::ACQTraceState(void)::$_0>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x193FFE220]();
      MEMORY[0x193FFE460](v4, 0x20C4093837F09);
    }
    MEMORY[0x193FFE460](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

void ACQTraceState::HandleLogging(ACQTraceState *this)
{
  NSObject *ACQLog;
  uint64_t i;
  char v4[128];

  ACQLog = GetACQLog();
  for (i = 0; ; i = ((int)i + 1) & 0x3FFLL)
  {
    caulk::semaphore::timed_wait(this, -1.0);
    LogEvent(ACQLog, (int *)this + 30 * i + 6, v4);
  }
}

uint64_t GetACQLog(void)
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;

  v1 = &unk_1EE168000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE168000;
    if (v3)
    {
      GetACQLog(void)::sACQLog = (uint64_t)os_log_create("com.apple.coreaudio", "acq");
      v1 = (_QWORD *)&unk_1EE168000;
    }
  }
  return v1[193];
}

void LogEvent(NSObject *a1, int *a2, char *a3)
{
  os_unfair_lock_s *v5;
  int v6;
  const char *v7;
  const char *v8;
  const char *v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  const char *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  os_unfair_lock_s v26;
  void *__p[2];
  char v29;
  _QWORD v30[2];
  uint64_t v31;
  _QWORD v32[10];
  char v33;
  uint64_t v34;
  tm v35;
  uint8_t buf[4];
  void **v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = (os_unfair_lock_s *)(a2 + 28);
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 28);
  if (*((_QWORD *)a2 + 1) && *((_QWORD *)a2 + 2) && *((_QWORD *)a2 + 3))
  {
    localtime_r((const time_t *)a2 + 7, &v35);
    strftime(a3, 0x80uLL, "%H:%M:%S.", &v35);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v30);
    v6 = *((unsigned __int8 *)a2 + 104);
    v7 = (const char *)*((_QWORD *)a2 + 2);
    v8 = (const char *)*((_QWORD *)a2 + 3);
    v9 = (const char *)*((_QWORD *)a2 + 1);
    v26._os_unfair_lock_opaque = *a2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"ACQ event: ", 11);
    if (v6)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"seqNum(", 7);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"), ", 3);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"tid(", 4);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), ", 3);
    v12 = strlen(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v9, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)", ", 2);
    v13 = "pre-dispatch";
    if (v26._os_unfair_lock_opaque == 1)
      v13 = "block start";
    if (v26._os_unfair_lock_opaque == 2)
      v14 = "block end";
    else
      v14 = v13;
    v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)", ", 2);
    v16 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v8, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)":", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
    v18 = strlen(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v7, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", args(", 7);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)",", 1);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)", ", 2);
    v21 = strlen(a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)a3, v21);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v31, 48);
    *(_QWORD *)((char *)&v32[2] + *(_QWORD *)(v31 - 24)) = 6;
    std::ostream::operator<<();
    if (v6 && v26._os_unfair_lock_opaque)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)", diff(", 7);
      v22 = v31;
      *(_DWORD *)((char *)v32 + *(_QWORD *)(v31 - 24)) = *(_DWORD *)((_BYTE *)v32 + *(_QWORD *)(v31 - 24)) & 0xFFFFFEFB | 4;
      *(_QWORD *)((char *)&v32[1] + *(_QWORD *)(v22 - 24)) = 2;
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"ms)", 3);
    }
    if (os_log_type_enabled(a1, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v32);
      v24 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v37 = v24;
      _os_log_impl(&dword_18EE07000, a1, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
      if (v29 < 0)
        operator delete(__p[0]);
    }
    v30[0] = *MEMORY[0x1E0DE4F50];
    v25 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v31 = v25;
    v32[0] = MEMORY[0x1E0DE4FB8] + 16;
    if (v33 < 0)
      operator delete((void *)v32[8]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x193FFE3A0](&v34);
  }
  os_unfair_lock_unlock(v5);
}

void sub_18EFB81D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  os_unfair_lock_s *v11;
  va_list va;

  va_start(va, a11);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char a2)
{
  char *v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (*((_DWORD *)v4 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v4 + 36) = v6;
  }
  *((_DWORD *)v4 + 36) = a2;
  return a1;
}

void sub_18EFB8294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void LogACQEvents()
{
  unsigned __int8 v0;
  NSObject *ACQLog;
  char v2;
  int v3;
  char v4;
  char v5;
  int v6;
  char v7;
  char v8[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  GetACQEventManager();
  do
    v0 = __ldaxr((unsigned __int8 *)GetACQEventManager(void)::sACQEventManager);
  while (__stlxr(1u, (unsigned __int8 *)GetACQEventManager(void)::sACQEventManager));
  if ((v0 & 1) == 0)
  {
    ACQLog = GetACQLog();
    v2 = atomic_load((unint64_t *)&qword_1EE1467B0);
    v3 = 16;
    do
    {
      v4 = v2 & 0xF;
      LogEvent(ACQLog, (int *)&GetACQEventManager(void)::sACQEventManager[120 * (v2 & 0xF) + 16], v8);
      v2 = v4 + 1;
      --v3;
    }
    while (v3);
    v5 = atomic_load((unint64_t *)&qword_1EE146F38);
    v6 = 16;
    do
    {
      v7 = v5 & 0xF;
      LogEvent(ACQLog, (int *)&GetACQEventManager(void)::sACQEventManager[120 * (v5 & 0xF) + 1944], v8);
      v5 = v7 + 1;
      --v6;
    }
    while (v6);
  }
}

os_workgroup_interval_t AudioWorkIntervalCreate(const char *name, os_clockid_t clock, os_workgroup_attr_t attr)
{
  caulk::mach::details *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  auoop *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  _BYTE v15[25];
  int v16;
  __int128 v17;
  __int128 v18;
  _DWORD v19[7];
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  memset(v19, 0, sizeof(v19));
  v18 = 0u;
  v17 = 0u;
  v16 = 799564724;
  if (os_workgroup_attr_set_interval_type())
    std::terminate();
  v3 = (caulk::mach::details *)os_workgroup_interval_create_with_workload_id();
  v5 = caulk::mach::details::retain_os_object(v3, v4);
  caulk::mach::details::release_os_object(0, v6);
  v13[0] = MEMORY[0x1E0DDB760] + 16;
  v13[1] = v5;
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  v8 = (auoop *)caulk::mach::details::release_os_object(0, v7);
  v9 = auoop::gWorkgroupManager(v8);
  v20[0] = &off_1E2916020;
  v20[1] = v13;
  v21 = v20;
  auoop::WorkgroupManager_Base::mutateWorkgroups(v9, (uint64_t)v20);
  v10 = v21;
  if (v21 == v20)
  {
    v11 = 4;
    v10 = v20;
    goto LABEL_6;
  }
  if (v21)
  {
    v11 = 5;
LABEL_6:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)v13);
  return (os_workgroup_interval_t)v3;
}

void sub_18EFB84E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a2);
  v5 = *(_QWORD **)(v3 - 48);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 72);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::optional<std::string>>::push_back[abi:ne180100](uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  void **v5;
  __int128 v6;
  char *v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  void **v17;
  __int128 v18;
  void **v19;

  v5 = *(void ***)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(void ***)a1;
    v9 = ((uint64_t)v5 - *(_QWORD *)a1) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(32 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[32 * v9];
    *v14 = 0;
    v14[24] = 0;
    if (*((_BYTE *)a2 + 24))
    {
      *(_OWORD *)v14 = *a2;
      *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      v14[24] = 1;
      v8 = *(void ***)a1;
      v5 = *(void ***)(a1 + 8);
    }
    v15 = &v13[32 * v12];
    v7 = v14 + 32;
    if (v5 == v8)
    {
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      v16 = &v13[32 * v9];
      do
      {
        *(v16 - 32) = 0;
        v16 -= 32;
        v17 = v5 - 4;
        v16[24] = 0;
        if (*((_BYTE *)v5 - 8))
        {
          v18 = *(_OWORD *)v17;
          *((_QWORD *)v16 + 2) = *(v5 - 2);
          *(_OWORD *)v16 = v18;
          *(v5 - 3) = 0;
          *(v5 - 2) = 0;
          *v17 = 0;
          *(v14 - 8) = 1;
        }
        v14 = v16;
        v5 -= 4;
      }
      while (v17 != v8);
      v8 = *(void ***)a1;
      v19 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v15;
      while (v19 != v8)
      {
        if (*((_BYTE *)v19 - 8) && *((char *)v19 - 9) < 0)
          operator delete(*(v19 - 4));
        v19 -= 4;
      }
    }
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_BYTE *)v5 = 0;
    *((_BYTE *)v5 + 24) = 0;
    if (*((_BYTE *)a2 + 24))
    {
      v6 = *a2;
      v5[2] = (void *)*((_QWORD *)a2 + 2);
      *(_OWORD *)v5 = v6;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *((_BYTE *)v5 + 24) = 1;
    }
    v7 = (char *)(v5 + 4);
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void std::vector<std::vector<std::string>>::push_back[abi:ne180100](void ***a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  void **v15;
  __int128 v16;
  void **v17;
  void **v18;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a1);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = 3 * v8;
    v11 = (char *)operator new(24 * v8);
    v12 = &v11[24 * v7];
    v13 = (void **)&v11[8 * v10];
    *(_OWORD *)v12 = *(_OWORD *)a2;
    *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = (void **)(v12 + 24);
    v14 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = (void **)v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      do
      {
        *((_QWORD *)v12 - 3) = 0;
        *((_QWORD *)v12 - 2) = 0;
        v12 -= 24;
        *((_QWORD *)v12 + 2) = 0;
        v16 = *(_OWORD *)(v15 - 3);
        v15 -= 3;
        *(_OWORD *)v12 = v16;
        *((_QWORD *)v12 + 2) = v15[2];
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
      }
      while (v15 != v14);
      v15 = *a1;
      v17 = a1[1];
      *a1 = (void **)v12;
      a1[1] = v6;
      a1[2] = v13;
      while (v17 != v15)
      {
        v17 -= 3;
        v18 = v17;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
      }
    }
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    *(_OWORD *)v4 = *(_OWORD *)a2;
    v4[2] = *(void **)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = v4 + 3;
  }
  a1[1] = v6;
}

void AIFFAudioStream::~AIFFAudioStream(AIFFAudioStream *this)
{
  AudioFileStreamObject::~AudioFileStreamObject(this);
  JUMPOUT(0x193FFE460);
}

uint64_t AIFFAudioStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  void (*v9)(_QWORD, _QWORD, uint64_t, unsigned int *);
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  uint64_t result;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  signed int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, unsigned int *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  int8x16_t v53;
  uint64_t v54;
  void (*v55)(_QWORD, _QWORD, uint64_t, unsigned int *);
  void (*v56)(_QWORD, _QWORD, uint64_t, unsigned int *);
  uint64_t v57;
  void (*v58)(_QWORD, _QWORD, uint64_t, unsigned int *);
  unsigned int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD, _QWORD, uint64_t, unsigned int *);
  uint64_t v67;
  void (*v68)(_QWORD, _QWORD, uint64_t, unsigned int *);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;

  v4 = (unsigned int *)(a1 + 362);
  v5 = *(_DWORD *)(a1 + 236);
  if (v5 <= 99)
  {
    if (v5 > 69)
    {
      if (v5 != 70)
      {
        if (v5 == 87)
        {
          v14 = *(_DWORD *)(a1 + 256);
          v15 = *(unsigned __int8 **)(a1 + 264);
          goto LABEL_32;
        }
        goto LABEL_29;
      }
      v10 = *(_DWORD *)(a1 + 256);
      v8 = *(_QWORD *)(a1 + 8);
      v11 = *(unsigned __int8 **)(a1 + 264);
    }
    else
    {
      if (v5 == -1)
        return 0;
      if (v5)
        goto LABEL_29;
      v8 = *(_QWORD *)(a1 + 8);
      v77 = 1;
      if (!*(_BYTE *)(v8 + 104))
      {
        *(_BYTE *)(v8 + 104) = 1;
        v9 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v8 + 24);
        if (v9)
        {
          v9(*(_QWORD *)(v8 + 40), *(unsigned int *)(v8 + 8), 1717988724, &v77);
          v8 = *(_QWORD *)(a1 + 8);
        }
      }
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(v8 + 96);
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      v10 = 12;
      *(_DWORD *)(a1 + 256) = 12;
      v11 = (unsigned __int8 *)(a1 + 332);
      *(_QWORD *)(a1 + 264) = a1 + 332;
    }
    v77 = v10;
    StreamBuffer::Copy((_QWORD *)(v8 + 72), &v77, v11);
    v22 = v77;
    v23 = *(_DWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 264) += v77;
    v24 = v23 - v22;
    *(_DWORD *)(a1 + 256) = v24;
    if (v24)
    {
      result = 0;
      v27 = 70;
      goto LABEL_73;
    }
    v25 = *(_DWORD *)(a1 + 340);
    v26 = bswap32(v25);
    *(_DWORD *)(a1 + 340) = v26;
    if (v26 == 1095321155 || v26 == 1095321158)
    {
      *(_DWORD *)(a1 + 16) = v26;
      *(_BYTE *)(a1 + 400) = v25 == 1128679745;
      *(_QWORD *)(a1 + 296) += 12;
      goto LABEL_66;
    }
    *(_BYTE *)(a1 + 177) = 1;
    *(_DWORD *)(a1 + 236) = -1;
    return 1685348671;
  }
  else
  {
    if (v5 <= 118)
    {
      if (v5 == 100)
      {
        v21 = *(_DWORD *)(a1 + 256);
        v13 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_38;
      }
      if (v5 == 104)
      {
        v12 = *(_DWORD *)(a1 + 256);
        v13 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_62;
      }
      goto LABEL_29;
    }
    if (v5 != 119)
    {
      if (v5 == 159)
      {
        v18 = *(_DWORD *)(a1 + 256);
        v19 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_46;
      }
      if (v5 == 166)
      {
        v6 = *(_DWORD *)(a1 + 256);
        v7 = *(unsigned __int8 **)(a1 + 264);
LABEL_42:
        v77 = v6;
        StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), &v77, v7);
        v37 = v77;
        v38 = *(_DWORD *)(a1 + 256);
        *(_QWORD *)(a1 + 264) += v77;
        v39 = v38 - v37;
        *(_DWORD *)(a1 + 256) = v39;
        if (v39)
        {
          result = 0;
          v27 = 166;
          goto LABEL_73;
        }
        *(_DWORD *)(a1 + 128) = *(_DWORD *)(a1 + 348);
        v40 = *(_QWORD *)(a1 + 8);
        v77 = 1;
        *(_BYTE *)(v40 + 108) = 1;
        v41 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(v40 + 24);
        if (!v41)
          goto LABEL_65;
        v42 = *(_QWORD *)(v40 + 40);
        v43 = *(unsigned int *)(v40 + 8);
        v44 = 1835493731;
LABEL_50:
        v41(v42, v43, v44, &v77);
        while (1)
        {
          do
          {
            while (1)
            {
              while (1)
              {
LABEL_65:
                v62 = *(_QWORD *)(a1 + 296) + *(int *)(a1 + 348);
                *(_QWORD *)(a1 + 296) = v62;
                *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) = v62;
LABEL_66:
                v14 = 8;
                *(_DWORD *)(a1 + 256) = 8;
                v15 = (unsigned __int8 *)(a1 + 344);
                *(_QWORD *)(a1 + 264) = a1 + 344;
LABEL_32:
                v77 = v14;
                StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), &v77, v15);
                v28 = v77;
                v29 = *(_DWORD *)(a1 + 256);
                *(_QWORD *)(a1 + 264) += v77;
                v30 = v29 - v28;
                *(_DWORD *)(a1 + 256) = v30;
                if (v30)
                {
                  result = 0;
                  v27 = 87;
                  goto LABEL_73;
                }
                v31 = bswap32(*(_DWORD *)(a1 + 344));
                *(_DWORD *)(a1 + 344) = v31;
                v32 = bswap32(*(_DWORD *)(a1 + 348));
                *(_DWORD *)(a1 + 348) = v32;
                *(_QWORD *)(a1 + 296) += 8;
                if (v31 <= 1397968451)
                  break;
                if (v31 == 2002876005)
                {
                  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 120), v32, 0);
                  v6 = *(_DWORD *)(a1 + 348);
                  *(_DWORD *)(a1 + 256) = v6;
                  v7 = *(unsigned __int8 **)(a1 + 120);
                  *(_QWORD *)(a1 + 264) = v7;
                  goto LABEL_42;
                }
                if (v31 == 1397968452)
                {
                  *(_DWORD *)(a1 + 384) = 1397968452;
                  *(_DWORD *)(a1 + 388) = v32;
                  v16 = 8;
                  *(_DWORD *)(a1 + 256) = 8;
                  v17 = (unsigned __int8 *)(a1 + 392);
                  *(_QWORD *)(a1 + 264) = a1 + 392;
                  goto LABEL_53;
                }
              }
              if (v31 != 1128808782)
                break;
              CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 136), v32, 0);
              v18 = *(_DWORD *)(a1 + 348);
              *(_DWORD *)(a1 + 256) = v18;
              v19 = *(unsigned __int8 **)(a1 + 136);
              *(_QWORD *)(a1 + 264) = v19;
LABEL_46:
              v77 = v18;
              StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), &v77, v19);
              v45 = v77;
              v46 = *(_DWORD *)(a1 + 256);
              *(_QWORD *)(a1 + 264) += v77;
              v47 = v46 - v45;
              *(_DWORD *)(a1 + 256) = v47;
              if (v47)
              {
                result = 0;
                v27 = 159;
                goto LABEL_73;
              }
              v48 = *(unsigned int *)(a1 + 348);
              *(_DWORD *)(a1 + 144) = v48;
              AudioChannelLayout_BtoN(*(AudioChannelLayout **)(a1 + 136), v48);
              v49 = *(_QWORD *)(a1 + 8);
              v77 = 1;
              if (!*(_BYTE *)(v49 + 109))
              {
                *(_BYTE *)(v49 + 109) = 1;
                v41 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(v49 + 24);
                if (v41)
                {
                  v42 = *(_QWORD *)(v49 + 40);
                  v43 = *(unsigned int *)(v49 + 8);
                  v44 = 1668112752;
                  goto LABEL_50;
                }
              }
            }
          }
          while (v31 != 1129270605);
          v13 = (unsigned __int8 *)(a1 + 360);
          if (*(_BYTE *)(a1 + 400))
          {
            v21 = 22;
            *(_DWORD *)(a1 + 256) = 22;
            *(_QWORD *)(a1 + 264) = v13;
LABEL_38:
            v77 = v21;
            StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), &v77, v13);
            v33 = v77;
            v34 = *(_DWORD *)(a1 + 256);
            *(_QWORD *)(a1 + 264) += v77;
            v35 = v34 - v33;
            *(_DWORD *)(a1 + 256) = v35;
            if (v35)
            {
              result = 0;
              v27 = 100;
              goto LABEL_73;
            }
            *(int8x8_t *)(a1 + 352) = vrev32_s8(*(int8x8_t *)(a1 + 352));
            *(_WORD *)(a1 + 360) = bswap32(*(unsigned __int16 *)(a1 + 360)) >> 16;
            *v4 = bswap32(*v4);
            *(_WORD *)(a1 + 366) = bswap32(*(unsigned __int16 *)(a1 + 366)) >> 16;
            v36 = bswap32(v4[4]);
          }
          else
          {
            v12 = 18;
            *(_DWORD *)(a1 + 256) = 18;
            *(_QWORD *)(a1 + 264) = v13;
LABEL_62:
            v77 = v12;
            StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), &v77, v13);
            v59 = v77;
            v60 = *(_DWORD *)(a1 + 256);
            *(_QWORD *)(a1 + 264) += v77;
            v61 = v60 - v59;
            *(_DWORD *)(a1 + 256) = v61;
            if (v61)
            {
              result = 0;
              v27 = 104;
              goto LABEL_73;
            }
            *(int8x8_t *)(a1 + 352) = vrev32_s8(*(int8x8_t *)(a1 + 352));
            *(_WORD *)(a1 + 360) = bswap32(*(unsigned __int16 *)(a1 + 360)) >> 16;
            *v4 = bswap32(*v4);
            *(_WORD *)(a1 + 366) = bswap32(*(unsigned __int16 *)(a1 + 366)) >> 16;
            v36 = 1313820229;
          }
          v4[4] = v36;
        }
      }
LABEL_29:
      result = 0;
      v27 = -1;
      goto LABEL_73;
    }
    v16 = *(_DWORD *)(a1 + 256);
    v17 = *(unsigned __int8 **)(a1 + 264);
LABEL_53:
    v77 = v16;
    StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), &v77, v17);
    v50 = v77;
    v51 = *(_DWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 264) += v77;
    v52 = v51 - v50;
    *(_DWORD *)(a1 + 256) = v52;
    if (v52)
    {
      result = 0;
      v27 = 119;
LABEL_73:
      *(_DWORD *)(a1 + 236) = v27;
    }
    else
    {
      v53 = vrev32q_s8(*(int8x16_t *)(a1 + 384));
      *(int8x16_t *)(a1 + 384) = v53;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 296) + v53.u32[2] + 8;
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 96))(a1, *(int *)(a1 + 348) - (unint64_t)v53.u32[2] - 8);
      if (*(_WORD *)(a1 + 360))
      {
        FillDescriptionFromCommonChunk(a1 + 352, (_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 128), *(void **)(a1 + 120));
        v54 = *(_QWORD *)(a1 + 8);
        v77 = 1;
        if (!*(_BYTE *)(v54 + 105))
        {
          *(_BYTE *)(v54 + 105) = 1;
          v55 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v54 + 24);
          if (v55)
          {
            v55(*(_QWORD *)(v54 + 40), *(unsigned int *)(v54 + 8), 1684434292, &v77);
            v54 = *(_QWORD *)(a1 + 8);
          }
        }
        v77 = 1;
        v56 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v54 + 24);
        if (v56)
        {
          v56(*(_QWORD *)(v54 + 40), *(unsigned int *)(v54 + 8), 1650683508, &v77);
          v57 = *(_QWORD *)(a1 + 8);
          v58 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v57 + 24);
          v77 = 1;
          if (v58)
            v58(*(_QWORD *)(v57 + 40), *(unsigned int *)(v57 + 8), 1685022310, &v77);
        }
        else
        {
          v77 = 1;
        }
        v63 = *(_DWORD *)(a1 + 40);
        if (v63)
        {
          *(_DWORD *)(a1 + 112) = v63;
          v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v64 / *(unsigned int *)(a1 + 40));
          v65 = *(_QWORD *)(a1 + 8);
          v77 = 1;
          v66 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v65 + 24);
          if (v66)
            v66(*(_QWORD *)(v65 + 40), *(unsigned int *)(v65 + 8), 1885564532, &v77);
        }
        v67 = *(_QWORD *)(a1 + 8);
        v77 = 1;
        if (!*(_DWORD *)(v67 + 112))
        {
          *(_DWORD *)(v67 + 112) = 1;
          v68 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v67 + 24);
          if (v68)
          {
            v68(*(_QWORD *)(v67 + 40), *(unsigned int *)(v67 + 8), 1919247481, &v77);
            v67 = *(_QWORD *)(a1 + 8);
          }
        }
        v69 = 0;
        *(_QWORD *)a2 = a1;
        *(_OWORD *)(a2 + 8) = xmmword_18F116F70;
        v70 = *(_QWORD *)(v67 + 88);
        v71 = *(_QWORD *)(v67 + 96);
        v72 = v70 + *(unsigned int *)(v67 + 80);
        v73 = v71 < v70 || v72 <= v71;
        v74 = v73;
        v75 = v72 - v71;
        if (!v73 && v75)
          v69 = *(_QWORD *)(v67 + 72) + (v71 - v70);
        result = 0;
        *(_QWORD *)(a2 + 32) = v69;
        if (v74)
          v76 = 0;
        else
          v76 = v75;
        *(_DWORD *)(a2 + 24) = v76;
      }
      else
      {
        *(_DWORD *)(a1 + 236) = -1;
        return 1869640813;
      }
    }
  }
  return result;
}

uint64_t AudioUnitPropertyMarshaller::CreateMarshaller(AudioUnitPropertyMarshaller *this)
{
  int v1;
  uint64_t result;
  uint64_t (**v3)();

  v1 = (int)this;
  result = 0;
  if (v1 > 2199)
  {
    if ((v1 - 2200) < 2 || v1 == 3007)
    {
LABEL_8:
      result = operator new();
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_BYTE *)(result + 32) = 0;
      v3 = &off_1E29077A0;
    }
    else
    {
      if (v1 != 3099)
        return result;
      result = operator new();
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_BYTE *)(result + 32) = 0;
      v3 = &off_1E2906D70;
    }
  }
  else
  {
    switch(v1)
    {
      case 0:
      case 16:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v3 = (uint64_t (**)())&off_1E29086D0;
        break;
      case 1:
      case 5:
      case 6:
      case 7:
      case 9:
      case 10:
      case 15:
      case 17:
      case 18:
      case 23:
      case 25:
      case 27:
      case 28:
      case 29:
      case 31:
      case 33:
      case 34:
      case 35:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
        return result;
      case 2:
      case 12:
      case 20:
        goto LABEL_12;
      case 3:
      case 32:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v3 = &off_1E2906EC0;
        break;
      case 4:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v3 = (uint64_t (**)())&off_1E29096A0;
        break;
      case 8:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v3 = &off_1E29075A0;
        break;
      case 11:
      case 14:
      case 21:
      case 22:
      case 26:
        goto LABEL_8;
      case 13:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v3 = &off_1E2906CB0;
        break;
      case 19:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v3 = (uint64_t (**)())&off_1E29090D0;
        break;
      case 24:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v3 = (uint64_t (**)())&off_1E29081E0;
        break;
      case 30:
      case 54:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v3 = &off_1E2903B00;
        break;
      case 36:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v3 = (uint64_t (**)())&off_1E2905B60;
        break;
      case 52:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v3 = &off_1E2906DD0;
        break;
      case 53:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v3 = &off_1E2904A30;
        break;
      default:
        if (v1 != 61)
          return result;
LABEL_12:
        result = operator new();
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_BYTE *)(result + 32) = 0;
        v3 = &off_1E29076A0;
        break;
    }
  }
  *(_QWORD *)result = v3;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void TArrayMarshaller<AudioUnitMeterValue>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t TArrayMarshaller<AudioUnitMeterValue>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7;
  const void *Ptr;

  v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFF0);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void MarshalAUPreset::~MarshalAUPreset(MarshalAUPreset *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<AUPreset>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 16)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 16;
}

BOOL TMarshaller<AUPreset>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x10) != 0x10)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 0x10uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

void MarshalAUPreset::SerializeT(MarshalAUPreset *this, CASerializer *a2, const AUPreset *a3)
{
  CFStringRef presetName;

  CASerializer::Write(a2, a3);
  operator<<();
  presetName = a3->presetName;
  if (presetName)
  {
    if (*((_BYTE *)this + 32))
      CFRelease(presetName);
  }
}

void MarshalAUPreset::DeserializeT(MarshalAUPreset *this, CADeserializer *a2, AUPreset *a3)
{
  CADeserializer::Read(a2, a3);
  operator>>();
  Marshaller::AddCreatedCFObject(this, a3->presetName);
}

void MarshalAUPresetArray::~MarshalAUPresetArray(MarshalAUPresetArray *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<__CFArray const*>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 8;
}

BOOL TMarshaller<__CFArray const*>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

void MarshalAUPresetArray::SerializeT(MarshalAUPresetArray *this, CASerializer *a2, CFArrayRef *a3)
{
  unint64_t i;
  const void *ValueAtIndex;
  unsigned int Count;

  Count = CFArrayGetCount(*a3);
  CASerializer::Write(a2, &Count);
  if (Count)
  {
    for (i = 0; i < Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*a3, i);
      CASerializer::Write(a2, ValueAtIndex);
      operator<<();
    }
  }
  if (*a3)
  {
    if (*((_BYTE *)this + 32))
      CFRelease(*a3);
  }
}

void MarshalAUPresetArray::DeserializeT(MarshalAUPresetArray *this, CADeserializer *a2, const __CFArray **a3)
{
  __CFArray *v6;
  unsigned int v7;
  void *v8;
  CFArrayCallBacks v9;
  CFIndex capacity;

  LODWORD(capacity) = 0;
  CADeserializer::Read(a2, &capacity);
  *(_OWORD *)&v9.version = xmmword_1E2920D60;
  *(_OWORD *)&v9.release = *(_OWORD *)&off_1E2920D70;
  v9.equal = 0;
  v6 = CFArrayCreateMutable(0, capacity, &v9);
  if ((_DWORD)capacity)
  {
    v7 = 0;
    do
    {
      v8 = (void *)operator new();
      CADeserializer::Read(a2, v8);
      operator>>();
      CFArrayAppendValue(v6, v8);
      ++v7;
    }
    while (v7 < capacity);
  }
  *a3 = v6;
  Marshaller::AddCreatedCFObject(this, v6);
}

void MarshalAUPresetArray::ReleaseAUPresetArrayElement(MarshalAUPresetArray *this, CFTypeRef *a2, const void *a3)
{
  CFRelease(a2[1]);
  JUMPOUT(0x193FFE460);
}

void MarshalAudioChannelLayout::~MarshalAudioChannelLayout(MarshalAudioChannelLayout *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x193FFE460);
}

uint64_t MarshalAudioChannelLayout::Serialize(MarshalAudioChannelLayout *this, CASerializer *a2, unsigned int *a3, unsigned int a4)
{
  if (a4 < 0xC)
    return 0;
  if (20 * (unint64_t)a3[2] + 12 > a4)
    return 0;
  operator<<();
  return 1;
}

uint64_t MarshalAudioChannelLayout::Deserialize(MarshalAudioChannelLayout *this, CADeserializer *a2, void **a3, unsigned int *a4)
{
  void *v7;
  size_t v8;
  BOOL v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  size_t v14;
  void *__src;

  v14 = 0;
  __src = 0;
  if (!Read(a2, (AudioChannelLayout **)&__src, &v14))
    return 0;
  v7 = __src;
  v8 = 20 * *((unsigned int *)__src + 2) + 12;
  if (*a4)
    v9 = v8 > *a4;
  else
    v9 = 0;
  v10 = !v9 && v14 >= v8;
  v11 = !v10;
  if (v10)
  {
    Marshaller::CheckDest(this, a3, a4, 20 * *((unsigned int *)__src + 2) + 12);
    memcpy(*a3, __src, v8);
    v7 = __src;
  }
  v12 = v11 ^ 1u;
  free(v7);
  return v12;
}

void TArrayMarshaller<AUChannelInfo>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t TArrayMarshaller<AUChannelInfo>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7;
  const void *Ptr;

  v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFFC);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TSimpleMarshaller<AudioStreamBasicDescription>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<AudioStreamBasicDescription>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 40)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 40;
}

BOOL TMarshaller<AudioStreamBasicDescription>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if (*a4 != 40 && *a4 != 0)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 0x28uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<AudioStreamBasicDescription>::SerializeT()
{
  return operator<<();
}

uint64_t TSimpleMarshaller<AudioStreamBasicDescription>::DeserializeT()
{
  return operator>>();
}

void MarshalAudioUnitParameterInfo::~MarshalAudioUnitParameterInfo(MarshalAudioUnitParameterInfo *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<AudioUnitParameterInfo>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 104)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 104;
}

BOOL TMarshaller<AudioUnitParameterInfo>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if (*a4 != 104 && *a4 != 0)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 0x68uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t MarshalAudioUnitParameterInfo::SerializeT(MarshalAudioUnitParameterInfo *this, CASerializer *a2, const AudioUnitParameterInfo *a3)
{
  CFStringRef unitName;
  CFStringRef *p_cfNameString;
  AudioUnitParameterUnit unit;
  uint64_t v10;

  CASerializer::Write(a2, a3);
  if (a3->unit == kAudioUnitParameterUnit_CustomUnit)
  {
    operator<<();
    unitName = a3->unitName;
    if (unitName && *((_BYTE *)this + 32))
      CFRelease(unitName);
  }
  else
  {
    v10 = 0;
    operator<<();
  }
  CASerializer::Write(a2, &a3->clumpID);
  p_cfNameString = &a3->cfNameString;
  operator<<();
  if ((a3->flags & 0x10) != 0 && *p_cfNameString && *((_BYTE *)this + 32))
    CFRelease(*p_cfNameString);
  unit = a3->unit;
  CASerializer::Write(a2, &unit);
  CASerializer::Write(a2, &a3->minValue);
  CASerializer::Write(a2, &a3->maxValue);
  CASerializer::Write(a2, &a3->defaultValue);
  return CASerializer::Write(a2, &a3->flags);
}

uint64_t MarshalAudioUnitParameterInfo::DeserializeT(MarshalAudioUnitParameterInfo *this, CADeserializer *a2, AudioUnitParameterInfo *a3)
{
  uint64_t result;
  AudioUnitParameterUnit v7;

  CADeserializer::Read(a2, a3);
  operator>>();
  Marshaller::AddCreatedCFObject(this, a3->unitName);
  CADeserializer::Read(a2, &a3->clumpID);
  operator>>();
  Marshaller::AddCreatedCFObject(this, a3->cfNameString);
  v7 = kAudioUnitParameterUnit_Generic;
  CADeserializer::Read(a2, &v7);
  a3->unit = v7;
  CADeserializer::Read(a2, &a3->minValue);
  CADeserializer::Read(a2, &a3->maxValue);
  CADeserializer::Read(a2, &a3->defaultValue);
  result = CADeserializer::Read(a2, &a3->flags);
  a3->flags |= 0x10u;
  return result;
}

void TPODMarshaller<AudioUnitParameterHistoryInfo>::~TPODMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<AudioUnitParameterHistoryInfo>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 8;
}

BOOL TMarshaller<AudioUnitParameterHistoryInfo>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TPODMarshaller<AudioUnitParameterHistoryInfo>::SerializeT(int a1, CASerializer *this, void *a3)
{
  return CASerializer::Write(this, a3);
}

uint64_t TPODMarshaller<AudioUnitParameterHistoryInfo>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

void TCFMarshaller<__CFString const*>::~TCFMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<__CFString const*>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 8;
}

BOOL TMarshaller<__CFString const*>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

void TCFMarshaller<__CFString const*>::SerializeT(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  operator<<();
  if (*a3)
  {
    if (*(_BYTE *)(a1 + 32))
      CFRelease(*a3);
  }
}

void TCFMarshaller<__CFString const*>::DeserializeT(Marshaller *a1, uint64_t a2, const void **a3)
{
  operator>>();
  Marshaller::AddCreatedCFObject(a1, *a3);
}

void TArrayMarshaller<AudioUnitFrequencyResponseBin>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t TArrayMarshaller<AudioUnitFrequencyResponseBin>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7;
  const void *Ptr;

  v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFF0);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TSimpleMarshaller<double>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<double>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 8;
}

BOOL TMarshaller<double>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<double>::SerializeT(int a1, CASerializer *this, void *a3)
{
  return CASerializer::Write(this, a3);
}

uint64_t TSimpleMarshaller<double>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

void DSPGraph::FileInjector::~FileInjector(void **this)
{
  void **v2;

  *this = off_1E290C6A0;
  v2 = this + 10;
  std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 2));
}

{
  void **v2;

  *this = off_1E290C6A0;
  v2 = this + 10;
  std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 2));
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::FileInjector::ClassName(DSPGraph::FileInjector *this)
{
  return "FileInjector";
}

uint64_t DSPGraph::FileInjector::print(uint64_t result, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v6;

  if (a3 >= 5)
  {
    v4 = a4;
    v6 = result;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a2, a4, 1);
    v4 += 4;
    DSPGraph::printi(a2, v4, "wire %p\n", *(const void **)(v6 + 8));
    return DSPGraph::printi(a2, v4, "file data pos %u\n", *(_DWORD *)(v6 + 32));
  }
  return result;
}

void std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (_QWORD *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          VPTimeFreqConverter_Dispose(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void DSPGraph::FileRecorder::~FileRecorder(void **this)
{
  void *v2;
  void **v3;

  *this = off_1E290C6D8;
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 9));
  v3 = this + 6;
  std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = this[2];
  this[2] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
}

{
  void *v2;
  void **v3;

  *this = off_1E290C6D8;
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 9));
  v3 = this + 6;
  std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = this[2];
  this[2] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::FileRecorder::ClassName(DSPGraph::FileRecorder *this)
{
  return "FileRecorder";
}

uint64_t DSPGraph::FileRecorder::print(uint64_t result, _QWORD *a2, int a3, uint64_t a4)
{
  int v4;
  uint64_t v6;

  if (a3 >= 5)
  {
    v4 = a4;
    v6 = result;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a2, a4, 1);
    return DSPGraph::printi(a2, v4 + 4, "wire %p\n", *(const void **)(v6 + 8));
  }
  return result;
}

_QWORD *std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::reserve(_QWORD *result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int64x2_t v10;
  char *v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  _QWORD *v15;

  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    v2 = (char **)result;
    v3 = result[1] - *result;
    v15 = result + 2;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(a2);
    v7 = *v2;
    v6 = v2[1];
    if (v6 == *v2)
    {
      v10 = vdupq_n_s64((unint64_t)v6);
      v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v9 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v6 != v7);
      v10 = *(int64x2_t *)v2;
    }
    *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v13 = v10;
    v11 = v2[2];
    v2[2] = &v4[8 * v5];
    v14 = v11;
    v12 = v10.i64[0];
    return (_QWORD *)std::__split_buffer<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  _QWORD *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD **)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      VPTimeFreqConverter_Dispose(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void DSPGraph::FileInjector::inject(DSPGraph::FileInjector *this, unsigned int a2)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  unsigned int v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  DSPSplitComplex v25;

  v4 = *((_DWORD *)this + 8);
  if (!v4)
  {
    kdebug_trace();
    v4 = *((_DWORD *)this + 8);
  }
  v5 = *((_DWORD *)this + 10);
  v6 = (_QWORD *)*((_QWORD *)this + 1);
  if (v5 <= v4)
  {
    v18 = v6[7];
    v19 = *(_DWORD **)(v18 + 80);
    if (v19 && *v19)
    {
      v20 = 0;
      v21 = *((_DWORD *)this + 9) * a2;
      v22 = 4;
      do
      {
        bzero(*(void **)&v19[v22], v21);
        ++v20;
        v19 = *(_DWORD **)(v18 + 80);
        v22 += 4;
      }
      while (v20 < *v19);
    }
  }
  else
  {
    v7 = v6[15];
    if (*(_DWORD *)(v7 + 8) == 1718773105)
    {
      if (*(_DWORD *)(v7 + 40) != a2)
      {
        std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v24, "inject");
        std::string::basic_string[abi:ne180100]<0>(&v23, "inNumFrames != blockSize.");
        DSPGraph::ThrowException(1718188065, (__int128 *)&v25, 160, &v24, &v23);
      }
      v8 = (_DWORD *)*((_QWORD *)this + 2);
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6[4] + 16) + 8) + 16);
      v10 = *(_DWORD *)(v9 + 268);
      if (v10 == 1)
        v10 = *(_DWORD *)(v9 + 272);
      if (*v8)
      {
        v11 = 0;
        v12 = *(_QWORD *)(v6[7] + 80);
        v13 = *((_DWORD *)this + 9) * v4;
        v14 = v10;
        v15 = 4;
        do
        {
          v16 = (float *)(*(_QWORD *)(v12 + v15 * 4) + 4 * v14);
          v25.realp = *(float **)(v12 + v15 * 4);
          v25.imagp = v16;
          VPTimeFreqConverter_Analyze(*(_QWORD *)(*((_QWORD *)this + 10) + 8 * v11++), (const void *)(*(_QWORD *)&v8[v15] + v13), &v25);
          v15 += 4;
        }
        while (v11 < *v8);
        v4 = *((_DWORD *)this + 8);
        v5 = *((_DWORD *)this + 10);
      }
      v17 = v4 + a2;
      *((_DWORD *)this + 8) = v17;
    }
    else
    {
      if (v5 - v4 < a2)
        a2 = v5 - v4;
      DSPGraph::SimpleABL::copy((unsigned int **)this + 2, (DSPGraph::SimpleABL *)(v6[7] + 80), *((_DWORD *)this + 9) * v4, 0, *((_DWORD *)this + 9) * a2, 1);
      v17 = *((_DWORD *)this + 8) + a2;
      *((_DWORD *)this + 8) = v17;
      v5 = *((_DWORD *)this + 10);
    }
    if (v17 == v5)
    {
      kdebug_trace();
      v17 = *((_DWORD *)this + 8);
      v5 = *((_DWORD *)this + 10);
    }
    if (v17 >= v5)
    {
      if (*((_BYTE *)this + 72))
        *((_DWORD *)this + 8) = 0;
    }
  }
}

void sub_18EFBA8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

_BYTE *DSPGraph::FileRecorder::record(_BYTE *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  DSPSplitComplex v16;

  if (this[88])
  {
    v2 = (uint64_t)this;
    this = (_BYTE *)*((_QWORD *)this + 2);
    if (this)
    {
      v4 = *(_QWORD *)(v2 + 8);
      v5 = *(_QWORD *)(v4 + 56);
      v6 = *(double *)(v5 + 8);
      v7 = (uint64_t)v6;
      if (*(_QWORD *)(v2 + 48) == *(_QWORD *)(v2 + 56))
      {
        return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)this + 96))(this, a2, *(_QWORD *)(v5 + 80), *(unsigned __int8 *)(v2 + 89), (uint64_t)v6);
      }
      else
      {
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 16) + 8) + 16);
        v9 = *(_DWORD *)(v8 + 268);
        if (v9 == 1)
          v9 = *(_DWORD *)(v8 + 272);
        v10 = *(_DWORD **)(v5 + 80);
        v11 = *(_QWORD *)(v2 + 72);
        if (*v10)
        {
          v12 = 0;
          v13 = v9;
          v14 = 4;
          do
          {
            v15 = (float *)(*(_QWORD *)&v10[v14] + 4 * v13);
            v16.realp = *(float **)&v10[v14];
            v16.imagp = v15;
            VPTimeFreqConverter_Synthesize(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v12++), &v16, *(void **)(v11 + v14 * 4));
            v14 += 4;
          }
          while (v12 < *v10);
          this = *(_BYTE **)(v2 + 16);
        }
        return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 96))(this, a2, v11, *(unsigned __int8 *)(v2 + 89), v7);
      }
    }
  }
  return this;
}

const char *DSPGraph::Port::ClassName(DSPGraph::Port *this)
{
  return "Port";
}

uint64_t DSPGraph::Port::print(uint64_t result, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v6;
  const void *v7;

  if (a3 >= 3)
  {
    v4 = a4;
    v6 = result;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a2, a4, 1);
    v4 += 4;
    DSPGraph::printi(a2, v4, "box %p\n", *(const void **)(v6 + 8));
    DSPGraph::printi(a2, v4, "index %u\n", *(_DWORD *)(v6 + 24));
    v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    return DSPGraph::printi(a2, v4, "wire %p\n", v7);
  }
  return result;
}

void DSPGraph::OutputPort::~OutputPort(DSPGraph::OutputPort *this)
{
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::OutputPort::ClassName(DSPGraph::OutputPort *this)
{
  return "OutputPort";
}

uint64_t DSPGraph::OutputPort::getFormatFromUnit(DSPGraph::OutputPort *this)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 456))(*((_QWORD *)this + 1), 2, *((unsigned int *)this + 6));
}

void DSPGraph::InputPort::~InputPort(DSPGraph::InputPort *this)
{
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::InputPort::ClassName(DSPGraph::InputPort *this)
{
  return "InputPort";
}

uint64_t DSPGraph::InputPort::getFormatFromUnit(DSPGraph::InputPort *this)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 456))(*((_QWORD *)this + 1), 1, *((unsigned int *)this + 6));
}

uint64_t DSPGraph::Port::Port(uint64_t this, DSPGraph::Box *a2, int a3)
{
  *(_QWORD *)this = off_1E2911638;
  *(_QWORD *)(this + 8) = a2;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = a3;
  return this;
}

void DSPGraph::InputPort::detach(DSPGraph::InputPort *this)
{
  uint64_t v2;

  if ((*(uint64_t (**)(DSPGraph::InputPort *))(*(_QWORD *)this + 40))(this))
  {
    v2 = (*(uint64_t (**)(DSPGraph::InputPort *))(*(_QWORD *)this + 40))(this);
    std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>((uint64_t *)(v2 + 16), (unint64_t)this);
  }
}

void MP4BoxParser_EditListExcludingPrimingAndRemainderFrames::~MP4BoxParser_EditListExcludingPrimingAndRemainderFrames(MP4BoxParser_EditListExcludingPrimingAndRemainderFrames *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_EditListExcludingPrimingAndRemainderFrames::Init(MP4BoxParser **this)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  int Entry;
  __int32 v6;
  int v7;
  __int32 v8;
  __int32 v9;
  int8x16_t v10;
  int v11;

  result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) == 1701606260)
    {
      v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      result = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, (char *)this + 60);
      if (!(_DWORD)result)
      {
        v4 = 0;
        *((_DWORD *)this + 15) = bswap32(*((_DWORD *)this + 15));
        do
        {
          if (*((_BYTE *)this + 56) == 1)
          {
            Entry = MP4BoxParser_EditList::GetEntry((MP4BoxParser_EditList *)this, v4, &v10);
            result = 1717660012;
            if (Entry)
            {
              v6 = v10.i32[2];
              if ((v10.i64[1] & 0x8000000000000000) == 0)
              {
                result = 0;
                *((_DWORD *)this + 16) = v10.i32[0];
                *((_DWORD *)this + 17) = v6;
                *((_DWORD *)this + 18) = v11;
                return result;
              }
LABEL_11:
              result = 0;
            }
          }
          else
          {
            v7 = MP4BoxParser_EditList::GetEntry((MP4BoxParser_EditList *)this, v4, &v10);
            result = 1717660012;
            if (v7)
            {
              v8 = v10.i32[1];
              if ((v10.i32[1] & 0x80000000) == 0)
              {
                result = 0;
                v9 = v10.i32[2];
                *((_DWORD *)this + 16) = v10.i32[0];
                *((_DWORD *)this + 17) = v8;
                *((_DWORD *)this + 18) = v9;
                return result;
              }
              goto LABEL_11;
            }
          }
          ++v4;
        }
        while (!(_DWORD)result);
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

uint64_t MP4BoxParser_EditList::GetEntry(MP4BoxParser_EditList *this, unsigned int a2, int8x16_t *a3)
{
  unsigned int v6;
  unint64_t v7;
  __int16 *v9;

  if (*((_DWORD *)this + 15) <= a2)
    return 0;
  v6 = (*(uint64_t (**)(MP4BoxParser_EditList *))(*(_QWORD *)this + 24))(this);
  v7 = *((_BYTE *)this + 56) == 1 ? 20 : 12;
  if (MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v7 * a2 + (unint64_t)v6 + 4, v7, a3))return 0;
  if (*((_BYTE *)this + 56) == 1)
  {
    *a3 = vrev64q_s8(*a3);
    a3[1].i16[0] = bswap32(a3[1].u16[0]) >> 16;
    v9 = &a3[1].i16[1];
  }
  else
  {
    *(int8x8_t *)a3->i8 = vrev32_s8(*(int8x8_t *)a3->i8);
    a3->i16[4] = bswap32(a3->u16[4]) >> 16;
    v9 = &a3->i16[5];
  }
  *v9 = bswap32((unsigned __int16)*v9) >> 16;
  return 1;
}

uint64_t Resampler2::Process(Resampler2 *this, float *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(Resampler2 *, float *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 48))(this, a2, 0, a3, a4);
}

void *Resampler2::Process2(Resampler2 *this, float *a2, float *a3, unsigned int a4, uint64_t a5)
{
  int v5;
  double v7;
  void *result;
  unint64_t v9;
  unsigned int v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int NumberOfSourceFrames;
  int v16;
  float *v17;
  void (*v18)(uint64_t, uint64_t, unint64_t, _QWORD);
  uint64_t v19;
  uint64_t v20;
  int v21;
  float *v22;
  int v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD *, float *, float *, uint64_t, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  int v30;
  size_t v31;
  double v32;
  int v33;
  char *v34;
  uint64_t v35;
  int v36;
  size_t v37;
  char *v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  signed int v43;
  int v46;

  v5 = a4;
  *((_BYTE *)this + 24) = 1;
  v7 = *((double *)this + 22);
  result = (void *)Resampler2::GetNumberOfSourceFrames(this, a4, 0);
  if (v5 >= 1)
  {
    v9 = (unint64_t)result;
    v10 = 0;
    v43 = vcvtd_n_s64_f64(v7, 0xAuLL);
    v11 = (int *)((char *)this + 72);
    v12 = 4 * (int)a5;
    do
    {
      v13 = v9;
      if (v5 >= v43)
        v14 = v43;
      else
        v14 = v5;
      if (v5 > v43)
      {
        NumberOfSourceFrames = Resampler2::GetNumberOfSourceFrames(this, v14, v10);
        if (NumberOfSourceFrames >= (int)v9)
          v13 = v9;
        else
          v13 = NumberOfSourceFrames;
      }
      v16 = v10 * a5;
      if (a3)
        v17 = &a3[v16];
      else
        v17 = 0;
      if ((int)v13 >= 1)
      {
        v18 = (void (*)(uint64_t, uint64_t, unint64_t, _QWORD))*((_QWORD *)this + 5);
        if (v18)
        {
          if (v17)
          {
            v19 = *((int *)this + 18);
            v20 = *((_QWORD *)this + 11) + 4 * v19;
          }
          else
          {
            v20 = 0;
            v19 = *v11;
          }
          v18(*((_QWORD *)this + 10) + 4 * v19, v20, v13, *((_QWORD *)this + 8));
        }
        else
        {
          (*((void (**)(uint64_t, unint64_t, _QWORD))this + 4))(*((_QWORD *)this + 10) + 4 * *((int *)this + 18), v13, *((_QWORD *)this + 8));
        }
        *v11 += v13;
      }
      v21 = (*(uint64_t (**)(Resampler2 *))(*(_QWORD *)this + 152))(this);
      v22 = &a2[v16];
      if (*((_BYTE *)this + 132))
      {
        v23 = v21;
        v24 = (int)*((double *)this + 20);
        v25 = (char *)*((_QWORD *)this + 10);
        v26 = v24;
        v46 = v13;
        v42 = (uint64_t)v23 >> 1;
        if ((_DWORD)a5 == 1)
        {
          memcpy(v22, &v25[4 * v24 + 4 * (v23 >> 1)], 4 * v14);
          v25 = (char *)*((_QWORD *)this + 10);
        }
        else if ((_DWORD)v14)
        {
          v35 = 4 * v24 + 4 * ((uint64_t)v23 >> 1);
          v36 = v14;
          do
          {
            *v22 = *(float *)&v25[v35];
            v35 += 4;
            v22 = (float *)((char *)v22 + v12);
            --v36;
          }
          while (v36);
        }
        v33 = v14 + v26;
        v37 = 4 * (*v11 - ((int)v14 + (int)v26));
        result = memmove(v25, &v25[4 * v26 + 4 * v14], v37);
        if (v17)
        {
          v38 = (char *)*((_QWORD *)this + 11);
          if ((_DWORD)a5 == 1)
          {
            memcpy(v17, &v38[4 * v26 + 4 * v42], 4 * v14);
            v38 = (char *)*((_QWORD *)this + 11);
          }
          else if ((_DWORD)v14)
          {
            v39 = 4 * v26 + 4 * v42;
            v40 = v14;
            do
            {
              *v17 = *(float *)&v38[v39];
              v39 += 4;
              v17 = (float *)((char *)v17 + v12);
              --v40;
            }
            while (v40);
          }
          result = memmove(v38, &v38[4 * v26 + 4 * v14], v37);
        }
        v32 = (double)(int)v26;
        *((double *)this + 20) = *((double *)this + 20) - (double)(int)v26;
        v11 = (int *)((char *)this + 72);
        v34 = (char *)this + 72;
      }
      else
      {
        v27 = (uint64_t (*)(_QWORD *, float *, float *, uint64_t, uint64_t))*((_QWORD *)this + 1);
        v28 = *((_QWORD *)this + 2);
        v29 = (_QWORD *)((char *)this + (v28 >> 1));
        if ((v28 & 1) != 0)
          v27 = *(uint64_t (**)(_QWORD *, float *, float *, uint64_t, uint64_t))(*v29 + v27);
        result = (void *)v27(v29, v22, v17, v14, a5);
        v30 = (int)*((double *)this + 20);
        if (*((_DWORD *)this + 18) - v30 >= 1)
        {
          v31 = 4 * (*((_DWORD *)this + 18) - v30);
          result = memmove(*((void **)this + 10), (const void *)(*((_QWORD *)this + 10) + 4 * v30), v31);
          if (v17)
            result = memmove(*((void **)this + 11), (const void *)(*((_QWORD *)this + 11) + 4 * v30), v31);
        }
        v32 = (double)v30;
        *((double *)this + 20) = *((double *)this + 20) - (double)v30;
        *((_DWORD *)this + 18) -= v30;
        if (!*((_BYTE *)this + 133))
        {
          v11 = (int *)((char *)this + 72);
          goto LABEL_43;
        }
        v46 = v13;
        v33 = *(_DWORD *)(*((_QWORD *)this + 7) + 16) * v30;
        v34 = (char *)this + 104;
        v11 = (int *)((char *)this + 72);
      }
      *(_DWORD *)v34 -= v33;
      LODWORD(v13) = v46;
LABEL_43:
      *((double *)this + 17) = *((double *)this + 17) + v32;
      *((double *)this + 34) = *((double *)this + 34) + (double)v14;
      v9 = (v9 - v13);
      v10 += v14;
      v41 = __OFSUB__(v5, (_DWORD)v14);
      v5 -= v14;
    }
    while (!((v5 < 0) ^ v41 | (v5 == 0)));
  }
  *((_BYTE *)this + 24) = 0;
  return result;
}

void sub_18EFBB25C(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = 0;
  _Unwind_Resume(a1);
}

uint64_t Resampler2::SetVarispeedRate(uint64_t this, double a2)
{
  uint64_t v3;

  if (*(_BYTE *)(this + 184))
  {
    v3 = this;
    *(_BYTE *)(this + 264) = 0;
    *(double *)(this + 168) = a2;
    *(double *)(this + 176) = 1.0 / a2;
    *(_BYTE *)(this + 133) = 0;
    Resampler2::SetConverterFunction(this);
    return Resampler2::SetVarispeedSinc(v3, a2);
  }
  return this;
}

uint64_t Resampler2::SetSourceCallback(uint64_t this, void (*a2)(float *, unsigned int, void *), void *a3)
{
  *(_QWORD *)(this + 32) = a2;
  *(_QWORD *)(this + 64) = a3;
  return this;
}

uint64_t Resampler2::SetSourceCallback2(uint64_t this, void (*a2)(float *, float *, unsigned int, void *), void *a3)
{
  *(_QWORD *)(this + 40) = a2;
  *(_QWORD *)(this + 64) = a3;
  return this;
}

uint64_t Resampler2::SetIsBypassed(uint64_t this, char a2)
{
  *(_BYTE *)(this + 132) = a2;
  return this;
}

double Resampler2::SetInputSampleNumberOfNextWrite(Resampler2 *this, double a2)
{
  double result;

  result = a2 - (double)*((int *)this + 18);
  *((double *)this + 17) = result;
  return result;
}

double Resampler2::GetCurrentInputSampleNumber(Resampler2 *this)
{
  double v1;

  v1 = 0.0;
  if (*((_DWORD *)this + 29) != 1818848869)
  {
    LODWORD(v1) = *(_DWORD *)(*((_QWORD *)this + 7) + 20);
    v1 = (double)*(unint64_t *)&v1;
  }
  return *((double *)this + 17) + *((double *)this + 20) + v1 + 1.0;
}

uint64_t Resampler2::SetOutputSampleNumberOfNextProcess(uint64_t this, double a2)
{
  *(double *)(this + 272) = a2;
  return this;
}

uint64_t Resampler2::SetRamp(uint64_t this, const RateRamp *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = this;
  if (a2)
  {
    if (*(_BYTE *)(this + 184))
    {
      if (*(double *)(this + 136) < 0.0)
        *(_QWORD *)(this + 136) = 0;
      v4 = *((_OWORD *)a2 + 1);
      v3 = *((_OWORD *)a2 + 2);
      v5 = *(_OWORD *)a2;
      *(_QWORD *)(this + 256) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(this + 224) = v4;
      *(_OWORD *)(this + 240) = v3;
      *(_OWORD *)(this + 208) = v5;
      *(double *)&v3 = (*(double *)(this + 208) + *(double *)(this + 216)) * 0.5;
      *(_QWORD *)(this + 168) = v3;
      *(double *)(this + 176) = 1.0 / *(double *)&v3;
      *(_BYTE *)(this + 133) = 0;
      *(_BYTE *)(this + 264) = 1;
      Resampler2::SetConverterFunction(this);
      return Resampler2::SetVarispeedSinc(v2, *(double *)(v2 + 168));
    }
  }
  else
  {
    *(_BYTE *)(this + 264) = 0;
    return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)this + 56))(this, *(double *)(this + 168));
  }
  return this;
}

uint64_t Resampler2::GetKernelSize(Resampler2 *this)
{
  if (*((_DWORD *)this + 29) == 1818848869)
    return 2;
  else
    return *(unsigned int *)(*((_QWORD *)this + 7) + 12);
}

uint64_t Resampler2::SetVarispeedSinc(uint64_t this, double a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  if (a2 <= 1.0)
  {
    v2 = 0;
  }
  else if (a2 <= 7.98)
  {
    v2 = sVarispeedRateTable[vcvtpd_s64_f64(a2 * 100.0) - 100];
  }
  else
  {
    v2 = 35;
  }
  v3 = *(_DWORD *)(this + 112) + 1;
  if (v3 >= 0x20)
    v4 = (v3 >> 5) - 1;
  else
    v4 = 0;
  *(_QWORD *)(this + 56) = *(_QWORD *)(**((_QWORD **)&sVarispeedSincKernels + v4) + 8 * v2);
  return this;
}

uint64_t Resampler2::ConvertLinear(uint64_t this, float *a2, float *a3, int a4, unsigned int a5)
{
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;

  v5 = *(double *)(this + 160);
  v6 = *(double *)(this + 168);
  v7 = *(_QWORD *)(this + 80) + 4 * (int)v5;
  if (a3)
  {
    if (a4)
    {
      v8 = 0;
      v9 = *(_QWORD *)(this + 88) + 4 * (int)v5;
      do
      {
        v10 = *(float *)(v7 + 4 * (int)v5);
        v11 = *(float *)(v9 + 4 * (int)v5);
        v12 = 4 * (int)v5 + 4;
        v13 = *(float *)(v9 + v12);
        v14 = v5 - (double)(int)v5;
        a2[v8] = v10 + (float)(v14 * (float)(*(float *)(v7 + v12) - v10));
        a3[v8] = v11 + (float)(v14 * (float)(v13 - v11));
        v5 = v6 + v5;
        v8 += a5;
        --a4;
      }
      while (a4);
    }
  }
  else
  {
    for (; a4; --a4)
    {
      v15 = v5 - (double)(int)v5;
      *a2 = *(float *)(v7 + 4 * (int)v5)
          + (float)(v15 * (float)(*(float *)(v7 + 4 * (int)v5 + 4) - *(float *)(v7 + 4 * (int)v5)));
      v5 = v6 + v5;
      a2 += a5;
    }
  }
  *(double *)(this + 136) = *(double *)(this + 136) + (double)(int)v5;
  *(double *)(this + 160) = v5;
  return this;
}

void Resampler2::ConvertSIMD<Resampler2::RampedRate>(uint64_t a1, float *a2, float *a3, int a4, int a5)
{
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  int v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  int v24;
  const float *v25;
  float32x4_t *v26;
  float32x4_t *v27;
  double v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int v32;
  float32x4_t v33;
  unint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  unsigned int v144;
  unsigned int v145;
  float32x4_t *v146;
  float32x4_t *v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float v167;
  int8x16_t v168;
  int8x16_t v169;
  int v170;
  uint64_t v171;
  double v172;
  double v173;
  double v174;
  double v175;
  uint64_t v176;
  double v177;
  int v178;
  int v179;
  float32x4_t *v180;
  float32x4_t *v181;
  float32x4_t *v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float32x4_t v198;
  float32x4_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  unsigned int v233;
  unsigned int v234;
  float32x4_t *v235;
  float32x4_t *v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float v244;
  int8x16_t v245;
  float v246;
  float32x4_t *v247;
  unint64_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float64x2_t v253;
  float64x2_t v254;
  int64x2_t v255;
  int64x2_t v256;
  float64x2_t v257;
  int v258;
  _OWORD v259[3];
  uint64_t v260;
  double v261;

  v10 = *(_OWORD *)(a1 + 224);
  v259[0] = *(_OWORD *)(a1 + 208);
  v259[1] = v10;
  v259[2] = *(_OWORD *)(a1 + 240);
  v260 = *(_QWORD *)(a1 + 256);
  RateRamp::OffsetTimes((RateRamp *)v259, -*(double *)(a1 + 136), -*(double *)(a1 + 272));
  v261 = (double)*(int *)(a1 + 72);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  v12 = 4 * v11;
  v258 = *(_DWORD *)(a1 + 116);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = (double)*(int *)(*(_QWORD *)(a1 + 56) + 16);
  v15 = *(double *)(a1 + 160);
  if (a3)
  {
    if (a4 >= 1)
    {
      v16 = 0;
      v17 = *(_QWORD *)(a1 + 88);
      v18 = 0.0;
      do
      {
        RateRamp::RateForOutputTime((RateRamp *)v259, (double)(int)v18);
        *(double *)(a1 + 168) = v19;
        Resampler2::SetVarispeedSinc(a1, v19);
        RateRamp::InputTimeForOutputTime((RateRamp *)v259, v18);
        v21 = fmax(v20, 0.0);
        if (v21 >= v261)
          v15 = v261;
        else
          v15 = v21;
        v22 = **(_QWORD **)(a1 + 56);
        v23 = (v15 - (double)(int)v15) * v14;
        v24 = v11 * (int)v23;
        v25 = (const float *)(v22 + 4 * v24);
        v26 = (float32x4_t *)(v13 + 4 * (int)v15);
        v27 = (float32x4_t *)(v17 + 4 * (int)v15);
        v28 = (double)(int)v23;
        if (v258 == 1650553971)
        {
          vdotprD2i(v26->f32, v27->f32, v25, &v25[v11], v23 - v28, a2, a3, v11);
        }
        else
        {
          v29 = 0uLL;
          v30 = 0uLL;
          v31 = 0uLL;
          v32 = v11;
          v33 = 0uLL;
          if (v11 >= 64)
          {
            v34 = 0;
            v35 = v22 + v12 + 4 * v24;
            v32 = v11;
            do
            {
              v36 = v26[v34 / 0x10];
              v37 = v26[v34 / 0x10 + 1];
              v38 = *(float32x4_t *)&v25[v34 / 4];
              v39 = *(float32x4_t *)&v25[v34 / 4 + 4];
              v40 = vmlaq_f32(v29, v38, v36);
              v41 = *(float32x4_t *)(v35 + v34);
              v42 = *(float32x4_t *)(v35 + v34 + 16);
              v43 = vmlaq_f32(v30, v41, v36);
              v44 = v27[v34 / 0x10];
              v45 = v27[v34 / 0x10 + 1];
              v46 = vmlaq_f32(v40, v39, v37);
              v47 = vmlaq_f32(v43, v42, v37);
              v48 = vmlaq_f32(vmlaq_f32(v31, v38, v44), v39, v45);
              v49 = vmlaq_f32(vmlaq_f32(v33, v41, v44), v42, v45);
              v50 = v26[v34 / 0x10 + 2];
              v51 = v26[v34 / 0x10 + 3];
              v52 = *(float32x4_t *)&v25[v34 / 4 + 8];
              v53 = *(float32x4_t *)&v25[v34 / 4 + 12];
              v54 = vmlaq_f32(v46, v52, v50);
              v55 = *(float32x4_t *)(v35 + v34 + 32);
              v56 = *(float32x4_t *)(v35 + v34 + 48);
              v57 = vmlaq_f32(v47, v55, v50);
              v58 = v27[v34 / 0x10 + 2];
              v59 = v27[v34 / 0x10 + 3];
              v60 = vmlaq_f32(v54, v53, v51);
              v61 = vmlaq_f32(v57, v56, v51);
              v62 = vmlaq_f32(vmlaq_f32(v48, v52, v58), v53, v59);
              v63 = vmlaq_f32(vmlaq_f32(v49, v55, v58), v56, v59);
              v64 = v26[v34 / 0x10 + 4];
              v65 = v26[v34 / 0x10 + 5];
              v66 = *(float32x4_t *)&v25[v34 / 4 + 16];
              v67 = *(float32x4_t *)&v25[v34 / 4 + 20];
              v68 = vmlaq_f32(v60, v66, v64);
              v69 = *(float32x4_t *)(v35 + v34 + 64);
              v70 = *(float32x4_t *)(v35 + v34 + 80);
              v71 = vmlaq_f32(v61, v69, v64);
              v72 = v27[v34 / 0x10 + 4];
              v73 = v27[v34 / 0x10 + 5];
              v74 = vmlaq_f32(v68, v67, v65);
              v75 = vmlaq_f32(v71, v70, v65);
              v76 = vmlaq_f32(vmlaq_f32(v62, v66, v72), v67, v73);
              v77 = vmlaq_f32(vmlaq_f32(v63, v69, v72), v70, v73);
              v78 = v26[v34 / 0x10 + 6];
              v79 = v26[v34 / 0x10 + 7];
              v80 = *(float32x4_t *)&v25[v34 / 4 + 24];
              v81 = *(float32x4_t *)&v25[v34 / 4 + 28];
              v82 = vmlaq_f32(v74, v80, v78);
              v83 = *(float32x4_t *)(v35 + v34 + 96);
              v84 = *(float32x4_t *)(v35 + v34 + 112);
              v85 = vmlaq_f32(v75, v83, v78);
              v86 = v27[v34 / 0x10 + 6];
              v87 = v27[v34 / 0x10 + 7];
              v88 = vmlaq_f32(v82, v81, v79);
              v89 = vmlaq_f32(v85, v84, v79);
              v90 = vmlaq_f32(vmlaq_f32(v76, v80, v86), v81, v87);
              v91 = vmlaq_f32(vmlaq_f32(v77, v83, v86), v84, v87);
              v92 = v26[v34 / 0x10 + 8];
              v93 = v26[v34 / 0x10 + 9];
              v94 = *(float32x4_t *)&v25[v34 / 4 + 32];
              v95 = *(float32x4_t *)&v25[v34 / 4 + 36];
              v96 = vmlaq_f32(v88, v94, v92);
              v97 = *(float32x4_t *)(v35 + v34 + 128);
              v98 = *(float32x4_t *)(v35 + v34 + 144);
              v99 = vmlaq_f32(v89, v97, v92);
              v100 = v27[v34 / 0x10 + 8];
              v101 = v27[v34 / 0x10 + 9];
              v102 = vmlaq_f32(v96, v95, v93);
              v103 = vmlaq_f32(v99, v98, v93);
              v104 = vmlaq_f32(vmlaq_f32(v90, v94, v100), v95, v101);
              v105 = vmlaq_f32(vmlaq_f32(v91, v97, v100), v98, v101);
              v106 = v26[v34 / 0x10 + 10];
              v107 = v26[v34 / 0x10 + 11];
              v108 = *(float32x4_t *)&v25[v34 / 4 + 40];
              v109 = *(float32x4_t *)&v25[v34 / 4 + 44];
              v110 = vmlaq_f32(v102, v108, v106);
              v111 = *(float32x4_t *)(v35 + v34 + 160);
              v112 = *(float32x4_t *)(v35 + v34 + 176);
              v113 = vmlaq_f32(v103, v111, v106);
              v114 = v27[v34 / 0x10 + 10];
              v115 = v27[v34 / 0x10 + 11];
              v116 = vmlaq_f32(v110, v109, v107);
              v117 = vmlaq_f32(v113, v112, v107);
              v118 = vmlaq_f32(vmlaq_f32(v104, v108, v114), v109, v115);
              v119 = vmlaq_f32(vmlaq_f32(v105, v111, v114), v112, v115);
              v120 = v26[v34 / 0x10 + 12];
              v121 = v26[v34 / 0x10 + 13];
              v122 = *(float32x4_t *)&v25[v34 / 4 + 48];
              v123 = *(float32x4_t *)&v25[v34 / 4 + 52];
              v124 = vmlaq_f32(v116, v122, v120);
              v125 = *(float32x4_t *)(v35 + v34 + 192);
              v126 = *(float32x4_t *)(v35 + v34 + 208);
              v127 = vmlaq_f32(v117, v125, v120);
              v128 = v27[v34 / 0x10 + 12];
              v129 = v27[v34 / 0x10 + 13];
              v130 = vmlaq_f32(v124, v123, v121);
              v131 = vmlaq_f32(v127, v126, v121);
              v132 = vmlaq_f32(vmlaq_f32(v118, v122, v128), v123, v129);
              v133 = vmlaq_f32(vmlaq_f32(v119, v125, v128), v126, v129);
              v134 = v26[v34 / 0x10 + 14];
              v135 = v26[v34 / 0x10 + 15];
              v136 = *(float32x4_t *)&v25[v34 / 4 + 56];
              v137 = *(float32x4_t *)&v25[v34 / 4 + 60];
              v138 = vmlaq_f32(v130, v136, v134);
              v139 = *(float32x4_t *)(v35 + v34 + 224);
              v140 = *(float32x4_t *)(v35 + v34 + 240);
              v141 = vmlaq_f32(v131, v139, v134);
              v142 = v27[v34 / 0x10 + 14];
              v143 = v27[v34 / 0x10 + 15];
              v144 = v32;
              v29 = vmlaq_f32(v138, v137, v135);
              v30 = vmlaq_f32(v141, v140, v135);
              v31 = vmlaq_f32(vmlaq_f32(v132, v136, v142), v137, v143);
              v33 = vmlaq_f32(vmlaq_f32(v133, v139, v142), v140, v143);
              v32 -= 64;
              v34 += 256;
            }
            while (v144 > 0x7F);
            v27 = (float32x4_t *)((char *)v27 + v34);
            v26 = (float32x4_t *)((char *)v26 + v34);
            v25 = (const float *)((char *)v25 + v34);
          }
          if (v32 >= 16)
          {
            v145 = v32 + 16;
            v146 = (float32x4_t *)(v25 + 8);
            do
            {
              v147 = (float32x4_t *)((char *)v146 + v12);
              v148 = v26[1];
              v149 = v146[-2];
              v150 = v146[-1];
              v151 = *(float32x4_t *)((char *)v146 + v12 - 32);
              v152 = *(float32x4_t *)((char *)v146 + v12 - 16);
              v153 = v27[1];
              v154 = vmlaq_f32(vmlaq_f32(v29, v149, *v26), v150, v148);
              v155 = vmlaq_f32(vmlaq_f32(v30, v151, *v26), v152, v148);
              v156 = vmlaq_f32(vmlaq_f32(v31, v149, *v27), v150, v153);
              v157 = vmlaq_f32(vmlaq_f32(v33, v151, *v27), v152, v153);
              v158 = v26[2];
              v159 = v26[3];
              v160 = *v146;
              v161 = v146[1];
              v146 += 4;
              v162 = vmlaq_f32(v154, v160, v158);
              v163 = v147[1];
              v164 = vmlaq_f32(v155, *v147, v158);
              v165 = v27[2];
              v166 = v27[3];
              v29 = vmlaq_f32(v162, v161, v159);
              v30 = vmlaq_f32(v164, v163, v159);
              v31 = vmlaq_f32(vmlaq_f32(v156, v160, v165), v161, v166);
              v145 -= 16;
              v33 = vmlaq_f32(vmlaq_f32(v157, *v147, v165), v163, v166);
              v26 += 4;
              v27 += 4;
            }
            while (v145 > 0x1F);
          }
          v167 = v23 - v28;
          v168 = (int8x16_t)vmlaq_n_f32(v29, vsubq_f32(v30, v29), v167);
          v169 = (int8x16_t)vmlaq_n_f32(v31, vsubq_f32(v33, v31), v167);
          *a2 = vaddv_f32(vadd_f32(*(float32x2_t *)v168.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v168, v168, 8uLL)));
          *a3 = vaddv_f32(vadd_f32(*(float32x2_t *)v169.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v169, v169, 8uLL)));
        }
        a2 += a5;
        a3 += a5;
        ++v16;
        v18 = v18 + 1.0;
      }
      while (v16 != a4);
    }
  }
  else if (a4 >= 1)
  {
    v170 = 0;
    v171 = 4 * v11;
    v172 = 0.0;
    do
    {
      RateRamp::RateForOutputTime((RateRamp *)v259, (double)(int)v172);
      *(double *)(a1 + 168) = v173;
      Resampler2::SetVarispeedSinc(a1, v173);
      RateRamp::InputTimeForOutputTime((RateRamp *)v259, v172);
      v175 = fmax(v174, 0.0);
      if (v175 >= v261)
        v15 = v261;
      else
        v15 = v175;
      v176 = **(_QWORD **)(a1 + 56);
      v177 = (v15 - (double)(int)v15) * v14;
      v178 = (int)v177;
      v179 = v11 * (int)v177;
      v180 = (float32x4_t *)(v176 + 4 * v179);
      v181 = (float32x4_t *)(v13 + 4 * (int)v15);
      if (v258 == 1650553971)
      {
        v182 = (float32x4_t *)((char *)v180 + 4 * v11);
        v183 = v181[1];
        v184 = vmulq_f32(v183, v180[1]);
        v185 = vmulq_f32(*v181, *v180);
        v186 = vmulq_f32(v183, v182[1]);
        v187 = vmulq_f32(*v181, *v182);
        v188 = v180[2];
        v189 = v180[3];
        v190 = v182[2];
        v191 = v182[3];
        v192 = v181[2];
        v193 = v181[3];
        v194 = 0uLL;
        if ((unint64_t)v11 >> 2 == 4)
        {
          v195 = 0uLL;
          v196 = 0uLL;
          v197 = 0uLL;
        }
        else
        {
          v247 = v181 + 4;
          v196 = 0uLL;
          v248 = 16 * ((unint64_t)v11 >> 2) - 64;
          v197 = 0uLL;
          v195 = 0uLL;
          do
          {
            v195 = vaddq_f64(v195, vaddq_f64(vcvt_hight_f64_f32(v184), vcvt_hight_f64_f32(v185)));
            v194 = vaddq_f64(v194, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v184.f32), vcvtq_f64_f32(*(float32x2_t *)v185.f32)));
            v197 = vaddq_f64(v197, vaddq_f64(vcvt_hight_f64_f32(v186), vcvt_hight_f64_f32(v187)));
            v196 = vaddq_f64(v196, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v186.f32), vcvtq_f64_f32(*(float32x2_t *)v187.f32)));
            v185 = vmulq_f32(v192, v188);
            v184 = vmulq_f32(v193, v189);
            v187 = vmulq_f32(v192, v190);
            v186 = vmulq_f32(v193, v191);
            v192 = *v247;
            v193 = v247[1];
            v247 += 2;
            v188 = v180[4];
            v189 = v180[5];
            v190 = *(float32x4_t *)((char *)v180 + v171 + 64);
            v191 = *(float32x4_t *)((char *)v180 + v171 + 80);
            v180 += 2;
            v248 -= 32;
          }
          while (v248);
        }
        v249 = vmulq_f32(v189, v193);
        v250 = vmulq_f32(v188, v192);
        v251 = vmulq_f32(v191, v193);
        v252 = vmulq_f32(v190, v192);
        v253 = vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v186), vcvt_hight_f64_f32(v187)), v197), vaddq_f64(vcvt_hight_f64_f32(v251), vcvt_hight_f64_f32(v252)));
        v254 = vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v186.f32), vcvtq_f64_f32(*(float32x2_t *)v187.f32)), v196), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v251.f32), vcvtq_f64_f32(*(float32x2_t *)v252.f32)));
        v255 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v184.f32), vcvtq_f64_f32(*(float32x2_t *)v185.f32)), v194), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v249.f32), vcvtq_f64_f32(*(float32x2_t *)v250.f32))), vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v184), vcvt_hight_f64_f32(v185)), v195), vaddq_f64(vcvt_hight_f64_f32(v249), vcvt_hight_f64_f32(v250))));
        v256 = (int64x2_t)vaddq_f64(v254, v253);
        v257 = vaddq_f64((float64x2_t)vzip1q_s64(v256, v255), (float64x2_t)vzip2q_s64(v256, v255));
        v246 = v257.f64[1] + (v177 - (double)v178) * (v257.f64[0] - v257.f64[1]);
      }
      else
      {
        v198 = 0uLL;
        v199 = 0uLL;
        v200 = v11;
        if (v11 >= 64)
        {
          v201 = 0;
          v202 = v176 + v12 + 4 * v179;
          v200 = v11;
          do
          {
            v203 = v181[v201];
            v204 = v181[v201 + 1];
            v205 = vmlaq_f32(vmlaq_f32(v198, v180[v201], v203), v180[v201 + 1], v204);
            v206 = vmlaq_f32(vmlaq_f32(v199, *(float32x4_t *)(v202 + v201 * 16), v203), *(float32x4_t *)(v202 + v201 * 16 + 16), v204);
            v207 = v181[v201 + 2];
            v208 = v181[v201 + 3];
            v209 = vmlaq_f32(vmlaq_f32(v205, v180[v201 + 2], v207), v180[v201 + 3], v208);
            v210 = vmlaq_f32(vmlaq_f32(v206, *(float32x4_t *)(v202 + v201 * 16 + 32), v207), *(float32x4_t *)(v202 + v201 * 16 + 48), v208);
            v211 = v181[v201 + 4];
            v212 = v181[v201 + 5];
            v213 = vmlaq_f32(vmlaq_f32(v209, v180[v201 + 4], v211), v180[v201 + 5], v212);
            v214 = vmlaq_f32(vmlaq_f32(v210, *(float32x4_t *)(v202 + v201 * 16 + 64), v211), *(float32x4_t *)(v202 + v201 * 16 + 80), v212);
            v215 = v181[v201 + 6];
            v216 = v181[v201 + 7];
            v217 = vmlaq_f32(vmlaq_f32(v213, v180[v201 + 6], v215), v180[v201 + 7], v216);
            v218 = vmlaq_f32(vmlaq_f32(v214, *(float32x4_t *)(v202 + v201 * 16 + 96), v215), *(float32x4_t *)(v202 + v201 * 16 + 112), v216);
            v219 = v181[v201 + 8];
            v220 = v181[v201 + 9];
            v221 = vmlaq_f32(vmlaq_f32(v217, v180[v201 + 8], v219), v180[v201 + 9], v220);
            v222 = vmlaq_f32(vmlaq_f32(v218, *(float32x4_t *)(v202 + v201 * 16 + 128), v219), *(float32x4_t *)(v202 + v201 * 16 + 144), v220);
            v223 = v181[v201 + 10];
            v224 = v181[v201 + 11];
            v225 = vmlaq_f32(vmlaq_f32(v221, v180[v201 + 10], v223), v180[v201 + 11], v224);
            v226 = vmlaq_f32(vmlaq_f32(v222, *(float32x4_t *)(v202 + v201 * 16 + 160), v223), *(float32x4_t *)(v202 + v201 * 16 + 176), v224);
            v227 = v181[v201 + 12];
            v228 = v181[v201 + 13];
            v229 = vmlaq_f32(vmlaq_f32(v225, v180[v201 + 12], v227), v180[v201 + 13], v228);
            v230 = vmlaq_f32(vmlaq_f32(v226, *(float32x4_t *)(v202 + v201 * 16 + 192), v227), *(float32x4_t *)(v202 + v201 * 16 + 208), v228);
            v231 = v181[v201 + 14];
            v232 = v181[v201 + 15];
            v233 = v200;
            v198 = vmlaq_f32(vmlaq_f32(v229, v180[v201 + 14], v231), v180[v201 + 15], v232);
            v199 = vmlaq_f32(vmlaq_f32(v230, *(float32x4_t *)(v202 + v201 * 16 + 224), v231), *(float32x4_t *)(v202 + v201 * 16 + 240), v232);
            v200 -= 64;
            v201 += 16;
          }
          while (v233 > 0x7F);
          v181 = (float32x4_t *)((char *)v181 + v201 * 16);
          v180 = (float32x4_t *)((char *)v180 + v201 * 16);
        }
        if (v200 >= 16)
        {
          v234 = v200 + 16;
          v235 = v180 + 2;
          do
          {
            v236 = (float32x4_t *)((char *)v235 + v12);
            v237 = v181[1];
            v238 = vmlaq_f32(vmlaq_f32(v198, v235[-2], *v181), v235[-1], v237);
            v239 = vmlaq_f32(vmlaq_f32(v199, *(float32x4_t *)((char *)v235 + v12 - 32), *v181), *(float32x4_t *)((char *)v235 + v12 - 16), v237);
            v240 = v181[2];
            v241 = v181[3];
            v242 = *v235;
            v243 = v235[1];
            v235 += 4;
            v198 = vmlaq_f32(vmlaq_f32(v238, v242, v240), v243, v241);
            v199 = vmlaq_f32(vmlaq_f32(v239, *v236, v240), v236[1], v241);
            v234 -= 16;
            v181 += 4;
          }
          while (v234 > 0x1F);
        }
        v244 = v177 - (double)v178;
        v245 = (int8x16_t)vmlaq_n_f32(v198, vsubq_f32(v199, v198), v244);
        v246 = vaddv_f32(vadd_f32(*(float32x2_t *)v245.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v245, v245, 8uLL)));
      }
      *a2 = v246;
      a2 += a5;
      ++v170;
      v172 = v172 + 1.0;
    }
    while (v170 != a4);
  }
  *(double *)(a1 + 160) = v15;
}

void Resampler2::ConvertSIMD<Resampler2::FixedRate>(double *a1, float *a2, float *a3, int a4, int a5)
{
  double *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  double v16;
  double v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int v23;
  const float *v24;
  float32x4_t *v25;
  float32x4_t *v26;
  double v27;
  float *v28;
  float *v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int v41;
  float32x4_t v42;
  unint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  unsigned int v153;
  unsigned int v154;
  float32x4_t *v155;
  float32x4_t *v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float v176;
  int8x16_t v177;
  int8x16_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  double v182;
  int v183;
  int v184;
  float32x4_t *v185;
  float32x4_t *v186;
  float32x4_t *v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float32x4_t v203;
  float32x4_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  unsigned int v238;
  unsigned int v239;
  float32x4_t *v240;
  float32x4_t *v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float v249;
  int8x16_t v250;
  float v251;
  float32x4_t *v252;
  unint64_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float64x2_t v258;
  float64x2_t v259;
  int64x2_t v260;
  int64x2_t v261;
  float64x2_t v262;
  unint64_t v263;
  float *v264;

  v9 = a1;
  v10 = a1[21];
  v11 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 152))(a1);
  v263 = (int)v11;
  v12 = 4 * (int)v11;
  v13 = *((unsigned int *)v9 + 29);
  v14 = *((_QWORD *)v9 + 10);
  v15 = (int *)*((_QWORD *)v9 + 7);
  v16 = (double)v15[4];
  v17 = v9[20];
  if (a3)
  {
    if (a4 >= 1)
    {
      v18 = 0;
      v19 = *((_QWORD *)v9 + 11);
      v20 = a5;
      do
      {
        v21 = **((_QWORD **)v9 + 7);
        v22 = (v17 - (double)(int)v17) * v16;
        v23 = v11 * (int)v22;
        v24 = (const float *)(v21 + 4 * v23);
        v25 = (float32x4_t *)(v14 + 4 * (int)v17);
        v26 = (float32x4_t *)(v19 + 4 * (int)v17);
        v27 = (double)(int)v22;
        if ((_DWORD)v13 == 1650553971)
        {
          v28 = a2;
          v29 = a3;
          v30 = v9;
          v31 = v14;
          v32 = v13;
          v33 = v11;
          v34 = v19;
          v264 = a3;
          v35 = v12;
          v36 = a2;
          v37 = v20;
          vdotprD2i(v25->f32, v26->f32, v24, &v24[v263], v22 - v27, v28, v29, v263);
          v20 = v37;
          a2 = v36;
          v12 = v35;
          a3 = v264;
          v19 = v34;
          v11 = v33;
          v13 = v32;
          v14 = v31;
          v9 = v30;
        }
        else
        {
          v38 = 0uLL;
          v39 = 0uLL;
          v40 = 0uLL;
          v41 = v11;
          v42 = 0uLL;
          if ((int)v11 >= 64)
          {
            v43 = 0;
            v44 = v21 + v12 + 4 * v23;
            v41 = v11;
            do
            {
              v45 = v25[v43 / 0x10];
              v46 = v25[v43 / 0x10 + 1];
              v47 = *(float32x4_t *)&v24[v43 / 4];
              v48 = *(float32x4_t *)&v24[v43 / 4 + 4];
              v49 = vmlaq_f32(v38, v47, v45);
              v50 = *(float32x4_t *)(v44 + v43);
              v51 = *(float32x4_t *)(v44 + v43 + 16);
              v52 = vmlaq_f32(v39, v50, v45);
              v53 = v26[v43 / 0x10];
              v54 = v26[v43 / 0x10 + 1];
              v55 = vmlaq_f32(v49, v48, v46);
              v56 = vmlaq_f32(v52, v51, v46);
              v57 = vmlaq_f32(vmlaq_f32(v40, v47, v53), v48, v54);
              v58 = vmlaq_f32(vmlaq_f32(v42, v50, v53), v51, v54);
              v59 = v25[v43 / 0x10 + 2];
              v60 = v25[v43 / 0x10 + 3];
              v61 = *(float32x4_t *)&v24[v43 / 4 + 8];
              v62 = *(float32x4_t *)&v24[v43 / 4 + 12];
              v63 = vmlaq_f32(v55, v61, v59);
              v64 = *(float32x4_t *)(v44 + v43 + 32);
              v65 = *(float32x4_t *)(v44 + v43 + 48);
              v66 = vmlaq_f32(v56, v64, v59);
              v67 = v26[v43 / 0x10 + 2];
              v68 = v26[v43 / 0x10 + 3];
              v69 = vmlaq_f32(v63, v62, v60);
              v70 = vmlaq_f32(v66, v65, v60);
              v71 = vmlaq_f32(vmlaq_f32(v57, v61, v67), v62, v68);
              v72 = vmlaq_f32(vmlaq_f32(v58, v64, v67), v65, v68);
              v73 = v25[v43 / 0x10 + 4];
              v74 = v25[v43 / 0x10 + 5];
              v75 = *(float32x4_t *)&v24[v43 / 4 + 16];
              v76 = *(float32x4_t *)&v24[v43 / 4 + 20];
              v77 = vmlaq_f32(v69, v75, v73);
              v78 = *(float32x4_t *)(v44 + v43 + 64);
              v79 = *(float32x4_t *)(v44 + v43 + 80);
              v80 = vmlaq_f32(v70, v78, v73);
              v81 = v26[v43 / 0x10 + 4];
              v82 = v26[v43 / 0x10 + 5];
              v83 = vmlaq_f32(v77, v76, v74);
              v84 = vmlaq_f32(v80, v79, v74);
              v85 = vmlaq_f32(vmlaq_f32(v71, v75, v81), v76, v82);
              v86 = vmlaq_f32(vmlaq_f32(v72, v78, v81), v79, v82);
              v87 = v25[v43 / 0x10 + 6];
              v88 = v25[v43 / 0x10 + 7];
              v89 = *(float32x4_t *)&v24[v43 / 4 + 24];
              v90 = *(float32x4_t *)&v24[v43 / 4 + 28];
              v91 = vmlaq_f32(v83, v89, v87);
              v92 = *(float32x4_t *)(v44 + v43 + 96);
              v93 = *(float32x4_t *)(v44 + v43 + 112);
              v94 = vmlaq_f32(v84, v92, v87);
              v95 = v26[v43 / 0x10 + 6];
              v96 = v26[v43 / 0x10 + 7];
              v97 = vmlaq_f32(v91, v90, v88);
              v98 = vmlaq_f32(v94, v93, v88);
              v99 = vmlaq_f32(vmlaq_f32(v85, v89, v95), v90, v96);
              v100 = vmlaq_f32(vmlaq_f32(v86, v92, v95), v93, v96);
              v101 = v25[v43 / 0x10 + 8];
              v102 = v25[v43 / 0x10 + 9];
              v103 = *(float32x4_t *)&v24[v43 / 4 + 32];
              v104 = *(float32x4_t *)&v24[v43 / 4 + 36];
              v105 = vmlaq_f32(v97, v103, v101);
              v106 = *(float32x4_t *)(v44 + v43 + 128);
              v107 = *(float32x4_t *)(v44 + v43 + 144);
              v108 = vmlaq_f32(v98, v106, v101);
              v109 = v26[v43 / 0x10 + 8];
              v110 = v26[v43 / 0x10 + 9];
              v111 = vmlaq_f32(v105, v104, v102);
              v112 = vmlaq_f32(v108, v107, v102);
              v113 = vmlaq_f32(vmlaq_f32(v99, v103, v109), v104, v110);
              v114 = vmlaq_f32(vmlaq_f32(v100, v106, v109), v107, v110);
              v115 = v25[v43 / 0x10 + 10];
              v116 = v25[v43 / 0x10 + 11];
              v117 = *(float32x4_t *)&v24[v43 / 4 + 40];
              v118 = *(float32x4_t *)&v24[v43 / 4 + 44];
              v119 = vmlaq_f32(v111, v117, v115);
              v120 = *(float32x4_t *)(v44 + v43 + 160);
              v121 = *(float32x4_t *)(v44 + v43 + 176);
              v122 = vmlaq_f32(v112, v120, v115);
              v123 = v26[v43 / 0x10 + 10];
              v124 = v26[v43 / 0x10 + 11];
              v125 = vmlaq_f32(v119, v118, v116);
              v126 = vmlaq_f32(v122, v121, v116);
              v127 = vmlaq_f32(vmlaq_f32(v113, v117, v123), v118, v124);
              v128 = vmlaq_f32(vmlaq_f32(v114, v120, v123), v121, v124);
              v129 = v25[v43 / 0x10 + 12];
              v130 = v25[v43 / 0x10 + 13];
              v131 = *(float32x4_t *)&v24[v43 / 4 + 48];
              v132 = *(float32x4_t *)&v24[v43 / 4 + 52];
              v133 = vmlaq_f32(v125, v131, v129);
              v134 = *(float32x4_t *)(v44 + v43 + 192);
              v135 = *(float32x4_t *)(v44 + v43 + 208);
              v136 = vmlaq_f32(v126, v134, v129);
              v137 = v26[v43 / 0x10 + 12];
              v138 = v26[v43 / 0x10 + 13];
              v139 = vmlaq_f32(v133, v132, v130);
              v140 = vmlaq_f32(v136, v135, v130);
              v141 = vmlaq_f32(vmlaq_f32(v127, v131, v137), v132, v138);
              v142 = vmlaq_f32(vmlaq_f32(v128, v134, v137), v135, v138);
              v143 = v25[v43 / 0x10 + 14];
              v144 = v25[v43 / 0x10 + 15];
              v145 = *(float32x4_t *)&v24[v43 / 4 + 56];
              v146 = *(float32x4_t *)&v24[v43 / 4 + 60];
              v147 = vmlaq_f32(v139, v145, v143);
              v148 = *(float32x4_t *)(v44 + v43 + 224);
              v149 = *(float32x4_t *)(v44 + v43 + 240);
              v150 = vmlaq_f32(v140, v148, v143);
              v151 = v26[v43 / 0x10 + 14];
              v152 = v26[v43 / 0x10 + 15];
              v153 = v41;
              v38 = vmlaq_f32(v147, v146, v144);
              v39 = vmlaq_f32(v150, v149, v144);
              v40 = vmlaq_f32(vmlaq_f32(v141, v145, v151), v146, v152);
              v42 = vmlaq_f32(vmlaq_f32(v142, v148, v151), v149, v152);
              v41 -= 64;
              v43 += 256;
            }
            while (v153 > 0x7F);
            v26 = (float32x4_t *)((char *)v26 + v43);
            v25 = (float32x4_t *)((char *)v25 + v43);
            v24 = (const float *)((char *)v24 + v43);
          }
          if (v41 >= 16)
          {
            v154 = v41 + 16;
            v155 = (float32x4_t *)(v24 + 8);
            do
            {
              v156 = (float32x4_t *)((char *)v155 + v12);
              v157 = v25[1];
              v158 = v155[-2];
              v159 = v155[-1];
              v160 = *(float32x4_t *)((char *)v155 + v12 - 32);
              v161 = *(float32x4_t *)((char *)v155 + v12 - 16);
              v162 = v26[1];
              v163 = vmlaq_f32(vmlaq_f32(v38, v158, *v25), v159, v157);
              v164 = vmlaq_f32(vmlaq_f32(v39, v160, *v25), v161, v157);
              v165 = vmlaq_f32(vmlaq_f32(v40, v158, *v26), v159, v162);
              v166 = vmlaq_f32(vmlaq_f32(v42, v160, *v26), v161, v162);
              v167 = v25[2];
              v168 = v25[3];
              v169 = *v155;
              v170 = v155[1];
              v155 += 4;
              v171 = vmlaq_f32(v163, v169, v167);
              v172 = v156[1];
              v173 = vmlaq_f32(v164, *v156, v167);
              v174 = v26[2];
              v175 = v26[3];
              v38 = vmlaq_f32(v171, v170, v168);
              v39 = vmlaq_f32(v173, v172, v168);
              v40 = vmlaq_f32(vmlaq_f32(v165, v169, v174), v170, v175);
              v154 -= 16;
              v42 = vmlaq_f32(vmlaq_f32(v166, *v156, v174), v172, v175);
              v25 += 4;
              v26 += 4;
            }
            while (v154 > 0x1F);
          }
          v176 = v22 - v27;
          v177 = (int8x16_t)vmlaq_n_f32(v38, vsubq_f32(v39, v38), v176);
          v178 = (int8x16_t)vmlaq_n_f32(v40, vsubq_f32(v42, v40), v176);
          *a2 = vaddv_f32(vadd_f32(*(float32x2_t *)v177.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v177, v177, 8uLL)));
          *a3 = vaddv_f32(vadd_f32(*(float32x2_t *)v178.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v178, v178, 8uLL)));
        }
        a2 += v20;
        a3 += v20;
        v17 = v10 + v17;
        ++v18;
      }
      while (v18 != a4);
    }
  }
  else if (a4 >= 1)
  {
    v179 = 0;
    v180 = *(_QWORD *)v15;
    v181 = 4 * (int)v11;
    do
    {
      v182 = (v17 - (double)(int)v17) * v16;
      v183 = (int)v182;
      v184 = v11 * (int)v182;
      v185 = (float32x4_t *)(v180 + 4 * v184);
      v186 = (float32x4_t *)(v14 + 4 * (int)v17);
      if ((_DWORD)v13 == 1650553971)
      {
        v187 = (float32x4_t *)((char *)v185 + 4 * (int)v11);
        v188 = v186[1];
        v189 = vmulq_f32(v188, v185[1]);
        v190 = vmulq_f32(*v186, *v185);
        v191 = vmulq_f32(v188, v187[1]);
        v192 = vmulq_f32(*v186, *v187);
        v193 = v185[2];
        v194 = v185[3];
        v195 = v187[2];
        v196 = v187[3];
        v197 = v186[2];
        v198 = v186[3];
        v199 = 0uLL;
        if ((unint64_t)(int)v11 >> 2 == 4)
        {
          v200 = 0uLL;
          v201 = 0uLL;
          v202 = 0uLL;
        }
        else
        {
          v252 = v186 + 4;
          v201 = 0uLL;
          v253 = 16 * ((unint64_t)(int)v11 >> 2) - 64;
          v202 = 0uLL;
          v200 = 0uLL;
          do
          {
            v200 = vaddq_f64(v200, vaddq_f64(vcvt_hight_f64_f32(v189), vcvt_hight_f64_f32(v190)));
            v199 = vaddq_f64(v199, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v189.f32), vcvtq_f64_f32(*(float32x2_t *)v190.f32)));
            v202 = vaddq_f64(v202, vaddq_f64(vcvt_hight_f64_f32(v191), vcvt_hight_f64_f32(v192)));
            v201 = vaddq_f64(v201, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v191.f32), vcvtq_f64_f32(*(float32x2_t *)v192.f32)));
            v190 = vmulq_f32(v197, v193);
            v189 = vmulq_f32(v198, v194);
            v192 = vmulq_f32(v197, v195);
            v191 = vmulq_f32(v198, v196);
            v197 = *v252;
            v198 = v252[1];
            v252 += 2;
            v193 = v185[4];
            v194 = v185[5];
            v195 = *(float32x4_t *)((char *)v185 + v181 + 64);
            v196 = *(float32x4_t *)((char *)v185 + v181 + 80);
            v185 += 2;
            v253 -= 32;
          }
          while (v253);
        }
        v254 = vmulq_f32(v194, v198);
        v255 = vmulq_f32(v193, v197);
        v256 = vmulq_f32(v196, v198);
        v257 = vmulq_f32(v195, v197);
        v258 = vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v191), vcvt_hight_f64_f32(v192)), v202), vaddq_f64(vcvt_hight_f64_f32(v256), vcvt_hight_f64_f32(v257)));
        v259 = vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v191.f32), vcvtq_f64_f32(*(float32x2_t *)v192.f32)), v201), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v256.f32), vcvtq_f64_f32(*(float32x2_t *)v257.f32)));
        v260 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v189.f32), vcvtq_f64_f32(*(float32x2_t *)v190.f32)), v199), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v254.f32), vcvtq_f64_f32(*(float32x2_t *)v255.f32))), vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v189), vcvt_hight_f64_f32(v190)), v200), vaddq_f64(vcvt_hight_f64_f32(v254), vcvt_hight_f64_f32(v255))));
        v261 = (int64x2_t)vaddq_f64(v259, v258);
        v262 = vaddq_f64((float64x2_t)vzip1q_s64(v261, v260), (float64x2_t)vzip2q_s64(v261, v260));
        v251 = v262.f64[1] + (v182 - (double)v183) * (v262.f64[0] - v262.f64[1]);
      }
      else
      {
        v203 = 0uLL;
        v204 = 0uLL;
        v205 = v11;
        if ((int)v11 >= 64)
        {
          v206 = 0;
          v207 = v180 + v12 + 4 * v184;
          v205 = v11;
          do
          {
            v208 = v186[v206];
            v209 = v186[v206 + 1];
            v210 = vmlaq_f32(vmlaq_f32(v203, v185[v206], v208), v185[v206 + 1], v209);
            v211 = vmlaq_f32(vmlaq_f32(v204, *(float32x4_t *)(v207 + v206 * 16), v208), *(float32x4_t *)(v207 + v206 * 16 + 16), v209);
            v212 = v186[v206 + 2];
            v213 = v186[v206 + 3];
            v214 = vmlaq_f32(vmlaq_f32(v210, v185[v206 + 2], v212), v185[v206 + 3], v213);
            v215 = vmlaq_f32(vmlaq_f32(v211, *(float32x4_t *)(v207 + v206 * 16 + 32), v212), *(float32x4_t *)(v207 + v206 * 16 + 48), v213);
            v216 = v186[v206 + 4];
            v217 = v186[v206 + 5];
            v218 = vmlaq_f32(vmlaq_f32(v214, v185[v206 + 4], v216), v185[v206 + 5], v217);
            v219 = vmlaq_f32(vmlaq_f32(v215, *(float32x4_t *)(v207 + v206 * 16 + 64), v216), *(float32x4_t *)(v207 + v206 * 16 + 80), v217);
            v220 = v186[v206 + 6];
            v221 = v186[v206 + 7];
            v222 = vmlaq_f32(vmlaq_f32(v218, v185[v206 + 6], v220), v185[v206 + 7], v221);
            v223 = vmlaq_f32(vmlaq_f32(v219, *(float32x4_t *)(v207 + v206 * 16 + 96), v220), *(float32x4_t *)(v207 + v206 * 16 + 112), v221);
            v224 = v186[v206 + 8];
            v225 = v186[v206 + 9];
            v226 = vmlaq_f32(vmlaq_f32(v222, v185[v206 + 8], v224), v185[v206 + 9], v225);
            v227 = vmlaq_f32(vmlaq_f32(v223, *(float32x4_t *)(v207 + v206 * 16 + 128), v224), *(float32x4_t *)(v207 + v206 * 16 + 144), v225);
            v228 = v186[v206 + 10];
            v229 = v186[v206 + 11];
            v230 = vmlaq_f32(vmlaq_f32(v226, v185[v206 + 10], v228), v185[v206 + 11], v229);
            v231 = vmlaq_f32(vmlaq_f32(v227, *(float32x4_t *)(v207 + v206 * 16 + 160), v228), *(float32x4_t *)(v207 + v206 * 16 + 176), v229);
            v232 = v186[v206 + 12];
            v233 = v186[v206 + 13];
            v234 = vmlaq_f32(vmlaq_f32(v230, v185[v206 + 12], v232), v185[v206 + 13], v233);
            v235 = vmlaq_f32(vmlaq_f32(v231, *(float32x4_t *)(v207 + v206 * 16 + 192), v232), *(float32x4_t *)(v207 + v206 * 16 + 208), v233);
            v236 = v186[v206 + 14];
            v237 = v186[v206 + 15];
            v238 = v205;
            v203 = vmlaq_f32(vmlaq_f32(v234, v185[v206 + 14], v236), v185[v206 + 15], v237);
            v204 = vmlaq_f32(vmlaq_f32(v235, *(float32x4_t *)(v207 + v206 * 16 + 224), v236), *(float32x4_t *)(v207 + v206 * 16 + 240), v237);
            v205 -= 64;
            v206 += 16;
          }
          while (v238 > 0x7F);
          v186 = (float32x4_t *)((char *)v186 + v206 * 16);
          v185 = (float32x4_t *)((char *)v185 + v206 * 16);
        }
        if (v205 >= 16)
        {
          v239 = v205 + 16;
          v240 = v185 + 2;
          do
          {
            v241 = (float32x4_t *)((char *)v240 + v12);
            v242 = v186[1];
            v243 = vmlaq_f32(vmlaq_f32(v203, v240[-2], *v186), v240[-1], v242);
            v244 = vmlaq_f32(vmlaq_f32(v204, *(float32x4_t *)((char *)v240 + v12 - 32), *v186), *(float32x4_t *)((char *)v240 + v12 - 16), v242);
            v245 = v186[2];
            v246 = v186[3];
            v247 = *v240;
            v248 = v240[1];
            v240 += 4;
            v203 = vmlaq_f32(vmlaq_f32(v243, v247, v245), v248, v246);
            v204 = vmlaq_f32(vmlaq_f32(v244, *v241, v245), v241[1], v246);
            v239 -= 16;
            v186 += 4;
          }
          while (v239 > 0x1F);
        }
        v249 = v182 - (double)v183;
        v250 = (int8x16_t)vmlaq_n_f32(v203, vsubq_f32(v204, v203), v249);
        v251 = vaddv_f32(vadd_f32(*(float32x2_t *)v250.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v250, v250, 8uLL)));
      }
      *a2 = v251;
      a2 += a5;
      v17 = v10 + v17;
      ++v179;
    }
    while (v179 != a4);
  }
  v9[20] = v17;
}

uint64_t Resampler2::ConvertScalar<Resampler2::RampedRate>(uint64_t a1, float *a2, _DWORD *a3, int a4, int a5)
{
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t result;
  int v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;
  uint64_t v27;
  float v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  unsigned int v243;
  unsigned int v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  float v346;
  double v347;
  float v348;
  int v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  float *v355;
  float *v356;
  float *v357;
  uint64_t v358;
  float v359;
  int v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  float v399;
  float v400;
  float v401;
  float v402;
  float v403;
  float v404;
  float v405;
  float v406;
  float v407;
  float v408;
  float v409;
  float v410;
  float v411;
  float v412;
  float v413;
  float v414;
  float v415;
  float v416;
  float v417;
  float v418;
  float v419;
  float v420;
  float v421;
  float v422;
  float v423;
  unsigned int v424;
  unsigned int v425;
  float v426;
  float v427;
  float v428;
  float v429;
  float v430;
  float v431;
  float v432;
  float v433;
  float v434;
  float v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  float v443;
  float v444;
  float v445;
  float v446;
  float v447;
  float v448;
  float v449;
  float v450;
  float v451;
  float v452;
  float v453;
  float v454;
  float v455;
  _OWORD v456[3];
  uint64_t v457;
  double v458;

  v10 = *(_OWORD *)(a1 + 224);
  v456[0] = *(_OWORD *)(a1 + 208);
  v456[1] = v10;
  v456[2] = *(_OWORD *)(a1 + 240);
  v457 = *(_QWORD *)(a1 + 256);
  RateRamp::OffsetTimes((RateRamp *)v456, -*(double *)(a1 + 136), -*(double *)(a1 + 272));
  v458 = (double)*(int *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(double *)(a1 + 160);
  v14 = (double)*(int *)(*(_QWORD *)(a1 + 56) + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  v16 = result;
  if (a3)
  {
    if (a4 >= 1)
    {
      v17 = 0;
      v18 = 0.0;
      do
      {
        RateRamp::RateForOutputTime((RateRamp *)v456, (double)(int)v18);
        *(double *)(a1 + 168) = v19;
        Resampler2::SetVarispeedSinc(a1, v19);
        result = RateRamp::InputTimeForOutputTime((RateRamp *)v456, v18);
        v21 = fmax(v20, 0.0);
        if (v21 >= v458)
          v13 = v458;
        else
          v13 = v21;
        v22 = (v13 - (double)(int)v13) * v14;
        v23 = (float *)(**(_QWORD **)(a1 + 56) + 4 * v16 * (int)v22);
        v24 = &v23[v16];
        v25 = (float *)(v11 + 4 * (int)v13);
        v26 = (float *)(v12 + 4 * (int)v13);
        if (v16 < 32)
        {
          v32 = 0.0;
          v31 = 0.0;
          v30 = 0.0;
          v29 = v16;
          v28 = 0.0;
        }
        else
        {
          v27 = 0;
          v28 = 0.0;
          v29 = v16;
          v30 = 0.0;
          v31 = 0.0;
          v32 = 0.0;
          do
          {
            result = (uint64_t)&v23[v27];
            v33 = v25[v27];
            v34 = v25[v27 + 1];
            v35 = v23[v27];
            v36 = v23[v27 + 1];
            v37 = v32 + (float)(v33 * v35);
            v38 = v24[v27];
            v39 = v24[v27 + 1];
            v40 = v31 + (float)(v33 * v38);
            v41 = v26[v27];
            v42 = v26[v27 + 1];
            v43 = v37 + (float)(v34 * v36);
            v44 = v40 + (float)(v34 * v39);
            v45 = (float)(v30 + (float)(v41 * v35)) + (float)(v42 * v36);
            v46 = (float)(v28 + (float)(v41 * v38)) + (float)(v42 * v39);
            v47 = v25[v27 + 2];
            v48 = v25[v27 + 3];
            v49 = v23[v27 + 2];
            v50 = v23[v27 + 3];
            v51 = v24[v27 + 2];
            v52 = v24[v27 + 3];
            v53 = v26[v27 + 2];
            v54 = v26[v27 + 3];
            v55 = (float)(v43 + (float)(v47 * v49)) + (float)(v48 * v50);
            v56 = (float)(v44 + (float)(v47 * v51)) + (float)(v48 * v52);
            v57 = (float)(v45 + (float)(v53 * v49)) + (float)(v54 * v50);
            v58 = (float)(v46 + (float)(v53 * v51)) + (float)(v54 * v52);
            v59 = v25[v27 + 4];
            v60 = v25[v27 + 5];
            v61 = v23[v27 + 4];
            v62 = v23[v27 + 5];
            v63 = v24[v27 + 4];
            v64 = v24[v27 + 5];
            v65 = v55 + (float)(v59 * v61);
            v66 = v56 + (float)(v59 * v63);
            v67 = v26[v27 + 4];
            v68 = v26[v27 + 5];
            v69 = v65 + (float)(v60 * v62);
            v70 = v66 + (float)(v60 * v64);
            v71 = (float)(v57 + (float)(v67 * v61)) + (float)(v68 * v62);
            v72 = (float)(v58 + (float)(v67 * v63)) + (float)(v68 * v64);
            v73 = v25[v27 + 6];
            v74 = v25[v27 + 7];
            v75 = v23[v27 + 6];
            v76 = v23[v27 + 7];
            v77 = v69 + (float)(v73 * v75);
            v78 = v24[v27 + 6];
            v79 = v24[v27 + 7];
            v80 = v70 + (float)(v73 * v78);
            v81 = v26[v27 + 6];
            v82 = v26[v27 + 7];
            v83 = v77 + (float)(v74 * v76);
            v84 = v80 + (float)(v74 * v79);
            v85 = (float)(v71 + (float)(v81 * v75)) + (float)(v82 * v76);
            v86 = (float)(v72 + (float)(v81 * v78)) + (float)(v82 * v79);
            v87 = v25[v27 + 8];
            v88 = v25[v27 + 9];
            v89 = v23[v27 + 8];
            v90 = v23[v27 + 9];
            v91 = v24[v27 + 8];
            v92 = v24[v27 + 9];
            v93 = v26[v27 + 8];
            v94 = v26[v27 + 9];
            v95 = (float)(v83 + (float)(v87 * v89)) + (float)(v88 * v90);
            v96 = (float)(v84 + (float)(v87 * v91)) + (float)(v88 * v92);
            v97 = (float)(v85 + (float)(v93 * v89)) + (float)(v94 * v90);
            v98 = (float)(v86 + (float)(v93 * v91)) + (float)(v94 * v92);
            v99 = v25[v27 + 10];
            v100 = v25[v27 + 11];
            v101 = v23[v27 + 10];
            v102 = v23[v27 + 11];
            v103 = v24[v27 + 10];
            v104 = v24[v27 + 11];
            v105 = v95 + (float)(v99 * v101);
            v106 = v96 + (float)(v99 * v103);
            v107 = v26[v27 + 10];
            v108 = v26[v27 + 11];
            v109 = v105 + (float)(v100 * v102);
            v110 = v106 + (float)(v100 * v104);
            v111 = (float)(v97 + (float)(v107 * v101)) + (float)(v108 * v102);
            v112 = (float)(v98 + (float)(v107 * v103)) + (float)(v108 * v104);
            v113 = v25[v27 + 12];
            v114 = v25[v27 + 13];
            v115 = v23[v27 + 12];
            v116 = v23[v27 + 13];
            v117 = v109 + (float)(v113 * v115);
            v118 = v24[v27 + 12];
            v119 = v24[v27 + 13];
            v120 = v110 + (float)(v113 * v118);
            v121 = v26[v27 + 12];
            v122 = v26[v27 + 13];
            v123 = v117 + (float)(v114 * v116);
            v124 = v120 + (float)(v114 * v119);
            v125 = (float)(v111 + (float)(v121 * v115)) + (float)(v122 * v116);
            v126 = (float)(v112 + (float)(v121 * v118)) + (float)(v122 * v119);
            v127 = v25[v27 + 14];
            v128 = v25[v27 + 15];
            v129 = v23[v27 + 14];
            v130 = v23[v27 + 15];
            v131 = v24[v27 + 14];
            v132 = v24[v27 + 15];
            v133 = v26[v27 + 14];
            v134 = v26[v27 + 15];
            v135 = (float)(v123 + (float)(v127 * v129)) + (float)(v128 * v130);
            v136 = (float)(v124 + (float)(v127 * v131)) + (float)(v128 * v132);
            v137 = (float)(v125 + (float)(v133 * v129)) + (float)(v134 * v130);
            v138 = (float)(v126 + (float)(v133 * v131)) + (float)(v134 * v132);
            v139 = v25[v27 + 16];
            v140 = v25[v27 + 17];
            v141 = v23[v27 + 16];
            v142 = v23[v27 + 17];
            v143 = v24[v27 + 16];
            v144 = v24[v27 + 17];
            v145 = v135 + (float)(v139 * v141);
            v146 = v136 + (float)(v139 * v143);
            v147 = v26[v27 + 16];
            v148 = v26[v27 + 17];
            v149 = v145 + (float)(v140 * v142);
            v150 = v146 + (float)(v140 * v144);
            v151 = (float)(v137 + (float)(v147 * v141)) + (float)(v148 * v142);
            v152 = (float)(v138 + (float)(v147 * v143)) + (float)(v148 * v144);
            v153 = v25[v27 + 18];
            v154 = v25[v27 + 19];
            v155 = v23[v27 + 18];
            v156 = v23[v27 + 19];
            v157 = v149 + (float)(v153 * v155);
            v158 = v24[v27 + 18];
            v159 = v24[v27 + 19];
            v160 = v150 + (float)(v153 * v158);
            v161 = v26[v27 + 18];
            v162 = v26[v27 + 19];
            v163 = v157 + (float)(v154 * v156);
            v164 = v160 + (float)(v154 * v159);
            v165 = (float)(v151 + (float)(v161 * v155)) + (float)(v162 * v156);
            v166 = (float)(v152 + (float)(v161 * v158)) + (float)(v162 * v159);
            v167 = v25[v27 + 20];
            v168 = v25[v27 + 21];
            v169 = v23[v27 + 20];
            v170 = v23[v27 + 21];
            v171 = v24[v27 + 20];
            v172 = v24[v27 + 21];
            v173 = v26[v27 + 20];
            v174 = v26[v27 + 21];
            v175 = (float)(v163 + (float)(v167 * v169)) + (float)(v168 * v170);
            v176 = (float)(v164 + (float)(v167 * v171)) + (float)(v168 * v172);
            v177 = (float)(v165 + (float)(v173 * v169)) + (float)(v174 * v170);
            v178 = (float)(v166 + (float)(v173 * v171)) + (float)(v174 * v172);
            v179 = v25[v27 + 22];
            v180 = v25[v27 + 23];
            v181 = v23[v27 + 22];
            v182 = v23[v27 + 23];
            v183 = v24[v27 + 22];
            v184 = v24[v27 + 23];
            v185 = v175 + (float)(v179 * v181);
            v186 = v176 + (float)(v179 * v183);
            v187 = v26[v27 + 22];
            v188 = v26[v27 + 23];
            v189 = v185 + (float)(v180 * v182);
            v190 = v186 + (float)(v180 * v184);
            v191 = (float)(v177 + (float)(v187 * v181)) + (float)(v188 * v182);
            v192 = (float)(v178 + (float)(v187 * v183)) + (float)(v188 * v184);
            v193 = v25[v27 + 24];
            v194 = v25[v27 + 25];
            v195 = v23[v27 + 24];
            v196 = v23[v27 + 25];
            v197 = v189 + (float)(v193 * v195);
            v198 = v24[v27 + 24];
            v199 = v24[v27 + 25];
            v200 = v190 + (float)(v193 * v198);
            v201 = v26[v27 + 24];
            v202 = v26[v27 + 25];
            v203 = v197 + (float)(v194 * v196);
            v204 = v200 + (float)(v194 * v199);
            v205 = (float)(v191 + (float)(v201 * v195)) + (float)(v202 * v196);
            v206 = (float)(v192 + (float)(v201 * v198)) + (float)(v202 * v199);
            v207 = v25[v27 + 26];
            v208 = v25[v27 + 27];
            v209 = v23[v27 + 26];
            v210 = v23[v27 + 27];
            v211 = v24[v27 + 26];
            v212 = v24[v27 + 27];
            v213 = v26[v27 + 26];
            v214 = v26[v27 + 27];
            v215 = (float)(v203 + (float)(v207 * v209)) + (float)(v208 * v210);
            v216 = (float)(v204 + (float)(v207 * v211)) + (float)(v208 * v212);
            v217 = (float)(v205 + (float)(v213 * v209)) + (float)(v214 * v210);
            v218 = (float)(v206 + (float)(v213 * v211)) + (float)(v214 * v212);
            v219 = v25[v27 + 28];
            v220 = v25[v27 + 29];
            v221 = v23[v27 + 28];
            v222 = v23[v27 + 29];
            v223 = v24[v27 + 28];
            v224 = v24[v27 + 29];
            v225 = v215 + (float)(v219 * v221);
            v226 = v216 + (float)(v219 * v223);
            v227 = v26[v27 + 28];
            v228 = v26[v27 + 29];
            v229 = v225 + (float)(v220 * v222);
            v230 = v226 + (float)(v220 * v224);
            v231 = (float)(v217 + (float)(v227 * v221)) + (float)(v228 * v222);
            v232 = (float)(v218 + (float)(v227 * v223)) + (float)(v228 * v224);
            v233 = v25[v27 + 30];
            v234 = v25[v27 + 31];
            v235 = v23[v27 + 30];
            v236 = v23[v27 + 31];
            v237 = v229 + (float)(v233 * v235);
            v238 = v24[v27 + 30];
            v239 = v24[v27 + 31];
            v240 = v230 + (float)(v233 * v238);
            v241 = v26[v27 + 30];
            v242 = v26[v27 + 31];
            v32 = v237 + (float)(v234 * v236);
            v31 = v240 + (float)(v234 * v239);
            v243 = v29;
            v30 = (float)(v231 + (float)(v241 * v235)) + (float)(v242 * v236);
            v28 = (float)(v232 + (float)(v241 * v238)) + (float)(v242 * v239);
            v29 -= 32;
            v27 += 32;
          }
          while (v243 > 0x3F);
          v26 = (float *)((char *)v26 + v27 * 4);
          v25 = (float *)((char *)v25 + v27 * 4);
          v24 = (float *)((char *)v24 + v27 * 4);
          v23 = (float *)((char *)v23 + v27 * 4);
        }
        if (v29 >= 16)
        {
          v244 = v29 + 16;
          do
          {
            v245 = v25[1];
            v246 = v23[1];
            v247 = v24[1];
            v248 = v26[1];
            v249 = (float)(v32 + (float)(*v25 * *v23)) + (float)(v245 * v246);
            v250 = (float)(v31 + (float)(*v25 * *v24)) + (float)(v245 * v247);
            v251 = (float)(v30 + (float)(*v26 * *v23)) + (float)(v248 * v246);
            v252 = (float)(v28 + (float)(*v26 * *v24)) + (float)(v248 * v247);
            v253 = v25[2];
            v254 = v25[3];
            v255 = v23[2];
            v256 = v23[3];
            v257 = v249 + (float)(v253 * v255);
            v258 = v24[2];
            v259 = v24[3];
            v260 = v250 + (float)(v253 * v258);
            v261 = v26[2];
            v262 = v26[3];
            v263 = v257 + (float)(v254 * v256);
            v264 = v260 + (float)(v254 * v259);
            v265 = (float)(v251 + (float)(v261 * v255)) + (float)(v262 * v256);
            v266 = (float)(v252 + (float)(v261 * v258)) + (float)(v262 * v259);
            v267 = v25[4];
            v268 = v25[5];
            v269 = v23[4];
            v270 = v23[5];
            v271 = v263 + (float)(v267 * v269);
            v272 = v24[4];
            v273 = v24[5];
            v274 = v264 + (float)(v267 * v272);
            v275 = v26[4];
            v276 = v26[5];
            v277 = v271 + (float)(v268 * v270);
            v278 = v274 + (float)(v268 * v273);
            v279 = (float)(v265 + (float)(v275 * v269)) + (float)(v276 * v270);
            v280 = (float)(v266 + (float)(v275 * v272)) + (float)(v276 * v273);
            v281 = v25[6];
            v282 = v25[7];
            v283 = v23[6];
            v284 = v23[7];
            v285 = v277 + (float)(v281 * v283);
            v286 = v24[6];
            v287 = v24[7];
            v288 = v278 + (float)(v281 * v286);
            v289 = v26[6];
            v290 = v26[7];
            v291 = v285 + (float)(v282 * v284);
            v292 = v288 + (float)(v282 * v287);
            v293 = (float)(v279 + (float)(v289 * v283)) + (float)(v290 * v284);
            v294 = (float)(v280 + (float)(v289 * v286)) + (float)(v290 * v287);
            v295 = v25[8];
            v296 = v25[9];
            v297 = v23[8];
            v298 = v23[9];
            v299 = v291 + (float)(v295 * v297);
            v300 = v24[8];
            v301 = v24[9];
            v302 = v292 + (float)(v295 * v300);
            v303 = v26[8];
            v304 = v26[9];
            v305 = v299 + (float)(v296 * v298);
            v306 = v302 + (float)(v296 * v301);
            v307 = (float)(v293 + (float)(v303 * v297)) + (float)(v304 * v298);
            v308 = (float)(v294 + (float)(v303 * v300)) + (float)(v304 * v301);
            v309 = v25[10];
            v310 = v25[11];
            v311 = v23[10];
            v312 = v23[11];
            v313 = v305 + (float)(v309 * v311);
            v314 = v24[10];
            v315 = v24[11];
            v316 = v306 + (float)(v309 * v314);
            v317 = v26[10];
            v318 = v26[11];
            v319 = v313 + (float)(v310 * v312);
            v320 = v316 + (float)(v310 * v315);
            v321 = (float)(v307 + (float)(v317 * v311)) + (float)(v318 * v312);
            v322 = (float)(v308 + (float)(v317 * v314)) + (float)(v318 * v315);
            v323 = v25[12];
            v324 = v25[13];
            v325 = v23[12];
            v326 = v23[13];
            v327 = v319 + (float)(v323 * v325);
            v328 = v24[12];
            v329 = v24[13];
            v330 = v320 + (float)(v323 * v328);
            v331 = v26[12];
            v332 = v26[13];
            v333 = v327 + (float)(v324 * v326);
            v334 = v330 + (float)(v324 * v329);
            v335 = (float)(v321 + (float)(v331 * v325)) + (float)(v332 * v326);
            v336 = (float)(v322 + (float)(v331 * v328)) + (float)(v332 * v329);
            v337 = v25[14];
            v338 = v25[15];
            v339 = v23[14];
            v340 = v23[15];
            v341 = v333 + (float)(v337 * v339);
            v342 = v24[14];
            v343 = v24[15];
            v344 = v334 + (float)(v337 * v342);
            v345 = v26[14];
            v346 = v26[15];
            v32 = v341 + (float)(v338 * v340);
            v31 = v344 + (float)(v338 * v343);
            v30 = (float)(v335 + (float)(v345 * v339)) + (float)(v346 * v340);
            v244 -= 16;
            v25 += 16;
            v28 = (float)(v336 + (float)(v345 * v342)) + (float)(v346 * v343);
            v23 += 16;
            v24 += 16;
            v26 += 16;
          }
          while (v244 > 0x1F);
        }
        v347 = v22 - (double)(int)v22;
        v348 = v32 + v347 * (float)(v31 - v32);
        *a2 = v348;
        a2 += a5;
        *(float *)&v347 = v30 + v347 * (float)(v28 - v30);
        *a3 = LODWORD(v347);
        a3 += a5;
        ++v17;
        v18 = v18 + 1.0;
      }
      while (v17 != a4);
    }
  }
  else if (a4 >= 1)
  {
    v349 = 0;
    v350 = 0.0;
    do
    {
      RateRamp::RateForOutputTime((RateRamp *)v456, (double)(int)v350);
      *(double *)(a1 + 168) = v351;
      Resampler2::SetVarispeedSinc(a1, v351);
      result = RateRamp::InputTimeForOutputTime((RateRamp *)v456, v350);
      v353 = fmax(v352, 0.0);
      if (v353 >= v458)
        v13 = v458;
      else
        v13 = v353;
      v354 = (v13 - (double)(int)v13) * v14;
      v355 = (float *)(**(_QWORD **)(a1 + 56) + 4 * v16 * (int)v354);
      v356 = &v355[v16];
      v357 = (float *)(v11 + 4 * (int)v13);
      if (v16 < 32)
      {
        v361 = 0.0;
        v359 = 0.0;
        v360 = v16;
      }
      else
      {
        v358 = 0;
        v359 = 0.0;
        v360 = v16;
        v361 = 0.0;
        do
        {
          v362 = v357[v358];
          v363 = v357[v358 + 1];
          v364 = (float)(v361 + (float)(v362 * v355[v358])) + (float)(v363 * v355[v358 + 1]);
          v365 = (float)(v359 + (float)(v362 * v356[v358])) + (float)(v363 * v356[v358 + 1]);
          v366 = v357[v358 + 2];
          v367 = v357[v358 + 3];
          v368 = (float)(v364 + (float)(v366 * v355[v358 + 2])) + (float)(v367 * v355[v358 + 3]);
          v369 = (float)(v365 + (float)(v366 * v356[v358 + 2])) + (float)(v367 * v356[v358 + 3]);
          v370 = v357[v358 + 4];
          v371 = v357[v358 + 5];
          v372 = (float)(v368 + (float)(v370 * v355[v358 + 4])) + (float)(v371 * v355[v358 + 5]);
          v373 = (float)(v369 + (float)(v370 * v356[v358 + 4])) + (float)(v371 * v356[v358 + 5]);
          v374 = v357[v358 + 6];
          v375 = v357[v358 + 7];
          v376 = (float)(v372 + (float)(v374 * v355[v358 + 6])) + (float)(v375 * v355[v358 + 7]);
          v377 = (float)(v373 + (float)(v374 * v356[v358 + 6])) + (float)(v375 * v356[v358 + 7]);
          v378 = v357[v358 + 8];
          v379 = v357[v358 + 9];
          v380 = (float)(v376 + (float)(v378 * v355[v358 + 8])) + (float)(v379 * v355[v358 + 9]);
          v381 = (float)(v377 + (float)(v378 * v356[v358 + 8])) + (float)(v379 * v356[v358 + 9]);
          v382 = v357[v358 + 10];
          v383 = v357[v358 + 11];
          v384 = (float)(v380 + (float)(v382 * v355[v358 + 10])) + (float)(v383 * v355[v358 + 11]);
          v385 = (float)(v381 + (float)(v382 * v356[v358 + 10])) + (float)(v383 * v356[v358 + 11]);
          v386 = v357[v358 + 12];
          v387 = v357[v358 + 13];
          v388 = (float)(v384 + (float)(v386 * v355[v358 + 12])) + (float)(v387 * v355[v358 + 13]);
          v389 = (float)(v385 + (float)(v386 * v356[v358 + 12])) + (float)(v387 * v356[v358 + 13]);
          v390 = v357[v358 + 14];
          v391 = v357[v358 + 15];
          v392 = (float)(v388 + (float)(v390 * v355[v358 + 14])) + (float)(v391 * v355[v358 + 15]);
          v393 = (float)(v389 + (float)(v390 * v356[v358 + 14])) + (float)(v391 * v356[v358 + 15]);
          v394 = v357[v358 + 16];
          v395 = v357[v358 + 17];
          v396 = (float)(v392 + (float)(v394 * v355[v358 + 16])) + (float)(v395 * v355[v358 + 17]);
          v397 = (float)(v393 + (float)(v394 * v356[v358 + 16])) + (float)(v395 * v356[v358 + 17]);
          v398 = v357[v358 + 18];
          v399 = v357[v358 + 19];
          v400 = (float)(v396 + (float)(v398 * v355[v358 + 18])) + (float)(v399 * v355[v358 + 19]);
          v401 = (float)(v397 + (float)(v398 * v356[v358 + 18])) + (float)(v399 * v356[v358 + 19]);
          v402 = v357[v358 + 20];
          v403 = v357[v358 + 21];
          v404 = (float)(v400 + (float)(v402 * v355[v358 + 20])) + (float)(v403 * v355[v358 + 21]);
          v405 = (float)(v401 + (float)(v402 * v356[v358 + 20])) + (float)(v403 * v356[v358 + 21]);
          v406 = v357[v358 + 22];
          v407 = v357[v358 + 23];
          v408 = (float)(v404 + (float)(v406 * v355[v358 + 22])) + (float)(v407 * v355[v358 + 23]);
          v409 = (float)(v405 + (float)(v406 * v356[v358 + 22])) + (float)(v407 * v356[v358 + 23]);
          v410 = v357[v358 + 24];
          v411 = v357[v358 + 25];
          v412 = (float)(v408 + (float)(v410 * v355[v358 + 24])) + (float)(v411 * v355[v358 + 25]);
          v413 = (float)(v409 + (float)(v410 * v356[v358 + 24])) + (float)(v411 * v356[v358 + 25]);
          v414 = v357[v358 + 26];
          v415 = v357[v358 + 27];
          v416 = (float)(v412 + (float)(v414 * v355[v358 + 26])) + (float)(v415 * v355[v358 + 27]);
          v417 = (float)(v413 + (float)(v414 * v356[v358 + 26])) + (float)(v415 * v356[v358 + 27]);
          v418 = v357[v358 + 28];
          v419 = v357[v358 + 29];
          v420 = (float)(v416 + (float)(v418 * v355[v358 + 28])) + (float)(v419 * v355[v358 + 29]);
          v421 = (float)(v417 + (float)(v418 * v356[v358 + 28])) + (float)(v419 * v356[v358 + 29]);
          v422 = v357[v358 + 30];
          v423 = v357[v358 + 31];
          v361 = (float)(v420 + (float)(v422 * v355[v358 + 30])) + (float)(v423 * v355[v358 + 31]);
          v424 = v360;
          v359 = (float)(v421 + (float)(v422 * v356[v358 + 30])) + (float)(v423 * v356[v358 + 31]);
          v360 -= 32;
          v358 += 32;
        }
        while (v424 > 0x3F);
        v357 = (float *)((char *)v357 + v358 * 4);
        v356 = (float *)((char *)v356 + v358 * 4);
        v355 = (float *)((char *)v355 + v358 * 4);
      }
      if (v360 >= 16)
      {
        v425 = v360 + 16;
        do
        {
          v426 = v357[1];
          v427 = (float)(v361 + (float)(*v357 * *v355)) + (float)(v426 * v355[1]);
          v428 = (float)(v359 + (float)(*v357 * *v356)) + (float)(v426 * v356[1]);
          v429 = v357[2];
          v430 = v357[3];
          v431 = (float)(v427 + (float)(v429 * v355[2])) + (float)(v430 * v355[3]);
          v432 = (float)(v428 + (float)(v429 * v356[2])) + (float)(v430 * v356[3]);
          v433 = v357[4];
          v434 = v357[5];
          v435 = (float)(v431 + (float)(v433 * v355[4])) + (float)(v434 * v355[5]);
          v436 = (float)(v432 + (float)(v433 * v356[4])) + (float)(v434 * v356[5]);
          v437 = v357[6];
          v438 = v357[7];
          v439 = (float)(v435 + (float)(v437 * v355[6])) + (float)(v438 * v355[7]);
          v440 = (float)(v436 + (float)(v437 * v356[6])) + (float)(v438 * v356[7]);
          v441 = v357[8];
          v442 = v357[9];
          v443 = (float)(v439 + (float)(v441 * v355[8])) + (float)(v442 * v355[9]);
          v444 = (float)(v440 + (float)(v441 * v356[8])) + (float)(v442 * v356[9]);
          v445 = v357[10];
          v446 = v357[11];
          v447 = (float)(v443 + (float)(v445 * v355[10])) + (float)(v446 * v355[11]);
          v448 = (float)(v444 + (float)(v445 * v356[10])) + (float)(v446 * v356[11]);
          v449 = v357[12];
          v450 = v357[13];
          v451 = (float)(v447 + (float)(v449 * v355[12])) + (float)(v450 * v355[13]);
          v452 = (float)(v448 + (float)(v449 * v356[12])) + (float)(v450 * v356[13]);
          v453 = v357[14];
          v454 = v357[15];
          v361 = (float)(v451 + (float)(v453 * v355[14])) + (float)(v454 * v355[15]);
          v425 -= 16;
          v359 = (float)(v452 + (float)(v453 * v356[14])) + (float)(v454 * v356[15]);
          v357 += 16;
          v355 += 16;
          v356 += 16;
        }
        while (v425 > 0x1F);
      }
      v455 = v354 - (double)(int)v354;
      *a2 = v361 + (float)(v455 * (float)(v359 - v361));
      a2 += a5;
      ++v349;
      v350 = v350 + 1.0;
    }
    while (v349 != a4);
  }
  *(double *)(a1 + 160) = v13;
  return result;
}

uint64_t Resampler2::ConvertScalar<Resampler2::FixedRate>(uint64_t a1, float *a2, _DWORD *a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  double v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  uint64_t v23;
  float v24;
  int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  unsigned int v239;
  unsigned int v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  double v343;
  float v344;
  int v345;
  uint64_t v346;
  double v347;
  float *v348;
  float *v349;
  float *v350;
  uint64_t v351;
  float v352;
  int v353;
  float v354;
  float v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  float v399;
  float v400;
  float v401;
  float v402;
  float v403;
  float v404;
  float v405;
  float v406;
  float v407;
  float v408;
  float v409;
  float v410;
  float v411;
  float v412;
  float v413;
  float v414;
  float v415;
  float v416;
  unsigned int v417;
  unsigned int v418;
  float v419;
  float v420;
  float v421;
  float v422;
  float v423;
  float v424;
  float v425;
  float v426;
  float v427;
  float v428;
  float v429;
  float v430;
  float v431;
  float v432;
  float v433;
  float v434;
  float v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  float v443;
  float v444;
  float v445;
  float v446;
  float v447;
  float v448;

  v10 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(double *)(a1 + 160);
  v13 = *(double *)(a1 + 168);
  v14 = (double)*(int *)(*(_QWORD *)(a1 + 56) + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if (a3)
  {
    if (a4 >= 1)
    {
      v16 = 0;
      v17 = **(_QWORD **)(a1 + 56);
      do
      {
        v18 = (v12 - (double)(int)v12) * v14;
        v19 = (float *)(v17 + 4 * (int)result * (int)v18);
        v20 = &v19[(int)result];
        v21 = (float *)(v10 + 4 * (int)v12);
        v22 = (float *)(v11 + 4 * (int)v12);
        if ((int)result < 32)
        {
          v28 = 0.0;
          v27 = 0.0;
          v26 = 0.0;
          v25 = result;
          v24 = 0.0;
        }
        else
        {
          v23 = 0;
          v24 = 0.0;
          v25 = result;
          v26 = 0.0;
          v27 = 0.0;
          v28 = 0.0;
          do
          {
            v29 = v21[v23];
            v30 = v21[v23 + 1];
            v31 = v19[v23];
            v32 = v19[v23 + 1];
            v33 = v28 + (float)(v29 * v31);
            v34 = v20[v23];
            v35 = v20[v23 + 1];
            v36 = v27 + (float)(v29 * v34);
            v37 = v22[v23];
            v38 = v22[v23 + 1];
            v39 = v33 + (float)(v30 * v32);
            v40 = v36 + (float)(v30 * v35);
            v41 = (float)(v26 + (float)(v37 * v31)) + (float)(v38 * v32);
            v42 = (float)(v24 + (float)(v37 * v34)) + (float)(v38 * v35);
            v43 = v21[v23 + 2];
            v44 = v21[v23 + 3];
            v45 = v19[v23 + 2];
            v46 = v19[v23 + 3];
            v47 = v20[v23 + 2];
            v48 = v20[v23 + 3];
            v49 = v22[v23 + 2];
            v50 = v22[v23 + 3];
            v51 = (float)(v39 + (float)(v43 * v45)) + (float)(v44 * v46);
            v52 = (float)(v40 + (float)(v43 * v47)) + (float)(v44 * v48);
            v53 = (float)(v41 + (float)(v49 * v45)) + (float)(v50 * v46);
            v54 = (float)(v42 + (float)(v49 * v47)) + (float)(v50 * v48);
            v55 = v21[v23 + 4];
            v56 = v21[v23 + 5];
            v57 = v19[v23 + 4];
            v58 = v19[v23 + 5];
            v59 = v20[v23 + 4];
            v60 = v20[v23 + 5];
            v61 = v51 + (float)(v55 * v57);
            v62 = v52 + (float)(v55 * v59);
            v63 = v22[v23 + 4];
            v64 = v22[v23 + 5];
            v65 = v61 + (float)(v56 * v58);
            v66 = v62 + (float)(v56 * v60);
            v67 = (float)(v53 + (float)(v63 * v57)) + (float)(v64 * v58);
            v68 = (float)(v54 + (float)(v63 * v59)) + (float)(v64 * v60);
            v69 = v21[v23 + 6];
            v70 = v21[v23 + 7];
            v71 = v19[v23 + 6];
            v72 = v19[v23 + 7];
            v73 = v65 + (float)(v69 * v71);
            v74 = v20[v23 + 6];
            v75 = v20[v23 + 7];
            v76 = v66 + (float)(v69 * v74);
            v77 = v22[v23 + 6];
            v78 = v22[v23 + 7];
            v79 = v73 + (float)(v70 * v72);
            v80 = v76 + (float)(v70 * v75);
            v81 = (float)(v67 + (float)(v77 * v71)) + (float)(v78 * v72);
            v82 = (float)(v68 + (float)(v77 * v74)) + (float)(v78 * v75);
            v83 = v21[v23 + 8];
            v84 = v21[v23 + 9];
            v85 = v19[v23 + 8];
            v86 = v19[v23 + 9];
            v87 = v20[v23 + 8];
            v88 = v20[v23 + 9];
            v89 = v22[v23 + 8];
            v90 = v22[v23 + 9];
            v91 = (float)(v79 + (float)(v83 * v85)) + (float)(v84 * v86);
            v92 = (float)(v80 + (float)(v83 * v87)) + (float)(v84 * v88);
            v93 = (float)(v81 + (float)(v89 * v85)) + (float)(v90 * v86);
            v94 = (float)(v82 + (float)(v89 * v87)) + (float)(v90 * v88);
            v95 = v21[v23 + 10];
            v96 = v21[v23 + 11];
            v97 = v19[v23 + 10];
            v98 = v19[v23 + 11];
            v99 = v20[v23 + 10];
            v100 = v20[v23 + 11];
            v101 = v91 + (float)(v95 * v97);
            v102 = v92 + (float)(v95 * v99);
            v103 = v22[v23 + 10];
            v104 = v22[v23 + 11];
            v105 = v101 + (float)(v96 * v98);
            v106 = v102 + (float)(v96 * v100);
            v107 = (float)(v93 + (float)(v103 * v97)) + (float)(v104 * v98);
            v108 = (float)(v94 + (float)(v103 * v99)) + (float)(v104 * v100);
            v109 = v21[v23 + 12];
            v110 = v21[v23 + 13];
            v111 = v19[v23 + 12];
            v112 = v19[v23 + 13];
            v113 = v105 + (float)(v109 * v111);
            v114 = v20[v23 + 12];
            v115 = v20[v23 + 13];
            v116 = v106 + (float)(v109 * v114);
            v117 = v22[v23 + 12];
            v118 = v22[v23 + 13];
            v119 = v113 + (float)(v110 * v112);
            v120 = v116 + (float)(v110 * v115);
            v121 = (float)(v107 + (float)(v117 * v111)) + (float)(v118 * v112);
            v122 = (float)(v108 + (float)(v117 * v114)) + (float)(v118 * v115);
            v123 = v21[v23 + 14];
            v124 = v21[v23 + 15];
            v125 = v19[v23 + 14];
            v126 = v19[v23 + 15];
            v127 = v20[v23 + 14];
            v128 = v20[v23 + 15];
            v129 = v22[v23 + 14];
            v130 = v22[v23 + 15];
            v131 = (float)(v119 + (float)(v123 * v125)) + (float)(v124 * v126);
            v132 = (float)(v120 + (float)(v123 * v127)) + (float)(v124 * v128);
            v133 = (float)(v121 + (float)(v129 * v125)) + (float)(v130 * v126);
            v134 = (float)(v122 + (float)(v129 * v127)) + (float)(v130 * v128);
            v135 = v21[v23 + 16];
            v136 = v21[v23 + 17];
            v137 = v19[v23 + 16];
            v138 = v19[v23 + 17];
            v139 = v20[v23 + 16];
            v140 = v20[v23 + 17];
            v141 = v131 + (float)(v135 * v137);
            v142 = v132 + (float)(v135 * v139);
            v143 = v22[v23 + 16];
            v144 = v22[v23 + 17];
            v145 = v141 + (float)(v136 * v138);
            v146 = v142 + (float)(v136 * v140);
            v147 = (float)(v133 + (float)(v143 * v137)) + (float)(v144 * v138);
            v148 = (float)(v134 + (float)(v143 * v139)) + (float)(v144 * v140);
            v149 = v21[v23 + 18];
            v150 = v21[v23 + 19];
            v151 = v19[v23 + 18];
            v152 = v19[v23 + 19];
            v153 = v145 + (float)(v149 * v151);
            v154 = v20[v23 + 18];
            v155 = v20[v23 + 19];
            v156 = v146 + (float)(v149 * v154);
            v157 = v22[v23 + 18];
            v158 = v22[v23 + 19];
            v159 = v153 + (float)(v150 * v152);
            v160 = v156 + (float)(v150 * v155);
            v161 = (float)(v147 + (float)(v157 * v151)) + (float)(v158 * v152);
            v162 = (float)(v148 + (float)(v157 * v154)) + (float)(v158 * v155);
            v163 = v21[v23 + 20];
            v164 = v21[v23 + 21];
            v165 = v19[v23 + 20];
            v166 = v19[v23 + 21];
            v167 = v20[v23 + 20];
            v168 = v20[v23 + 21];
            v169 = v22[v23 + 20];
            v170 = v22[v23 + 21];
            v171 = (float)(v159 + (float)(v163 * v165)) + (float)(v164 * v166);
            v172 = (float)(v160 + (float)(v163 * v167)) + (float)(v164 * v168);
            v173 = (float)(v161 + (float)(v169 * v165)) + (float)(v170 * v166);
            v174 = (float)(v162 + (float)(v169 * v167)) + (float)(v170 * v168);
            v175 = v21[v23 + 22];
            v176 = v21[v23 + 23];
            v177 = v19[v23 + 22];
            v178 = v19[v23 + 23];
            v179 = v20[v23 + 22];
            v180 = v20[v23 + 23];
            v181 = v171 + (float)(v175 * v177);
            v182 = v172 + (float)(v175 * v179);
            v183 = v22[v23 + 22];
            v184 = v22[v23 + 23];
            v185 = v181 + (float)(v176 * v178);
            v186 = v182 + (float)(v176 * v180);
            v187 = (float)(v173 + (float)(v183 * v177)) + (float)(v184 * v178);
            v188 = (float)(v174 + (float)(v183 * v179)) + (float)(v184 * v180);
            v189 = v21[v23 + 24];
            v190 = v21[v23 + 25];
            v191 = v19[v23 + 24];
            v192 = v19[v23 + 25];
            v193 = v185 + (float)(v189 * v191);
            v194 = v20[v23 + 24];
            v195 = v20[v23 + 25];
            v196 = v186 + (float)(v189 * v194);
            v197 = v22[v23 + 24];
            v198 = v22[v23 + 25];
            v199 = v193 + (float)(v190 * v192);
            v200 = v196 + (float)(v190 * v195);
            v201 = (float)(v187 + (float)(v197 * v191)) + (float)(v198 * v192);
            v202 = (float)(v188 + (float)(v197 * v194)) + (float)(v198 * v195);
            v203 = v21[v23 + 26];
            v204 = v21[v23 + 27];
            v205 = v19[v23 + 26];
            v206 = v19[v23 + 27];
            v207 = v20[v23 + 26];
            v208 = v20[v23 + 27];
            v209 = v22[v23 + 26];
            v210 = v22[v23 + 27];
            v211 = (float)(v199 + (float)(v203 * v205)) + (float)(v204 * v206);
            v212 = (float)(v200 + (float)(v203 * v207)) + (float)(v204 * v208);
            v213 = (float)(v201 + (float)(v209 * v205)) + (float)(v210 * v206);
            v214 = (float)(v202 + (float)(v209 * v207)) + (float)(v210 * v208);
            v215 = v21[v23 + 28];
            v216 = v21[v23 + 29];
            v217 = v19[v23 + 28];
            v218 = v19[v23 + 29];
            v219 = v20[v23 + 28];
            v220 = v20[v23 + 29];
            v221 = v211 + (float)(v215 * v217);
            v222 = v212 + (float)(v215 * v219);
            v223 = v22[v23 + 28];
            v224 = v22[v23 + 29];
            v225 = v221 + (float)(v216 * v218);
            v226 = v222 + (float)(v216 * v220);
            v227 = (float)(v213 + (float)(v223 * v217)) + (float)(v224 * v218);
            v228 = (float)(v214 + (float)(v223 * v219)) + (float)(v224 * v220);
            v229 = v21[v23 + 30];
            v230 = v21[v23 + 31];
            v231 = v19[v23 + 30];
            v232 = v19[v23 + 31];
            v233 = v225 + (float)(v229 * v231);
            v234 = v20[v23 + 30];
            v235 = v20[v23 + 31];
            v236 = v226 + (float)(v229 * v234);
            v237 = v22[v23 + 30];
            v238 = v22[v23 + 31];
            v28 = v233 + (float)(v230 * v232);
            v27 = v236 + (float)(v230 * v235);
            v239 = v25;
            v26 = (float)(v227 + (float)(v237 * v231)) + (float)(v238 * v232);
            v24 = (float)(v228 + (float)(v237 * v234)) + (float)(v238 * v235);
            v25 -= 32;
            v23 += 32;
          }
          while (v239 > 0x3F);
          v22 = (float *)((char *)v22 + v23 * 4);
          v21 = (float *)((char *)v21 + v23 * 4);
          v20 = (float *)((char *)v20 + v23 * 4);
          v19 = (float *)((char *)v19 + v23 * 4);
        }
        if (v25 >= 16)
        {
          v240 = v25 + 16;
          do
          {
            v241 = v21[1];
            v242 = v19[1];
            v243 = v20[1];
            v244 = v22[1];
            v245 = (float)(v28 + (float)(*v21 * *v19)) + (float)(v241 * v242);
            v246 = (float)(v27 + (float)(*v21 * *v20)) + (float)(v241 * v243);
            v247 = (float)(v26 + (float)(*v22 * *v19)) + (float)(v244 * v242);
            v248 = (float)(v24 + (float)(*v22 * *v20)) + (float)(v244 * v243);
            v249 = v21[2];
            v250 = v21[3];
            v251 = v19[2];
            v252 = v19[3];
            v253 = v245 + (float)(v249 * v251);
            v254 = v20[2];
            v255 = v20[3];
            v256 = v246 + (float)(v249 * v254);
            v257 = v22[2];
            v258 = v22[3];
            v259 = v253 + (float)(v250 * v252);
            v260 = v256 + (float)(v250 * v255);
            v261 = (float)(v247 + (float)(v257 * v251)) + (float)(v258 * v252);
            v262 = (float)(v248 + (float)(v257 * v254)) + (float)(v258 * v255);
            v263 = v21[4];
            v264 = v21[5];
            v265 = v19[4];
            v266 = v19[5];
            v267 = v259 + (float)(v263 * v265);
            v268 = v20[4];
            v269 = v20[5];
            v270 = v260 + (float)(v263 * v268);
            v271 = v22[4];
            v272 = v22[5];
            v273 = v267 + (float)(v264 * v266);
            v274 = v270 + (float)(v264 * v269);
            v275 = (float)(v261 + (float)(v271 * v265)) + (float)(v272 * v266);
            v276 = (float)(v262 + (float)(v271 * v268)) + (float)(v272 * v269);
            v277 = v21[6];
            v278 = v21[7];
            v279 = v19[6];
            v280 = v19[7];
            v281 = v273 + (float)(v277 * v279);
            v282 = v20[6];
            v283 = v20[7];
            v284 = v274 + (float)(v277 * v282);
            v285 = v22[6];
            v286 = v22[7];
            v287 = v281 + (float)(v278 * v280);
            v288 = v284 + (float)(v278 * v283);
            v289 = (float)(v275 + (float)(v285 * v279)) + (float)(v286 * v280);
            v290 = (float)(v276 + (float)(v285 * v282)) + (float)(v286 * v283);
            v291 = v21[8];
            v292 = v21[9];
            v293 = v19[8];
            v294 = v19[9];
            v295 = v287 + (float)(v291 * v293);
            v296 = v20[8];
            v297 = v20[9];
            v298 = v288 + (float)(v291 * v296);
            v299 = v22[8];
            v300 = v22[9];
            v301 = v295 + (float)(v292 * v294);
            v302 = v298 + (float)(v292 * v297);
            v303 = (float)(v289 + (float)(v299 * v293)) + (float)(v300 * v294);
            v304 = (float)(v290 + (float)(v299 * v296)) + (float)(v300 * v297);
            v305 = v21[10];
            v306 = v21[11];
            v307 = v19[10];
            v308 = v19[11];
            v309 = v301 + (float)(v305 * v307);
            v310 = v20[10];
            v311 = v20[11];
            v312 = v302 + (float)(v305 * v310);
            v313 = v22[10];
            v314 = v22[11];
            v315 = v309 + (float)(v306 * v308);
            v316 = v312 + (float)(v306 * v311);
            v317 = (float)(v303 + (float)(v313 * v307)) + (float)(v314 * v308);
            v318 = (float)(v304 + (float)(v313 * v310)) + (float)(v314 * v311);
            v319 = v21[12];
            v320 = v21[13];
            v321 = v19[12];
            v322 = v19[13];
            v323 = v315 + (float)(v319 * v321);
            v324 = v20[12];
            v325 = v20[13];
            v326 = v316 + (float)(v319 * v324);
            v327 = v22[12];
            v328 = v22[13];
            v329 = v323 + (float)(v320 * v322);
            v330 = v326 + (float)(v320 * v325);
            v331 = (float)(v317 + (float)(v327 * v321)) + (float)(v328 * v322);
            v332 = (float)(v318 + (float)(v327 * v324)) + (float)(v328 * v325);
            v333 = v21[14];
            v334 = v21[15];
            v335 = v19[14];
            v336 = v19[15];
            v337 = v329 + (float)(v333 * v335);
            v338 = v20[14];
            v339 = v20[15];
            v340 = v330 + (float)(v333 * v338);
            v341 = v22[14];
            v342 = v22[15];
            v28 = v337 + (float)(v334 * v336);
            v27 = v340 + (float)(v334 * v339);
            v26 = (float)(v331 + (float)(v341 * v335)) + (float)(v342 * v336);
            v240 -= 16;
            v21 += 16;
            v24 = (float)(v332 + (float)(v341 * v338)) + (float)(v342 * v339);
            v19 += 16;
            v20 += 16;
            v22 += 16;
          }
          while (v240 > 0x1F);
        }
        v343 = v18 - (double)(int)v18;
        v344 = v28 + v343 * (float)(v27 - v28);
        *a2 = v344;
        a2 += a5;
        *(float *)&v343 = v26 + v343 * (float)(v24 - v26);
        *a3 = LODWORD(v343);
        a3 += a5;
        v12 = v13 + v12;
        ++v16;
      }
      while (v16 != a4);
    }
  }
  else if (a4 >= 1)
  {
    v345 = 0;
    v346 = **(_QWORD **)(a1 + 56);
    do
    {
      v347 = (v12 - (double)(int)v12) * v14;
      v348 = (float *)(v346 + 4 * (int)result * (int)v347);
      v349 = &v348[(int)result];
      v350 = (float *)(v10 + 4 * (int)v12);
      if ((int)result < 32)
      {
        v354 = 0.0;
        v352 = 0.0;
        v353 = result;
      }
      else
      {
        v351 = 0;
        v352 = 0.0;
        v353 = result;
        v354 = 0.0;
        do
        {
          v355 = v350[v351];
          v356 = v350[v351 + 1];
          v357 = (float)(v354 + (float)(v355 * v348[v351])) + (float)(v356 * v348[v351 + 1]);
          v358 = (float)(v352 + (float)(v355 * v349[v351])) + (float)(v356 * v349[v351 + 1]);
          v359 = v350[v351 + 2];
          v360 = v350[v351 + 3];
          v361 = (float)(v357 + (float)(v359 * v348[v351 + 2])) + (float)(v360 * v348[v351 + 3]);
          v362 = (float)(v358 + (float)(v359 * v349[v351 + 2])) + (float)(v360 * v349[v351 + 3]);
          v363 = v350[v351 + 4];
          v364 = v350[v351 + 5];
          v365 = (float)(v361 + (float)(v363 * v348[v351 + 4])) + (float)(v364 * v348[v351 + 5]);
          v366 = (float)(v362 + (float)(v363 * v349[v351 + 4])) + (float)(v364 * v349[v351 + 5]);
          v367 = v350[v351 + 6];
          v368 = v350[v351 + 7];
          v369 = (float)(v365 + (float)(v367 * v348[v351 + 6])) + (float)(v368 * v348[v351 + 7]);
          v370 = (float)(v366 + (float)(v367 * v349[v351 + 6])) + (float)(v368 * v349[v351 + 7]);
          v371 = v350[v351 + 8];
          v372 = v350[v351 + 9];
          v373 = (float)(v369 + (float)(v371 * v348[v351 + 8])) + (float)(v372 * v348[v351 + 9]);
          v374 = (float)(v370 + (float)(v371 * v349[v351 + 8])) + (float)(v372 * v349[v351 + 9]);
          v375 = v350[v351 + 10];
          v376 = v350[v351 + 11];
          v377 = (float)(v373 + (float)(v375 * v348[v351 + 10])) + (float)(v376 * v348[v351 + 11]);
          v378 = (float)(v374 + (float)(v375 * v349[v351 + 10])) + (float)(v376 * v349[v351 + 11]);
          v379 = v350[v351 + 12];
          v380 = v350[v351 + 13];
          v381 = (float)(v377 + (float)(v379 * v348[v351 + 12])) + (float)(v380 * v348[v351 + 13]);
          v382 = (float)(v378 + (float)(v379 * v349[v351 + 12])) + (float)(v380 * v349[v351 + 13]);
          v383 = v350[v351 + 14];
          v384 = v350[v351 + 15];
          v385 = (float)(v381 + (float)(v383 * v348[v351 + 14])) + (float)(v384 * v348[v351 + 15]);
          v386 = (float)(v382 + (float)(v383 * v349[v351 + 14])) + (float)(v384 * v349[v351 + 15]);
          v387 = v350[v351 + 16];
          v388 = v350[v351 + 17];
          v389 = (float)(v385 + (float)(v387 * v348[v351 + 16])) + (float)(v388 * v348[v351 + 17]);
          v390 = (float)(v386 + (float)(v387 * v349[v351 + 16])) + (float)(v388 * v349[v351 + 17]);
          v391 = v350[v351 + 18];
          v392 = v350[v351 + 19];
          v393 = (float)(v389 + (float)(v391 * v348[v351 + 18])) + (float)(v392 * v348[v351 + 19]);
          v394 = (float)(v390 + (float)(v391 * v349[v351 + 18])) + (float)(v392 * v349[v351 + 19]);
          v395 = v350[v351 + 20];
          v396 = v350[v351 + 21];
          v397 = (float)(v393 + (float)(v395 * v348[v351 + 20])) + (float)(v396 * v348[v351 + 21]);
          v398 = (float)(v394 + (float)(v395 * v349[v351 + 20])) + (float)(v396 * v349[v351 + 21]);
          v399 = v350[v351 + 22];
          v400 = v350[v351 + 23];
          v401 = (float)(v397 + (float)(v399 * v348[v351 + 22])) + (float)(v400 * v348[v351 + 23]);
          v402 = (float)(v398 + (float)(v399 * v349[v351 + 22])) + (float)(v400 * v349[v351 + 23]);
          v403 = v350[v351 + 24];
          v404 = v350[v351 + 25];
          v405 = (float)(v401 + (float)(v403 * v348[v351 + 24])) + (float)(v404 * v348[v351 + 25]);
          v406 = (float)(v402 + (float)(v403 * v349[v351 + 24])) + (float)(v404 * v349[v351 + 25]);
          v407 = v350[v351 + 26];
          v408 = v350[v351 + 27];
          v409 = (float)(v405 + (float)(v407 * v348[v351 + 26])) + (float)(v408 * v348[v351 + 27]);
          v410 = (float)(v406 + (float)(v407 * v349[v351 + 26])) + (float)(v408 * v349[v351 + 27]);
          v411 = v350[v351 + 28];
          v412 = v350[v351 + 29];
          v413 = (float)(v409 + (float)(v411 * v348[v351 + 28])) + (float)(v412 * v348[v351 + 29]);
          v414 = (float)(v410 + (float)(v411 * v349[v351 + 28])) + (float)(v412 * v349[v351 + 29]);
          v415 = v350[v351 + 30];
          v416 = v350[v351 + 31];
          v354 = (float)(v413 + (float)(v415 * v348[v351 + 30])) + (float)(v416 * v348[v351 + 31]);
          v417 = v353;
          v352 = (float)(v414 + (float)(v415 * v349[v351 + 30])) + (float)(v416 * v349[v351 + 31]);
          v353 -= 32;
          v351 += 32;
        }
        while (v417 > 0x3F);
        v350 = (float *)((char *)v350 + v351 * 4);
        v349 = (float *)((char *)v349 + v351 * 4);
        v348 = (float *)((char *)v348 + v351 * 4);
      }
      if (v353 >= 16)
      {
        v418 = v353 + 16;
        do
        {
          v419 = v350[1];
          v420 = (float)(v354 + (float)(*v350 * *v348)) + (float)(v419 * v348[1]);
          v421 = (float)(v352 + (float)(*v350 * *v349)) + (float)(v419 * v349[1]);
          v422 = v350[2];
          v423 = v350[3];
          v424 = (float)(v420 + (float)(v422 * v348[2])) + (float)(v423 * v348[3]);
          v425 = (float)(v421 + (float)(v422 * v349[2])) + (float)(v423 * v349[3]);
          v426 = v350[4];
          v427 = v350[5];
          v428 = (float)(v424 + (float)(v426 * v348[4])) + (float)(v427 * v348[5]);
          v429 = (float)(v425 + (float)(v426 * v349[4])) + (float)(v427 * v349[5]);
          v430 = v350[6];
          v431 = v350[7];
          v432 = (float)(v428 + (float)(v430 * v348[6])) + (float)(v431 * v348[7]);
          v433 = (float)(v429 + (float)(v430 * v349[6])) + (float)(v431 * v349[7]);
          v434 = v350[8];
          v435 = v350[9];
          v436 = (float)(v432 + (float)(v434 * v348[8])) + (float)(v435 * v348[9]);
          v437 = (float)(v433 + (float)(v434 * v349[8])) + (float)(v435 * v349[9]);
          v438 = v350[10];
          v439 = v350[11];
          v440 = (float)(v436 + (float)(v438 * v348[10])) + (float)(v439 * v348[11]);
          v441 = (float)(v437 + (float)(v438 * v349[10])) + (float)(v439 * v349[11]);
          v442 = v350[12];
          v443 = v350[13];
          v444 = (float)(v440 + (float)(v442 * v348[12])) + (float)(v443 * v348[13]);
          v445 = (float)(v441 + (float)(v442 * v349[12])) + (float)(v443 * v349[13]);
          v446 = v350[14];
          v447 = v350[15];
          v354 = (float)(v444 + (float)(v446 * v348[14])) + (float)(v447 * v348[15]);
          v418 -= 16;
          v352 = (float)(v445 + (float)(v446 * v349[14])) + (float)(v447 * v349[15]);
          v350 += 16;
          v348 += 16;
          v349 += 16;
        }
        while (v418 > 0x1F);
      }
      v448 = v347 - (double)(int)v347;
      *a2 = v354 + (float)(v448 * (float)(v352 - v354));
      a2 += a5;
      v12 = v13 + v12;
      ++v345;
    }
    while (v345 != a4);
  }
  *(double *)(a1 + 160) = v12;
  return result;
}

float vdotprD2i(const float *a1, const float *a2, const float *a3, const float *a4, double a5, float *a6, float *a7, unint64_t a8)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float64x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float32x4_t v35;
  const float *v36;
  const float *v37;
  const float *v38;
  const float *v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float64x2_t v65;
  float64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  float64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  float64x2_t v72;
  float result;

  v8 = *(float32x4_t *)(a1 + 4);
  v9 = *(float32x4_t *)(a2 + 4);
  v10 = *(float32x4_t *)(a3 + 4);
  v11 = *(float32x4_t *)(a4 + 4);
  v12 = vmulq_f32(v8, v10);
  v13 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a3);
  v14 = vmulq_f32(v9, v10);
  v15 = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a3);
  v16 = vmulq_f32(v8, v11);
  v17 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a4);
  v18 = vmulq_f32(v9, v11);
  v19 = *(float32x4_t *)(a3 + 8);
  v20 = *(float32x4_t *)(a3 + 12);
  v21 = *(float32x4_t *)(a4 + 8);
  v22 = *(float32x4_t *)(a4 + 12);
  v23 = *(float32x4_t *)(a2 + 8);
  v24 = *(float32x4_t *)(a2 + 12);
  v25 = 0uLL;
  v26 = *(float32x4_t *)(a1 + 8);
  v27 = *(float32x4_t *)(a1 + 12);
  if (a8 >> 2 == 4)
  {
    v28 = 0uLL;
    v29 = 0uLL;
    v30 = 0uLL;
    v31 = 0uLL;
    v32 = 0uLL;
    v33 = 0uLL;
    v34 = 0uLL;
  }
  else
  {
    v35 = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a4);
    v36 = a4 + 16;
    v33 = 0uLL;
    v37 = a3 + 16;
    v34 = 0uLL;
    v38 = a2 + 16;
    v39 = a1 + 16;
    v31 = 0uLL;
    v32 = 0uLL;
    v29 = 0uLL;
    v30 = 0uLL;
    v28 = 0uLL;
    do
    {
      v28 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v12), vcvt_hight_f64_f32(v13)), v28);
      v25 = vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v12.f32), vcvtq_f64_f32(*(float32x2_t *)v13.f32)), v25);
      v30 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v14), vcvt_hight_f64_f32(v15)), v30);
      v29 = vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v14.f32), vcvtq_f64_f32(*(float32x2_t *)v15.f32)), v29);
      v40 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v16.f32), vcvtq_f64_f32(*(float32x2_t *)v17.f32));
      v41 = vaddq_f64(vcvt_hight_f64_f32(v16), vcvt_hight_f64_f32(v17));
      v42 = vcvt_hight_f64_f32(v18);
      v43 = vcvtq_f64_f32(*(float32x2_t *)v18.f32);
      v44 = vcvt_hight_f64_f32(v35);
      v45 = vcvtq_f64_f32(*(float32x2_t *)v35.f32);
      v13 = vmulq_f32(v19, v26);
      v12 = vmulq_f32(v20, v27);
      v17 = vmulq_f32(v21, v26);
      v16 = vmulq_f32(v22, v27);
      v26 = *(float32x4_t *)v39;
      v27 = *(float32x4_t *)(v39 + 4);
      v39 += 8;
      v15 = vmulq_f32(v19, v23);
      v14 = vmulq_f32(v20, v24);
      v35 = vmulq_f32(v21, v23);
      v18 = vmulq_f32(v22, v24);
      v23 = *(float32x4_t *)v38;
      v24 = *(float32x4_t *)(v38 + 4);
      v38 += 8;
      v32 = vaddq_f64(v41, v32);
      v31 = vaddq_f64(v40, v31);
      v19 = *(float32x4_t *)v37;
      v20 = *(float32x4_t *)(v37 + 4);
      v37 += 8;
      v21 = *(float32x4_t *)v36;
      v22 = *(float32x4_t *)(v36 + 4);
      v36 += 8;
      v34 = vaddq_f64(vaddq_f64(v42, v44), v34);
      v33 = vaddq_f64(vaddq_f64(v43, v45), v33);
    }
    while (v37 != &a3[4 * (a8 >> 2)]);
  }
  v46 = vcvtq_f64_f32(*(float32x2_t *)v12.f32);
  v47 = vcvtq_f64_f32(*(float32x2_t *)v13.f32);
  v48 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v12), vcvt_hight_f64_f32(v13)), v28);
  v49 = vcvtq_f64_f32(*(float32x2_t *)v14.f32);
  v50 = vcvtq_f64_f32(*(float32x2_t *)v15.f32);
  v51 = vcvt_hight_f64_f32(v15);
  v52 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v14), v51), v30);
  v53 = vcvtq_f64_f32(*(float32x2_t *)v17.f32);
  v54 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v16), vcvt_hight_f64_f32(v17)), v32);
  v55 = vaddq_f64(vaddq_f64(v50, vcvtq_f64_f32(*(float32x2_t *)v18.f32)), v33);
  v56 = vaddq_f64(vaddq_f64(v51, vcvt_hight_f64_f32(v18)), v34);
  v57 = vmulq_f32(v20, v27);
  v58 = vmulq_f32(v19, v26);
  v59 = vmulq_f32(v20, v24);
  v60 = vmulq_f32(v19, v23);
  v61 = vmulq_f32(v22, v27);
  v62 = vmulq_f32(v21, v26);
  v63 = vmulq_f32(v22, v24);
  v64 = vmulq_f32(v21, v23);
  v65 = vaddq_f64(v56, vaddq_f64(vcvt_hight_f64_f32(v63), vcvt_hight_f64_f32(v64)));
  v66 = vaddq_f64(v55, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v63.f32), vcvtq_f64_f32(*(float32x2_t *)v64.f32)));
  v67 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v46, v47), v25), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v57.f32), vcvtq_f64_f32(*(float32x2_t *)v58.f32))), vaddq_f64(v48, vaddq_f64(vcvt_hight_f64_f32(v57), vcvt_hight_f64_f32(v58))));
  v68 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v16.f32), v53), v31), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v61.f32), vcvtq_f64_f32(*(float32x2_t *)v62.f32))), vaddq_f64(v54, vaddq_f64(vcvt_hight_f64_f32(v61), vcvt_hight_f64_f32(v62))));
  v69 = vaddq_f64((float64x2_t)vzip1q_s64(v68, v67), (float64x2_t)vzip2q_s64(v68, v67));
  v70 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v49, v50), v29), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v59.f32), vcvtq_f64_f32(*(float32x2_t *)v60.f32))), vaddq_f64(v52, vaddq_f64(vcvt_hight_f64_f32(v59), vcvt_hight_f64_f32(v60))));
  v71 = (int64x2_t)vaddq_f64(v66, v65);
  v72 = vaddq_f64((float64x2_t)vzip1q_s64(v71, v70), (float64x2_t)vzip2q_s64(v71, v70));
  *(float *)v65.f64 = v69.f64[1] + a5 * (v69.f64[0] - v69.f64[1]);
  *a6 = *(float *)v65.f64;
  result = v72.f64[1] + a5 * (v72.f64[0] - v72.f64[1]);
  *a7 = result;
  return result;
}

uint64_t Resampler2::ConstructorBody(uint64_t a1, int a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  double v11;
  double v12;
  double v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v21;
  signed int v22;
  unsigned int v24;
  int v25;
  double v26;
  double v27;
  int v28;
  unsigned int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  signed int v35;
  double v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  int v45;
  std::bad_alloc *exception;
  std::bad_alloc *v48;
  std::bad_alloc *v49;
  std::bad_alloc *v50;
  int v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  uint64_t v59;

  v11 = a5;
  v12 = a4;
  v59 = *MEMORY[0x1E0C80C00];
  if (a4 <= 0.0 || a5 <= 0.0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v51 = 136315906;
      v52 = "Resampler2.cpp";
      v53 = 1024;
      v54 = 260;
      v55 = 2048;
      v56 = v12;
      v57 = 2048;
      v58 = v11;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d Resampler2 bad sample rate(s) : %11.2f %11.2f", (uint8_t *)&v51, 0x26u);
    }
    if (v12 > 0.0 || v11 > 0.0)
    {
      if (v11 <= 0.0 && v12 > 0.0)
        v15 = v12;
      else
        v15 = v11;
      if (v12 <= 0.0)
        v12 = v11;
      v11 = v15;
    }
    else
    {
      v11 = 44100.0;
      v12 = 44100.0;
    }
  }
  v16 = *(_DWORD *)(a1 + 116);
  if (v16 == 1818848869)
  {
    *(_QWORD *)(a1 + 72) = 0x200200000001;
    *(_QWORD *)(a1 + 192) = 1;
    v17 = 8194;
    goto LABEL_71;
  }
  v18 = vcvtmd_s64_f64(v12);
  v19 = vcvtmd_s64_f64(v11);
  if (v12 != (double)v18 || v11 != (double)v19)
    goto LABEL_43;
  v21 = v18 >= 0 ? v18 : -v18;
  v22 = v19 >= 0 ? v19 : -v19;
  if (v21 >= 2 && v22 >= 2)
  {
    do
    {
      if (v21 <= v22)
        v24 = v22;
      else
        v24 = v21;
      if (v21 < v22)
        v22 = v21;
      v21 = v24 % v22;
    }
    while ((int)(v24 % v22) > 0);
  }
  else
  {
    v22 = 1;
  }
  v25 = v19 / v22;
  if (v19 / v22 <= 640)
  {
    *(_BYTE *)(a1 + 133) = 1;
    *(_DWORD *)(a1 + 108) = v18 / v22;
    *(_DWORD *)(a1 + 124) = v25;
    *(double *)(a1 + 152) = 1.0 / (double)v25;
  }
  else
  {
LABEL_43:
    if (v16 == 1650553971)
      v25 = 512;
    else
      v25 = 128;
  }
  if (a2 == 2)
  {
    v26 = *(double *)(a1 + 168);
    v27 = fmax(v26, 1.0);
    if (v26 <= 1.0)
      v26 = 1.0 / v26;
    v28 = (int)((a6 + -6.0) * (v26 * 0.07016) / (1.0 - v27 * a7) / (double)v25);
    goto LABEL_60;
  }
  v29 = *(_DWORD *)(a1 + 112);
  v30 = *(double *)(a1 + 168);
  v31 = fmax(v30, 1.0);
  v32 = 1.0 / v31;
  if (v16 != 1650553971)
  {
    if (v29 < 0x7F)
    {
      a7 = v32 * 0.9;
      if (v29 <= 0x5F)
      {
        if (v29 <= 0x3F)
          a6 = 80.0;
        else
          a6 = 90.0;
        if (v29 <= 0x3F)
          v35 = 16;
        else
          v35 = 32;
      }
      else
      {
        v35 = 64;
        a6 = 100.0;
      }
    }
    else
    {
      a6 = dbl_18F1170D0[v30 < 1.09];
      a7 = v32 * 0.9;
      v35 = 96;
    }
    goto LABEL_61;
  }
  if (v29 > 0x7E)
  {
    v33 = 1152.0;
    v34 = 0.99;
LABEL_57:
    v36 = 160.0;
    goto LABEL_58;
  }
  if (v29 > 0x5F)
  {
    v33 = 555.0;
    v34 = 0.98;
    goto LABEL_57;
  }
  if (v29 <= 0x3F)
  {
    v34 = dbl_18F1170E0[v29 > 0x1F];
    if (v29 <= 0x1F)
      a6 = 120.0;
    else
      a6 = 144.0;
    v33 = 88.2;
    if (v29 > 0x1F)
      v33 = 192.0;
    goto LABEL_59;
  }
  v33 = 323.4;
  v34 = 0.97;
  v36 = 144.0;
LABEL_58:
  a6 = v36;
LABEL_59:
  a7 = v32 * v34;
  v28 = vcvtpd_s64_f64(v31 * v33);
LABEL_60:
  v35 = (v28 + 15) & 0xFFFFFFF0;
LABEL_61:
  if (v35 <= 96)
    v37 = 96;
  else
    v37 = v35;
  pthread_mutex_lock(&sInitLocker);
  if (sIsInitialized == 1)
  {
    v38 = sSincKernelFactory;
  }
  else
  {
    v38 = operator new();
    *(_QWORD *)v38 = 0;
    *(_QWORD *)(v38 + 8) = 0;
    *(_QWORD *)(v38 + 16) = 0;
    std::vector<SincKernel *>::reserve((void **)v38, 0x20uLL);
    sSincKernelFactory = v38;
    sIsInitialized = 1;
  }
  *(_QWORD *)(a1 + 56) = SincKernelFactory::ReferenceSincKernel((SincKernelFactory *)v38, a6, a7);
  pthread_mutex_unlock(&sInitLocker);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 184))
    v39 = v37 + 0x2000;
  else
    v39 = vcvtpd_u64_f64((double)v37 + *(double *)(a1 + 168) * 1024.0);
  *(_DWORD *)(a1 + 76) = v39;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a3);
  v17 = *(_DWORD *)(a1 + 76);
LABEL_71:
  v40 = malloc_type_malloc(4 * v17, 0x2C8E6D5CuLL);
  v41 = v40;
  if (v17 && !v40)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v48 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v40, 4 * v17);
  *(_QWORD *)(a1 + 80) = v41;
  v42 = *(unsigned int *)(a1 + 76);
  v43 = malloc_type_malloc(4 * v42, 0x2C8E6D5CuLL);
  v44 = v43;
  if ((_DWORD)v42 && !v43)
  {
    v49 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v50 = std::bad_alloc::bad_alloc(v49);
  }
  bzero(v43, 4 * v42);
  *(_QWORD *)(a1 + 88) = v44;
  v45 = *MEMORY[0x1E0DDF118];
  if (*MEMORY[0x1E0DDF118] == -1)
    v45 = CAVectorUnit_Examine();
  *(_DWORD *)(a1 + 128) = v45;
  return Resampler2::SetConverterFunction(a1);
}

void sub_18EFBE240(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  ResamplerInitLocker *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  v4 = (ResamplerInitLocker *)MEMORY[0x193FFE460](v1, 0x80C40D6874129);
  ResamplerInitLocker::~ResamplerInitLocker(v4);
  _Unwind_Resume(a1);
}

void std::vector<SincKernel *>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t Resampler2::InitializeVarispeedMode(Resampler2 *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  double v6;
  unsigned int v7;
  double v8;
  uint64_t v9;
  double v10;
  int v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __n128 v17;
  void **v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;

  v1 = this;
  if (((_DWORD)this + 1) >= 0x20)
    v2 = (((_DWORD)this + 1) >> 5) - 1;
  else
    v2 = 0;
  pthread_mutex_lock(&sInitLocker);
  if (!sVarispeedRefCount[v2])
  {
    v3 = sVarispeedSincKernels[v2];
    if (!v3)
    {
      v3 = operator new();
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      sVarispeedSincKernels[v2] = v3;
    }
    std::vector<SincKernel *>::reserve((void **)v3, 0x24uLL);
    v4 = 0;
    v5 = 0;
    v6 = 80.0;
    if (v1 <= 0x3F)
    {
      v7 = 16;
    }
    else
    {
      v6 = 90.0;
      v7 = 32;
    }
    if (v1 <= 0x5F)
    {
      v8 = v6;
    }
    else
    {
      v7 = 64;
      v8 = 100.0;
    }
    if (v1 <= 0x7E)
      v9 = v7;
    else
      v9 = 96;
    do
    {
      v10 = exp2((double)v4 * 3600.0 / 36.0 / 1200.0);
      v11 = vcvtpd_s64_f64(v10 * 100.0);
      if (v5 < v11 - 100)
      {
        v12 = v11 - (uint64_t)v5 - 100;
        v13 = &sVarispeedRateTable[v5];
        do
        {
          *v13++ = v4;
          --v12;
        }
        while (v12);
      }
      v14 = operator new();
      v16 = v14;
      v17.n128_f64[0] = dbl_18F1170D0[v10 < 1.09];
      if (v1 <= 0x7E)
        v17.n128_f64[0] = v8;
      v15.n128_f64[0] = 1.0 / v10 * 0.9;
      if (v10 <= 1.0)
        v15.n128_f64[0] = 0.9;
      MEMORY[0x193FFD764](v14, v9, 64, v17, v15);
      v18 = (void **)sVarispeedSincKernels[v2];
      v20 = (uint64_t *)v18[1];
      v19 = (unint64_t)v18[2];
      if ((unint64_t)v20 >= v19)
      {
        v22 = ((char *)v20 - (_BYTE *)*v18) >> 3;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v23 = v19 - (_QWORD)*v18;
        v24 = v23 >> 2;
        if (v23 >> 2 <= (unint64_t)(v22 + 1))
          v24 = v22 + 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
          v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v25);
        else
          v26 = 0;
        v27 = (uint64_t *)(v25 + 8 * v22);
        *v27 = v16;
        v21 = v27 + 1;
        v29 = (char *)*v18;
        v28 = (char *)v18[1];
        if (v28 != *v18)
        {
          do
          {
            v30 = *((_QWORD *)v28 - 1);
            v28 -= 8;
            *--v27 = v30;
          }
          while (v28 != v29);
          v28 = (char *)*v18;
        }
        *v18 = v27;
        v18[1] = v21;
        v18[2] = (void *)(v25 + 8 * v26);
        if (v28)
          operator delete(v28);
      }
      else
      {
        *v20 = v16;
        v21 = v20 + 1;
      }
      v18[1] = v21;
      ++v4;
      v5 = v11 - 100;
    }
    while (v4 != 36);
    if (v11 <= 799)
    {
      if (v11 - 100 <= 699)
        v31 = 699;
      else
        v31 = v11 - 100;
      memset_pattern16(&sVarispeedRateTable[v11 - 100], &unk_18F117680, 4 * (v31 - v11 + 100) + 4);
    }
  }
  ++sVarispeedRefCount[v2];
  return pthread_mutex_unlock(&sInitLocker);
}

void sub_18EFBE640(ResamplerInitLocker *a1)
{
  ResamplerInitLocker::~ResamplerInitLocker(a1);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t Resampler2::ShutdownVarispeedMode(Resampler2 *this)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  SincKernel *v8;

  v1 = (int)this;
  pthread_mutex_lock(&sInitLocker);
  if ((v1 + 1) >= 0x20)
    v2 = ((v1 + 1) >> 5) - 1;
  else
    v2 = 0;
  v3 = sVarispeedRefCount[v2];
  if (v3 >= 1)
    sVarispeedRefCount[v2] = --v3;
  if (!v3)
  {
    v4 = (uint64_t *)sVarispeedSincKernels[v2];
    if (v4)
    {
      v5 = v4[1];
      if (v5 != *v4)
      {
        v6 = 0;
        v7 = 1;
        v5 = *v4;
        do
        {
          v8 = *(SincKernel **)(v5 + 8 * v6);
          if (v8)
          {
            SincKernel::~SincKernel(v8);
            MEMORY[0x193FFE460]();
            v4 = (uint64_t *)sVarispeedSincKernels[v2];
            v5 = *v4;
          }
          v6 = v7++;
        }
        while (v6 < (v4[1] - v5) >> 3);
      }
      v4[1] = v5;
    }
  }
  return pthread_mutex_unlock(&sInitLocker);
}

double *Resampler2::MockResampler2::SetVarispeedRate(double *this, double a2)
{
  double v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *this;
  this[5] = a2;
  this[6] = 1.0 / a2;
  *((_BYTE *)this + 33) = 0;
  if (a2 <= 1.0)
  {
    v3 = 0;
  }
  else if (a2 <= 7.98)
  {
    v3 = sVarispeedRateTable[vcvtpd_s64_f64(a2 * 100.0) - 100];
  }
  else
  {
    v3 = 35;
  }
  v4 = *(_DWORD *)(*(_QWORD *)&v2 + 112) + 1;
  if (v4 >= 0x20)
    v5 = (v4 >> 5) - 1;
  else
    v5 = 0;
  this[1] = *(double *)(**((_QWORD **)&sVarispeedSincKernels + v5) + 8 * v3);
  return this;
}

uint64_t Resampler2::PushZeroes(Resampler2 *this)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *((_DWORD *)this + 30);
  if (v2 == 2)
  {
    v3 = (*(uint64_t (**)(Resampler2 *))(*(_QWORD *)this + 152))(this);
  }
  else if (v2 == 1)
  {
    v3 = (*(unsigned int (**)(Resampler2 *))(*(_QWORD *)this + 152))(this) >> 1;
  }
  else
  {
    v3 = 0;
  }
  if (*((double *)this + 21) <= 1.0)
    v4 = v3;
  else
    v4 = v3 + 1;
  if (!v4)
    return 0;
  v5 = *((int *)this + 18);
  v6 = *((_DWORD *)this + 19) - v5;
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = v6;
  bzero((void *)(*((_QWORD *)this + 10) + 4 * v5), 4 * v7);
  bzero((void *)(*((_QWORD *)this + 11) + 4 * *((int *)this + 18)), 4 * v7);
  *((_DWORD *)this + 18) += v7;
  return v7;
}

Resampler2::MockResampler2 *Resampler2::MockResampler2::MockResampler2(Resampler2::MockResampler2 *this, const Resampler2 *a2)
{
  int v4;
  uint64_t v5;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 7);
  v4 = *((_DWORD *)a2 + 26);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 5) = v4;
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 20);
  *((_WORD *)this + 16) = *((_WORD *)a2 + 66);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 168);
  RateRamp::RateRamp((Resampler2::MockResampler2 *)((char *)this + 56));
  *((_BYTE *)this + 112) = 0;
  v5 = *((_QWORD *)a2 + 34);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 17);
  *((_QWORD *)this + 16) = v5;
  return this;
}

uint64_t Resampler2::MockResampler2::GetNumberOfSourceFrames(unsigned int **this, unsigned int a2)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  double v8;
  double v9;
  double v10;
  _BYTE v11[56];

  if (!a2)
    return 0;
  v4 = *this;
  if (!*((_BYTE *)this + 33))
  {
    if (!*((_BYTE *)this + 32))
    {
      if (*((_BYTE *)this + 112))
      {
        RateRamp::RateRamp((RateRamp *)v11);
        v10 = (double)a2;
        RateRamp::Segment((RateRamp *)(this + 7), *((double *)this + 11) + 0.0, &v10, 1000000000.0, (RateRamp *)v11);
        RateRamp::InputDuration((RateRamp *)v11);
        v8 = (double)vcvtpd_u64_f64(v9);
      }
      else
      {
        v8 = *((double *)this + 5) * (double)a2;
      }
      goto LABEL_8;
    }
LABEL_7:
    v8 = (double)a2;
LABEL_8:
    v6 = vcvtpd_s64_f64((double)(*(unsigned int (**)(unsigned int *))(*(_QWORD *)v4 + 152))(v4)+ -1.0+ *((double *)this + 3)+ v8- (double)*((int *)this + 4));
    return v6 & ~(v6 >> 31);
  }
  if (*((_BYTE *)this + 32))
    goto LABEL_7;
  v5 = v4[27] * a2;
  v6 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 152))(*this)
     + ~*((_DWORD *)this + 4)
     + (uint64_t)(v5 + *((unsigned int *)this + 5) + (unint64_t)v4[31] - 1) / v4[31];
  return v6 & ~(v6 >> 31);
}

_QWORD *DSPGraph::Base::printShort(const void *a1, _QWORD *a2, unsigned int a3, int a4)
{
  const char *v8;
  _QWORD *result;
  char v10;

  v8 = (const char *)(*(uint64_t (**)(const void *))(*(_QWORD *)a1 + 16))(a1);
  result = (_QWORD *)DSPGraph::printi(a2, a3, "%s %p", v8, a1);
  if (a4)
  {
    v10 = 10;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v10, 1);
  }
  return result;
}

uint64_t DSPGraph::Base::print(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, MEMORY[0x1E0DE4A60], a2, a3);
}

void AT::ExportedResampler::~ExportedResampler(AT::ExportedResampler *this)
{
  *(_QWORD *)this = &off_1E2909FC0;
  Resampler2::~Resampler2(this);
}

{
  *(_QWORD *)this = &off_1E2909FC0;
  Resampler2::~Resampler2(this);
  JUMPOUT(0x193FFE460);
}

uint64_t AT::Resampler::createWithFilterSpecification@<X0>(AT::Resampler *this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, uint64_t a7@<X1>, uint64_t *a8@<X8>)
{
  int v12;
  uint64_t v16;
  uint64_t result;

  v12 = (int)this;
  v16 = operator new();
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)v16 = &off_1E2900FA0;
  *(_BYTE *)(v16 + 24) = 0;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(double *)(v16 + 96) = a2;
  *(_QWORD *)(v16 + 104) = 0;
  *(_DWORD *)(v16 + 112) = 32;
  *(_DWORD *)(v16 + 116) = v12;
  *(_DWORD *)(v16 + 124) = 0;
  *(_WORD *)(v16 + 132) = 0;
  *(double *)(v16 + 144) = a6;
  *(_QWORD *)(v16 + 160) = 0;
  *(double *)(v16 + 168) = a2 / a3;
  *(double *)(v16 + 176) = 1.0 / (a2 / a3);
  *(_WORD *)(v16 + 184) = 0;
  *(_QWORD *)(v16 + 192) = 0;
  *(_BYTE *)(v16 + 200) = 1;
  RateRamp::RateRamp((RateRamp *)(v16 + 208));
  *(_BYTE *)(v16 + 264) = 0;
  *(_QWORD *)(v16 + 272) = 0;
  result = Resampler2::ConstructorBody(v16, 2, a7, a2, a3, a4, a5);
  *(_QWORD *)v16 = &off_1E2909FC0;
  *(_BYTE *)(v16 + 280) = 0;
  *(_BYTE *)(v16 + 416) = 0;
  *a8 = v16;
  return result;
}

void sub_18EFBEC60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10E3C40D45BBD2DLL);
  _Unwind_Resume(a1);
}

AT::Resampler::MockResampler *AT::Resampler::MockResampler::MockResampler(AT::Resampler::MockResampler *this, AT::Resampler *a2)
{
  *(_QWORD *)this = a2;
  if (*((_BYTE *)a2 + 416))
    *((_BYTE *)a2 + 416) = 0;
  Resampler2::MockResampler2::MockResampler2((AT::Resampler *)((char *)a2 + 280), a2);
  *((_BYTE *)a2 + 416) = 1;
  return this;
}

{
  *(_QWORD *)this = a2;
  if (*((_BYTE *)a2 + 416))
    *((_BYTE *)a2 + 416) = 0;
  Resampler2::MockResampler2::MockResampler2((AT::Resampler *)((char *)a2 + 280), a2);
  *((_BYTE *)a2 + 416) = 1;
  return this;
}

void AT::Resampler::MockResampler::~MockResampler(AT::Resampler::MockResampler *this)
{
  if (*(_BYTE *)(*(_QWORD *)this + 416))
    *(_BYTE *)(*(_QWORD *)this + 416) = 0;
}

{
  if (*(_BYTE *)(*(_QWORD *)this + 416))
    *(_BYTE *)(*(_QWORD *)this + 416) = 0;
}

uint64_t AT::Resampler::MockResampler::GetNumberOfSourceFrames(AT::Resampler::MockResampler *this, unsigned int a2)
{
  return Resampler2::MockResampler2::GetNumberOfSourceFrames((unsigned int **)(*(_QWORD *)this + 280), a2);
}

uint64_t AT::Resampler::MockResampler::Process(AT::Resampler::MockResampler *this, unsigned int a2)
{
  int v2;
  uint64_t v3;
  unsigned int **v4;
  double v5;
  int NumberOfSourceFrames;
  int v7;
  uint64_t v8;
  signed int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  double v14;
  double v15;
  __int128 v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  BOOL v24;
  _OWORD v26[3];
  uint64_t v27;

  v2 = a2;
  v3 = *(_QWORD *)this;
  v4 = (unsigned int **)(*(_QWORD *)this + 280);
  v5 = *(double *)(*(_QWORD *)this + 328);
  NumberOfSourceFrames = Resampler2::MockResampler2::GetNumberOfSourceFrames(v4, a2);
  if (v2 < 1)
    return 0;
  v7 = NumberOfSourceFrames;
  LODWORD(v8) = 0;
  v9 = vcvtd_n_s64_f64(v5, 0xAuLL);
  do
  {
    v10 = v7;
    if (v2 >= v9)
      v11 = v9;
    else
      v11 = v2;
    if (v2 > v9)
    {
      v12 = Resampler2::MockResampler2::GetNumberOfSourceFrames(v4, v11);
      if (v12 >= v7)
        v10 = v7;
      else
        v10 = v12;
    }
    if (v10 < 1)
    {
      v13 = 0;
    }
    else
    {
      *(_DWORD *)(v3 + 296) += v10;
      v13 = v10;
    }
    if (*(_BYTE *)(v3 + 312))
    {
      v14 = *(double *)(v3 + 304);
      *(double *)(v3 + 304) = v14 - (double)(int)v14;
      *(_DWORD *)(v3 + 296) = *(_DWORD *)(v3 + 296) - v11 - (int)v14;
    }
    else
    {
      v15 = (double)v11;
      if (*(_BYTE *)(v3 + 392))
      {
        v16 = *(_OWORD *)(v3 + 352);
        v26[0] = *(_OWORD *)(v3 + 336);
        v26[1] = v16;
        v26[2] = *(_OWORD *)(v3 + 368);
        v27 = *(_QWORD *)(v3 + 384);
        RateRamp::OffsetTimes((RateRamp *)v26, -*(double *)(v3 + 400), -*(double *)(v3 + 408));
        v17 = (double)*(int *)(v3 + 296);
        RateRamp::RateForOutputTime((RateRamp *)v26, (double)(v11 - 1));
        *(_QWORD *)(v3 + 320) = v18;
        RateRamp::InputTimeForOutputTime((RateRamp *)v26, (double)(v11 - 1));
        v20 = fmax(v19, 0.0);
        if (v20 >= v17)
          v21 = v17;
        else
          v21 = v20;
      }
      else
      {
        v21 = *(double *)(v3 + 304) + v15 * *(double *)(v3 + 320);
      }
      v22 = (double)(int)v21;
      *(double *)(v3 + 304) = v21 - v22;
      *(_DWORD *)(v3 + 296) -= (int)v21;
      if (*(_BYTE *)(v3 + 313))
        *(_DWORD *)(v3 + 300) -= *(_DWORD *)(*(_QWORD *)(v3 + 288) + 16) * (int)v21;
      v23 = *(double *)(v3 + 408) + v15;
      *(double *)(v3 + 400) = *(double *)(v3 + 400) + v22;
      *(double *)(v3 + 408) = v23;
    }
    v7 -= v10;
    v8 = (v13 + v8);
    v24 = __OFSUB__(v2, v11);
    v2 -= v11;
  }
  while (!((v2 < 0) ^ v24 | (v2 == 0)));
  return v8;
}

double *AT::Resampler::MockResampler::SetVarispeedRate(AT::Resampler::MockResampler *this, double a2)
{
  return Resampler2::MockResampler2::SetVarispeedRate((double *)(*(_QWORD *)this + 280), a2);
}

uint64_t AT::Resampler::MockResampler::GetIsBypassed(AT::Resampler::MockResampler *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 312);
}

uint64_t AT::Resampler::MockResampler::SetIsBypassed(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)this + 312) = a2;
  return this;
}

double *AT::Resampler::MockResampler::SetRamp(double *result, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_QWORD *)result;
  if (a2)
  {
    if (*(double *)(v2 + 400) < 0.0)
      *(_QWORD *)(v2 + 400) = 0;
    *(_BYTE *)(v2 + 392) = 1;
    v4 = a2[1];
    v3 = a2[2];
    v5 = *a2;
    *(_QWORD *)(v2 + 384) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(v2 + 352) = v4;
    *(_OWORD *)(v2 + 368) = v3;
    *(_OWORD *)(v2 + 336) = v5;
    *(double *)&v3 = (*(double *)(v2 + 336) + *(double *)(v2 + 344)) * 0.5;
    *(_QWORD *)(v2 + 320) = v3;
    *(double *)(v2 + 328) = 1.0 / *(double *)&v3;
    *(_BYTE *)(v2 + 313) = 0;
  }
  else
  {
    *(_BYTE *)(v2 + 392) = 0;
    return Resampler2::MockResampler2::SetVarispeedRate((double *)(v2 + 280), *(double *)(v2 + 320));
  }
  return result;
}

uint64_t AUProcessingBlockBase::CopyProperty(const UInt8 **this, int a2, CFDataRef *a3)
{
  const __CFData *v4;
  uint64_t result;
  CFDataRef v6;
  void *__p;
  _BYTE *v8;
  uint64_t v9;

  switch(a2)
  {
    case 1635087726:
      v6 = CFDataCreate(0, this[3], this[4] - this[3]);
      result = 0;
      *a3 = v6;
      break;
    case 1635148149:
      __p = 0;
      v8 = 0;
      v9 = 0;
      (*((void (**)(const UInt8 **, void **))*this + 4))(this, &__p);
      *a3 = CFDataCreate(0, (const UInt8 *)__p, v8 - (_BYTE *)__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      return 0;
    case 1851878757:
      v4 = (const __CFData *)this[1];
      *a3 = v4;
      CFRetain(v4);
      return 0;
    default:
      return 1064333936;
  }
  return result;
}

void sub_18EFBF094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUProcessingBlockBase::SetProperty(AUProcessingBlockBase *this, int a2, CFTypeRef cf)
{
  CFTypeID v5;
  const UInt8 *BytePtr;
  unint64_t Length;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  const UInt8 *v15;
  char *v16;
  uint64_t v17;

  if (a2 != 1635087726)
    return 1064333936;
  v5 = CFGetTypeID(cf);
  if (v5 != CFDataGetTypeID())
    return 1886806380;
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  Length = CFDataGetLength((CFDataRef)cf);
  v9 = (_BYTE *)*((_QWORD *)this + 3);
  v8 = (_BYTE *)*((_QWORD *)this + 4);
  v10 = v8 - v9;
  if (v8 == v9)
  {
    v11 = 0;
    v12 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v10 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(0xAAAAAAAAAAAAAAABLL * (v10 >> 3));
    memmove(v11, v9, v10);
    v12 = &v11[8 * (v10 >> 3)];
  }
  if (Length > 0x17 || v11 < v12)
  {
    v14 = 0;
    v15 = &BytePtr[24 * (Length / 0x18)];
    v16 = v11;
    while (1)
    {
      if (BytePtr >= v15)
      {
LABEL_16:
        (*(void (**)(AUProcessingBlockBase *, uint64_t))(*(_QWORD *)this + 88))(this, v14);
        v16 += 24;
        goto LABEL_21;
      }
      if (v16 >= v12)
        goto LABEL_17;
      v17 = *((_QWORD *)BytePtr + 2);
      if (*((_QWORD *)v16 + 2) != v17)
        break;
      BytePtr += 24;
      v16 += 24;
LABEL_20:
      v14 = (v14 + 1);
LABEL_21:
      if (BytePtr >= v15 && v16 >= v12)
        goto LABEL_23;
    }
    if (v17)
      goto LABEL_16;
LABEL_17:
    v13 = (*(uint64_t (**)(AUProcessingBlockBase *, uint64_t, const UInt8 *))(*(_QWORD *)this + 80))(this, v14, BytePtr);
    if ((_DWORD)v13)
      goto LABEL_24;
    BytePtr += 24;
    goto LABEL_20;
  }
LABEL_23:
  v13 = 0;
LABEL_24:
  if (v11)
    operator delete(v11);
  return v13;
}

void sub_18EFBF260(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AUProcessingBlockBase::InsertAUAtIndex(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v3 = a1 + 24;
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) >= a2)
    std::vector<AUPBUnit>::insert(v3, (char *)(v4 + 24 * a2), a3);
  return 0;
}

_QWORD *AUProcessingBlockBase::RemoveAUAtIndex(_QWORD *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[3];
  v2 = this[4];
  if (0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3) > a2)
  {
    v4 = this;
    v5 = v3 + 24 * a2;
    v6 = v2 - (v5 + 24);
    if (v2 != v5 + 24)
      this = memmove((void *)v5, (const void *)(v5 + 24), v2 - (v5 + 24));
    v4[4] = v5 + v6;
  }
  return this;
}

void std::vector<AUPBUnit>::insert(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  _BYTE *v34;
  uint64_t v35;
  char *v36;

  v3 = a3;
  v6 = *(char **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v12 = *(char **)a1;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v14 = __src - v12;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((__src - v12) >> 3);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v12) >> 3);
    if (2 * v16 > v13)
      v13 = 2 * v16;
    if (v16 >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    else
      v17 = v13;
    if (v17)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v17);
    }
    else
    {
      v19 = 0;
      v18 = 0;
    }
    v22 = &v19[24 * v15];
    v23 = &v19[24 * v18];
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == __src)
          v25 = 1;
        else
          v25 = 2 * v15;
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v25);
        v22 = &v26[24 * (v25 >> 2)];
        v23 = &v26[24 * v27];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v24 = v15 + 2;
        if (v15 >= -1)
          v24 = v15 + 1;
        v22 -= 24 * (v24 >> 1);
      }
    }
    v28 = *(_OWORD *)v3;
    *((_QWORD *)v22 + 2) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v22 = v28;
    v29 = *(char **)a1;
    v30 = v22;
    if (*(char **)a1 != __src)
    {
      v31 = __src;
      v32 = v22;
      do
      {
        v33 = *(_OWORD *)(v31 - 24);
        v30 = v32 - 24;
        *((_QWORD *)v32 - 1) = *((_QWORD *)v31 - 1);
        *(_OWORD *)(v32 - 24) = v33;
        v31 -= 24;
        v32 -= 24;
      }
      while (v31 != v29);
    }
    v34 = *(_BYTE **)(a1 + 8);
    v35 = v34 - __src;
    if (v34 != __src)
      memmove(v22 + 24, __src, v34 - __src);
    v36 = *(char **)a1;
    *(_QWORD *)a1 = v30;
    *(_QWORD *)(a1 + 8) = &v22[v35 + 24];
    *(_QWORD *)(a1 + 16) = v23;
    if (v36)
      operator delete(v36);
  }
  else if (__src == v6)
  {
    v21 = *(_OWORD *)a3;
    *((_QWORD *)__src + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__src = v21;
    *(_QWORD *)(a1 + 8) = __src + 24;
  }
  else
  {
    v8 = __src + 24;
    v9 = v6 - 24;
    v10 = *(_QWORD *)(a1 + 8);
    while (v9 < v6)
    {
      v11 = *(_OWORD *)v9;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v10 = v11;
      v10 += 24;
      v9 += 24;
    }
    *(_QWORD *)(a1 + 8) = v10;
    if (v6 != v8)
      memmove(__src + 24, __src, v6 - v8);
    if ((unint64_t)__src <= v3)
      v3 += 24 * (*(_QWORD *)(a1 + 8) > v3);
    v20 = *(_OWORD *)v3;
    *((_QWORD *)__src + 2) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)__src = v20;
  }
}

void sub_18EFBF5A0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AUProcessingBlockBase_NonAU::~AUProcessingBlockBase_NonAU(AUProcessingBlockBase_NonAU *this)
{
  AUProcessingBlockBase_NonAU::~AUProcessingBlockBase_NonAU(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8[2];

  *(_QWORD *)this = &off_1E29093E0;
  while (*((_QWORD *)this + 8))
  {
    v2 = *((_QWORD *)this + 6);
    v3 = *(std::__shared_weak_count **)(v2 + 40);
    v8[0] = *(_QWORD *)(v2 + 32);
    v8[1] = (unint64_t)v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    AUProcessingBlockBase_NonAU::RemoveItemFromBlock(this, v8);
    if (v3)
    {
      v6 = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  std::__tree<std::shared_ptr<AUProcessingBlockBase_NonAUItem>>::destroy(*((_QWORD **)this + 7));
  AUProcessingBlockBase::~AUProcessingBlockBase(this);
}

void AUProcessingBlockBase_NonAU::GetAvailableAUs(uint64_t a1, unint64_t *a2)
{
  _DWORD *v2;
  uint64_t *i;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;

  v2 = (_DWORD *)*a2;
  a2[1] = *a2;
  for (i = *(uint64_t **)(a1 + 24); i != *(uint64_t **)(a1 + 32); i += 3)
  {
    v6 = a2[2];
    if ((unint64_t)v2 >= v6)
    {
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v2 - *a2) >> 2);
      v9 = v8 + 1;
      if (v8 + 1 > 0x1555555555555555)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a2) >> 2);
      if (2 * v10 > v9)
        v9 = 2 * v10;
      if (v10 >= 0xAAAAAAAAAAAAAAALL)
        v11 = 0x1555555555555555;
      else
        v11 = v9;
      if (v11)
        v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(v11);
      else
        v12 = 0;
      v13 = v11 + 12 * v8;
      v14 = *i;
      *(_DWORD *)(v13 + 8) = *((_DWORD *)i + 2);
      *(_QWORD *)v13 = v14;
      v16 = (_DWORD *)*a2;
      v15 = (_DWORD *)a2[1];
      v17 = v13;
      if (v15 != (_DWORD *)*a2)
      {
        do
        {
          v18 = *(_QWORD *)(v15 - 3);
          v15 -= 3;
          v19 = v15[2];
          *(_QWORD *)(v17 - 12) = v18;
          v17 -= 12;
          *(_DWORD *)(v17 + 8) = v19;
        }
        while (v15 != v16);
        v15 = (_DWORD *)*a2;
      }
      v2 = (_DWORD *)(v13 + 12);
      *a2 = v17;
      a2[1] = v13 + 12;
      a2[2] = v11 + 12 * v12;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v7 = *i;
      v2[2] = *((_DWORD *)i + 2);
      *(_QWORD *)v2 = v7;
      v2 += 3;
    }
    a2[1] = (unint64_t)v2;
  }
}

uint64_t AUProcessingBlockBase_NonAU::AUGetPropertyInfo(AUProcessingBlockBase_NonAU *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, unsigned __int8 *a7)
{
  return (*(uint64_t (**)(OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, unsigned int *, unsigned __int8 *))(*(_QWORD *)a2 + 16))(a2, a3, a4, a5, a6, a7);
}

uint64_t AUProcessingBlockBase_NonAU::AUGetProperty(AUProcessingBlockBase_NonAU *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, unsigned int *a7)
{
  return (*(uint64_t (**)(OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, void *, unsigned int *))(*(_QWORD *)a2 + 24))(a2, a3, a4, a5, a6, a7);
}

uint64_t AUProcessingBlockBase_NonAU::AUSetProperty(AUProcessingBlockBase_NonAU *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7)
{
  return (*(uint64_t (**)(OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, const void *, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, a4, a5, a6, a7);
}

uint64_t AUProcessingBlockBase_NonAU::AUGetParameter(AUProcessingBlockBase_NonAU *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  return (*(uint64_t (**)(OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)a2 + 40))(a2, a3, a4, a5, a6);
}

uint64_t AUProcessingBlockBase_NonAU::AUSetParameter(AUProcessingBlockBase_NonAU *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  return (*(uint64_t (**)(OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a2 + 48))(a2, a3, a4, a5, a6);
}

void AUProcessingBlockBase_NonAU::RemoveItemFromBlock(_QWORD *a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;

  v5 = a1[3];
  v4 = a1[4];
  if (v5 != v4)
  {
    while (*(_QWORD *)(v5 + 16) != *a2)
    {
      v5 += 24;
      if (v5 == v4)
        goto LABEL_10;
    }
  }
  if (v5 != v4)
  {
    AUPBUnregisterAU((uint64_t)a1, *(_QWORD *)(v5 + 16));
    v6 = a1[3];
    v7 = a1[4];
    v8 = -1431655765 * ((unint64_t)(v5 - v6) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3) > v8)
    {
      v9 = v6 + 24 * v8;
      v10 = v7 - (v9 + 24);
      if (v7 != v9 + 24)
        memmove((void *)(v6 + 24 * v8), (const void *)(v9 + 24), v7 - (v9 + 24));
      a1[4] = v9 + v10;
    }
  }
LABEL_10:
  v11 = (uint64_t *)a1[7];
  if (v11)
  {
    v12 = *a2;
    v13 = a1 + 7;
    v14 = (_QWORD *)a1[7];
    do
    {
      v15 = v14[4];
      v16 = v15 >= v12;
      if (v15 >= v12)
        v17 = v14;
      else
        v17 = v14 + 1;
      if (v16)
        v13 = v14;
      v14 = (_QWORD *)*v17;
    }
    while (*v17);
    if (v13 != a1 + 7 && v12 >= v13[4])
    {
      v18 = (uint64_t *)v13[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        v20 = v13;
        do
        {
          v19 = (uint64_t *)v20[2];
          v21 = *v19 == (_QWORD)v20;
          v20 = v19;
        }
        while (!v21);
      }
      if ((uint64_t *)a1[6] == v13)
        a1[6] = v19;
      --a1[8];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v13);
      std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v13 + 4));
      operator delete(v13);
    }
  }
}

void std::__tree<std::shared_ptr<AUProcessingBlockBase_NonAUItem>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::shared_ptr<AUProcessingBlockBase_NonAUItem>>::destroy(*a1);
    std::__tree<std::shared_ptr<AUProcessingBlockBase_NonAUItem>>::destroy(a1[1]);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void AUProcessingBlockBase::~AUProcessingBlockBase(AUProcessingBlockBase *this)
{
  void *v2;

  *(_QWORD *)this = off_1E2908310;
  AUPBUnregister(*((_QWORD *)this + 2));
  AUProcessingBlockBase::SetName(this, 0);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

void AUProcessingBlock_AU_Instantiating::~AUProcessingBlock_AU_Instantiating(AUProcessingBlock_AU_Instantiating *this)
{
  AUProcessingBlock_AU_Instantiating::~AUProcessingBlock_AU_Instantiating(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t i;
  uint64_t v3;

  *(_QWORD *)this = &off_1E2909A30;
  v3 = *((_QWORD *)this + 3);
  for (i = *((_QWORD *)this + 4); v3 != i; i = *((_QWORD *)this + 4))
  {
    AudioComponentInstanceDispose(*(AudioComponentInstance *)(v3 + 16));
    v3 += 24;
  }
  AUProcessingBlockBase::~AUProcessingBlockBase(this);
}

AudioComponent AUProcessingBlock_AU::GetAvailableAUs(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  OpaqueAudioComponent *v6;
  AudioComponent result;
  uint64_t (***v8)(_QWORD);
  _DWORD *v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  AudioComponentDescription v23;

  v6 = 0;
  v23.componentFlagsMask = 0;
  *(_OWORD *)&v23.componentType = *(_OWORD *)"xfua";
  while (1)
  {
    result = AudioComponentFindNext(v6, &v23);
    if (!result)
      break;
    v6 = result;
    v8 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(AudioComponent))result)(result);
    if (v8)
    {
      v9 = (_DWORD *)(**v8)(v8);
      v2 = v9[9];
      v3 = v9[10];
      v4 = v9[11];
    }
    v11 = *(_DWORD **)(a2 + 8);
    v10 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v11 >= v10)
    {
      v13 = *(_DWORD **)a2;
      v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *(_QWORD *)a2) >> 2);
      v15 = v14 + 1;
      if (v14 + 1 > 0x1555555555555555)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v13) >> 2);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0xAAAAAAAAAAAAAAALL)
        v17 = 0x1555555555555555;
      else
        v17 = v15;
      if (v17)
      {
        v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(v17);
        v13 = *(_DWORD **)a2;
        v11 = *(_DWORD **)(a2 + 8);
      }
      else
      {
        v18 = 0;
      }
      v19 = (_DWORD *)(v17 + 12 * v14);
      *v19 = v2;
      v19[1] = v3;
      v19[2] = v4;
      v20 = v19;
      if (v11 != v13)
      {
        do
        {
          v21 = *(_QWORD *)(v11 - 3);
          v11 -= 3;
          v22 = v11[2];
          *(_QWORD *)(v20 - 3) = v21;
          v20 -= 3;
          v20[2] = v22;
        }
        while (v11 != v13);
        v13 = *(_DWORD **)a2;
      }
      v12 = v19 + 3;
      *(_QWORD *)a2 = v20;
      *(_QWORD *)(a2 + 8) = v19 + 3;
      *(_QWORD *)(a2 + 16) = v17 + 12 * v18;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v11 = v2;
      v11[1] = v3;
      v12 = v11 + 3;
      v11[2] = v4;
    }
    *(_QWORD *)(a2 + 8) = v12;
  }
  return result;
}

uint64_t AUProcessingBlock_AU_Instantiating::InsertAUAtIndex(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  OSType v6;
  OpaqueAudioComponent *Next;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  int v15;
  AudioComponentInstance v16;
  AudioComponentInstance outInstance;
  AudioComponentDescription inDesc;

  *(_QWORD *)&inDesc.componentType = *a3;
  v6 = *((_DWORD *)a3 + 2);
  inDesc.componentFlags = 0;
  inDesc.componentFlagsMask = 0;
  inDesc.componentManufacturer = v6;
  Next = AudioComponentFindNext(0, &inDesc);
  if (!Next)
    return 4294957891;
  outInstance = 0;
  v8 = AudioComponentInstanceNew(Next, &outInstance);
  if (!(_DWORD)v8)
  {
    v13 = *a3;
    v14 = *((_DWORD *)a3 + 2);
    v15 = 0;
    v16 = outInstance;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = a1 + 24;
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3) >= a2)
      std::vector<AUPBUnit>::insert(v11, (char *)(v9 + 24 * a2), (unint64_t)&v13);
  }
  return v8;
}

uint64_t AUProcessingBlock_AU_Instantiating::RemoveAUAtIndex(AUProcessingBlock_AU_Instantiating *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 3) + 24 * a2;
  result = AudioComponentInstanceDispose(*(AudioComponentInstance *)(v4 + 16));
  *(_QWORD *)(v4 + 16) = 0;
  v7 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 4);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) > a2)
  {
    v8 = v7 + 24 * a2;
    v9 = v6 - (v8 + 24);
    if (v6 != v8 + 24)
      result = (uint64_t)memmove((void *)v8, (const void *)(v8 + 24), v6 - (v8 + 24));
    *((_QWORD *)this + 4) = v8 + v9;
  }
  return result;
}

void AUProcessingBlock_AU::~AUProcessingBlock_AU(AUProcessingBlock_AU *this)
{
  AUProcessingBlockBase::~AUProcessingBlockBase(this);
  JUMPOUT(0x193FFE460);
}

uint64_t AUProcessingBlockBase_NonAUItem::GetPropertyInfo(AUProcessingBlockBase_NonAUItem *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned __int8 *a6)
{
  uint64_t result;
  unsigned int v10;
  int v11;

  result = 0xFFFFFFFFLL;
  if (a2 > 15)
  {
    if (a2 != 16)
    {
      if (a2 != 21)
        return result;
      if (a6)
        *a6 = 1;
      if (a5)
      {
        result = 0;
        *a5 = 4;
        return result;
      }
      return 0;
    }
    result = (*(uint64_t (**)(AUProcessingBlockBase_NonAUItem *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 72))(this, a3, a4, 0);
    if ((_DWORD)result)
      return result;
    if (a5)
    {
      v10 = 8;
      goto LABEL_20;
    }
LABEL_21:
    if (a6)
    {
      result = 0;
LABEL_23:
      *a6 = 0;
      return result;
    }
    return 0;
  }
  if (a2 != 3)
  {
    if (a2 != 4)
      return result;
    if (a5)
    {
      v10 = 104;
LABEL_20:
      *a5 = v10;
      goto LABEL_21;
    }
    goto LABEL_21;
  }
  v11 = 0;
  result = (*(uint64_t (**)(AUProcessingBlockBase_NonAUItem *, uint64_t, _QWORD, int *))(*(_QWORD *)this + 56))(this, a3, 0, &v11);
  if (!(_DWORD)result)
  {
    if (a5)
      *a5 = 4 * v11;
    if (a6)
      goto LABEL_23;
  }
  return result;
}

uint64_t AUProcessingBlockBase_NonAUItem::GetProperty(AUProcessingBlockBase_NonAUItem *this, int a2, uint64_t a3, uint64_t a4, _DWORD *a5, unsigned int *a6)
{
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  unsigned int *begin;
  unint64_t v15;
  unsigned int v16;
  std::vector<unsigned int> __src;
  std::vector<unsigned int>::size_type __n;

  v10 = 0xFFFFFFFFLL;
  if (a2 <= 15)
  {
    if (a2 != 3)
    {
      if (a2 == 4 && a5 && a6 && *a6 >= 0x68)
      {
        result = (*(uint64_t (**)(AUProcessingBlockBase_NonAUItem *, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)this + 64))(this, a3, a4, a5);
        v12 = 104;
LABEL_22:
        *a6 = v12;
        return result;
      }
      return v10;
    }
    LODWORD(__n) = 0;
    v13 = (*(uint64_t (**)(AUProcessingBlockBase_NonAUItem *, uint64_t, _QWORD, std::vector<unsigned int>::size_type *))(*(_QWORD *)this + 56))(this, a3, 0, &__n);
    v10 = v13;
    if (!a6 || (_DWORD)v13)
      return v10;
    if (*a6 >= 4 * (unint64_t)__n)
    {
      std::vector<unsigned int>::vector(&__src, __n);
      v10 = (*(uint64_t (**)(AUProcessingBlockBase_NonAUItem *, uint64_t, std::vector<unsigned int>::pointer, std::vector<unsigned int>::size_type *))(*(_QWORD *)this + 56))(this, a3, __src.__begin_, &__n);
      begin = __src.__begin_;
      if (!(_DWORD)v10)
      {
        v15 = (unint64_t)((char *)__src.__end_ - (char *)__src.__begin_) >> 2;
        if (__n < v15)
          LODWORD(v15) = __n;
        v16 = 4 * v15;
        if (a5)
          memcpy(a5, __src.__begin_, (4 * v15));
        *a6 = v16;
      }
      if (begin)
      {
        __src.__end_ = begin;
        operator delete(begin);
      }
      return v10;
    }
    return 0;
  }
  if (a2 != 16)
  {
    if (a2 != 21)
      return v10;
    if (a6)
      *a6 = 4;
    if (a5)
    {
      v10 = 0;
      *a5 = (*(uint64_t (**)(AUProcessingBlockBase_NonAUItem *))(*(_QWORD *)this + 80))(this);
      return v10;
    }
    return 0;
  }
  if (a5 && a6 && *a6 >= 8)
  {
    result = (*(uint64_t (**)(AUProcessingBlockBase_NonAUItem *, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)this + 72))(this, a3, a4, a5);
    v12 = 8;
    goto LABEL_22;
  }
  return v10;
}

void sub_18EFC00D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUProcessingBlockBase_NonAUItem::SetProperty(AUProcessingBlockBase_NonAUItem *this, int a2, unsigned int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  if (a2 != 21)
    return 0xFFFFFFFFLL;
  if (a6 >= 4)
    (*(void (**)(AUProcessingBlockBase_NonAUItem *, BOOL))(*(_QWORD *)this + 88))(this, *a5 != 0);
  return 0;
}

uint64_t AUProcessingBlockBase_NonAUItem::GetBypassed(AUProcessingBlockBase_NonAUItem *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t AUProcessingBlockBase_NonAUItem::SetBypassed(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8) = a2;
  return this;
}

uint64_t AUProcessingBlockBase::sCopyProperty(AUProcessingBlockBase *this, void *a2, unsigned int a3, const void **a4)
{
  return (*(uint64_t (**)(AUProcessingBlockBase *, void *))(*(_QWORD *)this + 16))(this, a2);
}

uint64_t AUProcessingBlockBase::sSetProperty(AUProcessingBlockBase *this, void *a2, unsigned int a3, const void *a4)
{
  return (*(uint64_t (**)(AUProcessingBlockBase *, void *))(*(_QWORD *)this + 24))(this, a2);
}

uint64_t AUProcessingBlockBase::sAUGetPropertyInfo(AUProcessingBlockBase *this, void *a2, OpaqueRemoteAudioUnit *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, unsigned __int8 *a8)
{
  return (*(uint64_t (**)(AUProcessingBlockBase *, void *, OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)this + 40))(this, a2, a3, a4, a5, a6, a7);
}

uint64_t AUProcessingBlockBase::sAUGetProperty(AUProcessingBlockBase *this, void *a2, OpaqueRemoteAudioUnit *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, unsigned int *a8)
{
  return (*(uint64_t (**)(AUProcessingBlockBase *, void *, OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)this + 48))(this, a2, a3, a4, a5, a6, a7);
}

