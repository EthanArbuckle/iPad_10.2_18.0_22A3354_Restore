void sub_18EED60E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CA::ADMBuilder::Impl::build_channel_formats(CA::ADMBuilder::Impl *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CA::ADMBuilder::Impl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  NSObject *v15;
  std::string *p_p;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  CA::ADMBuilder::Impl *v24;
  uint64_t v25;
  NSObject *v26;
  std::string *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string __p;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  std::string *v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)this;
  v2 = *(_QWORD *)(*(_QWORD *)this + 120);
  if (*(_QWORD *)(*(_QWORD *)this + 128) == v2)
    return 1;
  v4 = 0;
  while (*(_QWORD *)(*(_QWORD *)(v2 + 16 * v4) + 152) == *(_QWORD *)(*(_QWORD *)(v2 + 16 * v4) + 144))
  {
LABEL_46:
    if (++v4 >= (unint64_t)((*(_QWORD *)(v1 + 128) - v2) >> 4))
      return 1;
  }
  v5 = 0;
  while (1)
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 70) + 24 * v4) + 32 * v5;
    if (*(_BYTE *)(v6 + 24))
    {
      CA::ADMBuilder::Impl::resolve_channel_format_reference(&v33, (uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 70) + 24 * v4) + 32 * v5);
      v8 = v33;
      if (v33)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 120) + 16 * v4) + 144);
        v10 = (uint64_t)v34;
        if (v34)
        {
          p_shared_weak_owners = (unint64_t *)&v34->__shared_weak_owners_;
          do
            v12 = __ldxr(p_shared_weak_owners);
          while (__stxr(v12 + 1, p_shared_weak_owners));
        }
        *(_QWORD *)(v9 + 480 * v5 + 264) = v8;
        v13 = v9 + 480 * v5;
        v14 = *(std::__shared_weak_count **)(v13 + 272);
        *(_QWORD *)(v13 + 272) = v10;
        if (v14)
          std::__shared_weak_count::__release_weak(v14);
      }
      else
      {
        v15 = CA::ADMBuilder::Impl::log(v7);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 120) + 16 * v4) + 144) + 480 * v5, "");
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (*(char *)(v6 + 23) < 0)
            v6 = *(_QWORD *)v6;
          *(_DWORD *)buf = 136315906;
          v36 = "ADMBuilder.cpp";
          v37 = 1024;
          v38 = 528;
          v39 = 2080;
          v40 = p_p;
          v41 = 2080;
          v42 = v6;
          _os_log_impl(&dword_18EE07000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Block format '%s' references unknown channel format '%s'", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v17 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (!v8)
        return 0;
      v1 = *(_QWORD *)this;
    }
    v20 = *(_QWORD *)(*(_QWORD *)(v1 + 120) + 16 * v4);
    v21 = *(_QWORD *)(v20 + 144);
    if (*(_QWORD *)(v21 + 480 * v5 + 288) != *(_QWORD *)(v21 + 480 * v5 + 280))
      break;
LABEL_44:
    if (++v5 >= 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(v20 + 152) - v21) >> 5))
    {
      v2 = *(_QWORD *)(v1 + 120);
      goto LABEL_46;
    }
  }
  v22 = 0;
  while (1)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 73) + 24 * v4) + 24 * v5) + 24 * v22;
    CA::ADMBuilder::Impl::resolve_channel_format_reference(&v33, (uint64_t)this, v23);
    v25 = v33;
    if (v33)
    {
      std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 120) + 16 * v4) + 144)+ 480 * v5+ 280)+ 144 * v22+ 128), v33, (uint64_t)v34);
    }
    else
    {
      v26 = CA::ADMBuilder::Impl::log(v24);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 120) + 16 * v4) + 144) + 480 * v5, "");
        v27 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (*(char *)(v23 + 23) < 0)
          v23 = *(_QWORD *)v23;
        *(_DWORD *)buf = 136315906;
        v36 = "ADMBuilder.cpp";
        v37 = 1024;
        v38 = 544;
        v39 = 2080;
        v40 = v27;
        v41 = 2080;
        v42 = v23;
        _os_log_impl(&dword_18EE07000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d Block format '%s' references unknown channel format '%s'", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    v28 = v34;
    if (v34)
    {
      v29 = (unint64_t *)&v34->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (!v25)
      return 0;
    ++v22;
    v1 = *(_QWORD *)this;
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 120) + 16 * v4);
    v21 = *(_QWORD *)(v20 + 144);
    if (v22 >= 0x8E38E38E38E38E39
              * ((uint64_t)(*(_QWORD *)(v21 + 480 * v5 + 288) - *(_QWORD *)(v21 + 480 * v5 + 280)) >> 4))
      goto LABEL_44;
  }
}

void sub_18EED6564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void CA::ADMBuilder::Impl::resolve_channel_format_reference(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  std::string *p_p;
  uint64_t v21;
  char v22;
  size_t size;
  const char **v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::string *v28;
  uint64_t v29;
  char v30;
  size_t v31;
  const char **v32;
  std::string __p;
  char v34;

  v6 = std::__string_hash<char>::operator()[abi:ne180100](a3);
  v7 = *(int8x8_t *)(a2 + 928);
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v11 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v11 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)(a2 + 920) + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)a3))
          {
            v25 = *((_QWORD *)i + 6);
            *a1 = *((_QWORD *)i + 5);
            a1[1] = v25;
            if (v25)
            {
              v26 = (unint64_t *)(v25 + 8);
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 1, v26));
            }
            return;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(_QWORD *)&v7)
              v14 %= *(_QWORD *)&v7;
          }
          else
          {
            v14 &= *(_QWORD *)&v7 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  v15 = *(char *)(a3 + 23);
  if (v15 < 0)
  {
    if (*(_QWORD *)(a3 + 8) != 11)
    {
LABEL_60:
      *a1 = 0;
      a1[1] = 0;
      return;
    }
    v16 = *(_QWORD *)a3;
  }
  else
  {
    v16 = a3;
    if (v15 != 11)
      goto LABEL_60;
  }
  if (*(_BYTE *)(v16 + 7) != 48)
    goto LABEL_60;
  if (std::string::starts_with[abi:ne180100]((const void **)a3, "AC_0001"))
  {
    std::string::basic_string(&__p, (const std::string *)a3, 8uLL, 3uLL, (std::allocator<char> *)&v34);
    v19 = v18;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v19 && v17 && v17 < 0x29)
    {
      CA::ADMBuilder::Impl::build_common_channel_format(a1, (int64x2_t **)a2, 1, v17 - 1);
      return;
    }
    goto LABEL_60;
  }
  if (std::string::starts_with[abi:ne180100]((const void **)a3, "AC_0004"))
  {
    p_p = &__p;
    std::string::basic_string(&__p, (const std::string *)a3, 7uLL, 4uLL, (std::allocator<char> *)&v34);
    v21 = 0;
    v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v24 = (const char **)CA::ADMCommonFormats::channel_formats_hoa;
    while (v21 != 258)
    {
      if (size == strlen(*v24) && !memcmp(p_p, *v24, size))
      {
        CA::ADMBuilder::Impl::build_common_channel_format(a1, (int64x2_t **)a2, 4, v21);
        v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        break;
      }
      ++v21;
      v24 += 4;
    }
    if (v22 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v21 == 258)
      goto LABEL_60;
  }
  else
  {
    if (!std::string::starts_with[abi:ne180100]((const void **)a3, "AC_0005"))
      goto LABEL_60;
    v28 = &__p;
    std::string::basic_string(&__p, (const std::string *)a3, 7uLL, 4uLL, (std::allocator<char> *)&v34);
    v29 = 0;
    v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v31 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v32 = (const char **)CA::ADMCommonFormats::channel_formats_binaural;
    while (v29 != 2)
    {
      if (v31 == strlen(*v32) && !memcmp(v28, *v32, v31))
      {
        CA::ADMBuilder::Impl::build_common_channel_format(a1, (int64x2_t **)a2, 5, v29);
        v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        break;
      }
      ++v29;
      v32 += 2;
    }
    if (v30 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v29 == 2)
      goto LABEL_60;
  }
}

void sub_18EED68D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::string::starts_with[abi:ne180100](const void **a1, char *__s)
{
  size_t v4;
  size_t v5;
  const void **v6;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    v6 = a1;
    a1 = (const void **)*a1;
    v5 = (size_t)v6[1];
  }
  else
  {
    v5 = *((unsigned __int8 *)a1 + 23);
  }
  return v5 >= v4 && memcmp(a1, __s, v4) == 0;
}

uint64_t `anonymous namespace'::parse_hex_digits(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t result;
  int v5;

  v1 = a1[23];
  v2 = *((_QWORD *)a1 + 1);
  if ((v1 & 0x80u) == 0)
    v3 = a1;
  else
    v3 = *(unsigned __int8 **)a1;
  result = 0;
  if ((v1 & 0x80u) != 0)
    v1 = v2;
  for (; v1; --v1)
  {
    v5 = *v3;
    result *= 16;
    if ((v5 - 48) > 9)
    {
      if (v5 != 97)
        return 0;
    }
    else
    {
      result += (v5 - 48);
    }
    ++v3;
  }
  return result;
}

void CA::ADMBuilder::Impl::build_common_channel_format(_QWORD *a1, int64x2_t **a2, int a3, uint64_t a4)
{
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unsigned __int8 *v11;
  std::string *v12;
  size_t v13;
  _BYTE *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  size_t shared_weak_owners_high;
  _BYTE *v23;
  const void *v24;
  uint64_t shared_owners;
  uint64_t v26;
  size_t v27;
  std::string *v28;
  char **v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  _BYTE *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int64x2_t *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  char *v58;
  __int128 v59;
  int64x2_t v60;
  _OWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::string v68;
  _BYTE v69[32];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  char v101;

  CA::ADMBuilder::Impl::common_channel_format_id((uint64_t)&v99, a3, a4);
  if (!v101)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v8 = (char *)operator new(0xC0uLL);
  v9 = (std::__shared_weak_count *)v8;
  *((_QWORD *)v8 + 1) = 0;
  v10 = (unint64_t *)(v8 + 8);
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E29179F0;
  *(_OWORD *)(v8 + 24) = 0u;
  v11 = (unsigned __int8 *)(v8 + 24);
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *((_QWORD *)v8 + 23) = 0;
  *(_QWORD *)&v98 = v8 + 24;
  *((_QWORD *)&v98 + 1) = v8;
  if (SHIBYTE(v100) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v8 + 1, (const std::string::value_type *)v99, *((std::string::size_type *)&v99 + 1));
  }
  else
  {
    *(_OWORD *)v11 = v99;
    *((_QWORD *)v8 + 5) = v100;
  }
  LOBYTE(v9[2].__vftable) = 1;
  if (a3 == 1)
  {
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)&v9[2].__shared_owners_, CA::ADMCommonFormats::channel_formats_direct_speakers[3 * a4]);
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)&v9[3].__shared_weak_owners_, "0001");
    v21 = (std::string *)&v9[5];
    if (LOBYTE(v9[6].__vftable))
    {
      std::string::__assign_external(v21, "DirectSpeakers");
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "DirectSpeakers");
      LOBYTE(v9[6].__vftable) = 1;
    }
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    memset(v69, 0, sizeof(v69));
    std::vector<CA::ADMBlockFormat>::push_back[abi:ne180100]((__int128 **)&v9[7], (__int128 *)v69);
    if ((_BYTE)v97 && SHIBYTE(v96) < 0)
      operator delete(*((void **)&v95 + 1));
    if ((_BYTE)v94 && SHIBYTE(v93) < 0)
      operator delete(*((void **)&v92 + 1));
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
    std::vector<CA::ADMZone>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85 + 8;
    std::vector<CA::ADMMatrixCoefficient>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    if ((_QWORD)v85)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v85);
    if ((_BYTE)v81 && SHIBYTE(v80) < 0)
      operator delete(*((void **)&v79 + 1));
    if (v69[24] && (v69[23] & 0x80000000) != 0)
      operator delete(*(void **)v69);
    if (!LOBYTE(v9[2].__vftable))
      std::__throw_bad_optional_access[abi:ne180100]();
    if (v9[1].__shared_weak_owners_ >= 0)
      shared_weak_owners_high = HIBYTE(v9[1].__shared_weak_owners_);
    else
      shared_weak_owners_high = v9[1].__shared_owners_;
    v23 = v69;
    std::string::basic_string[abi:ne180100]((uint64_t)v69, shared_weak_owners_high + 9);
    if (v69[23] < 0)
      v23 = *(_BYTE **)v69;
    if (shared_weak_owners_high)
    {
      if (v9[1].__shared_weak_owners_ >= 0)
        v24 = v11;
      else
        v24 = v9[1].__vftable;
      memmove(v23, v24, shared_weak_owners_high);
    }
    strcpy(&v23[shared_weak_owners_high], "_00000001");
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(v9[7].__shared_owners_ - 480, (__int128 *)v69);
    if ((v69[23] & 0x80000000) != 0)
      operator delete(*(void **)v69);
    shared_owners = v9[7].__shared_owners_;
    v26 = shared_owners - 480;
    if (*(_BYTE *)(shared_owners - 456))
    {
      if (*(char *)(shared_owners - 457) < 0)
        v26 = *(_QWORD *)v26;
      *(_BYTE *)(v26 + 1) = 66;
      std::string::basic_string[abi:ne180100]<0>(&v68, "urn:itu:bs:2051:0:speaker:");
      v27 = strlen(CA::ADMCommonFormats::channel_formats_direct_speakers[3 * a4 + 1]);
      v28 = std::string::append(&v68, CA::ADMCommonFormats::channel_formats_direct_speakers[3 * a4 + 1], v27);
      *(std::string *)v69 = *v28;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(v9[7].__shared_owners_ - 296, (__int128 *)v69);
      if ((v69[23] & 0x80000000) != 0)
        operator delete(*(void **)v69);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      v29 = &CA::ADMCommonFormats::channel_formats_direct_speakers[3 * a4];
      v30 = v9[7].__shared_owners_ - 480;
      *(_DWORD *)(v30 + 136) = *((_DWORD *)v29 + 4);
      *(_BYTE *)(v30 + 140) = 1;
      v31 = *((_DWORD *)v29 + 5);
      v32 = v9[7].__shared_owners_ - 480;
      *(_DWORD *)(v32 + 144) = v31;
      *(_BYTE *)(v32 + 148) = 1;
      v33 = v9[7].__shared_owners_ - 480;
      *(_DWORD *)(v33 + 152) = 1065353216;
      *(_BYTE *)(v33 + 156) = 1;
      goto LABEL_113;
    }
    goto LABEL_142;
  }
  if (a3 == 4)
  {
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)&v9[2].__shared_owners_, CA::ADMCommonFormats::channel_formats_hoa[4 * a4 + 1]);
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)&v9[3].__shared_weak_owners_, "0004");
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)&v9[5], "HOA");
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    memset(v69, 0, sizeof(v69));
    std::vector<CA::ADMBlockFormat>::push_back[abi:ne180100]((__int128 **)&v9[7], (__int128 *)v69);
    if ((_BYTE)v97 && SHIBYTE(v96) < 0)
      operator delete(*((void **)&v95 + 1));
    if ((_BYTE)v94 && SHIBYTE(v93) < 0)
      operator delete(*((void **)&v92 + 1));
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
    std::vector<CA::ADMZone>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85 + 8;
    std::vector<CA::ADMMatrixCoefficient>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    if ((_QWORD)v85)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v85);
    if ((_BYTE)v81 && SHIBYTE(v80) < 0)
      operator delete(*((void **)&v79 + 1));
    if (v69[24] && (v69[23] & 0x80000000) != 0)
      operator delete(*(void **)v69);
    if (!LOBYTE(v9[2].__vftable))
      std::__throw_bad_optional_access[abi:ne180100]();
    if (v9[1].__shared_weak_owners_ >= 0)
      v13 = HIBYTE(v9[1].__shared_weak_owners_);
    else
      v13 = v9[1].__shared_owners_;
    v14 = v69;
    std::string::basic_string[abi:ne180100]((uint64_t)v69, v13 + 9);
    if (v69[23] < 0)
      v14 = *(_BYTE **)v69;
    if (v13)
    {
      if (v9[1].__shared_weak_owners_ >= 0)
        v15 = v11;
      else
        v15 = v9[1].__vftable;
      memmove(v14, v15, v13);
    }
    strcpy(&v14[v13], "_00000001");
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(v9[7].__shared_owners_ - 480, (__int128 *)v69);
    if ((v69[23] & 0x80000000) != 0)
      operator delete(*(void **)v69);
    v16 = v9[7].__shared_owners_;
    v17 = v16 - 480;
    if (*(_BYTE *)(v16 - 456))
    {
      if (*(char *)(v16 - 457) < 0)
        v17 = *(_QWORD *)v17;
      *(_BYTE *)(v17 + 1) = 66;
      v18 = &CA::ADMCommonFormats::channel_formats_hoa[4 * a4];
      std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v9[7].__shared_owners_ - 40), v18[3]);
      v19 = v9[7].__shared_owners_;
      *(_DWORD *)(v19 - 56) = *((_DWORD *)v18 + 4);
      *(_BYTE *)(v19 - 52) = 1;
      v20 = v9[7].__shared_owners_;
      *(_DWORD *)(v20 - 48) = *((_DWORD *)v18 + 5);
      *(_BYTE *)(v20 - 44) = 1;
      goto LABEL_113;
    }
LABEL_142:
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (a3 != 5)
  {
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_134;
  }
  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)&v9[2].__shared_owners_, CA::ADMCommonFormats::channel_formats_binaural[2 * a4 + 1]);
  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)&v9[3].__shared_weak_owners_, "0005");
  v12 = (std::string *)&v9[5];
  if (LOBYTE(v9[6].__vftable))
  {
    std::string::__assign_external(v12, "Binaural");
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "Binaural");
    LOBYTE(v9[6].__vftable) = 1;
  }
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v75 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v70 = 0u;
  memset(v69, 0, sizeof(v69));
  std::vector<CA::ADMBlockFormat>::push_back[abi:ne180100]((__int128 **)&v9[7], (__int128 *)v69);
  if ((_BYTE)v97 && SHIBYTE(v96) < 0)
    operator delete(*((void **)&v95 + 1));
  if ((_BYTE)v94 && SHIBYTE(v93) < 0)
    operator delete(*((void **)&v92 + 1));
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
  std::vector<CA::ADMZone>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85 + 8;
  std::vector<CA::ADMMatrixCoefficient>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  if ((_QWORD)v85)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v85);
  if ((_BYTE)v81 && SHIBYTE(v80) < 0)
    operator delete(*((void **)&v79 + 1));
  if (v69[24] && (v69[23] & 0x80000000) != 0)
    operator delete(*(void **)v69);
  if (!LOBYTE(v9[2].__vftable))
    std::__throw_bad_optional_access[abi:ne180100]();
  if (v9[1].__shared_weak_owners_ >= 0)
    v34 = HIBYTE(v9[1].__shared_weak_owners_);
  else
    v34 = v9[1].__shared_owners_;
  v35 = v69;
  std::string::basic_string[abi:ne180100]((uint64_t)v69, v34 + 9);
  if (v69[23] < 0)
    v35 = *(_BYTE **)v69;
  if (v34)
  {
    if (v9[1].__shared_weak_owners_ >= 0)
      v36 = v11;
    else
      v36 = v9[1].__vftable;
    memmove(v35, v36, v34);
  }
  strcpy(&v35[v34], "_00000001");
  std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(v9[7].__shared_owners_ - 480, (__int128 *)v69);
  if ((v69[23] & 0x80000000) != 0)
    operator delete(*(void **)v69);
  v37 = v9[7].__shared_owners_;
  v38 = v37 - 480;
  if (!*(_BYTE *)(v37 - 456))
    goto LABEL_142;
  if (*(char *)(v37 - 457) < 0)
    v38 = *(_QWORD *)v38;
  *(_BYTE *)(v38 + 1) = 66;
LABEL_113:
  *(_QWORD *)v69 = v11;
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 115), v11, (__int128 **)v69);
  std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)v39 + 5, (uint64_t)v11, (uint64_t)v9);
  v40 = *a2;
  v41 = (_QWORD *)v40[9].i64[1];
  v42 = v40[10].u64[0];
  if ((unint64_t)v41 >= v42)
  {
    v45 = v40[9].i64[0];
    v46 = ((uint64_t)v41 - v45) >> 4;
    v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v48 = v42 - v45;
    if (v48 >> 3 > v47)
      v47 = v48 >> 3;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
      v49 = 0xFFFFFFFFFFFFFFFLL;
    else
      v49 = v47;
    *(_QWORD *)&v70 = v40 + 10;
    v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v49);
    v52 = &v50[16 * v46];
    v53 = *((_QWORD *)&v98 + 1);
    *(_OWORD *)v52 = v98;
    if (v53)
    {
      v54 = (unint64_t *)(v53 + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v57 = (_QWORD *)v40[9].i64[0];
    v56 = (_QWORD *)v40[9].i64[1];
    if (v56 == v57)
    {
      v60 = vdupq_n_s64((unint64_t)v56);
      v58 = &v50[16 * v46];
    }
    else
    {
      v58 = &v50[16 * v46];
      do
      {
        v59 = *((_OWORD *)v56 - 1);
        v56 -= 2;
        *((_OWORD *)v58 - 1) = v59;
        v58 -= 16;
        *v56 = 0;
        v56[1] = 0;
      }
      while (v56 != v57);
      v60 = v40[9];
    }
    v61 = v52 + 16;
    v40[9].i64[0] = (uint64_t)v58;
    v40[9].i64[1] = (uint64_t)(v52 + 16);
    *(int64x2_t *)&v69[8] = v60;
    v62 = v40[10].i64[0];
    v40[10].i64[0] = (uint64_t)&v50[16 * v51];
    *(_QWORD *)&v69[24] = v62;
    *(_QWORD *)v69 = v60.i64[0];
    std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)v69);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
    v63 = v98;
    v40[9].i64[1] = (uint64_t)v61;
    *(_OWORD *)a1 = __PAIR128__((unint64_t)v9, v63);
    if (!v9)
      goto LABEL_138;
  }
  else
  {
    v43 = v98;
    *v41 = v98;
    v41[1] = v9;
    do
      v44 = __ldxr(v10);
    while (__stxr(v44 + 1, v10));
    v40[9].i64[1] = (uint64_t)(v41 + 2);
    *a1 = v43;
    a1[1] = v9;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v65 = __ldxr(p_shared_owners);
  while (__stxr(v65 + 1, p_shared_owners));
LABEL_134:
  v66 = (unint64_t *)&v9->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_138:
  if (v101)
  {
    if (SHIBYTE(v100) < 0)
      operator delete((void *)v99);
  }
}

void sub_18EED7378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v16 - 144);
  if (*(_BYTE *)(v16 - 104))
  {
    if (*(char *)(v16 - 105) < 0)
      operator delete(*(void **)(v16 - 128));
  }
  _Unwind_Resume(a1);
}

void CA::ADMBuilder::Impl::common_channel_format_id(uint64_t a1, int a2, uint64_t a3)
{
  std::string::size_type v5;
  char v6;
  const char *v7;
  size_t v8;
  std::string *v9;
  const char *v10;
  size_t v11;
  uint64_t v12;
  char v13;
  std::string v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  if (a2 == 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "AC_0005");
    v7 = CA::ADMCommonFormats::channel_formats_binaural[2 * a3];
    v8 = strlen(v7);
    v9 = std::string::append(&v14, v7, v8);
    goto LABEL_7;
  }
  if (a2 == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "AC_0004");
    v10 = CA::ADMCommonFormats::channel_formats_hoa[4 * a3];
    v11 = strlen(v10);
    v9 = std::string::append(&v14, v10, v11);
LABEL_7:
    v5 = v9->__r_.__value_.__r.__words[0];
    v15[0] = v9->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
    v6 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    goto LABEL_9;
  }
  if (a2 != 1)
  {
    v13 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_11;
  }
  v15[0] = v14.__r_.__value_.__l.__size_;
  v5 = v14.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 7);
  v6 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
LABEL_9:
  v12 = v15[0];
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v15 + 7);
  *(_BYTE *)(a1 + 23) = v6;
  v13 = 1;
LABEL_11:
  *(_BYTE *)(a1 + 24) = v13;
}

void sub_18EED7564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(std::string *a1, std::string::value_type *a2)
{
  std::string *result;

  if (a1[1].__r_.__value_.__s.__data_[0])
    return std::string::__assign_external(a1, a2);
  result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a1, a2);
  result[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void std::vector<CA::ADMBlockFormat>::push_back[abi:ne180100](__int128 **a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  void **v17;

  v4 = (unint64_t)a1[1];
  v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    v7 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v4 - (_QWORD)*a1) >> 5);
    if (v7 + 1 > 0x88888888888888)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 5);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x44444444444444)
      v10 = 0x88888888888888;
    else
      v10 = v9;
    if (v10)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMBlockFormat>>(v10);
    }
    else
    {
      v12 = 0;
      v11 = 0;
    }
    v13 = (__int128 *)&v12[480 * v11];
    v14 = std::construct_at[abi:ne180100]<CA::ADMBlockFormat,CA::ADMBlockFormat,CA::ADMBlockFormat*>((uint64_t)&v12[480 * v7], a2);
    v6 = v14 + 480;
    v16 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = (__int128 *)v14;
      a1[1] = (__int128 *)v6;
      a1[2] = v13;
    }
    else
    {
      do
      {
        v15 -= 30;
        v14 = std::construct_at[abi:ne180100]<CA::ADMBlockFormat,CA::ADMBlockFormat,CA::ADMBlockFormat*>(v14 - 480, v15);
      }
      while (v15 != v16);
      v15 = *a1;
      v17 = (void **)a1[1];
      *a1 = (__int128 *)v14;
      a1[1] = (__int128 *)v6;
      a1[2] = v13;
      while (v17 != (void **)v15)
      {
        v17 -= 60;
        CA::ADMBlockFormat::~ADMBlockFormat(v17);
      }
    }
    if (v15)
      operator delete(v15);
  }
  else
  {
    v6 = std::construct_at[abi:ne180100]<CA::ADMBlockFormat,CA::ADMBlockFormat,CA::ADMBlockFormat*>(v4, a2) + 480;
  }
  a1[1] = (__int128 *)v6;
}

void std::vector<CA::ADMZone>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 9;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<CA::ADMMatrixCoefficient>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 144;
        std::__destroy_at[abi:ne180100]<CA::ADMMatrixCoefficient,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void CA::ADMBlockFormat::~ADMBlockFormat(void **this)
{
  std::__shared_weak_count *v2;
  void **v3;

  if (*((_BYTE *)this + 464) && *((char *)this + 463) < 0)
    operator delete(this[55]);
  if (*((_BYTE *)this + 416) && *((char *)this + 415) < 0)
    operator delete(this[49]);
  v3 = this + 46;
  std::vector<CA::ADMZone>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 35;
  std::vector<CA::ADMMatrixCoefficient>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (std::__shared_weak_count *)this[34];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*((_BYTE *)this + 208) && *((char *)this + 207) < 0)
    operator delete(this[23]);
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*this);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned __int8 **v37;
  unint64_t v38;
  void *v40;
  _QWORD v41[2];
  char v42;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x38uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  v42 = 0;
  *v16 = 0;
  v16[1] = v8;
  v17 = (std::string *)(v16 + 2);
  v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
  }
  else
  {
    v19 = *v18;
    v16[4] = *((_QWORD *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  v16[5] = 0;
  v16[6] = 0;
  v42 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = *(void **)a1;
          *(_QWORD *)a1 = v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v15;
          if (*v15)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v15;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v37 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(_QWORD *)v41[0] = *v37;
LABEL_75:
    *v37 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v38 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_18EED7D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v1 = *(char *)(a1 + 23);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v1 < 0;
  if (v1 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (!v3)
    v2 = *(unsigned __int8 *)(a1 + 23);
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      v34 = 0x9DDFEA08EB382D69;
      v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      v50 = v46 + v48;
      v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      v53 = v47 + v2 + v46 + v44;
      v54 = v53 + v43;
      v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      v57 = v56 + v45 + v48;
      v58 = __ROR8__(v57, 44);
      v59 = v57 + v49;
      v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      v62 = *v4;
      v61 = v4 + 4;
      v63 = v62 - 0x4B6D499041670D8DLL * v43;
      v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v65 = *(v61 - 3);
        v66 = v63 + v54 + v50 + v65;
        v67 = v61[2];
        v68 = v61[3];
        v69 = v61[1];
        v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        v70 = v52 + v59;
        v71 = *(v61 - 2);
        v72 = *(v61 - 1);
        v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        v74 = v73 + v59 + v72;
        v75 = v73 + v65 + v71;
        v54 = v75 + v72;
        v76 = __ROR8__(v75, 44) + v73;
        v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        v55 = v76 + __ROR8__(v74 + v77, 21);
        v78 = v63 + v60 + *v61;
        v59 = v78 + v69 + v67 + v68;
        v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        v52 = v77;
        v64 += 64;
      }
      while (v64);
      v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      v9 = (char *)v4 + v2;
      v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      v12 = v4[1];
      v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      v14 = v4[2];
      v15 = v16[1];
      v17 = __ROR8__(v13 + v15, 52);
      v18 = __ROR8__(v13, 37);
      v19 = v13 + v12;
      v20 = __ROR8__(v19, 7);
      v21 = v19 + v14;
      v22 = v20 + v18;
      v23 = *((_QWORD *)v9 - 4) + v14;
      v24 = v11 + v15;
      v25 = __ROR8__(v24 + v23, 52);
      v26 = v22 + v17;
      v27 = __ROR8__(v23, 37);
      v28 = *((_QWORD *)v9 - 3) + v23;
      v29 = __ROR8__(v28, 7);
      v30 = v26 + __ROR8__(v21, 31);
      v31 = v28 + v10;
      v32 = v31 + v24;
      v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      v34 = 0x9AE16A3B2F90404FLL;
      v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      v36 = v4[1];
      v37 = 0xB492B66FBE98F273 * *v4;
      v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      v5 = *v4;
      v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      v82 = *(_DWORD *)v4;
      v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<CA::ADMMatrixCoefficient,0>(uint64_t a1)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 128);
  if (*(_BYTE *)(a1 + 120) && *(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(char *)(a1 + 39) < 0)
      operator delete(*(void **)(a1 + 16));
  }
}

uint64_t std::construct_at[abi:ne180100]<CA::ADMBlockFormat,CA::ADMBlockFormat,CA::ADMBlockFormat*>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v2 = *a2;
    *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)result = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(result + 24) = 1;
  }
  v3 = a2[8];
  v4 = a2[9];
  v5 = a2[10];
  v6 = *(_QWORD *)((char *)a2 + 174);
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[2];
  v12 = a2[3];
  *(_BYTE *)(result + 184) = 0;
  *(_OWORD *)(result + 48) = v12;
  *(_OWORD *)(result + 32) = v11;
  *(_OWORD *)(result + 112) = v10;
  *(_OWORD *)(result + 96) = v9;
  *(_OWORD *)(result + 80) = v8;
  *(_OWORD *)(result + 64) = v7;
  *(_QWORD *)(result + 174) = v6;
  *(_OWORD *)(result + 160) = v5;
  *(_OWORD *)(result + 144) = v4;
  *(_OWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 208) = 0;
  if (*((_BYTE *)a2 + 208))
  {
    v13 = *(__int128 *)((char *)a2 + 184);
    *(_QWORD *)(result + 200) = *((_QWORD *)a2 + 25);
    *(_OWORD *)(result + 184) = v13;
    *((_QWORD *)a2 + 24) = 0;
    *((_QWORD *)a2 + 25) = 0;
    *((_QWORD *)a2 + 23) = 0;
    *(_BYTE *)(result + 208) = 1;
  }
  v14 = *(__int128 *)((char *)a2 + 216);
  v15 = *(__int128 *)((char *)a2 + 232);
  *(_OWORD *)(result + 245) = *(__int128 *)((char *)a2 + 245);
  *(_OWORD *)(result + 232) = v15;
  *(_OWORD *)(result + 216) = v14;
  v16 = *((_QWORD *)a2 + 34);
  *(_QWORD *)(result + 264) = *((_QWORD *)a2 + 33);
  *(_QWORD *)(result + 272) = v16;
  *((_QWORD *)a2 + 33) = 0;
  *((_QWORD *)a2 + 34) = 0;
  *(_QWORD *)(result + 280) = 0;
  *(_QWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 296) = 0;
  v17 = *((_QWORD *)a2 + 36);
  *(_QWORD *)(result + 280) = *((_QWORD *)a2 + 35);
  *(_QWORD *)(result + 288) = v17;
  *(_QWORD *)(result + 296) = *((_QWORD *)a2 + 37);
  *((_QWORD *)a2 + 35) = 0;
  *((_QWORD *)a2 + 36) = 0;
  *((_QWORD *)a2 + 37) = 0;
  v18 = a2[19];
  v19 = a2[20];
  v20 = a2[21];
  *(_OWORD *)(result + 349) = *(__int128 *)((char *)a2 + 349);
  *(_OWORD *)(result + 320) = v19;
  *(_OWORD *)(result + 336) = v20;
  *(_OWORD *)(result + 304) = v18;
  *(_QWORD *)(result + 376) = 0;
  *(_QWORD *)(result + 384) = 0;
  *(_QWORD *)(result + 368) = 0;
  *(_OWORD *)(result + 368) = a2[23];
  *(_QWORD *)(result + 384) = *((_QWORD *)a2 + 48);
  *((_QWORD *)a2 + 46) = 0;
  *((_QWORD *)a2 + 47) = 0;
  *((_QWORD *)a2 + 48) = 0;
  *(_BYTE *)(result + 392) = 0;
  *(_BYTE *)(result + 416) = 0;
  if (*((_BYTE *)a2 + 416))
  {
    v21 = *(__int128 *)((char *)a2 + 392);
    *(_QWORD *)(result + 408) = *((_QWORD *)a2 + 51);
    *(_OWORD *)(result + 392) = v21;
    *((_QWORD *)a2 + 50) = 0;
    *((_QWORD *)a2 + 51) = 0;
    *((_QWORD *)a2 + 49) = 0;
    *(_BYTE *)(result + 416) = 1;
  }
  v22 = *((_QWORD *)a2 + 53);
  *(_QWORD *)(result + 429) = *(_QWORD *)((char *)a2 + 429);
  *(_QWORD *)(result + 424) = v22;
  *(_BYTE *)(result + 440) = 0;
  *(_BYTE *)(result + 464) = 0;
  if (*((_BYTE *)a2 + 464))
  {
    v23 = *(__int128 *)((char *)a2 + 440);
    *(_QWORD *)(result + 456) = *((_QWORD *)a2 + 57);
    *(_OWORD *)(result + 440) = v23;
    *((_QWORD *)a2 + 56) = 0;
    *((_QWORD *)a2 + 57) = 0;
    *((_QWORD *)a2 + 55) = 0;
    *(_BYTE *)(result + 464) = 1;
  }
  *(_QWORD *)(result + 472) = *((_QWORD *)a2 + 59);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMBlockFormat>>(unint64_t a1)
{
  if (a1 >= 0x88888888888889)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(480 * a1);
}

void std::__shared_ptr_emplace<CA::ADMChannelFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29179F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CA::ADMChannelFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29179F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<CA::ADMChannelFormat>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 168);
  std::vector<CA::ADMBlockFormat>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(_BYTE *)(a1 + 144) && *(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(_BYTE *)(a1 + 112) && *(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
}

void std::vector<CA::ADMBlockFormat>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        CA::ADMBlockFormat::~ADMBlockFormat(v4 - 60);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void `anonymous namespace'::format(_anonymous_namespace_ *this@<X0>, uint64_t a2@<X8>, ...)
{
  size_t v5;
  char *v6;
  int v7;
  va_list va;

  va_start(va, a2);
  v5 = vsnprintf(0, 0, (const char *)this, va) + 1;
  std::string::basic_string[abi:ne180100]((_QWORD *)a2, v5, 0);
  if (*(char *)(a2 + 23) >= 0)
    v6 = (char *)a2;
  else
    v6 = *(char **)a2;
  v7 = vsnprintf(v6, v5, (const char *)this, va);
  std::string::resize((std::string *)a2, v7, 0);
}

void sub_18EED8730(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void CA::ADMBuilder::Impl::resolve_track_format_reference(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  std::string *p_p;
  std::string::size_type v21;
  char v22;
  size_t size;
  const char **v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::string __p;
  char v29;

  v6 = std::__string_hash<char>::operator()[abi:ne180100](a3);
  v7 = *(int8x8_t *)(a2 + 1008);
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v11 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v11 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)(a2 + 1000) + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)a3))
          {
            v25 = *((_QWORD *)i + 6);
            *a1 = *((_QWORD *)i + 5);
            a1[1] = v25;
            if (v25)
            {
              v26 = (unint64_t *)(v25 + 8);
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 1, v26));
            }
            return;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(_QWORD *)&v7)
              v14 %= *(_QWORD *)&v7;
          }
          else
          {
            v14 &= *(_QWORD *)&v7 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  v15 = *(char *)(a3 + 23);
  if (v15 < 0)
  {
    if (*(_QWORD *)(a3 + 8) != 14)
      goto LABEL_49;
    v16 = *(_QWORD *)a3;
  }
  else
  {
    v16 = a3;
    if (v15 != 14)
      goto LABEL_49;
  }
  if (*(_BYTE *)(v16 + 7) != 48)
    goto LABEL_49;
  if (std::string::starts_with[abi:ne180100]((const void **)a3, "AT_0001"))
  {
    std::string::basic_string(&__p, (const std::string *)a3, 8uLL, 3uLL, (std::allocator<char> *)&v29);
    v19 = v18;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v19 && v17 && v17 < 0x29)
    {
      CA::ADMBuilder::Impl::build_common_track_format(a1, a2, 1, v17 - 1);
      return;
    }
    goto LABEL_49;
  }
  if (!std::string::starts_with[abi:ne180100]((const void **)a3, "AT_0005"))
    goto LABEL_49;
  p_p = &__p;
  std::string::basic_string(&__p, (const std::string *)a3, 7uLL, 4uLL, (std::allocator<char> *)&v29);
  v21 = 0;
  v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v24 = (const char **)CA::ADMCommonFormats::channel_formats_binaural;
  while (v21 != 2)
  {
    if (size == strlen(*v24) && !memcmp(p_p, *v24, size))
    {
      CA::ADMBuilder::Impl::build_common_track_format(a1, a2, 5, v21);
      v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      break;
    }
    ++v21;
    v24 += 2;
  }
  if (v22 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v21 == 2)
  {
LABEL_49:
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_18EED89DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t CA::ADMBuilder::Impl::resolve_pack_format_reference(CA::ADMBuilder::Impl *a1, int8x8_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t result;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  const char **v18;
  CA::ADMBuilder::Impl *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  v3 = a3;
  result = std::__string_hash<char>::operator()[abi:ne180100](a3);
  v7 = a2[111];
  if (v7)
  {
    v8 = result;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = result;
      if (result >= *(_QWORD *)&v7)
        v11 = result % *(_QWORD *)&v7;
    }
    else
    {
      v11 = (*(_QWORD *)&v7 - 1) & result;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)&a2[110] + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          result = std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)v3);
          if ((result & 1) != 0)
          {
            v23 = *((_QWORD *)i + 6);
            *(_QWORD *)a1 = *((_QWORD *)i + 5);
            *((_QWORD *)a1 + 1) = v23;
            if (v23)
            {
              v24 = (unint64_t *)(v23 + 8);
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
            }
            return result;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(_QWORD *)&v7)
              v14 %= *(_QWORD *)&v7;
          }
          else
          {
            v14 &= *(_QWORD *)&v7 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  if (*(char *)(v3 + 23) < 0)
    v3 = *(_QWORD *)v3;
  v18 = (const char **)CA::ADMCommonFormats::pack_formats;
  while (v17 != 347)
  {
    result = strcmp((const char *)v3, *v18);
    if ((_DWORD)result)
    {
      if (v16)
      {
        v19 = a1;
        v20 = (uint64_t)a2;
        v21 = v15;
        v22 = v17;
        return CA::ADMBuilder::Impl::build_common_pack_format(v19, v20, v21, v22);
      }
    }
    else
    {
      if (!v16)
        v15 = v17;
      v16 = 1;
    }
    ++v17;
    v18 += 6;
  }
  if (v16)
  {
    v19 = a1;
    v20 = (uint64_t)a2;
    v21 = v15;
    v22 = 347;
    return CA::ADMBuilder::Impl::build_common_pack_format(v19, v20, v21, v22);
  }
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  return result;
}

uint64_t CA::ADMBuilder::Impl::build_common_pack_format(CA::ADMBuilder::Impl *this, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  char **v8;
  char *v9;
  int v10;
  char *v11;
  uint64_t v12;
  int v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  __int128 v32;
  int64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  _QWORD *v43;
  char *v44;
  __int128 v45;
  int64x2_t v46;
  _OWORD *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint8x8_t v57;
  unint64_t v58;
  void **v59;
  char *v60;
  unint64_t v61;
  _QWORD *v62;
  std::string *v63;
  __int128 v64;
  float v65;
  float v66;
  _BOOL8 v67;
  unint64_t v68;
  unint64_t v69;
  size_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t result;
  int64x2_t *v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  __int128 v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  char *v95;
  __int128 v96;
  int64x2_t v97;
  uint64_t v98;
  void *__p[2];
  char v100;
  char v101;
  __int128 v102;
  char *v103;
  int64x2_t v104;
  uint64_t v105;
  int64x2_t *v106;

  v5 = a3;
  v8 = CA::ADMCommonFormats::pack_formats;
  v9 = CA::ADMCommonFormats::pack_formats[6 * a3];
  v10 = v9[6];
  v11 = (char *)operator new(0x158uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1E2917948;
  *(_OWORD *)(v11 + 24) = 0u;
  v12 = (uint64_t)(v11 + 24);
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 184) = 0u;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_OWORD *)(v11 + 232) = 0u;
  *(_OWORD *)(v11 + 248) = 0u;
  *(_OWORD *)(v11 + 264) = 0u;
  *(_OWORD *)(v11 + 280) = 0u;
  *(_OWORD *)(v11 + 296) = 0u;
  *(_OWORD *)(v11 + 312) = 0u;
  *(_OWORD *)(v11 + 328) = 0u;
  *(_QWORD *)this = v11 + 24;
  *((_QWORD *)this + 1) = v11;
  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)v11 + 1, v9);
  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v11 + 56), CA::ADMCommonFormats::pack_formats[6 * v5 + 1]);
  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v11 + 88), CA::ADMCommonFormats::pack_formats[6 * v5 + 2]);
  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)v11 + 5, CA::ADMCommonFormats::pack_formats[6 * v5 + 3]);
  if (v5 >= a4)
    goto LABEL_42;
  v13 = v10 - 48;
  do
  {
    v14 = CA::ADMCommonFormats::pack_formats[6 * v5 + 4];
    v15 = *(_QWORD **)this;
    if (v14)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, v14);
      CA::ADMBuilder::Impl::resolve_pack_format_reference(&v102, a2, __p);
      v16 = v15[22];
      v17 = (_OWORD *)v15[21];
      if ((unint64_t)v17 >= v16)
      {
        v21 = v15[20];
        v22 = ((uint64_t)v17 - v21) >> 4;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v24 = v16 - v21;
        if (v24 >> 3 > v23)
          v23 = v24 >> 3;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
          v25 = 0xFFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        v106 = (int64x2_t *)(v15 + 22);
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v25);
        v28 = &v26[16 * v22];
        *(_OWORD *)v28 = v102;
        v102 = 0uLL;
        v30 = (_QWORD *)v15[20];
        v29 = (_QWORD *)v15[21];
        if (v29 == v30)
        {
          v33 = vdupq_n_s64((unint64_t)v29);
          v31 = &v26[16 * v22];
        }
        else
        {
          v31 = &v26[16 * v22];
          do
          {
            v32 = *((_OWORD *)v29 - 1);
            v29 -= 2;
            *((_OWORD *)v31 - 1) = v32;
            v31 -= 16;
            *v29 = 0;
            v29[1] = 0;
          }
          while (v29 != v30);
          v33 = *((int64x2_t *)v15 + 10);
        }
        v47 = v28 + 16;
        v15[20] = v31;
        v15[21] = v28 + 16;
        v104 = v33;
        v48 = v15[22];
        v15[22] = &v26[16 * v27];
        v105 = v48;
        v103 = (char *)v33.i64[0];
        std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v103);
        v49 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
        v15[21] = v47;
        if (v49)
        {
          p_shared_owners = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(p_shared_owners);
          while (__stlxr(v51 - 1, p_shared_owners));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
      else
      {
        *v17 = v102;
        v102 = 0uLL;
        v15[21] = v17 + 1;
      }
LABEL_38:
      if (v100 < 0)
        operator delete(__p[0]);
      goto LABEL_40;
    }
    CA::ADMBuilder::Impl::common_channel_format_id((uint64_t)__p, v13, (uint64_t)CA::ADMCommonFormats::pack_formats[6 * v5 + 5]);
    if (!v101)
      std::__throw_bad_optional_access[abi:ne180100]();
    CA::ADMBuilder::Impl::resolve_channel_format_reference(&v102, a2, (uint64_t)__p);
    v18 = v15[19];
    v19 = (_OWORD *)v15[18];
    if ((unint64_t)v19 >= v18)
    {
      v34 = v15[17];
      v35 = ((uint64_t)v19 - v34) >> 4;
      if ((unint64_t)(v35 + 1) >> 60)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v36 = v18 - v34;
      v37 = v36 >> 3;
      if (v36 >> 3 <= (unint64_t)(v35 + 1))
        v37 = v35 + 1;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
        v38 = 0xFFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      v106 = (int64x2_t *)(v15 + 19);
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v38);
      v41 = &v39[16 * v35];
      *(_OWORD *)v41 = v102;
      v43 = (_QWORD *)v15[17];
      v42 = (_QWORD *)v15[18];
      if (v42 == v43)
      {
        v46 = vdupq_n_s64((unint64_t)v42);
        v44 = &v39[16 * v35];
      }
      else
      {
        v44 = &v39[16 * v35];
        do
        {
          v45 = *((_OWORD *)v42 - 1);
          v42 -= 2;
          *((_OWORD *)v44 - 1) = v45;
          v44 -= 16;
          *v42 = 0;
          v42[1] = 0;
        }
        while (v42 != v43);
        v46 = *(int64x2_t *)(v15 + 17);
      }
      v20 = v41 + 16;
      v15[17] = v44;
      v15[18] = v41 + 16;
      v104 = v46;
      v52 = v15[19];
      v15[19] = &v39[16 * v40];
      v105 = v52;
      v103 = (char *)v46.i64[0];
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v103);
    }
    else
    {
      *v19 = v102;
      v20 = v19 + 1;
    }
    v15[18] = v20;
    if (v101)
      goto LABEL_38;
LABEL_40:
    ++v5;
  }
  while (v5 != a4);
  v12 = *(_QWORD *)this;
LABEL_42:
  v53 = (uint64_t *)(a2 + 880);
  v54 = std::__string_hash<char>::operator()[abi:ne180100](v12);
  v55 = v54;
  v56 = *(_QWORD *)(a2 + 888);
  if (v56)
  {
    v57 = (uint8x8_t)vcnt_s8((int8x8_t)v56);
    v57.i16[0] = vaddlv_u8(v57);
    v58 = v57.u32[0];
    if (v57.u32[0] > 1uLL)
    {
      v8 = (char **)v54;
      if (v54 >= v56)
        v8 = (char **)(v54 % v56);
    }
    else
    {
      v8 = (char **)((v56 - 1) & v54);
    }
    v59 = *(void ***)(*v53 + 8 * (_QWORD)v8);
    if (v59)
    {
      v60 = (char *)*v59;
      if (*v59)
      {
        do
        {
          v61 = *((_QWORD *)v60 + 1);
          if (v61 == v55)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v60 + 16, (unsigned __int8 *)v12))
            {
              goto LABEL_84;
            }
          }
          else
          {
            if (v58 > 1)
            {
              if (v61 >= v56)
                v61 %= v56;
            }
            else
            {
              v61 &= v56 - 1;
            }
            if ((char **)v61 != v8)
              break;
          }
          v60 = *(char **)v60;
        }
        while (v60);
      }
    }
  }
  v60 = (char *)operator new(0x38uLL);
  v62 = (_QWORD *)(a2 + 896);
  v103 = v60;
  v104.i64[0] = a2 + 896;
  v104.i8[8] = 0;
  *(_QWORD *)v60 = 0;
  *((_QWORD *)v60 + 1) = v55;
  v63 = (std::string *)(v60 + 16);
  if (*(char *)(v12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v63, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
  }
  else
  {
    v64 = *(_OWORD *)v12;
    *((_QWORD *)v60 + 4) = *(_QWORD *)(v12 + 16);
    *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v64;
  }
  *((_QWORD *)v60 + 5) = 0;
  *((_QWORD *)v60 + 6) = 0;
  v104.i8[8] = 1;
  v65 = (float)(unint64_t)(*(_QWORD *)(a2 + 904) + 1);
  v66 = *(float *)(a2 + 912);
  if (!v56 || (float)(v66 * (float)v56) < v65)
  {
    v67 = 1;
    if (v56 >= 3)
      v67 = (v56 & (v56 - 1)) != 0;
    v68 = v67 | (2 * v56);
    v69 = vcvtps_u32_f32(v65 / v66);
    if (v68 <= v69)
      v70 = v69;
    else
      v70 = v68;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a2 + 880, v70);
    v56 = *(_QWORD *)(a2 + 888);
    if ((v56 & (v56 - 1)) != 0)
    {
      if (v55 >= v56)
        v8 = (char **)(v55 % v56);
      else
        v8 = (char **)v55;
    }
    else
    {
      v8 = (char **)((v56 - 1) & v55);
    }
  }
  v71 = *v53;
  v72 = *(_QWORD **)(*v53 + 8 * (_QWORD)v8);
  if (v72)
  {
    *(_QWORD *)v60 = *v72;
    goto LABEL_82;
  }
  *(_QWORD *)v60 = *v62;
  *v62 = v60;
  *(_QWORD *)(v71 + 8 * (_QWORD)v8) = v62;
  if (*(_QWORD *)v60)
  {
    v73 = *(_QWORD *)(*(_QWORD *)v60 + 8);
    if ((v56 & (v56 - 1)) != 0)
    {
      if (v73 >= v56)
        v73 %= v56;
    }
    else
    {
      v73 &= v56 - 1;
    }
    v72 = (_QWORD *)(*v53 + 8 * v73);
LABEL_82:
    *v72 = v60;
  }
  v103 = 0;
  ++*(_QWORD *)(a2 + 904);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v103);
LABEL_84:
  result = (uint64_t)std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)v60 + 5, v12, *((_QWORD *)this + 1));
  v75 = *(int64x2_t **)a2;
  v76 = (_QWORD *)v75[6].i64[1];
  v77 = v75[7].u64[0];
  if ((unint64_t)v76 >= v77)
  {
    v82 = v75[6].i64[0];
    v83 = ((uint64_t)v76 - v82) >> 4;
    v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v85 = v77 - v82;
    if (v85 >> 3 > v84)
      v84 = v85 >> 3;
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
      v86 = 0xFFFFFFFFFFFFFFFLL;
    else
      v86 = v84;
    v106 = v75 + 7;
    v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v86);
    v89 = &v87[16 * v83];
    v90 = *(_OWORD *)this;
    *(_OWORD *)v89 = *(_OWORD *)this;
    if (*((_QWORD *)&v90 + 1))
    {
      v91 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    v94 = (_QWORD *)v75[6].i64[0];
    v93 = (_QWORD *)v75[6].i64[1];
    if (v93 == v94)
    {
      v97 = vdupq_n_s64((unint64_t)v93);
      v95 = &v87[16 * v83];
    }
    else
    {
      v95 = &v87[16 * v83];
      do
      {
        v96 = *((_OWORD *)v93 - 1);
        v93 -= 2;
        *((_OWORD *)v95 - 1) = v96;
        v95 -= 16;
        *v93 = 0;
        v93[1] = 0;
      }
      while (v93 != v94);
      v97 = v75[6];
    }
    v81 = v89 + 16;
    v75[6].i64[0] = (uint64_t)v95;
    v75[6].i64[1] = (uint64_t)(v89 + 16);
    v104 = v97;
    v98 = v75[7].i64[0];
    v75[7].i64[0] = (uint64_t)&v87[16 * v88];
    v105 = v98;
    v103 = (char *)v97.i64[0];
    result = std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v103);
  }
  else
  {
    *v76 = *(_QWORD *)this;
    v78 = *((_QWORD *)this + 1);
    v76[1] = v78;
    if (v78)
    {
      v79 = (unint64_t *)(v78 + 8);
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    v81 = v76 + 2;
  }
  v75[6].i64[1] = (uint64_t)v81;
  return result;
}

void sub_18EED9294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CA::ADMPackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CA::ADMPackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<CA::ADMPackFormat>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void **v4;

  if (*(_BYTE *)(a1 + 320) && *(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  v2 = *(std::__shared_weak_count **)(a1 + 288);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 272);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (void **)(a1 + 240);
  std::vector<std::weak_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 216);
  std::vector<std::weak_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 184);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 160);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(_BYTE *)(a1 + 144) && *(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(_BYTE *)(a1 + 112) && *(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
}

void std::vector<std::weak_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
          std::__shared_weak_count::__release_weak(v6);
        v4 -= 16;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CA::ADMBuilder::Impl::build_common_track_format(_QWORD *a1, uint64_t a2, int a3, std::string::size_type a4)
{
  char *v7;
  std::string *v8;
  size_t v9;
  std::string *v10;
  uint64_t v11;
  __int128 v12;
  std::string *v13;
  char v14;
  uint64_t *v15;
  unint64_t v16;
  std::string::size_type v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  void **v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  std::string *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  std::string::size_type v35;
  size_t v36;
  std::string *v37;
  uint64_t v38;
  const char *v39;
  size_t v40;
  std::string *v41;
  __int128 v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  std::string::size_type v50;
  size_t v51;
  std::string *v52;
  uint64_t v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  int64x2_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  __int128 v81;
  int64x2_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::string::size_type v89;
  std::string::size_type v90;
  std::string v92;
  std::string __p;
  __int128 v94;
  std::string v95;
  uint64_t v96;
  int64x2_t *v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v7 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_1E2917980;
  *(_OWORD *)(v7 + 24) = 0u;
  v8 = (std::string *)(v7 + 24);
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)&v94 = v7 + 24;
  *((_QWORD *)&v94 + 1) = v7;
  memset(&__p, 0, sizeof(__p));
  if (a3 == 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v92, "AT_0005");
    v9 = strlen(CA::ADMCommonFormats::channel_formats_hoa[4 * a4]);
    v10 = std::string::append(&v92, CA::ADMCommonFormats::channel_formats_hoa[4 * a4], v9);
    v90 = a4;
    v11 = a2;
    v12 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v12;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v95, "_01", 3uLL);
    a4 = v13->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v98 = v13->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v98 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = a4;
    __p.__r_.__value_.__l.__size_ = v98;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v98 + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v14;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    a2 = v11;
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
  }
  else
  {
    if (a3 != 1)
    {
      *a1 = 0;
      a1[1] = 0;
      goto LABEL_114;
    }
    v90 = a4;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v95;
  }
  std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(v8, &__p);
  v15 = (uint64_t *)(a2 + 1000);
  v16 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&__p);
  v17 = v16;
  v18 = *(_QWORD *)(a2 + 1008);
  if (v18)
  {
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.u32[0];
    if (v19.u32[0] > 1uLL)
    {
      a4 = v16;
      if (v16 >= v18)
        a4 = v16 % v18;
    }
    else
    {
      a4 = (v18 - 1) & v16;
    }
    v21 = *(void ***)(*v15 + 8 * a4);
    if (v21)
    {
      v22 = (char *)*v21;
      if (*v21)
      {
        do
        {
          v23 = *((_QWORD *)v22 + 1);
          if (v23 == v17)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v22 + 16, (unsigned __int8 *)&__p))
            {
              v89 = v90;
              goto LABEL_54;
            }
          }
          else
          {
            if (v20 > 1)
            {
              if (v23 >= v18)
                v23 %= v18;
            }
            else
            {
              v23 &= v18 - 1;
            }
            if (v23 != a4)
              break;
          }
          v22 = *(char **)v22;
        }
        while (v22);
      }
    }
  }
  v22 = (char *)operator new(0x38uLL);
  v24 = (_QWORD *)(a2 + 1016);
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  v95.__r_.__value_.__l.__size_ = a2 + 1016;
  v95.__r_.__value_.__s.__data_[16] = 0;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = v17;
  v25 = (std::string *)(v22 + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v25, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v22 + 4) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *((_QWORD *)v22 + 5) = 0;
  *((_QWORD *)v22 + 6) = 0;
  v95.__r_.__value_.__s.__data_[16] = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a2 + 1024) + 1);
  v27 = *(float *)(a2 + 1032);
  if (!v18 || (float)(v27 * (float)v18) < v26)
  {
    v28 = 1;
    if (v18 >= 3)
      v28 = (v18 & (v18 - 1)) != 0;
    v29 = v28 | (2 * v18);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      v31 = v30;
    else
      v31 = v29;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>((uint64_t)v15, v31);
    v18 = *(_QWORD *)(a2 + 1008);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v17 >= v18)
        a4 = v17 % v18;
      else
        a4 = v17;
    }
    else
    {
      a4 = (v18 - 1) & v17;
    }
  }
  v32 = *v15;
  v33 = *(_QWORD **)(*v15 + 8 * a4);
  if (v33)
  {
    *(_QWORD *)v22 = *v33;
    v89 = v90;
LABEL_52:
    *v33 = v22;
    goto LABEL_53;
  }
  *(_QWORD *)v22 = *v24;
  *v24 = v22;
  *(_QWORD *)(v32 + 8 * a4) = v24;
  v89 = v90;
  if (*(_QWORD *)v22)
  {
    v34 = *(_QWORD *)(*(_QWORD *)v22 + 8);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v34 >= v18)
        v34 %= v18;
    }
    else
    {
      v34 &= v18 - 1;
    }
    v33 = (_QWORD *)(*v15 + 8 * v34);
    goto LABEL_52;
  }
LABEL_53:
  v95.__r_.__value_.__r.__words[0] = 0;
  ++*(_QWORD *)(a2 + 1024);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v95);
LABEL_54:
  std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100]((_QWORD *)v22 + 5, (uint64_t)v8, (uint64_t)v7);
  if (a3 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v92, "PCM_");
    v50 = v89;
    v51 = strlen(CA::ADMCommonFormats::channel_formats_direct_speakers[3 * v89]);
    v52 = std::string::append(&v92, CA::ADMCommonFormats::channel_formats_direct_speakers[3 * v89], v51);
    v95 = *v52;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v53 = v94;
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(v94 + 32, (__int128 *)&v95);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v53 + 64), "0001");
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v53 + 96), "PCM");
    CA::ADMBuilder::Impl::resolve_stream_format_reference(&v92, a2, (uint64_t)&v95);
    v54 = *(_OWORD *)&v92.__r_.__value_.__l.__data_;
    if (v92.__r_.__value_.__l.__size_)
    {
      v55 = (unint64_t *)(v92.__r_.__value_.__l.__size_ + 16);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    v57 = *(std::__shared_weak_count **)(v53 + 136);
    *(_OWORD *)(v53 + 128) = v54;
    if (v57)
      std::__shared_weak_count::__release_weak(v57);
    if (*((_QWORD *)&v54 + 1))
    {
      v58 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v54 + 1) + 16))(*((_QWORD *)&v54 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v54 + 1));
      }
    }
    if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
    v49 = (void *)v95.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v92, "PCM_");
    v35 = v89;
    v36 = strlen(CA::ADMCommonFormats::channel_formats_binaural[2 * v89 + 1]);
    v37 = std::string::append(&v92, CA::ADMCommonFormats::channel_formats_binaural[2 * v89 + 1], v36);
    v95 = *v37;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v38 = v94;
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(v94 + 32, (__int128 *)&v95);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v38 + 64), "0005");
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v38 + 96), "PCM");
    std::string::basic_string[abi:ne180100]<0>(&v92, "AS_0005");
    v39 = CA::ADMCommonFormats::channel_formats_hoa[4 * v35];
    v40 = strlen(v39);
    v41 = std::string::append(&v92, v39, v40);
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    CA::ADMBuilder::Impl::resolve_stream_format_reference(&v98, a2, (uint64_t)&v95);
    v43 = v98;
    if (*((_QWORD *)&v98 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 16);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = *(std::__shared_weak_count **)(v38 + 136);
    *(_OWORD *)(v38 + 128) = v43;
    if (v46)
      std::__shared_weak_count::__release_weak(v46);
    if (*((_QWORD *)&v43 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v43 + 1) + 16))(*((_QWORD *)&v43 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v43 + 1));
      }
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
    v49 = (void *)v92.__r_.__value_.__r.__words[0];
  }
  operator delete(v49);
LABEL_91:
  v60 = *(int64x2_t **)a2;
  v62 = *(_QWORD **)(*(_QWORD *)a2 + 248);
  v61 = *(_QWORD *)(*(_QWORD *)a2 + 256);
  if ((unint64_t)v62 >= v61)
  {
    v67 = v60[15].i64[0];
    v68 = ((uint64_t)v62 - v67) >> 4;
    v69 = v68 + 1;
    if ((unint64_t)(v68 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v70 = v61 - v67;
    if (v70 >> 3 > v69)
      v69 = v70 >> 3;
    if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0)
      v71 = 0xFFFFFFFFFFFFFFFLL;
    else
      v71 = v69;
    v97 = v60 + 16;
    v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v71);
    v74 = &v72[16 * v68];
    v75 = *((_QWORD *)&v94 + 1);
    *(_OWORD *)v74 = v94;
    if (v75)
    {
      v76 = (unint64_t *)(v75 + 8);
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    v79 = (_QWORD *)v60[15].i64[0];
    v78 = (_QWORD *)v60[15].i64[1];
    if (v78 == v79)
    {
      v82 = vdupq_n_s64((unint64_t)v78);
      v80 = &v72[16 * v68];
    }
    else
    {
      v80 = &v72[16 * v68];
      do
      {
        v81 = *((_OWORD *)v78 - 1);
        v78 -= 2;
        *((_OWORD *)v80 - 1) = v81;
        v80 -= 16;
        *v78 = 0;
        v78[1] = 0;
      }
      while (v78 != v79);
      v82 = v60[15];
    }
    v66 = v74 + 16;
    v60[15].i64[0] = (uint64_t)v80;
    v60[15].i64[1] = (uint64_t)(v74 + 16);
    *(int64x2_t *)&v95.__r_.__value_.__r.__words[1] = v82;
    v83 = v60[16].i64[0];
    v60[16].i64[0] = (uint64_t)&v72[16 * v73];
    v96 = v83;
    v95.__r_.__value_.__r.__words[0] = v82.i64[0];
    std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v95);
    v63 = *((_QWORD *)&v94 + 1);
  }
  else
  {
    *v62 = v94;
    v63 = *((_QWORD *)&v94 + 1);
    v62[1] = *((_QWORD *)&v94 + 1);
    if (v63)
    {
      v64 = (unint64_t *)(v63 + 8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    v66 = v62 + 2;
  }
  v60[15].i64[1] = (uint64_t)v66;
  *a1 = v94;
  a1[1] = v63;
  if (v63)
  {
    v84 = (unint64_t *)(v63 + 8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
  }
LABEL_114:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
  if (*((_QWORD *)&v94 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
}

void sub_18EED9D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  if (a25 < 0)
    operator delete(a20);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(std::string *this, const std::string *a2)
{
  __int128 v3;

  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void CA::ADMBuilder::Impl::resolve_stream_format_reference(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  std::string *p_p;
  uint64_t v21;
  char v22;
  size_t size;
  const char **v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::string __p;
  char v29;

  v6 = std::__string_hash<char>::operator()[abi:ne180100](a3);
  v7 = *(int8x8_t *)(a2 + 968);
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v11 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v11 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)(a2 + 960) + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)a3))
          {
            v25 = *((_QWORD *)i + 6);
            *a1 = *((_QWORD *)i + 5);
            a1[1] = v25;
            if (v25)
            {
              v26 = (unint64_t *)(v25 + 8);
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 1, v26));
            }
            return;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(_QWORD *)&v7)
              v14 %= *(_QWORD *)&v7;
          }
          else
          {
            v14 &= *(_QWORD *)&v7 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  v15 = *(char *)(a3 + 23);
  if (v15 < 0)
  {
    if (*(_QWORD *)(a3 + 8) != 11)
      goto LABEL_49;
    v16 = *(_QWORD *)a3;
  }
  else
  {
    v16 = a3;
    if (v15 != 11)
      goto LABEL_49;
  }
  if (*(_BYTE *)(v16 + 7) != 48)
    goto LABEL_49;
  if (std::string::starts_with[abi:ne180100]((const void **)a3, "AS_0001"))
  {
    std::string::basic_string(&__p, (const std::string *)a3, 8uLL, 3uLL, (std::allocator<char> *)&v29);
    v19 = v18;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v19 && v17 && v17 < 0x29)
    {
      CA::ADMBuilder::Impl::build_common_stream_format(a1, a2, 1, v17 - 1);
      return;
    }
    goto LABEL_49;
  }
  if (!std::string::starts_with[abi:ne180100]((const void **)a3, "AS_0005"))
    goto LABEL_49;
  p_p = &__p;
  std::string::basic_string(&__p, (const std::string *)a3, 7uLL, 4uLL, (std::allocator<char> *)&v29);
  v21 = 0;
  v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v24 = (const char **)CA::ADMCommonFormats::channel_formats_binaural;
  while (v21 != 2)
  {
    if (size == strlen(*v24) && !memcmp(p_p, *v24, size))
    {
      CA::ADMBuilder::Impl::build_common_stream_format(a1, a2, 5, v21);
      v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      break;
    }
    ++v21;
    v24 += 2;
  }
  if (v22 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v21 == 2)
  {
LABEL_49:
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_18EEDA104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CA::ADMBuilder::Impl::build_common_stream_format(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  unint64_t *v9;
  std::string *v10;
  size_t v11;
  std::string *v12;
  std::string::size_type v13;
  char v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  void **v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  std::string *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  size_t v40;
  std::string *v41;
  uint64_t v42;
  const char **v43;
  size_t v44;
  std::string *v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int64x2_t *v50;
  size_t v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  unint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  uint64_t v59;
  size_t v60;
  std::string *v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *size;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  _OWORD *v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  __int128 v81;
  int64x2_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  _QWORD *v92;
  char *v93;
  __int128 v94;
  int64x2_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  int64x2_t *v99;
  int64x2_t **v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  char *v119;
  __int128 v120;
  int64x2_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v132;
  std::string v133;
  std::string v134;
  __int128 v135;
  std::string __p;
  __int128 v137;
  std::string v138;
  uint64_t v139;
  uint64_t i64;
  std::string v141;
  uint64_t v142;

  v7 = (uint64_t)&v138;
  v142 = *MEMORY[0x1E0C80C00];
  v8 = (char *)operator new(0xD0uLL);
  *((_QWORD *)v8 + 1) = 0;
  v9 = (unint64_t *)(v8 + 8);
  *(_QWORD *)v8 = &off_1E29179B8;
  *(_OWORD *)(v8 + 24) = 0u;
  v10 = (std::string *)(v8 + 24);
  *((_QWORD *)v8 + 2) = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *((_QWORD *)v8 + 25) = 0;
  *(_QWORD *)&v137 = v8 + 24;
  *((_QWORD *)&v137 + 1) = v8;
  memset(&__p, 0, sizeof(__p));
  v130 = a3;
  if (a3 == 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v138, "AS_0005");
    v129 = a4;
    v11 = strlen(CA::ADMCommonFormats::channel_formats_binaural[2 * a4]);
    v12 = std::string::append(&v138, CA::ADMCommonFormats::channel_formats_binaural[2 * a4], v11);
    v13 = v12->__r_.__value_.__r.__words[0];
    v141.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v141.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v13;
    __p.__r_.__value_.__l.__size_ = v141.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v141.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v14;
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
  }
  else
  {
    if (a3 != 1)
      goto LABEL_75;
    v129 = a4;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v138;
  }
  std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(v10, &__p);
  v15 = (uint64_t *)(a2 + 960);
  v16 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&__p);
  v17 = v16;
  v18 = *(_QWORD *)(a2 + 968);
  v132 = a2;
  if (v18)
  {
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.u32[0];
    if (v19.u32[0] > 1uLL)
    {
      v7 = v16;
      if (v16 >= v18)
        v7 = v16 % v18;
    }
    else
    {
      v7 = (v18 - 1) & v16;
    }
    v21 = *(void ***)(*v15 + 8 * v7);
    if (v21)
    {
      v22 = (char *)*v21;
      if (*v21)
      {
        do
        {
          v23 = *((_QWORD *)v22 + 1);
          if (v23 == v17)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v22 + 16, (unsigned __int8 *)&__p))
            {
              v128 = v129;
              goto LABEL_52;
            }
          }
          else
          {
            if (v20 > 1)
            {
              if (v23 >= v18)
                v23 %= v18;
            }
            else
            {
              v23 &= v18 - 1;
            }
            if (v23 != v7)
              break;
          }
          v22 = *(char **)v22;
        }
        while (v22);
      }
    }
  }
  v22 = (char *)operator new(0x38uLL);
  v24 = (_QWORD *)(a2 + 976);
  v138.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  v138.__r_.__value_.__l.__size_ = a2 + 976;
  v138.__r_.__value_.__s.__data_[16] = 0;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = v17;
  v25 = (std::string *)(v22 + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v25, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v22 + 4) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *((_QWORD *)v22 + 5) = 0;
  *((_QWORD *)v22 + 6) = 0;
  v138.__r_.__value_.__s.__data_[16] = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a2 + 984) + 1);
  v27 = *(float *)(a2 + 992);
  if (!v18 || (float)(v27 * (float)v18) < v26)
  {
    v28 = 1;
    if (v18 >= 3)
      v28 = (v18 & (v18 - 1)) != 0;
    v29 = v28 | (2 * v18);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      v31 = v30;
    else
      v31 = v29;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>((uint64_t)v15, v31);
    v18 = *(_QWORD *)(a2 + 968);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v17 >= v18)
        v7 = v17 % v18;
      else
        v7 = v17;
    }
    else
    {
      v7 = (v18 - 1) & v17;
    }
  }
  v32 = *v15;
  v33 = *(_QWORD **)(*v15 + 8 * v7);
  if (v33)
  {
    *(_QWORD *)v22 = *v33;
    v128 = v129;
LABEL_50:
    *v33 = v22;
    goto LABEL_51;
  }
  *(_QWORD *)v22 = *v24;
  *v24 = v22;
  *(_QWORD *)(v32 + 8 * v7) = v24;
  v128 = v129;
  if (*(_QWORD *)v22)
  {
    v34 = *(_QWORD *)(*(_QWORD *)v22 + 8);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v34 >= v18)
        v34 %= v18;
    }
    else
    {
      v34 &= v18 - 1;
    }
    v33 = (_QWORD *)(*v15 + 8 * v34);
    goto LABEL_50;
  }
LABEL_51:
  v138.__r_.__value_.__r.__words[0] = 0;
  ++*(_QWORD *)(a2 + 984);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v138);
  do
LABEL_52:
    v35 = __ldxr(v9);
  while (__stxr(v35 + 1, v9));
  v36 = (std::__shared_weak_count *)*((_QWORD *)v22 + 6);
  *((_QWORD *)v22 + 5) = v10;
  *((_QWORD *)v22 + 6) = v8;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v130 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v141, "PCM_");
    v59 = v128;
    v60 = strlen(CA::ADMCommonFormats::channel_formats_direct_speakers[3 * v128]);
    v61 = std::string::append(&v141, CA::ADMCommonFormats::channel_formats_direct_speakers[3 * v128], v60);
    v138 = *v61;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    v62 = v137;
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(v137 + 32, (__int128 *)&v138);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v141.__r_.__value_.__l.__data_);
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v62 + 64), "0001");
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v62 + 96), "PCM");
    v63 = v59 + 1;
    CA::ADMBuilder::Impl::resolve_channel_format_reference(&v141, a2, (uint64_t)&v138);
    std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v62 + 128, (__int128 *)&v141);
    size = (std::__shared_weak_count *)v141.__r_.__value_.__l.__size_;
    if (v141.__r_.__value_.__l.__size_)
    {
      v65 = (unint64_t *)(v141.__r_.__value_.__l.__size_ + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
    v50 = (int64x2_t *)v137;
    CA::ADMBuilder::Impl::resolve_track_format_reference(&v134, v132, &v141);
    v67 = v50[11].u64[0];
    v68 = (_OWORD *)v50[10].i64[1];
    if ((unint64_t)v68 >= v67)
    {
      v70 = v50[10].i64[0];
      v71 = ((uint64_t)v68 - v70) >> 4;
      if ((unint64_t)(v71 + 1) >> 60)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v72 = v67 - v70;
      v73 = v72 >> 3;
      if (v72 >> 3 <= (unint64_t)(v71 + 1))
        v73 = v71 + 1;
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
        v74 = 0xFFFFFFFFFFFFFFFLL;
      else
        v74 = v73;
      i64 = (uint64_t)v50[11].i64;
      v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v74);
      v77 = &v75[16 * v71];
      *(_OWORD *)v77 = *(_OWORD *)&v134.__r_.__value_.__l.__data_;
      *(_OWORD *)&v134.__r_.__value_.__l.__data_ = 0uLL;
      v79 = (_QWORD *)v50[10].i64[0];
      v78 = (_QWORD *)v50[10].i64[1];
      if (v78 == v79)
      {
        v82 = vdupq_n_s64((unint64_t)v78);
        v80 = &v75[16 * v71];
      }
      else
      {
        v80 = &v75[16 * v71];
        do
        {
          v81 = *((_OWORD *)v78 - 1);
          v78 -= 2;
          *((_OWORD *)v80 - 1) = v81;
          v80 -= 16;
          *v78 = 0;
          v78[1] = 0;
        }
        while (v78 != v79);
        v82 = v50[10];
      }
      v69 = v77 + 16;
      v50[10].i64[0] = (uint64_t)v80;
      v50[10].i64[1] = (uint64_t)(v77 + 16);
      *(int64x2_t *)&v138.__r_.__value_.__r.__words[1] = v82;
      v96 = v50[11].i64[0];
      v50[11].i64[0] = (uint64_t)&v75[16 * v76];
      v139 = v96;
      v138.__r_.__value_.__r.__words[0] = v82.i64[0];
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v138);
    }
    else
    {
      *v68 = *(_OWORD *)&v134.__r_.__value_.__l.__data_;
      v69 = v68 + 1;
    }
    v50[10].i64[1] = (uint64_t)v69;
    if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_122;
    v97 = (void *)v141.__r_.__value_.__r.__words[0];
    goto LABEL_121;
  }
  if (v130 != 5)
  {
LABEL_75:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_145;
  }
  std::string::basic_string[abi:ne180100]<0>(&v141, "PCM_");
  v39 = v128;
  v40 = strlen(CA::ADMCommonFormats::channel_formats_binaural[2 * v128 + 1]);
  v41 = std::string::append(&v141, CA::ADMCommonFormats::channel_formats_binaural[2 * v128 + 1], v40);
  v138 = *v41;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v42 = v137;
  std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(v137 + 32, (__int128 *)&v138);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v42 + 64), "0005");
  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v42 + 96), "PCM");
  std::string::basic_string[abi:ne180100]<0>(&v141, "AC_0005");
  v43 = (const char **)&CA::ADMCommonFormats::channel_formats_hoa[4 * v39];
  v44 = strlen(*v43);
  v45 = std::string::append(&v141, *v43, v44);
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  CA::ADMBuilder::Impl::resolve_channel_format_reference(&v134, a2, (uint64_t)&v138);
  std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v42 + 128, (__int128 *)&v134);
  v47 = (std::__shared_weak_count *)v134.__r_.__value_.__l.__size_;
  if (v134.__r_.__value_.__l.__size_)
  {
    v48 = (unint64_t *)(v134.__r_.__value_.__l.__size_ + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  v50 = (int64x2_t *)v137;
  std::string::basic_string[abi:ne180100]<0>(&v133, "AT_0005");
  v51 = strlen(*v43);
  v52 = std::string::append(&v133, *v43, v51);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v134.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  v54 = std::string::append(&v134, "_01", 3uLL);
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v141.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  CA::ADMBuilder::Impl::resolve_track_format_reference(&v135, v132, &v141);
  v56 = v50[11].u64[0];
  v57 = (_OWORD *)v50[10].i64[1];
  if ((unint64_t)v57 >= v56)
  {
    v83 = v50[10].i64[0];
    v84 = ((uint64_t)v57 - v83) >> 4;
    if ((unint64_t)(v84 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v85 = v56 - v83;
    v86 = v85 >> 3;
    if (v85 >> 3 <= (unint64_t)(v84 + 1))
      v86 = v84 + 1;
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
      v87 = 0xFFFFFFFFFFFFFFFLL;
    else
      v87 = v86;
    i64 = (uint64_t)v50[11].i64;
    v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v87);
    v90 = &v88[16 * v84];
    *(_OWORD *)v90 = v135;
    v135 = 0uLL;
    v92 = (_QWORD *)v50[10].i64[0];
    v91 = (_QWORD *)v50[10].i64[1];
    if (v91 == v92)
    {
      v95 = vdupq_n_s64((unint64_t)v91);
      v93 = &v88[16 * v84];
    }
    else
    {
      v93 = &v88[16 * v84];
      do
      {
        v94 = *((_OWORD *)v91 - 1);
        v91 -= 2;
        *((_OWORD *)v93 - 1) = v94;
        v93 -= 16;
        *v91 = 0;
        v91[1] = 0;
      }
      while (v91 != v92);
      v95 = v50[10];
    }
    v58 = v90 + 16;
    v50[10].i64[0] = (uint64_t)v93;
    v50[10].i64[1] = (uint64_t)(v90 + 16);
    *(int64x2_t *)&v138.__r_.__value_.__r.__words[1] = v95;
    v98 = v50[11].i64[0];
    v50[11].i64[0] = (uint64_t)&v88[16 * v89];
    v139 = v98;
    v138.__r_.__value_.__r.__words[0] = v95.i64[0];
    std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v138);
  }
  else
  {
    *v57 = v135;
    v58 = v57 + 1;
  }
  v50[10].i64[1] = (uint64_t)v58;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_122;
  v97 = (void *)v133.__r_.__value_.__r.__words[0];
LABEL_121:
  operator delete(v97);
LABEL_122:
  v99 = *(int64x2_t **)v132;
  v100 = *(int64x2_t ***)(*(_QWORD *)v132 + 200);
  v101 = *(_QWORD *)(*(_QWORD *)v132 + 208);
  if ((unint64_t)v100 >= v101)
  {
    v106 = v99[12].i64[0];
    v107 = ((uint64_t)v100 - v106) >> 4;
    v108 = v107 + 1;
    if ((unint64_t)(v107 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v109 = v101 - v106;
    if (v109 >> 3 > v108)
      v108 = v109 >> 3;
    if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0)
      v110 = 0xFFFFFFFFFFFFFFFLL;
    else
      v110 = v108;
    i64 = *(_QWORD *)v132 + 208;
    v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v110);
    v113 = &v111[16 * v107];
    v114 = *((_QWORD *)&v137 + 1);
    *(_OWORD *)v113 = v137;
    if (v114)
    {
      v115 = (unint64_t *)(v114 + 8);
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
    }
    v118 = (_QWORD *)v99[12].i64[0];
    v117 = (_QWORD *)v99[12].i64[1];
    if (v117 == v118)
    {
      v121 = vdupq_n_s64((unint64_t)v117);
      v119 = &v111[16 * v107];
    }
    else
    {
      v119 = &v111[16 * v107];
      do
      {
        v120 = *((_OWORD *)v117 - 1);
        v117 -= 2;
        *((_OWORD *)v119 - 1) = v120;
        v119 -= 16;
        *v117 = 0;
        v117[1] = 0;
      }
      while (v117 != v118);
      v121 = v99[12];
    }
    v105 = v113 + 16;
    v99[12].i64[0] = (uint64_t)v119;
    v99[12].i64[1] = (uint64_t)(v113 + 16);
    *(int64x2_t *)&v138.__r_.__value_.__r.__words[1] = v121;
    v122 = v99[13].i64[0];
    v99[13].i64[0] = (uint64_t)&v111[16 * v112];
    v139 = v122;
    v138.__r_.__value_.__r.__words[0] = v121.i64[0];
    std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v138);
    v102 = *((_QWORD *)&v137 + 1);
  }
  else
  {
    *v100 = v50;
    v102 = *((_QWORD *)&v137 + 1);
    v100[1] = (int64x2_t *)*((_QWORD *)&v137 + 1);
    if (v102)
    {
      v103 = (unint64_t *)(v102 + 8);
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
    }
    v105 = v100 + 2;
  }
  v99[12].i64[1] = (uint64_t)v105;
  *a1 = v137;
  a1[1] = v102;
  if (v102)
  {
    v123 = (unint64_t *)(v102 + 8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
LABEL_145:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v125 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v126 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
}

void sub_18EEDAC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  if (*(char *)(v43 - 105) < 0)
    operator delete(*(void **)(v43 - 128));
  if (a25 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  if (a34 < 0)
    operator delete(a29);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CA::ADMStreamFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29179B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CA::ADMStreamFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29179B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<CA::ADMStreamFormat>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 184);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 168);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 152);
  if (*(_BYTE *)(a1 + 144) && *(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(_BYTE *)(a1 + 112) && *(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
}

void std::__shared_ptr_emplace<CA::ADMTrackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CA::ADMTrackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<CA::ADMTrackFormat>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 160);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(_BYTE *)(a1 + 144) && *(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(_BYTE *)(a1 + 112) && *(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
}

_QWORD *std::vector<std::weak_ptr<CA::ADMPackFormat>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *((_OWORD *)v2 - 1);
    v2 -= 2;
    *(_OWORD *)(v4 - 16) = v5;
    v4 -= 16;
    *v2 = 0;
    v2[1] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::weak_ptr<CA::ADMPackFormat>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 16;
    v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL std::operator==[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v13;
  BOOL v14;

  v2 = a2[24];
  if (a2[24])
  {
    v3 = a1[23];
    if ((v3 & 0x80u) == 0)
      v4 = a1[23];
    else
      v4 = *((_QWORD *)a1 + 1);
    v5 = a2[23];
    v6 = (char)v5;
    if ((v5 & 0x80u) != 0)
      v5 = *((_QWORD *)a2 + 1);
    if (v4 == v5)
    {
      if (v6 < 0)
        a2 = *(unsigned __int8 **)a2;
      if ((v3 & 0x80) != 0)
      {
        return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
      }
      else if (a1[23])
      {
        v7 = v3 - 1;
        do
        {
          v9 = *a1++;
          v8 = v9;
          v11 = *a2++;
          v10 = v11;
          v13 = v7-- != 0;
          v14 = v8 == v10;
          v2 = v8 == v10;
        }
        while (v14 && v13);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t `anonymous namespace'::object_reachable(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v2 = *(_QWORD **)(*(_QWORD *)a2 + 168);
  v3 = *(_QWORD **)(*(_QWORD *)a2 + 176);
  if (v2 == v3)
    return 0;
  v5 = *a1;
  {
    v2 += 2;
    if (v2 == v3)
      return 0;
  }
  return 1;
}

void std::__shared_ptr_emplace<CA::ADMTrackUID>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CA::ADMTrackUID>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<CA::ADMTrackUID>::__on_zero_shared(uint64_t a1)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 208);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 192);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 176);
  if (*(_BYTE *)(a1 + 168))
  {
    if (*(_BYTE *)(a1 + 160) && *(char *)(a1 + 159) < 0)
      operator delete(*(void **)(a1 + 136));
    if (*(_BYTE *)(a1 + 128) && *(char *)(a1 + 127) < 0)
      operator delete(*(void **)(a1 + 104));
    if (*(_BYTE *)(a1 + 96) && *(char *)(a1 + 95) < 0)
      operator delete(*(void **)(a1 + 72));
  }
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t CA::ADMBuilder::Impl::parse_bound(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  int v3;
  unsigned __int16 *v4;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 1);
  if (v2 == 3)
  {
    if (v3 >= 0)
      v4 = a2;
    else
      v4 = *(unsigned __int16 **)a2;
    if (*v4 == 26989 && *((_BYTE *)v4 + 2) == 110)
    {
      v10 = 0;
      v9 = 0x100000000;
      return v10 | v9;
    }
    v6 = *v4;
    v7 = *((unsigned __int8 *)v4 + 2);
    if (v6 == 24941 && v7 == 120)
    {
      v9 = 0x100000000;
      v10 = 1;
      return v10 | v9;
    }
  }
  v9 = 0;
  v10 = 0;
  *(_DWORD *)(a1 + 632) = -66596;
  return v10 | v9;
}

uint64_t CA::ADMBuilder::Impl::parse_coordinate(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;

  v2 = a2[23];
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 1);
  switch(v2)
  {
    case 1:
      if (v3 >= 0)
        v4 = a2;
      else
        v4 = *(unsigned __int8 **)a2;
      v5 = *v4 - 88;
      if (v5 >= 3)
        goto LABEL_31;
      v6 = v5 + 3;
      goto LABEL_18;
    case 7:
      if (v3 >= 0)
        v7 = (int *)a2;
      else
        v7 = *(int **)a2;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 != 1835629153 || v9 != 1752462701)
        goto LABEL_31;
      v6 = 0;
LABEL_18:
      v11 = 0x100000000;
      break;
    case 8:
      if (v3 >= 0)
        v12 = a2;
      else
        v12 = *(_QWORD **)a2;
      if (*v12 != 0x65636E6174736964)
        goto LABEL_31;
      v11 = 0x100000000;
      v6 = 2;
      break;
    case 9:
      if (v3 >= 0)
        v13 = a2;
      else
        v13 = *(unsigned __int8 **)a2;
      v14 = *(_QWORD *)v13;
      v15 = v13[8];
      if (v14 != 0x6F69746176656C65 || v15 != 110)
        goto LABEL_31;
      v11 = 0x100000000;
      v6 = 1;
      break;
    default:
LABEL_31:
      v11 = 0;
      v6 = 0;
      *(_DWORD *)(a1 + 632) = -66593;
      break;
  }
  return v6 | v11;
}

uint64_t CA::ADMBuilder::Impl::parse_gain_unit(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  int v10;

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  if (v2 == 6)
  {
    if (v3 >= 0)
      v6 = (int *)a2;
    else
      v6 = (int *)*a2;
    v7 = *v6;
    v8 = *((unsigned __int16 *)v6 + 2);
    if (v7 == 1701734764 && v8 == 29281)
    {
      v5 = 0;
      goto LABEL_19;
    }
  }
  else if (v2 == 2)
  {
    v4 = v3 >= 0 ? a2 : (uint64_t *)*a2;
    if (*(_WORD *)v4 == 16996)
    {
      v5 = 1;
LABEL_19:
      v10 = 1;
      return v5 | (v10 << 8);
    }
  }
  v5 = 0;
  v10 = 0;
  *(_DWORD *)(a1 + 632) = -66594;
  return v5 | (v10 << 8);
}

void CA::ADMBuilder::Impl::parse_interaction(CA::ADMBuilder::Impl *this, const unsigned __int8 **a2, const char **a3)
{
  const char *v3;
  const char **i;
  char *v7;
  const char *v8;
  void *__p[2];
  char v10;

  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_BYTE *)this + 28) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 36) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 44) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 52) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 60) = 0;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 68) = 0;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 76) = 0;
  *((_WORD *)this + 40) = 0;
  *(_DWORD *)this = 0;
  *((_WORD *)this + 2) = 0;
  if (a3)
  {
    v3 = *a3;
    if (*a3)
    {
      for (i = a3 + 2; ; i += 2)
      {
        v7 = (char *)*(i - 1);
        if (!strcmp(v3, "onOffInteract"))
          break;
        if (!strcmp(v3, "gainInteract"))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, v7);
          *((_WORD *)this + 1) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)a2, (unsigned __int8 *)__p);
LABEL_10:
          if (v10 < 0)
            operator delete(__p[0]);
          goto LABEL_12;
        }
        if (!strcmp(v3, "positionInteract"))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, v7);
          *((_WORD *)this + 2) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)a2, (unsigned __int8 *)__p);
          goto LABEL_10;
        }
LABEL_12:
        v8 = *i;
        v3 = v8;
        if (!v8)
          return;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      *(_WORD *)this = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)a2, (unsigned __int8 *)__p);
      goto LABEL_10;
    }
  }
}

uint64_t CA::ADMBuilder::Impl::parse_interaction_subelement(uint64_t a1, uint64_t a2, uint64_t a3, char *__s1, const char **a5)
{
  uint64_t v10;
  std::string *v11;
  const char *v12;
  int v13;
  CA::ADMBuilder::Impl *v14;
  int v15;
  CA::ADMBuilder::Impl *v16;
  const char **v17;
  char *v18;
  CA::ADMBuilder::Impl *v19;
  CA::ADMBuilder::Impl *v20;
  const char *v21;
  CA::ADMBuilder::Impl *v22;
  char v23;
  NSObject *v24;
  std::string *v25;
  int v26;
  const char *v27;
  int v28;
  unint64_t v29;
  char v30;
  const char **v31;
  char *v32;
  unsigned __int16 v33;
  const char *v34;
  NSObject *v35;
  std::string *v36;
  NSObject *v37;
  std::string *v38;
  _QWORD *v39;
  uint64_t v40;
  NSObject *v41;
  std::string *v42;
  uint64_t v43;
  uint64_t v45;
  NSObject *v46;
  std::string *v47;
  uint64_t v48;
  NSObject *v49;
  std::string *v50;
  NSObject *v51;
  std::string *v52;
  unsigned int v53;
  NSObject *v54;
  std::string *v55;
  NSObject *v56;
  std::string *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::string v65;
  std::string v66;
  std::string v67;
  _BYTE __p[12];
  __int16 v69;
  int v70;
  __int16 v71;
  std::string *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v10 = strcmp(__s1, "gainInteractionRange");
  if (!(_DWORD)v10)
  {
    if (!a5)
      goto LABEL_62;
    v27 = *a5;
    if (!*a5)
      goto LABEL_62;
    v64 = a2;
    v28 = 0;
    LODWORD(v29) = 0;
    v30 = 0;
    v31 = a5 + 2;
    while (1)
    {
      v32 = (char *)*(v31 - 1);
      if (!strcmp(v27, "bound"))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, v32);
        v10 = CA::ADMBuilder::Impl::parse_bound(a1, (unsigned __int16 *)__p);
        v29 = v10;
        if (SBYTE3(v72) < 0)
          operator delete(*(void **)__p);
        v28 = BYTE4(v29);
        if (!HIDWORD(v29))
        {
          v35 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v10);
          v10 = os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v10)
          {
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v67, v64, "");
            v36 = (v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v67
                : (std::string *)v67.__r_.__value_.__r.__words[0];
            *(_DWORD *)__p = 136315650;
            *(_QWORD *)&__p[4] = "ADMBuilder.cpp";
            v69 = 1024;
            v70 = 692;
            v71 = 2080;
            v72 = v36;
            _os_log_impl(&dword_18EE07000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown bound for gain interaction range of object '%s'", __p, 0x1Cu);
            if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v67.__r_.__value_.__l.__data_);
          }
          *(_DWORD *)(a1 + 632) = -66596;
LABEL_56:
          a2 = v64;
          if (v28)
          {
            if ((_DWORD)v29 == 1)
            {
              if (!*(_BYTE *)(a3 + 28))
                *(_BYTE *)(a3 + 28) = 1;
              *(_QWORD *)(a3 + 20) = 0;
              *(_BYTE *)(a3 + 24) = v30;
              *(_QWORD *)(a1 + 608) = a3 + 20;
              v39 = (_QWORD *)operator new();
              goto LABEL_75;
            }
            if (!(_DWORD)v29)
            {
              if (!*(_BYTE *)(a3 + 16))
                *(_BYTE *)(a3 + 16) = 1;
              *(_QWORD *)(a3 + 8) = 0;
              *(_BYTE *)(a3 + 12) = v30;
              *(_QWORD *)(a1 + 608) = a3 + 8;
              v39 = (_QWORD *)operator new();
LABEL_75:
              *v39 = 0;
              v39[1] = 0;
              v39[2] = 0;
              v45 = *(_QWORD *)(a1 + 624);
              *(_QWORD *)(a1 + 624) = v39;
              if (v45)
                std::default_delete<std::string>::operator()[abi:ne180100](v45);
              return 92;
            }
            return 1;
          }
LABEL_62:
          if (!*(_DWORD *)(a1 + 632))
          {
            v40 = a2;
            v41 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v10);
            if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v67, v40, "");
              v42 = (v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v67
                  : (std::string *)v67.__r_.__value_.__r.__words[0];
              *(_DWORD *)__p = 136315650;
              *(_QWORD *)&__p[4] = "ADMBuilder.cpp";
              v69 = 1024;
              v70 = 730;
              v71 = 2080;
              v72 = v42;
              _os_log_impl(&dword_18EE07000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing bound for gain interaction range of object '%s'", __p, 0x1Cu);
              if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v67.__r_.__value_.__l.__data_);
            }
            *(_DWORD *)(a1 + 632) = -66595;
          }
          return 1;
        }
      }
      else
      {
        v10 = strcmp(v27, "gainUnit");
        if (!(_DWORD)v10)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, v32);
          v10 = CA::ADMBuilder::Impl::parse_gain_unit(a1, (uint64_t *)__p);
          v33 = v10;
          if (SBYTE3(v72) < 0)
            operator delete(*(void **)__p);
          if (v33 <= 0xFFu)
          {
            v37 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v10);
            v10 = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
            if ((_DWORD)v10)
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v67, v64, "");
              v38 = (v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v67
                  : (std::string *)v67.__r_.__value_.__r.__words[0];
              *(_DWORD *)__p = 136315650;
              *(_QWORD *)&__p[4] = "ADMBuilder.cpp";
              v69 = 1024;
              v70 = 703;
              v71 = 2080;
              v72 = v38;
              _os_log_impl(&dword_18EE07000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown unit for gain interaction range of object '%s'", __p, 0x1Cu);
              if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v67.__r_.__value_.__l.__data_);
            }
            goto LABEL_56;
          }
          v30 = v33;
        }
      }
      v34 = *v31;
      v31 += 2;
      v27 = v34;
      if (!v34)
        goto LABEL_56;
    }
  }
  v11 = (std::string *)strcmp(__s1, "positionInteractionRange");
  if ((_DWORD)v11)
    return 1;
  v62 = a3;
  memset(&v67, 0, sizeof(v67));
  memset(&v66, 0, sizeof(v66));
  if (!a5 || (v12 = *a5) == 0)
  {
LABEL_85:
    if (*(_DWORD *)(a1 + 632))
    {
LABEL_94:
      v43 = 1;
      goto LABEL_95;
    }
    v48 = a2;
    v49 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v11);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v65, v48, "");
      v50 = (v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v65
          : (std::string *)v65.__r_.__value_.__r.__words[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = "ADMBuilder.cpp";
      v69 = 1024;
      v70 = 767;
      v71 = 2080;
      v72 = v50;
      _os_log_impl(&dword_18EE07000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing bound for position interaction range of object '%s'", __p, 0x1Cu);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
    }
    v26 = -66595;
LABEL_93:
    *(_DWORD *)(a1 + 632) = v26;
    goto LABEL_94;
  }
  v63 = a2;
  v13 = 0;
  LODWORD(v14) = 0;
  v15 = 0;
  LODWORD(v16) = 0;
  v17 = a5 + 2;
  while (1)
  {
    v18 = (char *)*(v17 - 1);
    if (!strcmp(v12, "bound"))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, v18);
      v20 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_bound(a1, (unsigned __int16 *)__p);
      v14 = v20;
      if (SBYTE3(v72) < 0)
        operator delete(*(void **)__p);
      if (!((unint64_t)v14 >> 32))
      {
        v46 = CA::ADMBuilder::Impl::log(v20);
        v11 = (std::string *)os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v11)
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v65, v63, "");
          v47 = (v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v65
              : (std::string *)v65.__r_.__value_.__r.__words[0];
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = "ADMBuilder.cpp";
          v69 = 1024;
          v70 = 746;
          v71 = 2080;
          v72 = v47;
          _os_log_impl(&dword_18EE07000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown bound for position interaction range of object '%s'", __p, 0x1Cu);
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v65.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)(a1 + 632) = -66596;
        a2 = v63;
        goto LABEL_85;
      }
      v11 = std::string::__assign_external(&v67, v18);
      v13 = BYTE4(v14);
      goto LABEL_16;
    }
    v11 = (std::string *)strcmp(v12, "coordinate");
    if (!(_DWORD)v11)
      break;
LABEL_16:
    v21 = *v17;
    v17 += 2;
    v12 = v21;
    if (!v21)
      goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v18);
  v19 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_coordinate(a1, __p);
  v16 = v19;
  if (SBYTE3(v72) < 0)
    operator delete(*(void **)__p);
  if ((unint64_t)v16 >> 32)
  {
    v11 = std::string::__assign_external(&v66, v18);
    v15 = BYTE4(v16);
    goto LABEL_16;
  }
  v56 = CA::ADMBuilder::Impl::log(v19);
  v11 = (std::string *)os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
  v15 = BYTE4(v16);
  if ((_DWORD)v11)
  {
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v65, v63, "");
    v57 = (v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v65
        : (std::string *)v65.__r_.__value_.__r.__words[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = "ADMBuilder.cpp";
    v69 = 1024;
    v70 = 756;
    v71 = 2080;
    v72 = v57;
    _os_log_impl(&dword_18EE07000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown coordinate for position interaction range of object '%s'", __p, 0x1Cu);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
  }
LABEL_17:
  a2 = v63;
  if (!v13)
    goto LABEL_85;
  if (!v15)
  {
    if (*(_DWORD *)(a1 + 632))
      goto LABEL_94;
    v51 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v11);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v65, v63, "");
      v52 = (v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v65
          : (std::string *)v65.__r_.__value_.__r.__words[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = "ADMBuilder.cpp";
      v69 = 1024;
      v70 = 774;
      v71 = 2080;
      v72 = v52;
      _os_log_impl(&dword_18EE07000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing coordinate for position interaction range of object '%s'", __p, 0x1Cu);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
    }
    v26 = -66592;
    goto LABEL_93;
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)&v67.__r_.__value_.__l.__data_, (const void **)&v66.__r_.__value_.__l.__data_);
  v22 = (CA::ADMBuilder::Impl *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a1 + 800, __p, (uint64_t)__p);
  v23 = (char)v22;
  if (SBYTE3(v72) < 0)
    operator delete(*(void **)__p);
  if ((v23 & 1) == 0)
  {
    v24 = CA::ADMBuilder::Impl::log(v22);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v65, v63, "");
      v25 = (v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v65
          : (std::string *)v65.__r_.__value_.__r.__words[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = "ADMBuilder.cpp";
      v69 = 1024;
      v70 = 866;
      v71 = 2080;
      v72 = v25;
      _os_log_impl(&dword_18EE07000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple coordinates for position interaction range of object '%s'", __p, 0x1Cu);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
    }
    v26 = -66589;
    goto LABEL_93;
  }
  v53 = (_DWORD)v16 - 3;
  if (*(_BYTE *)(v62 + 81))
  {
    if (*(_BYTE *)(v62 + 80) != v53 < 3)
    {
      v54 = CA::ADMBuilder::Impl::log(v22);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v65, v63, "");
        v55 = (v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v65
            : (std::string *)v65.__r_.__value_.__r.__words[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = "ADMBuilder.cpp";
        v69 = 1024;
        v70 = 788;
        v71 = 2080;
        v72 = v55;
        _os_log_impl(&dword_18EE07000, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d Conflicting coordinate systems for position interaction range of object '%s'", __p, 0x1Cu);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)(a1 + 632) = -66603;
    }
  }
  else
  {
    *(_WORD *)(v62 + 80) = (v53 < 3) | 0x100;
  }
  if ((_DWORD)v14 == 1)
  {
    switch((int)v16)
    {
      case 0:
      case 3:
        *(_DWORD *)(v62 + 56) = 0;
        v59 = v62 + 56;
        goto LABEL_134;
      case 1:
      case 4:
        *(_DWORD *)(v62 + 64) = 0;
        v59 = v62 + 64;
        goto LABEL_134;
      case 2:
      case 5:
        *(_DWORD *)(v62 + 72) = 0;
        v59 = v62 + 72;
LABEL_134:
        *(_BYTE *)(v59 + 4) = 1;
        *(_QWORD *)(a1 + 608) = v59;
        break;
      default:
        break;
    }
  }
  else
  {
    if ((_DWORD)v14)
      goto LABEL_94;
    switch((int)v16)
    {
      case 0:
      case 3:
        *(_DWORD *)(v62 + 32) = 0;
        v58 = v62 + 32;
        goto LABEL_131;
      case 1:
      case 4:
        *(_DWORD *)(v62 + 40) = 0;
        v58 = v62 + 40;
        goto LABEL_131;
      case 2:
      case 5:
        *(_DWORD *)(v62 + 48) = 0;
        v58 = v62 + 48;
LABEL_131:
        *(_BYTE *)(v58 + 4) = 1;
        *(_QWORD *)(a1 + 608) = v58;
        break;
      default:
        break;
    }
  }
  v60 = (_QWORD *)operator new();
  *v60 = 0;
  v60[1] = 0;
  v60[2] = 0;
  v61 = *(_QWORD *)(a1 + 624);
  *(_QWORD *)(a1 + 624) = v60;
  if (v61)
    std::default_delete<std::string>::operator()[abi:ne180100](v61);
  v43 = 92;
LABEL_95:
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  return v43;
}

void sub_18EEDC10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, const void **a2, const void **a3)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  result = std::string::basic_string[abi:ne180100](a1, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = *a3;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return 0;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  v15[4] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v15 = *v23;
LABEL_38:
    *v23 = v15;
    goto LABEL_39;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v24 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_18EEDC46C(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

std::string *CA::ADMBuilder::Impl::label_from_attributes(std::string *this, const unsigned __int8 **a2)
{
  std::string *v2;
  const unsigned __int8 **v3;
  uint64_t v4;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  if (a2)
  {
    v2 = this;
    this = (std::string *)*a2;
    if (*a2)
    {
      v3 = a2 + 2;
      do
      {
        if (!strcmp((const char *)this, "language"))
          std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v2, (std::string::value_type *)*(v3 - 1));
        v4 = (uint64_t)*v3;
        v3 += 2;
        this = (std::string *)v4;
      }
      while (v4);
    }
  }
  return this;
}

void sub_18EEDC53C(_Unwind_Exception *a1)
{
  void **v1;

  CA::ADMLabel::~ADMLabel(v1);
  _Unwind_Resume(a1);
}

void CA::ADMLabel::~ADMLabel(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*this);
  }
}

uint64_t CA::ADMBuilder::Impl::loudness_metadata_from_attributes(CA::ADMBuilder::Impl *this, const char **a2)
{
  uint64_t result;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const unsigned __int8 **v9;
  std::string::value_type *v10;
  int v11;
  int v12;
  int v13;
  const unsigned __int8 *v14;

  result = operator new();
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_QWORD *)this = result;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = result;
      v7 = result + 64;
      v8 = result + 32;
      v9 = (const unsigned __int8 **)(a2 + 2);
      do
      {
        v10 = (std::string::value_type *)*(v9 - 1);
        v11 = strcmp(v5, "loudnessMethod");
        result = v6;
        if (!v11
          || (v12 = strcmp(v5, "loudnessRecType"), result = v8, !v12)
          || (v13 = strcmp(v5, "loudnessCorrectionType"), result = v7, !v13))
        {
          result = (uint64_t)std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)result, v10);
        }
        v14 = *v9;
        v9 += 2;
        v5 = (const char *)v14;
      }
      while (v14);
    }
  }
  return result;
}

void sub_18EEDC69C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  std::default_delete<CA::ADMLoudnessMetadata>::operator()[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

BOOL Synchronously_ServicingMainRunLoop(uint64_t a1)
{
  __CFRunLoop *Current;
  unsigned __int8 v4;
  const __CFString *v5;
  uint64_t v6;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  CFRunLoopSourceContext context;

  Current = CFRunLoopGetCurrent();
  if (Current != CFRunLoopGetMain())
    return Synchronously(a1);
  *(_OWORD *)&context.cancel = xmmword_1E2919280;
  memset(&context, 0, 64);
  {
    Synchronously_ServicingMainRunLoop::source = (uint64_t)CFRunLoopSourceCreate(0, 0, &context);
  }
  CFRunLoopAddSource(Current, (CFRunLoopSourceRef)Synchronously_ServicingMainRunLoop::source, CFSTR("com.apple.coreaudio.synchronously"));
  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = __Synchronously_ServicingMainRunLoop_block_invoke;
  v7[3] = &unk_1E29192C0;
  v7[4] = &v8;
  v7[5] = Current;
  (*(void (**)(uint64_t, _QWORD *))(a1 + 16))(a1, v7);
  if (!*((_BYTE *)v9 + 24))
  {
    v5 = (const __CFString *)*MEMORY[0x1E0C9B280];
    do
      CFRunLoopRunInMode(v5, 20.0, 1u);
    while (!*((_BYTE *)v9 + 24));
  }
  CFRunLoopRemoveSource(Current, (CFRunLoopSourceRef)Synchronously_ServicingMainRunLoop::source, CFSTR("com.apple.coreaudio.synchronously"));
  v6 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v6;
}

void sub_18EEDC840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void BufferedSoundCheckAnalyzer::~BufferedSoundCheckAnalyzer(BufferedSoundCheckAnalyzer *this)
{
  BufferedSoundCheckAnalyzer::~BufferedSoundCheckAnalyzer(this);
  JUMPOUT(0x193FFE460);
}

{
  OpaqueAudioConverter *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1E2909170;
  v2 = (OpaqueAudioConverter *)*((_QWORD *)this + 14);
  if (v2)
    AudioConverterDispose(v2);
  v3 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
    std::default_delete<BlockBufferer>::operator()[abi:ne180100](v3);
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    MEMORY[0x193FFE460](v4, 0x1080C404ACF7207);
  v5 = (void *)*((_QWORD *)this + 15);
  if (v5)
  {
    *((_QWORD *)this + 16) = v5;
    operator delete(v5);
  }
  SoundCheckAnalyzer::~SoundCheckAnalyzer(this);
}

uint64_t BufferedSoundCheckAnalyzer::Finish(BufferedSoundCheckAnalyzer *this, CACFDictionary *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)this + 22);
  v5 = *(unsigned int *)(v4 + 48);
  if ((_DWORD)v5)
  {
    bzero((void *)(*(_QWORD *)(v4 + 24) + v5), (*(_DWORD *)(v4 + 16) - v5));
    (*(void (**)(_QWORD, _QWORD, _QWORD))v4)(*(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 24), *(unsigned int *)(v4 + 16));
  }
  SoundCheckAnalyzer::Finish(this, a2);
  return 0;
}

void std::default_delete<BlockBufferer>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x193FFE460);
}

uint64_t BufferedSoundCheckAnalyzer::Start(BufferedSoundCheckAnalyzer *this, AudioStreamBasicDescription *a2, const AudioChannelLayout *a3, void *a4, int a5)
{
  int32x2_t *v10;
  AudioStreamBasicDescription *v11;
  UInt32 mChannelsPerFrame;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  AudioStreamBasicDescription v22;
  _QWORD v23[3];
  uint64_t (*v24[3])(uint64_t, uint64_t);
  void *v25;
  int v26;
  int v27;

  LODWORD(v22.mSampleRate) = 0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(a2, (int *)&v22)
    && LODWORD(v22.mSampleRate) == 1
    && (a2->mFormatFlags & 0x20) == 0)
  {
    v10 = (int32x2_t *)this;
    v11 = a2;
  }
  else
  {
    mChannelsPerFrame = a2->mChannelsPerFrame;
    v22.mSampleRate = a2->mSampleRate;
    *(_QWORD *)&v22.mFormatID = 0x96C70636DLL;
    v22.mBytesPerPacket = 4 * mChannelsPerFrame;
    v22.mFramesPerPacket = 1;
    v22.mBytesPerFrame = 4 * mChannelsPerFrame;
    v22.mChannelsPerFrame = mChannelsPerFrame;
    *(_QWORD *)&v22.mBitsPerChannel = 32;
    v13 = AudioConverterNewWithOptions(a2, &v22, 0, (_QWORD *)this + 14);
    if ((_DWORD)v13)
      return v13;
    if (a5)
    {
      v14 = *((_QWORD *)this + 14);
      v26 = a5;
      v27 = 1684891491;
      v25 = a4;
      v23[0] = &v27;
      v23[1] = &v26;
      v23[2] = &v25;
      v24[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
      v24[1] = (uint64_t (*)(uint64_t, uint64_t))v23;
      v13 = with_resolved(v14, v24);
      if ((_DWORD)v13)
        return v13;
    }
    if ((a2->mFormatFlags & 0x20) != 0)
      v15 = (16 * a2->mChannelsPerFrame) | 8;
    else
      v15 = 24;
    *((_DWORD *)this + 40) = v15;
    v16 = operator new(v15);
    v17 = *((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = v16;
    if (v17)
      MEMORY[0x193FFE460](v17, 0x1080C404ACF7207);
    v11 = &v22;
    v10 = (int32x2_t *)this;
  }
  v13 = SoundCheckAnalyzer::Start(v10, v11, a3);
  v18 = operator new();
  v19 = (*((_DWORD *)this + 10) << 15);
  *(_QWORD *)v18 = BufferedSoundCheckAnalyzer::ReceiveBufferedBlock;
  *(_QWORD *)(v18 + 8) = this;
  *(_DWORD *)(v18 + 16) = v19;
  std::vector<unsigned char>::vector((_QWORD *)(v18 + 24), v19);
  *(_DWORD *)(v18 + 48) = 0;
  v20 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v18;
  if (v20)
    std::default_delete<BlockBufferer>::operator()[abi:ne180100](v20);
  return v13;
}

void sub_18EEDCC28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x1090C4053D77133);
  _Unwind_Resume(a1);
}

uint64_t CAStreamBasicDescription::IdentifyCommonPCMFormat(_DWORD *a1, int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v8;
  BOOL v9;

  if (a1[2] != 1819304813)
    return 0;
  if (a1[5] != 1)
    return 0;
  v2 = a1[6];
  if (v2 != a1[4])
    return 0;
  v3 = a1[8];
  if (v2 < v3 >> 3)
    return 0;
  v4 = a1[7];
  if (!v4)
    return 0;
  v5 = a1[3];
  if ((v5 & 0x20) == 0)
  {
    v9 = v2 == v2 / v4 * v4;
    v2 /= v4;
    if (!v9)
      return 0;
  }
  v6 = 0;
  if ((v5 & 2) == 0 && 8 * v2 == v3)
  {
    if ((v5 & 1) != 0)
    {
      if ((v5 & 0x1F84) != 0)
        return 0;
      if (v2 == 4)
        v6 = 1;
      else
        v6 = 4 * (v2 == 8);
    }
    else if ((v5 & 4) != 0)
    {
      v8 = (v5 >> 7) & 0x3F;
      if (v8 == 24 && v2 == 4)
      {
        v6 = 3;
      }
      else if (v8 || v2 != 4)
      {
        v9 = v2 == 2 && v8 == 0;
        if (v9)
          v6 = 2;
        else
          v6 = 0;
      }
      else
      {
        v6 = 5;
      }
    }
    else
    {
      v6 = 0;
    }
  }
  *a2 = v6;
  return 1;
}

uint64_t BufferedSoundCheckAnalyzer::ReceiveBufferedBlock(BufferedSoundCheckAnalyzer *this, char *a2, const unsigned __int8 *a3)
{
  unsigned int v3;
  unsigned int v4;
  int v7;
  signed int v8;
  int v9;
  int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const float *v20;
  float *v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v27;
  int v28;

  v3 = *((_DWORD *)this + 10);
  v4 = a3 / v3;
  if (((a3 / v3) & 0x7FFF) != 0 && (*((_DWORD *)this + 2) & 1) != 0)
    return 4294967246;
  if (v3 <= a3)
  {
    v7 = 0;
    do
    {
      if (v4 >= 0x8000)
        v8 = 0x8000;
      else
        v8 = v4;
      v9 = *((_DWORD *)this + 2);
      if ((v9 & 2) != 0)
      {
        v10 = (int *)*((_QWORD *)this + 7);
        if (v10)
        {
          loudnessMeasurementGenerateBlocks(v10, v8, &a2[4 * v7]);
          v9 = *((_DWORD *)this + 2);
        }
      }
      v27 = v8;
      v28 = v7;
      if ((v9 & 4) != 0 && a2)
      {
        v11 = &a2[4 * v7];
        v12 = *((_QWORD *)this + 8);
        v13 = *((_QWORD *)this + 9);
        v14 = v13 - v12;
        if (v13 - v12 == 128)
        {
          TruePeak::Process(*((TruePeak **)this + 8), v8, (const float *)&a2[4 * v7]);
        }
        else
        {
          v15 = v14 >> 7;
          if ((unint64_t)(v14 >> 7) <= 1)
            v16 = 1;
          else
            v16 = v14 >> 7;
          do
          {
            v17 = (*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 2;
            if (v8 >= (int)v17)
              v18 = v17;
            else
              v18 = v8;
            if (v13 != v12)
            {
              v19 = 0;
              do
              {
                v20 = (const float *)*((_QWORD *)this + 11);
                v21 = (float *)v20;
                v22 = v18;
                v23 = v19;
                if ((int)v18 >= 1)
                {
                  do
                  {
                    *v21++ = *(float *)&v11[4 * v23];
                    v23 += v15;
                    --v22;
                  }
                  while (v22);
                }
                TruePeak::Process((TruePeak *)(*((_QWORD *)this + 8) + (v19++ << 7)), v18, v20);
              }
              while (v19 != v16);
            }
            v11 += 4 * v15 * (int)v18;
            v24 = __OFSUB__(v8, (_DWORD)v18);
            v8 -= v18;
          }
          while (!((v8 < 0) ^ v24 | (v8 == 0)));
        }
      }
      v7 = v28 + v27;
      v4 -= v27;
    }
    while (v4);
  }
  return 0;
}

uint64_t BufferedSoundCheckAnalyzer::ProcessBuffer(BufferedSoundCheckAnalyzer *this, int a2, const AudioBufferList *__src, AudioStreamPacketDescription *a4)
{
  std::vector<char> *v8;
  uint64_t v9;
  uint64_t v10;
  std::vector<char>::size_type v11;
  int v12;
  UInt32 v13;
  OpaqueAudioConverter *v14;
  uint64_t v15;
  AudioBufferList v17;
  UInt32 ioOutputDataPacketSize;

  if (!*((_QWORD *)this + 14))
    return BlockBufferer::AddInput(*((BlockBufferer **)this + 22), (const unsigned __int8 *)__src->mBuffers[0].mData, *((_DWORD *)this + 10) * a2);
  v9 = *((_QWORD *)this + 15);
  v10 = *((_QWORD *)this + 16);
  v8 = (std::vector<char> *)((char *)this + 120);
  if (v9 == v10)
  {
    v11 = (*((_DWORD *)this + 10) << 15);
    if ((_DWORD)v11)
      std::vector<unsigned char>::__append(v8, v11);
  }
  *((_DWORD *)this + 36) = a2;
  memcpy(*((void **)this + 19), __src, *((unsigned int *)this + 40));
  *((_QWORD *)this + 21) = a4;
  while (1)
  {
    ioOutputDataPacketSize = 0x8000;
    v12 = *((_DWORD *)this + 10);
    v13 = *((_DWORD *)this + 11);
    v17.mNumberBuffers = 1;
    v14 = (OpaqueAudioConverter *)*((_QWORD *)this + 14);
    v17.mBuffers[0].mData = (void *)*((_QWORD *)this + 15);
    v17.mBuffers[0].mNumberChannels = v13;
    v17.mBuffers[0].mDataByteSize = v12 << 15;
    v15 = AudioConverterFillComplexBuffer(v14, (AudioConverterComplexInputDataProc)BufferedSoundCheckAnalyzer::ACInputProc, this, &ioOutputDataPacketSize, &v17, 0);
    if (ioOutputDataPacketSize)
    {
      if (BlockBufferer::AddInput(*((BlockBufferer **)this + 22), *((const unsigned __int8 **)this + 15), *((_DWORD *)this + 10) * ioOutputDataPacketSize))break;
    }
    if ((_DWORD)v15)
    {
      if ((_DWORD)v15 == 5)
        return 0;
      return v15;
    }
  }
  return v15;
}

uint64_t BlockBufferer::AddInput(BlockBufferer *this, const unsigned __int8 *__src, unsigned int a3)
{
  unsigned int v3;
  const unsigned __int8 *v4;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  uint64_t result;
  unsigned int v11;
  size_t v12;
  uint64_t v13;

  v3 = a3;
  v4 = __src;
  v6 = *((unsigned int *)this + 12);
  if ((_DWORD)v6)
  {
    v7 = *((_DWORD *)this + 4) - v6;
    if (v7 >= a3)
      v8 = a3;
    else
      v8 = v7;
    memcpy((void *)(*((_QWORD *)this + 3) + v6), __src, v8);
    v9 = *((_DWORD *)this + 12) + v8;
    *((_DWORD *)this + 12) = v9;
    if (v9 < *((_DWORD *)this + 4))
      return 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD))this)(*((_QWORD *)this + 1), *((_QWORD *)this + 3));
    if ((_DWORD)result)
      return result;
    v3 -= v8;
    v4 += v8;
  }
  v11 = *((_DWORD *)this + 4);
  v12 = v3 % v11;
  if (v11 <= v3)
  {
    v13 = v3 - v12;
    result = (*(uint64_t (**)(_QWORD, const unsigned __int8 *, uint64_t))this)(*((_QWORD *)this + 1), v4, v13);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    LODWORD(v13) = 0;
  }
  if ((_DWORD)v12)
    memcpy(*((void **)this + 3), &v4[v13], v12);
  result = 0;
  *((_DWORD *)this + 12) = v12;
  return result;
}

uint64_t BufferedSoundCheckAnalyzer::ACInputProc(BufferedSoundCheckAnalyzer *this, OpaqueAudioConverter *a2, unsigned int *__dst, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  int v6;
  uint64_t result;

  v6 = *((_DWORD *)a5 + 36);
  if (!v6)
    return 5;
  *(_DWORD *)a2 = v6;
  memcpy(__dst, a5[19], *((unsigned int *)a5 + 40));
  if (a4)
    *(_QWORD *)&a4->mNumberBuffers = a5[21];
  result = 0;
  *((_DWORD *)a5 + 36) = 0;
  return result;
}

void ID3TagBase::~ID3TagBase(ID3TagBase *this)
{
  *(_QWORD *)this = &off_1E2900F48;
  std::__list_imp<ID3FrameInfo>::clear((_QWORD *)this + 3);
}

{
  *(_QWORD *)this = &off_1E2900F48;
  std::__list_imp<ID3FrameInfo>::clear((_QWORD *)this + 3);
  JUMPOUT(0x193FFE460);
}

uint64_t ID3TagBase::Init(ID3TagBase *this)
{
  int v1;
  char v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;

  if (*((_BYTE *)this + 9) != 73 || *((_BYTE *)this + 10) != 68 || *((_BYTE *)this + 11) != 51)
    return 0;
  v1 = ((*((_BYTE *)this + 15) & 0x7F) << 21) | ((*((_BYTE *)this + 16) & 0x7F) << 14) | ((*((_BYTE *)this + 17) & 0x7F) << 7) | *((_BYTE *)this + 18) & 0x7F;
  v2 = *((_BYTE *)this + 14);
  if ((v2 & 0x10) != 0)
  {
    v3 = v1 + 20;
    *((_DWORD *)this + 15) = 10;
  }
  else
  {
    v3 = v1 + 10;
  }
  v4 = *((unsigned __int8 *)this + 12);
  *((_DWORD *)this + 16) = v4;
  if (v2 < 0)
  {
    *((_BYTE *)this + 68) = (v4 & 0xFE) == 2;
    *((_BYTE *)this + 69) = v4 == 4;
  }
  v5 = v4 >= 3 ? 10 : 6;
  *((_DWORD *)this + 13) = v3;
  *((_DWORD *)this + 14) = v5;
  if (v3 < v5 + 11)
    return 0;
  v6 = 1;
  *((_BYTE *)this + 8) = 1;
  return v6;
}

void ID3ParserHandle::~ID3ParserHandle(ID3ParserHandle *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2905810;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2905810;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  BaseOpaqueObject::~BaseOpaqueObject(this);
  JUMPOUT(0x193FFE460);
}

BOOL TOpaqueObject<ID3ParserHandle,OpaqueID3ParserID *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<ID3ParserHandle>::sRTTI || a2 == (void *)MEMORY[0x1E0DDEC88];
}

uint64_t ID3ParserHandle::ID3API_GetProperty(ID3ParserHandle *this, unsigned int a2, int *a3, int a4, unsigned int *a5, int *a6)
{
  uint64_t v6;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  ID3TagBase *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  char v26;
  unsigned int v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned __int16 v36;
  unsigned __int16 v37;
  unsigned __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const __CFString *v43;
  CFTypeRef v44;
  int v46;
  CFStringRef v47;
  uint64_t v48;
  int v49;
  int v50;
  CFTypeRef cf;
  int v52;
  unsigned __int8 *__src;
  unsigned int v54;

  v6 = 1936292415;
  if (!a5)
    return v6;
  v6 = 1886548031;
  if (a4 <= 1718185573)
  {
    if (a4 == 1717792372)
    {
      v6 = 1936292415;
      if (*a5 < 4)
        return v6;
      *a5 = 0;
      v40 = *((_QWORD *)this + 2);
      if (v40)
      {
        if (!*(_BYTE *)(v40 + 48))
        {
          do
          {
            v41 = ID3ParserHandle::CallReadProcForMoreFrames(this);
            if ((_DWORD)v41)
            {
              v6 = v41;
              if (a6)
                *a6 = 0;
              *a5 = 0;
              return v6;
            }
            v40 = *((_QWORD *)this + 2);
          }
          while (!*(_BYTE *)(v40 + 48));
          *a5 = 4;
        }
        if (a6)
        {
          v6 = 0;
          *a6 = *(_QWORD *)(v40 + 40);
          return v6;
        }
      }
      else
      {
        cf = 0;
        LODWORD(__src) = 0;
        if (a6)
        {
          v6 = (*((uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, unsigned __int8 **))this + 3))(*((_QWORD *)this + 4), 0, 125, 2, &cf, &__src);
          if ((_DWORD)v6)
            return v6;
          if (*(_BYTE *)cf || !*((_BYTE *)cf + 1))
            v42 = 6;
          else
            v42 = 7;
          *a6 = v42;
          (*((void (**)(_QWORD, uint64_t, uint64_t, uint64_t, CFTypeRef *, unsigned __int8 **))this + 3))(*((_QWORD *)this + 4), 1, 125, 2, &cf, &__src);
        }
      }
      return 0;
    }
    if (a4 != 1717854580)
      return v6;
    v6 = 1936746047;
    if (a2 < 4)
      return v6;
    if (!a3)
      return v6;
    v6 = 1936292415;
    if (*a5 < 8)
      return v6;
    v54 = 0;
    __src = 0;
    v13 = *((_QWORD *)this + 2);
    v14 = *a3;
    if (!v13)
    {
      if (v14 == 97)
      {
        cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        LOWORD(v52) = 257;
        CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("language"), CFSTR("eng"));
        CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("identifier"), &stru_1E2923288);
        v43 = ID3ParserHandle::CopyV1String(this, *a3);
        if (v43)
        {
          CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("text"), v43);
          CFRelease(v43);
          if (cf)
          {
            CFRetain(cf);
            v44 = cf;
          }
          else
          {
            v44 = 0;
          }
          v6 = 0;
          *(_QWORD *)a6 = v44;
        }
        else
        {
          v6 = 2003334207;
        }
        CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
      }
      else
      {
        v47 = ID3ParserHandle::CopyV1String(this, *a3);
        if (v47)
        {
          v6 = 0;
          *(_QWORD *)a6 = v47;
        }
        else
        {
          return 2003334207;
        }
      }
      return v6;
    }
    v15 = v13 + 24;
    v16 = v15;
    while (1)
    {
      v16 = *(_QWORD *)(v16 + 8);
      if (v16 == v15)
        break;
      if (*(_DWORD *)(v16 + 24) == v14)
      {
        v17 = *(unsigned int *)(v16 + 20);
        v6 = (*((uint64_t (**)(_QWORD, _QWORD))this + 3))(*((_QWORD *)this + 4), 0);
        if (!(_DWORD)v6)
        {
          cf = 0;
          ID3TagBase::CopyFrameData(*((ID3TagBase **)this + 2), (char *)__src, v54, *a3, &cf);
          if (cf)
          {
            v6 = 0;
            *(_QWORD *)a6 = cf;
            *a5 = 8;
          }
          else
          {
            v6 = 2003334207;
          }
          (*((void (**)(_QWORD, uint64_t, _QWORD, uint64_t, unsigned __int8 **, unsigned int *))this + 3))(*((_QWORD *)this + 4), 1, *a3, v17, &__src, &v54);
        }
        return v6;
      }
    }
    return 1852794431;
  }
  if (a4 != 1718185574)
  {
    if (a4 == 1953916274)
    {
      v6 = 1936292415;
      if (*a5 < 4)
        return v6;
      *a5 = 4;
      if (a6)
      {
        v39 = *((_QWORD *)this + 2);
        if (v39)
          v12 = *(_DWORD *)(v39 + 64);
        else
          v12 = 1;
        goto LABEL_232;
      }
    }
    else
    {
      if (a4 != 1953720698)
        return v6;
      v6 = 1936292415;
      if (*a5 < 4)
        return v6;
      *a5 = 4;
      if (a6)
      {
        v11 = *((_QWORD *)this + 2);
        if (v11)
          v12 = *(_DWORD *)(v11 + 52);
        else
          v12 = 128;
LABEL_232:
        v6 = 0;
        *a6 = v12;
        return v6;
      }
    }
    return 0;
  }
  v6 = 1936746047;
  if (a2 < 8)
    return v6;
  if (!a3)
    return v6;
  v6 = 1936292415;
  if (*a5 < 0xC)
    return v6;
  v18 = *((_QWORD *)this + 2);
  v19 = *a3;
  if (v18)
  {
    if (v19
      && a3[1]
      && !ID3TagBase::MultipleFramesAllowed((ID3TagBase *)*(unsigned int *)(v18 + 64), v19))
    {
      return 1768321599;
    }
    v6 = 1852794431;
    *a5 = 12;
    while (1)
    {
      v20 = *((_QWORD *)this + 2);
      v21 = (ID3TagBase *)*a3;
      v22 = a3[1];
      v23 = v20 + 24;
      v24 = *(_DWORD *)(v20 + 40);
      if (v24)
        v25 = v24 - 1 >= v22;
      else
        v25 = 0;
      v26 = !v25;
      if ((_DWORD)v21)
      {
        if ((v26 & 1) == 0)
        {
          v27 = *(_DWORD *)(v20 + 64);
          if (v21 >> 24)
            v28 = 0;
          else
            v28 = v27 >= 3;
          if (v28)
          {
            LODWORD(v21) = ID3TagBase::TranslateV2IDToV3(v21);
            goto LABEL_62;
          }
          if (v21 >> 24)
            v29 = v27 == 2;
          else
            v29 = 0;
          if (!v29)
            goto LABEL_62;
          if ((int)v21 > 1414219096)
          {
            if ((int)v21 <= 1414677322)
            {
              if ((int)v21 > 1414484568)
              {
                if ((int)v21 > 1414549330)
                {
                  if ((_DWORD)v21 == 1414549331)
                  {
                    LODWORD(v21) = 5525569;
                  }
                  else if ((_DWORD)v21 == 1414550850)
                  {
                    LODWORD(v21) = 5525570;
                  }
                }
                else
                {
                  switch((int)v21)
                  {
                    case 1414546737:
                      LODWORD(v21) = 5525553;
                      break;
                    case 1414546738:
                      LODWORD(v21) = 5525554;
                      break;
                    case 1414546739:
                      LODWORD(v21) = 5525555;
                      break;
                    case 1414546740:
                      LODWORD(v21) = 5525556;
                      break;
                    default:
                      if ((_DWORD)v21 == 1414484569)
                        LODWORD(v21) = 5525330;
                      break;
                  }
                }
              }
              else if ((int)v21 > 1414480203)
              {
                if ((int)v21 > 1414483032)
                {
                  if ((_DWORD)v21 == 1414483033)
                  {
                    LODWORD(v21) = 5525324;
                  }
                  else if ((_DWORD)v21 == 1414484037)
                  {
                    LODWORD(v21) = 5525313;
                  }
                }
                else if ((_DWORD)v21 == 1414480204)
                {
                  LODWORD(v21) = 5525332;
                }
                else if ((_DWORD)v21 == 1414481486)
                {
                  LODWORD(v21) = 5525318;
                }
              }
              else if ((int)v21 > 1414284621)
              {
                if ((_DWORD)v21 == 1414284622)
                {
                  LODWORD(v21) = 5524549;
                }
                else if ((_DWORD)v21 == 1414350148)
                {
                  LODWORD(v21) = 5524820;
                }
              }
              else if ((_DWORD)v21 == 1414219097)
              {
                LODWORD(v21) = 5524293;
              }
              else if ((_DWORD)v21 == 1414283598)
              {
                LODWORD(v21) = 5524545;
              }
              goto LABEL_62;
            }
            if ((int)v21 > 1431522387)
            {
              if ((int)v21 > 1464811857)
              {
                if ((int)v21 <= 1464882497)
                {
                  if ((_DWORD)v21 == 1464811858)
                  {
                    LODWORD(v21) = 5718354;
                  }
                  else if ((_DWORD)v21 == 1464811859)
                  {
                    LODWORD(v21) = 5718355;
                  }
                  goto LABEL_62;
                }
                if ((_DWORD)v21 == 1464882498)
                {
                  LODWORD(v21) = 5722178;
                  goto LABEL_62;
                }
                if ((_DWORD)v21 != 1465407576)
                  goto LABEL_62;
                v36 = 22616;
              }
              else
              {
                if ((int)v21 <= 1464029007)
                {
                  if ((_DWORD)v21 == 1431522388)
                  {
                    LODWORD(v21) = 5590100;
                  }
                  else if ((_DWORD)v21 == 1464029005)
                  {
                    LODWORD(v21) = 5718861;
                  }
                  goto LABEL_62;
                }
                if ((_DWORD)v21 == 1464029008)
                {
                  LODWORD(v21) = 5718864;
                  goto LABEL_62;
                }
                if ((_DWORD)v21 != 1464811846)
                  goto LABEL_62;
                v36 = 16710;
              }
              LODWORD(v21) = v36 | 0x570000;
              goto LABEL_62;
            }
            if ((int)v21 <= 1414746690)
            {
              switch((_DWORD)v21)
              {
                case 0x5452434B:
                  LODWORD(v21) = 5526091;
                  break;
                case 0x54524441:
                  LODWORD(v21) = 5526084;
                  break;
                case 0x5453495A:
                  LODWORD(v21) = 5526345;
                  break;
              }
              goto LABEL_62;
            }
            if ((int)v21 > 1415075927)
            {
              if ((_DWORD)v21 == 1415075928)
              {
                LODWORD(v21) = 5527640;
              }
              else if ((_DWORD)v21 == 1415136594)
              {
                LODWORD(v21) = 5527877;
              }
              goto LABEL_62;
            }
            if ((_DWORD)v21 == 1414746691)
            {
              v38 = 21059;
              goto LABEL_200;
            }
            if ((_DWORD)v21 != 1414746949)
              goto LABEL_62;
            v34 = 5526083;
            v35 = 272;
          }
          else
          {
            if ((int)v21 <= 1398361171)
            {
              if ((int)v21 <= 1279872586)
              {
                if ((int)v21 <= 1162958144)
                {
                  switch((_DWORD)v21)
                  {
                    case 0x41454E43:
                      LODWORD(v21) = 4411969;
                      break;
                    case 0x41504943:
                      LODWORD(v21) = 5261635;
                      break;
                    case 0x434F4D4D:
                      LODWORD(v21) = 4411213;
                      break;
                  }
                }
                else if ((int)v21 > 1195724609)
                {
                  if ((_DWORD)v21 == 1195724610)
                  {
                    LODWORD(v21) = 4670799;
                  }
                  else if ((_DWORD)v21 == 1229999187)
                  {
                    LODWORD(v21) = 4804684;
                  }
                }
                else if ((_DWORD)v21 == 1162958145)
                {
                  LODWORD(v21) = 4542805;
                }
                else if ((_DWORD)v21 == 1163150159)
                {
                  LODWORD(v21) = 4543555;
                }
              }
              else if ((int)v21 > 1347375180)
              {
                if ((int)v21 > 1381384515)
                {
                  if ((_DWORD)v21 == 1381384516)
                  {
                    v37 = 22081;
                  }
                  else
                  {
                    if ((_DWORD)v21 != 1381388866)
                      goto LABEL_62;
                    v37 = 17750;
                  }
                  LODWORD(v21) = v37 | 0x520000;
                }
                else if ((_DWORD)v21 == 1347375181)
                {
                  LODWORD(v21) = 5263184;
                }
                else if ((_DWORD)v21 == 1380078918)
                {
                  LODWORD(v21) = 4347206;
                }
              }
              else if ((int)v21 > 1296845907)
              {
                if ((_DWORD)v21 == 1296845908)
                {
                  LODWORD(v21) = 5065804;
                }
                else if ((_DWORD)v21 == 1346588244)
                {
                  LODWORD(v21) = 4410964;
                }
              }
              else if ((_DWORD)v21 == 1279872587)
              {
                LODWORD(v21) = 5000779;
              }
              else if ((_DWORD)v21 == 1296254025)
              {
                LODWORD(v21) = 5063497;
              }
LABEL_62:
              v30 = *(_QWORD *)(v20 + 32);
              if (v30 != v23)
              {
                v32 = 0;
                do
                {
                  if (*(_DWORD *)(v30 + 16) == (_DWORD)v21)
                  {
                    if (v32 == (_DWORD)v22)
                      goto LABEL_241;
                    ++v32;
                  }
                  v30 = *(_QWORD *)(v30 + 8);
                }
                while (v30 != v23);
              }
              goto LABEL_68;
            }
            if ((int)v21 > 1413762136)
            {
              if ((int)v21 > 1414090052)
              {
                if ((int)v21 > 1414091825)
                {
                  if ((_DWORD)v21 == 1414091826)
                  {
                    LODWORD(v21) = 5526578;
                  }
                  else if ((_DWORD)v21 == 1414091827)
                  {
                    LODWORD(v21) = 5526579;
                  }
                  goto LABEL_62;
                }
                if ((_DWORD)v21 != 1414090053)
                {
                  if ((_DWORD)v21 == 1414091825)
                    LODWORD(v21) = 5526577;
                  goto LABEL_62;
                }
                v34 = 5521740;
                v35 = 2049;
              }
              else
              {
                if ((int)v21 > 1413830739)
                {
                  if ((_DWORD)v21 == 1413830740)
                  {
                    LODWORD(v21) = 5527636;
                  }
                  else if ((_DWORD)v21 == 1413893204)
                  {
                    LODWORD(v21) = 5523028;
                  }
                  goto LABEL_62;
                }
                if ((_DWORD)v21 == 1413762137)
                {
                  LODWORD(v21) = 5522521;
                  goto LABEL_62;
                }
                if ((_DWORD)v21 != 1413828163)
                  goto LABEL_62;
                v34 = 5521740;
                v35 = 1026;
              }
            }
            else
            {
              if ((int)v21 <= 1413697356)
              {
                if ((int)v21 <= 1413565505)
                {
                  if ((_DWORD)v21 == 1398361172)
                  {
                    LODWORD(v21) = 5459028;
                  }
                  else if ((_DWORD)v21 == 1398363203)
                  {
                    LODWORD(v21) = 5461059;
                  }
                  goto LABEL_62;
                }
                if ((_DWORD)v21 != 1413565506)
                {
                  if ((_DWORD)v21 == 1413632077)
                    LODWORD(v21) = 5522000;
                  goto LABEL_62;
                }
                v38 = 16716;
LABEL_200:
                LODWORD(v21) = v38 | 0x540000;
                goto LABEL_62;
              }
              if ((int)v21 > 1413697359)
              {
                if ((_DWORD)v21 == 1413697360)
                {
                  LODWORD(v21) = 5522258;
                }
                else if ((_DWORD)v21 == 1413759316)
                {
                  LODWORD(v21) = 5522497;
                }
                goto LABEL_62;
              }
              if ((_DWORD)v21 == 1413697357)
              {
                v34 = 5521740;
                v35 = 513;
              }
              else
              {
                if ((_DWORD)v21 != 1413697358)
                  goto LABEL_62;
                v34 = 5521740;
                v35 = 515;
              }
            }
          }
          LODWORD(v21) = v34 | v35;
          goto LABEL_62;
        }
      }
      else if ((v26 & 1) == 0)
      {
        v30 = *(_QWORD *)(v20 + 32);
        if ((_DWORD)v22)
        {
          v31 = v22 + 1;
          do
          {
            v30 = *(_QWORD *)(v30 + 8);
            --v31;
          }
          while (v31 > 1);
        }
        if (v30 != v23)
        {
LABEL_241:
          cf = *(CFTypeRef *)(v30 + 16);
          v52 = *(_DWORD *)(v30 + 24);
          v6 = 0;
          if (a6)
          {
            *(_QWORD *)a6 = cf;
            v46 = v52;
            goto LABEL_260;
          }
          return v6;
        }
      }
LABEL_68:
      if (*(_BYTE *)(v20 + 48))
        return v6;
      v33 = ID3ParserHandle::CallReadProcForMoreFrames(this);
      if ((_DWORD)v33)
        return v33;
    }
  }
  if (!v19)
  {
    if (!a6)
      return 0;
    v48 = a3[1];
    if (v48 <= 6)
    {
      v6 = 0;
      v49 = dword_18F0F873C[v48];
      v50 = dword_18F0F8758[v48];
      v46 = dword_18F0F8774[v48];
      *a6 = v49;
      a6[1] = v50;
LABEL_260:
      a6[2] = v46;
      return v6;
    }
    return 1852794431;
  }
  if (a3[1])
    return 1852794431;
  if (!a6)
    return 0;
  return ID3ParserHandle::GetV1FrameInfoByID(*a3, (uint64_t)a6);
}

void sub_18EEDE1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ID3ParserHandle::CallReadProcForMoreFrames(ID3ParserHandle *this)
{
  uint64_t v1;
  uint64_t v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  _BOOL4 v17;
  uint64_t v18;
  unsigned int FrameDataSize;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  ID3TagBase *v28;
  unsigned __int8 *v29;
  size_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43[3];
  unsigned int v44;
  void *__dst;
  uint64_t v46;
  uint64_t v47;
  void *__src;
  unsigned int v49;

  v1 = 0;
  v49 = 0;
  v2 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v2 + 48))
    return v1;
  v5 = *(_DWORD *)(v2 + 40);
  if (v5)
  {
    v6 = *(_QWORD *)(v2 + 32);
    v7 = (v5 - 1);
    if ((_DWORD)v7)
    {
      v8 = v7 + 1;
      do
      {
        v6 = *(_QWORD *)(v6 + 8);
        --v8;
      }
      while (v8 > 1);
    }
    if (v6 == v2 + 24)
      v9 = 0;
    else
      v9 = v6 + 16;
    v10 = (*(_DWORD *)(v9 + 4) + *(_DWORD *)(v9 + 8));
    if (v10 >= *(_DWORD *)(v2 + 52))
    {
      v1 = 0;
      *(_BYTE *)(v2 + 48) = 1;
      return v1;
    }
  }
  else
  {
    v10 = 10;
  }
  v1 = 0;
  if ((int)v10 < 1)
    return v1;
  __src = 0;
  if (*(_BYTE *)(v2 + 68))
  {
    __dst = 0;
    v46 = 0;
    v47 = 0;
    v12 = v2 + 52;
    v11 = *(_DWORD *)(v2 + 52);
    v43[0] = *(_DWORD *)(v12 + 4);
    v13 = v11 - v10;
    if (v13 >= 2 * v43[0])
      v14 = 2 * v43[0];
    else
      v14 = v13;
    v1 = (*((uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void **, unsigned int *))this + 3))(*((_QWORD *)this + 4), 0, v10, v14, &__src, &v49);
    if (!(_DWORD)v1)
    {
      if (v49 >= v14)
        v15 = v14;
      else
        v15 = v49;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__dst, (char *)__src, (char *)__src + v15, v15);
    }
    (*((void (**)(_QWORD, uint64_t, uint64_t, uint64_t, void **, unsigned int *))this + 3))(*((_QWORD *)this + 4), 1, v10, v14, &__src, &v49);
    v16 = (unsigned __int8 *)__dst;
    if (!(_DWORD)v1)
    {
      v17 = ResynchroniseBytes((unsigned __int8 *)__dst, v46 - (_DWORD)__dst, *(_DWORD *)(*((_QWORD *)this + 2) + 56), v43);
      v18 = *((_QWORD *)this + 2);
      if (v17)
      {
        FrameDataSize = ID3TagBase::GetFrameDataSize(*((ID3TagBase **)this + 2), v16, *(_DWORD *)(v18 + 56), 0);
        v44 = FrameDataSize;
        v20 = v43[0] + 2 * FrameDataSize;
        v21 = *(_DWORD *)(v18 + 52) - v10;
        if (v21 >= v20)
          v22 = v20;
        else
          v22 = v21;
        v1 = (*((uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, void **, unsigned int *))this + 3))(*((_QWORD *)this + 4), 0, v10, v22, &__src, &v49);
        if (!(_DWORD)v1)
        {
          if (v49 >= v22)
            v23 = v22;
          else
            v23 = v49;
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__dst, (char *)__src, (char *)__src + v23, v23);
        }
        (*((void (**)(_QWORD, uint64_t, uint64_t, uint64_t, void **, unsigned int *))this + 3))(*((_QWORD *)this + 4), 1, v10, v22, &__src, &v49);
        v16 = (unsigned __int8 *)__dst;
        if (!(_DWORD)v1)
        {
          v24 = ResynchroniseBytes((unsigned __int8 *)__dst, v46 - (_DWORD)__dst, *(_DWORD *)(*((_QWORD *)this + 2) + 56) + FrameDataSize, &v44);
          v25 = *((_QWORD *)this + 2);
          if (v24)
          {
            v26 = v44;
            ID3TagBase::SetFrameDataSize(v25, v16, *(_DWORD *)(v25 + 56), v44 - *(_DWORD *)(v25 + 56));
            ID3ParserHandle::ParseDataForFrames(*((_QWORD *)this + 2), v16, v26, v10, 0);
            v1 = 0;
            if (!v16)
              return v1;
          }
          else
          {
            *(_BYTE *)(v25 + 48) = 1;
            if (!v16)
              return v1;
          }
          goto LABEL_47;
        }
      }
      else
      {
        v1 = 0;
        *(_BYTE *)(v18 + 48) = 1;
      }
    }
    if (!v16)
      return v1;
LABEL_47:
    operator delete(v16);
    return v1;
  }
  v27 = (*((uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, void **, unsigned int *))this + 3))(*((_QWORD *)this + 4), 0, v10, *(unsigned int *)(v2 + 56), &__src, &v49);
  if ((_DWORD)v27)
  {
    v1 = v27;
    (*((void (**)(_QWORD, uint64_t, uint64_t, _QWORD, void **, unsigned int *))this + 3))(*((_QWORD *)this + 4), 1, v10, *(unsigned int *)(*((_QWORD *)this + 2) + 56), &__src, &v49);
  }
  else
  {
    v44 = 0;
    v28 = (ID3TagBase *)*((_QWORD *)this + 2);
    v29 = (unsigned __int8 *)__src;
    v30 = v49;
    v31 = ID3TagBase::GetFrameDataSize(v28, (unsigned __int8 *)__src, v49, &v44);
    if (*((_DWORD *)v28 + 16) == 4
      && v31 >= 0x80
      && v44 > v31
      && (v33 = *((_DWORD *)v28 + 13),
          v32 = *((_DWORD *)v28 + 14),
          v34 = v31 + v10 + v32,
          v34 < v33)
      && v44 + v10 + v32 <= v33)
    {
      v44 += v32;
      __dst = 0;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes(&__dst, v30, 1);
      v35 = (unsigned __int8 *)__dst;
      if (__dst)
      {
        memcpy(__dst, __src, v30);
        (*((void (**)(_QWORD, uint64_t, uint64_t, _QWORD, void **, unsigned int *))this + 3))(*((_QWORD *)this + 4), 1, v10, *(unsigned int *)(*((_QWORD *)this + 2) + 56), &__src, &v49);
        *(_QWORD *)v43 = 0;
        v42 = 0;
        v1 = (*((uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, unsigned int *, unsigned int *))this + 3))(*((_QWORD *)this + 4), 0, v34, *(unsigned int *)(*((_QWORD *)this + 2) + 56), v43, &v42);
        if (!(_DWORD)v1)
        {
          v36 = *((_QWORD *)this + 2);
          if (*(_QWORD *)v43 && v42 >= 4)
          {
            v37 = bswap32(**(_DWORD **)v43);
            if (*(_DWORD *)(v36 + 64) == 2)
              LODWORD(v1) = v37 >> 8;
            else
              LODWORD(v1) = v37;
          }
          (*((void (**)(_QWORD, uint64_t, uint64_t, _QWORD, unsigned int *, unsigned int *))this + 3))(*((_QWORD *)this + 4), 1, v34, *(unsigned int *)(v36 + 56), v43, &v42);
          v38 = *((_QWORD *)this + 2);
          if (ID3TagBase::IsValidFrameID((ID3TagBase *)*(unsigned int *)(v38 + 64), v1))
          {
            ID3ParserHandle::ParseDataForFrames(v38, v35, v30, v10, 0);
            v1 = 0;
          }
          else
          {
            *(_QWORD *)v43 = 0;
            v42 = 0;
            v1 = (*((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, unsigned int *, unsigned int *))this + 3))(*((_QWORD *)this + 4), 0, v44 + v10, *(unsigned int *)(v38 + 56), v43, &v42);
            if (!(_DWORD)v1)
            {
              v39 = *((_QWORD *)this + 2);
              if (*(_QWORD *)v43 && v42 >= 4)
              {
                v40 = bswap32(**(_DWORD **)v43);
                if (*(_DWORD *)(v39 + 64) == 2)
                  LODWORD(v1) = v40 >> 8;
                else
                  LODWORD(v1) = v40;
              }
              (*((void (**)(_QWORD, uint64_t, uint64_t, _QWORD, unsigned int *, unsigned int *))this + 3))(*((_QWORD *)this + 4), 1, v34, *(unsigned int *)(v39 + 56), v43, &v42);
              v41 = *((_QWORD *)this + 2);
              if (ID3TagBase::IsValidFrameID((ID3TagBase *)*(unsigned int *)(v41 + 64), v1))
              {
                ID3ParserHandle::ParseDataForFrames(v41, v35, v30, v10, 1);
                v1 = 0;
              }
              else
              {
                v1 = 2003334207;
              }
            }
          }
        }
        free(v35);
      }
      else
      {
        return 2003334207;
      }
    }
    else
    {
      ID3ParserHandle::ParseDataForFrames((uint64_t)v28, v29, v30, v10, 0);
      (*((void (**)(_QWORD, uint64_t, uint64_t, _QWORD, void **, unsigned int *))this + 3))(*((_QWORD *)this + 4), 1, v10, *(unsigned int *)(*((_QWORD *)this + 2) + 56), &__src, &v49);
      return 0;
    }
  }
  return v1;
}

void sub_18EEDE774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  void *v12;

  free(v12);
  _Unwind_Resume(a1);
}

uint64_t ID3TagBase::MultipleFramesAllowed(ID3TagBase *this, int a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t result;
  int v6;

  v2 = (int)this;
  if ((_DWORD)this == 2)
    v3 = 5527640;
  else
    v3 = 1415075928;
  v4 = 5724248;
  if ((_DWORD)this != 2)
    v4 = 1465407576;
  result = 1;
  if (v3 != a2 && v4 != a2)
  {
    if (v2 == 2)
    {
      result = 0;
      if ((a2 & 0xFFFF0000) == 0x540000 || (a2 & 0xFFFF0000) == 0x570000)
        return result;
LABEL_14:
      result = 0;
      if (a2 <= 1163150158)
      {
        if (a2 <= 5063496)
        {
          if (a2 <= 4542804)
          {
            if (a2 == 4347206)
              return result;
            v6 = 4410964;
          }
          else
          {
            if (a2 == 4542805 || a2 == 4543555)
              return result;
            v6 = 4804684;
          }
        }
        else if (a2 > 5396032)
        {
          if (a2 == 5396033 || a2 == 5461059)
            return result;
          v6 = 1162958145;
        }
        else
        {
          if (a2 == 5063497 || a2 == 5065804)
            return result;
          v6 = 5391702;
        }
      }
      else if (a2 > 1347375954)
      {
        if (a2 > 1381388865)
        {
          if (a2 == 1381388866 || a2 == 1398363203)
            return result;
          v6 = 1431520594;
        }
        else
        {
          if (a2 == 1347375955 || a2 == 1380078918)
            return result;
          v6 = 1381384516;
        }
      }
      else if (a2 > 1296845907)
      {
        if (a2 == 1296845908 || a2 == 1331121733)
          return result;
        v6 = 1346588244;
      }
      else
      {
        if (a2 == 1163150159 || a2 == 1229999187)
          return result;
        v6 = 1296254025;
      }
      if (a2 != v6)
        return 1;
      return result;
    }
    result = 0;
    if ((a2 & 0xFF000000) != 0x54000000 && (a2 & 0xFF000000) != 0x57000000)
      goto LABEL_14;
  }
  return result;
}

uint64_t ID3ParserHandle::GetV1FrameInfoByID(int a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  int v6;
  int v7;

  v3 = 0x1E54495432;
  v4 = 3;
  result = 1852794431;
  if (a1 > 1129270604)
  {
    if (a1 > 1414091825)
    {
      if (a1 <= 1414677322)
      {
        if (a1 == 1414091826)
        {
LABEL_29:
          result = 0;
          *(_QWORD *)a2 = v3;
          *(_DWORD *)(a2 + 8) = v4;
          return result;
        }
        if (a1 != 1414546737)
          return result;
LABEL_11:
        v3 = 0x1E54504531;
        v4 = 33;
        goto LABEL_29;
      }
      if (a1 == 1414677323)
        goto LABEL_28;
      v7 = 1415136594;
LABEL_24:
      if (a1 != v7)
        return result;
      v3 = 0x454594552;
      v4 = 93;
      goto LABEL_29;
    }
    if (a1 != 1129270605)
    {
      if (a1 != 1413565506)
      {
        v6 = 1413697358;
        goto LABEL_18;
      }
LABEL_27:
      v3 = 0x1E54414C42;
      v4 = 63;
      goto LABEL_29;
    }
LABEL_26:
    v3 = 0x1E434F4D4DLL;
    v4 = 97;
    goto LABEL_29;
  }
  if (a1 <= 5525552)
  {
    if (a1 != 4411213)
    {
      if (a1 != 5521740)
      {
        v6 = 5522255;
LABEL_18:
        if (a1 != v6)
          return result;
        v3 = 0x154434F4ELL;
        v4 = 127;
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (a1 > 5526577)
  {
    if (a1 == 5526578)
      goto LABEL_29;
    v7 = 5527877;
    goto LABEL_24;
  }
  if (a1 == 5525553)
    goto LABEL_11;
  if (a1 == 5526091)
  {
LABEL_28:
    v3 = 0x25452434BLL;
    v4 = 125;
    goto LABEL_29;
  }
  return result;
}

uint64_t ID3TagBase::CopyFrameData(ID3TagBase *this, char *__src, unsigned int a3, int a4, const void **a5)
{
  unsigned int v7;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t result;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  char *v21;
  int v22;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  _BOOL4 v29;
  int32x4_t v30;
  int32x4_t v31;
  int v32;
  char v33;
  int v34;
  const void *TextFrameString;
  int v36;
  uint64_t v37;
  const UInt8 *v38;
  size_t v39;
  int v40;
  int v41;
  void *__p;
  void *__dst;
  uint64_t v44;

  if (a5)
  {
    *a5 = 0;
    v7 = *((_DWORD *)this + 14);
    if (v7 < a3)
    {
      v8 = __src;
      v9 = (char *)this + 24;
      do
      {
        v9 = (char *)*((_QWORD *)v9 + 1);
        if (v9 == (char *)this + 24)
          return 0xFFFFFFFFLL;
      }
      while (*((_DWORD *)v9 + 6) != a4);
      v10 = *((unsigned int *)v9 + 5);
      if (v10 > a3)
        return 0xFFFFFFFFLL;
      v12 = *((_DWORD *)v9 + 4);
      __p = 0;
      __dst = 0;
      v44 = 0;
      v13 = *((_DWORD *)this + 16);
      if (v13 == 4)
      {
        v15 = __src[9];
        if ((v15 & 0xC) == 0 && (v15 & 3) != 1)
        {
          v14 = (v15 >> 1) & 1;
          goto LABEL_13;
        }
      }
      else if (v13 != 3 || __src[9] < 0x40u)
      {
        v14 = 0;
LABEL_13:
        if (!*((_BYTE *)this + 68) && ((*((_BYTE *)this + 69) == 0) & ~v14) != 0)
        {
          result = 0;
          goto LABEL_35;
        }
        if (v13 == 4)
        {
          if ((__src[9] & 1) != 0)
          {
            std::vector<unsigned char>::reserve((unint64_t *)&__p, v10 - 4);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&__p, (char *)__p, v8, &v8[*((unsigned int *)this + 14)], *((unsigned int *)this + 14));
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&__p, (char *)__dst, &v8[*((unsigned int *)this + 14) + 4], &v8[*((unsigned int *)v9 + 5)], *((unsigned int *)v9 + 5) - (*((unsigned int *)this + 14) + 4));
LABEL_23:
            result = (uint64_t)__p;
            v16 = (_DWORD)__dst - (_DWORD)__p - v7;
            if ((_DWORD)__dst - (_DWORD)__p != v7)
            {
              v17 = (char *)__p + v7;
              v18 = &v17[v16];
              v19 = (unsigned __int8 *)v17;
              v20 = (unsigned __int8 *)v17;
              v21 = v17;
              do
              {
                v22 = *v20++;
                *v21++ = v22;
                if (v22 == 255 && v20 < (unsigned __int8 *)v18)
                {
                  v20 = v19 + 2;
                  v24 = v19[1];
                  if (v24)
                  {
                    v21 = v17 + 2;
                    v17[1] = v24;
                  }
                  else
                  {
                    LODWORD(v16) = v16 - 1;
                  }
                }
                v17 = v21;
                v19 = v20;
              }
              while (v20 < (unsigned __int8 *)v18);
              result = (uint64_t)__p;
            }
            LODWORD(v10) = v16 + v7;
            v13 = *((_DWORD *)this + 16);
            v8 = (char *)result;
LABEL_35:
            if (v13 == 2)
            {
              v26 = v12 & 0xFFFF0000;
              if ((v12 & 0xFFFF0000) == 0x540000)
              {
                v25 = 5527640;
LABEL_40:
                if (v25 != v12)
                {
                  TextFrameString = ID3TagBase::CreateTextFrameString(this, (unsigned __int8 *)v8, v10);
                  goto LABEL_75;
                }
                if (v13 == 2)
                  v27 = 5724248;
                else
                  v27 = 1465407576;
                v28 = v27 == v12;
                v29 = v27 == v12;
                if (!v28 && v13 == 2)
                {
                  v26 = v12 & 0xFFFF0000;
                  goto LABEL_71;
                }
LABEL_52:
                v30 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v13 == 2)), 0x1FuLL)), (int8x16_t)xmmword_18F116F00, (int8x16_t)xmmword_18F116EF0);
                v31 = vdupq_n_s32(v12);
                if (v13 == 2)
                  v32 = 5590100;
                else
                  v32 = 1431522388;
                v33 = vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(v30, v31)));
                if (v13 == 2)
                  v34 = 4670799;
                else
                  v34 = 1195724610;
                if ((v33 & 1) != 0 || v32 == v12 || v34 == v12 || v12 == 1347570006)
                {
                  if (v13 == 2)
                    v36 = 4411213;
                  else
                    v36 = 1129270605;
                  if (v36 == v12 || v32 == v12)
                  {
                    TextFrameString = ID3TagBase::CreateExtendedTextDictionary(this, (unsigned __int8 *)v8, v10);
                  }
                  else if (v12 == 1347570006)
                  {
                    TextFrameString = ID3TagBase::CreatePRIVFrameDictionary(this, (unsigned __int8 *)v8, v10);
                  }
                  else
                  {
                    if (v13 == 2)
                      v40 = 5261635;
                    else
                      v40 = 1095780675;
                    if (v40 == v12)
                    {
                      TextFrameString = ID3TagBase::CreatePictureFrameDictionary(this, (unsigned __int8 *)v8, v10);
                    }
                    else if (v29)
                    {
                      TextFrameString = ID3TagBase::CreateWXXXFrameDictionary(this, (unsigned __int8 *)v8, v10);
                    }
                    else
                    {
                      if (v13 == 2)
                        v41 = 5527640;
                      else
                        v41 = 1415075928;
                      if (v41 == v12)
                      {
                        TextFrameString = ID3TagBase::CreateTXXXFrameDictionary(this, (unsigned __int8 *)v8, v10);
                      }
                      else
                      {
                        if (v34 != v12)
                        {
LABEL_76:
                          if (result)
                          {
                            operator delete((void *)result);
                            return 0;
                          }
                          return result;
                        }
                        TextFrameString = ID3TagBase::CreateGEOBFrameDictionary(this, (unsigned __int8 *)v8, v10);
                      }
                    }
                  }
                }
                else
                {
                  TextFrameString = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&v8[*((unsigned int *)this + 14)], (v10 - *((_DWORD *)this + 14)));
                }
LABEL_75:
                *a5 = TextFrameString;
                result = (uint64_t)__p;
                goto LABEL_76;
              }
              if (v12 != 5724248)
              {
LABEL_71:
                if (v26 == 5701632)
                  goto LABEL_72;
LABEL_49:
                v29 = 0;
                goto LABEL_52;
              }
            }
            else
            {
              if ((v12 & 0xFF000000) == 0x54000000)
              {
                v25 = 1415075928;
                goto LABEL_40;
              }
              if (v12 != 1465407576)
              {
                if ((v12 & 0xFF000000) == 0x57000000)
                {
LABEL_72:
                  v37 = *((unsigned int *)this + 14);
                  v38 = (const UInt8 *)&v8[v37];
                  v39 = strnlen(&v8[v37], (v10 - v37));
                  TextFrameString = CFURLCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v38, v39, 0x201u, 0);
                  goto LABEL_75;
                }
                goto LABEL_49;
              }
            }
            v29 = 1;
            goto LABEL_52;
          }
        }
        else
        {
          v7 = 0;
        }
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, __src, &__src[v10], v10);
        goto LABEL_23;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_18EEDF054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef ID3ParserHandle::CopyV1String(ID3ParserHandle *this, int a2)
{
  CFStringRef v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v16;
  UInt8 *bytes;

  v3 = 0;
  bytes = 0;
  v16 = 0;
  if (a2 <= 92)
  {
    switch(a2)
    {
      case 3:
        if ((*((unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((_QWORD *)this + 4), 0, 3, 30, &bytes, &v16))
        {
          return 0;
        }
        if (!*bytes)
          goto LABEL_52;
        v11 = 0;
        v12 = 0;
        do
        {
          if (bytes[v11] == 32)
          {
            ++v12;
          }
          else
          {
            if (!bytes[v11])
              break;
            v12 = 0;
          }
          ++v11;
        }
        while (v11 != 30);
        if ((_DWORD)v11 != v12)
          v3 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, (v11 - v12), 0x201u, 0);
        else
LABEL_52:
          v3 = 0;
        (*((void (**)(_QWORD, uint64_t, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((_QWORD *)this + 4), 1, 3, 30, &bytes, &v16);
        break;
      case 33:
        if ((*((unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((_QWORD *)this + 4), 0, 33, 30, &bytes, &v16))
        {
          return 0;
        }
        if (!*bytes)
          goto LABEL_62;
        v13 = 0;
        v14 = 0;
        do
        {
          if (bytes[v13] == 32)
          {
            ++v14;
          }
          else
          {
            if (!bytes[v13])
              break;
            v14 = 0;
          }
          ++v13;
        }
        while (v13 != 30);
        if ((_DWORD)v13 != v14)
          v3 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, (v13 - v14), 0x201u, 0);
        else
LABEL_62:
          v3 = 0;
        (*((void (**)(_QWORD, uint64_t, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((_QWORD *)this + 4), 1, 33, 30, &bytes, &v16);
        break;
      case 63:
        if ((*((unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((_QWORD *)this + 4), 0, 63, 30, &bytes, &v16))
        {
          return 0;
        }
        if (!*bytes)
          goto LABEL_27;
        v6 = 0;
        v7 = 0;
        do
        {
          if (bytes[v6] == 32)
          {
            ++v7;
          }
          else
          {
            if (!bytes[v6])
              break;
            v7 = 0;
          }
          ++v6;
        }
        while (v6 != 30);
        if ((_DWORD)v6 != v7)
          v3 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, (v6 - v7), 0x201u, 0);
        else
LABEL_27:
          v3 = 0;
        (*((void (**)(_QWORD, uint64_t, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((_QWORD *)this + 4), 1, 63, 30, &bytes, &v16);
        break;
      default:
        return v3;
    }
  }
  else
  {
    if (a2 > 124)
    {
      if (a2 == 125)
      {
        if (!(*((unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((_QWORD *)this + 4), 0, 125, 2, &bytes, &v16))
        {
          if (*bytes || !bytes[1])
            v3 = 0;
          else
            v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), bytes[1]);
          (*((void (**)(_QWORD, uint64_t, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((_QWORD *)this + 4), 1, 125, 2, &bytes, &v16);
          return v3;
        }
      }
      else
      {
        if (a2 != 127)
          return v3;
        if (!(*((unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((_QWORD *)this + 4), 0, 127, 1, &bytes, &v16))
        {
          v8 = *bytes;
          if (v8 > 0x93)
            v3 = 0;
          else
            v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kGenreTable[v8], 0x201u);
          (*((void (**)(_QWORD, uint64_t, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((_QWORD *)this + 4), 1, 127, 1, &bytes, &v16);
          return v3;
        }
      }
      return 0;
    }
    if (a2 != 93)
    {
      if (a2 != 97)
        return v3;
      if (!(*((unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((_QWORD *)this + 4), 0, 97, 30, &bytes, &v16))
      {
        if (!*bytes)
          goto LABEL_14;
        v4 = 0;
        v5 = 0;
        do
        {
          if (bytes[v4] == 32)
          {
            ++v5;
          }
          else
          {
            if (!bytes[v4])
              break;
            v5 = 0;
          }
          ++v4;
        }
        while (v4 != 30);
        if ((_DWORD)v4 != v5)
          v3 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, (v4 - v5), 0x201u, 0);
        else
LABEL_14:
          v3 = 0;
        (*((void (**)(_QWORD, uint64_t, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((_QWORD *)this + 4), 1, 97, 30, &bytes, &v16);
        return v3;
      }
      return 0;
    }
    if ((*((unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((_QWORD *)this + 4), 0, 93, 4, &bytes, &v16))
    {
      return 0;
    }
    if (!*bytes)
      goto LABEL_42;
    v9 = 0;
    v10 = 0;
    do
    {
      if (bytes[v9] == 32)
      {
        ++v10;
      }
      else
      {
        if (!bytes[v9])
          break;
        v10 = 0;
      }
      ++v9;
    }
    while (v9 != 4);
    if ((_DWORD)v9 != v10)
      v3 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, (v9 - v10), 0x201u, 0);
    else
LABEL_42:
      v3 = 0;
    (*((void (**)(_QWORD, uint64_t, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((_QWORD *)this + 4), 1, 93, 4, &bytes, &v16);
  }
  return v3;
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;

  if (a5 < 1)
    return;
  v10 = *(_BYTE **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = (char *)operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    memcpy(&v13[(_QWORD)v16], __src, a5);
    if (v11 == __dst)
    {
      v27 = &v13[(_QWORD)v16];
    }
    else
    {
      do
      {
        v13[(_QWORD)v16 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(_BYTE **)(a1 + 8);
      v27 = v16;
    }
    v28 = &v26[a5];
    v29 = &v16[v15];
    if (v10 != __dst)
      memmove(v28, __dst, v10 - __dst);
    v30 = *(char **)a1;
    *(_QWORD *)a1 = v27;
    *(_QWORD *)(a1 + 8) = &v28[v10 - __dst];
    *(_QWORD *)(a1 + 16) = v29;
    if (v30)
      operator delete(v30);
    return;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(_BYTE **)(a1 + 8);
LABEL_17:
    v21 = &__dst[a5];
    v22 = &v20[-a5];
    v23 = v20;
    if (&v20[-a5] < v10)
    {
      v24 = (char *)(&v10[a5] - v20);
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&__dst[a5], __dst, v20 - v21);
    if (v18 != __src)
      memmove(__dst, __src, v18 - __src);
    return;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
}

CFStringRef ID3TagBase::CreateTextFrameString(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int EncodingFromFrame;
  unsigned __int8 *v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  CFStringEncoding v21;
  int v22;
  Boolean v23;

  if (!*((_BYTE *)this + 8))
    return 0;
  v5 = (*((_DWORD *)this + 14) + 1);
  v6 = (unsigned __int8 *)(a3 - v5);
  if (a3 < v5)
    return 0;
  EncodingFromFrame = ID3TagBase::GetEncodingFromFrame(this, a2, a3);
  v9 = &a2[v5];
  v10 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v9, v6, EncodingFromFrame);
  if (v10)
    v11 = a2 == 0;
  else
    v11 = 1;
  if (v11 || a3 < 4)
  {
    if (!a2)
      return 0;
LABEL_26:
    if ((EncodingFromFrame - 1) > 2u)
      v21 = 513;
    else
      v21 = dword_18F0F8730[(EncodingFromFrame - 1)];
    if (v10 >= 2 && (EncodingFromFrame - 1) <= 1)
    {
      v22 = *v9;
      if (v22 == 254)
      {
        if (v9[1] == 255)
        {
LABEL_34:
          v23 = 1;
          return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &a2[v5], v10, v21, v23);
        }
      }
      else if (v22 == 255 && v9[1] == 254)
      {
        goto LABEL_34;
      }
    }
    v23 = 0;
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &a2[v5], v10, v21, v23);
  }
  v14 = bswap32(*(_DWORD *)a2);
  if (*((_DWORD *)this + 16) == 2)
  {
    v14 >>= 8;
    v15 = 5522255;
  }
  else
  {
    v15 = 1413697358;
  }
  if (v15 != v14 || *v9 != 40)
    goto LABEL_26;
  if (v10 < 2)
    return 0;
  v16 = 0;
  v17 = &a2[v5 + 1];
  v18 = 1;
  do
  {
    v20 = *v17++;
    v19 = v20;
    if (v20 == 40)
    {
      ++v18;
    }
    else
    {
      if ((v19 - 48) > 9)
        break;
      ++v16;
    }
    --v10;
  }
  while (v10 > 1);
  if (!v16)
    return 0;
  return CreateCFStringFromV1GenreFrame(&a2[v5], v18, v16);
}

const __CFString *ID3TagBase::CreateExtendedTextDictionary(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  int v4;
  unsigned int v5;
  int EncodingFromFrame;
  unsigned int v8;
  int v9;
  int v10;
  const __CFString *v11;
  int v13;
  uint64_t v14;
  const __CFAllocator *v15;
  const __CFString *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  CFIndex v19;
  CFStringEncoding v20;
  int v21;
  Boolean v22;
  const __CFString *v23;
  unsigned __int8 *v24;
  CFIndex v25;
  CFStringEncoding v26;
  int v27;
  Boolean v28;
  CFTypeRef cf;
  __int16 v30;

  if (*((_BYTE *)this + 8))
  {
    v4 = *((_DWORD *)this + 14);
    v5 = v4 + 4;
    if (a3 >= v4 + 4)
    {
      EncodingFromFrame = ID3TagBase::GetEncodingFromFrame(this, a2, a3);
      v8 = EncodingFromFrame - 1;
      v9 = (EncodingFromFrame - 1) >= 2 ? 1 : 2;
      v10 = v9 + v5;
      if (v9 + v5 <= a3)
      {
        v13 = EncodingFromFrame;
        v14 = (v4 + 1);
        cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v30 = 257;
        v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v16 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &a2[v14], 3, 0x201u, 0);
        if (!v16)
          goto LABEL_38;
        CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("language"), v16);
        CFRelease(v16);
        v17 = (unsigned __int8 *)(a3 - v5);
        if (a3 <= v5)
          goto LABEL_38;
        v18 = &a2[v5];
        v19 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v18, v17, v13);
        if (v8 > 2u)
          v20 = 513;
        else
          v20 = dword_18F0F8730[v8];
        if (v19 >= 2 && v8 <= 1)
        {
          v21 = *v18;
          if (v21 == 254)
          {
            if (v18[1] == 255)
            {
LABEL_19:
              v22 = 1;
LABEL_22:
              v23 = CFStringCreateWithBytes(v15, v18, v19, v20, v22);
              if (!v23)
                goto LABEL_38;
              CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("identifier"), v23);
              CFRelease(v23);
              if (a3 <= v10 + (int)v19)
                goto LABEL_38;
              v24 = &a2[(v10 + v19)];
              v25 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v24, (unsigned __int8 *)(a3 - (v10 + (_DWORD)v19)), v13);
              if (v8 > 2u)
                v26 = 513;
              else
                v26 = dword_18F0F8730[v8];
              if (v25 >= 2 && v8 <= 1)
              {
                v27 = *v24;
                if (v27 == 254)
                {
                  if (v24[1] == 255)
                  {
LABEL_32:
                    v28 = 1;
LABEL_35:
                    v11 = CFStringCreateWithBytes(v15, v24, v25, v26, v28);
                    if (!v11)
                    {
LABEL_39:
                      CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
                      return v11;
                    }
                    CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("text"), v11);
                    CFRelease(v11);
                    if (cf)
                    {
                      CFRetain(cf);
                      v11 = (const __CFString *)cf;
                      goto LABEL_39;
                    }
LABEL_38:
                    v11 = 0;
                    goto LABEL_39;
                  }
                }
                else if (v27 == 255 && v24[1] == 254)
                {
                  goto LABEL_32;
                }
              }
              v28 = 0;
              goto LABEL_35;
            }
          }
          else if (v21 == 255 && v18[1] == 254)
          {
            goto LABEL_19;
          }
        }
        v22 = 0;
        goto LABEL_22;
      }
    }
  }
  return 0;
}

void sub_18EEDFC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

CFTypeRef ID3TagBase::CreatePRIVFrameDictionary(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  CFTypeRef v4;
  uint64_t v7;
  int EncodingFromFrame;
  unsigned int v10;
  const __CFAllocator *v11;
  unsigned int v12;
  unsigned int v13;
  CFStringEncoding v14;
  const __CFString *v15;
  int v16;
  unsigned int v17;
  const __CFData *v18;
  CFTypeRef cf;
  __int16 v20;

  if (!*((_BYTE *)this + 8))
    return 0;
  v4 = 0;
  if (a2 && a3 >= 4)
  {
    if (*((_DWORD *)this + 16) == 2 || *(_DWORD *)a2 != 1447645776)
      return 0;
    v7 = *((unsigned int *)this + 14);
    if ((int)v7 + 1 > a3)
      return 0;
    EncodingFromFrame = ID3TagBase::GetEncodingFromFrame(this, a2, a3);
    cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v20 = 257;
    v10 = ID3TagBase::StringSizeInBytes((ID3TagBase *)&a2[v7], (unsigned __int8 *)(a3 - v7), EncodingFromFrame);
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = v10;
    v13 = EncodingFromFrame - 1;
    if (v13 > 2u)
      v14 = 513;
    else
      v14 = dword_18F0F8730[v13];
    v15 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &a2[v7], v10, v14, 0);
    if (v15)
    {
      if (v13 >= 2)
        v16 = 1;
      else
        v16 = 2;
      v17 = v16 + v7 + v12;
      if (a3 > v17 && (v18 = CFDataCreate(v11, &a2[v17], a3 - v17)) != 0)
      {
        CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("identifier"), v15);
        CFRelease(v15);
        CACFDictionary::AddData((CACFDictionary *)&cf, CFSTR("data"), v18);
        CFRelease(v18);
        if (cf)
        {
          CFRetain(cf);
          v4 = cf;
LABEL_25:
          CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
          return v4;
        }
      }
      else
      {
        CFRelease(v15);
      }
    }
    v4 = 0;
    goto LABEL_25;
  }
  return v4;
}

void sub_18EEDFE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

CFTypeRef ID3TagBase::CreatePictureFrameDictionary(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  CFTypeRef v4;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int EncodingFromFrame;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  const __CFAllocator *v18;
  const __CFString *v19;
  uint64_t v20;
  int v21;
  const UInt8 *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  const __CFString *v27;
  unsigned int v28;
  unsigned __int8 *v29;
  CFIndex v30;
  CFStringEncoding v31;
  int v32;
  Boolean v33;
  const __CFString *v34;
  int v35;
  unsigned int v36;
  const __CFData *v37;
  CFTypeRef cf;
  __int16 v39;

  if (!*((_BYTE *)this + 8))
    return 0;
  v4 = 0;
  if (a2 && a3 >= 4)
  {
    v7 = bswap32(*(_DWORD *)a2);
    v8 = *((_DWORD *)this + 16);
    if (v8 == 2)
    {
      v7 >>= 8;
      v9 = 5261635;
    }
    else
    {
      v9 = 1095780675;
    }
    if (v9 != v7)
      return 0;
    v10 = *((_DWORD *)this + 14);
    v11 = v8 == 2 ? v10 + 5 : v10 + 3;
    if (v11 > a3)
      return 0;
    EncodingFromFrame = ID3TagBase::GetEncodingFromFrame(this, a2, a3);
    v14 = v10 + 1;
    cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v39 = 257;
    v15 = *((_DWORD *)this + 14);
    v16 = EncodingFromFrame - 1;
    if (*((_DWORD *)this + 16) == 2)
    {
      if (v16 >= 2)
        v17 = 6;
      else
        v17 = 7;
      if (v17 + v15 > a3)
        goto LABEL_62;
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v19 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &a2[v14], 3, 0x201u, 0);
      LODWORD(v20) = 0;
    }
    else
    {
      if (v16 >= 2)
        v21 = 4;
      else
        v21 = 5;
      if (v21 + v15 > a3)
        goto LABEL_62;
      v22 = &a2[v14];
      v23 = a3 - v14;
      if (a3 == v14)
      {
        LODWORD(v20) = 0;
      }
      else
      {
        v24 = 0;
        if (v23 <= 1)
          v20 = 1;
        else
          v20 = v23;
        while (v22[v24])
        {
          if (v20 == ++v24)
            goto LABEL_33;
        }
        LODWORD(v20) = v24;
      }
LABEL_33:
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v19 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v22, v20, 0x201u, 0);
    }
    if (!v19)
      goto LABEL_62;
    CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("MIME"), v19);
    CFRelease(v19);
    v25 = *((_DWORD *)this + 16) == 2 ? v10 + 4 : v10 + v20 + 2;
    if (v25 >= a3)
      goto LABEL_62;
    v26 = a2[v25];
    if (v26 > 0x14)
      v26 = 0;
    v27 = CFStringCreateWithCString(v18, kPictureTypeTable[v26], 0x201u);
    if (!v27)
      goto LABEL_62;
    CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("picturetype"), v27);
    CFRelease(v27);
    v28 = v25 + 1;
    if (a3 <= v28)
      goto LABEL_62;
    v29 = &a2[v28];
    v30 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v29, (unsigned __int8 *)(a3 - v28), EncodingFromFrame);
    if (v16 > 2u)
      v31 = 513;
    else
      v31 = dword_18F0F8730[v16];
    if (v30 >= 2 && v16 <= 1)
    {
      v32 = *v29;
      if (v32 == 254)
      {
        if (v29[1] == 255)
        {
LABEL_51:
          v33 = 1;
LABEL_54:
          v34 = CFStringCreateWithBytes(v18, &a2[v28], v30, v31, v33);
          if (v34)
          {
            CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("identifier"), v34);
            CFRelease(v34);
            v35 = v16 >= 2 ? 1 : 2;
            v36 = v28 + v35 + v30;
            if (a3 > v36)
            {
              v37 = CFDataCreate(v18, &a2[v36], a3 - v36);
              if (v37)
              {
                CACFDictionary::AddData((CACFDictionary *)&cf, CFSTR("data"), v37);
                CFRelease(v37);
                if (cf)
                {
                  CFRetain(cf);
                  v4 = cf;
LABEL_63:
                  CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
                  return v4;
                }
              }
            }
          }
LABEL_62:
          v4 = 0;
          goto LABEL_63;
        }
      }
      else if (v32 == 255 && v29[1] == 254)
      {
        goto LABEL_51;
      }
    }
    v33 = 0;
    goto LABEL_54;
  }
  return v4;
}

void sub_18EEE01A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

CFTypeRef ID3TagBase::CreateWXXXFrameDictionary(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  CFTypeRef v4;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned __int8 *v9;
  int EncodingFromFrame;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v15;
  unsigned __int8 *v16;
  unsigned int v17;
  const __CFAllocator *v18;
  unsigned int v19;
  CFStringEncoding v20;
  int v21;
  Boolean v22;
  const __CFString *v23;
  const char *v24;
  size_t v25;
  const __CFURL *v26;
  CFTypeRef cf;
  __int16 v28;

  if (!*((_BYTE *)this + 8))
    return 0;
  v4 = 0;
  if (a2 && a3 >= 4)
  {
    v6 = bswap32(*(_DWORD *)a2);
    if (*((_DWORD *)this + 16) == 2)
    {
      v6 >>= 8;
      v7 = 5724248;
    }
    else
    {
      v7 = 1465407576;
    }
    if (v7 != v6)
      return 0;
    v8 = *((_DWORD *)this + 14) + 1;
    v9 = (unsigned __int8 *)(a3 - v8);
    if (a3 < v8)
      return 0;
    EncodingFromFrame = ID3TagBase::GetEncodingFromFrame(this, a2, a3);
    v11 = EncodingFromFrame - 1;
    v12 = (EncodingFromFrame - 1) >= 2 ? 1 : 2;
    v13 = v12 + v8;
    if (v12 + v8 > a3)
      return 0;
    v15 = EncodingFromFrame;
    cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v28 = 257;
    v16 = &a2[v8];
    v17 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v16, v9, v15);
    v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v19 = v17;
    if (v11 > 2u)
      v20 = 513;
    else
      v20 = dword_18F0F8730[v11];
    if (v17 >= 2 && v11 <= 1)
    {
      v21 = *v16;
      if (v21 == 254)
      {
        if (v16[1] == 255)
        {
LABEL_23:
          v22 = 1;
          goto LABEL_26;
        }
      }
      else if (v21 == 255 && v16[1] == 254)
      {
        goto LABEL_23;
      }
    }
    v22 = 0;
LABEL_26:
    v23 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v16, v17, v20, v22);
    if (v23
      && (CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("identifier"), v23), CFRelease(v23), a3 > v13 + v19)
      && (v24 = (const char *)&a2[v13 + v19],
          v25 = strnlen(v24, a3 - (v13 + v19)),
          (v26 = CFURLCreateWithBytes(v18, (const UInt8 *)v24, v25, 0x201u, 0)) != 0)
      && (CACFDictionary::AddURL((CACFDictionary *)&cf, CFSTR("text"), v26), CFRelease(v26), cf))
    {
      CFRetain(cf);
      v4 = cf;
    }
    else
    {
      v4 = 0;
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
  }
  return v4;
}

void sub_18EEE03F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

const __CFString *ID3TagBase::CreateTXXXFrameDictionary(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  const __CFString *v4;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int EncodingFromFrame;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  const __CFAllocator *v17;
  unsigned int v18;
  CFStringEncoding v19;
  int v20;
  Boolean v21;
  const __CFString *v22;
  unsigned __int8 *v23;
  CFIndex v24;
  CFStringEncoding v25;
  int v26;
  Boolean v27;
  CFTypeRef cf;
  __int16 v29;

  if (!*((_BYTE *)this + 8))
    return 0;
  v4 = 0;
  if (a2 && a3 >= 4)
  {
    v6 = bswap32(*(_DWORD *)a2);
    if (*((_DWORD *)this + 16) == 2)
    {
      v6 >>= 8;
      v7 = 5527640;
    }
    else
    {
      v7 = 1415075928;
    }
    if (v7 != v6)
      return 0;
    v8 = *((_DWORD *)this + 14) + 1;
    if (a3 < v8)
      return 0;
    EncodingFromFrame = ID3TagBase::GetEncodingFromFrame(this, a2, a3);
    v10 = EncodingFromFrame - 1;
    v11 = (EncodingFromFrame - 1) >= 2 ? 1 : 2;
    v12 = v11 + v8;
    if (v11 + v8 > a3)
      return 0;
    v14 = EncodingFromFrame;
    cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v29 = 257;
    v15 = &a2[v8];
    v16 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v15, (unsigned __int8 *)(a3 - v8), v14);
    v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v18 = v16;
    if (v10 > 2u)
      v19 = 513;
    else
      v19 = dword_18F0F8730[v10];
    if (v16 >= 2 && v10 <= 1)
    {
      v20 = *v15;
      if (v20 == 254)
      {
        if (v15[1] == 255)
        {
LABEL_23:
          v21 = 1;
LABEL_26:
          v22 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v15, v16, v19, v21);
          if (!v22)
            goto LABEL_42;
          CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("identifier"), v22);
          CFRelease(v22);
          if (a3 <= v12 + v18)
            goto LABEL_42;
          v23 = &a2[v12 + v18];
          v24 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v23, (unsigned __int8 *)(a3 - (v12 + v18)), v14);
          if (v10 > 2u)
            v25 = 513;
          else
            v25 = dword_18F0F8730[v10];
          if (v24 >= 2 && v10 <= 1)
          {
            v26 = *v23;
            if (v26 == 254)
            {
              if (v23[1] == 255)
              {
LABEL_36:
                v27 = 1;
LABEL_39:
                v4 = CFStringCreateWithBytes(v17, v23, v24, v25, v27);
                if (!v4)
                {
LABEL_43:
                  CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
                  return v4;
                }
                CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("text"), v4);
                CFRelease(v4);
                if (cf)
                {
                  CFRetain(cf);
                  v4 = (const __CFString *)cf;
                  goto LABEL_43;
                }
LABEL_42:
                v4 = 0;
                goto LABEL_43;
              }
            }
            else if (v26 == 255 && v23[1] == 254)
            {
              goto LABEL_36;
            }
          }
          v27 = 0;
          goto LABEL_39;
        }
      }
      else if (v20 == 255 && v15[1] == 254)
      {
        goto LABEL_23;
      }
    }
    v21 = 0;
    goto LABEL_26;
  }
  return v4;
}

void sub_18EEE06AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

CFTypeRef ID3TagBase::CreateGEOBFrameDictionary(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  CFTypeRef v4;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int EncodingFromFrame;
  int v11;
  unsigned int v12;
  int v13;
  int v15;
  const UInt8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  const __CFAllocator *v20;
  const __CFString *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  CFIndex v24;
  CFStringEncoding v25;
  int v26;
  Boolean v27;
  const __CFString *v28;
  unsigned int v29;
  unsigned __int8 *v30;
  CFIndex v31;
  CFStringEncoding v32;
  int v33;
  Boolean v34;
  const __CFString *v35;
  unsigned int v36;
  const __CFData *v37;
  CFTypeRef cf;
  __int16 v39;

  if (!*((_BYTE *)this + 8))
    return 0;
  v4 = 0;
  if (a2 && a3 >= 4)
  {
    v6 = bswap32(*(_DWORD *)a2);
    if (*((_DWORD *)this + 16) == 2)
    {
      v6 >>= 8;
      v7 = 4670799;
    }
    else
    {
      v7 = 1195724610;
    }
    if (v7 != v6)
      return 0;
    v8 = *((_DWORD *)this + 14);
    v9 = v8 + 1;
    if (a3 < v8 + 1)
      return 0;
    EncodingFromFrame = ID3TagBase::GetEncodingFromFrame(this, a2, a3);
    v11 = v8 + 2;
    v12 = EncodingFromFrame - 1;
    v13 = (EncodingFromFrame - 1) >= 2 ? 1 : 2;
    if (v11 + 2 * v13 > a3)
      return 0;
    v15 = EncodingFromFrame;
    cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v39 = 257;
    v16 = &a2[v9];
    v17 = a3 - v9;
    if (a3 == v9)
    {
      LODWORD(v18) = 0;
    }
    else
    {
      v19 = 0;
      if (v17 <= 1)
        v18 = 1;
      else
        v18 = v17;
      while (v16[v19])
      {
        if (v18 == ++v19)
          goto LABEL_24;
      }
      LODWORD(v18) = v19;
    }
LABEL_24:
    v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v21 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v16, v18, 0x201u, 0);
    if (!v21)
      goto LABEL_55;
    CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("MIME"), v21);
    CFRelease(v21);
    v22 = v11 + v18;
    if (a3 <= v22)
      goto LABEL_55;
    v23 = &a2[v22];
    v24 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v23, (unsigned __int8 *)(a3 - v22), v15);
    if (v12 > 2u)
      v25 = 513;
    else
      v25 = dword_18F0F8730[v12];
    if (v24 >= 2 && v12 <= 1)
    {
      v26 = *v23;
      if (v26 == 254)
      {
        if (v23[1] == 255)
        {
LABEL_34:
          v27 = 1;
LABEL_37:
          v28 = CFStringCreateWithBytes(v20, &a2[v22], v24, v25, v27);
          if (!v28)
            goto LABEL_55;
          CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("filename"), v28);
          CFRelease(v28);
          v29 = v22 + v13 + v24;
          if (a3 <= v29)
            goto LABEL_55;
          v30 = &a2[v29];
          v31 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v30, (unsigned __int8 *)(a3 - v29), v15);
          if (v12 > 2u)
            v32 = 513;
          else
            v32 = dword_18F0F8730[v12];
          if (v31 >= 2 && v12 <= 1)
          {
            v33 = *v30;
            if (v33 == 254)
            {
              if (v30[1] == 255)
              {
LABEL_47:
                v34 = 1;
LABEL_50:
                v35 = CFStringCreateWithBytes(v20, &a2[v29], v31, v32, v34);
                if (v35)
                {
                  CACFDictionary::AddString((CACFDictionary *)&cf, CFSTR("identifier"), v35);
                  CFRelease(v35);
                  v36 = v29 + v13 + v31;
                  if (a3 > v36)
                  {
                    v37 = CFDataCreate(v20, &a2[v36], a3 - v36);
                    if (v37)
                    {
                      CACFDictionary::AddData((CACFDictionary *)&cf, CFSTR("data"), v37);
                      CFRelease(v37);
                      if (cf)
                      {
                        CFRetain(cf);
                        v4 = cf;
LABEL_56:
                        CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
                        return v4;
                      }
                    }
                  }
                }
LABEL_55:
                v4 = 0;
                goto LABEL_56;
              }
            }
            else if (v33 == 255 && v30[1] == 254)
            {
              goto LABEL_47;
            }
          }
          v34 = 0;
          goto LABEL_50;
        }
      }
      else if (v26 == 255 && v23[1] == 254)
      {
        goto LABEL_34;
      }
    }
    v27 = 0;
    goto LABEL_37;
  }
  return v4;
}

void sub_18EEE0A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ID3TagBase::GetEncodingFromFrame(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (a2 && a3 > 3)
  {
    v3 = bswap32(*(_DWORD *)a2);
    v4 = *((_DWORD *)this + 16);
    if (v4 == 2)
      v3 = v3 >> 8;
  }
  else
  {
    v3 = 0;
    v4 = *((_DWORD *)this + 16);
  }
  if (v4 == 2)
  {
    if (v3 == 5724248 || (v3 & 0xFFFF0000) == 0x540000)
      goto LABEL_39;
    if ((v3 & 0xFFFF0000) == 0x570000)
      return 0;
  }
  else
  {
    if (v3 == 1465407576 || (v3 & 0xFF000000) == 0x54000000)
      goto LABEL_39;
    if ((v3 & 0xFF000000) == 0x57000000)
      return 0;
  }
  v5 = 0;
  if (v3 > 1129270604)
  {
    if (v3 > 1331121732)
    {
      if (v3 > 1415075927)
      {
        if (v3 == 1431522388)
          goto LABEL_39;
        v6 = 1415075928;
      }
      else
      {
        if (v3 == 1331121733)
          goto LABEL_39;
        v6 = 1398361172;
      }
    }
    else if (v3 > 1195724609)
    {
      if (v3 == 1195724610)
        goto LABEL_39;
      v6 = 1229999187;
    }
    else
    {
      if (v3 == 1129270605)
        goto LABEL_39;
      v6 = 1129270610;
    }
  }
  else if (v3 > 5459027)
  {
    if (v3 > 5590099)
    {
      if (v3 == 5590100)
        goto LABEL_39;
      v6 = 1095780675;
    }
    else
    {
      if (v3 == 5459028)
        goto LABEL_39;
      v6 = 5527640;
    }
  }
  else if (v3 > 4804683)
  {
    if (v3 == 4804684)
      goto LABEL_39;
    v6 = 5261635;
  }
  else
  {
    if (v3 == 4411213)
      goto LABEL_39;
    v6 = 4670799;
  }
  if (v3 == v6)
  {
LABEL_39:
    v7 = *((unsigned int *)this + 14);
    if ((int)v7 + 1 <= a3)
      return a2[v7];
    return 0;
  }
  return v5;
}

uint64_t ID3TagBase::StringSizeInBytes(ID3TagBase *this, unsigned __int8 *a2, int a3)
{
  int v3;
  unsigned int v5;
  uint64_t result;
  int v7;

  if ((a3 - 1) >= 2)
    v3 = 1;
  else
    v3 = 2;
  if ((_DWORD)a2)
  {
    v5 = 0;
    result = 0;
    while (1)
    {
      if ((a3 - 1) >= 2)
      {
        if (!*((_BYTE *)this + v5))
          return result;
        v7 = 1;
      }
      else
      {
        if (v5 + 1 >= a2 || !*((_BYTE *)this + v5) && !*((_BYTE *)this + v5 + 1))
          return result;
        v7 = 2;
      }
      result = (result + v7);
      v5 += v3;
      if (v5 >= a2)
        return result;
    }
  }
  return 0;
}

CFStringRef CreateCFStringFromV1GenreFrame(unsigned __int8 *a1, int a2, unsigned __int8 a3)
{
  unsigned __int8 *v3;
  size_t v4;
  const __CFAllocator *v5;
  const __CFString *v6;
  const __CFString *v7;
  unsigned int IntValue;
  CFStringRef v9;
  unsigned __int8 pStr;
  _BYTE v12[255];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  pStr = a3;
  v3 = &a1[a2];
  v4 = a3;
  bzero(&v12[v4], v4 ^ 0xFF);
  memcpy(v12, v3, v4);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = CFStringCreateWithPascalString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &pStr, 0x201u);
  if (!v6)
    return 0;
  v7 = v6;
  IntValue = CFStringGetIntValue(v6);
  if (IntValue > 0x93)
    v9 = 0;
  else
    v9 = CFStringCreateWithCString(v5, kGenreTable[IntValue], 0x201u);
  CFRelease(v7);
  return v9;
}

uint64_t ID3TagBase::TranslateV2IDToV3(ID3TagBase *this)
{
  int v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  if ((int)this <= 5525312)
  {
    if ((int)this <= 5459027)
    {
      if ((int)this <= 4804683)
      {
        v1 = 4411968;
        if ((_DWORD)this == 4670799)
          v13 = 1195724610;
        else
          v13 = (int)this;
        if ((_DWORD)this == 4543555)
          v14 = 1163150159;
        else
          v14 = v13;
        if ((_DWORD)this == 4542805)
          v15 = 1162958145;
        else
          v15 = (int)this;
        if ((_DWORD)this == 4411969)
          v16 = 1095061059;
        else
          v16 = v15;
        if ((int)this <= 4543554)
          v3 = v16;
        else
          v3 = v14;
        v4 = 4347206;
        v5 = 1380078918;
        if ((_DWORD)this == 4411213)
          v17 = 1129270605;
        else
          v17 = (int)this;
        if ((_DWORD)this == 4410964)
          v7 = 1346588244;
        else
          v7 = v17;
        goto LABEL_126;
      }
      if ((int)this > 5261634)
      {
        v1 = 5391701;
        if ((_DWORD)this == 5396033)
          v23 = 1381384516;
        else
          v23 = (int)this;
        if ((_DWORD)this == 5391702)
          v3 = 1381388866;
        else
          v3 = v23;
        v4 = 5261635;
        v5 = 1095780675;
        v6 = (_DWORD)this == 5263184;
        v7 = 1347375181;
      }
      else
      {
        v1 = 5063496;
        if ((_DWORD)this == 5065804)
          v10 = 1296845908;
        else
          v10 = (int)this;
        if ((_DWORD)this == 5063497)
          v3 = 1296254025;
        else
          v3 = v10;
        v4 = 4804684;
        v5 = 1229999187;
        v6 = (_DWORD)this == 5000779;
        v7 = 1279872587;
      }
    }
    else
    {
      if ((int)this <= 5522520)
      {
        if ((int)this <= 5522252)
        {
          v1 = 5521739;
          if ((_DWORD)this == 5522000)
            v2 = 1413632077;
          else
            v2 = (int)this;
          if ((_DWORD)this == 5521740)
            v3 = 1413565506;
          else
            v3 = v2;
          v4 = 5459028;
          v5 = 1398361172;
          v6 = (_DWORD)this == 5461059;
          v7 = 1398363203;
          goto LABEL_124;
        }
        v1 = 5522257;
        if ((_DWORD)this == 5522497)
          v22 = 1413759316;
        else
          v22 = (int)this;
        if ((_DWORD)this == 5522258)
          v3 = 1413697360;
        else
          v3 = v22;
        v4 = 5522253;
        v5 = 1413697357;
        if ((_DWORD)this == 5522255)
          v7 = 1413697358;
        else
          v7 = (int)this;
LABEL_126:
        if ((_DWORD)this == v4)
          v26 = v5;
        else
          v26 = v7;
        if ((int)this <= v1)
          return v26;
        else
          return v3;
      }
      if ((int)this > 5524292)
      {
        v1 = 5524548;
        if ((_DWORD)this == 5524820)
          v25 = 1414350148;
        else
          v25 = (int)this;
        if ((_DWORD)this == 5524549)
          v3 = 1414284622;
        else
          v3 = v25;
        v4 = 5524293;
        v5 = 1414219097;
        v6 = (_DWORD)this == 5524545;
        v7 = 1414283598;
      }
      else
      {
        v1 = 5523027;
        if ((_DWORD)this == 5523789)
          v12 = 1414090053;
        else
          v12 = (int)this;
        if ((_DWORD)this == 5523028)
          v3 = 1413893204;
        else
          v3 = v12;
        v4 = 5522521;
        v5 = 1413762137;
        v6 = (_DWORD)this == 5522766;
        v7 = 1413828163;
      }
    }
LABEL_124:
    if (!v6)
      v7 = (int)this;
    goto LABEL_126;
  }
  if ((int)this > 5526354)
  {
    if ((int)this > 5590099)
    {
      if ((int)this > 5718860)
      {
        v1 = 5722177;
        if ((_DWORD)this == 5724248)
          v24 = 1465407576;
        else
          v24 = (int)this;
        if ((_DWORD)this == 5722178)
          v3 = 1464882498;
        else
          v3 = v24;
        v4 = 5718861;
        v5 = 1464029005;
        v6 = (_DWORD)this == 5718864;
        v7 = 1464029008;
      }
      else
      {
        v1 = 5718353;
        if ((_DWORD)this == 5718355)
          v11 = 1464811859;
        else
          v11 = (int)this;
        if ((_DWORD)this == 5718354)
          v3 = 1464811858;
        else
          v3 = v11;
        v4 = 5590100;
        v5 = 1431522388;
        v6 = (_DWORD)this == 5718342;
        v7 = 1464811846;
      }
      goto LABEL_124;
    }
    if ((int)this > 5526578)
    {
      v1 = 5527639;
      if ((_DWORD)this == 5527877)
        v18 = 1415136594;
      else
        v18 = (int)this;
      if ((_DWORD)this == 5527640)
        v3 = 1415075928;
      else
        v3 = v18;
      v4 = 5526579;
      v5 = 1414091827;
      v6 = (_DWORD)this == 5527636;
      v7 = 1413830740;
      goto LABEL_124;
    }
    if ((_DWORD)this == 5526578)
      v27 = 1414091826;
    else
      v27 = this;
    if ((_DWORD)this == 5526577)
      v27 = 1414091825;
    if ((_DWORD)this == 5526355)
      return 1414746949;
    else
      return v27;
  }
  else
  {
    if ((int)this > 5525568)
    {
      v1 = 5526083;
      if ((_DWORD)this == 5526345)
        v19 = 1414744410;
      else
        v19 = (int)this;
      if ((_DWORD)this == 5526091)
        v20 = 1414677323;
      else
        v20 = v19;
      if ((_DWORD)this == 5526084)
        v3 = 1414677569;
      else
        v3 = v20;
      v4 = 5525569;
      v5 = 1414549331;
      v21 = 1414746691;
      if ((_DWORD)this != 5526083)
        v21 = (int)this;
      if ((_DWORD)this == 5525570)
        v7 = 1414550850;
      else
        v7 = v21;
      goto LABEL_126;
    }
    if ((int)this > 5525329)
    {
      switch((int)this)
      {
        case 5525553:
          result = 1414546737;
          break;
        case 5525554:
          result = 1414546738;
          break;
        case 5525555:
          result = 1414546739;
          break;
        case 5525556:
          result = 1414546740;
          break;
        default:
          if ((_DWORD)this == 5525332)
            v28 = 1414480204;
          else
            v28 = this;
          if ((_DWORD)this == 5525330)
            result = 1414484569;
          else
            result = v28;
          break;
      }
    }
    else
    {
      if ((_DWORD)this == 5525324)
        v8 = 1414483033;
      else
        v8 = this;
      if ((_DWORD)this == 5525318)
        v8 = 1414481486;
      if ((_DWORD)this == 5525313)
        return 1414484037;
      else
        return v8;
    }
  }
  return result;
}

BOOL ResynchroniseBytes(unsigned __int8 *a1, int a2, unsigned int a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v11;

  v4 = 0;
  v5 = 0;
  if (a3 && a2)
  {
    v5 = 0;
    v4 = 0;
    v6 = a1;
    v7 = &a1[a2];
    while (1)
    {
      v8 = v6 + 1;
      v9 = *v6;
      *a1 = v9;
      if (v9 != 255 || v8 >= v7)
        goto LABEL_11;
      v8 = v6 + 2;
      v11 = v6[1];
      if (v11)
        break;
      v5 += 2;
      v6 = v8;
      ++a1;
      ++v4;
LABEL_13:
      if (v4 >= a3 || v6 >= v7)
        goto LABEL_15;
    }
    if (v4 + 1 < a3)
    {
      a1[1] = v11;
      a1 += 2;
      v5 += 2;
      v4 += 2;
      v6 = v8;
      goto LABEL_13;
    }
LABEL_11:
    v6 = v8;
    ++a1;
    ++v4;
    ++v5;
    goto LABEL_13;
  }
LABEL_15:
  if (a4)
    *a4 = v5;
  return v4 == a3;
}

uint64_t ID3TagBase::GetFrameDataSize(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v13;

  if (!a2)
    return 0;
  v4 = *((_DWORD *)this + 16);
  if (v4 < 3)
  {
    if (a3 < 6)
      return 0;
    v13 = *(_DWORD *)(a2 + 2) & 0xFFFFFF00;
LABEL_27:
    result = bswap32(v13);
    v6 = result;
    if (!a4)
      return result;
LABEL_28:
    *a4 = v6;
    return result;
  }
  if (v4 != 4)
  {
    if (a3 < 8)
      return 0;
    v13 = *((_DWORD *)a2 + 1);
    goto LABEL_27;
  }
  if (a3 < 9)
    return 0;
  v5 = *((_DWORD *)a2 + 1);
  v6 = bswap32(v5);
  v7 = v5 & 0x800000;
  if ((v5 & 0x80000000) == 0)
    v8 = (v5 << 6) & 0x3FC000 | (*((_DWORD *)a2 + 1) << 21) | (v5 >> 9) & 0x7F80 | HIBYTE(v5);
  else
    v8 = v6;
  if (v6 >= 0x80 && (*((_DWORD *)a2 + 1) & 0x80) == 0 && (*((_DWORD *)a2 + 1) & 0x8000) == 0 && v7 == 0)
    result = v8;
  else
    result = v6;
  if (a4)
    goto LABEL_28;
  return result;
}

uint64_t ID3TagBase::SetFrameDataSize(uint64_t this, unsigned __int8 *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 v7;

  if (a2)
  {
    v4 = *(_DWORD *)(this + 64);
    if (v4 < 3)
    {
      if (a3 >= 6 && !HIBYTE(a4))
      {
        v7 = a2[2];
        *(_DWORD *)(a2 + 2) = bswap32(a4);
        a2[2] = v7;
      }
    }
    else
    {
      if (v4 == 4)
      {
        if (a4 >> 28)
          return this;
        v5 = bswap32(a4);
        v6 = v5 & 0x7F | (((v5 >> 14) & 0x7F) << 16) & 0x80FF80FF | (((v5 >> 21) & 0x7F) << 24) | (((v5 >> 7) & 0x7F) << 8);
      }
      else
      {
        if (a3 < 8)
          return this;
        v6 = bswap32(a4);
      }
      *((_DWORD *)a2 + 1) = v6;
    }
  }
  return this;
}

uint64_t ID3ParserHandle::ParseDataForFrames(uint64_t this, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5)
{
  unsigned int v5;

  if (!*(_BYTE *)(this + 48))
  {
    v5 = 0;
    if (*(_DWORD *)(this + 56) <= a3)
      return ID3TagBase::ProvideFrameData((ID3TagBase *)this, a2, a3, a4, &v5, a5);
  }
  return this;
}

BOOL ID3TagBase::IsValidFrameID(ID3TagBase *this, int a2)
{
  char *v2;
  int v3;
  int v4;
  _BOOL8 result;
  const char *v7;
  int v8;
  int v9;
  char *v11;
  int v12;
  int v13;

  if ((_DWORD)this == 4)
  {
    v7 = "CNEACNEA ARCCIPACIPA CIPIPSA        MMOCMMOC MOCRMOCRMOC    RCNERCNE MRC2UQEAUQE UQEOCTEOCTE CTEBOEGBOEG OEGDIR"
         "GDIRG    KNILKNIL KNLIDCMIDCM ICMTLLMTLLM LLMENWOENWO    TSCPTSCP SCPTNCPTNCP TNCMPOPMPOP POPSSOPSSOP    VIRPVI"
         "RP    FUBRFUBR FUB2AVRDAVR AVRBRVRBRVR VERKEES        NGIS        TLYSTLYS TLSCTYSCTYS CTSBLATBLAT LATMPBTMPBT "
         "PBTTACTTACT TCTPMCTPMCT PCTMOCTMOCT MCTNOCTNOCT OCTPOCTPOCT RCT    TADT ADTNEDT        SEDTSEDT SDTYLDTYLDT YDT"
         "RODT        CRDTREYT EYTLRDT        GTDT        CNETCNET NETTXETTXET TXTDEFTDEFT DFTTLFTTLFT TFTDIGTDIGT DIT   "
         " EMIT MITLPITSLPI LPI1TIT1TIT 1TT2TIT2TIT 2TT3TIT3TIT 3TTYEKTYEKT EKTDWKTDWKT WKTNALTNALT ALTNELTNELT ELTLCMT  "
         "      DEMTDEMT TMTOOMT        LAOTLAOT TOTNFOTNFOT FOTYLOTYLOT LOTEPOTEPOT AOTLRDTYROT ROTNWOTNWOT    1EPT1EPT "
         "1PT2EPT2EPT 2PT3EPT3EPT 3PT4EPT4EPT 4PTSOPTSOPT APTORPT        BUPTBUPT BPTKCRTKCRT KRT    ADRT DRTNSRTNSRT    "
         "OSRTOSRT        ZIST IST2OST2OST 2STAOST        COSTCOST CSTPOST        TOST        CRSTCRST CRTESSTESST SSTTSS"
         "T        XXXTXXXT XXTDIFUDIFU IFURESURESU    TLSUTLSU TLUMOCWMOCW MCWPOCWPOCW PCWFAOWFAOW FAWRAOWRAOW RAWSAOWSA"
         "OW SAWSROWSROW    YAPWYAPW    BUPWBUPW BPWXXXWXXXW XXW";
    do
    {
      v9 = *(_DWORD *)v7;
      v7 += 12;
      v8 = v9;
      result = v9 != 0;
    }
    while (v9 != a2 && v8 != 0);
  }
  else if ((_DWORD)this == 3)
  {
    v2 = "CNEA ARCCIPACIPA CIPIPSA        MMOCMMOC MOCRMOCRMOC    RCNERCNE MRC2UQEAUQE UQEOCTEOCTE CTEBOEGBOEG OEGDIRGDIRG    KNILKNIL KNLIDCMIDCM ICMTLLMTLLM LLMENWOENWO    TSCPTSCP SCPTNCPTNCP TNCMPOPMPOP POPSSOPSSOP    VIRPVIRP    FUBRFUBR FUB2AVRDAVR AVRBRVRBRVR VERKEES        NGIS        TLYSTLYS TLSCTYSCTYS CTSBLATBLAT LATMPBTMPBT PBTTACTTACT TCTPMCTPMCT PCTMOCTMOCT MCTNOCTNOCT OCTPOCTPOCT RCT    TADT ADTNEDT        SEDTSEDT SDTYLDTYLDT YDTRODT        CRDTREYT EYTLRDT        GTDT        CNETCNET NETTXETTXET TXTDEFTDEFT DFTTLFTTLFT TFTDIGTDIGT DIT    EMIT MITLPITSLPI LPI1TIT1TIT 1TT2TIT2TIT 2TT3TIT3TIT 3TTYEKTYEKT EKTDWKTDWKT WKTNALTNALT ALTNELTNELT ELTLCMT        DEMTDEMT TMTOOMT        LAOTLAOT TOTNFOTNFOT FOTYLOTYLOT LOTEPOTEPOT AOTLRDTYROT ROTNWOTNWOT    1EPT1EPT 1PT2EPT2EPT 2PT3EPT3EPT 3PT4EPT4EPT 4PTSOPTSOPT APTORPT        BUPTBUPT BPTKCRTKCRT KRT    ADRT DRTNSRTNSRT    OSRTOSRT        ZIST IST2OST2OST 2STAOST        COSTCOST CSTPOST        TOST        CRSTCRST CRTESSTESST SSTTSST        XXXTXXXT XXTDIFUDIFU IFURESURESU    TLSUTLSU TLUMOCWMOCW MCWPOCWPOCW PCWFAOWFAOW FAWRAOWRAOW RAWSAOWSAOW SAWSROWSROW    YAPWYAPW    BUPWBUPW BPWXXXWXXXW XXW";
    do
    {
      v4 = *(_DWORD *)v2;
      v2 += 12;
      v3 = v4;
      result = v4 != 0;
    }
    while (v4 != a2 && v3 != 0);
  }
  else
  {
    v11 = " ARCCIPACIPA CIPIPSA        MMOCMMOC MOCRMOCRMOC    RCNERCNE MRC2UQEAUQE UQEOCTEOCTE CTEBOEGBOEG OEGDIRGDIRG    KNILKNIL KNLIDCMIDCM ICMTLLMTLLM LLMENWOENWO    TSCPTSCP SCPTNCPTNCP TNCMPOPMPOP POPSSOPSSOP    VIRPVIRP    FUBRFUBR FUB2AVRDAVR AVRBRVRBRVR VERKEES        NGIS        TLYSTLYS TLSCTYSCTYS CTSBLATBLAT LATMPBTMPBT PBTTACTTACT TCTPMCTPMCT PCTMOCTMOCT MCTNOCTNOCT OCTPOCTPOCT RCT    TADT ADTNEDT        SEDTSEDT SDTYLDTYLDT YDTRODT        CRDTREYT EYTLRDT        GTDT        CNETCNET NETTXETTXET TXTDEFTDEFT DFTTLFTTLFT TFTDIGTDIGT DIT    EMIT MITLPITSLPI LPI1TIT1TIT 1TT2TIT2TIT 2TT3TIT3TIT 3TTYEKTYEKT EKTDWKTDWKT WKTNALTNALT ALTNELTNELT ELTLCMT        DEMTDEMT TMTOOMT        LAOTLAOT TOTNFOTNFOT FOTYLOTYLOT LOTEPOTEPOT AOTLRDTYROT ROTNWOTNWOT    1EPT1EPT 1PT2EPT2EPT 2PT3EPT3EPT 3PT4EPT4EPT 4PTSOPTSOPT APTORPT        BUPTBUPT BPTKCRTKCRT KRT    ADRT DRTNSRTNSRT    OSRTOSRT        ZIST IST2OST2OST 2STAOST        COSTCOST CSTPOST        TOST        CRSTCRST CRTESSTESST SSTTSST        XXXTXXXT XXTDIFUDIFU IFURESURESU    TLSUTLSU TLUMOCWMOCW MCWPOCWPOCW PCWFAOWFAOW FAWRAOWRAOW RAWSAOWSAOW SAWSROWSROW    YAPWYAPW    BUPWBUPW BPWXXXWXXXW XXW";
    do
    {
      v13 = *(_DWORD *)v11;
      v11 += 12;
      v12 = v13;
      result = v13 != 0;
    }
    while (v13 != a2 && v12 != 0);
  }
  return result;
}

uint64_t ID3TagBase::ProvideFrameData(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3, unsigned int a4, unsigned int *a5, int a6)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v11;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unsigned int FrameDataSize;
  unsigned int v24;
  unsigned int v25;
  ID3TagBase *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;

  if (*((_BYTE *)this + 48))
    return 0;
  v9 = *((_DWORD *)this + 14);
  if (v9 > a3)
    return 0xFFFFFFFFLL;
  v11 = *((_DWORD *)this + 13);
  if (v9 + a4 > v11)
    goto LABEL_5;
  v15 = (char *)this + 24;
  v16 = *((_DWORD *)this + 10);
  if (v16)
  {
    v17 = *((_QWORD *)this + 4);
    v18 = (v16 - 1);
    if ((_DWORD)v18)
    {
      v19 = v18 + 1;
      do
      {
        v17 = *(_QWORD *)(v17 + 8);
        --v19;
      }
      while (v19 > 1);
    }
    if ((char *)v17 == v15)
      v20 = 0;
    else
      v20 = v17 + 16;
    v21 = *(_DWORD *)(v20 + 4) + *(_DWORD *)(v20 + 8);
    if (v21 > a4)
    {
      v22 = (char *)this + 24;
      while (1)
      {
        v22 = (char *)*((_QWORD *)v22 + 1);
        if (v22 == v15)
          break;
        if (*((_DWORD *)v22 + 6) == a4)
        {
          if (!a5)
            return 0;
          result = 0;
          *a5 = *((_DWORD *)v22 + 5);
          return result;
        }
      }
      return 0xFFFFFFFFLL;
    }
    if (v21 < a4)
      return 0xFFFFFFFFLL;
  }
  else if (a4 != 10)
  {
    return 0xFFFFFFFFLL;
  }
  v31 = 0;
  FrameDataSize = ID3TagBase::GetFrameDataSize(this, a2, a3, &v31);
  v24 = a6 ? v31 : FrameDataSize;
  if (__CFADD__(v9, v24)
    || v24 > v9 - a4 + v11
    || !v24
    && (!a2 || a3 <= 3
      ? (v27 = 0, v26 = (ID3TagBase *)*((unsigned int *)this + 16))
      : (ID3TagBase *)((v25 = bswap32(*(_DWORD *)a2), v26 = (ID3TagBase *)*((unsigned int *)this + 16), (_DWORD)v26 != 2)
                     ? (v27 = v25)
                     : (v27 = v25 >> 8)),
        !ID3TagBase::IsValidFrameID(v26, v27)))
  {
LABEL_5:
    *((_BYTE *)this + 48) = 1;
    return 0xFFFFFFFFLL;
  }
  v28 = 0;
  v29 = v24 + v9;
  if (a2 && a3 >= 4)
  {
    LODWORD(v28) = bswap32(*(_DWORD *)a2);
    if (*((_DWORD *)this + 16) == 2)
      v28 = v28 >> 8;
    else
      v28 = v28;
  }
  ID3FrameList::Add((uint64_t *)this + 3, v28 | (v29 << 32), a4);
  v30 = *((_DWORD *)this + 13);
  if (v30 <= v29 + a4 || v30 - ((_DWORD)v29 + a4) < *((_DWORD *)this + 14))
    *((_BYTE *)this + 48) = 1;
  result = 0;
  if (a5)
    *a5 = v29;
  return result;
}

_QWORD *ID3FrameList::Add(uint64_t *a1, uint64_t a2, int a3)
{
  _QWORD *result;
  uint64_t v7;

  result = operator new(0x20uLL);
  result[1] = a1;
  result[2] = a2;
  *((_DWORD *)result + 6) = a3;
  v7 = *a1;
  *result = *a1;
  *(_QWORD *)(v7 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void ID3Creator::~ID3Creator(ID3Creator *this)
{
  JUMPOUT(0x193FFE460);
}

void FillInfoDictionaryFromID3Parser(CACFDictionary *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFStringRef theString;
  CFTypeRef v31;
  __int16 v32;
  CFTypeRef cf;
  uint64_t v34;
  CFStringRef v35;
  int v36;
  _BYTE v37[8];
  _BYTE v38[4];
  char buffer[256];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v34 = 1413565506;
  v36 = 12;
  v1 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v1)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v1 + 32))(v1, 8, &v34, 1718185574, &v36, v37))
    {
      v36 = 8;
      v17 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v17)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFStringRef *))(*(_QWORD *)v17 + 32))(v17, 4, v38, 1717854580, &v36, &v35))
        {
          if (CFStringGetLength(v35))
            CACFDictionary::AddString(a1, CFSTR("album"), v35);
          CFRelease(v35);
          v35 = 0;
        }
      }
    }
  }
  LODWORD(v34) = 1414546737;
  v36 = 12;
  v2 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v2)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v2 + 32))(v2, 8, &v34, 1718185574, &v36, v37))
    {
      v36 = 8;
      v18 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v18)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFStringRef *))(*(_QWORD *)v18 + 32))(v18, 4, v38, 1717854580, &v36, &v35))
        {
          if (CFStringGetLength(v35))
            CACFDictionary::AddString(a1, CFSTR("artist"), v35);
          CFRelease(v35);
          v35 = 0;
        }
      }
    }
  }
  LODWORD(v34) = 1413632077;
  v36 = 12;
  v3 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v3)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v3 + 32))(v3, 8, &v34, 1718185574, &v36, v37))
    {
      v36 = 8;
      v19 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v19)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFStringRef *))(*(_QWORD *)v19 + 32))(v19, 4, v38, 1717854580, &v36, &v35))
        {
          if (CFStringGetLength(v35))
            CACFDictionary::AddString(a1, CFSTR("tempo"), v35);
          CFRelease(v35);
          v35 = 0;
        }
      }
    }
  }
  LODWORD(v34) = 1414219097;
  v36 = 12;
  v4 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v4)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v4 + 32))(v4, 8, &v34, 1718185574, &v36, v37))
    {
      v36 = 8;
      v20 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v20)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFStringRef *))(*(_QWORD *)v20 + 32))(v20, 4, v38, 1717854580, &v36, &v35))
        {
          if (CFStringGetLength(v35))
            CACFDictionary::AddString(a1, CFSTR("key signature"), v35);
          CFRelease(v35);
          v35 = 0;
        }
      }
    }
  }
  LODWORD(v34) = 1414677323;
  v36 = 12;
  v5 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v5)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v5 + 32))(v5, 8, &v34, 1718185574, &v36, v37))
    {
      v36 = 8;
      v21 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v21)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFStringRef *))(*(_QWORD *)v21 + 32))(v21, 4, v38, 1717854580, &v36, &v35))
        {
          if (CFStringGetLength(v35))
            CACFDictionary::AddString(a1, CFSTR("track number"), v35);
          CFRelease(v35);
          v35 = 0;
        }
      }
    }
  }
  LODWORD(v34) = 1415136594;
  v36 = 12;
  v6 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v6)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v6 + 32))(v6, 8, &v34, 1718185574, &v36, v37))
    {
      v36 = 8;
      v22 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v22)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFStringRef *))(*(_QWORD *)v22 + 32))(v22, 4, v38, 1717854580, &v36, &v35))
        {
          if (CFStringGetLength(v35))
            CACFDictionary::AddString(a1, CFSTR("year"), v35);
          CFRelease(v35);
          v35 = 0;
        }
      }
    }
  }
  LODWORD(v34) = 1413697357;
  v36 = 12;
  v7 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v7)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v7 + 32))(v7, 8, &v34, 1718185574, &v36, v37))
    {
      v36 = 8;
      v23 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v23)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFStringRef *))(*(_QWORD *)v23 + 32))(v23, 4, v38, 1717854580, &v36, &v35))
        {
          if (CFStringGetLength(v35))
            CACFDictionary::AddString(a1, CFSTR("composer"), v35);
          CFRelease(v35);
          v35 = 0;
        }
      }
    }
  }
  LODWORD(v34) = 1413830740;
  v36 = 12;
  v8 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v8)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v8 + 32))(v8, 8, &v34, 1718185574, &v36, v37))
    {
      v36 = 8;
      v24 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v24)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFStringRef *))(*(_QWORD *)v24 + 32))(v24, 4, v38, 1717854580, &v36, &v35))
        {
          if (CFStringGetLength(v35))
            CACFDictionary::AddString(a1, CFSTR("lyricist"), v35);
          CFRelease(v35);
          v35 = 0;
        }
      }
    }
  }
  LODWORD(v34) = 1414091826;
  v36 = 12;
  v9 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v9)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v9 + 32))(v9, 8, &v34, 1718185574, &v36, v37))
    {
      v36 = 8;
      v25 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v25)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFStringRef *))(*(_QWORD *)v25 + 32))(v25, 4, v38, 1717854580, &v36, &v35))
        {
          if (CFStringGetLength(v35))
            CACFDictionary::AddString(a1, CFSTR("title"), v35);
          CFRelease(v35);
          v35 = 0;
        }
      }
    }
  }
  LODWORD(v34) = 1413697360;
  v36 = 12;
  v10 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v10)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v10 + 32))(v10, 8, &v34, 1718185574, &v36, v37))
    {
      v36 = 8;
      v26 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v26)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFStringRef *))(*(_QWORD *)v26 + 32))(v26, 4, v38, 1717854580, &v36, &v35))
        {
          if (CFStringGetLength(v35))
            CACFDictionary::AddString(a1, CFSTR("copyright"), v35);
          CFRelease(v35);
          v35 = 0;
        }
      }
    }
  }
  LODWORD(v34) = 1413828163;
  v36 = 12;
  v11 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v11)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v11 + 32))(v11, 8, &v34, 1718185574, &v36, v37))
    {
      v36 = 8;
      v27 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v27)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFStringRef *))(*(_QWORD *)v27 + 32))(v27, 4, v38, 1717854580, &v36, &v35))
        {
          if (CFStringGetLength(v35))
            CACFDictionary::AddString(a1, CFSTR("encoding application"), v35);
          CFRelease(v35);
          v35 = 0;
        }
      }
    }
  }
  LODWORD(v34) = 1413697358;
  v36 = 12;
  v12 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v12)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v12 + 32))(v12, 8, &v34, 1718185574, &v36, v37))
    {
      v36 = 8;
      v28 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v28)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFStringRef *))(*(_QWORD *)v28 + 32))(v28, 4, v38, 1717854580, &v36, &v35))
        {
          if (CFStringGetLength(v35))
            CACFDictionary::AddString(a1, CFSTR("genre"), v35);
          CFRelease(v35);
          v35 = 0;
        }
      }
    }
  }
  v13 = 0;
  cf = 0;
  do
  {
    LODWORD(v34) = 1129270605;
    HIDWORD(v34) = v13;
    v36 = 12;
    v14 = BaseOpaqueObject::ResolveOpaqueRef();
    if (!v14)
      break;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t, int *, _BYTE *))(*(_QWORD *)v14 + 32))(v14, 8, &v34, 1718185574, &v36, v37))
    {
      break;
    }
    v36 = 8;
    v15 = BaseOpaqueObject::ResolveOpaqueRef();
    if (!v15
      || (*(unsigned int (**)(uint64_t, uint64_t, _BYTE *, uint64_t, int *, CFTypeRef *))(*(_QWORD *)v15 + 32))(v15, 4, v38, 1717854580, &v36, &cf))
    {
      break;
    }
    theString = 0;
    v31 = cf;
    v32 = 0;
    CACFDictionary::GetString((CACFDictionary *)&v31, CFSTR("identifier"), &theString);
    if (theString)
    {
      CFStringGetCString(theString, buffer, 256, 0x600u);
      v16 = *(_DWORD *)buffer != 1853183081;
      if (*(_DWORD *)buffer != 1853183081)
      {
        theString = 0;
        CACFDictionary::GetString((CACFDictionary *)&v31, CFSTR("text"), &theString);
        if (theString)
        {
          if (CFStringGetLength(theString))
            CACFDictionary::AddString(a1, CFSTR("comments"), theString);
        }
        goto LABEL_37;
      }
    }
    else
    {
      v16 = 0;
    }
    ++v13;
LABEL_37:
    CFRelease(cf);
    cf = 0;
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v31);
  }
  while (!v16);
}

void sub_18EEE249C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t ID3ParserGetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  if (a5 && a6 && (v11 = BaseOpaqueObject::ResolveOpaqueRef()) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, a2, a3, a4, a5, a6);
  else
    return 2003334207;
}

uint64_t ID3ParserOpen(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, uint64_t, unsigned __int8 **, unsigned int *), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  int v8;
  int v9;
  ID3TagBase *v10;
  unsigned __int8 *v11;
  __int16 v12;
  _DWORD *exception;
  unsigned int v15;
  unsigned __int8 *v16;

  v3 = 2003334207;
  if (a2 && a3)
  {
    v7 = operator new();
    BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)v7);
    *(_QWORD *)v7 = &off_1E2905810;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = a2;
    *(_QWORD *)(v7 + 32) = a1;
    v16 = 0;
    v15 = 0;
    v8 = a2(a1, 0, 0, 10, &v16, &v15);
    if (v8)
      goto LABEL_18;
    v8 = 2003334207;
    if (v15 >= 0xA)
    {
      v9 = *v16;
      if (v9 == 84)
      {
        if (v16[1] == 65)
        {
          if (v16[2] == 71)
            v8 = 0;
          else
            v8 = 2003334207;
        }
      }
      else if (v9 == 73 && v16[1] == 68 && v16[2] == 51)
      {
        v10 = (ID3TagBase *)operator new();
        v11 = v16;
        *(_QWORD *)v10 = &off_1E2900F48;
        *((_BYTE *)v10 + 8) = 0;
        *((_QWORD *)v10 + 3) = (char *)v10 + 24;
        *((_QWORD *)v10 + 4) = (char *)v10 + 24;
        *((_QWORD *)v10 + 5) = 0;
        *((_BYTE *)v10 + 48) = 0;
        *(_QWORD *)((char *)v10 + 60) = 0;
        *(_QWORD *)((char *)v10 + 52) = 0;
        *((_WORD *)v10 + 34) = 0;
        v12 = *((_WORD *)v11 + 4);
        *(_QWORD *)((char *)v10 + 9) = *(_QWORD *)v11;
        *(_WORD *)((char *)v10 + 17) = v12;
        *(_QWORD *)(v7 + 16) = v10;
        v8 = 0;
        if ((ID3TagBase::Init(v10) & 1) == 0)
        {
          (*(void (**)(ID3TagBase *))(*(_QWORD *)v10 + 8))(v10);
          v8 = 2003334207;
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, unsigned __int8 **, unsigned int *))(v7 + 24))(*(_QWORD *)(v7 + 32), 1, 0, 10, &v16, &v15);
    if (v8)
    {
LABEL_18:
      exception = __cxa_allocate_exception(4uLL);
      *exception = v8;
      __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
    }
    v3 = 0;
    *a3 = *(unsigned int *)(v7 + 8);
  }
  return v3;
}

void sub_18EEE272C(void *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10A1C4085EB5FF6);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18EEE26F0);
}

uint64_t ID3ParserClose()
{
  uint64_t v0;

  v0 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v0)
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  return 0;
}

uint64_t ID3CreatorCallbackProc(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4, void **a5, unsigned int *a6)
{
  *a5 = (void *)(a1[2] + a3);
  *a6 = *((_DWORD *)a1 + 6) - a3;
  return 0;
}

void ID3Creator::ID3Creator(ID3Creator *this)
{
  char *v2;
  char v3;
  std::bad_alloc *exception;
  std::bad_alloc *v5;

  *(_QWORD *)this = &off_1E2900F28;
  *((_BYTE *)this + 8) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 0;
  *(_QWORD *)((char *)this + 28) = 0xA00000003;
  v2 = (char *)malloc_type_malloc(0xAuLL, 0x7C51E058uLL);
  if (!v2)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v5 = std::bad_alloc::bad_alloc(exception);
  }
  *((_QWORD *)this + 2) = v2;
  *((_DWORD *)this + 6) = 10;
  v3 = *((_DWORD *)this + 7);
  *(_WORD *)v2 = 17481;
  v2[2] = 51;
  v2[3] = v3;
  *((_WORD *)v2 + 2) = 0;
  *(_DWORD *)(v2 + 6) = 167772160;
  *((_BYTE *)this + 8) = 1;
}

uint64_t GetSoundCheckDictionaryFromID3(uint64_t a1, CACFDictionary *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v14;
  uint64_t v15;
  const __CFString *Value;
  const __CFString *v17;
  const __CFString *v18;
  CACFDictionary *v19;
  int v20;
  _DWORD *v21;
  CACFDictionary *v22;
  CFDictionaryRef theDict;
  int v24;
  _DWORD v25[2];
  _BYTE v26[8];
  int v27;
  unsigned int v28;
  char buffer[16];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = 2003334207;
  v28 = 0;
  v24 = 4;
  v6 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v6)
  {
    if (!(*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, int *, unsigned int *))(*(_QWORD *)v6 + 32))(v6, 0, 0, 1717792372, &v24, &v28)&& v28 != 0)
    {
      v9 = 1;
      v21 = a3;
      v22 = a2;
      while (1)
      {
        v25[0] = 1129270605;
        v25[1] = v9 - 1;
        v24 = 12;
        v10 = BaseOpaqueObject::ResolveOpaqueRef();
        if (v10)
        {
          if (!(*(unsigned int (**)(uint64_t, uint64_t, _DWORD *, uint64_t, int *, _BYTE *))(*(_QWORD *)v10 + 32))(v10, 8, v25, 1718185574, &v24, v26))
          {
            theDict = 0;
            v24 = 8;
            v14 = BaseOpaqueObject::ResolveOpaqueRef();
            if (v14)
            {
              if (!(*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t, int *, CFDictionaryRef *))(*(_QWORD *)v14 + 32))(v14, 4, &v27, 1717854580, &v24, &theDict))
              {
                if (a3)
                  *a3 = v27;
                if (a2)
                  break;
              }
            }
          }
        }
        v11 = 0;
LABEL_11:
        if (v9++ >= v28 || v11)
          return v5;
      }
      v15 = v5;
      Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("identifier"));
      v17 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("text"));
      v11 = 0;
      if (Value)
      {
        v18 = v17;
        if (v17)
        {
          if (CFStringCompare(Value, CFSTR("iTunNORM"), 0) == kCFCompareEqualTo)
          {
            v35 = 0u;
            v36 = 0u;
            v33 = 0u;
            v34 = 0u;
            v31 = 0u;
            v32 = 0u;
            *(_OWORD *)buffer = 0u;
            v30 = 0u;
            if (CFStringGetCString(v18, buffer, 128, 0x201u))
            {
              v20 = ParseiTunesNORMData(buffer, v22, v19);
              v11 = v20 == 0;
              if (v20)
                v5 = v15;
              else
                v5 = 0;
              a3 = v21;
              goto LABEL_26;
            }
          }
          v11 = 0;
        }
      }
      a3 = v21;
      v5 = v15;
LABEL_26:
      a2 = v22;
      CFRelease(theDict);
      goto LABEL_11;
    }
  }
  return v5;
}

uint64_t ID3Creator::AddCommentFrame(ID3Creator *this, const void *__src, size_t __n, _QWORD *a4, const char *a5)
{
  unsigned int v6;
  unsigned int v9;
  unsigned int v10;
  int v11;
  char *v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  char *v18;
  uint64_t result;
  unsigned int v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  unsigned int v26;
  unsigned int v27;
  std::bad_alloc *exception;
  std::bad_alloc *v29;

  if (!*((_BYTE *)this + 8))
    return 0xFFFFFFFFLL;
  v6 = __n;
  v9 = __n + 13;
  v10 = *((_DWORD *)this + 9);
  if (v10)
  {
    v11 = *((_DWORD *)this + 6);
    v12 = (char *)*((_QWORD *)this + 2);
    v13 = *((_DWORD *)this + 8) + v9;
    v14 = v10 - v13;
    if (v10 >= v13)
    {
LABEL_9:
      v18 = &v12[v11 - v10];
      *((_DWORD *)this + 9) = v14;
      goto LABEL_17;
    }
    v15 = v13 - v10;
    v16 = v13 - v10 + v11;
    v12 = (char *)reallocf(v12, v16);
    if (v16)
      v17 = v12 == 0;
    else
      v17 = 0;
    if (!v17)
    {
      v14 = 0;
      *((_QWORD *)this + 2) = v12;
      *((_DWORD *)this + 6) += v15;
      goto LABEL_9;
    }
LABEL_30:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v29 = std::bad_alloc::bad_alloc(exception);
  }
  v20 = *((_DWORD *)this + 6) + v9 + *((_DWORD *)this + 8);
  v21 = (char *)reallocf(*((void **)this + 2), v20);
  if (v21)
    v22 = 1;
  else
    v22 = v20 == 0;
  if (!v22)
    goto LABEL_30;
  *((_QWORD *)this + 2) = v21;
  v23 = *((unsigned int *)this + 6);
  v18 = &v21[v23];
  *((_DWORD *)this + 6) = v23 + v9 + *((_DWORD *)this + 8);
LABEL_17:
  v18[2] = 77;
  *(_WORD *)v18 = 20291;
  v24 = *((_DWORD *)this + 7);
  if (v24 < 3)
  {
    v25 = v18 + 3;
  }
  else
  {
    v18[3] = 77;
    v25 = v18 + 4;
    v24 = *((_DWORD *)this + 7);
  }
  if (v24 == 4)
  {
    v27 = bswap32(v9 & 0x7F | (((v9 >> 14) & 0x7F) << 16) & 0x80FF80FF | (((v9 >> 21) & 0x7F) << 24) | (((v9 >> 7) & 0x7F) << 8));
  }
  else
  {
    if (v24 != 3)
    {
      if (v24 == 2)
      {
        v26 = bswap32(v9);
        v25[2] = HIBYTE(v26);
        *(_WORD *)v25 = v26 >> 8;
        v25 += 3;
      }
      goto LABEL_27;
    }
    v27 = bswap32(v9);
  }
  *(_DWORD *)v25 = v27;
  v25 += 4;
LABEL_27:
  if (*((_DWORD *)this + 7) >= 3u)
  {
    *(_WORD *)v25 = 0;
    v25 += 2;
  }
  *v25 = 0;
  *(_WORD *)(v25 + 1) = 28261;
  v25[3] = 103;
  *(_QWORD *)(v25 + 4) = *a4;
  v25[12] = 0;
  memcpy(v25 + 13, __src, v6);
  result = 0;
  *(_DWORD *)(*((_QWORD *)this + 2) + 6) = bswap32(*((_DWORD *)this + 6) & 0x7F | (((*((_DWORD *)this + 6) >> 14) & 0x7F) << 16) & 0x80FF80FF | (((*((_DWORD *)this + 6) >> 21) & 0x7F) << 24) | (((*((_DWORD *)this + 6) >> 7) & 0x7F) << 8));
  return result;
}

void AAAnalysisBase::~AAAnalysisBase(AAAnalysisBase *this)
{
  *(_QWORD *)this = &off_1E2903E88;
  MEMORY[0x193FFDAD0]((char *)this + 48);
}

{
  *(_QWORD *)this = &off_1E2903E88;
  MEMORY[0x193FFDAD0]((char *)this + 48);
  JUMPOUT(0x193FFE460);
}

uint64_t AAAnalysisBase::Prepare(AAAnalysisBase *this)
{
  return 0;
}

uint64_t AAAnalysisBase::PushAudio(AAAnalysisBase *this, unsigned int a2, const AudioBufferList *a3)
{
  return 0;
}

uint64_t AAAnalysisBase::Complete(AAAnalysisBase *this, float a2, float a3)
{
  return (*(uint64_t (**)(AAAnalysisBase *, float, float))(*(_QWORD *)this + 40))(this, a2, a3);
}

uint64_t AAAnalysisBase::CompleteFinal(AAAnalysisBase *this, float a2, float a3)
{
  return 0;
}

uint64_t AAAnalysisBase::CallResultsCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AAAnalyzer::CallResultsCallback(*(_QWORD *)(a1 + 64), a2, a3, a4);
}

uint64_t AAAnalysisBase::CallProgressCallback(AAAnalyzer **this, float a2)
{
  return AAAnalyzer::CallProgressCallback(this[8], a2);
}

uint64_t AAAnalysisBase::ComputeNumberOfAnalysisFramesForLength(uint64_t this, uint64_t a2)
{
  if (!a2)
    *(_QWORD *)(this + 56) = 1;
  return this;
}

void AAAnalysisBase::AAAnalysisBase(AAAnalysisBase *this, const AudioStreamBasicDescription *a2, const AudioChannelLayout *a3, uint64_t a4, AAAudioAnalyzer *a5)
{
  __int128 v8;
  __int128 v9;

  *(_QWORD *)this = &off_1E2903E88;
  v8 = *(_OWORD *)&a2->mSampleRate;
  v9 = *(_OWORD *)&a2->mBytesPerPacket;
  *((_QWORD *)this + 5) = *(_QWORD *)&a2->mBitsPerChannel;
  *(_OWORD *)((char *)this + 24) = v9;
  *(_OWORD *)((char *)this + 8) = v8;
  CAAudioChannelLayout::CAAudioChannelLayout((AAAnalysisBase *)((char *)this + 48), a3);
  *((_QWORD *)this + 7) = a4;
  *((_QWORD *)this + 8) = a5;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  (*(void (**)(AAAnalysisBase *, uint64_t))(*(_QWORD *)this + 80))(this, a4);
}

uint64_t AudioFormatProperty_ValidateChannelLayout(const AudioChannelLayout *a1, unsigned int a2)
{
  UInt32 mNumberChannelDescriptions;
  uint64_t Property;
  uint64_t v6;
  AudioChannelLayoutTag mChannelLayoutTag;
  AudioChannelDescription *mChannelDescriptions;
  int v9;
  AudioChannelLabel mChannelLabel;
  BOOL v11;
  uint64_t PropertyInfo;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *outPropertyData;
  UInt32 outPropertyDataSize;
  AudioChannelLayoutTag inSpecifier;
  unsigned int v23;

  if (a2 < 0xC)
    return 4294967246;
  mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
  if (a2 == 12)
  {
    if (mNumberChannelDescriptions)
      return 4294967246;
  }
  if (20 * (unint64_t)mNumberChannelDescriptions + 12 > a2)
    return 4294967246;
  v23 = 0;
  Property = AudioFormatProperty_NumberOfChannelsForLayout(a1, &v23);
  if (!(_DWORD)Property)
  {
    v6 = mNumberChannelDescriptions;
    Property = mNumberChannelDescriptions != 0 && mNumberChannelDescriptions != v23 ? 4294967246 : 0;
    if (mNumberChannelDescriptions && (mNumberChannelDescriptions == 0 || mNumberChannelDescriptions == v23))
    {
      mChannelLayoutTag = a1->mChannelLayoutTag;
      inSpecifier = mChannelLayoutTag;
      if (mChannelLayoutTag == 0x10000)
      {
        outPropertyDataSize = 0;
        PropertyInfo = AudioFormatGetPropertyInfo(0x636D7062u, 4u, &a1->mChannelBitmap, &outPropertyDataSize);
        if ((_DWORD)PropertyInfo)
          return PropertyInfo;
        outPropertyData = 0;
        CADeprecated::CAAutoFree<unsigned char>::allocBytes(&outPropertyData, outPropertyDataSize, 1);
        v13 = (char *)outPropertyData;
        Property = AudioFormatGetProperty(0x636D7062u, 4u, &a1->mChannelBitmap, &outPropertyDataSize, outPropertyData);
        if ((_DWORD)Property)
        {
LABEL_42:
          if (v13)
            free(v13);
          return Property;
        }
        v14 = a1->mNumberChannelDescriptions;
        if ((_DWORD)v14)
        {
          v15 = 0;
          v16 = 20 * v14;
          while (a1->mChannelDescriptions[v15 / 0x14].mChannelLabel == *(_DWORD *)&v13[v15 + 12])
          {
            v15 += 20;
            if (v16 == v15)
              goto LABEL_50;
          }
          goto LABEL_52;
        }
      }
      else
      {
        if (!mChannelLayoutTag)
        {
          mChannelDescriptions = a1->mChannelDescriptions;
          while (1)
          {
            mChannelLabel = mChannelDescriptions->mChannelLabel;
            ++mChannelDescriptions;
            v9 = mChannelLabel;
            if (mChannelLabel - 0x10000 >= 0x40000)
            {
              if (v9 <= 199)
              {
                switch(v9)
                {
                  case -1:
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 13:
                  case 14:
                  case 15:
                  case 16:
                  case 17:
                  case 18:
                  case 33:
                  case 34:
                  case 35:
                  case 36:
                  case 37:
                  case 38:
                  case 39:
                  case 40:
                  case 41:
                  case 42:
                  case 43:
                  case 44:
                  case 45:
                  case 49:
                  case 51:
                  case 52:
                  case 53:
                  case 54:
                  case 55:
                  case 56:
                  case 57:
                  case 58:
                  case 59:
                  case 60:
                  case 61:
                  case 62:
                  case 63:
                  case 64:
                  case 65:
                  case 66:
                  case 100:
                    goto LABEL_19;
                  default:
                    return 560360820;
                }
              }
              if (v9 > 300)
              {
                v11 = (v9 - 301) > 4 || v9 == 303;
                if (v11 && v9 != 500 && v9 != 400)
                  return 560360820;
              }
              else if ((v9 - 200) >= 0xA)
              {
                return 560360820;
              }
            }
LABEL_19:
            if (!--v6)
              return 0;
          }
        }
        outPropertyDataSize = 0;
        PropertyInfo = AudioFormatGetPropertyInfo(0x636D706Cu, 4u, &inSpecifier, &outPropertyDataSize);
        if ((_DWORD)PropertyInfo)
          return PropertyInfo;
        outPropertyData = 0;
        CADeprecated::CAAutoFree<unsigned char>::allocBytes(&outPropertyData, outPropertyDataSize, 1);
        v13 = (char *)outPropertyData;
        Property = AudioFormatGetProperty(0x636D706Cu, 4u, &inSpecifier, &outPropertyDataSize, outPropertyData);
        if ((_DWORD)Property)
          goto LABEL_42;
        v17 = a1->mNumberChannelDescriptions;
        if ((_DWORD)v17)
        {
          v18 = 0;
          v19 = 20 * v17;
          while (a1->mChannelDescriptions[v18 / 0x14].mChannelLabel == *(_DWORD *)&v13[v18 + 12])
          {
            v18 += 20;
            if (v19 == v18)
              goto LABEL_50;
          }
LABEL_52:
          free(v13);
          return 4294967246;
        }
      }
      if (v13)
LABEL_50:
        free(v13);
      return 0;
    }
  }
  return Property;
}

void sub_18EEE3100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatProperty_LayoutTagForBitmap(int a1)
{
  int v1;
  uint64_t result;

  if (a1 > 62)
  {
    if (a1 <= 262)
    {
      switch(a1)
      {
        case 63:
          return 7929862;
        case 255:
          return 8257544;
        case 259:
          return 8585219;
      }
    }
    else if (a1 > 270)
    {
      if (a1 == 271)
        return 8978437;
      if (a1 == 319)
        return 8192007;
    }
    else
    {
      if (a1 == 263)
        return 7536644;
      if (a1 == 267)
        return 8781828;
    }
    return 0x10000;
  }
  if (a1 > 14)
  {
    if (a1 > 54)
    {
      if (a1 == 55)
        return 7667717;
      if (a1 == 59)
        return 8847365;
    }
    else
    {
      if (a1 == 15)
        return 8912900;
      if (a1 == 51)
        return 8650756;
    }
    return 0x10000;
  }
  v1 = a1 - 3;
  result = 6553601;
  switch(v1)
  {
    case 0:
      result = 6619138;
      break;
    case 1:
      return result;
    case 4:
      result = 7405571;
      break;
    case 8:
      result = 8716291;
      break;
    default:
      return 0x10000;
  }
  return result;
}

uint64_t AudioFormatProperty_BitmapForLayoutTag(int a1)
{
  if (a1 <= 8257543)
  {
    if (a1 <= 7536643)
    {
      switch(a1)
      {
        case 6553601:
          return 4;
        case 6619138:
          return 3;
        case 7405571:
          return 7;
      }
    }
    else if (a1 > 7929861)
    {
      if (a1 == 7929862)
        return 63;
      if (a1 == 8192007)
        return 319;
    }
    else
    {
      if (a1 == 7536644)
        return 263;
      if (a1 == 7667717)
        return 55;
    }
  }
  else if (a1 > 8781827)
  {
    if (a1 > 8912899)
    {
      if (a1 == 8912900)
        return 15;
      if (a1 == 8978437)
        return 271;
    }
    else
    {
      if (a1 == 8781828)
        return 267;
      if (a1 == 8847365)
        return 59;
    }
  }
  else if (a1 > 8650755)
  {
    if (a1 == 8650756)
      return 51;
    if (a1 == 8716291)
      return 11;
  }
  else
  {
    if (a1 == 8257544)
      return 255;
    if (a1 == 8585219)
      return 259;
  }
  return 0;
}

uint64_t AudioFormatProperty_WAVEChannelMaskForChannelLayout(const AudioChannelLayout *inSpecifier, unsigned int *a2)
{
  signed int mChannelLayoutTag;
  unsigned int v4;
  AudioChannelBitmap mChannelBitmap;
  AudioChannelBitmap v6;
  uint64_t mNumberChannelDescriptions;
  unsigned int v8;
  AudioChannelDescription *mChannelDescriptions;
  AudioChannelLabel mChannelLabel;
  uint64_t v11;
  unsigned int v12;
  uint64_t result;
  UInt32 ioPropertyDataSize;
  AudioChannelBitmap outPropertyData;

  mChannelLayoutTag = inSpecifier->mChannelLayoutTag;
  if ((int)inSpecifier->mChannelLayoutTag > 8716290)
  {
    if (mChannelLayoutTag > 12124163)
    {
      if (mChannelLayoutTag <= 12255237)
      {
        if (mChannelLayoutTag == 12124164)
        {
          v4 = 51;
          goto LABEL_56;
        }
        if (mChannelLayoutTag == 12189701)
        {
          v4 = 55;
          goto LABEL_56;
        }
      }
      else
      {
        switch(mChannelLayoutTag)
        {
          case 12255238:
            v4 = 63;
            goto LABEL_56;
          case 12320775:
            v4 = 1807;
            goto LABEL_56;
          case 12386312:
            v4 = 1599;
            goto LABEL_56;
        }
      }
    }
    else if (mChannelLayoutTag <= 8847364)
    {
      if (mChannelLayoutTag == 8716291)
      {
        v4 = 11;
        goto LABEL_56;
      }
      if (mChannelLayoutTag == 8781828)
      {
        v4 = 267;
        goto LABEL_56;
      }
    }
    else
    {
      switch(mChannelLayoutTag)
      {
        case 8847365:
          v4 = 1547;
          goto LABEL_56;
        case 8912900:
          v4 = 15;
          goto LABEL_56;
        case 8978437:
          v4 = 271;
          goto LABEL_56;
      }
    }
    goto LABEL_58;
  }
  if (mChannelLayoutTag > 7536643)
  {
    if (mChannelLayoutTag <= 7929861)
    {
      if (mChannelLayoutTag == 7536644)
      {
        v4 = 263;
        goto LABEL_56;
      }
      if (mChannelLayoutTag == 7667717)
      {
        v4 = 1543;
        goto LABEL_56;
      }
    }
    else
    {
      switch(mChannelLayoutTag)
      {
        case 7929862:
          v4 = 1551;
          goto LABEL_56;
        case 8585219:
          v4 = 259;
          goto LABEL_56;
        case 8650756:
          v4 = 1539;
          goto LABEL_56;
      }
    }
    goto LABEL_58;
  }
  if (mChannelLayoutTag > 6553600)
  {
    switch(mChannelLayoutTag)
    {
      case 6553601:
        v4 = 4;
        goto LABEL_56;
      case 6619138:
        v4 = 3;
        goto LABEL_56;
      case 7405571:
        v4 = 7;
LABEL_56:
        result = 0;
        *a2 = v4;
        return result;
    }
    goto LABEL_58;
  }
  if (mChannelLayoutTag)
  {
    if (mChannelLayoutTag == 0x10000)
    {
      mChannelBitmap = inSpecifier->mChannelBitmap;
      if ((mChannelBitmap & 0x630) == 0)
      {
        v6 = inSpecifier->mChannelBitmap;
LABEL_62:
        if (v6)
          mChannelBitmap = v6;
        goto LABEL_66;
      }
      if ((mChannelBitmap & 0x7C0) == 0)
      {
        v6 = (32 * mChannelBitmap) & 0x600 | mChannelBitmap & 0xFFFFFFCF;
        goto LABEL_62;
      }
LABEL_66:
      *a2 = mChannelBitmap;
      if (mChannelBitmap)
        return 0;
      else
        return 560360820;
    }
LABEL_58:
    ioPropertyDataSize = 4;
    outPropertyData = 0;
    result = AudioFormatGetProperty(0x626D7467u, 4u, inSpecifier, &ioPropertyDataSize, &outPropertyData);
    if ((_DWORD)result)
      return result;
    mChannelBitmap = outPropertyData;
    goto LABEL_66;
  }
  mNumberChannelDescriptions = inSpecifier->mNumberChannelDescriptions;
  if (!(_DWORD)mNumberChannelDescriptions)
  {
    mChannelBitmap = 0;
    goto LABEL_66;
  }
  v8 = 0;
  mChannelBitmap = 0;
  mChannelDescriptions = inSpecifier->mChannelDescriptions;
  while (1)
  {
    mChannelLabel = mChannelDescriptions->mChannelLabel;
    ++mChannelDescriptions;
    v11 = mChannelLabel - 1;
    if (v11 > 0x21)
      return 560360820;
    if (((0x30003F9FFuLL >> v11) & 1) == 0)
      return 560360820;
    v12 = dword_18F0F899C[v11];
    if (v12 <= v8)
      return 560360820;
    mChannelBitmap |= v12;
    v8 = v12;
    if (!--mNumberChannelDescriptions)
      goto LABEL_66;
  }
}

uint64_t AudioFormatProperty_LayoutTagForWAVEChannelMask(int a1, unsigned int *a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = a1;
  *a2 = 0;
  if ((a1 & 0x630) == 0)
    goto LABEL_9;
  if ((a1 & 0x1F0) == 0)
  {
    v3 = (a1 >> 5) & 0x30 | a1 & 0xFFFFF9FF;
LABEL_9:
    result = AudioFormatProperty_LayoutTagForBitmap(v3);
    if ((_DWORD)result == 0x10000)
      *a2 = v3;
    return result;
  }
  if (a1 <= 62)
  {
    if (a1 == 51)
      return 12124164;
    if (a1 == 55)
      return 12189701;
  }
  else
  {
    switch(a1)
    {
      case 63:
        return 12255238;
      case 1599:
        return 12386312;
      case 1807:
        return 12320775;
    }
  }
  return 0;
}

uint64_t AudioFormatProperty_ChannelLayoutSizeForWAVEChannelMask(int a1, unsigned int a2, int8x8_t a3)
{
  int v3;
  uint8x8_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;

  v3 = a1 & 0x3FFFF;
  a3.i32[0] = v3;
  v4 = (uint8x8_t)vcnt_s8(a3);
  v4.i16[0] = vaddlv_u8(v4);
  v5 = v4.i32[0];
  if (a2)
    v6 = a2;
  else
    v6 = v4.i32[0];
  if (v4.i32[0] <= v6)
  {
    if (v4.i32[0] != v6)
      return 20 * v6 + 12;
  }
  else
  {
    do
    {
      v3 &= ~(0x80000000 >> __clz(v3));
      --v5;
    }
    while (v5 > v6);
  }
  if (AudioFormatProperty_LayoutTagForWAVEChannelMask(v3, &v8))
    return 32;
  return 20 * v6 + 12;
}

void AudioFormatProperty_ChannelLayoutForWAVEChannelMask(int a1, unsigned int a2, AudioChannelLayout *a3, int8x8_t a4)
{
  int v5;
  uint8x8_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  AudioChannelLayoutTag v11;
  unsigned int v12;
  AudioChannelDescription *mChannelDescriptions;
  unsigned int v14;
  unsigned int v15;
  int v16;
  AudioChannelDescription *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;

  v5 = a1 & 0x3FFFF;
  a4.i32[0] = a1 & 0x3FFFF;
  v6 = (uint8x8_t)vcnt_s8(a4);
  v6.i16[0] = vaddlv_u8(v6);
  v7 = v6.i32[0];
  if (a2)
    v8 = a2;
  else
    v8 = v6.u32[0];
  if (v6.i32[0] <= v8)
  {
    v10 = v6.i32[0];
    if (v6.i32[0] != (_DWORD)v8)
      goto LABEL_11;
  }
  else
  {
    v9 = v6.i32[0];
    do
    {
      v5 &= ~(0x80000000 >> __clz(v5));
      --v9;
    }
    while (v9 > v8);
    v10 = v8;
  }
  v34 = 0;
  v11 = AudioFormatProperty_LayoutTagForWAVEChannelMask(v5, &v34);
  if (v11)
  {
    v12 = v34;
    a3->mChannelLayoutTag = v11;
    *(_QWORD *)&a3->mChannelBitmap = v12;
    return;
  }
LABEL_11:
  *(_QWORD *)&a3->mChannelLayoutTag = 0;
  a3->mNumberChannelDescriptions = v8;
  mChannelDescriptions = a3->mChannelDescriptions;
  bzero(a3->mChannelDescriptions, 20 * v8);
  v14 = 0;
  if ((v5 & 1) != 0)
  {
    v14 = 1;
    mChannelDescriptions->mChannelLabel = 1;
    if ((v5 & 2) == 0)
    {
LABEL_13:
      if ((v5 & 4) == 0)
        goto LABEL_14;
      goto LABEL_41;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_13;
  }
  v18 = v14++;
  mChannelDescriptions[v18].mChannelLabel = 2;
  if ((v5 & 4) == 0)
  {
LABEL_14:
    if ((v5 & 8) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  v19 = v14++;
  mChannelDescriptions[v19].mChannelLabel = 3;
  if ((v5 & 8) == 0)
  {
LABEL_15:
    if ((v5 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  v20 = v14++;
  mChannelDescriptions[v20].mChannelLabel = 4;
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  v21 = v14++;
  mChannelDescriptions[v21].mChannelLabel = 33;
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  v22 = v14++;
  mChannelDescriptions[v22].mChannelLabel = 34;
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  v23 = v14++;
  mChannelDescriptions[v23].mChannelLabel = 7;
  if ((v5 & 0x80) == 0)
  {
LABEL_19:
    if ((v5 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  v24 = v14++;
  mChannelDescriptions[v24].mChannelLabel = 8;
  if ((v5 & 0x100) == 0)
  {
LABEL_20:
    if ((v5 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  v25 = v14++;
  mChannelDescriptions[v25].mChannelLabel = 9;
  if ((v5 & 0x200) == 0)
  {
LABEL_21:
    if ((v5 & 0x400) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  v26 = v14++;
  mChannelDescriptions[v26].mChannelLabel = 5;
  if ((v5 & 0x400) == 0)
  {
LABEL_22:
    if ((v5 & 0x800) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  v27 = v14++;
  mChannelDescriptions[v27].mChannelLabel = 6;
  if ((v5 & 0x800) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  v28 = v14++;
  mChannelDescriptions[v28].mChannelLabel = 12;
  if ((v5 & 0x1000) == 0)
  {
LABEL_24:
    if ((v5 & 0x2000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  v29 = v14++;
  mChannelDescriptions[v29].mChannelLabel = 13;
  if ((v5 & 0x2000) == 0)
  {
LABEL_25:
    if ((v5 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  v30 = v14++;
  mChannelDescriptions[v30].mChannelLabel = 14;
  if ((v5 & 0x4000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  v31 = v14++;
  mChannelDescriptions[v31].mChannelLabel = 15;
  if ((v5 & 0x8000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000) == 0)
      goto LABEL_28;
LABEL_55:
    v33 = v14++;
    mChannelDescriptions[v33].mChannelLabel = 17;
    if ((v5 & 0x20000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_54:
  v32 = v14++;
  mChannelDescriptions[v32].mChannelLabel = 16;
  if ((v5 & 0x10000) != 0)
    goto LABEL_55;
LABEL_28:
  if ((v5 & 0x20000) != 0)
LABEL_29:
    mChannelDescriptions[v14].mChannelLabel = 18;
LABEL_30:
  if (v10 < v8)
  {
    if (v8 >= v7)
      v15 = v7;
    else
      v15 = v8;
    v16 = v8 - v10;
    v17 = &a3->mChannelDescriptions[v15];
    do
    {
      v17->mChannelLabel = 0;
      ++v17;
      --v16;
    }
    while (v16);
  }
  if ((_DWORD)v8)
  {
    do
    {
      SetDefaultChannelPosition((uint64_t)mChannelDescriptions++);
      --v8;
    }
    while (v8);
  }
}

int *AudioFormat_IsAmbisonicChannelLayout(int *result)
{
  int v1;
  unsigned int v2;

  if (result)
  {
    v1 = *result;
    if (*result && ((v2 = v1 & 0xFFFF0000, (v1 & 0xFFFF0000) == 0x6B0000) || v2 == 12517376 || v2 == 12451840))
      return (int *)((unsigned __int16)*result != 0);
    else
      return 0;
  }
  return result;
}

void AudioFormatProperty_ChannelLayoutForBitmap(__int32 a1, AudioChannelLayout *a2, int8x8_t a3)
{
  uint8x8_t v5;
  uint64_t v6;
  AudioChannelDescription *mChannelDescriptions;
  unsigned int v8;
  uint64_t v9;
  AudioChannelDescription *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)&a2->mChannelLayoutTag = 0;
  a3.i32[0] = a1;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  a2->mNumberChannelDescriptions = v5.i32[0];
  mChannelDescriptions = a2->mChannelDescriptions;
  bzero(a2->mChannelDescriptions, (20 * v5.i32[0]));
  v8 = 0;
  if ((a1 & 1) != 0)
  {
    v8 = 1;
    mChannelDescriptions->mChannelLabel = 1;
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  v13 = v8++;
  mChannelDescriptions[v13].mChannelLabel = 2;
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  v14 = v8++;
  mChannelDescriptions[v14].mChannelLabel = 3;
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  v15 = v8++;
  mChannelDescriptions[v15].mChannelLabel = 4;
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  v16 = v8++;
  mChannelDescriptions[v16].mChannelLabel = 5;
  if ((a1 & 0x20) == 0)
  {
LABEL_7:
    if ((a1 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  v17 = v8++;
  mChannelDescriptions[v17].mChannelLabel = 6;
  if ((a1 & 0x40) == 0)
  {
LABEL_8:
    if ((a1 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  v18 = v8++;
  mChannelDescriptions[v18].mChannelLabel = 7;
  if ((a1 & 0x80) == 0)
  {
LABEL_9:
    if ((a1 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  v19 = v8++;
  mChannelDescriptions[v19].mChannelLabel = 8;
  if ((a1 & 0x100) == 0)
  {
LABEL_10:
    if ((a1 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  v20 = v8++;
  mChannelDescriptions[v20].mChannelLabel = 9;
  if ((a1 & 0x200) == 0)
  {
LABEL_11:
    if ((a1 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  v21 = v8++;
  mChannelDescriptions[v21].mChannelLabel = 10;
  if ((a1 & 0x400) == 0)
  {
LABEL_12:
    if ((a1 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  v22 = v8++;
  mChannelDescriptions[v22].mChannelLabel = 11;
  if ((a1 & 0x800) == 0)
  {
LABEL_13:
    if ((a1 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  v23 = v8++;
  mChannelDescriptions[v23].mChannelLabel = 12;
  if ((a1 & 0x1000) == 0)
  {
LABEL_14:
    if ((a1 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  v24 = v8++;
  mChannelDescriptions[v24].mChannelLabel = 13;
  if ((a1 & 0x2000) == 0)
  {
LABEL_15:
    if ((a1 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  v25 = v8++;
  mChannelDescriptions[v25].mChannelLabel = 14;
  if ((a1 & 0x4000) == 0)
  {
LABEL_16:
    if ((a1 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  v26 = v8++;
  mChannelDescriptions[v26].mChannelLabel = 15;
  if ((a1 & 0x8000) == 0)
  {
LABEL_17:
    if ((a1 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  v27 = v8++;
  mChannelDescriptions[v27].mChannelLabel = 16;
  if ((a1 & 0x10000) == 0)
  {
LABEL_18:
    if ((a1 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  v28 = v8++;
  mChannelDescriptions[v28].mChannelLabel = 17;
  if ((a1 & 0x20000) == 0)
  {
LABEL_19:
    if ((a1 & 0x200000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  v29 = v8++;
  mChannelDescriptions[v29].mChannelLabel = 18;
  if ((a1 & 0x200000) == 0)
  {
LABEL_20:
    if ((a1 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  v30 = v8++;
  mChannelDescriptions[v30].mChannelLabel = 49;
  if ((a1 & 0x800000) == 0)
  {
LABEL_21:
    if ((a1 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  v31 = v8++;
  mChannelDescriptions[v31].mChannelLabel = 51;
  if ((a1 & 0x1000000) == 0)
  {
LABEL_22:
    if ((a1 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  v32 = v8++;
  mChannelDescriptions[v32].mChannelLabel = 52;
  if ((a1 & 0x2000000) == 0)
  {
LABEL_23:
    if ((a1 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
LABEL_55:
  v33 = v8++;
  mChannelDescriptions[v33].mChannelLabel = 53;
  if ((a1 & 0x4000000) != 0)
  {
LABEL_24:
    v9 = v8++;
    mChannelDescriptions[v9].mChannelLabel = 54;
  }
LABEL_25:
  if (v8 < v6)
  {
    v10 = &a2->mChannelDescriptions[v8];
    v11 = v6 - v8;
    do
    {
      v10->mChannelLabel = -1;
      ++v10;
      --v11;
    }
    while (v11);
  }
  if (a1)
  {
    if (v6 <= 1)
      v12 = 1;
    else
      v12 = v6;
    do
    {
      SetDefaultChannelPosition((uint64_t)mChannelDescriptions++);
      --v12;
    }
    while (v12);
  }
}

uint64_t AudioFormat_AreChannelLayoutsEquivalent(const AudioChannelLayout *a1, const AudioChannelLayout *a2, unsigned int *a3)
{
  uint64_t FullChannelLayout;
  uint64_t v6;
  AudioChannelLayout *v7;
  AudioChannelLayout *v8;
  uint64_t mNumberChannelDescriptions;
  unint64_t v10;
  uint64_t v11;
  AudioChannelLabel mChannelLabel;
  int v13;
  int v14;
  AudioChannelLayout *v16;
  AudioChannelLayout *v17;

  *a3 = 0;
  v16 = 0;
  v17 = 0;
  FullChannelLayout = AudioFormat_GetFullChannelLayout(a1, &v17);
  if ((_DWORD)FullChannelLayout)
  {
    v6 = FullChannelLayout;
    v7 = 0;
    v8 = v17;
  }
  else
  {
    v6 = AudioFormat_GetFullChannelLayout(a2, &v16);
    v7 = v16;
    v8 = v17;
    if (!(_DWORD)v6)
    {
      mNumberChannelDescriptions = v17->mNumberChannelDescriptions;
      if ((_DWORD)mNumberChannelDescriptions == v16->mNumberChannelDescriptions)
      {
        if ((_DWORD)mNumberChannelDescriptions)
        {
          v10 = 0;
          v11 = 20 * mNumberChannelDescriptions;
          while (1)
          {
            mChannelLabel = v17->mChannelDescriptions[v10 / 0x14].mChannelLabel;
            if (mChannelLabel != v16->mChannelDescriptions[v10 / 0x14].mChannelLabel
              || mChannelLabel == 100
              && (v17->mChannelDescriptions[v10 / 0x14].mChannelFlags != v16->mChannelDescriptions[v10 / 0x14].mChannelFlags
               || v17->mChannelDescriptions[v10 / 0x14].mCoordinates[0] != v16->mChannelDescriptions[v10 / 0x14].mCoordinates[0]
               || v17->mChannelDescriptions[v10 / 0x14].mCoordinates[1] != v16->mChannelDescriptions[v10 / 0x14].mCoordinates[1]
               || v17->mChannelDescriptions[v10 / 0x14].mCoordinates[2] != v16->mChannelDescriptions[v10 / 0x14].mCoordinates[2]))
            {
              break;
            }
            v10 += 20;
            if (v11 == v10)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_14:
          v13 = HIWORD(v17->mChannelLayoutTag) << 16;
          v14 = HIWORD(v16->mChannelLayoutTag) << 16;
          if ((v13 != 12451840 || v14 != 12517376) && (v13 != 12517376 || v14 != 12451840))
          {
            v6 = 0;
            *a3 = 1;
            goto LABEL_19;
          }
        }
      }
      v6 = 0;
    }
  }
LABEL_19:
  free(v8);
  free(v7);
  return v6;
}

uint64_t AudioFormat_GetFullChannelLayout(const AudioChannelLayout *a1, AudioChannelLayout **a2)
{
  uint64_t v4;
  size_t v5;
  AudioChannelLayout *v6;
  int8x8_t v7;
  AudioChannelLayoutTag mChannelLayoutTag;
  unsigned int v10;

  v10 = 0;
  v4 = AudioFormatProperty_NumberOfChannelsForLayout(a1, &v10);
  if (!(_DWORD)v4)
  {
    v5 = 20 * v10 + 12;
    v6 = (AudioChannelLayout *)malloc_type_malloc(v5, 0xEB85F60AuLL);
    *a2 = v6;
    mChannelLayoutTag = a1->mChannelLayoutTag;
    if (a1->mChannelLayoutTag == 0x10000)
    {
      AudioFormatProperty_ChannelLayoutForBitmap(a1->mChannelBitmap, v6, v7);
      return 0;
    }
    if (!mChannelLayoutTag)
    {
      memcpy(v6, a1, v5);
      return 0;
    }
    v4 = AudioFormatProperty_ChannelLayoutForTag(mChannelLayoutTag, v6);
    if ((_DWORD)v4)
    {
      free(*a2);
      *a2 = 0;
    }
  }
  return v4;
}

uint64_t AudioFormatProperty_HashForChannelLayout(const AudioChannelLayout *a1, unsigned int *a2)
{
  uint64_t FullChannelLayout;
  AudioChannelLayout *v4;
  unint64_t v5;
  unsigned int v6;
  float *v7;
  AudioChannelLayout *v9;

  *a2 = 0;
  v9 = 0;
  FullChannelLayout = AudioFormat_GetFullChannelLayout(a1, &v9);
  v4 = v9;
  if (!(_DWORD)FullChannelLayout && v9->mNumberChannelDescriptions)
  {
    v5 = 0;
    v6 = *a2;
    v7 = &v9->mChannelDescriptions[0].mCoordinates[2];
    do
    {
      v6 = v6 - *((_DWORD *)v7 - 4) + 8 * *((_DWORD *)v7 - 4);
      *a2 = v6;
      if (*((_DWORD *)v7 - 4) == 100)
      {
        v6 = (float)((float)((float)((float)(*(v7 - 1) * 11.0) + (float)(*(v7 - 2) * 7.0))
                                         + (float)(*v7 * 13.0))
                                 + (float)v6);
        *a2 = v6;
      }
      ++v5;
      v7 += 5;
    }
    while (v5 < v4->mNumberChannelDescriptions);
  }
  free(v4);
  return FullChannelLayout;
}

uint64_t AudioFormatProperty_SpeakerHemispheresForChannelLayout(const AudioChannelLayout *this, const AudioChannelLayout *a2)
{
  AudioChannelLayoutTag mChannelLayoutTag;
  CAAudioChannelLayout *v4;
  AudioChannelLayout *v5;
  int8x8_t v6;
  unint64_t v7;
  uint64_t v8;
  AudioChannelDescription *mChannelDescriptions;
  AudioChannelLayoutTag v10;
  __int128 v11;
  unsigned int v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v21;
  float v22;

  mChannelLayoutTag = this->mChannelLayoutTag;
  if (this->mChannelLayoutTag)
  {
    v4 = (CAAudioChannelLayout *)CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)this, a2);
    v5 = (AudioChannelLayout *)CAAudioChannelLayout::Create(v4);
    if (this->mChannelLayoutTag == 0x10000)
      AudioFormatProperty_ChannelLayoutForBitmap(this->mChannelBitmap, v5, v6);
    else
      AudioFormatProperty_ChannelLayoutForTag(this->mChannelLayoutTag, v5);
  }
  else
  {
    v5 = (AudioChannelLayout *)this;
  }
  if (v5->mNumberChannelDescriptions)
  {
    v7 = 0;
    v8 = 0;
    mChannelDescriptions = v5->mChannelDescriptions;
    v10 = v5->mChannelLayoutTag;
    while (1)
    {
      v11 = *(_OWORD *)&mChannelDescriptions->mChannelLabel;
      v22 = mChannelDescriptions->mCoordinates[2];
      v21 = v11;
      if (!v10)
        SetDefaultChannelPosition((uint64_t)&v21);
      if ((BYTE4(v21) & 1) != 0)
        break;
      if ((BYTE4(v21) & 2) != 0)
      {
        v12 = v8 | 2;
        if (*((float *)&v21 + 2) <= 0.0)
          v12 = v8;
        if (*((float *)&v21 + 2) < 0.0)
          v12 = v8 | 1;
        v13 = fabsf(*((float *)&v21 + 2));
        v14 = v12 | 8;
        if (v13 >= 90.0)
          v14 = v12;
        v15 = v12 | 4;
        if (v13 > 90.0)
          v8 = v15;
        else
          v8 = v14;
        v16 = *((float *)&v21 + 3) <= 0.0;
        if (*((float *)&v21 + 3) >= 0.0)
          goto LABEL_22;
LABEL_34:
        v8 = v8 | 0x10;
      }
LABEL_35:
      ++v7;
      ++mChannelDescriptions;
      if (v7 >= v5->mNumberChannelDescriptions)
      {
        if (mChannelLayoutTag)
          goto LABEL_37;
        return v8;
      }
    }
    v17 = v8 | 2;
    if (*((float *)&v21 + 2) <= 0.0)
      v17 = v8;
    if (*((float *)&v21 + 2) < 0.0)
      v17 = v8 | 1;
    v18 = v17 | 8;
    if (*((float *)&v21 + 3) <= 0.0)
      v18 = v17;
    v19 = v17 | 4;
    if (*((float *)&v21 + 3) < 0.0)
      v8 = v19;
    else
      v8 = v18;
    v16 = v22 <= 0.0;
    if (v22 >= 0.0)
    {
LABEL_22:
      if (!v16)
        v8 = v8 | 0x20;
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  v8 = 0;
  if (mChannelLayoutTag)
LABEL_37:
    MEMORY[0x193FFDAAC](v5);
  return v8;
}

void AudioFormat_CompleteChannelLayoutWithCoordinates(const CA::ChannelLayout *a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  size_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  float v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  OSStatus Property;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  UInt32 ioPropertyDataSize;
  _BYTE outPropertyData[4];
  int v22;
  uint64_t v23;
  int v24;
  int inSpecifier;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  OSStatus v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD **)a1;
  if (**(_DWORD **)a1 || v3[2] <= 1u)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v4 = *((_QWORD *)a1 + 1);
    v5 = v4 - (_QWORD)v3;
LABEL_4:
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a2, v3, v4, v5);
    return;
  }
  v4 = *((_QWORD *)a1 + 1);
  v5 = v4 - (_QWORD)v3;
  if (v4 - (_QWORD)v3 != 12)
  {
    v6 = v3 + 3;
    v7 = v3 + 5;
    while (1)
    {
      v8 = 0;
      do
        v9 = fabsf(*(float *)&v7[v8]);
      while (v9 < 0.00000011921 && v8++ != 2);
      if (v9 >= 0.00000011921)
        break;
      v6 += 5;
      v7 += 5;
      if (v6 == (_DWORD *)v4)
        goto LABEL_15;
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_4;
  }
LABEL_15:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a2, v3, v4, v5);
  v11 = *a2;
  v12 = *(unsigned int *)(*a2 + 8);
  v13 = (a2[1] - *a2 - 12) / 0x14uLL;
  if (v13 < v12)
LABEL_20:
    __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
  v14 = v11 + 20;
  v15 = -1;
  while (++v15 < v12)
  {
    inSpecifier = *(_DWORD *)(v14 - 8);
    ioPropertyDataSize = 20;
    Property = AudioFormatGetProperty(0x6473636Cu, 4u, &inSpecifier, &ioPropertyDataSize, outPropertyData);
    if (Property)
    {
      v18 = CADefaultLog();
      if (v18)
      {
        v19 = v18;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v27 = "AudioFormatChannelLayouts.cpp";
          v28 = 1024;
          v29 = 2832;
          v30 = 1024;
          v31 = inSpecifier;
          v32 = 1024;
          v33 = Property;
          _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get default coordinates for %u err: %d", buf, 0x1Eu);
        }
      }
      return;
    }
    *(_DWORD *)(v14 - 4) = v22;
    v17 = v23;
    *(_DWORD *)(v14 + 8) = v24;
    *(_QWORD *)v14 = v17;
    v14 += 20;
    v12 = *(unsigned int *)(v11 + 8);
    if (v13 < v12)
      goto LABEL_20;
  }
}

void sub_18EEE4610(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18EEE4698(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MP4BoxParser_FileType::~MP4BoxParser_FileType(MP4BoxParser_FileType *this)
{
  MP4BoxParser_FileType::~MP4BoxParser_FileType(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E2908630;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
    free(v2);
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t MP4BoxParser_FileType::Init(MP4BoxParser_FileType *this)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t DataSourceSize;
  NSObject *v8;
  const char *v9;
  int v10;
  void *v11;
  unsigned int v12;
  uint64_t DataSourceBytes;
  unint64_t v14;
  uint64_t v15;
  std::bad_alloc *exception;
  std::bad_alloc *v17;
  uint64_t v18;
  int8x8_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = MP4BoxParser::Initialize(this);
  if (!(_DWORD)v2)
  {
    if (*((_DWORD *)this + 5) != 1718909296)
      return 4294967294;
    if ((unint64_t)(*((_QWORD *)this + 3) - 129) < 0xFFFFFFFFFFFFFF93)
      return 0xFFFFFFFFLL;
    v18 = 0;
    v4 = (*(uint64_t (**)(MP4BoxParser_FileType *))(*(_QWORD *)this + 24))(this);
    v5 = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v4, 8uLL, &v19);
    *((int8x8_t *)this + 7) = vrev32_s8(v19);
    v6 = *((_QWORD *)this + 3) + 0x3FFFFFFF0;
    *((_DWORD *)this + 16) = v6 >> 2;
    if (!(v6 >> 2))
      return v5;
    DataSourceSize = MP4BoxParser::GetDataSourceSize(*((MP4BoxParser **)this + 1), &v18);
    if ((_DWORD)DataSourceSize)
    {
      v2 = DataSourceSize;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v2;
      *(_DWORD *)buf = 136315394;
      v21 = "MP4_BoxParser_FileType.cpp";
      v22 = 1024;
      v23 = 99;
      v8 = MEMORY[0x1E0C81028];
      v9 = "%25s:%-5d  unable to determine data source size";
LABEL_11:
      _os_log_impl(&dword_18EE07000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x12u);
      return v2;
    }
    v10 = (*(uint64_t (**)(MP4BoxParser_FileType *))(*(_QWORD *)this + 24))(this);
    if (v18 < (int64_t)(v10 + (v6 & 0xFFFFFFFC)) || *((_DWORD *)this + 16) > 0x14u)
      return 0xFFFFFFFFLL;
    if (!*((_QWORD *)this + 9))
    {
      v11 = malloc_type_malloc(v6 & 0xFFFFFFFC, 0x7C51E058uLL);
      if ((v6 & 0xFFFFFFFC) != 0 && !v11)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v17 = std::bad_alloc::bad_alloc(exception);
      }
      *((_QWORD *)this + 9) = v11;
    }
    v12 = (*(uint64_t (**)(MP4BoxParser_FileType *))(*(_QWORD *)this + 24))(this);
    DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v12 + 8, v6 & 0xFFFFFFFC, *((void **)this + 9));
    if ((_DWORD)DataSourceBytes)
    {
      v2 = DataSourceBytes;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return v2;
      *(_DWORD *)buf = 136315394;
      v21 = "MP4_BoxParser_FileType.cpp";
      v22 = 1024;
      v23 = 107;
      v8 = MEMORY[0x1E0C81028];
      v9 = "%25s:%-5d  unable to read compatible brand identifiers";
      goto LABEL_11;
    }
    if (*((_DWORD *)this + 16))
    {
      v14 = 0;
      v15 = *((_QWORD *)this + 9);
      do
      {
        v2 = 0;
        *(_DWORD *)(v15 + 4 * v14) = bswap32(*(_DWORD *)(v15 + 4 * v14));
        ++v14;
      }
      while (v14 < *((unsigned int *)this + 16));
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t MP4BoxParser::GetBoxHeaderSize(MP4BoxParser *this)
{
  return *((unsigned int *)this + 9);
}

void XPCListener::~XPCListener(XPCListener *this)
{
  swix::connection::~connection(this);
  JUMPOUT(0x193FFE460);
}

void swix::connection::configure_rebuilt_connection()
{
  std::terminate();
}

uint64_t XPCListener::accept_connection(XPCListener *this, void **a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  dispatch_object_t *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  int64x2_t v37;
  RemoteAudioConverter **v38;
  RemoteAudioConverter **v39;
  _QWORD *v40;
  uint64_t v41;
  void *v43[2];
  void *__p[2];
  __int128 v45;
  xpc_object_t v46;
  dispatch_object_t object;
  uint64_t v48;
  __int16 v49;
  char v50[8];
  _BYTE v51[24];
  _BYTE *v52;
  char v53;
  _QWORD v54[3];
  _QWORD *v55;
  std::string v56;
  std::string *v57;
  char v58;
  uint8_t buf[4];
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  _BYTE v64[20];
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  AudioConverterLog();
  v4 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 3);
    std::recursive_mutex::lock((std::recursive_mutex *)(v5 + 56));
    v6 = (*(_QWORD *)(v5 + 128) - *(_QWORD *)(v5 + 120)) >> 3;
    std::recursive_mutex::unlock((std::recursive_mutex *)(v5 + 56));
    *(_DWORD *)buf = 136315906;
    v60 = "AudioConverterService.cpp";
    v61 = 1024;
    v62 = 251;
    v63 = 2048;
    *(_QWORD *)v64 = v5;
    *(_WORD *)&v64[8] = 1024;
    *(_DWORD *)&v64[10] = v6 + 1;
    _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioConverterService -> %p:  New connection, number of converters: %u", buf, 0x22u);
  }
  *(_OWORD *)__p = 0u;
  v45 = 0u;
  *(_OWORD *)v43 = 0u;
  v7 = *a2;
  v46 = v7;
  if (v7)
    xpc_retain(v7);
  else
    v46 = xpc_null_create();
  v8 = (dispatch_object_t *)*((_QWORD *)this + 3);
  v9 = *v8;
  if (*v8)
    dispatch_retain(*v8);
  object = v9;
  AudioConverterLog();
  v48 = AudioConverterLog(void)::gLog;
  v49 = 0;
  std::__optional_copy_base<swix::timeout_config,false>::__optional_copy_base[abi:ne180100](v50, *((_QWORD *)this + 1) + 96);
  v10 = *((_QWORD *)this + 3);
  v11 = *(_QWORD *)(v10 + 144);
  std::recursive_mutex::lock((std::recursive_mutex *)(v10 + 56));
  v12 = *(_QWORD *)(v10 + 128) - *(_QWORD *)(v10 + 120);
  if (v12 >= 0xF99)
  {
    AudioConverterLog();
    v13 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      std::recursive_mutex::lock((std::recursive_mutex *)(v10 + 56));
      v14 = (*(_QWORD *)(v10 + 128) - *(_QWORD *)(v10 + 120)) >> 3;
      std::recursive_mutex::unlock((std::recursive_mutex *)(v10 + 56));
      *(_DWORD *)buf = 136316162;
      v60 = "AudioConverterService.cpp";
      v61 = 1024;
      v62 = 165;
      v63 = 2048;
      *(_QWORD *)v64 = v10;
      *(_WORD *)&v64[8] = 1024;
      *(_DWORD *)&v64[10] = 500;
      *(_WORD *)&v64[14] = 1024;
      *(_DWORD *)&v64[16] = v14;
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterService -> %p: The service only supports upto %u converters. Current Number of out-of-process converters: %u Returning kAudio_MemFullError.", buf, 0x28u);
    }
  }
  if (*(_QWORD *)(v10 + 128) == *(_QWORD *)(v10 + 120))
    XOSTransactor::beginTransaction((XOSTransactor *)(v10 + 168));
  v15 = operator new();
  v16 = (uint64_t *)operator new();
  *v16 = v15;
  swix::connection_config::connection_config(&v56, (const swix::connection_config *)v43);
  v58 = 1;
  v17 = *v16;
  buf[0] = 0;
  v65 = 0;
  std::construct_at[abi:ne180100]<swix::connection_config,swix::connection_config,swix::connection_config*>((uint64_t)buf, (__int128 *)&v56);
  v65 = 1;
  swix::ipc_interface::ipc_interface();
  std::__optional_destruct_base<swix::connection_config,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  v16[2] = (uint64_t)&off_1E2908C80;
  v16[4] = v17;
  std::__optional_destruct_base<swix::connection_config,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v56);
  v16[5] = 0;
  v16[6] = 0;
  v16[7] = v11;
  *(_QWORD *)v15 = v16;
  *(_BYTE *)(v15 + 8) = v12 < 0xF99;
  v54[0] = &off_1E2900188;
  v54[1] = v15;
  v54[2] = v10;
  v55 = v54;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v54);
  *(_QWORD *)&v64[12] = v15;
  v57 = 0;
  v18 = (std::string *)operator new(0x30uLL);
  v18->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2915AC8;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v18->__r_.__value_.__l.__size_, (uint64_t)buf);
  v18[1].__r_.__value_.__r.__words[2] = *(_QWORD *)&v64[12];
  v57 = v18;
  v19 = v16[3];
  if (!v19)
    std::terminate();
  std::function<void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::operator=((_QWORD *)(v19 + 24), &v56);
  v20 = v57;
  if (v57 == &v56)
  {
    v21 = 4;
    v20 = &v56;
  }
  else
  {
    if (!v57)
      goto LABEL_19;
    v21 = 5;
  }
  (*(void (**)(void))(v20->__r_.__value_.__r.__words[0] + 8 * v21))();
LABEL_19:
  v22 = *(uint8_t **)&v64[4];
  if (*(uint8_t **)&v64[4] == buf)
  {
    v23 = 4;
    v22 = buf;
  }
  else
  {
    if (!*(_QWORD *)&v64[4])
      goto LABEL_24;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_24:
  v24 = v55;
  if (v55 == v54)
  {
    v25 = 4;
    v24 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_29;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_29:
  v27 = *(uint64_t **)(v10 + 128);
  v26 = *(_QWORD *)(v10 + 136);
  if ((unint64_t)v27 >= v26)
  {
    v28 = *(_QWORD **)(v10 + 120);
    v29 = v27 - v28;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v31 = v26 - (_QWORD)v28;
    if (v31 >> 2 > v30)
      v30 = v31 >> 2;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v33 = (char *)operator new(8 * v32);
    }
    else
    {
      v33 = 0;
    }
    v34 = (uint64_t *)&v33[8 * v29];
    *v34 = v15;
    v35 = v34 + 1;
    if (v27 == v28)
    {
      v37 = vdupq_n_s64((unint64_t)v27);
    }
    else
    {
      do
      {
        v36 = *--v27;
        *v27 = 0;
        *--v34 = v36;
      }
      while (v27 != v28);
      v37 = *(int64x2_t *)(v10 + 120);
    }
    *(_QWORD *)(v10 + 120) = v34;
    *(_QWORD *)(v10 + 128) = v35;
    *(_QWORD *)(v10 + 136) = &v33[8 * v32];
    v39 = (RemoteAudioConverter **)v37.i64[1];
    v38 = (RemoteAudioConverter **)v37.i64[0];
    while (v39 != v38)
      std::unique_ptr<RemoteAudioConverter>::reset[abi:ne180100](--v39, 0);
    if (v38)
      operator delete(v38);
    *(_QWORD *)(v10 + 128) = v35;
  }
  else
  {
    *v27 = v15;
    *(_QWORD *)(v10 + 128) = v27 + 1;
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v10 + 56));
  if (v53)
  {
    v40 = v52;
    if (v52 == v51)
    {
      v41 = 4;
      v40 = v51;
    }
    else
    {
      if (!v52)
        goto LABEL_57;
      v41 = 5;
    }
    (*(void (**)(void))(*v40 + 8 * v41))();
  }
LABEL_57:
  if (object)
    dispatch_release(object);
  xpc_release(v46);
  v46 = 0;
  if (SHIBYTE(v45) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v43[0]);
  return 1;
}

void sub_18EEE4FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,dispatch_object_t object,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::recursive_mutex *v41;

  std::recursive_mutex::unlock(v41);
  swix::connection_config::~connection_config((swix::connection_config *)&a11);
  _Unwind_Resume(a1);
}

_BYTE *std::__optional_copy_base<swix::timeout_config,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 8), a2 + 8);
    a1[40] = 1;
  }
  return a1;
}

void sub_18EEE5194(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  if (*(_BYTE *)(v3 + 40))
  {
    v5 = *(_QWORD **)(v3 + 32);
    if (v5 == v1)
    {
      v6 = 4;
    }
    else
    {
      if (!v5)
        goto LABEL_7;
      v6 = 5;
      v1 = v5;
    }
    (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void swix::connection_config::~connection_config(swix::connection_config *this)
{
  swix::connection_config *v2;
  uint64_t v3;
  NSObject *v4;

  if (*((_BYTE *)this + 120))
  {
    v2 = (swix::connection_config *)*((_QWORD *)this + 14);
    if (v2 == (swix::connection_config *)((char *)this + 88))
    {
      v3 = 4;
      v2 = (swix::connection_config *)((char *)this + 88);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }
LABEL_7:
  v4 = *((_QWORD *)this + 7);
  if (v4)
    dispatch_release(v4);
  xpc_release(*((xpc_object_t *)this + 6));
  *((_QWORD *)this + 6) = 0;
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

RemoteAudioConverter *std::unique_ptr<RemoteAudioConverter>::reset[abi:ne180100](RemoteAudioConverter **a1, RemoteAudioConverter *a2)
{
  RemoteAudioConverter *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    RemoteAudioConverter::~RemoteAudioConverter(result);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void std::__function::__func<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1},std::allocator<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

__n128 std::__function::__func<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1},std::allocator<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2900188;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1},std::allocator<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2900188;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1},std::allocator<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  RemoteAudioConverter *v3;
  std::recursive_mutex *v4;
  RemoteAudioConverter **v5;
  RemoteAudioConverter **v6;
  RemoteAudioConverter **v7;
  RemoteAudioConverter **v8;
  RemoteAudioConverter *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = gService_0;
  v3 = *(RemoteAudioConverter **)(a1 + 8);
  v4 = (std::recursive_mutex *)(gService_0 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(gService_0 + 56));
  v6 = *(RemoteAudioConverter ***)(v2 + 120);
  v5 = *(RemoteAudioConverter ***)(v2 + 128);
  if (v6 != v5)
  {
    while (*v6 != v3)
    {
      if (++v6 == v5)
        goto LABEL_4;
    }
  }
  if (v6 == v5)
LABEL_4:
    std::terminate();
  v7 = v6 + 1;
  if (v6 + 1 != v5)
  {
    do
    {
      v6 = v7;
      v8 = v7 - 1;
      v9 = *v7;
      *v7++ = 0;
      std::unique_ptr<RemoteAudioConverter>::reset[abi:ne180100](v8, v9);
    }
    while (v7 != v5);
    v5 = *(RemoteAudioConverter ***)(v2 + 128);
  }
  while (v5 != v6)
    std::unique_ptr<RemoteAudioConverter>::reset[abi:ne180100](--v5, 0);
  *(_QWORD *)(v2 + 128) = v6;
  if (v6 == *(RemoteAudioConverter ***)(v2 + 120))
    XOSTransactor::endTransaction((XOSTransactor *)(v2 + 168));
  std::recursive_mutex::unlock(v4);
  AudioConverterLog();
  v10 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)(a1 + 16);
    std::recursive_mutex::lock((std::recursive_mutex *)(v11 + 56));
    v12 = (*(_QWORD *)(v11 + 128) - *(_QWORD *)(v11 + 120)) >> 3;
    std::recursive_mutex::unlock((std::recursive_mutex *)(v11 + 56));
    v13 = 136315906;
    v14 = "AudioConverterService.cpp";
    v15 = 1024;
    v16 = 179;
    v17 = 2048;
    v18 = v11;
    v19 = 1024;
    v20 = v12;
    _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioConverterService -> %p:  Client disconnected, number of converters: %u", (uint8_t *)&v13, 0x22u);
  }
}

void sub_18EEE54D0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AudioConverterServiceRun(void)
{
  xpc_main((xpc_connection_handler_t)connectionHandler);
}

void connectionHandler(xpc_object_t object)
{
  uint64_t v2;
  xpc_object_t v3;
  void *v4;
  void *v5;

  if (connectionHandler(_xpc_connection_s *)::onceToken != -1)
    dispatch_once(&connectionHandler(_xpc_connection_s *)::onceToken, &__block_literal_global_3);
  v2 = gService_0;
  if (object)
  {
    xpc_retain(object);
    v5 = object;
    v3 = object;
  }
  else
  {
    v3 = xpc_null_create();
    v5 = v3;
    if (!v3)
    {
      v4 = 0;
      goto LABEL_10;
    }
  }
  if (object_getClass(v3) != (Class)MEMORY[0x1E0C812E0])
  {
    v4 = v3;
LABEL_10:
    v3 = xpc_null_create();
    v5 = v3;
    goto LABEL_11;
  }
  xpc_retain(v3);
  v4 = v3;
LABEL_11:
  XPCListener::accept_connection((XPCListener *)(v2 + 8), &v5);
  xpc_release(v3);
  v5 = 0;
  xpc_release(v4);
  xpc_connection_activate((xpc_connection_t)object);
}

void sub_18EEE55E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  xpc_release(v10);
  xpc_release(v11);
  _Unwind_Resume(a1);
}

uint64_t ___ZL17connectionHandlerP17_xpc_connection_s_block_invoke()
{
  uint64_t v0;
  NSObject *v1;
  xpc_connection_t mach_service;
  xpc_object_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  pid_t v13;
  AudioConverterService *v14;
  void *v16[2];
  void *__p[2];
  __int128 v18;
  xpc_object_t v19;
  dispatch_object_t object;
  uint64_t v21;
  __int16 v22;
  char v23;
  _BYTE v24[24];
  _BYTE *v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v1 = dispatch_queue_create("ServiceQueue", 0);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)__p = 0u;
  v18 = 0u;
  *(_OWORD *)v16 = 0u;
  mach_service = xpc_connection_create_mach_service("com.apple.audio.AudioConverterService", 0, 1uLL);
  v3 = mach_service;
  if (mach_service)
  {
    v19 = mach_service;
  }
  else
  {
    v3 = xpc_null_create();
    v19 = v3;
    if (!v3)
    {
LABEL_5:
      v19 = xpc_null_create();
      goto LABEL_7;
    }
  }
  if (object_getClass(v3) != (Class)MEMORY[0x1E0C812E0])
    goto LABEL_5;
  xpc_retain(v3);
LABEL_7:
  if (v1)
    dispatch_retain(v1);
  object = v1;
  AudioConverterLog();
  v21 = AudioConverterLog(void)::gLog;
  v22 = 0;
  v23 = 0;
  v26 = 0;
  xpc_release(v3);
  swix::listener::listener((swix::listener *)(v0 + 8), (const swix::connection_config *)v16);
  *(_QWORD *)(v0 + 8) = &off_1E29017D0;
  *(_QWORD *)(v0 + 32) = v0;
  if (v26)
  {
    v10 = v25;
    if (v25 == v24)
    {
      v11 = 4;
      v10 = v24;
    }
    else
    {
      if (!v25)
        goto LABEL_15;
      v11 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v4, v5, v6, v7, v8, v9);
  }
LABEL_15:
  if (object)
    dispatch_release(object);
  xpc_release(v19);
  v19 = 0;
  if (SHIBYTE(v18) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v16[0]);
  *(_BYTE *)(v0 + 40) = 0;
  *(_BYTE *)(v0 + 48) = 0;
  MEMORY[0x193FFE25C](v0 + 56);
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 136) = 0;
  v12 = operator new();
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_QWORD *)(v12 + 8) = &off_1E2913518;
  *(_QWORD *)(v12 + 32) = v12 + 8;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 850045863;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 144) = v12;
  *(_QWORD *)(v0 + 160) = 0;
  v13 = getpid();
  *(_BYTE *)(v0 + 168) = 1;
  *(_QWORD *)(v0 + 176) = "AudioConverterService";
  *(_DWORD *)(v0 + 184) = v13;
  *(_QWORD *)(v0 + 192) = 0;
  AudioConverterService::setupMemoryPressureWarnings((AudioConverterService *)v0);
  AudioConverterService::setupTempDirectory(v14);
  swix::connection::activate((swix::connection *)(v0 + 8));
  return std::unique_ptr<AudioConverterService>::reset[abi:ne180100](v0);
}

void sub_18EEE58A4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::unique_ptr<AudioConverterService>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  void **v8;

  v1 = gService_0;
  gService_0 = result;
  if (v1)
  {
    v2 = *(NSObject **)(v1 + 152);
    if (v2)
    {
      dispatch_source_cancel(v2);
      v3 = *(NSObject **)(v1 + 152);
      *(_QWORD *)(v1 + 152) = 0;
      if (v3)
        dispatch_release(v3);
    }
    v4 = *(NSObject **)(v1 + 160);
    if (v4)
    {
      dispatch_sync(v4, &__block_literal_global_13);
      v5 = *(NSObject **)(v1 + 160);
      *(_QWORD *)(v1 + 160) = 0;
      if (v5)
        dispatch_release(v5);
    }
    XOSTransactor::endTransaction((XOSTransactor *)(v1 + 168));
    v6 = *(NSObject **)(v1 + 160);
    if (v6)
      dispatch_release(v6);
    v7 = *(NSObject **)(v1 + 152);
    if (v7)
      dispatch_release(v7);
    std::unique_ptr<auoop::WorkgroupMirror>::reset[abi:ne180100]((uint64_t *)(v1 + 144));
    v8 = (void **)(v1 + 120);
    std::vector<std::unique_ptr<RemoteAudioConverter>>::__destroy_vector::operator()[abi:ne180100](&v8);
    std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(v1 + 56));
    std::__optional_destruct_base<applesauce::xpc::endpoint,false>::~__optional_destruct_base[abi:ne180100](v1 + 40);
    swix::connection::~connection((swix::connection *)(v1 + 8));
    JUMPOUT(0x193FFE460);
  }
  return result;
}

uint64_t *std::unique_ptr<auoop::WorkgroupMirror>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::~guarded_lookup_hash_table(v1 + 8);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void std::vector<std::unique_ptr<RemoteAudioConverter>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  RemoteAudioConverter **v2;
  RemoteAudioConverter **v4;
  void *v5;

  v1 = *a1;
  v2 = (RemoteAudioConverter **)**a1;
  if (v2)
  {
    v4 = (RemoteAudioConverter **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<RemoteAudioConverter>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_destruct_base<applesauce::xpc::endpoint,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    xpc_release(*(xpc_object_t *)a1);
    *(_QWORD *)a1 = 0;
  }
  return a1;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::~guarded_lookup_hash_table(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;

  if (!atomic_load((unsigned int *)(a1 + 48)))
  {
    v3 = atomic_load((unint64_t *)(a1 + 40));
    if (v3)
    {
      v4 = caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl::~table_impl(v3);
      MEMORY[0x193FFE460](v4, 0x1060C402CF69088);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 80));
    v5 = *(uint64_t **)(a1 + 56);
    if (v5)
    {
      v6 = *(uint64_t **)(a1 + 64);
      v7 = *(void **)(a1 + 56);
      if (v6 != v5)
      {
        do
          std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl>>::reset[abi:ne180100](--v6);
        while (v6 != v5);
        v7 = *(void **)(a1 + 56);
      }
      *(_QWORD *)(a1 + 64) = v5;
      operator delete(v7);
    }
    v8 = *(_QWORD **)(a1 + 24);
    if (v8 == (_QWORD *)a1)
    {
      v9 = 4;
      v8 = (_QWORD *)a1;
    }
    else
    {
      if (!v8)
        return a1;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    return a1;
  }
  _os_assert_log();
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl::~table_impl(uint64_t a1)
{
  uint64_t v2;
  unsigned int **v3;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v3 = (unsigned int **)(a1 + 16);
    do
    {
      if ((unint64_t)*v3 + 1 >= 2)
        caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::element_t::release(*v3);
      ++v3;
      --v2;
    }
    while (v2);
  }
  return a1;
}

uint64_t std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl::~table_impl(result);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

unsigned int *caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::element_t::release(unsigned int *result)
{
  unsigned int v1;

  do
    v1 = __ldaxr(result);
  while (__stlxr(v1 - 0x10000, result));
  if ((v1 & 0xFFFF0000) == 0x10000)
  {
    if (atomic_load(result))
    {
      _os_assert_log();
      _os_crash();
      __break(1u);
    }
    else
    {
      caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)(result + 4));
    }
    JUMPOUT(0x193FFE460);
  }
  return result;
}

void AudioConverterService::setupMemoryPressureWarnings(AudioConverterService *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD handler[5];

  v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = dispatch_queue_create("memoryPresureWarningQueue", v2);
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v3;
  if (v4)
  {
    dispatch_release(v4);
    v3 = *((_QWORD *)this + 20);
  }
  v5 = dispatch_source_create(MEMORY[0x1E0C80DA8], 0, 0x10uLL, v3);
  v6 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v5;
  if (v6)
  {
    dispatch_release(v6);
    v5 = *((_QWORD *)this + 19);
  }
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 0x40000000;
  handler[2] = ___ZN21AudioConverterService27setupMemoryPressureWarningsEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_8;
  handler[4] = this;
  dispatch_source_set_event_handler(v5, handler);
  dispatch_activate(*((dispatch_object_t *)this + 19));
}

void AudioConverterService::setupTempDirectory(AudioConverterService *this)
{
  char *v1;
  size_t v2;
  NSObject *v3;
  void *__p[2];
  unsigned __int8 v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.audio.AudioConverterService");
  unsetenv("TMPDIR");
  if (!_set_user_dir_suffix()
    || ((v5 & 0x80u) == 0 ? (v1 = (char *)__p) : (v1 = (char *)__p[0]),
        (v5 & 0x80u) == 0 ? (v2 = v5) : (v2 = (size_t)__p[1]),
        !confstr(65537, v1, v2)))
  {
    AudioConverterLog();
    v3 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v7 = "AudioConverterService.cpp";
      v8 = 1024;
      v9 = 87;
      _os_log_impl(&dword_18EE07000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterService: Failed to set user dir suffix. Converter audio captures will not be written.", buf, 0x12u);
    }
  }
  if ((char)v5 < 0)
    operator delete(__p[0]);
}

void sub_18EEE5F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void swix::connection::activate(swix::connection *this)
{
  _xpc_connection_s *connection;

  swix::connection::xpc_connection(this);
  xpc_connection_activate(connection);
  xpc_release(connection);
}

void sub_18EEE5F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void caulk::synchronized<std::vector<std::unique_ptr<RemoteAudioConverter>>,std::recursive_mutex,caulk::empty_atomic_interface<std::vector<std::unique_ptr<RemoteAudioConverter>>>>::~synchronized(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 64);
  std::vector<std::unique_ptr<RemoteAudioConverter>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)a1);
}

void ___ZN21AudioConverterService27setupMemoryPressureWarningsEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  pid_t v2;
  int v3;
  rusage_info_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  rusage_info_t v14;
  __int16 v15;
  int v16;
  rusage_info_t buffer[59];

  buffer[58] = *(rusage_info_t *)MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = getpid();
  v3 = proc_pid_rusage(v2, 6, buffer);
  v4 = buffer[9];
  AudioConverterLog();
  v5 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    if (v3)
      v4 = 0;
    std::recursive_mutex::lock((std::recursive_mutex *)(v1 + 56));
    v6 = (*(_QWORD *)(v1 + 128) - *(_QWORD *)(v1 + 120)) >> 3;
    std::recursive_mutex::unlock((std::recursive_mutex *)(v1 + 56));
    v7 = 136316162;
    v8 = "AudioConverterService.cpp";
    v9 = 1024;
    v10 = 110;
    v11 = 2048;
    v12 = v1;
    v13 = 2048;
    v14 = v4;
    v15 = 1024;
    v16 = v6;
    _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterService -> %p: Memory pressure 80%% of the critical level at %llu bytes. Current number of out-of-process converters: %u The service will shut down if the limit is exceeded.", (uint8_t *)&v7, 0x2Cu);
  }
}

void std::__function::__func<std::hash<unsigned long>,std::allocator<std::hash<unsigned long>>,unsigned int ()(unsigned long)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<std::hash<unsigned long>,std::allocator<std::hash<unsigned long>>,unsigned int ()(unsigned long)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913518;
  return result;
}

void std::__function::__func<std::hash<unsigned long>,std::allocator<std::hash<unsigned long>>,unsigned int ()(unsigned long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913518;
}

uint64_t std::__function::__func<std::hash<unsigned long>,std::allocator<std::hash<unsigned long>>,unsigned int ()(unsigned long)>::operator()(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

void applesauce::xpc::connection::~connection(xpc_object_t *this)
{
  xpc_release(*this);
  *this = 0;
}

void ___Z33AudioConverterServiceRunInProcessv_block_invoke(uint64_t a1, uint64_t a2, dispatch_queue_s *a3)
{
  uint64_t v3;
  xpc_object_t v4;
  swix::listener *v5;
  NSObject *v6;
  xpc_object_t v7;
  _QWORD *v8;
  uint64_t v9;
  xpc_object_t *v10;
  pid_t v11;
  AudioConverterService *v12;
  void *v13;
  void *v14;
  xpc_object_t v15;
  xpc_object_t object;
  void *v17[2];
  void *__p[2];
  __int128 v19;
  xpc_object_t v20;
  dispatch_object_t v21;
  uint64_t v22;
  __int16 v23;
  char v24;
  _BYTE v25[24];
  _BYTE *v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  applesauce::xpc::connection::create((applesauce::xpc::connection *)&object, 0, a3);
  v3 = operator new();
  v4 = object;
  if (object)
  {
    xpc_retain(object);
    *(_QWORD *)v3 = dispatch_queue_create("ServiceQueue", 0);
    v5 = (swix::listener *)(v3 + 8);
LABEL_4:
    xpc_retain(v4);
    v6 = *(NSObject **)v3;
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)__p = 0u;
    v19 = 0u;
    v20 = v4;
    v7 = v4;
    goto LABEL_5;
  }
  v4 = xpc_null_create();
  *(_QWORD *)v3 = dispatch_queue_create("ServiceQueue", 0);
  v5 = (swix::listener *)(v3 + 8);
  if (v4)
    goto LABEL_4;
  v7 = xpc_null_create();
  v6 = *(NSObject **)v3;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  v20 = v7;
  if (v7)
  {
LABEL_5:
    xpc_retain(v7);
    if (!v6)
      goto LABEL_7;
    goto LABEL_6;
  }
  v7 = 0;
  v20 = xpc_null_create();
  if (v6)
LABEL_6:
    dispatch_retain(v6);
LABEL_7:
  v21 = v6;
  AudioConverterLog();
  v22 = AudioConverterLog(void)::gLog;
  v23 = 0;
  v24 = 0;
  v27 = 0;
  swix::listener::listener(v5, (const swix::connection_config *)v17);
  *(_QWORD *)(v3 + 8) = &off_1E29017D0;
  *(_QWORD *)(v3 + 32) = v3;
  if (!v27)
    goto LABEL_13;
  v8 = v26;
  if (v26 == v25)
  {
    v9 = 4;
    v8 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_13;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_13:
  if (v21)
    dispatch_release(v21);
  xpc_release(v20);
  v20 = 0;
  if (SHIBYTE(v19) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v17[0]);
  xpc_release(v7);
  *(_BYTE *)(v3 + 40) = 0;
  v10 = (xpc_object_t *)(v3 + 40);
  *(_BYTE *)(v3 + 48) = 0;
  MEMORY[0x193FFE25C](v3 + 56);
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  v11 = getpid();
  *(_BYTE *)(v3 + 168) = 1;
  *(_QWORD *)(v3 + 176) = "AudioConverterService";
  *(_DWORD *)(v3 + 184) = v11;
  *(_QWORD *)(v3 + 192) = 0;
  AudioConverterService::setupMemoryPressureWarnings((AudioConverterService *)v3);
  AudioConverterService::setupTempDirectory(v12);
  swix::connection::activate(v5);
  v13 = xpc_endpoint_create((xpc_connection_t)v4);
  if (v13 || (v13 = xpc_null_create()) != 0)
  {
    if (object_getClass(v13) == (Class)MEMORY[0x1E0C81308])
    {
      xpc_retain(v13);
      v14 = v13;
      goto LABEL_29;
    }
    v14 = v13;
  }
  else
  {
    v14 = 0;
  }
  v13 = xpc_null_create();
LABEL_29:
  xpc_release(v14);
  if (*(_BYTE *)(v3 + 48))
  {
    xpc_release(*v10);
    *(_QWORD *)(v3 + 40) = 0;
    *(_BYTE *)(v3 + 48) = 0;
  }
  *v10 = v13;
  v15 = xpc_null_create();
  *(_BYTE *)(v3 + 48) = 1;
  xpc_release(v15);
  xpc_release(v4);
  std::unique_ptr<AudioConverterService>::reset[abi:ne180100](v3);
  xpc_release(object);
}

void sub_18EEE6480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void applesauce::xpc::connection::create(applesauce::xpc::connection *this, const char *name, dispatch_queue_s *a3)
{
  xpc_connection_t v4;
  xpc_object_t v5;

  v4 = xpc_connection_create(name, 0);
  v5 = v4;
  if (v4)
  {
    *(_QWORD *)this = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *(_QWORD *)this = v5;
    if (!v5)
      goto LABEL_5;
  }
  if (object_getClass(v5) == (Class)MEMORY[0x1E0C812E0])
  {
    xpc_retain(v5);
    goto LABEL_7;
  }
LABEL_5:
  *(_QWORD *)this = xpc_null_create();
LABEL_7:
  xpc_release(v5);
}

void std::valarray<float>::resize(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  _DWORD *v6;

  v4 = *(_BYTE **)a1;
  if (v4)
  {
    v5 = *(_BYTE **)(a1 + 8);
    if (v5 != v4)
      *(_QWORD *)(a1 + 8) = &v5[(v4 - v5 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (a2)
  {
    v6 = operator new(4 * a2);
    *(_QWORD *)a1 = v6;
    do
    {
      *v6++ = 0;
      --a2;
    }
    while (a2);
    *(_QWORD *)(a1 + 8) = v6;
  }
}

float TruePeakAnalyzer::PeakValue(TruePeakAnalyzer *this)
{
  float v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  float v10;

  v1 = *((float *)this + 10);
  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (v2 != *(_QWORD *)this)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (v2 - v3) >> 7;
      if (v7 >= v5 >> 32)
      {
        TruePeak::GetStats();
        v8 = v10;
        v3 = *(_QWORD *)this;
        v2 = *((_QWORD *)this + 1);
        v7 = (v2 - *(_QWORD *)this) >> 7;
      }
      else
      {
        v8 = *((float *)this + 10);
      }
      if (v8 > v1)
        v1 = v8;
      ++v6;
      v5 += 0x100000000;
    }
    while (v6 < v7);
  }
  return v1;
}

float TruePeakAnalyzer::SamplePeakValue(TruePeakAnalyzer *this)
{
  float *v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float *v9;
  char v11;

  v1 = (float *)((char *)this + 44);
  v2 = *((float *)this + 11);
  v4 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (v3 != *(_QWORD *)this)
  {
    v6 = 0;
    v7 = 0;
    v8 = (v3 - *(_QWORD *)this) >> 7;
    do
    {
      if (v8 >= v6 >> 32)
      {
        v9 = (float *)&v11;
        TruePeak::GetStats();
        v4 = *(_QWORD *)this;
        v3 = *((_QWORD *)this + 1);
      }
      else
      {
        v9 = v1;
      }
      if (*v9 > v2)
        v2 = *v9;
      ++v7;
      v8 = (v3 - v4) >> 7;
      v6 += 0x100000000;
    }
    while (v7 < v8);
  }
  return v2;
}

void sub_18EEE69C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18EEE704C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  MEMORY[0x193FFD95C](va);
  _Unwind_Resume(a1);
}

void AddApp(InterAppAudioAppInfo *a1, float a2, NSMutableArray *a3)
{
  InterAppAudioApp *v6;
  double v7;
  id v8;
  ObjCImage *var2;
  __CFString *var3;
  __CFString *var4;
  __CFURL *var5;

  v6 = [InterAppAudioApp alloc];
  *(float *)&v7 = a2;
  v8 = -[InterAppAudioApp init:iconSize:](v6, "init:iconSize:", a1, v7);
  -[NSMutableArray addObject:](a3, "addObject:", v8);

  var2 = a1->var2;
  if (var2)
  {
    CFRelease(var2);
    a1->var2 = 0;
  }
  var3 = a1->var3;
  if (var3)
  {
    CFRelease(var3);
    a1->var3 = 0;
  }
  var4 = a1->var4;
  if (var4)
  {
    CFRelease(var4);
    a1->var4 = 0;
  }
  var5 = a1->var5;
  if (var5)
  {
    CFRelease(var5);
    a1->var5 = 0;
  }
}

uint64_t *DSPGraph::Profiler::Profiler(uint64_t *a1, uint64_t *a2)
{
  return DSPGraph::Profiler::Profiler(a1, a2, 0.000001);
}

{
  return DSPGraph::Profiler::Profiler(a1, a2, 0.000001);
}

uint64_t *DSPGraph::Profiler::Profiler(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void **v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (***v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t **v34;
  uint64_t *i;
  unint64_t v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  int8x8_t prime;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  unint64_t v56;
  void *v57;
  uint64_t (**v59)();
  uint64_t v60;
  uint64_t (***v61)();
  uint64_t (**v62)();
  uint64_t v63;
  uint64_t (***v64)();
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v5 = *a1;
  }
  *((_OWORD *)a1 + 1) = 0u;
  v9 = (void **)(a1 + 3);
  a1[6] = 0;
  *((_OWORD *)a1 + 2) = 0u;
  *((_DWORD *)a1 + 14) = 1065353216;
  v10 = operator new();
  *(_QWORD *)v10 = v5;
  *(_QWORD *)(v10 + 8) = 0;
  v11 = operator new(0x200uLL, (std::align_val_t)0x40uLL);
  DSPGraph::Metrics::Metrics((uint64_t)v11, a3);
  v12 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 8) = v11;
  if (v12)
  {
    MEMORY[0x193FFE454](v12, 64);
    v11 = *(void **)(v10 + 8);
  }
  v13 = *(_QWORD *)v10;
  v62 = &off_1E2917190;
  v63 = (uint64_t)v11;
  v64 = &v62;
  *(_DWORD *)(v10 + 16) = DSPGraph::Graph::addRenderCallback(v13, (uint64_t)&v62, 0, 0);
  v14 = v64;
  if (v64 == &v62)
  {
    v15 = 4;
    v14 = &v62;
  }
  else
  {
    if (!v64)
      goto LABEL_12;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_12:
  v16 = *(_QWORD *)v10;
  v59 = &off_1E2917148;
  v60 = (uint64_t)v11;
  v61 = &v59;
  *(_DWORD *)(v10 + 20) = DSPGraph::Graph::addRenderCallback(v16, (uint64_t)&v59, 1u, 2);
  v17 = v61;
  if (v61 == &v59)
  {
    v18 = 4;
    v17 = &v59;
  }
  else
  {
    if (!v61)
      goto LABEL_17;
    v18 = 5;
  }
  (*v17)[v18]();
LABEL_17:
  std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>>::reset[abi:ne180100](a1 + 2, v10);
  v19 = *(_QWORD **)(*a1 + 24);
  if (v19)
  {
    v20 = a1 + 5;
    do
    {
      v21 = v19[2];
      v22 = operator new();
      *(_QWORD *)v22 = v21;
      *(_QWORD *)(v22 + 8) = 0;
      v23 = (uint64_t)operator new(0x200uLL, (std::align_val_t)0x40uLL);
      DSPGraph::Metrics::Metrics(v23, a3);
      v24 = *(_QWORD *)(v22 + 8);
      *(_QWORD *)(v22 + 8) = v23;
      if (v24)
      {
        MEMORY[0x193FFE454](v24, 64);
        v23 = *(_QWORD *)(v22 + 8);
      }
      v25 = *(_QWORD *)v22;
      v62 = &off_1E2917100;
      v63 = v23;
      v64 = &v62;
      *(_DWORD *)(v22 + 16) = DSPGraph::Box::addRenderCallback(v25, (uint64_t)&v62, 0, 0);
      v26 = v64;
      if (v64 == &v62)
      {
        v26 = &v62;
        v27 = 4;
      }
      else
      {
        if (!v64)
          goto LABEL_26;
        v27 = 5;
      }
      (*v26)[v27]();
LABEL_26:
      v28 = *(_QWORD *)v22;
      v59 = &off_1E29170B8;
      v60 = v23;
      v61 = &v59;
      *(_DWORD *)(v22 + 20) = DSPGraph::Box::addRenderCallback(v28, (uint64_t)&v59, 1u, 2);
      v29 = v61;
      if (v61 == &v59)
      {
        v29 = &v59;
        v30 = 4;
        goto LABEL_30;
      }
      if (v61)
      {
        v30 = 5;
LABEL_30:
        (*v29)[v30]();
      }
      v31 = *(_QWORD *)(v19[2] + 56);
      v32 = a1[4];
      if (v32)
      {
        v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
        v33.i16[0] = vaddlv_u8(v33);
        if (v33.u32[0] > 1uLL)
        {
          v23 = *(_QWORD *)(v19[2] + 56);
          if (v31 >= v32)
            v23 = v31 % v32;
        }
        else
        {
          v23 = (v32 - 1) & v31;
        }
        v34 = (uint64_t **)*((_QWORD *)*v9 + v23);
        if (v34)
        {
          for (i = *v34; i; i = (uint64_t *)*i)
          {
            v36 = i[1];
            if (v36 == v31)
            {
              if (i[2] == v31)
                goto LABEL_103;
            }
            else
            {
              if (v33.u32[0] > 1uLL)
              {
                if (v36 >= v32)
                  v36 %= v32;
              }
              else
              {
                v36 &= v32 - 1;
              }
              if (v36 != v23)
                break;
            }
          }
        }
      }
      i = (uint64_t *)operator new(0x20uLL);
      *i = 0;
      i[1] = v31;
      i[2] = v31;
      i[3] = 0;
      v37 = (float)(unint64_t)(a1[6] + 1);
      v38 = *((float *)a1 + 14);
      if (!v32 || (float)(v38 * (float)v32) < v37)
      {
        v39 = (v32 & (v32 - 1)) != 0;
        if (v32 < 3)
          v39 = 1;
        v40 = v39 | (2 * v32);
        v41 = vcvtps_u32_f32(v37 / v38);
        if (v40 <= v41)
          prime = (int8x8_t)v41;
        else
          prime = (int8x8_t)v40;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          v32 = a1[4];
        }
        if (*(_QWORD *)&prime <= v32)
        {
          if (*(_QWORD *)&prime < v32)
          {
            v49 = vcvtps_u32_f32((float)(unint64_t)a1[6] / *((float *)a1 + 14));
            if (v32 < 3 || (v50 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
            {
              v49 = std::__next_prime(v49);
            }
            else
            {
              v51 = 1 << -(char)__clz(v49 - 1);
              if (v49 >= 2)
                v49 = v51;
            }
            if (*(_QWORD *)&prime <= v49)
              prime = (int8x8_t)v49;
            if (*(_QWORD *)&prime >= v32)
            {
              v32 = a1[4];
            }
            else
            {
              if (prime)
                goto LABEL_59;
              v57 = *v9;
              *v9 = 0;
              if (v57)
                operator delete(v57);
              v32 = 0;
              a1[4] = 0;
            }
          }
        }
        else
        {
LABEL_59:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v43 = operator new(8 * *(_QWORD *)&prime);
          v44 = *v9;
          *v9 = v43;
          if (v44)
            operator delete(v44);
          v45 = 0;
          a1[4] = (uint64_t)prime;
          do
            *((_QWORD *)*v9 + v45++) = 0;
          while (*(_QWORD *)&prime != v45);
          v46 = (_QWORD *)*v20;
          if (*v20)
          {
            v47 = v46[1];
            v48 = (uint8x8_t)vcnt_s8(prime);
            v48.i16[0] = vaddlv_u8(v48);
            if (v48.u32[0] > 1uLL)
            {
              if (v47 >= *(_QWORD *)&prime)
                v47 %= *(_QWORD *)&prime;
            }
            else
            {
              v47 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)*v9 + v47) = v20;
            v52 = (_QWORD *)*v46;
            if (*v46)
            {
              do
              {
                v53 = v52[1];
                if (v48.u32[0] > 1uLL)
                {
                  if (v53 >= *(_QWORD *)&prime)
                    v53 %= *(_QWORD *)&prime;
                }
                else
                {
                  v53 &= *(_QWORD *)&prime - 1;
                }
                if (v53 != v47)
                {
                  if (!*((_QWORD *)*v9 + v53))
                  {
                    *((_QWORD *)*v9 + v53) = v46;
                    goto LABEL_84;
                  }
                  *v46 = *v52;
                  *v52 = **((_QWORD **)*v9 + v53);
                  **((_QWORD **)*v9 + v53) = v52;
                  v52 = v46;
                }
                v53 = v47;
LABEL_84:
                v46 = v52;
                v52 = (_QWORD *)*v52;
                v47 = v53;
              }
              while (v52);
            }
          }
          v32 = (unint64_t)prime;
        }
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v31 >= v32)
            v23 = v31 % v32;
          else
            v23 = v31;
        }
        else
        {
          v23 = (v32 - 1) & v31;
        }
      }
      v54 = *v9;
      v55 = (uint64_t *)*((_QWORD *)*v9 + v23);
      if (v55)
      {
        *i = *v55;
      }
      else
      {
        *i = *v20;
        *v20 = (uint64_t)i;
        v54[v23] = v20;
        if (!*i)
          goto LABEL_102;
        v56 = *(_QWORD *)(*i + 8);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v56 >= v32)
            v56 %= v32;
        }
        else
        {
          v56 &= v32 - 1;
        }
        v55 = (uint64_t *)((char *)*v9 + 8 * v56);
      }
      *v55 = (uint64_t)i;
LABEL_102:
      ++a1[6];
LABEL_103:
      std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>::reset[abi:ne180100](i + 3, v22);
      v19 = (_QWORD *)*v19;
    }
    while (v19);
  }
  return a1;
}

void sub_18EEE7874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v21 = a15;
  if (a15 == v16)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 8) = 0;
  if (v23)
    MEMORY[0x193FFE454](v23, 64);
  MEMORY[0x193FFE460](v18, 0x1020C4062D53EE8);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>>>::~__hash_table(v17);
  std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>>::reset[abi:ne180100](v19, 0);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    DSPGraph::Graph::removeRenderCallback(*(DSPGraph::Graph **)v2, *(_DWORD *)(v2 + 20));
    DSPGraph::Graph::removeRenderCallback(*(DSPGraph::Graph **)v2, *(_DWORD *)(v2 + 16));
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
      MEMORY[0x193FFE454](v3, 64);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

uint64_t *std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    DSPGraph::Box::removeRenderCallback(*(DSPGraph::Box **)v2, *(_DWORD *)(v2 + 20));
    DSPGraph::Box::removeRenderCallback(*(DSPGraph::Box **)v2, *(_DWORD *)(v2 + 16));
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
      MEMORY[0x193FFE454](v3, 64);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>::reset[abi:ne180100](v1 + 3, 0);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,void *>>>::operator()[abi:ne180100](char a1, uint64_t *__p)
{
  if (a1)
    std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>::reset[abi:ne180100](__p + 3, 0);
  if (__p)
    operator delete(__p);
}

void std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2}>,void ()(DSPGraph::Box*,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2}>,void ()(DSPGraph::Box*,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E29170B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2}>,void ()(DSPGraph::Box*,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E29170B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2}>,void ()(DSPGraph::Box*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return DSPGraph::Metrics::stop(*(DSPGraph::Metrics **)(a1 + 8), *a3);
}

void std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1}>,void ()(DSPGraph::Box*,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1}>,void ()(DSPGraph::Box*,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2917100;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1}>,void ()(DSPGraph::Box*,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2917100;
  a2[1] = v2;
  return result;
}

double std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1}>,void ()(DSPGraph::Box*,unsigned int)>::operator()(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = DSPGraph::Metrics::start((DSPGraph::Metrics *)*(_QWORD *)(a1 + 8)).u64[0];
  return result;
}

void std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2}>,void ()(DSPGraph::Graph*,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2}>,void ()(DSPGraph::Graph*,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2917148;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2}>,void ()(DSPGraph::Graph*,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2917148;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2}>,void ()(DSPGraph::Graph*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return DSPGraph::Metrics::stop(*(DSPGraph::Metrics **)(a1 + 8), *a3);
}

void std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1}>,void ()(DSPGraph::Graph*,unsigned int)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1}>,void ()(DSPGraph::Graph*,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2917190;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1}>,void ()(DSPGraph::Graph*,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2917190;
  a2[1] = v2;
  return result;
}

double std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1}>,void ()(DSPGraph::Graph*,unsigned int)>::operator()(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = DSPGraph::Metrics::start((DSPGraph::Metrics *)*(_QWORD *)(a1 + 8)).u64[0];
  return result;
}

void DSPGraph::Profiler::~Profiler(DSPGraph::Profiler *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  v2 = (_QWORD *)((char *)this + 24);
  if (*((_QWORD *)this + 6))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>>>::__deallocate_node(*((_QWORD **)this + 5));
    *((_QWORD *)this + 5) = 0;
    v3 = *((_QWORD *)this + 4);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v2 + 8 * i) = 0;
    }
    *((_QWORD *)this + 6) = 0;
  }
  std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>>::reset[abi:ne180100]((uint64_t *)this + 2, 0);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>>>::~__hash_table((uint64_t)v2);
  std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>>::reset[abi:ne180100]((uint64_t *)this + 2, 0);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void DSPGraph::Profiler::copyStatistics(DSPGraph::Profiler *this@<X0>, CFDictionaryRef *a2@<X8>)
{
  char *v4;
  _QWORD *i;
  uint64_t v6;
  char *v7;
  uint64_t v8[14];
  uint64_t v9[14];
  const void *v10;
  void **v11[3];
  void ***v12;

  memset(v11, 0, sizeof(v11));
  v4 = (char *)(*(_QWORD *)this + 408);
  if (*(char *)(*(_QWORD *)this + 431) < 0)
    v4 = *(char **)v4;
  v12 = (void ***)v4;
  DSPGraph::Metrics::getStatistics(v9, *(_QWORD *)(*((_QWORD *)this + 2) + 8));
  DSPGraph::Profiler::copyStatistics(void)const::$_0::operator()((CFDictionaryRef *)&v10, v9);
  std::vector<applesauce::CF::TypeRefPair>::emplace_back<char const*,applesauce::CF::DictionaryRef>(v11, (char **)&v12, &v10);
  if (v10)
    CFRelease(v10);
  for (i = (_QWORD *)*((_QWORD *)this + 5); i; i = (_QWORD *)*i)
  {
    v6 = DSPGraph::Graph::box(*(int8x8_t **)this, i[2]);
    v7 = (char *)(v6 + 32);
    if (*(char *)(v6 + 55) < 0)
      v7 = *(char **)v7;
    v12 = (void ***)v7;
    DSPGraph::Metrics::getStatistics(v8, *(_QWORD *)(i[3] + 8));
    DSPGraph::Profiler::copyStatistics(void)const::$_0::operator()((CFDictionaryRef *)&v10, v8);
    std::vector<applesauce::CF::TypeRefPair>::emplace_back<char const*,applesauce::CF::DictionaryRef>(v11, (char **)&v12, &v10);
    if (v10)
      CFRelease(v10);
  }
  *a2 = applesauce::CF::details::make_CFDictionaryRef(v11);
  v12 = v11;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_18EEE7F2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 40) = v1 - 64;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 40));
  _Unwind_Resume(a1);
}

void DSPGraph::Profiler::copyStatistics(void)const::$_0::operator()(CFDictionaryRef *a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;
  const void *v6;
  std::runtime_error *exception;
  int v8;
  _QWORD v9[2];
  uint64_t valuePtr;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)v11, "WNumBlocks", a2);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v12, "WNumFrames", a2 + 1);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v13, "WCPUTime", a2 + 2);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v14, "WCPUCycleCount", a2 + 3);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v15, "WCPUInstrCount", a2 + 4);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v16, "WWallClockTime", a2 + 5);
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v17, "WPeakCPU");
  valuePtr = a2[6];
  if (!CFNumberCreate(0, kCFNumberDoubleType, &valuePtr))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v19, "WPeakCPUBlockNum", a2 + 7);
  LODWORD(valuePtr) = 0;
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned int>((applesauce::CF::TypeRef *)&v20, "WAvgMemDelta", (int *)&valuePtr);
  v8 = 0;
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned int>((applesauce::CF::TypeRef *)&v21, "CurrMem", &v8);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v22, "TNumBlocks", a2 + 8);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v23, "TNumFrames", a2 + 9);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v24, "TCPUTime", a2 + 10);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v25, "TCPUCycleCount", a2 + 11);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v26, "TCPUInstrCount", a2 + 12);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)v27, "TWallClockTime", a2 + 13);
  v9[0] = v11;
  v9[1] = 16;
  v4 = 0;
  *a1 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v9);
  do
  {
    v5 = *(const void **)&v27[v4 + 8];
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)&v27[v4];
    if (v6)
      CFRelease(v6);
    v4 -= 16;
  }
  while (v4 != -256);
}

void sub_18EEE820C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,CFTypeRef a27)
{
  const void **v27;

  if (a27)
    CFRelease(a27);
  applesauce::CF::TypeRef::~TypeRef(v27);
  while (v27 != (const void **)&a14)
  {
    v27 -= 2;
    applesauce::CF::TypeRefPair::~TypeRefPair((applesauce::CF::TypeRefPair *)v27);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<char const*,applesauce::CF::DictionaryRef>(_QWORD *a1, char **a2, const void **a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  applesauce::CF::TypeRef *v17;
  applesauce::CF::TypeRef *v18;
  unint64_t v19;
  _QWORD *v20;

  v6 = a1 + 2;
  v7 = a1[2];
  v8 = a1[1];
  if (v8 >= v7)
  {
    v11 = (uint64_t)(v8 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v7 - *a1;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v20 = v6;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v14);
    else
      v15 = 0;
    v16 = v14;
    v17 = (applesauce::CF::TypeRef *)(v14 + 16 * v11);
    v18 = v17;
    v19 = v14 + 16 * v15;
    applesauce::CF::TypeRefPair::TypeRefPair<char const*,applesauce::CF::DictionaryRef>(v17, *a2, a3);
    v18 = (applesauce::CF::TypeRef *)((char *)v17 + 16);
    std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__swap_out_circular_buffer(a1, &v16);
    v10 = a1[1];
    result = std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v16);
  }
  else
  {
    result = (uint64_t)applesauce::CF::TypeRefPair::TypeRefPair<char const*,applesauce::CF::DictionaryRef>((applesauce::CF::TypeRef *)a1[1], *a2, a3);
    v10 = v8 + 16;
    a1[1] = v8 + 16;
  }
  a1[1] = v10;
  return result;
}

void sub_18EEE83C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const*,applesauce::CF::DictionaryRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>(applesauce::CF::TypeRef *a1, char *a2, uint64_t *a3)
{
  CFNumberRef v5;
  std::runtime_error *exception;
  uint64_t valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_18EEE84B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned int>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  std::runtime_error *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_18EEE8578(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void **v7;
  void **v8;
  void **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void **v15;
  void *v16;
  void *v17;
  void **v18;
  void **v19;
  void **v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void **v26;
  void *v27;
  void **v28;
  void **v29;
  CFDictionaryRef v30;
  std::runtime_error *exception;
  void **values;
  void **v34;
  unint64_t v35;
  void **keys;
  void **v37;
  unint64_t v38;

  v2 = *(_QWORD *)(a1 + 8);
  keys = 0;
  v37 = 0;
  v38 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  v34 = 0;
  v35 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(void ***)a1;
    v5 = *(_QWORD *)a1 + 16 * v3;
    do
    {
      v6 = *v4;
      v7 = v37;
      if ((unint64_t)v37 >= v38)
      {
        v9 = keys;
        v10 = v37 - keys;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v12 = v38 - (_QWORD)keys;
        if ((uint64_t)(v38 - (_QWORD)keys) >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v13);
        else
          v14 = 0;
        v15 = (void **)(v13 + 8 * v10);
        *v15 = v6;
        v8 = v15 + 1;
        if (v7 != v9)
        {
          do
          {
            v16 = *--v7;
            *--v15 = v16;
          }
          while (v7 != v9);
          v7 = keys;
        }
        keys = v15;
        v38 = v13 + 8 * v14;
        if (v7)
          operator delete(v7);
      }
      else
      {
        *v37 = v6;
        v8 = v7 + 1;
      }
      v37 = v8;
      v17 = v4[1];
      v18 = v34;
      if ((unint64_t)v34 >= v35)
      {
        v20 = values;
        v21 = v34 - values;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v23 = v35 - (_QWORD)values;
        if ((uint64_t)(v35 - (_QWORD)values) >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
          v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v24);
        else
          v25 = 0;
        v26 = (void **)(v24 + 8 * v21);
        *v26 = v17;
        v19 = v26 + 1;
        if (v18 != v20)
        {
          do
          {
            v27 = *--v18;
            *--v26 = v27;
          }
          while (v18 != v20);
          v18 = values;
        }
        values = v26;
        v35 = v24 + 8 * v25;
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v34 = v17;
        v19 = v18 + 1;
      }
      v34 = v19;
      v4 += 2;
    }
    while (v4 != (void **)v5);
  }
  v28 = keys;
  v29 = values;
  v30 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v30)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (v29)
    operator delete(v29);
  if (v28)
    operator delete(v28);
  return v30;
}

void sub_18EEE881C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  __cxa_free_exception(v12);
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void applesauce::CF::TypeRefPair::~TypeRefPair(applesauce::CF::TypeRefPair *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

void AudioFileRestrictedHandle::~AudioFileRestrictedHandle(AudioFileID *this)
{
  AudioFileRestrictedHandle::~AudioFileRestrictedHandle(this);
  JUMPOUT(0x193FFE460);
}

{
  OpaqueAudioFileID *v2;

  *this = (AudioFileID)&off_1E2908E40;
  if (*((_BYTE *)this + 96))
  {
    AudioFileClose(this[11]);
    if (*((_BYTE *)this + 96))
      *((_BYTE *)this + 96) = 0;
  }
  v2 = this[8];
  if (v2)
  {
    this[9] = v2;
    operator delete(v2);
  }
  BaseOpaqueObject::~BaseOpaqueObject((BaseOpaqueObject *)this);
}

uint64_t AudioFileRestrictedHandle::PrintObject(AudioFileRestrictedHandle *this, __sFILE *a2)
{
  return fprintf(a2, "< AudioFile (restricted) %d [%p] >\n", *((_DWORD *)this + 2), this);
}

uint64_t AudioFileRestrictedHandle::AFAPI_CreateURL(AudioFileRestrictedHandle *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  return 1869627199;
}

uint64_t AudioFileRestrictedHandle::AFAPI_Initialize(AudioFileRestrictedHandle *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  return 1869627199;
}

uint64_t AudioFileRestrictedHandle::AFAPI_OpenURL(AudioFileRestrictedHandle *this, const __CFURL *a2)
{
  return 1869627199;
}

uint64_t AudioFileRestrictedHandle::AFAPI_OpenWithCallbacks(AudioFileRestrictedHandle *this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*a4)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*a5)(void *), int (*a6)(void *, uint64_t))
{
  return 1869627199;
}

uint64_t AudioFileRestrictedHandle::AFAPI_InitializeWithCallbacks(AudioFileRestrictedHandle *this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*a4)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*a5)(void *), int (*a6)(void *, uint64_t), unsigned int a7, const AudioStreamBasicDescription *a8, unsigned int a9)
{
  return 1869627199;
}

uint64_t AudioFileRestrictedHandle::AFAPI_Close(AudioFileRestrictedHandle *this)
{
  uint64_t result;

  if (!*((_BYTE *)this + 96))
    return 4294967258;
  result = AudioFileClose(*((AudioFileID *)this + 11));
  if (*((_BYTE *)this + 96))
    *((_BYTE *)this + 96) = 0;
  return result;
}

uint64_t AudioFileRestrictedHandle::AFAPI_Optimize(AudioFileID *this)
{
  if (*((_BYTE *)this + 96))
    return AudioFileOptimize(this[11]);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_ReadBytes(AudioFileID *this, Boolean a2, SInt64 a3, unsigned int *a4, void *a5)
{
  if (*((_BYTE *)this + 96))
    return AudioFileReadBytes(this[11], a2, a3, a4, a5);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_WriteBytes(AudioFileID *this, Boolean a2, SInt64 a3, unsigned int *a4, const void *a5)
{
  if (*((_BYTE *)this + 96))
    return AudioFileWriteBytes(this[11], a2, a3, a4, a5);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_ReadPackets(AudioFileID *this, Boolean a2, unsigned int *a3, AudioStreamPacketDescription *a4, SInt64 a5, unsigned int *a6, void *a7)
{
  if (*((_BYTE *)this + 96))
    return AudioFileReadPackets(this[11], a2, a3, a4, a5, a6, a7);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_ReadPacketData(AudioFileID *this, Boolean a2, unsigned int *a3, AudioStreamPacketDescription *a4, SInt64 a5, unsigned int *a6, void *a7)
{
  if (*((_BYTE *)this + 96))
    return AudioFileReadPacketData(this[11], a2, a3, a4, a5, a6, a7);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_WritePackets(AudioFileID *this, Boolean a2, UInt32 a3, const AudioStreamPacketDescription *a4, SInt64 a5, unsigned int *a6, const void *a7)
{
  if (*((_BYTE *)this + 96))
    return AudioFileWritePackets(this[11], a2, a3, a4, a5, a6, a7);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_WritePacketsWithDependencyInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(a1 + 96))
    return AudioFileWritePacketsWithDependencyInfo(*(_QWORD *)(a1 + 88), a2, a3, a4, a5, a6, a7, a8);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_GetPropertyInfo(AudioFileID *this, AudioFilePropertyID a2, unsigned int *a3, unsigned int *a4)
{
  if (*((_BYTE *)this + 96))
    return AudioFileGetPropertyInfo(this[11], a2, a3, a4);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_GetProperty(AudioFileID *this, AudioFilePropertyID a2, unsigned int *a3, void *a4)
{
  if (*((_BYTE *)this + 96))
    return AudioFileGetProperty(this[11], a2, a3, a4);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_SetProperty(AudioFileRestrictedHandle *this, AudioFilePropertyID a2, UInt32 a3, CFDictionaryRef *inPropertyData)
{
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t AudioFileFormatRegistry;
  uint64_t v11;
  uint64_t v12;
  AudioFileFormatRegistry *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  AudioFileFormatBase *v17;
  uint64_t v18;
  unsigned int *v19;
  char v20;
  __int128 *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  AudioFileFormatBase *v25;
  uint64_t v26;
  unsigned int *v27;
  int v28;
  const void *v29;
  void *v30[3];
  void *v31;
  void *v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  void *__p;
  void *v37;
  uint64_t v38;
  char v39[8];
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  int v43[19];
  unsigned int v44;
  void *v45[4];

  if (a2 == 1634495607)
  {
    if (a3 < 8)
      return 561211770;
    std::vector<unsigned char>::vector(v45, 0x2000uLL);
    v8 = 0;
    v44 = 0;
    v6 = (uint64_t)v45[0];
    do
    {
      v6 = (*((uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, unsigned int *))this + 4))(*((_QWORD *)this + 3), v8, 0x2000, v6, &v44);
      if ((_DWORD)v6)
        goto LABEL_58;
      if (v44 < 0xA)
        break;
      v6 = (uint64_t)v45[0];
      v9 = ID3Size(v44, (const unsigned __int8 *)v45[0], v43);
      v8 += v9;
    }
    while (v9);
    AudioFileAllowListFilter::AudioFileAllowListFilter((AudioFileAllowListFilter *)v43, *inPropertyData);
    AudioFileFormatRegistry = GetAudioFileFormatRegistry();
    v11 = *((_QWORD *)this + 8);
    v12 = *((_QWORD *)this + 9);
    if (v11 == v12)
      goto LABEL_42;
    v13 = (AudioFileFormatRegistry *)AudioFileFormatRegistry;
    while (1)
    {
      AudioFileAllowListFilter::GetAllowedTypes((uint64_t)&v41, (uint64_t)v43, v11);
      v15 = v41;
      v14 = v42;
      v16 = v41;
      if (v41 == v42)
      {
        v20 = 1;
        if (v41)
          goto LABEL_28;
        goto LABEL_29;
      }
      while (1)
      {
        v17 = (AudioFileFormatBase *)AudioFileFormatRegistry::Get(v13, *v16);
        if ((*(unsigned int (**)(AudioFileFormatBase *, _QWORD, void *))(*(_QWORD *)v17 + 24))(v17, v44, v45[0]) != 1)goto LABEL_17;
        v18 = NewAudioFileHandle(v17);
        v19 = (unsigned int *)v18;
        if (!v18)
          goto LABEL_17;
        if (!(*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v18 + 56))(v18, *((_QWORD *)this + 3), *((_QWORD *)this + 4), *((_QWORD *)this + 5), *((_QWORD *)this + 6), *((_QWORD *)this + 7)))break;
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
LABEL_17:
        if (++v16 == v14)
        {
          v20 = 1;
          goto LABEL_27;
        }
      }
      LODWORD(v35) = 40;
      if ((*(unsigned int (**)(unsigned int *, uint64_t, __int128 *, char *))(*(_QWORD *)v19 + 144))(v19, 1684434292, &v35, v39)|| !AudioFileAllowListFilter::IsDataFormatAllowed((AudioFileAllowListFilter *)v43, v40))
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
        __p = 0;
        v37 = 0;
        v38 = 0;
        std::vector<AudioFileInfo>::__init_with_size[abi:ne180100]<AudioFileInfo*,AudioFileInfo*>(&__p, *((const void **)this + 8), *((_QWORD *)this + 9), (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 4);
        v6 = 1718449215;
        if (__p)
        {
          v37 = __p;
          operator delete(__p);
        }
      }
      else
      {
        v6 = 0;
        *((_QWORD *)this + 11) = v19[2];
        *((_BYTE *)this + 96) = 1;
      }
      v20 = 0;
LABEL_27:
      v15 = v41;
      if (v41)
LABEL_28:
        operator delete(v15);
LABEL_29:
      if ((v20 & 1) == 0)
        goto LABEL_57;
      v11 += 16;
      if (v11 == v12)
      {
        v21 = (__int128 *)*((_QWORD *)this + 8);
        v11 = *((_QWORD *)this + 9);
        if (v21 != (__int128 *)v11)
        {
          v35 = *v21;
          AudioFileAllowListFilter::GetAllowedTypes((uint64_t)&v41, (uint64_t)v43, (uint64_t)&v35);
          v22 = v41;
          v23 = v42;
          if (v41 == v42)
          {
            v28 = 1;
            goto LABEL_53;
          }
          v24 = v41;
          while (1)
          {
            v25 = (AudioFileFormatBase *)AudioFileFormatRegistry::Get(v13, *v24);
            if ((*(unsigned int (**)(AudioFileFormatBase *, _QWORD, void *))(*(_QWORD *)v25 + 24))(v25, v44, v45[0]))
            {
              v26 = NewAudioFileHandle(v25);
              v27 = (unsigned int *)v26;
              if (v26)
              {
                if (!(*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v26 + 56))(v26, *((_QWORD *)this + 3), *((_QWORD *)this + 4), *((_QWORD *)this + 5), *((_QWORD *)this + 6), *((_QWORD *)this + 7)))
                {
                  v34 = 40;
                  v6 = 1718449215;
                  if ((*(unsigned int (**)(unsigned int *, uint64_t, int *, char *))(*(_QWORD *)v27 + 144))(v27, 1684434292, &v34, v39)|| !AudioFileAllowListFilter::IsDataFormatAllowed((AudioFileAllowListFilter *)v43, v40))
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
                    v31 = 0;
                    v32 = 0;
                    v33 = 0;
                    std::vector<AudioFileInfo>::__init_with_size[abi:ne180100]<AudioFileInfo*,AudioFileInfo*>(&v31, *((const void **)this + 8), *((_QWORD *)this + 9), (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 4);
                    if (v31)
                    {
                      v32 = v31;
                      operator delete(v31);
                    }
                  }
                  else
                  {
                    v6 = 0;
                    *((_QWORD *)this + 11) = v27[2];
                    *((_BYTE *)this + 96) = 1;
                  }
                  v28 = 0;
LABEL_52:
                  v22 = v41;
LABEL_53:
                  if (v22)
                    operator delete(v22);
                  if (v28)
                  {
                    v29 = (const void *)*((_QWORD *)this + 8);
                    v11 = *((_QWORD *)this + 9);
                    goto LABEL_43;
                  }
                  goto LABEL_57;
                }
                (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
              }
            }
            if (++v24 == v23)
            {
              v28 = 1;
              goto LABEL_52;
            }
          }
        }
LABEL_42:
        v29 = (const void *)v11;
LABEL_43:
        memset(v30, 0, sizeof(v30));
        std::vector<AudioFileInfo>::__init_with_size[abi:ne180100]<AudioFileInfo*,AudioFileInfo*>(v30, v29, v11, (v11 - (uint64_t)v29) >> 4);
        v6 = 1954115647;
        if (v30[0])
          operator delete(v30[0]);
LABEL_57:
        AudioFileAllowListFilter::~AudioFileAllowListFilter((AudioFileAllowListFilter *)v43);
LABEL_58:
        if (v45[0])
        {
          v45[1] = v45[0];
          operator delete(v45[0]);
        }
        return v6;
      }
    }
  }
  if (!*((_BYTE *)this + 96))
    return 4294967258;
  return AudioFileSetProperty(*((AudioFileID *)this + 11), a2, a3, inPropertyData);
}

void sub_18EEE8EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;

  if (__p)
    operator delete(__p);
  AudioFileAllowListFilter::~AudioFileAllowListFilter((AudioFileAllowListFilter *)&a31);
  v33 = *(void **)(v31 - 112);
  if (v33)
  {
    *(_QWORD *)(v31 - 104) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t AudioFileRestrictedHandle::AFAPI_CountUserData(AudioFileID *this, UInt32 a2, unsigned int *a3)
{
  if (*((_BYTE *)this + 96))
    return AudioFileCountUserData(this[11], a2, a3);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_GetUserDataSize(AudioFileID *this, UInt32 a2, UInt32 a3, unsigned int *a4)
{
  if (*((_BYTE *)this + 96))
    return AudioFileGetUserDataSize(this[11], a2, a3, a4);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_GetUserDataSize64(AudioFileID *this, UInt32 a2, UInt32 a3, unint64_t *a4)
{
  if (*((_BYTE *)this + 96))
    return AudioFileGetUserDataSize64(this[11], a2, a3, a4);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_GetUserData(AudioFileID *this, UInt32 a2, UInt32 a3, unsigned int *a4, void *a5)
{
  if (*((_BYTE *)this + 96))
    return AudioFileGetUserData(this[11], a2, a3, a4, a5);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_GetUserDataAtOffset(AudioFileID *this, UInt32 a2, UInt32 a3, SInt64 a4, unsigned int *a5, void *a6)
{
  if (*((_BYTE *)this + 96))
    return AudioFileGetUserDataAtOffset(this[11], a2, a3, a4, a5, a6);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_SetUserData(AudioFileID *this, UInt32 a2, UInt32 a3, UInt32 a4, const void *a5)
{
  if (*((_BYTE *)this + 96))
    return AudioFileSetUserData(this[11], a2, a3, a4, a5);
  else
    return 4294967258;
}

uint64_t AudioFileRestrictedHandle::AFAPI_RemoveUserData(AudioFileID *this, UInt32 a2, UInt32 a3)
{
  if (*((_BYTE *)this + 96))
    return AudioFileRemoveUserData(this[11], a2, a3);
  else
    return 4294967258;
}

_QWORD *std::vector<AudioFileInfo>::__init_with_size[abi:ne180100]<AudioFileInfo*,AudioFileInfo*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<AudioFileInfo>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18EEE908C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<AudioFileInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 60)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(16 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * a2];
  return result;
}

void AudioFileIPODLibHandle::~AudioFileIPODLibHandle(AudioFileIPODLibHandle *this)
{
  AudioFileIPODLibHandle::~AudioFileIPODLibHandle(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E29088E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 3) = 0;
  }
  SharedAudioBufferList::~SharedAudioBufferList((AudioFileIPODLibHandle *)((char *)this + 32));
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

uint64_t AudioFileIPODLibHandle::PrintObject(AudioFileIPODLibHandle *this, __sFILE *a2)
{
  return fprintf(a2, "< AudioFile (ipod-library) %d [%p] >\n", *((_DWORD *)this + 2), this);
}

uint64_t AudioFileIPODLibHandle::AFAPI_CreateURL(AudioFileIPODLibHandle *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_Initialize(AudioFileIPODLibHandle *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_OpenURL(AudioFileIPODLibHandle *this, const __CFURL *a2)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_OpenWithCallbacks(AudioFileIPODLibHandle *this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*a4)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*a5)(void *), int (*a6)(void *, uint64_t))
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_InitializeWithCallbacks(AudioFileIPODLibHandle *this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*a4)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*a5)(void *), int (*a6)(void *, uint64_t), unsigned int a7, const AudioStreamBasicDescription *a8, unsigned int a9)
{
  return 1886547263;
}

int64_t AudioFileIPODLibHandle::AFAPI_Close(AudioFileIPODLibHandle *this)
{
  xpc_object_t v2;
  uint64_t v3;
  xpc_connection_t *v4;
  xpc_object_t v5;
  void *v6;
  BOOL v7;
  int64_t v9;
  xpc_object_t value;
  void *v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  xpc_object_t message;
  char v17;

  v2 = xpc_dictionary_create(0, 0, 0);
  v17 = 1;
  v3 = MEMORY[0x1E0DDF088];
  v15 = MEMORY[0x1E0DDF088] + 16;
  message = v2;
  if (v2)
    xpc_dictionary_set_uint64(v2, "type", 0x636C6F73uLL);
  v4 = (xpc_connection_t *)*((_QWORD *)this + 3);
  if (!v4[1])
    goto LABEL_17;
  v5 = xpc_connection_send_message_with_reply_sync(v4[1], message);
  v6 = v5;
  if (v5)
    v7 = v5 == (xpc_object_t)MEMORY[0x1E0C81258];
  else
    v7 = 1;
  if (v7 || v5 == (xpc_object_t)MEMORY[0x1E0C81260])
  {
    if (!v5)
    {
LABEL_16:
      v4 = (xpc_connection_t *)*((_QWORD *)this + 3);
      if (!v4)
      {
LABEL_18:
        *((_QWORD *)this + 3) = 0;
        XPC_Object::~XPC_Object((XPC_Object *)&v15);
        return 2003334207;
      }
LABEL_17:
      (*((void (**)(xpc_connection_t *))*v4 + 1))(v4);
      goto LABEL_18;
    }
LABEL_15:
    xpc_release(v6);
    goto LABEL_16;
  }
  if (object_getClass(v5) != (Class)MEMORY[0x1E0C812F8])
    goto LABEL_15;
  v14 = 1;
  v13[0] = v3 + 16;
  v13[1] = v6;
  value = xpc_dictionary_get_value(v6, "status");
  v12 = value;
  if (!value || object_getClass(value) != (Class)MEMORY[0x1E0C81328] || (v9 = xpc_int64_get_value(v12), !(_DWORD)v9))
    v9 = 0;
  XPC_Object::~XPC_Object((XPC_Object *)v13);
  XPC_Object::~XPC_Object((XPC_Object *)&v15);
  return v9;
}

void sub_18EEE9340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  XPC_Object::~XPC_Object((XPC_Object *)&a9);
  XPC_Object::~XPC_Object((XPC_Object *)&a12);
  _Unwind_Resume(a1);
}

uint64_t AudioFileIPODLibHandle::AFAPI_Optimize(AudioFileIPODLibHandle *this)
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_ReadBytes(AudioFileIPODLibHandle *this, unsigned __int8 a2, uint64_t a3, unsigned int *a4, void *a5)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_WriteBytes(AudioFileIPODLibHandle *this, unsigned __int8 a2, uint64_t a3, unsigned int *a4, const void *a5)
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_ReadPackets(AudioFileIPODLibHandle *this, unsigned __int8 a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  return 4294967292;
}

int64_t AudioFileIPODLibHandle::AFAPI_ReadPacketData(AudioFileIPODLibHandle *this, unsigned __int8 a2, unsigned int *a3, AudioStreamPacketDescription *a4, int64_t a5, unsigned int *a6, void *a7)
{
  xpc_object_t v13;
  uint64_t v14;
  xpc_connection_t *v15;
  xpc_object_t v16;
  void *v17;
  BOOL v18;
  int64_t v20;
  xpc_object_t value;
  void *v23;
  xpc_object_t v24;
  void *v25;
  xpc_object_t v26;
  void *v27;
  objc_class *v28;
  xpc_object_t v29;
  void *v30;
  xpc_object_t v31;
  void *v32;
  int v33;
  int inited;
  unsigned int *v35;
  unsigned int v36;
  char *v37;
  unsigned int v38;
  _DWORD *v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  const void *v45;
  std::bad_alloc *exception;
  std::bad_alloc *v47;
  void (**v48)(SharableMemoryBlock::FDClientToken *__hidden);
  uint64_t v49;
  int v50;
  char v51;
  uint64_t v52;
  xpc_object_t v53;
  char v54;
  uint64_t v55;
  xpc_object_t xdict;
  char v57;
  uint8_t buf[4];
  const char *v59;
  __int16 v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v13 = xpc_dictionary_create(0, 0, 0);
  v57 = 1;
  v14 = MEMORY[0x1E0DDF088];
  v55 = MEMORY[0x1E0DDF088] + 16;
  xdict = v13;
  if (v13)
  {
    xpc_dictionary_set_uint64(v13, "type", 0x72656164uLL);
    xpc_dictionary_set_uint64(xdict, "numbytes", *a3);
    xpc_dictionary_set_uint64(xdict, "numpackets", *a6);
    xpc_dictionary_set_int64(xdict, "startingPacket", a5);
  }
  v15 = (xpc_connection_t *)*((_QWORD *)this + 3);
  if (!v15[1])
    goto LABEL_17;
  v16 = xpc_connection_send_message_with_reply_sync(v15[1], xdict);
  v17 = v16;
  if (v16)
    v18 = v16 == (xpc_object_t)MEMORY[0x1E0C81258];
  else
    v18 = 1;
  if (!v18 && v16 != (xpc_object_t)MEMORY[0x1E0C81260])
  {
    if (object_getClass(v16) != (Class)MEMORY[0x1E0C812F8])
      goto LABEL_15;
    v54 = 1;
    v52 = v14 + 16;
    v53 = v17;
    value = xpc_dictionary_get_value(v17, "status");
    v23 = value;
    if (value)
    {
      if (object_getClass(value) == (Class)MEMORY[0x1E0C81328])
      {
        v20 = xpc_int64_get_value(v23);
        if ((_DWORD)v20)
        {
LABEL_58:
          XPC_Object::~XPC_Object((XPC_Object *)&v52);
          XPC_Object::~XPC_Object((XPC_Object *)&v55);
          return v20;
        }
      }
    }
    if (v53)
    {
      v24 = xpc_dictionary_get_value(v53, "status");
      v25 = v24;
      if (v24 && object_getClass(v24) == (Class)MEMORY[0x1E0C81328])
        xpc_int64_get_value(v25);
      v26 = xpc_dictionary_get_value(v53, "numbytes");
      v27 = v26;
      v28 = (objc_class *)MEMORY[0x1E0C81398];
      if (v26 && object_getClass(v26) == v28)
        *a3 = xpc_uint64_get_value(v27);
      if (v53)
      {
        v29 = xpc_dictionary_get_value(v53, "numpackets");
        v30 = v29;
        if (v29)
        {
          if (object_getClass(v29) == v28)
            *a6 = xpc_uint64_get_value(v30);
        }
      }
    }
    v49 = 2;
    v48 = &off_1E2909F20;
    v50 = -1;
    v51 = 1;
    if (!v53)
      goto LABEL_36;
    v31 = xpc_dictionary_get_value(v53, "bufsize");
    v32 = v31;
    if (!v31)
      goto LABEL_37;
    if (object_getClass(v31) == (Class)MEMORY[0x1E0C81398])
      LODWORD(v32) = xpc_uint64_get_value(v32);
    else
LABEL_36:
      LODWORD(v32) = 0;
LABEL_37:
    v33 = xpc_dictionary_dup_fd(v53, "bufFD");
    if (v33 >= 1)
    {
      HIDWORD(v49) = (_DWORD)v32;
      v50 = v33;
    }
    if (*((_BYTE *)this + 88))
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v59 = "SharedAudioBufferList.h";
        v60 = 1024;
        v61 = 195;
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE [(!mIsServer) != 0 is false]: ", buf, 0x12u);
      }
      __break(1u);
    }
    if (((BOOL (*)(SharableMemoryBlock::FDClientToken *))v48[2])((SharableMemoryBlock::FDClientToken *)&v48))
    {
      (*(void (**)(char *))(*((_QWORD *)this + 4) + 16))((char *)this + 32);
      inited = SharableMemoryBlock::InitClient();
      if (inited)
        AudioFileIPODLibHandle::Fail(this, inited);
    }
    v35 = (unsigned int *)*((_QWORD *)this + 7);
    v36 = *v35;
    v37 = (char *)*((_QWORD *)this + 12);
    if (v37)
    {
      v38 = *(_DWORD *)v37;
      if (*(_DWORD *)v37 >= v36)
      {
LABEL_47:
        if (v36 - 1 >= v38)
        {
          v45 = 0;
        }
        else
        {
          v39 = v35 + 8;
          *(_DWORD *)v37 = v36;
          v40 = v37 + 16;
          v42 = v35[2];
          v41 = v35[3];
          v43 = v35[1];
          v44 = v36;
          do
          {
            *v40 = v39;
            v39 = (_DWORD *)((char *)v39 + v42);
            *((_DWORD *)v40 - 2) = v43;
            *((_DWORD *)v40 - 1) = v41;
            v40 += 2;
            --v44;
          }
          while (v44);
          if (v35[4])
            v45 = v39;
          else
            v45 = 0;
        }
        memcpy(a7, *((const void **)v37 + 2), *a3);
        if (a4 && v45)
          memcpy(a4, v45, 16 * *a6);
        SharableMemoryBlock::FDClientToken::~FDClientToken((SharableMemoryBlock::FDClientToken *)&v48);
        v20 = 0;
        goto LABEL_58;
      }
      free(v37);
      *((_QWORD *)this + 12) = 0;
    }
    v37 = (char *)malloc_type_malloc(16 * (v36 - 1) + 24, 0x7C51E058uLL);
    if (!v37)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v47 = std::bad_alloc::bad_alloc(exception);
    }
    *((_QWORD *)this + 12) = v37;
    *(_DWORD *)v37 = v36;
    v35 = (unsigned int *)*((_QWORD *)this + 7);
    v38 = v36;
    v36 = *v35;
    goto LABEL_47;
  }
  if (v16)
LABEL_15:
    xpc_release(v17);
  v15 = (xpc_connection_t *)*((_QWORD *)this + 3);
  if (v15)
LABEL_17:
    (*((void (**)(xpc_connection_t *))*v15 + 1))(v15);
  *((_QWORD *)this + 3) = 0;
  XPC_Object::~XPC_Object((XPC_Object *)&v55);
  return 2003334207;
}

void sub_18EEE987C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  SharableMemoryBlock::FDClientToken::~FDClientToken((SharableMemoryBlock::FDClientToken *)va);
  XPC_Object::~XPC_Object((XPC_Object *)va1);
  XPC_Object::~XPC_Object((XPC_Object *)va2);
  _Unwind_Resume(a1);
}

uint64_t AudioFileIPODLibHandle::AFAPI_WritePackets(AudioFileIPODLibHandle *this, unsigned __int8 a2, unsigned int a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, const void *a7)
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_WritePacketsWithDependencyInfo()
{
  return 1886547263;
}

int64_t AudioFileIPODLibHandle::AFAPI_GetPropertyInfo(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  xpc_object_t v8;
  uint64_t v9;
  xpc_connection_t *v10;
  xpc_object_t v11;
  void *v12;
  BOOL v13;
  int64_t v15;
  xpc_object_t value;
  void *v18;
  xpc_object_t v19;
  void *v20;
  xpc_object_t v21;
  void *v22;
  uint64_t v23;
  xpc_object_t v24;
  char v25;
  uint64_t v26;
  xpc_object_t xdict;
  char v28;

  if ((IsBinaryProperty(a2) & 1) == 0 && a2 != 1633776244 && a2 != 1819243876 && a2 != 1768842863)
    return 1886681407;
  v8 = xpc_dictionary_create(0, 0, 0);
  v28 = 1;
  v9 = MEMORY[0x1E0DDF088];
  v26 = MEMORY[0x1E0DDF088] + 16;
  xdict = v8;
  if (v8)
  {
    xpc_dictionary_set_uint64(v8, "type", 0x696E666FuLL);
    xpc_dictionary_set_uint64(xdict, "selector", a2);
  }
  v10 = (xpc_connection_t *)*((_QWORD *)this + 3);
  if (!v10[1])
    goto LABEL_22;
  v11 = xpc_connection_send_message_with_reply_sync(v10[1], xdict);
  v12 = v11;
  if (v11)
    v13 = v11 == (xpc_object_t)MEMORY[0x1E0C81258];
  else
    v13 = 1;
  if (v13 || v11 == (xpc_object_t)MEMORY[0x1E0C81260])
  {
    if (!v11)
    {
LABEL_21:
      v10 = (xpc_connection_t *)*((_QWORD *)this + 3);
      if (!v10)
      {
LABEL_23:
        *((_QWORD *)this + 3) = 0;
        XPC_Object::~XPC_Object((XPC_Object *)&v26);
        return 2003334207;
      }
LABEL_22:
      (*((void (**)(xpc_connection_t *))*v10 + 1))(v10);
      goto LABEL_23;
    }
LABEL_20:
    xpc_release(v12);
    goto LABEL_21;
  }
  if (object_getClass(v11) != (Class)MEMORY[0x1E0C812F8])
    goto LABEL_20;
  v25 = 1;
  v23 = v9 + 16;
  v24 = v12;
  value = xpc_dictionary_get_value(v12, "status");
  v18 = value;
  if (!value || object_getClass(value) != (Class)MEMORY[0x1E0C81328] || (v15 = xpc_int64_get_value(v18), !(_DWORD)v15))
  {
    if (a4)
    {
      if (v24)
      {
        v19 = xpc_dictionary_get_value(v24, "writable");
        v20 = v19;
        if (v19)
        {
          if (object_getClass(v19) == (Class)MEMORY[0x1E0C81398])
            *a4 = xpc_uint64_get_value(v20);
        }
      }
    }
    if (a3
      && v24
      && (v21 = xpc_dictionary_get_value(v24, "size"), (v22 = v21) != 0)
      && object_getClass(v21) == (Class)MEMORY[0x1E0C81398])
    {
      v15 = 0;
      *a3 = xpc_uint64_get_value(v22);
    }
    else
    {
      v15 = 0;
    }
  }
  XPC_Object::~XPC_Object((XPC_Object *)&v23);
  XPC_Object::~XPC_Object((XPC_Object *)&v26);
  return v15;
}

void sub_18EEE9B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  XPC_Object::~XPC_Object((XPC_Object *)&a9);
  XPC_Object::~XPC_Object((XPC_Object *)&a12);
  _Unwind_Resume(a1);
}

int64_t AudioFileIPODLibHandle::AFAPI_GetProperty(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int *a3, _QWORD *a4)
{
  int v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_connection_t *v11;
  xpc_object_t v12;
  void *v13;
  BOOL v14;
  int64_t v16;
  xpc_object_t value;
  void *v19;
  xpc_object_t v20;
  void *v21;
  size_t length;
  const void *bytes_ptr;
  size_t v24;
  CFPropertyListRef v25;
  CFDataRef v26;
  char v27;
  uint64_t v28;
  xpc_object_t v29;
  char v30;
  uint64_t v31;
  xpc_object_t xdict;
  char v33;

  v8 = IsBinaryProperty(a2);
  if ((v8 & 1) == 0 && a2 != 1633776244 && a2 != 1819243876 && a2 != 1768842863)
    return 1886681407;
  v9 = xpc_dictionary_create(0, 0, 0);
  v33 = 1;
  v10 = MEMORY[0x1E0DDF088];
  v31 = MEMORY[0x1E0DDF088] + 16;
  xdict = v9;
  if (v9)
  {
    xpc_dictionary_set_uint64(v9, "type", 0x70726F70uLL);
    xpc_dictionary_set_uint64(xdict, "selector", a2);
  }
  v11 = (xpc_connection_t *)*((_QWORD *)this + 3);
  if (!v11[1])
    goto LABEL_21;
  v12 = xpc_connection_send_message_with_reply_sync(v11[1], xdict);
  v13 = v12;
  if (v12)
    v14 = v12 == (xpc_object_t)MEMORY[0x1E0C81258];
  else
    v14 = 1;
  if (!v14 && v12 != (xpc_object_t)MEMORY[0x1E0C81260])
  {
    if (object_getClass(v12) != (Class)MEMORY[0x1E0C812F8])
      goto LABEL_19;
    v30 = 1;
    v28 = v10 + 16;
    v29 = v13;
    value = xpc_dictionary_get_value(v13, "status");
    v19 = value;
    if (!value
      || object_getClass(value) != (Class)MEMORY[0x1E0C81328]
      || (v16 = xpc_int64_get_value(v19), !(_DWORD)v16))
    {
      v16 = 2003334207;
      if (v29)
      {
        v20 = xpc_dictionary_get_value(v29, "data");
        v21 = v20;
        if (v20)
        {
          if (object_getClass(v20) == (Class)MEMORY[0x1E0C812E8])
          {
            length = xpc_data_get_length(v21);
            bytes_ptr = xpc_data_get_bytes_ptr(v21);
            if (HIDWORD(length))
            {
              v16 = 561211770;
            }
            else
            {
              if (v8)
              {
                if (*a3 >= length)
                  v24 = length;
                else
                  v24 = *a3;
                *a3 = v24;
                memcpy(a4, bytes_ptr, v24);
              }
              else
              {
                v27 = 1;
                v26 = CFDataCreate(0, (const UInt8 *)bytes_ptr, length);
                v25 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v26, 0, 0, 0);
                if (!v25)
                {
                  CACFData::~CACFData((CACFData *)&v26);
                  v16 = 1667787583;
                  goto LABEL_43;
                }
                *a3 = 8;
                *a4 = v25;
                CACFData::~CACFData((CACFData *)&v26);
              }
              v16 = 0;
            }
          }
        }
      }
    }
LABEL_43:
    XPC_Object::~XPC_Object((XPC_Object *)&v28);
    goto LABEL_23;
  }
  if (v12)
LABEL_19:
    xpc_release(v13);
  v11 = (xpc_connection_t *)*((_QWORD *)this + 3);
  if (v11)
LABEL_21:
    (*((void (**)(xpc_connection_t *))*v11 + 1))(v11);
  v16 = 2003334207;
  *((_QWORD *)this + 3) = 0;
LABEL_23:
  XPC_Object::~XPC_Object((XPC_Object *)&v31);
  return v16;
}

void sub_18EEE9E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  CACFData::~CACFData((CACFData *)&a9);
  XPC_Object::~XPC_Object((XPC_Object *)&a11);
  XPC_Object::~XPC_Object((XPC_Object *)&a14);
  _Unwind_Resume(a1);
}

uint64_t AudioFileIPODLibHandle::AFAPI_SetProperty(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int a3, const void *a4)
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_CountUserData(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int *a3)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_GetUserDataSize(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_GetUserDataSize64(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int a3, unint64_t *a4)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_GetUserData(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int a3, unsigned int *a4, void *a5)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_GetUserDataAtOffset(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int a3, uint64_t a4, unsigned int *a5, void *a6)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_SetUserData(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_RemoveUserData(AudioFileIPODLibHandle *this)
{
  return 1886547263;
}

uint64_t IsBinaryProperty(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= 1718775914)
  {
    if (a1 <= 1684434291)
    {
      if (a1 <= 1652125802)
      {
        if (a1 == 1650683508)
          return result;
        v3 = 1651663220;
        goto LABEL_31;
      }
      if (a1 == 1652125803 || a1 == 1667787108)
        return result;
      v3 = 1668112752;
    }
    else if (a1 > 1701082481)
    {
      if (a1 == 1701082482 || a1 == 1717988724)
        return result;
      v3 = 1718383476;
    }
    else
    {
      if (a1 == 1684434292 || a1 == 1685022310)
        return result;
      v3 = 1685289589;
    }
LABEL_31:
    if (a1 != v3)
      return 0;
    return result;
  }
  if (a1 > 1886086769)
  {
    if (a1 > 1886616164)
    {
      if (a1 == 1886616165 || a1 == 1920168566)
        return result;
      v3 = 1935832164;
    }
    else
    {
      if (a1 == 1886086770 || a1 == 1886090594)
        return result;
      v3 = 1886283375;
    }
    goto LABEL_31;
  }
  if (a1 > 1869640812)
  {
    if (a1 == 1869640813 || a1 == 1885564532)
      return result;
    v3 = 1886085753;
    goto LABEL_31;
  }
  if (a1 != 1718775915 && a1 != 1768174452)
  {
    v3 = 1835493731;
    goto LABEL_31;
  }
  return result;
}

void CACFData::~CACFData(CACFData *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

void AudioFileIPODLibHandle::Fail(AudioFileIPODLibHandle *this, int a2)
{
  uint64_t v4;
  _DWORD *exception;

  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *((_QWORD *)this + 3) = 0;
  }
  exception = __cxa_allocate_exception(4uLL);
  *exception = a2;
  __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
}

void SharableMemoryBlock::FDClientToken::~FDClientToken(SharableMemoryBlock::FDClientToken *this)
{
  *(_QWORD *)this = &off_1E2909F20;
  if (*((_BYTE *)this + 20))
    SharableMemoryBlock::FDClientToken::Reset(this);
}

{
  SharableMemoryBlock::FDClientToken::~FDClientToken(this);
  JUMPOUT(0x193FFE460);
}

BOOL SharableMemoryBlock::FDClientToken::IsValid(SharableMemoryBlock::FDClientToken *this)
{
  return *((_DWORD *)this + 4) != -1;
}

void SharedAudioBufferList::~SharedAudioBufferList(SharedAudioBufferList *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2908760;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 8) = 0;
  }
  SharableMemoryBlock::~SharableMemoryBlock((xpc_object_t *)this);
}

{
  SharedAudioBufferList::~SharedAudioBufferList(this);
  JUMPOUT(0x193FFE460);
}

uint64_t AudioFileObjectHandle::PrintObject(AudioFileObjectHandle *this, __sFILE *a2)
{
  return fprintf(a2, "< AudioFile %d [%p] >\n", *((_DWORD *)this + 2), this);
}

uint64_t AudioFileObjectHandle::AFAPI_CreateURL(AudioFileObject **this, const AudioStreamBasicDescription *a2, AudioStreamBasicDescription *a3, char a4)
{
  return AudioFileObject::DoCreate(this[3], a2, a3, a4);
}

uint64_t AudioFileObjectHandle::AFAPI_Initialize(AudioFileObjectHandle *this, const __CFURL *a2, const AudioStreamBasicDescription *a3, uint64_t a4)
{
  AudioFileObject *v7;

  v7 = (AudioFileObject *)*((_QWORD *)this + 3);
  AudioFileObject::SetURL(v7, a2);
  *((_BYTE *)v7 + 100) = 3;
  *((_BYTE *)v7 + 138) = (a4 & 2) == 0;
  return (*(uint64_t (**)(AudioFileObject *, const __CFURL *, const AudioStreamBasicDescription *, uint64_t))(*(_QWORD *)v7 + 32))(v7, a2, a3, a4);
}

uint64_t AudioFileObjectHandle::AFAPI_OpenWithCallbacks(AudioFileObject **this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*a4)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*a5)(void *), int (*a6)(void *, uint64_t))
{
  return AudioFileObject::DoOpenWithCallbacks(this[3], a2, a3, (unint64_t)a4, a5, (unint64_t)a6);
}

uint64_t AudioFileObjectHandle::AFAPI_InitializeWithCallbacks(AudioFileObject **this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*a4)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*a5)(void *), int (*a6)(void *, uint64_t), unsigned int a7, const AudioStreamBasicDescription *a8, unsigned int a9)
{
  return AudioFileObject::DoInitializeWithCallbacks(this[3], a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t AudioFileObjectHandle::AFAPI_Optimize(AudioFileObject **this)
{
  return AudioFileObject::DoOptimize(this[3]);
}

uint64_t AudioFileObjectHandle::AFAPI_ReadBytes(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, unsigned int *a4, void *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unsigned int *, void *))(**((_QWORD **)this + 3) + 72))(*((_QWORD *)this + 3), a2, a3, a4, a5);
}

uint64_t AudioFileObjectHandle::AFAPI_WriteBytes(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, unsigned int *a4, const void *a5)
{
  _DWORD *v5;

  v5 = (_DWORD *)*((_QWORD *)this + 3);
  if (v5[10])
    return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, unsigned int *, const void *))(*(_QWORD *)v5 + 80))(v5, a2, a3, a4, a5);
  else
    return 1869627199;
}

uint64_t AudioFileObjectHandle::AFAPI_ReadPacketData(AudioFileObjectHandle *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *, AudioStreamPacketDescription *, uint64_t, unsigned int *, void *))(**((_QWORD **)this + 3) + 96))(*((_QWORD *)this + 3), a2, a3, a4, a5, a6, a7);
}

uint64_t AudioFileObjectHandle::AFAPI_WritePackets(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, const void *a7)
{
  _BYTE *v7;

  v7 = (_BYTE *)*((_QWORD *)this + 3);
  if ((v7[100] & 2) != 0)
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, const AudioStreamPacketDescription *, uint64_t, unsigned int *, const void *))(*(_QWORD *)v7 + 136))(v7, a2, a3, a4, a5, a6, a7);
  else
    return 1886547263;
}

uint64_t AudioFileObjectHandle::AFAPI_WritePacketsWithDependencyInfo(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(a1 + 24);
  if ((v1[100] & 2) != 0)
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 144))(v1);
  else
    return 1886547263;
}

uint64_t AudioFileObjectHandle::AFAPI_SetProperty(AudioFileObjectHandle *this, int a2, unsigned int a3, const void *a4)
{
  _BYTE *v4;

  v4 = (_BYTE *)*((_QWORD *)this + 3);
  if (a2 == 1969321067 || (v4[100] & 2) != 0)
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 168))(v4);
  else
    return 1886547263;
}

uint64_t AudioFileObjectHandle::AFAPI_CountUserData(AudioFileObjectHandle *this, uint64_t a2, unsigned int *a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *))(**((_QWORD **)this + 3) + 552))(*((_QWORD *)this + 3), a2, a3);
}

uint64_t AudioFileObjectHandle::AFAPI_GetUserDataSize(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unsigned int *))(**((_QWORD **)this + 3) + 560))(*((_QWORD *)this + 3), a2, a3, a4);
}

uint64_t AudioFileObjectHandle::AFAPI_GetUserDataSize64(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unint64_t *))(**((_QWORD **)this + 3) + 568))(*((_QWORD *)this + 3), a2, a3, a4);
}

uint64_t AudioFileObjectHandle::AFAPI_GetUserData(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, unsigned int *a4, void *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unsigned int *, void *))(**((_QWORD **)this + 3) + 576))(*((_QWORD *)this + 3), a2, a3, a4, a5);
}

uint64_t AudioFileObjectHandle::AFAPI_GetUserDataAtOffset(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void *a6)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, unsigned int *, void *))(**((_QWORD **)this + 3)
                                                                                              + 584))(*((_QWORD *)this + 3), a2, a3, a4, a5, a6);
}

uint64_t AudioFileObjectHandle::AFAPI_SetUserData(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  _BYTE *v5;

  v5 = (_BYTE *)*((_QWORD *)this + 3);
  if ((v5[100] & 2) != 0)
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, const void *))(*(_QWORD *)v5 + 592))(v5, a2, a3, a4, a5);
  else
    return 1886547263;
}

uint64_t AudioFileObjectHandle::AFAPI_RemoveUserData(AudioFileObjectHandle *this)
{
  _BYTE *v1;

  v1 = (_BYTE *)*((_QWORD *)this + 3);
  if ((v1[100] & 2) != 0)
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 600))(v1);
  else
    return 1886547263;
}

Class ___ZN22AudioFileIPODLibHandleC2EPK7__CFURLj_block_invoke(int a1, id a2)
{
  Class result;

  if (a2 != (id)MEMORY[0x1E0C81260] && a2 != 0 && a2 != (id)MEMORY[0x1E0C81258])
    return object_getClass(a2);
  return result;
}

Class ___ZN22AudioFileIPODLibHandleC2EPK7__CFURLj_block_invoke_2(int a1, id a2)
{
  Class result;

  if (a2)
    return object_getClass(a2);
  return result;
}

void MP4BoxParser_TrackFragmentHeader::~MP4BoxParser_TrackFragmentHeader(MP4BoxParser_TrackFragmentHeader *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_TrackFragmentHeader::Init(MP4BoxParser **this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unsigned int v6;

  result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) != 1952868452)
      return 4294967294;
    v3 = (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this);
    result = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, (char *)this + 60);
    *((_DWORD *)this + 15) = bswap32(*((_DWORD *)this + 15));
    v4 = v3 + 4;
    v5 = *((_BYTE *)this + 59);
    if ((v5 & 1) != 0)
    {
      result = MP4BoxParser::ReadDataSourceBytes(this[1], v3 + 4, 8uLL, this + 8);
      this[8] = (MP4BoxParser *)bswap64((unint64_t)this[8]);
      v4 = v3 + 12;
      v5 = *((_BYTE *)this + 59);
    }
    else if ((*((_BYTE *)this + 57) & 2) != 0)
    {
      *((_BYTE *)this + 89) = 1;
    }
    v6 = 0;
    if ((v5 & 2) != 0)
    {
      result = MP4BoxParser::ReadDataSourceBytes(this[1], v4, 4uLL, &v6);
      *((_DWORD *)this + 18) = bswap32(v6);
      v4 += 4;
      v5 = *((_BYTE *)this + 59);
      if ((v5 & 8) == 0)
      {
LABEL_10:
        if ((v5 & 0x10) == 0)
          goto LABEL_11;
        goto LABEL_17;
      }
    }
    else if ((v5 & 8) == 0)
    {
      goto LABEL_10;
    }
    result = MP4BoxParser::ReadDataSourceBytes(this[1], v4, 4uLL, &v6);
    *((_DWORD *)this + 19) = bswap32(v6);
    v4 += 4;
    v5 = *((_BYTE *)this + 59);
    if ((v5 & 0x10) == 0)
    {
LABEL_11:
      if ((v5 & 0x20) == 0)
      {
LABEL_13:
        *((_BYTE *)this + 88) = (*((_BYTE *)this + 57) & 1) == 0;
        return result;
      }
LABEL_12:
      result = MP4BoxParser::ReadDataSourceBytes(this[1], v4, 4uLL, &v6);
      *((_DWORD *)this + 21) = bswap32(v6);
      goto LABEL_13;
    }
LABEL_17:
    result = MP4BoxParser::ReadDataSourceBytes(this[1], v4, 4uLL, &v6);
    *((_DWORD *)this + 20) = bswap32(v6);
    v4 += 4;
    if ((*((_BYTE *)this + 59) & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  return result;
}

uint64_t clientParamToSynthParam(int a1, int *a2, float *a3, float a4)
{
  float v4;
  BOOL v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v30;

  if (a1 <= 1019)
  {
    switch(a1)
    {
      case 1000:
        v4 = fminf(a4, 1.0);
        v5 = a4 <= 0.0;
        v6 = 0.0;
        if (!v5)
          v6 = v4;
        a1 = 5000;
        if (!a2)
          goto LABEL_71;
        goto LABEL_70;
      case 1001:
        v12 = fminf(a4, 1.0);
        if (a4 <= -1.0)
          v13 = -1.0;
        else
          v13 = v12;
        v6 = v13 * 0.5 + 0.5;
        a1 = 5001;
        if (!a2)
          goto LABEL_71;
        goto LABEL_70;
      case 1010:
        v14 = fminf(a4, 1.0);
        if (a4 <= -1.0)
          v15 = -1.0;
        else
          v15 = v14;
        v6 = (float)(v15 * 63.5) + 63.5;
        a1 = 73;
        if (!a2)
          goto LABEL_71;
        goto LABEL_70;
      case 1011:
        v16 = fminf(a4, 1.0);
        if (a4 <= -1.0)
          v17 = -1.0;
        else
          v17 = v16;
        v6 = (float)(v17 * 63.5) + 63.5;
        a1 = 75;
        if (!a2)
          goto LABEL_71;
        goto LABEL_70;
      case 1012:
        v18 = fminf(a4, 1.0);
        if (a4 <= -1.0)
          v19 = -1.0;
        else
          v19 = v18;
        v6 = (float)(v19 * 63.5) + 63.5;
        a1 = 72;
        if (!a2)
          goto LABEL_71;
        goto LABEL_70;
      case 1013:
        v20 = fminf(a4, 1.0);
        if (a4 <= -1.0)
          v21 = -1.0;
        else
          v21 = v20;
        v6 = v21 * 0.5 + 0.5;
        a1 = 5004;
        if (!a2)
          goto LABEL_71;
        goto LABEL_70;
      case 1015:
        v22 = fminf(a4, 1.0);
        if (a4 <= -1.0)
          v23 = -1.0;
        else
          v23 = v22;
        v6 = v23 * 0.5 + 0.5;
        a1 = 5011;
        if (!a2)
          goto LABEL_71;
        goto LABEL_70;
      default:
        goto LABEL_25;
    }
  }
  v7 = 4294967292;
  if (a1 <= 2009)
  {
    switch(a1)
    {
      case 1020:
        return v7;
      case 2000:
        v26 = fminf(a4, 1.0);
        v5 = a4 <= 0.0;
        v6 = 0.0;
        if (!v5)
          v6 = v26;
        a1 = 5002;
        if (!a2)
          goto LABEL_71;
        goto LABEL_70;
      case 2001:
        v10 = fminf(a4, 1.0);
        if (a4 <= -1.0)
          v11 = -1.0;
        else
          v11 = v10;
        v6 = v11 * 0.5 + 0.5;
        a1 = 5003;
        if (!a2)
          goto LABEL_71;
        goto LABEL_70;
    }
    goto LABEL_25;
  }
  if (a1 > 2011)
  {
    if (a1 == 2012)
    {
      v27 = fminf(a4, 1.0);
      if (a4 <= -1.0)
        v28 = -1.0;
      else
        v28 = v27;
      v6 = (float)(v28 * 63.5) + 63.5;
      a1 = 81;
      if (!a2)
        goto LABEL_71;
      goto LABEL_70;
    }
    if (a1 == 2020)
      return v7;
LABEL_25:
    if (a1 > 0xFF)
      return 4294962494;
    v30 = 127.0;
    if (a4 < 1.0)
      v30 = a4 * 127.0;
    v5 = a4 <= 0.0;
    v6 = 0.0;
    if (!v5)
      v6 = v30;
    if (!a2)
      goto LABEL_71;
    goto LABEL_70;
  }
  if (a1 == 2010)
  {
    v24 = fminf(a4, 1.0);
    if (a4 <= -1.0)
      v25 = -1.0;
    else
      v25 = v24;
    v6 = (float)(v25 * 63.5) + 63.5;
    a1 = 79;
    if (!a2)
      goto LABEL_71;
  }
  else
  {
    v8 = fminf(a4, 1.0);
    if (a4 <= -1.0)
      v9 = -1.0;
    else
      v9 = v8;
    v6 = (float)(v9 * 63.5) + 63.5;
    a1 = 80;
    if (!a2)
      goto LABEL_71;
  }
LABEL_70:
  *a2 = a1;
LABEL_71:
  v7 = 0;
  if (a3)
    *a3 = v6;
  return v7;
}

void acv2::AudioConverterBase::description(int16x8_t *this@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  const void *v5;
  void **v6;
  size_t v7;
  _QWORD *v8;
  int16x8_t v9;
  void **v10;
  size_t v11;
  int16x8_t v12;
  void **v13;
  size_t v14;
  std::runtime_error *exception;
  void *__p[2];
  int16x8_t v17;
  uint64_t v18;
  void *v19[2];
  char v20;
  uint64_t v21;
  _QWORD v22[10];
  char v23;
  uint64_t v24;
  const __CFString *v25;
  char v26;

  v4 = (const void *)(*(uint64_t (**)(int16x8_t *))(this->i64[0] + 56))(this);
  if (v4)
  {
    v5 = v4;
    CFRetain(v4);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v25, v5);
  }
  else
  {
    v25 = 0;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"  ", 2);
  if (!v25)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v6 = __p;
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v25);
  if (v17.i8[7] < 0)
    v6 = (void **)__p[0];
  v7 = strlen((const char *)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)" ", 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v19[0]) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v19, 1);
  if (v17.i8[7] < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Input:  ", 8);
  v9 = this[2];
  *(int16x8_t *)__p = this[1];
  v17 = v9;
  v18 = this[3].i64[0];
  v10 = v19;
  CA::StreamDescription::AsString((CA::StreamDescription *)v19, __p, *(double *)__p, v9);
  if (v20 < 0)
    v10 = (void **)v19[0];
  v11 = strlen((const char *)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)v10, v11);
  v26 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)&v26, 1);
  if (v20 < 0)
    operator delete(v19[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Output: ", 8);
  v12 = *(int16x8_t *)((char *)this + 72);
  *(int16x8_t *)__p = *(int16x8_t *)((char *)this + 56);
  v17 = v12;
  v18 = this[5].i64[1];
  v13 = v19;
  CA::StreamDescription::AsString((CA::StreamDescription *)v19, __p, *(double *)__p, v12);
  if (v20 < 0)
    v13 = (void **)v19[0];
  v14 = strlen((const char *)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)v13, v14);
  v26 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)&v26, 1);
  if (v20 < 0)
    operator delete(v19[0]);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v22);
  v21 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v22[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete((void *)v22[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x193FFE3A0](&v24);
  if (v25)
    CFRelease(v25);
}

void sub_18EEEACA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  void *v24;
  uint64_t v25;

  __cxa_free_exception(v24);
  std::ostringstream::~ostringstream((uint64_t)&a24);
  applesauce::CF::StringRef::~StringRef((const void **)(v25 - 48));
  _Unwind_Resume(a1);
}

uint64_t acv2::AudioConverterBase::HasPropertySettings(acv2::AudioConverterBase *this)
{
  return 0;
}

void acv2::AudioConverterBase::GetPropertySettings(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t acv2::AudioConverterBase::SetPropertySettings(acv2::AudioConverterBase *this, const __CFDictionary *a2)
{
  return 0;
}

void acv2::AudioConverterBase::createCapturer(_QWORD *a1, const char *a2, const std::__fs::filesystem::path **a3, __int128 *a4, const void *a5)
{
  char *v10;
  const char *v11;
  pid_t v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  std::string *v16;
  int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  ExtAudioFileRef *v25;
  int v26;
  const char *v27;
  size_t v28;
  const __CFURL *v29;
  const __CFURL *v30;
  OSStatus v31;
  uint64_t v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string __p;
  std::string __str[5];
  _BYTE buf[40];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v10 = getenv("TMPDIR");
  if (v10)
    v11 = v10;
  else
    v11 = "/tmp";
  v12 = getpid();
  v13 = acv2::AudioConverterBase::createCapturer(char const*,std::unique_ptr<AudioConverterCapturer> &,CA::StreamDescription const&,void *)::counter++;
  snprintf((char *)__str, 0x80uLL, "%s/%d-%d-%d-%.f-%p%s.caf", v11, v12, v13, *((_DWORD *)a4 + 7), *(double *)a4, a5, a2);
  std::string::basic_string[abi:ne180100]<0>(a1, (char *)__str);
  AudioConverterLog();
  v14 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AudioConverterBase.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 68;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = __str;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = a5;
    _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Opening capturer %s for converter -> %p", buf, 0x26u);
  }
  v15 = operator new();
  memset(&__p, 0, sizeof(__p));
  v16 = (std::string *)((char *)&__p.__r_.__value_.__r.__words[2] + 7);
  do
  {
    v17 = v16->__r_.__value_.__s.__data_[1];
    v16 = (std::string *)((char *)v16 + 1);
  }
  while (v17);
  std::string::append[abi:ne180100]<char const*,0>(&__p, __str, v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    *(std::string *)v15 = __p;
  v18 = *a4;
  v19 = a4[1];
  *(_OWORD *)(v15 + 24) = *a4;
  *(_OWORD *)(v15 + 40) = v19;
  v20 = *((_QWORD *)a4 + 4);
  *(_QWORD *)(v15 + 56) = v20;
  *(_OWORD *)(v15 + 64) = v18;
  *(_OWORD *)(v15 + 80) = v19;
  *(_QWORD *)(v15 + 96) = v20;
  v21 = *(_DWORD *)(v15 + 76);
  if ((v21 & 0x20) != 0)
  {
    v22 = *((_DWORD *)a4 + 7);
    v23 = *(_DWORD *)(v15 + 88);
    *(_DWORD *)(v15 + 92) = v22;
    v24 = v23 * v22;
    *(_DWORD *)(v15 + 84) = 1;
    *(_DWORD *)(v15 + 88) = v24;
    *(_DWORD *)(v15 + 76) = v21 & 0xFFFFFFDF;
    *(_DWORD *)(v15 + 80) = v24;
  }
  *(_QWORD *)(v15 + 104) = 0;
  *(_QWORD *)(v15 + 112) = 0;
  v25 = (ExtAudioFileRef *)(v15 + 112);
  *(_QWORD *)(v15 + 120) = 0;
  *(_BYTE *)(v15 + 128) = 1;
  if (*(_DWORD *)(v15 + 32) == 1819304813)
    v26 = (*(unsigned __int8 *)(v15 + 36) >> 5) & 1;
  else
    LOBYTE(v26) = 0;
  *(_BYTE *)(v15 + 136) = 0;
  *(_BYTE *)(v15 + 129) = v26;
  *(_DWORD *)(v15 + 132) = 0;
  *(_BYTE *)(v15 + 144) = 0;
  *(_QWORD *)(v15 + 152) = 0;
  v27 = (const char *)v15;
  if (*(char *)(v15 + 23) < 0)
    v27 = *(const char **)v15;
  v28 = strlen(v27);
  v29 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)v27, v28, 0);
  v30 = v29;
  if (*((_DWORD *)a4 + 2) == 1819304813)
  {
    if (ExtAudioFileCreateWithURL(v29, 0x63616666u, (const AudioStreamBasicDescription *)(v15 + 64), 0, 1u, (ExtAudioFileRef *)(v15 + 112))|| ExtAudioFileSetProperty(*v25, 0x63666D74u, 0x28u, (const void *)(v15 + 64)))
    {
LABEL_24:
      AudioConverterLog();
      v32 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AudioConverterCapturer.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 58;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v27;
        v33 = "%25s:%-5d failed to create capture file %s";
        v34 = v32;
        v35 = OS_LOG_TYPE_ERROR;
LABEL_28:
        _os_log_impl(&dword_18EE07000, v34, v35, v33, buf, 0x1Cu);
        goto LABEL_29;
      }
      goto LABEL_29;
    }
    v31 = ExtAudioFileWriteAsync(*v25, 0, 0);
  }
  else
  {
    v31 = AudioFileCreateWithURL(v29, 0x63616666u, (const AudioStreamBasicDescription *)(v15 + 64), 1u, (AudioFileID *)(v15 + 104));
  }
  if (v31)
    goto LABEL_24;
  AudioConverterLog();
  v36 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AudioConverterCapturer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 60;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v27;
    v33 = "%25s:%-5d created capture file %s";
    v34 = v36;
    v35 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_28;
  }
LABEL_29:
  CFRelease(v30);
  if (*(_BYTE *)(v15 + 129))
  {
    v37 = *(_OWORD *)(v15 + 40);
    *(_OWORD *)buf = *(_OWORD *)(v15 + 24);
    *(_OWORD *)&buf[16] = v37;
    v38 = *(_QWORD *)(v15 + 56);
    v39 = *(_OWORD *)(v15 + 80);
    v46 = *(_OWORD *)(v15 + 64);
    v47 = v39;
    v40 = *(_QWORD *)(v15 + 96);
    *(_QWORD *)&buf[32] = v38;
    v48 = v40;
    v41 = operator new();
    acv2::Reinterleaver::Reinterleaver(v41, (uint64_t)buf);
    v42 = *(_QWORD *)(v15 + 152);
    *(_QWORD *)(v15 + 152) = v41;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100](a3, (const std::__fs::filesystem::path *)v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_18EEEB1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  MEMORY[0x193FFE460](v23, 0x1032C40BE2BDED3);
  if (*(char *)(a16 + 23) < 0)
    operator delete(*(void **)a16);
  _Unwind_Resume(a1);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, std::string *a2, std::string *a3)
{
  std::string *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  std::string::value_type *p_p;
  std::string *v13;
  std::string::value_type *v14;
  std::string::value_type v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::string::value_type v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  void *__p;
  std::string::size_type v24;
  int64_t v25;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (char *)a3 - (char *)a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > v4 || (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v13 = this;
    if ((v6 & 0x80) != 0)
      v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    v14 = (char *)v13 + size;
    do
    {
      v15 = v4->__r_.__value_.__s.__data_[0];
      v4 = (std::string *)((char *)v4 + 1);
      *v14++ = v15;
    }
    while (v4 != a3);
    *v14 = 0;
    v16 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v16;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v16 & 0x7F;
  }
  else
  {
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v7 > 0x16)
    {
      v17 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v17 = v7 | 7;
      v18 = v17 + 1;
      p_p = (std::string::value_type *)operator new(v17 + 1);
      v24 = v7;
      v25 = v18 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v25) = v7;
      p_p = (std::string::value_type *)&__p;
    }
    do
    {
      v19 = v4->__r_.__value_.__s.__data_[0];
      v4 = (std::string *)((char *)v4 + 1);
      *p_p++ = v19;
    }
    while (v4 != a3);
    *p_p = 0;
    if (v25 >= 0)
      v20 = (const std::string::value_type *)&__p;
    else
      v20 = (const std::string::value_type *)__p;
    if (v25 >= 0)
      v21 = HIBYTE(v25);
    else
      v21 = v24;
    std::string::append(this, v20, v21);
    if (SHIBYTE(v25) < 0)
      operator delete(__p);
  }
  return this;
}

void sub_18EEEB444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

OpaqueExtAudioFile *acv2::AudioConverterBase::writeCapture(acv2::AudioConverterBase *this, AudioConverterCapturer *a2, const ACAudioSpan *a3)
{
  const AudioBufferList *v4;
  uint64_t mNumberBuffers;
  UInt32 v6;
  UInt32 *p_mDataByteSize;

  v4 = (const AudioBufferList *)*((_QWORD *)a2 + 2);
  mNumberBuffers = v4->mNumberBuffers;
  if ((_DWORD)mNumberBuffers)
  {
    v6 = *((_DWORD *)a2 + 2);
    p_mDataByteSize = &v4->mBuffers[0].mDataByteSize;
    do
    {
      *p_mDataByteSize = v6;
      p_mDataByteSize += 4;
      --mNumberBuffers;
    }
    while (mNumberBuffers);
  }
  return AudioConverterCapturer::write(this, v4, *((const AudioStreamPacketDescription **)a2 + 4), *(_DWORD *)a2);
}

void MP4BoxParser_TrackFragment::~MP4BoxParser_TrackFragment(MP4BoxParser_TrackFragment *this)
{
  MP4BoxParser_TrackFragment::~MP4BoxParser_TrackFragment(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  CompressedPacketTable *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E29091F8;
  if (*((_BYTE *)this + 64))
  {
    v2 = *((_QWORD *)this + 9);
    if (v2)
    {
      std::__list_imp<MP4BoxInfo>::clear(*((uint64_t **)this + 9));
      MEMORY[0x193FFE460](v2, 0x1020C4062D53EE8);
    }
  }
  v3 = (CompressedPacketTable *)*((_QWORD *)this + 10);
  if (v3)
  {
    CompressedPacketTable::~CompressedPacketTable(v3);
    MEMORY[0x193FFE460]();
  }
  v4 = (void *)*((_QWORD *)this + 27);
  if (v4)
  {
    *((_QWORD *)this + 28) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 23);
  if (v5)
  {
    *((_QWORD *)this + 24) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 20);
  if (v6)
  {
    *((_QWORD *)this + 21) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 16);
  if (v7)
  {
    *((_QWORD *)this + 17) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 13);
  if (v8)
  {
    *((_QWORD *)this + 14) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t MP4BoxParser_TrackFragment::Init(__n128 ***this, int a2)
{
  uint64_t v4;
  __n128 **v5;
  uint64_t v6;
  int64_t v7;
  __n128 **v8;
  unsigned int v9;
  uint64_t v10;

  v4 = MP4BoxParser::Initialize((MP4BoxParser *)this);
  if (!(_DWORD)v4)
  {
    if (*((_DWORD *)this + 5) == 1953653094)
    {
      if (*((_BYTE *)this + 64))
      {
        v5 = (__n128 **)operator new();
        *v5 = (__n128 *)v5;
        v5[1] = (__n128 *)v5;
        v5[2] = 0;
        this[9] = v5;
        v6 = (uint64_t)this[1];
        v7 = ((unsigned int (*)(__n128 ***))(*this)[3])(this);
        v8 = this[3];
        v9 = ((uint64_t (*)(__n128 ***))(*this)[3])(this);
        v4 = FillMP4BoxTable(v6, v7, (int64_t)v8 - v9, this[9], 1, 0);
      }
      else
      {
        v4 = 0;
      }
      if (((unsigned int (*)(__n128 **))(*this[1])[9].n128_u64[0])(this[1]))
      {
        v10 = operator new();
        *(_OWORD *)v10 = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
        *(_DWORD *)(v10 + 32) = a2;
        this[10] = (__n128 **)v10;
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return v4;
}

void std::__list_imp<MP4BoxInfo>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 5));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t MP4BoxParser_TrackFragment::GetTrackID(MP4BoxParser_TrackFragment *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void (**v7)(MP4BoxParser *__hidden);
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v2 = *(_QWORD *)(a2 + 8);
  if (v2 == a2)
    return 0;
  while (*(_DWORD *)(v2 + 16) != 1952868452)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2 == a2)
      return 0;
  }
  v7 = &off_1E2902718;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v8);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v7 = &off_1E29099C8;
  v13 = 8;
  v14 = 0;
  v15 = -1;
  v16 = -1;
  v17 = -1;
  v18 = 0;
  if (MP4BoxParser_TrackFragmentHeader::Init((MP4BoxParser **)&v7))
  {
    v3 = v8;
    v7 = &off_1E2902718;
    v8 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return 0;
  }
  v4 = v14;
  v6 = v8;
  v7 = &off_1E2902718;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v4;
}

void sub_18EEEB850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_TrackFragment::ParsePackets(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  char **v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  __int128 v35;
  uint64_t v36;
  void (**v37)(MP4BoxParser *__hidden);
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  char v42;
  int v43;
  __int128 __p;
  __int128 v45;
  uint64_t v46;
  int v47;
  void (**v48)(MP4BoxParser *__hidden);
  uint64_t v49;
  char v50;
  int v51;
  uint64_t v52;
  char v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(this + 88))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 72);
    v3 = *(_QWORD *)(v2 + 8);
    if (v3 != v2)
    {
      while (*(_DWORD *)(v3 + 16) != 1952868452)
      {
        v3 = *(_QWORD *)(v3 + 8);
        if (v3 == v2)
          return this;
      }
      v4 = *(_QWORD *)(this + 8);
      v48 = &off_1E2902718;
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 88))(&v49);
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v48 = &off_1E29099C8;
      v54 = 8;
      v55 = 0;
      v56 = -1;
      v57 = -1;
      v58 = -1;
      v59 = 0;
      if (MP4BoxParser_TrackFragmentHeader::Init((MP4BoxParser **)&v48))
        goto LABEL_8;
      v5 = v56;
      if (v56 == -1)
      {
        if (!HIBYTE(v59) && *(_DWORD *)(*(_QWORD *)(v1 + 56) + 76))
          goto LABEL_8;
        v5 = *(_QWORD *)(v1 + 256);
      }
      v6 = v58;
      v34 = HIDWORD(v58);
      if ((_DWORD)v58 == -1 && (v6 = *(_DWORD *)(v1 + 272), v6 == -1))
      {
        v6 = 0;
      }
      else if (v6)
      {
        *(_DWORD *)(v1 + 248) = v6;
      }
      if (v34 == -1)
      {
        v7 = *(_DWORD *)(v1 + 276);
        v8 = v7 != -1;
        if (v7 == -1)
          v7 = 0;
        v33 = v8;
        v34 = v7;
      }
      else
      {
        v33 = 1;
      }
      if ((_BYTE)v59)
      {
        v36 = 0;
        v9 = *(_QWORD *)(v1 + 72);
        v10 = *(_QWORD *)(v9 + 8);
        if (v10 != v9)
        {
          v11 = 0;
          v12 = (_BYTE *)(v1 + 208);
          v32 = v5;
          v13 = v5;
          while (1)
          {
            v14 = 0;
            v15 = v10;
            do
            {
              if (*(_DWORD *)(v15 + 16) == 1953658222)
                ++v14;
              v15 = *(_QWORD *)(v15 + 8);
            }
            while (v15 != v9);
            if (v11 >= v14)
              goto LABEL_73;
            v16 = 0;
            while (*(_DWORD *)(v10 + 16) != 1953658222)
            {
LABEL_37:
              v10 = *(_QWORD *)(v10 + 8);
              if (v10 == v9)
                goto LABEL_72;
            }
            if (v16 != v11)
            {
              ++v16;
              goto LABEL_37;
            }
            v17 = *(_QWORD *)(v1 + 8);
            v18 = *(_QWORD *)(v10 + 32);
            v37 = &off_1E2902718;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 88))(v17, v18);
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            v43 = 8;
            v37 = &off_1E2909630;
            __p = 0u;
            v45 = 0u;
            v46 = -1;
            v47 = 0;
            if (!MP4BoxParser_TrackFragmentRun::Init((MP4BoxParser **)&v37))
            {
              v19 = HIDWORD(v45);
              if ((_DWORD)v46 != -1)
                v13 = v5 + (int)v46;
              if (HIDWORD(v45))
                break;
            }
LABEL_67:
            v37 = &off_1E2909630;
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            v26 = v38;
            v37 = &off_1E2902718;
            v38 = 0;
            if (v26)
              (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            v9 = *(_QWORD *)(v1 + 72);
LABEL_72:
            ++v11;
            v10 = *(_QWORD *)(v9 + 8);
            if (v10 == v9)
              goto LABEL_73;
          }
          v20 = 0;
          while (1)
          {
            *(_QWORD *)&v35 = v13;
            v21 = v6;
            if (BYTE1(v47))
            {
              v22 = (DWORD2(v45) * v20);
              if (*((_QWORD *)&__p + 1) - (_QWORD)__p < v22 + (unint64_t)DWORD2(v45))
                goto LABEL_66;
              v21 = bswap32(*(_DWORD *)(__p + v22 + 4 * v47));
            }
            if (!v21)
            {
LABEL_66:
              *(_DWORD *)(v1 + 88) += v19;
              v5 = v32;
              goto LABEL_67;
            }
            if (v21 > *(_DWORD *)(v1 + 248))
              *(_DWORD *)(v1 + 248) = v21;
            *(_QWORD *)(v1 + 240) += v21;
            HIDWORD(v35) = v21;
            v23 = *(char ***)(v1 + 80);
            if (v23)
              CompressedPacketTable::push_back(v23, &v35);
            v24 = HIDWORD(v46);
            if (BYTE2(v47))
            {
              if (HIDWORD(v46) == -1)
              {
                v25 = (DWORD2(v45) * v20);
                if (*((_QWORD *)&__p + 1) - (_QWORD)__p < v25 + (unint64_t)DWORD2(v45))
                {
LABEL_61:
                  *v12 = 1;
LABEL_64:
                  v36 = (v20 + *(_DWORD *)(v1 + 88));
                  SyncSampleTable::append_entry(v1 + 208, &v36);
                  goto LABEL_65;
                }
                v24 = bswap32(*(_DWORD *)(__p + v25 + 4 * (BYTE1(v47) + v47)));
              }
              else if (v20)
              {
                goto LABEL_61;
              }
            }
            else
            {
              if (v20 != 0 || HIDWORD(v46) == -1)
                v24 = v34;
              if (!((v20 == 0 && HIDWORD(v46) != -1) | v33 & 1))
                goto LABEL_65;
            }
            *v12 = 1;
            if ((v24 & 0x10000) == 0)
              goto LABEL_64;
LABEL_65:
            v13 += v21;
            if (v19 == ++v20)
              goto LABEL_66;
          }
        }
LABEL_73:
        v27 = *(_QWORD *)(v1 + 8);
        v28 = *(uint8_t **)(v1 + 56);
        MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v28);
        MP4GetRollGroup(v27, v9, 0, 1919904876, v28 + 120, *(_DWORD *)(v1 + 88), v1 + 96);
        if (!*(_BYTE *)(v1 + 96))
        {
          v29 = *(_QWORD *)(v1 + 8);
          v30 = *(_QWORD *)(v1 + 72);
          v31 = *(uint8_t **)(v1 + 56);
          MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v31);
          MP4GetRollGroup(v29, v30, 0, 1886547820, v31 + 208, *(_DWORD *)(v1 + 88), v1 + 152);
        }
      }
LABEL_8:
      this = v49;
      v48 = &off_1E2902718;
      v49 = 0;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

void sub_18EEEBD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a32)
    (*(void (**)(uint64_t))(*(_QWORD *)a32 + 8))(a32);
  _Unwind_Resume(exception_object);
}

void SyncSampleTable::append_entry(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;

  v5 = *(char **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(char **)(a1 + 8);
    v8 = (v5 - v7) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v9;
    if (v12)
    {
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v12);
      v7 = *(char **)(a1 + 8);
      v5 = *(char **)(a1 + 16);
    }
    else
    {
      v13 = 0;
    }
    v14 = (_QWORD *)(v12 + 8 * v8);
    v15 = v12 + 8 * v13;
    *v14 = *a2;
    v6 = v14 + 1;
    while (v5 != v7)
    {
      v16 = *((_QWORD *)v5 - 1);
      v5 -= 8;
      *--v14 = v16;
    }
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v15;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v6 = v5 + 8;
  }
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)a1 = 1;
}

void acv2::PostDecodeRenderer::~PostDecodeRenderer(AudioUnit *this)
{
  acv2::PostDecodeRenderer::~PostDecodeRenderer(this);
  JUMPOUT(0x193FFE460);
}

{
  OpaqueAudioComponentInstance *v2;
  std::pmr **v3;

  *this = (AudioUnit)&off_1E290AB50;
  AudioUnitUninitialize(this[1]);
  AudioComponentInstanceDispose(this[1]);
  v2 = this[9];
  if (v2)
  {
    this[10] = v2;
    operator delete(v2);
  }
  v3 = (std::pmr **)this[8];
  this[8] = 0;
  if (v3)
    std::default_delete<CA::AudioBuffers>::operator()[abi:ne180100](v3);
}

void std::default_delete<CA::AudioBuffers>::operator()[abi:ne180100](std::pmr **a1)
{
  ExtendedAudioBufferList_Destroy(*a1);
  JUMPOUT(0x193FFE460);
}

BOOL acv2::PostDecodeRenderer::SupportsProperty(acv2::PostDecodeRenderer *this, AudioUnitPropertyID a2)
{
  UInt32 outDataSize;
  Boolean outWritable;

  outWritable = 0;
  outDataSize = 0;
  return AudioUnitGetPropertyInfo(this, a2, 0, 0, &outDataSize, &outWritable) == 0;
}

void MP4BoxParser_TrackExtends::~MP4BoxParser_TrackExtends(MP4BoxParser_TrackExtends *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_TrackExtends::Init(MP4BoxParser_TrackExtends *this)
{
  uint64_t result;
  unsigned int v3;
  int8x16_t v4;
  unsigned int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  result = MP4BoxParser_Full::Initialize(this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) == 1953654136)
    {
      v4 = 0uLL;
      v5 = 0;
      v3 = (*(uint64_t (**)(MP4BoxParser_TrackExtends *))(*(_QWORD *)this + 24))(this);
      result = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v3, 0x14uLL, &v4);
      if (!(_DWORD)result)
      {
        *(int8x16_t *)((char *)this + 60) = vrev32q_s8(v4);
        *((_DWORD *)this + 19) = bswap32(v5);
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

void MP4BoxParser_Track::~MP4BoxParser_Track(MP4BoxParser_Track *this)
{
  MP4BoxParser_Track::~MP4BoxParser_Track(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  CompressedPacketTable *v5;
  const void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E29078E8;
  v2 = (void *)*((_QWORD *)this + 47);
  if (v2)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 49);
  if (v3)
    free(v3);
  if (*((_BYTE *)this + 56))
  {
    v4 = *((_QWORD *)this + 8);
    if (v4)
    {
      std::__list_imp<MP4BoxInfo>::clear(*((uint64_t **)this + 8));
      MEMORY[0x193FFE460](v4, 0x1020C4062D53EE8);
    }
  }
  v5 = (CompressedPacketTable *)*((_QWORD *)this + 14);
  if (v5)
  {
    CompressedPacketTable::~CompressedPacketTable(v5);
    MEMORY[0x193FFE460]();
  }
  v6 = (const void *)*((_QWORD *)this + 54);
  if (v6)
    CFRelease(v6);
  v7 = (void *)*((_QWORD *)this + 38);
  if (v7)
  {
    *((_QWORD *)this + 39) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 34);
  if (v8)
  {
    *((_QWORD *)this + 35) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 31);
  if (v9)
  {
    *((_QWORD *)this + 32) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 27);
  if (v10)
  {
    *((_QWORD *)this + 28) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 23);
  if (v11)
  {
    *((_QWORD *)this + 24) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 20);
  if (v12)
  {
    *((_QWORD *)this + 21) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 16);
  if (v13)
  {
    *((_QWORD *)this + 17) = v13;
    operator delete(v13);
  }
  v14 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
}

uint64_t MP4BoxParser_Track::Init(__n128 ***this)
{
  uint64_t result;
  __n128 **v3;
  uint64_t v4;
  int64_t v5;
  __n128 **v6;
  int64_t v7;

  result = MP4BoxParser::Initialize((MP4BoxParser *)this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) == 1953653099)
    {
      if (*((_BYTE *)this + 56))
      {
        v3 = (__n128 **)operator new();
        *v3 = (__n128 *)v3;
        v3[1] = (__n128 *)v3;
        v3[2] = 0;
        this[8] = v3;
        v4 = (uint64_t)this[1];
        v5 = ((unsigned int (*)(__n128 ***))(*this)[3])(this);
        v6 = this[3];
        v7 = (int64_t)v6 - ((unsigned int (*)(__n128 ***))(*this)[3])(this);
        return FillMP4BoxTable(v4, v5, v7, this[8], 1, 0);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

uint64_t MP4BoxParser_Track::GetNumPackets(MP4BoxParser_Track *this)
{
  if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes(this))
    return 0;
  else
    return *((unsigned int *)this + 25);
}

uint64_t MP4BoxParser_Track::GetInfoFromTrackSubBoxes(MP4BoxParser_Track *this)
{
  uint64_t SampleSize;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __n128 SampleTableBox;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  __n128 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  __n128 SampleTableSubBox;
  uint64_t v45;
  __n128 v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  void *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70[2];
  char v71[16];
  uint64_t v72;
  char v73;
  char v74[16];
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78[16];
  uint64_t v79;
  char v80;
  char v81[16];
  uint64_t v82;
  char v83;
  char v84[16];
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  char v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unsigned __int8 v93;
  void (**v94)(MP4BoxParser *__hidden);
  uint64_t v95;
  char v96;
  int v97;
  uint64_t v98;
  char v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104[2];
  char v105;
  void *__p;
  size_t __n;
  int v108;
  void (**v109)(MP4BoxParser *__hidden);
  uint64_t v110;
  char v111;
  int v112;
  uint64_t v113;
  char v114;
  int v115;
  int v116;
  int v117;
  void (**v118)(MP4BoxParser *__hidden);
  uint64_t v119;
  char v120;
  int v121;
  uint64_t v122;
  char v123;
  int v124;
  unsigned int v125;
  void (**v126)(MP4BoxParser *__hidden);
  uint64_t v127;
  char v128;
  int v129;
  uint64_t v130;
  char v131;
  int v132;
  int v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 80))
  {
    v3 = *((_QWORD *)this + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4 != v3)
      {
        while (*(_DWORD *)(v4 + 16) != 1835297121)
        {
          v4 = *(_QWORD *)(v4 + 8);
          if (v4 == v3)
            goto LABEL_13;
        }
        v5 = *(_QWORD *)(v4 + 40);
        if (v5)
        {
          for (i = *(_QWORD *)(v5 + 8); ; i = *(_QWORD *)(i + 8))
          {
            if (i == v5)
              goto LABEL_13;
            if (*(_DWORD *)(i + 16) == 1835296868)
              break;
          }
          *(_OWORD *)v104 = *(_OWORD *)(i + 16);
          v9 = *(_QWORD *)(i + 32);
          v8 = *(_QWORD *)(i + 40);
          v10 = *(std::__shared_weak_count **)(i + 48);
          if (v10)
          {
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v12 = __ldxr(p_shared_owners);
            while (__stxr(v12 + 1, p_shared_owners));
          }
          v13 = v9 + *(_QWORD *)(v4 + 32);
          v89 = *(_OWORD *)v104;
          v90 = v13;
          v91 = v8;
          v92 = v10;
          v93 = 1;
          v14 = *((_QWORD *)this + 1);
          v126 = &off_1E2902718;
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v14 + 88))(&v127);
          v128 = 0;
          v129 = 0;
          v130 = 0;
          v131 = 0;
          v126 = &off_1E2908D00;
          v132 = 8;
          v133 = 0;
          SampleSize = MP4BoxParser_MediaHeader::Init((MP4BoxParser **)&v126);
          if ((_DWORD)SampleSize)
          {
            v15 = v127;
            v126 = &off_1E2902718;
            v127 = 0;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
            v16 = 1;
            goto LABEL_44;
          }
          *((_DWORD *)this + 24) = v133;
          SampleTableBox = MP4BoxParser_Track::GetSampleTableBox((MP4BoxParser_Track *)v84, *((_QWORD *)this + 8));
          if (!v88)
          {
            SampleSize = 0xFFFFFFFFLL;
            v16 = 1;
LABEL_40:
            v24 = v93;
            v25 = v127;
            v126 = &off_1E2902718;
            v127 = 0;
            if (v25)
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v25 + 8))(v25, SampleTableBox);
            if (!v24)
            {
LABEL_49:
              if (v16)
                return SampleSize;
              return 0;
            }
            v10 = v92;
LABEL_44:
            if (v10)
            {
              v26 = (unint64_t *)&v10->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            goto LABEL_49;
          }
          v18 = v86;
          if (v86)
          {
            SampleTableBox = MP4BoxParser_Track::GetChunkOffsetBox((MP4BoxParser_Track *)v81, *((_QWORD *)this + 8), SampleTableBox);
            if (v83)
            {
              v19 = *((_QWORD *)this + 1);
              v118 = &off_1E2902718;
              (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v19 + 88))(&v119, SampleTableBox);
              v120 = 0;
              v121 = 0;
              v122 = 0;
              v123 = 0;
              v118 = &off_1E2908CD0;
              v124 = 8;
              v125 = 0;
              SampleSize = MP4BoxParser_ChunkOffset::Init((MP4BoxParser **)&v118);
              if ((_DWORD)SampleSize)
              {
LABEL_27:
                v16 = 1;
LABEL_28:
                v20 = v119;
                v118 = &off_1E2902718;
                v119 = 0;
                if (v20)
                  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
                if (v83)
                  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v82);
                goto LABEL_35;
              }
              if (v125)
              {
                v104[0] = 0;
                MP4BoxParser_ChunkOffset::GetChunkOffset((MP4BoxParser_ChunkOffset *)&v118, 0, v104);
                v28 = v104[0];
              }
              else
              {
                v28 = 0;
              }
              *((_QWORD *)this + 11) = v28;
              MP4BoxParser_Track::GetSampleSizeBox((MP4BoxParser_Track *)v78, (uint64_t)this, SampleTableBox);
              if (!v80)
              {
                SampleSize = 0xFFFFFFFFLL;
                goto LABEL_27;
              }
              v29 = *((_QWORD *)this + 1);
              v109 = &off_1E2902718;
              (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v29 + 88))(&v110);
              v111 = 0;
              v112 = 0;
              v113 = 0;
              v114 = 0;
              v109 = &off_1E2908B70;
              v117 = 0;
              v115 = 8;
              v116 = 0;
              SampleSize = MP4BoxParser_SampleSize::Init((MP4BoxParser **)&v109);
              if ((_DWORD)SampleSize)
                goto LABEL_61;
              *((_DWORD *)this + 25) = v117;
              *((_QWORD *)this + 13) = MP4BoxParser_SampleSize::GetByteCount((MP4BoxParser_SampleSize *)&v109);
              if (v112 == 1937011578)
              {
                if (v116)
                {
                  SampleSize = MP4BoxParser_SampleSize::GetSampleSize((MP4BoxParser_SampleSize *)&v109, 0, (unsigned int *)this + 92);
                  if ((_DWORD)SampleSize)
                    goto LABEL_61;
                }
              }
              v30 = v85;
              SampleSize = MP4GetRollGroupDescription(*((_QWORD *)this + 1), v18, v85, 1919904876, (uint64_t)this + 120, SampleTableBox);
              if ((_DWORD)SampleSize)
                goto LABEL_61;
              SampleSize = MP4GetRollGroupDescription(*((_QWORD *)this + 1), v18, v30, 1886547820, (uint64_t)this + 208, SampleTableBox);
              if ((_DWORD)SampleSize)
                goto LABEL_61;
              MP4GetRollGroup(*((_QWORD *)this + 1), v18, v30, 1919904876, (uint8_t *)this + 120, *((_DWORD *)this + 25), (uint64_t)this + 152);
              if (!*((_BYTE *)this + 152))
                MP4GetRollGroup(*((_QWORD *)this + 1), v18, v30, 1886547820, (uint8_t *)this + 208, *((_DWORD *)this + 25), (uint64_t)this + 240);
              v32 = *(_QWORD *)(v18 + 8);
              if (v32 != v18)
              {
                while (*(_DWORD *)(v32 + 16) != 1937011571)
                {
                  v32 = *(_QWORD *)(v32 + 8);
                  if (v32 == v18)
                    goto LABEL_72;
                }
                MP4BoxParser_SyncSampleTable::MP4BoxParser_SyncSampleTable((MP4BoxParser_SyncSampleTable *)v104, *((DataSource **)this + 1), *(_QWORD *)(v32 + 32) + v30);
                SampleSize = MP4BoxParser_SyncSampleTable::Init((MP4BoxParser **)v104);
                if ((_DWORD)SampleSize
                  || v105
                  && (SampleSize = MP4BoxParser_SyncSampleTable::GetSyncSampleTable((MP4BoxParser_SyncSampleTable *)v104, (MP4BoxParser_Track *)((char *)this + 296)), (_DWORD)SampleSize))
                {
                  v104[0] = (uint64_t)&off_1E2909518;
                  if (__p)
                  {
                    __n = (size_t)__p;
                    operator delete(__p);
                  }
                  v42 = v104[1];
                  v104[0] = (uint64_t)&off_1E2902718;
                  v104[1] = 0;
                  if (v42)
                    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
LABEL_61:
                  v16 = 1;
LABEL_62:
                  v31 = v110;
                  v109 = &off_1E2902718;
                  v110 = 0;
                  if (v31)
                    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
                  if (v80)
                    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v79);
                  goto LABEL_28;
                }
                v104[0] = (uint64_t)&off_1E2909518;
                if (__p)
                {
                  __n = (size_t)__p;
                  operator delete(__p);
                }
                v43 = v104[1];
                v104[0] = (uint64_t)&off_1E2902718;
                v104[1] = 0;
                if (v43)
                  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
              }
LABEL_72:
              SampleTableBox = MP4BoxParser_Track::GetSampleTableSubBox((MP4BoxParser_Track *)v74, *((_QWORD *)this + 8), 1937011556, SampleTableBox);
              if (v77)
              {
                MP4BoxParser_SampleDescription::MP4BoxParser_SampleDescription((uint64_t)v104, *((_QWORD *)this + 1), v75);
                SampleSize = MP4BoxParser_SampleDescription::Init((MP4BoxParser_SampleDescription *)v104);
                if ((_DWORD)SampleSize
                  || (MP4BoxParser_SampleDescription::GetASEBoxes((MP4BoxParser_SampleDescription *)v104, (const __CFDictionary **)this + 54), v33 = (double *)((char *)this + 328), *((_QWORD *)this + 45) = 0, *(_OWORD *)((char *)this + 328) = 0u, *(_OWORD *)((char *)this + 344) = 0u, SampleSize = MP4BoxParser_SampleDescription::GetASBD((MP4BoxParser_SampleDescription *)v104, (AudioStreamBasicDescription *)((char *)this + 328), v34, v35, v36, v37, v38, v39), (_DWORD)SampleSize))
                {
                  v41 = 1;
                }
                else
                {
                  if (*((_DWORD *)this + 86))
                  {
                    if (*((_DWORD *)this + 92))
                    {
                      v68 = v125;
                      SampleTableSubBox = MP4BoxParser_Track::GetSampleTableSubBox((MP4BoxParser_Track *)v71, *((_QWORD *)this + 8), 1937011555, v40);
                      if (v73)
                      {
                        v45 = *((_QWORD *)this + 1);
                        v94 = &off_1E2902718;
                        (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v45 + 88))(&v95, SampleTableSubBox);
                        v96 = 0;
                        v97 = 0;
                        v98 = 0;
                        v99 = 0;
                        v94 = &off_1E29091C8;
                        v100 = 8;
                        v101 = 0;
                        if (!MP4BoxParser_SampleToChunk::Init((MP4BoxParser **)&v94))
                        {
                          *(_QWORD *)v70 = 0;
                          if (v68)
                          {
                            v47 = 0;
                            v67 = 0;
                            v48 = *((_QWORD *)this + 11);
                            while (1)
                            {
                              v69 = 0;
                              if (MP4BoxParser_Track::GetChunkOffset(this, v47, &v69, v46))
                                break;
                              v49 = v69;
                              if (v69 != v48 + *((unsigned int *)this + 92) * (unint64_t)v70[0])
                                break;
                              if (v47 >= v70[1])
                              {
                                if (MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex((MP4BoxParser **)&v94, v47, v67, v70, &v70[1]))break;
                                ++v67;
                              }
                              ++v47;
                              v48 = v49;
                              if (v68 == v47)
                              {
                                v47 = v68;
                                break;
                              }
                            }
                          }
                          else
                          {
                            v47 = 0;
                          }
                          *((_BYTE *)this + 440) = v68 == v47;
                        }
                        v50 = v95;
                        v94 = &off_1E2902718;
                        v95 = 0;
                        if (v50)
                          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
                        if (v73)
                          std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v72);
                      }
                    }
                  }
                  v51 = __n;
                  *((_DWORD *)this + 96) = __n;
                  CA_calloc(v51);
                  *((_QWORD *)this + 49) = v52;
                  v41 = 1;
                  SampleSize = 0xFFFFFFFFLL;
                  if (v52)
                  {
                    v53 = __n;
                    if (*((_DWORD *)this + 96) >= __n)
                    {
                      memcpy(v52, __p, __n);
                      *((_DWORD *)this + 96) = v53;
                      SampleSize = MP4BoxParser_SampleDescription::GetChannelLayout((MP4BoxParser_SampleDescription *)v104, (AudioChannelLayout **)this + 47, (unsigned int *)this + 93, v54, v55, v56, v57, v58);
                      if (!(_DWORD)SampleSize)
                      {
                        if (*((_BYTE *)this + 120) || *((_BYTE *)this + 208) || *((_BYTE *)this + 296))
                        {
                          v59 = *((_QWORD *)this + 8);
                          v60 = *(_QWORD *)(v59 + 8);
                          if (v60 != v59)
                          {
                            while (*(_DWORD *)(v60 + 16) != 1701082227)
                            {
                              v60 = *(_QWORD *)(v60 + 8);
                              if (v60 == v59)
                                goto LABEL_127;
                            }
                            v61 = *((_QWORD *)this + 1);
                            v94 = &off_1E2902718;
                            (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v61 + 88))(&v95);
                            v96 = 0;
                            v97 = 0;
                            v98 = 0;
                            v99 = 0;
                            v100 = 8;
                            v101 = 0;
                            v94 = &off_1E2909D30;
                            if (!MP4BoxParser_EditListExcludingPrimingAndRemainderFrames::Init((MP4BoxParser **)&v94))
                            {
                              LODWORD(v62) = v103;
                              *((_DWORD *)this + 105) = v102;
                              v63 = *((_DWORD *)this + 24);
                              if (v63 && vabdd_f64(*v33, (double)v63) >= 0.0000999999975)
                                v62 = (unint64_t)(*v33 / (double)v63 * (double)v62);
                              *((_DWORD *)this + 104) = v62;
                            }
                            v64 = v95;
                            v94 = &off_1E2902718;
                            v95 = 0;
                            if (v64)
                              (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
                          }
                        }
LABEL_127:
                        *((_DWORD *)this + 106) = v108;
                        v65 = *((_DWORD *)this + 84);
                        v66 = v65 == 1935767394 || v65 == 1935764850;
                        if (v66 && *((_DWORD *)this + 86) && (v112 != 1937011578 || !v116))
                        {
                          *((_DWORD *)this + 88) = 0;
                          *((_DWORD *)this + 86) = 0;
                        }
                        v41 = 0;
                        *((_BYTE *)this + 80) = 1;
                      }
                    }
                  }
                }
                MP4BoxParser_SampleDescription::~MP4BoxParser_SampleDescription((MP4BoxParser_SampleDescription *)v104);
                if (v77)
                  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&v76);
              }
              else
              {
                SampleSize = 0xFFFFFFFFLL;
                v41 = 1;
              }
              v16 = v41;
              goto LABEL_62;
            }
            SampleSize = 0xFFFFFFFFLL;
            v16 = 1;
          }
          else
          {
            v16 = 1;
            SampleSize = 0xFFFFFFFFLL;
          }
LABEL_35:
          v21 = v87;
          if (v87)
          {
            v22 = (unint64_t *)&v87->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          goto LABEL_40;
        }
      }
LABEL_13:
      LOBYTE(v89) = 0;
    }
    return 0xFFFFFFFFLL;
  }
  return 0;
}

void sub_18EEECBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v63 = a50;
  a50 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  MP4BoxParser_SampleDescription::~MP4BoxParser_SampleDescription((MP4BoxParser_SampleDescription *)&a59);
  if (a24)
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  v64 = STACK[0x260];
  STACK[0x258] = v59;
  STACK[0x260] = 0;
  if (v64)
    (*(void (**)(unint64_t))(*(_QWORD *)v64 + 8))(v64);
  if (a30)
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  v65 = *(_QWORD *)(v61 - 216);
  *(_QWORD *)(v61 - 224) = v59;
  *(_QWORD *)(v61 - 216) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  if (a36)
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v60 + 24);
  v66 = *(_QWORD *)(v61 - 152);
  *(_QWORD *)(v61 - 160) = v59;
  *(_QWORD *)(v61 - 152) = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  _Unwind_Resume(a1);
}

__n128 MP4BoxParser_Track::GetSampleTableBox(MP4BoxParser_Track *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __n128 result;
  __n128 v14;

  if (!a2)
    goto LABEL_15;
  v2 = *(_QWORD *)(a2 + 8);
  if (v2 == a2)
    goto LABEL_15;
  while (*(_DWORD *)(v2 + 16) != 1835297121)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2 == a2)
      goto LABEL_15;
  }
  v3 = *(_QWORD *)(v2 + 40);
  if (!v3)
    goto LABEL_15;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 == v3)
    goto LABEL_15;
  while (*(_DWORD *)(v4 + 16) != 1835626086)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v3)
      goto LABEL_15;
  }
  v5 = *(_QWORD *)(v4 + 40);
  if (!v5 || (v6 = *(__n128 **)(v5 + 8), v6 == (__n128 *)v5))
  {
LABEL_15:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 40) = 0;
  }
  else
  {
    while (v6[1].n128_u32[0] != 1937007212)
    {
      v6 = (__n128 *)v6->n128_u64[1];
      if (v6 == (__n128 *)v5)
        goto LABEL_15;
    }
    v14 = v6[1];
    v8 = v6[2].n128_u64[0];
    v7 = v6[2].n128_u64[1];
    v9 = v6[3].n128_u64[0];
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = *(_QWORD *)(v4 + 32) + *(_QWORD *)(v2 + 32) + v8;
    result = v14;
    *(__n128 *)this = v14;
    *((_QWORD *)this + 2) = v12;
    *((_QWORD *)this + 3) = v7;
    *((_QWORD *)this + 4) = v9;
    *((_BYTE *)this + 40) = 1;
  }
  return result;
}

__n128 MP4BoxParser_Track::GetChunkOffsetBox(MP4BoxParser_Track *this, uint64_t a2, __n128 result)
{
  int v4;
  __n128 *v5;
  __n128 *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  char v17[16];
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unsigned __int8 v21;

  if (!a2)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 40) = 0;
    return result;
  }
  result = MP4BoxParser_Track::GetSampleTableBox((MP4BoxParser_Track *)v17, a2);
  v4 = v21;
  if (!v21 || !v19 || (v5 = *(__n128 **)(v19 + 8), v5 == (__n128 *)v19))
  {
LABEL_10:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 40) = 0;
    if (!v4)
      return result;
    goto LABEL_11;
  }
  v6 = *(__n128 **)(v19 + 8);
  while (v6[1].n128_u32[0] != 1937007471)
  {
    v6 = (__n128 *)v6->n128_u64[1];
    if (v6 == (__n128 *)v19)
    {
      while (v5[1].n128_u32[0] != 1668232756)
      {
        v5 = (__n128 *)v5->n128_u64[1];
        if (v5 == (__n128 *)v19)
          goto LABEL_10;
      }
      v6 = v5;
      break;
    }
  }
  v16 = v6[1];
  v11 = v6[2].n128_u64[0];
  v10 = v6[2].n128_u64[1];
  v12 = v6[3].n128_u64[0];
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v11 + v18;
  result = v16;
  *(__n128 *)this = v16;
  *((_QWORD *)this + 2) = v15;
  *((_QWORD *)this + 3) = v10;
  *((_QWORD *)this + 4) = v12;
  *((_BYTE *)this + 40) = 1;
  if (v4)
  {
LABEL_11:
    v7 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, result);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  return result;
}

void MP4BoxParser_Track::GetSampleSizeBox(MP4BoxParser_Track *this, uint64_t a2, __n128 a3)
{
  __n128 SampleTableSubBox;
  __n128 v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  __n128 v16;
  unsigned __int8 v17;

  SampleTableSubBox = MP4BoxParser_Track::GetSampleTableSubBox(this, *(_QWORD *)(a2 + 64), 1937011578, a3);
  if (*((_BYTE *)this + 40))
    return;
  v6 = MP4BoxParser_Track::GetSampleTableSubBox((MP4BoxParser_Track *)&v14, *(_QWORD *)(a2 + 64), 1937013298, SampleTableSubBox);
  v7 = v17;
  if (*((unsigned __int8 *)this + 40) != v17)
  {
    if (*((_BYTE *)this + 40))
    {
      std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
      *((_BYTE *)this + 40) = 0;
    }
    else
    {
      *(_OWORD *)this = v14;
      *((_QWORD *)this + 2) = v15;
      v6 = v16;
      *(__n128 *)((char *)this + 24) = v16;
      v16 = 0uLL;
      *((_BYTE *)this + 40) = 1;
    }
LABEL_13:
    v7 = v17;
    goto LABEL_14;
  }
  if (*((_BYTE *)this + 40))
  {
    *(_OWORD *)this = v14;
    *((_QWORD *)this + 2) = v15;
    v6 = v16;
    v16 = 0uLL;
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    *(__n128 *)((char *)this + 24) = v6;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    goto LABEL_13;
  }
LABEL_14:
  if (v7)
  {
    v11 = (std::__shared_weak_count *)v16.n128_u64[1];
    if (v16.n128_u64[1])
    {
      v12 = (unint64_t *)(v16.n128_u64[1] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v6);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_18EEED0C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 40))
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1 + 24);
  _Unwind_Resume(exception_object);
}

__n128 MP4BoxParser_Track::GetSampleTableSubBox(MP4BoxParser_Track *this, uint64_t a2, int a3, __n128 result)
{
  int v6;
  __n128 *i;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  __n128 v17;
  char v18[16];
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unsigned __int8 v22;

  if (a2)
  {
    result = MP4BoxParser_Track::GetSampleTableBox((MP4BoxParser_Track *)v18, a2);
    v6 = v22;
    if (v22 && v20)
    {
      for (i = *(__n128 **)(v20 + 8); i != (__n128 *)v20; i = (__n128 *)i->n128_u64[1])
      {
        if (i[1].n128_u32[0] == a3)
        {
          v17 = i[1];
          v12 = i[2].n128_u64[0];
          v11 = i[2].n128_u64[1];
          v13 = i[3].n128_u64[0];
          if (v13)
          {
            v14 = (unint64_t *)(v13 + 8);
            do
              v15 = __ldxr(v14);
            while (__stxr(v15 + 1, v14));
          }
          v16 = v12 + v19;
          result = v17;
          *(__n128 *)this = v17;
          *((_QWORD *)this + 2) = v16;
          *((_QWORD *)this + 3) = v11;
          *((_QWORD *)this + 4) = v13;
          *((_BYTE *)this + 40) = 1;
          if (v6)
            goto LABEL_9;
          return result;
        }
      }
    }
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 40) = 0;
    if (v6)
    {
LABEL_9:
      v8 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, result);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
  else
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 40) = 0;
  }
  return result;
}

uint64_t MP4BoxParser_Track::GetChunkOffset(MP4BoxParser_Track *this, int a2, uint64_t *a3, __n128 a4)
{
  __n128 ChunkOffsetBox;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BYTE v15[16];
  std::__shared_weak_count *v16;
  char v17;
  void (**v18)(MP4BoxParser *__hidden);
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  ChunkOffsetBox = MP4BoxParser_Track::GetChunkOffsetBox((MP4BoxParser_Track *)v15, *((_QWORD *)this + 8), a4);
  if (!v17)
    return 1667787583;
  v8 = *((_QWORD *)this + 1);
  v18 = &off_1E2902718;
  (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v8 + 88))(&v19, ChunkOffsetBox);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v18 = &off_1E2908CD0;
  v24 = 8;
  v25 = 0;
  v9 = MP4BoxParser_ChunkOffset::Init((MP4BoxParser **)&v18);
  if (!(_DWORD)v9)
    MP4BoxParser_ChunkOffset::GetChunkOffset((MP4BoxParser_ChunkOffset *)&v18, a2, a3);
  v10 = v19;
  v18 = &off_1E2902718;
  v19 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v9;
}

void sub_18EEED328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void MP4Parser_PacketProvider::~MP4Parser_PacketProvider(MP4Parser_PacketProvider *this)
{
  MP4Parser_PacketProvider::~MP4Parser_PacketProvider(this);
  JUMPOUT(0x193FFE460);
}

{
  CompressedPacketTable *v2;

  *(_QWORD *)this = &off_1E2908DD8;
  v2 = (CompressedPacketTable *)*((_QWORD *)this + 58);
  if (v2)
  {
    CompressedPacketTable::~CompressedPacketTable(v2);
    MEMORY[0x193FFE460]();
  }
  MP4BoxParser_Track::~MP4BoxParser_Track(this);
}

uint64_t MP4Parser_PacketProvider::GetNumPackets(MP4Parser_PacketProvider *this)
{
  int v2;

  if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes(this))
    v2 = 0;
  else
    v2 = *((_DWORD *)this + 25);
  return (*((_DWORD *)this + 111) + v2);
}

uint64_t MP4BoxParser_Track::MP4BoxParser_Track(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_QWORD *)a1 = &off_1E2902718;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a3);
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 8;
  *(_QWORD *)a1 = &off_1E29078E8;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a4;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = a5;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 124) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 145) = 0;
  *(_WORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 212) = 0;
  *(_QWORD *)(a1 + 233) = 0;
  *(_QWORD *)(a1 + 228) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 420) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  return a1;
}

uint64_t MP4BoxParser_Track::GetTrackType(MP4BoxParser_Track *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  void (**v10)(MP4BoxParser *__hidden);
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 8);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2 == v1)
    return 0;
  while (*(_DWORD *)(v2 + 16) != 1835297121)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2 == v1)
      return 0;
  }
  v3 = *(_QWORD *)(v2 + 40);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 == v3)
    return 0;
  while (*(_DWORD *)(v4 + 16) != 1751411826)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v3)
      return 0;
  }
  v5 = *((_QWORD *)this + 1);
  v10 = &off_1E2902718;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 88))(&v11);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 8;
  v10 = &off_1E2909600;
  if (MP4BoxParser_HandlerReference::Init((MP4BoxParser **)&v10))
  {
    v6 = v11;
    v10 = &off_1E2902718;
    v11 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return 0;
  }
  v7 = v17;
  v9 = v11;
  v10 = &off_1E2902718;
  v11 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return v7;
}

void sub_18EEED7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_Track::GetTrackID(MP4BoxParser_Track *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void (**v8)(MP4BoxParser *__hidden);
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 8);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2 == v1)
    return 0;
  while (*(_DWORD *)(v2 + 16) != 1953196132)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2 == v1)
      return 0;
  }
  v3 = *((_QWORD *)this + 1);
  v8 = &off_1E2902718;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 88))(&v9);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v8 = &off_1E2908D60;
  v14 = 8;
  v15 = 0;
  if (MP4BoxParser_TrackHeader::Init((MP4BoxParser **)&v8))
  {
    v4 = v9;
    v8 = &off_1E2902718;
    v9 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return 0;
  }
  v5 = v15;
  v7 = v9;
  v8 = &off_1E2902718;
  v9 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return v5;
}

void sub_18EEED8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void MP4BoxParser_Track::UpdateOffsetTableToIndex(MP4BoxParser_Track *this, unsigned int a2)
{
  unsigned int CompressedPacketCount;
  __n128 v5;
  __n128 SampleTableSubBox;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  __n128 v21;
  unsigned int v22;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  __int128 v41;
  uint64_t v42;
  unsigned int v43[2];
  char v44[16];
  std::__shared_weak_count *v45;
  char v46;
  char v47[16];
  std::__shared_weak_count *v48;
  unsigned __int8 v49;
  void (**v50)(MP4BoxParser *__hidden);
  uint64_t v51;
  char v52;
  int v53;
  uint64_t v54;
  char v55;
  int v56;
  int v57;
  int v58;
  void (**v59)(MP4BoxParser *__hidden);
  uint64_t v60;
  char v61;
  int v62;
  uint64_t v63;
  char v64;
  int v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 440))
    return;
  CompressedPacketCount = MP4BoxParser_Track::GetCompressedPacketCount(this);
  if (CompressedPacketCount > a2)
    return;
  SampleTableSubBox = MP4BoxParser_Track::GetSampleTableSubBox((MP4BoxParser_Track *)v47, *((_QWORD *)this + 8), 1937011555, v5);
  if (!v49)
    return;
  v7 = *((_QWORD *)this + 1);
  v59 = &off_1E2902718;
  (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v7 + 88))(&v60, SampleTableSubBox);
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v59 = &off_1E29091C8;
  v65 = 8;
  v66 = 0;
  if (MP4BoxParser_SampleToChunk::Init((MP4BoxParser **)&v59))
  {
    v9 = v60;
    v59 = &off_1E2902718;
    v60 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
LABEL_42:
    v32 = v48;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    return;
  }
  MP4BoxParser_Track::GetSampleSizeBox((MP4BoxParser_Track *)v44, (uint64_t)this, v8);
  if (v46)
  {
    v10 = *((_QWORD *)this + 1);
    v50 = &off_1E2902718;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v10 + 88))(&v51);
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v50 = &off_1E2908B70;
    v57 = 0;
    v58 = 0;
    v56 = 8;
    if (!MP4BoxParser_SampleSize::Init((MP4BoxParser **)&v50))
    {
      v11 = v58 - 1;
      if (v58 - 1 >= a2)
        v11 = a2;
      v12 = *((_DWORD *)this + 100);
      v13 = *((_DWORD *)this + 102);
      v14 = *((_DWORD *)this + 103);
      v15 = *((_DWORD *)this + 101);
      v42 = 0;
      *(_QWORD *)v43 = 0;
      DWORD2(v41) = 0;
      v38 = v11 + 1;
      if (v11 + 1 > CompressedPacketCount)
      {
        v16 = 0;
        v17 = v11 - CompressedPacketCount;
        v35 = v11 - CompressedPacketCount;
        while (1)
        {
          MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex((MP4BoxParser **)&v59, v12, v15, v43, &v43[1]);
          ++v16;
          if (v13 < v43[0])
            break;
          v19 = v16 >= v17;
LABEL_28:
          *((_QWORD *)this + 51) = 0;
          if (++v12 == v43[1])
          {
            ++v15;
            *((_DWORD *)this + 101) = v12;
          }
          v14 = 0;
          v13 = 0;
          if ((CompressedPacketCount >= v38) | v19 & 1)
            goto LABEL_31;
        }
        v36 = v16;
        v37 = v15;
        v18 = 0;
        v19 = 0;
        v20 = v13 + 1;
        while (1)
        {
          v40 = 0;
          if (MP4BoxParser_SampleSize::GetSampleSize((MP4BoxParser_SampleSize *)&v50, CompressedPacketCount + v18, &v40))break;
          v22 = v40;
          v39 = 0;
          if (MP4BoxParser_Track::GetChunkOffset(this, v12, &v39, v21))
            break;
          v39 += *((unsigned int *)this + 103);
          *(_QWORD *)&v41 = v39;
          HIDWORD(v41) = v22;
          v23 = *((_QWORD *)this + 14);
          if (!v23)
          {
            if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1)))
              break;
            if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes(this))
            {
              v23 = *((_QWORD *)this + 14);
              if (!v23)
                break;
              v24 = 0;
              goto LABEL_23;
            }
            v25 = *((_DWORD *)this + 87);
            v23 = operator new();
            *(_OWORD *)v23 = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_DWORD *)(v23 + 32) = v25;
            *((_QWORD *)this + 14) = v23;
          }
          v24 = v23 == 0;
LABEL_23:
          CompressedPacketTable::push_back((char **)v23, &v41);
          if (v24)
            break;
          v14 += v22;
          *((_DWORD *)this + 102) = v20 + v18;
          *((_DWORD *)this + 103) = v14;
          ++v18;
          v19 |= CompressedPacketCount + v18 >= v38;
          if (v18 >= v43[0])
          {
            ++*((_DWORD *)this + 100);
            CompressedPacketCount += v18;
            v16 = v36;
            v15 = v37;
            v17 = v35;
            goto LABEL_28;
          }
        }
      }
    }
LABEL_31:
    v26 = v51;
    v50 = &off_1E2902718;
    v51 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    if (v46)
    {
      v27 = v45;
      if (v45)
      {
        v28 = (unint64_t *)&v45->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
  v30 = v49;
  v31 = v60;
  v59 = &off_1E2902718;
  v60 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  if (v30)
    goto LABEL_42;
}

void sub_18EEEDD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v34 = a31;
  a30 = v31;
  a31 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if (a23)
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  v35 = *(_QWORD *)(v32 - 152);
  *(_QWORD *)(v32 - 160) = v31;
  *(_QWORD *)(v32 - 152) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t MP4BoxParser_Track::GetCompressedPacketCount(MP4BoxParser_Track *this)
{
  uint64_t v2;

  if (!MP4BoxParser_Track::GetInfoFromTrackSubBoxes(this) && *((_DWORD *)this + 86))
    return (*(unsigned int (**)(MP4BoxParser_Track *))(*(_QWORD *)this + 32))(this);
  v2 = *((_QWORD *)this + 14);
  if (v2)
    return *(_QWORD *)(v2 + 24);
  else
    return 0;
}

uint64_t MP4BoxParser_Track::GetCompressedPacketOffset(uint64_t **this, unsigned int a2, unint64_t *a3)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8[3];

  if (*((_BYTE *)this + 440))
  {
    result = MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)this);
    if ((_DWORD)result)
      return result;
    v7 = (unint64_t)this[11] + *((unsigned int *)this + 86) * (unint64_t)a2;
    goto LABEL_6;
  }
  if (this[14])
  {
    MP4BoxParser_Track::UpdateOffsetTableToIndex((MP4BoxParser_Track *)this, a2);
    CompressedPacketTable::operator[]((uint64_t)v8, this[14], a2);
    result = 0;
    v7 = v8[0];
LABEL_6:
    *a3 = v7;
    return result;
  }
  return 0xFFFFFFFFLL;
}

uint64_t MP4BoxParser_Track::GetByteCountForPackets(MP4BoxParser_Track *this, unsigned int a2, int a3, __n128 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int SampleSize;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _BYTE v18[16];
  std::__shared_weak_count *v19;
  char v20;
  void (**v21)(MP4BoxParser *__hidden);
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  char v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  MP4BoxParser_Track::GetSampleSizeBox((MP4BoxParser_Track *)v18, (uint64_t)this, a4);
  if (!v20)
    return 0;
  v7 = *((_QWORD *)this + 1);
  v21 = &off_1E2902718;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v7 + 88))(&v22);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v21 = &off_1E2908B70;
  v28 = 0;
  v29 = 0;
  v27 = 8;
  if (MP4BoxParser_SampleSize::Init((MP4BoxParser **)&v21))
  {
    v8 = v22;
    v21 = &off_1E2902718;
    v22 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = 0;
  }
  else
  {
    v17 = 0;
    if (v24 == 1937011578 && v28)
    {
      SampleSize = MP4BoxParser_SampleSize::GetSampleSize((MP4BoxParser_SampleSize *)&v21, 0, &v17);
      v15 = v22;
      if (SampleSize)
        v9 = 0;
      else
        v9 = v17 * a3;
      v21 = &off_1E2902718;
      v22 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    else
    {
      if (a3 + a2 > a2)
      {
        LODWORD(v9) = 0;
        while (1)
        {
          v17 = 0;
          if (MP4BoxParser_SampleSize::GetSampleSize((MP4BoxParser_SampleSize *)&v21, a2, &v17))
            break;
          v9 = v17 + v9;
          ++a2;
          if (!--a3)
            goto LABEL_27;
        }
      }
      v9 = 0;
LABEL_27:
      v16 = v22;
      v21 = &off_1E2902718;
      v22 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  if (v20)
  {
    v10 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  return v9;
}

void sub_18EEEE0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19;

  v19 = a18;
  a18 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (a16)
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_Track::GetLoudnessInfo(MP4BoxParser_Track *this, const __CFDictionary **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _WORD *v19;
  uint64_t DataSourceBytes;
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  char v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  const __CFDictionary *v33;
  __CFDictionary *v34;
  __int16 v35;
  char v36;
  float v37;
  CFTypeRef cf;
  __int16 v39;
  __CFDictionary *Mutable;
  __int16 v41;
  __int128 v42;
  void *__p;
  void *v44;
  uint64_t v45;
  UInt32 ioPropertyDataSize[2];
  uint64_t v47;
  uint64_t v48;
  char **inSpecifier;
  _QWORD *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  char v56;

  v3 = *((_QWORD *)this + 8);
  if (!v3)
    goto LABEL_13;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 == v3)
    goto LABEL_13;
  while (*(_DWORD *)(v4 + 16) != 1969517665)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v3)
      goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8), v7 == v6))
  {
LABEL_13:
    LOBYTE(v52) = 0;
    v9 = 0;
    v56 = 0;
    *a2 = 0;
    return v9;
  }
  v8 = *(_QWORD *)(v6 + 8);
  while (*(_DWORD *)(v8 + 16) != 1819632756)
  {
    v8 = *(_QWORD *)(v8 + 8);
    if (v8 == v6)
    {
      while (*(_DWORD *)(v7 + 16) != 1818848870)
      {
        v7 = *(_QWORD *)(v7 + 8);
        if (v7 == v6)
          goto LABEL_13;
      }
      v8 = v7;
      break;
    }
  }
  v42 = *(_OWORD *)(v8 + 16);
  v12 = *(_QWORD *)(v8 + 32);
  v11 = *(_QWORD *)(v8 + 40);
  v13 = *(std::__shared_weak_count **)(v8 + 48);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = v12 + *(_QWORD *)(v4 + 32);
  v52 = v42;
  v53 = v16;
  v54 = v11;
  v55 = v13;
  v56 = 1;
  if ((_DWORD)v42 == 1819632756)
  {
    v42 = 0uLL;
    __p = 0;
    LOBYTE(inSpecifier) = 0;
    if (DWORD2(v52) == 8)
    {
      v23 = 0;
      v22 = 0;
    }
    else
    {
      std::vector<unsigned char>::__append(&v42, (DWORD2(v52) - 8), &inSpecifier);
      v23 = (_BYTE *)*((_QWORD *)&v42 + 1);
      v22 = (_BYTE *)v42;
    }
    DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v16 + 8, v23 - v22, v22);
    if ((_DWORD)DataSourceBytes)
      goto LABEL_33;
    if (v23 == v22)
      goto LABEL_38;
    inSpecifier = (char **)CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v22, v23 - v22);
    ioPropertyDataSize[0] = 8;
    DataSourceBytes = AudioFormatGetProperty(0x6C646C62u, 8u, &inSpecifier, ioPropertyDataSize, a2);
    if (inSpecifier)
      CFRelease(inSpecifier);
    if ((_DWORD)DataSourceBytes)
    {
LABEL_33:
      v24 = 0;
    }
    else
    {
LABEL_38:
      DataSourceBytes = 0;
      v24 = 1;
    }
    if (v22)
      operator delete(v22);
    v9 = DataSourceBytes;
    if ((v24 & 1) == 0)
      goto LABEL_44;
    goto LABEL_42;
  }
  if ((_DWORD)v42 != 1818848870)
  {
    v9 = 4294967246;
    goto LABEL_44;
  }
  inSpecifier = 0;
  v50 = 0;
  v51 = 0;
  *(_QWORD *)&v42 = &inSpecifier;
  BYTE8(v42) = 0;
  v17 = operator new(0x18uLL);
  v50 = v17 + 3;
  v51 = (char *)(v17 + 3);
  v17[1] = 0;
  v17[2] = 0;
  *v17 = 0;
  v48 = 0;
  inSpecifier = (char **)v17;
  v18 = (DWORD2(v52) - 12);
  *(_QWORD *)ioPropertyDataSize = 0;
  v47 = 0;
  LOBYTE(v42) = 0;
  std::vector<unsigned char>::__append(ioPropertyDataSize, v18, &v42);
  v19 = *(_WORD **)ioPropertyDataSize;
  DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v16 + 12, v18, *(void **)ioPropertyDataSize);
  v9 = DataSourceBytes;
  if ((_DWORD)DataSourceBytes)
    goto LABEL_24;
  v9 = 561211770;
  if (v18 < 5)
  {
    DataSourceBytes = 0;
LABEL_24:
    if (!v19)
    {
      *(_QWORD *)&v42 = &inSpecifier;
      std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
      goto LABEL_44;
    }
    goto LABEL_25;
  }
  if (v18 < 2 * (unint64_t)*((unsigned __int8 *)v19 + 4) + 5)
  {
    DataSourceBytes = 0;
LABEL_25:
    v21 = 1;
    goto LABEL_26;
  }
  std::vector<ISOLoudnessInfo>::resize(inSpecifier, 1uLL);
  v27 = *inSpecifier;
  *(_BYTE *)v27 = 0;
  *(_WORD *)((char *)v27 + 1) = *v19;
  *((_WORD *)v27 + 2) = 0;
  *((_WORD *)v27 + 3) = v19[1];
  *((_WORD *)v27 + 4) = 768;
  v28 = *((unsigned __int8 *)v19 + 4);
  *((_BYTE *)v27 + 10) = v28;
  std::vector<LoudnessMethod>::resize((char **)v27 + 2, v28);
  v29 = (*inSpecifier)[10];
  if ((*inSpecifier)[10])
  {
    v30 = (char *)(v19 + 3);
    v31 = *((_QWORD *)*inSpecifier + 2) + 1;
    do
    {
      *(_WORD *)(v31 - 1) = *(_WORD *)(v30 - 1);
      *(_WORD *)(v31 + 1) = 768;
      v30 += 2;
      v31 += 4;
      --v29;
    }
    while (v29);
  }
  __p = 0;
  v44 = 0;
  v45 = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v41 = 257;
  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 257;
  v37 = 0.0;
  v36 = 0;
  if (!FindCanonicalLoudness((uint64_t)inSpecifier, (uint64_t)v50, (uint64_t)&v42))
    goto LABEL_61;
  v32 = ExpandLegacyLoudnessBox((CACFDictionary *)&Mutable, (uint64_t)&v42, &v37, &v36);
  DataSourceBytes = v32;
  if (!(_DWORD)v32)
  {
    if (CACFDictionary::Size((CACFDictionary *)&Mutable))
      CACFDictionary::AddDictionary((CACFDictionary *)&cf, CFSTR("main loudness parameters"), Mutable);
    if (v36)
    {
      v34 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v35 = 257;
      CACFDictionary::AddFloat32((CACFDictionary *)&v34, CFSTR("aa itu loudness"), v37);
      CACFDictionary::AddDictionary((CACFDictionary *)&cf, CFSTR("dialogue anchor parameters"), v34);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v34);
    }
LABEL_61:
    if (CACFDictionary::Size((CACFDictionary *)&cf) && cf)
    {
      CFRetain(cf);
      v33 = (const __CFDictionary *)cf;
    }
    else
    {
      v33 = 0;
    }
    DataSourceBytes = 0;
    v21 = 0;
    *a2 = v33;
    goto LABEL_66;
  }
  v21 = 1;
  v9 = v32;
LABEL_66:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
LABEL_26:
  operator delete(v19);
  *(_QWORD *)&v42 = &inSpecifier;
  std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (!v21)
LABEL_42:
    v9 = DataSourceBytes;
LABEL_44:
  if (v13)
  {
    v25 = (unint64_t *)&v13->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v9;
}

void sub_18EEEE620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char *a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  uint64_t v27;

  CACFDictionary::~CACFDictionary((CACFDictionary *)&a13);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a15);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  operator delete(v26);
  a17 = &a26;
  std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v27 - 88);
  _Unwind_Resume(a1);
}

void std::vector<ISOLoudnessInfo>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  void *v21;
  char *v22;
  void *v23;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v4) >> 3) >= v6)
    {
      bzero(a1[1], 40 * ((40 * v6 - 40) / 0x28) + 40);
      a1[1] = &v4[40 * ((40 * v6 - 40) / 0x28) + 40];
      return;
    }
    if (a2 > 0x666666666666666)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v3) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x333333333333333)
      v10 = 0x666666666666666;
    else
      v10 = v9;
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ISOLoudnessInfo>>(v10);
    v12 = &v11[40 * v5];
    v14 = &v11[40 * v13];
    bzero(v12, 40 * ((40 * v6 - 40) / 0x28) + 40);
    v15 = &v12[40 * ((40 * v6 - 40) / 0x28) + 40];
    v16 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = v12;
      a1[1] = v15;
      a1[2] = v14;
      if (!v17)
        return;
    }
    else
    {
      do
      {
        v18 = *((_QWORD *)v17 - 5);
        v17 -= 40;
        v19 = *(_DWORD *)(v17 + 7);
        *((_QWORD *)v12 - 5) = v18;
        v12 -= 40;
        *(_DWORD *)(v12 + 7) = v19;
        *((_QWORD *)v12 + 3) = 0;
        *((_QWORD *)v12 + 4) = 0;
        *((_QWORD *)v12 + 2) = 0;
        *((_OWORD *)v12 + 1) = *((_OWORD *)v17 + 1);
        *((_QWORD *)v12 + 4) = *((_QWORD *)v17 + 4);
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = 0;
        *((_QWORD *)v17 + 4) = 0;
      }
      while (v17 != v16);
      v20 = *a1;
      v17 = a1[1];
      *a1 = v12;
      a1[1] = v15;
      a1[2] = v14;
      if (v17 != v20)
      {
        do
        {
          v21 = (void *)*((_QWORD *)v17 - 3);
          if (v21)
          {
            *((_QWORD *)v17 - 2) = v21;
            operator delete(v21);
          }
          v17 -= 40;
        }
        while (v17 != v20);
        v17 = v20;
      }
      if (!v17)
        return;
    }
    operator delete(v17);
    return;
  }
  if (a2 < v5)
  {
    v22 = &v3[40 * a2];
    while (v4 != v22)
    {
      v23 = (void *)*((_QWORD *)v4 - 3);
      if (v23)
      {
        *((_QWORD *)v4 - 2) = v23;
        operator delete(v23);
      }
      v4 -= 40;
    }
    a1[1] = v22;
  }
}

void std::vector<LoudnessMethod>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[4 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    v19 = &v4[4 * v6];
LABEL_17:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 1;
  if (v8 >> 1 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
  v12 = &v11[4 * v5];
  v14 = &v11[4 * v13];
  bzero(v12, 4 * v6);
  v15 = &v12[4 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      v18 = *((_DWORD *)v16 - 1);
      v16 -= 4;
      *((_DWORD *)v12 - 1) = v18;
      v12 -= 4;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

void std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<ISOLoudnessInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<ISOLoudnessInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ISOLoudnessInfo>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a1);
}

BOOL MP4BoxParser_Track::GetPacketTableInfo(MP4BoxParser_Track *this, AudioFilePacketTableInfo *a2, uint64_t a3, unsigned int a4, int a5)
{
  int v5;
  SInt64 v6;
  uint64_t v7;
  SInt64 v8;
  double v9;
  uint64_t v10;
  SInt64 v12;

  v5 = *((_DWORD *)this + 105);
  if ((v5 & 0x80000000) == 0)
  {
    v6 = *((unsigned int *)this + 87);
    v7 = *((int *)this + 104);
    if (v6 * a3 >= v7)
    {
      v8 = v6 * a3 - v7;
    }
    else
    {
      LODWORD(v7) = v6 * a3;
      v8 = 0;
    }
    a2->mPrimingFrames = v7;
    v9 = *((double *)this + 41) * (double)v5;
    a2->mNumberValidFrames = v8;
    v10 = (uint64_t)(v9 / (double)a4);
    if (v10 >= 1 && v8 > v10)
    {
      v12 = v8 - v10;
      if (!a5 || v12 < v6)
      {
        a2->mRemainderFrames = v12;
        a2->mNumberValidFrames = v8 - (int)v12;
      }
    }
  }
  return v5 >= 0;
}

void MP4Parser_PacketProvider::MP4Parser_PacketProvider(MP4Parser_PacketProvider *this, const void *a2, unsigned int a3, int a4)
{
  uint64_t v8;

  *(_QWORD *)this = &off_1E2902718;
  v8 = operator new();
  *(_BYTE *)(v8 + 8) = 0;
  *(_QWORD *)v8 = &off_1E2907000;
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 9) = 8;
  *((_BYTE *)this + 56) = 1;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_DWORD *)this + 19) = a4;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_WORD *)this + 60) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_QWORD *)((char *)this + 140) = 0;
  *(_QWORD *)((char *)this + 145) = 0;
  *(_QWORD *)((char *)this + 124) = 0;
  *(_QWORD *)((char *)this + 132) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_WORD *)this + 104) = 0;
  *(_QWORD *)((char *)this + 228) = 0;
  *(_QWORD *)((char *)this + 233) = 0;
  *(_QWORD *)((char *)this + 212) = 0;
  *(_QWORD *)((char *)this + 220) = 0;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_BYTE *)this + 296) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_DWORD *)this + 96) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_DWORD *)this + 104) = 0;
  *((_QWORD *)this + 51) = 0;
  *(_QWORD *)((char *)this + 420) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 54) = 0;
  *((_BYTE *)this + 440) = 0;
  *(_QWORD *)this = &off_1E2908DD8;
  *((_QWORD *)this + 1) = v8;
  *((_QWORD *)this + 58) = 0;
  *(_QWORD *)((char *)this + 444) = 0;
  *(_QWORD *)((char *)this + 452) = 0;
}

void MP4Parser_PacketProvider::AddTrackFragment(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, __int128 *a5)
{
  int v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t i;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  uint64_t k;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __n128 **v38[2];
  char v39;
  int v40;
  uint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  unsigned int v48;
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  __int128 v58;
  __int128 v59;
  unsigned int v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)a1))
    return;
  v10 = *(_DWORD *)(a1 + 348);
  v11 = operator new();
  *(_BYTE *)(v11 + 8) = 0;
  *(_QWORD *)v11 = &off_1E2907000;
  *(_QWORD *)(v11 + 16) = a3;
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 8;
  v38[0] = (__n128 **)&off_1E29091F8;
  v38[1] = (__n128 **)v11;
  v44 = a1;
  v45 = 1;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v53 = 0;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0;
  v58 = 0u;
  v59 = 0u;
  v60 = 0;
  v61 = a4;
  v62 = *a5;
  if (MP4BoxParser_TrackFragment::Init(v38, v10))
    goto LABEL_3;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  MP4BoxParser_TrackFragment::ParsePackets((uint64_t)v38);
  *(_DWORD *)(a1 + 444) += v48;
  MP4BoxParser_TrackFragment::ParsePackets((uint64_t)v38);
  *(_QWORD *)(a1 + 448) += *((_QWORD *)&v59 + 1);
  MP4BoxParser_TrackFragment::ParsePackets((uint64_t)v38);
  if (v60 > *(_DWORD *)(a1 + 456))
    *(_DWORD *)(a1 + 456) = v60;
  for (i = 0; ; ++i)
  {
    MP4BoxParser_TrackFragment::ParsePackets((uint64_t)v38);
    if (i >= v48)
      break;
    *((_QWORD *)&v35 + 1) = 0;
    v14 = v47;
    if (!v47)
      continue;
    CompressedPacketTable::operator[]((uint64_t)&v36, v47, i);
    *(_QWORD *)&v35 = v36;
    CompressedPacketTable::operator[]((uint64_t)&v36, v14, i);
    HIDWORD(v35) = HIDWORD(v36);
    v15 = *(_QWORD *)(a1 + 464);
    if (v15)
      goto LABEL_11;
    if (!MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)a1))
    {
      v16 = *(_DWORD *)(a1 + 348);
      v15 = operator new();
      *(_OWORD *)v15 = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_DWORD *)(v15 + 32) = v16;
      *(_QWORD *)(a1 + 464) = v15;
LABEL_11:
      CompressedPacketTable::push_back((char **)v15, &v35);
      continue;
    }
    v15 = *(_QWORD *)(a1 + 464);
    if (v15)
      goto LABEL_11;
  }
  MP4BoxParser_TrackFragment::ParsePackets((uint64_t)v38);
  if (v49)
  {
    v17 = *((_QWORD *)&v51 + 1);
    for (j = v52; v17 != j; v17 += 24)
    {
      v36 = *(_OWORD *)v17;
      v37 = *(_QWORD *)(v17 + 16);
      *(_QWORD *)&v36 = v36 + v12;
      SampleToRollDistanceTable::append_entry(a1 + 152, &v36);
    }
  }
  MP4BoxParser_TrackFragment::ParsePackets((uint64_t)v38);
  if (v53)
  {
    v19 = *((_QWORD *)&v55 + 1);
    for (k = v56; v19 != k; v19 += 24)
    {
      v36 = *(_OWORD *)v19;
      v37 = *(_QWORD *)(v19 + 16);
      *(_QWORD *)&v36 = v36 + v12;
      SampleToRollDistanceTable::append_entry(a1 + 240, &v36);
    }
  }
  MP4BoxParser_TrackFragment::ParsePackets((uint64_t)v38);
  if (v57)
  {
    v21 = *(_QWORD *)(a1 + 304);
    v22 = *(_QWORD *)(a1 + 312) - v21;
    v23 = ((uint64_t)(*((_QWORD *)&v58 + 1) - v58) >> 3) + (v22 >> 3);
    if (v23 > (*(_QWORD *)(a1 + 320) - v21) >> 3)
    {
      if (v23 >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v23);
      v25 = &v24[8 * (v22 >> 3)];
      v27 = &v24[8 * v26];
      v28 = *(char **)(a1 + 304);
      v29 = *(char **)(a1 + 312);
      v30 = v25;
      if (v29 != v28)
      {
        v30 = v25;
        do
        {
          v31 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *((_QWORD *)v30 - 1) = v31;
          v30 -= 8;
        }
        while (v29 != v28);
      }
      *(_QWORD *)(a1 + 304) = v30;
      *(_QWORD *)(a1 + 312) = v25;
      *(_QWORD *)(a1 + 320) = v27;
      if (v28)
        operator delete(v28);
    }
    v33 = (_QWORD *)*((_QWORD *)&v58 + 1);
    v32 = (_QWORD *)v58;
    if ((_QWORD)v58 != *((_QWORD *)&v58 + 1))
    {
      v34 = a1 + 296;
      do
      {
        *(_QWORD *)&v36 = *v32 + v12;
        SyncSampleTable::append_entry(v34, &v36);
        ++v32;
      }
      while (v32 != v33);
    }
  }
LABEL_3:
  MP4BoxParser_TrackFragment::~MP4BoxParser_TrackFragment((MP4BoxParser_TrackFragment *)v38);
}

void sub_18EEEF09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  MP4BoxParser_TrackFragment::~MP4BoxParser_TrackFragment((MP4BoxParser_TrackFragment *)va);
  _Unwind_Resume(a1);
}

void SampleToRollDistanceTable::append_entry(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned __int16 *v8;
  unint64_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  uint64_t v19;
  __int16 v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;

  if (*(_BYTE *)a1
    && (v4 = *(_QWORD *)(a1 + 40), v4 != *(_QWORD *)(a1 + 32))
    && (v5 = *(_QWORD *)(v4 - 16), *(_QWORD *)a2 == v5 + *(_QWORD *)(v4 - 24))
    && *((unsigned __int16 *)a2 + 8) == *(unsigned __int16 *)(v4 - 8))
  {
    *(_QWORD *)(v4 - 16) = *((_QWORD *)a2 + 1) + v5;
  }
  else
  {
    v6 = *(char **)(a1 + 8);
    v7 = *(char **)(a1 + 16);
    if (v6 == v7)
    {
LABEL_10:
      v9 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v7 >= v9)
      {
        v11 = v7 - v6;
        if (v7 - v6 <= -3)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v12 = v11 >> 1;
        v13 = v9 - (_QWORD)v6;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        v15 = v13 >= 0x7FFFFFFFFFFFFFFELL;
        v16 = 0x7FFFFFFFFFFFFFFFLL;
        if (!v15)
          v16 = v14;
        if (v16)
        {
          v16 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v16);
          v6 = *(char **)(a1 + 8);
          v7 = *(char **)(a1 + 16);
        }
        else
        {
          v17 = 0;
        }
        v18 = (_WORD *)(v16 + 2 * v12);
        v19 = v16 + 2 * v17;
        *v18 = *((_WORD *)a2 + 8);
        v10 = v18 + 1;
        while (v7 != v6)
        {
          v20 = *((_WORD *)v7 - 1);
          v7 -= 2;
          *--v18 = v20;
        }
        *(_QWORD *)(a1 + 8) = v18;
        *(_QWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 24) = v19;
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)v7 = *((_WORD *)a2 + 8);
        v10 = v7 + 2;
      }
      *(_QWORD *)(a1 + 16) = v10;
    }
    else
    {
      v8 = *(unsigned __int16 **)(a1 + 8);
      while (*v8 != *((__int16 *)a2 + 8))
      {
        if (++v8 == (unsigned __int16 *)v7)
          goto LABEL_10;
      }
    }
    v22 = *(_QWORD **)(a1 + 40);
    v21 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v22 >= v21)
    {
      v25 = *(_QWORD **)(a1 + 32);
      v26 = 0xAAAAAAAAAAAAAAABLL * (v22 - v25) + 1;
      if (v26 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v25) >> 3);
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x555555555555555)
        v28 = 0xAAAAAAAAAAAAAAALL;
      else
        v28 = v26;
      if (v28)
      {
        if (v28 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v29 = (char *)operator new(24 * v28);
      }
      else
      {
        v29 = 0;
      }
      v30 = &v29[8 * (v22 - v25)];
      *(_OWORD *)v30 = *a2;
      *((_QWORD *)v30 + 2) = *((_QWORD *)a2 + 2);
      v24 = v30 + 24;
      if (v22 != v25)
      {
        do
        {
          v31 = *(_OWORD *)(v22 - 3);
          *((_QWORD *)v30 - 1) = *(v22 - 1);
          *(_OWORD *)(v30 - 24) = v31;
          v30 -= 24;
          v22 -= 3;
        }
        while (v22 != v25);
        v22 = *(_QWORD **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 32) = v30;
      *(_QWORD *)(a1 + 40) = v24;
      *(_QWORD *)(a1 + 48) = &v29[24 * v28];
      if (v22)
        operator delete(v22);
    }
    else
    {
      v23 = *a2;
      v22[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)v22 = v23;
      v24 = v22 + 3;
    }
    *(_QWORD *)(a1 + 40) = v24;
    *(_BYTE *)a1 = 1;
  }
}

uint64_t MP4Parser_PacketProvider::GetMaximumPacketSize(MP4Parser_PacketProvider *this)
{
  __n128 v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v7;
  int SampleSize;
  unsigned int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BYTE v14[16];
  std::__shared_weak_count *v15;
  char v16;
  unsigned int v17;
  void (**v18)(MP4BoxParser *__hidden);
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1))
    || (MP4BoxParser_Track::GetSampleSizeBox((MP4BoxParser_Track *)v14, (uint64_t)this, v2), !v16))
  {
    v4 = 0;
    goto LABEL_6;
  }
  v3 = *((_QWORD *)this + 1);
  v18 = &off_1E2902718;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 88))(&v19);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v18 = &off_1E2908B70;
  v25 = 0;
  v26 = 0;
  v24 = 8;
  if (!MP4BoxParser_SampleSize::Init((MP4BoxParser **)&v18))
  {
    if (v21 == 1937011578)
    {
      v4 = v25;
      if (v25)
        goto LABEL_18;
    }
    v17 = 0;
    if (v26)
    {
      v7 = 0;
      v4 = 0;
      do
      {
        SampleSize = MP4BoxParser_SampleSize::GetSampleSize((MP4BoxParser_SampleSize *)&v18, v7, &v17);
        v9 = v17;
        if (v17 <= v4)
          v9 = v4;
        if (!SampleSize)
          v4 = v9;
        ++v7;
      }
      while (v7 < v26);
      goto LABEL_18;
    }
  }
  v4 = 0;
LABEL_18:
  v10 = v19;
  v18 = &off_1E2902718;
  v19 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v16)
  {
    v11 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
LABEL_6:
  v5 = *((_DWORD *)this + 114);
  if (v4 <= v5)
    return v5;
  else
    return v4;
}

void sub_18EEEF4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  if (a15 && a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4Parser_PacketProvider::GetPacketInfo(MP4Parser_PacketProvider *this, unsigned int a2, unsigned int *a3, unint64_t *a4)
{
  unsigned int v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  unsigned int v18;
  _BYTE v19[16];
  std::__shared_weak_count *v20;
  char v21;
  void (**v22)(MP4BoxParser *__hidden);
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes(this))
  {
    v8 = 0;
LABEL_17:
    v11 = 1885563711;
    if ((*(unsigned int (**)(MP4Parser_PacketProvider *))(*(_QWORD *)this + 32))(this) > a2)
    {
      v16 = (uint64_t *)*((_QWORD *)this + 58);
      if (v16)
      {
        CompressedPacketTable::operator[]((uint64_t)&v22, v16, a2 - v8);
        *a4 = (unint64_t)v22;
        CompressedPacketTable::operator[]((uint64_t)&v22, v16, a2 - v8);
        v11 = 0;
        *a3 = HIDWORD(v23);
      }
    }
    return v11;
  }
  v8 = *((_DWORD *)this + 25);
  if (v8 <= a2)
    goto LABEL_17;
  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1)))
    return 0xFFFFFFFFLL;
  MP4BoxParser_Track::GetSampleSizeBox((MP4BoxParser_Track *)v19, (uint64_t)this, v9);
  if (!v21)
    return 0;
  v10 = *((_QWORD *)this + 1);
  v22 = &off_1E2902718;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v10 + 88))(&v23);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v22 = &off_1E2908B70;
  v29 = 0;
  v30 = 0;
  v28 = 8;
  v11 = MP4BoxParser_SampleSize::Init((MP4BoxParser **)&v22);
  if (!(_DWORD)v11)
  {
    v18 = 0;
    if (!MP4BoxParser_SampleSize::GetSampleSize((MP4BoxParser_SampleSize *)&v22, a2, &v18))
    {
      *a3 = v18;
      MP4BoxParser_Track::GetCompressedPacketOffset((uint64_t **)this, a2, a4);
    }
  }
  v12 = v23;
  v22 = &off_1E2902718;
  v23 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v21)
  {
    v13 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  return v11;
}

void sub_18EEEF774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18)
{
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  if (a16 && a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4Parser_PacketProvider::GetContiguousPacketCountAndSize(uint64_t **this, unsigned int a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  int InfoFromTrackSubBoxes;
  unsigned int v11;
  unsigned int CompressedPacketCount;
  __n128 v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  unsigned int ByteCountForPackets;
  _QWORD v31[3];
  _BYTE v32[12];
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;

  *a4 = 0;
  *a5 = 0;
  InfoFromTrackSubBoxes = MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)this);
  v11 = 0;
  if (!InfoFromTrackSubBoxes)
  {
    v11 = *((_DWORD *)this + 25);
    if (v11 > a2)
    {
      MP4BoxParser_Track::UpdateOffsetTableToIndex((MP4BoxParser_Track *)this, a3 + a2);
      CompressedPacketCount = MP4BoxParser_Track::GetCompressedPacketCount((MP4BoxParser_Track *)this);
      if (CompressedPacketCount > a2)
      {
        if (*((_BYTE *)this + 440))
        {
          v14 = ((uint64_t (*)(uint64_t **))(*this)[4])(this) - a2;
          if (v14 >= a3)
            v15 = a3;
          else
            v15 = v14;
LABEL_28:
          if (v15 >= a3)
            v29 = a3;
          else
            v29 = v15;
          *a4 = v29;
          if (v29)
            ByteCountForPackets = MP4BoxParser_Track::GetByteCountForPackets((MP4BoxParser_Track *)this, a2, v29, v13);
          else
            ByteCountForPackets = 0;
          result = 0;
          *a5 = ByteCountForPackets;
          return result;
        }
        v23 = this[14];
        if (v23)
        {
          if (a3 + a2 <= CompressedPacketCount)
            v24 = a3;
          else
            v24 = CompressedPacketCount - a2;
          CompressedPacketTable::operator[]((uint64_t)&v34, v23, a2);
          v25 = v34;
          CompressedPacketTable::operator[]((uint64_t)&v34, this[14], a2);
          if (v24 == 1)
          {
            v15 = 1;
          }
          else
          {
            v26 = v35;
            v15 = 1;
            while (1)
            {
              v27 = v26 + v25;
              CompressedPacketTable::operator[]((uint64_t)&v34, this[14], a2 + v15);
              if (v27 < v34)
                break;
              CompressedPacketTable::operator[]((uint64_t)&v34, this[14], a2 + v15);
              v25 = v34;
              CompressedPacketTable::operator[]((uint64_t)&v34, this[14], a2 + v15);
              v26 = v35;
              if (v15++ >= v24 - 1)
              {
                v15 = v24;
                goto LABEL_28;
              }
            }
          }
          goto LABEL_28;
        }
      }
      v15 = 0;
      goto LABEL_28;
    }
  }
  v16 = a2 - v11;
  if (v16 >= *((_DWORD *)this + 111))
    return 1885563711;
  v17 = this[58];
  if (v17)
  {
    do
    {
      ++*a4;
      CompressedPacketTable::operator[]((uint64_t)&v34, v17, v16);
      *a5 += v35;
      if (*a4 == a3)
        break;
      v18 = v16 + 1;
      v19 = *((unsigned int *)this + 111);
      if (v16 + 1 < v19)
      {
        CompressedPacketTable::operator[]((uint64_t)&v34, v17, v16);
        v20 = v34;
        CompressedPacketTable::operator[]((uint64_t)v32, v17, v16);
        v21 = v20 + v33;
        CompressedPacketTable::operator[]((uint64_t)v31, v17, v18);
        if (v21 != v31[0])
          return 0;
        v19 = *((unsigned int *)this + 111);
      }
      v16 = v18;
    }
    while (v18 < v19);
  }
  return 0;
}

uint64_t MP4Parser_PacketProvider::GetPacketOffset(MP4Parser_PacketProvider *this, unsigned int a2, unint64_t *a3)
{
  uint64_t v7[3];

  if ((*(unsigned int (**)(MP4Parser_PacketProvider *))(*(_QWORD *)this + 32))(this) <= a2)
    return 1885563711;
  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1)))
    return 0xFFFFFFFFLL;
  if (!MP4BoxParser_Track::GetInfoFromTrackSubBoxes(this) && *((_DWORD *)this + 25) > a2)
  {
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1)))
    {
      MP4BoxParser_Track::UpdateOffsetTableToIndex(this, a2);
      return MP4BoxParser_Track::GetCompressedPacketOffset((uint64_t **)this, a2, a3);
    }
    return 0xFFFFFFFFLL;
  }
  if (!*((_QWORD *)this + 58))
    return 0xFFFFFFFFLL;
  CompressedPacketTable::operator[]((uint64_t)v7, *((uint64_t **)this + 58), a2 - *((_DWORD *)this + 25));
  *a3 = v7[0];
  return 0;
}

uint64_t MP4Parser_PacketProvider::GetPacketIndexForOffset(MP4Parser_PacketProvider *this, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v6 = *a3;
  if (v6 >= (*(unsigned int (**)(MP4Parser_PacketProvider *))(*(_QWORD *)this + 32))(this))
    return 0;
  v8 = 0;
  while (1)
  {
    result = MP4Parser_PacketProvider::GetPacketOffset(this, v6, (unint64_t *)&v8);
    if ((_DWORD)result)
      break;
    if (v8 >= a2)
    {
      result = 0;
      *a3 = v6;
      return result;
    }
    if (++v6 >= (*(unsigned int (**)(MP4Parser_PacketProvider *))(*(_QWORD *)this + 32))(this))
      return 0;
  }
  return result;
}

uint64_t DataSource::GetSize32(DataSource *this, unsigned int *a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  result = (*(uint64_t (**)(DataSource *, uint64_t *))(*(_QWORD *)this + 24))(this, &v4);
  if (!(_DWORD)result)
  {
    if (v4 <= 0xFFFFFFFFLL)
    {
      result = 0;
      *a2 = v4;
    }
    else
    {
      return 1868981823;
    }
  }
  return result;
}

uint64_t DataSource::ReadBytes64(DataSource *this, unsigned __int16 a2, uint64_t a3, unint64_t a4, char *a5, unint64_t *a6)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unsigned int v15;

  if (a4)
  {
    v8 = a4;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v8 >= 0xFFFFFFFF ? 0xFFFFFFFFLL : v8;
      v15 = 0;
      result = (*(uint64_t (**)(DataSource *, _QWORD, uint64_t, uint64_t, char *, unsigned int *))(*(_QWORD *)this + 48))(this, a2, a3, v12, &a5[v11], &v15);
      v10 += v15;
      if ((_DWORD)result || v15 < v12)
        break;
      a3 = 0;
      v11 += v12;
      a2 = 1;
      v8 -= v12;
      if (!v8)
        goto LABEL_14;
    }
  }
  else
  {
    v10 = 0;
LABEL_14:
    result = 0;
  }
  if (a6)
    *a6 = v10;
  return result;
}

uint64_t DataSource::WriteBytes64(DataSource *this, unsigned __int16 a2, uint64_t a3, unint64_t a4, char *a5, unint64_t *a6)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unsigned int v15;

  if (a4)
  {
    v8 = a4;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v8 >= 0xFFFFFFFF ? 0xFFFFFFFFLL : v8;
      v15 = 0;
      result = (*(uint64_t (**)(DataSource *, _QWORD, uint64_t, uint64_t, char *, unsigned int *))(*(_QWORD *)this + 56))(this, a2, a3, v12, &a5[v11], &v15);
      v10 += v15;
      if ((_DWORD)result || v15 < v12)
        break;
      a3 = 0;
      v11 += v12;
      a2 = 1;
      v8 -= v12;
      if (!v8)
        goto LABEL_14;
    }
  }
  else
  {
    v10 = 0;
LABEL_14:
    result = 0;
  }
  if (a6)
    *a6 = v10;
  return result;
}

uint64_t DataSource::WithData(uint64_t a1, uint64_t a2, size_t size, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  _BYTE buf[12];
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v8 = malloc_type_calloc(1uLL, size, 0x2B2D8D1BuLL);
  if (v8)
  {
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, size_t, void *, unsigned int *))(*(_QWORD *)a1 + 48))(a1, 0, a2, size, v8, &v13);
    if ((_DWORD)v9)
    {
      v10 = v9;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "DataSource.cpp";
        v15 = 1024;
        v16 = 121;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data read failed", buf, 0x12u);
      }
    }
    else if (v13 >= size)
    {
      *(_QWORD *)buf = v8;
      v11 = *(_QWORD *)(a4 + 24);
      if (!v11)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 48))(v11, buf);
      v10 = 0;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "DataSource.cpp";
        v15 = 1024;
        v16 = 122;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data insufficient amount", buf, 0x12u);
      }
      v10 = 4294967257;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "DataSource.cpp";
      v15 = 1024;
      v16 = 118;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data insufficient memory", buf, 0x12u);
    }
    v10 = 4294967188;
  }
  free(v8);
  return v10;
}

uint64_t DataSource::Slice@<X0>(DataSource *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)result = &off_1E2906BD8;
  *(_QWORD *)(result + 16) = this;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = 0;
  *a3 = result;
  return result;
}

uint64_t DataSource::SetCloseOnDelete(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8) = a2;
  return this;
}

void Slice_DataSource::~Slice_DataSource(Slice_DataSource *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t Slice_DataSource::GetSize(Slice_DataSource *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (*((_BYTE *)this + 48))
  {
    v4 = *((_QWORD *)this + 5);
LABEL_3:
    result = 0;
    *a2 = v4;
    return result;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2), a2);
  if (!(_DWORD)result)
  {
    v6 = *((_QWORD *)this + 3);
    if (*a2 < v6)
      v6 = *a2;
    v4 = *a2 - v6;
    goto LABEL_3;
  }
  return result;
}

uint64_t Slice_DataSource::SetSize(Slice_DataSource *this, uint64_t a2)
{
  *((_QWORD *)this + 5) = a2;
  *((_BYTE *)this + 48) = 1;
  return 0;
}

uint64_t Slice_DataSource::GetPos(Slice_DataSource *this, uint64_t *a2)
{
  *a2 = *((_QWORD *)this + 4);
  return 0;
}

uint64_t Slice_DataSource::ReadBytes(Slice_DataSource *this, char a2, uint64_t a3, unsigned int a4, void *a5, unsigned int *a6)
{
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  if (a6)
    *a6 = 0;
  v14 = 0;
  result = (*(uint64_t (**)(Slice_DataSource *, uint64_t *))(*(_QWORD *)this + 24))(this, &v14);
  if (!(_DWORD)result)
  {
    if ((a2 & 3) == 2)
    {
      a3 += v14;
    }
    else if ((a2 & 3) == 1)
    {
      a3 += *((_QWORD *)this + 4);
    }
    else if ((a2 & 3) != 0)
    {
      a3 = 0;
    }
    result = 4294967256;
    if ((a3 & 0x8000000000000000) == 0 && v14 > a3)
    {
      if (v14 - a3 >= a4)
        v12 = a4;
      else
        v12 = v14 - a3;
      if (v12 < 1)
      {
        return 4294967246;
      }
      else
      {
        v13 = v12;
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2), 0, *((_QWORD *)this + 3) + a3);
        if (a6)
          *a6 = v13;
        *((_QWORD *)this + 4) = a3 + v13;
      }
    }
  }
  return result;
}

void Slice_DataSource::WriteBytes(Slice_DataSource *this, unsigned __int16 a2, uint64_t a3, unsigned int a4, const void *a5, unsigned int *a6)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not writable");
}

void sub_18EEF0250(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Slice_DataSource::WithData(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*a1 + 24))(a1, &v15);
  if ((_DWORD)v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v19 = "DataSource.cpp";
      v20 = 1024;
      v21 = 834;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data unable to determine size", buf, 0x12u);
    }
    return v8;
  }
  if ((a2 & 0x8000000000000000) == 0 && v15 > a2)
  {
    if (v15 - a3 < a2)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v19 = "DataSource.cpp";
        v20 = 1024;
        v21 = 836;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data insufficient amount", buf, 0x12u);
      }
      return 4294967257;
    }
    v10 = a1[2];
    v11 = a1[3];
    v12 = (_QWORD *)a4[3];
    if (v12)
    {
      if (v12 == a4)
      {
        v17 = v16;
        (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v16);
      }
      else
      {
        v17 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
      }
    }
    else
    {
      v17 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v10 + 80))(v10, v11 + a2, a3, v16);
    v13 = v17;
    if (v17 == v16)
    {
      v14 = 4;
      v13 = v16;
    }
    else
    {
      if (!v17)
        return 0;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
    return 0;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v19 = "DataSource.cpp";
    v20 = 1024;
    v21 = 835;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data bad position", buf, 0x12u);
  }
  return 4294967256;
}

void sub_18EEF04E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void Slice_DataSource::Slice(Slice *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v5 = *((_QWORD *)this + 5);
  v6 = *((_QWORD *)this + 6);
  if (v5 >= a2)
    v7 = a2;
  else
    v7 = *((_QWORD *)this + 5);
  if (*((_QWORD *)this + 6))
    v8 = v7;
  else
    v8 = 0;
  if (*((_QWORD *)this + 6))
    v9 = v7;
  else
    v9 = a2;
  v10 = v5 - v8;
  v11 = operator new();
  v12 = *((_QWORD *)this + 2);
  v13 = *((_QWORD *)this + 3) + v9;
  *(_BYTE *)(v11 + 8) = 0;
  *(_QWORD *)v11 = &off_1E2906BD8;
  *(_QWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 24) = v13;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v10;
  *(_QWORD *)(v11 + 48) = v6;
  *a3 = v11;
}

uint64_t Slice_DataSource::CanSeek(Slice_DataSource *this)
{
  return 1;
}

uint64_t Slice_DataSource::CanGetSize(Slice_DataSource *this)
{
  return 1;
}

uint64_t Slice_DataSource::CanSetSize(Slice_DataSource *this)
{
  return 0;
}

uint64_t Slice_DataSource::CanRead(Slice_DataSource *this)
{
  return 1;
}

uint64_t Slice_DataSource::CanWrite(Slice_DataSource *this)
{
  return 0;
}

uint64_t Slice_DataSource::IsInMemory(Slice_DataSource *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 144))(*((_QWORD *)this + 2));
}

uint64_t UnixFile_DataSource::GetPos(UnixFile_DataSource *this, uint64_t *a2)
{
  *a2 = *((_QWORD *)this + 4);
  return 0;
}

uint64_t UnixFile_DataSource::WriteBytes(UnixFile_DataSource *this, unsigned int a2, uint64_t a3, unsigned int a4, const void *a5, unsigned int *a6)
{
  uint64_t v11;
  off_t v12;
  int v13;
  uint64_t v14;
  ssize_t v15;
  unsigned int v16;
  uint64_t result;

  if (a6)
    *a6 = 0;
  if (!a5)
    return 4294967246;
  v11 = UnixFile_DataSource::UFCurrentOffset(this, a2, a3);
  if (v11 < 0)
    return 4294967256;
  v12 = v11;
  *((_QWORD *)this + 3) = -1;
  v13 = (a2 >> 5) & 1;
  v14 = *((unsigned int *)this + 5);
  if ((_DWORD)v14 != v13)
  {
    *((_DWORD *)this + 5) = v13;
    fcntl(*((_DWORD *)this + 3), 48, v14);
  }
  v15 = pwrite(*((_DWORD *)this + 3), a5, a4, v12);
  if (v15 == -1)
    return 4294967256;
  v16 = v15;
  *((_QWORD *)this + 4) = v15 + v12;
  result = 0;
  if (a6)
    *a6 = v16;
  return result;
}

uint64_t UnixFile_DataSource::CanSeek(UnixFile_DataSource *this)
{
  return 1;
}

uint64_t UnixFile_DataSource::CanGetSize(UnixFile_DataSource *this)
{
  return 1;
}

uint64_t UnixFile_DataSource::CanSetSize(UnixFile_DataSource *this)
{
  return 1;
}

uint64_t UnixFile_DataSource::CanRead(UnixFile_DataSource *this)
{
  return *((_BYTE *)this + 16) & 1;
}

uint64_t UnixFile_DataSource::CanWrite(UnixFile_DataSource *this)
{
  return *((_BYTE *)this + 16) & 2;
}

uint64_t UnixFile_DataSource::IsInMemory(UnixFile_DataSource *this)
{
  return 0;
}

void Seekable_DataSource::~Seekable_DataSource(Seekable_DataSource *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t Seekable_DataSource::GetSize(Seekable_DataSource *this, uint64_t *a2)
{
  uint64_t (*v3)(_QWORD);
  uint64_t v4;

  v3 = (uint64_t (*)(_QWORD))*((_QWORD *)this + 6);
  if (v3)
    v4 = v3(*((_QWORD *)this + 2));
  else
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  *a2 = v4;
  return 0;
}

uint64_t Seekable_DataSource::SetSize(Seekable_DataSource *this)
{
  uint64_t (*v1)(_QWORD);

  v1 = (uint64_t (*)(_QWORD))*((_QWORD *)this + 7);
  if (v1)
    return v1(*((_QWORD *)this + 2));
  else
    return 1869627199;
}

uint64_t Seekable_DataSource::GetPos(Seekable_DataSource *this, uint64_t *a2)
{
  *a2 = *((_QWORD *)this + 3);
  return 0;
}

uint64_t Seekable_DataSource::ReadBytes(Seekable_DataSource *this, char a2, uint64_t a3, unsigned int a4, void *a5, unsigned int *a6)
{
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  if (a6)
    *a6 = 0;
  if (!*((_QWORD *)this + 4))
    return 1869627199;
  if (!a5)
    return 4294967246;
  v17 = 0;
  result = (*(uint64_t (**)(Seekable_DataSource *, uint64_t *))(*(_QWORD *)this + 24))(this, &v17);
  if ((_DWORD)result)
    return result;
  v13 = a2 & 3;
  if ((a2 & 3) == 0)
    goto LABEL_10;
  if (v13 == 1)
  {
    a3 += *((_QWORD *)this + 3);
    if (a3 < 0)
      return 4294967256;
    goto LABEL_18;
  }
  if (v13 == 2)
  {
    a3 += v17;
LABEL_10:
    if (a3 < 0)
      return 4294967256;
    goto LABEL_18;
  }
  a3 = 0;
LABEL_18:
  if (v17 <= a3)
    return 4294967257;
  if (v17 - a3 >= a4)
    v14 = a4;
  else
    v14 = v17 - a3;
  v16 = 0;
  result = (*((uint64_t (**)(_QWORD, uint64_t, uint64_t, void *, unsigned int *))this + 4))(*((_QWORD *)this + 2), a3, v14, a5, &v16);
  v15 = v16;
  if (a6)
    *a6 = v16;
  *((_QWORD *)this + 3) = a3 + v15;
  return result;
}

uint64_t Seekable_DataSource::WriteBytes(Seekable_DataSource *this, char a2, uint64_t a3, uint64_t a4, const void *a5, unsigned int *a6)
{
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t, const void *, unsigned int *);
  int v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  v6 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, const void *, unsigned int *))*((_QWORD *)this + 5);
  if (!v6)
    return 1869627199;
  if (!a5)
    return 4294967246;
  v19 = 0;
  v12 = a2 & 3;
  if (v12 == 2)
  {
    result = (*(uint64_t (**)(Seekable_DataSource *, uint64_t *))(*(_QWORD *)this + 24))(this, &v19);
    if ((_DWORD)result)
      return result;
    v14 = (_QWORD *)((char *)this + 24);
    v15 = v19;
LABEL_11:
    v16 = v15 + a3;
    if (v15 + a3 < 0)
      return 4294967256;
    goto LABEL_14;
  }
  v14 = (_QWORD *)((char *)this + 24);
  if ((a2 & 3) != 0)
  {
    if (v12 != 1)
    {
      v15 = 0;
      v16 = 0;
      if (v12 != 2)
        goto LABEL_15;
      goto LABEL_11;
    }
    v16 = *v14 + a3;
    if (v16 < 0)
      return 4294967256;
  }
  else
  {
    v16 = a3;
    if (a3 < 0)
      return 4294967256;
  }
LABEL_14:
  v6 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, const void *, unsigned int *))*((_QWORD *)this + 5);
LABEL_15:
  v18 = 0;
  result = v6(*((_QWORD *)this + 2), v16, a4, a5, &v18);
  if (!(_DWORD)result)
  {
    v17 = v18;
    if (a6)
      *a6 = v18;
    *v14 = v16 + v17;
  }
  return result;
}

uint64_t Seekable_DataSource::CanSeek(Seekable_DataSource *this)
{
  return 1;
}

BOOL Seekable_DataSource::CanGetSize(Seekable_DataSource *this)
{
  return *((_QWORD *)this + 6) != 0;
}

BOOL Seekable_DataSource::CanSetSize(Seekable_DataSource *this)
{
  return *((_QWORD *)this + 7) != 0;
}

BOOL Seekable_DataSource::CanRead(Seekable_DataSource *this)
{
  return *((_QWORD *)this + 4) != 0;
}

BOOL Seekable_DataSource::CanWrite(Seekable_DataSource *this)
{
  return *((_QWORD *)this + 5) != 0;
}

uint64_t Seekable_DataSource::IsInMemory(Seekable_DataSource *this)
{
  return 0;
}

uint64_t Cached_DataSource::SetSize(Cached_DataSource *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
}

uint64_t Cached_DataSource::GetPos(Cached_DataSource *this, uint64_t *a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), a2);
}

uint64_t Cached_DataSource::WriteBytes(Cached_DataSource *this, uint64_t a2, int64_t a3, uint64_t a4, char *__src, unsigned int *a6)
{
  int v12;
  uint64_t result;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  size_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;

  if (!__src)
    return 4294967246;
  v29 = 0;
  v12 = a2 & 3;
  if (v12 == 2)
  {
    result = (*(uint64_t (**)(Cached_DataSource *, uint64_t *))(*(_QWORD *)this + 24))(this, &v29);
    if ((_DWORD)result)
      return result;
    v14 = v29;
LABEL_9:
    v15 = v14 + a3;
LABEL_10:
    if ((v15 & 0x8000000000000000) == 0)
      goto LABEL_11;
    return 4294967256;
  }
  v15 = a3;
  if ((a2 & 3) == 0)
    goto LABEL_10;
  if (v12 != 1)
  {
    v14 = 0;
    v15 = 0;
    if (v12 != 2)
      goto LABEL_11;
    goto LABEL_9;
  }
  v15 = *((_QWORD *)this + 8) + a3;
  if (v15 < 0)
    return 4294967256;
LABEL_11:
  v16 = *((_QWORD *)this + 3);
  if (v16)
  {
    v17 = *((unsigned int *)this + 8);
    v18 = v17 > v15;
    v19 = v17 - v15;
    if (v18)
    {
      if (v19 >= a4)
        v20 = a4;
      else
        v20 = v19;
      memcpy((void *)(v16 + v15), __src, v20);
    }
  }
  v21 = *((_QWORD *)this + 5);
  if (v21)
  {
    v22 = *((_QWORD *)this + 7);
    if (v15 + a4 >= v22)
    {
      v23 = *((unsigned int *)this + 13);
      if (v15 < v22 + v23)
      {
        if (v22 <= v15)
          v24 = v15;
        else
          v24 = *((_QWORD *)this + 7);
        v25 = v22 - v24 + v23;
        if (v25 >= (unint64_t)a4 - (v24 - v15))
          v26 = a4 - (v24 - v15);
        else
          v26 = v25;
        memcpy((void *)(v21 + v24 - v22), &__src[v24 - v15], v26);
      }
    }
  }
  v28 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t, int64_t, uint64_t, char *, unsigned int *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), a2, a3, a4, __src, &v28);
  v27 = v28;
  *((_QWORD *)this + 8) = v15 + v28;
  if (a6)
    *a6 = v27;
  return result;
}

uint64_t Cached_DataSource::CanSeek(Cached_DataSource *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
}

uint64_t Cached_DataSource::CanGetSize(Cached_DataSource *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 112))(*((_QWORD *)this + 2));
}

uint64_t Cached_DataSource::CanSetSize(Cached_DataSource *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2));
}

uint64_t Cached_DataSource::CanRead(Cached_DataSource *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2));
}

uint64_t Cached_DataSource::CanWrite(Cached_DataSource *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 136))(*((_QWORD *)this + 2));
}

uint64_t Cached_DataSource::IsInMemory(Cached_DataSource *this)
{
  return 0;
}

void Buffer_DataSource::~Buffer_DataSource(Buffer_DataSource *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t Buffer_DataSource::GetSize(Buffer_DataSource *this, uint64_t *a2)
{
  *a2 = *((_QWORD *)this + 4) + *((_QWORD *)this + 2);
  return 0;
}

uint64_t Buffer_DataSource::SetSize(Buffer_DataSource *this, uint64_t a2)
{
  *((_QWORD *)this + 2) = a2 - *((_QWORD *)this + 4);
  return 0;
}

uint64_t Buffer_DataSource::GetPos(Buffer_DataSource *this, uint64_t *a2)
{
  *a2 = *((_QWORD *)this + 5);
  return 0;
}

uint64_t Buffer_DataSource::ReadBytes(Buffer_DataSource *this, char a2, uint64_t a3, unsigned int a4, void *__dst, unsigned int *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;

  if (a6)
    *a6 = 0;
  v8 = *((_QWORD *)this + 2);
  v9 = *((_QWORD *)this + 4);
  if ((a2 & 3) == 2)
  {
    v10 = v8 + a3 + v9;
  }
  else if ((a2 & 3) == 1)
  {
    v10 = *((_QWORD *)this + 5) + a3;
  }
  else if ((a2 & 3) != 0)
  {
    v10 = 0;
  }
  else
  {
    v10 = a3;
  }
  result = 4294967256;
  v12 = v10 - v9;
  if (v10 - v9 >= 0)
  {
    v13 = v8 <= v12;
    v14 = v8 - v12;
    if (!v13)
    {
      if (v14 >= a4)
        v15 = a4;
      else
        v15 = v14;
      if (v15 <= 0)
      {
        if (a6)
          *a6 = 0;
        return 4294967246;
      }
      else
      {
        memcpy(__dst, (const void *)(*((_QWORD *)this + 3) + v12), v15);
        if (a6)
          *a6 = v15;
        result = 0;
        *((_QWORD *)this + 5) = v15 + v12 + *((_QWORD *)this + 4);
      }
    }
  }
  return result;
}

void Buffer_DataSource::WriteBytes(Buffer_DataSource *this, unsigned __int16 a2, uint64_t a3, unsigned int a4, const void *a5, unsigned int *a6)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not writable");
}

void sub_18EEF0D84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Buffer_DataSource::WithData(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[12];
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a2 - a1[4];
  if (v4 < 0 || (v5 = a1[2], v4 >= v5))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v8 = 136315394;
      *(_QWORD *)&v8[4] = "DataSource.cpp";
      v9 = 1024;
      v10 = 764;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data bad position", v8, 0x12u);
    }
    return 4294967256;
  }
  else if (v4 <= v5 - a3)
  {
    *(_QWORD *)v8 = a1[3] + v4;
    v7 = *(_QWORD *)(a4 + 24);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 48))(v7, v8);
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v8 = 136315394;
      *(_QWORD *)&v8[4] = "DataSource.cpp";
      v9 = 1024;
      v10 = 765;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data insufficient amount", v8, 0x12u);
    }
    return 4294967257;
  }
}

uint64_t Buffer_DataSource::Slice@<X0>(Buffer_DataSource *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;

  if (*((_QWORD *)this + 2) >= a2)
    v5 = a2;
  else
    v5 = *((_QWORD *)this + 2);
  result = operator new();
  v7 = (*((_DWORD *)this + 4) - v5);
  v8 = *((_QWORD *)this + 3) + v5;
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)result = &off_1E2907000;
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *a3 = result;
  return result;
}

uint64_t Buffer_DataSource::CanSeek(Buffer_DataSource *this)
{
  return 1;
}

uint64_t Buffer_DataSource::CanGetSize(Buffer_DataSource *this)
{
  return 1;
}

uint64_t Buffer_DataSource::CanSetSize(Buffer_DataSource *this)
{
  return 0;
}

uint64_t Buffer_DataSource::CanRead(Buffer_DataSource *this)
{
  return 1;
}

uint64_t Buffer_DataSource::CanWrite(Buffer_DataSource *this)
{
  return 0;
}

uint64_t Buffer_DataSource::IsInMemory(Buffer_DataSource *this)
{
  return 1;
}

void *CADefaultLog()
{
  unsigned __int8 v0;
  void **p_vtable;
  int v3;

  p_vtable = AUPBServer.vtable;
  if ((v0 & 1) == 0)
  {
    p_vtable = (void **)(AUPBServer + 24);
    if (v3)
    {
      CADefaultLog::global = (uint64_t)os_log_create("com.apple.coreaudio", "default");
      p_vtable = (void **)(AUPBServer + 24);
    }
  }
  return p_vtable[442];
}

uint64_t ParseAC3Header(unsigned __int8 *a1, unsigned int a2, AudioStreamBasicDescription *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, int *a8)
{
  uint64_t v8;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  _BYTE *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  char v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  char v32;
  int v33;
  Float64 v34;
  unsigned int v35;
  int v36;
  char v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int *v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  int v52;
  unsigned int *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  Float64 *v57;
  int v58;
  unsigned int v59;
  int v60;
  char v61;
  int Bit;
  unsigned int v63;
  int v64;
  char v65;
  UInt32 v66;
  unsigned int ChannelLayoutTag;
  UInt32 v68;
  char v69;
  BOOL v70;
  unsigned int v71;
  int v72;
  AudioFormatID v73;
  int v74;
  UInt32 v76;
  unsigned int v77;
  int v78;
  unsigned int *v79[2];
  uint64_t v80;
  unsigned __int8 v81;
  _BYTE v82[19];

  *(_QWORD *)&v82[11] = *MEMORY[0x1E0C80C00];
  v8 = 560226676;
  if (a1 && a2 >= 0xA)
  {
    if (a2 >= 0xC)
      v16 = 12;
    else
      v16 = a2;
    v17 = CheckAndSwapAC3Header(a1, v16, &v81);
    if ((_DWORD)v17)
      return v17;
    v79[0] = (unsigned int *)&v81;
    v79[1] = (unsigned int *)&v82[v16 - 1];
    v80 = 0;
    if (((unint64_t)&v81 & 3) != 0)
    {
      v18 = 0;
      v19 = &v81;
      v20 = v82;
      v21 = -8;
      do
      {
        v22 = v21;
        v23 = *v19++;
        v18 = v23 | (v18 << 8);
        v21 += 8;
        if ((v20 & 3) == 0)
          break;
        LOBYTE(v20) = (_BYTE)v20 + 1;
      }
      while (v19 < &v82[v16 - 1]);
      v79[0] = (unsigned int *)v19;
      LODWORD(v80) = v18 << (24 - v21);
      HIDWORD(v80) = v22 + 16;
    }
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 40);
    v24 = v80 >> 27;
    HIDWORD(v80) -= 5;
    if (v80 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]++);
      v26 = BYTE4(v80);
      v24 |= v80 >> SBYTE4(v80);
      HIDWORD(v80) += 32;
      if (HIDWORD(v80))
        v25 = (_DWORD)v80 << -v26;
      else
        v25 = 0;
    }
    else
    {
      v25 = 32 * v80;
    }
    LODWORD(v80) = v25;
    TBitstreamReader<unsigned int>::PutBack((uint64_t)v79, 13);
    if (v24 > 8u)
    {
      if (a2 < 0xC || v24 - 17 < 0xFFFFFFFA)
        return v8;
      TBitstreamReader<unsigned int>::PutBack((uint64_t)v79, 16);
      v27 = v80 >> 30;
      HIDWORD(v80) -= 2;
      if (v80 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]++);
        v32 = BYTE4(v80);
        v27 |= v80 >> SBYTE4(v80);
        HIDWORD(v80) += 32;
        if (HIDWORD(v80))
          v28 = (_DWORD)v80 << -v32;
        else
          v28 = 0;
      }
      else
      {
        v28 = 4 * v80;
      }
      LODWORD(v80) = v28;
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 3);
      v38 = v80 >> 21;
      v39 = HIDWORD(v80) - 11;
      HIDWORD(v80) -= 11;
      if (v80 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]);
        v41 = ++v79[0];
        v38 |= v80 >> SBYTE4(v80);
        v39 = HIDWORD(v80) + 32;
        if (HIDWORD(v80) == -32)
        {
          v43 = 0;
          v42 = 2 * v38 + 2;
          v80 = 0xFFFFFFFE00000000;
          goto LABEL_54;
        }
        v40 = (_DWORD)v80 << -BYTE4(v80);
      }
      else
      {
        v40 = (_DWORD)v80 << 11;
      }
      v42 = 2 * v38 + 2;
      v43 = v40 >> 30;
      v44 = v39 - 2;
      v80 = __PAIR64__(v44, v40);
      if (v44 >= 0)
      {
        v78 = v42;
        v45 = 4 * v40;
        goto LABEL_56;
      }
      v41 = v79[0];
LABEL_54:
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v41);
      v53 = ++v79[0];
      v43 |= v80 >> SBYTE4(v80);
      v44 = HIDWORD(v80) + 32;
      v78 = v42;
      if (HIDWORD(v80) == -32)
      {
        v54 = 0;
        v80 = 0xFFFFFFFE00000000;
        goto LABEL_60;
      }
      v45 = (_DWORD)v80 << -BYTE4(v80);
LABEL_56:
      v54 = v45 >> 30;
      v55 = v44 - 2;
      v80 = __PAIR64__(v55, v45);
      if (v55 >= 0)
      {
        v56 = 4 * v45;
LABEL_63:
        LODWORD(v80) = v56;
        if (v43 != 3)
        {
          v57 = &theSampleRateTable[v43];
          v58 = theNumberOfBlocks[v54] << 8;
          goto LABEL_67;
        }
        if (v54 != 3)
        {
          v57 = (Float64 *)((char *)&theSecondarySampleRateTable + 8 * v54);
          v58 = 1536;
LABEL_67:
          v34 = *v57;
          v59 = v56 >> 29;
          HIDWORD(v80) = v55 - 3;
          v76 = v58;
          if (v55 - 3 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]++);
            v61 = BYTE4(v80);
            v59 |= v80 >> SBYTE4(v80);
            HIDWORD(v80) += 32;
            if (HIDWORD(v80))
              v60 = (_DWORD)v80 << -v61;
            else
              v60 = 0;
          }
          else
          {
            v60 = 8 * v56;
          }
          LODWORD(v80) = v60;
          Bit = TBitstreamReader<unsigned int>::GetBit((uint64_t)v79);
          TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 5);
          v63 = v80 >> 27;
          HIDWORD(v80) -= 5;
          if (v80 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]++);
            v65 = BYTE4(v80);
            v63 |= v80 >> SBYTE4(v80);
            HIDWORD(v80) += 32;
            if (HIDWORD(v80))
              v64 = (_DWORD)v80 << -v65;
            else
              v64 = 0;
          }
          else
          {
            v64 = 32 * v80;
          }
          LODWORD(v80) = v64;
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v79))
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 8);
          if (!(_BYTE)v59)
          {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 5);
            if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v79))
              TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 8);
          }
          if (v27 == 1 && TBitstreamReader<unsigned int>::GetBit((uint64_t)v79))
          {
            v77 = WORD1(v80);
            HIDWORD(v80) -= 16;
            if (v80 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]);
              v77 |= (unsigned __int16)(v80 >> SBYTE4(v80));
            }
          }
          else
          {
            v77 = 0;
          }
          if (Bit)
            v66 = theChannelTable[v59] + 1;
          else
            v66 = theChannelTable[v59];
          if (!a4)
          {
            v68 = v76;
            if (!a5)
              goto LABEL_114;
            goto LABEL_113;
          }
          ChannelLayoutTag = GetChannelLayoutTag(v59, Bit != 0);
          v68 = v76;
          goto LABEL_112;
        }
        return v8;
      }
      v53 = v79[0];
LABEL_60:
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v53);
      ++v79[0];
      v54 |= v80 >> SBYTE4(v80);
      v55 = HIDWORD(v80) + 32;
      if (HIDWORD(v80) == -32)
        v56 = 0;
      else
        v56 = (_DWORD)v80 << -BYTE4(v80);
      goto LABEL_63;
    }
    v29 = v80 >> 30;
    v30 = HIDWORD(v80) - 2;
    HIDWORD(v80) -= 2;
    if (v80 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]++);
      v29 |= v80 >> SBYTE4(v80);
      v30 = HIDWORD(v80) + 32;
      if (HIDWORD(v80) == -32)
        v31 = 0;
      else
        v31 = (_DWORD)v80 << -BYTE4(v80);
    }
    else
    {
      v31 = 4 * v80;
    }
    LODWORD(v80) = v31;
    v33 = v29;
    if (v29 == 3)
      return v8;
    v34 = theSampleRateTable[v29];
    v35 = v31 >> 26;
    HIDWORD(v80) = v30 - 6;
    if (v30 - 6 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]++);
      v37 = BYTE4(v80);
      v35 |= v80 >> SBYTE4(v80);
      HIDWORD(v80) += 32;
      v36 = HIDWORD(v80) ? (_DWORD)v80 << -v37 : 0;
    }
    else
    {
      v36 = v31 << 6;
    }
    LODWORD(v80) = v36;
    if (v35 > 0x25)
      return v8;
    v46 = framesizetab[38 * v33 + v35];
    if (a7)
      *a7 = 2 * framesizetab[38 * v33 + 37];
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 5);
    v47 = v80 >> 29;
    v48 = HIDWORD(v80) - 3;
    HIDWORD(v80) -= 3;
    if (v80 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]);
      v50 = ++v79[0];
      v47 |= v80 >> SBYTE4(v80);
      v48 = HIDWORD(v80) + 32;
      if (HIDWORD(v80) == -32)
      {
        v51 = 0;
        v80 = 0xFFFFFFFD00000000;
        goto LABEL_95;
      }
      v49 = (_DWORD)v80 << -BYTE4(v80);
    }
    else
    {
      v49 = 8 * v80;
    }
    v51 = v49 >> 29;
    LODWORD(v80) = v49;
    HIDWORD(v80) = v48 - 3;
    if (v48 - 3 >= 0)
    {
      v77 = v47;
      v52 = 8 * v49;
LABEL_98:
      LODWORD(v80) = v52;
      v71 = v51;
      if ((v51 & 1) != 0 && v51 != 1)
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 2);
      if ((v51 & 4) != 0)
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 2);
      if (v51 == 2)
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 2);
      v78 = 2 * v46;
      v72 = TBitstreamReader<unsigned int>::GetBit((uint64_t)v79);
      v63 = v80 >> 27;
      HIDWORD(v80) -= 5;
      if (v80 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]);
        v63 |= v80 >> SBYTE4(v80);
      }
      if (v72)
        v66 = theChannelTable[v71] + 1;
      else
        v66 = theChannelTable[v71];
      if (!a4)
      {
        v68 = 1536;
        if (!a5)
          goto LABEL_114;
        goto LABEL_113;
      }
      ChannelLayoutTag = GetChannelLayoutTag(v71, v72 != 0);
      v68 = 1536;
LABEL_112:
      *a4 = ChannelLayoutTag;
      if (!a5)
      {
LABEL_114:
        if (a3)
        {
          a3->mSampleRate = v34;
          if (v24 <= 8u)
            v73 = 1633889587;
          else
            v73 = 1700998451;
          a3->mFormatID = v73;
          a3->mFormatFlags = 0;
          a3->mBytesPerPacket = 0;
          a3->mFramesPerPacket = v68;
          a3->mBytesPerFrame = 0;
          a3->mChannelsPerFrame = v66;
          *(_QWORD *)&a3->mBitsPerChannel = 0;
        }
        if (a8)
        {
          if (v63)
            v74 = -v63;
          else
            v74 = -31;
          *a8 = v74;
        }
        v8 = 0;
        if (a6)
          *a6 = v77;
        return v8;
      }
LABEL_113:
      *a5 = v78;
      goto LABEL_114;
    }
    v50 = v79[0];
LABEL_95:
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v50);
    ++v79[0];
    v69 = BYTE4(v80);
    v51 |= v80 >> SBYTE4(v80);
    v70 = HIDWORD(v80) == -32;
    HIDWORD(v80) += 32;
    v77 = v47;
    if (v70)
      v52 = 0;
    else
      v52 = (_DWORD)v80 << -v69;
    goto LABEL_98;
  }
  return v8;
}

uint64_t CheckAndSwapAC3Header(unsigned __int8 *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  int v4;
  unsigned __int8 v5;
  unint64_t v6;
  unsigned __int8 *v7;

  v3 = 560226676;
  if (a2 >= 2)
  {
    v4 = *a1;
    if (v4 == 119)
    {
      if (a1[1] == 11)
      {
        if ((a2 & 0xFFFFFFFE) != 0)
        {
          v6 = 0;
          do
          {
            v7 = &a3[v6];
            *v7 = a1[v6 + 1];
            v7[1] = a1[v6];
            v6 += 2;
          }
          while (v6 < (a2 & 0xFFFFFFFE));
        }
        v3 = 0;
        if ((a2 & 1) != 0)
          a3[a2 - 1] = a1[a2 - 1];
      }
    }
    else if (v4 == 11 && a1[1] == 119)
    {
      v3 = a2;
      do
      {
        v5 = *a1++;
        *a3++ = v5;
        --v3;
      }
      while (v3);
    }
  }
  return v3;
}

uint64_t GetChannelLayoutTag(int a1, int a2)
{
  BOOL v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;

  switch(a1)
  {
    case 1:
      v2 = a2 == 0;
      v3 = 6553601;
      v4 = 9764866;
      goto LABEL_12;
    case 3:
      v5 = 9961476;
      v6 = a2 == 0;
      v7 = 9830403;
      goto LABEL_6;
    case 4:
      v5 = 10027012;
      v6 = a2 == 0;
      v7 = 8585219;
LABEL_6:
      if (v6)
        return v7;
      else
        return v5;
    case 5:
      v2 = a2 == 0;
      v3 = 9895940;
      v4 = 10092549;
      goto LABEL_12;
    case 6:
      v2 = a2 == 0;
      v3 = 8650756;
      v4 = 9043973;
      goto LABEL_12;
    case 7:
      v2 = a2 == 0;
      v3 = 7798789;
      v4 = 8060934;
      goto LABEL_12;
    default:
      v2 = a2 == 0;
      v3 = 6619138;
      v4 = 8716291;
LABEL_12:
      if (v2)
        return v3;
      else
        return v4;
  }
}

uint64_t ParseAC3MP4Cookie(unsigned __int8 *a1, unsigned int a2, AudioStreamBasicDescription *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t result;
  unint64_t v8;
  Float64 v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  result = 560226676;
  if (a1)
  {
    if (a2 >= 0xB)
    {
      v8 = (unint64_t)a1[8] >> 6;
      if ((_DWORD)v8 != 3)
      {
        v10 = theSampleRateTable[v8];
        v11 = a1[9];
        v12 = (v11 >> 3) & 7;
        v13 = theChannelTable[v12];
        v14 = v11 & 4;
        if (a4)
          *a4 = GetChannelLayoutTag(v12, v14 != 0);
        result = 0;
        if (a3)
        {
          a3->mSampleRate = v10;
          *(_OWORD *)&a3->mFormatID = xmmword_18F116F10;
          a3->mBytesPerFrame = 0;
          a3->mChannelsPerFrame = v13 + (v14 >> 2);
          *(_QWORD *)&a3->mBitsPerChannel = 0;
        }
      }
    }
  }
  return result;
}

uint64_t ConvertAC3HeaderToAC3MP4Cookie(unsigned __int8 *a1, unsigned int a2, unsigned __int8 *a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v8;
  int v9;
  unsigned __int8 v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  char v15;
  unsigned __int8 v16[4];
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  result = 560226676;
  if (a1)
  {
    if (a2 >= 0xA)
    {
      if (a3)
      {
        if (*a4 >= 0xB)
        {
          *(_QWORD *)a3 = 0x336361640B000000;
          result = CheckAndSwapAC3Header(a1, 0xAu, v16);
          if (!(_DWORD)result)
          {
            v8 = v17;
            v9 = v18;
            a3[8] = v17 & 0xC0 | (v18 >> 2);
            v10 = v19;
            v11 = ((char)v19 >> 2) & 0x38 | (v9 << 6);
            v12 = v19 >> 5;
            if (((v12 != 1) & ((char)v19 >> 5)) != 0)
              v13 = 5;
            else
              v13 = 3;
            if ((v19 & 0x80u) != 0)
              v13 += 2;
            if (v12 == 2)
              v14 = v13 + 2;
            else
              v14 = v13;
            if (v14 <= 7)
            {
              v15 = 7;
            }
            else
            {
              v10 = v20;
              v15 = 15;
            }
            a3[9] = (4 * ((v10 >> (v15 - v14)) & 1)) | (v8 >> 4) & 3 | v11;
            a3[10] = (16 * v8) & 0x60;
            *a4 = 11;
          }
        }
      }
    }
  }
  return result;
}

_BYTE *ConvertAC3MP4CookieToAC3Header(_BYTE *result, uint64_t a2, unsigned __int8 *a3, unsigned int *a4)
{
  char v4;
  char v5;
  char v6;
  char v7;
  unsigned int v8;
  int v9;
  int v10;
  char v11;
  char v12;

  if (result && a2 && *(_DWORD *)a3 >= 0xAu)
  {
    *(_WORD *)a2 = 30475;
    *(_QWORD *)(a2 + 2) = 0;
    v4 = result[8] & 0xC0;
    *(_BYTE *)(a2 + 4) = v4;
    v5 = v4 & 0xCF | (16 * (result[9] & 3));
    *(_BYTE *)(a2 + 4) = v5;
    *(_BYTE *)(a2 + 4) = (result[10] >> 4) & 0xE | v5;
    v6 = result[8];
    *(_BYTE *)(a2 + 5) = 4 * v6;
    *(_BYTE *)(a2 + 5) = (result[9] >> 6) & 3 | (4 * v6);
    v7 = (4 * result[9]) & 0xE0;
    *(_BYTE *)(a2 + 6) = v7;
    v8 = result[9];
    v9 = (v8 >> 2) & 1;
    v10 = (v8 >> 3) & 7;
    if (((v10 != 1) & (v8 >> 3)) != 0)
      v11 = 2;
    else
      v11 = 0;
    if ((v8 & 0x20) != 0)
      v12 = v11 + 2;
    else
      v12 = v11;
    if (v10 == 2)
      v12 += 2;
    *(_BYTE *)(a2 + 6) = v7 | (v9 << (4 - v12));
    *(_DWORD *)a3 = 10;
  }
  return result;
}

uint64_t GetAC3PacketIndex(unsigned __int8 *a1, int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v8;
  unint64_t v9;
  int v10;
  unsigned __int8 v11[2];
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = 560226676;
  if (a1)
  {
    result = CheckAndSwapAC3Header(a1, 0xAu, v11);
    if (!(_DWORD)result)
    {
      if (v13 - 88 > 0x2F)
      {
        result = 560226676;
        if (v13 > 0x47u)
          return result;
        v10 = 0;
        *a3 = 1;
      }
      else
      {
        v8 = v12;
        v9 = (unint64_t)v12 >> 6;
        result = 560226676;
        if ((_DWORD)v9 == 3)
          return result;
        *a3 = dword_18F0F8B78[v9];
        v10 = (v8 >> 3) & 7;
      }
      result = 0;
      *a2 = v10;
    }
  }
  return result;
}

uint64_t CombineEAC3PacketChannelsLayouts(uint64_t result, int a2, int a3, unsigned int *a4)
{
  unsigned int v4;
  int v5;

  if (!a3)
  {
    v4 = result;
    if ((_DWORD)result == 8060934)
    {
      v4 = 10289159;
      if (a2 > 10027011)
      {
        if (a2 == 10027012)
          goto LABEL_16;
        v5 = 10092549;
      }
      else
      {
        if (a2 == 8585219)
          goto LABEL_16;
        v5 = 9895940;
      }
      if (a2 != v5)
        v4 = 8060934;
    }
LABEL_16:
    *a4 = v4;
    return result;
  }
  v4 = 10485768;
  *a4 = result;
  if ((a3 & 0x400) != 0)
  {
    v4 = 10551304;
    goto LABEL_16;
  }
  if ((a3 & 0x200) != 0)
    goto LABEL_16;
  if ((a3 & 0x100) == 0)
  {
    if ((a3 & 0x80) != 0)
    {
      v4 = 10944520;
      if ((a3 & 8) == 0)
        v4 = 10354695;
    }
    else if ((a3 & 0x40) != 0)
    {
      v4 = 10616840;
    }
    else if ((a3 & 0x20) != 0)
    {
      v4 = 10682376;
    }
    else if ((a3 & 0x10) != 0)
    {
      v4 = 10747912;
    }
    else
    {
      if ((a3 & 8) == 0)
        return result;
      v4 = 10420231;
    }
    goto LABEL_16;
  }
  *a4 = 10289159;
  if ((a3 & 0x80) != 0)
  {
    v4 = 10813448;
    goto LABEL_16;
  }
  if ((a3 & 8) != 0)
  {
    v4 = 10878984;
    goto LABEL_16;
  }
  if ((_DWORD)result == 7798789)
  {
    v4 = 10158086;
    goto LABEL_16;
  }
  return result;
}

uint64_t ParseEAC3MP4Cookie(unsigned int *a1, unsigned int a2, BOOL *a3, AudioStreamBasicDescription *a4, unsigned int *a5, AudioStreamBasicDescription *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int a10, BOOL *a11, unsigned int *a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v21;
  int v22;
  char v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  double v36;
  unsigned int v37;
  int v38;
  char v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  int v45;
  char v46;
  _BOOL4 v47;
  uint64_t ChannelLayoutTag;
  int8x8_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  char v53;
  unsigned int v54;
  int v55;
  int v56;
  char v57;
  unsigned int v58;
  uint8x8_t v59;
  int v60;
  int v61;
  unsigned __int16 v62;
  unsigned int v63;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v16 = 4294967246;
  if (!a1 || a2 < 0xD)
    return v16;
  v69 = v15;
  v70 = v14;
  v71 = v12;
  v72 = v13;
  v21 = (unsigned int *)((char *)a1 + a2);
  v66 = a1;
  v67 = v21;
  v68 = 0;
  if ((a1 & 3) != 0)
  {
    v22 = 0;
    v23 = (_BYTE)a1 + 1;
    v24 = -8;
    do
    {
      v25 = v24;
      v26 = *(unsigned __int8 *)a1;
      a1 = (unsigned int *)((char *)a1 + 1);
      v22 = v26 | (v22 << 8);
      v24 += 8;
      if ((v23 & 3) == 0)
        break;
      ++v23;
    }
    while (a1 < v21);
    v66 = a1;
    LODWORD(v68) = v22 << (24 - v24);
    HIDWORD(v68) = v25 + 16;
  }
  TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v66, 32);
  TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v66, 32);
  v27 = HIDWORD(v68) - 13;
  HIDWORD(v68) -= 13;
  if (v68 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v66);
    v29 = ++v66;
    v27 = HIDWORD(v68) + 32;
    if (HIDWORD(v68) == -32)
    {
      v30 = 0;
      v68 = 0xFFFFFFFD00000000;
      goto LABEL_16;
    }
    v28 = (_DWORD)v68 << -BYTE4(v68);
  }
  else
  {
    v28 = (_DWORD)v68 << 13;
  }
  v30 = v28 >> 29;
  v31 = v27 - 3;
  v68 = __PAIR64__(v31, v28);
  if (v31 >= 0)
  {
    v32 = 8 * v28;
    goto LABEL_19;
  }
  v29 = v66;
LABEL_16:
  TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v29);
  ++v66;
  v30 |= v68 >> SBYTE4(v68);
  v31 = HIDWORD(v68) + 32;
  if (HIDWORD(v68) == -32)
    v32 = 0;
  else
    v32 = (_DWORD)v68 << -BYTE4(v68);
LABEL_19:
  LODWORD(v68) = v32;
  if ((_BYTE)v30 == 0xFF)
    return 4294967246;
  v33 = v32 >> 30;
  v34 = v31 - 2;
  HIDWORD(v68) = v34;
  if (v34 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v66);
    ++v66;
    v33 |= v68 >> SBYTE4(v68);
    v34 = HIDWORD(v68) + 32;
    if (HIDWORD(v68) == -32)
      v35 = 0;
    else
      v35 = (_DWORD)v68 << -BYTE4(v68);
  }
  else
  {
    v35 = 4 * v32;
  }
  LODWORD(v68) = v35;
  v36 = 0.0;
  if (v33 != 3)
    v36 = theSampleRateTable[v33];
  v37 = v35 >> 27;
  HIDWORD(v68) = v34 - 5;
  if (v34 - 5 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v66);
    ++v66;
    v39 = BYTE4(v68);
    v37 |= v68 >> SBYTE4(v68);
    HIDWORD(v68) += 32;
    if (HIDWORD(v68))
      v38 = (_DWORD)v68 << -v39;
    else
      v38 = 0;
  }
  else
  {
    v38 = 32 * v35;
  }
  LODWORD(v68) = v38;
  v40 = v37 - 11;
  if (v37 >= 9u && v40 > 5)
    return 560226676;
  TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v66, 1);
  TBitstreamReader<unsigned int>::GetBit((uint64_t)&v66);
  v41 = HIDWORD(v68) - 3;
  HIDWORD(v68) -= 3;
  if (v68 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v66);
    v43 = ++v66;
    v41 = HIDWORD(v68) + 32;
    if (HIDWORD(v68) == -32)
    {
      v44 = 0;
      v68 = 0xFFFFFFFD00000000;
      goto LABEL_43;
    }
    v42 = (_DWORD)v68 << -BYTE4(v68);
  }
  else
  {
    v42 = 8 * v68;
  }
  v44 = v42 >> 29;
  LODWORD(v68) = v42;
  HIDWORD(v68) = v41 - 3;
  if (v41 - 3 >= 0)
  {
    v45 = 8 * v42;
    goto LABEL_46;
  }
  v43 = v66;
LABEL_43:
  TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v43);
  ++v66;
  v46 = BYTE4(v68);
  v44 |= v68 >> SBYTE4(v68);
  HIDWORD(v68) += 32;
  if (HIDWORD(v68))
    v45 = (_DWORD)v68 << -v46;
  else
    v45 = 0;
LABEL_46:
  LODWORD(v68) = v45;
  v47 = TBitstreamReader<unsigned int>::GetBit((uint64_t)&v66) != 0;
  ChannelLayoutTag = GetChannelLayoutTag(v44, v47);
  v65 = ChannelLayoutTag;
  TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v66, 3);
  v50 = v68 >> 28;
  v51 = HIDWORD(v68) - 4;
  HIDWORD(v68) -= 4;
  if (v68 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v66);
    ++v66;
    v53 = BYTE4(v68);
    v50 |= v68 >> SBYTE4(v68);
    v51 = HIDWORD(v68) + 32;
    HIDWORD(v68) += 32;
    if (HIDWORD(v68))
      v52 = (_DWORD)v68 << -v53;
    else
      v52 = 0;
  }
  else
  {
    v52 = 16 * v68;
  }
  LODWORD(v68) = v52;
  if ((_BYTE)v50)
  {
    v54 = v52 >> 23;
    v55 = v51 - 9;
    HIDWORD(v68) = v51 - 9;
    if (v51 - 9 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v66);
      ++v66;
      v57 = BYTE4(v68);
      v54 |= v68 >> SBYTE4(v68);
      v55 = HIDWORD(v68) + 32;
      HIDWORD(v68) += 32;
      if (HIDWORD(v68))
        v56 = (_DWORD)v68 << -v57;
      else
        v56 = 0;
    }
    else
    {
      v56 = v52 << 9;
    }
    LODWORD(v68) = v56;
    v58 = (v54 >> 7) & 2 | (8 * (__rbit32(v54) >> 24));
    v49.i32[0] = v58;
    v59 = (uint8x8_t)vcnt_s8(v49);
    v59.i16[0] = vaddlv_u8(v59);
    CombineEAC3PacketChannelsLayouts(ChannelLayoutTag, v59.i32[0], v58, &v65);
  }
  else
  {
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v66, 1);
    v55 = HIDWORD(v68);
  }
  if (v55 + 8 * ((int)v67 - (int)v66) >= 8)
  {
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v66, 7);
    if (TBitstreamReader<unsigned int>::GetBit((uint64_t)&v66))
    {
      v60 = HIDWORD(v68);
      if (HIDWORD(v68) + 8 * ((int)v67 - (int)v66) >= 8)
      {
        v61 = BYTE3(v68);
        HIDWORD(v68) -= 8;
        if (v60 - 8 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v66);
          v61 |= (v68 >> SBYTE4(v68));
        }
        if ((v61 - 1) > 0xF)
          return 4294967246;
      }
    }
  }
  if (a4)
    LODWORD(a4->mSampleRate) = ChannelLayoutTag;
  v62 = v65;
  if (a6)
    LODWORD(a6->mSampleRate) = v65;
  if (v40 >= 6)
    v63 = 1633889587;
  else
    v63 = 1700998451;
  if (a3)
  {
    *(double *)a3 = v36;
    *((_DWORD *)a3 + 2) = v63;
    *(_QWORD *)(a3 + 12) = 0;
    *(_QWORD *)(a3 + 20) = 1536;
    *((_DWORD *)a3 + 7) = (unsigned __int16)ChannelLayoutTag;
    *((_QWORD *)a3 + 4) = 0;
  }
  v16 = 0;
  if (a5)
  {
    *(double *)a5 = v36;
    a5[2] = v63;
    *(_QWORD *)(a5 + 3) = 0;
    *(_QWORD *)(a5 + 5) = 1536;
    a5[7] = v62;
    *((_QWORD *)a5 + 4) = 0;
  }
  return v16;
}

uint64_t ConvertEAC3HeaderToEAC3MP4Cookie(unsigned __int8 *a1, unsigned int a2, unsigned __int8 *a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v16;
  char v17;
  int v18;
  unsigned int *v19;
  int v20;
  BOOL v21;
  unsigned int *v22;
  int v23;
  unsigned int v24;
  int v25;
  char v26;
  char v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int *v42;
  int v43;
  unsigned int v44;
  char v45;
  unsigned int v46;
  int v47;
  char v48;
  unsigned int v49;
  int v50;
  char v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  char v55;
  int v56;
  unsigned int v57;
  int v58;
  char v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  BOOL v65;
  int v66;
  char v67;
  unsigned __int8 v68;
  int v69;
  unsigned int v70;
  int v71;
  char v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  int64_t v76;
  uint64_t v77;
  unint64_t v78;
  size_t v79;
  unsigned int *v80;
  unsigned int *v81;
  _BYTE *v82;
  char *v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  unsigned __int8 *v89;
  double mSampleRate;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unsigned __int8 *v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  int v105;
  char v106;
  int v107;
  char v108;
  uint32x4_t v109;
  int8x16_t v110;
  unsigned __int32 v111;
  int8x16_t v112;
  int8x16_t v113;
  int v115;
  int v116;
  unsigned int v117;
  int v118;
  char v119;
  unsigned int v120;
  int v121;
  char v122;
  int v123;
  unsigned int v124;
  int v125;
  char v126;
  unsigned int *v127;
  unsigned __int8 *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  char v137;
  int v138;
  char v139;
  unsigned int *v140;
  unsigned __int8 *__dst;
  char v142;
  unsigned int *v143;
  int v144;
  int v145;
  int v146;
  unsigned __int8 v147;
  uint64_t v148;
  char v149;
  char v150;
  char *v151;
  int v152;
  size_t v153;
  unsigned int v154;
  UInt32 mFramesPerPacket;
  int Bit;
  int v157;
  unsigned int v158;
  char v159;
  _BYTE *v160;
  _BYTE *v161;
  _BYTE *v162;
  __int16 v163;
  int v164;
  int v165;
  unsigned int *v166;
  char *v167;
  uint64_t v168;
  unsigned int *v169[2];
  int64_t v170;
  unsigned __int8 *v171;
  unsigned __int8 *v172;
  uint64_t v173;
  _QWORD v174[3];
  __int16 v175;
  uint64_t v176;
  unsigned int v177;
  AudioStreamBasicDescription v178;
  unsigned int v179;
  unsigned int v180[2];
  unsigned int *v181;
  unsigned int *v182;
  char *v183;
  uint64_t __src;
  _BYTE v185[37];
  _BYTE v186[19];

  *(_QWORD *)&v186[3] = *MEMORY[0x1E0C80C00];
  v4 = 560226676;
  if (!a1)
    return v4;
  v5 = a2;
  if (a2 < 0xC)
    return v4;
  v181 = 0;
  v182 = 0;
  v183 = 0;
  *(_QWORD *)v180 = 0;
  v179 = 0;
  memset(v185, 0, sizeof(v185));
  v177 = 0;
  __src = 0x336365640D000000;
  v174[0] = v185;
  v174[1] = v185;
  v174[2] = v186;
  v175 = 0;
  v176 = 16;
  if (ParseAC3Header(a1, a2, &v178, &v177, &v180[1], &v179, v180, 0))
    return v4;
  if ((v178.mFormatID & 0xFBFFFFFF) != 0x61632D33)
  {
    *a4 = 0;
    return v4;
  }
  v171 = 0;
  v172 = 0;
  v173 = 0;
  if ((v5 & 0xFFFFFFFE) >= 0x8A)
    v9 = 138;
  else
    v9 = v5 & 0xFFFFFFFE;
  LOBYTE(v160) = 0;
  if ((_DWORD)v9)
  {
    std::vector<unsigned char>::__append(&v171, v9, &v160);
    v11 = v171;
    v10 = (int)v172;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v12 = v10 - (_DWORD)v11;
  v13 = CheckAndSwapAC3Header(a1, v10 - (int)v11, v11);
  if ((_DWORD)v13)
  {
    v4 = v13;
    if (!v11)
      goto LABEL_15;
    goto LABEL_14;
  }
  v169[0] = (unsigned int *)v11;
  v169[1] = (unsigned int *)&v11[v12];
  v170 = 0;
  if ((v11 & 3) != 0 && v12)
  {
    v16 = 0;
    v17 = (_BYTE)v11 + 1;
    v18 = -8;
    v19 = (unsigned int *)(v11 + 1);
    do
    {
      HIDWORD(v170) = v18 + 16;
      LODWORD(v170) = v16 << 8;
      v169[0] = v19;
      v20 = *((unsigned __int8 *)v19 - 1) | (v16 << 8);
      LODWORD(v170) = v20;
      v18 += 8;
      if ((v17 & 3) == 0)
        break;
      ++v17;
      v16 = v20;
      v21 = v19 >= (unsigned int *)&v11[v12];
      v19 = (unsigned int *)((char *)v19 + 1);
    }
    while (!v21);
    LODWORD(v170) = v20 << (24 - v18);
  }
  LODWORD(v14) = v180[1];
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, (unsigned __int16)(v178.mSampleRate* (double)v14/ (double)__PAIR64__(HIDWORD(v178.mSampleRate), v178.mFramesPerPacket)/ 1000.0), 0xDu);
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, 0, 3u);
  __dst = a3;
  if (v178.mFormatID != 1633889587)
  {
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 16);
    v24 = v170 >> 30;
    HIDWORD(v170) -= 2;
    if (v170 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
      v27 = BYTE4(v170);
      v24 |= v170 >> SBYTE4(v170);
      HIDWORD(v170) += 32;
      if (HIDWORD(v170))
        v25 = (_DWORD)v170 << -v27;
      else
        v25 = 0;
    }
    else
    {
      v25 = 4 * v170;
    }
    LODWORD(v170) = v25;
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 14);
    LODWORD(v22) = v170 >> 30;
    v35 = HIDWORD(v170) - 2;
    HIDWORD(v170) -= 2;
    if (v170 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
      v37 = BYTE4(v170);
      LODWORD(v22) = (v170 >> SBYTE4(v170)) | v22;
      v35 = HIDWORD(v170) + 32;
      HIDWORD(v170) += 32;
      if (HIDWORD(v170))
        v36 = (_DWORD)v170 << -v37;
      else
        v36 = 0;
    }
    else
    {
      v36 = 4 * v170;
    }
    LODWORD(v170) = v36;
    v38 = v22;
    if (v22 == 3)
    {
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 2);
      v152 = 3;
      v39 = v170;
      v40 = HIDWORD(v170);
    }
    else
    {
      v41 = v36 >> 30;
      v40 = v35 - 2;
      HIDWORD(v170) = v40;
      if (v40 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
        v41 |= v170 >> SBYTE4(v170);
        v40 = HIDWORD(v170) + 32;
        if (HIDWORD(v170) == -32)
          v39 = 0;
        else
          v39 = (_DWORD)v170 << -BYTE4(v170);
      }
      else
      {
        v39 = 4 * v36;
      }
      LODWORD(v170) = v39;
      v152 = v41;
    }
    v46 = v39 >> 29;
    HIDWORD(v170) = v40 - 3;
    if (v40 - 3 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
      v48 = BYTE4(v170);
      v46 |= v170 >> SBYTE4(v170);
      HIDWORD(v170) += 32;
      if (HIDWORD(v170))
        v47 = (_DWORD)v170 << -v48;
      else
        v47 = 0;
    }
    else
    {
      v47 = 8 * v39;
    }
    LODWORD(v170) = v47;
    Bit = TBitstreamReader<unsigned int>::GetBit((uint64_t)v169);
    v49 = v170 >> 27;
    HIDWORD(v170) -= 5;
    if (v170 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
      v51 = BYTE4(v170);
      v49 |= v170 >> SBYTE4(v170);
      HIDWORD(v170) += 32;
      if (HIDWORD(v170))
        v50 = (_DWORD)v170 << -v51;
      else
        v50 = 0;
    }
    else
    {
      v50 = 32 * v170;
    }
    LOBYTE(v154) = v49;
    LODWORD(v170) = v50;
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
    if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 8);
    LOBYTE(v158) = v46;
    if (!(_BYTE)v46)
    {
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
      if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 8);
    }
    if (v24 == 1 && TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 16);
    if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) != 1)
      goto LABEL_165;
    if (v46 >= 3u)
    {
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 2);
      if ((v46 & 1) != 0)
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 6);
    }
    if ((v46 & 4) != 0)
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 6);
    if (Bit && TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
    if ((_BYTE)v24)
    {
LABEL_165:
      if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) != 1)
        goto LABEL_178;
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
      if (v46 == 2)
      {
        v62 = 4;
      }
      else
      {
        if (v46 < 7u)
        {
LABEL_171:
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 8);
          if (!(_BYTE)v46 && TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 8);
          if (v38 <= 2)
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 1);
LABEL_178:
          if (!(_BYTE)v24 && v152 != 3)
            goto LABEL_180;
          if (v24 == 2)
          {
            if (v152 == 3)
            {
LABEL_180:
              v63 = 1;
LABEL_181:
              TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, v63);
              goto LABEL_186;
            }
            if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
            {
              v63 = 6;
              goto LABEL_181;
            }
          }
LABEL_186:
          v140 = a4;
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
          {
            v64 = v170 >> 26;
            v65 = HIDWORD(v170) - 6 < 0;
            HIDWORD(v170) -= 6;
            v150 = (char)v22;
            if (v65)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
              v67 = BYTE4(v170);
              v64 |= v170 >> SBYTE4(v170);
              HIDWORD(v170) += 32;
              if (HIDWORD(v170))
                v66 = (_DWORD)v170 << -v67;
              else
                v66 = 0;
            }
            else
            {
              v66 = (_DWORD)v170 << 6;
            }
            LODWORD(v170) = v66;
            v68 = v64 + 1;
            std::vector<unsigned char>::reserve((unint64_t *)&v181, (v64 + 1));
            if ((_BYTE)v64 != 0xFF)
            {
              v69 = 0;
              do
              {
                v70 = BYTE3(v170);
                HIDWORD(v170) -= 8;
                if (v170 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
                  v72 = BYTE4(v170);
                  v70 |= v170 >> SBYTE4(v170);
                  HIDWORD(v170) += 32;
                  if (HIDWORD(v170))
                    v71 = (_DWORD)v170 << -v72;
                  else
                    v71 = 0;
                }
                else
                {
                  v71 = (_DWORD)v170 << 8;
                }
                LODWORD(v170) = v71;
                v73 = v182;
                if (v182 >= (unsigned int *)v183)
                {
                  v75 = v181;
                  v76 = (char *)v182 - (char *)v181;
                  v77 = (char *)v182 - (char *)v181 + 1;
                  if (v77 < 0)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v78 = v183 - (char *)v181;
                  if (2 * (v183 - (char *)v181) > (unint64_t)v77)
                    v77 = 2 * v78;
                  if (v78 >= 0x3FFFFFFFFFFFFFFFLL)
                    v79 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v79 = v77;
                  if (v79)
                    v80 = (unsigned int *)operator new(v79);
                  else
                    v80 = 0;
                  v81 = (unsigned int *)((char *)v80 + v76);
                  v82 = (char *)v80 + v76;
                  *v82 = v70;
                  v74 = (unsigned int *)(v82 + 1);
                  if (v73 != v75)
                  {
                    v83 = (char *)v73 + ~(unint64_t)v75;
                    do
                    {
                      v84 = *((_BYTE *)v73 - 1);
                      v73 = (unsigned int *)((char *)v73 - 1);
                      (v83--)[(_QWORD)v80] = v84;
                    }
                    while (v73 != v75);
                    v73 = v181;
                    v81 = v80;
                  }
                  v181 = v81;
                  v183 = (char *)v80 + v79;
                  if (v73)
                    operator delete(v73);
                }
                else
                {
                  *(_BYTE *)v182 = v70;
                  v74 = (unsigned int *)((char *)v73 + 1);
                }
                v182 = v74;
                ++v69;
              }
              while (v69 < v68);
            }
            LOBYTE(v32) = 0;
            LOBYTE(v22) = v150;
          }
          else
          {
            LOBYTE(v32) = 0;
          }
LABEL_219:
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, v22, 2u);
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, v154, 5u);
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, 0, 2u);
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, v32, 3u);
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, v158, 3u);
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, Bit, 1u);
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, 0, 3u);
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, 0, 5u);
          TBitstreamWriter<unsigned short>::Flush((uint64_t)v174);
          v85 = v180[1];
          v86 = 13;
          if (v5 > v180[1] && v5 - v180[1] >= 0xC)
          {
            v87 = 0;
            v159 = 0;
            LODWORD(v88) = 0;
            v144 = 0;
            v89 = v171;
            v153 = v172 - v171;
            mSampleRate = v178.mSampleRate;
            v148 = v171 & 3;
            v151 = (char *)(v171 + 12);
            mFramesPerPacket = v178.mFramesPerPacket;
            v91 = (v171 ^ 3) & 3;
            v143 = (unsigned int *)&v171[v91 + 1];
            v142 = (8 * ((v171 ^ 3) & 3)) ^ 0x18;
            v92 = 8 * v91 + 8;
            v146 = -1;
            v157 = -1;
            v145 = -1;
            do
            {
              v93 = v86;
              v5 -= v85;
              v88 = v85 + v88;
              if (ParseAC3Header(&a1[v88], v5, &v178, &v177, &v180[1], &v179, v180, 0))
                v94 = 0;
              else
                v94 = mSampleRate == v178.mSampleRate;
              if (!v94 || mFramesPerPacket != v178.mFramesPerPacket || v178.mFormatID != 1700998451)
                goto LABEL_311;
              bzero(v89, v153);
              v95 = CheckAndSwapAC3Header(&a1[v88], 0xCu, v89);
              if ((_DWORD)v95)
              {
                v4 = v95;
                goto LABEL_311;
              }
              v166 = (unsigned int *)v89;
              v167 = v151;
              v168 = 0;
              if (v148)
              {
                v96 = 0;
                v97 = 0;
                v98 = v89;
                do
                {
                  v99 = *v98++;
                  v97 = v99 | (v97 << 8);
                  v96 += 8;
                }
                while (v92 != v96);
                v166 = v143;
                LODWORD(v168) = v97 << v142;
                HIDWORD(v168) = v96;
              }
              TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v166, 16);
              v100 = v168 >> 30;
              v101 = HIDWORD(v168) - 2;
              HIDWORD(v168) -= 2;
              if (v168 < 0)
              {
                TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v166, v166);
                v103 = ++v166;
                v100 |= v168 >> SBYTE4(v168);
                v101 = HIDWORD(v168) + 32;
                if (HIDWORD(v168) == -32)
                {
                  v104 = 0;
                  v168 = 0xFFFFFFFD00000000;
                  goto LABEL_242;
                }
                v102 = (_DWORD)v168 << -BYTE4(v168);
              }
              else
              {
                v102 = 4 * v168;
              }
              v104 = v102 >> 29;
              LODWORD(v168) = v102;
              HIDWORD(v168) = v101 - 3;
              if (v101 - 3 >= 0)
              {
                v105 = 8 * v102;
                goto LABEL_245;
              }
              v103 = v166;
LABEL_242:
              TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v166, v103);
              ++v166;
              v106 = BYTE4(v168);
              v104 |= v168 >> SBYTE4(v168);
              HIDWORD(v168) += 32;
              if (HIDWORD(v168))
                v105 = (_DWORD)v168 << -v106;
              else
                v105 = 0;
LABEL_245:
              LODWORD(v168) = v105;
              if (v100 == 1)
              {
                v86 = v93;
                if ((v159 & 1) == 0)
                {
                  ++BYTE3(__src);
                  v86 = BYTE3(__src);
                }
                if (++v87 > 8u || (v107 = v104, v104 <= v157))
                {
LABEL_294:
                  *v140 = 0;
                  goto LABEL_311;
                }
                v108 = v179;
                v109 = (uint32x4_t)vdupq_n_s32(v179);
                v110 = (int8x16_t)vshlq_u32(v109, (uint32x4_t)xmmword_18F116F20);
                v111 = vshlq_u32(v109, (uint32x4_t)xmmword_18F116F30).u32[0];
                v112 = (int8x16_t)vshlq_u32(v109, (uint32x4_t)xmmword_18F116F40);
                v112.i32[0] = v111;
                v113 = vorrq_s8(vandq_s8(v110, (int8x16_t)xmmword_18F116F60), vandq_s8(v112, (int8x16_t)xmmword_18F116F50));
                *(int8x8_t *)v113.i8 = vorr_s8(*(int8x8_t *)v113.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL));
                v185[(v86 - 2) - 8] = v185[(v86 - 2) - 8] & 0xE1 | (2 * (v87 & 0xF)) | ((unsigned __int16)(v113.i16[0] | v113.i16[2]) >> 8);
                v185[(v86 - 1) - 8] |= v108 & 0x20 | v113.i8[0] | v113.i8[4];
                v159 = 1;
              }
              else
              {
                if ((v100 | 2) != 2)
                {
                  v86 = v93;
                  goto LABEL_282;
                }
                if (!(_BYTE)v100 && v104 <= v145)
                  goto LABEL_294;
                if (v104 <= v146 && v100 == 2)
                  goto LABEL_294;
                if (++v144 > 7)
                  goto LABEL_294;
                if ((_BYTE)v100)
                  v115 = v145;
                else
                  v115 = v104;
                v116 = v146;
                if ((_BYTE)v100)
                  v116 = v104;
                v145 = v115;
                v146 = v116;
                v160 = &v185[v93 - 8];
                v161 = v160;
                v162 = &v160[(45 - v93)];
                v163 = 0;
                v164 = 16;
                v165 = v160 & 1;
                TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v166, 11);
                v117 = v170 >> 30;
                HIDWORD(v170) -= 2;
                if (v170 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
                  v119 = BYTE4(v170);
                  v117 |= v170 >> SBYTE4(v170);
                  HIDWORD(v170) += 32;
                  if (HIDWORD(v170))
                    v118 = (_DWORD)v170 << -v119;
                  else
                    v118 = 0;
                }
                else
                {
                  v118 = 4 * v170;
                }
                LODWORD(v170) = v118;
                TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 2);
                v120 = v170 >> 29;
                HIDWORD(v170) -= 3;
                if (v170 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
                  v122 = BYTE4(v170);
                  v120 |= v170 >> SBYTE4(v170);
                  HIDWORD(v170) += 32;
                  if (HIDWORD(v170))
                    v121 = (_DWORD)v170 << -v122;
                  else
                    v121 = 0;
                }
                else
                {
                  v121 = 8 * v170;
                }
                LODWORD(v170) = v121;
                v123 = TBitstreamReader<unsigned int>::GetBit((uint64_t)v169);
                v124 = v170 >> 27;
                HIDWORD(v170) -= 5;
                if (v170 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
                  v126 = BYTE4(v170);
                  v124 |= v170 >> SBYTE4(v170);
                  HIDWORD(v170) += 32;
                  if (HIDWORD(v170))
                    v125 = (_DWORD)v170 << -v126;
                  else
                    v125 = 0;
                }
                else
                {
                  v125 = 32 * v170;
                }
                LODWORD(v170) = v125;
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, v117, 2u);
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, v124, 5u);
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, 0, 2u);
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, 0, 3u);
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, v120, 3u);
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, v123, 1u);
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, 0, 3u);
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, 0, 5u);
                TBitstreamWriter<unsigned short>::Flush((uint64_t)&v160);
                v159 = 0;
                v87 = 0;
                BYTE3(__src) += 3;
                v86 = BYTE3(__src);
                ++v185[1];
                v107 = -1;
              }
              v157 = v107;
LABEL_282:
              v85 = v180[1];
            }
            while (v5 > v180[1] && v5 - v180[1] > 0xB);
          }
          v127 = v181;
          if ((char *)v182 - (char *)v181 != 2)
          {
            v128 = __dst;
LABEL_306:
            if (v128)
            {
              if (*v140 >= v86)
              {
                *v140 = v86;
                memcpy(v128, &__src, v86);
                v4 = 0;
              }
              else
              {
                v4 = 560100710;
              }
            }
            else
            {
              v4 = 0;
              *v140 = v86;
            }
            goto LABEL_311;
          }
          v166 = v181;
          v167 = (char *)v181 + 2;
          v168 = 0;
          v128 = __dst;
          if ((v181 & 3) != 0)
          {
            v129 = 0;
            v130 = 0;
            if ((v181 & 3) == 3)
              v131 = 1;
            else
              v131 = 2;
            v132 = 8 * v131 - 8;
            do
            {
              v133 = v130 + 1;
              v129 = *((unsigned __int8 *)v181 + v130) | (v129 << 8);
              v130 = v133;
            }
            while (v131 != v133);
            v127 = (unsigned int *)((char *)v181 + v133);
            v166 = (unsigned int *)((char *)v181 + v133);
            v134 = v129 << (32 - 8 * v131);
            v135 = v134 >> 25;
            LODWORD(v168) = v134;
            HIDWORD(v168) = v132 | 1;
            if ((v132 & 0x80000000) == 0)
            {
              v136 = v134 << 7;
              goto LABEL_300;
            }
          }
          else
          {
            v135 = 0;
            HIDWORD(v168) = -7;
          }
          TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v166, v127);
          ++v166;
          v137 = BYTE4(v168);
          v135 |= v168 >> SBYTE4(v168);
          HIDWORD(v168) += 32;
          if (HIDWORD(v168))
            v136 = (_DWORD)v168 << -v137;
          else
            v136 = 0;
LABEL_300:
          LODWORD(v168) = v136;
          if (!v135 && TBitstreamReader<unsigned int>::GetBit((uint64_t)&v166) == 1)
          {
            v138 = BYTE3(v168);
            HIDWORD(v168) -= 8;
            if (v168 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v166, v166);
              v139 = BYTE4(v168);
              HIDWORD(v168) += 32;
              ++v166;
              v138 |= v168 >> v139;
            }
            if (v138 - 1 <= 0xF)
            {
              v160 = &v185[v86 - 8];
              v161 = v160;
              v162 = &v160[(45 - v86)];
              v163 = 0;
              v164 = 16;
              v165 = v160 & 1;
              BYTE3(__src) += 3;
              LODWORD(v86) = BYTE3(__src);
              AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, 0, 7u);
              AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, 1, 1u);
              AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, v138, 8u);
              AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, 0, 8u);
            }
          }
          goto LABEL_306;
        }
        v62 = 2;
      }
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, v62);
      goto LABEL_171;
    }
    if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 6);
    if (!(_BYTE)v46
      && TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1
      && TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
    {
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 6);
    }
    if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 6);
    v52 = v170 >> 30;
    v53 = HIDWORD(v170) - 2;
    HIDWORD(v170) -= 2;
    if (v170 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
      v55 = BYTE4(v170);
      v52 |= v170 >> SBYTE4(v170);
      v53 = HIDWORD(v170) + 32;
      HIDWORD(v170) += 32;
      if (HIDWORD(v170))
        v54 = (_DWORD)v170 << -v55;
      else
        v54 = 0;
    }
    else
    {
      v54 = 4 * v170;
    }
    LODWORD(v170) = v54;
    v149 = (char)v22;
    if (v52 == 1)
    {
      v22 = a4;
      v56 = 5;
    }
    else
    {
      if (v52 == 3)
      {
        v57 = v54 >> 27;
        HIDWORD(v170) = v53 - 5;
        if (v53 - 5 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
          v59 = BYTE4(v170);
          v57 |= v170 >> SBYTE4(v170);
          HIDWORD(v170) += 32;
          if (HIDWORD(v170))
            v58 = (_DWORD)v170 << -v59;
          else
            v58 = 0;
        }
        else
        {
          v58 = 32 * v54;
        }
        LODWORD(v170) = v58;
        if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
        {
          TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
          {
            if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
              TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
            if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
              TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
          }
        }
        v147 = v57;
        v22 = a4;
        if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
        {
          TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
          {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 7);
            if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
              TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 8);
          }
        }
        v60 = 0;
        do
        {
          TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 8);
          ++v60;
        }
        while (v147 + 2 > v60);
        goto LABEL_151;
      }
      v22 = a4;
      if (v52 != 2)
      {
LABEL_151:
        a4 = v22;
        LOBYTE(v22) = v149;
        if (v46 <= 1u)
        {
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 14);
          if (!(_BYTE)v46 && TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 14);
        }
        if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
        {
          v61 = 2;
          switch(v152)
          {
            case 0:
              TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
              goto LABEL_165;
            case 1:
              goto LABEL_162;
            case 2:
              v61 = 3;
              goto LABEL_162;
            case 3:
              v61 = 6;
              do
              {
LABEL_162:
                if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
                  TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
                --v61;
              }
              while (v61);
              break;
            default:
              goto LABEL_165;
          }
        }
        goto LABEL_165;
      }
      v56 = 12;
    }
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, v56);
    goto LABEL_151;
  }
  TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 32);
  LODWORD(v22) = v170 >> 30;
  HIDWORD(v170) -= 2;
  if (v170 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
    v26 = BYTE4(v170);
    LODWORD(v22) = (v170 >> SBYTE4(v170)) | v22;
    HIDWORD(v170) += 32;
    if (HIDWORD(v170))
      v23 = (_DWORD)v170 << -v26;
    else
      v23 = 0;
  }
  else
  {
    v23 = 4 * v170;
  }
  LODWORD(v170) = v23;
  if (v22 != 3)
  {
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 6);
    v28 = v170 >> 27;
    v29 = HIDWORD(v170) - 5;
    HIDWORD(v170) -= 5;
    if (v170 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]);
      v31 = ++v169[0];
      v29 = HIDWORD(v170) + 32;
      v154 = (v170 >> SBYTE4(v170)) | v28;
      if (HIDWORD(v170) == -32)
      {
        v32 = 0;
        v170 = 0xFFFFFFFD00000000;
        goto LABEL_56;
      }
      v30 = (_DWORD)v170 << -BYTE4(v170);
    }
    else
    {
      LOBYTE(v154) = v170 >> 27;
      v30 = 32 * v170;
    }
    v32 = v30 >> 29;
    v33 = v29 - 3;
    v170 = __PAIR64__(v33, v30);
    if (v33 >= 0)
    {
      v34 = 8 * v30;
      goto LABEL_58;
    }
    v31 = v169[0];
LABEL_56:
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v31);
    v42 = ++v169[0];
    v32 |= v170 >> SBYTE4(v170);
    v33 = HIDWORD(v170) + 32;
    if (HIDWORD(v170) == -32)
    {
      v44 = 0;
      v170 = 0xFFFFFFFD00000000;
      goto LABEL_62;
    }
    v34 = (_DWORD)v170 << -BYTE4(v170);
LABEL_58:
    v158 = v34 >> 29;
    LODWORD(v170) = v34;
    HIDWORD(v170) = v33 - 3;
    if (v33 - 3 >= 0)
    {
      v43 = 8 * v34;
LABEL_65:
      LODWORD(v170) = v43;
      if ((v158 & 1) != 0 && v158 != 1)
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 2);
      if ((v158 & 4) != 0)
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 2);
      if (v158 == 2)
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 2);
      v140 = a4;
      Bit = TBitstreamReader<unsigned int>::GetBit((uint64_t)v169);
      goto LABEL_219;
    }
    v42 = v169[0];
    v44 = v34 >> 29;
LABEL_62:
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v42);
    ++v169[0];
    v45 = BYTE4(v170);
    v158 = (v170 >> SBYTE4(v170)) | v44;
    HIDWORD(v170) += 32;
    if (HIDWORD(v170))
      v43 = (_DWORD)v170 << -v45;
    else
      v43 = 0;
    goto LABEL_65;
  }
LABEL_311:
  v11 = v171;
  if (v171)
  {
LABEL_14:
    v172 = v11;
    operator delete(v11);
  }
LABEL_15:
  if (v181)
    operator delete(v181);
  return v4;
}

void sub_18EEF3B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p)
{
  uint64_t v42;
  void *v44;

  if (__p)
    operator delete(__p);
  v44 = *(void **)(v42 - 184);
  if (v44)
    operator delete(v44);
  _Unwind_Resume(exception_object);
}

void caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::empty_invoker()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::vector<std::unique_ptr<ACOutputBuffer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<ACOutputBuffer>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<acv2::AudioConverterBase>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<ACOutputBuffer>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  ACAudioSpan::~ACAudioSpan((std::pmr **)(a1 + 8));
  JUMPOUT(0x193FFE460);
}

uint64_t acv2::AudioConverterChain::description(acv2::AudioConverterChain *this, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  uint8x8_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  void **v11;
  uint64_t v12;
  _DWORD *v13;
  uint8x8_t v14;
  _QWORD *v15;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  _QWORD v20[10];
  char v21;
  uint64_t v22;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"AudioConverter ", 15);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" (", 2);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"):\n", 3);
  v6 = (_DWORD *)a2[44];
  if (*v6 != 0x10000)
  {
    if (*v6)
    {
      if (!(unsigned __int16)*v6)
        goto LABEL_9;
    }
    else if (!v6[2])
    {
      goto LABEL_9;
    }
LABEL_8:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"  Input layout tag:  0x", 23);
    *(_DWORD *)((char *)v20 + *(_QWORD *)(v19 - 24)) = *(_DWORD *)((_BYTE *)v20 + *(_QWORD *)(v19 - 24)) & 0xFFFFFFB5 | 8;
    v8 = (_QWORD *)std::ostream::operator<<();
    *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 2;
    LOBYTE(__p[0]) = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)__p, 1);
    goto LABEL_9;
  }
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6[1]);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.i32[0])
    goto LABEL_8;
LABEL_9:
  v9 = a2[13];
  for (i = a2[14]; v9 != i; v9 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v9 + 64))(__p);
    if ((v18 & 0x80u) == 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if ((v18 & 0x80u) == 0)
      v12 = v18;
    else
      v12 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)v11, v12);
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  v13 = (_DWORD *)a2[47];
  if (*v13 != 0x10000)
  {
    if (*v13)
    {
      if (!(unsigned __int16)*v13)
        goto LABEL_27;
    }
    else if (!v13[2])
    {
      goto LABEL_27;
    }
LABEL_26:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"  Output layout tag:  0x", 24);
    *(_DWORD *)((char *)v20 + *(_QWORD *)(v19 - 24)) = *(_DWORD *)((_BYTE *)v20 + *(_QWORD *)(v19 - 24)) & 0xFFFFFFB5 | 8;
    v15 = (_QWORD *)std::ostream::operator<<();
    *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 2;
    LOBYTE(__p[0]) = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)__p, 1);
    goto LABEL_27;
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13[1]);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.i32[0])
    goto LABEL_26;
LABEL_27:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(this, (uint64_t)v20);
  v19 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v21 < 0)
    operator delete((void *)v20[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x193FFE3A0](&v22);
}

void sub_18EEF3FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t acv2::AudioConverterChain::ShouldAutomaticallyEnableSpatialRendering(uint64_t a1, unsigned int **a2)
{
  uint64_t v2;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  UInt32 outSize;

  v2 = *(_QWORD *)(a1 + 344);
  if (v2)
  {
    outSize = 0;
    v5 = AudioCodecGetPropertyInfo(*(AudioCodec *)(v2 + 168), 0x696D7264u, &outSize, 0) || outSize == 0;
    if (!v5 && !*(_BYTE *)(a1 + 529))
    {
      v7 = 0;
      v8 = **a2;
      v9 = v8 & 0xFFFF0000;
      while (v9 != *(unsigned __int16 *)((char *)&AudioFormat_IsSupportedAUSpatialMixerOutputChannelLayout(AudioChannelLayout const*)::unsupportedLayouts
                                        + v7
                                        + 2) << 16)
      {
        v7 += 4;
        if (v7 == 36)
        {
          result = 1;
          if (v8 <= 0xFFFEFFFF && v9 >> 28 == 15)
            return 0;
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t acv2::AudioConverterChain::GetInputLayoutSize(acv2::AudioConverterChain *this, unsigned int *a2, unsigned __int8 *a3)
{
  std::vector<char>::pointer begin;
  uint64_t InputLayout;
  unsigned int v8;
  std::vector<char> __p;
  std::vector<char>::value_type __x;

  __x = 0;
  std::vector<char>::vector(&__p, 0x20uLL, &__x);
  begin = __p.__begin_;
  *(_QWORD *)__p.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  InputLayout = acv2::AudioConverterChain::GetInputLayout(this, &__p, a3);
  if ((_DWORD)InputLayout)
    v8 = 0;
  else
    v8 = caulk::numeric::exceptional_cast<unsigned int,unsigned long>(__p.__end_ - __p.__begin_);
  *a2 = v8;
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return InputLayout;
}

void sub_18EEF4174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterChain::GetOutputLayoutSize(acv2::AudioConverterChain *this, unsigned int *a2, unsigned __int8 *a3)
{
  std::vector<char>::pointer begin;
  uint64_t OutputLayout;
  unsigned int v8;
  std::vector<char> __p;
  std::vector<char>::value_type __x;

  __x = 0;
  std::vector<char>::vector(&__p, 0x20uLL, &__x);
  begin = __p.__begin_;
  *(_QWORD *)__p.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  OutputLayout = acv2::AudioConverterChain::GetOutputLayout(this, &__p, a3);
  if ((_DWORD)OutputLayout)
    v8 = 0;
  else
    v8 = caulk::numeric::exceptional_cast<unsigned int,unsigned long>(__p.__end_ - __p.__begin_);
  *a2 = v8;
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return OutputLayout;
}

void sub_18EEF4228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterChain::GetOutputLayout(acv2::AudioConverterChain *this, std::vector<char> *a2, unsigned __int8 *a3)
{
  std::vector<char>::pointer begin;
  uint64_t InputLayoutPriv;
  char *v8;
  int v9;
  __int32 v10;
  uint8x8_t v11;
  uint8x8_t v12;
  int v13;
  uint8x8_t v14;
  std::vector<char> __p;
  std::vector<char>::value_type __x;

  __x = 0;
  std::vector<char>::vector(&__p, 0x20uLL, &__x);
  begin = __p.__begin_;
  *(_QWORD *)__p.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  if (!acv2::AudioConverterChain::GetOutputLayoutPriv(this, &__p, a3))
  {
    v8 = __p.__begin_;
    if (*(_DWORD *)__p.__begin_ == 0x10000)
    {
      v11 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)__p.__begin_ + 1));
      v11.i16[0] = vaddlv_u8(v11);
      if (!v11.i32[0])
        goto LABEL_2;
    }
    else if (*(_DWORD *)__p.__begin_)
    {
      if (!(unsigned __int16)*(_DWORD *)__p.__begin_)
        goto LABEL_2;
    }
    else if (!*((_DWORD *)__p.__begin_ + 2))
    {
      goto LABEL_2;
    }
LABEL_25:
    if (&__p == a2)
    {
      InputLayoutPriv = 0;
    }
    else
    {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, v8, __p.__end_, __p.__end_ - v8);
      InputLayoutPriv = 0;
      v8 = __p.__begin_;
      if (!__p.__begin_)
        return InputLayoutPriv;
    }
    goto LABEL_29;
  }
LABEL_2:
  InputLayoutPriv = acv2::AudioConverterChain::GetInputLayoutPriv(this, &__p, a3);
  v8 = __p.__begin_;
  if ((_DWORD)InputLayoutPriv)
  {
    if (!__p.__begin_)
      return InputLayoutPriv;
    goto LABEL_29;
  }
  v9 = *(_DWORD *)__p.__begin_;
  if (*(_DWORD *)__p.__begin_ == 0x10000)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)__p.__begin_ + 1));
    v12.i16[0] = vaddlv_u8(v12);
    v10 = v12.i32[0];
  }
  else if (v9)
  {
    v10 = (unsigned __int16)*(_DWORD *)__p.__begin_;
  }
  else
  {
    v10 = *((_DWORD *)__p.__begin_ + 2);
  }
  InputLayoutPriv = 1718449215;
  if (v10)
  {
    if (v9 == 0x10000)
    {
      v14 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)__p.__begin_ + 1));
      v14.i16[0] = vaddlv_u8(v14);
      v13 = v14.i32[0];
    }
    else
    {
      v13 = v9 ? (unsigned __int16)*(_DWORD *)__p.__begin_ : *((_DWORD *)__p.__begin_ + 2);
    }
    if (v13 == *((_DWORD *)this + 17))
      goto LABEL_25;
  }
LABEL_29:
  __p.__end_ = v8;
  operator delete(v8);
  return InputLayoutPriv;
}

void sub_18EEF43D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterChain::GetOutputLayoutPriv(acv2::AudioConverterChain *this, std::vector<char> *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint8x8_t v7;

  v4 = *((_QWORD *)this + 43);
  if (v4 && *(_BYTE *)(v4 + 196))
    return acv2::CodecConverter::GetOutputLayout(*((char ***)this + 43), a2, a3);
  v6 = *((_QWORD *)this + 47);
  if (*(_DWORD *)v6 == 0x10000)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v6 + 4));
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.i32[0])
      goto LABEL_9;
    return 1718449215;
  }
  if (*(_DWORD *)v6)
  {
    if ((unsigned __int16)*(_DWORD *)v6)
      goto LABEL_9;
    return 1718449215;
  }
  if (!*(_DWORD *)(v6 + 8))
    return 1718449215;
LABEL_9:
  if ((std::vector<char> *)((char *)this + 376) != a2)
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, (char *)v6, *((char **)this + 48), *((_QWORD *)this + 48) - v6);
  result = 0;
  *a3 = 1;
  return result;
}

uint64_t acv2::AudioConverterChain::GetInputLayoutPriv(acv2::AudioConverterChain *this, std::vector<char> *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint8x8_t v7;

  v4 = *((_QWORD *)this + 43);
  if (v4 && *(_BYTE *)(v4 + 197))
    return acv2::CodecConverter::GetInputLayout(*((char ***)this + 43), a2, a3);
  v6 = *((_QWORD *)this + 44);
  if (*(_DWORD *)v6 == 0x10000)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v6 + 4));
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.i32[0])
      goto LABEL_9;
    return 1718449215;
  }
  if (*(_DWORD *)v6)
  {
    if ((unsigned __int16)*(_DWORD *)v6)
      goto LABEL_9;
    return 1718449215;
  }
  if (!*(_DWORD *)(v6 + 8))
    return 1718449215;
LABEL_9:
  if ((std::vector<char> *)((char *)this + 352) != a2)
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, (char *)v6, *((char **)this + 45), *((_QWORD *)this + 45) - v6);
  result = 0;
  *a3 = 1;
  return result;
}

uint64_t acv2::AudioConverterChain::GetInputLayout(acv2::AudioConverterChain *this, std::vector<char> *a2, unsigned __int8 *a3)
{
  std::vector<char>::pointer begin;
  uint64_t OutputLayoutPriv;
  char *v8;
  int v9;
  __int32 v10;
  uint8x8_t v11;
  uint8x8_t v12;
  int v13;
  uint8x8_t v14;
  std::vector<char> __p;
  std::vector<char>::value_type __x;

  __x = 0;
  std::vector<char>::vector(&__p, 0x20uLL, &__x);
  begin = __p.__begin_;
  *(_QWORD *)__p.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  if (!acv2::AudioConverterChain::GetInputLayoutPriv(this, &__p, a3))
  {
    v8 = __p.__begin_;
    if (*(_DWORD *)__p.__begin_ == 0x10000)
    {
      v11 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)__p.__begin_ + 1));
      v11.i16[0] = vaddlv_u8(v11);
      if (!v11.i32[0])
        goto LABEL_2;
    }
    else if (*(_DWORD *)__p.__begin_)
    {
      if (!(unsigned __int16)*(_DWORD *)__p.__begin_)
        goto LABEL_2;
    }
    else if (!*((_DWORD *)__p.__begin_ + 2))
    {
      goto LABEL_2;
    }
LABEL_25:
    if (&__p == a2)
    {
      OutputLayoutPriv = 0;
    }
    else
    {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, v8, __p.__end_, __p.__end_ - v8);
      OutputLayoutPriv = 0;
      v8 = __p.__begin_;
      if (!__p.__begin_)
        return OutputLayoutPriv;
    }
    goto LABEL_29;
  }
LABEL_2:
  OutputLayoutPriv = acv2::AudioConverterChain::GetOutputLayoutPriv(this, &__p, a3);
  v8 = __p.__begin_;
  if ((_DWORD)OutputLayoutPriv)
  {
    if (!__p.__begin_)
      return OutputLayoutPriv;
    goto LABEL_29;
  }
  v9 = *(_DWORD *)__p.__begin_;
  if (*(_DWORD *)__p.__begin_ == 0x10000)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)__p.__begin_ + 1));
    v12.i16[0] = vaddlv_u8(v12);
    v10 = v12.i32[0];
  }
  else if (v9)
  {
    v10 = (unsigned __int16)*(_DWORD *)__p.__begin_;
  }
  else
  {
    v10 = *((_DWORD *)__p.__begin_ + 2);
  }
  OutputLayoutPriv = 1718449215;
  if (v10)
  {
    if (v9 == 0x10000)
    {
      v14 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)__p.__begin_ + 1));
      v14.i16[0] = vaddlv_u8(v14);
      v13 = v14.i32[0];
    }
    else
    {
      v13 = v9 ? (unsigned __int16)*(_DWORD *)__p.__begin_ : *((_DWORD *)__p.__begin_ + 2);
    }
    if (v13 == *((_DWORD *)this + 7))
      goto LABEL_25;
  }
LABEL_29:
  __p.__end_ = v8;
  operator delete(v8);
  return OutputLayoutPriv;
}

void sub_18EEF46F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void acv2::AudioConverterChain::GetChainBuildSettings(acv2::AudioConverterChain *this, uint64_t a2)
{
  double *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  OpaqueAudioComponentInstance *v18;
  __int128 v19;
  uint64_t v20;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = (double *)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  v5 = (char *)this + 32;
  *((_BYTE *)this + 72) = 0;
  *((_QWORD *)this + 15) = 0;
  v6 = (uint64_t *)((char *)this + 128);
  *(_DWORD *)((char *)this + 23) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_BYTE *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_DWORD *)((char *)this + 111) = 0;
  LOBYTE(v19) = 0;
  std::vector<char>::vector((std::vector<char> *)((char *)this + 128), 0x20uLL, (const std::vector<char>::value_type *)&v19);
  v7 = *v6;
  *(_QWORD *)v7 = 0;
  *(_DWORD *)(v7 + 8) = 0;
  v8 = *(uint64_t **)(a2 + 296);
  if (v8 != *(uint64_t **)(a2 + 304))
  {
    v9 = *v8;
    *(_QWORD *)this = *(_QWORD *)(*v8 + 272);
    *((_DWORD *)this + 2) = *(_DWORD *)(v9 + 280);
    *v4 = (*(double (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 56))(*(_QWORD *)(v9 + 160));
    *((_BYTE *)this + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 72))(*(_QWORD *)(v9 + 160));
  }
  *((_DWORD *)this + 14) = *(_DWORD *)(a2 + 432);
  v10 = *(unsigned __int8 *)(a2 + 448);
  *((_BYTE *)this + 112) = v10;
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + 328);
    if (*(_QWORD *)(a2 + 320) != v11)
    {
      v12 = *(_QWORD *)(v11 - 8);
      if ((acv2::AudioConverterChain *)((char *)this + 88) != (acv2::AudioConverterChain *)(v12 + 192))
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 88, *(char **)(v12 + 192), *(_QWORD *)(v12 + 200), (uint64_t)(*(_QWORD *)(v12 + 200) - *(_QWORD *)(v12 + 192)) >> 2);
    }
  }
  *((_BYTE *)this + 25) = *(_BYTE *)(a2 + 417);
  v13 = *(unsigned __int8 *)(a2 + 416);
  *((_BYTE *)this + 26) = v13;
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 424);
    if (v14)
    {
      v19 = 0uLL;
      v20 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v19, *(const void **)(v14 + 176), *(_QWORD *)(v14 + 184), (uint64_t)(*(_QWORD *)(v14 + 184) - *(_QWORD *)(v14 + 176)) >> 2);
      v15 = *(void **)v5;
      if (*(_QWORD *)v5)
      {
        *((_QWORD *)this + 5) = v15;
        operator delete(v15);
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0;
      }
      *((_OWORD *)this + 2) = v19;
      *((_QWORD *)this + 6) = v20;
    }
  }
  *((_DWORD *)this + 15) = *(_DWORD *)(a2 + 412);
  v16 = *(_QWORD *)(a2 + 344);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 372);
    *((_BYTE *)this + 72) = *(_BYTE *)(v16 + 380);
    *((_QWORD *)this + 8) = v17;
    v18 = *(OpaqueAudioComponentInstance **)(v16 + 168);
    *((_QWORD *)this + 10) = v18;
    AudioCodecUninitialize(v18);
    *(_QWORD *)(v16 + 168) = 0;
  }
  *(_WORD *)((char *)this + 113) = *(_WORD *)(a2 + 528);
  if (v6 != (uint64_t *)(a2 + 376))
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v6, *(char **)(a2 + 376), *(char **)(a2 + 384), *(_QWORD *)(a2 + 384) - *(_QWORD *)(a2 + 376));
}

void sub_18EEF48E4(_Unwind_Exception *a1)
{
  acv2::ChainBuildSettings *v1;

  acv2::ChainBuildSettings::~ChainBuildSettings(v1);
  _Unwind_Resume(a1);
}

uint64_t acv2::AudioConverterChain::RebuildConverterChain(acv2::AudioConverterChain *this, const acv2::ChainBuildSettings *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  {
    v21 = (_QWORD *)operator new();
    *v21 = 0;
    acv2::ConverterRegistry::ConverterRegistry((acv2::ConverterRegistry *)(v21 + 1));
    acv2::GlobalConverterRegistry(void)::sImpl = (uint64_t)v21;
  }
  v5 = acv2::GlobalConverterRegistry(void)::sImpl;
  os_unfair_recursive_lock_lock_with_options();
  v6 = v5 + 40;
  if (v5)
    os_unfair_recursive_lock_unlock();
  v7 = *((_OWORD *)this + 3);
  v25 = *((_OWORD *)this + 2);
  v26 = v7;
  v27 = *((_OWORD *)this + 4);
  v8 = *((_OWORD *)this + 1);
  v23 = *(_OWORD *)this;
  v24 = v8;
  v9 = (_QWORD *)*((_QWORD *)this + 13);
  v10 = (_QWORD *)*((_QWORD *)this + 14);
  while (v10 != v9)
  {
    v12 = *--v10;
    v11 = v12;
    *v10 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  *((_QWORD *)this + 14) = v9;
  *((_QWORD *)this + 38) = *((_QWORD *)this + 37);
  *((_QWORD *)this + 41) = *((_QWORD *)this + 40);
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 53) = 0;
  result = (*(uint64_t (**)(_QWORD, __int128 *, const acv2::ChainBuildSettings *, acv2::AudioConverterChain *, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), &v23, a2, this, v6);
  if (!(_DWORD)result)
  {
    if (*((_QWORD *)this + 13) == *((_QWORD *)this + 14))
    {
      v14 = operator new();
      v15 = v26;
      *(_OWORD *)(v14 + 48) = v25;
      *(_OWORD *)(v14 + 64) = v15;
      *(_OWORD *)(v14 + 80) = v27;
      v16 = v24;
      *(_OWORD *)(v14 + 16) = v23;
      *(_OWORD *)(v14 + 32) = v16;
      *(_QWORD *)(v14 + 104) = 0;
      *(_QWORD *)(v14 + 112) = 0;
      *(_QWORD *)(v14 + 96) = 0;
      *(_DWORD *)(v14 + 120) = -1;
      *(_OWORD *)(v14 + 128) = 0u;
      *(_OWORD *)(v14 + 144) = 0u;
      *(_QWORD *)v14 = &off_1E290AAA0;
      *(_QWORD *)(v14 + 8) = 0;
      v22 = v14;
      acv2::AudioConverterChain::AddStep(this, &v22);
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    v17 = *((_QWORD *)this + 43);
    if (v17)
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 176))(v17);
    else
      v18 = 0;
    v19 = (*((_DWORD *)this + 17) > 1u) & (*((_DWORD *)this + 13) >> 5);
    v20 = *(double *)this != *((double *)this + 5);
    *((_BYTE *)this + 80) = (*((_DWORD *)this + 7) > 1u) & (*((_DWORD *)this + 3) >> 5);
    *((_BYTE *)this + 81) = v19;
    *((_BYTE *)this + 82) = v20;
    LODWORD(result) = acv2::AudioConverterChain::PostBuild(this);
    if (v18)
      return v18;
    else
      return result;
  }
  return result;
}

void sub_18EEF4B5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x1080C4066A550C5);
  _Unwind_Resume(a1);
}

void acv2::ChainBuildSettings::~ChainBuildSettings(acv2::ChainBuildSettings *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 12) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
}

uint64_t acv2::AudioConverterChain::SetDownmixEnabled(acv2::AudioConverterChain *this, int a2)
{
  uint64_t v2;
  _BYTE v5[32];
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *__p;
  void *v11;

  if (*((unsigned __int8 *)this + 417) == a2)
    return 0;
  *((_BYTE *)this + 417) = a2;
  acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)v5, (uint64_t)this);
  v2 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)v5);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  return v2;
}

void sub_18EEF4C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  acv2::ChainBuildSettings::~ChainBuildSettings((acv2::ChainBuildSettings *)va);
  _Unwind_Resume(a1);
}

uint64_t acv2::AudioConverterChain::SetMixMap(acv2::AudioConverterChain *this, unint64_t a2, const float *a3)
{
  _DWORD *v6;
  int v7;
  uint64_t v8;
  int v10;
  _BYTE v11[32];
  void *__src;
  void *v13;
  void *__p;
  void *v15;
  void *v16;
  void *v17;

  if (!*((_BYTE *)this + 417))
    return 1869627199;
  acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)v11, (uint64_t)this);
  v13 = __src;
  v10 = 0;
  std::vector<float>::insert(&__src, (char *)__src, a2, (char *)&v10);
  if (a2)
  {
    v6 = __src;
    do
    {
      v7 = *(_DWORD *)a3++;
      *v6++ = v7;
      --a2;
    }
    while (a2);
  }
  *((_BYTE *)this + 416) = 1;
  v11[26] = 1;
  v8 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)v11);
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (__src)
  {
    v13 = __src;
    operator delete(__src);
  }
  return v8;
}

void sub_18EEF4D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  acv2::ChainBuildSettings::~ChainBuildSettings((acv2::ChainBuildSettings *)va);
  _Unwind_Resume(a1);
}

uint64_t acv2::AudioConverterChain::SetChannelMap(acv2::AudioConverterChain *this, int *a2)
{
  uint64_t v2;
  std::vector<int>::size_type v5;
  _QWORD *v6;
  BOOL v7;
  _DWORD *v8;
  std::vector<int>::size_type v9;
  int v10;
  int v11;
  std::vector<int>::const_iterator v12;
  std::vector<int>::pointer begin;
  uint64_t v14;
  int v15;
  std::vector<int>::size_type v16;
  std::vector<int>::size_type v17;
  uint64_t v18;
  std::bad_alloc *exception;
  std::bad_alloc *v21;
  std::vector<int>::value_type __x;
  _BYTE v23[32];
  void *__p;
  void *v25;
  std::vector<int> __position;
  void *v27;
  void *v28;
  unsigned int v29;

  if (!*((_BYTE *)this + 417))
  {
    v5 = *((unsigned int *)this + 17);
    v6 = malloc_type_malloc(4 * v5, 0x7C51E058uLL);
    if ((_DWORD)v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    if (v7)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v21 = std::bad_alloc::bad_alloc(exception);
    }
    v8 = v6;
    v29 = 4 * v5;
    acv2::AudioConverterChain::GetProperty(this, 1667788144, &v29, v6);
    if ((_DWORD)v5)
    {
      if (*a2 == *v8)
      {
        v9 = 0;
        while (v5 - 1 != v9)
        {
          v10 = a2[v9 + 1];
          v11 = v8[++v9];
          if (v10 != v11)
          {
            if (v9 < v5)
              goto LABEL_13;
            break;
          }
        }
        v2 = 0;
        goto LABEL_33;
      }
LABEL_13:
      *((_BYTE *)this + 448) = 1;
      acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)v23, (uint64_t)this);
      if (*a2)
      {
LABEL_14:
        v12.__i_ = __position.__begin_;
        __position.__end_ = __position.__begin_;
        __x = -1;
        std::vector<int>::insert(&__position, v12, v5, &__x);
        begin = __position.__begin_;
        if (v5 <= 1)
          v14 = 1;
        else
          v14 = v5;
        do
        {
          v15 = *a2++;
          *begin++ = v15;
          --v14;
        }
        while (v14);
      }
      else
      {
        v16 = 0;
        while (v5 - 1 != v16)
        {
          v17 = v16 + 1;
          v18 = a2[v16 + 1];
          v16 = v17;
          if (v17 != v18)
          {
            if (v17 < v5)
              goto LABEL_14;
            break;
          }
        }
        __position.__end_ = __position.__begin_;
      }
      v2 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)v23);
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (__position.__begin_)
      {
        __position.__end_ = __position.__begin_;
        operator delete(__position.__begin_);
      }
      if (__p)
      {
        v25 = __p;
        operator delete(__p);
      }
    }
    else
    {
      v2 = 0;
    }
    if (!v8)
      return v2;
LABEL_33:
    free(v8);
    return v2;
  }
  return 1869627199;
}

void sub_18EEF4F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  acv2::ChainBuildSettings::~ChainBuildSettings((acv2::ChainBuildSettings *)va);
  if (v3)
    free(v3);
  _Unwind_Resume(a1);
}

uint64_t acv2::AudioConverterChain::SetIOChannelLayout(acv2::CodecConverter **this, int a2, AudioChannelLayout *a3, UInt32 a4)
{
  uint64_t v5;
  std::vector<char> *v6;
  acv2::AudioConverterChain *v7;
  uint64_t result;
  acv2::CodecConverter *v12;
  std::vector<char>::pointer begin;
  char *v14;
  int ShouldAutomaticallyEnableSpatialRendering;
  std::vector<char>::value_type __x[4];
  std::vector<char> v17;

  if (a2)
    v5 = 44;
  else
    v5 = 47;
  if (a2)
    v6 = (std::vector<char> *)(this + 44);
  else
    v6 = (std::vector<char> *)(this + 47);
  if (a2)
    v7 = (acv2::AudioConverterChain *)this;
  else
    v7 = (acv2::AudioConverterChain *)(this + 5);
  if (a3 && a4)
  {
    result = 561211770;
    if (a4 >= 0xC && 20 * a3->mNumberChannelDescriptions + 12 <= a4)
    {
      *(_DWORD *)__x = 0;
      result = AudioFormatProperty_NumberOfChannelsForLayout(a3, (unsigned int *)__x);
      if (!(_DWORD)result)
      {
        if (*(_DWORD *)__x != *((_DWORD *)v7 + 7))
          return 4294967246;
        v12 = this[43];
        if (!v12)
          goto LABEL_33;
        if (a2)
        {
          if (*((_BYTE *)v12 + 197))
          {
            acv2::CodecConverter::SetInputChannelLayout(this[43], a3, *(int *)__x);
            return 0;
          }
LABEL_33:
          CA::ChannelLayout::operator=(v6, a3);
          return 0;
        }
        if (*(_DWORD *)__x != *((_DWORD *)v12 + 21)
          || (result = acv2::CodecConverter::SetOutputChannelLayout(this[43], a3, a4, *(int *)__x), !(_DWORD)result)
          || (_DWORD)result == 561476212
          || !*((_BYTE *)v12 + 196))
        {
          CA::ChannelLayout::ChannelLayout(&v17, a3);
          ShouldAutomaticallyEnableSpatialRendering = acv2::AudioConverterChain::ShouldAutomaticallyEnableSpatialRendering((uint64_t)this, (unsigned int **)&v17);
          if (v17.__begin_)
          {
            v17.__end_ = v17.__begin_;
            operator delete(v17.__begin_);
          }
          if (ShouldAutomaticallyEnableSpatialRendering)
            *((_BYTE *)this + 528) = 1;
          goto LABEL_33;
        }
      }
    }
  }
  else
  {
    __x[0] = 0;
    std::vector<char>::vector(&v17, 0x20uLL, __x);
    begin = v17.__begin_;
    *(_QWORD *)v17.__begin_ = 0;
    *((_DWORD *)begin + 2) = 0;
    v14 = (char *)this[v5];
    if (v14)
    {
      v6->__end_ = v14;
      operator delete(v14);
      v6->__begin_ = 0;
      v6->__end_ = 0;
      v6->__end_cap_.__value_ = 0;
      begin = v17.__begin_;
    }
    result = 0;
    this[v5] = (acv2::CodecConverter *)begin;
    *(_OWORD *)&v6->__end_ = *(_OWORD *)&v17.__end_;
  }
  return result;
}

void sub_18EEF5170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t acv2::AudioConverterChain::SetDitherAlgorithm(acv2::AudioConverterChain *this, unsigned int a2, int16x8_t a3)
{
  uint64_t v3;
  int32x4_t v6;
  uint32x4_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t message;
  caulk::concurrent::message *v11;
  uint64_t v12;
  char *v13;
  int16x8_t v15;
  char __s[8];
  char v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p;
  void *v23;

  if (*((_DWORD *)this + 108) == a2)
    return 0;
  if (a2 - 1 >= 3)
  {
    v3 = 1718449215;
    a3.i32[0] = bswap32(a2);
    *(int8x8_t *)a3.i8 = vzip1_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8);
    v6.i64[0] = 0x1F0000001FLL;
    v6.i64[1] = 0x1F0000001FLL;
    v7.i64[0] = 0x5F0000005FLL;
    v7.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)a3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v7, (uint32x4_t)vsraq_n_s32(v6, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a3.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a3.i8, (int8x8_t)0x2E002E002E002ELL);
    v17 = 4;
    v15 = a3;
    *(_DWORD *)__s = vmovn_s16(a3).u32[0];
    __s[4] = 0;
    v8 = strlen(__s);
    v9 = _os_log_pack_size() + 88;
    message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v8 + v9 + 1, 16);
    if (message)
    {
      v11 = (caulk::concurrent::message *)message;
      v12 = _os_log_pack_fill();
      v13 = (char *)v11 + v9;
      v17 = 4;
      *(_DWORD *)__s = vmovn_s16(v15).u32[0];
      __s[4] = 0;
      stpcpy(v13, __s);
      *(_DWORD *)v12 = 136315394;
      *(_QWORD *)(v12 + 4) = v13;
      *(_WORD *)(v12 + 12) = 1024;
      *(_DWORD *)(v12 + 14) = a2;
      if (v17 < 0)
        operator delete(*(void **)__s);
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v11);
    }
  }
  else
  {
    *((_DWORD *)this + 108) = a2;
    acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)__s, (uint64_t)this);
    v3 = acv2::AudioConverterChain::RebuildConverterChain(this, (const acv2::ChainBuildSettings *)__s);
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    if (v20)
    {
      v21 = v20;
      operator delete(v20);
    }
    if (v18)
    {
      v19 = v18;
      operator delete(v18);
    }
  }
  return v3;
}

void sub_18EEF5354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<char> *CA::ChannelLayout::ChannelLayout(std::vector<char> *this, const AudioChannelLayout *a2)
{
  UInt32 mNumberChannelDescriptions;
  std::vector<char> *v5;

  mNumberChannelDescriptions = a2->mNumberChannelDescriptions;
  if (mNumberChannelDescriptions <= 1)
    mNumberChannelDescriptions = 1;
  v5 = std::vector<char>::vector(this, 20 * mNumberChannelDescriptions + 12);
  memcpy(v5->__begin_, a2, 20 * a2->mNumberChannelDescriptions + 12);
  return this;
}

std::vector<char> *CA::ChannelLayout::operator=(std::vector<char> *this, _DWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  std::vector<char>::pointer begin;
  char *v9;

  v4 = a2[2];
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = a2[2];
  v6 = 20 * v5 + 12;
  begin = this->__begin_;
  v9 = (char *)(this->__end_ - begin);
  if (v6 <= (unint64_t)v9)
  {
    if (v6 < (unint64_t)v9)
      this->__end_ = &begin[v6];
  }
  else
  {
    std::vector<unsigned char>::__append(this, v6 - (_QWORD)v9);
    begin = this->__begin_;
    v4 = a2[2];
  }
  memcpy(begin, a2, 20 * v4 + 12);
  return this;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_18EEF54B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::insert(_QWORD *a1, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  unint64_t v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  _DWORD *v28;
  char *v29;
  char *v30;
  int v31;
  unint64_t v32;
  char *v33;
  int64_t v34;
  char *v35;

  if (a3)
  {
    v4 = a4;
    v6 = __src;
    v8 = (char *)a1[1];
    v9 = a1[2];
    if (a3 <= (v9 - (uint64_t)v8) >> 2)
    {
      v16 = v8 - __src;
      if (a3 <= (v8 - __src) >> 2)
      {
        v19 = (char *)a1[1];
        v18 = a3;
      }
      else
      {
        v17 = 0;
        v18 = v16 >> 2;
        v19 = &v8[4 * (a3 - (v16 >> 2))];
        do
        {
          *(_DWORD *)&v8[v17] = *(_DWORD *)a4;
          v17 += 4;
        }
        while (4 * a3 - 4 * v18 != v17);
        a1[1] = v19;
        if (v8 == __src)
          return;
      }
      v20 = &__src[4 * a3];
      v21 = &v19[-4 * a3];
      v22 = v19;
      if (v21 < v8)
      {
        v22 = v19;
        do
        {
          v23 = *(_DWORD *)v21;
          v21 += 4;
          *(_DWORD *)v22 = v23;
          v22 += 4;
        }
        while (v21 < v8);
      }
      a1[1] = v22;
      if (v19 != v20)
        memmove(&v19[-4 * ((v19 - v20) >> 2)], __src, v19 - v20);
      if (v6 <= v4)
      {
        if (a1[1] <= (unint64_t)v4)
          v24 = 0;
        else
          v24 = a3;
        v4 += 4 * v24;
      }
      do
      {
        *(_DWORD *)v6 = *(_DWORD *)v4;
        v6 += 4;
        --v18;
      }
      while (v18);
    }
    else
    {
      v10 = (char *)*a1;
      v11 = a3 + ((uint64_t)&v8[-*a1] >> 2);
      if (v11 >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v12 = (__src - v10) >> 2;
      v13 = v9 - (_QWORD)v10;
      if (v13 >> 1 > v11)
        v11 = v13 >> 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v11;
      if (v14)
        v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v14);
      else
        v15 = 0;
      v25 = (_DWORD *)(v14 + 4 * v12);
      v26 = (char *)&v25[a3];
      v27 = 4 * a3;
      v28 = v25;
      do
      {
        *v28++ = *(_DWORD *)v4;
        v27 -= 4;
      }
      while (v27);
      v29 = (char *)*a1;
      if ((char *)*a1 != v6)
      {
        v30 = v6;
        do
        {
          v31 = *((_DWORD *)v30 - 1);
          v30 -= 4;
          *--v25 = v31;
        }
        while (v30 != v29);
      }
      v32 = v14 + 4 * v15;
      v33 = (char *)a1[1];
      v34 = v33 - v6;
      if (v33 != v6)
        memmove(v26, v6, v33 - v6);
      v35 = (char *)*a1;
      *a1 = v25;
      a1[1] = &v26[v34];
      a1[2] = v32;
      if (v35)
        operator delete(v35);
    }
  }
}

void std::optional<ACAudioSpan>::emplace[abi:ne180100]<CA::StreamDescription const&,void>(uint64_t a1, const AudioStreamBasicDescription *a2)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 104))
  {
    ACAudioSpan::~ACAudioSpan((std::pmr **)a1);
    *(_BYTE *)(a1 + 104) = 0;
  }
  ACAudioSpan::ACAudioSpan((ACAudioSpan *)a1, a2);
  *(_BYTE *)(v3 + 104) = 1;
}

uint64_t checkEnvVar(const char *a1)
{
  uint64_t result;
  unint64_t v2;
  void *v3;
  void **v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  result = (uint64_t)getenv(a1);
  if (!result)
    return result;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)result);
  v2 = v7;
  if ((v7 & 0x80u) != 0)
    v2 = (unint64_t)__p[1];
  if (v2 == 2)
  {
    v3 = __p[0];
    if ((v7 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if (*(_WORD *)v5 == 20302)
    {
LABEL_9:
      if ((char)v7 < 0)
        operator delete(v3);
      return 0;
    }
  }
  else if (v2 == 1)
  {
    v3 = __p[0];
    v4 = __p;
    if ((v7 & 0x80u) != 0)
      v4 = (void **)__p[0];
    if (*(_BYTE *)v4 == 48)
      goto LABEL_9;
  }
  if ((char)v7 < 0)
    operator delete(__p[0]);
  return 1;
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t *ACBaseAudioSpan::copyEmptyMetadataEventsFrom(uint64_t *this, const ACBaseAudioSpan *a2)
{
  BOOL v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  _OWORD v10[3];

  if (*((_BYTE *)this + 88))
    v2 = *((_BYTE *)a2 + 88) == 0;
  else
    v2 = 1;
  if (!v2)
  {
    if (*((_BYTE *)this + 28))
    {
      v3 = (unsigned int *)this[2];
      if (v3[4 * *v3 + 2] == 1094863915)
      {
        v4 = *(v3 - 9);
        if ((_DWORD)v4)
        {
          v6 = this + 6;
          v7 = (uint64_t *)((char *)v3 + v4 - 48);
          memset(v10, 0, 44);
          BYTE8(v10[1]) = 1;
          *(_QWORD *)&v10[2] = 0x10000002CLL;
          AudioMetadataFrame::begin_new(v7, (unsigned int *)v10);
          if (*((_DWORD *)a2 + 20))
          {
            v8 = 0;
            v9 = *((_QWORD *)a2 + 9);
            do
            {
              AudioMetadataFrame_AppendEvent(v7, (char *)v9);
              v9 += *(unsigned int *)(v9 + 8);
              ++v8;
            }
            while (v8 < *((_DWORD *)a2 + 20));
          }
          return ACMetadataContainer::resetMetadataEvents(v6, (AudioMetadataFrame *)v7);
        }
      }
    }
  }
  return this;
}

uint64_t ACBaseAudioSpan::copyFilledMetadataEventsFrom(uint64_t result, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  unsigned int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (*(_BYTE *)(result + 88))
    v3 = *(_BYTE *)(a2 + 88) == 0;
  else
    v3 = 1;
  if (!v3 && *(_BYTE *)(a2 + 28) != 0)
  {
    v5 = *(unsigned int **)(a2 + 16);
    if (v5[4 * *v5 + 2] == 1094863915)
    {
      v6 = *(v5 - 9);
      if ((_DWORD)v6)
      {
        v7 = (char *)v5 + v6;
        v8 = *((_QWORD *)v7 - 6);
        v9 = (unint64_t)(*((_QWORD *)v7 - 5) - v8) < 0x2C || v8 == 0;
        if (!v9 && *(_DWORD *)(v8 + 40))
        {
          v10 = a3;
          v11 = result;
          v12 = 0;
          v13 = (uint64_t *)(result + 48);
          v14 = (__int128 *)(v8 + 44);
          v15 = a3 & 0xFF00000000;
          do
          {
            v16 = *v14;
            v17 = v14[1];
            v20 = *((_QWORD *)v14 + 4);
            v18 = v16;
            v19 = v17;
            if (v15)
              DWORD1(v19) = v10;
            result = AudioMetadataFrame_AppendEvent(v13, (char *)&v18);
            v14 = (__int128 *)((char *)v14 + *((unsigned int *)v14 + 2));
            *(_QWORD *)(v11 + 72) += *(unsigned int *)(*(_QWORD *)(v11 + 72) + 8);
            --*(_DWORD *)(v11 + 80);
            ++v12;
          }
          while (v12 < *(_DWORD *)(v8 + 40));
        }
      }
    }
  }
  return result;
}

void caulk::bad_expected_access<int>::~bad_expected_access(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x193FFE460);
}

void std::vector<std::unique_ptr<ACOutputBuffer>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

uint64_t caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterChain::ConvertBuffer(std::span<unsigned char const,18446744073709551615ul>,void *,unsigned int &)::$_0>(_QWORD **a1, uint64_t a2)
{
  _BYTE **v2;
  _BYTE *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (_BYTE **)*a1;
  v3 = (_BYTE *)**a1;
  v4 = *v3;
  *v3 = 1;
  if (v4)
  {
    v5 = 0;
    v6 = 1852139886;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v9 = (uint64_t *)v2[1];
    v8 = (unsigned int *)v2[2];
    v11 = *v9;
    v10 = v9[1];
    *(_QWORD *)(v7 + 16) = v11;
    *(_DWORD *)(v7 + 12) = v10;
    v6 = *v8;
    v5 = 0x100000000;
  }
  return v5 | v6;
}

uint64_t audiomxd_enabled()
{
  unsigned __int8 v0;

  {
    audiomxd_enabled::global = _os_feature_enabled_impl();
  }
  return audiomxd_enabled::global;
}

void sub_18EEF5B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18EEF5D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<APComponent>>::__assign_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<std::shared_ptr<APComponent>>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)std::vector<std::shared_ptr<APComponent>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_24:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      do
      {
        v19 = *v6;
        v20 = v6[1];
        v6 += 2;
        result = (uint64_t)std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v8, v19, v20);
        v8 += 2;
      }
      while (v6 != v18);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v21 = v18[1];
        *v13 = *v18;
        v13[1] = v21;
        if (v21)
        {
          v22 = (unint64_t *)(v21 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_24;
  }
  if (a2 != a3)
  {
    do
    {
      v24 = *v6;
      v25 = v6[1];
      v6 += 2;
      std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::operator=[abi:ne180100](v8, v24, v25);
      v8 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v8)
    result = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](result - 16);
  *(_QWORD *)(a1 + 8) = v8;
  return result;
}

char *std::vector<std::shared_ptr<APComponent>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::vector<std::shared_ptr<APComponent>>::erase[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 *v2;
  uint64_t result;
  __int128 *v5;
  uint64_t v6;

  v2 = a2;
  result = (uint64_t)(a2 + 1);
  v5 = *(__int128 **)(a1 + 8);
  if (a2 + 1 != v5)
  {
    do
      v6 = (uint64_t)v2++;
    while ((__int128 *)(std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v6, v2) + 32) != v5);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((__int128 *)result != v2)
    result = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](result - 16);
  *(_QWORD *)(a1 + 8) = v2;
  return result;
}

void std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1>,BOOL ()(APComponent &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1>,BOOL ()(APComponent &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915F00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_1>,BOOL ()(APComponent &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915F00;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0>,BOOL ()(APComponent &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

__n128 std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0>,BOOL ()(APComponent &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2915EB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0,std::allocator<AudioComponentMgr_RegistrarService::mergeServerRegistrations(AudioComponentVector &,BOOL,NSData *,NSArray *)::$_0>,BOOL ()(APComponent &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2915EB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void AudioComponentMgr_NSExtension::~AudioComponentMgr_NSExtension(AudioComponentMgr_NSExtension *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E2909560;
  v2 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;

  *(_QWORD *)this = &off_1E2909AA0;
  v3 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);

  *(_QWORD *)this = &off_1E2908380;
  v3 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)this = &off_1E2908860;
  v3 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E2909560;
  v2 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;

  *(_QWORD *)this = &off_1E2909AA0;
  v3 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);

  *(_QWORD *)this = &off_1E2908380;
  v3 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)this = &off_1E2908860;
  v3 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x193FFE460);
}

void AudioComponentMgr_Base::findCarbonComponent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void AudioComponentMgr_NSExtension::requestIcon(AudioComponentMgr_RegistrarService *a1, uint64_t (***a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  id v15;
  uint64_t (***v16)(_QWORD);
  void (*v17)(uint64_t (***)(_QWORD));
  void *v18;
  void *v19;
  _QWORD aBlock[5];
  _QWORD v21[5];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;

  if (a2)
  {
    v6 = (**a2)(a2);
    if (v6)
    {
      v7 = v6;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZN29AudioComponentMgr_NSExtension11requestIconEP20OpaqueAudioComponentR13APIconRequest_block_invoke;
      aBlock[3] = &__block_descriptor_40_e16_v16__0__NSData_8l;
      aBlock[4] = a3;
      v8 = _Block_copy(aBlock);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
      if (v9)
      {
        v10 = *(id *)(v9 + 160);
        AudioComponentMgr_RegistrarService::syncPrefServerProxy(a1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "getExtensionIcon:reply:", v10, v8);

LABEL_17:
        return;
      }
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
      if (v12)
      {
        v13 = *(const void **)(v12 + 160);
        if (v13)
          CFRetain(*(CFTypeRef *)(v12 + 160));
        v21[0] = v13;
        AudioComponentMgr_RegistrarService::syncPrefServerProxy(a1);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "getInterAppIcon:reply:", v13, v8);

        if (v13)
          CFRelease(v13);
        goto LABEL_17;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a3);

      v15 = *(id *)(a3 + 8);
      if (v15)
        return;
    }
    v16 = (uint64_t (***)(_QWORD))(**a2)(a2);
    if (v16 && *(_DWORD *)((**v16)(v16) + 44) == 1634758764)
    {
      v22 = 0;
      v23 = &v22;
      v24 = 0x2020000000;
      v17 = (void (*)(uint64_t (***)(_QWORD)))getCAUI_retrieveHostIconForAudioUnitSymbolLoc(void)::ptr;
      v25 = getCAUI_retrieveHostIconForAudioUnitSymbolLoc(void)::ptr;
      if (!getCAUI_retrieveHostIconForAudioUnitSymbolLoc(void)::ptr)
      {
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3221225472;
        v21[2] = ___ZL45getCAUI_retrieveHostIconForAudioUnitSymbolLocv_block_invoke;
        v21[3] = &unk_1E29222D8;
        v21[4] = &v22;
        ___ZL45getCAUI_retrieveHostIconForAudioUnitSymbolLocv_block_invoke(v21);
        v17 = (void (*)(uint64_t (***)(_QWORD)))v23[3];
      }
      _Block_object_dispose(&v22, 8);
      if (!v17)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UIImage *SOFT_CAUI_retrieveHostIconForAudioUnit(AudioComponent)");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("AudioComponentPluginMgr.mm"), 917, CFSTR("%s"), dlerror());

        __break(1u);
        return;
      }
      v17(a2);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_storeStrong((id *)(a3 + 8), v8);
      goto LABEL_17;
    }
  }
}

void sub_18EEF644C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

id AudioComponentMgr_RegistrarService::copyComponentUserTags(AudioComponentMgr_RegistrarService *this, OpaqueAudioComponent *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  if (!a2)
    return 0;
  v3 = (**(uint64_t (***)(OpaqueAudioComponent *))a2)(a2);
  if (!v3)
    return 0;
  dictionaryFromComponentDescription((const AudioComponentDescription *)(v3 + 36), *(unsigned int *)(v3 + 56));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy_;
  v13 = __Block_byref_object_dispose_;
  v14 = 0;
  AudioComponentMgr_RegistrarService::syncPrefServerProxy(this);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZN34AudioComponentMgr_RegistrarService21copyComponentUserTagsEP20OpaqueAudioComponent_block_invoke;
  v8[3] = &unk_1E2919A38;
  v8[4] = &v9;
  objc_msgSend(v5, "getComponentUserTags:reply:", v4, v8);

  v6 = (id)v10[5];
  _Block_object_dispose(&v9, 8);

  return v6;
}

void sub_18EEF65C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t AudioComponentMgr_RegistrarService::setComponentUserTags(AudioComponentMgr_RegistrarService *this, OpaqueAudioComponent *a2, const __CFArray *a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  std::recursive_mutex *v8[2];

  if (!a2)
    return 4294964296;
  v4 = (**(uint64_t (***)(OpaqueAudioComponent *))a2)(a2);
  if (!v4)
    return 4294964296;
  dictionaryFromComponentDescription((const AudioComponentDescription *)(v4 + 36), *(unsigned int *)(v4 + 56));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  GlobalComponentPluginMgr((uint64_t *)v8);
  AudioComponentMgr_RegistrarService::syncPrefServerProxy((AudioComponentMgr_RegistrarService *)v8[1]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setComponentUserTags:tags:", v5, a3);

  if (v8[0])
    std::recursive_mutex::unlock(v8[0]);

  return 0;
}

void sub_18EEF6698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  void *v9;
  void *v10;

  if (a9)
    std::recursive_mutex::unlock(a9);

  _Unwind_Resume(a1);
}

uint64_t AudioComponentMgr_RegistrarService::isComponentRegistrationAllowed(AudioComponentMgr_RegistrarService *this, const AudioComponentDescription *a2)
{
  return 1;
}

void AudioComponentMgr_NSExtension::_prepareRemoveComponent(char **this, APComponent *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  __int128 v21;

  *((_BYTE *)a2 + 72) = 1;
  v4 = (*(uint64_t (**)(APComponent *))(*(_QWORD *)a2 + 64))(a2);
  if (v4)
  {
    v5 = (uint64_t *)(v4 + 200);
    if (*(_QWORD *)(v4 + 200))
    {
      AudioComponentMgr_Base::_addComponent(this, v5);
      v6 = this + 1;
      v7 = this[2];
      v8 = this[3];
      while (v7 != v8)
      {
        v9 = *(_QWORD *)v7;
        v7 += 16;
        *v6 = v9;
        v6 = (_QWORD *)(v9 + 24);
      }
      *v6 = 0;
      v21 = 0uLL;
      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v5, &v21);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
LABEL_19:
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  else
  {
    v15 = *((_QWORD *)a2 + 18);
    v14 = (char *)a2 + 144;
    v13 = v15;
    if (v15)
    {
      v21 = 0uLL;
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 64))(v13);
      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100](v16 + 200, &v21);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v21 = 0uLL;
      std::shared_ptr<caulk::deferred_logger>::operator=[abi:ne180100]((uint64_t)v14, &v21);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v12 = __ldaxr(v20);
        while (__stlxr(v12 - 1, v20));
        goto LABEL_19;
      }
    }
  }
}

void sub_18EEF682C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *a1@<X1>, uint64_t a2@<X8>)
{
  NSArray *v4;
  __CFString *v5;
  CFBundleRef BundleWithIdentifier;
  CFBundleRef v7;
  CFArrayRef v8;
  CFTypeRef v9;
  NSArray *v10;
  NSArray *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  CFTypeRef cf;
  CFTypeRef v16;
  CFTypeRef v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 1;
  objc_msgSend((id)AudioComponentMgr_NSExtension::sExtensionServiceBundle, "bundleIdentifier");
  v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(v5);
  v7 = BundleWithIdentifier;
  if (!BundleWithIdentifier)
    goto LABEL_15;
  CFRetain(BundleWithIdentifier);
  v17 = v7;
  v8 = CFBundleCopyExecutableArchitectures(v7);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v16, v8);
  v9 = v17;
  v10 = v4;
  v11 = v10;
  if (v10)
    CFRetain(v10);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&cf, v11);

  v19 = 0;
  v12 = operator new(0x20uLL);
  *v12 = &off_1E2915D98;
  v12[1] = &v17;
  v12[2] = &v16;
  v12[3] = a2;
  v19 = v12;
  AudioComponentRegistrationInfo::parseInfoPlistArray(5, (uint64_t)v9, (CFArrayRef *)&cf, (uint64_t)v18);
  v13 = v19;
  if (v19 == v18)
  {
    v14 = 4;
    v13 = v18;
    goto LABEL_8;
  }
  if (v19)
  {
    v14 = 5;
LABEL_8:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  if (v17)
    CFRelease(v17);
LABEL_15:

}

void sub_18EEF69B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void applesauce::CF::ArrayRef::~ArrayRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

const void **applesauce::CF::ObjectRef<__CFBundle *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void std::__function::__func<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0,std::allocator<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

__n128 std::__function::__func<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0,std::allocator<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2915D98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0,std::allocator<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2915D98;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0,std::allocator<AudioComponentMgr_NSExtension::buildExtensionServiceComponentList(NSArray *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  int64x2_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 cf;
  __int128 v16;

  objc_msgSend((id)AudioComponentMgr_NSExtension::sExtensionServiceBundle, "bundlePath");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
    CFRetain(v4);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v5);

  APComponent_FromBundle_Loadable::create_shared((std::__shared_weak_count_vtbl **)&v16, 70, (const void **)&cf, *(const void ***)(a1 + 8), *(const void ***)(a1 + 16), a2);
  if ((_QWORD)cf)
    CFRelease((CFTypeRef)cf);

  v6 = *(int64x2_t **)(a1 + 24);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  cf = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  AudioComponentVector::add(v6, &cf);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18EEF6C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (a12)
  {
    v16 = (unint64_t *)&a12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void APComponent_FromBundle_Loadable::create_shared(std::__shared_weak_count_vtbl **a1, int a2, const void **a3, const void **a4, const void **a5, uint64_t a6)
{
  std::__shared_weak_count_vtbl *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;

  v12 = (std::__shared_weak_count_vtbl *)operator new();
  APComponent_FromBundle_Base::APComponent_FromBundle_Base((uint64_t)v12, a2, a3, a5, a6);
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_1E2909810;
  v13 = (void *)*a4;
  if (v13)
    CFRetain(v13);
  v12[4].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v12[5].~__shared_weak_count = 0;
  *a1 = v12;
  v14 = (std::__shared_weak_count *)operator new();
  v14->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917FA0;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = v12;
  a1[1] = (std::__shared_weak_count_vtbl *)v14;
  on_zero_shared = (std::__shared_weak_count *)v12->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1)
      return;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
    v12->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v14;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }
  else
  {
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v21 = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
    v12->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v14;
  }
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_18EEF6EA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<APComponent_FromBundle_Loadable *,std::shared_ptr<APComponent_FromBundle_Loadable>::__shared_ptr_default_delete<APComponent_FromBundle_Loadable,APComponent_FromBundle_Loadable>,std::allocator<APComponent_FromBundle_Loadable>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<APComponent_FromBundle_Loadable *,std::shared_ptr<APComponent_FromBundle_Loadable>::__shared_ptr_default_delete<APComponent_FromBundle_Loadable,APComponent_FromBundle_Loadable>,std::allocator<APComponent_FromBundle_Loadable>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t APComponent_FromBundle_Base::APComponent_FromBundle_Base(uint64_t a1, int a2, const void **a3, const void **a4, uint64_t a5)
{
  unsigned int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)(a5 + 20);
  v10 = *(_DWORD *)(a5 + 32);
  v19 = 0;
  APComponent::APComponent(a1, 1, a2, a5, v9, (CFTypeRef *)(a5 + 24), v10, (uint64_t)v18);
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  *(_QWORD *)a1 = off_1E2909270;
  v13 = *a3;
  if (v13)
    CFRetain(v13);
  *(_QWORD *)(a1 + 160) = v13;
  v14 = *a4;
  if (v14)
    CFRetain(v14);
  *(_QWORD *)(a1 + 168) = v14;
  v15 = *(_QWORD *)(a5 + 40);
  if (v15)
    CFRetain(*(CFTypeRef *)(a5 + 40));
  *(_QWORD *)(a1 + 176) = v15;
  v16 = *(_QWORD *)(a5 + 48);
  if (v16)
    CFRetain(*(CFTypeRef *)(a5 + 48));
  *(_QWORD *)(a1 + 184) = v16;
  APComponent::setTags((APComponent *)a1, *(CFTypeRef *)(a5 + 56));
  return a1;
}

void sub_18EEF704C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t APComponent::GetInstance(APComponent *this)
{
  return 0;
}

void APComponent_FromBundle_Base::~APComponent_FromBundle_Base(APComponent *this)
{
  APComponent_FromBundle_Base::~APComponent_FromBundle_Base(this);
  JUMPOUT(0x193FFE460);
}

{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  *(_QWORD *)this = off_1E2909270;
  v2 = (const void *)*((_QWORD *)this + 23);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 22);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 21);
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 20);
  if (v5)
    CFRelease(v5);
  APComponent::~APComponent(this);
}

uint64_t APComponent::getExtension(APComponent *this)
{
  return 0;
}

uint64_t APComponent::getV3Class(APComponent *this)
{
  return 0;
}

uint64_t APComponent::asRemoteComponent(APComponent *this)
{
  return 0;
}

uint64_t APComponent::asCarbonComponentWrapper(APComponent *this)
{
  return 0;
}

uint64_t APComponent::ResolveFactoryFunction(APComponent *this)
{
  return 4294967292;
}

CFTypeRef APComponent_FromBundle_Base::architectures@<X0>(CFTypeRef this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 21);
  if (v3)
    this = CFRetain(*((CFTypeRef *)this + 21));
  *a2 = v3;
  return this;
}

void ___ZN34AudioComponentMgr_RegistrarService18retrieveComponentsEbb_block_invoke_62(_QWORD *a1, void *a2, char a3, void *a4, void *a5)
{
  NSData *v9;
  NSArray *v10;
  AudioComponentMgr_RegistrarService *v11;
  NSData *v12;

  v12 = a2;
  v9 = a4;
  v10 = a5;
  v11 = (AudioComponentMgr_RegistrarService *)a1[6];
  *(CFAbsoluteTime *)(*(_QWORD *)(a1[4] + 8) + 24) = CFAbsoluteTimeGetCurrent();
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
  AudioComponentMgr_RegistrarService::mergeServerRegistrations(v11, v12, a3 ^ 1, v9, v10);

}

void sub_18EEF7240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZN34AudioComponentMgr_RegistrarService18retrieveComponentsEbb_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  os_log_t v3;
  _QWORD *v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (gAudioComponentLogCategory)
  {
    v3 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v3 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v4 = v3;
    gAudioComponentLogCategory = (uint64_t)v4;
  }
  v5 = objc_retainAutorelease(v3);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = 136315650;
    v7 = "AudioComponentPluginMgr.mm";
    v8 = 1024;
    v9 = 590;
    v10 = 2112;
    v11 = v2;
    _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d reg server remote proxy error %@", (uint8_t *)&v6, 0x1Cu);
  }

}

void sub_18EEF737C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<APComponent>::shared_ptr[abi:ne180100]<APComponent,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *this)
{
  std::__shared_weak_count *v4;

  *a1 = a2;
  if (!this)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = std::__shared_weak_count::lock(this);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
}

id AudioComponentMgr_RegistrarService::syncPrefServerProxy(AudioComponentMgr_RegistrarService *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[5];
  _QWORD v9[5];

  v2 = (void *)*((_QWORD *)this + 13);
  if (!v2)
  {
    assertXPCServiceReachable(CFSTR("com.apple.audio.AudioComponentPrefs"));
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.audio.AudioComponentPrefs"), 4096);
    objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE16F950);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setRemoteObjectInterface:", v4);

    v5 = MEMORY[0x1E0C809B0];
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___ZN34AudioComponentMgr_RegistrarService19syncPrefServerProxyEv_block_invoke;
    v9[3] = &__block_descriptor_40_e5_v8__0l;
    v9[4] = this;
    objc_msgSend(v3, "setInterruptionHandler:", v9);
    v8[0] = v5;
    v8[1] = 3221225472;
    v8[2] = ___ZN34AudioComponentMgr_RegistrarService19syncPrefServerProxyEv_block_invoke_2;
    v8[3] = &__block_descriptor_40_e5_v8__0l;
    v8[4] = this;
    objc_msgSend(v3, "setInvalidationHandler:", v8);
    objc_msgSend(v3, "resume");
    v6 = (void *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v3;

    v2 = (void *)*((_QWORD *)this + 13);
  }
  objc_msgSend(v2, "synchronousRemoteObjectProxyWithErrorHandler:", &__block_literal_global_45);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_18EEF7524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN34AudioComponentMgr_RegistrarService19syncPrefServerProxyEv_block_invoke(uint64_t a1, const char *a2)
{
  AudioComponentMgr_RegistrarService::lostPrefServerConnection((AudioComponentMgr_RegistrarService *)"interrupted", a2);
}

void ___ZN34AudioComponentMgr_RegistrarService19syncPrefServerProxyEv_block_invoke_2(uint64_t a1, const char *a2)
{
  AudioComponentMgr_RegistrarService::lostPrefServerConnection((AudioComponentMgr_RegistrarService *)"invalidated", a2);
}

void ___ZN34AudioComponentMgr_RegistrarService19syncPrefServerProxyEv_block_invoke_3(uint64_t a1, void *a2)
{
  id v2;
  os_log_t v3;
  _QWORD *v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (gAudioComponentLogCategory)
  {
    v3 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v3 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v4 = v3;
    gAudioComponentLogCategory = (uint64_t)v4;
  }
  v5 = objc_retainAutorelease(v3);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = 136315650;
    v7 = "AudioComponentPluginMgr.mm";
    v8 = 1024;
    v9 = 382;
    v10 = 2112;
    v11 = v2;
    _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d preference server proxy error: %@", (uint8_t *)&v6, 0x1Cu);
  }

}

void sub_18EEF7674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AudioComponentMgr_RegistrarService::lostPrefServerConnection(AudioComponentMgr_RegistrarService *this, const char *a2)
{
  os_log_t v3;
  _QWORD *v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  AudioComponentMgr_RegistrarService *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (gAudioComponentLogCategory)
  {
    v3 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v3 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v4 = v3;
    gAudioComponentLogCategory = (uint64_t)v4;
  }
  v5 = objc_retainAutorelease(v3);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136315650;
    v7 = "AudioComponentPluginMgr.mm";
    v8 = 1024;
    v9 = 333;
    v10 = 2080;
    v11 = this;
    _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d preference server connection %s", (uint8_t *)&v6, 0x1Cu);
  }
}

_QWORD *std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E29158D0;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E29158D0;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x193FFE460);
}

uint64_t std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E29158D0;
  a2[1] = v2;
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

BOOL std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;

  v3 = *a2;
  v7 = 0;
  v4 = (*(uint64_t (**)(uint64_t, char *))(a1 + 8))(v3, &v7);
  if (!v7)
    return 0;
  v8 = v4;
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v8);
  return v7 != 0;
}

void std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915918;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::operator()(uint64_t result, _QWORD *a2)
{
  **(_DWORD **)(result + 8) = *a2;
  return result;
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void ___ZN34AudioComponentMgr_RegistrarService21copyComponentUserTagsEP20OpaqueAudioComponent_block_invoke(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void ___ZN29AudioComponentMgr_NSExtension11requestIconEP20OpaqueAudioComponentR13APIconRequest_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  v3 = (void *)objc_msgSend(objc_alloc(NSClassFromString(CFSTR("UIImage"))), "initWithData:", v4);
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 8), v3);

}

void sub_18EEF7A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EEF7B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZN34AudioComponentMgr_RegistrarService27connectToRegistrationServerEv_block_invoke_2(uint64_t a1, const char *a2)
{
  AudioComponentMgr_RegistrarService::lostRegServerConnection((AudioComponentMgr_RegistrarService *)"interrupted", a2);
}

void ___ZN34AudioComponentMgr_RegistrarService27connectToRegistrationServerEv_block_invoke_3(uint64_t a1, const char *a2)
{
  AudioComponentMgr_RegistrarService::lostRegServerConnection((AudioComponentMgr_RegistrarService *)"invalidated", a2);
}

void AudioComponentMgr_RegistrarService::lostRegServerConnection(AudioComponentMgr_RegistrarService *this, const char *a2)
{
  os_log_t v3;
  _QWORD *v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  AudioComponentMgr_RegistrarService *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (gAudioComponentLogCategory)
  {
    v3 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v3 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v4 = v3;
    gAudioComponentLogCategory = (uint64_t)v4;
  }
  v5 = objc_retainAutorelease(v3);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136315650;
    v7 = "AudioComponentPluginMgr.mm";
    v8 = 1024;
    v9 = 326;
    v10 = 2080;
    v11 = this;
    _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d registration server connection %s", (uint8_t *)&v6, 0x1Cu);
  }
}

void AudioComponentMgr_Base::~AudioComponentMgr_Base(AudioComponentMgr_Base *this)
{
  void **v1;

  *(_QWORD *)this = &off_1E2908860;
  v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_1E2908860;
  v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x193FFE460);
}

void AudioComponentMgr_Base::requestIcon(uint64_t a1, uint64_t (***a2)(_QWORD), uint64_t a3)
{
  uint64_t v4;

  if (a2)
  {
    v4 = (**a2)(a2);
    if (v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a3);
  }
}

uint64_t AudioComponentMgr_Base::copyComponentUserTags(AudioComponentMgr_Base *this, OpaqueAudioComponent *a2)
{
  return 0;
}

uint64_t AudioComponentMgr_Base::setComponentUserTags(AudioComponentMgr_Base *this, OpaqueAudioComponent *a2, const __CFArray *a3)
{
  return 4294967292;
}

uint64_t AudioComponentMgr_Base::isComponentRegistrationAllowed(AudioComponentMgr_Base *this, const AudioComponentDescription *a2)
{
  return 1;
}

uint64_t AudioComponentMgr_Base::handleDuplicateRegistrationAttempt()
{
  return 0;
}

void AudioComponentMgr_Base::_prepareRemoveComponent(AudioComponentMgr_Base *this, APComponent *a2)
{
  *((_BYTE *)a2 + 72) = 1;
}

uint64_t AudioComponentMgr_Base::hasSpeechSynthesizerSupport(AudioComponentMgr_Base *this)
{
  return 0;
}

void AudioComponentMgr_iOS::~AudioComponentMgr_iOS(AudioComponentMgr_iOS *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2908380;
  v2 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(_QWORD *)this = &off_1E2908860;
  v2 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2908380;
  v2 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(_QWORD *)this = &off_1E2908860;
  v2 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x193FFE460);
}

void AudioComponentMgr_iOS::initPhase2(AudioComponentMgr_iOS *this)
{
  EmbeddedComponentManager *v1;

  v1 = (EmbeddedComponentManager *)EmbeddedComponentManager::registerInternalAudioUnits(this);
  EmbeddedComponentManager::registerInternalAudioCodecs(v1);
}

void AudioComponentMgr_RegistrarService::~AudioComponentMgr_RegistrarService(id *this)
{
  void **v2;

  *this = &off_1E2909AA0;
  v2 = this + 14;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);

  *this = &off_1E2908380;
  v2 = this + 6;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = &off_1E2908860;
  v2 = this + 2;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;

  *this = &off_1E2909AA0;
  v2 = this + 14;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);

  *this = &off_1E2908380;
  v2 = this + 6;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = &off_1E2908860;
  v2 = this + 2;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x193FFE460);
}

uint64_t AudioComponentMgr_RegistrarService::extensionServiceIdentifier(AudioComponentMgr_RegistrarService *this)
{
  return 0;
}

double AudioComponentMgr_RegistrarService::buildExtensionServiceComponentList@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void ___ZN22AudioComponentMgr_BaseC2Ev_block_invoke()
{
  std::recursive_mutex *v0[2];

  GlobalComponentPluginMgr((uint64_t *)v0);
  AudioComponentVector::showAll((AudioComponentVector *)&v0[1]->__m_.__opaque[8], "notify request");
  if (v0[0])
    std::recursive_mutex::unlock(v0[0]);
}

void sub_18EEF8058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9)
    std::recursive_mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void APComponent_InterApp::~APComponent_InterApp(APComponent *this)
{
  APComponent_InterApp::~APComponent_InterApp(this);
  JUMPOUT(0x193FFE460);
}

{
  const void *v2;

  *(_QWORD *)this = off_1E2907EE8;
  v2 = (const void *)*((_QWORD *)this + 20);
  if (v2)
    CFRelease(v2);
  APComponent::~APComponent(this);
}

void APComponent_InterApp::getIcon(uint64_t a1, uint64_t a2)
{
  id v3;

  IPCAUIcons::GetIconFromBundle(*(IPCAUIcons **)(a1 + 160), (const __CFString *)a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(a2 + 8), v3);

}

void APComponent::architectures(APComponent *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
}

uint64_t AudioComponentMgr_NSExtension::setExtensionComponentList(AudioComponentMgr_NSExtension *this, NSString *a2, NSArray *a3)
{
  NSString *v5;
  NSArray *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v5 = a2;
  v6 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 560558179;
  AudioComponentMgr_RegistrarService::syncPrefServerProxy(this);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *((unsigned __int8 *)this + 80);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZN29AudioComponentMgr_NSExtension25setExtensionComponentListEP8NSStringP7NSArray_block_invoke;
  v11[3] = &unk_1E2919A10;
  v11[4] = &v12;
  objc_msgSend(v7, "setExtensionComponentList:linkedSDKRequiresEntitlement:components:reply:", v5, v8, v6, v11);

  v9 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);

  return v9;
}

void sub_18EEF8204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN29AudioComponentMgr_NSExtension25setExtensionComponentListEP8NSStringP7NSArray_block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

id AudioComponentMgr_NSExtension::getExtensionComponentList(AudioComponentMgr_NSExtension *this, NSString *a2)
{
  NSString *v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v3 = a2;
  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy_;
  v13 = __Block_byref_object_dispose_;
  v14 = 0;
  AudioComponentMgr_RegistrarService::syncPrefServerProxy(this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *((unsigned __int8 *)this + 80);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZN29AudioComponentMgr_NSExtension25getExtensionComponentListEP8NSString_block_invoke;
  v8[3] = &unk_1E2919A38;
  v8[4] = &v9;
  objc_msgSend(v4, "getExtensionComponentList:linkedSDKRequiresEntitlement:reply:", v3, v5, v8);

  v6 = (id)v10[5];
  _Block_object_dispose(&v9, 8);

  return v6;
}

void sub_18EEF8320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void ___ZN29AudioComponentMgr_NSExtension25getExtensionComponentListEP8NSString_block_invoke(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void ___ZN29AudioComponentMgr_NSExtension23iconForInterAppBundleIDEPK10__CFStringR13APIconRequest_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  v3 = (void *)objc_msgSend(objc_alloc(NSClassFromString(CFSTR("UIImage"))), "initWithData:", v4);
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 8), v3);

}

void sub_18EEF83C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t AudioComponentCopyUserTags(uint64_t a1)
{
  uint64_t v2;
  std::recursive_mutex *v4;
  uint64_t v5;

  GlobalComponentPluginMgr((uint64_t *)&v4);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 56))(v5, a1);
  if (v4)
    std::recursive_mutex::unlock(v4);
  return v2;
}

void sub_18EEF842C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9)
    std::recursive_mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

uint64_t AudioComponentSetUserTags(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::recursive_mutex *v6;
  uint64_t v7;

  GlobalComponentPluginMgr((uint64_t *)&v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, a1, a2);
  if (v6)
    std::recursive_mutex::unlock(v6);
  return v4;
}

void sub_18EEF84A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9)
    std::recursive_mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<APComponent *,std::shared_ptr<APComponent>::__shared_ptr_default_delete<APComponent,APComponent>,std::allocator<APComponent>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__function::__func<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*),std::allocator<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*)>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*),std::allocator<AudioComponentPlugInInterface * (*)(AudioComponentDescription const*)>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E29135A8;
  result[1] = v3;
  return result;
}

uint64_t AudioComponentRelease(uint64_t (***a1)(_QWORD))
{
  uint64_t v1;
  APComponent *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  std::recursive_mutex *v9;
  uint64_t v10;

  if (!a1)
    return 4294967246;
  v1 = (**a1)(a1);
  if (!v1)
    return 4294964296;
  v2 = (APComponent *)v1;
  GlobalComponentPluginMgr((uint64_t *)&v9);
  v3 = v10;
  (*(void (**)(uint64_t, APComponent *))(*(_QWORD *)v10 + 104))(v10, v2);
  AudioComponentVector::remove((AudioComponentVector *)(v3 + 16), v2);
  v4 = (_QWORD *)(v3 + 8);
  v5 = *(uint64_t **)(v3 + 16);
  v6 = *(uint64_t **)(v3 + 24);
  while (v5 != v6)
  {
    v7 = *v5;
    v5 += 2;
    *v4 = v7;
    v4 = (_QWORD *)(v7 + 24);
  }
  *v4 = 0;
  dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_72);
  if (v9)
    std::recursive_mutex::unlock(v9);
  return 0;
}

void sub_18EEF85EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9)
    std::recursive_mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

IPCAUClient *IPCAUClient::IPCAUFactoryFunction(IPCAUClient *this, const AudioComponentDescription *a2)
{
  IPCAUClient *v2;
  __CFBundle *MainBundle;
  const __CFArray *ValueForInfoDictionaryKey;
  const __CFArray *v5;
  CFTypeID v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  mach_port_name_t reply_port;
  mach_msg_return_t v15;
  int v16;
  BOOL v17;
  const char **v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  int v24;
  int v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  const char *v29;
  int v30;
  mach_port_name_t v31;
  mach_msg_return_t v32;
  mach_msg_return_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t (*(*v37)(IPCAUClient::AUInstance *))(void *);
  unsigned __int16 v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CFTypeRef *v45;
  NSObject *v46;
  unsigned int *v47;
  NSObject *global_queue;
  NSObject *v49;
  unint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  _BYTE buf[52];
  __int128 v69;
  uint64_t v70;
  uint8_t v71[4];
  const char *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  int v78;
  __int16 v79;
  _BYTE *v80;
  uint64_t v81;
  CFRange v82;

  v2 = this;
  v81 = *MEMORY[0x1E0C80C00];
  if (!this)
    return v2;
  v66 = CADeprecated::TSingleton<IPCAUClient>::instance(this);
  v65 = (*(uint64_t (**)(void))(*(_QWORD *)v66 + 16))();
  if (AppHasBackgroundAudioInfoPlistKey(char const*)::hasKey < 0)
  {
    AppHasBackgroundAudioInfoPlistKey(char const*)::hasKey = 0;
    MainBundle = CFBundleGetMainBundle();
    if (MainBundle
      && (ValueForInfoDictionaryKey = (const __CFArray *)CFBundleGetValueForInfoDictionaryKey(MainBundle, CFSTR("UIBackgroundModes")), (v5 = ValueForInfoDictionaryKey) != 0)&& (v6 = CFGetTypeID(ValueForInfoDictionaryKey), v6 == CFArrayGetTypeID())&& (v82.length = CFArrayGetCount(v5), v82.location = 0, CFArrayContainsValue(v5, v82, CFSTR("audio"))))
    {
      AppHasBackgroundAudioInfoPlistKey(char const*)::hasKey = 1;
    }
    else if (!AppHasBackgroundAudioInfoPlistKey(char const*)::hasKey)
    {
LABEL_11:
      if (kInterAppAudioScope)
      {
        v7 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
        {
LABEL_65:
          v2 = 0;
          goto LABEL_66;
        }
      }
      else
      {
        v7 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_65;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "IPCAURegistrar.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1600;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AudioComponentInstanceNew";
      _os_log_impl(&dword_18EE07000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: failing because app does not have 'audio' in its UIBackgroundModes", buf, 0x1Cu);
      if (!AppHasBackgroundAudioInfoPlistKey(char const*)::hasKey)
        goto LABEL_65;
    }
  }
  else if (!AppHasBackgroundAudioInfoPlistKey(char const*)::hasKey)
  {
    goto LABEL_11;
  }
  v8 = v66 + 88;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v66 + 88) + 16))(v66 + 88);
  *(_QWORD *)(v66 + 224) = (*(_DWORD *)(v66 + 224) + 1);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v10 = 268435460;
  v11 = 5;
  while (1)
  {
    v12 = *(_DWORD *)(CADeprecated::TSingleton<AURegistrationServerConnection>::instance() + 48);
    *(_OWORD *)&buf[32] = *(_OWORD *)v2;
    *(_DWORD *)&buf[48] = *((_DWORD *)v2 + 4);
    v13 = *(_DWORD *)(v66 + 224);
    *(_QWORD *)&buf[24] = *MEMORY[0x1E0C804E8];
    LODWORD(v69) = v13;
    reply_port = mig_get_reply_port();
    *(_QWORD *)buf = 5395;
    *(_DWORD *)&buf[8] = v12;
    *(_DWORD *)&buf[12] = reply_port;
    *(_QWORD *)&buf[16] = 0x15F9800000000;
    if (MEMORY[0x1E0C85B60])
    {
      voucher_mach_msg_set((mach_msg_header_t *)buf);
      reply_port = *(_DWORD *)&buf[12];
    }
    v15 = mach_msg((mach_msg_header_t *)buf, 275, 0x38u, 0x30u, reply_port, gMediaServerTimeout, 0);
    v16 = v15;
    if ((v15 - 268435458) <= 0xE && ((1 << (v15 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(*(mach_port_t *)&buf[12]);
      goto LABEL_38;
    }
    if (!v15)
    {
      if (*(_DWORD *)&buf[20] == 71)
      {
        v16 = -308;
      }
      else if (*(_DWORD *)&buf[20] == 90108)
      {
        if ((*(_DWORD *)buf & 0x80000000) == 0)
        {
          if (*(_DWORD *)&buf[4] == 40)
          {
            if (!*(_DWORD *)&buf[8])
            {
              v16 = *(_DWORD *)&buf[32];
              if (!*(_DWORD *)&buf[32])
              {
                v16 = *(_DWORD *)&buf[36];
                goto LABEL_51;
              }
              goto LABEL_44;
            }
          }
          else if (*(_DWORD *)&buf[4] == 36)
          {
            if (*(_DWORD *)&buf[8])
              v17 = 1;
            else
              v17 = *(_DWORD *)&buf[32] == 0;
            if (v17)
              v16 = -300;
            else
              v16 = *(_DWORD *)&buf[32];
            goto LABEL_44;
          }
        }
        v16 = -300;
      }
      else
      {
        v16 = -301;
      }
LABEL_44:
      mach_msg_destroy((mach_msg_header_t *)buf);
      goto LABEL_45;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&buf[12]);
LABEL_38:
    if (v16 == 268435460)
    {
      if ((*(_WORD *)buf & 0x1F00) == 0x1100)
        mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&buf[12]);
      mach_msg_destroy((mach_msg_header_t *)buf);
      goto LABEL_58;
    }
LABEL_45:
    if (v16 != 268435459)
      break;
    sleep(1u);
    v18 = (const char **)CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
    AURegistrationServerConnection::Connect(v18);
    if (!--v11)
    {
      v10 = 268435459;
      goto LABEL_58;
    }
  }
  if (v16)
  {
    v10 = v16;
LABEL_58:
    if (kInterAppAudioScope)
    {
      v2 = *(IPCAUClient **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        goto LABEL_66;
    }
    else
    {
      v2 = (IPCAUClient *)MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
      goto LABEL_65;
    CAX4CCString::CAX4CCString((CAX4CCString *)v71, v10);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 211;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v71;
    v20 = "%25s:%-5d CheckLaunchAUServer failed (%s)";
    v21 = v2;
    v22 = 28;
LABEL_64:
    _os_log_impl(&dword_18EE07000, v21, OS_LOG_TYPE_ERROR, v20, buf, v22);
    goto LABEL_65;
  }
LABEL_51:
  if (kInterAppAudioScope)
  {
    v19 = *(NSObject **)kInterAppAudioScope;
    if (!*(_QWORD *)kInterAppAudioScope)
      goto LABEL_72;
  }
  else
  {
    v19 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 215;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v16;
    _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d CheckLaunch says mustWait: %d", buf, 0x18u);
  }
LABEL_72:
  if (v16)
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    while (1)
    {
      v25 = *(_DWORD *)(v66 + 228);
      if (v25)
        break;
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 64))(v8, 20000000000))
      {
        if (kInterAppAudioScope)
        {
          v26 = *(NSObject **)kInterAppAudioScope;
          if (!*(_QWORD *)kInterAppAudioScope)
            goto LABEL_132;
        }
        else
        {
          v26 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          goto LABEL_132;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 224;
        v29 = "%25s:%-5d Timed out waiting for app to launch";
        goto LABEL_131;
      }
    }
    if (v25 == 1)
    {
      if (kInterAppAudioScope)
      {
        v26 = *(NSObject **)kInterAppAudioScope;
        if (!*(_QWORD *)kInterAppAudioScope)
        {
LABEL_132:
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
          goto LABEL_65;
        }
      }
      else
      {
        v26 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        goto LABEL_132;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 229;
      v29 = "%25s:%-5d Failed to launch app";
LABEL_131:
      _os_log_impl(&dword_18EE07000, v26, OS_LOG_TYPE_ERROR, v29, buf, 0x12u);
      goto LABEL_132;
    }
    if (kInterAppAudioScope)
    {
      v28 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        goto LABEL_98;
    }
    else
    {
      v28 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 233;
      _os_log_impl(&dword_18EE07000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d App seems to be running after wait", buf, 0x12u);
    }
LABEL_98:
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  }
  else
  {
    if (kInterAppAudioScope)
    {
      v27 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        goto LABEL_100;
    }
    else
    {
      v27 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 235;
      _os_log_impl(&dword_18EE07000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d App appears to be already running", buf, 0x12u);
    }
  }
LABEL_100:
  v30 = *(_DWORD *)(CADeprecated::TSingleton<AURegistrationServerConnection>::instance() + 48);
  v70 = 0;
  v69 = 0u;
  memset(&buf[4], 0, 48);
  *(_QWORD *)&buf[24] = *MEMORY[0x1E0C804E8];
  *(_OWORD *)&buf[32] = *(_OWORD *)v2;
  *(_DWORD *)&buf[48] = *((_DWORD *)v2 + 4);
  v31 = mig_get_reply_port();
  *(_DWORD *)&buf[8] = v30;
  *(_DWORD *)&buf[12] = v31;
  *(_DWORD *)buf = 5395;
  *(_QWORD *)&buf[16] = 0x15F9900000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)buf);
    v31 = *(_DWORD *)&buf[12];
  }
  v32 = mach_msg((mach_msg_header_t *)buf, 275, 0x34u, 0x4Cu, v31, gMediaServerTimeout, 0);
  v33 = v32;
  if ((v32 - 268435458) <= 0xE && ((1 << (v32 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&buf[12]);
    goto LABEL_118;
  }
  if (v32)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&buf[12]);
LABEL_118:
    if (v33 != 268435460)
      goto LABEL_122;
    if ((*(_WORD *)buf & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&buf[12]);
    goto LABEL_121;
  }
  if (*(_DWORD *)&buf[20] != 90109
    || (*(_DWORD *)buf & 0x80000000) == 0
    || *(_DWORD *)&buf[24] != 1
    || *(_DWORD *)&buf[4] != 68
    || *(_DWORD *)&buf[8]
    || *(unsigned __int16 *)&buf[38] << 16 != 1114112)
  {
LABEL_121:
    mach_msg_destroy((mach_msg_header_t *)buf);
LABEL_122:
    if (kInterAppAudioScope)
    {
      v2 = *(IPCAUClient **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        goto LABEL_66;
    }
    else
    {
      v2 = (IPCAUClient *)MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
      goto LABEL_65;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "IPCAUClient.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 243;
    v20 = "%25s:%-5d Host can't be node";
    v21 = v2;
    v22 = 18;
    goto LABEL_64;
  }
  v34 = *(unsigned int *)&buf[28];
  v35 = *(_DWORD *)&buf[48];
  v67 = v69;
  if (!*(_DWORD *)&buf[28] || v35 == getpid())
    goto LABEL_122;
  v36 = *(_DWORD *)v2;
  v37 = IPCAUClient::AUInstance::LookupMethod_Music;
  if (*(int *)v2 > 1635086952)
  {
    if (v36 != 1635086953)
    {
      v38 = 29293;
      goto LABEL_136;
    }
  }
  else if (v36 != 1635085670)
  {
    v38 = 28021;
LABEL_136:
    if (v36 != (v38 | 0x61750000))
      v37 = IPCAUClient::AUInstance::LookupMethod;
  }
  v39 = *(uint64_t **)(v66 + 336);
  v40 = *(uint64_t **)(v66 + 344);
  if (v39 == v40)
    goto LABEL_144;
  v41 = 0;
  v42 = 0;
  do
  {
    v44 = *v39++;
    v43 = v44;
    if (*(_DWORD *)(v44 + 48) == (_DWORD)v34)
    {
      v41 = v43;
      v42 = v43;
    }
  }
  while (v39 != v40);
  if (!v42)
  {
LABEL_144:
    v41 = operator new();
    CADeprecated::XRemoteMachServer::XRemoteMachServer((CADeprecated::XRemoteMachServer *)v41, "RemoteAUServer", 0);
    *(_QWORD *)v41 = &off_1E2909D90;
    *(_OWORD *)(v41 + 168) = 0u;
    v45 = (CFTypeRef *)(v41 + 168);
    *(_OWORD *)(v41 + 184) = 0u;
    *(_OWORD *)(v41 + 200) = 0u;
    *(_OWORD *)(v41 + 212) = 0u;
    if (kInterAppAudioScope)
    {
      v46 = *(NSObject **)kInterAppAudioScope;
      if (!*(_QWORD *)kInterAppAudioScope)
        goto LABEL_150;
    }
    else
    {
      v46 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = v34;
      *(_QWORD *)&buf[12] = 0;
      *(_QWORD *)&buf[4] = 0;
      v47 = (unsigned int *)MEMORY[0x1E0C83DA0];
      MEMORY[0x193FFEB38](*MEMORY[0x1E0C83DA0], v34, 0, &buf[4]);
      MEMORY[0x193FFEB38](*v47, v34, 1, &buf[8]);
      MEMORY[0x193FFEB38](*v47, v34, 2, &buf[16]);
      MEMORY[0x193FFEB38](*v47, v34, 4, &buf[12]);
      buf[20] = 0;
      snprintf(&buf[20], 0x80uLL, "port 0x%x: %d send, %d rcv, %d sendonce, %d dead name refs", *(_DWORD *)buf, *(_DWORD *)&buf[4], *(_DWORD *)&buf[8], *(_DWORD *)&buf[16], *(_DWORD *)&buf[12]);
      *(_DWORD *)v71 = 136316162;
      v72 = "IPCAUClient.cpp";
      v73 = 1024;
      v74 = 384;
      v75 = 2048;
      v76 = v41;
      v77 = 1024;
      v78 = v34;
      v79 = 2080;
      v80 = &buf[20];
      _os_log_impl(&dword_18EE07000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p new host port 0x%x %s", v71, 0x2Cu);
    }
LABEL_150:
    CADeprecated::XRemoteMachServer::SetServerPort((CADeprecated::XRemoteMachServer *)v41);
    global_queue = dispatch_get_global_queue(0, 0);
    v49 = global_queue;
    if (global_queue)
      dispatch_retain(global_queue);
    *(_QWORD *)buf = v49;
    CADeprecated::XMachPortDeathListener::SetDeathNotificationDispatchQueue();
    if (*(_QWORD *)buf)
      dispatch_release(*(dispatch_object_t *)buf);
    if (*v45)
      CFRetain(*v45);
    v51 = *(uint64_t **)(v66 + 344);
    v50 = *(_QWORD *)(v66 + 352);
    if ((unint64_t)v51 >= v50)
    {
      v53 = *(_QWORD *)(v66 + 336);
      v54 = ((uint64_t)v51 - v53) >> 3;
      if ((unint64_t)(v54 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v55 = v50 - v53;
      v56 = v55 >> 2;
      if (v55 >> 2 <= (unint64_t)(v54 + 1))
        v56 = v54 + 1;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
        v57 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v57 = v56;
      if (v57)
      {
        if (v57 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v58 = (char *)operator new(8 * v57);
      }
      else
      {
        v58 = 0;
      }
      v59 = (uint64_t *)&v58[8 * v54];
      v60 = &v58[8 * v57];
      *v59 = v41;
      v52 = v59 + 1;
      v62 = *(char **)(v66 + 336);
      v61 = *(char **)(v66 + 344);
      if (v61 != v62)
      {
        do
        {
          v63 = *((_QWORD *)v61 - 1);
          v61 -= 8;
          *--v59 = v63;
        }
        while (v61 != v62);
        v61 = *(char **)(v66 + 336);
      }
      *(_QWORD *)(v66 + 336) = v59;
      *(_QWORD *)(v66 + 344) = v52;
      *(_QWORD *)(v66 + 352) = v60;
      if (v61)
        operator delete(v61);
    }
    else
    {
      *v51 = v41;
      v52 = v51 + 1;
    }
    *(_QWORD *)(v66 + 344) = v52;
  }
  v64 = operator new();
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)v64);
  *(_QWORD *)v64 = &off_1E2909D60;
  *(_QWORD *)(v64 + 16) = v41;
  *(_DWORD *)(v64 + 24) = 0;
  *(_OWORD *)(v64 + 28) = *(_OWORD *)v2;
  *(_DWORD *)(v64 + 44) = *((_DWORD *)v2 + 4);
  *(_QWORD *)(v64 + 48) = AudioComponentFindNext(0, (const AudioComponentDescription *)v2);
  *(_OWORD *)(v64 + 56) = v67;
  *(_QWORD *)(v64 + 72) = 0;
  *(_DWORD *)(v64 + 80) = 0;
  *(_BYTE *)(v64 + 84) = 0;
  *(_DWORD *)(v64 + 160) = 0;
  *(_OWORD *)(v64 + 104) = 0u;
  *(_OWORD *)(v64 + 120) = 0u;
  *(_OWORD *)(v64 + 136) = 0u;
  *(_WORD *)(v64 + 152) = 0;
  SharableMemoryBlock::SharableMemoryBlock((SharableMemoryBlock *)(v64 + 280));
  *(_DWORD *)(v64 + 336) = 0;
  *(_QWORD *)(v64 + 352) = 0;
  *(_QWORD *)(v64 + 360) = 0;
  *(_QWORD *)(v64 + 344) = 0;
  *(_BYTE *)(v64 + 372) = 0;
  *(_QWORD *)(v64 + 280) = &off_1E2907180;
  *(_DWORD *)(v64 + 376) = 2048;
  MEMORY[0x193FFD830](v64 + 384, "mMessageBufferLock");
  *(_QWORD *)(v64 + 520) = 0;
  *(_OWORD *)(v64 + 488) = 0u;
  *(_OWORD *)(v64 + 504) = 0u;
  *(_OWORD *)(v64 + 472) = 0u;
  v2 = (IPCAUClient *)operator new();
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = v64;
  *(_QWORD *)v2 = IPCAUClient::AUInstance::OpenMethod;
  *((_QWORD *)v2 + 1) = IPCAUClient::AUInstance::CloseMethod;
  *((_QWORD *)v2 + 2) = v37;
LABEL_66:
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66);
  return v2;
}

void sub_18EEF93C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, dispatch_object_t object)
{
  CADeprecated::XRemoteMachServer *v20;
  void *v22;
  void *v23;

  if (object)
    dispatch_release(object);
  v22 = (void *)*((_QWORD *)v20 + 25);
  if (v22)
  {
    *((_QWORD *)v20 + 26) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)v20 + 22);
  if (v23)
  {
    *((_QWORD *)v20 + 23) = v23;
    operator delete(v23);
  }
  CADeprecated::XRemoteMachServer::~XRemoteMachServer(v20);
  MEMORY[0x193FFE460](v20, 0x10F1C40DC43F475);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 24))(a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<APComponent_InterApp *,std::shared_ptr<APComponent_InterApp>::__shared_ptr_default_delete<APComponent_InterApp,APComponent_InterApp>,std::allocator<APComponent_InterApp>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<APComponent_InterApp *,std::shared_ptr<APComponent_InterApp>::__shared_ptr_default_delete<APComponent_InterApp,APComponent_InterApp>,std::allocator<APComponent_InterApp>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

CFAbsoluteTime AudioComponentGetLastActiveTime(AudioComponent comp)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFAbsoluteTime Current;
  const __CFDictionary *v6;
  CFPropertyListRef v7;
  const __CFNumber *Value;
  double valuePtr;

  v1 = 0.0;
  if (!comp)
    return v1;
  v2 = (**(uint64_t (***)(AudioComponent))comp)(comp);
  if (!v2)
    return v1;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  if (!v3)
    return v1;
  v4 = v3;
  valuePtr = 0.0;
  if (!*(_QWORD *)(v3 + 160))
    return v1;
  Current = CFAbsoluteTimeGetCurrent();
  v6 = (const __CFDictionary *)APComponent_InterApp::GetLastActiveTime(void)::activeTimes;
  if (Current <= 2.5 && APComponent_InterApp::GetLastActiveTime(void)::activeTimes)
    goto LABEL_11;
  if (APComponent_InterApp::GetLastActiveTime(void)::activeTimes)
  {
    CFRelease((CFTypeRef)APComponent_InterApp::GetLastActiveTime(void)::activeTimes);
    APComponent_InterApp::GetLastActiveTime(void)::activeTimes = 0;
  }
  v7 = CFPreferencesCopyAppValue(CFSTR("InterAppProcessActiveTimes"), CFSTR("com.apple.coreaudio"));
  APComponent_InterApp::GetLastActiveTime(void)::activeTimes = (uint64_t)v7;
  if (v7)
  {
    CFRetain(v7);
    v6 = (const __CFDictionary *)APComponent_InterApp::GetLastActiveTime(void)::activeTimes;
LABEL_11:
    Value = (const __CFNumber *)CFDictionaryGetValue(v6, *(const void **)(v4 + 160));
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
      return valuePtr;
    }
  }
  return v1;
}

uint64_t AudioComponentInstanceSetNoCanDo(uint64_t result, int a2)
{
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (result)
    {
      result = APComponentInstance::selectorToMethodPtr(*(APComponentInstance **)(result + 8), *(std::__shared_weak_count **)(result + 16), a2);
      if (result)
        *(_QWORD *)result = 0;
    }
  }
  return result;
}

void sub_18EEF9764(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EEF9988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EEF9BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EEF9CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_18EEF9DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18EEF9F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AURemoteHost;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18EEFA094(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  id *v3;
  uint64_t v4;
  id *v5;

  v5 = v3;
  objc_destroyWeak(v5);

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 56));
  _Unwind_Resume(a1);
}

void sub_18EEFA6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);

  _Unwind_Resume(a1);
}

void sub_18EEFA9C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EEFAAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EEFB014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;
  void *v18;

  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }

  PropertyNotificationDeferrer::~PropertyNotificationDeferrer(&a14);
  _Unwind_Resume(a1);
}

void sub_18EEFB124()
{
  JUMPOUT(0x18EEFB0F4);
}

void sub_18EEFB184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EEFB290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EEFB9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, audioipc::eventlink_primitive *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21,uint64_t a22,uint64_t a23,caulk::mach::details *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  _BYTE *v37;
  caulk::ipc::mapped_memory *v38;
  int v39;
  caulk::thread *v40;

  if (a2)
  {
    if (v39 < 0)
      operator delete(__p);
    if (v37[200])
    {
      a32 = v37 + 168;
      std::vector<audioipc::SharedAudioBuffers::Element>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
    }
    audioipc::eventlink_primitive::~eventlink_primitive(a10);
    caulk::ipc::mapped_memory::reset(v38);
    if (v37[56])
      caulk::thread::~thread(v40);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a11);
    BaseOpaqueObject::~BaseOpaqueObject((BaseOpaqueObject *)v37);
    std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
    MEMORY[0x193FFE460](v37, 0x10E3C4077E7D444);

    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -10875, 0);

    JUMPOUT(0x18EEFB91CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18EEFBC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18EEFBD64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EEFBDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EEFBE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18EEFBF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  PropertyNotificationDeferrer::~PropertyNotificationDeferrer(&a9);
  _Unwind_Resume(a1);
}

void sub_18EEFC0D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_18EEFC24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a3);
  v8 = v7;

  PropertyNotificationDeferrer::~PropertyNotificationDeferrer((id *)va);
  _Unwind_Resume(a1);
}

void sub_18EEFC368(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18EEFC458(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18EEFC584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a3);
  v8 = v7;

  PropertyNotificationDeferrer::~PropertyNotificationDeferrer((id *)va);
  _Unwind_Resume(a1);
}

void sub_18EEFC774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EEFC8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  PropertyNotificationDeferrer::~PropertyNotificationDeferrer((id *)va);
  _Unwind_Resume(a1);
}

void sub_18EEFC99C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EEFCADC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EEFCC40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EEFCCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EEFCEF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EEFCFEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18EEFD0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_18EEFD1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18EEFD264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EEFD45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18EEFD514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18EEFD674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EEFD750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EEFD824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EEFD990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18EEFDA74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18EEFDB4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_18EEFDCE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EEFDE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18EEFDEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_18EEFDF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_18EEFE038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_18EEFE240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18EEFE304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18EEFE47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<XOSTransactor>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    XOSTransactor::endTransaction((XOSTransactor *)v2);

    JUMPOUT(0x193FFE460);
  }
  return result;
}

void AUOOPRenderingServerUser::~AUOOPRenderingServerUser(AUOOPRenderingServerUser *this)
{
  this->_vptr$CAPrint = (void **)&off_1E2908C28;
  BaseOpaqueObject::destroyOpaqueRef((BaseOpaqueObject *)this);

  BaseOpaqueObject::~BaseOpaqueObject((BaseOpaqueObject *)this);
}

{
  AUOOPRenderingServerUser::~AUOOPRenderingServerUser(this);
  JUMPOUT(0x193FFE460);
}

BOOL TOpaqueObject<AUOOPRenderingServerUser,unsigned int,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<AUOOPRenderingServerUser>::sRTTI || a2 == (void *)MEMORY[0x1E0DDEC88];
}

void std::vector<KVOAggregator::Record>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 32)
  {

    objc_destroyWeak((id *)(i - 24));
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v4;
  id v5;

  v5 = a2;
  v3 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v3);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v4);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EEFE828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_iEUlS4_bE_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_iEUlS4_bE_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSString * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD aBlock[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = _Block_copy(v3);
  }
  else
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_i_block_invoke;
    aBlock[3] = &__block_descriptor_48_ea8_32c143_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E__e30_v24__0__NSError_8__NSString_16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = _Block_copy(v4);
    v11 = v8;
    v12 = _Block_copy(v9);
    v5 = _Block_copy(aBlock);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_18EEFE99C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  id v8;

  v5 = a3;
  v8 = a2;
  v6 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EEFEA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c143_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c143_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void sub_18EEFEB5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EEFED38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  id *v16;
  id *v17;
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(v18);
  objc_destroyWeak(v16);
  objc_destroyWeak((id *)(v19 - 72));

  _Unwind_Resume(a1);
}

void sub_18EEFEE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18EEFF130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v11;

  caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_32c40_ZTSN5caulk8weak_refI15NSXPCConnectionEE(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_ea8_32c40_ZTSN5caulk8weak_refI15NSXPCConnectionEE(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

_QWORD *caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::sync_message(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = &off_1E2916578;
  v8[1] = a1;
  v9 = v8;
  v3 = a2;
  *a1 = v3;
  v4 = (uint64_t)v9;
  if (!v9)
    goto LABEL_4;
  if (v9 != v8)
  {
    v4 = (*(uint64_t (**)(void))(*v9 + 16))();
LABEL_4:
    a1[4] = v4;
    goto LABEL_6;
  }
  a1[4] = a1 + 1;
  (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
LABEL_6:

  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_10;
  }
  if (v9)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  a1[5] = 0;
  a1[6] = 0;
  return a1;
}

void sub_18EEFF280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  id *v13;
  void *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == &a10)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::sync_proxy(void **a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[4];
  _BYTE v11[24];
  _BYTE *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 1));
  v2 = *a1;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33AUAudioUnitMessageChannelProtocol11objc_objectJU8__strongP12NSDictionaryEE10sync_proxyEv_block_invoke;
  v10[3] = &__block_descriptor_64_ea8_32c75_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP12NSDictionaryEEEEEE_e17_v16__0__NSError_8l;
  v3 = v11;
  v4 = (uint64_t)v14;
  if (!v14)
    goto LABEL_4;
  if (v14 != v13)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v13[0] + 24))(v13, v11);
LABEL_6:
  objc_msgSend(v2, "synchronousRemoteObjectProxyWithErrorHandler:", v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 == v11)
  {
    v6 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
    v3 = v12;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_11:
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
    goto LABEL_15;
  }
  if (v14)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v5;
}

void sub_18EEFF41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v19 = *(_QWORD **)(v17 - 32);
  if (v19 == (_QWORD *)(v17 - 56))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id caulk::xpc::message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::reply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD aBlock[4];
  _BYTE v9[24];
  _BYTE *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, a1 + 8);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33AUAudioUnitMessageChannelProtocol11objc_objectJU8__strongP12NSDictionaryEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c75_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP12NSDictionaryEEEEEE_e34_v24__0__NSError_8__NSDictionary_16l;
  v1 = v9;
  v2 = (uint64_t)v12;
  if (!v12)
    goto LABEL_4;
  if (v12 != v11)
  {
    v2 = (*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
LABEL_4:
    v10 = (_BYTE *)v2;
    goto LABEL_6;
  }
  v10 = v9;
  (*(void (**)(_QWORD *, _BYTE *))(v11[0] + 24))(v11, v9);
LABEL_6:
  v3 = _Block_copy(aBlock);
  if (v10 == v9)
  {
    v4 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_11;
    v4 = 5;
    v1 = v10;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_11:
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
    goto LABEL_15;
  }
  if (v12)
  {
    v6 = 5;
LABEL_15:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v3;
}

void sub_18EEFF5D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 32);
  if (v3 == (_QWORD *)(v1 - 56))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 56);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::~sync_message(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33AUAudioUnitMessageChannelProtocol11objc_objectJU8__strongP12NSDictionaryEE5replyEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  std::function<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v5);

}

void sub_18EEFF6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c75_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP12NSDictionaryEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c75_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJU8__strongP12NSDictionaryEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EEFF778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33AUAudioUnitMessageChannelProtocol11objc_objectJU8__strongP12NSDictionaryEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<NSDictionary * {__strong}> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);

}

void sub_18EEFF7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary *> &&)#1},std::allocator<std::tuple<NSDictionary *> &>,void ()(NSError,std::tuple<NSDictionary *>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary *> &&)#1},std::allocator<std::tuple<NSDictionary *> &>,void ()(NSError,std::tuple<NSDictionary *>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2916578;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary *> &&)#1},std::allocator<std::tuple<NSDictionary *> &>,void ()(NSError,std::tuple<NSDictionary *>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2916578;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto33AUAudioUnitMessageChannelProtocol}* {__strong},NSDictionary * {__strong}>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<NSDictionary *> &&)#1},std::allocator<std::tuple<NSDictionary *> &>,void ()(NSError,std::tuple<NSDictionary *>)>::operator()(uint64_t a1, id *a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  objc_storeStrong((id *)(v6 + 48), *a3);
}

id caulk::strong<AURemoteMessageChannel>(id *a1)
{
  return objc_loadWeakRetained(a1);
}

void __copy_helper_block_ea8_32c47_ZTSN5caulk8weak_refI22AURemoteMessageChannelEE(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_ea8_32c47_ZTSN5caulk8weak_refI22AURemoteMessageChannelEE(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSArray * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD aBlock[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = _Block_copy(v3);
  }
  else
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_i_block_invoke;
    aBlock[3] = &__block_descriptor_48_ea8_32c142_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E__e29_v24__0__NSError_8__NSArray_16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = _Block_copy(v4);
    v11 = v8;
    v12 = _Block_copy(v9);
    v5 = _Block_copy(aBlock);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_18EEFF9BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  id v8;

  v5 = a3;
  v8 = a2;
  v6 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EEFFA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c142_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c142_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD aBlock[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = _Block_copy(v3);
  }
  else
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_i_block_invoke;
    aBlock[3] = &__block_descriptor_48_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_iEUlS4_E__e17_v16__0__NSError_8l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = _Block_copy(v4);
    v11 = v8;
    v12 = _Block_copy(v9);
    v5 = _Block_copy(aBlock);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_18EEFFBB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v4;
  id v5;

  v5 = a2;
  v3 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v3);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v4);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EEFFC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_iEUlS4_E_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_iEUlS4_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void sub_18EEFFE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t *v25;
  uint64_t v26;

  v23 = v20;

  v25 = a19;
  if (a19 == &a16)
  {
    v26 = 4;
    v25 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:

  _Unwind_Resume(a1);
}

_QWORD *caulk::xpc::message<objc_object  {objcproto23AUAudioUnitHostProtocol}* {__strong}>::message(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  *a1 = v5;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a3);

  return a1;
}

void sub_18EEFFF08(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto23AUAudioUnitHostProtocol}* {__strong}>::async_proxy(void **a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[4];
  _BYTE v11[24];
  _BYTE *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 1));
  v2 = *a1;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = ___ZN5caulk3xpc7messageIU8__strongPU34objcproto23AUAudioUnitHostProtocol11objc_objectJEE11async_proxyEv_block_invoke;
  v10[3] = &__block_descriptor_64_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE_e17_v16__0__NSError_8l;
  v3 = v11;
  v4 = (uint64_t)v14;
  if (!v14)
    goto LABEL_4;
  if (v14 != v13)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v13[0] + 24))(v13, v11);
LABEL_6:
  objc_msgSend(v2, "remoteObjectProxyWithErrorHandler:", v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 == v11)
  {
    v6 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
    v3 = v12;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_11:
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
    goto LABEL_15;
  }
  if (v14)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v5;
}

void sub_18EF0006C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v19 = *(_QWORD **)(v17 - 32);
  if (v19 == (_QWORD *)(v17 - 56))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN5caulk3xpc7messageIU8__strongPU34objcproto23AUAudioUnitHostProtocol11objc_objectJEE11async_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  char v2;

  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

uint64_t __copy_helper_block_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF001A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorONS_5tupleIJEEEENS_9allocatorIS9_EES7_ED1Ev(uint64_t a1)
{

  return a1;
}

void _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorONS_5tupleIJEEEENS_9allocatorIS9_EES7_ED0Ev(uint64_t a1)
{

  JUMPOUT(0x193FFE460);
}

uint64_t _ZNKSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorONS_5tupleIJEEEENS_9allocatorIS9_EES7_E7__cloneEv()
{
  return 0;
}

void *_ZNKSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorONS_5tupleIJEEEENS_9allocatorIS9_EES7_E7__cloneEPNS0_6__baseIS7_EE(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_1E2913638;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorONS_5tupleIJEEEENS_9allocatorIS9_EES7_E7destroyEv(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t _ZNSt3__110__function6__funcIU8__strongU13block_pointerFvP7NSErrorONS_5tupleIJEEEENS_9allocatorIS9_EES7_EclEOU8__strongS3_S6_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryIP8NSStringP11objc_objectEEEEU13block_pointerFvDpT_ESH_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  id v8;

  v5 = a3;
  v8 = a2;
  v6 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EF002F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c174_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryIP8NSStringP11objc_objectEEEEU13block_pointerFvDpT_ESH_iEUlS4_SC_E_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c174_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryIP8NSStringP11objc_objectEEEEU13block_pointerFvDpT_ESH_iEUlS4_SC_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayIP17AUAudioUnitPresetEEEEU13block_pointerFvDpT_ESF_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  id v8;

  v5 = a3;
  v8 = a2;
  v6 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EF003E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c164_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayIP17AUAudioUnitPresetEEEEU13block_pointerFvDpT_ESF_iEUlS4_SA_E_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c164_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayIP17AUAudioUnitPresetEEEEU13block_pointerFvDpT_ESF_iEUlS4_SA_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP18MIDICIProfileStateEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  id v8;

  v5 = a3;
  v8 = a2;
  v6 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EF004E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c154_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP18MIDICIProfileStateEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c154_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP18MIDICIProfileStateEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP10NSIndexSetEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  id v8;

  v5 = a3;
  v8 = a2;
  v6 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EF005D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c146_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP10NSIndexSetEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c146_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP10NSIndexSetEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void sub_18EF008BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t *a25)
{
  void *v25;
  void *v26;
  void *v27;
  uint64_t *v29;
  uint64_t v30;

  v29 = a25;
  if (a25 == &a22)
  {
    v30 = 4;
    v29 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},float>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD aBlock[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = _Block_copy(v3);
  }
  else
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorfEEEU13block_pointerFvDpT_ES9_i_block_invoke;
    aBlock[3] = &__block_descriptor_48_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorfEEEU13block_pointerFvDpT_ES9_iEUlS4_fE__e20_v20__0__NSError_8f16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = _Block_copy(v4);
    v11 = v8;
    v12 = _Block_copy(v9);
    v5 = _Block_copy(aBlock);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_18EF00A70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorfEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2, float a3)
{
  void *v5;
  NSObject *v6;
  id v7;

  v7 = a2;
  v5 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v5);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v6);

  (*(void (**)(float))(*(_QWORD *)(a1 + 40) + 16))(a3);
}

void sub_18EF00AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorfEEEU13block_pointerFvDpT_ES9_iEUlS4_fE_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorfEEEU13block_pointerFvDpT_ES9_iEUlS4_fE_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void sub_18EF00C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::unique_ptr<-[AURemoteHost getParameter:sequenceNumber:reply:]::$_4>::~unique_ptr[abi:ne180100]((id **)va);
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayIP8NSNumberEEEEU13block_pointerFvDpT_ESF_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  id v8;

  v5 = a3;
  v8 = a2;
  v6 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EF00D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c154_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayIP8NSNumberEEEEU13block_pointerFvDpT_ESF_iEUlS4_SA_E_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c154_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayIP8NSNumberEEEEU13block_pointerFvDpT_ESF_iEUlS4_SA_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP15AUParameterTreeEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  id v8;

  v5 = a3;
  v8 = a2;
  v6 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EF00E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c151_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP15AUParameterTreeEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c151_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP15AUParameterTreeEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void PropertyNotificationDeferrer::PropertyNotificationDeferrer(PropertyNotificationDeferrer *this, AURemoteHost *a2)
{
  AURemoteHost *v3;
  NSObject *v4;
  _QWORD block[5];

  v3 = a2;
  *(_QWORD *)this = v3;
  *((_BYTE *)this + 8) = 0;
  -[AURemoteHost propertyObserverQueue](v3, "propertyObserverQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN28PropertyNotificationDeferrerC2EP12AURemoteHost_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v4, block);

}

void sub_18EF00F24(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id PropertyNotificationDeferrer::changedProperties(id *this)
{
  NSObject *v2;
  id v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;

  v6 = 0;
  v7 = &v6;
  v8 = 0x3032000000;
  v9 = __Block_byref_object_copy__1578;
  v10 = __Block_byref_object_dispose__1579;
  v11 = 0;
  objc_msgSend(*this, "propertyObserverQueue");
  v2 = objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN28PropertyNotificationDeferrer17changedPropertiesEv_block_invoke;
  v5[3] = &unk_1E2919C88;
  v5[4] = &v6;
  v5[5] = this;
  dispatch_sync(v2, v5);

  *((_BYTE *)this + 8) = 1;
  v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  return v3;
}

void sub_18EF01010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void PropertyNotificationDeferrer::~PropertyNotificationDeferrer(id *this)
{
  NSObject *v2;
  _QWORD block[5];

  objc_msgSend(*this, "propertyObserverQueue");
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN28PropertyNotificationDeferrerD2Ev_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v2, block);

}

uint64_t ___ZN28PropertyNotificationDeferrerD2Ev_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (!*(_BYTE *)(v1 + 8))
    return objc_msgSend(*(id *)v1, "setDeferPropertyChangeNotifications:", objc_msgSend(*(id *)v1, "deferPropertyChangeNotifications") - 1);
  return result;
}

uint64_t __Block_byref_object_copy__1578(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1579(uint64_t a1)
{

}

void ___ZN28PropertyNotificationDeferrer17changedPropertiesEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v1 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v1 + 8))
    __assert_rtn("changedProperties_block_invoke", "AURemoteExtensionContext.mm", 101, "!mPropertiesFetched");
  v3 = *(id *)v1;
  v4 = objc_msgSend(*(id *)v1, "deferPropertyChangeNotifications") - 1;
  objc_msgSend(v3, "setDeferPropertyChangeNotifications:", v4);
  if (!(_DWORD)v4)
  {
    objc_msgSend(*(id *)v1, "pendingChangedProperties");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "count");

    if (v6)
    {
      objc_msgSend(*(id *)v1, "_fetchAndClearPendingChangedProperties");
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v7;

    }
  }
}

void sub_18EF011C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN28PropertyNotificationDeferrerC2EP12AURemoteHost_block_invoke(uint64_t a1)
{
  return objc_msgSend(**(id **)(a1 + 32), "setDeferPropertyChangeNotifications:", objc_msgSend(**(id **)(a1 + 32), "deferPropertyChangeNotifications") + 1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSArrayEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v4;
  id v5;

  v5 = a2;
  v3 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v3);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v4);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EF01260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSArrayEEEU13block_pointerFvDpT_ES9_iEUlS4_E_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSArrayEEEU13block_pointerFvDpT_ES9_iEUlS4_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void KVOAggregator::removeObserver(KVOAggregator *this, NSObject *a2, NSObject *a3, NSString *a4)
{
  NSObject *v7;
  NSString *v8;
  Record *v9;
  uint64_t v10;
  Record *end;
  int v12;
  uint64_t v13;
  Record *i;
  id WeakRetained;
  Record *v16;
  uint64_t v17;
  Record *j;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;

  v23 = a2;
  v7 = a3;
  v8 = a4;
  v9 = KVOAggregator::find(this, v7, v8, 0);
  v10 = (uint64_t)v9;
  end = this->mRecords.__end_;
  if (end == v9)
  {
    end = v9;
  }
  else
  {
    v12 = *((_DWORD *)v9 + 6) - 1;
    *((_DWORD *)v9 + 6) = v12;
    if (!v12)
    {
      -[NSObject removeObserver:forKeyPath:context:](v7, "removeObserver:forKeyPath:context:", v23, v8, this);
      v13 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<KVOAggregator::Record *,KVOAggregator::Record *,KVOAggregator::Record *>(v10 + 32, (uint64_t)this->mRecords.__end_, v10);
      std::vector<KVOAggregator::Record>::__base_destruct_at_end[abi:ne180100]((uint64_t)this, v13);
      end = this->mRecords.__end_;
    }
  }
  for (i = this->mRecords.__begin_; ; i = (Record *)((char *)i + 32))
  {
    if (i == end)
    {
      i = end;
      goto LABEL_10;
    }
    WeakRetained = objc_loadWeakRetained((id *)i + 1);

    if (!WeakRetained)
      break;
  }
  if (i != end)
  {
    for (j = (Record *)((char *)i + 32); j != end; j = (Record *)((char *)j + 32))
    {
      v19 = objc_loadWeakRetained((id *)j + 1);

      if (v19)
      {
        *(_QWORD *)i = *(_QWORD *)j;
        v20 = objc_loadWeakRetained((id *)j + 1);
        objc_storeWeak((id *)i + 1, v20);

        v21 = *((_QWORD *)j + 2);
        *((_QWORD *)j + 2) = 0;
        v22 = (void *)*((_QWORD *)i + 2);
        *((_QWORD *)i + 2) = v21;

        *((_DWORD *)i + 6) = *((_DWORD *)j + 6);
        i = (Record *)((char *)i + 32);
      }
    }
  }
LABEL_10:
  v16 = this->mRecords.__end_;
  if (v16 != i)
  {
    v17 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<KVOAggregator::Record *,KVOAggregator::Record *,KVOAggregator::Record *>((uint64_t)v16, (uint64_t)this->mRecords.__end_, (uint64_t)i);
    std::vector<KVOAggregator::Record>::__base_destruct_at_end[abi:ne180100]((uint64_t)this, v17);
  }

}

void sub_18EF01480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

Record *KVOAggregator::find(KVOAggregator *this, NSObject *a2, NSString *a3, int a4)
{
  NSObject *v7;
  NSString *v8;
  Record *begin;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  Record *v14;
  Record *v15;
  Record *end;
  uint64_t v17;
  uint64_t v18;
  Record *value;
  Record *v20;
  id *v21;
  Record *v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id *v28;
  uint64_t v29;
  uint64_t v30;
  NSString *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  id WeakRetained;
  uint64_t v40;
  void *v41;
  id *v42;
  id v43;
  id *v44;
  unint64_t v45;
  char *v46;
  id *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  __int128 v52;
  __int128 v53;
  Record *v54;
  uint64_t v55;
  Record *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  Record *v60;
  Record *v61;
  uint64_t v62;
  Record *v63;
  Record *v64;
  NSString *v66;
  uint64_t v67;
  Record *v68;
  NSObject *v69;
  id v70;
  NSString *v71;
  int v72;
  __int128 v73;
  __int128 v74;
  __compressed_pair<KVOAggregator::Record *, std::allocator<KVOAggregator::Record>> *p_end_cap;
  __int128 v76;
  __int128 v77;
  __compressed_pair<KVOAggregator::Record *, std::allocator<KVOAggregator::Record>> *v78;

  v7 = a2;
  v8 = a3;
  v69 = v7;
  objc_initWeak(&v70, v7);
  v71 = v8;
  v72 = 0;
  begin = this->mRecords.__begin_;
  v10 = this->mRecords.__end_ - this->mRecords.__begin_;
  if (!v10)
    goto LABEL_11;
  v11 = v10 >> 5;
  do
  {
    v12 = v11 >> 1;
    v13 = (_QWORD *)((char *)begin + 32 * (v11 >> 1));
    if (*v13 < (unint64_t)v69
      || *v13 <= (unint64_t)v69 && objc_msgSend(*((id *)begin + 4 * v12 + 2), "compare:", v71) < 0)
    {
      begin = (Record *)(v13 + 4);
      v12 = v11 + ~v12;
    }
    v11 = v12;
  }
  while (v12);
  if (this->mRecords.__end_ == begin
    || *(NSObject **)begin != v69
    || (v14 = begin, objc_msgSend(*((id *)begin + 2), "compare:", v71)))
  {
LABEL_11:
    if (a4)
    {
      v15 = this->mRecords.__begin_;
      end = this->mRecords.__end_;
      v17 = begin - this->mRecords.__begin_;
      v18 = v17 >> 5;
      v14 = (Record *)((char *)this->mRecords.__begin_ + (v17 & 0xFFFFFFFFFFFFFFE0));
      value = this->mRecords.__end_cap_.__value_;
      if (end >= value)
      {
        v24 = ((end - v15) >> 5) + 1;
        if (v24 >> 59)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v25 = value - v15;
        if (v25 >> 4 > v24)
          v24 = v25 >> 4;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
          v26 = 0x7FFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        p_end_cap = &this->mRecords.__end_cap_;
        if (v26)
          v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v26);
        else
          v27 = 0;
        v29 = v17 >> 5;
        v30 = v26 + 32 * v18;
        *(_QWORD *)&v73 = v26;
        *((_QWORD *)&v73 + 1) = v30;
        *(_QWORD *)&v74 = v30;
        *((_QWORD *)&v74 + 1) = v26 + 32 * v27;
        if (v17 >> 5 == v27)
        {
          if (v17 < 1)
          {
            if (begin == v15)
              v45 = 1;
            else
              v45 = v17 >> 4;
            v78 = &this->mRecords.__end_cap_;
            v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v45);
            v47 = (id *)&v46[32 * (v45 >> 2)];
            *(_QWORD *)&v76 = v46;
            *((_QWORD *)&v76 + 1) = v47;
            *(_QWORD *)&v77 = v47;
            *((_QWORD *)&v77 + 1) = &v46[32 * v48];
            v49 = *((_QWORD *)&v73 + 1);
            if ((_QWORD)v74 != *((_QWORD *)&v73 + 1))
            {
              v50 = (char *)v47 + v74 - *((_QWORD *)&v73 + 1);
              do
              {
                *v47 = *(id *)v49;
                objc_moveWeak(v47 + 1, (id *)(v49 + 8));
                v51 = *(void **)(v49 + 16);
                *(_QWORD *)(v49 + 16) = 0;
                v47[2] = v51;
                *((_DWORD *)v47 + 6) = *(_DWORD *)(v49 + 24);
                v47 += 4;
                v49 += 32;
              }
              while (v47 != (id *)v50);
              v47 = (id *)v50;
            }
            v31 = v8;
            *(_QWORD *)&v77 = v47;
            v52 = v73;
            v53 = v74;
            v73 = v76;
            v74 = v77;
            v76 = v52;
            v77 = v53;
            std::__split_buffer<KVOAggregator::Record>::~__split_buffer((uint64_t)&v76);
            v30 = v74;
          }
          else
          {
            v31 = v8;
            v32 = v29 + 2;
            if (v29 >= -1)
              v32 = v29 + 1;
            v33 = v32 >> 1;
            v30 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<KVOAggregator::Record *,KVOAggregator::Record *,KVOAggregator::Record *>(v30, v30, v30 - 32 * (v32 >> 1));
            *((_QWORD *)&v73 + 1) -= 32 * v33;
            *(_QWORD *)&v74 = v30;
          }
        }
        else
        {
          v31 = v8;
        }
        *(_QWORD *)v30 = v69;
        objc_copyWeak((id *)(v30 + 8), &v70);
        *(_QWORD *)(v30 + 16) = v71;
        *(_DWORD *)(v30 + 24) = v72;
        v54 = (Record *)*((_QWORD *)&v73 + 1);
        v55 = v74 + 32;
        *(_QWORD *)&v74 = v74 + 32;
        v56 = this->mRecords.__begin_;
        if (v14 == this->mRecords.__begin_)
        {
          v60 = (Record *)*((_QWORD *)&v73 + 1);
        }
        else
        {
          v57 = 0;
          do
          {
            v58 = (char *)v54 + v57;
            *(_QWORD *)((char *)v54 + v57 - 32) = *(_QWORD *)((char *)v14 + v57 - 32);
            objc_moveWeak((id *)((char *)v54 + v57 - 24), (id *)((char *)v14 + v57 - 24));
            v59 = *(_QWORD *)((char *)v14 + v57 - 16);
            *(_QWORD *)((char *)v14 + v57 - 16) = 0;
            *((_QWORD *)v58 - 2) = v59;
            *((_DWORD *)v58 - 2) = *(_DWORD *)((char *)v14 + v57 - 8);
            v57 -= 32;
          }
          while ((Record *)((char *)v14 + v57) != v56);
          v60 = (Record *)((char *)v54 + v57);
          v55 = v74;
        }
        *((_QWORD *)&v73 + 1) = v60;
        v61 = this->mRecords.__end_;
        if (v14 != v61)
        {
          do
          {
            *(_QWORD *)v55 = *(_QWORD *)v14;
            objc_moveWeak((id *)(v55 + 8), (id *)v14 + 1);
            v62 = *((_QWORD *)v14 + 2);
            *((_QWORD *)v14 + 2) = 0;
            *(_QWORD *)(v55 + 16) = v62;
            *(_DWORD *)(v55 + 24) = *((_DWORD *)v14 + 6);
            v55 += 32;
            v14 = (Record *)((char *)v14 + 32);
          }
          while (v14 != v61);
          v60 = (Record *)*((_QWORD *)&v73 + 1);
          v14 = this->mRecords.__end_;
        }
        v63 = this->mRecords.__begin_;
        this->mRecords.__begin_ = v60;
        this->mRecords.__end_ = (Record *)v55;
        v64 = this->mRecords.__end_cap_.__value_;
        this->mRecords.__end_cap_.__value_ = (Record *)*((_QWORD *)&v74 + 1);
        *(_QWORD *)&v74 = v14;
        *((_QWORD *)&v74 + 1) = v64;
        *(_QWORD *)&v73 = v63;
        *((_QWORD *)&v73 + 1) = v63;
        std::__split_buffer<KVOAggregator::Record>::~__split_buffer((uint64_t)&v73);
        v14 = v54;
        v8 = v31;
      }
      else if (v14 == end)
      {
        *(_QWORD *)v14 = v69;
        v28 = (id *)((char *)v15 + 32 * v18);
        objc_copyWeak(v28 + 1, &v70);
        v28[2] = v71;
        *((_DWORD *)v28 + 6) = v72;
        this->mRecords.__end_ = (Record *)((char *)v14 + 32);
      }
      else
      {
        v67 = v17 >> 5;
        v68 = this->mRecords.__begin_;
        v20 = (Record *)((char *)v14 + 32);
        v66 = v8;
        if ((unint64_t)end < 0x20)
        {
          v22 = this->mRecords.__end_;
        }
        else
        {
          v21 = (id *)((char *)end - 32);
          v22 = this->mRecords.__end_;
          do
          {
            *(_QWORD *)v22 = *v21;
            objc_moveWeak((id *)v22 + 1, v21 + 1);
            v23 = v21[2];
            v21[2] = 0;
            *((_QWORD *)v22 + 2) = v23;
            *((_DWORD *)v22 + 6) = *((_DWORD *)v21 + 6);
            v22 = (Record *)((char *)v22 + 32);
            v21 += 4;
          }
          while (v21 < (id *)end);
        }
        this->mRecords.__end_ = v22;
        if (end != v20)
        {
          v34 = 0;
          v35 = (end - v20) >> 5;
          v36 = -32 * v35;
          v37 = (char *)v68 + 32 * v67 + 32 * v35;
          do
          {
            v38 = (char *)end + v34;
            *(_QWORD *)((char *)end + v34 - 32) = *(_QWORD *)&v37[v34 - 32];
            WeakRetained = objc_loadWeakRetained((id *)((char *)end + v34 - 56));
            objc_storeWeak((id *)((char *)end + v34 - 24), WeakRetained);

            v40 = *(_QWORD *)&v37[v34 - 16];
            *(_QWORD *)&v37[v34 - 16] = 0;
            v41 = *(void **)((char *)end + v34 - 16);
            *((_QWORD *)v38 - 2) = v40;

            *((_DWORD *)v38 - 2) = *(_DWORD *)&v37[v34 - 8];
            v34 -= 32;
          }
          while (v36 != v34);
        }
        v42 = (id *)&v69;
        if (v14 <= (Record *)&v69)
          v42 = (id *)&(&v69)[4 * (this->mRecords.__end_ > (Record *)&v69)];
        *(_QWORD *)v14 = *v42;
        v43 = objc_loadWeakRetained(v42 + 1);
        v44 = (id *)((char *)v68 + 32 * v67);
        objc_storeWeak(v44 + 1, v43);

        objc_storeStrong(v44 + 2, v42[2]);
        *((_DWORD *)v44 + 6) = *((_DWORD *)v42 + 6);
        v8 = v66;
      }
    }
    else
    {
      v14 = this->mRecords.__end_;
    }
  }

  objc_destroyWeak(&v70);
  return v14;
}

void sub_18EF019F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, char a19)
{
  void *v19;
  void *v20;

  std::__split_buffer<KVOAggregator::Record>::~__split_buffer((uint64_t)&a19);

  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<KVOAggregator::Record *,KVOAggregator::Record *,KVOAggregator::Record *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id WeakRetained;
  uint64_t v7;
  void *v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      WeakRetained = objc_loadWeakRetained((id *)(v5 + 8));
      objc_storeWeak((id *)(a3 + 8), WeakRetained);

      v7 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      v8 = *(void **)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v7;

      *(_DWORD *)(a3 + 24) = *(_DWORD *)(v5 + 24);
      a3 += 32;
      v5 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

uint64_t std::__split_buffer<KVOAggregator::Record>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;

    objc_destroyWeak((id *)(i - 24));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void KVOAggregator::addObserver(KVOAggregator *this, NSObject *a2, NSObject *a3, NSString *a4)
{
  NSObject *v7;
  NSString *v8;
  Record *v9;
  int v10;
  NSObject *v11;

  v11 = a2;
  v7 = a3;
  v8 = a4;
  v9 = KVOAggregator::find(this, v7, v8, 1);
  v10 = *((_DWORD *)v9 + 6);
  *((_DWORD *)v9 + 6) = v10 + 1;
  if (!v10)
    -[NSObject addObserver:forKeyPath:options:context:](v7, "addObserver:forKeyPath:options:context:", v11, v8, 0, this);

}

void sub_18EF01BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},objc_object * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD aBlock[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = _Block_copy(v3);
  }
  else
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP11objc_objectEEEU13block_pointerFvDpT_ESC_i_block_invoke;
    aBlock[3] = &__block_descriptor_48_ea8_32c147_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP11objc_objectEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E__e20_v24__0__NSError_8_16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = _Block_copy(v4);
    v11 = v8;
    v12 = _Block_copy(v9);
    v5 = _Block_copy(aBlock);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_18EF01CF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP11objc_objectEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  id v8;

  v5 = a3;
  v8 = a2;
  v6 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v6);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EF01D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c147_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP11objc_objectEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c147_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP11objc_objectEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

uint64_t maintainWakeMonitor(int a1)
{
  int v2;

  pthread_mutex_lock(&maintainWakeMonitor(BOOL)::lock);
  v2 = maintainWakeMonitor(BOOL)::count;
  if (a1)
  {
    ++maintainWakeMonitor(BOOL)::count;
    if (!v2)
    {
      getpid();
      proc_disable_wakemon();
    }
  }
  else
  {
    --maintainWakeMonitor(BOOL)::count;
    if (v2 == 1)
    {
      getpid();
      proc_set_wakemon_defaults();
    }
  }
  return pthread_mutex_unlock(&maintainWakeMonitor(BOOL)::lock);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v4;
  id v5;

  v5 = a2;
  v3 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v3);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v4);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EF01EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_iEUlS4_jE_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_iEUlS4_jE_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void sub_18EF021B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrormmmU8__strongP6NSDatabjEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v8;
  void *v9;
  NSObject *v10;
  id v11;

  v8 = a6;
  v11 = a2;
  v9 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v9);
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v10);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EF022AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c151_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrormmmU8__strongP6NSDatabjEEEU13block_pointerFvDpT_ESC_iEUlS4_mmmS7_bjE_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c151_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrormmmU8__strongP6NSDatabjEEEU13block_pointerFvDpT_ESC_iEUlS4_mmmS7_bjE_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

id MarshalBusArray(AUAudioUnitBusArray *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  AUAudioUnitBus_XPC *v8;
  uint64_t v9;
  AVAudioFormat *format;
  void *v11;
  uint64_t v12;
  NSArray *supportedChannelLayoutTags;
  AUAudioUnitBusArray *v15;
  AUAudioUnitBusArray *obj;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v15 = a1;
  v17 = (id)objc_opt_new();
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  obj = v15;
  v3 = -[AUAudioUnitBusArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v19 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        v8 = objc_alloc_init(AUAudioUnitBus_XPC);
        v8->_scope = a2;
        v8->_element = v4 + i;
        objc_msgSend(v7, "format");
        v9 = objc_claimAutoreleasedReturnValue();
        format = v8->_format;
        v8->_format = (AVAudioFormat *)v9;

        -[AUAudioUnitBus_XPC setEnabled:](v8, "setEnabled:", objc_msgSend(v7, "isEnabled"));
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          objc_msgSend(v7, "name");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          -[AUAudioUnitBus setName:](v8, "setName:", v11);

        }
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          objc_msgSend(v7, "supportedChannelLayoutTags");
          v12 = objc_claimAutoreleasedReturnValue();
          supportedChannelLayoutTags = v8->_supportedChannelLayoutTags;
          v8->_supportedChannelLayoutTags = (NSArray *)v12;

        }
        objc_msgSend(v17, "addObject:", v8);

      }
      v3 = -[AUAudioUnitBusArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      v4 += i;
    }
    while (v3);
  }

  return v17;
}

void sub_18EF02538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_18EF02628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_18EF026D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbbU8__strongP7NSArrayS8_bbimmEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  id v14;

  v10 = a6;
  v11 = a5;
  v14 = a2;
  v12 = *(void **)(a1 + 32);
  applesauce::dispatch::v1::source::operator*(v12);
  v13 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v13);

  (*(void (**)(_QWORD, id, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v14, a3);
}

void sub_18EF027B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_32c162_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbbU8__strongP7NSArrayS8_bbimmEEEU13block_pointerFvDpT_ESC_iEUlS4_bbS7_S7_bbimmE_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c162_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbbU8__strongP7NSArrayS8_bbimmEEEU13block_pointerFvDpT_ESC_iEUlS4_bbS7_S7_bbimmE_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

id native_instruments_window_workaround(AudioComponentDescription const&)::$_0::operator() const(objc_class *)::{lambda(objc_object *,objc_selector *,NSString *)#1}::__invoke(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  objc_class *Class;
  IMP MethodImplementation;
  uint64_t v11;
  objc_class *v12;
  IMP v13;
  void *v14;

  v5 = a1;
  v6 = a3;
  v7 = v5;
  v8 = v6;
  if (objc_msgSend(v8, "isEqualToString:", CFSTR("canBecomeKeyWindow")))
  {
    Class = object_getClass(v7);
    MethodImplementation = class_getMethodImplementation(Class, (SEL)native_instruments_window_workaround(AudioComponentDescription const&)::$_0::operator() const(objc_class *)::sel_canBecomeKeyWindow);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", ((uint64_t (*)(id, uint64_t))MethodImplementation)(v7, a2));
    v11 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (objc_msgSend(v8, "isEqualToString:", CFSTR("canBecomeMainWindow")))
    {
      v12 = object_getClass(v7);
      v13 = class_getMethodImplementation(v12, (SEL)native_instruments_window_workaround(AudioComponentDescription const&)::$_0::operator() const(objc_class *)::sel_canBecomeMainWindow);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", ((uint64_t (*)(id, uint64_t))v13)(v7, a2));
    }
    else
    {
      native_instruments_window_workaround(AudioComponentDescription const&)::$_0::operator() const(objc_class *)::imp_valueForKey(v7, a2, v8);
    }
    v11 = objc_claimAutoreleasedReturnValue();
  }
  v14 = (void *)v11;

  return v14;
}

void sub_18EF02960(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

caulk::log_category *caulk::log_category::log_category(caulk::log_category *this, const char *subsystem, const char *category)
{
  os_log_t v4;
  void *v5;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v4 = os_log_create(subsystem, category);
  v5 = *(void **)this;
  *(_QWORD *)this = v4;

  return this;
}

void sub_18EF02B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
  void *v17;
  void *v18;
  uint64_t *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_18EF02CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
  void *v17;
  void *v18;
  void *v19;
  uint64_t *v21;
  uint64_t v22;

  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_6:

  _Unwind_Resume(a1);
}

void KVOAggregator::removeAllObservations(KVOAggregator *this, NSObject *a2)
{
  Record *begin;
  Record *end;
  char *v5;
  id WeakRetained;
  Record *v7;
  NSObject *v8;

  v8 = a2;
  begin = this->mRecords.__begin_;
  end = this->mRecords.__end_;
  if (this->mRecords.__begin_ != end)
  {
    v5 = (char *)begin + 8;
    do
    {
      WeakRetained = objc_loadWeakRetained((id *)v5);
      objc_msgSend(WeakRetained, "removeObserver:forKeyPath:context:", v8, *((_QWORD *)v5 + 1), this);

      v7 = (Record *)(v5 + 24);
      v5 += 32;
    }
    while (v7 != end);
    begin = this->mRecords.__begin_;
  }
  std::vector<KVOAggregator::Record>::__base_destruct_at_end[abi:ne180100]((uint64_t)this, (uint64_t)begin);

}

void sub_18EF02E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ServiceProcessGlobals::ServiceProcessGlobals(ServiceProcessGlobals *this)
{
  char *v1;

  v1 = (char *)operator new(0xB0uLL);
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *(_QWORD *)v1 = &off_1E2917B08;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *((_QWORD *)v1 + 4) = &off_1E2913518;
  *((_QWORD *)v1 + 7) = v1 + 32;
  *((_QWORD *)v1 + 11) = 0;
  *((_QWORD *)v1 + 12) = 0;
  *((_QWORD *)v1 + 13) = 0;
  *((_QWORD *)v1 + 14) = 850045863;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *((_QWORD *)v1 + 21) = 0;
  ServiceProcessGlobals::instance(void)::global = (uint64_t)(v1 + 24);
  ServiceProcessGlobals::instance(void)::global = (uint64_t)v1;
}

void std::__shared_ptr_emplace<auoop::WorkgroupMirror>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917B08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<auoop::WorkgroupMirror>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917B08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_emplace<auoop::WorkgroupMirror>::__on_zero_shared(uint64_t a1)
{
  return caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::~guarded_lookup_hash_table(a1 + 32);
}

void sub_18EF03290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_18EF03350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EF033E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EF03834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18EF03A68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

Class ___ZL24getAUViewControllerClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
    CoreAudioKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreAudioKitLibrary()");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AUAudioUnit_Internal.h"), 352, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("AUViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAUViewControllerClass()_block_invoke");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("AUAudioUnit_Internal.h"), 353, CFSTR("Unable to find class %s"), "AUViewController");

LABEL_8:
    __break(1u);
  }
  getAUViewControllerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18EF03C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18EF03DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18EF03FB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18EF04048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ExtAudioFile::~ExtAudioFile(ExtAudioFile *this, uint64_t a2, void *a3)
{
  ExtAudioFile::~ExtAudioFile(this, a2, a3);
  JUMPOUT(0x193FFE460);
}

{
  *(_QWORD *)this = &off_1E2902400;
  ExtAudioFile::Close(this, a2, a3);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 39, 0);
  MEMORY[0x193FFDAD0]((char *)this + 272);
  MEMORY[0x193FFDAD0]((char *)this + 264);
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

uint64_t ExtAudioFile::PrintObject(const void **this, __sFILE *a2)
{
  return fprintf(a2, "<ExtAudioFile@%p -> AudioFile %p>", this, this[2]);
}

BOOL TOpaqueObject<ExtAudioFile,OpaqueExtAudioFile *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<ExtAudioFile>::sRTTI || a2 == (void *)MEMORY[0x1E0DDEC88];
}

uint64_t ExtAudioFile::Close(ExtAudioFile *this, uint64_t a2, void *a3)
{
  int v3;
  uint64_t v5;
  ExtAudioFile **v6;
  ExtAudioFile **v7;
  ExtAudioFile **v8;
  int64_t v9;
  dispatch_time_t v10;
  NSObject *global_queue;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  OpaqueAudioConverter *v18;
  OpaqueAudioFileID *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t mPrimingFrames;
  uint64_t mRemainderFrames;
  OSStatus v28;
  unsigned int v29;
  CAXException *exception;
  uint64_t v31;
  UInt32 isWritable[2];
  AudioFilePacketTableInfo inPropertyData;
  uint64_t **v34;
  uint64_t *v35;
  int v36;
  _BYTE block[40];
  _QWORD v38[3];

  v38[2] = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 8);
  if (!v3)
    return 0;
  if (*((_QWORD *)this + 41))
  {
    v5 = CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::instance();
    std::mutex::lock((std::mutex *)v5);
    v6 = *(ExtAudioFile ***)(v5 + 112);
    v7 = *(ExtAudioFile ***)(v5 + 120);
    v8 = v6;
    if (v6 != v7)
    {
      while (*v8 != this)
      {
        if (++v8 == v7)
        {
          v8 = *(ExtAudioFile ***)(v5 + 120);
          break;
        }
      }
    }
    if (v8 != v7)
    {
      v9 = (char *)v7 - (char *)(v8 + 1);
      if (v7 != v8 + 1)
      {
        memmove(v8, v8 + 1, (char *)v7 - (char *)(v8 + 1));
        v6 = *(ExtAudioFile ***)(v5 + 112);
      }
      v7 = (ExtAudioFile **)((char *)v8 + v9);
      *(_QWORD *)(v5 + 120) = (char *)v8 + v9;
    }
    if (v6 == v7)
    {
      v10 = dispatch_time(0, 2000000000);
      global_queue = dispatch_get_global_queue(0, 0);
      *(_QWORD *)block = MEMORY[0x1E0C809B0];
      *(_QWORD *)&block[8] = 0x40000000;
      *(_QWORD *)&block[16] = ___ZN25ExtAudioFileAsyncWriteMgr12RemoveClientEP12ExtAudioFile_block_invoke;
      *(_QWORD *)&block[24] = &__block_descriptor_tmp_1656;
      *(_QWORD *)&block[32] = v5;
      dispatch_after(v10, global_queue, block);
    }
    std::mutex::unlock((std::mutex *)v5);
    ExtAudioFile::PerformAsyncWrites(this, 1);
    v12 = *((_QWORD *)this + 41);
    if (v12)
    {
      std::unique_ptr<AT::RingBuffer::Impl>::reset[abi:ne180100]((uint64_t *)(v12 + 48));
      MEMORY[0x193FFE460](v12, 0x1020C4047CAF6D5);
    }
    *((_QWORD *)this + 41) = 0;
    v13 = (_QWORD *)*((_QWORD *)this + 43);
    if (v13)
    {
      v14 = v13[1];
      if (v14)
        MEMORY[0x193FFE43C](v14, 0x1000C8077774924);
      operator delete(v13);
    }
    *((_QWORD *)this + 43) = 0;
    v15 = (_QWORD *)*((_QWORD *)this + 44);
    if (v15)
    {
      v16 = v15[1];
      if (v16)
        MEMORY[0x193FFE43C](v16, 0x1000C8077774924);
      operator delete(v15);
    }
    *((_QWORD *)this + 44) = 0;
    v3 = *((_DWORD *)this + 8);
  }
  if (v3 == 4 && *((_QWORD *)this + 19))
  {
    *((_BYTE *)this + 30) = 1;
    v17 = ExtAudioFile::WritePacketsFromCallback(this, (int (*)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *))this, a3);
    *((_BYTE *)this + 30) = 0;
    if (!*((_DWORD *)this + 50))
    {
      *(_QWORD *)isWritable = 0;
      if (!AudioFileGetPropertyInfo(*((AudioFileID *)this + 2), 0x706E666Fu, &isWritable[1], isWritable))
      {
        if (isWritable[0])
        {
          isWritable[1] = 8;
          v25 = *((_QWORD *)this + 19);
          v36 = 1886546285;
          v38[0] = &isWritable[1];
          v35 = &v31;
          inPropertyData.mNumberValidFrames = (SInt64)&v36;
          *(_QWORD *)&inPropertyData.mPrimingFrames = v38;
          v34 = &v35;
          *(_QWORD *)block = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
          *(_QWORD *)&block[8] = &inPropertyData;
          if (!with_resolved(v25, (uint64_t (**)(uint64_t, uint64_t))block)
            && !ExtAudioFile::GetFilePacketTable((AudioFileID *)this, &inPropertyData))
          {
            mPrimingFrames = inPropertyData.mPrimingFrames;
            mRemainderFrames = inPropertyData.mRemainderFrames;
            *(_QWORD *)&inPropertyData.mPrimingFrames = v31;
            inPropertyData.mNumberValidFrames = inPropertyData.mNumberValidFrames
                                              + mPrimingFrames
                                              + mRemainderFrames
                                              - ((int)v31
                                               + (uint64_t)SHIDWORD(v31));
            v28 = AudioFileSetProperty(*((AudioFileID *)this + 2), 0x706E666Fu, 0x10u, &inPropertyData);
            if (v28)
            {
              v29 = v28;
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)v38, v29);
                *(_DWORD *)block = 136315906;
                *(_QWORD *)&block[4] = "ExtAudioFile.cpp";
                *(_WORD *)&block[12] = 1024;
                *(_DWORD *)&block[14] = 1596;
                *(_WORD *)&block[18] = 2080;
                *(_QWORD *)&block[20] = v38;
                *(_WORD *)&block[28] = 2080;
                *(_QWORD *)&block[30] = "couldn't set packet table info on audio file";
                _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", block, 0x26u);
              }
              exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(exception, "couldn't set packet table info on audio file", v29);
            }
          }
        }
      }
    }
    ExtAudioFile::CopyEncoderCookieToFile(this, 1);
  }
  else
  {
    v17 = 0;
  }
  v18 = (OpaqueAudioConverter *)*((_QWORD *)this + 19);
  if (v18)
  {
    AudioConverterDispose(v18);
    *((_QWORD *)this + 19) = 0;
  }
  v19 = (OpaqueAudioFileID *)*((_QWORD *)this + 2);
  if (v19 && *((_BYTE *)this + 28))
  {
    AudioFileClose(v19);
    *((_QWORD *)this + 2) = 0;
  }
  if (!*((_BYTE *)this + 120))
  {
    v20 = *((_QWORD *)this + 14);
    if (v20)
      MEMORY[0x193FFE43C](v20, 0x1000C8077774924);
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 27) = 0;
  }
  v21 = *((_QWORD *)this + 16);
  if (v21)
    MEMORY[0x193FFE43C](v21, 0x1000C80451B5BE8);
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  v22 = *((_QWORD *)this + 18);
  if (v22)
    MEMORY[0x193FFE43C](v22, 0x1000C80451B5BE8);
  *((_QWORD *)this + 18) = 0;
  v23 = *((_QWORD *)this + 36);
  if (v23)
    MEMORY[0x193FFE43C](v23, 0x1000C8077774924);
  *((_QWORD *)this + 36) = 0;
  *((_DWORD *)this + 8) = 0;
  return v17;
}

void sub_18EF046F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set(_QWORD **a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;

  v2 = *a1;
  if (*a1 != a2)
  {
    if (v2)
    {
      v5 = v2[1];
      if (v5)
        MEMORY[0x193FFE43C](v5, 0x1000C8077774924);
      operator delete(v2);
    }
    *a1 = a2;
  }
}

uint64_t CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::instance()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::sOnce);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::sOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::sInstance;
}

uint64_t ExtAudioFile::PerformAsyncWrites(ExtAudioFile *this, int a2)
{
  char v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  AudioBufferList *v9;
  AudioBufferList *v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  std::error_code v15;
  std::error_code v16;

  v4 = 0;
  do
  {
    v13 = 0;
    *(_QWORD *)&v15.__val_ = AT::RingBuffer::GetTimeBounds(*(AT::RingBuffer **)(*((_QWORD *)this + 41) + 48), &v14, &v13);
    CheckRingBufferResult(v15, -66570, "get ring buffer bounds on fetch");
    if (v13 - *((_QWORD *)this + 47) >= *((unsigned int *)this + 84))
      v5 = *((unsigned int *)this + 84);
    else
      v5 = v13 - *((_QWORD *)this + 47);
    if (a2)
      v6 = 1;
    else
      v6 = *((_DWORD *)this + 84);
    if (v6 <= v5)
    {
      v7 = *((_QWORD *)this + 43);
      v8 = *((_QWORD *)this + 44);
      CADeprecated::CABufferList::VerifyNotTrashingOwnedBuffer(*(_QWORD *)(v8 + 8));
      memcpy((void *)(v8 + 24), (const void *)(v7 + 24), (16 * *(unsigned int *)(v7 + 24)) | 8);
      v9 = (AudioBufferList *)*((_QWORD *)this + 44);
      if ((a2 & 1) == 0)
        LODWORD(v5) = ExtAudioFile::AlignIO(this, v5);
      v10 = v9 + 1;
      *(_QWORD *)&v16.__val_ = AT::RingBuffer::Fetch(*((AT::RingBuffer **)this + 41), v10, v5, *((_QWORD *)this + 47));
      CheckRingBufferResult(v16, -66570, "fetch ring buffer");
      *((_QWORD *)this + 47) += v5;
      do
      {
        v11 = ExtAudioFile::Write(this, v5, v10);
        if (!v11)
          break;
        usleep(0x3D090u);
      }
      while (v11 != -66559);
      v4 = 1;
    }
  }
  while ((_DWORD)v5 && (a2 & 1) != 0);
  return v4 & 1;
}

void sub_18EF0492C(void *a1, int a2)
{
  uint64_t v2;
  _DWORD *v4;
  int v5;

  v4 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v5 = v4[66];
    __cxa_end_catch();
    if (!v5)
      goto LABEL_7;
  }
  else
  {
    __cxa_end_catch();
    v5 = -1;
  }
  if (!*(_DWORD *)(v2 + 360))
    *(_DWORD *)(v2 + 360) = v5;
LABEL_7:
  JUMPOUT(0x18EF04908);
}

uint64_t ExtAudioFile::WriteInputProc(ExtAudioFile *this, OpaqueAudioConverter *a2, unsigned int *__dst, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  uint64_t v8;
  unsigned int *v9;
  uint64_t result;
  int v12;
  AudioStreamPacketDescription *v13;
  int v14;
  UInt32 mVariableFramesInPacket;
  uint64_t v16;
  UInt32 *p_mVariableFramesInPacket;
  unsigned int v18;
  BOOL v19;
  UInt32 v20;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a5 + 30))
  {
    *(_DWORD *)a2 = 0;
    v8 = *__dst;
    if ((_DWORD)v8)
    {
      v9 = __dst + 3;
      do
      {
        *v9 = 0;
        v9 += 4;
        --v8;
      }
      while (v8);
    }
    *((_QWORD *)__dst + 2) = 0;
    result = 0;
    if (a4)
      *(_QWORD *)&a4->mNumberBuffers = 0;
  }
  else
  {
    v12 = *((_DWORD *)a5 + 76);
    if (v12)
    {
      memcpy(__dst, &a5[39][1].mVariableFramesInPacket, (16 * a5[39][1].mVariableFramesInPacket) | 8);
      v13 = a5[39];
      v14 = *((_DWORD *)a5 + 62);
      CADeprecated::CABufferList::VerifyNotTrashingOwnedBuffer(*(_QWORD *)&v13->mVariableFramesInPacket);
      mVariableFramesInPacket = v13[1].mVariableFramesInPacket;
      if (mVariableFramesInPacket)
      {
        v16 = (v14 * v12);
        p_mVariableFramesInPacket = &v13[2].mVariableFramesInPacket;
        do
        {
          v18 = *(p_mVariableFramesInPacket - 1);
          v19 = v18 >= v16;
          v20 = v18 - v16;
          if (!v19)
          {
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              v22 = 136315394;
              v23 = "CABufferList.h";
              v24 = 1024;
              v25 = 184;
              _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE [(nBytes <= buf->mDataByteSize) != 0 is false]: ", (uint8_t *)&v22, 0x12u);
            }
            __break(1u);
          }
          *(_QWORD *)p_mVariableFramesInPacket += v16;
          *(p_mVariableFramesInPacket - 1) = v20;
          p_mVariableFramesInPacket += 4;
          --mVariableFramesInPacket;
        }
        while (mVariableFramesInPacket);
      }
      *(_DWORD *)a2 = v12;
      if (a4)
        *(_QWORD *)&a4->mNumberBuffers = 0;
      result = 0;
      *((_DWORD *)a5 + 76) -= v12;
      *((_BYTE *)a5 + 320) = 1;
    }
    else
    {
      return 1852139886;
    }
  }
  return result;
}

uint64_t ExtAudioFile::WritePacketsFromCallback(ExtAudioFile *this, int (*inInputDataProcUserData)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *), void *a3)
{
  AudioBufferList *v5;
  int v6;
  uint64_t v7;
  AudioStreamPacketDescription *v8;
  uint64_t v9;
  int v10;
  const void *v11;
  uint64_t v12;
  OpaqueAudioFileID *v13;
  uint64_t v14;
  uint64_t v15;
  const AudioStreamPacketDescription *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v24;
  unsigned int v25;
  CAXException *v26;
  CAXException *exception;
  UInt32 ioOutputDataPacketSize;
  uint8_t v29[16];
  _BYTE buf[18];
  __int16 v31;
  uint8_t *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = (AudioBufferList *)((char *)this + 96);
  do
  {
    v6 = *((_DWORD *)this + 22);
    ioOutputDataPacketSize = *((_DWORD *)this + 23);
    *((_DWORD *)this + 27) = v6;
    v7 = *((_QWORD *)this + 18);
    if (v7)
    {
      v8 = (AudioStreamPacketDescription *)*((_QWORD *)this + 16);
      if (*((_BYTE *)this + 160))
      {
        v9 = AudioConverterFillComplexBufferWithPacketDependencyInfo(*((_QWORD *)this + 19), (uint64_t)ExtAudioFile::WriteInputProc, (uint64_t)inInputDataProcUserData, (uint64_t)&ioOutputDataPacketSize, (uint64_t)v5, (uint64_t)v8, v7);
        v10 = 1;
        if (!(_DWORD)v9)
          goto LABEL_10;
        goto LABEL_8;
      }
    }
    else
    {
      v8 = (AudioStreamPacketDescription *)*((_QWORD *)this + 16);
    }
    v9 = AudioConverterFillComplexBuffer(*((AudioConverterRef *)this + 19), (AudioConverterComplexInputDataProc)ExtAudioFile::WriteInputProc, inInputDataProcUserData, &ioOutputDataPacketSize, v5, v8);
    v10 = 0;
    if (!(_DWORD)v9)
      goto LABEL_10;
LABEL_8:
    if ((_DWORD)v9 != 1752656245 && (_DWORD)v9 != 1852139886)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v29, v9);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ExtAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1694;
        v31 = 2080;
        v32 = v29;
        v33 = 2080;
        v34 = "convert audio packets (write)";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "convert audio packets (write)", v9);
    }
LABEL_10:
    if (!ioOutputDataPacketSize)
      break;
    v11 = (const void *)*((_QWORD *)this + 14);
    if (*((_BYTE *)this + 408))
      v12 = mach_absolute_time();
    else
      v12 = 0;
    v13 = (OpaqueAudioFileID *)*((_QWORD *)this + 2);
    v14 = *((unsigned __int8 *)this + 29);
    v15 = *((unsigned int *)this + 27);
    v16 = (const AudioStreamPacketDescription *)*((_QWORD *)this + 16);
    if (v10)
      v17 = AudioFileWritePacketsWithDependencyInfo((uint64_t)v13, v14, v15, (uint64_t)v16, *((_QWORD *)this + 18), *((_QWORD *)this + 6), (uint64_t)&ioOutputDataPacketSize, (uint64_t)v11);
    else
      v17 = AudioFileWritePackets(v13, v14, v15, v16, *((_QWORD *)this + 6), &ioOutputDataPacketSize, v11);
    if (v17)
    {
      v24 = *((_QWORD *)this + 19);
      *(_QWORD *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterReset::$_0>;
      *(_QWORD *)&buf[8] = v29;
      v25 = v17;
      with_resolved(v24, (uint64_t (**)(uint64_t, uint64_t))buf);
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v29, v25);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ExtAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1725;
        v31 = 2080;
        v32 = v29;
        v33 = 2080;
        v34 = "write audio file";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      v26 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v26, "write audio file", v25);
    }
    if (*((_BYTE *)this + 408))
      *((_QWORD *)this + 52) += mach_absolute_time() - v12;
    v18 = ioOutputDataPacketSize;
    *((_QWORD *)this + 6) += ioOutputDataPacketSize;
    v19 = *((_DWORD *)this + 47);
    if (v19)
    {
      v20 = *((_QWORD *)this + 7) + (v19 * v18);
    }
    else
    {
      if (!(_DWORD)v18)
        continue;
      v20 = *((_QWORD *)this + 7);
      v21 = (unsigned int *)(*((_QWORD *)this + 16) + 8);
      do
      {
        v22 = *v21;
        v21 += 4;
        v20 += v22;
        --v18;
      }
      while (v18);
    }
    *((_QWORD *)this + 7) = v20;
  }
  while (!(_DWORD)v9);
  if ((_DWORD)v9 == 1852139886)
    return 0;
  if ((_DWORD)v9 == 1752656245)
  {
    if (*((_BYTE *)this + 320))
      return 4294900737;
    else
      return 4294900736;
  }
  return v9;
}

void sub_18EF04ED0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtAudioFile::GetFilePacketTable(AudioFileID *this, AudioFilePacketTableInfo *outPropertyData)
{
  uint64_t result;
  SInt64 v5;
  SInt32 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  SInt32 v10;
  SInt64 v11;
  uint64_t v12;
  UInt32 ioDataSize;

  ioDataSize = 16;
  result = AudioFileGetProperty(this[2], 0x706E666Fu, &ioDataSize, outPropertyData);
  if (!(_DWORD)result)
  {
    if (!*((_BYTE *)this + 384))
      return 0;
    v5 = outPropertyData->mNumberValidFrames + outPropertyData->mPrimingFrames + outPropertyData->mRemainderFrames;
    v6 = *((_DWORD *)this + 100);
    if (v6 == -2 || *((_DWORD *)this + 101) == -2 || this[49] == (AudioFileID)-2)
    {
      v12 = 0;
      ioDataSize = 8;
      result = AudioFileGetProperty(this[2], 0x70636E74u, &ioDataSize, &v12);
      v7 = *((unsigned int *)this + 47);
      if (!(_DWORD)v7)
        return 2003334207;
      if ((_DWORD)result)
        return result;
      v8 = v12 * v7;
      v9 = v5 == v8;
      v6 = *((_DWORD *)this + 100);
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    if (v6 != -1)
    {
      if (v6 == -2)
      {
        if (v9)
          goto LABEL_16;
        v6 = 0;
      }
      outPropertyData->mPrimingFrames = v6;
    }
LABEL_16:
    v10 = *((_DWORD *)this + 101);
    if (v10 != -1)
    {
      if (v10 != -2)
      {
LABEL_20:
        outPropertyData->mRemainderFrames = v10;
        goto LABEL_21;
      }
      if (!v9)
      {
        v10 = 0;
        goto LABEL_20;
      }
    }
LABEL_21:
    v11 = (SInt64)this[49];
    if (!v11)
    {
      v11 = v5 - (outPropertyData->mPrimingFrames + (uint64_t)outPropertyData->mRemainderFrames);
LABEL_27:
      result = 0;
      outPropertyData->mNumberValidFrames = v11;
      return result;
    }
    if (v11 != -1)
    {
      if (v11 == -2)
        v11 = v8 - (outPropertyData->mPrimingFrames + (uint64_t)outPropertyData->mRemainderFrames);
      goto LABEL_27;
    }
    return 0;
  }
  return result;
}

uint64_t ExtAudioFile::CopyEncoderCookieToFile(ExtAudioFile *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  CAXException *exception;
  unsigned int v13;
  CAXException *v14;
  unsigned int v15;
  uint64_t v16;
  UInt32 isWritable[3];
  int v18;
  _BYTE buf[18];
  __int16 v20;
  int **v21;
  __int16 v22;
  const char *v23;
  int *v24;
  UInt32 *v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 36);
  if (v4)
    MEMORY[0x193FFE43C](v4, 0x1000C8077774924);
  v15 = 0;
  *((_QWORD *)this + 36) = 0;
  *((_DWORD *)this + 74) = 0;
  v5 = *((_QWORD *)this + 19);
  v18 = 1668114275;
  v16 = 0;
  *(_QWORD *)isWritable = &v15;
  v24 = &v18;
  v25 = isWritable;
  v26 = &v16;
  *(_QWORD *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetPropertyInfo::$_0>;
  *(_QWORD *)&buf[8] = &v24;
  result = with_resolved(v5, (uint64_t (**)(uint64_t, uint64_t))buf);
  if (!(_DWORD)result)
  {
    result = v15;
    if (v15)
    {
      v7 = operator new[]();
      *((_QWORD *)this + 36) = v7;
      v8 = *((_QWORD *)this + 19);
      v18 = 1668114275;
      v16 = v7;
      *(_QWORD *)isWritable = &v15;
      v24 = &v18;
      v25 = isWritable;
      v26 = &v16;
      *(_QWORD *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
      *(_QWORD *)&buf[8] = &v24;
      v9 = with_resolved(v8, (uint64_t (**)(uint64_t, uint64_t))buf);
      if (v9)
      {
        v11 = v9;
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)&v24, v11);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ExtAudioFile.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 428;
          v20 = 2080;
          v21 = &v24;
          v22 = 2080;
          v23 = "get audio converter's magic cookie";
          _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(exception, "get audio converter's magic cookie", v11);
      }
      *((_DWORD *)this + 74) = v15;
      isWritable[0] = 0;
      result = AudioFileGetPropertyInfo(*((AudioFileID *)this + 2), 0x6D676963u, 0, isWritable);
      if (!(_DWORD)result)
      {
        if (isWritable[0])
        {
          result = AudioFileSetProperty(*((AudioFileID *)this + 2), 0x6D676963u, *((_DWORD *)this + 74), *((const void **)this + 36));
          if ((_DWORD)result)
          {
            if (!a2 || (v10 = *((_DWORD *)this + 6), v10 != 1832149350) && v10 != 1832149606 && v10 != 1836069990)
            {
              v13 = result;
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)&v24, v13);
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "ExtAudioFile.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 443;
                v20 = 2080;
                v21 = &v24;
                v22 = 2080;
                v23 = "set audio file's magic cookie";
                _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
              }
              v14 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v14, "set audio file's magic cookie", v13);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_18EF0539C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void CAXException::CAXException(CAXException *this, const char *__s, int a3)
{
  size_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)this = MEMORY[0x1E0DDF078] + 16;
  *((_DWORD *)this + 66) = a3;
  if (__s)
  {
    v5 = strlen(__s);
    v6 = (char *)this + 8;
    if (v5 < 0x100)
    {
      strlcpy(v6, __s, 0x100uLL);
    }
    else
    {
      v7 = *(_OWORD *)__s;
      v8 = *((_OWORD *)__s + 1);
      v9 = *((_OWORD *)__s + 3);
      *(_OWORD *)((char *)this + 40) = *((_OWORD *)__s + 2);
      *(_OWORD *)((char *)this + 56) = v9;
      *(_OWORD *)v6 = v7;
      *(_OWORD *)((char *)this + 24) = v8;
      v10 = *((_OWORD *)__s + 4);
      v11 = *((_OWORD *)__s + 5);
      v12 = *((_OWORD *)__s + 7);
      *(_OWORD *)((char *)this + 104) = *((_OWORD *)__s + 6);
      *(_OWORD *)((char *)this + 120) = v12;
      *(_OWORD *)((char *)this + 72) = v10;
      *(_OWORD *)((char *)this + 88) = v11;
      v13 = *((_OWORD *)__s + 8);
      v14 = *((_OWORD *)__s + 9);
      v15 = *((_OWORD *)__s + 11);
      *(_OWORD *)((char *)this + 168) = *((_OWORD *)__s + 10);
      *(_OWORD *)((char *)this + 184) = v15;
      *(_OWORD *)((char *)this + 136) = v13;
      *(_OWORD *)((char *)this + 152) = v14;
      v16 = *((_OWORD *)__s + 12);
      v17 = *((_OWORD *)__s + 13);
      v18 = *((_OWORD *)__s + 14);
      *(_OWORD *)((char *)this + 247) = *(_OWORD *)(__s + 239);
      *(_OWORD *)((char *)this + 216) = v17;
      *(_OWORD *)((char *)this + 232) = v18;
      *(_OWORD *)((char *)this + 200) = v16;
      *((_BYTE *)this + 263) = 0;
    }
  }
  else
  {
    *((_BYTE *)this + 8) = 0;
  }
}

void sub_18EF05474(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t CADeprecated::CABufferList::VerifyNotTrashingOwnedBuffer(uint64_t this)
{
  int v1;
  const char *v2;
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      v1 = 136315394;
      v2 = "CABufferList.h";
      v3 = 1024;
      v4 = 276;
      _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE [(mBufferMemory == __null) != 0 is false]: ", (uint8_t *)&v1, 0x12u);
    }
    __break(1u);
  }
  return this;
}

uint64_t AT::RingBuffer::GetTimeBounds(AT::RingBuffer *this, uint64_t *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6[2];
  char v7;

  AT::RingBuffer::Impl::GetTimeBounds(v6, (uint64_t)this);
  result = v6[0];
  if (v7)
  {
    *a2 = v6[0];
    *a3 = v6[1];
    std::system_category();
    return 0;
  }
  return result;
}

uint64_t CheckRingBufferResult(std::error_code a1, int a2, const char *a3)
{
  std::string *v5;
  CAXException *exception;
  std::string v8;
  std::error_code v9;
  char __str[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  if (a1.__val_)
  {
    std::error_code::message(&v8, &v9);
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v8;
    else
      v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
    snprintf(__str, 0x80uLL, "%s ring buffer error: %s", a3, (const char *)v5);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, __str, a2);
  }
  return *(_QWORD *)&a1.__val_;
}

void sub_18EF05670(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtAudioFile::AlignIO(ExtAudioFile *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  OSStatus Property;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  CAXException *exception;
  UInt32 ioDataSize;
  uint8_t v18[16];
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint8_t *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v2 = a2;
  v27 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)this + 46);
  if ((_DWORD)v3 && (int)v3 * (int)a2 >= (3 * *((_DWORD *)this + 22)) >> 2)
  {
    v4 = *((_QWORD *)this + 5);
    v6 = *((_QWORD *)this + 6);
    v5 = (uint64_t *)((char *)this + 40);
    if (v4 < 0)
    {
      ioDataSize = 8;
      Property = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x646F6666u, &ioDataSize, v5);
      if (Property)
      {
        v15 = Property;
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v18, v15);
          *(_DWORD *)buf = 136315906;
          v20 = "ExtAudioFile.cpp";
          v21 = 1024;
          v22 = 476;
          v23 = 2080;
          v24 = v18;
          v25 = 2080;
          v26 = "couldn't get file's data offset";
          _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(exception, "couldn't get file's data offset", v15);
      }
      v4 = *v5;
    }
    v8 = v4 + (v6 + v2) * v3;
    if ((v8 & 0xFFF) != 0)
    {
      LODWORD(v9) = (7 * v2) >> 3;
      v9 = v9 <= 1 ? 1 : v9;
      v10 = v4 + (v6 + v9) * v3;
      v11 = v8 & 0xFFFFFFFFFFFFF000;
      if (v11 > v10)
      {
        v12 = -v4;
        while (1)
        {
          v13 = (v12 + v11) / v3;
          if (v12 + v11 == v13 * v3)
            break;
          v11 -= 4096;
          if (v11 <= v10)
            return v2;
        }
        return (v13 - v6);
      }
    }
  }
  return v2;
}

void sub_18EF05860(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtAudioFile::Write(ExtAudioFile *this, UInt32 a2, const AudioBufferList *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  OSStatus v12;
  UInt32 v13;
  int v14;
  CAXException *exception;
  CAXException *v16;
  UInt32 ioNumPackets;
  uint8_t v18[16];
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint8_t *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  ioNumPackets = a2;
  if (*((_QWORD *)this + 19) && (*((_BYTE *)this + 236) & 0x20) != 0)
    v6 = *((_DWORD *)this + 63);
  else
    v6 = 1;
  if (a3->mNumberBuffers != v6)
    return 4294967246;
  if (!*((_QWORD *)this + 14))
    ExtAudioFile::AllocateBuffers((uint64_t)this, 0);
  v7 = *((_DWORD *)this + 8);
  if (v7 != 4)
  {
    if (v7 != 3)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v18, 0xFFFEFBFB);
        *(_DWORD *)buf = 136315906;
        v20 = "ExtAudioFile.cpp";
        v21 = 1024;
        v22 = 1421;
        v23 = 2080;
        v24 = v18;
        v25 = 2080;
        v26 = "can't write to this file";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "can't write to this file", -66565);
    }
    *((_DWORD *)this + 8) = 4;
  }
  *((_BYTE *)this + 320) = 0;
  if (*((_QWORD *)this + 19))
  {
    *((_DWORD *)this + 76) = a2;
    v8 = *((_QWORD *)this + 39);
    CADeprecated::CABufferList::VerifyNotTrashingOwnedBuffer(*(_QWORD *)(v8 + 8));
    memcpy((void *)(v8 + 24), a3, (16 * a3->mNumberBuffers) | 8);
    return ExtAudioFile::WritePacketsFromCallback(this, (int (*)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *))this, v9);
  }
  else
  {
    if (*((_BYTE *)this + 408))
      v11 = mach_absolute_time();
    else
      v11 = 0;
    v12 = AudioFileWritePackets(*((AudioFileID *)this + 2), *((_BYTE *)this + 29), a3->mBuffers[0].mDataByteSize, 0, *((_QWORD *)this + 6), &ioNumPackets, a3->mBuffers[0].mData);
    if (v12)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v18, v12);
        *(_DWORD *)buf = 136315906;
        v20 = "ExtAudioFile.cpp";
        v21 = 1024;
        v22 = 1431;
        v23 = 2080;
        v24 = v18;
        v25 = 2080;
        v26 = "write audio file";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      v16 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v16, "write audio file", v12);
    }
    if (*((_BYTE *)this + 408))
      *((_QWORD *)this + 52) += mach_absolute_time() - v11;
    v13 = ioNumPackets;
    *((_QWORD *)this + 6) += ioNumPackets;
    v14 = *((_DWORD *)this + 47);
    result = 0;
    if (v14)
      *((_QWORD *)this + 7) += v14 * v13;
  }
  return result;
}

void sub_18EF05BC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtAudioFile::AllocateBuffers(uint64_t this, char a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  CAXException *exception;
  uint64_t v10;
  UInt32 v11[4];
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  UInt32 *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(this + 280);
  if (v2)
  {
    v3 = this;
    if (*(_DWORD *)(this + 88) <= v2)
      v4 = *(_DWORD *)(this + 280);
    else
      v4 = *(_DWORD *)(this + 88);
    *(_DWORD *)(this + 88) = v4;
    *(_DWORD *)(this + 92) = v4 / v2;
    if (*(_DWORD *)(this + 108) != v4)
    {
      *(_DWORD *)(this + 96) = 1;
      *(_DWORD *)(this + 104) = *(_DWORD *)(this + 196);
      if (!*(_BYTE *)(this + 120))
      {
        v5 = *(_QWORD *)(this + 112);
        if (v5)
          MEMORY[0x193FFE43C](v5, 0x1000C8077774924);
        this = operator new[]();
        *(_QWORD *)(v3 + 112) = this;
      }
      *(_DWORD *)(v3 + 108) = v4;
    }
    if (*(_DWORD *)(v3 + 184))
    {
      v6 = *(_DWORD *)(v3 + 136);
      if (*(_DWORD *)(v3 + 188))
      {
        v7 = 0;
        v8 = 0;
        goto LABEL_20;
      }
    }
    else
    {
      v6 = *(_DWORD *)(v3 + 136);
    }
    v8 = *(_DWORD *)(v3 + 92);
    v7 = 1;
LABEL_20:
    if (v6 != v8)
    {
      v10 = *(_QWORD *)(v3 + 128);
      if (v10)
        MEMORY[0x193FFE43C](v10, 0x1000C80451B5BE8);
      *(_QWORD *)(v3 + 128) = 0;
      *(_DWORD *)(v3 + 136) = 0;
      this = *(_QWORD *)(v3 + 144);
      if (this)
        this = MEMORY[0x193FFE43C](this, 0x1000C80451B5BE8);
      *(_QWORD *)(v3 + 144) = 0;
      if (v7)
      {
        *(_QWORD *)(v3 + 128) = operator new[]();
        *(_DWORD *)(v3 + 136) = *(_DWORD *)(v3 + 92);
        *(_DWORD *)buf = 0;
        v11[0] = 4;
        this = AudioFormatGetProperty(0x66646570u, 0x28u, (const void *)(v3 + 168), v11, buf);
        if (!(_DWORD)this)
        {
          if (*(_DWORD *)buf)
          {
            this = operator new[]();
            *(_QWORD *)(v3 + 144) = this;
          }
        }
      }
    }
    return this;
  }
  if ((a2 & 1) == 0)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v11, 0xFFFEFBF9);
      *(_DWORD *)buf = 136315906;
      v13 = "ExtAudioFile.cpp";
      v14 = 1024;
      v15 = 956;
      v16 = 2080;
      v17 = v11;
      v18 = 2080;
      v19 = "file's maximum packet size is 0";
      _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "file's maximum packet size is 0", -66567);
  }
  return this;
}

void sub_18EF05E74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ___ZN25ExtAudioFileAsyncWriteMgr12RemoveClientEP12ExtAudioFile_block_invoke(uint64_t a1)
{
  std::unique_lock<std::mutex>::mutex_type *m;
  std::unique_lock<std::mutex> v2;

  m = *(std::unique_lock<std::mutex>::mutex_type **)(a1 + 32);
  v2.__m_ = m;
  v2.__owns_ = 1;
  std::mutex::lock(m);
  if (*(_QWORD *)&m[1].__m_.__opaque[40] == *(_QWORD *)&m[1].__m_.__opaque[48])
  {
    std::unique_lock<std::mutex>::unlock(&v2);
    std::condition_variable::notify_one((std::condition_variable *)&m[1]);
    if (!v2.__owns_)
      return;
    m = v2.__m_;
  }
  std::mutex::unlock(m);
}

void sub_18EF05F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::instance(void)::{lambda(void)#1} &&>>();
  }
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::instance(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = 850045863;
  result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 1018212795;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_QWORD *)(v0 + 136) = 0;
  __dmb(0xBu);
  CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::sInstance = v0;
  return result;
}

void ExtAudioFile::ExtAudioFile(ExtAudioFile *this)
{
  uint64_t v2;

  BaseOpaqueObject::BaseOpaqueObject(this);
  *(_QWORD *)v2 = &off_1E2902400;
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 29) = 1;
  *(_DWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = -1;
  *(_QWORD *)(v2 + 72) = 0;
  *(_DWORD *)(v2 + 84) = 0;
  *(_BYTE *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 136) = 0;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_QWORD *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  *(_WORD *)(v2 + 160) = 0;
  *(_OWORD *)(v2 + 164) = 0u;
  *(_OWORD *)(v2 + 180) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)(v2 + 264));
  CAAudioChannelLayout::CAAudioChannelLayout((ExtAudioFile *)((char *)this + 272));
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_BYTE *)this + 320) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_DWORD *)this + 90) = 0;
  *((_BYTE *)this + 408) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 71) = 0;
  *((_DWORD *)this + 22) = 0x10000;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 384) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = -1;
}

double ExtAudioFile::GetExistingFileInfo(ExtAudioFile *this, int a2)
{
  OSStatus PropertyInfo;
  UInt32 v5;
  BOOL v6;
  char v7;
  UInt32 v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  CAXException *exception;
  char *v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  OSStatus Property;
  __int128 v21;
  unsigned int *v22;
  OSStatus v23;
  int v24;
  double v25;
  double result;
  void *v27;
  OSStatus v28;
  double v29;
  CAXException *v30;
  std::bad_alloc *v31;
  std::bad_alloc *v32;
  CAXException *v33;
  CAXException *v34;
  CAXException *v35;
  CAXException *v36;
  unsigned int v37;
  UInt32 outDataSize[2];
  void *outPropertyData[2];
  uint8_t v40[4];
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  void **v45;
  __int16 v46;
  const char *v47;
  uint8_t buf[40];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)outDataSize = 0;
  v37 = -1;
  PropertyInfo = AudioFileGetPropertyInfo(*((AudioFileID *)this + 2), 0x666C7374u, outDataSize, 0);
  v5 = outDataSize[0];
  if (PropertyInfo)
    v6 = 1;
  else
    v6 = outDataSize[0] == 0;
  if (v6)
  {
    v8 = 0;
    v7 = 0;
    goto LABEL_29;
  }
  v8 = outDataSize[0] / 0x30;
  CADeprecated::CAAutoFree<AudioFormatListItem>::CAAutoFree(outPropertyData, outDataSize[0] / 0x30uLL, 0);
  if (AudioFileGetProperty(*((AudioFileID *)this + 2), 0x666C7374u, outDataSize, outPropertyData[0]))
  {
    v7 = 0;
    goto LABEL_27;
  }
  if (a2)
  {
    if (v5 < 0x30)
    {
LABEL_17:
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v40, 0xFFFFFFCE);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ExtAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 530;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v40;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = "couldn't get preferred format ID";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "couldn't get preferred format ID", -50);
    }
    v9 = 0;
    if (v8 <= 1)
      v10 = 1;
    else
      v10 = v8;
    v11 = (int *)((char *)outPropertyData[0] + 8);
    while (1)
    {
      v12 = *v11;
      v11 += 12;
      if (v12 == a2)
        break;
      if (v10 == ++v9)
        goto LABEL_17;
    }
    v14 = (char *)outPropertyData[0] + 48 * v9;
    v15 = *(_OWORD *)v14;
    v16 = *((_OWORD *)v14 + 1);
    *((_QWORD *)this + 25) = *((_QWORD *)v14 + 4);
    *(_OWORD *)((char *)this + 184) = v16;
    *(_OWORD *)((char *)this + 168) = v15;
    if (*((_DWORD *)v14 + 10) <= 0xFFFEFFFF)
      CAAudioChannelLayout::SetWithTag((ExtAudioFile *)((char *)this + 264));
    goto LABEL_26;
  }
  outDataSize[1] = 4;
  v7 = 0;
  if (!AudioFormatGetProperty(0x6670666Cu, outDataSize[0], outPropertyData[0], &outDataSize[1], &v37)
    && (v37 & 0x80000000) == 0)
  {
    v17 = (char *)outPropertyData[0] + 48 * v37;
    v18 = *((_QWORD *)v17 + 4);
    v19 = *((_OWORD *)v17 + 1);
    *(_OWORD *)((char *)this + 168) = *(_OWORD *)v17;
    *(_OWORD *)((char *)this + 184) = v19;
    *((_QWORD *)this + 25) = v18;
    if (*((_DWORD *)v17 + 10) <= 0xFFFEFFFF)
      CAAudioChannelLayout::SetWithTag((ExtAudioFile *)((char *)this + 264));
LABEL_26:
    v7 = 1;
  }
LABEL_27:
  if (outPropertyData[0])
    free(outPropertyData[0]);
LABEL_29:
  memset(buf, 0, sizeof(buf));
  outDataSize[1] = 40;
  Property = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x64666D74u, &outDataSize[1], buf);
  if (Property)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outPropertyData, Property);
      *(_DWORD *)v40 = 136315906;
      v41 = "ExtAudioFile.cpp";
      v42 = 1024;
      v43 = 548;
      v44 = 2080;
      v45 = outPropertyData;
      v46 = 2080;
      v47 = "get audio file's data format";
      _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v40, 0x26u);
    }
    v30 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v30, "get audio file's data format", Property);
  }
  if ((v7 & 1) != 0)
  {
    if (v37 != v8 - 1)
      goto LABEL_41;
  }
  else
  {
    v21 = *(_OWORD *)&buf[16];
    *(_OWORD *)((char *)this + 168) = *(_OWORD *)buf;
    *(_OWORD *)((char *)this + 184) = v21;
    *((_QWORD *)this + 25) = *(_QWORD *)&buf[32];
  }
  if (!AudioFileGetPropertyInfo(*((AudioFileID *)this + 2), 0x636D6170u, &outDataSize[1], 0) && outDataSize[1])
  {
    v22 = (unsigned int *)malloc_type_malloc(outDataSize[1], 0x7C51E058uLL);
    if (!v22)
    {
      v31 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v32 = std::bad_alloc::bad_alloc(v31);
    }
    v23 = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x636D6170u, &outDataSize[1], v22);
    if (v23)
    {
      free(v22);
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)outPropertyData, v23);
        *(_DWORD *)v40 = 136315906;
        v41 = "ExtAudioFile.cpp";
        v42 = 1024;
        v43 = 577;
        v44 = 2080;
        v45 = outPropertyData;
        v46 = 2080;
        v47 = "get audio file's channel layout";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v40, 0x26u);
      }
      v33 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v33, "get audio file's channel layout", v23);
    }
    if (outDataSize[1] <= 0xB)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)outPropertyData, 0x2173697Au);
        *(_DWORD *)v40 = 136315906;
        v41 = "ExtAudioFile.cpp";
        v42 = 1024;
        v43 = 568;
        v44 = 2080;
        v45 = outPropertyData;
        v46 = 2080;
        v47 = "channel layout's reported size is too small";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v40, 0x26u);
      }
      v34 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v34, "channel layout's reported size is too small", 561211770);
    }
    v24 = caulk::numeric::exceptional_mul<unsigned int>(v22[2], 0x14u);
    if (caulk::numeric::exceptional_add<unsigned int>(12, v24) > outDataSize[1])
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)outPropertyData, 0x2173697Au);
        *(_DWORD *)v40 = 136315906;
        v41 = "ExtAudioFile.cpp";
        v42 = 1024;
        v43 = 570;
        v44 = 2080;
        v45 = outPropertyData;
        v46 = 2080;
        v47 = "channel layout's reported size is larger than file chunk size";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v40, 0x26u);
      }
      v35 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v35, "channel layout's reported size is larger than file chunk size", 561211770);
    }
    CAAudioChannelLayout::operator=();
    free(v22);
  }
LABEL_41:
  v25 = *((double *)this + 21);
  result = 1.0;
  if (v25 != *(double *)buf && v25 != 0.0 && *(double *)buf != 0.0)
    result = v25 / *(double *)buf;
  *((double *)this + 26) = result;
  if (*((_DWORD *)this + 8) == 1)
  {
    if (!AudioFileGetPropertyInfo(*((AudioFileID *)this + 2), 0x6D676963u, &outDataSize[1], 0))
    {
      if (outDataSize[1])
      {
        v27 = (void *)operator new[]();
        *((_QWORD *)this + 36) = v27;
        *((_DWORD *)this + 74) = outDataSize[1];
        v28 = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x6D676963u, &outDataSize[1], v27);
        if (v28)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)outPropertyData, v28);
            *(_DWORD *)v40 = 136315906;
            v41 = "ExtAudioFile.cpp";
            v42 = 1024;
            v43 = 601;
            v44 = 2080;
            v45 = outPropertyData;
            v46 = 2080;
            v47 = "get audio file's magic cookie";
            _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v40, 0x26u);
          }
          v36 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v36, "get audio file's magic cookie", v28);
        }
      }
    }
    ExtAudioFile::InitFileMaxPacketSize((AudioFileID *)this);
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    return ExtAudioFile::UpdateInternals(this, v29);
  }
  return result;
}

void sub_18EF06908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11)
    free(a11);
  _Unwind_Resume(exception_object);
}

uint64_t ExtAudioFile::InitFileMaxPacketSize(AudioFileID *this)
{
  OSStatus Property;
  CAXException *exception;
  int v5;
  UInt32 ioDataSize;
  uint8_t v7[16];
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint8_t *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  ioDataSize = 4;
  Property = AudioFileGetProperty(this[2], 0x706B7562u, &ioDataSize, this + 35);
  if (Property)
  {
    if (*((_DWORD *)this + 44) != 1819304813)
    {
      v5 = Property;
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v7, v5);
        *(_DWORD *)buf = 136315906;
        v9 = "ExtAudioFile.cpp";
        v10 = 1024;
        v11 = 463;
        v12 = 2080;
        v13 = v7;
        v14 = 2080;
        v15 = "get audio file's maximum packet size";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "get audio file's maximum packet size", v5);
    }
    *((_DWORD *)this + 70) = *((_DWORD *)this + 48);
  }
  return ExtAudioFile::AllocateBuffers((uint64_t)this, 1);
}

void sub_18EF06AC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double ExtAudioFile::UpdateInternals(ExtAudioFile *this, double result)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  unsigned int v12;
  CAXException *exception;
  int v14;
  char *v15;
  int *v16;
  int v17;
  _BYTE buf[18];
  __int16 v19;
  int **v20;
  __int16 v21;
  const char *v22;
  int *v23;
  int *v24;
  int **v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 20) = 0;
  v3 = *((_QWORD *)this + 19);
  if (v3)
  {
    v4 = *((_DWORD *)this + 8);
    v14 = 4;
    if (v4 == 1)
      v5 = 2020569203;
    else
      v5 = 2020175987;
    v17 = v5;
    v15 = (char *)this + 284;
    v16 = &v14;
    v23 = &v17;
    v24 = (int *)&v16;
    v25 = (int **)&v15;
    *(_QWORD *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
    *(_QWORD *)&buf[8] = &v23;
    v6 = with_resolved(v3, (uint64_t (**)(uint64_t, uint64_t))buf);
    if (v6)
    {
      v12 = v6;
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)&v23, v12);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ExtAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 912;
        v19 = 2080;
        v20 = &v23;
        v21 = 2080;
        v22 = "get audio converter's maximum packet size";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "get audio converter's maximum packet size", v12);
    }
    v7 = *((double *)this + 28);
    result = 1.0;
    if (v7 != 0.0)
    {
      v8 = *((double *)this + 21);
      if (v8 != 0.0)
        result = v7 / v8;
    }
    *((double *)this + 27) = result;
    if (!*((_DWORD *)this + 50)
      && !ExtAudioFile::GetFilePacketTable((AudioFileID *)this, (AudioFilePacketTableInfo *)buf))
    {
      v9 = *((double *)this + 26);
      v10 = *((double *)this + 27);
      *((_DWORD *)this + 20) = (int)((double)*(int *)&buf[8] * v9 + 0.5);
      result = v9 * v10 * (double)*(uint64_t *)buf + 0.5;
      *((_QWORD *)this + 9) = (uint64_t)result;
    }
    v11 = *((_QWORD *)this + 19);
    if (v11)
    {
      v14 = *((unsigned __int8 *)this + 408);
      LODWORD(v15) = 610889331;
      v17 = 4;
      v16 = &v14;
      v23 = (int *)&v15;
      v24 = &v17;
      v25 = &v16;
      *(_QWORD *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
      *(_QWORD *)&buf[8] = &v23;
      with_resolved(v11, (uint64_t (**)(uint64_t, uint64_t))buf);
    }
  }
  else
  {
    *((_DWORD *)this + 71) = *((_DWORD *)this + 70);
    *((_QWORD *)this + 27) = 0x3FF0000000000000;
  }
  if (*((_DWORD *)this + 8) == 1 && *((_DWORD *)this + 58) == 1819304813)
  {
    *((_QWORD *)this + 7) = -1;
    *((_QWORD *)this + 8) = -1;
    return ExtAudioFile::Seek(this, 0);
  }
  return result;
}

void sub_18EF06D70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double ExtAudioFile::Seek(ExtAudioFile *this, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  OSStatus Property;
  OSStatus v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  OSStatus v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double result;
  CAXException *exception;
  unsigned int v17;
  CAXException *v18;
  unsigned int v19;
  CAXException *v20;
  UInt32 ioDataSize;
  uint8_t v22[16];
  _BYTE buf[18];
  __int16 v24;
  uint8_t *p_outPropertyData;
  __int16 v26;
  const char *v27;
  uint64_t outPropertyData;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 7) != a2)
  {
    if (a2 < 0 || *((_DWORD *)this + 8) != 1 || *((_DWORD *)this + 58) != 1819304813)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, 0xFFFEFBF8);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ExtAudioFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1126;
        v24 = 2080;
        p_outPropertyData = (uint8_t *)&outPropertyData;
        v26 = 2080;
        v27 = "seek to frame in audio file";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "seek to frame in audio file", -66568);
    }
    v4 = *((unsigned int *)this + 47);
    v5 = a2;
    if ((_DWORD)v4 != 1)
    {
      if ((_DWORD)v4)
      {
        v5 = a2 / v4;
      }
      else
      {
        outPropertyData = a2;
        ioDataSize = 24;
        Property = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x6672706Bu, &ioDataSize, &outPropertyData);
        if (Property)
        {
          v17 = Property;
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v22, v17);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "ExtAudioFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1083;
            v24 = 2080;
            p_outPropertyData = v22;
            v26 = 2080;
            v27 = "packet <-> frame translation failed for format with variable frames/packet";
            _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          v18 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v18, "packet <-> frame translation failed for format with variable frames/packet", v17);
        }
        v5 = v29;
      }
    }
    *(_QWORD *)buf = v5;
    LODWORD(outPropertyData) = 16;
    v7 = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x706B726Cu, (UInt32 *)&outPropertyData, buf);
    v8 = *(_QWORD *)&buf[8];
    if (v7)
      v8 = 0;
    v9 = (v5 - v8) & ~((uint64_t)(v5 - v8) >> 63);
    *((_QWORD *)this + 6) = v9;
    v10 = *((unsigned int *)this + 47);
    if ((_DWORD)v10 != 1)
    {
      if ((_DWORD)v10)
      {
        v9 *= v10;
      }
      else
      {
        v29 = v9;
        ioDataSize = 24;
        v11 = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x706B6672u, &ioDataSize, &outPropertyData);
        if (v11)
        {
          v19 = v11;
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v22, v19);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "ExtAudioFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1051;
            v24 = 2080;
            p_outPropertyData = v22;
            v26 = 2080;
            v27 = "packet <-> frame translation unimplemented for format with variable frames/packet";
            _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          v20 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v20, "packet <-> frame translation unimplemented for format with variable frames/packet", v19);
        }
        v9 = outPropertyData;
      }
    }
    v12 = v9 - *((int *)this + 20);
    *((_QWORD *)this + 7) = v12;
    v13 = *((_QWORD *)this + 19);
    if (v13)
    {
      *(_QWORD *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterReset::$_0>;
      *(_QWORD *)&buf[8] = &outPropertyData;
      with_resolved(v13, (uint64_t (**)(uint64_t, uint64_t))buf);
      v12 = *((_QWORD *)this + 7);
    }
    v14 = *((double *)this + 27);
    *((_DWORD *)this + 21) = ((double)(int)((a2 - v12) & ~(((int)a2 - (int)v12) >> 31)) * v14 + 0.5);
    result = v14 * (double)a2 + 0.5;
    *((_QWORD *)this + 7) = a2;
    *((_QWORD *)this + 8) = (uint64_t)result;
  }
  return result;
}

void sub_18EF07194(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ExtAudioFile::FileFormatChanged(ExtAudioFile *this, CFURLRef inFileRef, const AudioStreamBasicDescription *inFileType, AudioFileFlags inFlags)
{
  AudioFileTypeID v5;
  char *v8;
  __int128 v9;
  uint64_t v10;
  double v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  OSStatus v18;
  double v19;
  OSStatus v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  const AudioChannelLayout *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  UInt32 v29;
  CAXException *exception;
  unsigned int v31;
  CAXException *v32;
  CAXException *v33;
  CAXException *v34;
  std::bad_alloc *v35;
  std::bad_alloc *v36;
  unsigned int v37;
  CAXException *v38;
  CAXException *v39;
  CAXException *v40;
  CAXException *v41;
  int v42;
  int inPropertyData;
  unsigned int size;
  char *size_4;
  int v46;
  _QWORD v47[2];
  _BYTE v48[28];
  __int16 v49;
  const char *v50;
  AudioStreamBasicDescription inFormat;
  AudioStreamBasicDescription buf;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 8) & 0xFFFFFFFE) != 2)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&inFormat, 0xFFFEFBFB);
      LODWORD(buf.mSampleRate) = 136315906;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "ExtAudioFile.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 304;
      HIWORD(buf.mBytesPerPacket) = 2080;
      *(_QWORD *)&buf.mFramesPerPacket = &inFormat;
      LOWORD(buf.mChannelsPerFrame) = 2080;
      *(_QWORD *)((char *)&buf.mChannelsPerFrame + 2) = "new file not prepared";
      _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "new file not prepared", -66565);
  }
  v5 = inFileType;
  size = 0;
  v8 = (char *)this + 168;
  v9 = *(_OWORD *)((char *)this + 184);
  *(_OWORD *)&buf.mSampleRate = *(_OWORD *)((char *)this + 168);
  *(_OWORD *)&buf.mBytesPerPacket = v9;
  *(_QWORD *)&buf.mBitsPerChannel = *((_QWORD *)this + 25);
  v10 = *((_QWORD *)this + 19);
  if (v10)
  {
    size = 40;
    v11 = *(double *)v8;
    v46 = 1633906532;
    v47[0] = &size;
    size_4 = v8;
    *(_QWORD *)v48 = &v46;
    *(_QWORD *)&v48[8] = v47;
    *(_QWORD *)&v48[16] = &size_4;
    *(_QWORD *)&inFormat.mSampleRate = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
    *(_QWORD *)&inFormat.mFormatID = v48;
    v12 = with_resolved(v10, (uint64_t (**)(uint64_t, uint64_t))&inFormat);
    if (v12)
    {
      v31 = v12;
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v48, v31);
        LODWORD(inFormat.mSampleRate) = 136315906;
        *(_QWORD *)((char *)&inFormat.mSampleRate + 4) = "ExtAudioFile.cpp";
        LOWORD(inFormat.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&inFormat.mFormatFlags + 2) = 320;
        HIWORD(inFormat.mBytesPerPacket) = 2080;
        *(_QWORD *)&inFormat.mFramesPerPacket = v48;
        LOWORD(inFormat.mChannelsPerFrame) = 2080;
        *(_QWORD *)((char *)&inFormat.mChannelsPerFrame + 2) = "get audio converter's output stream description";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&inFormat, 0x26u);
      }
      v32 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v32, "get audio converter's output stream description", v31);
    }
    if (*(double *)v8 == 0.0)
      *(double *)v8 = v11;
    v13 = *((_QWORD *)this + 19);
    v46 = 1868786720;
    v47[0] = &size;
    size_4 = 0;
    *(_QWORD *)v48 = &v46;
    *(_QWORD *)&v48[8] = v47;
    *(_QWORD *)&v48[16] = &size_4;
    *(_QWORD *)&inFormat.mSampleRate = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetPropertyInfo::$_0>;
    *(_QWORD *)&inFormat.mFormatID = v48;
    if (!with_resolved(v13, (uint64_t (**)(uint64_t, uint64_t))&inFormat) && size)
    {
      v14 = (char *)malloc_type_malloc(size, 0x7C51E058uLL);
      if (!v14)
      {
        v35 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v36 = std::bad_alloc::bad_alloc(v35);
      }
      v15 = *((_QWORD *)this + 19);
      v46 = 1868786720;
      v47[0] = &size;
      size_4 = v14;
      *(_QWORD *)v48 = &v46;
      *(_QWORD *)&v48[8] = v47;
      *(_QWORD *)&v48[16] = &size_4;
      *(_QWORD *)&inFormat.mSampleRate = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
      *(_QWORD *)&inFormat.mFormatID = v48;
      v16 = with_resolved(v15, (uint64_t (**)(uint64_t, uint64_t))&inFormat);
      if (v16)
      {
        v37 = v16;
        free(v14);
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v48, v37);
          LODWORD(inFormat.mSampleRate) = 136315906;
          *(_QWORD *)((char *)&inFormat.mSampleRate + 4) = "ExtAudioFile.cpp";
          LOWORD(inFormat.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&inFormat.mFormatFlags + 2) = 333;
          HIWORD(inFormat.mBytesPerPacket) = 2080;
          *(_QWORD *)&inFormat.mFramesPerPacket = v48;
          LOWORD(inFormat.mChannelsPerFrame) = 2080;
          *(_QWORD *)((char *)&inFormat.mChannelsPerFrame + 2) = "couldn't get audio converter's output channel layout";
          _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&inFormat, 0x26u);
        }
        v38 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v38, "couldn't get audio converter's output channel layout", v37);
      }
      CAAudioChannelLayout::operator=();
      free(v14);
    }
  }
  if (*((_DWORD *)this + 8) == 2)
  {
    v17 = *((_OWORD *)v8 + 1);
    *(_OWORD *)&inFormat.mSampleRate = *(_OWORD *)v8;
    *(_OWORD *)&inFormat.mBytesPerPacket = v17;
    *(_QWORD *)&inFormat.mBitsPerChannel = *((_QWORD *)v8 + 4);
    if (inFormat.mSampleRate == 0.0)
      inFormat.mSampleRate = 44100.0;
    v18 = AudioFileCreateWithURL(inFileRef, v5, &inFormat, inFlags, (AudioFileID *)this + 2);
    if (v18)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v47, v18);
        *(_DWORD *)v48 = 136315906;
        *(_QWORD *)&v48[4] = "ExtAudioFile.cpp";
        *(_WORD *)&v48[12] = 1024;
        *(_DWORD *)&v48[14] = 351;
        *(_WORD *)&v48[18] = 2080;
        *(_QWORD *)&v48[20] = v47;
        v49 = 2080;
        v50 = "create audio file";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v48, 0x26u);
      }
      v34 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v34, "create audio file", v18);
    }
    *((_DWORD *)this + 8) = 3;
    *((_BYTE *)this + 28) = 1;
  }
  else if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)v8, &buf, inFileType))
  {
    v19 = *(double *)v8;
    if (*(double *)v8 == 0.0)
    {
      v19 = *((double *)this + 28);
      *((double *)this + 21) = v19;
    }
    if (v19 == 0.0)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v48, 0xFFFEFBFA);
        LODWORD(inFormat.mSampleRate) = 136315906;
        *(_QWORD *)((char *)&inFormat.mSampleRate + 4) = "ExtAudioFile.cpp";
        LOWORD(inFormat.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&inFormat.mFormatFlags + 2) = 361;
        HIWORD(inFormat.mBytesPerPacket) = 2080;
        *(_QWORD *)&inFormat.mFramesPerPacket = v48;
        LOWORD(inFormat.mChannelsPerFrame) = 2080;
        *(_QWORD *)((char *)&inFormat.mChannelsPerFrame + 2) = "file's sample rate is 0";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&inFormat, 0x26u);
      }
      v40 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v40, "file's sample rate is 0", -66566);
    }
    v20 = AudioFileSetProperty(*((AudioFileID *)this + 2), 0x64666D74u, 0x28u, v8);
    if (v20)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v48, v20);
        LODWORD(inFormat.mSampleRate) = 136315906;
        *(_QWORD *)((char *)&inFormat.mSampleRate + 4) = "ExtAudioFile.cpp";
        LOWORD(inFormat.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&inFormat.mFormatFlags + 2) = 362;
        HIWORD(inFormat.mBytesPerPacket) = 2080;
        *(_QWORD *)&inFormat.mFramesPerPacket = v48;
        LOWORD(inFormat.mChannelsPerFrame) = 2080;
        *(_QWORD *)((char *)&inFormat.mChannelsPerFrame + 2) = "couldn't update file's data format";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&inFormat, 0x26u);
      }
      v41 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v41, "couldn't update file's data format", v20);
    }
  }
  inPropertyData = 1;
  AudioFileSetProperty(*((AudioFileID *)this + 2), 0x64737A75u, 4u, &inPropertyData);
  if (*((_QWORD *)this + 19))
  {
    ExtAudioFile::CopyEncoderCookieToFile(this, 0);
    size = 4;
    v21 = *((_QWORD *)this + 19);
    v46 = 2020569203;
    v47[0] = &size;
    size_4 = (char *)this + 280;
    *(_QWORD *)v48 = &v46;
    *(_QWORD *)&v48[8] = v47;
    *(_QWORD *)&v48[16] = &size_4;
    *(_QWORD *)&inFormat.mSampleRate = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
    *(_QWORD *)&inFormat.mFormatID = v48;
    v22 = with_resolved(v21, (uint64_t (**)(uint64_t, uint64_t))&inFormat);
    if (v22)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v48, v22);
        LODWORD(inFormat.mSampleRate) = 136315906;
        *(_QWORD *)((char *)&inFormat.mSampleRate + 4) = "ExtAudioFile.cpp";
        LOWORD(inFormat.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&inFormat.mFormatFlags + 2) = 374;
        HIWORD(inFormat.mBytesPerPacket) = 2080;
        *(_QWORD *)&inFormat.mFramesPerPacket = v48;
        LOWORD(inFormat.mChannelsPerFrame) = 2080;
        *(_QWORD *)((char *)&inFormat.mChannelsPerFrame + 2) = "get audio converter's maximum output packet size";
        _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&inFormat, 0x26u);
      }
      v33 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v33, "get audio converter's maximum output packet size", v22);
    }
    if (*((_DWORD *)this + 44) == 1634754915)
    {
      v42 = 75;
      v23 = *((_QWORD *)this + 19);
      LODWORD(size_4) = 1634955366;
      v46 = 4;
      v47[0] = &v42;
      *(_QWORD *)v48 = &size_4;
      *(_QWORD *)&v48[8] = &v46;
      *(_QWORD *)&v48[16] = v47;
      *(_QWORD *)&inFormat.mSampleRate = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
      *(_QWORD *)&inFormat.mFormatID = v48;
      v24 = with_resolved(v23, (uint64_t (**)(uint64_t, uint64_t))&inFormat);
      if (v24)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v48, v24);
          LODWORD(inFormat.mSampleRate) = 136315906;
          *(_QWORD *)((char *)&inFormat.mSampleRate + 4) = "ExtAudioFile.cpp";
          LOWORD(inFormat.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&inFormat.mFormatFlags + 2) = 379;
          HIWORD(inFormat.mBytesPerPacket) = 2080;
          *(_QWORD *)&inFormat.mFramesPerPacket = v48;
          LOWORD(inFormat.mChannelsPerFrame) = 2080;
          *(_QWORD *)((char *)&inFormat.mChannelsPerFrame + 2) = "set default encoder ASP frequency";
          _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&inFormat, 0x26u);
        }
        v39 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v39, "set default encoder ASP frequency", v24);
      }
    }
    ExtAudioFile::AllocateBuffers((uint64_t)this, 1);
  }
  else
  {
    ExtAudioFile::InitFileMaxPacketSize((AudioFileID *)this);
  }
  v27 = *((_QWORD *)this + 33);
  if (v27)
  {
    if (CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v27 + 16), v25))
    {
      LODWORD(inFormat.mSampleRate) = 0;
      if (!AudioFileGetPropertyInfo(*((AudioFileID *)this + 2), 0x636D6170u, 0, (UInt32 *)&inFormat))
      {
        if (LODWORD(inFormat.mSampleRate))
        {
          v28 = *((_QWORD *)this + 33);
          if (v28)
            v29 = *(_DWORD *)(v28 + 12);
          else
            v29 = 0;
          if (AudioFileSetProperty(*((AudioFileID *)this + 2), 0x636D6170u, v29, (const void *)(v28 + 16))
            && *MEMORY[0x1E0DDEB40])
          {
            v26 = ((double (*)(const char *))*MEMORY[0x1E0DDEB40])("could not set the file's channel layout");
          }
        }
      }
    }
  }
  ExtAudioFile::UpdateInternals(this, v26);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
}

void sub_18EF07C34(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL CAStreamBasicDescription::IsEquivalent(CAStreamBasicDescription *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3)
{
  return *(double *)this == a2->mSampleRate
      && *((_DWORD *)this + 2) == a2->mFormatID
      && *((_DWORD *)this + 4) == a2->mBytesPerPacket
      && *((_DWORD *)this + 5) == a2->mFramesPerPacket
      && *((_DWORD *)this + 7) == a2->mChannelsPerFrame
      && *((_DWORD *)this + 8) == a2->mBitsPerChannel
      && CA::Implementation::EquivalentFormatFlags(this, a2, 0, 0);
}

uint64_t ExtAudioFile::GetNumberFrames(ExtAudioFile *this)
{
  uint64_t v2;
  OSStatus Property;
  CAXException *exception;
  int v6;
  UInt32 ioDataSize;
  uint64_t outPropertyData;
  UInt32 v9;
  uint64_t v10;
  uint8_t v11[16];
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint8_t *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  ioDataSize = 16;
  if (!AudioFileGetProperty(*((AudioFileID *)this + 2), 0x706E666Fu, &ioDataSize, &outPropertyData))
    return (uint64_t)((double)outPropertyData * *((double *)this + 26) + 0.5);
  v2 = *((unsigned int *)this + 47);
  v10 = 0;
  v9 = 8;
  Property = AudioFileGetProperty(*((AudioFileID *)this + 2), 0x70636E74u, &v9, &v10);
  if (Property)
  {
    v6 = Property;
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v11, v6);
      *(_DWORD *)buf = 136315906;
      v13 = "ExtAudioFile.h";
      v14 = 1024;
      v15 = 121;
      v16 = 2080;
      v17 = v11;
      v18 = 2080;
      v19 = "get audio file's packet count";
      _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "get audio file's packet count", v6);
  }
  return v10 * v2 - *((int *)this + 20);
}

void sub_18EF07E78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double ExtAudioFile::SetClientFormat(ExtAudioFile *this, AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3)
{
  char *v6;
  const AudioChannelLayout *v7;
  const AudioStreamBasicDescription *v8;
  __int128 v9;
  char v10;
  OpaqueAudioConverter *v11;
  __int128 v12;
  char *v13;
  const AudioChannelLayout *v14;
  int v15;
  int v16;
  const AudioChannelLayout *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  double v27;
  int v28;
  OSType v29;
  OSType v30;
  OSStatus v31;
  CAXException *v32;
  OSType v33;
  OSType v34;
  OSStatus v35;
  CAXException *v36;
  unsigned int v37;
  _QWORD *v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  char v44;
  CAXException *exception;
  CAXException *v46;
  CAXException *v47;
  unsigned int v48;
  CAXException *v49;
  unsigned int v50;
  CAXException *v51;
  int v53;
  AudioClassDescription ioPropertyDataSize;
  int v55;
  int *v56;
  int v57;
  _BYTE inSpecifier[18];
  __int16 v59;
  int **p_outPropertyData;
  __int16 v61;
  const char *v62;
  int *outPropertyData;
  AudioClassDescription *v64;
  AudioClassDescription *p_ioPropertyDataSize;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (a2->mFormatID != 1819304813)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, 0xFFFEFBFD);
      *(_DWORD *)inSpecifier = 136315906;
      *(_QWORD *)&inSpecifier[4] = "ExtAudioFile.cpp";
      *(_WORD *)&inSpecifier[12] = 1024;
      *(_DWORD *)&inSpecifier[14] = 635;
      v59 = 2080;
      p_outPropertyData = &outPropertyData;
      v61 = 2080;
      v62 = "non-PCM client format on audio file";
      _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", inSpecifier, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "non-PCM client format on audio file", -66563);
  }
  v6 = (char *)this + 224;
  if (*((_DWORD *)this + 58) && CAStreamBasicDescription::IsEquivalent((ExtAudioFile *)((char *)this + 224), a2, a3))
  {
    v10 = 0;
  }
  else
  {
    v11 = (OpaqueAudioConverter *)*((_QWORD *)this + 19);
    if (v11)
    {
      AudioConverterDispose(v11);
      *((_QWORD *)this + 19) = 0;
    }
    CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 39, 0);
    v9 = *(_OWORD *)&a2->mSampleRate;
    v12 = *(_OWORD *)&a2->mBytesPerPacket;
    *((_QWORD *)v6 + 4) = *(_QWORD *)&a2->mBitsPerChannel;
    *(_OWORD *)v6 = v9;
    *((_OWORD *)v6 + 1) = v12;
    v10 = 1;
  }
  v13 = (char *)this + 272;
  if (a3)
  {
    v15 = CAAudioChannelLayout::operator==() ^ 1;
    if (*(_QWORD *)&a3->mSampleRate
      && CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(*(_QWORD *)&a3->mSampleRate + 16), v14))
    {
      if (*(_QWORD *)&a3->mSampleRate)
        v16 = CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(*(_QWORD *)&a3->mSampleRate + 16), v14);
      else
        v16 = 0;
      if (v16 != *((_DWORD *)this + 63))
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, 0xFFFEFBFC);
          *(_DWORD *)inSpecifier = 136315906;
          *(_QWORD *)&inSpecifier[4] = "ExtAudioFile.cpp";
          *(_WORD *)&inSpecifier[12] = 1024;
          *(_DWORD *)&inSpecifier[14] = 650;
          v59 = 2080;
          p_outPropertyData = &outPropertyData;
          v61 = 2080;
          v62 = "inappropriate channel map";
          _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", inSpecifier, 0x26u);
        }
        v46 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v46, "inappropriate channel map", -66564);
      }
      CAAudioChannelLayout::operator=();
    }
  }
  else
  {
    if (!*(_QWORD *)v13)
    {
      v15 = 0;
LABEL_30:
      v23 = 0;
      goto LABEL_31;
    }
    v15 = CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(*(_QWORD *)v13 + 16), v7) != 0;
  }
  if (!*(_QWORD *)v13)
    goto LABEL_30;
  if (!CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(*(_QWORD *)v13 + 16), v14))
    goto LABEL_30;
  v18 = *((_QWORD *)this + 33);
  if (!v18 || !CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v18 + 16), v17))
    goto LABEL_30;
  v20 = *((_QWORD *)this + 33);
  v19 = *((_QWORD *)this + 34);
  if (v19 == v20)
  {
    v22 = 1;
  }
  else
  {
    LODWORD(outPropertyData) = 0;
    ioPropertyDataSize.mType = 4;
    *(_QWORD *)inSpecifier = v19 + 16;
    *(_QWORD *)&inSpecifier[8] = v20 + 16;
    if (AudioFormatGetProperty(0x63686571u, 0x10u, inSpecifier, &ioPropertyDataSize.mType, &outPropertyData))
      v21 = 1;
    else
      v21 = (_DWORD)outPropertyData == 0;
    v22 = !v21;
  }
  v23 = v22 ^ 1;
LABEL_31:
  v24 = (uint64_t *)((char *)this + 152);
  v25 = *((_QWORD *)this + 19);
  if (v25)
    v26 = v10;
  else
    v26 = 1;
  if ((v26 & 1) != 0 || v15)
  {
    if (((!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)v6, (const AudioStreamBasicDescription *)((char *)this + 168), v8) | v23) & 1) != 0|| *((_BYTE *)this + 161))
    {
      v28 = *((_DWORD *)this + 8);
      if ((v28 - 2) >= 2)
      {
        if (v28 != 1)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, 0xFFFEFBFB);
            *(_DWORD *)inSpecifier = 136315906;
            *(_QWORD *)&inSpecifier[4] = "ExtAudioFile.cpp";
            *(_WORD *)&inSpecifier[12] = 1024;
            *(_DWORD *)&inSpecifier[14] = 743;
            v59 = 2080;
            p_outPropertyData = &outPropertyData;
            v61 = 2080;
            v62 = "audio file format not yet known";
            _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", inSpecifier, 0x26u);
          }
          v47 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v47, "audio file format not yet known", -66565);
        }
        if (!v25)
        {
          v33 = *((_DWORD *)this + 41);
          if (v33)
          {
            v34 = *((_DWORD *)this + 44);
            ioPropertyDataSize.mType = 1633969507;
            ioPropertyDataSize.mSubType = v34;
            ioPropertyDataSize.mManufacturer = v33;
            v35 = AudioConverterNewSpecific((const AudioStreamBasicDescription *)((char *)this + 168), (const AudioStreamBasicDescription *)v6, 1u, &ioPropertyDataSize, (AudioConverterRef *)this + 19);
            if (v35)
            {
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, v35);
                *(_DWORD *)inSpecifier = 136315906;
                *(_QWORD *)&inSpecifier[4] = "ExtAudioFile.cpp";
                *(_WORD *)&inSpecifier[12] = 1024;
                *(_DWORD *)&inSpecifier[14] = 691;
                v59 = 2080;
                p_outPropertyData = &outPropertyData;
                v61 = 2080;
                v62 = "create audio converter";
                _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", inSpecifier, 0x26u);
              }
              v36 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v36, "create audio converter", v35);
            }
          }
          else
          {
            v39 = AudioConverterNewWithOptions((AudioStreamBasicDescription *)((char *)this + 168), (const AudioStreamBasicDescription *)v6, 0, (_QWORD *)this + 19);
            if (v39)
            {
              v50 = v39;
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, v50);
                *(_DWORD *)inSpecifier = 136315906;
                *(_QWORD *)&inSpecifier[4] = "ExtAudioFile.cpp";
                *(_WORD *)&inSpecifier[12] = 1024;
                *(_DWORD *)&inSpecifier[14] = 693;
                v59 = 2080;
                p_outPropertyData = &outPropertyData;
                v61 = 2080;
                v62 = "create audio converter";
                _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", inSpecifier, 0x26u);
              }
              v51 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v51, "create audio converter", v50);
            }
          }
        }
        v40 = (_QWORD *)*((_QWORD *)this + 36);
        if (v40)
          ExtAudioFile::SetConverterProperty(this, 1684891491, *((_DWORD *)this + 74), v40, *((_DWORD *)this + 44) == 1819304813, v27);
        ExtAudioFile::SetConverterChannelLayout(this, 0, (ExtAudioFile *)((char *)this + 264));
        ExtAudioFile::SetConverterChannelLayout(this, (const AudioChannelLayout *)1, (ExtAudioFile *)((char *)this + 272));
        v56 = 0;
        v41 = *((_QWORD *)this + 19);
        v57 = 1886546285;
        v55 = 8;
        *(_QWORD *)&ioPropertyDataSize.mType = &v56;
        outPropertyData = &v57;
        v64 = (AudioClassDescription *)&v55;
        p_ioPropertyDataSize = &ioPropertyDataSize;
        *(_QWORD *)inSpecifier = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
        *(_QWORD *)&inSpecifier[8] = &outPropertyData;
        with_resolved(v41, (uint64_t (**)(uint64_t, uint64_t))inSpecifier);
      }
      else
      {
        if (!v25)
        {
          v29 = *((_DWORD *)this + 41);
          if (v29)
          {
            v30 = *((_DWORD *)this + 44);
            ioPropertyDataSize.mType = 1634037347;
            ioPropertyDataSize.mSubType = v30;
            ioPropertyDataSize.mManufacturer = v29;
            v31 = AudioConverterNewSpecific((const AudioStreamBasicDescription *)v6, (const AudioStreamBasicDescription *)((char *)this + 168), 1u, &ioPropertyDataSize, (AudioConverterRef *)this + 19);
            if (v31)
            {
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, v31);
                *(_DWORD *)inSpecifier = 136315906;
                *(_QWORD *)&inSpecifier[4] = "ExtAudioFile.cpp";
                *(_WORD *)&inSpecifier[12] = 1024;
                *(_DWORD *)&inSpecifier[14] = 726;
                v59 = 2080;
                p_outPropertyData = &outPropertyData;
                v61 = 2080;
                v62 = "create audio converter";
                _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", inSpecifier, 0x26u);
              }
              v32 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v32, "create audio converter", v31);
            }
          }
          else
          {
            v37 = AudioConverterNewWithOptions((AudioStreamBasicDescription *)v6, (const AudioStreamBasicDescription *)((char *)this + 168), 0, (_QWORD *)this + 19);
            if (v37)
            {
              v48 = v37;
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)&outPropertyData, v48);
                *(_DWORD *)inSpecifier = 136315906;
                *(_QWORD *)&inSpecifier[4] = "ExtAudioFile.cpp";
                *(_WORD *)&inSpecifier[12] = 1024;
                *(_DWORD *)&inSpecifier[14] = 728;
                v59 = 2080;
                p_outPropertyData = &outPropertyData;
                v61 = 2080;
                v62 = "create audio converter";
                _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", inSpecifier, 0x26u);
              }
              v49 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v49, "create audio converter", v48);
            }
          }
        }
        v38 = CADeprecated::CABufferList::New((uint64_t)"", *((_DWORD *)this + 59), *((_DWORD *)this + 63));
        CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 39, v38);
        ExtAudioFile::SetConverterChannelLayout(this, 0, (ExtAudioFile *)((char *)this + 272));
        ExtAudioFile::SetConverterChannelLayout(this, (const AudioChannelLayout *)1, (ExtAudioFile *)((char *)this + 264));
        if (*((_DWORD *)this + 8) == 3)
          ExtAudioFile::FileFormatChanged(this, 0, 0, 0);
      }
      v42 = *v24;
      if (*v24)
      {
        v55 = 4;
        v53 = 0;
        v57 = 1885627760;
        *(_QWORD *)&ioPropertyDataSize.mType = &v55;
        v56 = &v53;
        outPropertyData = &v57;
        v64 = &ioPropertyDataSize;
        p_ioPropertyDataSize = (AudioClassDescription *)&v56;
        *(_QWORD *)inSpecifier = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
        *(_QWORD *)&inSpecifier[8] = &outPropertyData;
        if (with_resolved(v42, (uint64_t (**)(uint64_t, uint64_t))inSpecifier))
          v43 = 1;
        else
          v43 = v53 == 0;
        v44 = !v43;
        *((_BYTE *)this + 160) = v44;
      }
    }
    *(double *)&v9 = ExtAudioFile::UpdateInternals(this, v27);
  }
  return *(double *)&v9;
}

void sub_18EF08860(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ExtAudioFile::SetConverterProperty(ExtAudioFile *this, int a2, int a3, _QWORD *a4, char a5, double a6)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  CAXException *exception;
  _QWORD *v13;
  int v14;
  int v15;
  _BYTE buf[18];
  __int16 v17;
  int **v18;
  __int16 v19;
  const char *v20;
  int *v21;
  int *v22;
  _QWORD **v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a2 == 1633906803)
  {
    if (!*a4)
      goto LABEL_7;
    v8 = *((_QWORD *)this + 19);
    v14 = a3;
    v15 = 1633906803;
    v13 = a4;
    v21 = &v15;
    v22 = &v14;
    v23 = &v13;
    *(_QWORD *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
    *(_QWORD *)&buf[8] = &v21;
    v9 = with_resolved(v8, (uint64_t (**)(uint64_t, uint64_t))buf);
  }
  else
  {
    v10 = *((_QWORD *)this + 19);
    v14 = a3;
    v15 = a2;
    v13 = a4;
    v21 = &v15;
    v22 = &v14;
    v23 = &v13;
    *(_QWORD *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
    *(_QWORD *)&buf[8] = &v21;
    v9 = with_resolved(v10, (uint64_t (**)(uint64_t, uint64_t))buf);
  }
  if ((a5 & 1) == 0 && v9)
  {
    v11 = v9;
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v21, v11);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ExtAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 769;
      v17 = 2080;
      v18 = &v21;
      v19 = 2080;
      v20 = "set audio converter property";
      _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "set audio converter property", v11);
  }
LABEL_7:
  ExtAudioFile::UpdateInternals(this, a6);
  if (*((_DWORD *)this + 8) == 3)
    ExtAudioFile::FileFormatChanged(this, 0, 0, 0);
}

void sub_18EF08A8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ExtAudioFile::SetConverterChannelLayout(ExtAudioFile *this, const AudioChannelLayout *a2, const CAAudioChannelLayout *a3)
{
  int v4;
  const AudioChannelLayout *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  CAXException *exception;
  unsigned int v15;
  unsigned int v16;
  CAXException *v17;
  uint64_t v18;
  int v19;
  int v20;
  _BYTE buf[18];
  __int16 v22;
  int **v23;
  __int16 v24;
  const char *v25;
  int *v26;
  int *v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a3)
  {
    v4 = (int)a2;
    if (CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(*(_QWORD *)a3 + 16), a2))
    {
      v7 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v8 = CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v7 + 16), v6) < 3;
        v7 = *(_QWORD *)a3;
      }
      else
      {
        v8 = 1;
      }
      v9 = *((_QWORD *)this + 19);
      if (v4)
      {
        if (v7)
          v10 = *(_DWORD *)(v7 + 12);
        else
          v10 = 0;
        v19 = v10;
        v20 = 1868786720;
        v18 = v7 + 16;
        v26 = &v20;
        v27 = &v19;
        v28 = &v18;
        *(_QWORD *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
        *(_QWORD *)&buf[8] = &v26;
        v12 = with_resolved(v9, (uint64_t (**)(uint64_t, uint64_t))buf);
        if (!v8 && v12 && v12 != 1869627199)
        {
          v13 = v12;
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)&v26, v13);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "ExtAudioFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 795;
            v22 = 2080;
            v23 = &v26;
            v24 = 2080;
            v25 = "couldn't set converter's output channel layout";
            _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(exception, "couldn't set converter's output channel layout", v13);
        }
      }
      else
      {
        if (v7)
          v11 = *(_DWORD *)(v7 + 12);
        else
          v11 = 0;
        v19 = v11;
        v20 = 1768123424;
        v18 = v7 + 16;
        v26 = &v20;
        v27 = &v19;
        v28 = &v18;
        *(_QWORD *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
        *(_QWORD *)&buf[8] = &v26;
        v15 = with_resolved(v9, (uint64_t (**)(uint64_t, uint64_t))buf);
        if (!v8 && v15 && v15 != 1869627199)
        {
          v16 = v15;
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)&v26, v16);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "ExtAudioFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 799;
            v22 = 2080;
            v23 = &v26;
            v24 = 2080;
            v25 = "couldn't set converter's input channel layout";
            _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          v17 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v17, "couldn't set converter's input channel layout", v16);
        }
      }
      if (*((_DWORD *)this + 8) == 3)
        ExtAudioFile::FileFormatChanged(this, 0, 0, 0);
    }
  }
}

void sub_18EF08DE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtAudioFile::GetConverterConfig(ExtAudioFile *this)
{
  int v1;
  CAXException *exception;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  int *v8;
  int v9;
  _BYTE buf[18];
  __int16 v11;
  _QWORD *v12;
  __int16 v13;
  const char *v14;
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  v5 = 8;
  v9 = 1633906803;
  v8 = &v5;
  v6 = 0;
  v7 = &v6;
  v15[0] = &v9;
  v15[1] = &v8;
  v15[2] = &v7;
  *(_QWORD *)buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
  *(_QWORD *)&buf[8] = v15;
  v1 = with_resolved((int)this, (uint64_t (**)(uint64_t, uint64_t))buf);
  if (v1)
  {
    v4 = v1;
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v15, v4);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ExtAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 812;
      v11 = 2080;
      v12 = v15;
      v13 = 2080;
      v14 = "get converter property settings";
      _os_log_impl(&dword_18EE07000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "get converter property settings", v4);
  }
  return v6;
}

void sub_18EF08F70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ExtAudioFile::ReadInputProc(ExtAudioFile *this, OpaqueAudioConverter *a2, AudioStreamPacketDescription **a3, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  AudioStreamPacketDescription **v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  AudioStreamPacketDescription *v19;
  UInt32 *p_mVariableFramesInPacket;
  uint64_t v21;
  UInt32 v22;
  UInt32 ioNumBytes;
  UInt32 ioNumPackets;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    v10 = a5 + 12;
    v11 = *((_DWORD *)a5 + 23);
  }
  else
  {
    v12 = *((_DWORD *)a5 + 70);
    if (!v12)
      return 4294900729;
    v11 = *((_DWORD *)a3 + 3) / v12;
    if (v11 >= *(_DWORD *)a2)
      v11 = *(_DWORD *)a2;
    v10 = a3;
  }
  if (a5[16] && v11 >= *((_DWORD *)a5 + 34))
    v11 = *((_DWORD *)a5 + 34);
  v13 = *((_DWORD *)a5 + 75);
  if (v11 >= v13)
    v14 = v13;
  else
    v14 = v11;
  ioNumPackets = ExtAudioFile::AlignIO((ExtAudioFile *)a5, v14);
  if (!ioNumPackets)
    goto LABEL_28;
  ioNumBytes = *((_DWORD *)v10 + 3);
  if (*((_BYTE *)a5 + 408))
    v15 = mach_absolute_time();
  else
    v15 = 0;
  v16 = AudioFileReadPacketData((AudioFileID)a5[2], *((_BYTE *)a5 + 29), &ioNumBytes, a5[16], (SInt64)a5[6], &ioNumPackets, v10[2]);
  if (*((_BYTE *)a5 + 408))
    a5[52] = (AudioStreamPacketDescription *)((char *)a5[52] + mach_absolute_time() - v15);
  if ((_DWORD)v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v27 = "ExtAudioFile.cpp";
      v28 = 1024;
      v29 = 1361;
      v30 = 1024;
      v31 = v16;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Error %d from AudioFileReadPackets!!!\n", buf, 0x18u);
    }
    return v16;
  }
  v17 = ioNumPackets;
  if (!ioNumPackets)
  {
LABEL_28:
    v16 = 0;
    *(_DWORD *)a2 = 0;
    *((_DWORD *)a3 + 3) = 0;
    return v16;
  }
  if (a4)
    *(_QWORD *)&a4->mNumberBuffers = a5[16];
  *((_DWORD *)a3 + 3) = ioNumBytes;
  a3[2] = v10[2];
  a5[6] = (AudioStreamPacketDescription *)((char *)a5[6] + v17);
  if (*((_DWORD *)a5 + 61) != 1)
  {
    v18 = *((_DWORD *)a5 + 47);
    if (v18)
    {
      v19 = (AudioStreamPacketDescription *)((char *)a5[7] + (v18 * v17));
    }
    else
    {
      v19 = a5[7];
      p_mVariableFramesInPacket = &a5[16]->mVariableFramesInPacket;
      v21 = v17;
      do
      {
        v22 = *p_mVariableFramesInPacket;
        p_mVariableFramesInPacket += 4;
        v19 = (AudioStreamPacketDescription *)((char *)v19 + v22);
        --v21;
      }
      while (v21);
    }
    a5[7] = v19;
  }
  v16 = 0;
  *(_DWORD *)a2 = v17;
  return v16;
}

caulk::thread *std::unique_ptr<caulk::thread>::reset[abi:ne180100](caulk::thread **a1, caulk::thread *a2)
{
  caulk::thread *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    caulk::thread::~thread(result);
    JUMPOUT(0x193FFE460);
  }
  return result;
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v3;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_18EF09274(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::thread_proxy<std::tuple<caulk::thread::attributes,ExtAudioFileAsyncWriteMgr::AddClient(ExtAudioFile *)::{lambda(void)#1},std::tuple<>>>(caulk::thread::attributes *a1)
{
  uint64_t v2;
  ExtAudioFile **v3;
  ExtAudioFile **v4;
  ExtAudioFile **v5;
  int v6;
  std::unique_lock<std::mutex> v8;

  caulk::thread::attributes::apply_to_this_thread(a1);
  v2 = *((_QWORD *)a1 + 8);
  do
  {
    v8.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v2;
    v8.__owns_ = 1;
    std::mutex::lock((std::mutex *)v2);
    std::condition_variable::wait((std::condition_variable *)(v2 + 64), &v8);
    v3 = *(ExtAudioFile ***)(v2 + 112);
    v4 = *(ExtAudioFile ***)(v2 + 120);
    v5 = v4;
    if (v3 == v4)
    {
      std::unique_ptr<caulk::thread>::reset[abi:ne180100]((caulk::thread **)(v2 + 136), 0);
    }
    else
    {
      do
      {
        if (*(ExtAudioFile ***)(v2 + 112) == v5)
          break;
        v6 = 0;
        v5 = *(ExtAudioFile ***)(v2 + 112);
        do
          v6 |= ExtAudioFile::PerformAsyncWrites(*v5++, 0);
        while (v5 != *(ExtAudioFile ***)(v2 + 120));
      }
      while ((v6 & 1) != 0);
    }
    if (v8.__owns_)
      std::mutex::unlock(v8.__m_);
  }
  while (v3 != v4);
  if (a1)
    std::default_delete<std::tuple<caulk::thread::attributes,ExtAudioFileAsyncWriteMgr::AddClient(ExtAudioFile *)::{lambda(void)#1},std::tuple<>>>::operator()[abi:ne180100]((uint64_t)a1);
  return 0;
}

void sub_18EF0938C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  uint64_t v10;

  if (v10)
    std::default_delete<std::tuple<caulk::thread::attributes,ExtAudioFileAsyncWriteMgr::AddClient(ExtAudioFile *)::{lambda(void)#1},std::tuple<>>>::operator()[abi:ne180100](v10);
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<std::tuple<caulk::thread::attributes,ExtAudioFileAsyncWriteMgr::AddClient(ExtAudioFile *)::{lambda(void)#1},std::tuple<>>>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 24))
    {
      if (*(char *)(result + 23) < 0)
        operator delete(*(void **)result);
    }
    JUMPOUT(0x193FFE460);
  }
  return result;
}

CFMutableDictionaryRef ExtAudioFile::GetInstrumentation(ExtAudioFile *this)
{
  uint64_t v2;
  CFMutableDictionaryRef v3;
  int v5;
  CFTypeRef cf;
  CFMutableDictionaryRef Mutable;
  __int16 v8;
  _QWORD v9[3];
  uint64_t (*v10[3])(uint64_t, uint64_t);
  CFTypeRef *p_cf;
  int *v12;
  int v13;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = 256;
  CACFDictionary::AddUInt32((CACFDictionary *)&Mutable, CFSTR("ms in I/O"));
  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
    cf = 0;
    v5 = 8;
    v13 = 610889316;
    v12 = &v5;
    p_cf = &cf;
    v9[0] = &v13;
    v9[1] = &v12;
    v9[2] = &p_cf;
    v10[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
    v10[1] = (uint64_t (*)(uint64_t, uint64_t))v9;
    with_resolved(v2, v10);
    if (cf)
    {
      CACFDictionary::AddCFType((CACFDictionary *)&Mutable, CFSTR("converter"), cf);
      CFRelease(cf);
    }
  }
  v3 = Mutable;
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v3;
}

void sub_18EF09520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

const void *retainC(const __CFAllocator *a1, const void *a2)
{
  return a2;
}

CFStringRef copyDescriptionC(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<%p>"), a1);
}

void WAVEAudioStream::~WAVEAudioStream(WAVEAudioStream *this)
{
  WAVEAudioStream::~WAVEAudioStream(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E2906620;
  v2 = (void *)*((_QWORD *)this + 45);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 45) = 0;
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

uint64_t AudioFileStreamObject::Flush(AudioFileStreamObject *this)
{
  return 0;
}

uint64_t AudioFileStreamObject::SetDataFormat(AudioFileStreamObject *this, const AudioStreamBasicDescription *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *(_OWORD *)&a2->mSampleRate;
  v3 = *(_OWORD *)&a2->mBytesPerPacket;
  *((_QWORD *)this + 7) = *(_QWORD *)&a2->mBitsPerChannel;
  *(_OWORD *)((char *)this + 40) = v3;
  *(_OWORD *)((char *)this + 24) = v2;
  return 0;
}

uint64_t AudioFileStreamObject::SetFormatList(char **this, unsigned int a2, const AudioFormatListItem *a3)
{
  unsigned int v5;
  _QWORD *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;

  v5 = a2 / 0x30;
  v6 = this + 8;
  if (0xAAAAAAAAAAAAAAABLL * ((this[9] - this[8]) >> 4) != a2 / 0x30uLL)
    std::vector<AudioFormatListItem>::resize(this + 8, a2 / 0x30uLL);
  if (a2 >= 0x30)
  {
    v7 = 0;
    if (v5 <= 1)
      v8 = 1;
    else
      v8 = v5;
    v9 = 48 * v8;
    do
    {
      v10 = (_OWORD *)(*v6 + v7);
      v11 = *(_OWORD *)&a3[v7 / 0x30].mASBD.mSampleRate;
      v12 = *(_OWORD *)&a3[v7 / 0x30].mASBD.mBitsPerChannel;
      v10[1] = *(_OWORD *)&a3[v7 / 0x30].mASBD.mBytesPerPacket;
      v10[2] = v12;
      *v10 = v11;
      v7 += 48;
    }
    while (v9 != v7);
  }
  return 0;
}

uint64_t AudioFileStreamObject::GetNumPackets(AudioFileStreamObject *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t AudioFileStreamObject::SetNumPackets(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 96) = a2;
  return this;
}

uint64_t AudioFileStreamObject::GetNumBytes(AudioFileStreamObject *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t AudioFileStreamObject::SetNumBytes(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 88) = a2;
  return this;
}

uint64_t WAVEAudioStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  uint64_t result;
  void (*v11)(_QWORD, _QWORD, uint64_t, unsigned int *);
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned __int8 *v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  AudioFileFormatRegistry *AudioFileFormatRegistry;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  unsigned int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  size_t v54;
  size_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  void (*v59)(_QWORD, _QWORD, uint64_t, unsigned int *);
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD, _QWORD, uint64_t, unsigned int *);
  void (*v63)(_QWORD, _QWORD, uint64_t, unsigned int *);
  uint64_t v64;
  void (*v65)(_QWORD, _QWORD, uint64_t, unsigned int *);
  int v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD, _QWORD, uint64_t, unsigned int *);
  uint64_t v70;
  void (*v71)(_QWORD, _QWORD, uint64_t, unsigned int *);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  int v77;
  int v78;
  unsigned int v79;

  v4 = *(_DWORD *)(a1 + 236);
  if (v4 > 110)
  {
    switch(v4)
    {
      case 111:
        v18 = *(_DWORD *)(a1 + 256);
        v19 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_24;
      case 153:
        v20 = *(_DWORD *)(a1 + 256);
        v21 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_52;
      case 276:
        v8 = *(_DWORD *)(a1 + 256);
        v9 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_60;
    }
    goto LABEL_21;
  }
  if (v4 == -1)
    return 0;
  if (!v4)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v79 = 1;
    if (!*(_BYTE *)(v6 + 104))
    {
      *(_BYTE *)(v6 + 104) = 1;
      v11 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v6 + 24);
      if (v11)
      {
        v11(*(_QWORD *)(v6 + 40), *(unsigned int *)(v6 + 8), 1717988724, &v79);
        v6 = *(_QWORD *)(a1 + 8);
      }
    }
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(v6 + 96);
    v5 = 12;
    *(_DWORD *)(a1 + 256) = 12;
    v7 = (unsigned __int8 *)(a1 + 332);
    *(_QWORD *)(a1 + 264) = a1 + 332;
    goto LABEL_15;
  }
  if (v4 != 92)
  {
LABEL_21:
    result = 0;
    goto LABEL_72;
  }
  v5 = *(_DWORD *)(a1 + 256);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned __int8 **)(a1 + 264);
LABEL_15:
  v79 = v5;
  StreamBuffer::Copy((_QWORD *)(v6 + 72), &v79, v7);
  v12 = v79;
  v13 = *(_DWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 264) += v79;
  v14 = v13 - v12;
  *(_DWORD *)(a1 + 256) = v14;
  if (v14)
  {
    result = 0;
    v22 = 92;
    goto LABEL_76;
  }
  v15 = *(_DWORD *)(a1 + 332);
  *(_DWORD *)(a1 + 332) = bswap32(v15);
  v16 = *(_DWORD *)(a1 + 340);
  *(_DWORD *)(a1 + 340) = bswap32(v16);
  if (v15 != 1179011410 || v16 != 1163280727)
  {
LABEL_71:
    result = 1685348671;
    *(_BYTE *)(a1 + 177) = 1;
    goto LABEL_72;
  }
  v17 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 344) = v17 + *(unsigned int *)(a1 + 336) + 8;
  *(_DWORD *)(a1 + 16) = 1463899717;
  *(_QWORD *)(a1 + 296) = v17 + 12;
  while (1)
  {
    v18 = 8;
    *(_DWORD *)(a1 + 256) = 8;
    v19 = (unsigned __int8 *)(a1 + 352);
    *(_QWORD *)(a1 + 264) = a1 + 352;
LABEL_24:
    v79 = v18;
    StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), &v79, v19);
    v23 = v79;
    v24 = *(_DWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 264) += v79;
    v25 = v24 - v23;
    *(_DWORD *)(a1 + 256) = v25;
    if (v25)
    {
      result = 0;
      v22 = 111;
      goto LABEL_76;
    }
    v26 = bswap32(*(_DWORD *)(a1 + 352));
    *(_DWORD *)(a1 + 352) = v26;
    v27 = *(unsigned int *)(a1 + 356);
    v28 = *(_DWORD *)(a1 + 356);
    v29 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 296) = v29 + 8;
    if (v26 != 1718449184)
      break;
    if (v28 > 0xFFFFFFF7 || (unint64_t)(v29 + v27 + 16) > *(_QWORD *)(a1 + 344) || v27 <= 0xF)
      goto LABEL_71;
    v43 = (int)v27 + 8;
    if (v43 <= 0x30)
      LODWORD(v43) = 48;
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 360), v43, 1);
    v44 = *(_QWORD **)(a1 + 360);
    if (!v44)
    {
      result = 1685348671;
      *(_BYTE *)(a1 + 177) = 1;
      goto LABEL_72;
    }
    *(_QWORD *)(a1 + 368) = v44;
    *v44 = *(_QWORD *)(a1 + 352);
    v20 = *(_DWORD *)(a1 + 356);
    *(_DWORD *)(a1 + 256) = v20;
    v21 = (unsigned __int8 *)(*(_QWORD *)(a1 + 360) + 8);
    *(_QWORD *)(a1 + 264) = v21;
LABEL_52:
    v79 = v20;
    v45 = (uint64_t *)(a1 + 8);
    StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), &v79, v21);
    v46 = v79;
    v47 = *(_DWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 264) += v79;
    v48 = v47 - v46;
    *(_DWORD *)(a1 + 256) = v48;
    if (v48)
    {
      result = 0;
      v22 = 153;
      goto LABEL_76;
    }
    v49 = *(_QWORD *)(a1 + 368);
    v50 = *(unsigned __int16 *)(v49 + 8);
    if (v50 == 2)
      goto LABEL_63;
    if (v50 == 17)
    {
      if (*(int *)(v49 + 4) < 15)
        goto LABEL_64;
LABEL_63:
      *(_BYTE *)(a1 + 380) = 1;
      goto LABEL_64;
    }
    if (v50 == 65534 && *(_DWORD *)(v49 + 4) >= 0x18u && *(unsigned __int16 *)(v49 + 24) >= 6u)
      *(_DWORD *)(a1 + 376) = *(_DWORD *)(v49 + 28);
LABEL_64:
    if (*(_DWORD *)(v49 + 12) >= 0xFFFF0000)
      *(_DWORD *)(v49 + 12) = (unsigned __int16)*(_DWORD *)(v49 + 12);
    if (*(_BYTE *)(a1 + 380))
    {
      v54 = *(unsigned int *)(a1 + 356);
      v55 = (v54 + 28);
      *(_DWORD *)(a1 + 128) = v55;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 120), v55, 0);
      v56 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)v56 = 0x616D72660C000000;
      v57 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 368) + 8) | 0x6D730000);
      *(_DWORD *)(v56 + 8) = v57;
      *(_DWORD *)(v56 + 12) = bswap32(v54 + 8);
      *(_DWORD *)(v56 + 16) = v57;
      memcpy((void *)(v56 + 20), (const void *)(*(_QWORD *)(a1 + 360) + 8), v54);
      *(_QWORD *)(v56 + (*(_DWORD *)(a1 + 128) - 8)) = 0x8000000;
LABEL_68:
      v58 = *v45;
      v79 = 1;
      *(_BYTE *)(v58 + 108) = 1;
      v59 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v58 + 24);
      if (v59)
        v59(*(_QWORD *)(v58 + 40), *(unsigned int *)(v58 + 8), 1835493731, &v79);
    }
LABEL_70:
    v60 = *(_QWORD *)(a1 + 296) + *(unsigned int *)(a1 + 356);
    *(_QWORD *)(a1 + 296) = v60;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) = v60;
  }
  if (v26 == 2002876005)
  {
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 120), (int)v27, 0);
    v8 = *(_DWORD *)(a1 + 356);
    *(_DWORD *)(a1 + 256) = v8;
    v9 = *(unsigned __int8 **)(a1 + 120);
    *(_QWORD *)(a1 + 264) = v9;
LABEL_60:
    v79 = v8;
    v45 = (uint64_t *)(a1 + 8);
    StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), &v79, v9);
    v51 = v79;
    v52 = *(_DWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 264) += v79;
    v53 = v52 - v51;
    *(_DWORD *)(a1 + 256) = v53;
    if (v53)
    {
      result = 0;
      v22 = 276;
      goto LABEL_76;
    }
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a1 + 356);
    goto LABEL_68;
  }
  if (v26 != 1684108385)
    goto LABEL_70;
  if (!*(_QWORD *)(a1 + 368))
    goto LABEL_71;
  *(_QWORD *)(a1 + 104) = v29 + 8;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  FillDescriptionFromWAVEFormat(a1 + 24, *(_DWORD *)(a1 + 128), *(void **)(a1 + 120), *(_QWORD *)(a1 + 368), 0);
  if (*(_DWORD *)(a1 + 32) == 778924083)
  {
    AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
    v31 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, 0x4D504733u);
    if (v31)
    {
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 120))(v31);
      if (v32)
      {
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 144))(v32);
        if (v33)
        {
          v34 = 0;
          *(_QWORD *)a2 = v33;
          *(_OWORD *)(a2 + 8) = xmmword_18F116F80;
          v35 = *(_QWORD *)(a1 + 8);
          v36 = *(_QWORD *)(v35 + 88);
          v37 = *(_QWORD *)(v35 + 96);
          v38 = v36 + *(unsigned int *)(v35 + 80);
          v39 = v37 < v36 || v38 <= v37;
          v40 = v39;
          v41 = v38 - v37;
          if (!v39 && v41)
            v34 = *(_QWORD *)(v35 + 72) + (v37 - v36);
          result = 0;
          *(_QWORD *)(a2 + 32) = v34;
          if (v40)
            v42 = 0;
          else
            v42 = v41;
          goto LABEL_105;
        }
      }
    }
    result = 1954115647;
LABEL_72:
    v22 = -1;
LABEL_76:
    *(_DWORD *)(a1 + 236) = v22;
  }
  else
  {
    v61 = *(_QWORD *)(a1 + 8);
    v79 = 1;
    if (!*(_BYTE *)(v61 + 105))
    {
      *(_BYTE *)(v61 + 105) = 1;
      v62 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v61 + 24);
      if (v62)
      {
        v62(*(_QWORD *)(v61 + 40), *(unsigned int *)(v61 + 8), 1684434292, &v79);
        v61 = *(_QWORD *)(a1 + 8);
      }
    }
    v79 = 1;
    v63 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v61 + 24);
    if (v63)
    {
      v63(*(_QWORD *)(v61 + 40), *(unsigned int *)(v61 + 8), 1650683508, &v79);
      v64 = *(_QWORD *)(a1 + 8);
      v65 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v64 + 24);
      v79 = 1;
      if (v65)
        v65(*(_QWORD *)(v64 + 40), *(unsigned int *)(v64 + 8), 1685022310, &v79);
    }
    else
    {
      v79 = 1;
    }
    v66 = *(_DWORD *)(a1 + 40);
    if (v66)
    {
      *(_DWORD *)(a1 + 112) = v66;
      v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v67 / *(unsigned int *)(a1 + 40));
      v68 = *(_QWORD *)(a1 + 8);
      v79 = 1;
      v69 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v68 + 24);
      if (v69)
        v69(*(_QWORD *)(v68 + 40), *(unsigned int *)(v68 + 8), 1885564532, &v79);
    }
    v70 = *(_QWORD *)(a1 + 8);
    v79 = 1;
    if (!*(_DWORD *)(v70 + 112))
    {
      *(_DWORD *)(v70 + 112) = 1;
      v71 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v70 + 24);
      if (v71)
      {
        v71(*(_QWORD *)(v70 + 40), *(unsigned int *)(v70 + 8), 1919247481, &v79);
        v70 = *(_QWORD *)(a1 + 8);
      }
    }
    v72 = 0;
    *(_QWORD *)a2 = a1;
    *(_OWORD *)(a2 + 8) = xmmword_18F116F70;
    v73 = *(_QWORD *)(v70 + 88);
    v74 = *(_QWORD *)(v70 + 96);
    v75 = v73 + *(unsigned int *)(v70 + 80);
    v76 = v74 < v73 || v75 <= v74;
    v77 = v76;
    v78 = v75 - v74;
    if (!v76 && v78)
      v72 = *(_QWORD *)(v70 + 72) + (v74 - v73);
    result = 0;
    *(_QWORD *)(a2 + 32) = v72;
    if (v77)
      v42 = 0;
    else
      v42 = v78;
LABEL_105:
    *(_DWORD *)(a2 + 24) = v42;
  }
  return result;
}

uint64_t AudioFileStreamObject::RestrictsRandomAccess(AudioFileStreamObject *this)
{
  return 0;
}

uint64_t AudioFileStreamObject::HandleDiscontinuity(AudioFileStreamObject *this)
{
  return 1;
}

_QWORD *StreamBuffer::Copy(_QWORD *this, unsigned int *a2, unsigned __int8 *__dst)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v11;
  unsigned int v12;

  v4 = this[2];
  v5 = this[3];
  v6 = v4 + *((unsigned int *)this + 2);
  v7 = v6 - v5;
  v8 = v5 - v4;
  if (v5 < v4 || v6 <= v5 || (_DWORD)v6 == (_DWORD)v5)
  {
    *a2 = 0;
  }
  else
  {
    v11 = this;
    v12 = *a2;
    if (*a2 > v7)
    {
      *a2 = v7;
      v12 = v6 - v5;
    }
    this = memcpy(__dst, (const void *)(*this + v8), v12);
    v11[3] += *a2;
  }
  return this;
}

void std::vector<AudioFormatListItem>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  size_t v22;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v21 = &v3[48 * a2];
    goto LABEL_17;
  }
  v7 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 4) >= v6)
  {
    v22 = 48 * ((48 * v6 - 48) / 0x30) + 48;
    bzero(a1[1], v22);
    v21 = &v4[v22];
LABEL_17:
    a1[1] = v21;
    return;
  }
  if (a2 > 0x555555555555555)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 4);
  v9 = 2 * v8;
  if (2 * v8 <= a2)
    v9 = a2;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v10 = 0x555555555555555;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v10);
  v12 = &v11[48 * v5];
  v14 = &v11[48 * v13];
  v15 = 48 * ((48 * v6 - 48) / 0x30) + 48;
  bzero(v12, v15);
  v16 = &v12[v15];
  v18 = *a1;
  v17 = a1[1];
  if (v17 != *a1)
  {
    do
    {
      v19 = *((_OWORD *)v17 - 3);
      v20 = *((_OWORD *)v17 - 1);
      *((_OWORD *)v12 - 2) = *((_OWORD *)v17 - 2);
      *((_OWORD *)v12 - 1) = v20;
      *((_OWORD *)v12 - 3) = v19;
      v12 -= 48;
      v17 -= 48;
    }
    while (v17 != v18);
    v17 = *a1;
  }
  *a1 = v12;
  a1[1] = v16;
  a1[2] = v14;
  if (v17)
    operator delete(v17);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a1);
}

uint64_t AudioFormatProperty_FormatName(AudioStreamBasicDescription *a1, const __CFString **a2)
{
  const __CFAllocator *v4;
  __CFString *Mutable;
  const __CFString *v6;
  __CFBundle *v7;
  signed int mFormatID;
  BOOL v9;
  unsigned int v10;
  const __CFString *v13;
  uint64_t v14;
  const __CFString *v15;
  int v16;
  int v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  const __CFString *v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v33;
  AudioFormatFlags mFormatFlags;
  const __CFString *v35;
  const __CFString *v36;
  const __CFString *v37;
  CFMutableStringRef *p_theString;
  CFStringRef *v39;
  CFMutableStringRef theString;
  CFStringRef Copy;
  char __str[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  Copy = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v39 = &Copy;
  theString = Mutable;
  p_theString = &theString;
  v7 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    Mutable = (__CFString *)pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v7 = (__CFBundle *)sAudioToolboxBundle;
  }
  mFormatID = a1->mFormatID;
  v9 = (mFormatID & 0xFFFF0000) == 0x6D730000 || (mFormatID & 0xFFFF0000) == 1297285120;
  v10 = (unsigned __int16)a1->mFormatID;
  if (v9 && mFormatID != 1836253269 && v10 <= 0x1400)
  {
    v14 = 1718449215;
    if ((unsigned __int16)a1->mFormatID > 0xFFu)
    {
      if ((unsigned __int16)a1->mFormatID > 0xFFFu)
      {
        switch((unsigned __int16)a1->mFormatID)
        {
          case 0x1000u:
            v15 = CFSTR("OLIGSM");
            break;
          case 0x1001u:
            v15 = CFSTR("OLIADPCM");
            break;
          case 0x1002u:
            v15 = CFSTR("OLICELP");
            break;
          case 0x1003u:
            v15 = CFSTR("OLISBC");
            break;
          case 0x1004u:
            v15 = CFSTR("OLIOPR");
            break;
          default:
            if (v10 == 4352)
            {
              v15 = CFSTR("Lernout & Hauspie");
            }
            else
            {
              if (v10 != 5120)
                goto LABEL_253;
              v15 = CFSTR("NORRIS");
            }
            break;
        }
      }
      else if ((unsigned __int16)a1->mFormatID <= 0x202u)
      {
        switch(v10)
        {
          case 0x100u:
            v15 = CFSTR("RHETOREX ADPCM");
            break;
          case 0x200u:
            v15 = CFSTR("CREATIVE ADPCM");
            break;
          case 0x202u:
            v15 = CFSTR("CREATIVE FASTSPEECH8");
            break;
          default:
            goto LABEL_253;
        }
      }
      else if ((unsigned __int16)a1->mFormatID > 0x2FFu)
      {
        if (v10 == 768)
        {
          v15 = CFSTR("FM TOWNS SND");
        }
        else
        {
          if (v10 != 1024)
            goto LABEL_253;
          v15 = CFSTR("BTV DIGITAL");
        }
      }
      else if (v10 == 515)
      {
        v15 = CFSTR("CREATIVE FASTSPEECH10");
      }
      else
      {
        if (v10 != 544)
          goto LABEL_253;
        v15 = CFSTR("QUARTERDECK");
      }
    }
    else
    {
      v15 = CFSTR("Microsoft ADPCM");
      switch((unsigned __int16)a1->mFormatID)
      {
        case 2u:
          break;
        case 3u:
        case 4u:
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x27u:
        case 0x28u:
        case 0x29u:
        case 0x2Au:
        case 0x2Bu:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x3Eu:
        case 0x3Fu:
        case 0x42u:
        case 0x43u:
        case 0x44u:
        case 0x45u:
        case 0x46u:
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Au:
        case 0x4Bu:
        case 0x4Cu:
        case 0x4Du:
        case 0x4Eu:
        case 0x4Fu:
        case 0x51u:
        case 0x52u:
        case 0x53u:
        case 0x54u:
        case 0x56u:
        case 0x57u:
        case 0x58u:
        case 0x59u:
        case 0x5Au:
        case 0x5Bu:
        case 0x5Cu:
        case 0x5Du:
        case 0x5Eu:
        case 0x5Fu:
          goto LABEL_253;
        case 5u:
          v15 = CFSTR("IBM CVSD");
          break;
        case 0x10u:
          v15 = CFSTR("OKI ADPCM");
          break;
        case 0x11u:
          v15 = CFSTR("DVI ADPCM");
          break;
        case 0x12u:
          v15 = CFSTR("MEDIASPACE ADPCM");
          break;
        case 0x13u:
          v15 = CFSTR("SIERRA ADPCM");
          break;
        case 0x14u:
          v15 = CFSTR("G723 ADPCM");
          break;
        case 0x15u:
        case 0x34u:
          v15 = CFSTR("DIGISTD");
          break;
        case 0x16u:
          v15 = CFSTR("DIGIFIX");
          break;
        case 0x17u:
          v15 = CFSTR("DIALOGIC OKI ADPCM");
          break;
        case 0x18u:
          v15 = CFSTR("MEDIAVISION ADPCM");
          break;
        case 0x20u:
          v15 = CFSTR("YAMAHA ADPCM");
          break;
        case 0x21u:
          v15 = CFSTR("SONARC");
          break;
        case 0x22u:
          v15 = CFSTR("DSPGROUP TRUESPEECH");
          break;
        case 0x23u:
          v15 = CFSTR("ECHOSC1");
          break;
        case 0x24u:
          v15 = CFSTR("AUDIOFILE AF36");
          break;
        case 0x25u:
          v15 = CFSTR("APTX");
          break;
        case 0x26u:
          v15 = CFSTR("AUDIOFILE AF10");
          break;
        case 0x30u:
          v15 = CFSTR("DOLBY AC2");
          break;
        case 0x31u:
          v15 = CFSTR("GSM610");
          break;
        case 0x32u:
          v15 = CFSTR("MSNAUDIO");
          break;
        case 0x33u:
          v15 = CFSTR("ANTEX ADPCME");
          break;
        case 0x35u:
          v15 = CFSTR("DIGIREAL");
          break;
        case 0x36u:
          v15 = CFSTR("DIGIADPCM");
          break;
        case 0x37u:
          v15 = CFSTR("CONTROL RES CR10");
          break;
        case 0x38u:
          v15 = CFSTR("NMS VBXADPCM");
          break;
        case 0x39u:
          v15 = CFSTR("CS IMAADPCM");
          break;
        case 0x3Au:
          v15 = CFSTR("ECHOSC3");
          break;
        case 0x3Bu:
          v15 = CFSTR("ROCKWELL ADPCM");
          break;
        case 0x3Cu:
          v15 = CFSTR("ROCKWELL DIGITALK");
          break;
        case 0x3Du:
          v15 = CFSTR("XEBEC");
          break;
        case 0x40u:
          v15 = CFSTR("G721 ADPCM");
          break;
        case 0x41u:
          v15 = CFSTR("G728 CELP");
          break;
        case 0x50u:
          v15 = CFSTR("MPEG");
          break;
        case 0x55u:
          v15 = CFSTR("MPEGLAYER3");
          break;
        case 0x60u:
          v15 = CFSTR("CIRRUS");
          break;
        case 0x61u:
          v15 = CFSTR("ESPCM");
          break;
        case 0x62u:
          v15 = CFSTR("VOXWARE");
          break;
        case 0x63u:
          v15 = CFSTR("CANOPUS ATRAC");
          break;
        case 0x64u:
          v15 = CFSTR("G726 ADPCM");
          break;
        case 0x65u:
          v15 = CFSTR("G722 ADPCM");
          break;
        case 0x66u:
          v15 = CFSTR("DSAT");
          break;
        case 0x67u:
          v15 = CFSTR("DSAT DISPLAY");
          break;
        default:
          if (v10 != 128)
            goto LABEL_253;
          v15 = CFSTR("SOFTSOUND");
          break;
      }
    }
    v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v15, CFSTR("FormatNames"), v7, v6);
    goto LABEL_247;
  }
  if (mFormatID > 1836069683)
  {
    if (mFormatID > 1903522656)
    {
      if (mFormatID <= 1970037110)
      {
        if (mFormatID > 1936487266)
        {
          if (mFormatID <= 1936745847)
          {
            if (mFormatID == 1936487267)
            {
              v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG-4 SLS (HD-AAC)"), CFSTR("FormatNames"), v7, v6);
              goto LABEL_247;
            }
            if (mFormatID == 1936487278)
            {
              v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG-4 SLS Non-Core"), CFSTR("FormatNames"), v7, v6);
              goto LABEL_247;
            }
          }
          else
          {
            switch(mFormatID)
            {
              case 1936745848:
                v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Speex"), CFSTR("FormatNames"), v7, v6);
                goto LABEL_247;
              case 1953790320:
                v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("TTY"), CFSTR("FormatNames"), v7, v6);
                goto LABEL_247;
              case 1953986161:
                v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("TwinVQ"), CFSTR("FormatNames"), v7, v6);
                goto LABEL_247;
            }
          }
LABEL_167:
          RegistryAccess::instance((RegistryAccess *)Mutable);
          v25 = qword_1ECEF4E20;
          os_unfair_recursive_lock_lock_with_options();
          v26 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 16))(v25, a1->mFormatID, 1819304813, 0, 0);
          if (!v26
            && (v26 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v25 + 16))(v25, 1819304813, a1->mFormatID, 0, 0)) == 0|| (v27 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26)) == 0)
          {
            v14 = 1718449215;
            os_unfair_recursive_lock_unlock();
            goto LABEL_253;
          }
          Copy = CFStringCreateCopy(v4, v27);
          os_unfair_recursive_lock_unlock();
          goto LABEL_248;
        }
        if (mFormatID > 1935767393)
        {
          if (mFormatID == 1935767394)
          {
            v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("AMR Wideband"), CFSTR("FormatNames"), v7, v6);
            goto LABEL_247;
          }
          if (mFormatID == 1936029299)
          {
            v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("EVS"), CFSTR("FormatNames"), v7, v6);
            goto LABEL_247;
          }
          goto LABEL_167;
        }
        if (mFormatID != 1903522657)
        {
          if (mFormatID == 1935764850)
          {
            v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("AMR Narrowband"), CFSTR("FormatNames"), v7, v6);
            goto LABEL_247;
          }
          goto LABEL_167;
        }
LABEL_116:
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("xHE-AAC"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      }
      if (mFormatID <= 2053202791)
      {
        if (mFormatID > 1987015265)
        {
          if (mFormatID == 1987015266)
          {
            v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Vorbis"), CFSTR("FormatNames"), v7, v6);
            goto LABEL_247;
          }
          if (mFormatID != 2053202275)
          {
            v16 = 2053202739;
            goto LABEL_136;
          }
LABEL_155:
          v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG-4 AAC"), CFSTR("FormatNames"), v7, v6);
          goto LABEL_247;
        }
        if (mFormatID == 1970037111)
        {
          v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("\\U03BC-Law 2:1"), CFSTR("FormatNames"), v7, v6);
          goto LABEL_247;
        }
        v17 = 1970495843;
        goto LABEL_115;
      }
      if (mFormatID > 2053319474)
      {
        if (mFormatID == 2053319475)
          goto LABEL_128;
        if (mFormatID == 2053464883)
          goto LABEL_141;
        v22 = 2053923171;
        goto LABEL_77;
      }
      if (mFormatID != 2053202792)
      {
        v24 = 2053202800;
        goto LABEL_147;
      }
      goto LABEL_149;
    }
    if (mFormatID > 1902207330)
    {
      if (mFormatID > 1902211170)
      {
        if (mFormatID > 1902469938)
        {
          if (mFormatID == 1902469939)
            goto LABEL_141;
          if (mFormatID == 1902537827)
            goto LABEL_140;
          v22 = 1902928227;
          goto LABEL_77;
        }
        if (mFormatID != 1902211171)
        {
          v23 = 1902324531;
          goto LABEL_127;
        }
        goto LABEL_178;
      }
      if (mFormatID > 1902207847)
      {
        if (mFormatID != 1902207848)
        {
          v24 = 1902207856;
LABEL_147:
          if (mFormatID == v24)
          {
LABEL_148:
            v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG-4 HE AAC V2"), CFSTR("FormatNames"), v7, v6);
            goto LABEL_247;
          }
          goto LABEL_167;
        }
LABEL_149:
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG-4 HE AAC"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      }
      if (mFormatID == 1902207331)
        goto LABEL_155;
      v16 = 1902207795;
    }
    else
    {
      if (mFormatID > 1885430631)
      {
        if (mFormatID > 1885547314)
        {
          if (mFormatID == 1885547315)
            goto LABEL_128;
          if (mFormatID == 1885692723)
            goto LABEL_141;
          v17 = 1886745441;
LABEL_115:
          if (mFormatID != v17)
            goto LABEL_167;
          goto LABEL_116;
        }
        if (mFormatID != 1885430632)
        {
          v24 = 1885430640;
          goto LABEL_147;
        }
        goto LABEL_149;
      }
      if (mFormatID <= 1885430114)
      {
        if (mFormatID == 1836069684)
        {
          v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MP3onMP4"), CFSTR("FormatNames"), v7, v6);
          goto LABEL_247;
        }
        if (mFormatID == 1869641075)
        {
          v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Opus"), CFSTR("FormatNames"), v7, v6);
          goto LABEL_247;
        }
        goto LABEL_167;
      }
      if (mFormatID == 1885430115)
        goto LABEL_155;
      v16 = 1885430579;
    }
LABEL_136:
    if (mFormatID != v16)
      goto LABEL_167;
    goto LABEL_137;
  }
  if (mFormatID > 1633889586)
  {
    if (mFormatID > 1685481783)
    {
      if (mFormatID > 1752594530)
      {
        if (mFormatID <= 1768775987)
        {
          if (mFormatID == 1752594531)
          {
            v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("HVXC"), CFSTR("FormatNames"), v7, v6);
            goto LABEL_247;
          }
          if (mFormatID == 1768710755)
          {
            v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("iLBC"), CFSTR("FormatNames"), v7, v6);
            goto LABEL_247;
          }
        }
        else
        {
          switch(mFormatID)
          {
            case 1768775988:
              v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("IMA 4:1"), CFSTR("FormatNames"), v7, v6);
              goto LABEL_247;
            case 1818440480:
              v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("LC3"), CFSTR("FormatNames"), v7, v6);
              goto LABEL_247;
            case 1819304813:
              Copy = (CFStringRef)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Linear PCM"), CFSTR("FormatNames"), v7, v6);
              if (a1->mBitsPerChannel)
              {
                snprintf(__str, 0x80uLL, ", %u ", a1->mBitsPerChannel);
                CFStringAppendCString(theString, __str, 0x8000100u);
                v19 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("bit"), CFSTR("FormatNames"), v7, v18);
                CFStringAppend(theString, v19);
                CFRelease(v19);
                if (a1->mBitsPerChannel >= 9)
                {
                  CFStringAppendCString(theString, " ", 0x8000100u);
                  if ((a1->mFormatFlags & 2) != 0)
                    v21 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("big-endian"), CFSTR("FormatNames"), v7, v20);
                  else
                    v21 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("little-endian"), CFSTR("FormatNames"), v7, v20);
                  CFStringAppend(theString, v21);
                  CFRelease(v21);
                }
                CFStringAppendCString(theString, " ", 0x8000100u);
                mFormatFlags = a1->mFormatFlags;
                if ((mFormatFlags & 1) != 0)
                {
                  v37 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("floating point"), CFSTR("FormatNames"), v7, v33);
                  CFStringAppend(theString, v37);
                  CFRelease(v37);
                }
                else
                {
                  if ((mFormatFlags & 4) != 0)
                    v35 = CFSTR("signed integer");
                  else
                    v35 = CFSTR("unsigned integer");
                  v36 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v35, CFSTR("FormatNames"), v7, v33);
                  CFStringAppend(theString, v36);
                  CFRelease(v36);
                }
              }
              goto LABEL_248;
          }
        }
        goto LABEL_167;
      }
      if (mFormatID <= 1700998450)
      {
        if (mFormatID == 1685481784)
        {
          v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("DVI8"), CFSTR("FormatNames"), v7, v6);
          goto LABEL_247;
        }
        v23 = 1700997939;
LABEL_127:
        if (mFormatID != v23)
          goto LABEL_167;
LABEL_128:
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Dolby Atmos"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      }
      if (mFormatID != 1700998451)
      {
        if (mFormatID != 1718378851)
          goto LABEL_167;
LABEL_140:
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("FLAC"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      }
LABEL_141:
      v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Dolby Digital Plus"), CFSTR("FormatNames"), v7, v6);
      goto LABEL_247;
    }
    if (mFormatID <= 1634754914)
    {
      if (mFormatID > 1634492790)
      {
        if (mFormatID == 1634492791)
        {
          v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("A-Law 2:1"), CFSTR("FormatNames"), v7, v6);
          goto LABEL_247;
        }
        if (mFormatID == 1634497332)
        {
          v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG-4 ALS"), CFSTR("FormatNames"), v7, v6);
          goto LABEL_247;
        }
        goto LABEL_167;
      }
      if (mFormatID != 1633889587)
      {
        v22 = 1634492771;
LABEL_77:
        if (mFormatID == v22)
        {
          v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Apple Lossless"), CFSTR("FormatNames"), v7, v6);
          goto LABEL_247;
        }
        goto LABEL_167;
      }
LABEL_137:
      v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Dolby Digital"), CFSTR("FormatNames"), v7, v6);
      goto LABEL_247;
    }
    if (mFormatID > 1667591279)
    {
      if (mFormatID == 1667591280)
      {
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG-4 CELP"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      }
      if (mFormatID == 1685354616)
      {
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("DTX"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      }
      goto LABEL_167;
    }
    if (mFormatID != 1634754915)
    {
      if (mFormatID == 1667326771)
      {
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("IMA4"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      }
      goto LABEL_167;
    }
LABEL_178:
    v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("APAC"), CFSTR("FormatNames"), v7, v6);
    goto LABEL_247;
  }
  if (mFormatID > 1633771874)
  {
    switch(mFormatID)
    {
      case 1633772389:
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG-4 AAC Enhanced Low Delay"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      case 1633772390:
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG-4 AAC Enhanced Low Delay with SBR"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      case 1633772391:
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG-4 AAC Enhanced Low Delay V2"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      case 1633772392:
        goto LABEL_149;
      case 1633772393:
      case 1633772394:
      case 1633772395:
      case 1633772398:
      case 1633772399:
      case 1633772401:
        goto LABEL_167;
      case 1633772396:
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG-4 AAC Low Delay"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      case 1633772397:
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("AAC Main"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      case 1633772400:
        goto LABEL_148;
      case 1633772402:
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("AAC Scalable Sampling Rate"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      case 1633772403:
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG Surround"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      case 1633772404:
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("AAC Long Term Predictor"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      default:
        if (mFormatID == 1633771875)
          goto LABEL_108;
        if (mFormatID == 1633772320)
          goto LABEL_155;
        goto LABEL_167;
    }
  }
  if (mFormatID <= 1296122674)
  {
    if (mFormatID > 778924082)
    {
      if (mFormatID == 778924083)
      {
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG Layer 3"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      }
      if (mFormatID == 1096107074)
      {
LABEL_108:
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Audible"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      }
    }
    else
    {
      if (mFormatID == 778924081)
      {
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG Layer 1"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      }
      if (mFormatID == 778924082)
      {
        v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MPEG Layer 2"), CFSTR("FormatNames"), v7, v6);
        goto LABEL_247;
      }
    }
    goto LABEL_167;
  }
  if (mFormatID <= 1363430705)
  {
    if (mFormatID == 1296122675)
    {
      v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MACE 3:1"), CFSTR("FormatNames"), v7, v6);
      goto LABEL_247;
    }
    if (mFormatID == 1296122678)
    {
      v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("MACE 6:1"), CFSTR("FormatNames"), v7, v6);
      goto LABEL_247;
    }
    goto LABEL_167;
  }
  if (mFormatID == 1363430706)
  {
    v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("QDesign Music 2"), CFSTR("FormatNames"), v7, v6);
    goto LABEL_247;
  }
  if (mFormatID == 1363430723)
  {
    v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("QDesign"), CFSTR("FormatNames"), v7, v6);
    goto LABEL_247;
  }
  if (mFormatID != 1365470320)
    goto LABEL_167;
  v13 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Qualcomm PureVoice\\U2122"), CFSTR("FormatNames"), v7, v6);
LABEL_247:
  Copy = v13;
LABEL_248:
  if (a1->mChannelsPerFrame)
  {
    snprintf(__str, 0x80uLL, ", %u ", a1->mChannelsPerFrame);
    CFStringAppendCString(theString, __str, 0x8000100u);
    v29 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("channels"), CFSTR("FormatNames"), v7, v28);
    CFStringAppend(theString, v29);
    CFRelease(v29);
  }
  if (a1->mSampleRate != 0.0)
  {
    snprintf(__str, 0x80uLL, ", %g ", a1->mSampleRate);
    CFStringAppendCString(theString, __str, 0x8000100u);
    v31 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Hz"), CFSTR("FormatNames"), v7, v30);
    CFStringAppend(theString, v31);
    CFRelease(v31);
  }
  CFStringInsert(theString, 0, Copy);
  v14 = 0;
  *a2 = CFStringCreateCopy(v4, theString);
LABEL_253:
  CACFReleaser<__CFString *>::~CACFReleaser((const void ***)&p_theString);
  CACFReleaser<__CFString const*>::~CACFReleaser((const void ***)&v39);
  return v14;
}

void sub_18EF0B3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void **);
  CACFReleaser<__CFString *>::~CACFReleaser((const void ***)va);
  CACFReleaser<__CFString const*>::~CACFReleaser((const void ***)va1);
  _Unwind_Resume(a1);
}

const void ***CACFReleaser<__CFString *>::~CACFReleaser(const void ***a1)
{
  const void *v2;

  v2 = **a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void ***CACFReleaser<__CFString const*>::~CACFReleaser(const void ***a1)
{
  const void *v2;

  v2 = **a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t AudioFormatProperty_ChannelName(AudioChannelDescription *a1, const __CFString **a2, uint64_t a3, const __CFString *a4)
{
  signed int mChannelLabel;
  __CFBundle *v7;
  const __CFAllocator *v8;
  CFMutableStringRef Mutable;
  const __CFString *v10;
  const __CFString *v11;
  uint64_t result;
  const __CFString *v13;
  const __CFString *v14;
  AudioChannelFlags mChannelFlags;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  CFStringRef v19;
  char __str[16];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  mChannelLabel = a1->mChannelLabel;
  v7 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v7 = (__CFBundle *)sAudioToolboxBundle;
  }
  if ((mChannelLabel & 0xFFFF0000) == 0x10000)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    v11 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Discrete"), CFSTR("AudioChannelLabels"), v7, v10);
    snprintf(__str, 0x10uLL, "-%u", (unsigned __int16)mChannelLabel);
    CFStringAppendCString(Mutable, __str, 0x8000100u);
    CFStringInsert(Mutable, 0, v11);
    *a2 = CFStringCreateCopy(v8, Mutable);
    CFRelease(Mutable);
    CFRelease(v11);
    return 0;
  }
  else
  {
    result = 560360820;
    if (mChannelLabel > 199)
    {
      switch(mChannelLabel)
      {
        case 200:
          v17 = CFSTR("Ambisonic W");
          break;
        case 201:
          v17 = CFSTR("Ambisonic X");
          break;
        case 202:
          v17 = CFSTR("Ambisonic Y");
          break;
        case 203:
          v17 = CFSTR("Ambisonic Z");
          break;
        case 204:
          v17 = CFSTR("Mid");
          break;
        case 205:
          v17 = CFSTR("Side");
          break;
        case 206:
          v17 = CFSTR("X");
          break;
        case 207:
          v17 = CFSTR("Y");
          break;
        default:
          switch(mChannelLabel)
          {
            case 301:
              v17 = CFSTR("Headphones Left");
              goto LABEL_65;
            case 302:
              v17 = CFSTR("Headphones Right");
              goto LABEL_65;
            case 303:
              return result;
            case 304:
              v17 = CFSTR("Click Track");
              goto LABEL_65;
            case 305:
              v17 = CFSTR("Foreign Language");
              goto LABEL_65;
            default:
              if (mChannelLabel != 400)
                return result;
              v17 = CFSTR("Discrete");
              break;
          }
          break;
      }
LABEL_65:
      v14 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v17, CFSTR("AudioChannelLabels"), v7, a4);
    }
    else
    {
      switch(mChannelLabel)
      {
        case -1:
          v14 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Unknown"), CFSTR("AudioChannelLabels"), v7, a4);
          mChannelFlags = a1->mChannelFlags;
          if (!mChannelFlags)
            break;
          if ((mChannelFlags & 2) != 0)
          {
            if ((mChannelFlags & 4) != 0)
              v16 = CFSTR("%@ (%g\\U00B0, %g\\U00B0, %gm)");
            else
              v16 = CFSTR("%@ (%g\\U00B0, %g\\U00B0, %g)");
          }
          else
          {
            if ((mChannelFlags & 1) == 0)
              break;
            if ((mChannelFlags & 4) != 0)
              v16 = CFSTR("%@ (%gm, %gm, %gm)");
            else
              v16 = CFSTR("%@ (%g, %g, %g)");
          }
          v18 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v16, CFSTR("AudioChannelLabels"), v7, v13);
          v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v18, v14, a1->mCoordinates[0], a1->mCoordinates[1], a1->mCoordinates[2]);
          CFRelease(v18);
          CFRelease(v14);
          v14 = v19;
          break;
        case 0:
          v17 = CFSTR("Unused");
          goto LABEL_65;
        case 1:
          v17 = CFSTR("Left");
          goto LABEL_65;
        case 2:
          v17 = CFSTR("Right");
          goto LABEL_65;
        case 3:
          v17 = CFSTR("Center");
          goto LABEL_65;
        case 4:
          v17 = CFSTR("LFE Screen");
          goto LABEL_65;
        case 5:
          v17 = CFSTR("Left Surround");
          goto LABEL_65;
        case 6:
          v17 = CFSTR("Right Surround");
          goto LABEL_65;
        case 7:
          v17 = CFSTR("Left Center");
          goto LABEL_65;
        case 8:
          v17 = CFSTR("Right Center");
          goto LABEL_65;
        case 9:
          v17 = CFSTR("Center Surround");
          goto LABEL_65;
        case 10:
          v17 = CFSTR("Left Surround Direct");
          goto LABEL_65;
        case 11:
          v17 = CFSTR("Right Surround Direct");
          goto LABEL_65;
        case 12:
          v17 = CFSTR("Top Center Surround");
          goto LABEL_65;
        case 13:
          v17 = CFSTR("Vertical Height Left");
          goto LABEL_65;
        case 14:
          v17 = CFSTR("Vertical Height Center");
          goto LABEL_65;
        case 15:
          v17 = CFSTR("Vertical Height Right");
          goto LABEL_65;
        case 16:
          v17 = CFSTR("Top Back Left");
          goto LABEL_65;
        case 17:
          v17 = CFSTR("Top Back Center");
          goto LABEL_65;
        case 18:
          v17 = CFSTR("Top Back Right");
          goto LABEL_65;
        case 33:
          v17 = CFSTR("Rear Surround Left");
          goto LABEL_65;
        case 34:
          v17 = CFSTR("Rear Surround Right");
          goto LABEL_65;
        case 35:
          v17 = CFSTR("Left Wide");
          goto LABEL_65;
        case 36:
          v17 = CFSTR("Right Wide");
          goto LABEL_65;
        case 37:
          v17 = CFSTR("LFE2");
          goto LABEL_65;
        case 38:
          v17 = CFSTR("Left Total");
          goto LABEL_65;
        case 39:
          v17 = CFSTR("Right Total");
          goto LABEL_65;
        case 40:
          v17 = CFSTR("Hearing Impaired");
          goto LABEL_65;
        case 41:
          v17 = CFSTR("Narration");
          goto LABEL_65;
        case 42:
          v17 = CFSTR("Mono");
          goto LABEL_65;
        case 43:
          v17 = CFSTR("Dialog Centric Mix");
          goto LABEL_65;
        case 44:
          v17 = CFSTR("Center Surround Direct");
          goto LABEL_65;
        case 45:
          v17 = CFSTR("Haptic");
          goto LABEL_65;
        case 49:
          v17 = CFSTR("Left Top Middle");
          goto LABEL_65;
        case 51:
          v17 = CFSTR("Right Top Middle");
          goto LABEL_65;
        case 52:
          v17 = CFSTR("Left Top Rear");
          goto LABEL_65;
        case 53:
          v17 = CFSTR("Center Top Rear");
          goto LABEL_65;
        case 54:
          v17 = CFSTR("Right Top Rear");
          goto LABEL_65;
        default:
          return result;
      }
    }
    result = 0;
    *a2 = v14;
  }
  return result;
}

uint64_t AudioFormatProperty_ChannelLayoutNameFromDescriptions(const AudioChannelLayout *a1, const __CFString **a2, int a3)
{
  UInt32 mNumberChannelDescriptions;
  AudioChannelDescription *mChannelDescriptions;
  uint64_t v7;
  AudioChannelDescription *v8;
  AudioChannelLabel mChannelLabel;
  __CFBundle *v10;
  const __CFAllocator *v11;
  CFMutableStringRef Mutable;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  AudioChannelDescription *v22;
  int v23;
  unsigned __int16 v24;
  AudioChannelLabel v25;
  __CFBundle *v26;
  const __CFString *v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  int v32;
  uint64_t v33;
  AudioChannelLabel v34;
  AudioChannelLabel v35;
  const __CFAllocator *v37;
  CFMutableStringRef v38;
  uint64_t v39;
  const __CFString *v40;
  CFMutableStringRef v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  CFStringRef v45;
  char __str[8];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
  if (mNumberChannelDescriptions)
  {
    mChannelDescriptions = a1->mChannelDescriptions;
    v7 = a1->mNumberChannelDescriptions;
    v8 = a1->mChannelDescriptions;
    while (1)
    {
      mChannelLabel = v8->mChannelLabel;
      ++v8;
      if (mChannelLabel != 400)
        break;
      if (!--v7)
        goto LABEL_5;
    }
    if ((mChannelDescriptions->mChannelLabel & 0xFFFF0000) == 0x10000)
    {
      v21 = a1->mNumberChannelDescriptions;
      v22 = a1->mChannelDescriptions;
      v23 = (unsigned __int16)mChannelDescriptions->mChannelLabel;
      while (1)
      {
        v25 = v22->mChannelLabel;
        ++v22;
        v24 = v25;
        if ((v25 & 0xFFFF0000) != 0x10000 || v23 != v24)
          break;
        ++v23;
        if (!--v21)
        {
          v26 = (__CFBundle *)sAudioToolboxBundle;
          if (sAudioToolboxBundle == -1)
          {
            pthread_once(&sOnce, InitGetAudioToolboxBundle);
            v26 = (__CFBundle *)sAudioToolboxBundle;
          }
          v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
          snprintf(__str, 0x10uLL, "%u ", a1->mNumberChannelDescriptions);
          CFStringAppendCString(Mutable, __str, 0x8000100u);
          if (a1->mNumberChannelDescriptions == 1)
            v28 = CFSTR("Channel");
          else
            v28 = CFSTR("Channels");
          v29 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v28, CFSTR("AudioChannelLabels"), v26, v27);
          CFStringAppend(Mutable, v29);
          CFRelease(v29);
          CFStringAppendCString(Mutable, " (", 0x8000100u);
          v31 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Discrete"), CFSTR("AudioChannelLabels"), v26, v30);
          CFStringAppend(Mutable, v31);
          CFRelease(v31);
          if (a1->mNumberChannelDescriptions == 1)
            snprintf(__str, 0x10uLL, " %u)");
          else
            snprintf(__str, 0x10uLL, " %u-%u)");
          v18 = __str;
          goto LABEL_11;
        }
      }
    }
    if (a3)
    {
      v32 = 0;
      v33 = a1->mNumberChannelDescriptions;
      do
      {
        v35 = mChannelDescriptions->mChannelLabel;
        ++mChannelDescriptions;
        v34 = v35;
        if (v35 == 37 || v34 == 4)
          ++v32;
        --v33;
      }
      while (v33);
      snprintf(__str, 0x10uLL, "%u.%u", mNumberChannelDescriptions - v32, v32);
      v19 = 0;
      *a2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], __str, 0x8000100u);
    }
    else
    {
      v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v38 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      v41 = CFStringCreateMutable(v37, 0);
      if (a1->mNumberChannelDescriptions)
      {
        v42 = 0;
        v43 = 0;
        while (1)
        {
          if (v42)
            CFStringAppendCString(v38, " ", 0x8000100u);
          *(_QWORD *)__str = 0;
          v44 = AudioFormatProperty_ChannelShortName(mChannelDescriptions->mChannelLabel, (const __CFString **)__str, v39, v40);
          if ((_DWORD)v44)
            break;
          v45 = *(CFStringRef *)__str;
          CFStringAppend(v38, *(CFStringRef *)__str);
          CFRelease(v45);
          if (mChannelDescriptions->mChannelLabel == 37 || mChannelDescriptions->mChannelLabel == 4)
            ++v43;
          ++v42;
          ++mChannelDescriptions;
          if (v42 >= a1->mNumberChannelDescriptions)
            goto LABEL_45;
        }
        v19 = v44;
      }
      else
      {
        v43 = 0;
LABEL_45:
        CFStringAppendCString(v38, ")", 0x8000100u);
        snprintf(__str, 0x10uLL, "%u.%u (", a1->mNumberChannelDescriptions - v43, v43);
        CFStringAppendCString(v41, __str, 0x8000100u);
        CFStringAppend(v41, v38);
        v19 = 0;
        *a2 = CFStringCreateCopy(v37, v41);
      }
      CFRelease(v38);
      CFRelease(v41);
    }
  }
  else
  {
LABEL_5:
    v10 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle == -1)
    {
      pthread_once(&sOnce, InitGetAudioToolboxBundle);
      v10 = (__CFBundle *)sAudioToolboxBundle;
    }
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    snprintf(__str, 0x10uLL, "%u ", a1->mNumberChannelDescriptions);
    CFStringAppendCString(Mutable, __str, 0x8000100u);
    if (a1->mNumberChannelDescriptions == 1)
      v14 = CFSTR("Channel");
    else
      v14 = CFSTR("Channels");
    v15 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v14, CFSTR("AudioChannelLabels"), v10, v13);
    CFStringAppend(Mutable, v15);
    CFRelease(v15);
    CFStringAppendCString(Mutable, " (", 0x8000100u);
    v17 = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(CFSTR("Discrete"), CFSTR("AudioChannelLabels"), v10, v16);
    CFStringAppend(Mutable, v17);
    CFRelease(v17);
    v18 = ")";
LABEL_11:
    CFStringAppendCString(Mutable, v18, 0x8000100u);
    *a2 = CFStringCreateCopy(v11, Mutable);
    CFRelease(Mutable);
    return 0;
  }
  return v19;
}

uint64_t AudioFormatProperty_ChannelLayoutSimpleName(const AudioChannelLayout *a1, const __CFString **a2, uint64_t a3, const __CFString *a4)
{
  int mChannelLayoutTag;
  __CFBundle *v7;
  int8x8_t mChannelBitmap;
  int8x8_t v9;
  __int32 v10;
  AudioChannelLayout *v11;
  AudioChannelLabel mChannelLabel;
  uint64_t v13;
  AudioChannelLayout *v14;
  int8x8_t v15;
  unsigned int v17;
  const __CFString *v18;
  void *v19;
  const __CFString *v20;
  const __CFString *Copy;
  int v22;
  int v23;
  const __CFString *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  AudioChannelLayout v35;
  unsigned int v36;
  AudioChannelLabel v37;
  uint64_t v38;
  uint64_t v39;

  mChannelLayoutTag = a1->mChannelLayoutTag;
  v36 = a1->mChannelLayoutTag;
  v7 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle != -1)
  {
    if (mChannelLayoutTag)
      goto LABEL_3;
LABEL_7:
    if (a1->mNumberChannelDescriptions == 1)
    {
      mChannelLabel = a1->mChannelDescriptions[0].mChannelLabel;
      *(_QWORD *)&v35.mChannelDescriptions[0].mChannelLabel = 0;
      *(_QWORD *)&v35.mChannelBitmap = 0;
      v35.mChannelLayoutTag = mChannelLabel;
      v11 = &v35;
      return AudioFormatProperty_ChannelName((AudioChannelDescription *)v11, a2, a3, a4);
    }
    if (AudioFormatProperty_TagForChannelLayout(a1, &v36))
      return AudioFormatProperty_ChannelLayoutNameFromDescriptions(a1, a2, 1);
    mChannelLayoutTag = v36;
LABEL_16:
    v17 = mChannelLayoutTag & 0xFFFF0000;
    if ((mChannelLayoutTag & 0xFFFF0000) == 0xBF0000)
    {
      v20 = CFSTR("HOA_ACN_N3D");
      goto LABEL_25;
    }
    if (v17 == 12451840)
    {
      v20 = CFSTR("HOA_ACN_SN3D");
      goto LABEL_25;
    }
    if (v17 == 9633792)
    {
      if ((unsigned __int16)mChannelLayoutTag == 1)
        v18 = CFSTR("Discrete Channel");
      else
        v18 = CFSTR("Discrete Channels");
      v19 = ThreadSafeCFCopyLocalizedStringFromTableInBundle(v18, CFSTR("AudioChannelLayouts"), v7, a4);
      *a2 = CFStringCreateWithFormat(0, 0, CFSTR("%d %@"), (unsigned __int16)mChannelLayoutTag, v19);
      CFRelease(v19);
      return 0;
    }
    v13 = 560360820;
    if (mChannelLayoutTag > 10420230)
    {
      if (mChannelLayoutTag > 12320774)
      {
        if (mChannelLayoutTag <= 13434887)
        {
          if (mChannelLayoutTag <= 12910595)
          {
            if (mChannelLayoutTag > 12648463)
            {
              if (mChannelLayoutTag > 12779529)
              {
                if (mChannelLayoutTag == 12779530)
                {
                  v24 = CFSTR("5.1.4");
                }
                else
                {
                  if (mChannelLayoutTag != 12845066)
                    return v13;
                  v24 = CFSTR("7.1.2");
                }
              }
              else if (mChannelLayoutTag == 12648464)
              {
                v24 = CFSTR("9.1.6");
              }
              else
              {
                if (mChannelLayoutTag != 12713992)
                  return v13;
                v24 = CFSTR("5.1.2");
              }
              goto LABEL_236;
            }
            if (mChannelLayoutTag == 12320775)
              goto LABEL_231;
            if (mChannelLayoutTag != 12386312)
            {
              v30 = 12582924;
              goto LABEL_140;
            }
          }
          else
          {
            if (mChannelLayoutTag <= 13172743)
            {
              if (mChannelLayoutTag <= 13041670)
              {
                if (mChannelLayoutTag != 12910596)
                {
                  v22 = 12976134;
                  goto LABEL_213;
                }
                goto LABEL_146;
              }
              if (mChannelLayoutTag != 13041671)
              {
                v33 = 13107207;
                goto LABEL_230;
              }
LABEL_231:
              v24 = CFSTR("6.1");
              goto LABEL_236;
            }
            if (mChannelLayoutTag > 13303821)
            {
              if (mChannelLayoutTag == 13303822)
              {
                v24 = CFSTR("7.1.6");
              }
              else
              {
                if (mChannelLayoutTag != 13369368)
                  return v13;
                v24 = CFSTR("22.2");
              }
              goto LABEL_236;
            }
            if (mChannelLayoutTag != 13172744)
            {
              v30 = 13238284;
LABEL_140:
              if (mChannelLayoutTag != v30)
                return v13;
              v24 = CFSTR("7.1.4");
              goto LABEL_236;
            }
          }
LABEL_235:
          v24 = CFSTR("7.1");
          goto LABEL_236;
        }
        if (mChannelLayoutTag > 13893636)
        {
          if (mChannelLayoutTag <= 14155780)
          {
            if (mChannelLayoutTag <= 14024710)
            {
              if (mChannelLayoutTag != 13893637)
              {
                v23 = 13959174;
                goto LABEL_225;
              }
LABEL_227:
              v24 = CFSTR("5.0");
              goto LABEL_236;
            }
            if (mChannelLayoutTag == 14024711)
              goto LABEL_231;
            v26 = 14090248;
LABEL_234:
            if (mChannelLayoutTag != v26)
              return v13;
            goto LABEL_235;
          }
          if (mChannelLayoutTag > 14286854)
          {
            if (mChannelLayoutTag == 14286855)
              goto LABEL_231;
            v26 = 14352392;
            goto LABEL_234;
          }
          if (mChannelLayoutTag == 14155781)
            goto LABEL_227;
          v23 = 14221318;
LABEL_225:
          if (mChannelLayoutTag != v23)
            return v13;
          goto LABEL_226;
        }
        if (mChannelLayoutTag <= 13631499)
        {
          if (mChannelLayoutTag != 13434888)
          {
            if (mChannelLayoutTag == 13500428)
            {
              v24 = CFSTR("10.2");
            }
            else
            {
              if (mChannelLayoutTag != 13565962)
                return v13;
              v24 = CFSTR("9.1");
            }
            goto LABEL_236;
          }
          goto LABEL_235;
        }
        if (mChannelLayoutTag > 13762571)
        {
          if (mChannelLayoutTag != 13762572)
          {
            v29 = 13828110;
            goto LABEL_205;
          }
        }
        else if (mChannelLayoutTag != 13631500)
        {
          v29 = 13697038;
LABEL_205:
          if (mChannelLayoutTag != v29)
            return v13;
          v24 = CFSTR("13.1");
          goto LABEL_236;
        }
        v24 = CFSTR("11.1");
        goto LABEL_236;
      }
      if (mChannelLayoutTag > 11337734)
      {
        if (mChannelLayoutTag > 11796488)
        {
          if (mChannelLayoutTag <= 12058631)
          {
            if (mChannelLayoutTag <= 11927558)
            {
              if (mChannelLayoutTag != 11796489 && mChannelLayoutTag != 11862025)
                return v13;
              v24 = CFSTR("8.1");
              goto LABEL_236;
            }
            if (mChannelLayoutTag == 11927559)
              goto LABEL_231;
            v26 = 11993096;
            goto LABEL_234;
          }
          if (mChannelLayoutTag > 12189700)
          {
            if (mChannelLayoutTag == 12189701)
              goto LABEL_227;
            v23 = 12255238;
            goto LABEL_225;
          }
          if (mChannelLayoutTag == 12058632)
            goto LABEL_235;
          v31 = 12124164;
          goto LABEL_145;
        }
        if (mChannelLayoutTag <= 11534342)
        {
          if (mChannelLayoutTag != 11337735 && mChannelLayoutTag != 11403271)
          {
            v33 = 11468807;
            goto LABEL_230;
          }
          goto LABEL_231;
        }
        if (mChannelLayoutTag <= 11665415)
        {
          if (mChannelLayoutTag != 11534343)
          {
            v26 = 11599880;
            goto LABEL_234;
          }
LABEL_154:
          v24 = CFSTR("7.0");
          goto LABEL_236;
        }
        if (mChannelLayoutTag != 11665416 && mChannelLayoutTag != 11730952)
          return v13;
LABEL_200:
        v24 = CFSTR("8.0");
        goto LABEL_236;
      }
      if (mChannelLayoutTag <= 10878983)
      {
        if (mChannelLayoutTag <= 10616839)
        {
          if (mChannelLayoutTag == 10420231)
            goto LABEL_231;
          if (mChannelLayoutTag == 10485768)
            goto LABEL_235;
          v26 = 10551304;
        }
        else if (mChannelLayoutTag > 10747911)
        {
          if (mChannelLayoutTag == 10747912)
            goto LABEL_235;
          v26 = 10813448;
        }
        else
        {
          if (mChannelLayoutTag == 10616840)
            goto LABEL_235;
          v26 = 10682376;
        }
        goto LABEL_234;
      }
      if (mChannelLayoutTag > 11075588)
      {
        if (mChannelLayoutTag <= 11206661)
        {
          if (mChannelLayoutTag != 11075589)
          {
            v22 = 11141126;
            goto LABEL_213;
          }
LABEL_189:
          v24 = CFSTR("4.1");
          goto LABEL_236;
        }
        if (mChannelLayoutTag != 11206662)
        {
          v22 = 11272198;
LABEL_213:
          if (mChannelLayoutTag != v22)
            return v13;
        }
LABEL_217:
        v24 = CFSTR("6.0");
        goto LABEL_236;
      }
      if (mChannelLayoutTag == 10878984 || mChannelLayoutTag == 10944520)
        goto LABEL_235;
      v25 = 11010052;
      goto LABEL_166;
    }
    if (mChannelLayoutTag <= 8454151)
    {
      if (mChannelLayoutTag > 7471106)
      {
        if (mChannelLayoutTag > 7929861)
        {
          if (mChannelLayoutTag > 8192006)
          {
            if (mChannelLayoutTag > 8323079)
            {
              if (mChannelLayoutTag == 8323080)
                goto LABEL_235;
              v26 = 8388616;
            }
            else
            {
              if (mChannelLayoutTag == 8192007)
                goto LABEL_231;
              v26 = 8257544;
            }
            goto LABEL_234;
          }
          if (mChannelLayoutTag > 8060933)
          {
            if (mChannelLayoutTag != 8060934)
            {
              v23 = 8126470;
              goto LABEL_225;
            }
          }
          else if (mChannelLayoutTag != 7929862)
          {
            v23 = 7995398;
            goto LABEL_225;
          }
LABEL_226:
          v24 = CFSTR("5.1");
          goto LABEL_236;
        }
        if (mChannelLayoutTag > 7667716)
        {
          if (mChannelLayoutTag > 7798788)
          {
            if (mChannelLayoutTag == 7798789)
              goto LABEL_227;
            v27 = 7864325;
          }
          else
          {
            if (mChannelLayoutTag == 7667717)
              goto LABEL_227;
            v27 = 7733253;
          }
          if (mChannelLayoutTag != v27)
            return v13;
          goto LABEL_227;
        }
        if (mChannelLayoutTag != 7471107)
        {
          if (mChannelLayoutTag != 7536644)
          {
            v31 = 7602180;
LABEL_145:
            if (mChannelLayoutTag != v31)
              return v13;
            goto LABEL_146;
          }
          goto LABEL_146;
        }
LABEL_210:
        v24 = CFSTR("3.0");
        goto LABEL_236;
      }
      if (mChannelLayoutTag <= 7012355)
      {
        if (mChannelLayoutTag <= 6750209)
        {
          if (mChannelLayoutTag == 6553601)
          {
            v20 = CFSTR("Mono");
          }
          else
          {
            if (mChannelLayoutTag != 6619138 && mChannelLayoutTag != 6684674)
              return v13;
            v20 = CFSTR("Stereo");
          }
        }
        else if (mChannelLayoutTag > 6881281)
        {
          if (mChannelLayoutTag == 6881282)
          {
            v20 = CFSTR("X-Y");
          }
          else
          {
            if (mChannelLayoutTag != 6946818)
              return v13;
            v20 = CFSTR("Binaural");
          }
        }
        else if (mChannelLayoutTag == 6750210)
        {
          v20 = CFSTR("Matrix Stereo");
        }
        else
        {
          if (mChannelLayoutTag != 6815746)
            return v13;
          v20 = CFSTR("Mid-Side");
        }
        goto LABEL_25;
      }
      if (mChannelLayoutTag <= 7208965)
      {
        switch(mChannelLayoutTag)
        {
          case 7012356:
            v20 = CFSTR("Ambisonic B Format");
            break;
          case 7077892:
            v20 = CFSTR("Quadraphonic");
            break;
          case 7143429:
            v20 = CFSTR("Pentagonal");
            break;
          default:
            return v13;
        }
      }
      else
      {
        if (mChannelLayoutTag <= 7340039)
        {
          if (mChannelLayoutTag == 7208966)
          {
            v20 = CFSTR("Hexagonal");
          }
          else
          {
            if (mChannelLayoutTag != 7274504)
              return v13;
            v20 = CFSTR("Octagonal");
          }
          goto LABEL_25;
        }
        if (mChannelLayoutTag != 7340040)
        {
          v32 = 7405571;
LABEL_209:
          if (mChannelLayoutTag != v32)
            return v13;
          goto LABEL_210;
        }
        v20 = CFSTR("Cube");
      }
      goto LABEL_25;
    }
    if (mChannelLayoutTag > 9371654)
    {
      if (mChannelLayoutTag > 9895939)
      {
        if (mChannelLayoutTag <= 10158085)
        {
          if (mChannelLayoutTag <= 10027011)
          {
            if (mChannelLayoutTag != 9895940)
            {
              v25 = 9961476;
LABEL_166:
              if (mChannelLayoutTag != v25)
                return v13;
              goto LABEL_190;
            }
LABEL_146:
            v24 = CFSTR("4.0");
LABEL_236:
            Copy = CFStringCreateCopy(0, v24);
            goto LABEL_237;
          }
          if (mChannelLayoutTag != 10027012)
          {
            v34 = 10092549;
            goto LABEL_188;
          }
LABEL_190:
          v24 = CFSTR("3.1");
          goto LABEL_236;
        }
        if (mChannelLayoutTag <= 10289158)
        {
          if (mChannelLayoutTag == 10158086)
            goto LABEL_217;
          v28 = 10223623;
          goto LABEL_122;
        }
        if (mChannelLayoutTag == 10289159)
          goto LABEL_231;
        v33 = 10354695;
LABEL_230:
        if (mChannelLayoutTag != v33)
          return v13;
        goto LABEL_231;
      }
      if (mChannelLayoutTag <= 9568276)
      {
        if (mChannelLayoutTag == 9371655)
          goto LABEL_154;
        if (mChannelLayoutTag == 9437192)
          goto LABEL_200;
        if (mChannelLayoutTag != 9502736)
          return v13;
        v20 = CFSTR("TMH 10.2 (16 channel)");
        goto LABEL_25;
      }
      if (mChannelLayoutTag > 9764865)
      {
        if (mChannelLayoutTag == 9764866)
        {
          v24 = CFSTR("1.1");
          goto LABEL_236;
        }
        v32 = 9830403;
        goto LABEL_209;
      }
      if (mChannelLayoutTag == 9568277)
      {
        v20 = CFSTR("TMH 10.2 (21 channel)");
        goto LABEL_25;
      }
      v28 = 9699335;
      goto LABEL_122;
    }
    if (mChannelLayoutTag > 8912899)
    {
      if (mChannelLayoutTag > 9109509)
      {
        if (mChannelLayoutTag > 9240581)
        {
          if (mChannelLayoutTag == 9240582)
            goto LABEL_217;
          v33 = 9306119;
          goto LABEL_230;
        }
        if (mChannelLayoutTag == 9109510)
          goto LABEL_217;
        v28 = 9175047;
LABEL_122:
        if (mChannelLayoutTag != v28)
          return v13;
        goto LABEL_154;
      }
      if (mChannelLayoutTag == 8912900)
        goto LABEL_190;
      if (mChannelLayoutTag == 8978437)
        goto LABEL_189;
      v34 = 9043973;
    }
    else
    {
      if (mChannelLayoutTag <= 8650755)
      {
        if (mChannelLayoutTag == 8454152)
          goto LABEL_235;
        if (mChannelLayoutTag != 8519688)
        {
          v32 = 8585219;
          goto LABEL_209;
        }
        v20 = CFSTR("SMPTE DTV");
LABEL_25:
        Copy = (const __CFString *)ThreadSafeCFCopyLocalizedStringFromTableInBundle(v20, CFSTR("AudioChannelLayouts"), v7, a4);
LABEL_237:
        v13 = 0;
        *a2 = Copy;
        return v13;
      }
      if (mChannelLayoutTag <= 8781827)
      {
        if (mChannelLayoutTag != 8650756)
        {
          if (mChannelLayoutTag != 8716291)
            return v13;
          v24 = CFSTR("2.1");
          goto LABEL_236;
        }
        goto LABEL_146;
      }
      if (mChannelLayoutTag == 8781828)
        goto LABEL_190;
      v34 = 8847365;
    }
LABEL_188:
    if (mChannelLayoutTag != v34)
      return v13;
    goto LABEL_189;
  }
  pthread_once(&sOnce, InitGetAudioToolboxBundle);
  v7 = (__CFBundle *)sAudioToolboxBundle;
  if (!mChannelLayoutTag)
    goto LABEL_7;
LABEL_3:
  if (mChannelLayoutTag != 0x10000)
    goto LABEL_16;
  mChannelBitmap = (int8x8_t)a1->mChannelBitmap;
  v9 = vcnt_s8(mChannelBitmap);
  v9.i16[0] = vaddlv_u8((uint8x8_t)v9);
  v10 = v9.i32[0];
  if (v9.i32[0] != 1)
  {
    mChannelLayoutTag = AudioFormatProperty_LayoutTagForBitmap(mChannelBitmap.i32[0]);
    if (mChannelLayoutTag == 0x10000)
    {
      *(_QWORD *)&v35.mChannelLayoutTag = 0;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v35, (20 * v10 + 12), 0);
      v14 = *(AudioChannelLayout **)&v35.mChannelLayoutTag;
      AudioFormatProperty_ChannelLayoutForBitmap(mChannelBitmap.i32[0], *(AudioChannelLayout **)&v35.mChannelLayoutTag, v15);
      v13 = AudioFormatProperty_ChannelLayoutNameFromDescriptions(v14, a2, 1);
      if (v14)
        free(v14);
      return v13;
    }
    goto LABEL_16;
  }
  AudioFormatProperty_ChannelLayoutForBitmap(mChannelBitmap.i32[0], &v35, v9);
  v38 = 0;
  v39 = 0;
  v37 = v35.mChannelDescriptions[0].mChannelLabel;
  v11 = (AudioChannelLayout *)&v37;
  return AudioFormatProperty_ChannelName((AudioChannelDescription *)v11, a2, a3, a4);
}

void sub_18EF0CCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12)
    free(a12);
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatProperty_AudibleProtectedContentCanBeAuthorized(uint64_t a1, _DWORD *a2)
{
  OSType v4;
  uint64_t PropertyInfo;
  __int128 v6;
  uint64_t v7;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  Boolean outWritable;
  UInt32 outSize;
  OpaqueAudioComponentInstance *v16;
  OpaqueAudioComponentInstance *v17;

  v4 = *(_DWORD *)(a1 + 8);
  v17 = 0;
  PropertyInfo = OpenCodecComponent(v4, &v17, 0x61646563u);
  if (!(_DWORD)PropertyInfo)
  {
    v16 = v17;
    outSize = 0;
    outWritable = 0;
    PropertyInfo = AudioCodecGetPropertyInfo(v17, 0x61617468u, &outSize, &outWritable);
    if (!(_DWORD)PropertyInfo && outSize == 64)
    {
      v6 = *(_OWORD *)(a1 + 16);
      v9[0] = *(_OWORD *)a1;
      v9[1] = v6;
      v7 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = v7;
      v12 = *(_QWORD *)(a1 + 48);
      v13 = 0;
      outSize = 64;
      PropertyInfo = AudioCodecGetProperty(v16, 0x61617468u, &outSize, v9);
      if (!(_DWORD)PropertyInfo)
        *a2 = v13;
    }
    AudioCodecAutoDisposer::~AudioCodecAutoDisposer(&v16);
  }
  return PropertyInfo;
}

void sub_18EF0CDA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  AudioCodecAutoDisposer::~AudioCodecAutoDisposer((OpaqueAudioComponentInstance **)(v1 - 48));
  _Unwind_Resume(a1);
}

void AMRAudioStream::~AMRAudioStream(AMRAudioStream *this)
{
  AudioFileStreamObject::~AudioFileStreamObject(this);
  JUMPOUT(0x193FFE460);
}

uint64_t AMRAudioStream::Flush(AMRAudioStream *this)
{
  AudioStreamPacketDescription *v2;
  UInt32 v3;

  if (*((_DWORD *)this + 104))
  {
    v2 = (AudioStreamPacketDescription *)*((_QWORD *)this + 24);
    v2->mStartOffset = 0;
    v3 = *((_DWORD *)this + 107);
    v2->mVariableFramesInPacket = 0;
    v2->mDataByteSize = v3;
    AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v3, 1u, *((const void **)this + 36), v2, 0);
    *((_BYTE *)this + 340) = 0;
  }
  return 0;
}

uint64_t AMRAudioStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  void (*v9)(_QWORD, _QWORD, uint64_t, unsigned int *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  uint64_t result;
  int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v24;
  int v25;
  int v26;
  int v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  void (*v38)(_QWORD, _QWORD, uint64_t, unsigned int *);
  void (*v39)(_QWORD, _QWORD, uint64_t, unsigned int *);
  void (*v40)(_QWORD, _QWORD, uint64_t, unsigned int *);
  void (*v41)(_QWORD, _QWORD, uint64_t, unsigned int *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  int v48;
  int v49;
  UInt32 ioPropertyDataSize;
  unsigned int v51;

  v4 = a1 + 348;
  v5 = *(_DWORD *)(a1 + 236);
  if (v5 <= 57)
  {
    if (v5 == -1)
      return 0;
    if (v5)
      goto LABEL_22;
    v8 = *(_QWORD *)(a1 + 8);
    v51 = 1;
    if (!*(_BYTE *)(v8 + 104))
    {
      *(_BYTE *)(v8 + 104) = 1;
      v9 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v8 + 24);
      if (v9)
        v9(*(_QWORD *)(v8 + 40), *(unsigned int *)(v8 + 8), 1717988724, &v51);
    }
    goto LABEL_11;
  }
  if (v5 == 58)
  {
LABEL_11:
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(v10 + 88);
    v12 = *(_QWORD *)(v10 + 96);
    v13 = v11 + *(unsigned int *)(v10 + 80);
    v15 = v12 < v11 || v13 <= v12 || (_DWORD)v13 - (_DWORD)v12 == 0;
    if (v15)
    {
      result = 0;
      v17 = 58;
      goto LABEL_37;
    }
    v18 = 6;
    *(_DWORD *)(a1 + 256) = 6;
    v19 = (unsigned __int8 *)(a1 + 348);
    *(_QWORD *)(a1 + 264) = a1 + 348;
    goto LABEL_23;
  }
  if (v5 != 60)
  {
    if (v5 == 64)
    {
      v6 = *(_DWORD *)(a1 + 256);
      v7 = *(unsigned __int8 **)(a1 + 264);
LABEL_29:
      v51 = v6;
      StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), &v51, v7);
      v24 = v51;
      v25 = *(_DWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 264) += v51;
      v26 = v25 - v24;
      *(_DWORD *)(a1 + 256) = v26;
      if (!v26)
      {
        if (*(_QWORD *)v4 != *(_QWORD *)AMR_WBMagicNumber
          || *(unsigned __int8 *)(v4 + 8) != (unint64_t)AMR_WBMagicNumber[8])
        {
          *(_BYTE *)(a1 + 177) = 1;
          *(_DWORD *)(a1 + 236) = -1;
          return 1685348671;
        }
        *(_BYTE *)(a1 + 404) = 1;
        *(_QWORD *)(a1 + 104) = 9;
        goto LABEL_44;
      }
      result = 0;
      v17 = 64;
LABEL_37:
      *(_DWORD *)(a1 + 236) = v17;
      return result;
    }
LABEL_22:
    result = 0;
    v17 = -1;
    goto LABEL_37;
  }
  v18 = *(_DWORD *)(a1 + 256);
  v10 = *(_QWORD *)(a1 + 8);
  v19 = *(unsigned __int8 **)(a1 + 264);
LABEL_23:
  v51 = v18;
  StreamBuffer::Copy((_QWORD *)(v10 + 72), &v51, v19);
  v20 = v51;
  v21 = *(_DWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 264) += v51;
  v22 = v21 - v20;
  *(_DWORD *)(a1 + 256) = v22;
  if (v22)
  {
    result = 0;
    v17 = 60;
    goto LABEL_37;
  }
  if (*(_DWORD *)(a1 + 348) != AMRMagicNumber || *(unsigned __int16 *)(a1 + 352) != (unsigned __int16)word_1EE1428EC)
  {
    v6 = 3;
    *(_DWORD *)(a1 + 256) = 3;
    v7 = (unsigned __int8 *)(a1 + 354);
    *(_QWORD *)(a1 + 264) = a1 + 354;
    goto LABEL_29;
  }
  v28 = *(unsigned __int8 *)(a1 + 404);
  v29 = 9;
  if (!*(_BYTE *)(a1 + 404))
    v29 = 6;
  *(_QWORD *)(a1 + 104) = v29;
  if (!v28)
  {
    v30 = -127;
    v31 = 1919770995;
    goto LABEL_45;
  }
LABEL_44:
  v30 = -125;
  v31 = 1651990899;
LABEL_45:
  *(_QWORD *)(v4 + 9) = 0x616D72660C000000;
  v32 = v4 + 9;
  *(_DWORD *)(v32 + 8) = v31;
  *(_QWORD *)(v32 + 12) = 0x61646E650A000000;
  *(_WORD *)(v32 + 20) = 0;
  *(_QWORD *)(v32 + 22) = 0x726D616411000000;
  *(_DWORD *)(v32 + 30) = 1819308129;
  v33 = 1;
  *(_BYTE *)(a1 + 391) = 1;
  *(_WORD *)(a1 + 392) = v30;
  *(_WORD *)(a1 + 394) = 256;
  *(_QWORD *)(v32 + 39) = 0x8000000;
  *(_DWORD *)(a1 + 128) = 47;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 120), 0x2FuLL, 0);
  memcpy(*(void **)(a1 + 120), (const void *)v32, *(unsigned int *)(a1 + 128));
  v15 = *(_BYTE *)(a1 + 404) == 0;
  *(_QWORD *)(a1 + 24) = qword_18F116F90[*(_BYTE *)(a1 + 404) == 0];
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (v15)
    v34 = 1935764850;
  else
    v34 = 1935767394;
  *(_DWORD *)(a1 + 32) = v34;
  *(_DWORD *)(a1 + 52) = 1;
  ioPropertyDataSize = 40;
  AudioFormatGetProperty(0x666D7469u, 0x2Fu, *(const void **)(a1 + 120), &ioPropertyDataSize, (void *)(a1 + 24));
  v35 = *(_DWORD *)(a1 + 44);
  if (*(_BYTE *)(a1 + 404))
    v36 = 320;
  else
    v36 = 160;
  *(_DWORD *)(a1 + 408) = v35 / v36;
  if (v36 <= v35)
  {
    if (v35 / v36 < 0x10)
      goto LABEL_55;
    v33 = 15;
  }
  *(_DWORD *)(a1 + 408) = v33;
LABEL_55:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a1 + 24);
  v37 = *(_QWORD *)(a1 + 8);
  v51 = 1;
  if (!*(_BYTE *)(v37 + 105))
  {
    *(_BYTE *)(v37 + 105) = 1;
    v38 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v37 + 24);
    if (v38)
    {
      v38(*(_QWORD *)(v37 + 40), *(unsigned int *)(v37 + 8), 1684434292, &v51);
      v37 = *(_QWORD *)(a1 + 8);
    }
  }
  v51 = 1;
  v39 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v37 + 24);
  if (v39)
  {
    v39(*(_QWORD *)(v37 + 40), *(unsigned int *)(v37 + 8), 1685022310, &v51);
    v37 = *(_QWORD *)(a1 + 8);
    v40 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v37 + 24);
    v51 = 1;
    *(_BYTE *)(v37 + 108) = 1;
    if (v40)
    {
      v40(*(_QWORD *)(v37 + 40), *(unsigned int *)(v37 + 8), 1835493731, &v51);
      v37 = *(_QWORD *)(a1 + 8);
    }
  }
  else
  {
    v51 = 1;
    *(_BYTE *)(v37 + 108) = 1;
  }
  v51 = 1;
  if (!*(_DWORD *)(v37 + 112))
  {
    *(_DWORD *)(v37 + 112) = 1;
    v41 = *(void (**)(_QWORD, _QWORD, uint64_t, unsigned int *))(v37 + 24);
    if (v41)
    {
      v41(*(_QWORD *)(v37 + 40), *(unsigned int *)(v37 + 8), 1919247481, &v51);
      v37 = *(_QWORD *)(a1 + 8);
    }
  }
  v42 = 0;
  *(_QWORD *)a2 = a1;
  *(_OWORD *)(a2 + 8) = xmmword_18F116F70;
  v43 = *(_QWORD *)(v37 + 88);
  v44 = *(_QWORD *)(v37 + 96);
  v45 = v43 + *(unsigned int *)(v37 + 80);
  v46 = v44 < v43 || v45 <= v44;
  v47 = v46;
  v48 = v45 - v44;
  if (!v46 && v48)
    v42 = *(_QWORD *)(v37 + 72) + (v44 - v43);
  result = 0;
  *(_QWORD *)(a2 + 32) = v42;
  if (v47)
    v49 = 0;
  else
    v49 = v48;
  *(_DWORD *)(a2 + 24) = v49;
  return result;
}

uint64_t AMRAudioStream::GeneratePackets(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  AudioStreamPacketDescription *v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  AudioStreamPacketDescription *v30;
  UInt32 v31;
  __int16 *v32;
  unsigned int v33;
  int v34;
  int v35;
  size_t v36;
  UInt32 v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  __int16 *v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  AudioStreamPacketDescription *v50;
  unsigned int v51;
  unsigned int v52;

  result = 0;
  v3 = *(_DWORD *)(a1 + 236);
  v4 = -1;
  if (v3 > 155)
  {
    if (v3 == 252)
    {
      v5 = *(_DWORD *)(a1 + 256);
      v6 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_70;
    }
    if (v3 == 247)
    {
      v7 = *(_DWORD *)(a1 + 256);
      v8 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_64;
    }
    if (v3 != 156)
      goto LABEL_73;
LABEL_11:
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(v9 + 96);
    while (1)
    {
      v11 = *(_QWORD *)(v9 + 88);
      v12 = v11 + *(unsigned int *)(v9 + 80);
      v13 = v12 - v10;
      if (v10 < v11 || v12 <= v10 || (_DWORD)v12 == (_DWORD)v10)
      {
        result = 0;
        v4 = 156;
        goto LABEL_73;
      }
      *(_DWORD *)(a1 + 344) = 0;
      v16 = v13 ? (unsigned __int8 *)(*(_QWORD *)(v9 + 72) + (v10 - v11)) : 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      *(_BYTE *)(a1 + 340) = 0;
      v20 = (__int16 *)(*(_BYTE *)(a1 + 404) ? &_AMR_WB_FRAMESIZE : &_AMR_NB_FRAMESIZE);
      do
      {
        v21 = v20[((unint64_t)v16[v19] >> 3) & 0xF];
        if (!v20[((unint64_t)v16[v19] >> 3) & 0xF])
          goto LABEL_72;
        if (v13 - v19 >= v21)
        {
          *(_DWORD *)(a1 + 344) = ++v18;
        }
        else
        {
          v17 = 1;
          *(_BYTE *)(a1 + 340) = 1;
          *(_DWORD *)(a1 + 332) = v19;
          *(_DWORD *)(a1 + 336) = v21;
        }
        v19 += v21;
      }
      while (v19 < v13);
      v22 = *(_DWORD *)(a1 + 408);
      if (!v22)
        __assert_rtn("GeneratePackets", "AMRAudioStream.cpp", 197, "mSmallPacketsPerLargePacket > 0");
      v23 = v18 / v22;
      *(_DWORD *)(a1 + 412) = v18 / v22;
      *(_DWORD *)(a1 + 416) = v18 % v22;
      *(_DWORD *)(a1 + 432) = 0;
      if (v22 <= v18)
      {
        if (*(_DWORD *)(a1 + 200) < v23)
        {
          v25 = (1 << -__clz(v23 - 1));
          *(_DWORD *)(a1 + 200) = v25;
          CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), v25);
          v23 = *(_DWORD *)(a1 + 412);
        }
        *(_DWORD *)(a1 + 420) = 0;
        v26 = *(AudioStreamPacketDescription **)(a1 + 192);
        if (v23)
        {
          v27 = 0;
          v28 = 0;
          v29 = *(_DWORD *)(a1 + 408);
          while (1)
          {
            v30 = &v26[v27];
            v30->mStartOffset = v28;
            v30->mVariableFramesInPacket = 0;
            *(_QWORD *)(a1 + 424) = 0;
            v31 = 0;
            if (v29)
              break;
LABEL_45:
            v30->mDataByteSize = v31;
            *(_DWORD *)(a1 + 420) = ++v27;
            if (v27 >= v23 || v28 >= v13)
              goto LABEL_47;
          }
          if (*(_BYTE *)(a1 + 404))
            v32 = (__int16 *)&_AMR_WB_FRAMESIZE;
          else
            v32 = (__int16 *)&_AMR_NB_FRAMESIZE;
          v33 = 1;
          while (1)
          {
            v34 = v32[((unint64_t)v16[v28] >> 3) & 0xF];
            if (!v32[((unint64_t)v16[v28] >> 3) & 0xF])
              break;
            v31 += v34;
            *(_DWORD *)(a1 + 428) = v31;
            v28 += v34;
            *(_DWORD *)(a1 + 432) += v34;
            *(_DWORD *)(a1 + 424) = v33;
            if (v33 < v29)
            {
              ++v33;
              if (v28 < v13)
                continue;
            }
            goto LABEL_45;
          }
LABEL_72:
          *(_BYTE *)(a1 + 177) = 1;
          result = 1685348671;
          v4 = -1;
          goto LABEL_73;
        }
LABEL_47:
        AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), *(_DWORD *)(a1 + 432), v23, v16, v26, 1);
        *(_QWORD *)(a1 + 184) += *(unsigned int *)(a1 + 412);
        v9 = *(_QWORD *)(a1 + 8);
        v24 = *(unsigned int *)(a1 + 432);
        v17 = *(unsigned __int8 *)(a1 + 340);
        v10 = *(_QWORD *)(v9 + 96);
      }
      else
      {
        v24 = 0;
      }
      v10 += v24;
      *(_QWORD *)(v9 + 96) = v10;
      if (v17 || *(_DWORD *)(a1 + 416))
        break;
      if (!*(_DWORD *)(a1 + 344))
      {
        v10 = *(_QWORD *)(v9 + 88) + *(unsigned int *)(v9 + 80);
        *(_QWORD *)(v9 + 96) = v10;
      }
    }
    if (*(_BYTE *)(a1 + 404))
      v35 = 61;
    else
      v35 = 32;
    v36 = (v35 * *(_DWORD *)(a1 + 408));
    if (*(_DWORD *)(a1 + 284) < v36)
    {
      *(_DWORD *)(a1 + 284) = v36;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v36, 0);
    }
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a1 + 288);
    *(_DWORD *)(a1 + 448) = 0;
    if (!*(_DWORD *)(a1 + 200))
    {
      *(_DWORD *)(a1 + 200) = 1;
      CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), 1);
    }
    v37 = 0;
    v38 = 0;
    v39 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)v39 = 0;
    *(_DWORD *)(v39 + 8) = 0;
    *(_QWORD *)(a1 + 424) = 0;
    while (1)
    {
      if (v38 >= *(_DWORD *)(a1 + 408))
      {
        v50 = *(AudioStreamPacketDescription **)(a1 + 192);
        v50->mDataByteSize = v37;
        AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v37, 1u, *(const void **)(a1 + 288), v50, 1);
        ++*(_QWORD *)(a1 + 184);
        goto LABEL_11;
      }
      v7 = 1;
      *(_DWORD *)(a1 + 256) = 1;
      v8 = (unsigned __int8 *)(*(_QWORD *)(a1 + 440) + *(unsigned int *)(a1 + 448));
      *(_QWORD *)(a1 + 264) = v8;
LABEL_64:
      v52 = v7;
      StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), &v52, v8);
      v40 = v52;
      v41 = *(_DWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 264) += v52;
      v42 = v41 - v40;
      *(_DWORD *)(a1 + 256) = v42;
      if (v42)
      {
        result = 0;
        v4 = 247;
        goto LABEL_73;
      }
      v43 = (unsigned __int8 *)(*(_QWORD *)(a1 + 440) + *(unsigned int *)(a1 + 448));
      if (*(_BYTE *)(a1 + 404))
        v44 = (__int16 *)&_AMR_WB_FRAMESIZE;
      else
        v44 = (__int16 *)&_AMR_NB_FRAMESIZE;
      v45 = v44[((unint64_t)*v43 >> 3) & 0xF];
      *(_DWORD *)(a1 + 452) = v45;
      if (!v45)
        goto LABEL_72;
      v5 = v45 - 1;
      *(_DWORD *)(a1 + 256) = v5;
      v6 = v43 + 1;
      *(_QWORD *)(a1 + 264) = v43 + 1;
LABEL_70:
      v51 = v5;
      StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), &v51, v6);
      v46 = v51;
      v47 = *(_DWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 264) += v51;
      v48 = v47 - v46;
      *(_DWORD *)(a1 + 256) = v48;
      if (v48)
        break;
      v49 = *(_DWORD *)(a1 + 452);
      v37 = *(_DWORD *)(a1 + 428) + v49;
      *(_DWORD *)(a1 + 428) = v37;
      *(_DWORD *)(a1 + 448) += v49;
      v38 = *(_DWORD *)(a1 + 424) + 1;
      *(_DWORD *)(a1 + 424) = v38;
    }
    result = 0;
    v4 = 252;
    goto LABEL_73;
  }
  if (v3 == -1)
    return result;
  if (!v3)
    goto LABEL_11;
LABEL_73:
  *(_DWORD *)(a1 + 236) = v4;
  return result;
}

uint64_t AMRAudioStream::HandleDiscontinuity(AMRAudioStream *this)
{
  *((_DWORD *)this + 59) = 0;
  return 0;
}

uint64_t AUOOPRenderingClient::NeverTimesOut(AUOOPRenderingClient *this)
{
  unsigned __int8 v1;
  unsigned __int8 *v2;
  int v4;

  v2 = (unsigned __int8 *)&unk_1EE168000;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)&unk_1EE168000;
    if (v4)
    {
      AUOOPRenderingClient::NeverTimesOut(void)::kNeverTimeout = AUOOPRenderingClient::NeverTimesOut(void)::$_0::operator()();
      v2 = (_BYTE *)&unk_1EE168000;
    }
  }
  return v2[1128];
}

BOOL AUOOPRenderingClient::NeverTimesOut(void)::$_0::operator()()
{
  char *v0;
  NSObject *v1;
  id v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = getenv("IPCAU_NeverTimeout");
  if (v0)
  {
    if (kInterAppAudioScope)
    {
      v1 = *(id *)kInterAppAudioScope;
      if (!v1)
        return v0 != 0;
    }
    else
    {
      v1 = MEMORY[0x1E0C81028];
      v2 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 136315394;
      v5 = "AUOOPRenderingClient.mm";
      v6 = 1024;
      v7 = 44;
      _os_log_impl(&dword_18EE07000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Timeouts disabled!", (uint8_t *)&v4, 0x12u);
    }

  }
  return v0 != 0;
}

unint64_t AUOOPSharedMemory::InitializationParams::requiredByteSize(AUOOPSharedMemory::InitializationParams *this)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *exception;
  uint64_t v26;
  char *v27;
  char *v28;
  UInt32 ioPropertyDataSize;
  int outPropertyData;

  v2 = caulk::numeric::exceptional_add<unsigned long>(4 * *((_QWORD *)this + 1) + 4316, 15);
  v3 = *((_DWORD *)this + 5);
  v4 = v3 - 128;
  v5 = (16 * v3) | 8;
  if (v4 >= 0x1309)
    v6 = 2056;
  else
    v6 = v5;
  v7 = caulk::numeric::exceptional_add<unsigned long>(v6, 15);
  v8 = *((unsigned int *)this + 4);
  audioipc::SharedAudioBuffers::extendASBDs(&v27, *(__int128 **)this, *((_QWORD *)this + 1));
  if (!(_DWORD)v8)
    std::terminate();
  v26 = v2;
  v9 = v27;
  if (v28 == v27)
  {
    v11 = 0;
    if (v27)
LABEL_22:
      operator delete(v9);
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 48 * ((v28 - v27) / 48);
    do
    {
      if (*(_DWORD *)&v9[v10 + 16] <= *(_DWORD *)&v9[v10 + 40])
        v13 = *(_DWORD *)&v9[v10 + 40];
      else
        v13 = *(_DWORD *)&v9[v10 + 16];
      v14 = caulk::numeric::exceptional_mul<unsigned int>(v8, v13);
      v15 = caulk::numeric::exceptional_add<unsigned long>(v14, 15);
      if (HIDWORD(v15))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_1E290A260;
      }
      if ((v9[v10 + 12] & 0x20) != 0)
        v16 = *(_DWORD *)&v9[v10 + 28];
      else
        v16 = 1;
      v17 = caulk::numeric::exceptional_mul<unsigned int>(v15 & 0xFFFFFFF0, v16);
      v11 = caulk::numeric::exceptional_add<unsigned long>(v11, v17);
      if (!*(_DWORD *)&v9[v10 + 24] || !*(_DWORD *)&v9[v10 + 20])
      {
        v18 = caulk::numeric::exceptional_add<unsigned long>(16 * v8, 15);
        v11 = caulk::numeric::exceptional_add<unsigned long>(v11, v18 & 0xFFFFFFFFFFFFFFF0);
      }
      ioPropertyDataSize = 4;
      outPropertyData = 0;
      if (!AudioFormatGetProperty(0x66646570u, 0x28u, &v9[v10], &ioPropertyDataSize, &outPropertyData)
        && outPropertyData)
      {
        v19 = caulk::numeric::exceptional_add<unsigned long>(16 * v8, 15);
        v11 = caulk::numeric::exceptional_add<unsigned long>(v11, v19 & 0xFFFFFFFFFFFFFFF0);
      }
      v10 += 48;
    }
    while (v12 != v10);
    if (v9)
      goto LABEL_22;
  }
  v20 = *((_DWORD *)this + 5);
  v21 = v20 - 128;
  v22 = (32 * v20) | 8;
  if (v21 >= 0x1309)
    v23 = 4104;
  else
    v23 = v22;
  return (v7 & 0xFFFFFFFFFFFFFFF0)
       + (v26 & 0xFFFFFFFFFFFFFFF0)
       + v11
       + (caulk::numeric::exceptional_add<unsigned long>(v23, 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_18EF0DB3C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

const char *audioipc::eventlink_primitive::activate()
{
  const char *v0;
  const char *result;

  v0 = (const char *)os_eventlink_activate();
  if ((_DWORD)v0)
    audioipc::log_and_throw((audioipc *)"os_eventlink_activate failed", v0);
  result = (const char *)os_eventlink_associate();
  if ((_DWORD)result)
    audioipc::log_and_throw((audioipc *)"os_eventlink_associate failed", result);
  return result;
}

void std::vector<audioipc::SharedAudioBuffers::Element>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<audioipc::SharedAudioBuffers::Element,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::~rt_sender(uint64_t a1)
{
  audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::stop(a1);
  audioipc::eventlink_primitive::~eventlink_primitive((audioipc::eventlink_primitive *)(a1 + 56));
  caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)a1);
  return a1;
}

uint64_t audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::stop(uint64_t result)
{
  unsigned __int8 v1;
  unsigned int v2;

  v1 = atomic_load((unsigned __int8 *)(result + 49));
  if ((v1 & 1) == 0)
  {
    v2 = atomic_load(*(unsigned int **)(result + 24));
    if (v2 != 2)
    {
      atomic_store(1u, (unsigned __int8 *)(result + 49));
      atomic_store(2u, *(unsigned int **)(result + 24));
      audioipc::eventlink_primitive::timed_wait_signal_or_error(*(audioipc::eventlink_primitive **)(result + 56), 0.02);
      return os_eventlink_cancel();
    }
  }
  return result;
}

void std::__destroy_at[abi:ne180100]<audioipc::SharedAudioBuffers::Element,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
}

void audioipc::log_and_throw(audioipc *this, const char *a2)
{
  int v2;
  NSObject *v4;
  std::runtime_error *exception;
  int v6;
  audioipc *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v2 = (int)a2;
  v10 = *MEMORY[0x1E0C80C00];
  CADefaultLog();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
  {
    v6 = 136315394;
    v7 = this;
    v8 = 1024;
    v9 = v2;
    _os_log_fault_impl(&dword_18EE07000, v4, OS_LOG_TYPE_FAULT, "EXCEPTION: %s (%d)", (uint8_t *)&v6, 0x12u);
  }

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, (const char *)this);
}

void sub_18EF0DDCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AUOOPSharedMemory::init2(uint64_t a1, AUOOPSharedMemory::InitializationParams *this, _DWORD *a3, unint64_t a4)
{
  char *v8;
  int *v9;
  int v10;
  unsigned int v11;
  int v12;
  int *v13;
  int v14;
  unsigned int v15;
  int v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *exception;
  char *v46;
  char *v47;
  void *__p[3];
  UInt32 ioPropertyDataSize[3];
  void **outPropertyData;
  void **v51;
  void **v52;
  void **v53;
  uint64_t v54;

  if (a4 < AUOOPSharedMemory::InitializationParams::requiredByteSize(this))
    goto LABEL_51;
  v8 = (char *)a3 + a4;
  *(_QWORD *)a1 = a3;
  *a3 = 4096;
  v9 = (_DWORD *)((char *)a3
                + (caulk::numeric::exceptional_add<unsigned long>(4 * *((_QWORD *)this + 1) + 4316, 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)(a1 + 8) = v9;
  v10 = *((_DWORD *)this + 5);
  v11 = v10 - 128;
  v12 = 16 * v10;
  if (v11 >= 0x1309)
    v12 = 2048;
  *v9 = v12;
  v13 = (int *)((char *)v9 + (caulk::numeric::exceptional_add<unsigned long>(v12 | 8u, 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = *((_DWORD *)this + 5);
  v15 = v14 - 128;
  v16 = 32 * v14;
  if (v15 >= 0x1309)
    v16 = 4096;
  *v13 = v16;
  v17 = (char *)v13 + (caulk::numeric::exceptional_add<unsigned long>(v16 | 8u, 15) & 0xFFFFFFFFFFFFFFF0);
  if (v17 > v8)
    goto LABEL_51;
  v18 = (_QWORD *)(a1 + 24);
  if (*(_BYTE *)(a1 + 56))
  {
    outPropertyData = (void **)(a1 + 24);
    std::vector<audioipc::SharedAudioBuffers::Element>::__destroy_vector::operator()[abi:ne180100](&outPropertyData);
    *(_BYTE *)(a1 + 56) = 0;
  }
  v19 = *((unsigned int *)this + 4);
  audioipc::SharedAudioBuffers::extendASBDs((char **)__p, *(__int128 **)this, *((_QWORD *)this + 1));
  v21 = (char *)__p[0];
  v20 = __p[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *v18 = 0;
  *(_DWORD *)(a1 + 48) = v19;
  if (!(_DWORD)v19 || (v17 & 0xF) != 0)
    goto LABEL_51;
  if (v20 == v21)
  {
    v44 = v17;
  }
  else
  {
    v22 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v21) >> 4);
    if (v22 >> 57)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v47 = v8;
    v54 = a1 + 40;
    outPropertyData = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<audioipc::SharedAudioBuffers::Element>>(v22);
    v51 = outPropertyData;
    v52 = outPropertyData;
    v53 = &outPropertyData[16 * v23];
    std::vector<audioipc::SharedAudioBuffers::Element>::__swap_out_circular_buffer((uint64_t *)(a1 + 24), &outPropertyData);
    std::__split_buffer<audioipc::SharedAudioBuffers::Element>::~__split_buffer((uint64_t)&outPropertyData);
    v24 = &v21[48 * v22];
    v46 = v17;
    do
    {
      v26 = *(_QWORD *)(a1 + 32);
      v25 = *(_QWORD *)(a1 + 40);
      if (v26 >= v25)
      {
        v28 = (uint64_t)(v26 - *v18) >> 7;
        if ((unint64_t)(v28 + 1) >> 57)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v29 = v25 - *v18;
        v30 = v29 >> 6;
        if (v29 >> 6 <= (unint64_t)(v28 + 1))
          v30 = v28 + 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFF80)
          v31 = 0x1FFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        v54 = a1 + 40;
        if (v31)
          v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<audioipc::SharedAudioBuffers::Element>>(v31);
        else
          v32 = 0;
        outPropertyData = (void **)v31;
        v51 = (void **)(v31 + (v28 << 7));
        v52 = v51;
        v53 = (void **)(v31 + (v32 << 7));
        audioipc::SharedAudioBuffers::Element::Element((uint64_t)v51, (__int128 *)v21);
        v52 += 16;
        std::vector<audioipc::SharedAudioBuffers::Element>::__swap_out_circular_buffer((uint64_t *)(a1 + 24), &outPropertyData);
        v27 = *(_QWORD *)(a1 + 32);
        std::__split_buffer<audioipc::SharedAudioBuffers::Element>::~__split_buffer((uint64_t)&outPropertyData);
      }
      else
      {
        audioipc::SharedAudioBuffers::Element::Element(*(_QWORD *)(a1 + 32), (__int128 *)v21);
        v27 = v26 + 128;
        *(_QWORD *)(a1 + 32) = v27;
      }
      *(_QWORD *)(a1 + 32) = v27;
      if (*((_DWORD *)v21 + 4) <= *((_DWORD *)v21 + 10))
        v33 = *((_DWORD *)v21 + 10);
      else
        v33 = *((_DWORD *)v21 + 4);
      v34 = caulk::numeric::exceptional_mul<unsigned int>(v19, v33);
      v35 = caulk::numeric::exceptional_add<unsigned long>(v34, 15);
      if (HIDWORD(v35))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_1E290A260;
      }
      v37 = *(_QWORD *)(v27 - 80);
      v36 = *(_QWORD *)(v27 - 72);
      if (v36 - v37 != 8)
      {
        v38 = v37 + 8;
        v39 = *((_DWORD *)v21 + 3);
        do
        {
          v40 = *((_DWORD *)v21 + 7);
          if ((v39 & 0x20) != 0)
            v40 = 1;
          *(_QWORD *)(v38 + 8) = v17;
          *(_DWORD *)v38 = v40;
          *(_DWORD *)(v38 + 4) = v35 & 0xFFFFFFF0;
          v38 += 16;
          v17 += v35 & 0xFFFFFFF0;
        }
        while (v38 != v36);
      }
      if (*((_DWORD *)v21 + 6))
        v41 = *((_DWORD *)v21 + 5) == 0;
      else
        v41 = 1;
      if (v41)
      {
        v42 = caulk::numeric::exceptional_add<unsigned long>(16 * v19, 15);
        *(_QWORD *)(v27 - 32) = v17;
        *(_QWORD *)(v27 - 24) = v19;
        v17 += v42 & 0xFFFFFFFFFFFFFFF0;
      }
      LODWORD(outPropertyData) = 0;
      ioPropertyDataSize[0] = 4;
      if (!AudioFormatGetProperty(0x66646570u, 0x28u, v21, ioPropertyDataSize, &outPropertyData)
        && (_DWORD)outPropertyData)
      {
        v43 = caulk::numeric::exceptional_add<unsigned long>(16 * v19, 15);
        *(_QWORD *)(v27 - 16) = v17;
        *(_QWORD *)(v27 - 8) = v19;
        v17 += v43 & 0xFFFFFFFFFFFFFFF0;
      }
      v21 += 48;
    }
    while (v21 != v24);
    v44 = v46;
    v8 = v47;
  }
  if (v17 - v44 > (unint64_t)(v8 - v44))
LABEL_51:
    std::terminate();
  if (__p[0])
    operator delete(__p[0]);
  *(_BYTE *)(a1 + 56) = 1;
}

void sub_18EF0E1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::vector<audioipc::SharedAudioBuffers::Element>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t caulk::numeric::exceptional_add<unsigned long>(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;
  std::runtime_error *exception;

  v2 = __CFADD__(a1, a2);
  result = a1 + a2;
  if (v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "arithmetic addition overflow");
  }
  return result;
}

void sub_18EF0E24C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void audioipc::SharedAudioBuffers::extendASBDs(char **a1, __int128 *a2, uint64_t a3)
{
  __int128 *v3;
  _OWORD *v5;
  __int128 *v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    v3 = a2;
    v5 = 0;
    v6 = (__int128 *)((char *)a2 + 40 * a3);
    do
    {
      v22 = *v3;
      v7 = *((_DWORD *)v3 + 4);
      v20 = *(__int128 *)((char *)v3 + 20);
      v21 = *((_DWORD *)v3 + 9);
      if (!v7)
        std::terminate();
      v8 = (unint64_t)a1[2];
      if ((unint64_t)v5 >= v8)
      {
        v10 = *a1;
        v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - *a1) >> 4);
        v12 = v11 + 1;
        if (v11 + 1 > 0x555555555555555)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v10) >> 4);
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x2AAAAAAAAAAAAAALL)
          v14 = 0x555555555555555;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 > 0x555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v15 = (char *)operator new(48 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[48 * v11];
        *(_OWORD *)v16 = v22;
        *((_DWORD *)v16 + 4) = v7;
        *(_OWORD *)(v16 + 20) = v20;
        *((_DWORD *)v16 + 9) = v21;
        *((_DWORD *)v16 + 10) = 0;
        v17 = v16;
        if (v5 != (_OWORD *)v10)
        {
          do
          {
            v18 = *(v5 - 3);
            v19 = *(v5 - 1);
            *((_OWORD *)v17 - 2) = *(v5 - 2);
            *((_OWORD *)v17 - 1) = v19;
            *((_OWORD *)v17 - 3) = v18;
            v17 -= 48;
            v5 -= 3;
          }
          while (v5 != (_OWORD *)v10);
          v5 = *a1;
        }
        v9 = v16 + 48;
        *a1 = v17;
        a1[1] = v16 + 48;
        a1[2] = &v15[48 * v14];
        if (v5)
          operator delete(v5);
      }
      else
      {
        *v5 = *v3;
        *((_DWORD *)v5 + 4) = v7;
        *(_OWORD *)((char *)v5 + 20) = v20;
        *(_QWORD *)((char *)v5 + 36) = v21;
        v9 = (char *)(v5 + 3);
      }
      a1[1] = v9;
      v3 = (__int128 *)((char *)v3 + 40);
      v5 = v9;
    }
    while (v3 != v6);
  }
}

void sub_18EF0E428(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::ipc::mapped_memory::get_raw_ptr(caulk::ipc::mapped_memory *this, unint64_t a2)
{
  uint64_t result;

  if (*((_QWORD *)this + 1) > a2)
    return *(_QWORD *)this + a2;
  _os_assert_log();
  result = _os_crash();
  __break(1u);
  return result;
}

char *audioipc::SharedAudioBuffers::immutableBufferList(audioipc::SharedAudioBuffers *this, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 7))
    std::vector<std::unique_ptr<ACOutputBuffer>>::__throw_out_of_range[abi:ne180100]();
  if (*((_DWORD *)this + 6) < a3)
    std::terminate();
  return audioipc::SharedAudioBuffers::Element::immutableBufferList((audioipc::SharedAudioBuffers::Element *)(*(_QWORD *)this + ((unint64_t)a2 << 7)), a3);
}

char *audioipc::SharedAudioBuffers::Element::immutableBufferList(audioipc::SharedAudioBuffers::Element *this, unsigned int a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;

  if (*((_DWORD *)this + 4) <= *((_DWORD *)this + 10))
    v4 = *((_DWORD *)this + 10);
  else
    v4 = *((_DWORD *)this + 4);
  v5 = caulk::numeric::exceptional_mul<unsigned int>(a2, v4);
  v7 = *((_QWORD *)this + 6);
  v6 = *((_QWORD *)this + 7);
  v8 = (char *)this + 48;
  v9 = v6 - v7 - 8;
  if (v9)
  {
    v10 = (_DWORD *)(v7 + 12);
    do
    {
      *v10 = v5;
      v10 += 4;
      v9 -= 16;
    }
    while (v9);
  }
  return v8;
}

double AUOOPRenderingClient::computeTimeoutSeconds(AUOOPRenderingClient *this, const AUOOPRenderClientUser *a2, const AudioTimeStamp *a3, unsigned int a4)
{
  double v4;
  double v5;
  double v6;
  double v7;

  v4 = 0.0;
  if (!*((_BYTE *)this + 1))
  {
    if ((_BYTE)a2)
    {
      return 300.0;
    }
    else
    {
      v5 = (double)a4 / *((double *)this + 19);
      v6 = v5 * 0.02;
      v4 = v5 - fmax(v5 * 0.02, 0.0002);
      if ((a3->mFlags & 2) != 0)
      {
        v7 = (double)(uint64_t)(a3->mHostTime - mach_absolute_time()) * 0.0000000416666667;
        if (v7 >= v4)
          v7 = v4;
        if (v7 >= v6)
          return v7;
        else
          return v6;
      }
    }
  }
  return v4;
}

uint64_t AUOOPRenderingClient::copyEventsToSharedMemory(uint64_t this, AURenderEventAllocator *a2, double a3, int a4)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  char *v9;
  AURenderEventAllocator *v10;
  unsigned int v11;
  unsigned int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = this;
  v6 = *(unsigned int **)(this + 80);
  v7 = v6[1];
  v8 = (_DWORD)v6 + 8;
  v9 = (char *)v6 + v7 + 8;
  if (a2)
  {
    v10 = a2;
    v11 = *v6 - v7;
    do
    {
      v12 = AURenderEventAllocator::eventSize(v10, (const AURenderEvent *)a2);
      if (v11 >= v12)
        goto LABEL_10;
      v6[1] = (_DWORD)v9 - v8;
      v14 = *(_QWORD *)(v5 + 80);
      this = audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::can_send(v5 + 8, v13);
      if (!(_DWORD)this)
        break;
      *(_BYTE *)(v14 + 4104) = 4;
      v15 = v5 + 8;
      if (a3 <= 0.0)
      {
        this = audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::signal_wait(v15);
        if (!(_DWORD)this)
          break;
      }
      else
      {
        this = audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::signal_wait_with_timeout(v15, a3);
        if ((this & 1) == 0)
          break;
      }
      v6[1] = 0;
      v11 = *v6;
      v9 = (char *)(v6 + 2);
      if (*v6 >= v12)
      {
LABEL_10:
        this = (uint64_t)memcpy(v9, v10, v12);
        v9 += v12;
        v11 -= v12;
      }
      v10 = *(AURenderEventAllocator **)v10;
    }
    while (v10);
  }
  v6[1] = (_DWORD)v9 - v8;
  if (a4 && (_DWORD)v9 != v8)
  {
    v16 = *(_QWORD *)(v5 + 80);
    v17 = v5 + 8;
    this = audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::can_send(v17, a3);
    if ((_DWORD)this)
    {
      *(_BYTE *)(v16 + 4104) = 5;
      if (a3 <= 0.0)
        this = audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::signal_wait(v17);
      else
        this = audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::signal_wait_with_timeout(v17, a3);
    }
    v6[1] = 0;
  }
  return this;
}

uint64_t AUOOPRenderingClient::pullOneInput(AUOOPRenderingClient *this, unsigned int a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8;
  audioipc::SharedAudioBuffers *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t result;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  const void **v16;
  void **v17;

  v8 = *((_QWORD *)this + 10);
  v9 = (AUOOPRenderingClient *)((char *)this + 104);
  v10 = *(unsigned int **)audioipc::SharedAudioBuffers::mutableBufferList((AUOOPRenderingClient *)((char *)this + 104), a2, a4);
  v11 = v8 + 4 * a2;
  *(_DWORD *)(v11 + 4316) = 0;
  result = *((_QWORD *)this + 26);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, const AudioTimeStamp *, uint64_t, _QWORD, unsigned int *))(result + 16))(result, v11 + 4316, a3, a4, a2, v10);
    if (!(_DWORD)result)
    {
      v13 = audioipc::SharedAudioBuffers::immutableBufferList(v9, a2, a4);
      v14 = **(_DWORD **)v13;
      if (v14 >= *v10)
        v15 = *v10;
      else
        v15 = v14;
      if ((_DWORD)v15)
      {
        v16 = (const void **)(v10 + 4);
        v17 = (void **)(*(_QWORD *)v13 + 16);
        do
        {
          if (*v17 != *v16)
            memcpy(*v17, *v16, *((unsigned int *)v16 - 1));
          v16 += 2;
          v17 += 2;
          --v15;
        }
        while (v15);
      }
      return 0;
    }
  }
  return result;
}

BOOL audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::can_send(uint64_t a1, double a2)
{
  unsigned __int8 v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL8 result;
  unint64_t v8;

  v2 = atomic_load((unsigned __int8 *)(a1 + 49));
  v3 = *(unsigned int **)(a1 + 24);
  if ((v2 & 1) != 0)
  {
    result = 0;
    atomic_store(2u, v3);
    return result;
  }
  v4 = atomic_load(v3);
  if (v4 == 2)
    return 0;
  v5 = atomic_load(*(unsigned int **)(a1 + 32));
  if (v5 == 2)
    return 0;
  if (!*(_BYTE *)(a1 + 48))
  {
    if (!atomic_load(*(unsigned int **)(a1 + 32)))
    {
      v8 = audioipc::eventlink_primitive::timed_wait_or_error(*(audioipc::eventlink_primitive **)(a1 + 56), a2);
      if ((v8 & 0xFF00000000) != 0)
        return v8 != 0;
      audioipc::log_error((audioipc *)"can_send draining", (const char *)v8);
    }
    return 0;
  }
  return 1;
}

BOOL audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::signal_wait_with_timeout(uint64_t a1, double a2)
{
  unint64_t v3;
  unsigned __int8 v4;
  char v5;
  unsigned int *v6;
  _BOOL8 result;

  atomic_store(0, *(unsigned int **)(a1 + 24));
  v3 = audioipc::eventlink_primitive::timed_wait_signal_or_error(*(audioipc::eventlink_primitive **)(a1 + 56), a2);
  v4 = atomic_load((unsigned __int8 *)(a1 + 49));
  if ((v4 & 1) != 0)
  {
    result = 0;
    atomic_store(2u, *(unsigned int **)(a1 + 24));
  }
  else
  {
    v5 = v3;
    v6 = *(unsigned int **)(a1 + 24);
    if (HIDWORD(v3))
    {
      atomic_store(1u, v6);
      result = v3 != 0;
      *(_BYTE *)(a1 + 48) = v5;
    }
    else
    {
      atomic_store(2u, v6);
      audioipc::log_error((audioipc *)"rt_sender::signal_wait_with_timeout", (const char *)v3);
      return 0;
    }
  }
  return result;
}

uint64_t audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::signal_wait(uint64_t a1)
{
  unint64_t v2;
  unsigned __int8 v3;
  unsigned int *v4;
  uint64_t result;

  atomic_store(0, *(unsigned int **)(a1 + 24));
  v2 = audioipc::eventlink_primitive::wait_signal_or_error(*(audioipc::eventlink_primitive **)(a1 + 56));
  v3 = atomic_load((unsigned __int8 *)(a1 + 49));
  if ((v3 & 1) != 0)
  {
    result = 0;
    atomic_store(2u, *(unsigned int **)(a1 + 24));
  }
  else
  {
    v4 = *(unsigned int **)(a1 + 24);
    if (HIDWORD(v2))
    {
      result = 1;
      atomic_store(1u, v4);
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      atomic_store(2u, v4);
      audioipc::log_error((audioipc *)"rt_sender::signal_wait", (const char *)v2);
      return 0;
    }
  }
  return result;
}

void audioipc::log_error(audioipc *this, const char *a2)
{
  int v2;
  NSObject *v4;
  int v5;
  audioipc *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v2 = (int)a2;
  v9 = *MEMORY[0x1E0C80C00];
  CADefaultLog();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = 136315394;
    v6 = this;
    v7 = 1024;
    v8 = v2;
    _os_log_error_impl(&dword_18EE07000, v4, OS_LOG_TYPE_ERROR, "%s failed: %d", (uint8_t *)&v5, 0x12u);
  }

}

char *audioipc::SharedAudioBuffers::mutableBufferList(audioipc::SharedAudioBuffers *this, unsigned int a2, unsigned int a3)
{
  audioipc::SharedAudioBuffers::Element *v3;
  char *v4;
  uint64_t v5;
  char *v6;

  if (a2 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 7))
    std::vector<std::unique_ptr<ACOutputBuffer>>::__throw_out_of_range[abi:ne180100]();
  if (*((_DWORD *)this + 6) < a3)
    std::terminate();
  v3 = (audioipc::SharedAudioBuffers::Element *)(*(_QWORD *)this + ((unint64_t)a2 << 7));
  v4 = audioipc::SharedAudioBuffers::Element::immutableBufferList(v3, a3);
  v5 = *((_QWORD *)v4 + 1) - *(_QWORD *)v4;
  v6 = (char *)v3 + 72;
  if (v5 != 8)
    memmove((void *)(*(_QWORD *)v6 + 8), (const void *)(*(_QWORD *)v4 + 8), v5 - 8);
  return v6;
}

uint64_t AURenderEventAllocator::eventSize(AURenderEventAllocator *this, const AURenderEvent *a2)
{
  int v2;
  uint64_t result;

  v2 = *((unsigned __int8 *)this + 16) - 1;
  result = 48;
  switch(v2)
  {
    case 0:
    case 1:
      return result;
    case 7:
      result = 24;
      break;
    case 8:
      result = *((unsigned __int16 *)this + 9) + 21;
      break;
    case 9:
      result = MIDI::EventList::size((MIDI::EventList *)((char *)this + 20)) + 20;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t EC3PacketParser::IsValid(EC3PacketParser *this)
{
  uint64_t result;
  unsigned __int8 *v3;
  unsigned int v4;

  if (!*((_BYTE *)this + 4))
    return 0;
  if (*((_BYTE *)this + 5))
    return 1;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  v4 = *(_DWORD *)this == 1633889587 ? 10 : 12;
  if (ParseAC3Header(v3, v4, (AudioStreamBasicDescription *)((char *)this + 24), (unsigned int *)this + 16, (unsigned int *)this + 17, 0, (unsigned int *)this + 18, 0))return 0;
  result = 1;
  *((_BYTE *)this + 5) = 1;
  return result;
}

uint64_t EC3StreamParser::AssessPacket(char **this, unsigned __int8 *a2, unsigned int a3, int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  char v8;
  unsigned int *v14;
  size_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  char **v21;
  UInt32 v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char **v27;
  unsigned int v28;
  unsigned int v29;
  AudioStreamBasicDescription v30;
  unsigned int v31;
  unsigned int v32[2];
  uint64_t __dst;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)this)
  {
    result = 0;
    v8 = 1;
LABEL_3:
    *a6 = v8;
    return result;
  }
  *(_QWORD *)v32 = 0;
  v31 = 0;
  memset(&v30, 0, sizeof(v30));
  v29 = 0;
  result = ParseAC3Header(a2, a3, &v30, 0, &v31, 0, &v29, 0);
  if (!(_DWORD)result)
  {
    result = GetAC3PacketIndex(a2, (int *)v32, &v32[1], v14);
    if (!(_DWORD)result)
    {
      if (a3 <= 0xB)
      {
        v34 = 0;
        __dst = 0;
      }
      if (a3 >= 0xC)
        v15 = 12;
      else
        v15 = a3;
      memcpy(&__dst, a2, v15);
      if (a4)
      {
        if (v32[1] - 1 > 1)
        {
          if (!v32[1])
          {
            std::vector<EC3Header>::push_back[abi:ne180100](this + 21, &__dst);
            v25 = v31;
            v26 = *((_DWORD *)this + 9) + v31;
            ++*((_DWORD *)this + 8);
            *((_DWORD *)this + 9) = v26;
            v27 = &this[2 * (*((_DWORD *)this + 1) - 1)];
            ++*((_DWORD *)v27 + 10);
            *((_DWORD *)v27 + 12) += v25;
          }
          goto LABEL_26;
        }
        if (!v32[0])
        {
          v28 = *((_DWORD *)this + 49) + 1;
          if (v28 >= *((_DWORD *)this + 48))
            *(_BYTE *)this = 1;
          else
            *((_DWORD *)this + 49) = v28;
          goto LABEL_26;
        }
        if (*((_DWORD *)this + 1) != 8)
        {
          std::vector<EC3Header>::push_back[abi:ne180100](this + 21, &__dst);
          v16 = *((_DWORD *)this + 9);
          v17 = *((_DWORD *)this + 8) + 1;
          v18 = *((unsigned int *)this + 1);
          *((_DWORD *)this + 1) = v18 + 1;
          v19 = v31;
          v20 = v16 + v31;
          *((_DWORD *)this + 8) = v17;
          *((_DWORD *)this + 9) = v20;
          v21 = &this[2 * v18];
          *((_DWORD *)v21 + 10) = 1;
          *(char **)((char *)v21 + 44) = (char *)vdup_n_s32(v19);
          v22 = 0x600 / v30.mFramesPerPacket;
          *((_DWORD *)v21 + 13) = 0x600 / v30.mFramesPerPacket;
          if (v22 > *((_DWORD *)this + 48))
            *((_DWORD *)this + 48) = v22;
          goto LABEL_26;
        }
      }
      else if (v32[1])
      {
        std::vector<EC3Header>::push_back[abi:ne180100](this + 21, &__dst);
        *((_DWORD *)this + 1) = 1;
        v23 = v31;
        v24 = *((_DWORD *)this + 9) + v31;
        *((_DWORD *)this + 8) = 1;
        *((_DWORD *)this + 9) = v24;
        *((_DWORD *)this + 10) = 1;
        *((_DWORD *)this + 11) = v23;
        *((_DWORD *)this + 12) = v23;
LABEL_26:
        result = 0;
        *a5 = v31;
        v8 = *(_BYTE *)this;
        goto LABEL_3;
      }
      return 560226676;
    }
  }
  return result;
}

void std::vector<EC3Header>::push_back[abi:ne180100](char **a1, uint64_t *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v8 = *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v10 = v9 + 1;
    if (v9 + 1 > 0x1555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 2);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(12 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[12 * v9];
    *(_QWORD *)v14 = *a2;
    *((_DWORD *)v14 + 2) = *((_DWORD *)a2 + 2);
    v7 = v14 + 12;
    if (v5 != v8)
    {
      do
      {
        v15 = *(_QWORD *)(v5 - 12);
        v5 -= 12;
        v16 = *((_DWORD *)v5 + 2);
        *(_QWORD *)(v14 - 12) = v15;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v16;
      }
      while (v5 != v8);
      v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[12 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    v6 = *a2;
    *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v5 = v6;
    v7 = v5 + 12;
  }
  a1[1] = v7;
}

Float64 EC3StreamParser::AssessPacketHeader(EC3StreamParser *this, const void *a2, unsigned int *a3, unsigned int *a4, BOOL *a5, AudioStreamBasicDescription *a6, unsigned int *a7, int *a8)
{
  unsigned int *v12;
  Float64 result;
  BOOL v14;
  char v15;
  __int128 v16;
  AudioStreamBasicDescription v17;
  unsigned int v18;
  int v19;

  v19 = 0;
  v18 = 0;
  memset(&v17, 0, sizeof(v17));
  if (!ParseAC3Header((unsigned __int8 *)this, a2, &v17, 0, a3, 0, &v18, (int *)a7)
    && !GetAC3PacketIndex((unsigned __int8 *)this, &v19, (unsigned int *)a6, v12))
  {
    if (LODWORD(a6->mSampleRate))
      v14 = v19 == 0;
    else
      v14 = 0;
    v15 = v14;
    *(_BYTE *)a4 = v15;
    if (a5)
    {
      result = v17.mSampleRate;
      v16 = *(_OWORD *)&v17.mBytesPerPacket;
      *(_OWORD *)a5 = *(_OWORD *)&v17.mSampleRate;
      *((_OWORD *)a5 + 1) = v16;
      *((_QWORD *)a5 + 4) = *(_QWORD *)&v17.mBitsPerChannel;
    }
  }
  return result;
}

void std::vector<AudioFormatListItem>::resize(void **a1, unint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  v6 = (char *)*a1;
  v5 = (char *)a1[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
  v8 = a2 - v7;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[48 * a2];
  }
  else
  {
    v10 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - v5) >> 4) >= v8)
    {
      v27 = &v5[48 * v8];
      v28 = 48 * a2 - 16 * ((v5 - (_BYTE *)*a1) >> 4);
      do
      {
        v29 = *a3;
        v30 = a3[2];
        *((_OWORD *)v5 + 1) = a3[1];
        *((_OWORD *)v5 + 2) = v30;
        *(_OWORD *)v5 = v29;
        v5 += 48;
        v28 -= 48;
      }
      while (v28);
      a1[1] = v27;
    }
    else
    {
      if (a2 > 0x555555555555555)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v6) >> 4);
      v12 = 2 * v11;
      if (2 * v11 <= a2)
        v12 = a2;
      if (v11 >= 0x2AAAAAAAAAAAAAALL)
        v13 = 0x555555555555555;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v13);
      v16 = &v14[48 * v7];
      v17 = &v14[48 * a2];
      v18 = v16;
      v19 = 48 * a2 - 48 * v7;
      do
      {
        v20 = *a3;
        v21 = a3[2];
        *((_OWORD *)v18 + 1) = a3[1];
        *((_OWORD *)v18 + 2) = v21;
        *(_OWORD *)v18 = v20;
        v18 += 48;
        v19 -= 48;
      }
      while (v19);
      v22 = &v14[48 * v15];
      v24 = (char *)*a1;
      v23 = (char *)a1[1];
      if (v23 != *a1)
      {
        do
        {
          v25 = *((_OWORD *)v23 - 3);
          v26 = *((_OWORD *)v23 - 1);
          *((_OWORD *)v16 - 2) = *((_OWORD *)v23 - 2);
          *((_OWORD *)v16 - 1) = v26;
          *((_OWORD *)v16 - 3) = v25;
          v16 -= 48;
          v23 -= 48;
        }
        while (v23 != v24);
        v23 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v22;
      if (v23)
        operator delete(v23);
    }
  }
}

_QWORD *std::vector<AudioFormatListItem>::__init_with_size[abi:ne180100]<AudioFormatListItem*,AudioFormatListItem*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<AudioFormatListItem>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18EF0F1DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<AudioFormatListItem>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void auoop::WorkgroupPropagator::~WorkgroupPropagator(os_unfair_lock_s **this)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  auoop::WorkgroupPropagator **v4;
  auoop::WorkgroupPropagator **v5;
  int64_t v6;
  os_unfair_lock_s *v7;
  auoop::WorkgroupPropagator *v8;
  uint64_t v9;

  v2 = *this;
  v3 = *this + 8;
  os_unfair_lock_lock(v3);
  v5 = *(auoop::WorkgroupPropagator ***)&v2[10]._os_unfair_lock_opaque;
  v4 = *(auoop::WorkgroupPropagator ***)&v2[12]._os_unfair_lock_opaque;
  if (v5 != v4)
  {
    while (*v5 != (auoop::WorkgroupPropagator *)this)
    {
      if (++v5 == v4)
      {
        v5 = *(auoop::WorkgroupPropagator ***)&v2[12]._os_unfair_lock_opaque;
        break;
      }
    }
  }
  if (v5 != v4)
  {
    v6 = (char *)v4 - (char *)(v5 + 1);
    if (v4 != v5 + 1)
      memmove(v5, v5 + 1, (char *)v4 - (char *)(v5 + 1));
    *(_QWORD *)&v2[12]._os_unfair_lock_opaque = (char *)v5 + v6;
  }
  os_unfair_lock_unlock(v3);
  v7 = this[6];
  if (v7)
  {
    this[7] = v7;
    operator delete(v7);
  }
  v8 = (auoop::WorkgroupPropagator *)this[4];
  if (v8 == (auoop::WorkgroupPropagator *)(this + 1))
  {
    v9 = 4;
    v8 = (auoop::WorkgroupPropagator *)(this + 1);
  }
  else
  {
    if (!v8)
      return;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
}

void std::vector<std::unique_ptr<auoop::PipeSubPool>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<auoop::PipeSubPool>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<auoop::PipeSubPool>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)(a1 + 120);
  std::vector<auoop::PipeSubPool::PipeSlot>::__destroy_vector::operator()[abi:ne180100](&v4);
  MEMORY[0x193FFDDC4](a1 + 100);

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x193FFE460);
}

void std::vector<auoop::PipeSubPool::PipeSlot>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v4 - 3);
        *((_QWORD *)v4 - 3) = 0;
        if (v6)
          std::default_delete<AUOOPRenderingClient>::operator()[abi:ne180100](v6);
        v4 -= 32;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<AUOOPRenderingClient>::operator()[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 136))
  {
    v2 = (void **)(a1 + 104);
    std::vector<audioipc::SharedAudioBuffers::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::~rt_sender(a1 + 8);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<caulk::synchronized<auoop::RenderPipePool,std::recursive_mutex,caulk::empty_atomic_interface<auoop::RenderPipePool>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::synchronized<auoop::RenderPipePool,std::recursive_mutex,caulk::empty_atomic_interface<auoop::RenderPipePool>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2917B78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

void std::__shared_ptr_emplace<caulk::synchronized<auoop::RenderPipePool,std::recursive_mutex,caulk::empty_atomic_interface<auoop::RenderPipePool>>>::__on_zero_shared(uint64_t a1)
{
  os_unfair_lock_s **v2;
  void **v3;

  v2 = (os_unfair_lock_s **)(a1 + 128);
  if (*(_BYTE *)(a1 + 200))
  {
    auoop::WorkgroupPropagator::~WorkgroupPropagator((os_unfair_lock_s **)(a1 + 128));
    *(_BYTE *)(a1 + 200) = 0;
  }

  if (*(_BYTE *)(a1 + 200))
    auoop::WorkgroupPropagator::~WorkgroupPropagator(v2);
  v3 = (void **)(a1 + 104);
  std::vector<std::unique_ptr<auoop::PipeSubPool>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 24));
}

uint64_t auoop::WorkgroupPropagator::WorkgroupPropagator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void **v25;

  v3 = a2;
  *(_QWORD *)a1 = a2;
  v5 = a1 + 8;
  v6 = (_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7)
  {
    v6 = (_QWORD *)(a1 + 32);
    goto LABEL_5;
  }
  if (v7 != a3)
  {
    *(_QWORD *)(a1 + 32) = v7;
LABEL_5:
    *v6 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 32) = v5;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 24))(*v6, v5);
  v3 = *(_QWORD *)a1;
LABEL_7:
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  v9 = *(uint64_t **)(v3 + 48);
  v8 = *(_QWORD *)(v3 + 56);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *(uint64_t **)(v3 + 40);
    v12 = v9 - v11;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = (char *)operator new(8 * v15);
      v11 = *(uint64_t **)(v3 + 40);
      v9 = *(uint64_t **)(v3 + 48);
    }
    else
    {
      v16 = 0;
    }
    v17 = (uint64_t *)&v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = a1;
    v10 = v17 + 1;
    if (v9 != v11)
    {
      do
      {
        v19 = *--v9;
        *--v17 = v19;
      }
      while (v9 != v11);
      v11 = *(uint64_t **)(v3 + 40);
    }
    *(_QWORD *)(v3 + 40) = v17;
    *(_QWORD *)(v3 + 48) = v10;
    *(_QWORD *)(v3 + 56) = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v9 = a1;
    v10 = v9 + 1;
  }
  *(_QWORD *)(v3 + 48) = v10;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  os_unfair_lock_lock((os_unfair_lock_t)v3);
  v21 = 0uLL;
  v22 = 0;
  std::vector<auoop::TrackedWorkgroup>::__init_with_size[abi:ne180100]<auoop::TrackedWorkgroup*,auoop::TrackedWorkgroup*>(&v21, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 3));
  os_unfair_lock_unlock((os_unfair_lock_t)v3);
  v23 = v21;
  v24 = v22;
  v25 = (void **)&v21;
  v22 = 0;
  v21 = 0uLL;
  std::vector<auoop::TrackedWorkgroup>::__destroy_vector::operator()[abi:ne180100](&v25);
  auoop::WorkgroupPropagator::propagate(a1, (uint64_t *)&v23);
  *(_QWORD *)&v21 = &v23;
  std::vector<auoop::TrackedWorkgroup>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  return a1;
}

void sub_18EF0F77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  void **v11;
  void *v13;
  _QWORD *v14;
  uint64_t v15;

  std::vector<auoop::TrackedWorkgroup>::__destroy_vector::operator()[abi:ne180100](&a9);
  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 56) = v13;
    operator delete(v13);
  }
  v14 = *(_QWORD **)(v10 + 32);
  if (v14 == v9)
  {
    v15 = 4;
  }
  else
  {
    if (!v14)
      goto LABEL_8;
    v15 = 5;
    v9 = *(_QWORD **)(v10 + 32);
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v15))(v9);
LABEL_8:
  _Unwind_Resume(a1);
}

void auoop::RenderPipeUser::~RenderPipeUser(auoop::RenderPipeUser *this)
{
  std::recursive_mutex **v2;
  std::recursive_mutex *v3;
  std::recursive_mutex **v4;
  unsigned __int8 v5;
  id v6;
  id v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  id v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint8_t v33[4];
  void *v34;
  _BYTE buf[12];
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  _BYTE *v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = *(std::recursive_mutex ***)this;
  if (!*(_QWORD *)this)
    return;
  v3 = *v2;
  std::recursive_mutex::lock(*v2);
  objc_msgSend(*(id *)&v3[2].__m_.__opaque[48], "removeObject:", *((_QWORD *)this + 2));
  v4 = *(std::recursive_mutex ***)this;
  v5 = atomic_load((unsigned __int8 *)this + 64);
  if ((v5 & 1) != 0)
    v6 = 0;
  else
    v6 = *((id *)this + 2);
  v32 = v6;
  v7 = v6;
  v8 = *((_DWORD *)v4 + 23);
  v9 = *((_DWORD *)v4 + 22) - 1;
  *((_DWORD *)v4 + 22) = v9;
  v10 = *((_DWORD *)v4 + 24);
  if (v10 >= v9)
    v10 = v9;
  if (v8 > v10)
  {
    v11 = auoop::PipeSubPool::acquirePipeSlot((auoop::PipeSubPool *)v4, 0, 0);
    v12 = v7;
    audioipc::rt_sender<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::stop(*(_QWORD *)(v11 + 8) + 8);
    if (!v12)
    {
LABEL_26:
      v24 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v24)
        std::default_delete<AUOOPRenderingClient>::operator()[abi:ne180100](v24);

      __dmb(0xBu);
      atomic_store(0, (unsigned __int8 *)v11);
      v9 = *((_DWORD *)v4 + 22);
      --*((_DWORD *)v4 + 23);
      goto LABEL_29;
    }
    if (kAUExtensionScope)
    {
      v13 = *(id *)kAUExtensionScope;
      if (!v13)
        goto LABEL_16;
    }
    else
    {
      v13 = MEMORY[0x1E0C81028];
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_DWORD *)(*(_QWORD *)(v11 + 8) + 144);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUOOPRenderPipePool.mm";
      v36 = 1024;
      v37 = 184;
      v38 = 1024;
      v39 = v15;
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Host destroying render pipe %d", buf, 0x18u);
    }

LABEL_16:
    caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_message(buf, v12);
    caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_proxy((void **)buf);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = *(unsigned int *)(*(_QWORD *)(v11 + 8) + 144);
    caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::reply((uint64_t)buf);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "destroyRenderPipe:reply:", v17, v18);

    v19 = v41;
    if (v19)
    {
      v20 = *(NSObject **)kAUExtensionScope;
      applesauce::dispatch::v1::source::operator*(*(id *)kAUExtensionScope);
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v19, "description");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v33 = 138412290;
        v34 = v31;
        _os_log_error_impl(&dword_18EE07000, v20, OS_LOG_TYPE_ERROR, "Error in destroying pipe %@", v33, 0xCu);

      }
    }

    v22 = v40;
    if (v40 == &buf[8])
    {
      v23 = 4;
      v22 = &buf[8];
    }
    else
    {
      if (!v40)
      {
LABEL_25:

        goto LABEL_26;
      }
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
    goto LABEL_25;
  }
LABEL_29:
  if (!v9)
  {
    v25 = *(_QWORD **)&v3[1].__m_.__opaque[8];
    v26 = *(_QWORD **)&v3[1].__m_.__opaque[16];
    if (v25 != v26)
    {
      while ((std::recursive_mutex **)*v25 != v4)
      {
        if (++v25 == v26)
          goto LABEL_44;
      }
    }
    if (v25 != v26)
    {
      v27 = v25 + 1;
      if (v25 + 1 != v26)
      {
        do
        {
          v25 = v27;
          v28 = *(v27 - 1);
          *(v27 - 1) = *v27;
          *v27 = 0;
          if (v28)
            std::default_delete<auoop::PipeSubPool>::operator()[abi:ne180100](v28);
          ++v27;
        }
        while (v25 + 1 != v26);
        v26 = *(_QWORD **)&v3[1].__m_.__opaque[16];
      }
      while (v26 != v25)
      {
        v30 = *--v26;
        v29 = v30;
        *v26 = 0;
        if (v30)
          std::default_delete<auoop::PipeSubPool>::operator()[abi:ne180100](v29);
      }
      *(_QWORD *)&v3[1].__m_.__opaque[16] = v25;
    }
  }
LABEL_44:

  if ((v5 & 1) == 0)
  if (v3)
    std::recursive_mutex::unlock(v3);
}

void sub_18EF0FB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, void *a18)
{
  char v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t *v24;
  uint64_t v25;

  if (!a2)
    _Unwind_Resume(exception_object);

  v24 = a17;
  if (a17 == &a14)
  {
    v25 = 4;
    v24 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_7;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_7:

  if ((v18 & 1) == 0)
  __clang_call_terminate(exception_object);
}

uint64_t auoop::PipeSubPool::acquirePipeSlot(auoop::PipeSubPool *this, unint64_t *a2, int a3)
{
  caulk::semaphore *v6;
  int v7;
  int v8;
  pthread_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  std::runtime_error *exception;

  v6 = (auoop::PipeSubPool *)((char *)this + 100);
  while (!caulk::semaphore::timed_wait(v6, 1.0))
  {
    if (a3)
    {
      v7 = *((_DWORD *)this + 24);
      v8 = v7 >= 0 ? *((_DWORD *)this + 24) : v7 + 3;
      v9 = pthread_self();
      v10 = *((_QWORD *)this + 15);
      v11 = *((_QWORD *)this + 16);
      if (v10 != v11)
      {
        v12 = 0;
        do
        {
          v13 = atomic_load((unsigned __int8 *)v10);
          if ((v13 & 1) != 0)
          {
            v14 = atomic_load((unint64_t *)(v10 + 24));
            if (v9 == (pthread_t)v14 && ++v12 == v8 >> 2)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "acquirePipeSlot failed");
            }
          }
          v10 += 32;
        }
        while (v10 != v11);
      }
    }
  }
  v15 = 0;
  do
  {
LABEL_15:
    v16 = v15;
    v17 = *((_QWORD *)this + 15);
    v18 = *((_QWORD *)this + 16);
    v15 = 1;
  }
  while (v17 == v18);
  while (1)
  {
    if (!*(_QWORD *)(v17 + 8) || !((a2 == 0) | v16 & 1) && *(_QWORD *)(v17 + 16) != *a2)
      goto LABEL_26;
    do
      v19 = __ldaxr((unsigned __int8 *)v17);
    while (__stlxr(1u, (unsigned __int8 *)v17));
    if ((v19 & 1) != 0)
      goto LABEL_26;
    *(_QWORD *)(v17 + 24) = pthread_self();
    __dmb(9u);
    if (*(_QWORD *)(v17 + 8))
      break;
LABEL_25:
    atomic_store(0, (unsigned __int8 *)v17);
LABEL_26:
    v17 += 32;
    if (v17 == v18)
    {
      v15 = 1;
      goto LABEL_15;
    }
  }
  if ((v16 & 1) == 0)
  {
    if (!a2)
      return v17;
    v20 = *(_QWORD *)(v17 + 16);
    if (v20 == *a2)
      goto LABEL_30;
    goto LABEL_25;
  }
  if (!a2)
    return v17;
  v20 = *a2;
LABEL_30:
  *(_QWORD *)(v17 + 16) = v20;
  return v17;
}

void sub_18EF0FDE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_message(_QWORD *a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2916068;
  v6[1] = a1;
  v7 = v6;
  caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::message(a1, a2, (uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  a1[5] = 0;
  return a1;
}

void sub_18EF0FE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_proxy(void **a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[4];
  _BYTE v11[24];
  _BYTE *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 1));
  v2 = *a1;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEE10sync_proxyEv_block_invoke;
  v10[3] = &__block_descriptor_64_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE_e17_v16__0__NSError_8l;
  v3 = v11;
  v4 = (uint64_t)v14;
  if (!v14)
    goto LABEL_4;
  if (v14 != v13)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
LABEL_4:
    v12 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _BYTE *))(v13[0] + 24))(v13, v11);
LABEL_6:
  objc_msgSend(v2, "synchronousRemoteObjectProxyWithErrorHandler:", v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 == v11)
  {
    v6 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
    v3 = v12;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_11:
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
    goto LABEL_15;
  }
  if (v14)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v5;
}

void sub_18EF1001C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v19 = *(_QWORD **)(v17 - 32);
  if (v19 == (_QWORD *)(v17 - 56))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::reply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD aBlock[4];
  _BYTE v9[24];
  _BYTE *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, a1 + 8);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE_e17_v16__0__NSError_8l;
  v1 = v9;
  v2 = (uint64_t)v12;
  if (!v12)
    goto LABEL_4;
  if (v12 != v11)
  {
    v2 = (*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
LABEL_4:
    v10 = (_BYTE *)v2;
    goto LABEL_6;
  }
  v10 = v9;
  (*(void (**)(_QWORD *, _BYTE *))(v11[0] + 24))(v11, v9);
LABEL_6:
  v3 = _Block_copy(aBlock);
  if (v10 == v9)
  {
    v4 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_11;
    v4 = 5;
    v1 = v10;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_11:
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
    goto LABEL_15;
  }
  if (v12)
  {
    v6 = 5;
LABEL_15:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v3;
}

void sub_18EF101D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 32);
  if (v3 == (_QWORD *)(v1 - 56))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 56);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEE5replyEv_block_invoke(uint64_t a1, void *a2)
{
  char v2;

  v2 = 0;
  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  char v2;

  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

_QWORD *caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::message(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  *a1 = v5;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a3);

  return a1;
}

void sub_18EF102B0(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EED0Ev()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *_ZNKSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2916068;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2916068;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EEclEOU8__strongSC_SF_(uint64_t a1, id *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 8) + 40), *a2);
}

void std::__function::__func<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1,std::allocator<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1>,void ()(applesauce::xpc::dict const&)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1,std::allocator<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1>,void ()(applesauce::xpc::dict const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915F48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1,std::allocator<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1>,void ()(applesauce::xpc::dict const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915F48;
  a2[1] = v2;
  return result;
}

void std::__function::__func<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1,std::allocator<auoop::RenderPipePool::registerUser(AUOOPRenderClientUser const&,auoop::RenderPipeConfig const&)::$_1>,void ()(applesauce::xpc::dict const&)>::operator()(uint64_t a1, id *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  void *v20;
  void *v21;
  _BYTE v22[24];
  _BYTE *v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = **(_QWORD **)(a1 + 8);
  std::recursive_mutex::lock((std::recursive_mutex *)v3);
  objc_msgSend(*(id *)(v3 + 184), "anyObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_message(&v21, v4);
    caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_proxy(&v21);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *a2;
    applesauce::dispatch::v1::source::operator*(*a2);
    objc_claimAutoreleasedReturnValue();
    caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::reply((uint64_t)&v21);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "updateWorkgroupMirror:reply:", v6, v7);

    v8 = v24;
    if (!v8)
      goto LABEL_11;
    if (kAUExtensionScope)
    {
      v9 = *(id *)kAUExtensionScope;
      if (!v9)
        goto LABEL_11;
    }
    else
    {
      v9 = (id)MEMORY[0x1E0C81028];
      v10 = MEMORY[0x1E0C81028];
    }
    v11 = v9;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v8, "description");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 136315650;
      v16 = "AUOOPRenderPipePool.mm";
      v17 = 1024;
      v18 = 147;
      v19 = 2112;
      v20 = v12;
      _os_log_impl(&dword_18EE07000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d error from workgroupsChanged: %@", (uint8_t *)&v15, 0x1Cu);

    }
LABEL_11:

    v13 = v23;
    if (v23 == v22)
    {
      v14 = 4;
      v13 = v22;
    }
    else
    {
      if (!v23)
      {
LABEL_16:

        goto LABEL_17;
      }
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
    goto LABEL_16;
  }
  *(_BYTE *)(v3 + 76) = 1;
LABEL_17:

  std::recursive_mutex::unlock((std::recursive_mutex *)v3);
}

void sub_18EF105A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, id a18)
{
  std::recursive_mutex *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t *v23;
  uint64_t v24;

  v23 = a17;
  if (a17 == &a14)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_6:

  std::recursive_mutex::unlock(v18);
  _Unwind_Resume(a1);
}

uint64_t caulk::__expected_detail::base<std::unique_ptr<AUOOPRenderingClient>,NSError * {__strong}>::~base(uint64_t a1)
{
  int v2;
  void *v3;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)a1 = 0;
    if (v3)
      std::default_delete<AUOOPRenderingClient>::operator()[abi:ne180100]((uint64_t)v3);
  }
  else
  {

  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJjEE5replyEv_block_invoke(uint64_t a1, void *a2, int a3)
{
  int v3;

  v3 = a3;
  std::function<void ()(NSError *,std::tuple<unsigned int> &&)>::operator()(a1 + 32, a2, (uint64_t)&v3);
}

uint64_t __copy_helper_block_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJjEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJjEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::function<void ()(NSError *,std::tuple<unsigned int> &&)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  v6 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v6, a3);

}

void sub_18EF10750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void audioipc::eventlink_primitive::ipc_resources(audioipc::eventlink_primitive *this, uint64_t a2)
{
  const char *remote_port;
  id v5;
  _QWORD v6[2];
  id v7;
  id v8;

  applesauce::xpc::dict::create(this);
  if (!*(_DWORD *)(a2 + 8))
  {
    remote_port = (const char *)os_eventlink_extract_remote_port();
    if ((_DWORD)remote_port)
      audioipc::log_and_throw((audioipc *)"os_eventlink_extract_remote_port failed", remote_port);
  }
  v7 = (id)xpc_mach_send_create();
  v5 = v7;
  if (!v7)
    v7 = xpc_null_create();

  v6[0] = this;
  v6[1] = "eventlink";
  applesauce::xpc::dict::object_proxy::operator=(&v8, (uint64_t)v6, &v7);

}

void sub_18EF10844(_Unwind_Exception *a1)
{
  id *v1;

  applesauce::xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void applesauce::xpc::dict::object_proxy::operator=(_QWORD *a1, uint64_t a2, id *a3)
{
  void *v6;
  const char *v7;
  id v8;
  xpc_object_t v9;
  id v10;

  v6 = **(void ***)a2;
  applesauce::dispatch::v1::source::operator*(v6);
  objc_claimAutoreleasedReturnValue();
  v7 = *(const char **)(a2 + 8);
  v8 = *a3;
  xpc_dictionary_set_value(v6, v7, v8);

  *a1 = *a3;
  v9 = xpc_null_create();
  v10 = *a3;
  *a3 = v9;

}

{
  void *v6;
  const char *v7;
  id v8;
  xpc_object_t v9;
  id v10;

  v6 = **(void ***)a2;
  applesauce::dispatch::v1::source::operator*(v6);
  objc_claimAutoreleasedReturnValue();
  v7 = *(const char **)(a2 + 8);
  v8 = *a3;
  applesauce::dispatch::v1::source::operator*(*a3);
  objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_value(v6, v7, v8);

  *a1 = *a3;
  v9 = xpc_null_create();
  v10 = *a3;
  *a3 = v9;

}

void applesauce::xpc::dict::create(applesauce::xpc::dict *this)
{
  xpc_object_t v2;
  id v3;
  void *v4;
  id v5;

  v2 = xpc_dictionary_create(0, 0, 0);
  v5 = v2;
  if (!v2)
    v2 = xpc_null_create();

  v3 = v2;
  v4 = v3;
  *(_QWORD *)this = v3;
  if (!v3 || object_getClass(v3) != (Class)MEMORY[0x1E0C812F8])
  {
    *(_QWORD *)this = xpc_null_create();

  }
}

void applesauce::xpc::dict::~dict(id *this)
{
  id v2;

  v2 = *this;
  *this = 0;

}

void ___ZN5caulk3xpc7messageIU8__strongPU33objcproto22AUAudioUnitXPCProtocol11objc_objectJjEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  int v2;

  v2 = 0;
  std::function<void ()(NSError *,std::tuple<unsigned int> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2916458;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2916458;
  a2[1] = v2;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::operator()(uint64_t a1, id *a2, _DWORD *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;
  v8 = v5;

  *(_DWORD *)(v6 + 48) = *a3;
}

_QWORD *std::vector<auoop::RenderPipeConfig::CompactFormat>::__init_with_size[abi:ne180100]<auoop::RenderPipeConfig::CompactFormat*,auoop::RenderPipeConfig::CompactFormat*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0x1555555555555556)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 12 * v8;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_18EF10B5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void auoop::RenderPipeConfig::~RenderPipeConfig(id *this)
{
  id v2;
  id v3;

  v2 = this[4];
  if (v2)
  {
    this[5] = v2;
    operator delete(v2);
  }
  v3 = this[1];
  if (v3)
  {
    this[2] = v3;
    operator delete(v3);
  }
}

uint64_t *std::vector<auoop::PipeSubPool::PipeSlot>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_BYTE *)(v6 - 32) = 0;
      v7 = *(_QWORD *)(v2 + v5 - 24);
      v8 = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v2 + v5 - 24) = 0;
      *(_QWORD *)(v6 - 24) = v7;
      *(_QWORD *)(v6 - 16) = v8;
      *(_QWORD *)(v6 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<auoop::PipeSubPool::PipeSlot>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    v4 = *(_QWORD *)(i - 24);
    *(_QWORD *)(i - 24) = 0;
    if (v4)
      std::default_delete<AUOOPRenderingClient>::operator()[abi:ne180100](v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a1);
}

void auoop::RenderPipeUser::setV3HostCallbacks(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  _BYTE v12[24];
  _BYTE *v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  caulk::xpc::sync_message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_message(&v11, *(void **)(a1 + 16));
  caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::sync_proxy(&v11);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  caulk::xpc::message<objc_object  {objcproto22AUAudioUnitXPCProtocol}* {__strong}>::reply((uint64_t)&v11);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "updateHostCallbacks:reply:", (v5 != 0) | (2 * (v6 != 0)), v8);

  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;

  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_5;
  }
  if (v13)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }

}

void sub_18EF10DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == &a10)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t initRng(unsigned int a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v7 = 0;
  v8 = 0;
  v9 = a1;
  *(__n64 *)&v3 = MakeVectorSeed(&v9, &v8, &v7, &v6);
  *a2 = v3;
  *(__n64 *)&v4 = MakeVectorSeed(&v9, &v8, &v7, &v6);
  a2[1] = v4;
  return v9;
}

__n64 MakeVectorSeed(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  __n64 result;

  v4 = *a1 + ~(*a1 << 15);
  v5 = (9 * (v4 ^ (v4 >> 10))) ^ ((9 * (v4 ^ (v4 >> 10))) >> 6);
  v6 = (v5 + ~(v5 << 11)) ^ ((v5 + ~(v5 << 11)) >> 16);
  *a1 = v6;
  v7 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
  v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
  v9 = v8 ^ HIWORD(v8);
  *a2 = v9;
  v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = v11 ^ HIWORD(v11);
  *a3 = v12;
  v13 = 9 * ((v12 + ~(v12 << 15)) ^ ((v12 + ~(v12 << 15)) >> 10));
  *a4 = ((v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11)) ^ (((v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11)) >> 16);
  result.n64_u32[0] = *a1;
  result.n64_u32[1] = *a2;
  return result;
}

float32x4_t *generateVector(float32x4_t *result, unsigned int a2, uint64_t a3, float a4)
{
  float v4;
  int32x4_t v5;
  int8x16_t *v6;
  int32x4_t v7;
  uint16x4_t v8;
  uint16x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  unsigned int v12;
  int v13;
  int v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;

  v4 = a4 * 2.3283e-10;
  v5 = *(int32x4_t *)a3;
  v6 = (int8x16_t *)(a3 + 16);
  v7 = *(int32x4_t *)(a3 + 16);
  if (a2 < 4)
  {
    v11 = *(int32x4_t *)a3;
    v10 = *(int32x4_t *)(a3 + 16);
  }
  else
  {
    v8 = (uint16x4_t)vdup_n_s16(0x9069u);
    v9 = (uint16x4_t)vdup_n_s16(0x4650u);
    do
    {
      v10 = (int32x4_t)vsraq_n_u32(vmull_u16((uint16x4_t)vmovn_s32(v7), v8), (uint32x4_t)v7, 0x10uLL);
      v11 = (int32x4_t)vsraq_n_u32(vmull_u16((uint16x4_t)vmovn_s32(v5), v9), (uint32x4_t)v5, 0x10uLL);
      *result++ = vmulq_n_f32(vcvtq_f32_s32(vaddq_s32(vshlq_n_s32(v10, 0x10uLL), v11)), v4);
      a2 -= 4;
      v7 = v10;
      v5 = v11;
    }
    while (a2 > 3);
  }
  *(int32x4_t *)a3 = v11;
  *(int32x4_t *)(a3 + 16) = v10;
  if (a2)
  {
    v12 = 0;
    do
    {
      v13 = 36969 * (unsigned __int16)v6->i32[v12] + HIWORD(v6->i32[v12]);
      v14 = 18000 * (unsigned __int16)*(_DWORD *)(a3 + 4 * v12) + HIWORD(*(_DWORD *)(a3 + 4 * v12));
      v6->i32[v12] = v13;
      *(_DWORD *)(a3 + 4 * v12) = v14;
      result->f32[0] = v4 * (float)(v14 + (v13 << 16));
      result = (float32x4_t *)((char *)result + 4);
      if (v12 == 3)
        v12 = 0;
      else
        ++v12;
      --a2;
    }
    while (a2);
    switch(v12)
    {
      case 3u:
        v17 = *(int8x16_t *)(a3 + 16);
        *(int8x16_t *)a3 = vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 0xCuLL);
        v16 = vextq_s8(v17, v17, 0xCuLL);
        break;
      case 2u:
        v18 = *(int8x16_t *)(a3 + 16);
        *(int8x16_t *)a3 = vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 8uLL);
        v16 = vextq_s8(v18, v18, 8uLL);
        break;
      case 1u:
        v15 = *(int8x16_t *)(a3 + 16);
        *(int8x16_t *)a3 = vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 4uLL);
        v16 = vextq_s8(v15, v15, 4uLL);
        break;
      default:
        return result;
    }
    *v6 = v16;
  }
  return result;
}

void NotifyDStateDumpManager::~NotifyDStateDumpManager(NotifyDStateDumpManager *this)
{
  NotifyDStateDumpManager::~NotifyDStateDumpManager(this);
  JUMPOUT(0x193FFE460);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2908BD0;
  notify_cancel(*((_DWORD *)this + 6));
  dispatch_release(*((dispatch_object_t *)this + 4));
  v2 = (void **)((char *)this + 40);
  std::vector<ListenerInfo<OS::CF::String>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t NotifyDStateDumpManager::registerSubsystem(uint64_t a1, int a2, CFTypeRef cf, const void *a4)
{
  uint64_t result;
  NSObject *v9;
  _QWORD v10[5];
  _DWORD v11[10];
  _QWORD v12[2];
  int v13;
  void *v14;
  void (**v15)(OS::CF::String *__hidden);
  CFTypeRef v16;

  result = 4294967246;
  if (cf)
  {
    if (a4)
    {
      CFRetain(cf);
      v12[0] = &off_1E290A0D8;
      v12[1] = cf;
      v13 = a2;
      CFRetain(cf);
      v15 = &off_1E290A0D8;
      v16 = cf;
      v14 = _Block_copy(a4);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v12);
      v9 = *(NSObject **)(a1 + 32);
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 1174405120;
      v10[2] = ___ZN23NotifyDStateDumpManager17registerSubsystemE27CACentralStateDumpSubsystemPK10__CFStringU13block_pointerFvP7__sFILEE_block_invoke;
      v10[3] = &__block_descriptor_tmp_8_2008;
      v10[4] = a1;
      v11[8] = a2;
      ListenerInfo<OS::CF::String>::ListenerInfo((uint64_t)v11, (uint64_t)&v13);
      dispatch_async(v9, v10);
      ListenerInfo<OS::CF::String>::~ListenerInfo((uint64_t)v11);
      ListenerInfo<OS::CF::String>::~ListenerInfo((uint64_t)&v13);
      return 0;
    }
  }
  return result;
}

void sub_18EF111E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  ListenerInfo<OS::CF::String>::~ListenerInfo(v1 - 80);
  _Unwind_Resume(a1);
}

uint64_t NotifyDStateDumpManager::unregisterSubsystem(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD v6[5];
  int v7;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 32));
  v4 = *(NSObject **)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN23NotifyDStateDumpManager19unregisterSubsystemE27CACentralStateDumpSubsystem_block_invoke;
  v6[3] = &__block_descriptor_tmp_9;
  v6[4] = a1;
  v7 = a2;
  dispatch_sync(v4, v6);
  return 0;
}

uint64_t ___ZN23NotifyDStateDumpManager19unregisterSubsystemE27CACentralStateDumpSubsystem_block_invoke(uint64_t result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(_DWORD **)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  if (v2 != (_DWORD *)v3)
  {
    while (*v2 != *(_DWORD *)(result + 40))
    {
      v2 += 8;
      if (v2 == (_DWORD *)v3)
        return result;
    }
  }
  if (v2 != (_DWORD *)v3)
  {
    if (v2 + 8 != (_DWORD *)v3)
    {
      do
      {
        v4 = (uint64_t)v2;
        v2 += 8;
        result = ListenerInfo<OS::CF::String>::operator=(v4, (uint64_t)v2);
      }
      while (result + 64 != v3);
      v3 = *(_QWORD *)(v1 + 48);
    }
    while ((_DWORD *)v3 != v2)
    {
      v3 -= 32;
      result = ListenerInfo<OS::CF::String>::~ListenerInfo(v3);
    }
    *(_QWORD *)(v1 + 48) = v2;
  }
  return result;
}

uint64_t ListenerInfo<OS::CF::String>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;

  if (a1 != a2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    OS::CF::UntypedObject::operator=(a1 + 16, *(CFTypeRef *)(a2 + 24));
    v4 = *(const void **)(a1 + 8);
    if (v4)
    {
      _Block_release(v4);
      *(_QWORD *)(a1 + 8) = 0;
    }
    v5 = *(_QWORD *)(a2 + 8);
    if (v5)
    {
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a2 + 8) = 0;
    }
  }
  return a1;
}

uint64_t ListenerInfo<OS::CF::String>::~ListenerInfo(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    _Block_release(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 16));
  return a1;
}

void OS::CF::UntypedObject::~UntypedObject(OS::CF::UntypedObject *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E290A0B8;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x193FFE460);
}

uint64_t OS::CF::UntypedObject::operator=(uint64_t a1, CFTypeRef cf)
{
  const void *v3;

  v3 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = cf;
  if (cf)
    CFRetain(cf);
  if (v3)
    CFRelease(v3);
  return a1;
}

void ___ZN23NotifyDStateDumpManager17registerSubsystemE27CACentralStateDumpSubsystemPK10__CFStringU13block_pointerFvP7__sFILEE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unsigned int *v13;
  char *v14;
  unsigned int v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  const void *v37;
  void **v38;
  const void *v39;
  const void *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t i;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _DWORD *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  int v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _DWORD *v73;
  char *v74;
  _QWORD *v75;
  _BYTE buf[24];
  char *v77;
  _QWORD *v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (_DWORD *)v2[5];
  v4 = (_DWORD *)v2[6];
  v69 = *(_DWORD *)(a1 + 72);
  v5 = a1 + 40;
  v6 = ListenerInfo<OS::CF::String>::ListenerInfo((uint64_t)&v70, a1 + 40);
  if (v3 == v4)
  {
LABEL_4:
    ListenerInfo<OS::CF::String>::~ListenerInfo(v6);
    v8 = (char *)v2[5];
    v7 = v2[6];
    v9 = v7 - (_QWORD)v8;
    if ((char *)v7 == v8)
    {
      v11 = (char *)v2[6];
    }
    else
    {
      v10 = v9 >> 5;
      v11 = (char *)v2[5];
      do
      {
        v12 = v10 >> 1;
        v13 = (unsigned int *)&v11[32 * (v10 >> 1)];
        v15 = *v13;
        v14 = (char *)(v13 + 8);
        v10 += ~(v10 >> 1);
        if (v15 < *(_DWORD *)v5)
          v11 = v14;
        else
          v10 = v12;
      }
      while (v10);
    }
    v19 = v11 - v8;
    v20 = (v11 - v8) >> 5;
    v21 = &v8[(v11 - v8) & 0xFFFFFFFFFFFFFFE0];
    v22 = v2[7];
    if (v7 >= v22)
    {
      v28 = (v9 >> 5) + 1;
      if (v28 >> 59)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v29 = v22 - (_QWORD)v8;
      if (v29 >> 4 > v28)
        v28 = v29 >> 4;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0)
        v30 = 0x7FFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      v75 = v2 + 7;
      if (v30)
      {
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v30);
      }
      else
      {
        v32 = 0;
        v31 = 0;
      }
      v33 = (uint64_t)&v32[32 * v20];
      v71 = v32;
      v72 = v33;
      v73 = (_DWORD *)v33;
      v74 = &v32[32 * v31];
      if (v20 == v31)
      {
        if (v19 < 1)
        {
          if (v11 == v8)
            v41 = 1;
          else
            v41 = v19 >> 4;
          v78 = v2 + 7;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v41);
          v44 = v42;
          v45 = &v42[32 * (v41 >> 2)];
          v46 = &v42[32 * v43];
          v47 = v72;
          v48 = v73;
          v49 = v72;
          v50 = v45;
          v51 = (uint64_t)v73 - v72;
          if (v73 != (_DWORD *)v72)
          {
            v68 = &v42[32 * v43];
            v50 = &v45[v51 & 0xFFFFFFFFFFFFFFE0];
            v52 = 32 * (v51 >> 5);
            v53 = (uint64_t)&v42[32 * (v41 >> 2)];
            v54 = v72;
            do
            {
              v53 = ListenerInfo<OS::CF::String>::ListenerInfo(v53, v54) + 32;
              v54 += 32;
              v52 -= 32;
            }
            while (v52);
            v49 = (uint64_t)v48;
            v46 = v68;
          }
          v55 = v71;
          v56 = v74;
          v71 = v44;
          v72 = (uint64_t)v45;
          *(_QWORD *)buf = v55;
          *(_QWORD *)&buf[8] = v47;
          v73 = v50;
          v74 = v46;
          *(_QWORD *)&buf[16] = v49;
          v77 = v56;
          std::__split_buffer<ListenerInfo<OS::CF::String>>::~__split_buffer((uint64_t)buf);
          v33 = (uint64_t)v73;
        }
        else
        {
          v34 = v20 + 2;
          if (v20 >= -1)
            v34 = v20 + 1;
          v33 -= 32 * (v34 >> 1);
          v72 = v33;
          v73 = (_DWORD *)v33;
        }
      }
      ListenerInfo<OS::CF::String>::ListenerInfo(v33, v5);
      v57 = v72;
      v73 += 8;
      v58 = (char *)v2[5];
      for (i = 32; ; i -= 32)
      {
        v60 = v57 + i;
        if (&v21[i - 32] == v58)
          break;
        v61 = (uint64_t)&v21[i - 64];
        ListenerInfo<OS::CF::String>::ListenerInfo(v60 - 64, v61);
      }
      v62 = v60 - 32;
      v72 = v62;
      v63 = (char *)v2[6];
      v64 = v73;
      if (v21 != v63)
      {
        v65 = 0;
        do
        {
          ListenerInfo<OS::CF::String>::ListenerInfo((uint64_t)&v64[v65 / 4], (uint64_t)&v21[v65]);
          v65 += 32;
        }
        while (&v21[v65] != v63);
        v64 = (_DWORD *)((char *)v64 + v65);
        v62 = v72;
        v21 = (char *)v2[6];
      }
      v66 = (char *)v2[5];
      v2[5] = v62;
      v2[6] = v64;
      v67 = (char *)v2[7];
      v2[7] = v74;
      v73 = v21;
      v74 = v67;
      v71 = v66;
      v72 = (uint64_t)v66;
      std::__split_buffer<ListenerInfo<OS::CF::String>>::~__split_buffer((uint64_t)&v71);
    }
    else if (v21 == (char *)v7)
    {
      ListenerInfo<OS::CF::String>::ListenerInfo(v2[6], v5);
      v2[6] = v7 + 32;
    }
    else
    {
      v23 = v21 + 32;
      v24 = v7 - 32;
      if (v7 < 0x20)
      {
        v26 = v2[6];
      }
      else
      {
        v25 = v7 - 32;
        v26 = v2[6];
        do
        {
          v27 = ListenerInfo<OS::CF::String>::ListenerInfo(v26, v25);
          v25 += 32;
          v26 = v27 + 32;
        }
        while (v25 < v7);
      }
      v2[6] = v26;
      if ((_DWORD *)v7 != v23)
      {
        v35 = 32 * ((uint64_t)(v7 - (_QWORD)v23) >> 5);
        do
        {
          ListenerInfo<OS::CF::String>::operator=(v24, (uint64_t)&v8[32 * v20 - 32 + v35]);
          v24 -= 32;
          v35 -= 32;
        }
        while (v35);
      }
      if ((unint64_t)v21 <= v5)
        v5 += 32 * (v2[6] > v5);
      if (v21 != (char *)v5)
      {
        *(_DWORD *)v21 = *(_DWORD *)v5;
        v36 = &v8[32 * v20];
        OS::CF::UntypedObject::operator=((uint64_t)(v36 + 16), *(CFTypeRef *)(v5 + 24));
        v39 = (const void *)*((_QWORD *)v36 + 1);
        v38 = (void **)(v36 + 8);
        v37 = v39;
        if (v39)
        {
          _Block_release(v37);
          *v38 = 0;
        }
        v40 = *(const void **)(v5 + 8);
        if (v40)
          *v38 = _Block_copy(v40);
      }
    }
  }
  else
  {
    while (*v3 != v69)
    {
      v3 += 8;
      if (v3 == v4)
        goto LABEL_4;
    }
    ListenerInfo<OS::CF::String>::~ListenerInfo(v6);
    v16 = CADefaultLog();
    if (v16)
    {
      v17 = v16;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *(_DWORD *)(a1 + 72);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "CACentralStateDump.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 147;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v18;
        _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Subsystem %d is attempting to register more than once", buf, 0x18u);
      }
    }
  }
}

void sub_18EF118D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v17 + 48) = v16;
  _Unwind_Resume(exception_object);
}

uint64_t ListenerInfo<OS::CF::String>::ListenerInfo(uint64_t a1, uint64_t a2)
{
  const void *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &off_1E290A0D8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  OS::CF::UntypedObject::operator=(a1 + 16, *(CFTypeRef *)(a2 + 24));
  v4 = *(const void **)(a2 + 8);
  if (v4)
    *(_QWORD *)(a1 + 8) = _Block_copy(v4);
  return a1;
}

{
  uint64_t v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = &off_1E290A0D8;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  OS::CF::UntypedObject::operator=(a1 + 16, *(CFTypeRef *)(a2 + 24));
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return a1;
}

void sub_18EF119AC(_Unwind_Exception *a1)
{
  OS::CF::UntypedObject *v1;

  OS::CF::UntypedObject::~UntypedObject(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSK12ListenerInfoIN2OS2CF6StringEE(uint64_t a1, uint64_t a2)
{
  return ListenerInfo<OS::CF::String>::ListenerInfo(a1 + 40, a2 + 40);
}

uint64_t __destroy_helper_block_e8_40c36_ZTSK12ListenerInfoIN2OS2CF6StringEE(uint64_t a1)
{
  return ListenerInfo<OS::CF::String>::~ListenerInfo(a1 + 40);
}

uint64_t std::__split_buffer<ListenerInfo<OS::CF::String>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    ListenerInfo<OS::CF::String>::~ListenerInfo(i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

OS::CF::UntypedObject *OS::CF::UntypedObject::UntypedObject(OS::CF::UntypedObject *this, CFTypeRef cf)
{
  *(_QWORD *)this = &off_1E290A0B8;
  if (cf)
    CFRetain(cf);
  *((_QWORD *)this + 1) = cf;
  return this;
}

void OS::CF::String::~String(OS::CF::String *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x193FFE460);
}

void std::vector<ListenerInfo<OS::CF::String>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = ListenerInfo<OS::CF::String>::~ListenerInfo(v4 - 32);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void OSStateDumpManager::~OSStateDumpManager(OSStateDumpManager *this)
{
  OSStateDumpManager::~OSStateDumpManager(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = &off_1E2907920;
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  while (v2 != v3)
  {
    os_state_remove_handler();
    v2 += 24;
  }
  dispatch_release(*((dispatch_object_t *)this + 1));
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *((_QWORD *)this + 3);
    v6 = (void *)*((_QWORD *)this + 2);
    if (v5 != v4)
    {
      do
        v5 = ListenerInfo<unsigned long long>::~ListenerInfo(v5 - 24);
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v4;
    operator delete(v6);
  }
}

uint64_t OSStateDumpManager::registerSubsystem(uint64_t a1, int a2, const void *a3, void *aBlock)
{
  uint64_t result;
  NSObject *v8;
  _QWORD block[6];
  _QWORD v10[2];
  int v11;
  _QWORD v12[2];
  _QWORD v13[5];
  int v14;
  void *v15;
  uint64_t v16;

  result = 4294967246;
  if (a3)
  {
    if (aBlock)
    {
      v13[0] = 0;
      v13[1] = v13;
      v13[2] = 0x4002000000;
      v13[3] = __Block_byref_object_copy__2012;
      v13[4] = __Block_byref_object_dispose__2013;
      v14 = a2;
      v15 = 0;
      v16 = 0;
      v15 = _Block_copy(aBlock);
      CFRetain(a3);
      v12[0] = &off_1E290A0D8;
      v12[1] = a3;
      v8 = *(NSObject **)(a1 + 8);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      block[2] = ___ZN18OSStateDumpManager17registerSubsystemE27CACentralStateDumpSubsystemPK10__CFStringU13block_pointerFvP7__sFILEE_block_invoke;
      block[3] = &unk_1E2918DA8;
      v11 = a2;
      block[5] = a1;
      CFRetain(a3);
      v10[0] = &off_1E290A0D8;
      v10[1] = a3;
      block[4] = v13;
      dispatch_async(v8, block);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v10);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v12);
      _Block_object_dispose(v13, 8);
      ListenerInfo<unsigned long long>::~ListenerInfo((uint64_t)&v14);
      return 0;
    }
  }
  return result;
}

uint64_t OSStateDumpManager::unregisterSubsystem(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD v6[5];
  int v7;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  v4 = *(NSObject **)(a1 + 8);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN18OSStateDumpManager19unregisterSubsystemE27CACentralStateDumpSubsystem_block_invoke;
  v6[3] = &__block_descriptor_tmp_19;
  v6[4] = a1;
  v7 = a2;
  dispatch_sync(v4, v6);
  return 0;
}

uint64_t ___ZN18OSStateDumpManager19unregisterSubsystemE27CACentralStateDumpSubsystem_block_invoke(uint64_t result)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(result + 32);
  v3 = *(_DWORD **)(v1 + 16);
  v2 = *(_DWORD **)(v1 + 24);
  if (v3 != v2)
  {
    while (*v3 != *(_DWORD *)(result + 40))
    {
      v3 += 6;
      if (v3 == v2)
        return result;
    }
  }
  if (v3 != v2)
  {
    os_state_remove_handler();
    result = (uint64_t)(v3 + 6);
    v4 = *(_DWORD **)(v1 + 24);
    if (v3 + 6 != v4)
    {
      do
      {
        v5 = (uint64_t)v3;
        v3 += 6;
      }
      while ((_DWORD *)(ListenerInfo<unsigned long long>::operator=(v5, (uint64_t)v3) + 48) != v4);
      result = *(_QWORD *)(v1 + 24);
    }
    while ((_DWORD *)result != v3)
      result = ListenerInfo<unsigned long long>::~ListenerInfo(result - 24);
    *(_QWORD *)(v1 + 24) = v3;
  }
  return result;
}

uint64_t ListenerInfo<unsigned long long>::~ListenerInfo(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    _Block_release(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

uint64_t ListenerInfo<unsigned long long>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;

  if (a1 != a2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v4 = *(const void **)(a1 + 8);
    if (v4)
    {
      _Block_release(v4);
      *(_QWORD *)(a1 + 8) = 0;
    }
    v5 = *(_QWORD *)(a2 + 8);
    if (v5)
    {
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a2 + 8) = 0;
    }
  }
  return a1;
}

uint64_t __Block_byref_object_copy__2012(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  if (v2)
  {
    *(_QWORD *)(result + 48) = v2;
    *(_QWORD *)(a2 + 48) = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__2013(uint64_t a1)
{
  return ListenerInfo<unsigned long long>::~ListenerInfo(a1 + 40);
}

void ___ZN18OSStateDumpManager17registerSubsystemE27CACentralStateDumpSubsystemPK10__CFStringU13block_pointerFvP7__sFILEE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unsigned int *v14;
  char *v15;
  unsigned int v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  const void *v31;
  void **v32;
  const void *v33;
  const void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  const void *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  const void *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  const void *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  const void *v66;
  char *v67;
  char *v68;
  _QWORD v69[2];
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  _QWORD *v74;
  _BYTE buf[24];
  char *v76;
  _QWORD *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 40);
  v3 = (_DWORD *)v2[2];
  v4 = (_DWORD *)v2[3];
  if (v3 == v4)
  {
LABEL_4:
    dispatch_get_global_queue(0, 0);
    OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v69, *(CFTypeRef *)(a1 + 56));
    v69[0] = &off_1E290A0D8;
    v5 = os_state_add_handler();
    if (v5)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56) = v5;
      v6 = (char *)v2[2];
      v7 = v2[3];
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v9 = v8 + 40;
      v10 = v7 - (_QWORD)v6;
      if ((char *)v7 == v6)
      {
        v12 = (char *)v2[3];
      }
      else
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
        v12 = (char *)v2[2];
        do
        {
          v13 = v11 >> 1;
          v14 = (unsigned int *)&v12[24 * (v11 >> 1)];
          v16 = *v14;
          v15 = (char *)(v14 + 6);
          v11 += ~(v11 >> 1);
          if (v16 < *(_DWORD *)v9)
            v12 = v15;
          else
            v11 = v13;
        }
        while (v11);
      }
      v20 = (v12 - v6) / 24;
      v21 = &v6[24 * v20];
      v22 = v2[4];
      if (v7 >= v22)
      {
        v35 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3) + 1;
        if (v35 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v6) >> 3);
        if (2 * v36 > v35)
          v35 = 2 * v36;
        if (v36 >= 0x555555555555555)
          v37 = 0xAAAAAAAAAAAAAAALL;
        else
          v37 = v35;
        v74 = v2 + 4;
        if (v37)
          v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v37);
        else
          v38 = 0;
        v40 = v37 + 24 * v20;
        v70 = (char *)v37;
        v71 = (char *)v40;
        v72 = (char *)v40;
        v73 = (char *)(v37 + 24 * v38);
        if (v20 == v38)
        {
          if (v12 - v6 < 1)
          {
            if (v12 == v6)
              v42 = 1;
            else
              v42 = 2 * v20;
            v77 = v74;
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v42);
            v45 = &v43[24 * (v42 >> 2)];
            v46 = v71;
            v47 = v72;
            v48 = v45;
            if (v72 != v71)
            {
              v49 = 0;
              v50 = (v72 - v71) / 24;
              v48 = &v45[24 * v50];
              do
              {
                v51 = &v45[v49];
                *((_QWORD *)v51 + 1) = 0;
                *(_DWORD *)v51 = *(_DWORD *)&v46[v49];
                *((_QWORD *)v51 + 2) = *(_QWORD *)&v46[v49 + 16];
                v52 = *(_QWORD *)&v46[v49 + 8];
                if (v52)
                {
                  *((_QWORD *)v51 + 1) = v52;
                  *(_QWORD *)&v46[v49 + 8] = 0;
                }
                v49 += 24;
              }
              while (24 * v50 != v49);
            }
            v53 = v70;
            v54 = v73;
            v70 = v43;
            v71 = &v43[24 * (v42 >> 2)];
            *(_QWORD *)buf = v53;
            *(_QWORD *)&buf[8] = v46;
            v72 = v48;
            v73 = &v43[24 * v44];
            *(_QWORD *)&buf[16] = v47;
            v76 = v54;
            std::__split_buffer<ListenerInfo<unsigned long long>>::~__split_buffer((uint64_t)buf);
            v40 = (unint64_t)v72;
          }
          else
          {
            v41 = v20 + 2;
            if (v20 >= -1)
              v41 = v20 + 1;
            v40 -= 24 * (v41 >> 1);
            v71 = (char *)v40;
            v72 = (char *)v40;
          }
        }
        *(_QWORD *)(v40 + 8) = 0;
        *(_DWORD *)v40 = *(_DWORD *)(v8 + 40);
        *(_QWORD *)(v40 + 16) = *(_QWORD *)(v8 + 56);
        v55 = *(const void **)(v8 + 48);
        if (v55)
        {
          *(_QWORD *)(v40 + 8) = _Block_copy(v55);
          v40 = (unint64_t)v72;
        }
        v56 = (char *)(v40 + 24);
        v72 = (char *)(v40 + 24);
        v57 = v71;
        v58 = (char *)v2[2];
        if (v21 != v58)
        {
          v59 = 0;
          do
          {
            v60 = &v57[v59];
            *((_QWORD *)v60 - 2) = 0;
            *((_DWORD *)v60 - 6) = *(_DWORD *)&v21[v59 - 24];
            *((_QWORD *)v60 - 1) = *(_QWORD *)&v21[v59 - 8];
            v61 = *(const void **)&v21[v59 - 16];
            if (v61)
              *((_QWORD *)v60 - 2) = _Block_copy(v61);
            v59 -= 24;
          }
          while (&v21[v59] != v58);
          v57 += v59;
          v56 = v72;
        }
        v71 = v57;
        v62 = (char *)v2[3];
        if (v21 != v62)
        {
          v63 = 0;
          do
          {
            v64 = &v21[v63];
            v65 = &v56[v63];
            *((_QWORD *)v65 + 1) = 0;
            *(_DWORD *)v65 = *(_DWORD *)&v21[v63];
            *((_QWORD *)v65 + 2) = *(_QWORD *)&v21[v63 + 16];
            v66 = *(const void **)&v21[v63 + 8];
            if (v66)
              *((_QWORD *)v65 + 1) = _Block_copy(v66);
            v63 += 24;
          }
          while (v64 + 24 != v62);
          v56 += v63;
          v57 = v71;
          v21 = (char *)v2[3];
        }
        v67 = (char *)v2[2];
        v2[2] = v57;
        v2[3] = v56;
        v68 = (char *)v2[4];
        v2[4] = v73;
        v72 = v21;
        v73 = v68;
        v70 = v67;
        v71 = v67;
        std::__split_buffer<ListenerInfo<unsigned long long>>::~__split_buffer((uint64_t)&v70);
      }
      else if (v21 == (char *)v7)
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)v7 = *(_DWORD *)(v8 + 40);
        *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 56);
        v39 = *(const void **)(v8 + 48);
        if (v39)
          *(_QWORD *)(v7 + 8) = _Block_copy(v39);
        v2[3] = v7 + 24;
      }
      else
      {
        v23 = v7 - 24;
        v24 = v2[3];
        if (v7 >= 0x18)
        {
          v25 = 0;
          v26 = &v6[24 * v20 + 8 * ((uint64_t)(v7 - (_QWORD)(v21 + 24)) >> 3)];
          do
          {
            v27 = v7 + v25;
            *(_QWORD *)(v27 + 8) = 0;
            *(_DWORD *)v27 = *(_DWORD *)&v26[v25];
            *(_QWORD *)(v27 + 16) = *(_QWORD *)&v26[v25 + 16];
            v28 = *(_QWORD *)&v26[v25 + 8];
            if (v28)
            {
              *(_QWORD *)(v27 + 8) = v28;
              *(_QWORD *)&v26[v25 + 8] = 0;
            }
            v25 += 24;
          }
          while ((unint64_t)&v26[v25] < v7);
          v24 = v7 + v25;
        }
        v2[3] = v24;
        if ((char *)v7 != v21 + 24)
        {
          v29 = 8 * ((uint64_t)(v7 - (_QWORD)(v21 + 24)) >> 3);
          do
          {
            v23 = ListenerInfo<unsigned long long>::operator=(v23, (uint64_t)&v6[24 * v20 - 24 + v29]) - 24;
            v29 -= 24;
          }
          while (v29);
        }
        if ((unint64_t)v21 <= v9)
          v9 += 24 * (v2[3] > v9);
        if (v21 != (char *)v9)
        {
          *(_DWORD *)v21 = *(_DWORD *)v9;
          v30 = &v6[24 * v20];
          v33 = (const void *)*((_QWORD *)v30 + 1);
          v32 = (void **)(v30 + 8);
          v31 = v33;
          v32[1] = *(void **)(v9 + 16);
          if (v33)
          {
            _Block_release(v31);
            *v32 = 0;
          }
          v34 = *(const void **)(v9 + 8);
          if (v34)
            *v32 = _Block_copy(v34);
        }
      }
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v69);
  }
  else
  {
    while (*v3 != *(_DWORD *)(a1 + 64))
    {
      v3 += 6;
      if (v3 == v4)
        goto LABEL_4;
    }
    v17 = CADefaultLog();
    if (v17)
    {
      v18 = v17;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *(_DWORD *)(a1 + 64);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "CACentralStateDump.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 258;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v19;
        _os_log_impl(&dword_18EE07000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Subsystem %d is attempting to register more than once", buf, 0x18u);
      }
    }
  }
}

void sub_18EF124CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  OS::CF::UntypedObject *v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 24) = v18;
  OS::CF::UntypedObject::~UntypedObject(v16);
  _Unwind_Resume(a1);
}

OS::CF::UntypedObject *__copy_helper_block_e8_48c20_ZTSKN2OS2CF6StringE(uint64_t a1, uint64_t a2)
{
  OS::CF::UntypedObject *result;

  result = OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a1 + 48), *(CFTypeRef *)(a2 + 56));
  *(_QWORD *)(a1 + 48) = &off_1E290A0D8;
  return result;
}

void __destroy_helper_block_e8_48c20_ZTSKN2OS2CF6StringE(uint64_t a1)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 48));
}

void sub_18EF12858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,FILE *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,int a29,__int16 a30,int a31,__int16 a32,__int16 a33,char a34,char a35)
{
  CACFData::~CACFData((CACFData *)&a13);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a15);
  fclose(a21);
  free(a22);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<ListenerInfo<unsigned long long>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    ListenerInfo<unsigned long long>::~ListenerInfo(i - 24);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

OS::CF::UntypedObject *__copy_helper_block_e8_40c20_ZTSKN2OS2CF6StringE(uint64_t a1, uint64_t a2)
{
  OS::CF::UntypedObject *result;

  result = OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a1 + 40), *(CFTypeRef *)(a2 + 48));
  *(_QWORD *)(a1 + 40) = &off_1E290A0D8;
  return result;
}

void __destroy_helper_block_e8_40c20_ZTSKN2OS2CF6StringE(uint64_t a1)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 40));
}

void OS::CF::String::AsStdString(std::string *this, uint64_t a2)
{
  const __CFString *v3;
  const char *CStringPtr;
  const __CFString *v6;
  const __CFString *v7;
  std::vector<char> v8;
  CFIndex maxBufLen;
  CFRange v10;
  CFRange v11;

  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *(const __CFString **)(a2 + 8);
  if (v3)
  {
    CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
    if (CStringPtr)
    {
      std::string::__assign_external(this, CStringPtr);
    }
    else
    {
      maxBufLen = 0;
      v6 = *(const __CFString **)(a2 + 8);
      v10.length = CFStringGetLength(v6);
      v10.location = 0;
      CFStringGetBytes(v6, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
      std::vector<char>::vector(&v8, maxBufLen + 1);
      v7 = *(const __CFString **)(a2 + 8);
      v11.length = CFStringGetLength(v7);
      v11.location = 0;
      CFStringGetBytes(v7, v11, 0x8000100u, 0, 0, (UInt8 *)v8.__begin_, maxBufLen, &maxBufLen);
      v8.__begin_[maxBufLen] = 0;
      std::string::__assign_external(this, v8.__begin_);
      if (v8.__begin_)
      {
        v8.__end_ = v8.__begin_;
        operator delete(v8.__begin_);
      }
    }
  }
}

void ___ZN23NotifyDStateDumpManagerC2Ev_block_invoke(uint64_t a1, int a2)
{
  uint64_t v2;
  int tm_year;
  int tm_mon;
  int tm_mday;
  tm *v6;
  PlatformUtilities *v7;
  time_t *v8;
  FILE *v9;
  FILE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  tm *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  timeval v18;
  char v19;
  time_t tv_sec;
  time_t v21[2];
  char v22;
  tm v23;
  char __str[20];
  tm v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 24) == a2)
  {
    gettimeofday((timeval *)&v25, 0);
    v18.tv_sec = *(_QWORD *)&v25.tm_sec;
    localtime_r(&v18.tv_sec, &v23);
    snprintf(__str, 0x14uLL, "%02d:%02d:%02d.%03d", v23.tm_hour, v23.tm_min, v23.tm_sec, v25.tm_hour);
    gettimeofday(&v18, 0);
    v21[0] = v18.tv_sec;
    localtime_r(v21, &v25);
    tm_mon = v25.tm_mon;
    tm_year = v25.tm_year;
    tm_mday = v25.tm_mday;
    std::string::basic_string[abi:ne180100]<0>(&v18, *(char **)(v2 + 16));
    v6 = &v25;
    CAFileSystemUtilities::GetTemporarySubDirectory();
    if (v25.tm_year < 0)
      v6 = *(tm **)&v25.tm_sec;
    v7 = (PlatformUtilities *)getpid();
    PlatformUtilities::processName(v7);
    if (v22 >= 0)
      v8 = v21;
    else
      v8 = (time_t *)v21[0];
    snprintf((char *)&v23, 0x80uLL, "%s/coreaudiostatedump_%s_%d_%d_%d_%s.txt", (const char *)v6, (const char *)v8, tm_year + 1900, tm_mon + 1, tm_mday, __str);
    if (v22 < 0)
      operator delete((void *)v21[0]);
    if (SHIBYTE(v25.tm_year) < 0)
      operator delete(*(void **)&v25.tm_sec);
    if (v19 < 0)
      operator delete((void *)v18.tv_sec);
    v9 = fopen((const char *)&v23, "w");
    v10 = v9;
    if (v9)
    {
      fprintf(v9, "State dump triggered at %s\n", __str);
      v11 = *(_QWORD *)(v2 + 40);
      v12 = *(_QWORD *)(v2 + 48);
      if (v11 != v12)
      {
        v13 = v11 + 16;
        do
        {
          if (*(_QWORD *)(v13 - 8))
          {
            gettimeofday(&v18, 0);
            tv_sec = v18.tv_sec;
            localtime_r(&tv_sec, &v25);
            snprintf((char *)v21, 0x14uLL, "%02d:%02d:%02d.%03d", v25.tm_hour, v25.tm_min, v25.tm_sec, v18.tv_usec);
            fwrite("\n------------------------------------------------------------\n", 0x3EuLL, 1uLL, v10);
            OS::CF::String::AsStdString((std::string *)&v25, v13);
            if (v25.tm_year >= 0)
              v14 = &v25;
            else
              v14 = *(tm **)&v25.tm_sec;
            fprintf(v10, "%s %s\n", (const char *)v21, (const char *)v14);
            if (SHIBYTE(v25.tm_year) < 0)
              operator delete(*(void **)&v25.tm_sec);
            fwrite("------------------------------------------------------------\n", 0x3DuLL, 1uLL, v10);
            (*(void (**)(void))(*(_QWORD *)(v13 - 8) + 16))();
          }
          v15 = v13 + 16;
          v13 += 32;
        }
        while (v15 != v12);
      }
      fclose(v10);
    }
    else
    {
      v16 = CADefaultLog();
      if (v16)
      {
        v17 = v16;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v25.tm_sec = 136315650;
          *(_QWORD *)&v25.tm_min = "CACentralStateDump.cpp";
          LOWORD(v25.tm_mday) = 1024;
          *(int *)((char *)&v25.tm_mday + 2) = 114;
          HIWORD(v25.tm_mon) = 2080;
          *(_QWORD *)&v25.tm_year = &v23;
          _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Couldn't successfully create state dump file (attempted location: %s)", (uint8_t *)&v25, 0x1Cu);
        }
      }
    }
  }
}

void sub_18EF1302C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Unwind_Exception *v24;

  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(v24);
}

void sub_18EF1305C()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

void sub_18EF13064(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  FILE *v16;

  fclose(v16);
  JUMPOUT(0x18EF13070);
}

uint64_t CACentralStateDumpRegisterSubsystem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;

  GetStateDumpManagers(&v11);
  v6 = v11;
  v7 = v12;
  if (v11 == v12)
  {
LABEL_5:
    v9 = 0;
  }
  else
  {
    v8 = v11;
    while (1)
    {
      v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v8 + 16))(*v8, a1, a2, a3);
      if ((_DWORD)v9)
        break;
      if (++v8 == v7)
        goto LABEL_5;
    }
  }
  if (v6)
    operator delete(v6);
  return v9;
}

void sub_18EF13118(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *GetStateDumpManagers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  if (GetStateDumpManagers(void)::onceToken != -1)
    dispatch_once(&GetStateDumpManagers(void)::onceToken, &__block_literal_global_2035);
  v2 = GetStateDumpManagers(void)::sNotifyDStateDumpManager;
  v3 = GetStateDumpManagers(void)::sOSStateDumpManager;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  result = operator new(0x10uLL);
  a1[1] = result + 2;
  a1[2] = result + 2;
  *result = v2;
  result[1] = v3;
  *a1 = result;
  return result;
}

dispatch_queue_t ___ZL20GetStateDumpManagersv_block_invoke()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD *v5;
  dispatch_queue_t result;
  _QWORD handler[5];
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  *(_QWORD *)v0 = &off_1E2908BD0;
  *(_QWORD *)(v0 + 8) = "com.apple.coreaudio.centralstatedump";
  *(_DWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 16) = "AudioStateDump";
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  v1 = dispatch_queue_create("NotifyDStateDumpManager", 0);
  v2 = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v0 + 32) = v1;
  handler[0] = v2;
  handler[1] = 0x40000000;
  handler[2] = ___ZN23NotifyDStateDumpManagerC2Ev_block_invoke;
  handler[3] = &__block_descriptor_tmp_2026;
  handler[4] = v0;
  if (notify_register_dispatch("com.apple.coreaudio.centralstatedump", (int *)(v0 + 24), v1, handler))
  {
    v3 = CADefaultLog();
    if (v3)
    {
      v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v9 = "CACentralStateDump.cpp";
        v10 = 1024;
        v11 = 118;
        _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Couldn't register with notifyd for state dump notifications", buf, 0x12u);
      }
    }
  }
  GetStateDumpManagers(void)::sNotifyDStateDumpManager = v0;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E2907920;
  v5[3] = 0;
  v5[4] = 0;
  v5[2] = 0;
  result = dispatch_queue_create("OSStateDumpManager", 0);
  v5[1] = result;
  GetStateDumpManagers(void)::sOSStateDumpManager = (uint64_t)v5;
  return result;
}

void sub_18EF13364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  std::vector<ListenerInfo<OS::CF::String>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MEMORY[0x193FFE460](v7, 0x10F1C402725CAECLL);
  _Unwind_Resume(a1);
}

uint64_t CACentralStateDumpUnregisterSubsystem(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;

  GetStateDumpManagers(&v6);
  v2 = v6;
  v3 = v7;
  if (v6 != v7)
  {
    v4 = v6;
    do
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 24))(*v4, a1);
      ++v4;
    }
    while (v4 != v3);
  }
  if (v2)
    operator delete(v2);
  return 0;
}

void sub_18EF13408(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

const __CFString *acv2::Reinterleaver::ConverterName(acv2::Reinterleaver *this)
{
  return CFSTR("Reinterleaver");
}

uint64_t acv2::Reinterleaver::description@<X0>(int16x8_t *this@<X0>, _QWORD *a2@<X8>)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  void *__p[2];
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD v11[10];
  char v12;
  uint64_t v13;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v10);
  acv2::AudioConverterBase::description(this, __p);
  if ((v9 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v5 = v9;
  else
    v5 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)v4, v5);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  if (this[17].i8[0])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"    Downmixing\n", 15);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"    Channel map:", 16);
    if (this[5].i32[1])
    {
      v6 = 0;
      do
      {
        LOBYTE(__p[0]) = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)__p, 1);
        std::ostream::operator<<();
        ++v6;
      }
      while (v6 < this[5].u32[1]);
    }
    LOBYTE(__p[0]) = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)__p, 1);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v11);
  v10 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v11[-1] + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v11[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x193FFE3A0](&v13);
}

void sub_18EF13618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t acv2::Reinterleaver::GetPropertyInfo(acv2::Reinterleaver *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  if (a2 != 1667788144)
    return acv2::CBRConverter::GetPropertyInfo(this, a2, a3, a4);
  if (a3)
    *a3 = 4 * *((_DWORD *)this + 21);
  if (a4)
    *a4 = 1;
  return 0;
}

uint64_t acv2::Reinterleaver::Zero(uint64_t this, uint64_t a2, unsigned __int8 *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  BOOL v8;
  _QWORD *v9;
  int v10;
  int v11;
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  _QWORD *v20;
  int v21;
  int v22;
  _DWORD *v23;
  int v24;
  int v25;
  _BYTE *v26;
  _WORD *v27;
  _BYTE *v28;

  LODWORD(v4) = (_DWORD)a3;
  if ((int)a3 >= 32)
  {
    v5 = a3;
    do
    {
      if ((_DWORD)this)
      {
        v6 = (_OWORD *)(a2 + a3 - v5);
        v7 = this;
        do
        {
          *v6 = 0uLL;
          v6[1] = 0uLL;
          v6 = (_OWORD *)((char *)v6 + a4);
          --v7;
        }
        while (v7);
      }
      LODWORD(v4) = v5 - 32;
      v8 = v5 <= 63;
      v5 -= 32;
    }
    while (!v8);
  }
  if ((int)v4 >= 24)
  {
    v4 = v4;
    do
    {
      if ((_DWORD)this)
      {
        v9 = (_QWORD *)(a2 + (int)a3 - v4);
        v10 = this;
        do
        {
          *v9 = 0;
          v9[1] = 0;
          v9[2] = 0;
          v9 = (_QWORD *)((char *)v9 + a4);
          --v10;
        }
        while (v10);
      }
      v11 = v4 - 24;
      v8 = v4 <= 47;
      v4 -= 24;
    }
    while (!v8);
    LODWORD(v4) = v11;
  }
  if ((int)v4 >= 16)
  {
    v4 = v4;
    do
    {
      if ((_DWORD)this)
      {
        v12 = (_QWORD *)(a2 + (int)a3 - v4);
        v13 = this;
        do
        {
          *v12 = 0;
          v12[1] = 0;
          v12 = (_QWORD *)((char *)v12 + a4);
          --v13;
        }
        while (v13);
      }
      v14 = v4 - 16;
      v8 = v4 <= 31;
      v4 -= 16;
    }
    while (!v8);
    LODWORD(v4) = v14;
  }
  if ((int)v4 >= 12)
  {
    v15 = v4;
    v16 = a2 - v4 + (int)a3 + 8;
    do
    {
      if ((_DWORD)this)
      {
        v17 = (_DWORD *)v16;
        v18 = this;
        do
        {
          *((_QWORD *)v17 - 1) = 0;
          *v17 = 0;
          v17 = (_DWORD *)((char *)v17 + a4);
          --v18;
        }
        while (v18);
      }
      v19 = v15 - 12;
      v16 += 12;
      v8 = v15 <= 23;
      v15 -= 12;
    }
    while (!v8);
    LODWORD(v4) = v19;
  }
  if ((int)v4 >= 8)
  {
    v4 = v4;
    do
    {
      if ((_DWORD)this)
      {
        v20 = (_QWORD *)(a2 + (int)a3 - v4);
        v21 = this;
        do
        {
          *v20 = 0;
          v20 = (_QWORD *)((char *)v20 + a4);
          --v21;
        }
        while (v21);
      }
      v22 = v4 - 8;
      v8 = v4 <= 15;
      v4 -= 8;
    }
    while (!v8);
    LODWORD(v4) = v22;
  }
  if ((int)v4 > 3)
  {
    v4 = v4;
    do
    {
      if ((_DWORD)this)
      {
        v23 = (_DWORD *)(a2 + (int)a3 - v4);
        v24 = this;
        do
        {
          *v23 = 0;
          v23 = (_DWORD *)((char *)v23 + a4);
          --v24;
        }
        while (v24);
      }
      v25 = v4 - 4;
      v8 = v4 <= 7;
      v4 -= 4;
    }
    while (!v8);
    LODWORD(v4) = v25;
  }
  if ((int)v4 < 3)
  {
    if ((_DWORD)v4 == 2)
    {
      if ((_DWORD)this)
      {
        v27 = (_WORD *)(a2 + (int)a3 - 2);
        do
        {
          *v27 = 0;
          v27 = (_WORD *)((char *)v27 + a4);
          this = (this - 1);
        }
        while ((_DWORD)this);
      }
    }
    else if ((int)v4 >= 1 && (_DWORD)this)
    {
      v28 = (_BYTE *)(a2 + (int)a3 - 1);
      do
      {
        *v28 = 0;
        v28 += a4;
        this = (this - 1);
      }
      while ((_DWORD)this);
    }
  }
  else if ((_DWORD)this)
  {
    v26 = (_BYTE *)(a2 + (int)a3 - 3 + 2);
    do
    {
      *((_WORD *)v26 - 1) = 0;
      *v26 = 0;
      v26 += a4;
      this = (this - 1);
    }
    while ((_DWORD)this);
  }
  return this;
}

uint64_t TInterleaver_SIMD<PCMSInt16_SIMD>::Interleave(uint64_t result, const void **a2, char *__dst, int a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  __int16 *v14;
  _WORD *v15;
  _WORD *v16;
  _WORD *v17;
  __int16 *v18;
  _WORD *v19;
  char *v20;
  _WORD *v21;
  _WORD *v22;
  uint64_t v23;
  int v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int16x4_t *v37;
  _QWORD *v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  const void **v46;
  __int16 *v47;
  _WORD *v48;
  _WORD *v49;
  _WORD *v50;
  char *v51;
  uint64_t v52;
  int v53;
  int16x4_t v54;
  int16x4_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int16x4_t *v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  uint16x4_t *v66;
  uint16x4_t *v67;
  char *v68;
  int v69;
  uint16x4_t v70;
  uint16x4_t v71;
  uint16x4_t v72;
  char *v73;
  int8x16_t v74;
  int32x4_t v75;
  int32x2_t v76;
  int32x2_t v77;
  char *v78;
  char *v79;
  char *v80;
  int v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  __int16 *v85;
  uint64_t v86;
  char *v87;
  __int16 v88;

  if (!(_DWORD)result)
    return result;
  if ((_DWORD)result == 1)
    return (uint64_t)memcpy(__dst, *a2, 2 * a4);
  v4 = 0;
  v5 = a4 + 3;
  if (a4 >= 0)
    v6 = a4;
  else
    v6 = a4 + 3;
  v7 = v6 >> 2;
  v8 = (int)result;
  v9 = 8 * (int)result;
  v10 = 2 * (int)result;
  v11 = 6 * (int)result;
  v12 = 4 * (int)result;
  while ((int)result >= 8)
  {
    v13 = &a2[v4];
    v14 = (__int16 *)*v13;
    v15 = *(const void **)((char *)a2 + ((8 * v4) | 8));
    v16 = v13[2];
    v17 = v13[3];
    v18 = (__int16 *)v13[4];
    v19 = v13[5];
    v20 = &__dst[2 * v4];
    v21 = v13[6];
    v22 = v13[7];
    if (v5 >= 7)
    {
      v23 = 0;
      v24 = v7;
      do
      {
        v25 = *(int16x4_t *)&v14[v23];
        v26 = *(int16x4_t *)&v15[v23];
        v27 = *(int16x4_t *)&v18[v23];
        v28 = *(int16x4_t *)&v19[v23];
        LODWORD(v29) = vzip1_s16(v25, v26).u32[0];
        WORD2(v29) = *(_QWORD *)&v16[v23];
        HIWORD(v29) = *(_QWORD *)&v17[v23];
        LODWORD(v30) = vzip1_s16(v27, v28).u32[0];
        WORD2(v30) = *(_QWORD *)&v21[v23];
        HIWORD(v30) = *(_QWORD *)&v22[v23];
        LODWORD(v31) = vtrn2_s16(v25, v26).u32[0];
        WORD2(v31) = WORD1(*(_QWORD *)&v16[v23]);
        HIWORD(v31) = WORD1(*(_QWORD *)&v17[v23]);
        LODWORD(v32) = vtrn2_s16(v27, v28).u32[0];
        WORD2(v32) = WORD1(*(_QWORD *)&v21[v23]);
        HIWORD(v32) = WORD1(*(_QWORD *)&v22[v23]);
        LODWORD(v33) = vzip2_s16(v25, v26).u32[0];
        WORD2(v33) = WORD2(*(_QWORD *)&v16[v23]);
        HIWORD(v33) = WORD2(*(_QWORD *)&v17[v23]);
        LODWORD(v34) = vzip2_s16(v27, v28).u32[0];
        WORD2(v34) = WORD2(*(_QWORD *)&v21[v23]);
        HIWORD(v34) = WORD2(*(_QWORD *)&v22[v23]);
        v25.i32[0] = vuzp2_s16(vuzp2_s16(v25, v26), v25).u32[0];
        v25.i16[2] = HIWORD(*(_QWORD *)&v16[v23]);
        v25.i16[3] = HIWORD(*(_QWORD *)&v17[v23]);
        v27.i32[0] = vuzp2_s16(vuzp2_s16(v27, v28), v27).u32[0];
        v27.i16[2] = HIWORD(*(_QWORD *)&v21[v23]);
        v27.i16[3] = HIWORD(*(_QWORD *)&v22[v23]);
        *(_QWORD *)v20 = v29;
        *((_QWORD *)v20 + 1) = v30;
        v35 = &v20[v10 + 8];
        *((_QWORD *)v35 - 1) = v31;
        *(_QWORD *)v35 = v32;
        v36 = &v20[v12];
        *(_QWORD *)v36 = v33;
        *((_QWORD *)v36 + 1) = v34;
        v37 = (int16x4_t *)&v20[v11];
        *v37 = v25;
        v37[1] = v27;
        v23 += 4;
        v20 += v9;
        --v24;
      }
      while (v24);
      v14 = (__int16 *)((char *)v14 + v23 * 2);
      v15 = (_WORD *)((char *)v15 + v23 * 2);
      v16 = (_WORD *)((char *)v16 + v23 * 2);
      v17 = (_WORD *)((char *)v17 + v23 * 2);
      v18 = (__int16 *)((char *)v18 + v23 * 2);
      v19 = (_WORD *)((char *)v19 + v23 * 2);
      v21 = (_WORD *)((char *)v21 + v23 * 2);
      v22 = (_WORD *)((char *)v22 + v23 * 2);
    }
    if ((a4 & 3) != 0)
    {
      v38 = v20 + 8;
      v39 = a4 & 3;
      do
      {
        v40 = *v14++;
        LOWORD(v41) = v40;
        WORD1(v41) = *v15++;
        WORD2(v41) = *v16++;
        HIWORD(v41) = *v17++;
        v42 = *v18++;
        LOWORD(v43) = v42;
        WORD1(v43) = *v19++;
        WORD2(v43) = *v21++;
        HIWORD(v43) = *v22++;
        *(v38 - 1) = v41;
        *v38 = v43;
        v38 = (_QWORD *)((char *)v38 + v10);
        --v39;
      }
      while (v39);
    }
    v44 = -8;
    v45 = 8;
LABEL_32:
    v4 += v45;
    result = (result + v44);
    if (!(_DWORD)result)
      return result;
  }
  if ((int)result >= 4)
  {
    v46 = &a2[v4];
    v47 = (__int16 *)*v46;
    v48 = *(const void **)((char *)a2 + ((8 * v4) | 8));
    v49 = v46[2];
    v50 = v46[3];
    v51 = &__dst[2 * v4];
    if (v5 >= 7)
    {
      v52 = 0;
      v53 = v7;
      do
      {
        v54 = *(int16x4_t *)&v47[v52];
        v55 = *(int16x4_t *)&v48[v52];
        LODWORD(v56) = vzip1_s16(v54, v55).u32[0];
        WORD2(v56) = *(_QWORD *)&v49[v52];
        HIWORD(v56) = *(_QWORD *)&v50[v52];
        LODWORD(v57) = vtrn2_s16(v54, v55).u32[0];
        WORD2(v57) = WORD1(*(_QWORD *)&v49[v52]);
        v58 = v51;
        HIWORD(v57) = WORD1(*(_QWORD *)&v50[v52]);
        LODWORD(v59) = vzip2_s16(v54, v55).u32[0];
        WORD2(v59) = WORD2(*(_QWORD *)&v49[v52]);
        HIWORD(v59) = WORD2(*(_QWORD *)&v50[v52]);
        v54.i32[0] = vuzp2_s16(vuzp2_s16(v54, v55), v54).u32[0];
        v54.i16[2] = HIWORD(*(_QWORD *)&v49[v52]);
        v54.i16[3] = HIWORD(*(_QWORD *)&v50[v52]);
        *(_QWORD *)v51 = v56;
        v60 = &v51[v10];
        *(_QWORD *)v60 = v57;
        v61 = &v60[v10];
        *(_QWORD *)v61 = v59;
        v62 = (int16x4_t *)&v61[v10];
        *v62 = v54;
        v52 += 4;
        v51 = (char *)v62 + v10;
        --v53;
      }
      while (v53);
      v51 = &v58[v9];
      v50 = (_WORD *)((char *)v50 + v52 * 2);
      v49 = (_WORD *)((char *)v49 + v52 * 2);
      v48 = (_WORD *)((char *)v48 + v52 * 2);
      v47 = (__int16 *)((char *)v47 + v52 * 2);
    }
    v63 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        v64 = *v47++;
        LOWORD(v65) = v64;
        WORD1(v65) = *v48++;
        WORD2(v65) = *v49++;
        HIWORD(v65) = *v50++;
        *(_QWORD *)v51 = v65;
        v51 += v10;
        --v63;
      }
      while (v63);
    }
    v44 = -4;
    v45 = 4;
    goto LABEL_32;
  }
  if ((int)result >= 2)
  {
    v66 = (uint16x4_t *)a2[v4];
    v67 = *(uint16x4_t **)((char *)a2 + ((8 * v4) | 8));
    v68 = &__dst[2 * v4];
    v69 = v7;
    if (v5 >= 7)
    {
      do
      {
        v70 = *v66++;
        v71 = v70;
        v72 = *v67++;
        v73 = v68;
        v74 = (int8x16_t)vmovl_u16(v72);
        v75 = (int32x4_t)vmovl_u16(v71);
        v76 = (int32x2_t)vextq_s8(v74, v74, 8uLL).u64[0];
        v77 = (int32x2_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u64[0];
        *(_WORD *)v68 = v75.i16[0];
        *((_WORD *)v68 + 1) = vzip1_s32(*(int32x2_t *)&v75, *(int32x2_t *)&v74).i16[2];
        v78 = &v68[v10];
        *((_WORD *)v78 + 1) = v74.i16[2];
        *(_WORD *)v78 = vdup_lane_s32(*(int32x2_t *)v75.i8, 1).u16[0];
        v79 = &v68[v10 + v10];
        *((_WORD *)v79 + 1) = vzip1_s32(v77, v76).i16[2];
        *(_WORD *)v79 = v77.i16[0];
        v80 = &v79[v10];
        *((_WORD *)v80 + 1) = v76.i16[2];
        *(_WORD *)v80 = vdup_laneq_s32(v75, 3).u16[0];
        v68 = &v80[v10];
        --v69;
      }
      while (v69);
      v68 = &v73[v9];
    }
    v81 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        v83 = v66->i16[0];
        v66 = (uint16x4_t *)((char *)v66 + 2);
        v82 = v83;
        v84 = v67->i16[0];
        v67 = (uint16x4_t *)((char *)v67 + 2);
        *((_WORD *)v68 + 1) = v84;
        *(_WORD *)v68 = v82;
        v68 += v10;
        --v81;
      }
      while (v81);
    }
    v44 = -2;
    v45 = 2;
    goto LABEL_32;
  }
  if (a4)
  {
    v85 = (__int16 *)a2[v4];
    v86 = 2 * v8;
    v87 = &__dst[2 * v4];
    do
    {
      v88 = *v85++;
      *(_WORD *)v87 = v88;
      v87 += v86;
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t TInterleaver_SIMD<PCMSInt32_SIMD>::Interleave(uint64_t result, const void **a2, char *__dst, int a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  int *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  int *v18;
  _DWORD *v19;
  char *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  char *v36;
  int32x4_t *v37;
  _OWORD *v38;
  int v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  const void **v46;
  int *v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  char *v51;
  uint64_t v52;
  int v53;
  int32x4_t v54;
  int32x4_t v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  __int128 v59;
  char *v60;
  char *v61;
  int32x4_t *v62;
  int v63;
  int v64;
  __int128 v65;
  int8x16_t *v66;
  int8x16_t *v67;
  int32x2_t *v68;
  int v69;
  int8x16_t v70;
  int8x16_t v71;
  int32x2_t *v72;
  int8x16_t v73;
  int32x2_t v74;
  int32x2_t v75;
  int32x2_t v76;
  int32x2_t *v77;
  int32x2_t *v78;
  int32x2_t *v79;
  int v80;
  __int32 v81;
  int32x2_t v82;
  int *v83;
  uint64_t v84;
  char *v85;
  int v86;

  if (!(_DWORD)result)
    return result;
  if ((_DWORD)result == 1)
    return (uint64_t)memcpy(__dst, *a2, 4 * a4);
  v4 = 0;
  v5 = a4 + 3;
  if (a4 >= 0)
    v6 = a4;
  else
    v6 = a4 + 3;
  v7 = v6 >> 2;
  v8 = (int)result;
  v9 = 16 * (int)result;
  v10 = 4 * (int)result;
  v11 = 12 * (int)result;
  v12 = 8 * (int)result;
  while ((int)result >= 8)
  {
    v13 = &a2[v4];
    v14 = (int *)*v13;
    v15 = *(const void **)((char *)a2 + ((8 * v4) | 8));
    v16 = v13[2];
    v17 = v13[3];
    v18 = (int *)v13[4];
    v19 = v13[5];
    v20 = &__dst[4 * v4];
    v21 = v13[6];
    v22 = v13[7];
    if (v5 >= 7)
    {
      v23 = 0;
      v24 = v7;
      do
      {
        v25 = *(int32x4_t *)&v14[v23];
        v26 = *(int32x4_t *)&v15[v23];
        v27 = *(int32x4_t *)&v18[v23];
        v28 = *(int32x4_t *)&v19[v23];
        *(_QWORD *)&v29 = vzip1q_s32(v25, v26).u64[0];
        DWORD2(v29) = *(_OWORD *)&v16[v23];
        HIDWORD(v29) = *(_OWORD *)&v17[v23];
        *(_QWORD *)&v30 = vzip1q_s32(v27, v28).u64[0];
        DWORD2(v30) = *(_OWORD *)&v21[v23];
        HIDWORD(v30) = *(_OWORD *)&v22[v23];
        *(_QWORD *)&v31 = vtrn2q_s32(v25, v26).u64[0];
        DWORD2(v31) = HIDWORD(*(_QWORD *)&v16[v23]);
        HIDWORD(v31) = HIDWORD(*(_QWORD *)&v17[v23]);
        *(_QWORD *)&v32 = vtrn2q_s32(v27, v28).u64[0];
        DWORD2(v32) = HIDWORD(*(_QWORD *)&v21[v23]);
        HIDWORD(v32) = HIDWORD(*(_QWORD *)&v22[v23]);
        *(_QWORD *)&v33 = vzip2q_s32(v25, v26).u64[0];
        DWORD2(v33) = *(_QWORD *)&v16[v23 + 2];
        HIDWORD(v33) = *(_QWORD *)&v17[v23 + 2];
        *(_QWORD *)&v34 = vzip2q_s32(v27, v28).u64[0];
        DWORD2(v34) = *(_QWORD *)&v21[v23 + 2];
        HIDWORD(v34) = *(_QWORD *)&v22[v23 + 2];
        v25.i64[0] = vuzp2q_s32(vuzp2q_s32(v25, v26), v25).u64[0];
        v25.i32[2] = HIDWORD(*(_OWORD *)&v16[v23]);
        v25.i32[3] = HIDWORD(*(_OWORD *)&v17[v23]);
        v26.i64[0] = vuzp2q_s32(vuzp2q_s32(v27, v28), v27).u64[0];
        v26.i32[2] = HIDWORD(*(_OWORD *)&v21[v23]);
        v26.i32[3] = HIDWORD(*(_OWORD *)&v22[v23]);
        *(_OWORD *)v20 = v29;
        *((_OWORD *)v20 + 1) = v30;
        v35 = &v20[v10 + 16];
        *((_OWORD *)v35 - 1) = v31;
        *(_OWORD *)v35 = v32;
        v36 = &v20[v12];
        *(_OWORD *)v36 = v33;
        *((_OWORD *)v36 + 1) = v34;
        v37 = (int32x4_t *)&v20[v11];
        *v37 = v25;
        v37[1] = v26;
        v23 += 4;
        v20 += v9;
        --v24;
      }
      while (v24);
      v14 = (int *)((char *)v14 + v23 * 4);
      v15 = (_DWORD *)((char *)v15 + v23 * 4);
      v16 = (_DWORD *)((char *)v16 + v23 * 4);
      v17 = (_DWORD *)((char *)v17 + v23 * 4);
      v18 = (int *)((char *)v18 + v23 * 4);
      v19 = (_DWORD *)((char *)v19 + v23 * 4);
      v21 = (_DWORD *)((char *)v21 + v23 * 4);
      v22 = (_DWORD *)((char *)v22 + v23 * 4);
    }
    if ((a4 & 3) != 0)
    {
      v38 = v20 + 16;
      v39 = a4 & 3;
      do
      {
        v40 = *v14++;
        LODWORD(v41) = v40;
        DWORD1(v41) = *v15++;
        DWORD2(v41) = *v16++;
        HIDWORD(v41) = *v17++;
        v42 = *v18++;
        LODWORD(v43) = v42;
        DWORD1(v43) = *v19++;
        DWORD2(v43) = *v21++;
        HIDWORD(v43) = *v22++;
        *(v38 - 1) = v41;
        *v38 = v43;
        v38 = (_OWORD *)((char *)v38 + v10);
        --v39;
      }
      while (v39);
    }
    v44 = -8;
    v45 = 8;
LABEL_32:
    v4 += v45;
    result = (result + v44);
    if (!(_DWORD)result)
      return result;
  }
  if ((int)result >= 4)
  {
    v46 = &a2[v4];
    v47 = (int *)*v46;
    v48 = *(const void **)((char *)a2 + ((8 * v4) | 8));
    v49 = v46[2];
    v50 = v46[3];
    v51 = &__dst[4 * v4];
    if (v5 >= 7)
    {
      v52 = 0;
      v53 = v7;
      do
      {
        v54 = *(int32x4_t *)&v47[v52];
        v55 = *(int32x4_t *)&v48[v52];
        *(_QWORD *)&v56 = vzip1q_s32(v54, v55).u64[0];
        DWORD2(v56) = *(_OWORD *)&v49[v52];
        HIDWORD(v56) = *(_OWORD *)&v50[v52];
        *(_QWORD *)&v57 = vtrn2q_s32(v54, v55).u64[0];
        DWORD2(v57) = HIDWORD(*(_QWORD *)&v49[v52]);
        v58 = v51;
        HIDWORD(v57) = HIDWORD(*(_QWORD *)&v50[v52]);
        *(_QWORD *)&v59 = vzip2q_s32(v54, v55).u64[0];
        DWORD2(v59) = *(_QWORD *)&v49[v52 + 2];
        HIDWORD(v59) = *(_QWORD *)&v50[v52 + 2];
        v54.i64[0] = vuzp2q_s32(vuzp2q_s32(v54, v55), v54).u64[0];
        v54.i32[2] = HIDWORD(*(_OWORD *)&v49[v52]);
        v54.i32[3] = HIDWORD(*(_OWORD *)&v50[v52]);
        *(_OWORD *)v51 = v56;
        v60 = &v51[v10];
        *(_OWORD *)v60 = v57;
        v61 = &v60[v10];
        *(_OWORD *)v61 = v59;
        v62 = (int32x4_t *)&v61[v10];
        *v62 = v54;
        v52 += 4;
        v51 = &v62->i8[v10];
        --v53;
      }
      while (v53);
      v51 = &v58[v9];
      v50 = (_DWORD *)((char *)v50 + v52 * 4);
      v49 = (_DWORD *)((char *)v49 + v52 * 4);
      v48 = (_DWORD *)((char *)v48 + v52 * 4);
      v47 = (int *)((char *)v47 + v52 * 4);
    }
    v63 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        v64 = *v47++;
        LODWORD(v65) = v64;
        DWORD1(v65) = *v48++;
        DWORD2(v65) = *v49++;
        HIDWORD(v65) = *v50++;
        *(_OWORD *)v51 = v65;
        v51 += v10;
        --v63;
      }
      while (v63);
    }
    v44 = -4;
    v45 = 4;
    goto LABEL_32;
  }
  if ((int)result >= 2)
  {
    v66 = (int8x16_t *)a2[v4];
    v67 = *(int8x16_t **)((char *)a2 + ((8 * v4) | 8));
    v68 = (int32x2_t *)&__dst[4 * v4];
    v69 = v7;
    if (v5 >= 7)
    {
      do
      {
        v70 = *v66++;
        v71 = v70;
        v72 = v68;
        v73 = *v67++;
        v74 = vzip1_s32(*(int32x2_t *)v71.i8, *(int32x2_t *)v73.i8);
        v75 = vzip2_s32(*(int32x2_t *)v71.i8, *(int32x2_t *)v73.i8);
        v76 = (int32x2_t)vextq_s8(v73, v73, 8uLL).u64[0];
        v71.i64[0] = vextq_s8(v71, v71, 8uLL).u64[0];
        *v68 = v74;
        v77 = (int32x2_t *)((char *)v68 + v10);
        *v77 = v75;
        v78 = (int32x2_t *)((char *)v77 + v10);
        *v78 = vzip1_s32(*(int32x2_t *)v71.i8, v76);
        v79 = (int32x2_t *)((char *)v78 + v10);
        *v79 = vzip2_s32(*(int32x2_t *)v71.i8, v76);
        v68 = (int32x2_t *)((char *)v79 + v10);
        --v69;
      }
      while (v69);
      v68 = &v72[(unint64_t)v9 / 8];
    }
    v80 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        v81 = v66->i32[0];
        v66 = (int8x16_t *)((char *)v66 + 4);
        v82.i32[0] = v81;
        v82.i32[1] = v67->i32[0];
        v67 = (int8x16_t *)((char *)v67 + 4);
        *v68 = v82;
        v68 = (int32x2_t *)((char *)v68 + v10);
        --v80;
      }
      while (v80);
    }
    v44 = -2;
    v45 = 2;
    goto LABEL_32;
  }
  if (a4)
  {
    v83 = (int *)a2[v4];
    v84 = 4 * v8;
    v85 = &__dst[4 * v4];
    do
    {
      v86 = *v83++;
      *(_DWORD *)v85 = v86;
      v85 += v84;
      --a4;
    }
    while (a4);
  }
  return result;
}

double TInterleaver_SIMD<PCMFloat64_SIMD>::Interleave(int a1, const void **a2, char *__dst, int a4)
{
  int64x2_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  int64x2_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t *v50;
  int64x2_t *v51;
  int64x2_t *v52;
  int64x2_t *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int64x2_t v57;
  uint64_t v58;
  int64x2_t v59;
  uint64_t v60;
  int64x2_t v61;
  int v62;
  uint64_t v63;
  const void **v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  int64x2_t *v69;
  uint64_t v70;
  int v71;
  int64x2_t *v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t *v84;
  int64x2_t *v85;
  int64x2_t *v86;
  int i;
  uint64_t v88;
  uint64_t v89;
  int64x2_t v90;
  _OWORD *v91;
  _OWORD *v92;
  int64x2_t *v93;
  int v94;
  int64x2_t *v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t *v103;
  int64x2_t *v104;
  int j;
  uint64_t v106;
  uint64_t *v107;
  char *v108;
  uint64_t v109;
  uint64_t v111;
  const void **v112;

  if (!a1)
    return *(double *)v4.i64;
  if (a1 == 1)
  {
    memcpy(__dst, *a2, 8 * a4);
    return *(double *)v4.i64;
  }
  v5 = 0;
  v6 = (a4 + 3);
  if (a4 >= 0)
    v7 = a4;
  else
    v7 = a4 + 3;
  v8 = v7 >> 2;
  v9 = a4 & 3;
  v111 = a1;
  v10 = 2 * a1;
  v11 = 8 * a1;
  v12 = 24 * a1;
  v13 = a1;
  v112 = a2;
  while (a1 >= 8)
  {
    v14 = &a2[v5];
    v15 = (uint64_t *)*v14;
    v16 = *(uint64_t **)((char *)a2 + ((8 * v5) | 8));
    v17 = (uint64_t *)v14[2];
    v18 = (uint64_t *)v14[3];
    v19 = (uint64_t *)v14[4];
    v20 = (uint64_t *)v14[5];
    v21 = (int64x2_t *)&__dst[8 * v5];
    v22 = (uint64_t *)v14[6];
    v23 = (uint64_t *)v14[7];
    if (v6 >= 7)
    {
      v24 = v6;
      v25 = 0;
      v26 = v8;
      do
      {
        v28 = *(int64x2_t *)&v15[v25];
        v27 = *(int64x2_t *)&v15[v25 + 2];
        v30 = *(int64x2_t *)&v16[v25];
        v29 = *(int64x2_t *)&v16[v25 + 2];
        v32 = *(int64x2_t *)&v17[v25];
        v31 = *(int64x2_t *)&v17[v25 + 2];
        v34 = *(int64x2_t *)&v19[v25];
        v33 = *(int64x2_t *)&v19[v25 + 2];
        v36 = *(int64x2_t *)&v20[v25];
        v35 = *(int64x2_t *)&v20[v25 + 2];
        v38 = *(int64x2_t *)&v22[v25];
        v37 = *(int64x2_t *)&v22[v25 + 2];
        v39 = vzip1q_s64(v28, v30);
        v40 = vzip1q_s64(v32, *(int64x2_t *)&v18[v25]);
        v41 = vzip1q_s64(v34, v36);
        v42 = vzip1q_s64(v38, *(int64x2_t *)&v23[v25]);
        v32.i64[0] = vdupq_laneq_s64(v32, 1).u64[0];
        v32.i64[1] = v18[v25 + 1];
        v43 = vzip2q_s64(v28, v30);
        v44 = vzip2q_s64(v34, v36);
        v45.i64[0] = vdupq_laneq_s64(v38, 1).u64[0];
        v45.i64[1] = v23[v25 + 1];
        v46 = vzip1q_s64(v27, v29);
        v47 = vzip1q_s64(v31, *(int64x2_t *)&v18[v25 + 2]);
        v48 = vzip1q_s64(v37, *(int64x2_t *)&v23[v25 + 2]);
        v31.i64[0] = vdupq_laneq_s64(v31, 1).u64[0];
        v4 = vzip2q_s64(v27, v29);
        v31.i64[1] = v18[v25 + 3];
        v49.i64[0] = vdupq_laneq_s64(v37, 1).u64[0];
        v49.i64[1] = v23[v25 + 3];
        *v21 = v39;
        v21[1] = v40;
        v21[2] = v41;
        v21[3] = v42;
        v50 = (int64x2_t *)((char *)v21 + v11 + 32);
        v50[-2] = v43;
        v50[-1] = v32;
        *v50 = v44;
        v50[1] = v45;
        v51 = &v21[v13];
        *v51 = v46;
        v51[1] = v47;
        v51[2] = vzip1q_s64(v33, v35);
        v51[3] = v48;
        v52 = (int64x2_t *)((char *)v21 + v12);
        *v52 = v4;
        v52[1] = v31;
        v52[2] = vzip2q_s64(v33, v35);
        v52[3] = v49;
        v25 += 4;
        v21 = (int64x2_t *)((char *)v21 + v10 * 16);
        --v26;
      }
      while (v26);
      v15 = (uint64_t *)((char *)v15 + v25 * 8);
      v16 = (uint64_t *)((char *)v16 + v25 * 8);
      v17 = (uint64_t *)((char *)v17 + v25 * 8);
      v18 = (uint64_t *)((char *)v18 + v25 * 8);
      v19 = (uint64_t *)((char *)v19 + v25 * 8);
      v20 = (uint64_t *)((char *)v20 + v25 * 8);
      v22 = (uint64_t *)((char *)v22 + v25 * 8);
      v23 = (uint64_t *)((char *)v23 + v25 * 8);
      v6 = v24;
      a2 = v112;
      v9 = a4 & 3;
    }
    if (v9)
    {
      v53 = v21 + 2;
      v54 = v9;
      do
      {
        v55 = *v15++;
        v4.i64[0] = v55;
        v4.i64[1] = *v16++;
        v56 = *v17++;
        v57.i64[0] = v56;
        v57.i64[1] = *v18++;
        v58 = *v19++;
        v59.i64[0] = v58;
        v59.i64[1] = *v20++;
        v60 = *v22++;
        v61.i64[0] = v60;
        v61.i64[1] = *v23++;
        v53[-2] = v4;
        v53[-1] = v57;
        *v53 = v59;
        v53[1] = v61;
        v53 = (int64x2_t *)((char *)v53 + v11);
        --v54;
      }
      while (v54);
    }
    v62 = -8;
    v63 = 8;
LABEL_32:
    v5 += v63;
    a1 += v62;
    if (!a1)
      return *(double *)v4.i64;
  }
  if (a1 >= 4)
  {
    v64 = &a2[v5];
    v65 = (uint64_t *)*v64;
    v66 = *(uint64_t **)((char *)a2 + ((8 * v5) | 8));
    v67 = (uint64_t *)v64[2];
    v68 = (uint64_t *)v64[3];
    v69 = (int64x2_t *)&__dst[8 * v5];
    if (v6 >= 7)
    {
      v70 = 0;
      v71 = v8;
      do
      {
        v72 = v69;
        v74 = *(int64x2_t *)&v65[v70];
        v73 = *(int64x2_t *)&v65[v70 + 2];
        v76 = *(int64x2_t *)&v66[v70];
        v75 = *(int64x2_t *)&v66[v70 + 2];
        v78 = *(int64x2_t *)&v67[v70];
        v77 = *(int64x2_t *)&v67[v70 + 2];
        v79 = vzip1q_s64(v74, v76);
        v80 = vzip1q_s64(v78, *(int64x2_t *)&v68[v70]);
        v78.i64[0] = vdupq_laneq_s64(v78, 1).u64[0];
        v81 = vzip2q_s64(v74, v76);
        v78.i64[1] = v68[v70 + 1];
        v82 = vzip1q_s64(v73, v75);
        v83 = vzip1q_s64(v77, *(int64x2_t *)&v68[v70 + 2]);
        v4 = vzip2q_s64(v73, v75);
        v75.i64[0] = vdupq_laneq_s64(v77, 1).u64[0];
        v75.i64[1] = v68[v70 + 3];
        *v69 = v79;
        v69[1] = v80;
        v84 = (int64x2_t *)((char *)v69 + v11);
        *v84 = v81;
        v84[1] = v78;
        v85 = (int64x2_t *)((char *)v69 + v11 + v11);
        *v85 = v82;
        v85[1] = v83;
        v86 = (int64x2_t *)((char *)v85 + v11);
        *v86 = v4;
        v86[1] = v75;
        v70 += 4;
        v69 = (int64x2_t *)((char *)v86 + v11);
        --v71;
      }
      while (v71);
      v69 = &v72[v10];
      v68 = (uint64_t *)((char *)v68 + v70 * 8);
      v67 = (uint64_t *)((char *)v67 + v70 * 8);
      v66 = (uint64_t *)((char *)v66 + v70 * 8);
      v65 = (uint64_t *)((char *)v65 + v70 * 8);
    }
    for (i = v9; i; --i)
    {
      v88 = *v65++;
      v4.i64[0] = v88;
      v4.i64[1] = *v66++;
      v89 = *v67++;
      v90.i64[0] = v89;
      v90.i64[1] = *v68++;
      *v69 = v4;
      v69[1] = v90;
      v69 = (int64x2_t *)((char *)v69 + v11);
    }
    v62 = -4;
    v63 = 4;
    goto LABEL_32;
  }
  if (a1 >= 2)
  {
    v91 = a2[v5];
    v92 = *(const void **)((char *)a2 + ((8 * v5) | 8));
    v93 = (int64x2_t *)&__dst[8 * v5];
    v94 = v8;
    if (v6 >= 7)
    {
      do
      {
        v95 = v93;
        v97 = *(int64x2_t *)v91;
        v96 = *((int64x2_t *)v91 + 1);
        v91 += 2;
        v99 = *(int64x2_t *)v92;
        v98 = *((int64x2_t *)v92 + 1);
        v92 += 2;
        v100 = vzip1q_s64(v97, v99);
        v101 = vzip2q_s64(v97, v99);
        v102 = vzip1q_s64(v96, v98);
        v4 = vzip2q_s64(v96, v98);
        *v93 = v100;
        *(int64x2_t *)((char *)v93 + v11) = v101;
        v103 = (int64x2_t *)((char *)v93 + v11 + v11);
        *v103 = v102;
        v104 = (int64x2_t *)((char *)v103 + v11);
        *v104 = v4;
        v93 = (int64x2_t *)((char *)v104 + v11);
        --v94;
      }
      while (v94);
      v93 = &v95[v10];
    }
    for (j = v9; j; --j)
    {
      v106 = *(_QWORD *)v91;
      v91 = (_OWORD *)((char *)v91 + 8);
      v4.i64[0] = v106;
      v4.i64[1] = *(_QWORD *)v92;
      v92 = (_OWORD *)((char *)v92 + 8);
      *v93 = v4;
      v93 = (int64x2_t *)((char *)v93 + v11);
    }
    v62 = -2;
    v63 = 2;
    goto LABEL_32;
  }
  if (a4)
  {
    v107 = (uint64_t *)a2[v5];
    v108 = &__dst[8 * v5];
    do
    {
      v109 = *v107++;
      v4.i64[0] = v109;
      *(_QWORD *)v108 = v109;
      v108 += 8 * v111;
      --a4;
    }
    while (a4);
  }
  return *(double *)v4.i64;
}

unint64_t TDeinterleaver_SIMD<PCMSInt16_SIMD>::Deinterleave(unint64_t result, char *a2, void **a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x4_t *v11;
  void **v12;
  _WORD *v13;
  _WORD *v14;
  _WORD *v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  _WORD *v20;
  uint64_t v21;
  int v22;
  int16x4_t *v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t *v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t *v29;
  int16x4_t v30;
  uint64_t v31;
  unint64_t *v32;
  int16x4_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int16x4_t *v38;
  int v39;
  int16x4_t v40;
  int16x4_t v41;
  int v42;
  uint64_t v43;
  int16x4_t *v44;
  void **v45;
  _WORD *v46;
  _WORD *v47;
  _WORD *v48;
  _WORD *v49;
  uint64_t v50;
  int v51;
  int16x4_t *v52;
  int16x4_t v53;
  int16x4_t *v54;
  int16x4_t v55;
  int16x4_t *v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int16x4_t v63;
  char *v64;
  _QWORD *v65;
  _QWORD *v66;
  int v67;
  char *v68;
  uint64_t v69;
  __int16 v70;
  char *v71;
  __int16 v72;
  __int16 v73;
  __int16 *v74;
  __int16 v75;
  __int16 v76;
  __int16 *v77;
  __int16 v78;
  uint64_t v79;
  int v80;
  __int16 v81;
  _WORD *v82;
  uint64_t v83;
  char *v84;

  if (!(_DWORD)result)
    return result;
  if ((_DWORD)result == 1)
    return (unint64_t)memcpy(*a3, a2, 2 * a4);
  v4 = 0;
  v5 = a4 + 3;
  if (a4 >= 0)
    v6 = a4;
  else
    v6 = a4 + 3;
  v7 = v6 >> 2;
  v8 = (int)result;
  v9 = (int)result;
  v10 = 2 * (int)result;
  while ((int)result >= 8)
  {
    v11 = (int16x4_t *)&a2[2 * v4];
    v12 = &a3[v4];
    v13 = *v12;
    v14 = *(void **)((char *)a3 + ((8 * v4) | 8));
    v16 = v12[2];
    v15 = v12[3];
    v17 = v12[4];
    v18 = v12[5];
    v19 = v12[6];
    v20 = v12[7];
    if (v5 >= 7)
    {
      v21 = 0;
      v22 = v7;
      do
      {
        v23 = v11;
        v25 = *v11;
        v24 = v11[1];
        v26 = (int16x4_t *)((char *)v11 + v10);
        v28 = *v26;
        v27 = v26[1];
        v29 = (int16x4_t *)((char *)v26 + v10);
        v31 = (uint64_t)*v29;
        v30 = v29[1];
        v32 = (unint64_t *)((char *)v29 + v10);
        v33 = (int16x4_t)v32[1];
        LODWORD(v34) = vzip1_s16(v25, v28).u32[0];
        WORD2(v34) = v31;
        HIWORD(v34) = *v32;
        LODWORD(v35) = vtrn2_s16(v25, v28).u32[0];
        WORD2(v35) = WORD1(v31);
        HIWORD(v35) = WORD1(*v32);
        LODWORD(v36) = vzip2_s16(v25, v28).u32[0];
        WORD2(v36) = WORD2(v31);
        HIWORD(v36) = WORD2(*v32);
        v25.i32[0] = vuzp2_s16(vuzp2_s16(v25, v28), v25).u32[0];
        v25.i16[2] = HIWORD(v31);
        v25.i16[3] = HIWORD(*v32);
        v28.i32[0] = vzip1_s16(v24, v27).u32[0];
        v28.i16[2] = v30.i16[0];
        v28.i16[3] = v33.i16[0];
        LODWORD(v31) = vtrn2_s16(v24, v27).u32[0];
        WORD2(v31) = v30.i16[1];
        HIWORD(v31) = v33.i16[1];
        LODWORD(v37) = vzip2_s16(v24, v27).u32[0];
        WORD2(v37) = v30.i16[2];
        HIWORD(v37) = v33.i16[2];
        v24.i32[0] = vuzp2_s16(vuzp2_s16(v24, v27), v24).u32[0];
        v24.i16[2] = v30.i16[3];
        *(_QWORD *)&v13[v21] = v34;
        *(_QWORD *)&v14[v21] = v35;
        v24.i16[3] = v33.i16[3];
        *(_QWORD *)&v16[v21] = v36;
        *(int16x4_t *)&v15[v21] = v25;
        *(int16x4_t *)&v17[v21] = v28;
        *(_QWORD *)&v18[v21] = v31;
        *(_QWORD *)&v19[v21] = v37;
        *(int16x4_t *)&v20[v21] = v24;
        v21 += 4;
        v11 = (int16x4_t *)((char *)v32 + v10);
        --v22;
      }
      while (v22);
      v11 = &v23[v9];
      v13 = (_WORD *)((char *)v13 + v21 * 2);
      v14 = (_WORD *)((char *)v14 + v21 * 2);
      v16 = (_WORD *)((char *)v16 + v21 * 2);
      v15 = (_WORD *)((char *)v15 + v21 * 2);
      v17 = (_WORD *)((char *)v17 + v21 * 2);
      v18 = (_WORD *)((char *)v18 + v21 * 2);
      v19 = (_WORD *)((char *)v19 + v21 * 2);
      v20 = (_WORD *)((char *)v20 + v21 * 2);
    }
    if ((a4 & 3) != 0)
    {
      v38 = v11 + 1;
      v39 = a4 & 3;
      do
      {
        v40 = v38[-1];
        v41 = *v38;
        *v13++ = v40.i16[0];
        *v14++ = v40.i16[1];
        *v16++ = v40.i16[2];
        *v15++ = v40.i16[3];
        *v17++ = v41.i16[0];
        *v18++ = v41.i16[1];
        *v19++ = v41.i16[2];
        *v20++ = v41.i16[3];
        v38 = (int16x4_t *)((char *)v38 + v10);
        --v39;
      }
      while (v39);
    }
    v42 = -8;
    v43 = 8;
LABEL_32:
    v4 += v43;
    result = (result + v42);
    if (!(_DWORD)result)
      return result;
  }
  if ((int)result >= 4)
  {
    v44 = (int16x4_t *)&a2[2 * v4];
    v45 = &a3[v4];
    v46 = *v45;
    v47 = *(void **)((char *)a3 + ((8 * v4) | 8));
    v49 = v45[2];
    v48 = v45[3];
    if (v5 >= 7)
    {
      v50 = 0;
      v51 = v7;
      do
      {
        v52 = v44;
        v53 = *v44;
        v54 = (int16x4_t *)((char *)v44 + v10);
        v55 = *v54;
        v56 = (int16x4_t *)((char *)v54 + v10);
        v57 = (uint64_t)*v56;
        v58 = (unint64_t *)((char *)v56 + v10);
        LODWORD(v59) = vzip1_s16(v53, v55).u32[0];
        WORD2(v59) = v57;
        HIWORD(v59) = *v58;
        LODWORD(v60) = vtrn2_s16(v53, v55).u32[0];
        WORD2(v60) = WORD1(v57);
        HIWORD(v60) = WORD1(*v58);
        LODWORD(v61) = vzip2_s16(v53, v55).u32[0];
        WORD2(v61) = WORD2(v57);
        HIWORD(v61) = WORD2(*v58);
        v53.i32[0] = vuzp2_s16(vuzp2_s16(v53, v55), v53).u32[0];
        v53.i16[2] = HIWORD(v57);
        v53.i16[3] = HIWORD(*v58);
        *(_QWORD *)&v46[v50] = v59;
        *(_QWORD *)&v47[v50] = v60;
        *(_QWORD *)&v49[v50] = v61;
        *(int16x4_t *)&v48[v50] = v53;
        v50 += 4;
        v44 = (int16x4_t *)((char *)v58 + v10);
        --v51;
      }
      while (v51);
      v44 = &v52[v9];
      v48 = (_WORD *)((char *)v48 + v50 * 2);
      v49 = (_WORD *)((char *)v49 + v50 * 2);
      v47 = (_WORD *)((char *)v47 + v50 * 2);
      v46 = (_WORD *)((char *)v46 + v50 * 2);
    }
    v62 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        v63 = *v44;
        *v46++ = *v44;
        *v47++ = v63.i16[1];
        *v49++ = v63.i16[2];
        *v48++ = v63.i16[3];
        v44 = (int16x4_t *)((char *)v44 + v10);
        --v62;
      }
      while (v62);
    }
    v42 = -4;
    v43 = 4;
    goto LABEL_32;
  }
  if ((int)result >= 2)
  {
    v64 = &a2[2 * v4];
    v65 = a3[v4];
    v66 = *(void **)((char *)a3 + ((8 * v4) | 8));
    v67 = v7;
    if (v5 >= 7)
    {
      do
      {
        v68 = v64;
        LOWORD(v69) = *(_WORD *)v64;
        v70 = *((_WORD *)v64 + 1);
        v71 = &v64[v10];
        v72 = *(_WORD *)v71;
        v73 = *((_WORD *)v71 + 1);
        v74 = (__int16 *)&v71[v10];
        v75 = *v74;
        v76 = v74[1];
        v77 = &v74[(unint64_t)v10 / 2];
        v78 = v70;
        WORD1(v69) = v72;
        WORD2(v69) = v75;
        LOWORD(v79) = v78;
        WORD1(v79) = v73;
        HIWORD(v69) = *v77;
        WORD2(v79) = v76;
        HIWORD(v79) = v77[1];
        *v65++ = v69;
        *v66++ = v79;
        v64 = (char *)&v77[(unint64_t)v10 / 2];
        --v67;
      }
      while (v67);
      v64 = &v68[v9 * 8];
    }
    v80 = a4 & 3;
    if ((a4 & 3) != 0)
    {
      do
      {
        v81 = *((_WORD *)v64 + 1);
        *(_WORD *)v65 = *(_WORD *)v64;
        v65 = (_QWORD *)((char *)v65 + 2);
        *(_WORD *)v66 = v81;
        v66 = (_QWORD *)((char *)v66 + 2);
        v64 += v10;
        --v80;
      }
      while (v80);
    }
    v42 = -2;
    v43 = 2;
    goto LABEL_32;
  }
  if (a4)
  {
    v82 = a3[v4];
    v83 = 2 * v8;
    v84 = &a2[2 * v4];
    do
    {
      *v82++ = *(_WORD *)v84;
      v84 += v83;
      --a4;
    }
    while (a4);
  }
  return result;
}

double TDeinterleaver_SIMD<PCMFloat64_SIMD>::Deinterleave(int a1, char *a2, void **a3, int a4)
{
  int64x2_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t *v12;
  void **v13;
  _OWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int64x2_t *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int64x2_t *v26;
  int64x2_t *v27;
  int64x2_t *v28;
  int64x2_t *v29;
  int64x2_t *v30;
  int64x2_t *v31;
  int64x2_t *v32;
  int64x2_t *v33;
  int64x2_t *v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t *v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t *v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t *v59;
  int v60;
  int64x2_t v61;
  int64x2_t v62;
  int v63;
  uint64_t v64;
  int64x2_t *v65;
  void **v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  int64x2_t *v73;
  int64x2_t *v74;
  int64x2_t *v75;
  int64x2_t *v76;
  int64x2_t *v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t *v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t *v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int i;
  int64x2_t v91;
  int64x2_t *v92;
  int64x2_t *v93;
  int64x2_t *v94;
  int v95;
  int64x2_t *v96;
  int64x2_t v97;
  int64x2_t *v98;
  int64x2_t v99;
  int64x2_t *v100;
  int64x2_t v101;
  int64x2_t v102;
  int j;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v107;

  if (!a1)
    return *(double *)v4.i64;
  if (a1 == 1)
  {
    memcpy(*a3, a2, 8 * a4);
    return *(double *)v4.i64;
  }
  v5 = 0;
  v6 = a4 + 3;
  if (a4 >= 0)
    v7 = a4;
  else
    v7 = a4 + 3;
  v8 = (v7 >> 2);
  v107 = a1;
  v9 = a4 & 3;
  v10 = 32 * a1;
  v11 = 8 * a1;
  while (a1 >= 8)
  {
    v12 = (int64x2_t *)&a2[8 * v5];
    v13 = &a3[v5];
    v14 = *v13;
    v15 = *(uint64_t *)((char *)a3 + ((8 * v5) | 8));
    v17 = v13[2];
    v16 = v13[3];
    v18 = (int64x2_t *)v13[4];
    v19 = (char *)v13[5];
    v20 = v13[6];
    v21 = v13[7];
    if (v6 >= 7)
    {
      v22 = v10;
      v23 = 0;
      v24 = v8;
      v25 = v8;
      do
      {
        v26 = v12;
        v27 = (int64x2_t *)&v14[v23 / 0x10];
        v28 = (int64x2_t *)(v15 + v23);
        v29 = (int64x2_t *)&v17[v23 / 8];
        v30 = (int64x2_t *)&v16[v23 / 8];
        v31 = &v18[v23 / 0x10];
        v32 = (int64x2_t *)&v19[v23];
        v33 = (int64x2_t *)&v20[v23 / 8];
        v34 = (int64x2_t *)&v21[v23 / 8];
        v35 = v26[1];
        v37 = v26[2];
        v36 = v26[3];
        v39 = *(int64x2_t *)((char *)v26 + v11);
        v38 = *(int64x2_t *)((char *)&v26[1] + v11);
        v41 = *(int64x2_t *)((char *)&v26[2] + v11);
        v40 = *(int64x2_t *)((char *)&v26[3] + v11);
        v42 = (int64x2_t *)((char *)v26 + v11 + v11);
        v44 = *v42;
        v43 = v42[1];
        v46 = v42[2];
        v45 = v42[3];
        v47 = (int64x2_t *)((char *)v42 + v11);
        v48 = vzip1q_s64(*v26, v39);
        v49 = vzip1q_s64(v44, *v47);
        v50 = vzip2q_s64(*v26, v39);
        v39.i64[0] = vdupq_laneq_s64(v44, 1).u64[0];
        v39.i64[1] = v47->i64[1];
        v51 = vzip1q_s64(v35, v38);
        v52 = vzip1q_s64(v43, v47[1]);
        v43.i64[0] = vdupq_laneq_s64(v43, 1).u64[0];
        v4 = vzip2q_s64(v35, v38);
        v43.i64[1] = v47[1].i64[1];
        v53 = vzip1q_s64(v37, v41);
        v54 = vzip1q_s64(v46, v47[2]);
        v55 = vzip2q_s64(v37, v41);
        v41.i64[0] = vdupq_laneq_s64(v46, 1).u64[0];
        v41.i64[1] = v47[2].i64[1];
        v56 = vzip1q_s64(v36, v40);
        v57 = vzip1q_s64(v45, v47[3]);
        v58 = vzip2q_s64(v36, v40);
        v40.i64[0] = vdupq_laneq_s64(v45, 1).u64[0];
        v40.i64[1] = v47[3].i64[1];
        *v27 = v48;
        v27[1] = v49;
        *v28 = v50;
        v28[1] = v39;
        *v29 = v51;
        v29[1] = v52;
        *v30 = v4;
        v30[1] = v43;
        *v31 = v53;
        v31[1] = v54;
        *v32 = v55;
        v32[1] = v41;
        *v33 = v56;
        v33[1] = v57;
        *v34 = v58;
        v34[1] = v40;
        v23 += 32;
        v12 = (int64x2_t *)((char *)v47 + v11);
        --v25;
      }
      while (v25);
      v10 = v22;
      v12 = (int64x2_t *)((char *)v26 + v22);
      v14 = (_OWORD *)((char *)v14 + v23);
      v15 += v23;
      v17 = (_QWORD *)((char *)v17 + v23);
      v16 = (_QWORD *)((char *)v16 + v23);
      v18 = (int64x2_t *)((char *)v18 + v23);
      v19 += v23;
      v20 = (_QWORD *)((char *)v20 + v23);
      v21 = (_QWORD *)((char *)v21 + v23);
      v8 = v24;
      v9 = a4 & 3;
    }
    if (v9)
    {
      v59 = v12 + 2;
      v60 = v9;
      do
      {
        v4 = v59[-1];
        v62 = *v59;
        v61 = v59[1];
        *v14 = v59[-2];
        v14 = (_OWORD *)((char *)v14 + 8);
        v15 += 8;
        *v17++ = v4.i64[0];
        *v16++ = v4.i64[1];
        *v18 = v62;
        v18 = (int64x2_t *)((char *)v18 + 8);
        v19 += 8;
        *v20++ = v61.i64[0];
        v59 = (int64x2_t *)((char *)v59 + v11);
        *v21++ = v61.i64[1];
        --v60;
      }
      while (v60);
    }
    v63 = -8;
    v64 = 8;
LABEL_32:
    v5 += v64;
    a1 += v63;
    if (!a1)
      return *(double *)v4.i64;
  }
  if (a1 >= 4)
  {
    v65 = (int64x2_t *)&a2[8 * v5];
    v66 = &a3[v5];
    v67 = *v66;
    v68 = *(void **)((char *)a3 + ((8 * v5) | 8));
    v70 = v66[2];
    v69 = v66[3];
    if (v6 >= 7)
    {
      v71 = 0;
      v72 = v8;
      do
      {
        v73 = v65;
        v74 = (int64x2_t *)&v69[v71];
        v75 = (int64x2_t *)&v70[v71];
        v76 = (int64x2_t *)&v68[v71];
        v77 = (int64x2_t *)&v67[v71];
        v78 = v73[1];
        v80 = *(int64x2_t *)((char *)v73 + v11);
        v79 = *(int64x2_t *)((char *)&v73[1] + v11);
        v81 = (int64x2_t *)((char *)v73 + v11 + v11);
        v83 = *v81;
        v82 = v81[1];
        v84 = (int64x2_t *)((char *)v81 + v11);
        v85 = vzip1q_s64(*v73, v80);
        v86 = vzip1q_s64(v83, *v84);
        v87 = vzip2q_s64(*v73, v80);
        v80.i64[0] = vdupq_laneq_s64(v83, 1).u64[0];
        v80.i64[1] = v84->i64[1];
        v88 = vzip1q_s64(v78, v79);
        v89 = vzip1q_s64(v82, v84[1]);
        v82.i64[0] = vdupq_laneq_s64(v82, 1).u64[0];
        v82.i64[1] = v84[1].i64[1];
        v4 = vzip2q_s64(v78, v79);
        *v77 = v85;
        v77[1] = v86;
        *v76 = v87;
        v76[1] = v80;
        *v75 = v88;
        v75[1] = v89;
        *v74 = v4;
        v74[1] = v82;
        v71 += 4;
        v65 = (int64x2_t *)((char *)v84 + v11);
        --v72;
      }
      while (v72);
      v65 = (int64x2_t *)((char *)v73 + v10);
      v69 = (_QWORD *)((char *)v69 + v71 * 8);
      v70 = (_QWORD *)((char *)v70 + v71 * 8);
      v68 = (_QWORD *)((char *)v68 + v71 * 8);
      v67 = (_QWORD *)((char *)v67 + v71 * 8);
    }
    for (i = v9; i; --i)
    {
      v91 = *v65;
      v4 = v65[1];
      *v67++ = v65->i64[0];
      *v68++ = v91.i64[1];
      *v70++ = v4.i64[0];
      *v69++ = v4.i64[1];
      v65 = (int64x2_t *)((char *)v65 + v11);
    }
    v63 = -4;
    v64 = 4;
    goto LABEL_32;
  }
  if (a1 >= 2)
  {
    v92 = (int64x2_t *)&a2[8 * v5];
    v93 = (int64x2_t *)a3[v5];
    v94 = *(int64x2_t **)((char *)a3 + ((8 * v5) | 8));
    v95 = v8;
    if (v6 >= 7)
    {
      do
      {
        v96 = v92;
        v97 = *(int64x2_t *)((char *)v92 + v11);
        v98 = (int64x2_t *)((char *)v92 + v11 + v11);
        v99 = *v98;
        v100 = (int64x2_t *)((char *)v98 + v11);
        v101 = vzip1q_s64(*v92, v97);
        v102 = vzip1q_s64(v99, *v100);
        v4 = vzip2q_s64(*v92, v97);
        v97.i64[0] = vdupq_laneq_s64(v99, 1).u64[0];
        v97.i64[1] = v100->i64[1];
        *v93 = v101;
        v93[1] = v102;
        v93 += 2;
        *v94 = v4;
        v94[1] = v97;
        v94 += 2;
        v92 = (int64x2_t *)((char *)v100 + v11);
        --v95;
      }
      while (v95);
      v92 = (int64x2_t *)((char *)v96 + v10);
    }
    for (j = v9; j; --j)
    {
      v4 = *v92;
      v93->i64[0] = v92->i64[0];
      v93 = (int64x2_t *)((char *)v93 + 8);
      v94->i64[0] = v4.i64[1];
      v94 = (int64x2_t *)((char *)v94 + 8);
      v92 = (int64x2_t *)((char *)v92 + v11);
    }
    v63 = -2;
    v64 = 2;
    goto LABEL_32;
  }
  if (a4)
  {
    v104 = (uint64_t *)a3[v5];
    v105 = (uint64_t *)&a2[8 * v5];
    do
    {
      v4.i64[0] = *v105;
      *v104++ = *v105;
      v105 += v107;
      --a4;
    }
    while (a4);
  }
  return *(double *)v4.i64;
}

uint64_t ___ZN4acv213Reinterleaver22BuildInverseChannelMapEv_block_invoke_2()
{
  uint64_t result;

  result = operator new[]();
  acv2::Reinterleaver::sTempScratchBuffer = result;
  return result;
}

void ___ZN4acv213Reinterleaver22BuildInverseChannelMapEv_block_invoke()
{
  acv2::Reinterleaver::sTempZeroBuffer = operator new[]();
  bzero((void *)acv2::Reinterleaver::sTempZeroBuffer, 0x2000uLL);
}

void acv2::Reinterleaver::SetChannelMap(uint64_t a1, uint64_t a2)
{
  int v3;
  char *v4;

  v3 = *(_DWORD *)(a1 + 84);
  v4 = (char *)(a1 + 192);
  if (v4 != (char *)a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_BYTE *)(a1 + 264) = memcmp(*(const void **)(a1 + 192), *(const void **)(a1 + 216), (4 * v3)) == 0;
  acv2::Reinterleaver::BuildInverseChannelMap((acv2::Reinterleaver *)a1);
}

void AUParameterListener::~AUParameterListener(AUParameterListener *this)
{
  AUParameterListener::~AUParameterListener(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  AUParameterListener *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E2907A50;
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (AUParameterListener *)*((_QWORD *)this + 12);
  if (v3 == (AUParameterListener *)((char *)this + 72))
  {
    v4 = 4;
    v3 = (AUParameterListener *)((char *)this + 72);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  AUListener::~AUListener(this);
}

BOOL TOpaqueObject<AUListener,AUListenerBase *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<AUListener>::sRTTI || a2 == (void *)MEMORY[0x1E0DDEC88];
}

uint64_t AUParameterListener::AddParameter(_QWORD *a1, uint64_t a2, _OWORD *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;

  v8 = operator new();
  v9 = v8;
  *(_QWORD *)v8 = &off_1E29059E0;
  *(_QWORD *)(v8 + 8) = a1;
  *(_QWORD *)(v8 + 16) = a2;
  v10 = a3[1];
  *(_OWORD *)(v8 + 24) = *a3;
  *(_OWORD *)(v8 + 40) = v10;
  *(_BYTE *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 60) = 0;
  if (a4)
  {
    *(_BYTE *)(v8 + 56) = 1;
    *(_DWORD *)(v8 + 60) = *a4;
  }
  *(_QWORD *)v8 = &off_1E2909760;
  *(_BYTE *)(v8 + 64) = 0;
  atomic_store(1u, (unsigned __int8 *)(v8 + 64));
  os_unfair_recursive_lock_lock_with_options();
  v12 = (uint64_t *)a1[15];
  v11 = a1[16];
  if ((unint64_t)v12 >= v11)
  {
    v14 = (_QWORD *)a1[14];
    v15 = v12 - v14;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v17 = v11 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = (char *)operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t *)&v19[8 * v15];
    *v20 = v9;
    v13 = v20 + 1;
    if (v12 != v14)
    {
      do
      {
        v21 = *--v12;
        *--v20 = v21;
      }
      while (v12 != v14);
      v12 = (uint64_t *)a1[14];
    }
    a1[14] = v20;
    a1[15] = v13;
    a1[16] = &v19[8 * v18];
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v12 = v9;
    v13 = v12 + 1;
  }
  a1[15] = v13;
  os_unfair_recursive_lock_unlock();
  return v9;
}

void sub_18EF14F00(_Unwind_Exception *a1)
{
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

uint64_t AUListener::AddEvent()
{
  return 0;
}

uint64_t AUListener::AddProperty()
{
  return 0;
}

uint64_t AUParameterListener::RemoveBinding(AUParameterListener *this, ListenerBinding *a2)
{
  ListenerBinding **v4;
  ListenerBinding **v5;
  int64_t v6;

  os_unfair_recursive_lock_lock_with_options();
  v5 = (ListenerBinding **)*((_QWORD *)this + 14);
  v4 = (ListenerBinding **)*((_QWORD *)this + 15);
  if (v5 != v4)
  {
    while (*v5 != a2)
    {
      if (++v5 == v4)
      {
        v5 = (ListenerBinding **)*((_QWORD *)this + 15);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    v6 = (char *)v4 - (char *)(v5 + 1);
    if (v4 != v5 + 1)
      memmove(v5, v5 + 1, (char *)v4 - (char *)(v5 + 1));
    *((_QWORD *)this + 15) = (char *)v5 + v6;
  }
  if (a2)
    (*(void (**)(ListenerBinding *))(*(_QWORD *)a2 + 8))(a2);
  return os_unfair_recursive_lock_unlock();
}

uint64_t AUParameterListener::NotifyParameterValueChange(AUParameterListener *this, ParameterListenerBinding *a2)
{
  uint64_t v3;
  char *v4;
  float LastValue;

  if (!*((_BYTE *)this + 64))
    return CAEventReceiver::Impl::timerShouldFireWithin(*((CAEventReceiver::Impl **)this + 2), *((double *)this + 4));
  v3 = *((_QWORD *)a2 + 2);
  v4 = (char *)a2 + 32;
  LastValue = ParameterListenerBinding::GetLastValue(a2);
  return std::function<void ()(void *,AudioUnitParameter const*,float)>::operator()(*((_QWORD *)this + 12), v3, (uint64_t)v4, LastValue);
}

uint64_t AUListener::AsEventListener(AUListener *this)
{
  return 0;
}

AudioUnitParameterValue ParameterListenerBinding::GetLastValue(ParameterListenerBinding *this)
{
  AudioUnitParameterValue outValue;

  if (*((_BYTE *)this + 56))
    return *((float *)this + 15);
  outValue = 0.0;
  AudioUnitGetParameter(*((AudioUnit *)this + 4), *((_DWORD *)this + 10), *((_DWORD *)this + 11), *((_DWORD *)this + 12), &outValue);
  return outValue;
}

uint64_t std::function<void ()(void *,AudioUnitParameter const*,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  float v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v6 = a3;
  v5 = a4;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, float *))(*(_QWORD *)a1 + 48))(a1, &v7, &v6, &v5);
}

uint64_t CAEventReceiver::Impl::timerShouldFireWithin(CAEventReceiver::Impl *this, double a2)
{
  uint64_t result;
  dispatch_time_t v5;
  dispatch_time_t v6;
  unint64_t *v7;
  unint64_t v8;
  char v9;

  result = *((_QWORD *)this + 5);
  if (!result)
    return result;
  if (dispatch_source_testcancel((dispatch_source_t)result))
    return 0;
  v5 = dispatch_time(0, (uint64_t)(a2 * 1000000000.0));
  v6 = *((_QWORD *)this + 10);
  if (v5 >= v6)
    return 1;
  v7 = (unint64_t *)((char *)this + 80);
  while (1)
  {
    v8 = __ldaxr(v7);
    if (v8 == v6)
    {
      if (!__stlxr(v5, v7))
      {
        v9 = 1;
        goto LABEL_11;
      }
    }
    else
    {
      __clrex();
    }
    v9 = 0;
LABEL_11:
    if ((v9 & 1) != 0)
      break;
    v6 = v8;
    if (v5 >= v8)
      return 1;
  }
  dispatch_source_set_timer(*((dispatch_source_t *)this + 5), v5, 0xFFFFFFFFFFFFFFFFLL, 0);
  return 1;
}

void SimpleParameterListenerBinding::~SimpleParameterListenerBinding(SimpleParameterListenerBinding *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t ParameterListenerBinding::ParameterValueChange(ParameterListenerBinding *this, AUListener *a2, void *a3, float *a4)
{
  float v5;
  char v6;
  uint64_t v7;
  BOOL v8;

  if (!a4)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v5 = *a4;
  if (!*((_BYTE *)this + 56) || *((float *)this + 15) != v5)
  {
    *((float *)this + 15) = v5;
    v6 = 1;
LABEL_6:
    v7 = 1;
    goto LABEL_8;
  }
  v7 = 0;
  v6 = 1;
LABEL_8:
  *((_BYTE *)this + 56) = v6;
  if (*((AUListener **)this + 1) == a2)
  {
    if (!a3)
      return v7;
    v8 = *((_QWORD *)this + 2) == (_QWORD)a3;
    if (!(_DWORD)v7)
      return v7;
  }
  else
  {
    v8 = 0;
    if (!(_DWORD)v7)
      return v7;
  }
  if (!v8)
  {
    (*(void (**)(ParameterListenerBinding *))(*(_QWORD *)this + 24))(this);
    (*(void (**)(_QWORD, ParameterListenerBinding *))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1), this);
  }
  return v7;
}

uint64_t SimpleParameterListenerBinding::NotifyBinding(uint64_t this)
{
  atomic_store(1u, (unsigned __int8 *)(this + 64));
  return this;
}

void ListenerBinding::~ListenerBinding(ListenerBinding *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t ListenerBinding::ParameterValueChange(ListenerBinding *this, AUListener *a2, void *a3, float *a4)
{
  return 0;
}

void AUListener::~AUListener(AUListener *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2900E78;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CAEventReceiver::~CAEventReceiver((AUListener *)((char *)this + 16));
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

void CAEventReceiver::~CAEventReceiver(CAEventReceiver *this)
{
  if ((CAEventReceiver::invalidate(this) & 1) == 0)
    std::terminate();
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t CAEventReceiver::invalidate(CAEventReceiver *this)
{
  char v1;
  __int128 v2;
  uint64_t v3;
  NSObject *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  dispatch_semaphore_t v7;
  NSObject *v8;
  unint64_t *v9;
  _opaque_pthread_t *v10;
  int v11;
  __CFRunLoop *v12;
  NSObject *v13;
  dispatch_time_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v33;
  uint64_t handler;
  uint64_t v35;
  uint64_t (*v36)();
  void *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  v2 = *(_OWORD *)this;
  v33 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (!(_QWORD)v2)
    goto LABEL_40;
  if (!*(_QWORD *)(v2 + 40))
  {
LABEL_28:
    v1 = 1;
    goto LABEL_40;
  }
  std::shared_ptr<APComponent>::shared_ptr[abi:ne180100]<APComponent,void>(&v40, *(_QWORD *)v2, *(std::__shared_weak_count **)(v2 + 8));
  v4 = *(NSObject **)(v3 + 40);
  handler = MEMORY[0x1E0C809B0];
  v35 = 1174405120;
  v36 = ___ZN15CAEventReceiver4Impl10invalidateEv_block_invoke;
  v37 = &__block_descriptor_tmp_4;
  v38 = v40;
  v39 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  dispatch_source_set_cancel_handler(v4, &handler);
  dispatch_source_cancel(*(dispatch_source_t *)(v3 + 40));
  v7 = dispatch_semaphore_create(0);
  v8 = *(NSObject **)(v3 + 96);
  *(_QWORD *)(v3 + 96) = v7;
  if (v8)
    dispatch_release(v8);
  v9 = (unint64_t *)(v3 + 88);
  do
    v10 = (_opaque_pthread_t *)__ldaxr(v9);
  while (__stlxr(0xFFFFFFFFFFFFFFFFLL, v9));
  if (v10)
  {
    if (v10 == pthread_self()
      || v10 == (_opaque_pthread_t *)1 && (v12 = *(__CFRunLoop **)(v3 + 16), v12 == CFRunLoopGetCurrent()))
    {
      v11 = 0;
      goto LABEL_18;
    }
    v13 = *(NSObject **)(v3 + 96);
    v14 = dispatch_time(0, 250000000);
    dispatch_semaphore_wait(v13, v14);
  }
  v11 = 1;
LABEL_18:
  v15 = v39;
  if (v39)
  {
    v16 = (unint64_t *)&v39->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v41;
  if (!v41)
    goto LABEL_27;
  v19 = (unint64_t *)&v41->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (v11)
      goto LABEL_28;
  }
  else
  {
LABEL_27:
    if (v11)
      goto LABEL_28;
  }
  if (*(_QWORD *)(v3 + 32))
  {
    std::shared_ptr<APComponent>::shared_ptr[abi:ne180100]<APComponent,void>(&handler, *(_QWORD *)v3, *(std::__shared_weak_count **)(v3 + 8));
    v21 = handler;
    v22 = v35;
    if (v35)
    {
      v23 = (unint64_t *)(v35 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = *(NSObject **)(v3 + 32);
    v26 = (_QWORD *)operator new();
    *v26 = v21;
    v26[1] = v22;
    dispatch_async_f(v25, v26, (dispatch_function_t)applesauce::dispatch::v1::async<CAEventReceiver::Impl::deferredSelfDestruct(void)::{lambda(void)#1}>(dispatch_queue_s *,CAEventReceiver::Impl::deferredSelfDestruct(void)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke);
    v27 = (std::__shared_weak_count *)v35;
    if (v35)
    {
      v28 = (unint64_t *)(v35 + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  v1 = 0;
LABEL_40:
  if (v33)
  {
    v30 = (unint64_t *)&v33->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return (v3 == 0) | v1 & 1u;
}

void sub_18EF15614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v10 - 48);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t applesauce::dispatch::v1::async<CAEventReceiver::Impl::deferredSelfDestruct(void)::{lambda(void)#1}>(dispatch_queue_s *,CAEventReceiver::Impl::deferredSelfDestruct(void)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  __CFRunLoop *v3;
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  std::__shared_weak_count *v14;

  v2 = *a1;
  v3 = *(__CFRunLoop **)(*a1 + 16);
  if (v3)
  {
    v4 = *(const void **)(v2 + 24);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 1174405120;
    v13[2] = ___ZZN15CAEventReceiver4Impl20deferredSelfDestructEvENKUlvE_clEv_block_invoke;
    v13[3] = &__block_descriptor_tmp_5;
    v5 = (std::__shared_weak_count *)a1[1];
    v13[4] = v2;
    v14 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    CFRunLoopPerformBlock(v3, v4, v13);
    v8 = v14;
    if (v14)
    {
      v9 = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)a1);
  return MEMORY[0x193FFE460](v11, 0x20C40A4A59CD2);
}

void sub_18EF15724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  v18 = std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v14);
  MEMORY[0x193FFE460](v18, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c50_ZTSNSt3__110shared_ptrIN15CAEventReceiver4ImplEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c50_ZTSNSt3__110shared_ptrIN15CAEventReceiver4ImplEEE(uint64_t a1)
{
  return std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](a1 + 32);
}

float AUEventListenerBase::AddParameter(uint64_t a1, uint64_t a2, __int128 *a3, _DWORD *a4)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v8 = operator new();
  *(_QWORD *)(v8 + 8) = a1;
  *(_QWORD *)(v8 + 16) = a2;
  v9 = *a3;
  v10 = a3[1];
  *(_OWORD *)(v8 + 24) = *a3;
  *(_OWORD *)(v8 + 40) = v10;
  *(_QWORD *)v8 = &off_1E2908E10;
  *(_BYTE *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 60) = 0;
  if (a4)
  {
    *(_BYTE *)(v8 + 56) = 1;
    LODWORD(v9) = *a4;
    *(_DWORD *)(v8 + 60) = *a4;
  }
  return *(float *)&v9;
}

__n128 AUEventListenerBase::AddEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __n128 result;
  __int128 v8;

  v6 = operator new();
  *(_QWORD *)v6 = &off_1E29059E0;
  *(_QWORD *)(v6 + 8) = a1;
  *(_QWORD *)(v6 + 16) = a2;
  result = *(__n128 *)a3;
  v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 40) = v8;
  return result;
}

char *AUEventListenerBase::AddProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;

  v6 = (char *)operator new();
  *((_QWORD *)v6 + 1) = a1;
  *((_QWORD *)v6 + 2) = a2;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)v6 = &off_1E2908C00;
  AudioUnitAddPropertyListener(*(AudioUnit *)(a3 + 8), *(_DWORD *)(a3 + 16), (AudioUnitPropertyListenerProc)PropertyListenerBinding::AUPropertyChanged, v6);
  return v6;
}

void sub_18EF1592C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10E1C40ED15A91ALL);
  _Unwind_Resume(a1);
}

uint64_t AUEventListenerBase::RemoveBinding(AUEventListenerBase *this, ListenerBinding *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  BOOL v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *i;
  char *v41;
  char *v42;
  char *v43;
  uint64_t *v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  _BYTE *v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v60;
  uint64_t v61;
  AUEventListenerBase *v62;
  ListenerBinding *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  char *v68;
  char *v69;

  os_unfair_recursive_lock_lock_with_options();
  v4 = *((_QWORD *)this + 15);
  v5 = *((_QWORD *)this + 12);
  v6 = *((_QWORD *)this + 13);
  v7 = (unint64_t *)(v5 + 8 * (v4 / 0x49));
  v63 = a2;
  v62 = this;
  if (v6 == v5)
  {
    v12 = 0;
    v9 = 0;
    v13 = 0;
    v14 = *((_QWORD *)this + 16);
    v15 = v4 + v14;
    v16 = (v4 + v14) / 0x49;
    v17 = (uint64_t *)(v5 + 8 * v16);
    v18 = 1;
    v6 = v5;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 8 * (v4 / 0x49));
    v9 = v8 + 56 * (v4 % 0x49);
    v10 = *(_QWORD *)(v5 + 8 * ((*((_QWORD *)this + 16) + v4) / 0x49)) + 56 * ((*((_QWORD *)this + 16) + v4) % 0x49);
    if (v9 != v10)
    {
      while (*((_QWORD *)a2 + 2) != *(_QWORD *)(v9 + 8) || *(_DWORD *)(v9 + 24) != *((_DWORD *)a2 + 6))
      {
        v9 += 56;
        if (v9 - v8 == 4088)
        {
          v11 = v7[1];
          ++v7;
          v8 = v11;
          v9 = v11;
        }
        if (v9 == v10)
          goto LABEL_20;
      }
    }
    if (v9 == v10)
    {
LABEL_20:
      v9 = *(_QWORD *)(v5 + 8 * ((*((_QWORD *)this + 16) + v4) / 0x49)) + 56 * ((*((_QWORD *)this + 16) + v4) % 0x49);
    }
    else
    {
      v19 = v9;
      v20 = v7;
LABEL_12:
      v21 = *v20;
      while (1)
      {
        v19 += 56;
        if (v19 - v21 == 4088)
        {
          v22 = v20[1];
          ++v20;
          v21 = v22;
          v19 = v22;
        }
        if (v19 == v10)
          break;
        if (*((_QWORD *)a2 + 2) != *(_QWORD *)(v19 + 8) || *(_DWORD *)(v19 + 24) != *((_DWORD *)a2 + 6))
        {
          v23 = *(_OWORD *)v19;
          v24 = *(_OWORD *)(v19 + 16);
          v25 = *(_OWORD *)(v19 + 32);
          *(_QWORD *)(v9 + 48) = *(_QWORD *)(v19 + 48);
          *(_OWORD *)(v9 + 16) = v24;
          *(_OWORD *)(v9 + 32) = v25;
          *(_OWORD *)v9 = v23;
          v9 += 56;
          if (v9 - *v7 == 4088)
          {
            v26 = v7[1];
            ++v7;
            v9 = v26;
          }
          goto LABEL_12;
        }
      }
      v4 = *((_QWORD *)this + 15);
      v5 = *((_QWORD *)this + 12);
      v6 = *((_QWORD *)this + 13);
    }
    v14 = *((_QWORD *)this + 16);
    v15 = v4 + v14;
    v16 = (v4 + v14) / 0x49;
    v17 = (uint64_t *)(v5 + 8 * v16);
    v18 = v6 == v5;
    if (v6 == v5)
      v13 = 0;
    else
      v13 = *v17 + 56 * (v15 - 73 * v16);
    v12 = v9;
  }
  if (v9 == v13)
    v27 = 0;
  else
    v27 = 73 * (((char *)v17 - (char *)v7) >> 3)
        + 0x6DB6DB6DB6DB6DB7 * ((v13 - *v17) >> 3)
        - 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *v7) >> 3);
  v28 = (uint64_t *)(v5 + 8 * (v4 / 0x49));
  if (v18)
    v29 = 0;
  else
    v29 = (char *)(*v28 + 56 * (v4 % 0x49));
  v64 = v27;
  if ((char *)v9 == v29)
    v30 = 0;
  else
    v30 = 73 * (((char *)v7 - (char *)v28) >> 3)
        + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *v7) >> 3)
        - 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v29[-*v28] >> 3);
  v67 = (uint64_t *)(v5 + 8 * (v4 / 0x49));
  v68 = v29;
  v65 = v30;
  std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message*,AUEventListenerBase::Message&,AUEventListenerBase::Message**,long,73l>::operator+=[abi:ne180100](&v67, v30);
  if (v64 >= 1)
  {
    v31 = v67;
    v32 = v68;
    if (v65 <= (unint64_t)(v14 - v64) >> 1)
    {
      std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message*,AUEventListenerBase::Message&,AUEventListenerBase::Message**,long,73l>::operator+=[abi:ne180100](&v67, v64);
      v35 = v67;
      v36 = v68;
      if (v28 == v31)
      {
        v43 = v29;
        v42 = v32;
      }
      else
      {
        v39 = (char *)*v31;
        v38 = v31 - 1;
        v37 = v39;
        for (i = v32; ; i = v41 + 4088)
        {
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUEventListenerBase::Message *,std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message *,AUEventListenerBase::Message&,AUEventListenerBase::Message **,long,73l>,0>(&v67, v37, i, v35, v36);
          v35 = (uint64_t *)v68;
          v36 = v69;
          if (v38 == v28)
            break;
          v41 = (char *)*v38--;
          v37 = v41;
        }
        v42 = (char *)(*v28 + 4088);
        v43 = v29;
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUEventListenerBase::Message *,std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message *,AUEventListenerBase::Message&,AUEventListenerBase::Message **,long,73l>,0>(&v67, v43, v42, v35, v36);
      v57 = *((_QWORD *)v62 + 16) - v64;
      *((_QWORD *)v62 + 15) += v64;
      *((_QWORD *)v62 + 16) = v57;
      while (std::deque<AUEventListenerBase::Message>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v62 + 88))
        ;
      v4 = *((_QWORD *)v62 + 15);
      v5 = *((_QWORD *)v62 + 12);
      v6 = *((_QWORD *)v62 + 13);
    }
    else
    {
      std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message*,AUEventListenerBase::Message&,AUEventListenerBase::Message**,long,73l>::operator+=[abi:ne180100](&v67, v64);
      v33 = v68;
      if (v18)
        v34 = 0;
      else
        v34 = *v17 + 56 * (v15 - 73 * v16);
      if (v17 == v67)
      {
        v54 = (_BYTE *)v34;
        v55 = v31;
        v56 = v32;
      }
      else
      {
        v44 = v67 + 1;
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUEventListenerBase::Message *,std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message *,AUEventListenerBase::Message&,AUEventListenerBase::Message **,long,73l>,0>(&v67, v68, (_BYTE *)(*v67 + 4088), v31, v32);
        v45 = (uint64_t *)v68;
        v46 = v69;
        if (v44 != v17)
        {
          v47 = *(char **)v68;
          v66 = v17;
          do
          {
            v48 = 0;
            v49 = *v44;
            while (1)
            {
              v50 = 0x6DB6DB6DB6DB6DB7 * ((v47 - v46 + 4088) >> 3);
              if (0x6DB6DB6DB6DB6DB7 * ((4088 - 56 * v48) >> 3) >= v50)
                v51 = v50;
              else
                v51 = 0x6DB6DB6DB6DB6DB7 * ((4088 - 56 * v48) >> 3);
              if (v51)
                memmove(v46, (const void *)(v49 + 56 * v48), 56 * v51);
              v48 += v51;
              if (v48 == 73)
                break;
              v52 = (char *)v45[1];
              ++v45;
              v47 = v52;
              v46 = v52;
            }
            v46 += 56 * v51;
            v47 = (char *)*v45;
            if ((char *)(*v45 + 4088) == v46)
            {
              v53 = (char *)v45[1];
              ++v45;
              v47 = v53;
              v46 = v53;
            }
            v17 = v66;
            ++v44;
          }
          while (v44 != v66);
        }
        v33 = (_BYTE *)*v17;
        v54 = (_BYTE *)v34;
        v55 = v45;
        v56 = v46;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUEventListenerBase::Message *,std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message *,AUEventListenerBase::Message&,AUEventListenerBase::Message **,long,73l>,0>(&v67, v33, v54, v55, v56);
      v60 = *((_QWORD *)v62 + 16) - v64;
      *((_QWORD *)v62 + 16) = v60;
      v6 = *((_QWORD *)v62 + 13);
      while (1)
      {
        v5 = *((_QWORD *)v62 + 12);
        v61 = 73 * ((v6 - v5) >> 3) - 1;
        if (v6 == v5)
          v61 = 0;
        v4 = *((_QWORD *)v62 + 15);
        if (v61 - (v60 + v4) < 0x92)
          break;
        operator delete(*(void **)(v6 - 8));
        v6 = *((_QWORD *)v62 + 13) - 8;
        *((_QWORD *)v62 + 13) = v6;
        v60 = *((_QWORD *)v62 + 16);
      }
    }
  }
  if (v6 == v5)
    v58 = 0;
  else
    v58 = (char *)(*(_QWORD *)(v5 + 8 * (v4 / 0x49)) + 56 * (v4 % 0x49));
  v67 = (uint64_t *)(v5 + 8 * (v4 / 0x49));
  v68 = v58;
  std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message*,AUEventListenerBase::Message&,AUEventListenerBase::Message**,long,73l>::operator+=[abi:ne180100](&v67, v65);
  if (v63)
    (*(void (**)(ListenerBinding *))(*(_QWORD *)v63 + 8))(v63);
  return os_unfair_recursive_lock_unlock();
}

uint64_t AUEventListenerBase::NotifyParameterValueChange(AUEventListenerBase *this, ParameterListenerBinding *a2)
{
  void *v3;
  const AudioUnitEvent *v4;
  float LastValue;

  v3 = (void *)*((_QWORD *)a2 + 2);
  v4 = (const AudioUnitEvent *)((char *)a2 + 24);
  LastValue = ParameterListenerBinding::GetLastValue(a2);
  return AUEventListenerBase::SendMessage(this, v3, v4, LastValue);
}

uint64_t AUEventListenerBase::NotifyEvent(AUEventListenerBase *this, ListenerBinding *a2)
{
  return AUEventListenerBase::SendMessage(this, *((void **)a2 + 2), (const AudioUnitEvent *)((char *)a2 + 24), 0.0);
}

uint64_t AUEventListenerBase::SendMessage(AUEventListenerBase *this, void *a2, const AudioUnitEvent *a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  AudioUnit mAudioUnit;
  AudioUnitParameterID mParameterID;
  AudioUnitScope mScope;
  AudioUnitElement mElement;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  _BOOL4 v26;
  int v27;
  unint64_t v28;
  _BOOL4 v29;
  int v30;
  AudioUnitParameterID v31;
  BOOL v33;
  _BOOL4 v34;
  AudioUnitScope v35;
  _BOOL4 v36;
  AudioUnitElement v37;
  AudioUnitParameterID v38;
  AudioUnitScope v39;
  _BOOL4 v40;
  AudioUnitElement v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  __int128 v71;
  void *v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  void *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  int64_t v112;
  void *v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  char *v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  unint64_t v137;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;

  os_unfair_recursive_lock_lock_with_options();
  v8 = mach_absolute_time();
  v9 = *(_QWORD *)(*((_QWORD *)this + 10) + 64);
  if (a3->mEventType)
    v10 = 1;
  else
    v10 = v9 == 0;
  if (v10)
  {
    v11 = *((_QWORD *)this + 15);
    goto LABEL_61;
  }
  v11 = *((_QWORD *)this + 15);
  v12 = *((_QWORD *)this + 12);
  if (*((_QWORD *)this + 13) == v12)
    goto LABEL_61;
  v13 = *(_QWORD *)(v12 + 8 * (v11 / 0x49));
  v14 = v13 + 56 * (v11 % 0x49);
  v15 = *(_QWORD *)(v12 + 8 * ((*((_QWORD *)this + 16) + v11) / 0x49)) + 56 * ((*((_QWORD *)this + 16) + v11) % 0x49);
  if (v14 == v15)
    goto LABEL_61;
  v16 = 0;
  v17 = v12 + 8 * (v11 / 0x49);
  mAudioUnit = a3->mArgument.mParameter.mAudioUnit;
  mParameterID = a3->mArgument.mParameter.mParameterID;
  mScope = a3->mArgument.mParameter.mScope;
  mElement = a3->mArgument.mParameter.mElement;
  do
  {
    if (*(void **)(v14 + 8) != a2)
    {
LABEL_11:
      v22 = v16;
      goto LABEL_12;
    }
    v24 = *(_DWORD *)(v14 + 24);
    if ((v24 - 1) < 2)
    {
      v25 = *(_QWORD *)(v14 + 32);
      v33 = v25 >= (unint64_t)mAudioUnit;
      v26 = v25 > (unint64_t)mAudioUnit;
      if (v33)
        v27 = v26;
      else
        v27 = -1;
      if (!v27)
      {
        v31 = *(_DWORD *)(v14 + 40);
        if (v31 == -1 || mParameterID == -1)
        {
LABEL_36:
          v22 = 0;
          goto LABEL_12;
        }
        v33 = v31 >= mParameterID;
        v34 = v31 > mParameterID;
        if (v33)
          v27 = v34;
        else
          v27 = -1;
        if (!v27)
        {
          v35 = *(_DWORD *)(v14 + 44);
          v33 = v35 >= mScope;
          v36 = v35 > mScope;
          v27 = v33 ? v36 : -1;
          if (!v27)
          {
            v37 = *(_DWORD *)(v14 + 48);
            v27 = v37 > mElement;
            if (v37 < mElement)
              goto LABEL_11;
          }
        }
      }
      v22 = v16;
      if (v27)
        goto LABEL_12;
      goto LABEL_36;
    }
    if (v24 || v8 - *(_QWORD *)v14 >= v9)
      goto LABEL_11;
    v28 = *(_QWORD *)(v14 + 32);
    v33 = v28 >= (unint64_t)mAudioUnit;
    v29 = v28 > (unint64_t)mAudioUnit;
    if (v33)
      v30 = v29;
    else
      v30 = -1;
    if (!v30)
    {
      v38 = *(_DWORD *)(v14 + 40);
      v22 = v14;
      if (v38 == -1)
        goto LABEL_12;
      v22 = v14;
      if (mParameterID == -1)
        goto LABEL_12;
      if (v38 < mParameterID)
        v30 = -1;
      else
        v30 = v38 > mParameterID;
      if (!v30)
      {
        v39 = *(_DWORD *)(v14 + 44);
        v33 = v39 >= mScope;
        v40 = v39 > mScope;
        v30 = v33 ? v40 : -1;
        if (!v30)
        {
          v41 = *(_DWORD *)(v14 + 48);
          v30 = v41 > mElement;
          if (v41 < mElement)
            goto LABEL_11;
        }
      }
    }
    v22 = v16;
    if (!v30)
      v22 = v14;
LABEL_12:
    v14 += 56;
    if (v14 - v13 == 4088)
    {
      v23 = *(_QWORD *)(v17 + 8);
      v17 += 8;
      v13 = v23;
      v14 = v23;
    }
    v16 = v22;
  }
  while (v14 != v15);
  if (!v22)
  {
LABEL_61:
    v42 = (char *)*((_QWORD *)this + 13);
    v43 = (char *)*((_QWORD *)this + 12);
    v44 = v42 - v43;
    v159 = *(_OWORD *)&a3->mEventType;
    v160 = *(_OWORD *)&a3->mArgument.mProperty.mPropertyID;
    if (v42 == v43)
      v45 = 0;
    else
      v45 = 73 * ((v42 - v43) >> 3) - 1;
    v46 = *((_QWORD *)this + 16) + v11;
    if (v45 != v46)
      goto LABEL_146;
    v33 = v11 >= 0x49;
    v47 = v11 - 73;
    if (v33)
    {
      *((_QWORD *)this + 15) = v47;
      v50 = *(_QWORD *)v43;
      v48 = v43 + 8;
      v49 = v50;
      *((_QWORD *)this + 12) = v48;
      if (*((char **)this + 14) == v42)
      {
        v51 = *((_QWORD *)this + 11);
        v52 = (uint64_t)&v48[-v51];
        if ((unint64_t)v48 <= v51)
        {
          v78 = (uint64_t)&v42[-v51];
          v10 = v78 == 0;
          v79 = v78 >> 2;
          if (v10)
            v80 = 1;
          else
            v80 = v79;
          v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v80);
          v83 = &v81[8 * (v80 >> 2)];
          v84 = (uint64_t *)*((_QWORD *)this + 12);
          v42 = v83;
          v85 = *((_QWORD *)this + 13) - (_QWORD)v84;
          if (v85)
          {
            v42 = &v83[v85 & 0xFFFFFFFFFFFFFFF8];
            v86 = 8 * (v85 >> 3);
            v87 = &v81[8 * (v80 >> 2)];
            do
            {
              v88 = *v84++;
              *(_QWORD *)v87 = v88;
              v87 += 8;
              v86 -= 8;
            }
            while (v86);
          }
          v89 = (void *)*((_QWORD *)this + 11);
          *((_QWORD *)this + 11) = v81;
          *((_QWORD *)this + 12) = v83;
          *((_QWORD *)this + 13) = v42;
          *((_QWORD *)this + 14) = &v81[8 * v82];
          if (v89)
          {
            operator delete(v89);
            v42 = (char *)*((_QWORD *)this + 13);
          }
        }
        else
        {
          v53 = v52 >> 3;
          v54 = v52 >> 3 < -1;
          v55 = (v52 >> 3) + 2;
          if (v54)
            v56 = v55;
          else
            v56 = v53 + 1;
          v57 = -(v56 >> 1);
          v58 = v56 >> 1;
          v59 = &v48[-8 * v58];
          v60 = v42 - v48;
          if (v42 == v48)
          {
            v61 = v42;
          }
          else
          {
            memmove(&v48[-8 * v58], v48, v42 - v48);
            v61 = (char *)*((_QWORD *)this + 12);
          }
          v42 = &v59[v60];
          *((_QWORD *)this + 12) = &v61[8 * v57];
          *((_QWORD *)this + 13) = &v59[v60];
        }
      }
      *(_QWORD *)v42 = v49;
    }
    else
    {
      v62 = v44 >> 3;
      v63 = (char *)*((_QWORD *)this + 14);
      v64 = (char *)*((_QWORD *)this + 11);
      v65 = v63 - v64;
      if (v44 >> 3 >= (unint64_t)((v63 - v64) >> 3))
      {
        if (v63 == v64)
          v66 = 1;
        else
          v66 = v65 >> 2;
        v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v66);
        v69 = v68;
        v151 = v8;
        v70 = &v67[8 * v62];
        *(_QWORD *)&v71 = v67;
        *((_QWORD *)&v71 + 1) = v70;
        v155 = v71;
        v72 = operator new(0xFF8uLL);
        *(_QWORD *)&v73 = v70;
        *((_QWORD *)&v73 + 1) = &v67[8 * v69];
        if (v62 == v69)
        {
          v74 = 8 * v62;
          *(_QWORD *)&v75 = v155;
          if (v44 < 1)
          {
            v113 = v72;
            v114 = v74 >> 2;
            if (v42 == v43)
              v115 = 1;
            else
              v115 = v114;
            v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v115);
            v70 = &v116[8 * (v115 >> 2)];
            *(_QWORD *)&v75 = v116;
            *((_QWORD *)&v75 + 1) = v70;
            *(_QWORD *)&v73 = v70;
            *((_QWORD *)&v73 + 1) = &v116[8 * v117];
            if (v67)
            {
              v152 = v73;
              v156 = v75;
              operator delete(v67);
              v73 = v152;
              v75 = v156;
            }
            v72 = v113;
          }
          else
          {
            v76 = v74 >> 3;
            if (v76 >= -1)
              v77 = v76 + 1;
            else
              v77 = v76 + 2;
            v70 -= 8 * (v77 >> 1);
            *(_QWORD *)&v73 = v70;
            *((_QWORD *)&v75 + 1) = v70;
          }
        }
        else
        {
          v75 = v155;
        }
        *(_QWORD *)v70 = v72;
        *(_QWORD *)&v73 = v73 + 8;
        v118 = *((_QWORD *)this + 13);
        v8 = v151;
        while (v118 != *((_QWORD *)this + 12))
        {
          v119 = (_QWORD *)*((_QWORD *)&v75 + 1);
          if (*((_QWORD *)&v75 + 1) == (_QWORD)v75)
          {
            v121 = (_BYTE *)v73;
            if ((unint64_t)v73 >= *((_QWORD *)&v73 + 1))
            {
              if (*((_QWORD *)&v73 + 1) == *((_QWORD *)&v75 + 1))
                v126 = 1;
              else
                v126 = (uint64_t)(*((_QWORD *)&v73 + 1) - *((_QWORD *)&v75 + 1)) >> 2;
              v127 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v126);
              v120 = &v127[(2 * v126 + 6) & 0xFFFFFFFFFFFFFFF8];
              v129 = v120;
              v130 = v121 - (_BYTE *)v119;
              if (v121 != (_BYTE *)v119)
              {
                v129 = &v120[v130 & 0xFFFFFFFFFFFFFFF8];
                v131 = 8 * (v130 >> 3);
                v132 = v120;
                v133 = v119;
                do
                {
                  v134 = *v133++;
                  *(_QWORD *)v132 = v134;
                  v132 += 8;
                  v131 -= 8;
                }
                while (v131);
              }
              *(_QWORD *)&v75 = v127;
              *((_QWORD *)&v75 + 1) = v120;
              *(_QWORD *)&v73 = v129;
              *((_QWORD *)&v73 + 1) = &v127[8 * v128];
              if (v119)
              {
                v153 = v73;
                v158 = v75;
                operator delete(v119);
                v73 = v153;
                v75 = v158;
              }
            }
            else
            {
              v122 = (uint64_t)(*((_QWORD *)&v73 + 1) - v73) >> 3;
              if (v122 >= -1)
                v123 = v122 + 1;
              else
                v123 = v122 + 2;
              v124 = v123 >> 1;
              v125 = v73 + 8 * (v123 >> 1);
              v120 = (char *)(v125 - (v73 - *((_QWORD *)&v75 + 1)));
              if ((_QWORD)v73 == *((_QWORD *)&v75 + 1))
              {
                v121 = (_BYTE *)*((_QWORD *)&v75 + 1);
              }
              else
              {
                v154 = *((_QWORD *)&v73 + 1);
                v157 = v75;
                memmove((void *)(v125 - (v73 - *((_QWORD *)&v75 + 1))), *((const void **)&v75 + 1), v73 - *((_QWORD *)&v75 + 1));
                *((_QWORD *)&v73 + 1) = v154;
                *(_QWORD *)&v75 = v157;
              }
              *((_QWORD *)&v75 + 1) = v120;
              *(_QWORD *)&v73 = &v121[8 * v124];
            }
          }
          else
          {
            v120 = (char *)*((_QWORD *)&v75 + 1);
          }
          v135 = *(_QWORD *)(v118 - 8);
          v118 -= 8;
          *((_QWORD *)v120 - 1) = v135;
          *((_QWORD *)&v75 + 1) -= 8;
        }
        v136 = (void *)*((_QWORD *)this + 11);
        *(_OWORD *)((char *)this + 88) = v75;
        *(_OWORD *)((char *)this + 104) = v73;
        if (v136)
          operator delete(v136);
        goto LABEL_145;
      }
      if (v63 == v42)
      {
        v90 = operator new(0xFF8uLL);
        if (v64 == v43)
        {
          if (v42 == v43)
            v91 = 1;
          else
            v91 = v65 >> 2;
          v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v91);
          v43 = &v92[(2 * v91 + 6) & 0xFFFFFFFFFFFFFFF8];
          v94 = (uint64_t *)*((_QWORD *)this + 12);
          v95 = v43;
          v96 = *((_QWORD *)this + 13) - (_QWORD)v94;
          if (v96)
          {
            v95 = &v43[v96 & 0xFFFFFFFFFFFFFFF8];
            v97 = 8 * (v96 >> 3);
            v98 = v43;
            do
            {
              v99 = *v94++;
              *(_QWORD *)v98 = v99;
              v98 += 8;
              v97 -= 8;
            }
            while (v97);
          }
          v100 = (void *)*((_QWORD *)this + 11);
          *((_QWORD *)this + 11) = v92;
          *((_QWORD *)this + 12) = v43;
          *((_QWORD *)this + 13) = v95;
          *((_QWORD *)this + 14) = &v92[8 * v93];
          if (v100)
          {
            operator delete(v100);
            v43 = (char *)*((_QWORD *)this + 12);
          }
        }
        *((_QWORD *)v43 - 1) = v90;
        v101 = (char *)*((_QWORD *)this + 12);
        v102 = (char *)*((_QWORD *)this + 13);
        *((_QWORD *)this + 12) = v101 - 8;
        v103 = *((_QWORD *)v101 - 1);
        *((_QWORD *)this + 12) = v101;
        if (v102 == *((char **)this + 14))
        {
          v104 = *((_QWORD *)this + 11);
          v105 = (uint64_t)&v101[-v104];
          if ((unint64_t)v101 <= v104)
          {
            v139 = (uint64_t)&v102[-v104];
            v10 = v139 == 0;
            v140 = v139 >> 2;
            if (v10)
              v141 = 1;
            else
              v141 = v140;
            v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v141);
            v144 = &v142[8 * (v141 >> 2)];
            v145 = (uint64_t *)*((_QWORD *)this + 12);
            v102 = v144;
            v146 = *((_QWORD *)this + 13) - (_QWORD)v145;
            if (v146)
            {
              v102 = &v144[v146 & 0xFFFFFFFFFFFFFFF8];
              v147 = 8 * (v146 >> 3);
              v148 = &v142[8 * (v141 >> 2)];
              do
              {
                v149 = *v145++;
                *(_QWORD *)v148 = v149;
                v148 += 8;
                v147 -= 8;
              }
              while (v147);
            }
            v150 = (void *)*((_QWORD *)this + 11);
            *((_QWORD *)this + 11) = v142;
            *((_QWORD *)this + 12) = v144;
            *((_QWORD *)this + 13) = v102;
            *((_QWORD *)this + 14) = &v142[8 * v143];
            if (v150)
            {
              operator delete(v150);
              v102 = (char *)*((_QWORD *)this + 13);
            }
          }
          else
          {
            v106 = v105 >> 3;
            v54 = v105 >> 3 < -1;
            v107 = (v105 >> 3) + 2;
            if (v54)
              v108 = v107;
            else
              v108 = v106 + 1;
            v109 = -(v108 >> 1);
            v110 = v108 >> 1;
            v111 = &v101[-8 * v110];
            v112 = v102 - v101;
            if (v102 != v101)
            {
              memmove(&v101[-8 * v110], v101, v102 - v101);
              v101 = (char *)*((_QWORD *)this + 12);
            }
            v102 = &v111[v112];
            *((_QWORD *)this + 12) = &v101[8 * v109];
            *((_QWORD *)this + 13) = &v111[v112];
          }
        }
        *(_QWORD *)v102 = v103;
      }
      else
      {
        *(_QWORD *)v42 = operator new(0xFF8uLL);
      }
    }
    *((_QWORD *)this + 13) += 8;
LABEL_145:
    v43 = (char *)*((_QWORD *)this + 12);
    v46 = *((_QWORD *)this + 16) + *((_QWORD *)this + 15);
LABEL_146:
    v137 = *(_QWORD *)&v43[8 * (v46 / 0x49)] + 56 * (v46 % 0x49);
    *(float *)(v137 + 16) = a4;
    *(_OWORD *)(v137 + 24) = v159;
    *(_QWORD *)v137 = v8;
    *(_QWORD *)(v137 + 8) = a2;
    *(_DWORD *)(v137 + 20) = 0;
    *(_OWORD *)(v137 + 40) = v160;
    ++*((_QWORD *)this + 16);
    CAEventReceiver::Impl::timerShouldFireWithin(*(CAEventReceiver::Impl **)(*((_QWORD *)this + 10) + 16), *(double *)(*((_QWORD *)this + 10) + 32));
    return os_unfair_recursive_lock_unlock();
  }
  *(_QWORD *)v22 = v8;
  *(float *)(v22 + 16) = a4;
  return os_unfair_recursive_lock_unlock();
}

void sub_18EF16764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13)
{
  void *v13;

  operator delete(v13);
  if ((_QWORD)a13)
    operator delete((void *)a13);
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

uint64_t **std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message*,AUEventListenerBase::Message&,AUEventListenerBase::Message**,long,73l>::operator+=[abi:ne180100](uint64_t **result, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;

  if (a2)
  {
    v2 = *result;
    v3 = ((uint64_t)result[1] - **result) / 56 + a2;
    if ((uint64_t)v3 < 1)
    {
      v6 = 72 - v3;
      v7 = &v2[-(v6 / 0x49)];
      *result = v7;
      v4 = *v7;
      v5 = 72 - v6 % 0x49;
    }
    else
    {
      *result = &v2[v3 / 0x49];
      v4 = v2[v3 / 0x49];
      v5 = v3 % 0x49;
    }
    result[1] = (uint64_t *)(v4 + 56 * v5);
  }
  return result;
}

BOOL std::deque<AUEventListenerBase::Message>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 >= 0x92)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 73;
  }
  return v1 > 0x91;
}

_QWORD *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUEventListenerBase::Message *,std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message *,AUEventListenerBase::Message&,AUEventListenerBase::Message **,long,73l>,0>(_QWORD *result, _BYTE *__src, _BYTE *a3, _QWORD *a4, char *__dst)
{
  _QWORD *v6;
  _BYTE *v7;
  _QWORD *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = a4;
  v7 = __src;
  v8 = result;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0x6DB6DB6DB6DB6DB7 * ((v10 - __dst + 4088) >> 3);
      if (0x6DB6DB6DB6DB6DB7 * ((v9 - v7) >> 3) >= v11)
        v12 = v11;
      else
        v12 = 0x6DB6DB6DB6DB6DB7 * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 56 * v12);
      v7 += 56 * v12;
      if (v7 == v9)
        break;
      v13 = (char *)v6[1];
      ++v6;
      v10 = v13;
      __dst = v13;
    }
    __dst += 56 * v12;
    if ((char *)(*v6 + 4088) == __dst)
    {
      v14 = (char *)v6[1];
      ++v6;
      __dst = v14;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

_QWORD *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUEventListenerBase::Message *,std::__deque_iterator<AUEventListenerBase::Message,AUEventListenerBase::Message *,AUEventListenerBase::Message&,AUEventListenerBase::Message **,long,73l>,0>(_QWORD *result, char *a2, char *a3, _QWORD *a4, char *a5)
{
  _QWORD *v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  v6 = a4;
  v8 = result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    v11 = a3;
    while (1)
    {
      v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a5[-v10] >> 3);
      if (0x6DB6DB6DB6DB6DB7 * ((v11 - a2) >> 3) < v12)
        v12 = 0x6DB6DB6DB6DB6DB7 * ((v11 - a2) >> 3);
      v11 -= 56 * v12;
      a5 -= 56 * v12;
      if (v12)
        result = memmove(a5, v11, 56 * v12);
      if (v11 == a2)
        break;
      v13 = *--v6;
      v10 = v13;
      a5 = (char *)(v13 + 4088);
    }
    if ((char *)(*v6 + 4088) == a5)
    {
      v14 = (char *)v6[1];
      ++v6;
      a5 = v14;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

uint64_t PropertyListenerBinding::AUPropertyChanged(PropertyListenerBinding *this, OpaqueAudioComponentInstance *a2, OpaqueAudioComponentInstance *a3, unsigned int a4, AudioUnitElement a5)
{
  AudioUnitEvent v6;

  v6.mEventType = kAudioUnitEvent_PropertyChange;
  v6.mArgument.mParameter.mAudioUnit = a2;
  v6.mArgument.mParameter.mElement = a5;
  *(_QWORD *)&v6.mArgument.mProperty.mPropertyID = __PAIR64__(a4, a3);
  return AUEventListenerBase::SendMessage(*((AUEventListenerBase **)this + 1), *((void **)this + 2), &v6, 0.0);
}

void PropertyListenerBinding::~PropertyListenerBinding(PropertyListenerBinding *this)
{
  PropertyListenerBinding::~PropertyListenerBinding(this);
  JUMPOUT(0x193FFE460);
}

{
  *(_QWORD *)this = &off_1E2908C00;
  AudioUnitRemovePropertyListenerWithUserData(*((AudioUnit *)this + 4), *((_DWORD *)this + 10), (AudioUnitPropertyListenerProc)PropertyListenerBinding::AUPropertyChanged, this);
}

void ParameterListenerBinding::~ParameterListenerBinding(ParameterListenerBinding *this)
{
  JUMPOUT(0x193FFE460);
}

void AUEventListener::~AUEventListener(AUEventListener *this)
{
  AUEventListener::~AUEventListener(this);
  JUMPOUT(0x193FFE460);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E2904E18;
  v2 = (char *)this + 136;
  v3 = (char *)*((_QWORD *)this + 20);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  *(_QWORD *)this = off_1E29079E0;
  std::deque<AUEventListenerBase::Message>::~deque[abi:ne180100]((uint64_t)this + 88);
  AUListener::~AUListener(this);
}

uint64_t AUEventListener::MessagesAreAvailable(AUEventListener *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;

  v2 = (char *)this + 88;
  while (1)
  {
    os_unfair_recursive_lock_lock_with_options();
    v3 = *((_QWORD *)this + 16);
    if (v3)
    {
      v4 = *((_QWORD *)this + 15);
      v5 = *(_QWORD *)(*((_QWORD *)this + 12) + 8 * (v4 / 0x49)) + 56 * (v4 % 0x49);
      v12 = *(_OWORD *)v5;
      v13 = *(_OWORD *)(v5 + 16);
      v14 = *(_OWORD *)(v5 + 32);
      v15 = *(_QWORD *)(v5 + 48);
      *((_QWORD *)this + 15) = v4 + 1;
      *((_QWORD *)this + 16) = v3 - 1;
      std::deque<AUEventListenerBase::Message>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v2);
      v8 = v12;
      v9[0] = v13;
      v9[1] = v14;
      v10 = v15;
      LOBYTE(v3) = 1;
    }
    else
    {
      LOBYTE(v8) = 0;
    }
    v11 = v3;
    result = os_unfair_recursive_lock_unlock();
    if (!v11)
      break;
    *(_QWORD *)&v12 = *((_QWORD *)&v8 + 1);
    v17 = v8;
    v18 = (char *)v9 + 8;
    v16 = v9[0];
    v7 = *((_QWORD *)this + 20);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, __int128 *, char **, uint64_t *, int *))(*(_QWORD *)v7 + 48))(v7, &v12, &v18, &v17, &v16);
  }
  return result;
}

uint64_t std::deque<AUEventListenerBase::Message>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 36;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 73;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *CAEventReceiver::createTimer(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *global_queue;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[5];
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, a2);
  if (*(_QWORD *)(a1 + 72))
    std::terminate();
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((_QWORD *)(a1 + 48), (uint64_t)v11);
  if (!*(_QWORD *)(a1 + 40))
  {
    v3 = *(NSObject **)(a1 + 32);
    if (!v3)
    {
      global_queue = dispatch_get_global_queue(25, 0);
      v3 = dispatch_queue_create_with_target_V2("", 0, global_queue);
      v5 = *(NSObject **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v3;
      if (v5)
      {
        dispatch_release(v5);
        v3 = *(NSObject **)(a1 + 32);
      }
    }
    v6 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v3);
    v7 = *(NSObject **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v6;
    if (v7)
    {
      dispatch_release(v7);
      v6 = *(NSObject **)(a1 + 40);
    }
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = ___ZN15CAEventReceiver4Impl11createTimerENSt3__18functionIFvvEEE_block_invoke;
    v10[3] = &__block_descriptor_tmp_2046;
    v10[4] = a1;
    dispatch_source_set_event_handler(v6, v10);
    dispatch_resume(*(dispatch_object_t *)(a1 + 40));
  }
  result = v12;
  if (v12 == v11)
  {
    v9 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_18EF16F34(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void ___ZN15CAEventReceiver4Impl11createTimerENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  __CFRunLoop *v2;
  unint64_t *v3;
  unint64_t v4;
  const void *v5;
  pthread_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(__CFRunLoop **)(v1 + 16);
  v3 = (unint64_t *)(v1 + 88);
  if (v2)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(1uLL, v3));
    if (v4 != -1)
    {
      v5 = *(const void **)(v1 + 24);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = ___ZN15CAEventReceiver4Impl10timerFiredEv_block_invoke;
      block[3] = &__block_descriptor_tmp_2_2047;
      block[4] = v1;
      CFRunLoopPerformBlock(v2, v5, block);
    }
  }
  else
  {
    v6 = pthread_self();
    do
      v7 = __ldaxr(v3);
    while (__stlxr((unint64_t)v6, v3));
    if (v7 != -1)
    {
      atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)(v1 + 80));
      v8 = *(_QWORD *)(v1 + 72);
      if (!v8)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
      v9 = (unsigned int *)(v1 + 112);
      v10 = atomic_load((unsigned int *)(v1 + 112));
      if (v10 >= 1)
      {
        do
          v11 = __ldaxr(v9);
        while (__stlxr(v11 - 1, v9));
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 104));
      }
      do
        v12 = __ldaxr(v3);
      while (__stlxr(0, v3));
      if (v12 == -1)
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 96));
    }
  }
}

unint64_t ___ZN15CAEventReceiver4Impl10timerFiredEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  unsigned int v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (unint64_t *)(v1 + 88);
  result = (unint64_t)pthread_self();
  do
    v4 = __ldaxr(v2);
  while (__stlxr(result, v2));
  if (v4 != -1)
  {
    atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)(v1 + 80));
    v5 = *(_QWORD *)(v1 + 72);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
    v6 = (unsigned int *)(v1 + 112);
    v7 = atomic_load((unsigned int *)(v1 + 112));
    if (v7 >= 1)
    {
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 - 1, v6));
      result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 104));
    }
    do
      v9 = __ldaxr(v2);
    while (__stlxr(0, v2));
    if (v9 == -1)
      return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 96));
  }
  return result;
}

void std::__function::__func<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0,std::allocator<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0,std::allocator<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E29159A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0,std::allocator<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E29159A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0,std::allocator<AUParameterListener::AUParameterListener(std::function<void ()(void *,AudioUnitParameter const*,float)>,CAEventReceiver,double)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v1;
  ParameterListenerBinding **v2;
  ParameterListenerBinding **v3;
  ParameterListenerBinding *v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  uint64_t v7;
  float LastValue;

  v1 = *(uint64_t **)(a1 + 8);
  os_unfair_recursive_lock_lock_with_options();
  v2 = (ParameterListenerBinding **)v1[14];
  v3 = (ParameterListenerBinding **)v1[15];
  while (v2 != v3)
  {
    v4 = *v2;
    v5 = (unsigned __int8 *)*v2 + 64;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(0, v5));
    if ((v6 & 1) != 0)
    {
      v7 = *((_QWORD *)v4 + 2);
      LastValue = ParameterListenerBinding::GetLastValue(v4);
      std::function<void ()(void *,AudioUnitParameter const*,float)>::operator()(v1[12], v7, (uint64_t)v4 + 32, LastValue);
    }
    ++v2;
  }
  return os_unfair_recursive_lock_unlock();
}

void sub_18EF1727C(_Unwind_Exception *a1)
{
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

uint64_t AUParameterListener::AUParameterListener(uint64_t a1, uint64_t a2, __int128 *a3, double a4)
{
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v13 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)a1);
  *(_QWORD *)a1 = off_1E2900E78;
  *(_OWORD *)(a1 + 16) = v13;
  v13 = 0uLL;
  *(double *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  CAEventReceiver::~CAEventReceiver((CAEventReceiver *)&v13);
  *(_QWORD *)a1 = &off_1E2907A50;
  v7 = a4 == 0.0;
  *(_BYTE *)(a1 + 64) = v7;
  v8 = (_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
  {
    v8 = (_QWORD *)(a1 + 96);
    goto LABEL_5;
  }
  if (v9 != a2)
  {
    *(_QWORD *)(a1 + 96) = v9;
LABEL_5:
    *v8 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 24))(*v8, a1 + 72);
  v7 = *(unsigned __int8 *)(a1 + 64);
LABEL_7:
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  if (!v7)
  {
    v14[0] = &off_1E29159A8;
    v14[1] = a1;
    v15 = v14;
    CAEventReceiver::createTimer(*(_QWORD *)(a1 + 16), (uint64_t)v14);
    v10 = v15;
    if (v15 == v14)
    {
      v11 = 4;
      v10 = v14;
      goto LABEL_12;
    }
    if (v15)
    {
      v11 = 5;
LABEL_12:
      (*(void (**)(void))(*v10 + 8 * v11))();
    }
  }
  return a1;
}

void sub_18EF173F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0,std::allocator<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0,std::allocator<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2915960;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0,std::allocator<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2915960;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0,std::allocator<AUEventListenerBase::AUEventListenerBase(CAEventReceiver,double,double)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
}

uint64_t ListenerMap::forEachBinding(uint64_t result, unint64_t a2, uint64_t (**a3)(_QWORD, unint64_t, _QWORD))
{
  _QWORD *v4;
  uint64_t (**v5)(_QWORD, _QWORD, _QWORD);
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (*(_QWORD *)result + 224 != a2)
  {
    v4 = (_QWORD *)result;
    v5 = a3 + 1;
    do
    {
      v6 = atomic_load((unint64_t *)(a2 + 64));
      v7 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      if (*(_BYTE *)(a2 + 50) != 2)
      {
        v8 = atomic_load((unint64_t *)(a2 + 64));
        if ((v8 & 1) == 0)
        {
          result = (*a3)(v5, a2, *(_QWORD *)(a2 + 40));
          if ((result & 1) != 0)
            break;
        }
      }
      a2 = v7;
    }
    while (*v4 + 224 != v7);
  }
  return result;
}

BOOL ListenerMap::forEachBindingForEvent(_OWORD *a1, uint64_t a2)
{
  unsigned __int8 v4;
  __int128 v5;
  __int128 *ge;
  int v7;
  _QWORD v9[3];
  uint64_t (*v10[3])(_QWORD, unint64_t, _QWORD);
  _OWORD v11[2];
  int v12;
  __int128 *v13;
  unsigned __int128 *v14;
  unsigned __int8 v15;

  v15 = 0;
  v13 = &ListenerMap::instance(void)::global;
  v14 = (unsigned __int128 *)&xmmword_1EE165A70;
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal((unsigned __int128 *)&xmmword_1EE165A70);
  {
    XAudioUnitEvent::sentinel(void)::value = 0u;
    *(_OWORD *)algn_1EE1684A8 = 0u;
  }
  if (XAudioUnitEvent::cmp((uint64_t)a1, (uint64_t)&XAudioUnitEvent::sentinel(void)::value))
  {
    v5 = a1[1];
    v11[0] = *a1;
    v11[1] = v5;
    v12 = 0;
    ge = (__int128 *)caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::iteration::find_ge((uint64_t *)&v13, (uint64_t)v11);
  }
  else
  {
    ge = &xmmword_1EE165A20;
  }
  v9[0] = a1;
  v9[1] = a2;
  v9[2] = &v15;
  v10[0] = (uint64_t (*)(_QWORD, unint64_t, _QWORD))caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::forEachBindingForEvent(XAudioUnitEvent const&,caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>)::$_0>;
  v10[1] = (uint64_t (*)(_QWORD, unint64_t, _QWORD))v9;
  ListenerMap::forEachBinding((uint64_t)&v13, (unint64_t)ge, v10);
  v7 = v15;
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v14);
  return v7 != 0;
}

void sub_18EF17690(_Unwind_Exception *a1)
{
  uint64_t v1;

  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(*(unsigned __int128 **)(v1 - 32));
  _Unwind_Resume(a1);
}

uint64_t XAudioUnitEvent::cmp(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    v2 = 0xFFFFFFFFLL;
  else
    v2 = *(_DWORD *)a1 > *(_DWORD *)a2;
  if (!(_DWORD)v2)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a2 + 8);
    v5 = v2 >= v4;
    LODWORD(v2) = v2 > v4;
    if (v5)
      v2 = v2;
    else
      v2 = 0xFFFFFFFFLL;
    if (*(_DWORD *)a1 > 2u)
    {
      if ((_DWORD)v2)
        return v2;
      v6 = *(_DWORD *)(a1 + 16);
      v7 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      if ((_DWORD)v2)
        return v2;
      v6 = *(_DWORD *)(a1 + 16);
      if (v6 == -1)
        return 0;
      v7 = *(_DWORD *)(a2 + 16);
      if (v7 == -1)
        return 0;
    }
    v5 = v6 >= v7;
    LODWORD(v2) = v6 > v7;
    if (v5)
      v2 = v2;
    else
      v2 = 0xFFFFFFFFLL;
    if (!(_DWORD)v2)
    {
      v8 = *(_DWORD *)(a1 + 20);
      v9 = *(_DWORD *)(a2 + 20);
      v5 = v8 >= v9;
      LODWORD(v2) = v8 > v9;
      if (v5)
        v2 = v2;
      else
        v2 = 0xFFFFFFFFLL;
      if (!(_DWORD)v2)
      {
        v10 = *(_DWORD *)(a1 + 24);
        v11 = *(_DWORD *)(a2 + 24);
        v5 = v10 >= v11;
        LODWORD(v2) = v10 > v11;
        if (v5)
          return v2;
        else
          return 0xFFFFFFFFLL;
      }
    }
  }
  return v2;
}

uint64_t caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::iteration::find_ge(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD v10[2];
  uint64_t v11;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v5;
  v11 = *(_QWORD *)(a2 + 32);
  v6 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_le>(v4, (uint64_t)v10, 0);
  v8 = v7;
  if (XAudioUnitEvent::cmp(v6, a2) || *(_DWORD *)(v6 + 32) != *(_DWORD *)(a2 + 32))
  {
    v6 = v8;
    if (*(_BYTE *)(v8 + 50) == 2)
      return *a1 + 224;
  }
  return v6;
}

uint64_t caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::forEachBindingForEvent(XAudioUnitEvent const&,caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>)::$_0>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t result;

  v5 = *a1;
  if (XAudioUnitEvent::cmp(a2, **a1))
    return 1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v5[1])(v5[1] + 8, a2, a3);
  if ((_DWORD)result)
  {
    result = 1;
    *(_BYTE *)v5[2] = 1;
  }
  return result;
}

unsigned __int128 *caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(unsigned __int128 *result)
{
  unsigned __int128 *v1;
  int v2;
  unint64_t v3;
  unsigned __int128 v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int128 v10;
  int v11;
  unint64_t v12;
  uint64_t v13;

  v1 = result;
  do
  {
    v4 = __ldaxp(result);
    v2 = DWORD2(v4);
    v3 = v4;
  }
  while (__stlxp(v4, result));
  v5 = HIDWORD(*((_QWORD *)&v4 + 1));
  while (1)
  {
    v6 = v2 - 1;
    v7 = v2 - 1;
    v8 = v2 <= 1 ? 0 : v3;
    v9 = v2 | (unint64_t)(v5 << 32);
    do
    {
      while (1)
      {
        v10 = __ldaxp(result);
        v2 = DWORD2(v10);
        v11 = (_QWORD)v10 != v3;
        if (*((_QWORD *)&v10 + 1) != v9)
          ++v11;
        if (!v11)
          break;
        if (!__stlxp(v10, result))
          goto LABEL_14;
      }
    }
    while (__stlxp(__PAIR128__(v7, v8), result));
LABEL_14:
    if (!((unint64_t)v10 ^ v3 | *((_QWORD *)&v10 + 1) ^ v9))
      break;
    v5 = HIDWORD(*((_QWORD *)&v10 + 1));
    v3 = v10;
  }
  if (!v6 && v3)
  {
    do
    {
      v12 = v3;
      v3 = atomic_load((unint64_t *)(v3 + 56));
      v13 = *((_QWORD *)v1 + 4);
      if (*(_BYTE *)(v13 + 32))
      {
        if (!*(_BYTE *)(v12 + 50))
          (*(void (**)(_QWORD *, unint64_t))v13)((_QWORD *)v1 + 5, v12);
      }
      result = (unsigned __int128 *)caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::free_node((caulk::alloc::base_allocator *)v1, v12);
    }
    while (v3);
  }
  return result;
}

caulk::alloc::base_allocator *caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::free_node(caulk::alloc::base_allocator *result, unint64_t a2)
{
  caulk::alloc::base_allocator *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int128 *v8;
  unsigned __int128 v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int128 v12;
  int v13;
  unsigned __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  v3 = result;
  v4 = *(unsigned __int8 *)(a2 + 48);
  if (*(_BYTE *)(a2 + 49))
  {
    result = *(caulk::alloc::base_allocator **)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    if (result)
      result = (caulk::alloc::base_allocator *)MEMORY[0x193FFE460](result, 0x1020C40D5A9D86FLL);
  }
  v5 = 0;
  v6 = *((_QWORD *)v3 + 2);
  while (*(_QWORD *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * v5] < *(_QWORD *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * v4 - 8])
  {
    if (++v5 == 10)
      caulk::alloc::base_allocator::bad_dealloc(result);
  }
  v7 = v6 + 64;
  v8 = (unsigned __int128 *)(v6 + 64 + 32 * v5);
  do
    v9 = __ldaxp(v8);
  while (__stlxp(v9, v8));
  atomic_store(v9, (unint64_t *)a2);
  do
  {
    while (1)
    {
      v12 = __ldaxp(v8);
      v11 = *((_QWORD *)&v12 + 1);
      v10 = v12;
      v13 = (_QWORD)v12 != (_QWORD)v9;
      if (*((_QWORD *)&v12 + 1) != *((_QWORD *)&v9 + 1))
        ++v13;
      if (!v13)
        break;
      if (!__stlxp(v12, v8))
        goto LABEL_17;
    }
  }
  while (__stlxp(__PAIR128__(*((_QWORD *)&v9 + 1) + 1, a2), v8));
LABEL_17:
  if ((_QWORD)v12 != (_QWORD)v9 || *((_QWORD *)&v12 + 1) != *((_QWORD *)&v9 + 1))
  {
    do
    {
      atomic_store(v10, (unint64_t *)a2);
      do
      {
        while (1)
        {
          v15 = __ldaxp(v8);
          v16 = (_QWORD)v15 != v10;
          if (*((_QWORD *)&v15 + 1) != v11)
            ++v16;
          if (!v16)
            break;
          if (!__stlxp(v15, v8))
            goto LABEL_28;
        }
      }
      while (__stlxp(__PAIR128__(v11 + 1, a2), v8));
LABEL_28:
      v17 = *((_QWORD *)&v15 + 1) ^ v11;
      v18 = v15 ^ v10;
      v11 = v15 >> 64;
      v10 = v15;
    }
    while (v18 | v17);
  }
  v19 = (unint64_t *)(v7 + 32 * v5 + 16);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  return result;
}

void caulk::alloc::base_allocator::bad_dealloc(caulk::alloc::base_allocator *this)
{
  std::runtime_error *exception;
  const char *v2;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  caulk::alloc::alloc_error::alloc_error(exception, v2);
}

void sub_18EF17AB0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *caulk::alloc::alloc_error::alloc_error(std::runtime_error *this, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(this, "deallocate() called for unowned block");
  result->__vftable = (std::runtime_error_vtbl *)&off_1E290B4F0;
  return result;
}

void caulk::alloc::alloc_error::~alloc_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x193FFE460);
}

unint64_t caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_le>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v6 = -1;
  v7 = 80;
  do
  {
    do
    {
      ++v6;
      v8 = atomic_load((unint64_t *)(a1 + v7));
      v7 += 16;
    }
    while (v6 < a3);
  }
  while (*(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 50) != 2);
  v9 = a1;
  if (v6 > a3)
  {
    v9 = a1;
    do
      v9 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_le &>(a1, v6--, v9, a2);
    while (v6 > a3);
  }
  return caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_le &>(a1, a3, v9, a2);
}

unint64_t caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_le &>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  int v11;
  unsigned int v12;
  char v13;
  unint64_t v14;
  int v15;
  _OWORD v17[2];
  uint64_t v18;

  v5 = a3;
  v8 = atomic_load((unint64_t *)(a3 + 16 * a2 + 64));
  while (1)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v10 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 16);
    v17[0] = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    v17[1] = v10;
    v18 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 32);
    v11 = XAudioUnitEvent::cmp((uint64_t)v17, a4);
    if (v11 || (v12 = *(_DWORD *)(a4 + 32), v11 = v18 > v12, v18 >= v12))
    {
      if (v11 > 0)
        break;
    }
    v13 = atomic_load((unint64_t *)(v9 + 64));
    v14 = v9;
    if ((v13 & 1) != 0)
    {
      v14 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, v5, v9);
      if (!v15)
        caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, v14, v9);
    }
    v8 = atomic_load((unint64_t *)(v14 + 16 * a2 + 64));
    v5 = v14;
  }
  return v5;
}

unint64_t caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  int v19;
  char v20;
  int v21;
  _OWORD v23[2];
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;

  v8 = a4 | 2;
  do
  {
    v9 = (unint64_t *)(a3 + 16 * a2 + 64);
    v10 = atomic_load(v9);
    if (v10 == v8)
      break;
    v11 = __ldaxr(v9);
    if (v11 == a4)
    {
      if (!__stlxr(v8, v9))
        return a3;
    }
    else
    {
      __clrex();
    }
    if (v11 == v8)
      break;
    v12 = atomic_load(v9);
    if ((v12 & 1) != 0)
    {
      do
      {
        a3 = atomic_load((unint64_t *)(a3 + 16 * a2 + 72));
        v13 = atomic_load((unint64_t *)(a3 + 16 * a2 + 64));
      }
      while ((v13 & 1) != 0);
    }
    v14 = *(_OWORD *)(a4 + 16);
    v23[0] = *(_OWORD *)a4;
    v23[1] = v14;
    v24 = *(_QWORD *)(a4 + 32);
    v15 = a3;
    while (1)
    {
      a3 = v15;
      v16 = atomic_load((unint64_t *)(v15 + 16 * a2 + 64));
      v17 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      v18 = *(_OWORD *)((v16 & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v25[0] = *(_OWORD *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
      v25[1] = v18;
      v26 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFFCLL) + 32);
      v19 = XAudioUnitEvent::cmp((uint64_t)v25, (uint64_t)v23);
      if (!v19)
        break;
      if ((v19 & 0x80000000) == 0)
        goto LABEL_18;
LABEL_15:
      v20 = atomic_load((unint64_t *)(v17 + 64));
      v15 = v17;
      if ((v20 & 1) != 0)
      {
        v15 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, a3, v17);
        if (!v21)
          caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, v15, v17);
      }
    }
    if (v26 < v24)
      goto LABEL_15;
LABEL_18:
    ;
  }
  while (v17 == a4);
  return a3;
}

uint64_t caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int128 *v19;
  unsigned __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int128 v23;
  int v24;
  unsigned __int128 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v7 = result;
  v8 = a4 + 16 * a2;
  v9 = (unint64_t *)(v8 + 64);
  atomic_store(a3, (unint64_t *)(v8 + 72));
  while (1)
  {
    v10 = atomic_load(v9);
    if ((v10 & 1) != 0)
      break;
    v11 = atomic_load(v9);
    v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = __ldaxr(v9);
    if (v13 == v12)
    {
      __stlxr(v12 | 1, v9);
      if ((v13 & 2) != 0)
LABEL_7:
        result = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(v7, a2, a4, v13 & 0xFFFFFFFFFFFFFFFCLL);
    }
    else
    {
      __clrex();
      if ((v13 & 2) != 0)
        goto LABEL_7;
    }
  }
  v14 = atomic_load(v9);
  v15 = (unint64_t *)(a3 + 16 * a2 + 64);
  v16 = __ldaxr(v15);
  if (v16 == (a4 | 2))
  {
    if (!__stlxr(v14 & 0xFFFFFFFFFFFFFFFCLL, v15))
    {
      v17 = (unsigned __int8 *)(a4 + 51);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (v18 == 1)
      {
        v19 = (unsigned __int128 *)(v7 + 304);
        do
          v20 = __ldaxp(v19);
        while (__stlxp(v20, v19));
        atomic_store(v20, (unint64_t *)(a4 + 56));
        do
        {
          while (1)
          {
            v23 = __ldaxp(v19);
            v22 = *((_QWORD *)&v23 + 1);
            v21 = v23;
            v24 = (_QWORD)v23 != (_QWORD)v20;
            if (*((_QWORD *)&v23 + 1) != *((_QWORD *)&v20 + 1))
              ++v24;
            if (!v24)
              break;
            if (!__stlxp(v23, v19))
              goto LABEL_22;
          }
        }
        while (__stlxp(__PAIR128__(DWORD2(v20), a4), v19));
LABEL_22:
        if ((_QWORD)v23 != (_QWORD)v20 || *((_QWORD *)&v23 + 1) != *((_QWORD *)&v20 + 1))
        {
          do
          {
            atomic_store(v21, (unint64_t *)(a4 + 56));
            do
            {
              while (1)
              {
                v26 = __ldaxp(v19);
                v27 = (_QWORD)v26 != v21;
                if (*((_QWORD *)&v26 + 1) != v22)
                  ++v27;
                if (!v27)
                  break;
                if (!__stlxp(v26, v19))
                  goto LABEL_33;
              }
            }
            while (__stlxp(__PAIR128__(v22, a4), v19));
LABEL_33:
            v28 = *((_QWORD *)&v26 + 1) ^ v22;
            v29 = v26 ^ v21;
            v22 = *((_QWORD *)&v26 + 1);
            v21 = v26;
          }
          while (v29 | v28);
        }
      }
    }
  }
  else
  {
    __clrex();
  }
  return result;
}

unsigned __int128 *caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::remove(uint64_t a1, uint64_t a2)
{
  unsigned __int128 *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v4 = (unsigned __int128 *)(a1 + 304);
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal((unsigned __int128 *)(a1 + 304));
  v5 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  v19 = v5;
  v20 = *(_QWORD *)(a2 + 32);
  v6 = -1;
  v7 = 80;
  do
  {
    v8 = atomic_load((unint64_t *)(a1 + v7));
    ++v6;
    v7 += 16;
  }
  while (*(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 50) != 2);
  v9 = a1;
  if (v6)
  {
    v9 = a1;
    do
      v9 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(a1, v6--, v9, (uint64_t)&v18);
    while (v6);
  }
  v10 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(a1, 0, v9, (uint64_t)&v18);
  v12 = v11;
  if (!XAudioUnitEvent::cmp(v11, a2) && *(_DWORD *)(v12 + 32) == *(_DWORD *)(a2 + 32))
  {
    v13 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, 0, v10, v12);
    v15 = v14;
    if (!(_DWORD)v14)
      caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, 0, v13, v12);
    if ((v15 & 0xFF00000000) != 0 && v12)
    {
      v16 = *(_OWORD *)(a2 + 16);
      v18 = *(_OWORD *)a2;
      v19 = v16;
      v20 = *(_QWORD *)(a2 + 32);
      caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_le>(a1, (uint64_t)&v18, 0);
    }
  }
  return caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v4);
}

unint64_t caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  int v11;
  char v12;
  unint64_t v13;
  int v14;
  _OWORD v16[2];
  uint64_t v17;

  v5 = a3;
  v8 = atomic_load((unint64_t *)(a3 + 16 * a2 + 64));
  while (1)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v10 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 16);
    v16[0] = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    v16[1] = v10;
    v17 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 32);
    v11 = XAudioUnitEvent::cmp((uint64_t)v16, a4);
    if (!v11)
      break;
    if ((v11 & 0x80000000) == 0)
      return v5;
LABEL_6:
    v12 = atomic_load((unint64_t *)(v9 + 64));
    v13 = v9;
    if ((v12 & 1) != 0)
    {
      v13 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, v5, v9);
      if (!v14)
        caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, v13, v9);
    }
    v8 = atomic_load((unint64_t *)(v13 + 16 * a2 + 64));
    v5 = v13;
  }
  if (v17 < *(_DWORD *)(a4 + 32))
    goto LABEL_6;
  return v5;
}

uint64_t caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::RemoveListener(AUListener *)::$_0>(uint64_t a1, uint64_t a2, caulk::pooled_semaphore_mutex *this)
{
  _QWORD **v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  caulk::pooled_semaphore_mutex *v10[2];
  _OWORD v11[2];
  uint64_t v12;

  v5 = *(_QWORD ***)a1;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  caulk::pooled_semaphore_mutex::_lock(this);
  v7 = (_QWORD *)*((_QWORD *)this + 1);
  v10[0] = this;
  v10[1] = (caulk::pooled_semaphore_mutex *)((char *)this + 8);
  if (v7 && **v5 == v7[1])
  {
    v8 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v8;
    v12 = *(_QWORD *)(a2 + 32);
    caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::remove(v6, (uint64_t)v11);
    *((_QWORD *)this + 1) = 0;
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(v10);
  return 0;
}

caulk::pooled_semaphore_mutex **caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(caulk::pooled_semaphore_mutex **a1)
{
  caulk::pooled_semaphore_mutex *v2;

  v2 = *a1;
  if (v2)
    caulk::pooled_semaphore_mutex::_unlock(v2);
  return a1;
}

BOOL caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::CanInsertEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>(_QWORD ***a1, int a2, caulk::pooled_semaphore_mutex *this)
{
  _QWORD **v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;
  caulk::pooled_semaphore_mutex *v9[2];

  v4 = *a1;
  caulk::pooled_semaphore_mutex::_lock(this);
  v9[0] = this;
  v5 = *((_QWORD *)this + 1);
  v9[1] = (caulk::pooled_semaphore_mutex *)((char *)this + 8);
  if (v5 && *(_QWORD *)(v5 + 8) == **v4)
  {
    v8 = *v4[1];
    if (v8)
      v6 = *(_QWORD *)(v5 + 16) == v8;
    else
      v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(v9);
  return v6;
}

unsigned __int128 *ListenerMap::InsertEvent(__int128 *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t i;
  unsigned int v7;
  caulk::pooled_semaphore_mutex *v8;
  __int128 *v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  int value;
  uint64_t v15;
  uint64_t v16;
  unsigned __int128 *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  int v34;
  char v35;
  int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  unsigned __int128 *result;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v41 = *a1;
  v42 = a1[1];
  do
    v7 = __ldaxr((unsigned int *)&dword_1EE165AC0);
  while (__stlxr(v7 + 1, (unsigned int *)&dword_1EE165AC0));
  v8 = (caulk::pooled_semaphore_mutex *)operator new();
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex(v8);
  *((_QWORD *)v8 + 1) = a2;
  v43 = v41;
  v44 = v42;
  LODWORD(v45) = v7;
  v9 = ListenerMap::instance(void)::global;
  v10 = XAudioUnitEvent::cmp((uint64_t)&v43, (uint64_t)ListenerMap::instance(void)::global);
  if (!v10)
  {
    v10 = v7 > qword_1EE165960;
    if (v7 < qword_1EE165960)
      goto LABEL_24;
  }
  if (v10 < 1)
    goto LABEL_24;
  v11 = XAudioUnitEvent::cmp((uint64_t)&v43, (uint64_t)&xmmword_1EE165A20);
  if (v11)
  {
    if (v11 < 0)
      goto LABEL_8;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v7 >= qword_1EE165A40)
    goto LABEL_24;
LABEL_8:
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal((unsigned __int128 *)&xmmword_1EE165A70);
  v48 = v43;
  v49 = v44;
  v50 = v45;
  v9 = (__int128 *)caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_le>((uint64_t)ListenerMap::instance(void)::global, (uint64_t)&v48, 0);
  v2 = v12;
  if (!XAudioUnitEvent::cmp((uint64_t)v9, (uint64_t)&v43) && *((_DWORD *)v9 + 8) == v7)
    goto LABEL_56;
  v13 = 0;
  value = 0;
  for (i = 1; i != 9; ++i)
  {
    if (i == 1)
    {
      caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::random_engine();
      value = caulk::multi_simple_random<unsigned int,4ul,std::uniform_int_distribution<unsigned int>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::next_value((uint64_t)&caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::random_engine(void)::engine);
      v13 = 3;
    }
    if ((v13 & ~value) != 0)
      break;
    v13 *= 4;
  }
  v15 = 0;
  v3 = qword_1EE165A80;
  while (1)
  {
    v4 = *(_QWORD *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * v15];
    if (v4 >= *(_QWORD *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * i - 8])
      break;
    if (++v15 == 10)
    {
      v16 = 0;
      goto LABEL_26;
    }
  }
  v17 = (unsigned __int128 *)(qword_1EE165A80 + 64 + 32 * v15);
  v18 = caulk::concurrent::stack<caulk::alloc::free_block,caulk::concurrent::intrusive_single_link_node<caulk::alloc::free_block>>::pop(v17);
  if (v18)
  {
    v16 = (uint64_t)v18;
    v19 = (unint64_t *)(v17 + 1);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    goto LABEL_26;
  }
LABEL_25:
  v16 = caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::allocate(v3, v4);
LABEL_26:
  *(_BYTE *)(v16 + 48) = i;
  *(_WORD *)(v16 + 49) = 1;
  *(_BYTE *)(v16 + 51) = i;
  v21 = v44;
  *(_OWORD *)v16 = v43;
  *(_OWORD *)(v16 + 16) = v21;
  *(_QWORD *)(v16 + 32) = v45;
  *(_QWORD *)(v16 + 40) = v8;
  *(_QWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 72) = 0;
  *(_QWORD *)(v16 + 56) = 0;
  if ((_BYTE)i)
  {
    v22 = (unint64_t *)(v16 + 72);
    v23 = i;
    do
    {
      atomic_store(0, v22 - 1);
      atomic_store(0, v22);
      v22 += 2;
      --v23;
    }
    while (v23);
  }
  v24 = 0;
  __dmb(0xBu);
  while (1)
  {
    while (XAudioUnitEvent::cmp((uint64_t)v9, v16) || *((_DWORD *)v9 + 8) != *(_DWORD *)(v16 + 32))
    {
      v25 = (unint64_t *)&v9[v24 + 4];
      v26 = atomic_load(v25);
      if ((v26 & 2) != 0)
      {
        caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged((uint64_t)ListenerMap::instance(void)::global, v24, (unint64_t)v9, v26 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        atomic_store(v2, (unint64_t *)(v16 + 16 * v24 + 64));
        v27 = __ldaxr(v25);
        if (v27 == v2)
        {
          if (!__stlxr(v16, v25))
          {
            v37 = v16;
            goto LABEL_50;
          }
        }
        else
        {
          __clrex();
        }
        if ((v27 & 2) != 0)
          caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged((uint64_t)ListenerMap::instance(void)::global, v24, (unint64_t)v9, v27 & 0xFFFFFFFFFFFFFFFCLL);
        v28 = atomic_load(v25);
        if ((v28 & 1) != 0)
        {
          do
          {
            v9 = (__int128 *)atomic_load((unint64_t *)&v9[v24 + 4] + 1);
            v29 = atomic_load((unint64_t *)&v9[v24 + 4]);
          }
          while ((v29 & 1) != 0);
        }
      }
      v30 = *(_OWORD *)(v16 + 16);
      v46[0] = *(_OWORD *)v16;
      v46[1] = v30;
      v47 = *(_QWORD *)(v16 + 32);
      v31 = (unint64_t)v9;
      while (1)
      {
        v9 = (__int128 *)v31;
        v32 = atomic_load((unint64_t *)(v31 + 16 * v24 + 64));
        v2 = v32 & 0xFFFFFFFFFFFFFFFCLL;
        v33 = *(_OWORD *)((v32 & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v48 = *(_OWORD *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
        v49 = v33;
        v50 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFCLL) + 32);
        v34 = XAudioUnitEvent::cmp((uint64_t)&v48, (uint64_t)v46);
        if (v34 || (v34 = v50 > v47, v50 >= v47))
        {
          if (v34 > 0)
            break;
        }
        v35 = atomic_load((unint64_t *)(v2 + 64));
        v31 = v2;
        if ((v35 & 1) != 0)
        {
          v31 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::try_flag_node((uint64_t)ListenerMap::instance(void)::global, v24, (unint64_t)v9, v2);
          if (!v36)
            caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::help_flagged((uint64_t)ListenerMap::instance(void)::global, v24, v31, v2);
        }
      }
    }
    v37 = 0;
LABEL_50:
    if (!(v37 | v24))
      break;
    v38 = atomic_load((unint64_t *)(v16 + 64));
    if ((v38 & 1) != 0)
      goto LABEL_55;
    if (++v24 == i)
      goto LABEL_55;
    v48 = v43;
    v49 = v44;
    v50 = v45;
    v9 = (__int128 *)caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::key_le>((uint64_t)ListenerMap::instance(void)::global, (uint64_t)&v48, v24);
    v2 = v39;
  }
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::free_node((caulk::alloc::base_allocator *)&xmmword_1EE165A70, v16);
LABEL_55:
  v8 = 0;
LABEL_56:
  result = caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal((unsigned __int128 *)&xmmword_1EE165A70);
  if (v8)
    JUMPOUT(0x193FFE460);
  return result;
}

void sub_18EF187A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x1020C40D5A9D86FLL);
  _Unwind_Resume(a1);
}

unint64_t *caulk::concurrent::stack<caulk::alloc::free_block,caulk::concurrent::intrusive_single_link_node<caulk::alloc::free_block>>::pop(unsigned __int128 *a1)
{
  unint64_t *v1;
  uint64_t v2;
  unsigned __int128 v3;
  unint64_t v4;
  unsigned __int128 v5;
  int v6;

  do
  {
    v3 = __ldaxp(a1);
    v2 = *((_QWORD *)&v3 + 1);
    v1 = (unint64_t *)v3;
  }
  while (__stlxp(v3, a1));
  if ((_QWORD)v3)
  {
    do
    {
      v4 = atomic_load(v1);
      do
      {
        while (1)
        {
          v5 = __ldaxp(a1);
          v6 = (_QWORD)v5 != (_QWORD)v1;
          if (*((_QWORD *)&v5 + 1) != v2)
            ++v6;
          if (!v6)
            break;
          if (!__stlxp(v5, a1))
            goto LABEL_10;
        }
      }
      while (__stlxp(__PAIR128__(v2 + 1, v4), a1));
LABEL_10:
      if ((unint64_t *)v5 == v1 && *((_QWORD *)&v5 + 1) == v2)
        break;
      v2 = v5 >> 64;
      v1 = (unint64_t *)v5;
    }
    while ((_QWORD)v5);
  }
  return v1;
}

uint64_t caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::allocate(uint64_t a1, unint64_t a2)
{
  unsigned int *v3;
  unsigned int v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  BOOL v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  unsigned int v25;
  int v26;

  v3 = (unsigned int *)(a1 + 40);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 2049, v3));
  v5 = *(unint64_t **)(a1 + 24);
  if (!v5)
    v5 = *(unint64_t **)(a1 + 16);
  v26 = 0;
  v6 = (unint64_t *)(a1 + 16);
  v7 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v7)
    v8 = a2 > 0x3FF0;
  else
    v8 = 1;
  while (!v5)
  {
LABEL_28:
    if (os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 32)))
    {
      v17 = (unint64_t *)caulk::alloc::details::caching_page_allocator_base::allocate(*(caulk::alloc::details::caching_page_allocator_base **)(a1 + 8));
      v5 = v17;
      *v17 = 0;
      v17[1] = v18;
      v17[2] = 0;
      __dmb(0xBu);
      v19 = *v6;
      atomic_store(*v6, v17);
      v20 = __ldaxr(v6);
      if (v20 == v19)
      {
        if (!__stlxr((unint64_t)v17, v6))
        {
          v21 = 1;
          goto LABEL_35;
        }
      }
      else
      {
        __clrex();
      }
      v21 = 0;
LABEL_35:
      if ((v21 & 1) == 0)
      {
        while (1)
        {
          atomic_store(v20, v17);
          v22 = __ldaxr(v6);
          if (v22 != v20)
            break;
          if (__stlxr((unint64_t)v17, v6))
            goto LABEL_40;
          v23 = 1;
LABEL_41:
          v20 = v22;
          if ((v23 & 1) != 0)
            goto LABEL_42;
        }
        __clrex();
LABEL_40:
        v23 = 0;
        goto LABEL_41;
      }
LABEL_42:
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
    }
    else
    {
      caulk::concurrent::details::spinloop::spin((uint64_t)&v26);
    }
  }
  v9 = v5;
  while (1)
  {
    if (!v8)
    {
      v10 = v9[2];
      v11 = ~((_BYTE)v9 + 39 + (_BYTE)v10) & 7;
      v12 = v10 + v7 + v11;
      if (v12 <= 0x3FE0)
        break;
    }
LABEL_12:
    v9 = (unint64_t *)atomic_load(v9);
    if (!v9)
      v9 = (unint64_t *)*v6;
    if (v5 == v9)
      goto LABEL_28;
  }
  v13 = v9 + 2;
  v14 = __ldaxr(v9 + 2);
  if (v14 == v10)
  {
    if (!__stlxr(v12, v13))
    {
      v15 = 1;
      goto LABEL_21;
    }
  }
  else
  {
    __clrex();
  }
  v15 = 0;
LABEL_21:
  if ((v15 & 1) == 0)
  {
    while (1)
    {
      v10 = v14;
      v11 = ~((_BYTE)v9 + 39 + (_BYTE)v14) & 7;
      v16 = v14 + v7 + v11;
      if (v16 > 0x3FE0)
        goto LABEL_12;
      v14 = __ldaxr(v13);
      if (v14 == v10)
      {
        if (!__stlxr(v16, v13))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v9 + v10 + v11 + 32;
  if ((result & 7) != 0)
  {
    _os_assert_log();
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = v9;
    do
      v25 = __ldaxr(v3);
    while (__stlxr(v25 - 1, v3));
  }
  return result;
}

void sub_18EF18A58(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  unsigned int *v2;
  unsigned int v4;

  os_unfair_lock_unlock(v1);
  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::details::spinloop::spin(uint64_t this)
{
  int v1;
  _DWORD *v2;

  v1 = *(_DWORD *)this + 1;
  *(_DWORD *)this = v1;
  if (v1 == 100)
  {
    v2 = (_DWORD *)this;
    this = sched_yield();
    *v2 = 0;
  }
  return this;
}

void caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::random_engine()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      caulk::multi_simple_random<unsigned int,4ul,std::uniform_int_distribution<unsigned int>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::multi_simple_random((uint64_t)&caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::random_engine(void)::engine);
    }
  }
}

void sub_18EF18B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t caulk::multi_simple_random<unsigned int,4ul,std::uniform_int_distribution<unsigned int>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::next_value(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 v3;
  uint64_t result;

  v1 = 0;
  while (1)
  {
    v2 = (unsigned __int8 *)(a1 + 2512 * v1 + 2504);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(1u, v2));
    if ((v3 & 1) == 0)
      break;
    if (v1 == 3)
      v1 = 0;
    else
      ++v1;
  }
  result = std::uniform_int_distribution<unsigned int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)(a1 + 2512 * v1), (_DWORD *)(a1 + 10048));
  atomic_store(0, v2);
  return result;
}

uint64_t std::uniform_int_distribution<unsigned int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, _DWORD *a2)
{
  uint64_t result;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v12;

  result = a2[1];
  v4 = result - *a2;
  if ((_DWORD)result != *a2)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      return std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
    }
    else
    {
      v7 = __clz(v5);
      v8 = 31;
      if (((v5 << v7) & 0x7FFFFFFF) != 0)
        v8 = 32;
      v9 = v8 - v7;
      v10 = v9 >> 5;
      if ((v9 & 0x1F) != 0)
        ++v10;
      if (v10 <= v9)
        v11 = 0xFFFFFFFF >> -(v9 / v10);
      else
        v11 = 0;
      do
        v12 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this) & v11;
      while (v12 >= v5);
      return *a2 + v12;
    }
  }
  return result;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t caulk::multi_simple_random<unsigned int,4ul,std::uniform_int_distribution<unsigned int>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>::multi_simple_random(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t j;

  v2 = 0;
  v3 = a1;
  do
  {
    v4 = a1 + 2512 * v2;
    v5 = 5489;
    *(_DWORD *)v4 = 5489;
    for (i = 1; i != 624; ++i)
    {
      v5 = i + 1812433253 * (v5 ^ (v5 >> 30));
      *(_DWORD *)(v3 + 4 * i) = v5;
    }
    *(_QWORD *)(v4 + 2496) = 0;
    *(_BYTE *)(a1 + 2512 * v2++ + 2504) = 0;
    v3 += 2512;
  }
  while (v2 != 4);
  v7 = 0;
  *(_QWORD *)(a1 + 10048) = 0xFFFFFFFF00000000;
  v8 = a1;
  do
  {
    v9 = mach_absolute_time();
    *(_DWORD *)v8 = v9;
    for (j = 1; j != 624; ++j)
    {
      v9 = j + 1812433253 * (v9 ^ (v9 >> 30));
      *(_DWORD *)(v8 + 4 * j) = v9;
    }
    *(_QWORD *)(v8 + 2496) = 0;
    ++v7;
    v8 += 2512;
  }
  while (v7 != 4);
  return a1;
}

uint64_t caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::RemoveEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>(uint64_t a1, uint64_t a2, caulk::pooled_semaphore_mutex *this)
{
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  caulk::pooled_semaphore_mutex *v11;
  _QWORD *v12;
  _OWORD v13[2];
  uint64_t v14;

  v5 = *(_QWORD ***)a1;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  caulk::pooled_semaphore_mutex::_lock(this);
  v11 = this;
  v7 = *((_QWORD *)this + 1);
  v12 = (_QWORD *)((char *)this + 8);
  if (v7)
  {
    if (*(_QWORD *)(v7 + 8) == **v5 && ((v8 = *v5[1]) == 0 || *(_QWORD *)(v7 + 16) == v8))
    {
      v9 = *(_OWORD *)(a2 + 16);
      v13[0] = *(_OWORD *)a2;
      v13[1] = v9;
      v14 = *(_QWORD *)(a2 + 32);
      caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::remove(v6, (uint64_t)v13);
      *v12 = 0;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)**v5 + 56))(**v5, v7);
      LOBYTE(v6) = 1;
    }
    else
    {
      LOBYTE(v6) = 0;
    }
  }
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(&v11);
  return (v7 != 0) & v6;
}

void sub_18EF18E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::pooled_semaphore_mutex *a9)
{
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(&a9);
  _Unwind_Resume(a1);
}

uint64_t ListenerMap::AddParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8;
  uint64_t Parameter;
  AudioUnitParameterValue *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[3];
  std::__shared_weak_count *v17;
  char v18;
  AudioUnitParameterValue outValue[2];
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_DWORD *)(a3 + 20) == -1 || *(_DWORD *)(a3 + 24) == -1 || *(_DWORD *)(a3 + 16) == -1)
    return 4294967246;
  v22 = a1;
  *(_QWORD *)outValue = &v22;
  v20 = &v21;
  v21 = a2;
  v16[0] = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::CanInsertEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>;
  v16[1] = outValue;
  if (ListenerMap::forEachBindingForEvent((_OWORD *)a3, (uint64_t)v16))
    return 4294967246;
  outValue[0] = 0.0;
  Parameter = AudioUnitGetParameter(*(AudioUnit *)(a3 + 8), *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20), *(_DWORD *)(a3 + 24), outValue);
  v8 = Parameter;
  if (!(_DWORD)Parameter || (_DWORD)Parameter == -10867)
  {
    XAUParameter::GetParamProxy((XAUParameter *)v16, (_QWORD *)(a3 + 8));
    if (v18)
    {
      if ((_DWORD)v8)
        v11 = 0;
      else
        v11 = outValue;
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AudioUnitParameterValue *))(*(_QWORD *)a1 + 32))(a1, a2, a3, v11);
      ListenerMap::InsertEvent((__int128 *)a3, v12);
      if (!(_DWORD)v8)
        (*(void (**)(uint64_t, uint64_t, uint64_t, AudioUnitParameterValue *))(*(_QWORD *)v12 + 16))(v12, a1, a2, outValue);
      v13 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    else
    {
      return 4294900547;
    }
  }
  return v8;
}

void sub_18EF19014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *ListenerMap::NotifyParameterChange(ListenerMap *this, AUListener *a2, char *a3, const XAUParameter *a4, float *a5)
{
  uint64_t v6;
  uint64_t ge;
  std::__shared_weak_count *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int16 *v16;
  char *v17;
  ListenerMap **v18;
  AUListener **v19;
  ListenerMap **v20;
  AUListener **v21;
  uint64_t (*v22[3])(_QWORD, unint64_t, _QWORD);
  _QWORD v23[3];
  int v24;
  int v25;
  uint64_t v26[2];
  _QWORD *v27;
  _QWORD v28[2];
  int v29;
  AUFlatParameterInfoBlob::ParameterProxy *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  char v33;
  _QWORD v34[3];
  _QWORD v35[2];
  __int128 v36;
  int v37;
  __int128 *v38;
  unsigned __int128 *v39;
  __int16 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  const XAUParameter *v44;
  AUListener *v45;
  ListenerMap *v46;

  v45 = a2;
  v46 = this;
  v41 = 0;
  v42 = *(_OWORD *)a3;
  v43 = *((_QWORD *)a3 + 2);
  v44 = a4;
  v40 = 0;
  if (!*(_QWORD *)a3)
    return 0;
  v38 = &ListenerMap::instance(void)::global;
  v39 = (unsigned __int128 *)&xmmword_1EE165A70;
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal((unsigned __int128 *)&xmmword_1EE165A70);
  v6 = *(_QWORD *)a3;
  v35[0] = 0;
  v36 = 0u;
  v35[1] = v6;
  v37 = 0;
  ge = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::iteration::find_ge((uint64_t *)&v38, (uint64_t)v35);
  if ((__int128 *)ge != &xmmword_1EE165A20)
  {
    atomic_load((unint64_t *)(ge + 64));
    if (!*(_DWORD *)ge)
    {
      v16 = &v40;
      v17 = (char *)&v40 + 1;
      v18 = &v46;
      v19 = &v45;
      v20 = &v44;
      v34[0] = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::NotifyParameterChange(AUListener *,void *,XAUParameter const&,float *)::$_0>;
      v34[1] = &v16;
      ListenerMap::forEachBindingForEvent(&v41, (uint64_t)v34);
      if (*((_DWORD *)a3 + 2) != -1 && (!(_BYTE)v40 || HIBYTE(v40)))
      {
        XAUParameter::GetParamProxy((XAUParameter *)&v30, a3);
        if (!v33)
        {
          v8 = (std::__shared_weak_count *)v30;
          goto LABEL_5;
        }
        v10 = *(_DWORD *)(v31 + 40);
        v29 = v10;
        if ((v10 & 0x30000000) != 0)
        {
          v28[0] = AUFlatParameterInfoBlob::ParameterProxy::dependentParameters(v30, v31);
          v28[1] = v11;
          v26[0] = (uint64_t)&ListenerMap::instance(void)::global;
          v26[1] = (uint64_t)&xmmword_1EE165A70;
          v27 = v28;
          caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal((unsigned __int128 *)&xmmword_1EE165A70);
          v12 = *(_QWORD *)a3;
          v23[0] = 0;
          v23[1] = v12;
          v23[2] = vand_s8(*(int8x8_t *)(a3 + 12), (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32((v10 & 0x10000000) == 0), 0x1FuLL)));
          v24 = 0;
          v25 = 0;
          v13 = caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::iteration::find_ge(v26, (uint64_t)v23);
          v16 = (__int16 *)a3;
          v17 = (char *)&v29;
          v18 = (ListenerMap **)&v27;
          v19 = (AUListener **)&v40;
          v20 = &v46;
          v21 = &v45;
          v22[0] = (uint64_t (*)(_QWORD, unint64_t, _QWORD))caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::NotifyParameterChange(AUListener *,void *,XAUParameter const&,float *)::$_1>;
          v22[1] = (uint64_t (*)(_QWORD, unint64_t, _QWORD))&v16;
          ListenerMap::forEachBinding((uint64_t)v26, v13, v22);
          caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal((unsigned __int128 *)&xmmword_1EE165A70);
        }
        v8 = v32;
        if (!v32)
          goto LABEL_5;
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
  v8 = 0;
LABEL_5:
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v39);
  return v8;
}

void sub_18EF19254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal((unsigned __int128 *)&xmmword_1EE165A70);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(*(unsigned __int128 **)(v31 - 104));
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::NotifyParameterChange(AUListener *,void *,XAUParameter const&,float *)::$_0>(uint64_t *a1, int a2, caulk::pooled_semaphore_mutex *this)
{
  uint64_t v4;
  uint64_t v5;
  caulk::pooled_semaphore_mutex *v7[2];

  v4 = *a1;
  caulk::pooled_semaphore_mutex::_lock(this);
  v7[0] = this;
  v5 = *((_QWORD *)this + 1);
  v7[1] = (caulk::pooled_semaphore_mutex *)((char *)this + 8);
  if (v5)
  {
    **(_BYTE **)v4 = 1;
    **(_BYTE **)(v4 + 8) |= (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 16))(v5, **(_QWORD **)(v4 + 16), **(_QWORD **)(v4 + 24), **(_QWORD **)(v4 + 32));
  }
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(v7);
  return 0;
}

void sub_18EF19320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::pooled_semaphore_mutex *a9)
{
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(&a9);
  _Unwind_Resume(a1);
}

uint64_t AUFlatParameterInfoBlob::ParameterProxy::dependentParameters(AUFlatParameterInfoBlob::ParameterProxy *this, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(int *)(a2 + 48);
  if ((_DWORD)v2 == -1)
    return 0;
  v3 = *((_QWORD *)this + 6);
  if (v2 >= v3)
    std::terminate();
  return (uint64_t)this + 8 * v2 + (v3 >> 32);
}

uint64_t caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::NotifyParameterChange(AUListener *,void *,XAUParameter const&,float *)::$_1>(AudioUnit ***a1, uint64_t a2, caulk::pooled_semaphore_mutex *this)
{
  AudioUnit **v3;
  AudioUnit *v4;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  AudioUnitParameterValue *p_outValue;
  AudioUnitParameterValue outValue;
  caulk::pooled_semaphore_mutex *v25;
  uint64_t *v26;

  v3 = *a1;
  v4 = **a1;
  if (*(AudioUnit *)(a2 + 8) != *v4
    || (*((_BYTE *)v3[1] + 3) & 0x20) != 0
    && (*(_DWORD *)(a2 + 20) != *((_DWORD *)v4 + 3) || *(_DWORD *)(a2 + 24) != *((_DWORD *)v4 + 4)))
  {
    return 1;
  }
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7 != -1)
  {
    v8 = *((_DWORD *)v4 + 2);
    if (v8 != -1)
    {
      v9 = v7 >= v8;
      v10 = v7 > v8;
      if (v9)
        v11 = v10;
      else
        v11 = -1;
      if (!v11)
      {
        v12 = *(unsigned int *)(a2 + 20);
        v13 = *((_DWORD *)v4 + 3);
        v9 = v12 >= v13;
        v11 = v12 > v13;
        if (!v9)
          v11 = -1;
        if (!v11)
        {
          v14 = *(_DWORD *)(a2 + 24);
          v15 = *((_DWORD *)v4 + 4);
          v11 = v14 > v15;
          if (v14 < v15)
            goto LABEL_16;
        }
      }
      if (v11)
      {
        v12 = *(unsigned int *)(a2 + 20);
        v14 = *(_DWORD *)(a2 + 24);
LABEL_16:
        v16 = *v3[2];
        v17 = (_QWORD *)*v16;
        v18 = v16[1];
        if (v18)
        {
          v19 = ((unint64_t)(v14 & 0x1FFFFFFF) << 32) | (v12 << 61) | v7;
          v20 = 8 * v18;
          v21 = v17;
          while (*v21 != v19)
          {
            ++v21;
            v20 -= 8;
            if (!v20)
            {
              v21 = &v17[v18];
              break;
            }
          }
        }
        else
        {
          v21 = v17;
        }
        if (v18 != v21 - v17)
        {
          caulk::pooled_semaphore_mutex::_lock(this);
          v25 = this;
          v22 = *((_QWORD *)this + 1);
          v26 = (uint64_t *)((char *)this + 8);
          if (v22)
          {
            outValue = 0.0;
            if (*(_BYTE *)v3[3])
            {
              p_outValue = 0;
            }
            else
            {
              if (AudioUnitGetParameter(**v3, *((_DWORD *)*v3 + 2), *((_DWORD *)*v3 + 3), *((_DWORD *)*v3 + 4), &outValue))
              {
                p_outValue = 0;
              }
              else
              {
                p_outValue = &outValue;
              }
              v22 = *v26;
            }
            (*(void (**)(uint64_t, _QWORD, _QWORD, AudioUnitParameterValue *))(*(_QWORD *)v22 + 16))(v22, *v3[4], *v3[5], p_outValue);
          }
          caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(&v25);
        }
      }
    }
  }
  return 0;
}

void sub_18EF19520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard((caulk::pooled_semaphore_mutex **)va);
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::NotifyEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>(_QWORD ***a1, int a2, caulk::pooled_semaphore_mutex *this)
{
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  caulk::pooled_semaphore_mutex *v9[2];

  v4 = *a1;
  caulk::pooled_semaphore_mutex::_lock(this);
  v9[0] = this;
  v5 = *((_QWORD *)this + 1);
  v9[1] = (caulk::pooled_semaphore_mutex *)((char *)this + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6 != **v4 || (v8 = *v4[1]) != 0 && *(_QWORD *)(v5 + 16) != v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  }
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(v9);
  return 0;
}

void sub_18EF195C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::pooled_semaphore_mutex *a9)
{
  caulk::sync_guard<ListenerBinding *,caulk::pooled_semaphore_mutex>::~sync_guard(&a9);
  _Unwind_Resume(a1);
}

void EC3AudioFile::~EC3AudioFile(EC3AudioFile *this)
{
  EC3AudioFile::~EC3AudioFile(this);
  JUMPOUT(0x193FFE460);
}

{
  void *v2;
  EC3StreamParser *v3;
  void *v4;

  *(_QWORD *)this = &off_1E2902110;
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
    free(v2);
  v3 = (EC3StreamParser *)*((_QWORD *)this + 21);
  if (v3)
  {
    EC3StreamParser::~EC3StreamParser(v3);
    MEMORY[0x193FFE460]();
    *((_QWORD *)this + 21) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 18);
  if (v4)
  {
    free(v4);
    *((_QWORD *)this + 18) = 0;
  }
  AudioFileObject::~AudioFileObject(this);
}

uint64_t EC3AudioFile::Create(EC3AudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  unsigned int v4;
  NSObject *v6;
  _BYTE v7[16];
  uint8_t v8[16];
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint8_t *v14;
  __int16 v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 21);
  if (a3->mFormatID == v4)
    return AudioFileObject::Create(this, a2, a3);
  if (!kAFSubSytemEC3)
  {
    v6 = MEMORY[0x1E0C81028];
LABEL_7:
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v8, v4);
      CAX4CCString::CAX4CCString((CAX4CCString *)v7, a3->mFormatID);
      *(_DWORD *)buf = 136315906;
      v10 = "EC3AudioFile.cpp";
      v11 = 1024;
      v12 = 346;
      v13 = 2080;
      v14 = v8;
      v15 = 2080;
      v16 = v7;
      _os_log_impl(&dword_18EE07000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: cannot create file, mismatch in formatID (expected = %s, specified = %s)", buf, 0x26u);
    }
    return 1718449215;
  }
  v6 = *(NSObject **)kAFSubSytemEC3;
  if (*(_QWORD *)kAFSubSytemEC3)
    goto LABEL_7;
  return 1718449215;
}

uint64_t EC3AudioFile::OpenFromDataSource(EC3AudioFile *this)
{
  uint64_t v1;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = (*(uint64_t (**)(EC3AudioFile *))(*(_QWORD *)this + 728))(this);
  if ((_DWORD)v1 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "EC3AudioFile.cpp";
    v5 = 1024;
    v6 = 319;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  EC3AudioFile::ParseAudioFile failed", (uint8_t *)&v3, 0x12u);
  }
  return v1;
}

uint64_t EC3AudioFile::InitializeDataSource(EC3AudioFile *this, const AudioStreamBasicDescription *a2)
{
  if (a2->mFormatID == *((_DWORD *)this + 21))
    return 0;
  else
    return 1718449215;
}

uint64_t EC3AudioFile::ReadPackets(EC3AudioFile *this, unsigned int a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  BOOL v7;
  int v8;
  unint64_t v9;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  SInt64 v33;
  unsigned int v34;
  uint64_t v35;
  AudioStreamPacketDescription *v36;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  _BYTE buf[12];
  _DWORD v44[3];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a4)
    v7 = a7 == 0;
  else
    v7 = 0;
  v8 = v7;
  v9 = *a6;
  if ((_DWORD)v9)
  {
    if (a3)
      *a3 = 0;
    *a6 = 0;
    v15 = (uint64_t *)*((_QWORD *)this + 15);
    if (v15)
    {
      v16 = v15[3];
      if ((uint64_t)v16 >= a5)
      {
        v21 = v9 + a5;
        do
        {
          if (v16 >= v21)
            break;
          v22 = EC3AudioFile::ParseOneCycle(this, *((_QWORD *)this + 33), 0);
          v23 = v22;
          v16 = *((_QWORD *)this + 15);
          if (v16)
            v16 = *(_QWORD *)(v16 + 24);
          if ((_DWORD)v22)
            goto LABEL_27;
        }
        while (!*((_BYTE *)this + 161));
        v23 = 0;
LABEL_27:
        if (v21 <= v16)
          v24 = v9;
        else
          v24 = v16 - a5;
        v41 = v24;
        if (v24)
        {
          if (v8)
          {
            *(_DWORD *)buf = v24;
            AudioFileObject::GetPacketDescriptions(this, a5, (unsigned int *)buf, a4);
            LODWORD(v25) = 0;
            LODWORD(v41) = *(_DWORD *)buf;
          }
          else
          {
            v26 = v24 + a5;
            if (a5 >= (int)v41 + (int)a5)
            {
              v27 = 0;
            }
            else
            {
              v27 = 0;
              v28 = a5;
              v29 = v26;
              do
              {
                CompressedPacketTable::operator[]((uint64_t)buf, v15, v28);
                v27 += v44[0];
                ++v28;
              }
              while (v29 != v28);
            }
            v42 = v27;
            CompressedPacketTable::operator[]((uint64_t)buf, v15, a5);
            v30 = (*(uint64_t (**)(EC3AudioFile *, _QWORD, _QWORD, unsigned int *, void *))(*(_QWORD *)this + 72))(this, a2, *(_QWORD *)buf, &v42, a7);
            v17 = v30;
            if ((_DWORD)v30 != -39 && (_DWORD)v30 != 0)
              return v17;
            v25 = v42;
            if (a4)
            {
              v32 = 0;
              v33 = 0;
              v34 = 1;
              v40 = v42;
              do
              {
                CompressedPacketTable::operator[]((uint64_t)buf, v15, v32 + a5);
                if (v25 >= v44[0])
                {
                  CompressedPacketTable::operator[]((uint64_t)buf, v15, v32 + a5);
                  v35 = v44[0];
                }
                else
                {
                  v35 = v25 & ~(v25 >> 63);
                }
                v36 = &a4[v32];
                v36->mStartOffset = v33;
                v36->mVariableFramesInPacket = 0;
                v36->mDataByteSize = v35;
                v33 += v35;
                v25 -= v35;
                v32 = v34;
              }
              while (v41 > v34++);
              v23 = 0;
              if ((_DWORD)v17)
              {
                LODWORD(v25) = v40;
                if ((_DWORD)v17 != -39)
                  return v17;
              }
              else
              {
                LODWORD(v25) = v40;
              }
            }
            else
            {
              v23 = 0;
            }
          }
          if (a3)
            *a3 = v25;
          *a6 = v41;
          return v23;
        }
        else
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "EC3AudioFile.cpp";
            LOWORD(v44[0]) = 1024;
            *(_DWORD *)((char *)v44 + 2) = 709;
            _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  EOF", buf, 0x12u);
          }
          return 4294967257;
        }
      }
      else
      {
        v17 = 1885563711;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "EC3AudioFile.cpp";
          LOWORD(v44[0]) = 1024;
          *(_DWORD *)((char *)v44 + 2) = 696;
          v18 = MEMORY[0x1E0C81028];
          v19 = "%25s:%-5d  Invalid starting packet index";
LABEL_18:
          _os_log_impl(&dword_18EE07000, v18, OS_LOG_TYPE_ERROR, v19, buf, 0x12u);
        }
      }
    }
    else
    {
      v17 = 1685348671;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "EC3AudioFile.cpp";
        LOWORD(v44[0]) = 1024;
        *(_DWORD *)((char *)v44 + 2) = 692;
        v18 = MEMORY[0x1E0C81028];
        v19 = "%25s:%-5d  Could not get PacketTable";
        goto LABEL_18;
      }
    }
  }
  else
  {
    v17 = 2003334207;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "EC3AudioFile.cpp";
      LOWORD(v44[0]) = 1024;
      *(_DWORD *)((char *)v44 + 2) = 683;
      v18 = MEMORY[0x1E0C81028];
      v19 = "%25s:%-5d  invalid num packets parameter";
      goto LABEL_18;
    }
  }
  return v17;
}

uint64_t EC3AudioFile::WritePackets(uint64_t **this, unsigned __int8 a2, unsigned int a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t *v16;
  uint64_t v17;
  SInt64 v18;
  int v19;
  unint64_t v20;
  uint64_t *v21;
  UInt32 *p_mVariableFramesInPacket;
  char *v23;
  uint64_t v24;
  int v26;
  AudioStreamPacketDescription v27;
  _BYTE buf[18];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v12 = ((uint64_t (*)(uint64_t **))(*this)[30])(this);
  v26 = 0;
  if ((a5 & 0x8000000000000000) == 0 && v12 != a5)
  {
    v13 = 1885563711;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "EC3AudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 826;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  Invalid starting packet";
LABEL_13:
      _os_log_impl(&dword_18EE07000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
      return v13;
    }
    return v13;
  }
  if (!a4)
  {
    v13 = 1885563711;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "EC3AudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 827;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  Packet Descriptions were not provided";
      goto LABEL_13;
    }
    return v13;
  }
  v16 = this[15];
  if (!v16)
  {
    v17 = operator new();
    v18 = 0;
    v19 = *((_DWORD *)this + 11);
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_DWORD *)(v17 + 32) = v19;
    this[15] = (uint64_t *)v17;
LABEL_17:
    v27.mStartOffset = v18;
    if (*a6)
    {
      v20 = 0;
      v21 = this[9];
      p_mVariableFramesInPacket = &a4->mVariableFramesInPacket;
      do
      {
        v23 = &a7[*((_QWORD *)p_mVariableFramesInPacket - 1)];
        v24 = p_mVariableFramesInPacket[1];
        v27.mVariableFramesInPacket = *p_mVariableFramesInPacket;
        v27.mDataByteSize = v24;
        v13 = (*(uint64_t (**)(uint64_t *, _QWORD, SInt64, uint64_t, char *, int *))(*this[13] + 56))(this[13], 0, (SInt64)v21 + v18, v24, v23, &v26);
        AudioFileObject::AppendPacket((AudioFileObject *)this, &v27);
        v18 += v24;
        v27.mStartOffset = v18;
        v21 = this[9];
        this[33] = (uint64_t *)((char *)v21 + v18);
        ++v20;
        p_mVariableFramesInPacket += 4;
      }
      while (v20 < *a6);
    }
    else
    {
      LODWORD(v20) = 0;
      v13 = 0;
    }
    *a6 = v20;
    return v13;
  }
  if (!v16[3])
  {
    v18 = 0;
    goto LABEL_17;
  }
  if (v12 <= a5)
  {
    CompressedPacketTable::operator[]((uint64_t)buf, v16, v12 - 1);
    v27 = *(AudioStreamPacketDescription *)buf;
    v18 = *(_QWORD *)buf + *(unsigned int *)&buf[12];
    goto LABEL_17;
  }
  v13 = 1885563711;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "EC3AudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 840;
    v14 = MEMORY[0x1E0C81028];
    v15 = "%25s:%-5d  Invalid starting packet";
    goto LABEL_13;
  }
  return v13;
}

uint64_t EC3AudioFile::GetPropertyInfo(EC3AudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2 == 1969321067)
  {
    if (*((_DWORD *)this + 21) == 1633889587)
      return 1886681407;
    if (a3)
      *a3 = 4;
    if (a4)
    {
      result = 0;
      *a4 = 1;
      return result;
    }
  }
  else
  {
    if (a2 != 1635017588)
      return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
    if (a3)
      *a3 = 4;
    if (a4)
    {
      result = 0;
      *a4 = 0;
      return result;
    }
  }
  return 0;
}

uint64_t EC3AudioFile::GetProperty(EC3AudioFile *this, int a2, unsigned int *a3, char *a4)
{
  uint64_t result;
  unint64_t v9;
  _DWORD *v10;
  int v11;

  if (a2 <= 1886090593)
  {
    if (a2 != 1635017588)
    {
      if (a2 == 1718383476)
      {
        result = AudioFileObject::GetProperty(this, 1718383476, a3, a4);
        if (!(_DWORD)result)
        {
          if (*a3 >= 0x30)
          {
            v9 = *a3 / 0x30uLL;
            v10 = a4 + 20;
            do
            {
              *v10 = *((_DWORD *)this + 11);
              v10 += 12;
              --v9;
            }
            while (v9);
          }
          return 0;
        }
        return result;
      }
      return AudioFileObject::GetProperty(this, a2, a3, a4);
    }
    if (*a3 < 4)
      return 561211770;
    v11 = *(_DWORD *)(*((_QWORD *)this + 21) + 4);
    if (!v11)
      return 2003334207;
    result = 0;
LABEL_26:
    *(_DWORD *)a4 = v11;
    return result;
  }
  if (a2 == 1886090594)
    goto LABEL_5;
  if (a2 == 1969321067)
  {
    if (*((_DWORD *)this + 21) == 1633889587)
      return 1886681407;
    if (*a3 < 4)
      return 561211770;
    result = 0;
    v11 = *((_DWORD *)this + 47);
    goto LABEL_26;
  }
  if (a2 != 1886616165)
    return AudioFileObject::GetProperty(this, a2, a3, a4);
LABEL_5:
  if (*a3 != 4)
    return 561211770;
  if (*((_DWORD *)this + 10))
    return AudioFileObject::GetProperty(this, a2, a3, a4);
  if (*((_BYTE *)this + 161))
    return AudioFileObject::GetProperty(this, a2, a3, a4);
  result = (*(uint64_t (**)(EC3AudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1);
  if (!(_DWORD)result)
    return AudioFileObject::GetProperty(this, a2, a3, a4);
  return result;
}

uint64_t EC3AudioFile::SetProperty(EC3AudioFile *this, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  int v6;

  if (a2 != 1969321067)
    return AudioFileObject::SetProperty(this, a2, a3, a4);
  result = 1886681407;
  if ((*((_BYTE *)this + 100) & 2) == 0 && *((_DWORD *)this + 21) != 1633889587)
  {
    if (a3 >= 4)
    {
      v6 = *(_DWORD *)a4;
      if (*(_DWORD *)a4 >= *(_DWORD *)(*((_QWORD *)this + 21) + 4))
      {
        return 2003334207;
      }
      else if (v6 == *((_DWORD *)this + 47))
      {
        return 0;
      }
      else
      {
        *((_BYTE *)this + 161) = 0;
        AudioFileObject::DeletePacketTable(this);
        *((_DWORD *)this + 47) = v6;
        return EC3AudioFile::ParseOneCycle(this, *((_QWORD *)this + 9), 1);
      }
    }
    else
    {
      return 561211770;
    }
  }
  return result;
}

uint64_t EC3AudioFile::GetFormatListInfo(EC3AudioFile *this, UInt32 *outPropertyDataSize, unsigned int *a3)
{
  __int128 v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  int v11;

  v5 = *(_OWORD *)((char *)this + 40);
  v8[0] = *(_OWORD *)((char *)this + 24);
  v8[1] = v5;
  v6 = *((_QWORD *)this + 18);
  v9 = *((_QWORD *)this + 7);
  v10 = v6;
  v11 = *((_DWORD *)this + 38);
  if (AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, v8, outPropertyDataSize))
  {
    *outPropertyDataSize = 48;
    *a3 = 0;
  }
  return 0;
}

uint64_t EC3AudioFile::GetFormatList(EC3AudioFile *this, UInt32 *ioPropertyDataSize, AudioFormatListItem *outPropertyData)
{
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD inSpecifier[2];
  uint64_t v12;
  uint64_t v13;
  int v14;

  v8 = *(_OWORD *)((char *)this + 24);
  v9 = *(_OWORD *)((char *)this + 40);
  v10 = *((_QWORD *)this + 7);
  inSpecifier[0] = v8;
  inSpecifier[1] = v9;
  v6 = *((_QWORD *)this + 18);
  v12 = v10;
  v13 = v6;
  v14 = *((_DWORD *)this + 38);
  if (AudioFormatGetProperty(0x666C7374u, 0x38u, inSpecifier, ioPropertyDataSize, outPropertyData))
  {
    *(_OWORD *)&outPropertyData->mASBD.mSampleRate = v8;
    *(_OWORD *)&outPropertyData->mASBD.mBytesPerPacket = v9;
    *(_QWORD *)&outPropertyData->mASBD.mBitsPerChannel = v10;
    outPropertyData->mASBD.mFramesPerPacket = *((_DWORD *)this + 11);
    outPropertyData->mChannelLayoutTag = *((_DWORD *)this + 39);
    *ioPropertyDataSize = 48;
  }
  return 0;
}

uint64_t EC3AudioFile::UpdateSize(EC3AudioFile *this)
{
  return 0;
}

uint64_t EC3AudioFile::GetNumBytes(EC3AudioFile *this)
{
  int v2;
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  v2 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v4);
  result = v4;
  if (!v2)
    return v4 - *((_QWORD *)this + 9);
  return result;
}

uint64_t EC3AudioFile::GetNumPackets(EC3AudioFile *this)
{
  uint64_t v2;

  while (!*((_BYTE *)this + 161))
    EC3AudioFile::ParseOneCycle(this, *((_QWORD *)this + 33), 0);
  v2 = *((_QWORD *)this + 15);
  if (v2)
    return *(_QWORD *)(v2 + 24);
  else
    return 0;
}

uint64_t AudioFileObject::RestrictsRandomAccess(AudioFileObject *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t EC3AudioFile::GetBitRate(EC3AudioFile *this, unsigned int *a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _BYTE v15[8];
  unsigned int v16;

  if (*((_DWORD *)this + 21) == 1633889587)
    return AudioFileObject::GetBitRate(this, a2);
  if (!a2)
    return 2003334207;
  v5 = *((_DWORD *)this + 10);
  v6 = *((unsigned int *)this + 11);
  v7 = *((double *)this + 3);
  if (v5)
    v8 = (_DWORD)v6 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    result = 0;
    v10 = (double)v5 * 8.0 * v7 / (double)v6;
LABEL_18:
    *a2 = v10;
    return result;
  }
  v9 = (*(uint64_t (**)(EC3AudioFile *))(*(_QWORD *)this + 240))(this);
  while (!*((_BYTE *)this + 161))
    EC3AudioFile::ParseOneCycle(this, *((_QWORD *)this + 33), 0);
  v11 = *((_QWORD *)this + *((unsigned int *)this + 47) + 25);
  if ((_DWORD)v6)
  {
    v12 = v9 * v6;
    goto LABEL_15;
  }
  v13 = (uint64_t *)*((_QWORD *)this + 15);
  if (!v13)
    return 1886681407;
  if (v13[3] == v9)
  {
    if (v9 < 1)
    {
LABEL_25:
      result = 0;
      *a2 = 0;
      return result;
    }
    v14 = 0;
    v12 = 0;
    do
    {
      CompressedPacketTable::operator[]((uint64_t)v15, v13, v14);
      v12 += v16;
      ++v14;
    }
    while (v9 != v14);
LABEL_15:
    if (v12 && v7 != 0.0)
    {
      result = 0;
      v10 = (double)v11 * 8.0 / ((double)v12 / v7);
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  return 1685348671;
}

uint64_t EC3AudioFile::GetMagicCookieDataSize(EC3AudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3)
    *a3 = 0;
  if (a2)
    *a2 = *((_DWORD *)this + 38);
  return 0;
}

uint64_t EC3AudioFile::GetMagicCookieData(EC3AudioFile *this, unsigned int *a2, void *__dst)
{
  size_t v3;
  uint64_t result;
  const void *v7;

  v3 = *((unsigned int *)this + 38);
  if (*a2 < v3)
    return 561211770;
  result = 2003334207;
  if (__dst)
  {
    v7 = (const void *)*((_QWORD *)this + 18);
    if (v7)
    {
      memcpy(__dst, v7, v3);
      result = 0;
      *a2 = *((_DWORD *)this + 38);
    }
  }
  return result;
}

uint64_t EC3AudioFile::GetChannelLayoutSize(EC3AudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a2)
    *a2 = 32;
  if (a3)
    *a3 = 0;
  return 0;
}

double EC3AudioFile::GetChannelLayout(EC3AudioFile *this, unsigned int *a2, AudioChannelLayout *a3)
{
  double result;

  if (a2)
  {
    if (*a2 >= 0x20)
    {
      result = 0.0;
      *(_OWORD *)&a3->mChannelLayoutTag = 0u;
      *(_OWORD *)&a3->mChannelDescriptions[0].mChannelFlags = 0u;
      a3->mChannelLayoutTag = *((_DWORD *)this + 39);
    }
  }
  return result;
}

uint64_t EC3AudioFile::GetInfoDictionary(EC3AudioFile *this, CACFDictionary *a2)
{
  AudioFileObject *v3;
  double v5;

  v5 = 0.0;
  v3 = (AudioFileObject *)(*(uint64_t (**)(EC3AudioFile *, double *))(*(_QWORD *)this + 544))(this, &v5);
  if ((_DWORD)v3)
    return 1886681407;
  AudioFileObject::AddDurationToInfoDictionary(v3, a2, &v5);
  return 0;
}

uint64_t AudioFileObject::GetSoundCheckDictionary(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AudioFileObject::SetSoundCheckDictionary(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t EC3AudioFile::GetLoudnessInfo(EC3AudioFile *this, CACFDictionary *a2)
{
  CFMutableDictionaryRef Mutable;
  __int16 v6;

  if (*((_DWORD *)this + 48) < 0xFFFFFFE1)
    return 0xFFFFFFFFLL;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = 257;
  CACFDictionary::AddFloat32(a2, CFSTR("dialnorm"), (float)*((int *)this + 48));
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return 0;
}

void sub_18EF1A76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

uint64_t AudioFileObject::GetAseBoxes(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AudioFileObject::SetAseBoxes(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetSoundCheckDictionaryFromLoudnessInfo(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetLoudnessInfoFromSoundCheckDictionary(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AudioFileObject::SetLoudnessInfo(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetLoudnessInfoSize(AudioFileObject *this, unsigned int *a2, unsigned int *a3)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetAseSize(AudioFileObject *this, unsigned int *a2, unsigned int *a3)
{
  return 1886681407;
}

uint64_t AudioFileObject::GenerateLoudnessInfo(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t EC3AudioFile::GetEstimatedDuration(EC3AudioFile *this, double *a2)
{
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = *((double *)this + 3);
  v5 = *((unsigned int *)this + 11);
  if (*((_BYTE *)this + 161))
  {
    if ((_DWORD)v5)
      v6 = (double)((*(uint64_t (**)(EC3AudioFile *))(*(_QWORD *)this + 240))(this) * v5) / v4;
    else
      v6 = 0.0;
    result = 0;
  }
  else
  {
    *a2 = 0.0;
    v7 = *((_QWORD *)this + 13);
    v9 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 24))(v7, &v9);
    if ((_DWORD)result)
      return result;
    v6 = (double)(unint64_t)(v9 / *(unsigned int *)(*((_QWORD *)this + 21) + 36) * v5) / v4;
  }
  *a2 = v6;
  return result;
}

uint64_t AudioFileObject::GetLyrics(AudioFileObject *this, const __CFString **a2)
{
  return 1886681407;
}

BOOL EC3AudioFile::IsDataFormatSupported(EC3AudioFile *this, const AudioStreamBasicDescription *a2)
{
  return (a2->mFormatID & 0xFBFFFFFF) == 1633889587;
}

uint64_t AudioFileObject::IsValidFilePosition(AudioFileObject *this)
{
  return 0;
}

uint64_t AudioFileObject::FindMaximumPacketSize(AudioFileObject *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t AudioFileObject::GetPacketSizeUpperBound(AudioFileObject *this)
{
  return (*(uint64_t (**)(AudioFileObject *))(*(_QWORD *)this + 632))(this);
}

uint64_t AudioFileObject::GetMaxNumDependentPackets(AudioFileObject *this)
{
  return *((unsigned int *)this + 32);
}

uint64_t AudioFileObject::SetMaxNumDependentPackets(uint64_t this, int a2)
{
  *(_DWORD *)(this + 128) = a2;
  return this;
}

uint64_t EC3AudioFile::ScanForPackets(EC3AudioFile *this, uint64_t a2, DataSource *a3, char a4)
{
  DataSource *v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t FPosForNextSyncWord;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  if (!*((_BYTE *)this + 161))
  {
    v5 = a3;
    if (!a3)
      v5 = (DataSource *)*((_QWORD *)this + 13);
    v8 = *((_QWORD *)this + 15);
    if (!v8)
    {
      v8 = operator new();
      v9 = *((_DWORD *)this + 11);
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_DWORD *)(v8 + 32) = v9;
      *((_QWORD *)this + 15) = v8;
    }
    v10 = *(_QWORD *)(v8 + 24);
    if (a2 == -1 || v10 < a2)
    {
      FPosForNextSyncWord = (*(uint64_t (**)(DataSource *, uint64_t *))(*(_QWORD *)v5 + 24))(v5, &v18);
      if ((_DWORD)FPosForNextSyncWord)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v21 = "EC3AudioFile.cpp";
          v22 = 1024;
          v23 = 1220;
          v12 = MEMORY[0x1E0C81028];
          v13 = "%25s:%-5d  GetSize failed";
LABEL_11:
          _os_log_impl(&dword_18EE07000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
        }
      }
      else
      {
        v14 = 264;
        if (!v10)
          v14 = 72;
        v19 = *(_QWORD *)((char *)this + v14);
        if (v19 >= v18)
        {
LABEL_30:
          FPosForNextSyncWord = 0;
          *((_BYTE *)this + 161) = a4;
          return FPosForNextSyncWord;
        }
        if (a2 != -1)
        {
          v15 = *((_QWORD *)this + 15);
          if (v15)
            v15 = *(_QWORD *)(v15 + 24);
          a2 = a2 - v15 + 1;
        }
        while (1)
        {
          FPosForNextSyncWord = EC3AudioFile::GetFPosForNextSyncWord(this, &v19, &v17, v5);
          if ((_DWORD)FPosForNextSyncWord)
            break;
          FPosForNextSyncWord = EC3AudioFile::ParseOneCycle(this, v19, 0);
          if ((_DWORD)FPosForNextSyncWord)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              break;
            *(_DWORD *)buf = 136315394;
            v21 = "EC3AudioFile.cpp";
            v22 = 1024;
            v23 = 1247;
            v12 = MEMORY[0x1E0C81028];
            v13 = "%25s:%-5d  EC3AudioFile::ScanForPackets : ParseOneCycle failed";
            goto LABEL_11;
          }
          v19 = *((_QWORD *)this + 33);
          if (a2 == -1)
          {
            if (*((_BYTE *)this + 161))
              return 0;
          }
          else if (!--a2)
          {
            return 0;
          }
        }
      }
      if ((_DWORD)FPosForNextSyncWord != -40)
      {
        if ((_DWORD)FPosForNextSyncWord != -39)
          return FPosForNextSyncWord;
        goto LABEL_30;
      }
    }
  }
  return 0;
}

uint64_t AudioFileObject::GetSourceBitDepth(AudioFileObject *this, int *a2)
{
  *a2 = 0;
  return 1886681407;
}

uint64_t AudioFileObject::SetSourceBitDepth(AudioFileObject *this)
{
  return 1886681407;
}

uint64_t AudioFileObject::GetAlbumArtwork(AudioFileObject *this, const __CFData **a2)
{
  *a2 = 0;
  return 1886681407;
}

uint64_t AudioFileObject::SetAlbumArtwork(AudioFileObject *this, const __CFData *a2)
{
  return 1886681407;
}

uint64_t EC3AudioFile::ParseAudioFile(EC3AudioFile *this)
{
  uint64_t v2;
  DataSource **v3;
  uint64_t FPosForNextSyncWord;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  EC3StreamParser *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  size_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int *v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unsigned int v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  _DWORD *v54;
  unsigned int v55;
  unsigned __int8 *v56;
  uint64_t v57;
  BOOL v58;
  char *v59;
  char v60;
  uint64_t v61;
  _QWORD *v62;
  unsigned int v63;
  char *v64;
  uint64_t v65;
  char *v66;
  _DWORD *v67;
  int v68;
  __int128 v69;
  char *v70;
  UInt32 v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  char *v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  char *v80;
  int v81;
  char *v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  size_t v93;
  unint64_t v94;
  char *v95;
  __int128 v96;
  char *v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  UInt32 outPropertyDataSize;
  __int128 v102;
  char *v103;
  unsigned __int8 *v104;
  unsigned int v105[2];
  unsigned int v106[2];
  unsigned int v107;
  uint8_t v108[32];
  __int128 v109;
  uint8_t buf[32];
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned __int8 v114[4];
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 21) == 1633889587)
    v2 = 10;
  else
    v2 = 12;
  v100 = 0;
  v99 = 0;
  v3 = (DataSource **)MEMORY[0x1E0C80A78](this);
  v96 = 0uLL;
  v97 = 0;
  FPosForNextSyncWord = EC3AudioFile::GetFPosForNextSyncWord((EC3AudioFile *)v3, &v99, &v98, v3[13]);
  if ((_DWORD)FPosForNextSyncWord)
    return FPosForNextSyncWord;
  v5 = v99;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *, int *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v99, v2, &v84, &v100);
  *((_QWORD *)this + 9) = v5;
  v6 = operator new();
  *(_BYTE *)v6 = 0;
  *(_DWORD *)(v6 + 4) = 1;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 8) = v6 + 16;
  *(_QWORD *)(v6 + 32) = 1;
  *(_QWORD *)(v6 + 176) = 0;
  *(_QWORD *)(v6 + 184) = 0;
  *(_QWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 192) = 1;
  *(_OWORD *)(v6 + 44) = 0u;
  *(_OWORD *)(v6 + 60) = 0u;
  *(_OWORD *)(v6 + 76) = 0u;
  *(_OWORD *)(v6 + 92) = 0u;
  *(_OWORD *)(v6 + 108) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_OWORD *)(v6 + 140) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_DWORD *)(v6 + 40) = 1;
  *(_DWORD *)(v6 + 52) = 1;
  *((_QWORD *)this + 21) = v6;
  FPosForNextSyncWord = EC3AudioFile::ParseOneCycle(this, v5, 1);
  if ((_DWORD)FPosForNextSyncWord)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "EC3AudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 377;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  EC3AudioFile::ParseAudioFile : ParseOneCycle failed", buf, 0x12u);
    }
    v7 = 0;
    goto LABEL_9;
  }
  v10 = *((_QWORD *)this + 21);
  v11 = *((unsigned int *)this + 47);
  v12 = *((_QWORD *)this + 18);
  v13 = *((_DWORD *)this + 38);
  v15 = (_QWORD *)(v10 + 16);
  v14 = *(_QWORD *)(v10 + 16);
  if (v14)
  {
    v16 = v10 + 16;
    do
    {
      v17 = *(_DWORD *)(v14 + 32);
      v18 = v17 >= v11;
      if (v17 >= v11)
        v19 = (uint64_t *)v14;
      else
        v19 = (uint64_t *)(v14 + 8);
      if (v18)
        v16 = v14;
      v14 = *v19;
    }
    while (*v19);
    if ((_QWORD *)v16 != v15 && *(_DWORD *)(v16 + 32) <= v11)
    {
      v26 = *(_BYTE **)(v16 + 40);
      v25 = *(_BYTE **)(v16 + 48);
      v27 = v25 - v26;
      v28 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v26) >> 4);
      if (v25 == v26)
      {
        v7 = 0;
      }
      else
      {
        if (v28 >= 0x555555555555556)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v28);
        *(_QWORD *)&v96 = v7;
        *((_QWORD *)&v96 + 1) = v7;
        v97 = &v7[48 * v29];
        memmove(v7, v26, v27);
      }
      *((_QWORD *)&v96 + 1) = &v7[48 * v28];
LABEL_97:
      if (*((char **)&v96 + 1) != v7)
      {
        FPosForNextSyncWord = 0;
        *((_DWORD *)this + 39) = *(_DWORD *)(*((_QWORD *)&v96 + 1) - 8);
LABEL_12:
        *((_QWORD *)&v96 + 1) = v7;
        operator delete(v7);
        return FPosForNextSyncWord;
      }
      FPosForNextSyncWord = 0;
      v60 = 1;
      goto LABEL_100;
    }
  }
  v102 = 0uLL;
  v103 = 0;
  outPropertyDataSize = 0;
  if (*(_DWORD *)(v10 + 4) <= v11)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v108 = 136315394;
      *(_QWORD *)&v108[4] = "EC3Support.cpp";
      *(_WORD *)&v108[12] = 1024;
      *(_DWORD *)&v108[14] = 398;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Couldn't get format list count from EC3 parser", v108, 0x12u);
    }
    FPosForNextSyncWord = 0xFFFFFFFFLL;
    goto LABEL_39;
  }
  v20 = v10 + 16 * v11;
  v23 = *(_DWORD *)(v20 + 40);
  v21 = (_DWORD *)(v20 + 40);
  v22 = v23;
  if (!v23)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v108 = 136315394;
      *(_QWORD *)&v108[4] = "EC3Support.cpp";
      *(_WORD *)&v108[12] = 1024;
      *(_DWORD *)&v108[14] = 399;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  EC3 parser provided an empty format list", v108, 0x12u);
    }
    FPosForNextSyncWord = 0;
LABEL_39:
    v30 = 0;
    v7 = 0;
    goto LABEL_82;
  }
  v109 = 0u;
  memset(v108, 0, sizeof(v108));
  std::vector<AudioFormatListItem>::resize((void **)&v102, v22, (__int128 *)v108);
  v95 = (char *)v102;
  if (*(_DWORD *)(v10 + 4) <= v11)
  {
    FPosForNextSyncWord = 0xFFFFFFFFLL;
    goto LABEL_77;
  }
  v24 = *v21;
  if (48 * v24 > (unint64_t)(48 * v22))
  {
    FPosForNextSyncWord = 561211770;
LABEL_77:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v108 = 136315394;
      *(_QWORD *)&v108[4] = "EC3Support.cpp";
      *(_WORD *)&v108[12] = 1024;
      *(_DWORD *)&v108[14] = 404;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Couldn't get format list from EC3 parser", v108, 0x12u);
    }
    v7 = 0;
    v30 = 0;
    v59 = v95;
    goto LABEL_80;
  }
  v104 = 0;
  v92 = v24;
  v93 = (12 * v24);
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v104, v93, 1);
  v88 = v12;
  v87 = v13;
  v31 = 0;
  if ((_DWORD)v11)
  {
    v32 = (int *)(v10 + 40);
    v33 = v11;
    do
    {
      v34 = *v32;
      v32 += 4;
      v31 += v34;
      --v33;
    }
    while (v33);
  }
  v35 = v104;
  if (*v21)
  {
    v36 = 0;
    v37 = 0;
    do
    {
      v38 = &v35[v36 & 0xFFFFFFFC];
      v39 = *(_QWORD *)(v10 + 168) + 12 * (v31 + v37);
      v40 = *(_QWORD *)v39;
      *((_DWORD *)v38 + 2) = *(_DWORD *)(v39 + 8);
      *(_QWORD *)v38 = v40;
      ++v37;
      v36 += 12;
    }
    while (v37 < *v21);
  }
  v94 = v22;
  if ((_DWORD)v92)
  {
    v41 = 0;
    FPosForNextSyncWord = 560226676;
    v89 = v35 + 12;
    v42 = 0uLL;
    v43 = v93;
    v90 = v10;
    while (1)
    {
      *(_QWORD *)v106 = 0;
      v91 = v43;
      if (v43 / 0xC <= 2)
        v44 = 2;
      else
        v44 = v43 / 0xC;
      *(_QWORD *)v105 = 0;
      *(_OWORD *)v108 = v42;
      *(_OWORD *)&v108[16] = v42;
      *(_QWORD *)&v109 = 0;
      v45 = CheckAndSwapAC3Header(v35, 0xCu, v114);
      if ((_DWORD)v45
        || (v107 = 0,
            v45 = ParseAC3Header(v35, 0xCu, (AudioStreamBasicDescription *)v108, &v107, v106, &v105[1], 0, 0),
            (_DWORD)v45))
      {
        FPosForNextSyncWord = v45;
        if (v35)
          goto LABEL_75;
        goto LABEL_76;
      }
      v46 = v95;
      v47 = v41;
      v48 = &v95[48 * v41];
      v49 = v93 - 12 * v47;
      v50 = *(_OWORD *)v108;
      v51 = *(_OWORD *)&v108[16];
      *((_QWORD *)v48 + 4) = v109;
      *(_OWORD *)v48 = v50;
      *((_OWORD *)v48 + 1) = v51;
      v52 = v107;
      v53 = &v46[48 * v47];
      *((_DWORD *)v53 + 10) = v107;
      v54 = v53 + 40;
      *((_DWORD *)v48 + 4) = 0;
      if (v49 >= 0x18)
        break;
LABEL_70:
      v43 = v91 - 12;
      v10 = v90;
      v41 = v47 + 1;
      v42 = 0uLL;
      if (v47 + 1 == v92)
        goto LABEL_71;
    }
    v85 = v54;
    v86 = v47;
    v55 = v44 - 1;
    *((_DWORD *)v48 + 2) = 1700998451;
    v56 = v89;
    while (1)
    {
      v57 = ParseAC3Header(v56, 0xCu, (AudioStreamBasicDescription *)v108, &v107, v106, v105, 0, 0);
      if ((_DWORD)v57)
        break;
      if ((v105[0] & 2) != 0)
        goto LABEL_74;
      v58 = (_DWORD)v52 == 9961476 || (_DWORD)v52 == 9830403;
      if (v58 && LOWORD(v105[0]) == 16392 || (_DWORD)v52 == 8650756 && LOWORD(v105[0]) == 6400)
        goto LABEL_74;
      CombineEAC3PacketChannelsLayouts(v52, v107, LOWORD(v105[0]), &v106[1]);
      v52 = v106[1];
      v56 += 12;
      if (!--v55)
      {
        *((_DWORD *)v48 + 7) = LOWORD(v106[1]);
        *((_DWORD *)v48 + 4) = 0;
        *v85 = v52;
        v47 = v86;
        goto LABEL_70;
      }
    }
    FPosForNextSyncWord = v57;
LABEL_74:
    v10 = v90;
    if (!v35)
      goto LABEL_76;
    goto LABEL_75;
  }
LABEL_71:
  FPosForNextSyncWord = 0;
  if (v35)
LABEL_75:
    free(v35);
LABEL_76:
  if ((_DWORD)FPosForNextSyncWord)
    goto LABEL_77;
  if ((_DWORD)v11)
    goto LABEL_108;
  v66 = &v95[48 * (v94 - 1)];
  v68 = *((_DWORD *)v66 + 2);
  v67 = v66 + 8;
  if (v68 != 1700998451
    || (v111 = 0,
        memset(buf, 0, sizeof(buf)),
        *(_DWORD *)&buf[8] = *v67,
        v112 = v88,
        v113 = v87,
        AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, buf, &outPropertyDataSize)))
  {
LABEL_108:
    FPosForNextSyncWord = 0;
    v69 = v96;
    v96 = v102;
    v102 = v69;
    v70 = v97;
    v97 = v103;
    v103 = v70;
    v59 = (char *)v69;
    v30 = *((_QWORD *)&v96 + 1);
    v7 = (char *)v96;
    goto LABEL_80;
  }
  v71 = outPropertyDataSize;
  if (outPropertyDataSize % 0x30)
  {
    v7 = 0;
  }
  else
  {
    v109 = 0u;
    memset(v108, 0, sizeof(v108));
    std::vector<AudioFormatListItem>::resize((void **)&v96, outPropertyDataSize / 0x30, (__int128 *)v108);
    v7 = (char *)v96;
    if (AudioFormatGetProperty(0x666C7374u, 0x38u, buf, &outPropertyDataSize, (void *)v96))
      goto LABEL_108;
    if (outPropertyDataSize < v71)
    {
      std::vector<AudioFormatListItem>::resize((char **)&v96, outPropertyDataSize / 0x30uLL);
      v7 = (char *)v96;
    }
  }
  v30 = *((_QWORD *)&v96 + 1);
  if (*((char **)&v96 + 1) != v7)
  {
    v72 = 0;
    v73 = 0;
    v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v96 + 1) - (_QWORD)v7) >> 4);
    v59 = v95;
    do
    {
      v75 = &v7[48 * v72];
      v76 = *((_DWORD *)v75 + 5);
      if (!v76 || *(double *)v75 == 0.0)
      {
        v77 = 0;
        v78 = *((_DWORD *)v75 + 2);
        v79 = -1;
        v80 = v59;
        do
        {
          v81 = *((_DWORD *)v80 + 2);
          if (v79 == -1 && v81 == 1700998451)
            v79 = v77;
          if (v81 == v78 && *((_DWORD *)v80 + 7) == *((_DWORD *)v75 + 7))
          {
            if (*(double *)v75 == 0.0)
              *(_QWORD *)v75 = *(_QWORD *)v80;
            v59 = v95;
            if (!v76)
            {
              v83 = v80 + 20;
              goto LABEL_139;
            }
            goto LABEL_140;
          }
          ++v77;
          v80 += 48;
        }
        while (v94 != v77);
        if (v78 != 1700997939 || v79 == -1)
          goto LABEL_108;
        v59 = v95;
        if (*(double *)v75 == 0.0)
          *(_QWORD *)v75 = *(_QWORD *)&v95[48 * v79];
        if (!v76)
        {
          v83 = &v59[48 * v79 + 20];
LABEL_139:
          *((_DWORD *)v75 + 5) = *(_DWORD *)v83;
        }
      }
LABEL_140:
      v72 = ++v73;
    }
    while (v74 > v73);
    FPosForNextSyncWord = 0;
LABEL_80:
    if (!v59)
      goto LABEL_82;
    goto LABEL_81;
  }
  FPosForNextSyncWord = 0;
  v30 = (uint64_t)v7;
  v59 = v95;
LABEL_81:
  operator delete(v59);
LABEL_82:
  if (!(_DWORD)FPosForNextSyncWord)
  {
    *(_DWORD *)buf = v11;
    memset(&buf[8], 0, 24);
    std::vector<AudioFormatListItem>::__init_with_size[abi:ne180100]<AudioFormatListItem*,AudioFormatListItem*>(&buf[8], (const void *)v96, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v96) >> 4));
    v61 = *v15;
    v62 = v15;
    if (*v15)
    {
      while (1)
      {
        while (1)
        {
          v62 = (_QWORD *)v61;
          v63 = *(_DWORD *)(v61 + 32);
          if (*(_DWORD *)buf >= v63)
            break;
          v61 = *v62;
          v15 = v62;
          if (!*v62)
            goto LABEL_91;
        }
        if (v63 >= *(_DWORD *)buf)
          break;
        v61 = v62[1];
        if (!v61)
        {
          v15 = v62 + 1;
          goto LABEL_91;
        }
      }
    }
    else
    {
LABEL_91:
      v64 = (char *)operator new(0x40uLL);
      *((_DWORD *)v64 + 8) = *(_DWORD *)buf;
      *(_OWORD *)(v64 + 40) = *(_OWORD *)&buf[8];
      *((_QWORD *)v64 + 7) = *(_QWORD *)&buf[24];
      memset(&buf[8], 0, 24);
      *(_QWORD *)v64 = 0;
      *((_QWORD *)v64 + 1) = 0;
      *((_QWORD *)v64 + 2) = v62;
      *v15 = v64;
      v65 = **(_QWORD **)(v10 + 8);
      if (v65)
      {
        *(_QWORD *)(v10 + 8) = v65;
        v64 = (char *)*v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v10 + 16), (uint64_t *)v64);
      ++*(_QWORD *)(v10 + 24);
    }
    if (*(_QWORD *)&buf[8])
      operator delete(*(void **)&buf[8]);
    v7 = (char *)v96;
    goto LABEL_97;
  }
  v60 = 0;
LABEL_100:
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "EC3AudioFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 380;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  EC3AudioFile::ParseAudioFile : GetFormatList failed", buf, 0x12u);
  }
  if ((v60 & 1) != 0)
  {
    FPosForNextSyncWord = 0;
    if (!v7)
      return FPosForNextSyncWord;
    goto LABEL_12;
  }
LABEL_9:
  v8 = (EC3StreamParser *)*((_QWORD *)this + 21);
  if (v8)
  {
    EC3StreamParser::~EC3StreamParser(v8);
    MEMORY[0x193FFE460]();
    *((_QWORD *)this + 21) = 0;
  }
  if (v7)
    goto LABEL_12;
  return FPosForNextSyncWord;
}

void sub_18EF1B824(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  operator delete(*(void **)(v1 - 344));
  v3 = *(void **)(v1 - 336);
  if (v3)
  {
    *(_QWORD *)(v1 - 328) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t EC3AudioFile::GetFPosForNextSyncWord(EC3AudioFile *this, uint64_t *a2, unsigned int *a3, DataSource *a4)
{
  unsigned int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  size_t v18;
  DataSource *v20;
  uint64_t *v21;
  char *v22;
  unsigned int v23;
  uint8_t buf[4];
  __int128 v25;
  char v26;
  uint64_t v27;
  int v28;
  __int16 __dst[6];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 21) == 1633889587)
    v8 = 10;
  else
    v8 = 12;
  v22 = 0;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v22, 0x28uLL, 1);
  v9 = v22;
  if (!v22)
  {
    v14 = 1685348671;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&v25 = "EC3AudioFile.cpp";
      WORD4(v25) = 1024;
      *(_DWORD *)((char *)&v25 + 10) = 891;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  couldn't make space", buf, 0x12u);
    }
    return v14;
  }
  v21 = a2;
  v10 = *a2;
  v20 = a4;
LABEL_6:
  v23 = 0;
  v11 = v10;
  v12 = (*(uint64_t (**)(DataSource *, _QWORD))(*(_QWORD *)a4 + 48))(a4, 0);
  v13 = v23;
  if (v23 >= v8)
  {
    v14 = v12;
    v15 = 0;
    while (1)
    {
      v16 = *((_DWORD *)this + 21);
      *(_DWORD *)buf = v16;
      LOWORD(v25) = 0;
      *(_QWORD *)((char *)&v25 + 4) = &v9[v15];
      HIDWORD(v25) = v13;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      if ((v16 | 0x4000000) == 0x65632D33)
      {
        v17 = v16 == 1633889587 ? 10 : 12;
        if (v17 <= v13)
        {
          if (v16 == 1633889587)
            v18 = 10;
          else
            v18 = 12;
          memcpy(__dst, &v9[v15], v18);
          if (__dst[0] != 2935)
          {
            if (__dst[0] != 30475)
              goto LABEL_20;
            v26 = 1;
          }
          LOBYTE(v25) = 1;
        }
      }
LABEL_20:
      if (EC3PacketParser::IsValid((EC3PacketParser *)buf))
      {
        *a3 = HIDWORD(v27);
        *v21 = v11 + v15;
        if (v9)
          goto LABEL_24;
        return v14;
      }
      ++v15;
      v13 = v23 - 1;
      v23 = v13;
      if (v8 + v15 > v13)
      {
        v10 = v11 + v15;
        a4 = v20;
        goto LABEL_6;
      }
    }
  }
  v14 = 4294967257;
  if (v9)
LABEL_24:
    free(v9);
  return v14;
}

void sub_18EF1BB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a13)
    free(a13);
  _Unwind_Resume(exception_object);
}

uint64_t EC3AudioFile::ParseOneCycle(EC3AudioFile *this, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  BOOL v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  BOOL v20;
  int v21;
  unsigned int v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  BOOL v27;
  unsigned int v28;
  BOOL v29;
  AudioStreamBasicDescription v30;
  uint64_t v31;
  _BYTE v32[9];
  unsigned int v33[2];
  _BYTE buf[12];
  _BYTE v35[6];
  __int16 v36;
  EC3AudioFile *v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 161))
    return 0;
  v10 = *((_DWORD *)this + 21) == 1633889587;
  *(_QWORD *)&v32[1] = 0;
  *(_QWORD *)v33 = 0;
  if (v10)
    v7 = 10;
  else
    v7 = 12;
  if (a3)
    bzero((char *)this + 200, 0x40uLL);
  v3 = (*(uint64_t (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v32[1]);
  if (!(_DWORD)v3)
  {
    bzero(*((void **)this + 22), *((unsigned int *)this + 46));
    v8 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, unsigned int *))(**((_QWORD **)this + 13)
                                                                                             + 48))(*((_QWORD *)this + 13), 0, a2, v7, *((_QWORD *)this + 22), &v33[1]);
    if ((_DWORD)v8)
      v10 = 1;
    else
      v10 = v33[1] == 0;
    if (v10)
    {
      v3 = v8;
      *((_BYTE *)this + 161) = 1;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v28 = 0;
      v15 = 0;
      v31 = 0;
      memset(&v30.mFormatID, 0, 32);
      while (1)
      {
        v30.mSampleRate = 0.0;
        v32[0] = 0;
        v17.n128_f64[0] = EC3StreamParser::AssessPacketHeader((EC3StreamParser *)(*((_QWORD *)this + 22) + 12 * v13), (const void *)v7, v33, (unsigned int *)v32, (BOOL *)&v30.mFormatID, (AudioStreamBasicDescription *)((char *)&v30.mSampleRate + 4), (unsigned int *)&v30, v9);
        v3 = v16;
        if (a3 && !(_DWORD)v16)
        {
          if (v12 == *((_DWORD *)this + 47))
            *((_DWORD *)this + 48) = LODWORD(v30.mSampleRate);
          v3 = EC3StreamParser::AssessPacket(*((char ***)this + 21), (unsigned __int8 *)(*((_QWORD *)this + 22) + 12 * v13), v7, v13, (unsigned int *)buf, &v29);
        }
        v18 = v33[0];
        v20 = (_DWORD)v3 == -2 && v33[0] != 0;
        if ((_DWORD)v3 && !v20)
        {
          if (kAFSubSytemEC3)
          {
            v24 = *(NSObject **)kAFSubSytemEC3;
            if (!*(_QWORD *)kAFSubSytemEC3)
              goto LABEL_16;
          }
          else
          {
            v24 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "EC3AudioFile.cpp";
            *(_WORD *)v35 = 1024;
            *(_DWORD *)&v35[2] = 470;
            v36 = 2048;
            v37 = this;
            v38 = 1024;
            v39 = v3;
            _os_log_impl(&dword_18EE07000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EC3AudioFile(%p): AssessPacketHeader failed, err = %d", buf, 0x22u);
          }
          goto LABEL_16;
        }
        if (!(v13 | v32[0]))
          goto LABEL_55;
        if (v32[0] && v13)
        {
          v3 = 0;
          goto LABEL_63;
        }
        v21 = *((_DWORD *)this + 21);
        if (v21 == 1633889587)
        {
          *((_QWORD *)this + v12 + 25) += v33[0];
          v14 = (v18 + v14);
        }
        else
        {
          if (!v32[0] && HIDWORD(v30.mSampleRate) == 1 && ++v12 >= 8)
          {
LABEL_55:
            v3 = 0xFFFFFFFFLL;
            goto LABEL_16;
          }
          *((_QWORD *)this + v12 + 25) += v33[0];
          v22 = *((_DWORD *)this + 47);
          if (v12 >= v22)
          {
            if (v12 == v22)
              v23 = v18;
            else
              v23 = 0;
            v14 = (v23 + v14);
          }
          else
          {
            v28 += v18;
          }
        }
        v15 += v18;
        if (*((_BYTE *)this + 161) || v15 + a2 >= *(uint64_t *)&v32[1])
        {
          v3 = 0;
          ++v13;
          goto LABEL_62;
        }
        if (v13)
        {
          if (v13 - 71 < 0xFFFFFFB8)
            goto LABEL_60;
        }
        else if (v21 == 1633889587)
        {
LABEL_60:
          v3 = 0;
          ++v13;
          goto LABEL_63;
        }
        v3 = (*(uint64_t (**)(_QWORD, _QWORD, __n128))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, v17);
        if ((_DWORD)v3 || !v33[1])
          break;
        ++v13;
      }
      ++v13;
LABEL_62:
      *((_BYTE *)this + 161) = 1;
LABEL_63:
      if (!(_DWORD)v3 && (_DWORD)v14)
      {
        v25 = a2 + v28;
        if (v25 + v14 > *(uint64_t *)&v32[1])
          return 0;
        *(_QWORD *)buf = v25 - *((_QWORD *)this + 9);
        *(_DWORD *)&buf[8] = 0;
        *(_DWORD *)v35 = v14;
        AudioFileObject::AppendPacket(this, (const AudioStreamPacketDescription *)buf);
        if (v14 > (*(unsigned int (**)(EC3AudioFile *))(*(_QWORD *)this + 632))(this))
          (*(void (**)(EC3AudioFile *, uint64_t))(*(_QWORD *)this + 648))(this, v14);
        if (a3)
        {
          (*(void (**)(EC3AudioFile *, AudioFormatID *))(*(_QWORD *)this + 176))(this, &v30.mFormatID);
          v27 = v30.mBytesPerPacket == 1633889587 && v13 > 1;
          *((_BYTE *)this + 160) = v27;
          v3 = EC3AudioFile::ConstructMagicCookie(this);
        }
        else
        {
          v3 = 0;
        }
        *((_QWORD *)this + 33) = v15 + a2;
      }
    }
    if ((_DWORD)v3)
LABEL_16:
      *((_BYTE *)this + 161) = 1;
  }
  return v3;
}

void EC3StreamParser::~EC3StreamParser(EC3StreamParser *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 21);
  if (v2)
  {
    *((_QWORD *)this + 22) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>>>::destroy(*((_QWORD **)this + 2));
}

void std::__tree<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<AudioFormatListItem>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<AudioFormatListItem>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t EC3AudioFile::ConstructMagicCookie(EC3AudioFile *this)
{
  uint64_t *v2;
  size_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned int v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  unsigned int v22;
  std::bad_alloc *exception;
  std::bad_alloc *v25;
  std::bad_alloc *v26;
  std::bad_alloc *v27;
  unsigned int v28;
  unsigned int v29[7];
  unsigned int v30;
  _BYTE buf[12];
  _BYTE size[6];
  __int16 size_6;
  EC3AudioFile *v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)*((_QWORD *)this + 15);
  if (v2 && v2[3] > 0)
  {
    v30 = 0;
    CompressedPacketTable::operator[]((uint64_t)buf, v2, 0);
    v3 = *(unsigned int *)size;
    v4 = (unsigned __int8 *)malloc_type_malloc(*(unsigned int *)size, 0x2C8E6D5CuLL);
    v5 = v4;
    if ((_DWORD)v3 && !v4)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v25 = std::bad_alloc::bad_alloc(exception);
    }
    bzero(v4, v3);
    v6 = *((_QWORD *)this + 13);
    v7 = *((_QWORD *)this + 9);
    CompressedPacketTable::operator[]((uint64_t)buf, v2, 0);
    v8 = *(_QWORD *)buf;
    CompressedPacketTable::operator[]((uint64_t)v29, v2, 0);
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, unsigned __int8 *, unsigned int *))(*(_QWORD *)v6 + 48))(v6, 0, v8 + v7, v29[3], v5, &v30);
    if ((_DWORD)v9)
      goto LABEL_46;
    free(*((void **)this + 18));
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    v10 = *((_DWORD *)this + 8);
    v28 = 45;
    v29[0] = 11;
    if (v10 == 1633889587)
      v11 = 11;
    else
      v11 = 0;
    v12 = v10 != 1700998451 && *((_BYTE *)this + 160) == 0;
    v13 = !v12;
    if (v12)
      v14 = v11;
    else
      v14 = v11 + 45;
    v15 = (unsigned __int8 *)malloc_type_malloc(v14, 0x2C8E6D5CuLL);
    v16 = v15;
    if (!v15 && (v10 == 1633889587) | v13)
    {
      v26 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v27 = std::bad_alloc::bad_alloc(v26);
    }
    bzero(v15, v14);
    *((_QWORD *)this + 18) = v16;
    if (v10 == 1633889587)
    {
      v17 = ConvertAC3HeaderToAC3MP4Cookie(v5, v30, v16, v29);
      v18 = v29[0];
      if ((_DWORD)v17)
      {
        v9 = v17;
        goto LABEL_35;
      }
      v20 = v29[0];
    }
    else
    {
      v18 = 0;
      v20 = 0;
    }
    if (v10 == 1700998451 || *((_BYTE *)this + 160))
    {
      v9 = ConvertEAC3HeaderToEAC3MP4Cookie(v5, v30, (unsigned __int8 *)(*((_QWORD *)this + 18) + v20), &v28);
      if ((_DWORD)v9)
      {
LABEL_36:
        if (kAFSubSytemEC3)
        {
          v21 = *(NSObject **)kAFSubSytemEC3;
          if (!*(_QWORD *)kAFSubSytemEC3)
          {
LABEL_44:
            free(*((void **)this + 18));
            v22 = 0;
            *((_QWORD *)this + 18) = 0;
            goto LABEL_45;
          }
        }
        else
        {
          v21 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "EC3AudioFile.cpp";
          *(_WORD *)size = 1024;
          *(_DWORD *)&size[2] = 636;
          size_6 = 2048;
          v34 = this;
          v35 = 1024;
          v36 = v9;
          _os_log_impl(&dword_18EE07000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EC3AudioFile(%p): got a bad magic cookie, err = %d!", buf, 0x22u);
        }
        goto LABEL_44;
      }
LABEL_40:
      v22 = v28 + v18;
LABEL_45:
      *((_DWORD *)this + 38) = v22;
LABEL_46:
      free(v5);
      return v9;
    }
    v9 = 0;
LABEL_35:
    v28 = 0;
    if ((_DWORD)v9)
      goto LABEL_36;
    goto LABEL_40;
  }
  if (!kAFSubSytemEC3)
  {
    v19 = MEMORY[0x1E0C81028];
LABEL_27:
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "EC3AudioFile.cpp";
      *(_WORD *)size = 1024;
      *(_DWORD *)&size[2] = 588;
      size_6 = 2048;
      v34 = this;
      _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EC3AudioFile(%p): cannot find magic cookie, packet data not available!", buf, 0x1Cu);
    }
    return 0xFFFFFFFFLL;
  }
  v19 = *(NSObject **)kAFSubSytemEC3;
  if (*(_QWORD *)kAFSubSytemEC3)
    goto LABEL_27;
  return 0xFFFFFFFFLL;
}

void EC3AudioFormat::~EC3AudioFormat(EC3AudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

BOOL EC3AudioFormat::ExtensionIsThisFormat(EC3AudioFormat *this, CFStringRef theString1)
{
  const __CFString *v3;
  uint64_t v4;

  if (*((_DWORD *)this + 2) == 1633889587)
  {
    v3 = CFSTR("ac3");
    return CFStringCompare(theString1, v3, 1uLL) == kCFCompareEqualTo;
  }
  v4 = 1;
  if (CFStringCompare(theString1, CFSTR("ec3"), 1uLL))
  {
    v3 = CFSTR("eac3");
    return CFStringCompare(theString1, v3, 1uLL) == kCFCompareEqualTo;
  }
  return v4;
}

uint64_t EC3AudioFormat::FileDataIsThisFormat(EC3AudioFormat *this, unsigned int a2, const void *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  char *v11;
  void (**v13)(Buffer_DataSource *__hidden);
  char v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  uint8_t buf[4];
  __int128 v22;
  char v23;
  uint64_t v24;
  int v25;
  __int16 __dst[6];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 2);
  if (v3 == 1633889587)
    v4 = 10;
  else
    v4 = 12;
  if (v4 > a2)
    return 0xFFFFFFFFLL;
  v14 = 0;
  v13 = &off_1E2907000;
  v5 = a2;
  v15 = a2;
  v16 = a3;
  v17 = 0;
  if (!a2)
    return 0xFFFFFFFFLL;
  if (a2 >= (uint64_t)v4)
    v5 = v4;
  v18 = v5;
  v19 = 0;
  v20 = 0;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes(&v19, 0x28uLL, 1);
  v6 = (char *)v19;
  if (!v19)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&v22 = "EC3AudioFile.cpp";
      WORD4(v22) = 1024;
      *(_DWORD *)((char *)&v22 + 10) = 56;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  couldn't make space", buf, 0x12u);
    }
    return 0;
  }
  v20 = 0;
  Buffer_DataSource::ReadBytes((Buffer_DataSource *)&v13, 0, 0, 0x28u, v19, &v20);
  v7 = 0;
  if (v20 != 40)
    goto LABEL_33;
  if (v3 == 1633889587)
    v8 = 31;
  else
    v8 = 29;
  if (v3 == 1633889587)
    v9 = 10;
  else
    v9 = 12;
  v10 = 40;
  v11 = v6;
  while (1)
  {
    *(_DWORD *)buf = v3;
    LOWORD(v22) = 0;
    *(_QWORD *)((char *)&v22 + 4) = v11;
    HIDWORD(v22) = v10;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    if ((v3 | 0x4000000) == 0x65632D33 && v4 <= v10)
    {
      memcpy(__dst, v11, v9);
      if (__dst[0] != 2935)
      {
        if (__dst[0] != 30475)
          goto LABEL_23;
        v23 = 1;
      }
      LOBYTE(v22) = 1;
    }
LABEL_23:
    if (EC3PacketParser::IsValid((EC3PacketParser *)buf))
      break;
    v10 = --v20;
    ++v11;
    if (!--v8)
    {
      v7 = 0;
      goto LABEL_32;
    }
  }
  v7 = 1;
LABEL_32:
  if (v6)
LABEL_33:
    free(v6);
  return v7;
}

void sub_18EF1C730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15)
    free(a15);
  _Unwind_Resume(exception_object);
}

uint64_t AudioFileFormatBase::ResourceIsThisFormat(AudioFileFormatBase *this, const FSRef *a2)
{
  return 0;
}

uint64_t AudioFileFormatBase::CanRead(AudioFileFormatBase *this)
{
  return 1;
}

uint64_t AudioFileFormatBase::CanWrite(AudioFileFormatBase *this)
{
  return 1;
}

uint64_t AudioFileFormatBase::HasResourceFork(AudioFileFormatBase *this)
{
  return 0;
}

const __CFArray *EC3AudioFormat::GetExtensions(EC3AudioFormat *this, const __CFArray **a2)
{
  int v3;
  CFIndex v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  const __CFString *v8;
  const __CFArray *result;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 2);
  if (v3 == 1633889587)
    v4 = 1;
  else
    v4 = 2;
  MEMORY[0x1E0C80A78](this);
  v6 = (char *)v10 - v5;
  bzero((char *)v10 - v5, v7);
  if (v3 == 1633889587)
  {
    v8 = CFSTR("ac3");
  }
  else
  {
    *((_QWORD *)v6 + 1) = CFSTR("eac3");
    v8 = CFSTR("ec3");
  }
  *(_QWORD *)v6 = v8;
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v6, v4, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *EC3AudioFormat::GetUTIs(EC3AudioFormat *this, const __CFArray **a2)
{
  const __CFString *v3;
  const __CFArray *result;
  const void *v5[2];

  v5[1] = *(const void **)MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 2) == 1633889587)
    v3 = CFSTR("public.ac3-audio");
  else
    v3 = CFSTR("public.enhanced-ac3-audio");
  v5[0] = v3;
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *EC3AudioFormat::GetMIMETypes(EC3AudioFormat *this, const __CFArray **a2)
{
  int v3;
  BOOL v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 2);
  v4 = v3 == 1633889587;
  if (v3 == 1633889587)
    v5 = CFSTR("audio/ac3");
  else
    v5 = CFSTR("audio/eac3");
  v6 = CFSTR("audio/x-eac3");
  if (v4)
    v6 = CFSTR("audio/x-ac3");
  values[0] = (void *)v5;
  values[1] = (void *)v6;
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void EC3AudioFormat::GetFileTypeName(EC3AudioFormat *this, const __CFString **a2)
{
  const __CFString *v4;
  char v5;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  if (*((_DWORD *)this + 2) == 1633889587)
    v4 = CFSTR("AC3");
  else
    v4 = CFSTR("EC3");
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

uint64_t EC3AudioFormat::GetAvailableFormatIDs(EC3AudioFormat *this, unsigned int *a2, void *__dst)
{
  int v3;
  size_t v4;
  int __src;

  if (*((_DWORD *)this + 2) == 1633889587)
    v3 = 1633889587;
  else
    v3 = 1700998451;
  __src = v3;
  if (*a2 >= 4)
    v4 = 4;
  else
    v4 = *a2 & 0xFFFFFFFC;
  *a2 = v4;
  if (__dst)
    memcpy(__dst, &__src, v4);
  return 0;
}

uint64_t EC3AudioFormat::GetAvailableStreamDescriptions(EC3AudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  size_t v4;
  _OWORD v6[2];
  uint64_t v7;

  if ((a2 | 0x4000000) == 0x65632D33)
  {
    v7 = 0;
    memset(v6, 0, sizeof(v6));
    DWORD2(v6[0]) = a2;
    if (*a3 >= 0x28)
      v4 = 40;
    else
      v4 = 0;
    *a3 = v4;
    if (__dst)
      memcpy(__dst, v6, v4);
    return 0;
  }
  else
  {
    *a3 = 0;
    return 1718449215;
  }
}

uint64_t EC3AudioFormat::GetHFSCodes(EC3AudioFormat *this, unsigned int *a2, void *__dst)
{
  int v3;
  size_t v4;
  int __src;

  if (*((_DWORD *)this + 2) == 1633889587)
    v3 = 1633889587;
  else
    v3 = 1700998451;
  __src = v3;
  if (*a2 >= 4)
    v4 = 4;
  else
    v4 = *a2 & 0xFFFFFFFC;
  *a2 = v4;
  if (__dst)
    memcpy(__dst, &__src, v4);
  return 0;
}

uint64_t AudioFileFormatBase::AsAudioFileFormatComponent(AudioFileFormatBase *this)
{
  return 0;
}

uint64_t EC3AudioFormat::New(EC3AudioFormat *this)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  size_t v5;

  v2 = operator new();
  v3 = *((_DWORD *)this + 2);
  *(_DWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 80) = 1;
  *(_DWORD *)(v2 + 84) = v3;
  *(_QWORD *)(v2 + 88) = 0;
  *(_DWORD *)(v2 + 96) = -1;
  *(_WORD *)(v2 + 100) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_DWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0x100000000;
  *(_DWORD *)(v2 + 136) = 65792;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)v2 = &off_1E2902110;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 264) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  *(_WORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  *v4 = os_log_create("com.apple.coreaudio", "afec3");
  kAFSubSytemEC3 = (uint64_t)v4;
  bzero((void *)(v2 + 200), 0x40uLL);
  if (*(_DWORD *)(v2 + 84) == 1633889587)
    v5 = 10;
  else
    v5 = 864;
  *(_DWORD *)(v2 + 184) = v5;
  *(_QWORD *)(v2 + 176) = malloc_type_calloc(1uLL, v5, 0x1262F1A9uLL);
  return v2;
}

void sub_18EF1CC98(_Unwind_Exception *a1)
{
  AudioFileObject *v1;

  AudioFileObject::~AudioFileObject(v1);
  MEMORY[0x193FFE460]();
  _Unwind_Resume(a1);
}

EC3AudioStream *EC3AudioFormat::NewStream(EC3AudioFormat *this)
{
  EC3AudioStream *v1;

  v1 = (EC3AudioStream *)operator new();
  EC3AudioStream::EC3AudioStream(v1);
  return v1;
}

void sub_18EF1CD00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10B1C404537FDE6);
  _Unwind_Resume(a1);
}

void DSPGraph::MantissaRandomizerBox::~MantissaRandomizerBox(DSPGraph::MantissaRandomizerBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x193FFE460);
}

const char *DSPGraph::MantissaRandomizerBox::ClassName(DSPGraph::MantissaRandomizerBox *this)
{
  return "MantissaRandomizerBox";
}

uint64_t DSPGraph::MantissaRandomizerBox::canBypass(DSPGraph::MantissaRandomizerBox *this)
{
  return 1;
}

uint64_t DSPGraph::MantissaRandomizerBox::isBypassed(DSPGraph::MantissaRandomizerBox *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 772);
  return v1 & 1;
}

uint64_t DSPGraph::MantissaRandomizerBox::bypass(uint64_t this, unsigned __int8 a2)
{
  atomic_store(a2, (unsigned __int8 *)(this + 772));
  return this;
}

uint64_t DSPGraph::MantissaRandomizerBox::canProcessInPlace(DSPGraph::MantissaRandomizerBox *this)
{
  return 1;
}

uint64_t DSPGraph::MantissaRandomizerBox::setParameter(uint64_t this, int a2, int a3, int a4, float a5)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10866, &v8, 90, &v7, &v6);
  }
  if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10877, &v8, 93, &v7, &v6);
  }
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10878, &v8, 100, &v7, &v6);
  }
  v5 = llroundf(a5);
  if (v5 >= 23)
    v5 = 23;
  atomic_store(v5 & ~(v5 >> 63), (unsigned int *)(this + 776));
  return this;
}

void sub_18EF1CEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

float DSPGraph::MantissaRandomizerBox::getParameter(DSPGraph::MantissaRandomizerBox *this, int a2, int a3, int a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10866, &v8, 71, &v7, &v6);
  }
  if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10877, &v8, 74, &v7, &v6);
  }
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10878, &v8, 79, &v7, &v6);
  }
  return (float)atomic_load((unsigned int *)this + 194);
}

void sub_18EF1D034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void DSPGraph::MantissaRandomizerBox::getParameterList(int a1@<W1>, _QWORD *a2@<X8>)
{
  _DWORD *v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    v4 = operator new(4uLL);
    *a2 = v4;
    *v4++ = 0;
    a2[1] = v4;
    a2[2] = v4;
  }
}

__n128 DSPGraph::MantissaRandomizerBox::getParameterInfo@<Q0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  int v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = -10866;
  }
  else
  {
    if (!a2)
    {
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v14.n128_u32[2] = 1102577664;
      v14.n128_u32[0] = 1;
      v15 = 3221225472;
      strlcpy((char *)&v9, "bits to randomize", 0x34uLL);
      *((_QWORD *)&v13 + 1) = CFSTR("bits to randomize");
      LODWORD(v15) = v15 | 0x8000000;
      v6 = v10;
      *(_OWORD *)a3 = v9;
      *(_OWORD *)(a3 + 16) = v6;
      v7 = v12;
      *(_OWORD *)(a3 + 32) = v11;
      *(_OWORD *)(a3 + 48) = v7;
      result = v14;
      *(_OWORD *)(a3 + 64) = v13;
      *(__n128 *)(a3 + 80) = result;
      *(_QWORD *)(a3 + 96) = v15;
      *(_BYTE *)(a3 + 104) = 1;
      return result;
    }
    v5 = -10878;
  }
  *(_DWORD *)a3 = v5;
  *(_BYTE *)(a3 + 104) = 0;
  return result;
}

void sub_18EF1D1C0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

double DSPGraph::MantissaRandomizerBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.62656313e219;
  *(_OWORD *)a1 = xmmword_18F116FA0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

_QWORD *DSPGraph::MantissaRandomizerBox::process(DSPGraph::MantissaRandomizerBox *this, unsigned int a2, int32x2_t a3)
{
  unsigned int v4;
  unsigned __int8 v5;
  unsigned int v6;
  int32x4_t v7;
  int8x16_t v8;
  uint32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  __int32 v17;
  __int32 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *result;
  _QWORD *v35;
  _OWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int32x2_t v52;
  __int128 v54;
  __int128 v55;
  __int128 v56[2];

  v4 = atomic_load((unsigned int *)this + 194);
  v5 = atomic_load((unsigned __int8 *)this + 772);
  if ((v5 & 1) != 0 || !v4)
  {
    v27 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 9) == v27)
    {
      std::string::basic_string[abi:ne180100]<0>(v56, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v55, "in");
      v46 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v46 = (_QWORD *)*v46;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v54, v46, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, v56, 1410, &v55, &v54);
    }
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    v29 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v29)
    {
      std::string::basic_string[abi:ne180100]<0>(v56, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v55, "out");
      v48 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v48 = (_QWORD *)*v48;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v54, v48, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, v56, 1418, &v55, &v54);
    }
    v30 = (_QWORD *)(*(_QWORD *)(v28 + 56) + 80);
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
    DSPGraph::SimpleABL::copy(v30, (DSPGraph::SimpleABL *)(*(_QWORD *)(v31 + 56) + 80), 1);
  }
  else
  {
    v6 = (v4 + 3) & 0xFFFFFFFC;
    a3.i32[0] = v4 - 1;
    v52 = a3;
    v7 = (int32x4_t)xmmword_18F116EA0;
    v8 = 0uLL;
    v9.i64[0] = 0x100000001;
    v9.i64[1] = 0x100000001;
    v10.i64[0] = 0x400000004;
    v10.i64[1] = 0x400000004;
    do
    {
      v11 = v7;
      v12 = v8;
      v8 = vorrq_s8(v8, (int8x16_t)vshlq_u32(v9, (uint32x4_t)v7));
      v7 = vaddq_s32(v7, v10);
      v6 -= 4;
    }
    while (v6);
    v49 = (uint32x4_t)v11;
    v50 = v12;
    v51 = v8;
    v13 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v13)
    {
      std::string::basic_string[abi:ne180100]<0>(v56, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v55, "out");
      v47 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v47 = (_QWORD *)*v47;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v54, v47, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, v56, 1418, &v55, &v54);
    }
    v14 = **(unsigned int **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13) + 56) + 80);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = vbslq_s8((int8x16_t)vcgtq_u32(v49, (uint32x4_t)vdupq_lane_s32(v52, 0)), v50, v51);
      *(int8x8_t *)v16.i8 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      v17 = v16.i32[0] | v16.i32[1];
      v18 = ~(v16.i32[0] | v16.i32[1]);
      do
      {
        v19 = *((_QWORD *)this + 8);
        if (*((_QWORD *)this + 9) == v19)
        {
          std::string::basic_string[abi:ne180100]<0>(v56, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v55, "in");
          v43 = (_QWORD *)((char *)this + 32);
          if (*((char *)this + 55) < 0)
            v43 = (_QWORD *)*v43;
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v54, v43, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
          DSPGraph::ThrowException(1919837985, v56, 1410, &v55, &v54);
        }
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        v21 = *((_QWORD *)this + 11);
        if (*((_QWORD *)this + 12) == v21)
        {
          std::string::basic_string[abi:ne180100]<0>(v56, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(&v55, "out");
          v44 = (_QWORD *)((char *)this + 32);
          if (*((char *)this + 55) < 0)
            v44 = (_QWORD *)*v44;
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v54, v44, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
          DSPGraph::ThrowException(1919837985, v56, 1418, &v55, &v54);
        }
        v22 = *(int **)(*(_QWORD *)(*(_QWORD *)(v20 + 56) + 80) + 16 * v15 + 16);
        v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
        if (a2)
        {
          v24 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v23 + 56) + 80) + 16 * v15 + 16);
          v25 = 4 * a2;
          do
          {
            v26 = *v22++;
            LODWORD(v56[0]) = 0;
            DWORD1(v56[0]) = v17;
            *v24++ = std::uniform_int_distribution<unsigned int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)((char *)this + 784), v56) | v26 & v18;
            v25 -= 4;
          }
          while (v25);
        }
        ++v15;
      }
      while (v15 != v14);
    }
  }
  v32 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v32)
  {
    std::string::basic_string[abi:ne180100]<0>(v56, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v55, "in");
    v45 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v45 = (_QWORD *)*v45;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v54, v45, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, v56, 1410, &v55, &v54);
  }
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
  result = (_QWORD *)*((_QWORD *)this + 11);
  v35 = (_QWORD *)*((_QWORD *)this + 12);
  if (result != v35)
  {
    v36 = (_OWORD *)(*(_QWORD *)(v33 + 56) + 8);
    v37 = result;
    do
    {
      v38 = *v37;
      v37 += 4;
      v39 = *(_QWORD *)((*(uint64_t (**)(void))(v38 + 40))() + 56);
      v41 = v36[2];
      v40 = v36[3];
      v42 = v36[1];
      *(_OWORD *)(v39 + 8) = *v36;
      *(_OWORD *)(v39 + 24) = v42;
      *(_OWORD *)(v39 + 40) = v41;
      *(_OWORD *)(v39 + 56) = v40;
      *(_DWORD *)(v39 + 72) = 0;
      result = v37;
    }
    while (v37 != v35);
  }
  return result;
}

void sub_18EF1D704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a28 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v34 - 89) < 0)
    operator delete(*(void **)(v34 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::MantissaRandomizerBox::initialize(DSPGraph::MantissaRandomizerBox *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  DSPGraph::Box::initialize(this);
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v23, "in");
    v9 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v9 = (_QWORD *)*v9;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v22, v9, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v24, 1410, &v23, &v22);
  }
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v23, "out");
    v10 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v10 = (_QWORD *)*v10;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v22, v10, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v24, 1418, &v23, &v22);
  }
  v5 = *(_DWORD *)(*(_QWORD *)(v3 + 120) + 28);
  if (v5 != *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) + 120) + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "initialize");
    v11 = *((_QWORD *)this + 8);
    if (*((_QWORD *)this + 9) == v11)
    {
      std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v23, "in");
      v12 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v12 = (_QWORD *)*v12;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v22, v12, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v24, 1410, &v23, &v22);
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    v16 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v16)
    {
      std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v23, "out");
      v17 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v17 = (_QWORD *)*v17;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v22, v17, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
      DSPGraph::ThrowException(1919837985, &v24, 1418, &v23, &v22);
    }
    v18 = *(unsigned int *)(*(_QWORD *)(v15 + 120) + 28);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    DSPGraph::strprintf((DSPGraph *)"input and output must have the same channel count, but have %u and %u", &v24, v18, *(unsigned int *)(*(_QWORD *)(v19 + 120) + 28));
    DSPGraph::ThrowException(1667788321, &v21, 109, &v20, &v24);
  }
  v6 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v23, "in");
    v13 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v13 = (_QWORD *)*v13;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", &v22, v13, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v24, 1410, &v23, &v22);
  }
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) + 120) + 8) != 1819304813)
    goto LABEL_8;
  v7 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v23, "out");
    v14 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v14 = (_QWORD *)*v14;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", &v22, v14, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException(1919837985, &v24, 1418, &v23, &v22);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if (*(_DWORD *)(*(_QWORD *)(result + 120) + 8) != 1819304813)
  {
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(&v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_MantissaRandomizerBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v23, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v22, "input and output must both be time-domain");
    DSPGraph::ThrowException(1718449215, &v24, 115, &v23, &v22);
  }
  return result;
}

void sub_18EF1DBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 41) < 0)
    operator delete(*(void **)(v29 - 64));
  if (*(char *)(v29 - 17) < 0)
    operator delete(*(void **)(v29 - 40));
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void TSimpleMarshaller<MixerDistanceParams>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<MixerDistanceParams>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 12)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 12;
}

BOOL TMarshaller<MixerDistanceParams>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if (*a4 != 12 && *a4 != 0)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 0xCuLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<MixerDistanceParams>::SerializeT(int a1, CASerializer *this, char *a3)
{
  CASerializer::Write(this, a3);
  CASerializer::Write(this, a3 + 4);
  return CASerializer::Write(this, a3 + 8);
}

uint64_t TSimpleMarshaller<MixerDistanceParams>::DeserializeT(int a1, CADeserializer *this, char *a3)
{
  CADeserializer::Read(this, a3);
  CADeserializer::Read(this, a3 + 4);
  return CADeserializer::Read(this, a3 + 8);
}

void Marshaller::CheckDest(Marshaller *this, void **a2, unsigned int *a3, unint64_t a4)
{
  unsigned int v4;
  char *v7;
  void **v8;
  unint64_t v9;

  v4 = a4;
  if (!*a2)
  {
    v7 = (char *)*((_QWORD *)this + 5);
    v8 = (void **)((char *)this + 40);
    v9 = *((_QWORD *)this + 6) - (_QWORD)v7;
    if (a4 <= v9)
    {
      if (a4 < v9)
        *((_QWORD *)this + 6) = &v7[a4];
    }
    else
    {
      std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 40), a4 - v9);
      v7 = (char *)*v8;
    }
    *a2 = v7;
    goto LABEL_9;
  }
  if (*a3 > a4)
LABEL_9:
    *a3 = v4;
}

void Marshaller::~Marshaller(Marshaller *this)
{
  CFTypeRef *i;
  CFTypeRef *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = off_1E2900F70;
  v3 = (CFTypeRef *)*((_QWORD *)this + 1);
  for (i = (CFTypeRef *)*((_QWORD *)this + 2); v3 != i; i = (CFTypeRef *)*((_QWORD *)this + 2))
    CFRelease(*v3++);
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
}

void MarshalSpatialMixerImpulseResponses::~MarshalSpatialMixerImpulseResponses(MarshalSpatialMixerImpulseResponses *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x193FFE460);
}

BOOL MarshalSpatialMixerImpulseResponses::Serialize(MarshalSpatialMixerImpulseResponses *this, CASerializer *a2, char *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t i;
  uint64_t v15;

  if (a4 >= 0x28)
  {
    CASerializer::Write(a2, a3 + 8);
    CASerializer::Write(a2, a3 + 12);
    v15 = *((_QWORD *)a3 + 2);
    CASerializer::Write(a2, &v15);
    v15 = *((_QWORD *)a3 + 4);
    CASerializer::Write(a2, &v15);
    CASerializer::Write(a2, *((const void **)a3 + 3));
    v7 = *((unsigned __int16 *)a3 + 4);
    if (*((_WORD *)a3 + 4))
    {
      v8 = 0;
      v9 = *((unsigned __int16 *)a3 + 6);
      do
      {
        if ((_DWORD)v9)
        {
          v10 = 0;
          v11 = *((_QWORD *)a3 + 2);
          do
          {
            if (v11)
            {
              v12 = 0;
              for (i = 0; i < v11; ++i)
              {
                CASerializer::Write(a2, (const void *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8 * v8) + 8 * v10) + v12));
                v11 = *((_QWORD *)a3 + 2);
                v12 += 4;
              }
            }
            ++v10;
          }
          while (v10 != v9);
        }
        ++v8;
      }
      while (v8 != v7);
    }
  }
  return a4 > 0x27;
}

uint64_t MarshalSpatialMixerImpulseResponses::Deserialize(MarshalSpatialMixerImpulseResponses *this, CADeserializer *a2, void **a3, unsigned int *a4)
{
  uint64_t result;
  int v9;
  unsigned __int16 v10;
  _DWORD *v11;
  uint64_t Ptr;
  _BOOL4 var4;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = 0;
  CADeserializer::Read(a2, (char *)&v24 + 4);
  CADeserializer::Read(a2, &v24);
  result = 0;
  if (!a2->var4)
  {
    Marshaller::CheckDest(this, a3, a4, 8 * ((unsigned __int16)v24 * WORD2(v24) + (unint64_t)(WORD2(v24) - 1)) + 40);
    v9 = v24;
    v10 = WORD2(v24);
    v11 = *a3;
    v11[2] = HIDWORD(v24);
    v11[3] = v9;
    CADeserializer::Read(a2, v11 + 4);
    CADeserializer::Read(a2, v11 + 8);
    if (a2->var4)
      return 0;
    if (*((_QWORD *)v11 + 4))
    {
      Ptr = CADeserializer::GetAndAdvanceReadPtr(a2);
      result = 0;
      var4 = a2->var4;
      *((_QWORD *)v11 + 3) = Ptr;
      if (var4)
        return result;
    }
    else
    {
      *((_QWORD *)v11 + 3) = 0;
    }
    v14 = v10;
    if (v10)
      v15 = (char *)*a3 + 40;
    else
      v15 = 0;
    if (v10)
    {
      v16 = 0;
      v17 = (unsigned __int16)v9;
      v18 = &v15[8 * v10];
      v23 = v14;
      v19 = (uint64_t *)v18;
      do
      {
        if ((_DWORD)v17)
        {
          v20 = v19;
          v21 = v17;
          do
          {
            if (*((_QWORD *)v11 + 2))
            {
              v22 = CADeserializer::GetAndAdvanceReadPtr(a2);
              if (a2->var4)
                return 0;
            }
            else
            {
              v22 = 0;
            }
            *v20++ = v22;
            --v21;
          }
          while (v21);
        }
        *(_QWORD *)&v15[8 * v16] = &v18[8 * v16];
        ++v16;
        ++v19;
      }
      while (v16 != v23);
    }
    *(_QWORD *)v11 = v15;
    return 1;
  }
  return result;
}

void TArrayMarshaller<unsigned int>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t RawDataMarshaller::Serialize(RawDataMarshaller *this, CASerializer *a2, const void *a3)
{
  CASerializer::Write(a2, a3);
  return 1;
}

uint64_t TArrayMarshaller<unsigned int>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7;
  const void *Ptr;

  v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFFC);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void RawDataMarshaller::~RawDataMarshaller(RawDataMarshaller *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x193FFE460);
}

uint64_t RawDataMarshaller::Deserialize(RawDataMarshaller *this, CADeserializer *a2, void **a3, unsigned int *a4)
{
  void *v7;
  const void *Ptr;

  Marshaller::CheckDest(this, a3, a4, a2->var3 - a2->var2);
  v7 = *a3;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(a2);
  memcpy(v7, Ptr, *a4);
  return 1;
}

void TSimpleMarshaller<__CFURL const*>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<__CFURL const*>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 8;
}

BOOL TMarshaller<__CFURL const*>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<__CFURL const*>::SerializeT()
{
  return operator<<();
}

uint64_t TSimpleMarshaller<__CFURL const*>::DeserializeT()
{
  return operator>>();
}

void TSimpleMarshaller<unsigned int>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<unsigned int>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 4)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 4;
}

BOOL TMarshaller<unsigned int>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 4) != 4)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 4uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<unsigned int>::SerializeT(int a1, CASerializer *this, void *a3)
{
  return CASerializer::Write(this, a3);
}

uint64_t TSimpleMarshaller<unsigned int>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

void TArrayMarshaller<char>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t TArrayMarshaller<char>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7;
  const void *Ptr;

  v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<float>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t TArrayMarshaller<float>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7;
  const void *Ptr;

  v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFFC);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TSimpleMarshaller<float>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<float>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 4)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 4;
}

BOOL TMarshaller<float>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 4) != 4)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 4uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<float>::SerializeT(int a1, CASerializer *this, void *a3)
{
  return CASerializer::Write(this, a3);
}

uint64_t TSimpleMarshaller<float>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

void MarshalCFPropertyList::~MarshalCFPropertyList(MarshalCFPropertyList *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x193FFE460);
}

BOOL TMarshaller<void const*>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 8;
}

BOOL TMarshaller<void const*>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

void MarshalCFPropertyList::SerializeT(MarshalCFPropertyList *this, CASerializer *a2, const void **a3)
{
  CASerializer::WritePlist(a2, *a3);
  if (*a3)
  {
    if (*((_BYTE *)this + 32))
      CFRelease(*a3);
  }
}

void MarshalCFPropertyList::DeserializeT(MarshalCFPropertyList *this, CADeserializer *a2, const void **a3)
{
  const void *Plist;

  Plist = (const void *)CADeserializer::ReadPlist(a2);
  *a3 = Plist;
  Marshaller::AddCreatedCFObject(this, Plist);
}

void Marshaller::AddCreatedCFObject(Marshaller *this, const void *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  if (a2)
  {
    v5 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = *((_QWORD *)this + 3);
    if ((unint64_t)v5 >= v4)
    {
      v7 = *((_QWORD *)this + 1);
      v8 = ((uint64_t)v5 - v7) >> 3;
      if ((unint64_t)(v8 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v9 = v4 - v7;
      v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1))
        v10 = v8 + 1;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
        v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v11);
      else
        v12 = 0;
      v13 = (_QWORD *)(v11 + 8 * v8);
      v14 = v11 + 8 * v12;
      *v13 = a2;
      v6 = v13 + 1;
      v16 = (char *)*((_QWORD *)this + 1);
      v15 = (char *)*((_QWORD *)this + 2);
      if (v15 != v16)
      {
        do
        {
          v17 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v13 = v17;
        }
        while (v15 != v16);
        v15 = (char *)*((_QWORD *)this + 1);
      }
      *((_QWORD *)this + 1) = v13;
      *((_QWORD *)this + 2) = v6;
      *((_QWORD *)this + 3) = v14;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v5 = a2;
      v6 = v5 + 1;
    }
    *((_QWORD *)this + 2) = v6;
  }
}

FILE *CACopyObjectDescription(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  FILE *v5;
  FILE *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v4)
    a1 = v4;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v7 = funopen(&v7, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  (*(void (**)(uint64_t, FILE *))(*(_QWORD *)a1 + 16))(a1, v7);
  v5 = CAMemoryStream::cstr(&v7);
  if (a2)
    *a2 = v9;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  fclose(v7);
  free(v8);
  return v5;
}

void sub_18EF1EB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, FILE *a9, void *a10)
{
  fclose(a9);
  free(a10);
  _Unwind_Resume(a1);
}

void CAShowFile(void *inObject, FILE *inFile)
{
  uint64_t v4;

  v4 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v4)
    v4 = (uint64_t)inObject;
  (*(void (**)(uint64_t, FILE *))(*(_QWORD *)v4 + 16))(v4, inFile);
}

void CAShow(void *inObject)
{
  FILE *v2;
  uint64_t v3;
  NSObject *v4;
  FILE *v5;
  FILE *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  FILE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v2 = funopen(&v6, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  v6 = v2;
  v3 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v3)
    v3 = (uint64_t)inObject;
  (*(void (**)(uint64_t, FILE *))(*(_QWORD *)v3 + 16))(v3, v2);
  v4 = CADefaultLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = CAMemoryStream::cstr(&v6);
    *(_DWORD *)buf = 136315138;
    v11 = v5;
    _os_log_impl(&dword_18EE07000, v4, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  fclose(v6);
  free(v7);
}

void sub_18EF1EC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, FILE *a9, void *a10)
{
  fclose(a9);
  free(a10);
  _Unwind_Resume(a1);
}

uint64_t _ReportRPCTimeout(const char *a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, const char *);
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  dispatch_time_t v13;
  mach_port_t sp;
  _QWORD block[7];
  mach_port_t special_port[2];
  mach_port_t *v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  dispatch_semaphore_t v24;
  _BYTE buf[24];
  void *v26;
  __int128 *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (iEjr08d2 >= 1)
    goto LABEL_12;
  special_port[0] = 0;
  sp = 0;
  task_get_special_port(*MEMORY[0x1E0C83DA0], 4, special_port);
  result = bootstrap_look_up(special_port[0], "com.apple.coremedia.admin", &sp);
  if (!(_DWORD)result)
  {
    CADefaultLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      _os_log_error_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, "%s posting message to kill mediaserverd (%d)", buf, 0x12u);
    }

    v6 = sp;
    *(_QWORD *)&v20 = 0;
    *((_QWORD *)&v20 + 1) = &v20;
    v21 = 0x2020000000;
    v7 = (uint64_t (*)(uint64_t, uint64_t, const char *))getFigRPCTimeout_KillAndForceCrashReportSymbolLoc(void)::ptr;
    v22 = (uint64_t (*)(uint64_t, uint64_t))getFigRPCTimeout_KillAndForceCrashReportSymbolLoc(void)::ptr;
    if (!getFigRPCTimeout_KillAndForceCrashReportSymbolLoc(void)::ptr)
    {
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZL49getFigRPCTimeout_KillAndForceCrashReportSymbolLocv_block_invoke;
      v26 = &unk_1E29222D8;
      v27 = &v20;
      ___ZL49getFigRPCTimeout_KillAndForceCrashReportSymbolLocv_block_invoke(buf);
      v7 = *(uint64_t (**)(uint64_t, uint64_t, const char *))(*((_QWORD *)&v20 + 1) + 24);
    }
    _Block_object_dispose(&v20, 8);
    if (!v7)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "kern_return_t local_FigRPCTimeout_KillAndForceCrashReport(mach_port_t, natural_t, rpc_cstring_t)");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("RPCTimeout.mm"), 32, CFSTR("%s"), dlerror());

      while (1)
      {
        __break(1u);
LABEL_12:
        if (audiomxd_enabled())
          snprintf(buf, 0x100uLL, "%s: RPC timeout within audiomxd. Apparently deadlocked. Writing a stackshot and exiting.");
        else
          snprintf(buf, 0x100uLL, "%s: RPC timeout within mediaserverd. Apparently deadlocked. Writing a stackshot and exiting.");
        CADefaultLog();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        {
          LODWORD(v20) = 136315138;
          *(_QWORD *)((char *)&v20 + 4) = buf;
          _os_log_fault_impl(&dword_18EE07000, v10, OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&v20, 0xCu);
        }

        *(_QWORD *)special_port = 0;
        v17 = special_port;
        v18 = 0x2020000000;
        v19 = 0;
        *(_QWORD *)&v20 = 0;
        *((_QWORD *)&v20 + 1) = &v20;
        v21 = 0x3032000000;
        v22 = __Block_byref_object_copy__2303;
        v23 = __Block_byref_object_dispose__2304;
        v24 = dispatch_semaphore_create(0);
        v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCString:encoding:", buf, 134217984);
        dispatch_get_global_queue(33, 0);
        v12 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = ___Z17_ReportRPCTimeoutPKci_block_invoke;
        block[3] = &unk_1E2919EF8;
        block[5] = special_port;
        block[4] = v11;
        block[6] = &v20;
        dispatch_async(v12, block);

        v13 = dispatch_time(0, 5000000000);
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*((_QWORD *)&v20 + 1) + 40), v13);
        if (*((_BYTE *)v17 + 24))
          exit(1);
        abort_with_reason();
      }
    }
    return v7(v6, a2, a1);
  }
  return result;
}

void sub_18EF1F06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);

  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2303(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2304(uint64_t a1)
{

}

intptr_t ___Z17_ReportRPCTimeoutPKci_block_invoke(uint64_t a1)
{
  getpid();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = WriteStackshotReportWithPID();
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
}

void sub_18EF1F27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t ReportXPCTimeout(const char *a1)
{
  return _ReportRPCTimeout(a1, 0xFFFFFFFFLL);
}

void MP4BoxParser_HandlerReference::~MP4BoxParser_HandlerReference(MP4BoxParser_HandlerReference *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2902718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x193FFE460);
}

uint64_t MP4BoxParser_HandlerReference::Init(MP4BoxParser **this)
{
  uint64_t result;
  unsigned int v3;

  result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!(_DWORD)result)
  {
    if (*((_DWORD *)this + 5) == 1751411826)
    {
      v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      result = MP4BoxParser::ReadDataSourceBytes(this[1], v3 + 4, 4uLL, (char *)this + 60);
      if (!(_DWORD)result)
        *((_DWORD *)this + 15) = bswap32(*((_DWORD *)this + 15));
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

void HapticSharedMemoryWriter::~HapticSharedMemoryWriter(xpc_object_t *this)
{
  SharableMemoryBlock::~SharableMemoryBlock(this);
  JUMPOUT(0x193FFE460);
}

uint64_t destroyHapticCommandWriter(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

void sub_18EF1F49C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18EF1F8B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18EF1FD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18EF1FF34(_Unwind_Exception *a1)
{
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

void sub_18EF20158(_Unwind_Exception *a1)
{
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

void sub_18EF203A4(_Unwind_Exception *a1)
{
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

void sub_18EF21314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, const void *a17, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  applesauce::CF::TypeRef::~TypeRef(&a17);
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

void sub_18EF21684(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0xE1C40AACF12E9);
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

void sub_18EF218D0(_Unwind_Exception *a1)
{
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

void sub_18EF21C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

void sub_18EF21EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)va);
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

void sub_18EF220B0(_Unwind_Exception *a1)
{
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

void sub_18EF22290(_Unwind_Exception *a1)
{
  os_unfair_recursive_lock_unlock();
  _Unwind_Resume(a1);
}

void InternalAudioUnitPropertyMarshaller::~InternalAudioUnitPropertyMarshaller(InternalAudioUnitPropertyMarshaller *this)
{
  PropertyMarshaller::~PropertyMarshaller(this);
  JUMPOUT(0x193FFE460);
}

uint64_t InternalAudioUnitPropertyMarshaller::GetMarshaller(InternalAudioUnitPropertyMarshaller *this, AudioUnitPropertyMarshaller *a2)
{
  uint64_t result;

  result = AudioUnitPropertyMarshaller::CreateMarshaller(a2);
  if (!result)
  {
    result = operator new();
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = &off_1E29086D0;
    *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

void TestAUProcessingBlock::~TestAUProcessingBlock(TestAUProcessingBlock *this)
{
  AUProcessingBlock_AU_Instantiating::~AUProcessingBlock_AU_Instantiating((AUProcessingBlock_AU_Instantiating *)this);
  JUMPOUT(0x193FFE460);
}

uint64_t AUProcessingBlock_AU::AUGetPropertyInfo(AUProcessingBlock_AU *this, AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, UInt32 *outDataSize, Boolean *outWritable)
{
  return AudioUnitGetPropertyInfo(inUnit, inID, inScope, inElement, outDataSize, outWritable);
}

uint64_t AUProcessingBlock_AU::AUGetProperty(AUProcessingBlock_AU *this, AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, void *outData, UInt32 *ioDataSize)
{
  return AudioUnitGetProperty(inUnit, inID, inScope, inElement, outData, ioDataSize);
}

uint64_t AUProcessingBlock_AU::AUSetProperty(AUProcessingBlock_AU *this, AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, const void *inData, UInt32 inDataSize)
{
  return AudioUnitSetProperty(inUnit, inID, inScope, inElement, inData, inDataSize);
}

uint64_t AUProcessingBlock_AU::AUGetParameter(AUProcessingBlock_AU *this, AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue *outValue)
{
  return AudioUnitGetParameter(inUnit, inID, inScope, inElement, outValue);
}

uint64_t AUProcessingBlock_AU::AUSetParameter(AUProcessingBlock_AU *this, AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue a6)
{
  return AudioUnitSetParameter(inUnit, inID, inScope, inElement, a6, 0);
}

uint64_t *std::__tree<std::__value_type<unsigned int,RemoteAUHandleInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,RemoteAUHandleInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,RemoteAUHandleInfo>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

void __Block_byref_object_copy__2453(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__2454(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18EF228D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EF22970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EF22A0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EF22A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18EF22BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18EF22C44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EF22CAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18EF22D1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL AUProperty::Swizzler::addGetter(SEL name, objc_class *types, Class cls, void (*a4)(void))
{
  _BOOL8 result;

  result = class_addMethod(cls, name, a4, (const char *)types);
  if (!result)
    __assert_rtn("addGetter", "AUAudioUnitProperties.mm", 448, "class_addMethod(cls, mGetSelector, imp, mGetterTypes)");
  return result;
}

BOOL AUProperty::Swizzler::addSetter(SEL name, objc_class *types, Class cls, void (*a4)(void))
{
  _BOOL8 result;

  result = class_addMethod(cls, name, a4, (const char *)types);
  if (!result)
    __assert_rtn("addSetter", "AUAudioUnitProperties.mm", 453, "class_addMethod(cls, mSetSelector, imp, mSetterTypes)");
  return result;
}

IMP AUProperty::Swizzler::replaceGetter(SEL name, objc_class *types, Class cls, void (*a4)(void))
{
  IMP result;

  result = class_replaceMethod(cls, name, a4, (const char *)types);
  if (!result)
    __assert_rtn("replaceGetter", "AUAudioUnitProperties.mm", 458, "class_replaceMethod(cls, mGetSelector, imp, mGetterTypes)");
  return result;
}

IMP AUProperty::Swizzler::replaceSetter(SEL name, objc_class *types, Class cls, void (*a4)(void))
{
  IMP result;

  result = class_replaceMethod(cls, name, a4, (const char *)types);
  if (!result)
    __assert_rtn("replaceSetter", "AUAudioUnitProperties.mm", 463, "class_replaceMethod(cls, mSetSelector, imp, mSetterTypes)");
  return result;
}

uint64_t getPropertySizeXPC(AUAudioUnit *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  AUAudioUnit *v7;
  void *v8;
  void *v9;
  id v10;
  unsigned int v11;
  uint64_t v12;
  id v14;

  v7 = a1;
  +[AUAudioUnitProperty propertyWithKey:v2propID:scope:element:](AUAudioUnitProperty, "propertyWithKey:v2propID:scope:element:", CFSTR("_v2fwd_PropertySize"), a2, a3, a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  -[AUAudioUnit _valueForProperty:error:](v7, "_valueForProperty:error:", v8, &v14);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v14;

  if (v10)
  {
    v11 = objc_msgSend(v10, "code");
    v12 = 0;
  }
  else
  {
    v11 = objc_msgSend(v9, "unsignedIntValue");
    v12 = 0x100000000;
  }

  return v12 | v11;
}

void sub_18EF22F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void AUAudioUnitProperties::AUAudioUnitProperties(AUAudioUnitProperties *this)
{
  CFMutableDictionaryRef *v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 *v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  __int128 *v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  uint64_t v65;
  __int128 *v66;
  uint64_t v67;
  __int128 *v68;
  uint64_t v69;
  __int128 *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *v73;
  uint64_t v74;
  __int128 *v75;
  uint64_t v76;
  __int128 *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 *v80;
  uint64_t v81;
  __int128 *v82;
  uint64_t v83;
  __int128 *v84;
  uint64_t v85;
  __int128 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  uint64_t v91;
  __int128 *v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  __int128 *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  uint64_t v100;
  __int128 *v101;
  uint64_t v102;
  __int128 *v103;
  uint64_t v104;
  uint64_t v105;
  __int128 *v106;
  uint64_t v107;
  __int128 *v108;
  uint64_t v109;
  __int128 *v110;
  uint64_t v111;
  __int128 *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 *v115;
  uint64_t v116;
  __int128 *v117;
  uint64_t v118;
  __int128 *v119;
  uint64_t v120;
  uint64_t v121;
  __int128 *v122;
  uint64_t v123;
  __int128 *v124;
  uint64_t v125;
  __int128 *v126;
  uint64_t v127;
  __int128 *v128;
  uint64_t v129;
  uint64_t v130;
  __int128 *v131;
  uint64_t v132;
  __int128 *v133;
  uint64_t v134;
  __int128 *v135;
  uint64_t v136;
  uint64_t v137;
  __int128 *v138;
  uint64_t v139;
  __int128 *v140;
  uint64_t v141;
  __int128 *v142;
  uint64_t v143;
  __int128 *v144;
  uint64_t v145;
  uint64_t v146;
  __int128 *v147;
  uint64_t v148;
  __int128 *v149;
  uint64_t v150;
  __int128 *v151;
  uint64_t v152;
  __int128 *v153;
  uint64_t v154;
  uint64_t v155;
  __int128 *v156;
  uint64_t v157;
  __int128 *v158;
  uint64_t v159;
  __int128 *v160;
  uint64_t v161;
  __int128 *v162;
  uint64_t v163;
  uint64_t v164;
  __int128 *v165;
  uint64_t v166;
  __int128 *v167;
  uint64_t v168;
  __int128 *v169;
  uint64_t v170;
  uint64_t v171;
  __int128 *v172;
  uint64_t v173;
  __int128 *v174;
  uint64_t v175;
  __int128 *v176;
  uint64_t v177;
  __int128 *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  __int128 *v182;
  uint64_t v183;
  __int128 *v184;
  uint64_t v185;
  __int128 *v186;
  uint64_t v187;
  __int128 *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  __int128 *v192;
  uint64_t v193;
  __int128 *v194;
  uint64_t v195;
  __int128 *v196;
  uint64_t v197;
  __int128 *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  __int128 *v202;
  uint64_t v203;
  __int128 *v204;
  uint64_t v205;
  __int128 *v206;
  uint64_t v207;
  __int128 *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  __int128 *v212;
  uint64_t v213;
  __int128 *v214;
  uint64_t v215;
  __int128 *v216;
  uint64_t v217;
  __int128 *v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  __int128 *v222;
  uint64_t v223;
  __int128 *v224;
  uint64_t v225;
  __int128 *v226;
  uint64_t v227;
  __int128 *v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  __int128 *v232;
  uint64_t v233;
  __int128 *v234;
  uint64_t v235;
  __int128 *v236;
  uint64_t v237;
  __int128 *v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  __int128 *v242;
  uint64_t v243;
  __int128 *v244;
  uint64_t v245;
  __int128 *v246;
  uint64_t v247;
  __int128 *v248;
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  uint64_t v252;
  __int128 *v253;
  uint64_t v254;
  __int128 *v255;
  uint64_t v256;
  __int128 *v257;
  uint64_t v258;
  __int128 *v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  __int128 *v263;
  uint64_t v264;
  __int128 *v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  __int128 *v269;
  uint64_t v270;
  __int128 *v271;
  uint64_t v272;
  __int128 *v273;
  uint64_t v274;
  __int128 *v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  __int128 *v279;
  uint64_t v280;
  __int128 *v281;
  uint64_t v282;
  __int128 *v283;
  uint64_t v284;
  __int128 *v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t i;
  id *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t j;
  id *v296;
  uint64_t v297;
  _QWORD *v298;
  _QWORD *v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  _QWORD *v303;
  _QWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  _QWORD *v307;
  _QWORD *v308;
  _QWORD *v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  _QWORD *v315;
  _QWORD *v316;
  _QWORD *v317;
  _QWORD *v318;
  _QWORD *v319;
  _QWORD *v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;

  v323 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = CFDictionaryCreateMutable(0, 0, &kCPtrKeyCallbacks, &kCPtrValueCallbacks);
  v2 = (CFMutableDictionaryRef *)((char *)this + 8);
  *((_QWORD *)this + 1) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], &kCPtrValueCallbacks);
  v320 = (_QWORD *)operator new();
  *v320 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "maximumFramesToRender");
  v3 = objc_claimAutoreleasedReturnValue();
  v320[2] = 0xE00000001;
  v320[6] = 0;
  v320[10] = 0;
  v320[14] = 0;
  v320[18] = 0;
  *v320 = off_1E29064A0;
  v320[1] = v3;
  *(_QWORD *)&v321 = &off_1E29152A0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v320 + 3);
  v4 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v5 = 4;
    v4 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)&v321 = &off_1E2915378;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v320 + 7);
  v6 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v7 = 4;
    v6 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_11:
  *(_QWORD *)&v321 = &off_1E2915330;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v320 + 11);
  v8 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v9 = 4;
    v8 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_16:
  *(_QWORD *)&v321 = &off_1E29152E8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v320 + 15);
  v10 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v11 = 4;
    v10 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_21;
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_21:
  *v320 = off_1E29016B0;
  v311 = (_QWORD *)operator new();
  *v311 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "fullState");
  v12 = objc_claimAutoreleasedReturnValue();
  v311[2] = 4;
  v311[6] = 0;
  v311[10] = 0;
  v311[14] = 0;
  v311[18] = 0;
  *v311 = off_1E2905D98;
  v311[1] = v12;
  *(_QWORD *)&v321 = &off_1E2913998;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v311 + 3);
  v13 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v14 = 4;
    v13 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_26;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_26:
  *(_QWORD *)&v321 = &off_1E2913A28;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v311 + 11);
  v15 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v16 = 4;
    v15 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_31;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_31:
  *(_QWORD *)&v321 = &off_1E29139E0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v311 + 15);
  v17 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v18 = 4;
    v17 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_36;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_36:
  *v311 = off_1E2901110;
  v310 = (_QWORD *)operator new();
  *v310 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "fullStateForDocument");
  v19 = objc_claimAutoreleasedReturnValue();
  v310[2] = 0x3200000004;
  v310[6] = 0;
  v310[10] = 0;
  v310[14] = 0;
  v310[18] = 0;
  *v310 = off_1E2905DE0;
  v310[1] = v19;
  *(_QWORD *)&v321 = &off_1E2913A70;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v310 + 3);
  v20 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v21 = 4;
    v20 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_41;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_41:
  *(_QWORD *)&v321 = &off_1E2913B00;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v310 + 11);
  v22 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v23 = 4;
    v22 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_46;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_46:
  *(_QWORD *)&v321 = &off_1E2913AB8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v310 + 15);
  v24 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v25 = 4;
    v24 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_51;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_51:
  *v310 = off_1E2901158;
  v309 = (_QWORD *)operator new();
  *v309 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "factoryPresets");
  v26 = objc_claimAutoreleasedReturnValue();
  v309[2] = 0x1800000000;
  v309[6] = 0;
  v309[10] = 0;
  v309[14] = 0;
  v309[18] = 0;
  *v309 = off_1E2905EB8;
  v309[1] = v26;
  *(_QWORD *)&v321 = &off_1E2913CF8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v309 + 3);
  v27 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v28 = 4;
    v27 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_56;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_56:
  *(_QWORD *)&v321 = &off_1E2913D88;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v309 + 11);
  v29 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v30 = 4;
    v29 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_61;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_61:
  *(_QWORD *)&v321 = &off_1E2913D40;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v309 + 15);
  v31 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v32 = 4;
    v31 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_66;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_66:
  *v309 = off_1E2901230;
  v308 = (_QWORD *)operator new();
  *v308 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "currentPreset");
  v33 = objc_claimAutoreleasedReturnValue();
  v308[2] = 0x2400000004;
  v308[6] = 0;
  v308[10] = 0;
  v308[14] = 0;
  v308[18] = 0;
  *v308 = off_1E2905E28;
  v308[1] = v33;
  *(_QWORD *)&v321 = &off_1E2913B48;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v308 + 3);
  v34 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v35 = 4;
    v34 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_71;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_71:
  *(_QWORD *)&v321 = &off_1E2913BD8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v308 + 11);
  v36 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v37 = 4;
    v36 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_76;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_76:
  *(_QWORD *)&v321 = &off_1E2913B90;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v308 + 15);
  v38 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v39 = 4;
    v38 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_81;
    v39 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_81:
  *v308 = off_1E29011A0;
  v307 = (_QWORD *)operator new();
  *v307 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "latency");
  v40 = objc_claimAutoreleasedReturnValue();
  v307[2] = 0xC00000000;
  v307[6] = 0;
  v307[10] = 0;
  v307[14] = 0;
  v307[18] = 0;
  *v307 = off_1E29062F0;
  v307[1] = v40;
  *(_QWORD *)&v321 = &off_1E2914CB8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v307 + 3);
  v41 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v42 = 4;
    v41 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_86;
    v42 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
LABEL_86:
  *(_QWORD *)&v321 = &off_1E2914D48;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v307 + 11);
  v43 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v44 = 4;
    v43 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_91;
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_91:
  *(_QWORD *)&v321 = &off_1E2914D00;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v307 + 15);
  v45 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v46 = 4;
    v45 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_96;
    v46 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_96:
  *v307 = off_1E2901500;
  v306 = (_QWORD *)operator new();
  *v306 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "tailTime");
  v47 = objc_claimAutoreleasedReturnValue();
  v306[2] = 0x1400000000;
  v306[6] = 0;
  v306[10] = 0;
  v306[14] = 0;
  v306[18] = 0;
  *v306 = off_1E2906338;
  v306[1] = v47;
  *(_QWORD *)&v321 = &off_1E2914D90;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v306 + 3);
  v48 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v49 = 4;
    v48 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_101;
    v49 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
LABEL_101:
  *(_QWORD *)&v321 = &off_1E2914E20;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v306 + 11);
  v50 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v51 = 4;
    v50 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_106;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_106:
  *(_QWORD *)&v321 = &off_1E2914DD8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v306 + 15);
  v52 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v53 = 4;
    v52 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_111;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_111:
  *v306 = off_1E2901548;
  v319 = (_QWORD *)operator new();
  *v319 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "renderQuality");
  v54 = objc_claimAutoreleasedReturnValue();
  v319[2] = 0x1A00000001;
  v319[6] = 0;
  v319[10] = 0;
  v319[14] = 0;
  v319[18] = 0;
  *v319 = off_1E29064E8;
  v319[1] = v54;
  *(_QWORD *)&v321 = &off_1E29153C0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v319 + 3);
  v55 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v56 = 4;
    v55 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_116;
    v56 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v55 + 8 * v56))();
LABEL_116:
  *(_QWORD *)&v321 = &off_1E2915498;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v319 + 7);
  v57 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v58 = 4;
    v57 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_121;
    v58 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v57 + 8 * v58))();
LABEL_121:
  *(_QWORD *)&v321 = &off_1E2915450;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v319 + 11);
  v59 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v60 = 4;
    v59 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_126;
    v60 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v59 + 8 * v60))();
LABEL_126:
  *(_QWORD *)&v321 = &off_1E2915408;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v319 + 15);
  v61 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v62 = 4;
    v61 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_131;
    v62 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v61 + 8 * v62))();
LABEL_131:
  *v319 = off_1E29016F8;
  v318 = (_QWORD *)operator new();
  *v318 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "shouldBypassEffect");
  v63 = objc_claimAutoreleasedReturnValue();
  v318[2] = 0x1500000001;
  v318[6] = 0;
  v318[10] = 0;
  v318[14] = 0;
  v318[18] = 0;
  *v318 = off_1E2906188;
  v318[1] = v63;
  *(_QWORD *)&v321 = &off_1E29147A8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v318 + 3);
  v64 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v65 = 4;
    v64 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_136;
    v65 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v64 + 8 * v65))();
LABEL_136:
  *(_QWORD *)&v321 = &off_1E2914880;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v318 + 7);
  v66 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v67 = 4;
    v66 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_141;
    v67 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v66 + 8 * v67))();
LABEL_141:
  *(_QWORD *)&v321 = &off_1E2914838;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v318 + 11);
  v68 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v69 = 4;
    v68 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_146;
    v69 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v68 + 8 * v69))();
LABEL_146:
  *(_QWORD *)&v321 = &off_1E29147F0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v318 + 15);
  v70 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v71 = 4;
    v70 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_151;
    v71 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v70 + 8 * v71))();
LABEL_151:
  *v318 = off_1E2901398;
  v305 = (_QWORD *)operator new();
  *v305 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "canProcessInPlace");
  v72 = objc_claimAutoreleasedReturnValue();
  v305[2] = 0x1D00000000;
  v305[6] = 0;
  v305[10] = 0;
  v305[14] = 0;
  v305[18] = 0;
  *v305 = off_1E29061D0;
  v305[1] = v72;
  *(_QWORD *)&v321 = &off_1E29148C8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v305 + 3);
  v73 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v74 = 4;
    v73 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_156;
    v74 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v73 + 8 * v74))();
LABEL_156:
  *(_QWORD *)&v321 = &off_1E2914958;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v305 + 11);
  v75 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v76 = 4;
    v75 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_161;
    v76 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v75 + 8 * v76))();
LABEL_161:
  *(_QWORD *)&v321 = &off_1E2914910;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v305 + 15);
  v77 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v78 = 4;
    v77 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_166;
    v78 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v77 + 8 * v78))();
LABEL_166:
  *v305 = off_1E29013E0;
  v317 = (_QWORD *)operator new();
  *v317 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "renderingOffline");
  v79 = objc_claimAutoreleasedReturnValue();
  v317[2] = 0x2500000001;
  v317[6] = 0;
  v317[10] = 0;
  v317[14] = 0;
  v317[18] = 0;
  *v317 = off_1E2906218;
  v317[1] = v79;
  *(_QWORD *)&v321 = &off_1E29149A0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v317 + 3);
  v80 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v81 = 4;
    v80 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_171;
    v81 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v80 + 8 * v81))();
LABEL_171:
  *(_QWORD *)&v321 = &off_1E2914A78;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v317 + 7);
  v82 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v83 = 4;
    v82 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_176;
    v83 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v82 + 8 * v83))();
LABEL_176:
  *(_QWORD *)&v321 = &off_1E2914A30;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v317 + 11);
  v84 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v85 = 4;
    v84 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_181;
    v85 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v84 + 8 * v85))();
LABEL_181:
  *(_QWORD *)&v321 = &off_1E29149E8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v317 + 15);
  v86 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v87 = 4;
    v86 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_186;
    v87 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v86 + 8 * v87))();
LABEL_186:
  *v317 = off_1E2901428;
  v298 = (_QWORD *)operator new();
  *v298 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "channelCapabilities");
  v88 = objc_claimAutoreleasedReturnValue();
  v298[2] = 0xD00000000;
  v298[6] = 0;
  v298[10] = 0;
  v298[14] = 0;
  v298[18] = 0;
  *v298 = off_1E2901788;
  v298[1] = v88;
  v316 = (_QWORD *)operator new();
  *v316 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "contextName");
  v89 = objc_claimAutoreleasedReturnValue();
  v316[2] = 0x1900000001;
  v316[6] = 0;
  v316[10] = 0;
  v316[14] = 0;
  v316[18] = 0;
  *v316 = off_1E29060B0;
  v316[1] = v89;
  *(_QWORD *)&v321 = &off_1E2914490;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v316 + 3);
  v90 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v91 = 4;
    v90 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_191;
    v91 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v90 + 8 * v91))();
LABEL_191:
  *(_QWORD *)&v321 = &off_1E2914568;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v316 + 7);
  v92 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v93 = 4;
    v92 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_196;
    v93 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v92 + 8 * v93))();
LABEL_196:
  *(_QWORD *)&v321 = &off_1E2914520;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v316 + 11);
  v94 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v95 = 4;
    v94 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_201;
    v95 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v94 + 8 * v95))();
LABEL_201:
  *(_QWORD *)&v321 = &off_1E29144D8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v316 + 15);
  v96 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v97 = 4;
    v96 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_206;
    v97 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v96 + 8 * v97))();
LABEL_206:
  *v316 = off_1E29012C0;
  v304 = (_QWORD *)operator new();
  *v304 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "supportsMPE");
  v98 = objc_claimAutoreleasedReturnValue();
  v304[2] = 0x3A00000000;
  v304[6] = 0;
  v304[10] = 0;
  v304[14] = 0;
  v304[18] = 0;
  *v304 = off_1E29062A8;
  v304[1] = v98;
  *(_QWORD *)&v321 = &off_1E2914BE0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v304 + 3);
  v99 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v100 = 4;
    v99 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_211;
    v100 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v99 + 8 * v100))();
LABEL_211:
  *(_QWORD *)&v321 = &off_1E2914C70;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v304 + 11);
  v101 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v102 = 4;
    v101 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_216;
    v102 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v101 + 8 * v102))();
LABEL_216:
  *(_QWORD *)&v321 = &off_1E2914C28;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v304 + 15);
  v103 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v104 = 4;
    v103 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_221;
    v104 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v103 + 8 * v104))();
LABEL_221:
  *v304 = off_1E29014B8;
  v303 = (_QWORD *)operator new();
  *v303 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "channelMap");
  v105 = objc_claimAutoreleasedReturnValue();
  v303[2] = 0x7D200000001;
  v303[6] = 0;
  v303[10] = 0;
  v303[14] = 0;
  v303[18] = 0;
  *v303 = off_1E2907290;
  v303[1] = v105;
  *(_QWORD *)&v321 = &off_1E29156D8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v303 + 3);
  v106 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v107 = 4;
    v106 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_226;
    v107 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v106 + 8 * v107))();
LABEL_226:
  *(_QWORD *)&v321 = &off_1E2915768;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v303 + 11);
  v108 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v109 = 4;
    v108 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_231;
    v109 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v108 + 8 * v109))();
LABEL_231:
  *(_QWORD *)&v321 = &off_1E29157B0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v303 + 7);
  v110 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v111 = 4;
    v110 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_236;
    v111 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v110 + 8 * v111))();
LABEL_236:
  *(_QWORD *)&v321 = &off_1E2915720;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v303 + 15);
  v112 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v113 = 4;
    v112 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_241;
    v113 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v112 + 8 * v113))();
LABEL_241:
  v302 = (_QWORD *)operator new();
  *v302 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MIDIOutputNames");
  v114 = objc_claimAutoreleasedReturnValue();
  v302[2] = 0x2F00000000;
  v302[6] = 0;
  v302[10] = 0;
  v302[14] = 0;
  v302[18] = 0;
  *v302 = off_1E2905E70;
  v302[1] = v114;
  *(_QWORD *)&v321 = &off_1E2913C20;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v302 + 3);
  v115 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v116 = 4;
    v115 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_246;
    v116 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v115 + 8 * v116))();
LABEL_246:
  *(_QWORD *)&v321 = &off_1E2913CB0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v302 + 11);
  v117 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v118 = 4;
    v117 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_251;
    v118 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v117 + 8 * v118))();
LABEL_251:
  *(_QWORD *)&v321 = &off_1E2913C68;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v302 + 15);
  v119 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v120 = 4;
    v119 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_256;
    v120 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v119 + 8 * v120))();
LABEL_256:
  *v302 = off_1E29011E8;
  v315 = (_QWORD *)operator new();
  *v315 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MIDIOutputBufferSizeHint");
  v121 = objc_claimAutoreleasedReturnValue();
  v315[2] = 0x4200000001;
  v315[6] = 0;
  v315[10] = 0;
  v315[14] = 0;
  v315[18] = 0;
  *v315 = off_1E2906530;
  v315[1] = v121;
  *(_QWORD *)&v321 = &off_1E29154E0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v315 + 3);
  v122 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v123 = 4;
    v122 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_261;
    v123 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v122 + 8 * v123))();
LABEL_261:
  *(_QWORD *)&v321 = &off_1E29155B8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v315 + 7);
  v124 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v125 = 4;
    v124 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_266;
    v125 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v124 + 8 * v125))();
LABEL_266:
  *(_QWORD *)&v321 = &off_1E2915570;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v315 + 11);
  v126 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v127 = 4;
    v126 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_271;
    v127 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v126 + 8 * v127))();
LABEL_271:
  *(_QWORD *)&v321 = &off_1E2915528;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v315 + 15);
  v128 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v129 = 4;
    v128 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_276;
    v129 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v128 + 8 * v129))();
LABEL_276:
  *v315 = off_1E2901740;
  v301 = (_QWORD *)operator new();
  *v301 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "AudioUnitMIDIProtocol");
  v130 = objc_claimAutoreleasedReturnValue();
  v301[2] = 0x4000000000;
  v301[6] = 0;
  v301[10] = 0;
  v301[14] = 0;
  v301[18] = 0;
  *v301 = off_1E2906410;
  v301[1] = v130;
  *(_QWORD *)&v321 = &off_1E29150A8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v301 + 3);
  v131 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v132 = 4;
    v131 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_281;
    v132 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v131 + 8 * v132))();
LABEL_281:
  *(_QWORD *)&v321 = &off_1E2915138;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v301 + 11);
  v133 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v134 = 4;
    v133 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_286;
    v134 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v133 + 8 * v134))();
LABEL_286:
  *(_QWORD *)&v321 = &off_1E29150F0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v301 + 15);
  v135 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v136 = 4;
    v135 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_291;
    v136 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v135 + 8 * v136))();
LABEL_291:
  *v301 = off_1E2901620;
  v314 = (_QWORD *)operator new();
  *v314 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "hostMIDIProtocol");
  v137 = objc_claimAutoreleasedReturnValue();
  v314[2] = 0x4100000001;
  v314[6] = 0;
  v314[10] = 0;
  v314[14] = 0;
  v314[18] = 0;
  *v314 = off_1E2906458;
  v314[1] = v137;
  *(_QWORD *)&v321 = &off_1E2915180;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v314 + 3);
  v138 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v139 = 4;
    v138 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_296;
    v139 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v138 + 8 * v139))();
LABEL_296:
  *(_QWORD *)&v321 = &off_1E2915258;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v314 + 7);
  v140 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v141 = 4;
    v140 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_301;
    v141 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v140 + 8 * v141))();
LABEL_301:
  *(_QWORD *)&v321 = &off_1E2915210;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v314 + 11);
  v142 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v143 = 4;
    v142 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_306;
    v143 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v142 + 8 * v143))();
LABEL_306:
  *(_QWORD *)&v321 = &off_1E29151C8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v314 + 15);
  v144 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v145 = 4;
    v144 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_311;
    v145 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v144 + 8 * v145))();
LABEL_311:
  *v314 = off_1E2901668;
  v313 = (_QWORD *)operator new();
  *v313 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "audioUnitShortName");
  v146 = objc_claimAutoreleasedReturnValue();
  v313[2] = 0x73600000001;
  v313[6] = 0;
  v313[10] = 0;
  v313[14] = 0;
  v313[18] = 0;
  *v313 = off_1E2905FD8;
  v313[1] = v146;
  *(_QWORD *)&v321 = &off_1E2914130;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v313 + 3);
  v147 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v148 = 4;
    v147 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_316;
    v148 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v147 + 8 * v148))();
LABEL_316:
  *(_QWORD *)&v321 = &off_1E2914208;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v313 + 7);
  v149 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v150 = 4;
    v149 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_321;
    v150 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v149 + 8 * v150))();
LABEL_321:
  *(_QWORD *)&v321 = &off_1E29141C0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v313 + 11);
  v151 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v152 = 4;
    v151 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_326;
    v152 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v151 + 8 * v152))();
LABEL_326:
  *(_QWORD *)&v321 = &off_1E2914178;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v313 + 15);
  v153 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v154 = 4;
    v153 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_331;
    v154 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v153 + 8 * v154))();
LABEL_331:
  *v313 = off_1E2901278;
  v312 = (_QWORD *)operator new();
  *v312 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtualMIDICableCount");
  v155 = objc_claimAutoreleasedReturnValue();
  v312[2] = 0x73500000001;
  v312[6] = 0;
  v312[10] = 0;
  v312[14] = 0;
  v312[18] = 0;
  *v312 = off_1E29063C8;
  v312[1] = v155;
  *(_QWORD *)&v321 = &off_1E2914F88;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v312 + 3);
  v156 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v157 = 4;
    v156 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_336;
    v157 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v156 + 8 * v157))();
LABEL_336:
  *(_QWORD *)&v321 = &off_1E2915060;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v312 + 7);
  v158 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v159 = 4;
    v158 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_341;
    v159 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v158 + 8 * v159))();
LABEL_341:
  *(_QWORD *)&v321 = &off_1E2915018;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v312 + 11);
  v160 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v161 = 4;
    v160 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_346;
    v161 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v160 + 8 * v161))();
LABEL_346:
  *(_QWORD *)&v321 = &off_1E2914FD0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v312 + 15);
  v162 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v163 = 4;
    v162 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_351;
    v163 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v162 + 8 * v163))();
LABEL_351:
  *v312 = off_1E29015D8;
  v300 = (_QWORD *)operator new();
  *v300 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "supportsUserPresets");
  v164 = objc_claimAutoreleasedReturnValue();
  v300[2] = 0x73400000000;
  v300[6] = 0;
  v300[10] = 0;
  v300[14] = 0;
  v300[18] = 0;
  *v300 = off_1E2906140;
  v300[1] = v164;
  *(_QWORD *)&v321 = &off_1E29146D0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v300 + 3);
  v165 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v166 = 4;
    v165 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_356;
    v166 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v165 + 8 * v166))();
LABEL_356:
  *(_QWORD *)&v321 = &off_1E2914760;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v300 + 11);
  v167 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v168 = 4;
    v167 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_361;
    v168 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v167 + 8 * v168))();
LABEL_361:
  *(_QWORD *)&v321 = &off_1E2914718;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v300 + 15);
  v169 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v170 = 4;
    v169 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_366;
    v170 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v169 + 8 * v170))();
LABEL_366:
  *v300 = off_1E2901350;
  v299 = (_QWORD *)operator new();
  *v299 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_v2fwd_prrp");
  v171 = objc_claimAutoreleasedReturnValue();
  v299[2] = 0x7072727000000011;
  v299[6] = 0;
  v299[10] = 0;
  v299[14] = 0;
  v299[18] = 0;
  *v299 = off_1E2906020;
  v299[1] = v171;
  *(_QWORD *)&v321 = &off_1E2914250;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v299 + 3);
  v172 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v173 = 4;
    v172 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_371;
    v173 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v172 + 8 * v173))();
LABEL_371:
  *(_QWORD *)&v321 = &off_1E2914328;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v299 + 7);
  v174 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v175 = 4;
    v174 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_376;
    v175 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v174 + 8 * v175))();
LABEL_376:
  *(_QWORD *)&v321 = &off_1E29142E0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v299 + 11);
  v176 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v177 = 4;
    v176 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_381;
    v177 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v176 + 8 * v177))();
LABEL_381:
  *(_QWORD *)&v321 = &off_1E2914298;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v299 + 15);
  v178 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v179 = 4;
    v178 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_386;
    v179 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v178 + 8 * v179))();
LABEL_386:
  v180 = (_QWORD *)operator new();
  *v180 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_v2fwd_dspg");
  v181 = objc_claimAutoreleasedReturnValue();
  v180[2] = 0x6473706700000011;
  v180[6] = 0;
  v180[10] = 0;
  v180[14] = 0;
  v180[18] = 0;
  *v180 = off_1E2905F48;
  v180[1] = v181;
  *(_QWORD *)&v321 = &off_1E2913EF0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v180 + 3);
  v182 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v183 = 4;
    v182 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_391;
    v183 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v182 + 8 * v183))();
LABEL_391:
  *(_QWORD *)&v321 = &off_1E2913FC8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v180 + 7);
  v184 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v185 = 4;
    v184 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_396;
    v185 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v184 + 8 * v185))();
LABEL_396:
  *(_QWORD *)&v321 = &off_1E2913F80;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v180 + 11);
  v186 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v187 = 4;
    v186 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_401;
    v187 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v186 + 8 * v187))();
LABEL_401:
  *(_QWORD *)&v321 = &off_1E2913F38;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v180 + 15);
  v188 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v189 = 4;
    v188 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_406;
    v189 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v188 + 8 * v189))();
LABEL_406:
  v190 = (_QWORD *)operator new();
  *v190 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_v2fwd_grtx");
  v191 = objc_claimAutoreleasedReturnValue();
  v190[2] = 0x6772747800000011;
  v190[6] = 0;
  v190[10] = 0;
  v190[14] = 0;
  v190[18] = 0;
  *v190 = off_1E2905F90;
  v190[1] = v191;
  *(_QWORD *)&v321 = &off_1E2914010;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v190 + 3);
  v192 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v193 = 4;
    v192 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_411;
    v193 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v192 + 8 * v193))();
LABEL_411:
  *(_QWORD *)&v321 = &off_1E29140E8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v190 + 7);
  v194 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v195 = 4;
    v194 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_416;
    v195 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v194 + 8 * v195))();
LABEL_416:
  *(_QWORD *)&v321 = &off_1E29140A0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v190 + 11);
  v196 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v197 = 4;
    v196 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_421;
    v197 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v196 + 8 * v197))();
LABEL_421:
  *(_QWORD *)&v321 = &off_1E2914058;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v190 + 15);
  v198 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v199 = 4;
    v198 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_426;
    v199 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v198 + 8 * v199))();
LABEL_426:
  v200 = (_QWORD *)operator new();
  *v200 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_v2fwd_prsp");
  v201 = objc_claimAutoreleasedReturnValue();
  v200[2] = 0x7072737000000011;
  v200[6] = 0;
  v200[10] = 0;
  v200[14] = 0;
  v200[18] = 0;
  *v200 = off_1E2906068;
  v200[1] = v201;
  *(_QWORD *)&v321 = &off_1E2914370;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v200 + 3);
  v202 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v203 = 4;
    v202 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_431;
    v203 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v202 + 8 * v203))();
LABEL_431:
  *(_QWORD *)&v321 = &off_1E2914448;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v200 + 7);
  v204 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v205 = 4;
    v204 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_436;
    v205 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v204 + 8 * v205))();
LABEL_436:
  *(_QWORD *)&v321 = &off_1E2914400;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v200 + 11);
  v206 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v207 = 4;
    v206 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_441;
    v207 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v206 + 8 * v207))();
LABEL_441:
  *(_QWORD *)&v321 = &off_1E29143B8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v200 + 15);
  v208 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v209 = 4;
    v208 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_446;
    v209 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v208 + 8 * v209))();
LABEL_446:
  v210 = (_QWORD *)operator new();
  *v210 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_v2fwd_ausp");
  v211 = objc_claimAutoreleasedReturnValue();
  v210[2] = 0x6175737000000011;
  v210[6] = 0;
  v210[10] = 0;
  v210[14] = 0;
  v210[18] = 0;
  *v210 = off_1E2905F00;
  v210[1] = v211;
  *(_QWORD *)&v321 = &off_1E2913DD0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v210 + 3);
  v212 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v213 = 4;
    v212 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_451;
    v213 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v212 + 8 * v213))();
LABEL_451:
  *(_QWORD *)&v321 = &off_1E2913EA8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v210 + 7);
  v214 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v215 = 4;
    v214 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_456;
    v215 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v214 + 8 * v215))();
LABEL_456:
  *(_QWORD *)&v321 = &off_1E2913E60;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v210 + 11);
  v216 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v217 = 4;
    v216 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_461;
    v217 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v216 + 8 * v217))();
LABEL_461:
  *(_QWORD *)&v321 = &off_1E2913E18;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v210 + 15);
  v218 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v219 = 4;
    v218 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_466;
    v219 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v218 + 8 * v219))();
LABEL_466:
  v220 = (_QWORD *)operator new();
  *v220 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_v2fwd_grpr");
  v221 = objc_claimAutoreleasedReturnValue();
  v220[2] = 0x6772707200000011;
  v220[6] = 0;
  v220[10] = 0;
  v220[14] = 0;
  v220[18] = 0;
  *v220 = off_1E28FFC30;
  v220[1] = v221;
  *(_QWORD *)&v321 = &off_1E2900068;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v220 + 3);
  v222 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v223 = 4;
    v222 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_471;
    v223 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v222 + 8 * v223))();
LABEL_471:
  *(_QWORD *)&v321 = &off_1E2900140;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v220 + 7);
  v224 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v225 = 4;
    v224 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_476;
    v225 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v224 + 8 * v225))();
LABEL_476:
  *(_QWORD *)&v321 = &off_1E29000F8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v220 + 11);
  v226 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v227 = 4;
    v226 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_481;
    v227 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v226 + 8 * v227))();
LABEL_481:
  *(_QWORD *)&v321 = &off_1E29000B0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v220 + 15);
  v228 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v229 = 4;
    v228 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_486;
    v229 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v228 + 8 * v229))();
LABEL_486:
  v230 = (_QWORD *)operator new();
  *v230 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_v2fwd_bxpr");
  v231 = objc_claimAutoreleasedReturnValue();
  v230[2] = 0x6278707200000011;
  v230[6] = 0;
  v230[10] = 0;
  v230[14] = 0;
  v230[18] = 0;
  *v230 = off_1E28FFBA0;
  v230[1] = v231;
  *(_QWORD *)&v321 = &off_1E28FFE28;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v230 + 3);
  v232 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v233 = 4;
    v232 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_491;
    v233 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v232 + 8 * v233))();
LABEL_491:
  *(_QWORD *)&v321 = &off_1E28FFF00;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v230 + 7);
  v234 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v235 = 4;
    v234 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_496;
    v235 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v234 + 8 * v235))();
LABEL_496:
  *(_QWORD *)&v321 = &off_1E28FFEB8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v230 + 11);
  v236 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v237 = 4;
    v236 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_501;
    v237 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v236 + 8 * v237))();
LABEL_501:
  *(_QWORD *)&v321 = &off_1E28FFE70;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v230 + 15);
  v238 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v239 = 4;
    v238 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_506;
    v239 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v238 + 8 * v239))();
LABEL_506:
  v240 = (_QWORD *)operator new();
  *v240 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_v2fwd_bxps");
  v241 = objc_claimAutoreleasedReturnValue();
  v240[2] = 0x6278707300000011;
  v240[6] = 0;
  v240[10] = 0;
  v240[14] = 0;
  v240[18] = 0;
  *v240 = off_1E28FFBE8;
  v240[1] = v241;
  *(_QWORD *)&v321 = &off_1E28FFF48;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v240 + 3);
  v242 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v243 = 4;
    v242 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_511;
    v243 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v242 + 8 * v243))();
LABEL_511:
  *(_QWORD *)&v321 = &off_1E2900020;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v240 + 7);
  v244 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v245 = 4;
    v244 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_516;
    v245 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v244 + 8 * v245))();
LABEL_516:
  *(_QWORD *)&v321 = &off_1E28FFFD8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v240 + 11);
  v246 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v247 = 4;
    v246 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_521;
    v247 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v246 + 8 * v247))();
LABEL_521:
  *(_QWORD *)&v321 = &off_1E28FFF90;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v240 + 15);
  v248 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v249 = 4;
    v248 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_526;
    v249 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v248 + 8 * v249))();
LABEL_526:
  v250 = operator new(0xF0uLL);
  *v250 = v320;
  v250[1] = v311;
  v250[2] = v310;
  v250[3] = v309;
  v250[4] = v308;
  v250[5] = v307;
  v250[6] = v306;
  v250[7] = v319;
  v250[8] = v318;
  v250[9] = v305;
  v250[10] = v317;
  v250[11] = v298;
  v250[12] = v316;
  v250[13] = v304;
  v250[14] = v303;
  v250[15] = v302;
  v250[16] = v315;
  v250[17] = v301;
  v250[18] = v314;
  v250[19] = v313;
  v250[20] = v312;
  v250[21] = v300;
  v250[22] = v299;
  v250[23] = v180;
  v250[24] = v190;
  v250[25] = v200;
  v250[26] = v210;
  v250[27] = v220;
  v250[28] = v230;
  v250[29] = v240;
  v251 = (_QWORD *)operator new();
  *v251 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "name");
  v252 = objc_claimAutoreleasedReturnValue();
  v251[2] = 0x1E00000003;
  v251[6] = 0;
  v251[10] = 0;
  v251[14] = 0;
  v251[18] = 0;
  *v251 = off_1E29060F8;
  v251[1] = v252;
  *(_QWORD *)&v321 = &off_1E29145B0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v251 + 3);
  v253 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v254 = 4;
    v253 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_531;
    v254 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v253 + 8 * v254))();
LABEL_531:
  *(_QWORD *)&v321 = &off_1E2914688;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v251 + 7);
  v255 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v256 = 4;
    v255 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_536;
    v256 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v255 + 8 * v256))();
LABEL_536:
  *(_QWORD *)&v321 = &off_1E2914640;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v251 + 11);
  v257 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v258 = 4;
    v257 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_541;
    v258 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v257 + 8 * v258))();
LABEL_541:
  *(_QWORD *)&v321 = &off_1E29145F8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v251 + 15);
  v259 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v260 = 4;
    v259 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_546;
    v260 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v259 + 8 * v260))();
LABEL_546:
  *v251 = off_1E2901308;
  v261 = (_QWORD *)operator new();
  *v261 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "supportedChannelLayoutTags");
  v262 = objc_claimAutoreleasedReturnValue();
  v261[2] = 0x2000000002;
  v261[6] = 0;
  v261[10] = 0;
  v261[14] = 0;
  v261[18] = 0;
  *v261 = off_1E29072D8;
  v261[1] = v262;
  *(_QWORD *)&v321 = &off_1E29157F8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v261 + 3);
  v263 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v264 = 4;
    v263 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_551;
    v264 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v263 + 8 * v264))();
LABEL_551:
  *(_QWORD *)&v321 = &off_1E2915840;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v261 + 11);
  v265 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v266 = 4;
    v265 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_556;
    v266 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v265 + 8 * v266))();
LABEL_556:
  v267 = (_QWORD *)operator new();
  *v267 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "contextPresentationLatency");
  v268 = objc_claimAutoreleasedReturnValue();
  v267[2] = 0x2800000003;
  v267[6] = 0;
  v267[10] = 0;
  v267[14] = 0;
  v267[18] = 0;
  *v267 = off_1E2906380;
  v267[1] = v268;
  *(_QWORD *)&v321 = &off_1E2914E68;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v267 + 3);
  v269 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v270 = 4;
    v269 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_561;
    v270 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v269 + 8 * v270))();
LABEL_561:
  *(_QWORD *)&v321 = &off_1E2914F40;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v267 + 7);
  v271 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v272 = 4;
    v271 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_566;
    v272 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v271 + 8 * v272))();
LABEL_566:
  *(_QWORD *)&v321 = &off_1E2914EF8;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v267 + 11);
  v273 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v274 = 4;
    v273 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_571;
    v274 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v273 + 8 * v274))();
LABEL_571:
  *(_QWORD *)&v321 = &off_1E2914EB0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v267 + 15);
  v275 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v276 = 4;
    v275 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_576;
    v276 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v275 + 8 * v276))();
LABEL_576:
  *v267 = off_1E2901590;
  v277 = (_QWORD *)operator new();
  *v277 = &unk_1E2900EE0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "shouldAllocateBuffer");
  v278 = objc_claimAutoreleasedReturnValue();
  v277[2] = 0x3300000003;
  v277[6] = 0;
  v277[10] = 0;
  v277[14] = 0;
  v277[18] = 0;
  *v277 = off_1E2906260;
  v277[1] = v278;
  *(_QWORD *)&v321 = &off_1E2914AC0;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](&v321, v277 + 3);
  v279 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v280 = 4;
    v279 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_581;
    v280 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v279 + 8 * v280))();
LABEL_581:
  *(_QWORD *)&v321 = &off_1E2914B98;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](&v321, v277 + 7);
  v281 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v282 = 4;
    v281 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_586;
    v282 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v281 + 8 * v282))();
LABEL_586:
  *(_QWORD *)&v321 = &off_1E2914B50;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](&v321, v277 + 11);
  v283 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v284 = 4;
    v283 = &v321;
  }
  else
  {
    if (!*((_QWORD *)&v322 + 1))
      goto LABEL_591;
    v284 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v283 + 8 * v284))();
LABEL_591:
  *(_QWORD *)&v321 = &off_1E2914B08;
  *((_QWORD *)&v322 + 1) = &v321;
  std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](&v321, v277 + 15);
  v285 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v286 = 4;
    v285 = &v321;
    goto LABEL_595;
  }
  if (*((_QWORD *)&v322 + 1))
  {
    v286 = 5;
LABEL_595:
    (*(void (**)(void))(*(_QWORD *)v285 + 8 * v286))();
  }
  *v277 = off_1E2901470;
  v287 = operator new(0x20uLL);
  *v287 = v251;
  v287[1] = v261;
  v287[2] = v267;
  v287[3] = v277;
  v288 = objc_opt_class();
  v289 = objc_opt_class();
  for (i = 0; i != 30; ++i)
  {
    v291 = (id *)v250[i];
    if (!v291 || ((_BYTE)v291[2] & 0x10) == 0)
    {
      v321 = 0u;
      v322 = 0u;
      (*((void (**)(id *, uint64_t, __int128 *))*v291 + 1))(v291, v288, &v321);
      v292 = objc_opt_class();
      (*((void (**)(id *, __int128 *, uint64_t))*v291 + 3))(v291, &v321, v292);
      (*((void (**)(id *, __int128 *, uint64_t))*v291 + 5))(v291, &v321, v289);
      free((void *)v322);
      free(*((void **)&v322 + 1));
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)this, (const void *)*((unsigned int *)v291 + 5), v291);
    CFDictionarySetValue(*v2, objc_retainAutorelease(v291[1]), v291);
  }
  v293 = objc_opt_class();
  v294 = objc_opt_class();
  for (j = 0; j != 4; ++j)
  {
    v296 = (id *)v287[j];
    v321 = 0u;
    v322 = 0u;
    (*((void (**)(id *, uint64_t, __int128 *))*v296 + 1))(v296, v293, &v321);
    v297 = objc_opt_class();
    (*((void (**)(id *, __int128 *, uint64_t))*v296 + 4))(v296, &v321, v297);
    (*((void (**)(id *, __int128 *, uint64_t))*v296 + 6))(v296, &v321, v294);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)this, (const void *)*((unsigned int *)v296 + 5), v296);
    CFDictionarySetValue(*v2, objc_retainAutorelease(v296[1]), v296);
    free((void *)v322);
    free(*((void **)&v322 + 1));
  }
  operator delete(v287);
  operator delete(v250);
}

void sub_18EF26428(_Unwind_Exception *a1)
{
  const void **v1;
  const void **v2;
  void *v3;
  void *v4;

  operator delete(v4);
  operator delete(v3);
  TCFDictionaryBase::~TCFDictionaryBase(v2);
  TCFDictionaryBase::~TCFDictionaryBase(v1);
  _Unwind_Resume(a1);
}

void TCFDictionaryBase::~TCFDictionaryBase(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::v2PropertySize()
{
  return 0x100000004;
}

char *TV3Property<BOOL,51u,3u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "B");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "B");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<BOOL,51u,3u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,51u,3u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<BOOL,51u,3u>::stubSetter);
}

BOOL TV3Property<BOOL,51u,3u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,51u,3u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<BOOL,51u,3u>::marshalSetter_Global);
}

BOOL TV3Property<BOOL,51u,3u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,51u,3u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<BOOL,51u,3u>::marshalSetter_Bus);
}

BOOL TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeSetter_Global);
}

BOOL TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeSetter_Bus);
}

uint64_t TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  BOOL v4;
  uint64_t v5;
  UInt32 ioDataSize;
  int outData;

  v1 = a1;
  ioDataSize = 4;
  outData = 0;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x33u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
    v4 = 1;
  else
    v4 = outData == 0;
  v5 = !v4;

  return v5;
}

void sub_18EF268A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4;
  id WeakRetained;
  int inData;

  v4 = a1;
  inData = a3;
  WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x33u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);

}

void sub_18EF2693C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  uint64_t v6;
  UInt32 ioDataSize;
  int outData;

  v3 = a1;
  ioDataSize = 4;
  outData = 0;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x33u, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData != 0;
  }

  return v6;
}

void sub_18EF269E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TAUProperty<BOOL,unsigned int,51u,ScalarConverter,3u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5;
  objc_class *v6;
  IMP MethodImplementation;
  int inData;

  v5 = a1;
  inData = a3;
  if (AudioUnitSetProperty((AudioUnit)objc_msgSend(v5, "audioUnit"), 0x33u, 0, 0, &inData, 4u))
  {
    v6 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }

}

void sub_18EF26A84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *TV3Property<BOOL,51u,3u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x33);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    Value = (_QWORD *)objc_msgSend(v7, "BOOLValue");

  }
  return Value;
}

void sub_18EF26B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<BOOL,51u,3u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  id WeakRetained;
  void *v8;
  id *v9;

  v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0x33);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained(v9 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v9 + 32), *((unsigned int *)v9 + 33));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v6, v8, 0);

  }
}

void sub_18EF26C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t CADeprecated::TSingleton<AUAudioUnitProperties>::instance()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&CADeprecated::TSingleton<AUAudioUnitProperties>::sOnce);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&CADeprecated::TSingleton<AUAudioUnitProperties>::sOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AUAudioUnitProperties>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<AUAudioUnitProperties>::sInstance;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AUAudioUnitProperties>::instance(void)::{lambda(void)#1} &&>>()
{
  AUAudioUnitProperties *v0;

  v0 = (AUAudioUnitProperties *)operator new();
  AUAudioUnitProperties::AUAudioUnitProperties(v0);
  __dmb(0xBu);
  CADeprecated::TSingleton<AUAudioUnitProperties>::sInstance = (uint64_t)v0;
}

void sub_18EF26D50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,51u,3u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x33);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    v7 = objc_msgSend(v6, "BOOLValue");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF26E14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<BOOL,51u,3u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  void *v7;
  id v8;

  v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0x33);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_setValue:forProperty:error:", v6, v7, 0);

  }
}

void sub_18EF26EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,51u,3u>::stubGetter()
{
  return 0;
}

objc_selector *AUAudioUnitProperties::accessorsForProperty(Class cls, objc_class *name, objc_selector **a3, objc_selector **a4, objc_selector **a5)
{
  objc_class *v8;
  objc_property *Property;
  objc_selector *result;
  char *v11;
  int v12;
  objc_selector *v13;
  size_t v14;
  objc_selector **v15;
  char __dst[3];
  __darwin_ct_rune_t v17;
  uint64_t v18;

  v8 = cls;
  v18 = *MEMORY[0x1E0C80C00];
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  Property = class_getProperty(cls, (const char *)name);
  if (Property)
  {
    result = (objc_selector *)property_getAttributes(Property);
    v11 = (char *)result;
    do
    {
      v12 = *v11;
      if (!*v11)
        break;
      result = (objc_selector *)strchr(v11, 44);
      v13 = result;
      if (!result)
      {
        result = (objc_selector *)strlen(v11);
        v13 = (objc_selector *)((char *)result + (_QWORD)v11);
      }
      if ((unint64_t)v13 + ~(unint64_t)v11 >= 0x7F)
        v14 = 127;
      else
        v14 = (size_t)v13 + ~(unint64_t)v11;
      if (!a3 || (v15 = a3, v12 != 71))
      {
        if (!a4)
          continue;
        v15 = a4;
        if (v12 != 83)
          continue;
      }
      memcpy(__dst, v11 + 1, v14);
      __dst[v14] = 0;
      result = (objc_selector *)sel_registerName(__dst);
      *v15 = result;
      v11 = (char *)v13 + 1;
    }
    while (*(_BYTE *)v13);
    if (a3 && !*a3)
    {
      result = (objc_selector *)sel_registerName((const char *)name);
      *a3 = result;
    }
    if (a4)
    {
      if (!*a4)
      {
        snprintf(__dst, 0x80uLL, "set%s:", (const char *)name);
        LOBYTE(v17) = __toupper((char)v17);
        result = (objc_selector *)sel_registerName(__dst);
        *a4 = result;
      }
    }
  }
  else
  {
    do
    {
      result = class_getSuperclass(v8);
      v8 = result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__function::__value_func<int ()(OpaqueAudioComponentInstance *,objc_object *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18EF27224(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914B08;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914B08;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  int inData;

  v3 = *a2;
  inData = objc_msgSend(*a3, "BOOLValue");
  return AudioUnitSetProperty(v3, 0x33u, 0, 0, &inData, 4u);
}

_QWORD *std::__function::__value_func<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18EF27438(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914B50;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914B50;
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  int outData;

  v3 = *a2;
  v4 = *a3;
  ioDataSize = 4;
  outData = 0;
  Property = AudioUnitGetProperty(v3, 0x33u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", outData != 0);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

_QWORD *std::__function::__value_func<objc_object * ()(void const*,unsigned int,int &)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18EF276AC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914B98;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914B98;
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 4u)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", **a2);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

_QWORD *std::__function::__value_func<int ()(objc_object *,void *,unsigned int &)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18EF278CC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914AC0;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914AC0;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,51u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  _DWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5)
      *v5 = objc_msgSend(v6, "unsignedIntValue");
    v8 = 0;
    *a4 = 4;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF27998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<double,double,40u,ScalarConverter,3u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<double,40u,3u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "d");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "d");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<double,40u,3u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,40u,3u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<double,40u,3u>::stubSetter);
}

BOOL TV3Property<double,40u,3u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,40u,3u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<double,40u,3u>::marshalSetter_Global);
}

BOOL TV3Property<double,40u,3u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,40u,3u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<double,40u,3u>::marshalSetter_Bus);
}

BOOL TAUProperty<double,double,40u,ScalarConverter,3u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeSetter_Global);
}

BOOL TAUProperty<double,double,40u,ScalarConverter,3u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeSetter_Bus);
}

double TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  double v4;
  UInt32 ioDataSize;
  double outData;

  v1 = a1;
  outData = 0.0;
  ioDataSize = 8;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x28u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
    v4 = 0.0;
  else
    v4 = outData;

  return v4;
}

void sub_18EF27C88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeSetter_Bus(void *a1, double a2)
{
  id v3;
  id WeakRetained;
  double inData;

  v3 = a1;
  inData = a2;
  WeakRetained = objc_loadWeakRetained((id *)v3 + 14);
  AudioUnitSetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x28u, *((_DWORD *)v3 + 32), *((_DWORD *)v3 + 33), &inData, 8u);

}

void sub_18EF27D24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  double v6;
  UInt32 ioDataSize;
  double outData;

  v3 = a1;
  outData = 0.0;
  ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x28u, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((double (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData;
  }

  return v6;
}

void sub_18EF27DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TAUProperty<double,double,40u,ScalarConverter,3u>::v2BridgeSetter_Global(void *a1, const char *a2, double a3)
{
  id v5;
  objc_class *v6;
  IMP MethodImplementation;
  double inData;

  v5 = a1;
  inData = a3;
  if (AudioUnitSetProperty((AudioUnit)objc_msgSend(v5, "audioUnit"), 0x28u, 0, 0, &inData, 8u))
  {
    v6 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, double))MethodImplementation)(v5, a2, a3);
  }

}

void sub_18EF27E70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double TV3Property<double,40u,3u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  double v8;
  double v9;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x28);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    objc_msgSend(v7, "doubleValue");
    v9 = v8;

  }
  else
  {
    v9 = 0.0;
  }

  return v9;
}

void sub_18EF27F60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<double,40u,3u>::marshalSetter_Bus(void *a1, double a2)
{
  CFDictionaryRef *v3;
  _QWORD *Value;
  id v5;
  id WeakRetained;
  void *v7;
  id *v8;

  v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v3 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v3, (const void *)0x28);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a2);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained(v8 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v8 + 32), *((unsigned int *)v8 + 33));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v5, v7, 0);

  }
}

void sub_18EF2807C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

double TV3Property<double,40u,3u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  double v7;
  double v8;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x28);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    objc_msgSend(v6, "doubleValue");
    v8 = v7;

  }
  else
  {
    v8 = 0.0;
  }

  return v8;
}

void sub_18EF2815C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void TV3Property<double,40u,3u>::marshalSetter_Global(void *a1, double a2)
{
  CFDictionaryRef *v3;
  _QWORD *Value;
  id v5;
  void *v6;
  id v7;

  v7 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v3 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v3, (const void *)0x28);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a2);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_setValue:forProperty:error:", v5, v6, 0);

  }
}

void sub_18EF28238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

double TV3Property<double,40u,3u>::stubGetter()
{
  return 0.0;
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914EB0;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914EB0;
}

uint64_t std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  uint64_t v4;
  uint64_t inData;

  v3 = *a2;
  objc_msgSend(*a3, "doubleValue");
  inData = v4;
  return AudioUnitSetProperty(v3, 0x28u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914EF8;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914EF8;
}

id std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  double outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0.0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x28u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", outData);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914F40;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914F40;
}

id std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, double **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 8u)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", **a2);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914E68;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914E68;
}

uint64_t std::__function::__func<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,40u,ScalarConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
    {
      objc_msgSend(v6, "doubleValue");
      *v5 = v9;
    }
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF28580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915840;
  return result;
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915840;
}

id std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2)
{
  return TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Common(*a2, 0, 0);
}

id TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Common(OpaqueAudioComponentInstance *a1, AudioUnitScope inScope, AudioUnitElement inElement)
{
  int *begin;
  id v8;
  id v9;
  std::vector<int>::pointer end;
  unsigned int *v11;
  id v12;
  Boolean outWritable;
  UInt32 outDataSize;
  std::vector<int> v15;

  memset(&v15, 0, sizeof(v15));
  outDataSize = 0;
  outWritable = 0;
  if (AudioUnitGetPropertyInfo(a1, 0x20u, inScope, inElement, &outDataSize, &outWritable))
    return 0;
  std::vector<unsigned int>::resize(&v15, (unint64_t)outDataSize >> 2);
  begin = v15.__begin_;
  if (!AudioUnitGetProperty(a1, 0x20u, inScope, inElement, v15.__begin_, &outDataSize))
  {
    v9 = (id)objc_opt_new();

    end = v15.__end_;
    if (begin != v15.__end_)
    {
      v11 = (unsigned int *)begin;
      do
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *v11);
        v12 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "addObject:", v12);

        ++v11;
      }
      while (v11 != (unsigned int *)end);
    }
    v8 = v9;

    if (!begin)
      return v8;
    goto LABEL_5;
  }
  v8 = 0;
  if (begin)
  {
LABEL_5:
    v15.__end_ = begin;
    operator delete(begin);
  }
  return v8;
}

void sub_18EF28730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  std::vector<int>::size_type v5;
  std::vector<int>::size_type v6;
  int *value;
  uint64_t v8;
  std::vector<int>::size_type v9;
  unint64_t v10;
  char *v11;
  std::vector<int>::pointer v12;
  std::vector<int>::pointer v13;
  char *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int v18;
  int *v19;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v19 = &begin[__sz];
    goto LABEL_15;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 4 * v6);
    v19 = &end[v6];
LABEL_15:
    this->__end_ = v19;
    return;
  }
  if (__sz >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 1;
  if (v8 >> 1 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
  v12 = this->__begin_;
  v13 = this->__end_;
  v14 = &v11[4 * v5];
  v16 = (int *)&v11[4 * v15];
  bzero(v14, 4 * v6);
  v17 = (int *)&v14[4 * v6];
  while (v13 != v12)
  {
    v18 = *--v13;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  this->__begin_ = (std::vector<int>::pointer)v14;
  this->__end_ = v17;
  this->__end_cap_.__value_ = v16;
  if (v12)
    operator delete(v12);
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29157F8;
  return result;
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29157F8;
}

uint64_t std::__function::__func<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, void **a3, _DWORD *a4)
{
  id v5;
  uint64_t v6;
  void *v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  void *v22;
  _DWORD *v23;
  _DWORD *v25;
  void *__dst;
  id obj;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *__src;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  __dst = *a3;
  v5 = *a2;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v5;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, &__src, 16);
  v25 = a4;
  v7 = 0;
  v8 = 0;
  if (v6)
  {
    v9 = 0;
    v10 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v29 != v10)
          objc_enumerationMutation(obj);
        v12 = *(id *)(*((_QWORD *)&v28 + 1) + 8 * i);
        v13 = objc_msgSend(v12, "unsignedIntValue");
        v14 = v13;
        if (v8 >= v9)
        {
          v15 = (uint64_t)(v8 - (_QWORD)v7) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v9 - (_QWORD)v7) >> 1 > v16)
            v16 = (uint64_t)(v9 - (_QWORD)v7) >> 1;
          if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v17);
          else
            v18 = 0;
          v19 = (_DWORD *)(v17 + 4 * v15);
          *v19 = v14;
          v20 = v19 + 1;
          while ((void *)v8 != v7)
          {
            v21 = *(_DWORD *)(v8 - 4);
            v8 -= 4;
            *--v19 = v21;
          }
          v9 = v17 + 4 * v18;
          if (v7)
            operator delete(v7);
          v7 = v19;
          v8 = (size_t)v20;
        }
        else
        {
          *(_DWORD *)v8 = v13;
          v8 += 4;
        }

      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, &__src, 16);
    }
    while (v6);
  }

  __src = 0;
  v33 = 0;
  v34 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__src, v7, v8, (uint64_t)(v8 - (_QWORD)v7) >> 2);
  v22 = __src;
  LODWORD(v8) = (v33 - (_DWORD)__src) & 0xFFFFFFFC;
  if (__dst)
  {
    v23 = v25;
    if (v8 >= *v25)
      v8 = *v25;
    else
      v8 = v8;
    memcpy(__dst, __src, v8);
  }
  else
  {
    v23 = v25;
  }
  *v23 = v8;
  if (v22)
    operator delete(v22);
  if (v7)
    operator delete(v7);
  return 0;
}

void sub_18EF28B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  if (v12)
    operator delete(v12);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18EF28BDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TV3Property<NSArray * {__strong},32u,2u>::v2PropertySize()
{
  return 0x100000000;
}

char *TV3Property<NSArray * {__strong},32u,2u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

IMP TV3Property<NSArray * {__strong},32u,2u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},32u,2u>::stubGetter);
}

BOOL TV3Property<NSArray * {__strong},32u,2u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},32u,2u>::marshalGetter_Global);
}

BOOL TV3Property<NSArray * {__strong},32u,2u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},32u,2u>::marshalGetter_Bus);
}

BOOL TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Global);
}

BOOL TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Bus);
}

id TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Bus(uint64_t a1)
{
  TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Common(*(OpaqueAudioComponentInstance **)(a1 + 120), *(_DWORD *)(a1 + 128), *(_DWORD *)(a1 + 132));
  return (id)objc_claimAutoreleasedReturnValue();
}

id TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Global(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  TAUVectorProperty<NSArray * {__strong},unsigned int,32u,ArrayVectorConverter<unsigned int>,2u>::v2BridgeGetter_Common((OpaqueAudioComponentInstance *)objc_msgSend(v1, "audioUnit"), 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_18EF28D80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id TV3Property<NSArray * {__strong},32u,2u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x20);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF28E54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id TV3Property<NSArray * {__strong},32u,2u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x20);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF28F14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSArray * {__strong},32u,2u>::stubGetter()
{
  return 0;
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSString * {__strong},30u,3u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<NSString * {__strong},30u,3u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},30u,3u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},30u,3u>::stubSetter);
}

BOOL TV3Property<NSString * {__strong},30u,3u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},30u,3u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},30u,3u>::marshalSetter_Global);
}

BOOL TV3Property<NSString * {__strong},30u,3u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},30u,3u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},30u,3u>::marshalSetter_Bus);
}

BOOL TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeSetter_Global);
}

BOOL TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeSetter_Bus);
}

id TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  id v4;
  UInt32 ioDataSize;
  id outData;

  v1 = a1;
  outData = 0;
  ioDataSize = 8;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x1Eu, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
  {
    v4 = 0;
  }
  else
  {
    v4 = outData;

  }
  return v4;
}

void sub_18EF29218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id WeakRetained;
  id inData;

  v4 = a1;
  v5 = a3;
  inData = v5;
  WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x1Eu, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 8u);

}

void sub_18EF292C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = a1;
  outData = 0;
  ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x1Eu, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = outData;

  }
  return v6;
}

void sub_18EF2937C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TAUProperty<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::v2BridgeSetter_Global(void *a1, const char *a2, void *a3)
{
  id v5;
  id v6;
  objc_class *v7;
  IMP MethodImplementation;
  id inData;

  v5 = a1;
  v6 = a3;
  inData = v6;
  if (AudioUnitSetProperty((AudioUnit)objc_msgSend(v5, "audioUnit"), 0x1Eu, 0, 0, &inData, 8u))
  {
    v7 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v7, a2);
    ((void (*)(id, const char *, id))MethodImplementation)(v5, a2, v6);
  }

}

void sub_18EF29434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},30u,3u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x1E);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF29518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},30u,3u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  id WeakRetained;
  void *v9;
  id *v10;

  v10 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x1E);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    WeakRetained = objc_loadWeakRetained(v10 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v10 + 32), *((unsigned int *)v10 + 33));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v7, v9, 0);

  }
}

void sub_18EF2961C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},30u,3u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x1E);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF296E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},30u,3u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  void *v8;
  id v9;

  v9 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x1E);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_setValue:forProperty:error:", v7, v8, 0);

  }
}

void sub_18EF297A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSString * {__strong},30u,3u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29145F8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29145F8;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id inData;

  v3 = *a2;
  inData = objc_retainAutorelease(*a3);
  return AudioUnitSetProperty(v3, 0x1Eu, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914640;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914640;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x1Eu, 0, 0, &outData, &ioDataSize);
  if (!Property)
    return objc_retainAutorelease(outData);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *v4 = v6;

  }
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914688;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914688;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 8u)
  {
    v5 = objc_retainAutorelease(**a2);
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29145B0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29145B0;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,30u,CFNSConverter,3u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
      *v5 = v6;
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E28FFF90;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E28FFF90;
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id inData;

  v3 = *a2;
  inData = objc_retainAutorelease(*a3);
  return AudioUnitSetProperty(v3, 0x62787073u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E28FFFD8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E28FFFD8;
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x62787073u, 0, 0, &outData, &ioDataSize);
  if (!Property)
    return objc_retainAutorelease(outData);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *v4 = v6;

  }
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2900020;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2900020;
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 8u)
  {
    v5 = objc_retainAutorelease(**a2);
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E28FFF48;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E28FFF48;
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
      *v5 = v6;
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

uint64_t TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060275u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSDictionary * {__strong},1652060275u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<NSDictionary * {__strong},1652060275u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060275u,17u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060275u,17u>::stubSetter);
}

BOOL TV3Property<NSDictionary * {__strong},1652060275u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalSetter_Global);
}

BOOL TV3Property<NSDictionary * {__strong},1652060275u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalSetter_Bus);
}

id TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x62787073);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF2A03C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  id WeakRetained;
  void *v9;
  id *v10;

  v10 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x62787073);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    WeakRetained = objc_loadWeakRetained(v10 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v10 + 32), *((unsigned int *)v10 + 33));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v7, v9, 0);

  }
}

void sub_18EF2A144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x62787073);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF2A214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<NSDictionary * {__strong},1652060275u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  void *v8;
  id v9;

  v9 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x62787073);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_setValue:forProperty:error:", v7, v8, 0);

  }
}

void sub_18EF2A2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSDictionary * {__strong},1652060275u,17u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E28FFE70;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E28FFE70;
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id inData;

  v3 = *a2;
  inData = objc_retainAutorelease(*a3);
  return AudioUnitSetProperty(v3, 0x62787072u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E28FFEB8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E28FFEB8;
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x62787072u, 0, 0, &outData, &ioDataSize);
  if (!Property)
    return objc_retainAutorelease(outData);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *v4 = v6;

  }
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E28FFF00;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E28FFF00;
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 8u)
  {
    v5 = objc_retainAutorelease(**a2);
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E28FFE28;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E28FFE28;
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
      *v5 = v6;
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

uint64_t TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1652060274u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSDictionary * {__strong},1652060274u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<NSDictionary * {__strong},1652060274u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060274u,17u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060274u,17u>::stubSetter);
}

BOOL TV3Property<NSDictionary * {__strong},1652060274u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalSetter_Global);
}

BOOL TV3Property<NSDictionary * {__strong},1652060274u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalSetter_Bus);
}

id TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x62787072);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF2A87C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  id WeakRetained;
  void *v9;
  id *v10;

  v10 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x62787072);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    WeakRetained = objc_loadWeakRetained(v10 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v10 + 32), *((unsigned int *)v10 + 33));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v7, v9, 0);

  }
}

void sub_18EF2A984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x62787072);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF2AA54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<NSDictionary * {__strong},1652060274u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  void *v8;
  id v9;

  v9 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x62787072);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_setValue:forProperty:error:", v7, v8, 0);

  }
}

void sub_18EF2AB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSDictionary * {__strong},1652060274u,17u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29000B0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29000B0;
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id inData;

  v3 = *a2;
  inData = objc_retainAutorelease(*a3);
  return AudioUnitSetProperty(v3, 0x67727072u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29000F8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29000F8;
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x67727072u, 0, 0, &outData, &ioDataSize);
  if (!Property)
    return objc_retainAutorelease(outData);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *v4 = v6;

  }
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2900140;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2900140;
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 8u)
  {
    v5 = objc_retainAutorelease(**a2);
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2900068;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2900068;
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
      *v5 = v6;
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

uint64_t TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,1735553138u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSDictionary * {__strong},1735553138u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<NSDictionary * {__strong},1735553138u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1735553138u,17u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1735553138u,17u>::stubSetter);
}

BOOL TV3Property<NSDictionary * {__strong},1735553138u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalSetter_Global);
}

BOOL TV3Property<NSDictionary * {__strong},1735553138u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalSetter_Bus);
}

id TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x67727072);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF2B0BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  id WeakRetained;
  void *v9;
  id *v10;

  v10 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x67727072);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    WeakRetained = objc_loadWeakRetained(v10 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v10 + 32), *((unsigned int *)v10 + 33));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v7, v9, 0);

  }
}

void sub_18EF2B1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x67727072);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF2B294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<NSDictionary * {__strong},1735553138u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  void *v8;
  id v9;

  v9 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x67727072);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_setValue:forProperty:error:", v7, v8, 0);

  }
}

void sub_18EF2B358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSDictionary * {__strong},1735553138u,17u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913E18;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913E18;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id inData;

  v3 = *a2;
  inData = objc_retainAutorelease(*a3);
  return AudioUnitSetProperty(v3, 0x61757370u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913E60;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913E60;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x61757370u, 0, 0, &outData, &ioDataSize);
  if (!Property)
    return objc_retainAutorelease(outData);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *v4 = v6;

  }
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913EA8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913EA8;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 8u)
  {
    v5 = objc_retainAutorelease(**a2);
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913DD0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913DD0;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
      *v5 = v6;
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,1635087216u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSString * {__strong},1635087216u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<NSString * {__strong},1635087216u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1635087216u,17u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1635087216u,17u>::stubSetter);
}

BOOL TV3Property<NSString * {__strong},1635087216u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1635087216u,17u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1635087216u,17u>::marshalSetter_Global);
}

BOOL TV3Property<NSString * {__strong},1635087216u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1635087216u,17u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1635087216u,17u>::marshalSetter_Bus);
}

id TV3Property<NSString * {__strong},1635087216u,17u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x61757370);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF2B8FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},1635087216u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  id WeakRetained;
  void *v9;
  id *v10;

  v10 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x61757370);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    WeakRetained = objc_loadWeakRetained(v10 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v10 + 32), *((unsigned int *)v10 + 33));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v7, v9, 0);

  }
}

void sub_18EF2BA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1635087216u,17u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x61757370);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF2BAD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},1635087216u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  void *v8;
  id v9;

  v9 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x61757370);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_setValue:forProperty:error:", v7, v8, 0);

  }
}

void sub_18EF2BB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSString * {__strong},1635087216u,17u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29143B8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29143B8;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id inData;

  v3 = *a2;
  inData = objc_retainAutorelease(*a3);
  return AudioUnitSetProperty(v3, 0x70727370u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914400;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914400;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x70727370u, 0, 0, &outData, &ioDataSize);
  if (!Property)
    return objc_retainAutorelease(outData);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *v4 = v6;

  }
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914448;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914448;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 8u)
  {
    v5 = objc_retainAutorelease(**a2);
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914370;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914370;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
      *v5 = v6;
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,1886548848u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSString * {__strong},1886548848u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<NSString * {__strong},1886548848u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548848u,17u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548848u,17u>::stubSetter);
}

BOOL TV3Property<NSString * {__strong},1886548848u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548848u,17u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548848u,17u>::marshalSetter_Global);
}

BOOL TV3Property<NSString * {__strong},1886548848u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548848u,17u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548848u,17u>::marshalSetter_Bus);
}

id TV3Property<NSString * {__strong},1886548848u,17u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x70727370);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF2C13C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},1886548848u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  id WeakRetained;
  void *v9;
  id *v10;

  v10 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x70727370);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    WeakRetained = objc_loadWeakRetained(v10 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v10 + 32), *((unsigned int *)v10 + 33));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v7, v9, 0);

  }
}

void sub_18EF2C244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1886548848u,17u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x70727370);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF2C314(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},1886548848u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  void *v8;
  id v9;

  v9 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x70727370);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_setValue:forProperty:error:", v7, v8, 0);

  }
}

void sub_18EF2C3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSString * {__strong},1886548848u,17u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914058;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914058;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id inData;

  v3 = *a2;
  inData = objc_retainAutorelease(*a3);
  return AudioUnitSetProperty(v3, 0x67727478u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29140A0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29140A0;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x67727478u, 0, 0, &outData, &ioDataSize);
  if (!Property)
    return objc_retainAutorelease(outData);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *v4 = v6;

  }
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29140E8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29140E8;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 8u)
  {
    v5 = objc_retainAutorelease(**a2);
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914010;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914010;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
      *v5 = v6;
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,1735554168u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSString * {__strong},1735554168u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<NSString * {__strong},1735554168u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1735554168u,17u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1735554168u,17u>::stubSetter);
}

BOOL TV3Property<NSString * {__strong},1735554168u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1735554168u,17u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1735554168u,17u>::marshalSetter_Global);
}

BOOL TV3Property<NSString * {__strong},1735554168u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1735554168u,17u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1735554168u,17u>::marshalSetter_Bus);
}

id TV3Property<NSString * {__strong},1735554168u,17u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x67727478);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF2C97C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},1735554168u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  id WeakRetained;
  void *v9;
  id *v10;

  v10 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x67727478);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    WeakRetained = objc_loadWeakRetained(v10 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v10 + 32), *((unsigned int *)v10 + 33));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v7, v9, 0);

  }
}

void sub_18EF2CA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1735554168u,17u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x67727478);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF2CB54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},1735554168u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  void *v8;
  id v9;

  v9 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x67727478);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_setValue:forProperty:error:", v7, v8, 0);

  }
}

void sub_18EF2CC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSString * {__strong},1735554168u,17u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913F38;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913F38;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id inData;

  v3 = *a2;
  inData = objc_retainAutorelease(*a3);
  return AudioUnitSetProperty(v3, 0x64737067u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913F80;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913F80;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x64737067u, 0, 0, &outData, &ioDataSize);
  if (!Property)
    return objc_retainAutorelease(outData);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *v4 = v6;

  }
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913FC8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913FC8;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 8u)
  {
    v5 = objc_retainAutorelease(**a2);
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913EF0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913EF0;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
      *v5 = v6;
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,1685287015u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSString * {__strong},1685287015u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<NSString * {__strong},1685287015u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1685287015u,17u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1685287015u,17u>::stubSetter);
}

BOOL TV3Property<NSString * {__strong},1685287015u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1685287015u,17u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1685287015u,17u>::marshalSetter_Global);
}

BOOL TV3Property<NSString * {__strong},1685287015u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1685287015u,17u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1685287015u,17u>::marshalSetter_Bus);
}

id TV3Property<NSString * {__strong},1685287015u,17u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x64737067);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF2D1BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},1685287015u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  id WeakRetained;
  void *v9;
  id *v10;

  v10 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x64737067);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    WeakRetained = objc_loadWeakRetained(v10 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v10 + 32), *((unsigned int *)v10 + 33));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v7, v9, 0);

  }
}

void sub_18EF2D2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1685287015u,17u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x64737067);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF2D394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},1685287015u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  void *v8;
  id v9;

  v9 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x64737067);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_setValue:forProperty:error:", v7, v8, 0);

  }
}

void sub_18EF2D458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSString * {__strong},1685287015u,17u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914298;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914298;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id inData;

  v3 = *a2;
  inData = objc_retainAutorelease(*a3);
  return AudioUnitSetProperty(v3, 0x70727270u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29142E0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29142E0;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x70727270u, 0, 0, &outData, &ioDataSize);
  if (!Property)
    return objc_retainAutorelease(outData);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *v4 = v6;

  }
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914328;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914328;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 8u)
  {
    v5 = objc_retainAutorelease(**a2);
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914250;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914250;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
      *v5 = v6;
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,1886548592u,CFNSConverter,17u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSString * {__strong},1886548592u,17u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<NSString * {__strong},1886548592u,17u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548592u,17u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548592u,17u>::stubSetter);
}

BOOL TV3Property<NSString * {__strong},1886548592u,17u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548592u,17u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548592u,17u>::marshalSetter_Global);
}

BOOL TV3Property<NSString * {__strong},1886548592u,17u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548592u,17u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1886548592u,17u>::marshalSetter_Bus);
}

id TV3Property<NSString * {__strong},1886548592u,17u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x70727270);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF2D9FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},1886548592u,17u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  id WeakRetained;
  void *v9;
  id *v10;

  v10 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x70727270);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    WeakRetained = objc_loadWeakRetained(v10 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v10 + 32), *((unsigned int *)v10 + 33));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v7, v9, 0);

  }
}

void sub_18EF2DB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1886548592u,17u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x70727270);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF2DBD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},1886548592u,17u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  void *v8;
  id v9;

  v9 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x70727270);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_setValue:forProperty:error:", v7, v8, 0);

  }
}

void sub_18EF2DC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSString * {__strong},1886548592u,17u>::stubGetter()
{
  return 0;
}

uint64_t TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::v2PropertySize()
{
  return 0x100000004;
}

char *TV3Property<BOOL,1844u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "B");
  result = strdup(__str);
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

IMP TV3Property<BOOL,1844u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,1844u,0u>::stubGetter);
}

BOOL TV3Property<BOOL,1844u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,1844u,0u>::marshalGetter_Global);
}

BOOL TV3Property<BOOL,1844u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,1844u,0u>::marshalGetter_Bus);
}

BOOL TAUProperty<BOOL,unsigned int,1844u,ScalarConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,1844u,ScalarConverter,0u>::v2BridgeGetter_Global);
}

BOOL TAUProperty<BOOL,unsigned int,1844u,ScalarConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,1844u,ScalarConverter,0u>::v2BridgeGetter_Bus);
}

uint64_t TAUProperty<BOOL,unsigned int,1844u,ScalarConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  BOOL v4;
  uint64_t v5;
  UInt32 ioDataSize;
  int outData;

  v1 = a1;
  ioDataSize = 4;
  outData = 0;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x734u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
    v4 = 1;
  else
    v4 = outData == 0;
  v5 = !v4;

  return v5;
}

void sub_18EF2DE7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TAUProperty<BOOL,unsigned int,1844u,ScalarConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  uint64_t v6;
  UInt32 ioDataSize;
  int outData;

  v3 = a1;
  ioDataSize = 4;
  outData = 0;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x734u, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData != 0;
  }

  return v6;
}

void sub_18EF2DF24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *TV3Property<BOOL,1844u,0u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x734);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    Value = (_QWORD *)objc_msgSend(v7, "BOOLValue");

  }
  return Value;
}

void sub_18EF2E004(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,1844u,0u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x734);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    v7 = objc_msgSend(v6, "BOOLValue");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF2E0DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,1844u,0u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914718;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914718;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  int inData;

  v3 = *a2;
  inData = objc_msgSend(*a3, "BOOLValue");
  return AudioUnitSetProperty(v3, 0x734u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914760;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914760;
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  int outData;

  v3 = *a2;
  v4 = *a3;
  ioDataSize = 4;
  outData = 0;
  Property = AudioUnitGetProperty(v3, 0x734u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", outData != 0);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29146D0;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29146D0;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,1844u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  _DWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5)
      *v5 = objc_msgSend(v6, "unsignedIntValue");
    v8 = 0;
    *a4 = 4;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF2E378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::v2PropertySize()
{
  return 0x100000004;
}

char *TV3Property<long,1845u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "q");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "q");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<long,1845u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,1845u,1u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<long,1845u,1u>::stubSetter);
}

BOOL TV3Property<long,1845u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,1845u,1u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<long,1845u,1u>::marshalSetter_Global);
}

BOOL TV3Property<long,1845u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,1845u,1u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<long,1845u,1u>::marshalSetter_Bus);
}

BOOL TAUProperty<long,int,1845u,ScalarConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeSetter_Global);
}

BOOL TAUProperty<long,int,1845u,ScalarConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeSetter_Bus);
}

uint64_t TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  int v4;
  uint64_t v5;
  UInt32 ioDataSize;
  int outData;

  v1 = a1;
  ioDataSize = 4;
  outData = 0;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x735u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  v4 = outData;
  if (Property)
    v4 = 0;
  v5 = v4;

  return v5;
}

void sub_18EF2E65C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4;
  id WeakRetained;
  int inData;

  v4 = a1;
  inData = a3;
  WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x735u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);

}

void sub_18EF2E6F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  uint64_t v6;
  UInt32 ioDataSize;
  int outData;

  v3 = a1;
  ioDataSize = 4;
  outData = 0;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x735u, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData;
  }

  return v6;
}

void sub_18EF2E790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TAUProperty<long,int,1845u,ScalarConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5;
  objc_class *v6;
  IMP MethodImplementation;
  int inData;

  v5 = a1;
  inData = a3;
  if (AudioUnitSetProperty((AudioUnit)objc_msgSend(v5, "audioUnit"), 0x735u, 0, 0, &inData, 4u))
  {
    v6 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }

}

void sub_18EF2E830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *TV3Property<long,1845u,1u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x735);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    Value = (_QWORD *)objc_msgSend(v7, "integerValue");

  }
  return Value;
}

void sub_18EF2E910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<long,1845u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  id WeakRetained;
  void *v8;
  id *v9;

  v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0x735);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained(v9 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v9 + 32), *((unsigned int *)v9 + 33));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v6, v8, 0);

  }
}

void sub_18EF2EA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<long,1845u,1u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x735);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    v7 = objc_msgSend(v6, "integerValue");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF2EAFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<long,1845u,1u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  void *v7;
  id v8;

  v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0x735);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_setValue:forProperty:error:", v6, v7, 0);

  }
}

void sub_18EF2EBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<long,1845u,1u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914FD0;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914FD0;
}

uint64_t std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  int inData;

  v3 = *a2;
  inData = objc_msgSend(*a3, "integerValue");
  return AudioUnitSetProperty(v3, 0x735u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915018;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915018;
}

id std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  int outData;

  v3 = *a2;
  v4 = *a3;
  ioDataSize = 4;
  outData = 0;
  Property = AudioUnitGetProperty(v3, 0x735u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", outData);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915060;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915060;
}

id std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 4u)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", **a2);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914F88;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914F88;
}

uint64_t std::__function::__func<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,1845u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  _DWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5)
      *v5 = objc_msgSend(v6, "intValue");
    v8 = 0;
    *a4 = 4;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF2EF10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSString * {__strong},1846u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<NSString * {__strong},1846u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1846u,1u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1846u,1u>::stubSetter);
}

BOOL TV3Property<NSString * {__strong},1846u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1846u,1u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1846u,1u>::marshalSetter_Global);
}

BOOL TV3Property<NSString * {__strong},1846u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},1846u,1u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},1846u,1u>::marshalSetter_Bus);
}

BOOL TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeSetter_Global);
}

BOOL TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeSetter_Bus);
}

id TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  id v4;
  UInt32 ioDataSize;
  id outData;

  v1 = a1;
  outData = 0;
  ioDataSize = 8;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x736u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
  {
    v4 = 0;
  }
  else
  {
    v4 = outData;

  }
  return v4;
}

void sub_18EF2F204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id WeakRetained;
  id inData;

  v4 = a1;
  v5 = a3;
  inData = v5;
  WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x736u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 8u);

}

void sub_18EF2F2AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = a1;
  outData = 0;
  ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x736u, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = outData;

  }
  return v6;
}

void sub_18EF2F368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TAUProperty<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, void *a3)
{
  id v5;
  id v6;
  objc_class *v7;
  IMP MethodImplementation;
  id inData;

  v5 = a1;
  v6 = a3;
  inData = v6;
  if (AudioUnitSetProperty((AudioUnit)objc_msgSend(v5, "audioUnit"), 0x736u, 0, 0, &inData, 8u))
  {
    v7 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v7, a2);
    ((void (*)(id, const char *, id))MethodImplementation)(v5, a2, v6);
  }

}

void sub_18EF2F420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1846u,1u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x736);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF2F504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},1846u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  id WeakRetained;
  void *v9;
  id *v10;

  v10 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x736);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    WeakRetained = objc_loadWeakRetained(v10 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v10 + 32), *((unsigned int *)v10 + 33));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v7, v9, 0);

  }
}

void sub_18EF2F608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},1846u,1u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x736);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF2F6D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},1846u,1u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  void *v8;
  id v9;

  v9 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x736);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_setValue:forProperty:error:", v7, v8, 0);

  }
}

void sub_18EF2F794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSString * {__strong},1846u,1u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914178;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914178;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id inData;

  v3 = *a2;
  inData = objc_retainAutorelease(*a3);
  return AudioUnitSetProperty(v3, 0x736u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29141C0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29141C0;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x736u, 0, 0, &outData, &ioDataSize);
  if (!Property)
    return objc_retainAutorelease(outData);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *v4 = v6;

  }
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914208;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914208;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 8u)
  {
    v5 = objc_retainAutorelease(**a2);
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914130;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914130;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,1846u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
      *v5 = v6;
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

uint64_t TAUPropertyBase<long,int,65u,ScalarConverter,1u>::v2PropertySize()
{
  return 0x100000004;
}

char *TV3Property<long,65u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "q");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "q");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<long,65u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,65u,1u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<long,65u,1u>::stubSetter);
}

BOOL TV3Property<long,65u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,65u,1u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<long,65u,1u>::marshalSetter_Global);
}

BOOL TV3Property<long,65u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,65u,1u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<long,65u,1u>::marshalSetter_Bus);
}

BOOL TAUProperty<long,int,65u,ScalarConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeSetter_Global);
}

BOOL TAUProperty<long,int,65u,ScalarConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeSetter_Bus);
}

uint64_t TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  int v4;
  uint64_t v5;
  UInt32 ioDataSize;
  int outData;

  v1 = a1;
  ioDataSize = 4;
  outData = 0;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x41u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  v4 = outData;
  if (Property)
    v4 = 0;
  v5 = v4;

  return v5;
}

void sub_18EF2FD90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4;
  id WeakRetained;
  int inData;

  v4 = a1;
  inData = a3;
  WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x41u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);

}

void sub_18EF2FE24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  uint64_t v6;
  UInt32 ioDataSize;
  int outData;

  v3 = a1;
  ioDataSize = 4;
  outData = 0;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x41u, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData;
  }

  return v6;
}

void sub_18EF2FEC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TAUProperty<long,int,65u,ScalarConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5;
  objc_class *v6;
  IMP MethodImplementation;
  int inData;

  v5 = a1;
  inData = a3;
  if (AudioUnitSetProperty((AudioUnit)objc_msgSend(v5, "audioUnit"), 0x41u, 0, 0, &inData, 4u))
  {
    v6 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }

}

void sub_18EF2FF64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *TV3Property<long,65u,1u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x41);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    Value = (_QWORD *)objc_msgSend(v7, "integerValue");

  }
  return Value;
}

void sub_18EF30044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<long,65u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  id WeakRetained;
  void *v8;
  id *v9;

  v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0x41);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained(v9 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v9 + 32), *((unsigned int *)v9 + 33));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v6, v8, 0);

  }
}

void sub_18EF30158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<long,65u,1u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x41);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    v7 = objc_msgSend(v6, "integerValue");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF30230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<long,65u,1u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  void *v7;
  id v8;

  v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0x41);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_setValue:forProperty:error:", v6, v7, 0);

  }
}

void sub_18EF30300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<long,65u,1u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29151C8;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29151C8;
}

uint64_t std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  int inData;

  v3 = *a2;
  inData = objc_msgSend(*a3, "integerValue");
  return AudioUnitSetProperty(v3, 0x41u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915210;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915210;
}

id std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  int outData;

  v3 = *a2;
  v4 = *a3;
  ioDataSize = 4;
  outData = 0;
  Property = AudioUnitGetProperty(v3, 0x41u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", outData);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915258;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915258;
}

id std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 4u)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", **a2);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915180;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915180;
}

uint64_t std::__function::__func<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,65u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  _DWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5)
      *v5 = objc_msgSend(v6, "intValue");
    v8 = 0;
    *a4 = 4;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF30644(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<long,int,64u,ScalarConverter,0u>::v2PropertySize()
{
  return 0x100000004;
}

char *TV3Property<long,64u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "q");
  result = strdup(__str);
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

IMP TV3Property<long,64u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,64u,0u>::stubGetter);
}

BOOL TV3Property<long,64u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,64u,0u>::marshalGetter_Global);
}

BOOL TV3Property<long,64u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<long,64u,0u>::marshalGetter_Bus);
}

BOOL TAUProperty<long,int,64u,ScalarConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<long,int,64u,ScalarConverter,0u>::v2BridgeGetter_Global);
}

BOOL TAUProperty<long,int,64u,ScalarConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<long,int,64u,ScalarConverter,0u>::v2BridgeGetter_Bus);
}

uint64_t TAUProperty<long,int,64u,ScalarConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  int v4;
  uint64_t v5;
  UInt32 ioDataSize;
  int outData;

  v1 = a1;
  ioDataSize = 4;
  outData = 0;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x40u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  v4 = outData;
  if (Property)
    v4 = 0;
  v5 = v4;

  return v5;
}

void sub_18EF30800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TAUProperty<long,int,64u,ScalarConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  uint64_t v6;
  UInt32 ioDataSize;
  int outData;

  v3 = a1;
  ioDataSize = 4;
  outData = 0;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x40u, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData;
  }

  return v6;
}

void sub_18EF308A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *TV3Property<long,64u,0u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x40);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    Value = (_QWORD *)objc_msgSend(v7, "integerValue");

  }
  return Value;
}

void sub_18EF30980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<long,64u,0u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x40);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    v7 = objc_msgSend(v6, "integerValue");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF30A58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<long,64u,0u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29150F0;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29150F0;
}

uint64_t std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  int inData;

  v3 = *a2;
  inData = objc_msgSend(*a3, "integerValue");
  return AudioUnitSetProperty(v3, 0x40u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915138;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915138;
}

id std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  int outData;

  v3 = *a2;
  v4 = *a3;
  ioDataSize = 4;
  outData = 0;
  Property = AudioUnitGetProperty(v3, 0x40u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", outData);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29150A8;
  return result;
}

void std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29150A8;
}

uint64_t std::__function::__func<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<long,int,64u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  _DWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5)
      *v5 = objc_msgSend(v6, "intValue");
    v8 = 0;
    *a4 = 4;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF30CEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2PropertySize()
{
  return 0x100000004;
}

char *TV3Property<unsigned long,66u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "Q");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "Q");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<unsigned long,66u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,66u,1u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<unsigned long,66u,1u>::stubSetter);
}

BOOL TV3Property<unsigned long,66u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,66u,1u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<unsigned long,66u,1u>::marshalSetter_Global);
}

BOOL TV3Property<unsigned long,66u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,66u,1u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<unsigned long,66u,1u>::marshalSetter_Bus);
}

BOOL TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeSetter_Global);
}

BOOL TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeSetter_Bus);
}

uint64_t TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  uint64_t v4;
  UInt32 ioDataSize;
  unsigned int outData;

  v1 = a1;
  ioDataSize = 4;
  outData = 0;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x42u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
    v4 = 0;
  else
    v4 = outData;

  return v4;
}

void sub_18EF30FCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4;
  id WeakRetained;
  int inData;

  v4 = a1;
  inData = a3;
  WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x42u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);

}

void sub_18EF31060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  uint64_t v6;
  UInt32 ioDataSize;
  unsigned int outData;

  v3 = a1;
  ioDataSize = 4;
  outData = 0;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x42u, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData;
  }

  return v6;
}

void sub_18EF31100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TAUProperty<unsigned long,unsigned int,66u,ScalarConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5;
  objc_class *v6;
  IMP MethodImplementation;
  int inData;

  v5 = a1;
  inData = a3;
  if (AudioUnitSetProperty((AudioUnit)objc_msgSend(v5, "audioUnit"), 0x42u, 0, 0, &inData, 4u))
  {
    v6 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }

}

void sub_18EF311A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *TV3Property<unsigned long,66u,1u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x42);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    Value = (_QWORD *)objc_msgSend(v7, "unsignedIntegerValue");

  }
  return Value;
}

void sub_18EF31280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<unsigned long,66u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  id WeakRetained;
  void *v8;
  id *v9;

  v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0x42);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained(v9 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v9 + 32), *((unsigned int *)v9 + 33));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v6, v8, 0);

  }
}

void sub_18EF31394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<unsigned long,66u,1u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x42);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    v7 = objc_msgSend(v6, "unsignedIntegerValue");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF3146C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<unsigned long,66u,1u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  void *v7;
  id v8;

  v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0x42);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_setValue:forProperty:error:", v6, v7, 0);

  }
}

void sub_18EF3153C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<unsigned long,66u,1u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915528;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915528;
}

uint64_t std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  int inData;

  v3 = *a2;
  inData = objc_msgSend(*a3, "unsignedIntegerValue");
  return AudioUnitSetProperty(v3, 0x42u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915570;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915570;
}

id std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  unsigned int outData;

  v3 = *a2;
  v4 = *a3;
  ioDataSize = 4;
  outData = 0;
  Property = AudioUnitGetProperty(v3, 0x42u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", outData);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29155B8;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29155B8;
}

id std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 4u)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", **a2);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29154E0;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29154E0;
}

uint64_t std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,66u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  _DWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5)
      *v5 = objc_msgSend(v6, "unsignedIntValue");
    v8 = 0;
    *a4 = 4;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF31880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSArray * {__strong},47u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

IMP TV3Property<NSArray * {__strong},47u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},47u,0u>::stubGetter);
}

BOOL TV3Property<NSArray * {__strong},47u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},47u,0u>::marshalGetter_Global);
}

BOOL TV3Property<NSArray * {__strong},47u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},47u,0u>::marshalGetter_Bus);
}

BOOL TAUProperty<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::v2BridgeGetter_Global);
}

BOOL TAUProperty<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::v2BridgeGetter_Bus);
}

id TAUProperty<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  id v4;
  UInt32 ioDataSize;
  id outData;

  v1 = a1;
  outData = 0;
  ioDataSize = 8;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x2Fu, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
  {
    v4 = 0;
  }
  else
  {
    v4 = outData;

  }
  return v4;
}

void sub_18EF31A4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id TAUProperty<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = a1;
  outData = 0;
  ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x2Fu, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = outData;

  }
  return v6;
}

void sub_18EF31B00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id TV3Property<NSArray * {__strong},47u,0u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x2F);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF31BDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id TV3Property<NSArray * {__strong},47u,0u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x2F);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF31C9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSArray * {__strong},47u,0u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913C68;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913C68;
}

uint64_t std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id inData;

  v3 = *a2;
  inData = objc_retainAutorelease(*a3);
  return AudioUnitSetProperty(v3, 0x2Fu, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913CB0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913CB0;
}

id std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x2Fu, 0, 0, &outData, &ioDataSize);
  if (!Property)
    return objc_retainAutorelease(outData);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *v4 = v6;

  }
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913C20;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913C20;
}

uint64_t std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFString const*,47u,CFNSConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
      *v5 = v6;
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915720;
  return result;
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915720;
}

uint64_t std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, void **a3)
{
  OpaqueAudioComponentInstance *v3;
  uint64_t v4;
  void *inData;
  void *v7;

  v3 = *a2;
  ArrayVectorConverter<int>::ObjToC::ObjToC(&inData, *a3);
  v4 = AudioUnitSetProperty(v3, 0x7D2u, 0, 0, inData, ((_DWORD)v7 - (_DWORD)inData) & 0xFFFFFFFC);
  if (inData)
  {
    v7 = inData;
    operator delete(inData);
  }
  return v4;
}

void sub_18EF31FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ArrayVectorConverter<int>::ObjToC::ObjToC(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  int v9;
  int v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v24 != v6)
          objc_enumerationMutation(v4);
        v8 = *(id *)(*((_QWORD *)&v23 + 1) + 8 * i);
        v9 = objc_msgSend(v8, "intValue", (_QWORD)v23);
        v10 = v9;
        v12 = (_DWORD *)a1[1];
        v11 = a1[2];
        if ((unint64_t)v12 >= v11)
        {
          v14 = (_DWORD *)*a1;
          v15 = ((uint64_t)v12 - *a1) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v17 = v11 - (_QWORD)v14;
          if (v17 >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v18);
            v14 = (_DWORD *)*a1;
            v12 = (_DWORD *)a1[1];
          }
          else
          {
            v19 = 0;
          }
          v20 = (_DWORD *)(v18 + 4 * v15);
          *v20 = v10;
          v13 = v20 + 1;
          while (v12 != v14)
          {
            v21 = *--v12;
            *--v20 = v21;
          }
          *a1 = v20;
          a1[1] = v13;
          a1[2] = v18 + 4 * v19;
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v12 = v9;
          v13 = v12 + 1;
        }
        a1[1] = v13;

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v5);
  }

  return a1;
}

void sub_18EF321C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29157B0;
  return result;
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29157B0;
}

id std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, unsigned int *a3, _DWORD *a4)
{
  unsigned int *v5;
  unint64_t v6;
  id v7;
  unint64_t v8;
  unsigned int v9;
  id v10;
  id v11;

  v5 = *a2;
  v6 = *a3;
  v7 = (id)objc_opt_new();

  if (v6 >= 4)
  {
    v8 = v6 >> 2;
    do
    {
      v9 = *v5++;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v9);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "addObject:", v10);

      --v8;
    }
    while (v8);
  }
  v11 = v7;
  *a4 = 0;
  return v11;
}

void sub_18EF322F8(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915768;
  return result;
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915768;
}

id std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2)
{
  return TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Common(*a2, 0, 0);
}

id TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Common(OpaqueAudioComponentInstance *a1, AudioUnitScope inScope, AudioUnitElement inElement)
{
  int *begin;
  id v8;
  id v9;
  std::vector<int>::pointer end;
  unsigned int *v11;
  id v12;
  Boolean outWritable;
  UInt32 outDataSize;
  std::vector<int> v15;

  memset(&v15, 0, sizeof(v15));
  outDataSize = 0;
  outWritable = 0;
  if (AudioUnitGetPropertyInfo(a1, 0x7D2u, inScope, inElement, &outDataSize, &outWritable))
    return 0;
  std::vector<unsigned int>::resize(&v15, (unint64_t)outDataSize >> 2);
  begin = v15.__begin_;
  if (!AudioUnitGetProperty(a1, 0x7D2u, inScope, inElement, v15.__begin_, &outDataSize))
  {
    v9 = (id)objc_opt_new();

    end = v15.__end_;
    if (begin != v15.__end_)
    {
      v11 = (unsigned int *)begin;
      do
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *v11);
        v12 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "addObject:", v12);

        ++v11;
      }
      while (v11 != (unsigned int *)end);
    }
    v8 = v9;

    if (!begin)
      return v8;
    goto LABEL_5;
  }
  v8 = 0;
  if (begin)
  {
LABEL_5:
    v15.__end_ = begin;
    operator delete(begin);
  }
  return v8;
}

void sub_18EF324BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(a1);
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29156D8;
  return result;
}

void std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29156D8;
}

uint64_t std::__function::__func<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::TAUVectorProperty(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, void **a2, void **a3, _DWORD *a4)
{
  void *v5;
  void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  size_t v10;
  void *__p;
  _BYTE *v13;

  v5 = *a3;
  ArrayVectorConverter<int>::ObjToC::ObjToC(&__p, *a2);
  v6 = __p;
  v7 = v13 - (_BYTE *)__p;
  if (v13 == __p)
  {
    v8 = 0;
    LODWORD(v9) = 0;
  }
  else
  {
    if (v7 < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v7 >> 2);
    memmove(v8, v6, v7);
    v9 = &v8[4 * (v7 >> 2)];
  }
  LODWORD(v10) = ((_DWORD)v9 - (_DWORD)v8) & 0xFFFFFFFC;
  if (v5)
  {
    if (v10 >= *a4)
      v10 = *a4;
    else
      v10 = v10;
    memcpy(v5, v8, v10);
  }
  *a4 = v10;
  if (v8)
    operator delete(v8);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_18EF32628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TV3Property<NSArray * {__strong},2002u,1u>::v2PropertySize()
{
  return 0x100000000;
}

char *TV3Property<NSArray * {__strong},2002u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<NSArray * {__strong},2002u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},2002u,1u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSArray * {__strong},2002u,1u>::stubSetter);
}

BOOL TV3Property<NSArray * {__strong},2002u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},2002u,1u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSArray * {__strong},2002u,1u>::marshalSetter_Global);
}

BOOL TV3Property<NSArray * {__strong},2002u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},2002u,1u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSArray * {__strong},2002u,1u>::marshalSetter_Bus);
}

BOOL TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeSetter_Global);
}

BOOL TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeSetter_Bus);
}

id TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Bus(uint64_t a1)
{
  TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Common(*(OpaqueAudioComponentInstance **)(a1 + 120), *(_DWORD *)(a1 + 128), *(_DWORD *)(a1 + 132));
  return (id)objc_claimAutoreleasedReturnValue();
}

void TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeSetter_Bus(uint64_t a1, uint64_t a2, void *a3)
{
  TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeSetter_Common(*(OpaqueAudioComponentInstance **)(a1 + 120), a3);
}

void TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeSetter_Common(OpaqueAudioComponentInstance *a1, void *a2)
{
  void *inData;
  void *v4;

  ArrayVectorConverter<int>::ObjToC::ObjToC(&inData, a2);
  AudioUnitSetProperty(a1, 0x7D2u, 0, 0, inData, ((_DWORD)v4 - (_DWORD)inData) & 0xFFFFFFFC);
  if (inData)
  {
    v4 = inData;
    operator delete(inData);
  }
}

void sub_18EF32928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Global(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeGetter_Common((OpaqueAudioComponentInstance *)objc_msgSend(v1, "audioUnit"), 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_18EF32984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v5 = a1;
  v4 = a3;
  TAUVectorProperty<NSArray * {__strong},int,2002u,ArrayVectorConverter<int>,1u>::v2BridgeSetter_Common((OpaqueAudioComponentInstance *)objc_msgSend(v5, "audioUnit"), v4);

}

void sub_18EF329E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id TV3Property<NSArray * {__strong},2002u,1u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x7D2);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF32ABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void TV3Property<NSArray * {__strong},2002u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  id WeakRetained;
  void *v9;
  id *v10;

  v10 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x7D2);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    WeakRetained = objc_loadWeakRetained(v10 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v10 + 32), *((unsigned int *)v10 + 33));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v7, v9, 0);

  }
}

void sub_18EF32BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSArray * {__strong},2002u,1u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x7D2);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF32C8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<NSArray * {__strong},2002u,1u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  void *v8;
  id v9;

  v9 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x7D2);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_setValue:forProperty:error:", v7, v8, 0);

  }
}

void sub_18EF32D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSArray * {__strong},2002u,1u>::stubGetter()
{
  return 0;
}

uint64_t TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::v2PropertySize()
{
  return 0x100000004;
}

char *TV3Property<BOOL,58u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "B");
  result = strdup(__str);
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

IMP TV3Property<BOOL,58u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,58u,0u>::stubGetter);
}

BOOL TV3Property<BOOL,58u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,58u,0u>::marshalGetter_Global);
}

BOOL TV3Property<BOOL,58u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,58u,0u>::marshalGetter_Bus);
}

BOOL TAUProperty<BOOL,unsigned int,58u,ScalarConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,58u,ScalarConverter,0u>::v2BridgeGetter_Global);
}

BOOL TAUProperty<BOOL,unsigned int,58u,ScalarConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,58u,ScalarConverter,0u>::v2BridgeGetter_Bus);
}

uint64_t TAUProperty<BOOL,unsigned int,58u,ScalarConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  BOOL v4;
  uint64_t v5;
  UInt32 ioDataSize;
  int outData;

  v1 = a1;
  ioDataSize = 4;
  outData = 0;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x3Au, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
    v4 = 1;
  else
    v4 = outData == 0;
  v5 = !v4;

  return v5;
}

void sub_18EF32F30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TAUProperty<BOOL,unsigned int,58u,ScalarConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  uint64_t v6;
  UInt32 ioDataSize;
  int outData;

  v3 = a1;
  ioDataSize = 4;
  outData = 0;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x3Au, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData != 0;
  }

  return v6;
}

void sub_18EF32FD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *TV3Property<BOOL,58u,0u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x3A);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    Value = (_QWORD *)objc_msgSend(v7, "BOOLValue");

  }
  return Value;
}

void sub_18EF330B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,58u,0u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x3A);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    v7 = objc_msgSend(v6, "BOOLValue");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF33190(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,58u,0u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914C28;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914C28;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  int inData;

  v3 = *a2;
  inData = objc_msgSend(*a3, "BOOLValue");
  return AudioUnitSetProperty(v3, 0x3Au, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914C70;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914C70;
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  int outData;

  v3 = *a2;
  v4 = *a3;
  ioDataSize = 4;
  outData = 0;
  Property = AudioUnitGetProperty(v3, 0x3Au, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", outData != 0);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914BE0;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914BE0;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,58u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  _DWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5)
      *v5 = objc_msgSend(v6, "unsignedIntValue");
    v8 = 0;
    *a4 = 4;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF3342C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSString * {__strong},25u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<NSString * {__strong},25u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},25u,1u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},25u,1u>::stubSetter);
}

BOOL TV3Property<NSString * {__strong},25u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},25u,1u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},25u,1u>::marshalSetter_Global);
}

BOOL TV3Property<NSString * {__strong},25u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSString * {__strong},25u,1u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<NSString * {__strong},25u,1u>::marshalSetter_Bus);
}

BOOL TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeSetter_Global);
}

BOOL TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeSetter_Bus);
}

id TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  id v4;
  UInt32 ioDataSize;
  id outData;

  v1 = a1;
  outData = 0;
  ioDataSize = 8;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x19u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
  {
    v4 = 0;
  }
  else
  {
    v4 = outData;

  }
  return v4;
}

void sub_18EF33720(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id WeakRetained;
  id inData;

  v4 = a1;
  v5 = a3;
  inData = v5;
  WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x19u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 8u);

}

void sub_18EF337C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = a1;
  outData = 0;
  ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x19u, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = outData;

  }
  return v6;
}

void sub_18EF33884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TAUProperty<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, void *a3)
{
  id v5;
  id v6;
  objc_class *v7;
  IMP MethodImplementation;
  id inData;

  v5 = a1;
  v6 = a3;
  inData = v6;
  if (AudioUnitSetProperty((AudioUnit)objc_msgSend(v5, "audioUnit"), 0x19u, 0, 0, &inData, 8u))
  {
    v7 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v7, a2);
    ((void (*)(id, const char *, id))MethodImplementation)(v5, a2, v6);
  }

}

void sub_18EF3393C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},25u,1u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x19);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF33A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},25u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  id WeakRetained;
  void *v9;
  id *v10;

  v10 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x19);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    WeakRetained = objc_loadWeakRetained(v10 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v10 + 32), *((unsigned int *)v10 + 33));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v7, v9, 0);

  }
}

void sub_18EF33B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

id TV3Property<NSString * {__strong},25u,1u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x19);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF33BF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<NSString * {__strong},25u,1u>::marshalSetter_Global(void *a1, uint64_t a2, void *a3)
{
  id v4;
  CFDictionaryRef *v5;
  _QWORD *Value;
  id v7;
  void *v8;
  id v9;

  v9 = a1;
  v4 = a3;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v5 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v5, (const void *)0x19);
  if (Value)
  {
    v7 = objc_retainAutorelease(v4);
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_setValue:forProperty:error:", v7, v8, 0);

  }
}

void sub_18EF33CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSString * {__strong},25u,1u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29144D8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29144D8;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  id inData;

  v3 = *a2;
  v4 = *a3;
  if (v3
    && (v5 = (*(uint64_t (**)(OpaqueAudioComponentInstance *))(*(_QWORD *)v3 + 8))(v3)) != 0
    && ((v6 = *(_DWORD **)(v5 + 8), v7 = v6[9], v8 = v6[10], v9 = v6[11], v8 == 1297108039)
      ? (v10 = v7 == 1635085670)
      : (v10 = 0),
        v10 ? (v11 = v9 == 1129074009) : (v11 = 0),
        v11))
  {
    v12 = 4294967292;
  }
  else
  {
    inData = objc_retainAutorelease(v4);
    v12 = AudioUnitSetProperty(v3, 0x19u, 0, 0, &inData, 8u);
  }

  return v12;
}

void sub_18EF33DFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914520;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914520;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x19u, 0, 0, &outData, &ioDataSize);
  if (!Property)
    return objc_retainAutorelease(outData);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *v4 = v6;

  }
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914568;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914568;
}

id std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, id **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 8u)
  {
    v5 = objc_retainAutorelease(**a2);
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914490;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914490;
}

uint64_t std::__function::__func<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSString * {__strong},__CFString const*,25u,CFNSConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
      *v5 = v6;
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

uint64_t TV3Property<NSArray * {__strong},13u,0u>::v2PropertySize()
{
  return 0x100000000;
}

char *TV3Property<NSArray * {__strong},13u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

IMP TV3Property<NSArray * {__strong},13u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},13u,0u>::stubGetter);
}

BOOL TV3Property<NSArray * {__strong},13u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},13u,0u>::marshalGetter_Global);
}

BOOL TV3Property<NSArray * {__strong},13u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},13u,0u>::marshalGetter_Bus);
}

id TV3Property<NSArray * {__strong},13u,0u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0xD);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF3420C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id TV3Property<NSArray * {__strong},13u,0u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0xD);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF342CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSArray * {__strong},13u,0u>::stubGetter()
{
  return 0;
}

uint64_t TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::v2PropertySize()
{
  return 0x100000004;
}

char *TV3Property<BOOL,37u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "B");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "B");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<BOOL,37u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,37u,1u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<BOOL,37u,1u>::stubSetter);
}

BOOL TV3Property<BOOL,37u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,37u,1u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<BOOL,37u,1u>::marshalSetter_Global);
}

BOOL TV3Property<BOOL,37u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,37u,1u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<BOOL,37u,1u>::marshalSetter_Bus);
}

BOOL TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeSetter_Global);
}

BOOL TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeSetter_Bus);
}

uint64_t TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  BOOL v4;
  uint64_t v5;
  UInt32 ioDataSize;
  int outData;

  v1 = a1;
  ioDataSize = 4;
  outData = 0;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x25u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
    v4 = 1;
  else
    v4 = outData == 0;
  v5 = !v4;

  return v5;
}

void sub_18EF345C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4;
  id WeakRetained;
  int inData;

  v4 = a1;
  inData = a3;
  WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x25u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);

}

void sub_18EF34654(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  uint64_t v6;
  UInt32 ioDataSize;
  int outData;

  v3 = a1;
  ioDataSize = 4;
  outData = 0;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x25u, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData != 0;
  }

  return v6;
}

void sub_18EF346FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TAUProperty<BOOL,unsigned int,37u,ScalarConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5;
  objc_class *v6;
  IMP MethodImplementation;
  int inData;

  v5 = a1;
  inData = a3;
  if (AudioUnitSetProperty((AudioUnit)objc_msgSend(v5, "audioUnit"), 0x25u, 0, 0, &inData, 4u))
  {
    v6 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }

}

void sub_18EF3479C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *TV3Property<BOOL,37u,1u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x25);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    Value = (_QWORD *)objc_msgSend(v7, "BOOLValue");

  }
  return Value;
}

void sub_18EF3487C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<BOOL,37u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  id WeakRetained;
  void *v8;
  id *v9;

  v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0x25);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained(v9 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v9 + 32), *((unsigned int *)v9 + 33));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v6, v8, 0);

  }
}

void sub_18EF34990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,37u,1u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x25);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    v7 = objc_msgSend(v6, "BOOLValue");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF34A68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<BOOL,37u,1u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  void *v7;
  id v8;

  v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0x25);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_setValue:forProperty:error:", v6, v7, 0);

  }
}

void sub_18EF34B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,37u,1u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29149E8;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29149E8;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  int inData;

  v3 = *a2;
  inData = objc_msgSend(*a3, "BOOLValue");
  return AudioUnitSetProperty(v3, 0x25u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914A30;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914A30;
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  int outData;

  v3 = *a2;
  v4 = *a3;
  ioDataSize = 4;
  outData = 0;
  Property = AudioUnitGetProperty(v3, 0x25u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", outData != 0);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914A78;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914A78;
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 4u)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", **a2);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29149A0;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29149A0;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,37u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  _DWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5)
      *v5 = objc_msgSend(v6, "unsignedIntValue");
    v8 = 0;
    *a4 = 4;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF34E84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::v2PropertySize()
{
  return 0x100000004;
}

char *TV3Property<BOOL,29u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "B");
  result = strdup(__str);
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

IMP TV3Property<BOOL,29u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,29u,0u>::stubGetter);
}

BOOL TV3Property<BOOL,29u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,29u,0u>::marshalGetter_Global);
}

BOOL TV3Property<BOOL,29u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,29u,0u>::marshalGetter_Bus);
}

BOOL TAUProperty<BOOL,unsigned int,29u,ScalarConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,29u,ScalarConverter,0u>::v2BridgeGetter_Global);
}

BOOL TAUProperty<BOOL,unsigned int,29u,ScalarConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,29u,ScalarConverter,0u>::v2BridgeGetter_Bus);
}

uint64_t TAUProperty<BOOL,unsigned int,29u,ScalarConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  BOOL v4;
  uint64_t v5;
  UInt32 ioDataSize;
  int outData;

  v1 = a1;
  ioDataSize = 4;
  outData = 0;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x1Du, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
    v4 = 1;
  else
    v4 = outData == 0;
  v5 = !v4;

  return v5;
}

void sub_18EF35040(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TAUProperty<BOOL,unsigned int,29u,ScalarConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  uint64_t v6;
  UInt32 ioDataSize;
  int outData;

  v3 = a1;
  ioDataSize = 4;
  outData = 0;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x1Du, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData != 0;
  }

  return v6;
}

void sub_18EF350E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *TV3Property<BOOL,29u,0u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x1D);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    Value = (_QWORD *)objc_msgSend(v7, "BOOLValue");

  }
  return Value;
}

void sub_18EF351C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,29u,0u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x1D);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    v7 = objc_msgSend(v6, "BOOLValue");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF352A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,29u,0u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914910;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914910;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  int inData;

  v3 = *a2;
  inData = objc_msgSend(*a3, "BOOLValue");
  return AudioUnitSetProperty(v3, 0x1Du, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914958;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914958;
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  int outData;

  v3 = *a2;
  v4 = *a3;
  ioDataSize = 4;
  outData = 0;
  Property = AudioUnitGetProperty(v3, 0x1Du, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", outData != 0);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29148C8;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29148C8;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,29u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  _DWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5)
      *v5 = objc_msgSend(v6, "unsignedIntValue");
    v8 = 0;
    *a4 = 4;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF3553C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::v2PropertySize(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  AUAudioUnit *v6;
  uint64_t PropertySizeXPC;
  uint64_t v8;
  uint64_t v9;

  v6 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    PropertySizeXPC = getPropertySizeXPC(v6, 21, a3, a4);
    v8 = PropertySizeXPC & 0x100000000;
    v9 = PropertySizeXPC;
  }
  else
  {
    v8 = 0x100000000;
    v9 = 4;
  }

  return v9 | v8;
}

void sub_18EF355D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *TV3Property<BOOL,21u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "B");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "B");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<BOOL,21u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,21u,1u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<BOOL,21u,1u>::stubSetter);
}

BOOL TV3Property<BOOL,21u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,21u,1u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<BOOL,21u,1u>::marshalSetter_Global);
}

BOOL TV3Property<BOOL,21u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<BOOL,21u,1u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<BOOL,21u,1u>::marshalSetter_Bus);
}

BOOL TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeSetter_Global);
}

BOOL TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeSetter_Bus);
}

uint64_t TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  BOOL v4;
  uint64_t v5;
  UInt32 ioDataSize;
  int outData;

  v1 = a1;
  ioDataSize = 4;
  outData = 0;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x15u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
    v4 = 1;
  else
    v4 = outData == 0;
  v5 = !v4;

  return v5;
}

void sub_18EF358A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4;
  id WeakRetained;
  int inData;

  v4 = a1;
  inData = a3;
  WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x15u, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);

}

void sub_18EF35934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  uint64_t v6;
  UInt32 ioDataSize;
  int outData;

  v3 = a1;
  ioDataSize = 4;
  outData = 0;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x15u, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData != 0;
  }

  return v6;
}

void sub_18EF359DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TAUProperty<BOOL,unsigned int,21u,ScalarConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5;
  objc_class *v6;
  IMP MethodImplementation;
  int inData;

  v5 = a1;
  inData = a3;
  if (AudioUnitSetProperty((AudioUnit)objc_msgSend(v5, "audioUnit"), 0x15u, 0, 0, &inData, 4u))
  {
    v6 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }

}

void sub_18EF35A7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *TV3Property<BOOL,21u,1u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x15);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    Value = (_QWORD *)objc_msgSend(v7, "BOOLValue");

  }
  return Value;
}

void sub_18EF35B5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<BOOL,21u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  id WeakRetained;
  void *v8;
  id *v9;

  v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0x15);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained(v9 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v9 + 32), *((unsigned int *)v9 + 33));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v6, v8, 0);

  }
}

void sub_18EF35C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,21u,1u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x15);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    v7 = objc_msgSend(v6, "BOOLValue");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF35D48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<BOOL,21u,1u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  void *v7;
  id v8;

  v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0x15);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_setValue:forProperty:error:", v6, v7, 0);

  }
}

void sub_18EF35E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<BOOL,21u,1u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29147F0;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29147F0;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  int inData;

  v3 = *a2;
  inData = objc_msgSend(*a3, "BOOLValue");
  return AudioUnitSetProperty(v3, 0x15u, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914838;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914838;
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  int outData;

  v3 = *a2;
  v4 = *a3;
  ioDataSize = 4;
  outData = 0;
  Property = AudioUnitGetProperty(v3, 0x15u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", outData != 0);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914880;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914880;
}

id std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 4u)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", **a2);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29147A8;
  return result;
}

void std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29147A8;
}

uint64_t std::__function::__func<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<BOOL,unsigned int,21u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  _DWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5)
      *v5 = objc_msgSend(v6, "unsignedIntValue");
    v8 = 0;
    *a4 = 4;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF36164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2PropertySize()
{
  return 0x100000004;
}

char *TV3Property<unsigned long,26u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "Q");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "Q");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<unsigned long,26u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,26u,1u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<unsigned long,26u,1u>::stubSetter);
}

BOOL TV3Property<unsigned long,26u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,26u,1u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<unsigned long,26u,1u>::marshalSetter_Global);
}

BOOL TV3Property<unsigned long,26u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,26u,1u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<unsigned long,26u,1u>::marshalSetter_Bus);
}

BOOL TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeSetter_Global);
}

BOOL TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeSetter_Bus);
}

uint64_t TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  uint64_t v4;
  UInt32 ioDataSize;
  unsigned int outData;

  v1 = a1;
  ioDataSize = 4;
  outData = 0;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x1Au, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
    v4 = 0;
  else
    v4 = outData;

  return v4;
}

void sub_18EF36444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4;
  id WeakRetained;
  int inData;

  v4 = a1;
  inData = a3;
  WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x1Au, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);

}

void sub_18EF364D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  uint64_t v6;
  UInt32 ioDataSize;
  unsigned int outData;

  v3 = a1;
  ioDataSize = 4;
  outData = 0;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x1Au, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData;
  }

  return v6;
}

void sub_18EF36578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TAUProperty<unsigned long,unsigned int,26u,ScalarConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5;
  objc_class *v6;
  IMP MethodImplementation;
  int inData;

  v5 = a1;
  inData = a3;
  if (AudioUnitSetProperty((AudioUnit)objc_msgSend(v5, "audioUnit"), 0x1Au, 0, 0, &inData, 4u))
  {
    v6 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }

}

void sub_18EF36618(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *TV3Property<unsigned long,26u,1u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x1A);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    Value = (_QWORD *)objc_msgSend(v7, "unsignedIntegerValue");

  }
  return Value;
}

void sub_18EF366F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<unsigned long,26u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  id WeakRetained;
  void *v8;
  id *v9;

  v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0x1A);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained(v9 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v9 + 32), *((unsigned int *)v9 + 33));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v6, v8, 0);

  }
}

void sub_18EF3680C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<unsigned long,26u,1u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x1A);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    v7 = objc_msgSend(v6, "unsignedIntegerValue");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF368E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<unsigned long,26u,1u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  void *v7;
  id v8;

  v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0x1A);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_setValue:forProperty:error:", v6, v7, 0);

  }
}

void sub_18EF369B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<unsigned long,26u,1u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915408;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915408;
}

uint64_t std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  int inData;

  v3 = *a2;
  inData = objc_msgSend(*a3, "unsignedIntegerValue");
  return AudioUnitSetProperty(v3, 0x1Au, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915450;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915450;
}

id std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  unsigned int outData;

  v3 = *a2;
  v4 = *a3;
  ioDataSize = 4;
  outData = 0;
  Property = AudioUnitGetProperty(v3, 0x1Au, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", outData);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915498;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915498;
}

id std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 4u)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", **a2);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29153C0;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29153C0;
}

uint64_t std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,26u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  _DWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5)
      *v5 = objc_msgSend(v6, "unsignedIntValue");
    v8 = 0;
    *a4 = 4;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF36CF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<double,double,20u,ScalarConverter,0u>::v2PropertySize(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  AUAudioUnit *v6;
  uint64_t PropertySizeXPC;
  uint64_t v8;
  uint64_t v9;

  v6 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    PropertySizeXPC = getPropertySizeXPC(v6, 20, a3, a4);
    v8 = PropertySizeXPC & 0x100000000;
    v9 = PropertySizeXPC;
  }
  else
  {
    v8 = 0x100000000;
    v9 = 8;
  }

  return v9 | v8;
}

void sub_18EF36D8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *TV3Property<double,20u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "d");
  result = strdup(__str);
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

IMP TV3Property<double,20u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,20u,0u>::stubGetter);
}

BOOL TV3Property<double,20u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,20u,0u>::marshalGetter_Global);
}

BOOL TV3Property<double,20u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,20u,0u>::marshalGetter_Bus);
}

BOOL TAUProperty<double,double,20u,ScalarConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<double,double,20u,ScalarConverter,0u>::v2BridgeGetter_Global);
}

BOOL TAUProperty<double,double,20u,ScalarConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<double,double,20u,ScalarConverter,0u>::v2BridgeGetter_Bus);
}

double TAUProperty<double,double,20u,ScalarConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  double v4;
  UInt32 ioDataSize;
  double outData;

  v1 = a1;
  outData = 0.0;
  ioDataSize = 8;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x14u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
    v4 = 0.0;
  else
    v4 = outData;

  return v4;
}

void sub_18EF36F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double TAUProperty<double,double,20u,ScalarConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  double v6;
  UInt32 ioDataSize;
  double outData;

  v3 = a1;
  outData = 0.0;
  ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x14u, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((double (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData;
  }

  return v6;
}

void sub_18EF36FEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double TV3Property<double,20u,0u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  double v8;
  double v9;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x14);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    objc_msgSend(v7, "doubleValue");
    v9 = v8;

  }
  else
  {
    v9 = 0.0;
  }

  return v9;
}

void sub_18EF370DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double TV3Property<double,20u,0u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  double v7;
  double v8;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x14);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    objc_msgSend(v6, "doubleValue");
    v8 = v7;

  }
  else
  {
    v8 = 0.0;
  }

  return v8;
}

void sub_18EF371BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

double TV3Property<double,20u,0u>::stubGetter()
{
  return 0.0;
}

void std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914DD8;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914DD8;
}

uint64_t std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  uint64_t v4;
  uint64_t inData;

  v3 = *a2;
  objc_msgSend(*a3, "doubleValue");
  inData = v4;
  return AudioUnitSetProperty(v3, 0x14u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914E20;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914E20;
}

id std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  double outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0.0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x14u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", outData);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914D90;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914D90;
}

uint64_t std::__function::__func<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,20u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
    {
      objc_msgSend(v6, "doubleValue");
      *v5 = v9;
    }
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF37458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<double,double,12u,ScalarConverter,0u>::v2PropertySize(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  AUAudioUnit *v6;
  uint64_t PropertySizeXPC;
  uint64_t v8;
  uint64_t v9;

  v6 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    PropertySizeXPC = getPropertySizeXPC(v6, 12, a3, a4);
    v8 = PropertySizeXPC & 0x100000000;
    v9 = PropertySizeXPC;
  }
  else
  {
    v8 = 0x100000000;
    v9 = 8;
  }

  return v9 | v8;
}

void sub_18EF374EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *TV3Property<double,12u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "d");
  result = strdup(__str);
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

IMP TV3Property<double,12u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,12u,0u>::stubGetter);
}

BOOL TV3Property<double,12u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,12u,0u>::marshalGetter_Global);
}

BOOL TV3Property<double,12u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<double,12u,0u>::marshalGetter_Bus);
}

BOOL TAUProperty<double,double,12u,ScalarConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<double,double,12u,ScalarConverter,0u>::v2BridgeGetter_Global);
}

BOOL TAUProperty<double,double,12u,ScalarConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<double,double,12u,ScalarConverter,0u>::v2BridgeGetter_Bus);
}

double TAUProperty<double,double,12u,ScalarConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  double v4;
  UInt32 ioDataSize;
  double outData;

  v1 = a1;
  outData = 0.0;
  ioDataSize = 8;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0xCu, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
    v4 = 0.0;
  else
    v4 = outData;

  return v4;
}

void sub_18EF376A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double TAUProperty<double,double,12u,ScalarConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  double v6;
  UInt32 ioDataSize;
  double outData;

  v3 = a1;
  outData = 0.0;
  ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0xCu, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((double (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData;
  }

  return v6;
}

void sub_18EF3774C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double TV3Property<double,12u,0u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  double v8;
  double v9;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0xC);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    objc_msgSend(v7, "doubleValue");
    v9 = v8;

  }
  else
  {
    v9 = 0.0;
  }

  return v9;
}

void sub_18EF3783C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double TV3Property<double,12u,0u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  double v7;
  double v8;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0xC);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    objc_msgSend(v6, "doubleValue");
    v8 = v7;

  }
  else
  {
    v8 = 0.0;
  }

  return v8;
}

void sub_18EF3791C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

double TV3Property<double,12u,0u>::stubGetter()
{
  return 0.0;
}

void std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914D00;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914D00;
}

uint64_t std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  uint64_t v4;
  uint64_t inData;

  v3 = *a2;
  objc_msgSend(*a3, "doubleValue");
  inData = v4;
  return AudioUnitSetProperty(v3, 0xCu, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914D48;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914D48;
}

id std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  double outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0.0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0xCu, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", outData);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2914CB8;
  return result;
}

void std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2914CB8;
}

uint64_t std::__function::__func<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<double,double,12u,ScalarConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
    {
      objc_msgSend(v6, "doubleValue");
      *v5 = v9;
    }
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF37BB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::v2PropertySize()
{
  return 0x100000010;
}

char *TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

IMP TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::stubGetter);
}

BOOL TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::marshalGetter_Global);
}

BOOL TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::marshalGetter_Bus);
}

BOOL TAUProperty<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::v2BridgeGetter_Global);
}

BOOL TAUProperty<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::v2BridgeGetter_Bus);
}

id TAUProperty<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  id v4;
  id v6;
  UInt32 ioDataSize;
  int outData[4];

  v1 = a1;
  ioDataSize = 16;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x24u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), outData, &ioDataSize);

  if (Property)
  {
    v4 = 0;
  }
  else
  {
    PresetConverter::CToObj<true,false>::CToObj(&v6, outData);
    v4 = v6;

  }
  return v4;
}

void sub_18EF37D8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id *PresetConverter::CToObj<true,false>::CToObj(id *a1, int *a2)
{
  uint64_t v4;
  id v5;
  void *v6;

  *a1 = 0;
  v4 = objc_opt_new();
  v5 = *a1;
  *a1 = (id)v4;

  objc_msgSend(*a1, "setNumber:", *a2);
  v6 = (void *)*((_QWORD *)a2 + 1);
  objc_msgSend(*a1, "setName:", v6);

  return a1;
}

void sub_18EF37E10(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id TAUProperty<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  id v6;
  id v8;
  UInt32 ioDataSize;
  int outData[4];

  v3 = a1;
  ioDataSize = 16;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x24u, 0, 0, outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    PresetConverter::CToObj<true,false>::CToObj(&v8, outData);
    v6 = v8;

  }
  return v6;
}

void sub_18EF37ED8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x24);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF37FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x24);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF38078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<AUAudioUnitPreset * {__strong},36u,4u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913B90;
  return result;
}

void std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913B90;
}

uint64_t std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v8;
  _QWORD inData[2];

  v3 = *a2;
  v4 = objc_retainAutorelease(*a3);
  v8 = v4;
  inData[0] = PresetConverter::ObjToC<true>::operator AUPreset(&v8);
  inData[1] = v5;

  v6 = AudioUnitSetProperty(v3, 0x24u, 0, 0, inData, 0x10u);
  return v6;
}

void sub_18EF38168(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t PresetConverter::ObjToC<true>::operator AUPreset(id *a1)
{
  unsigned int v2;

  v2 = objc_msgSend(*a1, "number");
  objc_msgSend(*a1, "name");

  return v2;
}

void std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913BD8;
  return result;
}

void std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913BD8;
}

id std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  id v8;
  id v9;
  UInt32 ioDataSize;
  int outData[4];

  v3 = *a2;
  v4 = *a3;
  ioDataSize = 16;
  Property = AudioUnitGetProperty(v3, 0x24u, 0, 0, outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    PresetConverter::CToObj<true,false>::CToObj(&v9, outData);
    v8 = v9;

    return objc_retainAutorelease(v8);
  }
}

void std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913B48;
  return result;
}

void std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913B48;
}

uint64_t std::__function::__func<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<AUAudioUnitPreset * {__strong},AUPreset,36u,PresetConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  unsigned int v10;
  uint64_t v11;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 0x10u)
  {
    if (v5)
    {
      v9 = v6;
      v10 = objc_msgSend(v9, "number");
      objc_msgSend(v9, "name");
      v11 = objc_claimAutoreleasedReturnValue();
      *v5 = v10;
      v5[1] = v11;

    }
    v8 = 0;
    *a4 = 16;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF383B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSArray * {__strong},24u,0u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

IMP TV3Property<NSArray * {__strong},24u,0u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},24u,0u>::stubGetter);
}

BOOL TV3Property<NSArray * {__strong},24u,0u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},24u,0u>::marshalGetter_Global);
}

BOOL TV3Property<NSArray * {__strong},24u,0u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSArray * {__strong},24u,0u>::marshalGetter_Bus);
}

BOOL TAUProperty<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::v2BridgeGetter_Global);
}

BOOL TAUProperty<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::v2BridgeGetter_Bus);
}

id TAUProperty<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  id v4;
  id v6;
  UInt32 ioDataSize;
  CFArrayRef outData;

  v1 = a1;
  outData = 0;
  ioDataSize = 8;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x18u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
  {
    v4 = 0;
  }
  else
  {
    FactoryPresetsConverter::CToObj<true>::CToObj(&v6, outData);
    v4 = v6;

  }
  return v4;
}

void sub_18EF3858C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id *FactoryPresetsConverter::CToObj<true>::CToObj(id *a1, CFArrayRef theArray)
{
  int Count;
  uint64_t v5;
  id v6;
  CFIndex v7;
  uint64_t v8;
  int *ValueAtIndex;
  void *v10;
  id v11;

  *a1 = 0;
  Count = CFArrayGetCount(theArray);
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", Count);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *a1;
  *a1 = (id)v5;

  if (Count >= 1)
  {
    v7 = 0;
    v8 = Count;
    do
    {
      ValueAtIndex = (int *)CFArrayGetValueAtIndex(theArray, v7);
      v10 = (void *)objc_opt_new();
      objc_msgSend(v10, "setNumber:", *ValueAtIndex);
      objc_msgSend(v10, "setName:", *((_QWORD *)ValueAtIndex + 1));
      v11 = objc_retainAutorelease(v10);
      objc_msgSend(*a1, "addObject:", v11);

      ++v7;
    }
    while (v8 != v7);
  }
  CFRelease(theArray);
  return a1;
}

void sub_18EF386A4(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

id TAUProperty<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  id v6;
  id v8;
  UInt32 ioDataSize;
  CFArrayRef outData;

  v3 = a1;
  outData = 0;
  ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x18u, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    FactoryPresetsConverter::CToObj<true>::CToObj(&v8, outData);
    v6 = v8;

  }
  return v6;
}

void sub_18EF38780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id TV3Property<NSArray * {__strong},24u,0u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x18);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF38860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id TV3Property<NSArray * {__strong},24u,0u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x18);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF38920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSArray * {__strong},24u,0u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913D40;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913D40;
}

uint64_t std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id v4;
  int v5;
  __CFArray *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __CFArray *v15;
  id v16;
  CFArrayCallBacks callBacks;

  v3 = *a2;
  v4 = objc_retainAutorelease(*a3);
  *(_OWORD *)&callBacks.version = xmmword_1E2919FC0;
  *(_OWORD *)&callBacks.release = *(_OWORD *)&off_1E2919FD0;
  callBacks.equal = 0;
  v5 = objc_msgSend(v4, "count");
  v6 = CFArrayCreateMutable(0, v5, &callBacks);
  if (v5 >= 1)
  {
    v7 = 0;
    v8 = v5;
    do
    {
      objc_msgSend(v4, "objectAtIndexedSubscript:", v7);
      v9 = (id)objc_claimAutoreleasedReturnValue();
      v16 = v9;
      v10 = (_DWORD *)operator new();
      v11 = PresetConverter::ObjToC<true>::operator AUPreset(&v16);
      v10[4] = 0;
      *v10 = v11;
      *((_QWORD *)v10 + 1) = v12;
      CFArrayAppendValue(v6, v10);

      ++v7;
    }
    while (v8 != v7);
  }

  v15 = v6;
  v13 = AudioUnitSetProperty(v3, 0x18u, 0, 0, &v15, 8u);

  return v13;
}

void sub_18EF38ACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFAllocator *RefCountedAUPreset::cfRetain(RefCountedAUPreset *this, const __CFAllocator *a2, const void *a3)
{
  const __CFAllocator *result;

  result = a2;
  ++*((_DWORD *)a2 + 4);
  return result;
}

void RefCountedAUPreset::cfRelease(RefCountedAUPreset *this, const __CFAllocator *a2, const void *a3)
{
  int v3;

  v3 = *((_DWORD *)a2 + 4) - 1;
  *((_DWORD *)a2 + 4) = v3;
  if (a2)
  {
    if (!v3)
      JUMPOUT(0x193FFE460);
  }
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913D88;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913D88;
}

id std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  id v8;
  id v9;
  UInt32 ioDataSize;
  CFArrayRef outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x18u, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    FactoryPresetsConverter::CToObj<true>::CToObj(&v9, outData);
    v8 = v9;

    return objc_retainAutorelease(v8);
  }
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913CF8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913CF8;
}

uint64_t std::__function::__func<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSArray * {__strong},__CFArray const*,24u,FactoryPresetsConverter,0u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, __CFArray ***a3, _DWORD *a4)
{
  __CFArray **v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  int v10;
  __CFArray *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  CFArrayCallBacks v19;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
    {
      v9 = v6;
      v10 = objc_msgSend(v9, "count", 0, 0x18EF38B1CLL, RefCountedAUPreset::cfRelease, 0, 0);
      v11 = CFArrayCreateMutable(0, v10, &v19);
      if (v10 >= 1)
      {
        v12 = 0;
        v13 = v10;
        do
        {
          objc_msgSend(v9, "objectAtIndexedSubscript:", v12);
          v14 = (id)objc_claimAutoreleasedReturnValue();
          v15 = (_DWORD *)operator new();
          v16 = objc_msgSend(v14, "number");
          objc_msgSend(v14, "name");
          v17 = objc_claimAutoreleasedReturnValue();
          v15[4] = 0;
          *v15 = v16;
          *((_QWORD *)v15 + 1) = v17;
          CFArrayAppendValue(v11, v15);

          ++v12;
        }
        while (v13 != v12);
      }
      *v5 = v11;

    }
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF38E08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSDictionary * {__strong},50u,4u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

IMP TV3Property<NSDictionary * {__strong},50u,4u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},50u,4u>::stubGetter);
}

BOOL TV3Property<NSDictionary * {__strong},50u,4u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},50u,4u>::marshalGetter_Global);
}

BOOL TV3Property<NSDictionary * {__strong},50u,4u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},50u,4u>::marshalGetter_Bus);
}

BOOL TAUProperty<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::v2BridgeGetter_Global);
}

BOOL TAUProperty<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::v2BridgeGetter_Bus);
}

id TAUProperty<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  id v4;
  UInt32 ioDataSize;
  id outData;

  v1 = a1;
  outData = 0;
  ioDataSize = 8;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0x32u, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
  {
    v4 = 0;
  }
  else
  {
    v4 = outData;

  }
  return v4;
}

void sub_18EF3900C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id TAUProperty<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = a1;
  outData = 0;
  ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0x32u, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = outData;

  }
  return v6;
}

void sub_18EF390C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id TV3Property<NSDictionary * {__strong},50u,4u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x32);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF3919C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id TV3Property<NSDictionary * {__strong},50u,4u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0x32);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF3925C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSDictionary * {__strong},50u,4u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913AB8;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913AB8;
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id inData;

  v3 = *a2;
  inData = objc_retainAutorelease(*a3);
  return AudioUnitSetProperty(v3, 0x32u, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913B00;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913B00;
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0x32u, 0, 0, &outData, &ioDataSize);
  if (!Property)
    return objc_retainAutorelease(outData);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *v4 = v6;

  }
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913A70;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913A70;
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,50u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
      *v5 = v6;
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

uint64_t TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::v2PropertySize()
{
  return 0x100000008;
}

char *TV3Property<NSDictionary * {__strong},0u,4u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, 0, v6);
  snprintf(__str, 0x80uLL, "%s@:", "@");
  result = strdup(__str);
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

IMP TV3Property<NSDictionary * {__strong},0u,4u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},0u,4u>::stubGetter);
}

BOOL TV3Property<NSDictionary * {__strong},0u,4u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},0u,4u>::marshalGetter_Global);
}

BOOL TV3Property<NSDictionary * {__strong},0u,4u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<NSDictionary * {__strong},0u,4u>::marshalGetter_Bus);
}

BOOL TAUProperty<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::v2BridgeGetter_Global);
}

BOOL TAUProperty<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  return AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::v2BridgeGetter_Bus);
}

id TAUProperty<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  id v4;
  UInt32 ioDataSize;
  id outData;

  v1 = a1;
  outData = 0;
  ioDataSize = 8;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
  {
    v4 = 0;
  }
  else
  {
    v4 = outData;

  }
  return v4;
}

void sub_18EF39688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id TAUProperty<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = a1;
  outData = 0;
  ioDataSize = 8;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    ((void (*)(id, const char *))MethodImplementation)(v3, a2);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = outData;

  }
  return v6;
}

void sub_18EF3973C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id TV3Property<NSDictionary * {__strong},0u,4u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, 0);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF39818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id TV3Property<NSDictionary * {__strong},0u,4u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, 0);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_18EF398D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<NSDictionary * {__strong},0u,4u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29139E0;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29139E0;
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  id inData;

  v3 = *a2;
  inData = objc_retainAutorelease(*a3);
  return AudioUnitSetProperty(v3, 0, 0, 0, &inData, 8u);
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913A28;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913A28;
}

id std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  id outData;

  v3 = *a2;
  v4 = *a3;
  outData = 0;
  ioDataSize = 8;
  Property = AudioUnitGetProperty(v3, 0, 0, 0, &outData, &ioDataSize);
  if (!Property)
    return objc_retainAutorelease(outData);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *v4 = v6;

  }
  return 0;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2913998;
  return result;
}

void std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2913998;
}

uint64_t std::__function::__func<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<NSDictionary * {__strong},__CFDictionary const*,0u,CFNSConverter,4u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _QWORD **a3, _DWORD *a4)
{
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 8u)
  {
    if (v5)
      *v5 = v6;
    v8 = 0;
    *a4 = 8;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

uint64_t TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2PropertySize()
{
  return 0x100000004;
}

char *TV3Property<unsigned long,14u,1u>::makeSwizzler(uint64_t a1, objc_class *a2, uint64_t a3)
{
  objc_class *v5;
  objc_selector **v6;
  char *result;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  AUAudioUnitProperties::accessorsForProperty(a2, v5, (objc_selector **)a3, (objc_selector **)(a3 + 8), v6);
  snprintf(__str, 0x80uLL, "%s@:", "Q");
  *(_QWORD *)(a3 + 16) = strdup(__str);
  snprintf(__str, 0x80uLL, "v@:%s", "Q");
  result = strdup(__str);
  *(_QWORD *)(a3 + 24) = result;
  return result;
}

IMP TV3Property<unsigned long,14u,1u>::addStubAccessors(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::replaceGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,14u,1u>::stubGetter);
  return AUProperty::Swizzler::replaceSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<unsigned long,14u,1u>::stubSetter);
}

BOOL TV3Property<unsigned long,14u,1u>::addMarshallingAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,14u,1u>::marshalGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<unsigned long,14u,1u>::marshalSetter_Global);
}

BOOL TV3Property<unsigned long,14u,1u>::addMarshallingAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TV3Property<unsigned long,14u,1u>::marshalGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TV3Property<unsigned long,14u,1u>::marshalSetter_Bus);
}

BOOL TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::addV2BridgeAccessors_Global(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeGetter_Global);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeSetter_Global);
}

BOOL TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::addV2BridgeAccessors_Bus(uint64_t a1, uint64_t a2, objc_class *a3)
{
  AUProperty::Swizzler::addGetter(*(SEL *)a2, *(objc_class **)(a2 + 16), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeGetter_Bus);
  return AUProperty::Swizzler::addSetter(*(SEL *)(a2 + 8), *(objc_class **)(a2 + 24), a3, (void (*)(void))TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeSetter_Bus);
}

uint64_t TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeGetter_Bus(void *a1)
{
  id v1;
  id WeakRetained;
  OSStatus Property;
  uint64_t v4;
  UInt32 ioDataSize;
  unsigned int outData;

  v1 = a1;
  ioDataSize = 4;
  outData = 0;
  WeakRetained = objc_loadWeakRetained((id *)v1 + 14);
  Property = AudioUnitGetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0xEu, *((_DWORD *)v1 + 32), *((_DWORD *)v1 + 33), &outData, &ioDataSize);

  if (Property)
    v4 = 0;
  else
    v4 = outData;

  return v4;
}

void sub_18EF39E18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeSetter_Bus(void *a1, uint64_t a2, int a3)
{
  id v4;
  id WeakRetained;
  int inData;

  v4 = a1;
  inData = a3;
  WeakRetained = objc_loadWeakRetained((id *)v4 + 14);
  AudioUnitSetProperty((AudioUnit)objc_msgSend(WeakRetained, "audioUnit"), 0xEu, *((_DWORD *)v4 + 32), *((_DWORD *)v4 + 33), &inData, 4u);

}

void sub_18EF39EAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeGetter_Global(void *a1, const char *a2)
{
  id v3;
  objc_class *v4;
  IMP MethodImplementation;
  uint64_t v6;
  UInt32 ioDataSize;
  unsigned int outData;

  v3 = a1;
  ioDataSize = 4;
  outData = 0;
  if (AudioUnitGetProperty((AudioUnit)objc_msgSend(v3, "audioUnit"), 0xEu, 0, 0, &outData, &ioDataSize))
  {
    v4 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v4, a2);
    v6 = ((uint64_t (*)(id, const char *))MethodImplementation)(v3, a2);
  }
  else
  {
    v6 = outData;
  }

  return v6;
}

void sub_18EF39F4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TAUProperty<unsigned long,unsigned int,14u,ScalarConverter,1u>::v2BridgeSetter_Global(void *a1, const char *a2, uint64_t a3)
{
  id v5;
  objc_class *v6;
  IMP MethodImplementation;
  int inData;

  v5 = a1;
  inData = a3;
  if (AudioUnitSetProperty((AudioUnit)objc_msgSend(v5, "audioUnit"), 0xEu, 0, 0, &inData, 4u))
  {
    v6 = (objc_class *)objc_opt_class();
    MethodImplementation = class_getMethodImplementation(v6, a2);
    ((void (*)(id, const char *, uint64_t))MethodImplementation)(v5, a2, a3);
  }

}

void sub_18EF39FEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *TV3Property<unsigned long,14u,1u>::marshalGetter_Bus(void *a1)
{
  id *v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0xE);
  if (Value)
  {
    WeakRetained = objc_loadWeakRetained(v1 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v1 + 32), *((unsigned int *)v1 + 33));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_getValueForProperty:error:", v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v6;
    Value = (_QWORD *)objc_msgSend(v7, "unsignedIntegerValue");

  }
  return Value;
}

void sub_18EF3A0CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<unsigned long,14u,1u>::marshalSetter_Bus(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  id WeakRetained;
  void *v8;
  id *v9;

  v9 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0xE);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained(v9 + 14);
    +[AUAudioUnitProperty propertyWithKey:scope:element:](AUAudioUnitProperty, "propertyWithKey:scope:element:", Value[1], *((unsigned int *)v9 + 32), *((unsigned int *)v9 + 33));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_setValue:forProperty:error:", v6, v8, 0);

  }
}

void sub_18EF3A1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<unsigned long,14u,1u>::marshalGetter_Global(void *a1)
{
  id v1;
  CFDictionaryRef *v2;
  _QWORD *Value;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v2 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v2, (const void *)0xE);
  if (Value)
  {
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_getValueForProperty:error:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    v7 = objc_msgSend(v6, "unsignedIntegerValue");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_18EF3A2B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TV3Property<unsigned long,14u,1u>::marshalSetter_Global(void *a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef *v4;
  _QWORD *Value;
  id v6;
  void *v7;
  id v8;

  v8 = a1;
  CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  v4 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  Value = CFDictionaryGetValue(*v4, (const void *)0xE);
  if (Value)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    +[AUAudioUnitProperty propertyWithKey:](AUAudioUnitProperty, "propertyWithKey:", Value[1]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_setValue:forProperty:error:", v6, v7, 0);

  }
}

void sub_18EF3A388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

uint64_t TV3Property<unsigned long,14u,1u>::stubGetter()
{
  return 0;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29152E8;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29152E8;
}

uint64_t std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,objc_object *)#1}>,int ()(OpaqueAudioComponentInstance *,objc_object *)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, id *a3)
{
  OpaqueAudioComponentInstance *v3;
  int inData;

  v3 = *a2;
  inData = objc_msgSend(*a3, "unsignedIntegerValue");
  return AudioUnitSetProperty(v3, 0xEu, 0, 0, &inData, 4u);
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915330;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915330;
}

id std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)#1}>,objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, OpaqueAudioComponentInstance **a2, _QWORD **a3)
{
  OpaqueAudioComponentInstance *v3;
  _QWORD *v4;
  OSStatus Property;
  id v6;
  UInt32 ioDataSize;
  unsigned int outData;

  v3 = *a2;
  v4 = *a3;
  ioDataSize = 4;
  outData = 0;
  Property = AudioUnitGetProperty(v3, 0xEu, 0, 0, &outData, &ioDataSize);
  if (Property)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], Property, 0);
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *v4 = v6;

    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", outData);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2915378;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2915378;
}

id std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(void const*,unsigned int,int &)#1}>,objc_object * ()(void const*,unsigned int,int &)>::operator()(uint64_t a1, unsigned int **a2, _DWORD *a3, int *a4)
{
  id v5;
  int v6;

  if (*a3 >= 4u)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", **a2);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = -50;
  }
  *a4 = v6;
  return v5;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::~__func()
{
  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E29152A0;
  return result;
}

void std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E29152A0;
}

uint64_t std::__function::__func<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1},std::allocator<TAUPropertyBase<unsigned long,unsigned int,14u,ScalarConverter,1u>::TAUPropertyBase(char const*)::{lambda(objc_object *,void *,unsigned int &)#1}>,int ()(objc_object *,void *,unsigned int &)>::operator()(uint64_t a1, id *a2, _DWORD **a3, _DWORD *a4)
{
  _DWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = *a3;
  v6 = *a2;
  v7 = v6;
  if (*a4 >= 4u)
  {
    if (v5)
      *v5 = objc_msgSend(v6, "unsignedIntValue");
    v8 = 0;
    *a4 = 4;
  }
  else
  {
    v8 = 4294956445;
  }

  return v8;
}

void sub_18EF3A6CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MP413KVoiceSpecificConfig::~MP413KVoiceSpecificConfig(MP413KVoiceSpecificConfig *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t MP413KVoiceSpecificConfig::Deserialize(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  int v12;
  NSObject *v13;
  const char *v14;
  unsigned int *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  _DWORD *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  uint64_t i;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  int v65;
  _WORD *v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  uint64_t j;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  int v85;
  _WORD *v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  int v97;
  _WORD *v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  int v109;
  _WORD *v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  int v121;
  _WORD *v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  int v133;
  _WORD *v134;
  unsigned int v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  int v145;
  _DWORD *v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int v169;
  int v170;
  _WORD *v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  int v175;
  const char *v176;
  __int16 v177;
  int v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20) - 32;
  *(_DWORD *)(a2 + 20) = v5;
  if (v5 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v8 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v5 = v7 + 32;
    v9 = v7 == -32;
    *(_QWORD *)a2 += 4;
    v6 = (v8 >> v7) | v4;
    v10 = v8 << -(char)v7;
    if (v9)
      v4 = 0;
    else
      v4 = v10;
    *(_DWORD *)(a2 + 16) = v4;
    *(_DWORD *)(a2 + 20) = v5;
  }
  else
  {
    v6 = v4;
  }
  if (v6 != 1363952461)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v175 = 136315394;
      v176 = "ACMP4BitStreams.cpp";
      v177 = 1024;
      v178 = 1349;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload: unsupported voice format";
LABEL_54:
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v175, 0x12u);
    }
    return 4294967090;
  }
  *(_DWORD *)(a1 + 8) = 1363952461;
  v11 = v5 - 32;
  *(_DWORD *)(a2 + 20) = v11;
  if (v11 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v15 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v15;
    v16 = *(_DWORD *)(a2 + 16);
    v17 = *(_DWORD *)(a2 + 20);
    v12 = (v16 >> v17) | v4;
    v11 = v17 + 32;
    if (v17 == -32)
    {
      v18 = 0;
      *(_DWORD *)(a1 + 12) = v12;
      *(_QWORD *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_18;
    }
    v4 = v16 << -(char)v17;
    *(_DWORD *)(a2 + 16) = v4;
  }
  else
  {
    v12 = v4;
  }
  *(_DWORD *)(a1 + 12) = v12;
  v18 = HIBYTE(v4);
  v19 = v11 - 8;
  *(_DWORD *)(a2 + 20) = v19;
  if (v19 >= 0)
  {
    v20 = v4 << 8;
    goto LABEL_20;
  }
  v15 = *(unsigned int **)a2;
LABEL_18:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v15);
  v21 = (unsigned int *)(*(_QWORD *)a2 + 4);
  *(_QWORD *)a2 = v21;
  v22 = *(_DWORD *)(a2 + 16);
  v23 = *(_DWORD *)(a2 + 20);
  v18 |= v22 >> v23;
  v19 = v23 + 32;
  if (v23 == -32)
  {
    v25 = 0;
    *(_DWORD *)(a1 + 16) = v18;
    v24 = (_DWORD *)(a1 + 16);
    *(_QWORD *)(a2 + 16) = 0xFFFFFFF800000000;
LABEL_24:
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v21);
    *(_QWORD *)a2 += 4;
    v28 = *(_DWORD *)(a2 + 16);
    v29 = *(_DWORD *)(a2 + 20);
    v25 |= v28 >> v29;
    v26 = v29 + 32;
    if (v29 == -32)
      v27 = 0;
    else
      v27 = v28 << -(char)v29;
    goto LABEL_27;
  }
  v20 = v22 << -(char)v23;
LABEL_20:
  *(_DWORD *)(a2 + 16) = v20;
  *(_DWORD *)(a1 + 16) = v18;
  v24 = (_DWORD *)(a1 + 16);
  v25 = HIBYTE(v20);
  v26 = v19 - 8;
  *(_DWORD *)(a2 + 20) = v26;
  if (v26 < 0)
  {
    v21 = *(unsigned int **)a2;
    goto LABEL_24;
  }
  v27 = v20 << 8;
LABEL_27:
  *(_DWORD *)(a2 + 16) = v27;
  *v24 += v25 << 8;
  v30 = HIBYTE(v27);
  v31 = v26 - 8;
  *(_DWORD *)(a2 + 20) = v31;
  if (v31 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v33 = *(_DWORD *)(a2 + 16);
    v34 = *(_DWORD *)(a2 + 20);
    v30 |= v33 >> v34;
    v31 = v34 + 32;
    if (v34 == -32)
      v32 = 0;
    else
      v32 = v33 << -(char)v34;
  }
  else
  {
    v32 = v27 << 8;
  }
  *(_DWORD *)(a2 + 16) = v32;
  *v24 += v30 << 16;
  v35 = HIBYTE(v32);
  v36 = v31 - 8;
  *(_DWORD *)(a2 + 20) = v36;
  if (v36 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v38 = *(_DWORD *)(a2 + 16);
    v39 = *(_DWORD *)(a2 + 20);
    v35 |= v38 >> v39;
    v36 = v39 + 32;
    if (v39 == -32)
      v37 = 0;
    else
      v37 = v38 << -(char)v39;
  }
  else
  {
    v37 = v32 << 8;
  }
  *(_DWORD *)(a2 + 16) = v37;
  *v24 += v35 << 24;
  v40 = HIBYTE(v37);
  v41 = v36 - 8;
  *(_DWORD *)(a2 + 20) = v41;
  if (v41 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v43 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v43;
    v44 = *(_DWORD *)(a2 + 16);
    v45 = *(_DWORD *)(a2 + 20);
    v40 |= v44 >> v45;
    v41 = v45 + 32;
    if (v45 == -32)
    {
      v46 = 0;
      *(_BYTE *)(a1 + 20) = v40;
      *(_QWORD *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_45;
    }
    v42 = v44 << -(char)v45;
  }
  else
  {
    v42 = v37 << 8;
  }
  *(_DWORD *)(a2 + 16) = v42;
  *(_BYTE *)(a1 + 20) = v40;
  v46 = HIBYTE(v42);
  v47 = v41 - 8;
  *(_DWORD *)(a2 + 20) = v47;
  if (v47 >= 0)
  {
    v48 = v42 << 8;
    goto LABEL_48;
  }
  v43 = *(unsigned int **)a2;
LABEL_45:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v43);
  *(_QWORD *)a2 += 4;
  v49 = *(_DWORD *)(a2 + 16);
  v50 = *(_DWORD *)(a2 + 20);
  v46 |= v49 >> v50;
  *(_DWORD *)(a2 + 20) = v50 + 32;
  if (v50 == -32)
    v48 = 0;
  else
    v48 = v49 << -(char)v50;
LABEL_48:
  *(_DWORD *)(a2 + 16) = v48;
  *(_BYTE *)(a1 + 21) = v46;
  if (*(_BYTE *)(a1 + 20) != 1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v175 = 136315394;
      v176 = "ACMP4BitStreams.cpp";
      v177 = 1024;
      v178 = 1370;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload: unsupported voice format major version";
      goto LABEL_54;
    }
    return 4294967090;
  }
  if ((_BYTE)v46)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v175 = 136315394;
      v176 = "ACMP4BitStreams.cpp";
      v177 = 1024;
      v178 = 1371;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload: unsupported voice format minor version";
      goto LABEL_54;
    }
    return 4294967090;
  }
  for (i = 0; i != 16; ++i)
  {
    v53 = *(_DWORD *)(a2 + 16);
    v54 = HIBYTE(v53);
    v55 = *(_DWORD *)(a2 + 20) - 8;
    *(_DWORD *)(a2 + 20) = v55;
    if (v55 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v57 = *(_DWORD *)(a2 + 16);
      v58 = *(_DWORD *)(a2 + 20);
      v54 |= v57 >> v58;
      *(_DWORD *)(a2 + 20) = v58 + 32;
      if (v58 == -32)
        v56 = 0;
      else
        v56 = v57 << -(char)v58;
    }
    else
    {
      v56 = v53 << 8;
    }
    *(_DWORD *)(a2 + 16) = v56;
    *(_BYTE *)(a1 + 22 + i) = v54;
  }
  v59 = *(_DWORD *)(a2 + 16);
  v60 = HIBYTE(v59);
  v61 = *(_DWORD *)(a2 + 20) - 8;
  *(_DWORD *)(a2 + 20) = v61;
  if (v61 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v63 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v63;
    v64 = *(_DWORD *)(a2 + 16);
    v65 = *(_DWORD *)(a2 + 20);
    v60 |= v64 >> v65;
    v61 = v65 + 32;
    if (v65 == -32)
    {
      v67 = 0;
      *(_WORD *)(a1 + 38) = v60;
      v66 = (_WORD *)(a1 + 38);
      *(_QWORD *)(a2 + 16) = 0xFFFFFFF800000000;
LABEL_71:
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v63);
      *(_QWORD *)a2 += 4;
      v70 = *(_DWORD *)(a2 + 16);
      v71 = *(_DWORD *)(a2 + 20);
      v67 |= v70 >> v71;
      *(_DWORD *)(a2 + 20) = v71 + 32;
      if (v71 == -32)
        v69 = 0;
      else
        v69 = v70 << -(char)v71;
      goto LABEL_74;
    }
    v62 = v64 << -(char)v65;
  }
  else
  {
    v62 = v59 << 8;
  }
  *(_DWORD *)(a2 + 16) = v62;
  *(_WORD *)(a1 + 38) = v60;
  v66 = (_WORD *)(a1 + 38);
  v67 = HIBYTE(v62);
  v68 = v61 - 8;
  *(_DWORD *)(a2 + 20) = v68;
  if (v68 < 0)
  {
    v63 = *(unsigned int **)a2;
    goto LABEL_71;
  }
  v69 = v62 << 8;
LABEL_74:
  *(_DWORD *)(a2 + 16) = v69;
  *v66 += (_WORD)v67 << 8;
  for (j = 40; j != 120; ++j)
  {
    v73 = *(_DWORD *)(a2 + 16);
    v74 = HIBYTE(v73);
    v75 = *(_DWORD *)(a2 + 20) - 8;
    *(_DWORD *)(a2 + 20) = v75;
    if (v75 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v77 = *(_DWORD *)(a2 + 16);
      v78 = *(_DWORD *)(a2 + 20);
      v74 |= v77 >> v78;
      *(_DWORD *)(a2 + 20) = v78 + 32;
      if (v78 == -32)
        v76 = 0;
      else
        v76 = v77 << -(char)v78;
    }
    else
    {
      v76 = v73 << 8;
    }
    *(_DWORD *)(a2 + 16) = v76;
    *(_BYTE *)(a1 + j) = v74;
  }
  v79 = *(_DWORD *)(a2 + 16);
  v80 = HIBYTE(v79);
  v81 = *(_DWORD *)(a2 + 20) - 8;
  *(_DWORD *)(a2 + 20) = v81;
  if (v81 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v83 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v83;
    v84 = *(_DWORD *)(a2 + 16);
    v85 = *(_DWORD *)(a2 + 20);
    v80 |= v84 >> v85;
    v81 = v85 + 32;
    if (v85 == -32)
    {
      v87 = 0;
      *(_WORD *)(a1 + 120) = v80;
      v86 = (_WORD *)(a1 + 120);
      *(_QWORD *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_89;
    }
    v82 = v84 << -(char)v85;
  }
  else
  {
    v82 = v79 << 8;
  }
  *(_DWORD *)(a2 + 16) = v82;
  *(_WORD *)(a1 + 120) = v80;
  v86 = (_WORD *)(a1 + 120);
  v87 = HIBYTE(v82);
  v88 = v81 - 8;
  *(_DWORD *)(a2 + 20) = v88;
  if (v88 >= 0)
  {
    v89 = v82 << 8;
    goto LABEL_92;
  }
  v83 = *(unsigned int **)a2;
LABEL_89:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v83);
  *(_QWORD *)a2 += 4;
  v90 = *(_DWORD *)(a2 + 16);
  v91 = *(_DWORD *)(a2 + 20);
  v87 |= v90 >> v91;
  v88 = v91 + 32;
  if (v91 == -32)
    v89 = 0;
  else
    v89 = v90 << -(char)v91;
LABEL_92:
  *(_DWORD *)(a2 + 16) = v89;
  *v86 += (_WORD)v87 << 8;
  v92 = HIBYTE(v89);
  v93 = v88 - 8;
  *(_DWORD *)(a2 + 20) = v93;
  if (v93 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v95 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v95;
    v96 = *(_DWORD *)(a2 + 16);
    v97 = *(_DWORD *)(a2 + 20);
    v92 |= v96 >> v97;
    v93 = v97 + 32;
    if (v97 == -32)
    {
      v99 = 0;
      *(_WORD *)(a1 + 122) = v92;
      v98 = (_WORD *)(a1 + 122);
      *(_QWORD *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_100;
    }
    v94 = v96 << -(char)v97;
  }
  else
  {
    v94 = v89 << 8;
  }
  *(_DWORD *)(a2 + 16) = v94;
  *(_WORD *)(a1 + 122) = v92;
  v98 = (_WORD *)(a1 + 122);
  v99 = HIBYTE(v94);
  v100 = v93 - 8;
  *(_DWORD *)(a2 + 20) = v100;
  if (v100 >= 0)
  {
    v101 = v94 << 8;
    goto LABEL_103;
  }
  v95 = *(unsigned int **)a2;
LABEL_100:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v95);
  *(_QWORD *)a2 += 4;
  v102 = *(_DWORD *)(a2 + 16);
  v103 = *(_DWORD *)(a2 + 20);
  v99 |= v102 >> v103;
  v100 = v103 + 32;
  if (v103 == -32)
    v101 = 0;
  else
    v101 = v102 << -(char)v103;
LABEL_103:
  *(_DWORD *)(a2 + 16) = v101;
  *v98 += (_WORD)v99 << 8;
  v104 = HIBYTE(v101);
  v105 = v100 - 8;
  *(_DWORD *)(a2 + 20) = v105;
  if (v105 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v107 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v107;
    v108 = *(_DWORD *)(a2 + 16);
    v109 = *(_DWORD *)(a2 + 20);
    v104 |= v108 >> v109;
    v105 = v109 + 32;
    if (v109 == -32)
    {
      v111 = 0;
      *(_WORD *)(a1 + 124) = v104;
      v110 = (_WORD *)(a1 + 124);
      *(_QWORD *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_111;
    }
    v106 = v108 << -(char)v109;
  }
  else
  {
    v106 = v101 << 8;
  }
  *(_DWORD *)(a2 + 16) = v106;
  *(_WORD *)(a1 + 124) = v104;
  v110 = (_WORD *)(a1 + 124);
  v111 = HIBYTE(v106);
  v112 = v105 - 8;
  *(_DWORD *)(a2 + 20) = v112;
  if (v112 >= 0)
  {
    v113 = v106 << 8;
    goto LABEL_114;
  }
  v107 = *(unsigned int **)a2;
LABEL_111:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v107);
  *(_QWORD *)a2 += 4;
  v114 = *(_DWORD *)(a2 + 16);
  v115 = *(_DWORD *)(a2 + 20);
  v111 |= v114 >> v115;
  v112 = v115 + 32;
  if (v115 == -32)
    v113 = 0;
  else
    v113 = v114 << -(char)v115;
LABEL_114:
  *(_DWORD *)(a2 + 16) = v113;
  *v110 += (_WORD)v111 << 8;
  v116 = HIBYTE(v113);
  v117 = v112 - 8;
  *(_DWORD *)(a2 + 20) = v117;
  if (v117 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v119 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v119;
    v120 = *(_DWORD *)(a2 + 16);
    v121 = *(_DWORD *)(a2 + 20);
    v116 |= v120 >> v121;
    v117 = v121 + 32;
    if (v121 == -32)
    {
      v123 = 0;
      *(_WORD *)(a1 + 126) = v116;
      v122 = (_WORD *)(a1 + 126);
      *(_QWORD *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_122;
    }
    v118 = v120 << -(char)v121;
  }
  else
  {
    v118 = v113 << 8;
  }
  *(_DWORD *)(a2 + 16) = v118;
  *(_WORD *)(a1 + 126) = v116;
  v122 = (_WORD *)(a1 + 126);
  v123 = HIBYTE(v118);
  v124 = v117 - 8;
  *(_DWORD *)(a2 + 20) = v124;
  if (v124 >= 0)
  {
    v125 = v118 << 8;
    goto LABEL_125;
  }
  v119 = *(unsigned int **)a2;
LABEL_122:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v119);
  *(_QWORD *)a2 += 4;
  v126 = *(_DWORD *)(a2 + 16);
  v127 = *(_DWORD *)(a2 + 20);
  v123 |= v126 >> v127;
  v124 = v127 + 32;
  if (v127 == -32)
    v125 = 0;
  else
    v125 = v126 << -(char)v127;
LABEL_125:
  *(_DWORD *)(a2 + 16) = v125;
  *v122 += (_WORD)v123 << 8;
  v128 = HIBYTE(v125);
  v129 = v124 - 8;
  *(_DWORD *)(a2 + 20) = v129;
  if (v129 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v131 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v131;
    v132 = *(_DWORD *)(a2 + 16);
    v133 = *(_DWORD *)(a2 + 20);
    v128 |= v132 >> v133;
    v129 = v133 + 32;
    if (v133 == -32)
    {
      v135 = 0;
      *(_WORD *)(a1 + 128) = v128;
      v134 = (_WORD *)(a1 + 128);
      *(_QWORD *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_133;
    }
    v130 = v132 << -(char)v133;
  }
  else
  {
    v130 = v125 << 8;
  }
  *(_DWORD *)(a2 + 16) = v130;
  *(_WORD *)(a1 + 128) = v128;
  v134 = (_WORD *)(a1 + 128);
  v135 = HIBYTE(v130);
  v136 = v129 - 8;
  *(_DWORD *)(a2 + 20) = v136;
  if (v136 >= 0)
  {
    v137 = v130 << 8;
    goto LABEL_136;
  }
  v131 = *(unsigned int **)a2;
LABEL_133:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v131);
  *(_QWORD *)a2 += 4;
  v138 = *(_DWORD *)(a2 + 16);
  v139 = *(_DWORD *)(a2 + 20);
  v135 |= v138 >> v139;
  v136 = v139 + 32;
  if (v139 == -32)
    v137 = 0;
  else
    v137 = v138 << -(char)v139;
LABEL_136:
  *(_DWORD *)(a2 + 16) = v137;
  *v134 += (_WORD)v135 << 8;
  v140 = HIBYTE(v137);
  v141 = v136 - 8;
  *(_DWORD *)(a2 + 20) = v141;
  if (v141 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v143 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v143;
    v144 = *(_DWORD *)(a2 + 16);
    v145 = *(_DWORD *)(a2 + 20);
    v140 |= v144 >> v145;
    v141 = v145 + 32;
    if (v145 == -32)
    {
      v147 = 0;
      *(_DWORD *)(a1 + 130) = v140;
      v146 = (_DWORD *)(a1 + 130);
      *(_QWORD *)(a2 + 16) = 0xFFFFFFF800000000;
      goto LABEL_144;
    }
    v142 = v144 << -(char)v145;
  }
  else
  {
    v142 = v137 << 8;
  }
  *(_DWORD *)(a2 + 16) = v142;
  *(_DWORD *)(a1 + 130) = v140;
  v146 = (_DWORD *)(a1 + 130);
  v147 = HIBYTE(v142);
  v148 = v141 - 8;
  *(_DWORD *)(a2 + 20) = v148;
  if (v148 >= 0)
  {
    v149 = v142 << 8;
    goto LABEL_147;
  }
  v143 = *(unsigned int **)a2;
LABEL_144:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v143);
  *(_QWORD *)a2 += 4;
  v150 = *(_DWORD *)(a2 + 16);
  v151 = *(_DWORD *)(a2 + 20);
  v147 |= v150 >> v151;
  v148 = v151 + 32;
  if (v151 == -32)
    v149 = 0;
  else
    v149 = v150 << -(char)v151;
LABEL_147:
  *(_DWORD *)(a2 + 16) = v149;
  *v146 += v147 << 8;
  v152 = HIBYTE(v149);
  v153 = v148 - 8;
  *(_DWORD *)(a2 + 20) = v153;
  if (v153 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v155 = *(_DWORD *)(a2 + 16);
    v156 = *(_DWORD *)(a2 + 20);
    v152 |= v155 >> v156;
    v153 = v156 + 32;
    if (v156 == -32)
      v154 = 0;
    else
      v154 = v155 << -(char)v156;
  }
  else
  {
    v154 = v149 << 8;
  }
  *(_DWORD *)(a2 + 16) = v154;
  *v146 += v152 << 16;
  v157 = HIBYTE(v154);
  v158 = v153 - 8;
  *(_DWORD *)(a2 + 20) = v158;
  if (v158 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v160 = *(_DWORD *)(a2 + 16);
    v161 = *(_DWORD *)(a2 + 20);
    v157 |= v160 >> v161;
    v158 = v161 + 32;
    if (v161 == -32)
      v159 = 0;
    else
      v159 = v160 << -(char)v161;
  }
  else
  {
    v159 = v154 << 8;
  }
  v162 = 0;
  v163 = 0;
  *(_DWORD *)(a2 + 16) = v159;
  *(_DWORD *)(a1 + 130) += v157 << 24;
  v164 = a1 + 134;
  do
  {
    v165 = HIBYTE(v159);
    v166 = v158 - 8;
    *(_DWORD *)(a2 + 20) = v166;
    if (v166 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      v168 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v168;
      v169 = *(_DWORD *)(a2 + 16);
      v170 = *(_DWORD *)(a2 + 20);
      v165 |= v169 >> v170;
      v166 = v170 + 32;
      if (v170 == -32)
      {
        v172 = 0;
        v171 = (_WORD *)(a1 + 2 * v163 + 134);
        *(_WORD *)(v164 + v162) = v165;
        *(_QWORD *)(a2 + 16) = 0xFFFFFFF800000000;
        goto LABEL_166;
      }
      v167 = v169 << -(char)v170;
    }
    else
    {
      v167 = v159 << 8;
    }
    *(_DWORD *)(a2 + 16) = v167;
    v171 = (_WORD *)(v164 + v162);
    *(_WORD *)(v164 + v162) = v165;
    v172 = HIBYTE(v167);
    v158 = v166 - 8;
    *(_DWORD *)(a2 + 20) = v158;
    if (v158 >= 0)
    {
      v159 = v167 << 8;
      goto LABEL_169;
    }
    v168 = *(unsigned int **)a2;
LABEL_166:
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v168);
    *(_QWORD *)a2 += 4;
    v173 = *(_DWORD *)(a2 + 16);
    v174 = *(_DWORD *)(a2 + 20);
    v172 |= v173 >> v174;
    v158 = v174 + 32;
    *(_DWORD *)(a2 + 20) = v174 + 32;
    if (v174 == -32)
      v159 = 0;
    else
      v159 = v173 << -(char)v174;
LABEL_169:
    *(_DWORD *)(a2 + 16) = v159;
    *v171 += (_WORD)v172 << 8;
    ++v163;
    v162 += 2;
  }
  while (v162 != 16);
  return 0;
}

void MPEG2AACSpecificConfig::~MPEG2AACSpecificConfig(MPEG2AACSpecificConfig *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t MPEG2AACSpecificConfig::Deserialize(_DWORD *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  int v10;
  int Bit;
  uint64_t i;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  NSObject *v23;
  const char *v24;
  unsigned int *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  const char *v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20) - 32;
  *(_DWORD *)(a2 + 20) = v5;
  if (v5 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v7 = *(_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a2 + 20);
    v9 = v6 + 32;
    v8 = v6 == -32;
    *(_QWORD *)a2 += 4;
    v4 |= v7 >> v6;
    v10 = v7 << -(char)v6;
    if (v8)
      v10 = 0;
    *(_DWORD *)(a2 + 16) = v10;
    *(_DWORD *)(a2 + 20) = v9;
  }
  if (v4 != 1094994246)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v39 = 136315394;
      v40 = "ACMP4BitStreams.cpp";
      v41 = 1024;
      v42 = 3360;
      v23 = MEMORY[0x1E0C81028];
      v24 = "%25s:%-5d  ADIFHeader::Deserialize: adif_id() is incorrect";
LABEL_30:
      _os_log_impl(&dword_18EE07000, v23, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&v39, 0x12u);
    }
    return 4294967090;
  }
  Bit = TBitstreamReader<unsigned int>::GetBit(a2);
  a1[2] = Bit;
  if (Bit)
  {
    for (i = 0; i != 9; ++i)
    {
      v13 = *(_DWORD *)(a2 + 16);
      v14 = HIBYTE(v13);
      v15 = *(_DWORD *)(a2 + 20) - 8;
      *(_DWORD *)(a2 + 20) = v15;
      if (v15 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(_QWORD *)a2 += 4;
        v17 = *(_DWORD *)(a2 + 16);
        v18 = *(_DWORD *)(a2 + 20);
        v14 |= v17 >> v18;
        *(_DWORD *)(a2 + 20) = v18 + 32;
        if (v18 == -32)
          v16 = 0;
        else
          v16 = v17 << -(char)v18;
      }
      else
      {
        v16 = v13 << 8;
      }
      *(_DWORD *)(a2 + 16) = v16;
      *((_BYTE *)a1 + i + 12) = v14;
    }
  }
  a1[6] = TBitstreamReader<unsigned int>::GetBit(a2);
  a1[7] = TBitstreamReader<unsigned int>::GetBit(a2);
  a1[8] = TBitstreamReader<unsigned int>::GetBit(a2);
  v19 = *(_DWORD *)(a2 + 16);
  v20 = v19 >> 9;
  v21 = *(_DWORD *)(a2 + 20) - 23;
  *(_DWORD *)(a2 + 20) = v21;
  if (v21 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v25 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v25;
    v26 = *(_DWORD *)(a2 + 16);
    v27 = *(_DWORD *)(a2 + 20);
    v20 |= v26 >> v27;
    v21 = v27 + 32;
    if (v27 == -32)
    {
      v28 = 0;
      a1[9] = v20;
      *(_QWORD *)(a2 + 16) = 0xFFFFFFFC00000000;
      goto LABEL_24;
    }
    v22 = v26 << -(char)v27;
  }
  else
  {
    v22 = v19 << 23;
  }
  *(_DWORD *)(a2 + 16) = v22;
  a1[9] = v20;
  v28 = v22 >> 28;
  v29 = v21 - 4;
  *(_DWORD *)(a2 + 20) = v29;
  if (v29 >= 0)
  {
    v30 = 16 * v22;
    goto LABEL_27;
  }
  v25 = *(unsigned int **)a2;
LABEL_24:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v25);
  *(_QWORD *)a2 += 4;
  v31 = *(_DWORD *)(a2 + 16);
  v32 = *(_DWORD *)(a2 + 20);
  v28 |= v31 >> v32;
  v29 = v32 + 32;
  *(_DWORD *)(a2 + 20) = v32 + 32;
  if (v32 == -32)
    v30 = 0;
  else
    v30 = v31 << -(char)v32;
LABEL_27:
  *(_DWORD *)(a2 + 16) = v30;
  if (v28)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v39 = 136315394;
      v40 = "ACMP4BitStreams.cpp";
      v41 = 1024;
      v42 = 3374;
      v23 = MEMORY[0x1E0C81028];
      v24 = "%25s:%-5d  ADIFHeader::Deserialize: count of PCEs exceeds our capacity";
      goto LABEL_30;
    }
    return 4294967090;
  }
  if (!a1[8])
  {
    v34 = v30 >> 12;
    v35 = v29 - 20;
    *(_DWORD *)(a2 + 20) = v35;
    if (v35 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v37 = *(_DWORD *)(a2 + 16);
      v38 = *(_DWORD *)(a2 + 20);
      v34 |= v37 >> v38;
      *(_DWORD *)(a2 + 20) = v38 + 32;
      if (v38 == -32)
        v36 = 0;
      else
        v36 = v37 << -(char)v38;
    }
    else
    {
      v36 = v30 << 20;
    }
    *(_DWORD *)(a2 + 16) = v36;
    a1[10] = v34;
  }
  MP4AudioProgramConfig::Deserialize(a1 + 11, a2);
  return 0;
}

uint64_t MP4AudioProgramConfig::Deserialize(unsigned int *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  int v50;
  unsigned int *v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int Bit;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  char v78;
  uint64_t result;
  int v80;
  unsigned int v81;
  char v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  unint64_t v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = v4 >> 28;
  v6 = *(_DWORD *)(a2 + 20) - 4;
  *(_DWORD *)(a2 + 20) = v6;
  if (v6 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v8 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v8;
    v9 = *(_DWORD *)(a2 + 16);
    v10 = *(_DWORD *)(a2 + 20);
    v5 |= v9 >> v10;
    v6 = v10 + 32;
    if (v10 == -32)
    {
      v11 = 0;
      *a1 = v5;
      *(_QWORD *)(a2 + 16) = 0xFFFFFFFE00000000;
      goto LABEL_9;
    }
    v7 = v9 << -(char)v10;
  }
  else
  {
    v7 = 16 * v4;
  }
  *a1 = v5;
  v11 = v7 >> 30;
  v12 = v6 - 2;
  *(_DWORD *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 20) = v12;
  if (v12 >= 0)
  {
    v13 = 4 * v7;
    goto LABEL_12;
  }
  v8 = *(unsigned int **)a2;
LABEL_9:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v8);
  *(_QWORD *)a2 += 4;
  v14 = *(_DWORD *)(a2 + 16);
  v15 = *(_DWORD *)(a2 + 20);
  v11 |= v14 >> v15;
  *(_DWORD *)(a2 + 20) = v15 + 32;
  if (v15 == -32)
    v13 = 0;
  else
    v13 = v14 << -(char)v15;
LABEL_12:
  *(_DWORD *)(a2 + 16) = v13;
  a1[1] = v11;
  MP4SampleRate::Deserialize((MP4SampleRate *)(a1 + 2), a2, 0);
  v16 = *(_DWORD *)(a2 + 16);
  v17 = v16 >> 28;
  v18 = *(_DWORD *)(a2 + 20) - 4;
  *(_DWORD *)(a2 + 20) = v18;
  if (v18 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v20 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v20;
    v21 = *(_DWORD *)(a2 + 16);
    v22 = *(_DWORD *)(a2 + 20);
    v17 |= v21 >> v22;
    v18 = v22 + 32;
    if (v22 == -32)
    {
      v24 = 0;
      a1[3] = v17;
      v23 = a1 + 3;
      *(_QWORD *)(a2 + 16) = 0xFFFFFFFC00000000;
      goto LABEL_20;
    }
    v19 = v21 << -(char)v22;
  }
  else
  {
    v19 = 16 * v16;
  }
  a1[3] = v17;
  v23 = a1 + 3;
  v24 = v19 >> 28;
  v25 = v18 - 4;
  *(_DWORD *)(a2 + 16) = v19;
  *(_DWORD *)(a2 + 20) = v25;
  if (v25 >= 0)
  {
    v26 = 16 * v19;
    goto LABEL_22;
  }
  v20 = *(unsigned int **)a2;
LABEL_20:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v20);
  v27 = (unsigned int *)(*(_QWORD *)a2 + 4);
  *(_QWORD *)a2 = v27;
  v28 = *(_DWORD *)(a2 + 16);
  v29 = *(_DWORD *)(a2 + 20);
  v24 |= v28 >> v29;
  v25 = v29 + 32;
  if (v29 == -32)
  {
    v31 = 0;
    a1[36] = v24;
    v30 = a1 + 36;
    *(_QWORD *)(a2 + 16) = 0xFFFFFFFC00000000;
    goto LABEL_26;
  }
  v26 = v28 << -(char)v29;
LABEL_22:
  a1[36] = v24;
  v30 = a1 + 36;
  v31 = v26 >> 28;
  v32 = v25 - 4;
  *(_DWORD *)(a2 + 16) = v26;
  *(_DWORD *)(a2 + 20) = v32;
  if (v32 >= 0)
  {
    v33 = 16 * v26;
    goto LABEL_28;
  }
  v27 = *(unsigned int **)a2;
LABEL_26:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v27);
  v34 = (unsigned int *)(*(_QWORD *)a2 + 4);
  *(_QWORD *)a2 = v34;
  v35 = *(_DWORD *)(a2 + 16);
  v36 = *(_DWORD *)(a2 + 20);
  v31 |= v35 >> v36;
  v32 = v36 + 32;
  if (v36 == -32)
  {
    v38 = 0;
    v37 = a1 + 69;
    a1[69] = v31;
    *(_QWORD *)(a2 + 16) = 0xFFFFFFFE00000000;
    goto LABEL_32;
  }
  v33 = v35 << -(char)v36;
LABEL_28:
  v37 = a1 + 69;
  a1[69] = v31;
  v38 = v33 >> 30;
  v39 = v32 - 2;
  *(_DWORD *)(a2 + 16) = v33;
  *(_DWORD *)(a2 + 20) = v39;
  if (v39 >= 0)
  {
    v40 = 4 * v33;
    goto LABEL_34;
  }
  v34 = *(unsigned int **)a2;
LABEL_32:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v34);
  v41 = (unsigned int *)(*(_QWORD *)a2 + 4);
  *(_QWORD *)a2 = v41;
  v42 = *(_DWORD *)(a2 + 16);
  v43 = *(_DWORD *)(a2 + 20);
  v38 |= v42 >> v43;
  v39 = v43 + 32;
  if (v43 == -32)
  {
    v45 = 0;
    v44 = a1 + 102;
    a1[102] = v38;
    *(_QWORD *)(a2 + 16) = 0xFFFFFFFD00000000;
    goto LABEL_38;
  }
  v40 = v42 << -(char)v43;
LABEL_34:
  v44 = a1 + 102;
  a1[102] = v38;
  v45 = v40 >> 29;
  v46 = v39 - 3;
  *(_DWORD *)(a2 + 16) = v40;
  *(_DWORD *)(a2 + 20) = v46;
  if (v46 >= 0)
  {
    v47 = 8 * v40;
    goto LABEL_40;
  }
  v41 = *(unsigned int **)a2;
LABEL_38:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v41);
  v48 = (unsigned int *)(*(_QWORD *)a2 + 4);
  *(_QWORD *)a2 = v48;
  v49 = *(_DWORD *)(a2 + 16);
  v50 = *(_DWORD *)(a2 + 20);
  v45 |= v49 >> v50;
  v46 = v50 + 32;
  if (v50 == -32)
  {
    v52 = 0;
    v51 = a1 + 135;
    a1[135] = v45;
    *(_QWORD *)(a2 + 16) = 0xFFFFFFFC00000000;
    goto LABEL_44;
  }
  v47 = v49 << -(char)v50;
LABEL_40:
  v51 = a1 + 135;
  a1[135] = v45;
  v52 = v47 >> 28;
  v53 = v46 - 4;
  *(_DWORD *)(a2 + 16) = v47;
  *(_DWORD *)(a2 + 20) = v53;
  if (v53 >= 0)
  {
    v54 = 16 * v47;
    goto LABEL_47;
  }
  v48 = *(unsigned int **)a2;
LABEL_44:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v48);
  *(_QWORD *)a2 += 4;
  v55 = *(_DWORD *)(a2 + 16);
  v56 = *(_DWORD *)(a2 + 20);
  v52 |= v55 >> v56;
  *(_DWORD *)(a2 + 20) = v56 + 32;
  if (v56 == -32)
    v54 = 0;
  else
    v54 = v55 << -(char)v56;
LABEL_47:
  *(_DWORD *)(a2 + 16) = v54;
  a1[168] = v52;
  Bit = TBitstreamReader<unsigned int>::GetBit(a2);
  a1[201] = Bit;
  if (Bit)
  {
    v58 = *(_DWORD *)(a2 + 16);
    v59 = v58 >> 28;
    v60 = *(_DWORD *)(a2 + 20) - 4;
    *(_DWORD *)(a2 + 20) = v60;
    if (v60 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v62 = *(_DWORD *)(a2 + 16);
      v63 = *(_DWORD *)(a2 + 20);
      v59 |= v62 >> v63;
      *(_DWORD *)(a2 + 20) = v63 + 32;
      if (v63 == -32)
        v61 = 0;
      else
        v61 = v62 << -(char)v63;
    }
    else
    {
      v61 = 16 * v58;
    }
    *(_DWORD *)(a2 + 16) = v61;
    a1[202] = v59;
  }
  v64 = TBitstreamReader<unsigned int>::GetBit(a2);
  a1[204] = v64;
  if (v64)
  {
    v65 = *(_DWORD *)(a2 + 16);
    v66 = v65 >> 28;
    v67 = *(_DWORD *)(a2 + 20) - 4;
    *(_DWORD *)(a2 + 20) = v67;
    if (v67 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v69 = *(_DWORD *)(a2 + 16);
      v70 = *(_DWORD *)(a2 + 20);
      v66 |= v69 >> v70;
      *(_DWORD *)(a2 + 20) = v70 + 32;
      if (v70 == -32)
        v68 = 0;
      else
        v68 = v69 << -(char)v70;
    }
    else
    {
      v68 = 16 * v65;
    }
    *(_DWORD *)(a2 + 16) = v68;
    a1[205] = v66;
  }
  v71 = TBitstreamReader<unsigned int>::GetBit(a2);
  a1[207] = v71;
  if (v71)
  {
    v72 = *(_DWORD *)(a2 + 16);
    v73 = v72 >> 30;
    v74 = *(_DWORD *)(a2 + 20) - 2;
    *(_DWORD *)(a2 + 20) = v74;
    if (v74 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v76 = *(_DWORD *)(a2 + 16);
      v77 = *(_DWORD *)(a2 + 20);
      v73 |= v76 >> v77;
      *(_DWORD *)(a2 + 20) = v77 + 32;
      if (v77 == -32)
        v75 = 0;
      else
        v75 = v76 << -(char)v77;
    }
    else
    {
      v75 = 4 * v72;
    }
    *(_DWORD *)(a2 + 16) = v75;
    a1[208] = v73;
    a1[209] = TBitstreamReader<unsigned int>::GetBit(a2);
  }
  MP4AudioElementList::Deserialize(v23, a2, 1);
  MP4AudioElementList::Deserialize(v30, a2, 1);
  MP4AudioElementList::Deserialize(v37, a2, 1);
  MP4AudioElementList::Deserialize(v44, a2, 0);
  MP4AudioElementList::Deserialize(v51, a2, 0);
  result = (uint64_t)MP4AudioElementList::Deserialize(a1 + 168, a2, 1);
  v81 = *(_DWORD *)(a2 + 16);
  v80 = *(_DWORD *)(a2 + 20);
  v82 = v80 & 7;
  if ((v80 & 7) != 0)
  {
    v80 &= 0xFFFFFFF8;
    *(_DWORD *)(a2 + 20) = v80;
    if (v80 < 0 != v78)
    {
      result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      v83 = *(_DWORD *)(a2 + 20);
      *(_QWORD *)a2 += 4;
      v80 = v83 + 32;
      if (v83 == -32)
        v81 = 0;
      else
        v81 = *(_DWORD *)(a2 + 16) << -(char)v83;
    }
    else
    {
      v81 <<= v82;
    }
    *(_DWORD *)(a2 + 16) = v81;
  }
  v84 = HIBYTE(v81);
  v85 = v80 - 8;
  *(_DWORD *)(a2 + 20) = v85;
  if (v85 < 0)
  {
    result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v87 = *(_DWORD *)(a2 + 16);
    v88 = *(_DWORD *)(a2 + 20);
    v84 |= v87 >> v88;
    *(_DWORD *)(a2 + 20) = v88 + 32;
    if (v88 == -32)
      v86 = 0;
    else
      v86 = v87 << -(char)v88;
  }
  else
  {
    v86 = v81 << 8;
  }
  *(_DWORD *)(a2 + 16) = v86;
  a1[210] = v84;
  if (v84)
  {
    v89 = 0;
    do
    {
      v90 = *(_DWORD *)(a2 + 16);
      v91 = HIBYTE(v90);
      v92 = *(_DWORD *)(a2 + 20) - 8;
      *(_DWORD *)(a2 + 20) = v92;
      if (v92 < 0)
      {
        result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(_QWORD *)a2 += 4;
        v94 = *(_DWORD *)(a2 + 16);
        v95 = *(_DWORD *)(a2 + 20);
        v91 |= v94 >> v95;
        *(_DWORD *)(a2 + 20) = v95 + 32;
        if (v95 == -32)
          v93 = 0;
        else
          v93 = v94 << -(char)v95;
      }
      else
      {
        v93 = v90 << 8;
      }
      *(_DWORD *)(a2 + 16) = v93;
      *((_BYTE *)a1 + v89++ + 844) = v91;
    }
    while (v89 < a1[210]);
  }
  return result;
}

unsigned int *MP4AudioElementList::Deserialize(unsigned int *result, uint64_t a2, int a3)
{
  unsigned int *v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;

  if (*result)
  {
    v5 = result;
    v6 = 0;
    do
    {
      if (a3)
      {
        result = (unsigned int *)TBitstreamReader<unsigned int>::GetBit(a2);
        v5[v6 + 1] = result;
      }
      v7 = *(_DWORD *)(a2 + 16);
      v8 = v7 >> 28;
      v9 = *(_DWORD *)(a2 + 20) - 4;
      *(_DWORD *)(a2 + 20) = v9;
      if (v9 < 0)
      {
        result = (unsigned int *)TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(_QWORD *)a2 += 4;
        v11 = *(_DWORD *)(a2 + 16);
        v12 = *(_DWORD *)(a2 + 20);
        v8 |= v11 >> v12;
        *(_DWORD *)(a2 + 20) = v12 + 32;
        if (v12 == -32)
          v10 = 0;
        else
          v10 = v11 << -(char)v12;
      }
      else
      {
        v10 = 16 * v7;
      }
      *(_DWORD *)(a2 + 16) = v10;
      v5[v6++ + 17] = v8;
    }
    while (v6 < *v5);
  }
  return result;
}

void MPEG1Or2SpecificConfig::~MPEG1Or2SpecificConfig(MPEG1Or2SpecificConfig *this)
{
  JUMPOUT(0x193FFE460);
}

uint64_t MPEG1Or2SpecificConfig::Deserialize(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20) - 32;
  *(_DWORD *)(a2 + 20) = v5;
  if (v5 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    v8 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v5 = v7 + 32;
    v9 = v7 == -32;
    *(_QWORD *)a2 += 4;
    v6 = (v8 >> v7) | v4;
    v10 = v8 << -(char)v7;
    if (v9)
      v4 = 0;
    else
      v4 = v10;
    *(_DWORD *)(a2 + 16) = v4;
  }
  else
  {
    v6 = v4;
  }
  *(_DWORD *)(a1 + 8) = bswap32(v6);
  v11 = v4 >> 23;
  v12 = v5 - 9;
  *(_DWORD *)(a2 + 20) = v12;
  if (v12 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v14 = *(_DWORD *)(a2 + 16);
    v15 = *(_DWORD *)(a2 + 20);
    v11 |= v14 >> v15;
    *(_DWORD *)(a2 + 20) = v15 + 32;
    if (v15 == -32)
      v13 = 0;
    else
      v13 = v14 << -(char)v15;
  }
  else
  {
    v13 = v4 << 9;
  }
  *(_DWORD *)(a2 + 16) = v13;
  *(_DWORD *)(a1 + 12) = v11;
  return 0;
}

unint64_t MP4SampleRate::Index(MP4SampleRate *this)
{
  unint64_t v1;
  char *v2;
  unint64_t v3;
  unsigned int *v4;
  char *v5;
  unsigned int v6;

  v1 = 13;
  v2 = (char *)&MP4SampleRate::kMP4SampleRateTable;
  do
  {
    v3 = v1 >> 1;
    v4 = (unsigned int *)&v2[4 * (v1 >> 1)];
    v6 = *v4;
    v5 = (char *)(v4 + 1);
    v1 += ~(v1 >> 1);
    if (v6 > this)
      v2 = v5;
    else
      v1 = v3;
  }
  while (v1);
  if (v2 == "mcaa caarcaatcaahcaa" || *(_DWORD *)v2 != (_DWORD)this)
    return 15;
  else
    return (unint64_t)(v2 - (char *)&MP4SampleRate::kMP4SampleRateTable) >> 2;
}

uint64_t MP4SampleRate::Serialize(int *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;

  v4 = MP4SampleRate::Index((MP4SampleRate *)*a1);
  if (v4 == 15)
  {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, 15, 4u);
    v4 = *a1;
    v5 = a2;
    v6 = 24;
  }
  else
  {
    v5 = a2;
    v6 = 4;
  }
  return AT::TBitstreamWriter<unsigned int>::PutBits(v5, v4, v6);
}

uint64_t MP4AudioObjectType::Serialize(unsigned int a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;

  v3 = a1;
  if (a1 < 0x1F)
  {
    v5 = a2;
    v6 = 5;
  }
  else
  {
    v4 = a1 - 32;
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, 31, 5u);
    v5 = a2;
    v3 = v4;
    v6 = 6;
  }
  return AT::TBitstreamWriter<unsigned int>::PutBits(v5, v3, v6);
}

unsigned int *MP4AudioElementList::Serialize(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  unint64_t v4;
  unsigned int *v5;

  if (*result)
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = &v3[v4];
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, v5[1], 1u);
      result = (unsigned int *)AT::TBitstreamWriter<unsigned int>::PutBits(a2, v5[17], 4u);
      ++v4;
    }
    while (v4 < *v3);
  }
  return result;
}

uint64_t MP4AudioProgramConfig::SerializeCount(MP4AudioProgramConfig *this, char a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  if (MP4SampleRate::Index((MP4SampleRate *)*((unsigned int *)this + 2)) == 15)
    v4 = 28;
  else
    v4 = 4;
  v5 = v4 + 28;
  v6 = v4 | 0x20;
  if (!*((_DWORD *)this + 201))
    v6 = v5;
  v7 = v6 | 1;
  v8 = v6 + 5;
  if (!*((_DWORD *)this + 204))
    v8 = v7;
  if (*((_DWORD *)this + 207))
    v8 += 3;
  v9 = v8
     + 4 * (*((_DWORD *)this + 135) + *((_DWORD *)this + 102))
     + 5 * (*((_DWORD *)this + 36) + *((_DWORD *)this + 3) + *((_DWORD *)this + 69) + *((_DWORD *)this + 168));
  if ((((_BYTE)v9 + 1 + a2) & 7) != 0)
    v10 = v9 + 1 - (((_BYTE)v9 + 1 + a2) & 7) + 8;
  else
    v10 = v9 + 1;
  return (v10 + 8 * *((_DWORD *)this + 210) + 8);
}

uint64_t MP4AudioProgramConfig::Serialize(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;

  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)a1, 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 4), 2u);
  v4 = MP4SampleRate::Index((MP4SampleRate *)*(unsigned int *)(a1 + 8));
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, v4, 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 12), 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 144), 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 276), 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 408), 2u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 540), 3u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 672), 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 804), 1u);
  if (*(_DWORD *)(a1 + 804))
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 808), 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 816), 1u);
  if (*(_DWORD *)(a1 + 816))
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 820), 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 828), 1u);
  if (*(_DWORD *)(a1 + 828))
  {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 832), 2u);
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 836), 1u);
  }
  MP4AudioElementList::Serialize((unsigned int *)(a1 + 12), a2);
  MP4AudioElementList::Serialize((unsigned int *)(a1 + 144), a2);
  MP4AudioElementList::Serialize((unsigned int *)(a1 + 276), a2);
  if (*(_DWORD *)(a1 + 408))
  {
    v5 = 0;
    do
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 476 + 4 * v5++), 4u);
    while (v5 < *(unsigned int *)(a1 + 408));
  }
  if (*(_DWORD *)(a1 + 540))
  {
    v6 = 0;
    do
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 608 + 4 * v6++), 4u);
    while (v6 < *(unsigned int *)(a1 + 540));
  }
  MP4AudioElementList::Serialize((unsigned int *)(a1 + 672), a2);
  v7 = *(_DWORD *)(a2 + 28) & 7;
  if (v7)
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, v7);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 840), 8u);
  if (*(_DWORD *)(a1 + 840))
  {
    v8 = 0;
    do
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(unsigned __int8 *)(a1 + 844 + v8++), 8u);
    while (v8 < *(unsigned int *)(a1 + 840));
  }
  return AT::TBitstreamWriter<unsigned int>::Flush(a2);
}

uint64_t MP4AudioProgramConfig::TotalNumChannels(MP4AudioProgramConfig *this)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  int v18;

  v2 = *((unsigned int *)this + 3);
  if ((_DWORD)v2)
  {
    LODWORD(result) = 0;
    v4 = (_DWORD *)((char *)this + 16);
    do
    {
      if (*v4++)
        v6 = 2;
      else
        v6 = 1;
      result = (v6 + result);
      --v2;
    }
    while (v2);
  }
  else
  {
    result = 0;
  }
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7)
  {
    v8 = (_DWORD *)((char *)this + 148);
    do
    {
      if (*v8++)
        v10 = 2;
      else
        v10 = 1;
      result = (v10 + result);
      --v7;
    }
    while (v7);
  }
  v11 = *((unsigned int *)this + 69);
  if ((_DWORD)v11)
  {
    v12 = (_DWORD *)((char *)this + 280);
    do
    {
      if (*v12++)
        v14 = 2;
      else
        v14 = 1;
      result = (v14 + result);
      --v11;
    }
    while (v11);
  }
  v15 = *((unsigned int *)this + 102);
  if ((_DWORD)v15)
  {
    v16 = (_DWORD *)((char *)this + 412);
    do
    {
      if (*v16++)
        v18 = 2;
      else
        v18 = 1;
      result = (v18 + result);
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  NSObject *v15;
  const char *v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t result;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 1208);
  if (!v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v27 = 136315394;
      v28 = "ACMP4BitStreams.cpp";
      v29 = 1024;
      v30 = 1456;
      v15 = MEMORY[0x1E0C81028];
      v16 = "%25s:%-5d  DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload: NULL MP413KVoiceSpecificConfig";
      goto LABEL_29;
    }
    return 4294967090;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(unsigned int **)a2;
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 20);
  v11 = HIBYTE(v9);
  v12 = v10 - 8;
  *(_DWORD *)(a2 + 20) = v10 - 8;
  if (v10 - 8 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v8);
    v14 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v14;
    v17 = *(_DWORD *)(a2 + 16);
    v18 = *(_DWORD *)(a2 + 20);
    v11 |= v17 >> v18;
    v12 = v18 + 32;
    *(_DWORD *)(a2 + 20) = v18 + 32;
    if (v18 == -32)
      v13 = 0;
    else
      v13 = v17 << -(char)v18;
  }
  else
  {
    v13 = v9 << 8;
    v14 = v8;
  }
  *(_DWORD *)(a2 + 16) = v13;
  *(_DWORD *)(a1 + 32) = v11;
  if (v11 == 5)
  {
    v19 = 0;
    v20 = v7 - (_DWORD)v8;
    v21 = -1;
    while (1)
    {
      v22 = HIBYTE(v13);
      v12 -= 8;
      *(_DWORD *)(a2 + 20) = v12;
      if (v12 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, v14);
        v14 = (unsigned int *)(*(_QWORD *)a2 + 4);
        *(_QWORD *)a2 = v14;
        v23 = *(_DWORD *)(a2 + 16);
        v24 = *(_DWORD *)(a2 + 20);
        v22 |= v23 >> v24;
        v12 = v24 + 32;
        *(_DWORD *)(a2 + 20) = v24 + 32;
        v13 = v24 == -32 ? 0 : v23 << -(char)v24;
      }
      else
      {
        v13 <<= 8;
      }
      *(_DWORD *)(a2 + 16) = v13;
      if (v21 == 4)
        break;
      v25 = v22 & 0x7F | (v19 << 7);
      ++v21;
      v19 = v25;
      if ((v22 & 0x80) == 0)
      {
        *(_DWORD *)(a1 + 36) = v25;
        if (v21 < 4)
        {
          if (a3)
            *a3 = (v10 - v12 + 8 * ((int)v14 - *(_DWORD *)(a2 + 8) + v20)) / 8;
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, a2);
          if (!(_DWORD)result)
          {
            *(_DWORD *)(a1 + 48) = 1;
            return result;
          }
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return 4294967090;
          v27 = 136315394;
          v28 = "ACMP4BitStreams.cpp";
          v29 = 1024;
          v30 = 1472;
          v15 = MEMORY[0x1E0C81028];
          v16 = "%25s:%-5d  DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload: could not parse QCelp header";
LABEL_29:
          _os_log_impl(&dword_18EE07000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v27, 0x12u);
          return 4294967090;
        }
LABEL_27:
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return 4294967090;
        v27 = 136315394;
        v28 = "ACMP4BitStreams.cpp";
        v29 = 1024;
        v30 = 1464;
        v15 = MEMORY[0x1E0C81028];
        v16 = "%25s:%-5d  DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload: the Decoder specific info tag size is incorrect";
        goto LABEL_29;
      }
    }
    *(_DWORD *)(a1 + 36) = 0;
    goto LABEL_27;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v27 = 136315394;
    v28 = "ACMP4BitStreams.cpp";
    v29 = 1024;
    v30 = 1460;
    v15 = MEMORY[0x1E0C81028];
    v16 = "%25s:%-5d  DecoderConfigDescr::DeserializeVoiceDecoderSpecificPayload: the DecoderSpecificInfo tag is incorrect";
    goto LABEL_29;
  }
  return 4294967090;
}

void std::shared_ptr<MP4AOTSpecificBase>::reset[abi:ne180100]<MP4SpatialAudioSpecificConfig,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2917F30;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  *(_QWORD *)&v5 = a2;
  *((_QWORD *)&v5 + 1) = v4;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_18EF3C9B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MP4SpatialAudioSpecificConfig *,std::shared_ptr<MP4AOTSpecificBase>::__shared_ptr_default_delete<MP4AOTSpecificBase,MP4SpatialAudioSpecificConfig>,std::allocator<MP4SpatialAudioSpecificConfig>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<MP4SpatialAudioSpecificConfig *,std::shared_ptr<MP4AOTSpecificBase>::__shared_ptr_default_delete<MP4AOTSpecificBase,MP4SpatialAudioSpecificConfig>,std::allocator<MP4SpatialAudioSpecificConfig>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<MP4AOTSpecificBase *,std::shared_ptr<MP4AOTSpecificBase>::__shared_ptr_default_delete<MP4AOTSpecificBase,MP4AOTSpecificBase>,std::allocator<MP4AOTSpecificBase>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t DecoderConfigDescr::DeserializeMPEG2AACAudioDecoderSpecificPayload(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v5;
  int v8;
  unsigned int *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  NSObject *v16;
  const char *v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t result;
  int v28;
  int v29;
  const char *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 1208);
  if (!v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v29 = 136315394;
      v30 = "ACMP4BitStreams.cpp";
      v31 = 1024;
      v32 = 1788;
      v16 = MEMORY[0x1E0C81028];
      v17 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG2AACAudioDecoderSpecificPayload: NULL MPEG2AACSpecificConfig";
      goto LABEL_32;
    }
    return 4294967090;
  }
  v5 = *(_DWORD *)(a1 + 8);
  if ((v5 - 102) >= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v29 = 136315394;
      v30 = "ACMP4BitStreams.cpp";
      v31 = 1024;
      v32 = 1807;
      v16 = MEMORY[0x1E0C81028];
      v17 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG2AACAudioDecoderSpecificPayload: unrecognized object type indication";
      goto LABEL_32;
    }
    return 4294967090;
  }
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(unsigned int **)a2;
  v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 40) = v5 - 101;
  v11 = *(_DWORD *)(a2 + 16);
  v12 = HIBYTE(v11);
  v13 = *(_DWORD *)(a2 + 20) - 8;
  *(_DWORD *)(a2 + 20) = v13;
  if (v13 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v9);
    v15 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v15;
    v18 = *(_DWORD *)(a2 + 16);
    v19 = *(_DWORD *)(a2 + 20);
    v12 |= v18 >> v19;
    v13 = v19 + 32;
    *(_DWORD *)(a2 + 20) = v19 + 32;
    if (v19 == -32)
      v14 = 0;
    else
      v14 = v18 << -(char)v19;
  }
  else
  {
    v14 = v11 << 8;
    v15 = v9;
  }
  *(_DWORD *)(a2 + 16) = v14;
  *(_DWORD *)(a1 + 32) = v12;
  if (v12 == 5)
  {
    v20 = 0;
    v21 = v8 - (_DWORD)v9;
    v22 = -1;
    while (1)
    {
      v23 = HIBYTE(v14);
      v13 -= 8;
      *(_DWORD *)(a2 + 20) = v13;
      if (v13 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, v15);
        v15 = (unsigned int *)(*(_QWORD *)a2 + 4);
        *(_QWORD *)a2 = v15;
        v24 = *(_DWORD *)(a2 + 16);
        v25 = *(_DWORD *)(a2 + 20);
        v23 |= v24 >> v25;
        v13 = v25 + 32;
        *(_DWORD *)(a2 + 20) = v25 + 32;
        v14 = v25 == -32 ? 0 : v24 << -(char)v25;
      }
      else
      {
        v14 <<= 8;
      }
      *(_DWORD *)(a2 + 16) = v14;
      if (v22 == 4)
        break;
      v26 = v23 & 0x7F | (v20 << 7);
      ++v22;
      v20 = v26;
      if ((v23 & 0x80) == 0)
      {
        *(_DWORD *)(a1 + 36) = v26;
        if (v22 < 4)
        {
          if (a3)
            *a3 = (v10 - v13 + 8 * ((int)v15 - *(_DWORD *)(a2 + 8) + v21)) / 8;
          if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, a2))
          {
            memcpy((void *)(a1 + 88), (const void *)(v3 + 44), 0x44CuLL);
            result = 0;
            v28 = *(_DWORD *)(a1 + 96);
            *(_QWORD *)(a1 + 48) = 0;
            *(_DWORD *)(a1 + 44) = v28;
            *(_DWORD *)(a1 + 72) = -1;
            *(_DWORD *)(a1 + 80) = -1;
            return result;
          }
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            return 4294967090;
          v29 = 136315394;
          v30 = "ACMP4BitStreams.cpp";
          v31 = 1024;
          v32 = 1824;
          v16 = MEMORY[0x1E0C81028];
          v17 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG2AACAudioDecoderSpecificPayload: could not parse ADIF header";
LABEL_32:
          _os_log_impl(&dword_18EE07000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v29, 0x12u);
          return 4294967090;
        }
LABEL_30:
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return 4294967090;
        v29 = 136315394;
        v30 = "ACMP4BitStreams.cpp";
        v31 = 1024;
        v32 = 1816;
        v16 = MEMORY[0x1E0C81028];
        v17 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG2AACAudioDecoderSpecificPayload: the Decoder specific info t"
              "ag size is incorrect";
        goto LABEL_32;
      }
    }
    *(_DWORD *)(a1 + 36) = 0;
    goto LABEL_30;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v29 = 136315394;
    v30 = "ACMP4BitStreams.cpp";
    v31 = 1024;
    v32 = 1812;
    v16 = MEMORY[0x1E0C81028];
    v17 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG2AACAudioDecoderSpecificPayload: the DecoderSpecificInfo tag is incorrect";
    goto LABEL_32;
  }
  return 4294967090;
}

uint64_t DecoderConfigDescr::DeserializeMPEG1Or2AudioDecoderSpecificPayload(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int *v3;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  NSObject *v15;
  const char *v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v30;
  const char *v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int **)(a1 + 1208);
  if (v3)
  {
    v7 = *(_DWORD *)(a2 + 8);
    v8 = *(unsigned int **)a2;
    v9 = *(_DWORD *)(a2 + 16);
    v10 = *(_DWORD *)(a2 + 20);
    v11 = HIBYTE(v9);
    v12 = v10 - 8;
    *(_DWORD *)(a2 + 20) = v10 - 8;
    if (v10 - 8 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v8);
      v14 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v14;
      v17 = *(_DWORD *)(a2 + 16);
      v18 = *(_DWORD *)(a2 + 20);
      v11 |= v17 >> v18;
      v12 = v18 + 32;
      *(_DWORD *)(a2 + 20) = v18 + 32;
      if (v18 == -32)
        v13 = 0;
      else
        v13 = v17 << -(char)v18;
    }
    else
    {
      v13 = v9 << 8;
      v14 = v8;
    }
    *(_DWORD *)(a2 + 16) = v13;
    *(_DWORD *)(a1 + 32) = v11;
    if (v11 == 5)
    {
      v19 = 0;
      v20 = v7 - (_DWORD)v8;
      v21 = -1;
      do
      {
        v22 = HIBYTE(v13);
        v12 -= 8;
        *(_DWORD *)(a2 + 20) = v12;
        if (v12 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v14);
          v14 = (unsigned int *)(*(_QWORD *)a2 + 4);
          *(_QWORD *)a2 = v14;
          v23 = *(_DWORD *)(a2 + 16);
          v24 = *(_DWORD *)(a2 + 20);
          v22 |= v23 >> v24;
          v12 = v24 + 32;
          *(_DWORD *)(a2 + 20) = v24 + 32;
          if (v24 == -32)
            v13 = 0;
          else
            v13 = v23 << -(char)v24;
        }
        else
        {
          v13 <<= 8;
        }
        *(_DWORD *)(a2 + 16) = v13;
        if (v21 == 4)
        {
          *(_DWORD *)(a1 + 36) = 0;
          goto LABEL_26;
        }
        v25 = v22 & 0x7F | (v19 << 7);
        ++v21;
        v19 = v25;
      }
      while ((v22 & 0x80) != 0);
      *(_DWORD *)(a1 + 36) = v25;
      if (v21 < 4)
      {
        if (a3)
          *a3 = (v10 - v12 + 8 * ((int)v14 - *(_DWORD *)(a2 + 8) + v20)) / 8;
        v26 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v3 + 16))(v3, a2);
        v27 = operator new();
        *(_OWORD *)(v27 + 24) = 0u;
        *(_OWORD *)(v27 + 40) = 0u;
        *(_OWORD *)(v27 + 56) = 0u;
        *(_OWORD *)(v27 + 8) = 0u;
        v28 = ParseMPEGSyncWord(bswap32(v3[2]), v27 + 8);
        *(_BYTE *)v27 = v28;
        if ((v28 & 1) != 0)
        {
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(v27 + 60);
        }
        else
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            v30 = 136315394;
            v31 = "ACMP4BitStreams.cpp";
            v32 = 1024;
            v33 = 1886;
            _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG1Or2AudioDecoderSpecificPayload: invalid header", (uint8_t *)&v30, 0x12u);
          }
          v26 = 4294967090;
        }
        MEMORY[0x193FFE460](v27, 0x1000C40745E7FBCLL);
        return v26;
      }
LABEL_26:
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294967090;
      v30 = 136315394;
      v31 = "ACMP4BitStreams.cpp";
      v32 = 1024;
      v33 = 1877;
      v15 = MEMORY[0x1E0C81028];
      v16 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG1Or2AudioDecoderSpecificPayload: the Decoder specific info tag"
            " size is incorrect";
      goto LABEL_28;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v30 = 136315394;
      v31 = "ACMP4BitStreams.cpp";
      v32 = 1024;
      v33 = 1873;
      v15 = MEMORY[0x1E0C81028];
      v16 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG1Or2AudioDecoderSpecificPayload: the DecoderSpecificInfo tag is incorrect";
      goto LABEL_28;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v30 = 136315394;
    v31 = "ACMP4BitStreams.cpp";
    v32 = 1024;
    v33 = 1869;
    v15 = MEMORY[0x1E0C81028];
    v16 = "%25s:%-5d  DecoderConfigDescr::DeserializeMPEG1Or2AudioDecoderSpecificPayload: NULL MPEG1Or2SpecificConfig";
LABEL_28:
    _os_log_impl(&dword_18EE07000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v30, 0x12u);
  }
  return 4294967090;
}

uint64_t DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  NSObject *v26;
  const char *v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  const char *v57;
  __int16 v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(unsigned int **)a2;
  v8 = *(_DWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 20);
  v10 = HIBYTE(v8);
  v11 = v9 - 8;
  *(_DWORD *)(a2 + 20) = v9 - 8;
  if (v9 - 8 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v7);
    v13 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v13;
    v14 = *(_DWORD *)(a2 + 16);
    v15 = *(_DWORD *)(a2 + 20);
    v10 |= v14 >> v15;
    v11 = v15 + 32;
    *(_DWORD *)(a2 + 20) = v15 + 32;
    if (v15 == -32)
      v12 = 0;
    else
      v12 = v14 << -(char)v15;
  }
  else
  {
    v12 = v8 << 8;
    v13 = v7;
  }
  *(_DWORD *)(a2 + 16) = v12;
  *(_DWORD *)(a1 + 32) = v10;
  if (v10 != 5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v56 = 136315394;
      v57 = "ACMP4BitStreams.cpp";
      v58 = 1024;
      v59 = 1906;
      v26 = MEMORY[0x1E0C81028];
      v27 = "%25s:%-5d  DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload: the DecoderSpecificInfo tag is incorrect";
      goto LABEL_63;
    }
    return 4294967090;
  }
  v16 = 0;
  v17 = v6 - (_DWORD)v7;
  v18 = 6;
  do
  {
    v19 = HIBYTE(v12);
    v11 -= 8;
    *(_DWORD *)(a2 + 20) = v11;
    if (v11 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
      v13 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v13;
      v20 = *(_DWORD *)(a2 + 16);
      v21 = *(_DWORD *)(a2 + 20);
      v19 |= v20 >> v21;
      v11 = v21 + 32;
      *(_DWORD *)(a2 + 20) = v21 + 32;
      if (v21 == -32)
        v12 = 0;
      else
        v12 = v20 << -(char)v21;
    }
    else
    {
      v12 <<= 8;
    }
    *(_DWORD *)(a2 + 16) = v12;
    if (!--v18)
    {
      *(_DWORD *)(a1 + 36) = 0;
      goto LABEL_23;
    }
    v22 = v19 & 0x7F | (v16 << 7);
    v16 = v22;
  }
  while ((v19 & 0x80) != 0);
  *(_DWORD *)(a1 + 36) = v22;
  if (v22 <= 0x1F)
  {
LABEL_23:
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294967090;
    v56 = 136315394;
    v57 = "ACMP4BitStreams.cpp";
    v58 = 1024;
    v59 = 1910;
    v26 = MEMORY[0x1E0C81028];
    v27 = "%25s:%-5d  DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload: the Decoder specific info tag size is incorrect";
    goto LABEL_63;
  }
  if (a3)
  {
    *a3 = (v9 - v11 + 8 * ((int)v13 - *(_DWORD *)(a2 + 8) + v17)) / 8;
    v12 = *(_DWORD *)(a2 + 16);
    v11 = *(_DWORD *)(a2 + 20);
  }
  v23 = HIBYTE(v12);
  v24 = v11 - 8;
  *(_DWORD *)(a2 + 20) = v24;
  if (v24 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
    v13 = (unsigned int *)(*(_QWORD *)a2 + 4);
    *(_QWORD *)a2 = v13;
    v28 = *(_DWORD *)(a2 + 16);
    v29 = *(_DWORD *)(a2 + 20);
    v23 |= v28 >> v29;
    v24 = v29 + 32;
    *(_DWORD *)(a2 + 20) = v29 + 32;
    if (v29 == -32)
      v25 = 0;
    else
      v25 = v28 << -(char)v29;
  }
  else
  {
    v25 = v12 << 8;
  }
  *(_DWORD *)(a2 + 16) = v25;
  if (!(_BYTE)v23)
  {
    v33 = HIBYTE(v25);
    v31 = v24 - 8;
    *(_DWORD *)(a2 + 20) = v31;
    if (v31 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
      v13 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v13;
      v36 = *(_DWORD *)(a2 + 16);
      v37 = *(_DWORD *)(a2 + 20);
      v33 |= v36 >> v37;
      v31 = v37 + 32;
      *(_DWORD *)(a2 + 20) = v37 + 32;
      if (v37 == -32)
        v32 = 0;
      else
        v32 = v36 << -(char)v37;
    }
    else
    {
      v32 = v25 << 8;
    }
    *(_DWORD *)(a2 + 16) = v32;
    if (v33 != 30)
      goto LABEL_61;
LABEL_52:
    v41 = HIBYTE(v32);
    v42 = v31 - 8;
    *(_DWORD *)(a2 + 20) = v42;
    if (v42 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
      v13 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v13;
      v44 = *(_DWORD *)(a2 + 16);
      v45 = *(_DWORD *)(a2 + 20);
      v41 |= v44 >> v45;
      v42 = v45 + 32;
      *(_DWORD *)(a2 + 20) = v45 + 32;
      if (v45 == -32)
        v43 = 0;
      else
        v43 = v44 << -(char)v45;
    }
    else
    {
      v43 = v32 << 8;
    }
    *(_DWORD *)(a2 + 16) = v43;
    if (v41 != 1)
      goto LABEL_61;
    if (v42 + 8 * (*(_DWORD *)(a2 + 8) - (int)v13) <= 231)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294967090;
      v56 = 136315394;
      v57 = "ACMP4BitStreams.cpp";
      v58 = 1024;
      v59 = 1942;
      v26 = MEMORY[0x1E0C81028];
      v27 = "%25s:%-5d  DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload: the Decoder specific info is too sma"
            "ll to contain a full Vorbis identification header";
      goto LABEL_63;
    }
    v47 = v42 - 32;
    *(_DWORD *)(a2 + 20) = v47;
    if (v47 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
      v13 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v13;
      v49 = *(_DWORD *)(a2 + 16);
      v50 = *(_DWORD *)(a2 + 20);
      v48 = (v49 >> v50) | v43;
      v47 = v50 + 32;
      if (v50 == -32)
      {
        v51 = 0;
        *(_QWORD *)(a2 + 16) = 0xFFFFFFF000000000;
        goto LABEL_72;
      }
      v43 = v49 << -(char)v50;
      *(_DWORD *)(a2 + 16) = v43;
    }
    else
    {
      v48 = v43;
    }
    v51 = HIWORD(v43);
    v52 = v47 - 16;
    *(_DWORD *)(a2 + 20) = v52;
    if (v52 >= 0)
    {
      v53 = v43 << 16;
      goto LABEL_75;
    }
LABEL_72:
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
    *(_QWORD *)a2 += 4;
    v54 = *(_DWORD *)(a2 + 16);
    v55 = *(_DWORD *)(a2 + 20);
    v51 |= v54 >> v55;
    *(_DWORD *)(a2 + 20) = v55 + 32;
    if (v55 == -32)
      v53 = 0;
    else
      v53 = v54 << -(char)v55;
LABEL_75:
    *(_DWORD *)(a2 + 16) = v53;
    if (v48 == 1987015266 && (unsigned __int16)v51 == 26995)
      return 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v56 = 136315394;
      v57 = "ACMP4BitStreams.cpp";
      v58 = 1024;
      v59 = 1946;
      v26 = MEMORY[0x1E0C81028];
      v27 = "%25s:%-5d  DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload: the identification header packet typ"
            "e does not indicate Vorbis";
      goto LABEL_63;
    }
    return 4294967090;
  }
  if (v23 == 2)
  {
    v30 = HIBYTE(v25);
    v31 = v24 - 8;
    *(_DWORD *)(a2 + 20) = v31;
    if (v31 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
      v13 = (unsigned int *)(*(_QWORD *)a2 + 4);
      *(_QWORD *)a2 = v13;
      v34 = *(_DWORD *)(a2 + 16);
      v35 = *(_DWORD *)(a2 + 20);
      v30 |= v34 >> v35;
      v31 = v35 + 32;
      *(_DWORD *)(a2 + 20) = v35 + 32;
      v32 = v35 == -32 ? 0 : v34 << -(char)v35;
    }
    else
    {
      v32 = v25 << 8;
    }
    *(_DWORD *)(a2 + 16) = v32;
    if (v30 == 30)
    {
      while (1)
      {
        v38 = HIBYTE(v32);
        v31 -= 8;
        *(_DWORD *)(a2 + 20) = v31;
        if (v31 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v13);
          v13 = (unsigned int *)(*(_QWORD *)a2 + 4);
          *(_QWORD *)a2 = v13;
          v39 = *(_DWORD *)(a2 + 16);
          v40 = *(_DWORD *)(a2 + 20);
          v38 |= v39 >> v40;
          v31 = v40 + 32;
          *(_DWORD *)(a2 + 20) = v40 + 32;
          v32 = v40 == -32 ? 0 : v39 << -(char)v40;
        }
        else
        {
          v32 <<= 8;
        }
        *(_DWORD *)(a2 + 16) = v32;
        if (v31 + 8 * (*(_DWORD *)(a2 + 8) - (int)v13) <= 7)
          break;
        if ((_BYTE)v38 != 0xFF)
          goto LABEL_52;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v56 = 136315394;
        v57 = "ACMP4BitStreams.cpp";
        v58 = 1024;
        v59 = 1927;
        v26 = MEMORY[0x1E0C81028];
        v27 = "%25s:%-5d  DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload: the Decoder specific info is too s"
              "mall to contain a Vorbis identification header";
        goto LABEL_63;
      }
      return 4294967090;
    }
  }
LABEL_61:
  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    return 4294967090;
  v56 = 136315394;
  v57 = "ACMP4BitStreams.cpp";
  v58 = 1024;
  v59 = 1941;
  v26 = MEMORY[0x1E0C81028];
  v27 = "%25s:%-5d  DecoderConfigDescr::DeserializeVorbisDecoderSpecificPayload: the identification header packet type is incorrect";
LABEL_63:
  _os_log_impl(&dword_18EE07000, v26, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&v56, 0x12u);
  return 4294967090;
}

uint64_t MP4OTISpecificBase::MakeObjectTypeSpecific(int a1)
{
  uint64_t v1;

  v1 = 0;
  if (a1 > 104)
  {
    if (a1 == 105 || a1 == 107)
    {
      v1 = operator new();
      *(_QWORD *)v1 = &off_1E2908A20;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else if (a1 == 225)
    {
      v1 = operator new();
      *(_QWORD *)v1 = &off_1E2909018;
      bzero((void *)(v1 + 8), 0xA4uLL);
    }
  }
  else if ((a1 - 102) < 3)
  {
    v1 = operator new();
    *(_QWORD *)v1 = &off_1E2908A48;
    *(_DWORD *)(v1 + 52) = 0;
    MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)(v1 + 44));
    ADIFHeader::Clear((ADIFHeader *)(v1 + 8));
  }
  return v1;
}

void ADIFHeader::Clear(ADIFHeader *this)
{
  bzero(this, 4uLL);
  bzero((char *)this + 4, 9uLL);
  bzero((char *)this + 16, 4uLL);
  bzero((char *)this + 20, 4uLL);
  bzero((char *)this + 24, 4uLL);
  bzero((char *)this + 28, 4uLL);
  bzero((char *)this + 32, 4uLL);
}

void std::shared_ptr<MP4OTISpecificBase>::reset[abi:ne180100]<MP4OTISpecificBase,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2917DA8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  *(_QWORD *)&v5 = a2;
  *((_QWORD *)&v5 + 1) = v4;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_18EF3DA84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MP4OTISpecificBase *,std::shared_ptr<MP4OTISpecificBase>::__shared_ptr_default_delete<MP4OTISpecificBase,MP4OTISpecificBase>,std::allocator<MP4OTISpecificBase>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x193FFE460);
}

uint64_t std::__shared_ptr_pointer<MP4OTISpecificBase *,std::shared_ptr<MP4OTISpecificBase>::__shared_ptr_default_delete<MP4OTISpecificBase,MP4OTISpecificBase>,std::allocator<MP4OTISpecificBase>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount(DecoderConfigDescr *this)
{
  MP4SampleRate *v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 10);
  v2 = (MP4SampleRate *)*((unsigned int *)this + 11);
  if (v3 <= 0x1F)
    v4 = 5;
  else
    v4 = 11;
  if (MP4SampleRate::Index(v2) == 15)
    v5 = 28;
  else
    v5 = 4;
  v6 = v4 + v5 + 4;
  if (v3 == 29 || v3 == 5)
  {
    if (MP4SampleRate::Index((MP4SampleRate *)*((unsigned int *)this + 15)) == 15)
      v8 = 28;
    else
      v8 = 4;
    v6 += v4 + v8;
  }
  if (v3 - 1 < 4)
    goto LABEL_17;
  if (v3 == 39)
  {
    v9 = *((_QWORD *)this + 149);
    goto LABEL_25;
  }
  if (v3 == 23)
  {
LABEL_17:
    v9 = *((_QWORD *)this + 149);
    if (!v9)
    {
      v6 += 3;
      if (*((_DWORD *)this + 12))
        goto LABEL_27;
      v10 = MP4AudioProgramConfig::SerializeCount((DecoderConfigDescr *)((char *)this + 88), v6);
LABEL_26:
      v6 += v10;
LABEL_27:
      v11 = *((_DWORD *)this + 10);
      if ((v11 - 19) < 9 || v11 == 39 || v11 == 17)
        v6 += 2;
      v12 = *((_DWORD *)this + 18);
      if (v12 != -1 && *((_DWORD *)this + 17) == 695)
      {
        v13 = *((_DWORD *)this + 14);
        v14 = v13 <= 0x1F ? 5 : 11;
        v6 += v14 + 11;
        if (v13 == 5)
        {
          ++v6;
          if (v12 == 1)
          {
            v15 = MP4SampleRate::Index((MP4SampleRate *)*((unsigned int *)this + 15)) == 15 ? 28 : 4;
            v6 += v15;
            if (*((_DWORD *)this + 20) != -1 && *((_DWORD *)this + 19) == 1352)
              v6 += 12;
          }
        }
      }
      goto LABEL_42;
    }
LABEL_25:
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    goto LABEL_26;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v18 = 136315394;
    v19 = "ACMP4BitStreams.cpp";
    v20 = 1024;
    v21 = 2137;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount: Unsupported AudioObjectType", (uint8_t *)&v18, 0x12u);
  }
LABEL_42:
  v16 = v6 >> 3;
  if ((v6 & 7) != 0)
    return v16 + 1;
  else
    return v16;
}

uint64_t DecoderConfigDescr::GetDefaultPriming(DecoderConfigDescr *this, unsigned int *a2)
{
  uint64_t result;
  int v4;
  unsigned int v5;
  BOOL v6;
  int v7;

  result = 0;
  v4 = *((_DWORD *)this + 10);
  v5 = 2112;
  if (v4 > 22)
  {
    switch(v4)
    {
      case 39:
        v5 = 256;
        if (*((_QWORD *)this + 149))
        {
          result = 0;
          v6 = *((_DWORD *)this + 13) == 0;
          v7 = 240;
LABEL_14:
          if (!v6)
            v5 = v7;
          goto LABEL_17;
        }
LABEL_16:
        result = 0;
        goto LABEL_17;
      case 29:
        goto LABEL_17;
      case 23:
        v5 = 512;
        if (*((_QWORD *)this + 149))
        {
          result = 0;
          v6 = *((_DWORD *)this + 13) == 0;
          v7 = 480;
          goto LABEL_14;
        }
        goto LABEL_16;
    }
LABEL_11:
    v5 = 0;
    result = 0xFFFFFFFFLL;
    goto LABEL_17;
  }
  if (v4 != 2 && v4 != 5)
    goto LABEL_11;
LABEL_17:
  *a2 = v5;
  return result;
}

uint64_t MP4AudioESDS::Serialize(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4)
{
  int v5;
  DecoderConfigDescr *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  const char *v14;
  uint64_t result;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v5 = a3;
  v27 = *MEMORY[0x1E0C80C00];
  v8 = (DecoderConfigDescr *)(a1 + 296);
  if (*(_DWORD *)(a1 + 304) == 64)
  {
    v9 = a3;
    if (!a3)
      v9 = DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount(v8);
    v10 = v9 + 32;
  }
  else
  {
    v10 = 14;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 3, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, v10, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, 0x18u);
  if (*(_DWORD *)(a1 + 304) != 64)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v23 = 136315394;
      v24 = "ACMP4BitStreams.cpp";
      v25 = 1024;
      v26 = 2353;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  DecoderConfigDescr::Serialize: Unsupported ObjectType";
LABEL_13:
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v23, 0x12u);
    }
    return 4294967090;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 4, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  if (*(_DWORD *)(a1 + 304) == 64)
  {
    v11 = v5;
    if (!v5)
      v11 = DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount(v8);
    v12 = v11 + 18;
  }
  else
  {
    v12 = 0;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, v12, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 304), 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 308), 6u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 312), 1u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, 1u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 316), 0x18u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 320), 0x20u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 324), 0x20u);
  AT::TBitstreamWriter<unsigned int>::Flush(a2);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 5, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  if (!v5)
  {
    v18 = DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount(v8);
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, v18, 8u);
    MP4AudioObjectType::Serialize(*(_DWORD *)(a1 + 336), a2);
    MP4SampleRate::Serialize((int *)(a1 + 340), a2);
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 344), 4u);
    v19 = *(_DWORD *)(a1 + 336);
    if (v19 == 5 || v19 == 29)
    {
      MP4SampleRate::Serialize((int *)(a1 + 356), a2);
      MP4AudioObjectType::Serialize(2u, a2);
      v19 = *(_DWORD *)(a1 + 336);
    }
    if ((v19 - 1) < 4)
      goto LABEL_28;
    if (v19 == 39)
    {
      v20 = *(_QWORD *)(a1 + 1488);
      if (!v20)
        return 4294967290;
      *(_DWORD *)(v20 + 16) = *(_DWORD *)(a1 + 348);
      goto LABEL_30;
    }
    if (v19 == 23)
    {
LABEL_28:
      v20 = *(_QWORD *)(a1 + 1488);
      v21 = *(_DWORD *)(a1 + 348);
      if (!v20)
      {
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, v21, 1u);
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, 1u);
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, 1u);
        if (!*(_DWORD *)(a1 + 344))
          MP4AudioProgramConfig::Serialize(a1 + 384, a2);
LABEL_36:
        v22 = *(_DWORD *)(a1 + 336);
        if ((v22 - 19) < 9 || v22 == 39 || v22 == 17)
          AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 360), 2u);
        if (*(_DWORD *)(a1 + 368) != -1 && *(_DWORD *)(a1 + 364) == 695)
        {
          AT::TBitstreamWriter<unsigned int>::PutBits(a2, 695, 0xBu);
          MP4AudioObjectType::Serialize(*(_DWORD *)(a1 + 352), a2);
          if (*(_DWORD *)(a1 + 352) == 5)
          {
            AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 368), 1u);
            if (*(_DWORD *)(a1 + 368) == 1)
            {
              MP4SampleRate::Serialize((int *)(a1 + 356), a2);
              if (*(_DWORD *)(a1 + 376) != -1 && *(_DWORD *)(a1 + 372) == 1352)
              {
                AT::TBitstreamWriter<unsigned int>::PutBits(a2, 1352, 0xBu);
                AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 376), 1u);
              }
            }
          }
        }
        goto LABEL_19;
      }
      *(_BYTE *)(v20 + 20) = v21 != 0;
LABEL_30:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 32))(v20, a2);
      if ((_DWORD)result)
        return result;
      goto LABEL_36;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v23 = 136315394;
      v24 = "ACMP4BitStreams.cpp";
      v25 = 1024;
      v26 = 2286;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d  DecoderConfigDescr::MPEG4AudioSpecificPayloadSerialize: Unsupported AudioObjectType";
      goto LABEL_13;
    }
    return 4294967090;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, v5, 8u);
  if (!a4)
    return 0xFFFFFFFFLL;
  do
  {
    --v5;
    v16 = *a4++;
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, v16, 8u);
  }
  while (v5);
LABEL_19:
  v17 = *(_DWORD *)(a2 + 28) & 7;
  if (v17)
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, v17);
  AT::TBitstreamWriter<unsigned int>::Flush(a2);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 6, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 128, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 1, 8u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, 2, 8u);
  AT::TBitstreamWriter<unsigned int>::Flush(a2);
  return 0;
}

uint64_t ACMP4BitStreams::GetDecoderSpecificBitStreamFromESDS(uint64_t a1, int *a2, int *a3)
{
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  NSObject *v29;
  const char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  const char *v51;
  __int16 v52;
  int v53;
  _BYTE v54[296];
  _DWORD v55[10];
  uint64_t v56;
  uint64_t v57;
  _DWORD v58[276];
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v55[2] = 0;
  v56 = 0;
  v57 = 0;
  v58[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v58);
  v60 = 0u;
  v59 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v55);
  if (!a3)
  {
    v10 = 4294967246;
    goto LABEL_28;
  }
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)a1;
  v9 = *(_DWORD *)(a1 + 20);
  *a3 = 0;
  v10 = MP4AudioESDS::Deserialize((uint64_t)v54, a1, a3, 0);
  if (!(_DWORD)v10)
  {
    TBitstreamReader<unsigned int>::PutBack(a1, v9 - *(_DWORD *)(a1 + 20) + 8 * (*(_DWORD *)a1 - *(_DWORD *)(a1 + 8) - *a3 + v7 - v8));
    v11 = *(_DWORD *)(a1 + 16);
    v12 = HIBYTE(v11);
    v13 = *(_DWORD *)(a1 + 20) - 8;
    *(_DWORD *)(a1 + 20) = v13;
    if (v13 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
      *(_QWORD *)a1 += 4;
      v15 = *(_DWORD *)(a1 + 16);
      v16 = *(_DWORD *)(a1 + 20);
      v12 |= v15 >> v16;
      *(_DWORD *)(a1 + 20) = v16 + 32;
      if (v16 == -32)
        v14 = 0;
      else
        v14 = v15 << -(char)v16;
    }
    else
    {
      v14 = v11 << 8;
    }
    *(_DWORD *)(a1 + 16) = v14;
    ++*a3;
    if (v12 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v50 = 136315394;
        v51 = "ACMP4BitStreams.cpp";
        v52 = 1024;
        v53 = 3506;
        v29 = MEMORY[0x1E0C81028];
        v30 = "%25s:%-5d  ACMP4BitStreams::GetDecoderSpecificBitStreamFromESDS: the DecoderConfigDescriptor tag is incorrect";
        goto LABEL_26;
      }
      goto LABEL_27;
    }
    v18 = *(_DWORD *)(a1 + 16);
    v17 = *(_DWORD *)(a1 + 20);
    v19 = -1;
    while (1)
    {
      v20 = v19;
      v21 = HIBYTE(v18);
      v17 -= 8;
      *(_DWORD *)(a1 + 20) = v17;
      if (v17 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
        *(_QWORD *)a1 += 4;
        v22 = *(_DWORD *)(a1 + 16);
        v23 = *(_DWORD *)(a1 + 20);
        v21 |= v22 >> v23;
        v17 = v23 + 32;
        *(_DWORD *)(a1 + 20) = v23 + 32;
        v18 = v23 == -32 ? 0 : v22 << -(char)v23;
      }
      else
      {
        v18 <<= 8;
      }
      *(_DWORD *)(a1 + 16) = v18;
      if (v20 == 4)
        break;
      v19 = v20 + 1;
      if ((v21 & 0x80) == 0)
      {
        v24 = *a3 + v20 + 2;
        *a3 = v24;
        if (v19 < 4)
        {
          *a3 = v24 + 13;
          TBitstreamReader<unsigned int>::SkipBits(a1, 104);
          v25 = *(_DWORD *)(a1 + 16);
          v26 = HIBYTE(v25);
          v27 = *(_DWORD *)(a1 + 20) - 8;
          *(_DWORD *)(a1 + 20) = v27;
          if (v27 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
            *(_QWORD *)a1 += 4;
            v38 = *(_DWORD *)(a1 + 16);
            v39 = *(_DWORD *)(a1 + 20);
            v26 |= v38 >> v39;
            *(_DWORD *)(a1 + 20) = v39 + 32;
            if (v39 == -32)
              v28 = 0;
            else
              v28 = v38 << -(char)v39;
          }
          else
          {
            v28 = v25 << 8;
          }
          *(_DWORD *)(a1 + 16) = v28;
          ++*a3;
          if (v26 == 5)
          {
            v40 = 0;
            v42 = *(_DWORD *)(a1 + 16);
            v41 = *(_DWORD *)(a1 + 20);
            v43 = -1;
            while (1)
            {
              v44 = v43;
              v45 = HIBYTE(v42);
              v41 -= 8;
              *(_DWORD *)(a1 + 20) = v41;
              if (v41 < 0)
              {
                TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
                *(_QWORD *)a1 += 4;
                v46 = *(_DWORD *)(a1 + 16);
                v47 = *(_DWORD *)(a1 + 20);
                v45 |= v46 >> v47;
                v41 = v47 + 32;
                *(_DWORD *)(a1 + 20) = v47 + 32;
                v42 = v47 == -32 ? 0 : v46 << -(char)v47;
              }
              else
              {
                v42 <<= 8;
              }
              *(_DWORD *)(a1 + 16) = v42;
              if (v44 == 4)
                break;
              v48 = v45 & 0x7F | (v40 << 7);
              v43 = v44 + 1;
              v40 = v48;
              if ((v45 & 0x80) == 0)
              {
                v49 = *a3 + v44 + 2;
                *a3 = v49;
                if (v43 < 4)
                {
                  if (v49 + v48 <= v6)
                  {
                    v10 = 0;
                    *a2 = v48;
                    goto LABEL_28;
                  }
                  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    goto LABEL_27;
                  v50 = 136315394;
                  v51 = "ACMP4BitStreams.cpp";
                  v52 = 1024;
                  v53 = 3529;
                  v29 = MEMORY[0x1E0C81028];
                  v30 = "%25s:%-5d  ACMP4BitStreams::GetDecoderSpecificBitStreamFromESDS: did not get the whole cookie";
LABEL_26:
                  _os_log_impl(&dword_18EE07000, v29, OS_LOG_TYPE_ERROR, v30, (uint8_t *)&v50, 0x12u);
                  goto LABEL_27;
                }
LABEL_58:
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  goto LABEL_27;
                v50 = 136315394;
                v51 = "ACMP4BitStreams.cpp";
                v52 = 1024;
                v53 = 3526;
                v29 = MEMORY[0x1E0C81028];
                v30 = "%25s:%-5d  ACMP4BitStreams::GetDecoderSpecificBitStreamFromESDS: the ES_Descriptor tag size is incorrect";
                goto LABEL_26;
              }
            }
            --*a3;
            goto LABEL_58;
          }
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            v50 = 136315394;
            v51 = "ACMP4BitStreams.cpp";
            v52 = 1024;
            v53 = 3522;
            v29 = MEMORY[0x1E0C81028];
            v30 = "%25s:%-5d  ACMP4BitStreams:: GetDecoderSpecificBitStreamFromESDS: the DecoderSpecificInfoTag tag is incorrect";
            goto LABEL_26;
          }
LABEL_27:
          v10 = 4294967090;
          goto LABEL_28;
        }
LABEL_24:
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v50 = 136315394;
          v51 = "ACMP4BitStreams.cpp";
          v52 = 1024;
          v53 = 3511;
          v29 = MEMORY[0x1E0C81028];
          v30 = "%25s:%-5d  ACMP4BitStreams::GetDecoderSpecificBitStreamFromESDS: the ES_Descriptor tag size is incorrect";
          goto LABEL_26;
        }
        goto LABEL_27;
      }
    }
    --*a3;
    goto LABEL_24;
  }
LABEL_28:
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return v10;
}

void sub_18EF3E908(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v2 + 1504);
  std::shared_ptr<MP4OTISpecificBase>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AAAudioAnalyzer::~AAAudioAnalyzer(AAAudioAnalyzer *this)
{
  AAAudioAnalyzer::~AAAudioAnalyzer(this);
  JUMPOUT(0x193FFE460);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E2904A70;
  v2 = (_QWORD *)*((_QWORD *)this + 33);
  v3 = (_QWORD *)*((_QWORD *)this + 34);
  if (v3 != v2)
  {
    do
    {
      v5 = *--v3;
      v4 = v5;
      *v3 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    while (v3 != v2);
    v3 = (_QWORD *)*((_QWORD *)this + 33);
  }
  *((_QWORD *)this + 34) = v2;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (v2 != v3)
    {
      do
      {
        v7 = *--v2;
        v6 = v7;
        *v2 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v2 != v3);
      v2 = (_QWORD *)*((_QWORD *)this + 33);
    }
    *((_QWORD *)this + 34) = v3;
    operator delete(v2);
  }
  AAAnalyzer::~AAAnalyzer(this);
}

BOOL TOpaqueObject<AAAnalyzer,OpaqueAudioAnalyzer *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<AAAnalyzer>::sRTTI || a2 == (void *)MEMORY[0x1E0DDEC88];
}

uint64_t AAAudioAnalyzer::PushAudio(AAAudioAnalyzer *this, uint64_t a2, const AudioBufferList *a3, const AudioStreamPacketDescription *a4)
{
  AudioBufferList *v8;
  uint64_t mNumberBuffers;
  void **v10;
  void **p_mData;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  AAAudioAnalyzer *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 256))
    return 4294963436;
  CrashIfClientProvidedBogusAudioBufferList();
  if (*((_QWORD *)this + 15))
  {
    *((_DWORD *)this + 41) = a2;
    memcpy(*((void **)this + 21), a3, *((unsigned int *)this + 44));
    *((_QWORD *)this + 23) = a4;
    do
    {
      v8 = (AudioBufferList *)*((_QWORD *)this + 19);
      mNumberBuffers = v8->mNumberBuffers;
      if ((_DWORD)mNumberBuffers)
      {
        v10 = (void **)*((_QWORD *)this + 16);
        p_mData = &v8->mBuffers[0].mData;
        do
        {
          *(p_mData - 1) = (void *)0x200000000001;
          v12 = *v10++;
          *p_mData = v12;
          p_mData += 2;
          --mNumberBuffers;
        }
        while (mNumberBuffers);
      }
      *((_DWORD *)this + 40) = 2048;
      v13 = AudioConverterFillComplexBuffer(*((AudioConverterRef *)this + 15), (AudioConverterComplexInputDataProc)AAAnalyzer::ACInputProc, this, (UInt32 *)this + 40, v8, 0);
      if (*((_DWORD *)this + 40))
      {
        v14 = (_QWORD *)*((_QWORD *)this + 33);
        v15 = (_QWORD *)*((_QWORD *)this + 34);
        while (v14 != v15)
        {
          v16 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v14 + 24))(*v14, *((unsigned int *)this + 40), *((_QWORD *)this + 19));
          if ((_DWORD)v16)
          {
            v18 = v16;
            if (kAASubsystem)
            {
              v19 = *(NSObject **)kAASubsystem;
              if (!*(_QWORD *)kAASubsystem)
                return v18;
            }
            else
            {
              v19 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              v25 = 136315906;
              v26 = "AAAudioAnalyzer.cpp";
              v27 = 1024;
              v28 = 134;
              v29 = 2048;
              v30 = this;
              v31 = 1024;
              v32 = v18;
              _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d AAAudioAnalyzer::PushAudio (%p), PushAudio to analyzer failed (err = %d)", (uint8_t *)&v25, 0x22u);
            }
            return v18;
          }
          ++v14;
        }
      }
    }
    while (!(_DWORD)v13);
    if ((_DWORD)v13 != 5)
    {
      if (kAASubsystem)
      {
        v17 = *(NSObject **)kAASubsystem;
        if (!*(_QWORD *)kAASubsystem)
          return v13;
      }
      else
      {
        v17 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v25 = 136315906;
        v26 = "AAAudioAnalyzer.cpp";
        v27 = 1024;
        v28 = 142;
        v29 = 2048;
        v30 = this;
        v31 = 1024;
        v32 = v13;
        _os_log_impl(&dword_18EE07000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d AAAudioAnalyzer::PushAudio (%p), AudioConverterFillComplexBuffer failed (err = %d)", (uint8_t *)&v25, 0x22u);
      }
      return v13;
    }
    return 0;
  }
  v21 = (uint64_t *)*((_QWORD *)this + 33);
  v20 = (uint64_t *)*((_QWORD *)this + 34);
  if (v21 == v20)
    return 0;
  do
  {
    v22 = *v21++;
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, const AudioBufferList *))(*(_QWORD *)v22 + 24))(v22, a2, a3);
  }
  while (v21 != v20);
  return v23;
}

uint64_t AAAudioAnalyzer::CompleteAnalysis(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  clock_t v8;
  NSObject *v9;
  SInt64 i;
  UInt32 v11;
  OSStatus v12;
  uint64_t v13;
  int v14;
  OSStatus v15;
  clock_t v16;
  clock_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  unsigned int v21;
  unint64_t v22;
  float v24;
  NSObject *v25;
  OSStatus v26;
  NSObject *v27;
  uint64_t v28;
  unint64_t v29;
  float v30;
  unsigned int v31;
  float v32;
  OSStatus v33;
  const char *v34;
  OpaqueAudioFileID *v35;
  _QWORD v36[5];
  float v37;
  _DWORD v38[4];
  _BYTE *v39;
  UInt32 ioNumBytes;
  UInt32 ioNumPackets;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  _QWORD *v47;
  __int16 v48;
  OSStatus v49;
  _BYTE outBuffer[32768];
  uint64_t v51;

  v1 = MEMORY[0x1E0C80A78](a1);
  v51 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(v1 + 256))
    return 4294963436;
  v5 = (_QWORD *)v1;
  v6 = (*(_QWORD *)(v1 + 272) - *(_QWORD *)(v1 + 264)) >> 3;
  if (!(_DWORD)v6)
    return 0;
  *(_QWORD *)(v1 + 224) = v2;
  *(_QWORD *)(v1 + 232) = v3;
  *(_QWORD *)(v1 + 240) = v4;
  result = AAAnalyzer::CallProgressCallback((AAAnalyzer *)v1, 0.0);
  if ((_DWORD)result)
    return result;
  if (v5[11])
  {
    v8 = clock();
    v9 = dispatch_queue_create("Progress", 0);
    for (i = 0; ; i += v13)
    {
      v11 = *((_DWORD *)v5 + 24);
      ioNumBytes = 0x8000;
      ioNumPackets = v11;
      v12 = AudioFileReadPacketData((AudioFileID)v5[11], 0, &ioNumBytes, (AudioStreamPacketDescription *)v5[13], i, &ioNumPackets, outBuffer);
      if (v12)
        break;
      v13 = ioNumPackets;
      if (!ioNumPackets)
      {
        v25 = v9;
        goto LABEL_24;
      }
      v14 = *((_DWORD *)v5 + 11);
      v38[0] = 1;
      v38[2] = v14;
      v38[3] = ioNumBytes;
      v39 = outBuffer;
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, _DWORD *, _QWORD))(*v5 + 56))(v5, ioNumPackets, v38, v5[13]);
      if (v15)
      {
        v33 = v15;
        if (kAASubsystem)
        {
          v27 = *(NSObject **)kAASubsystem;
          v25 = v9;
          if (!*(_QWORD *)kAASubsystem)
            goto LABEL_40;
        }
        else
        {
          v27 = MEMORY[0x1E0C81028];
          v25 = v9;
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v43 = "AAAudioAnalyzer.cpp";
          v44 = 1024;
          v45 = 208;
          v46 = 2048;
          v47 = v5;
          v48 = 1024;
          v49 = v33;
          v34 = "%25s:%-5d AAAudioAnalyzer::CompleteAnalysis (%p), PushAudio failed (err = %d)";
          goto LABEL_39;
        }
        goto LABEL_40;
      }
      v16 = clock();
      if (v16 - v8 >= 0xF4240)
      {
        v17 = v16;
        v18 = v5[33];
        if (v5[34] == v18)
        {
          v24 = 100.0;
        }
        else
        {
          v19 = 0;
          v20 = 0.0;
          v21 = 1;
          do
          {
            v20 = v20
                + (*(float (**)(_QWORD))(**(_QWORD **)(v18 + 8 * v19) + 64))(*(_QWORD *)(v18 + 8 * v19));
            v19 = v21;
            v18 = v5[33];
            v22 = (v5[34] - v18) >> 3;
          }
          while (v22 > v21++);
          v24 = v20 / (float)v22;
        }
        v36[0] = MEMORY[0x1E0C809B0];
        v36[1] = 0x40000000;
        v36[2] = ___ZN15AAAudioAnalyzer16CompleteAnalysisEPFiP19OpaqueAudioAnalyzerfPvES2_U13block_pointerFiS1_fE_block_invoke;
        v36[3] = &__block_descriptor_tmp_2701;
        v36[4] = v5;
        v37 = v24;
        dispatch_async(v9, v36);
        v8 = v17;
      }
    }
    v26 = v12;
    if (kAASubsystem)
    {
      v27 = *(NSObject **)kAASubsystem;
      v25 = v9;
      if (!*(_QWORD *)kAASubsystem)
        goto LABEL_40;
    }
    else
    {
      v27 = MEMORY[0x1E0C81028];
      v25 = v9;
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v43 = "AAAudioAnalyzer.cpp";
      v44 = 1024;
      v45 = 192;
      v46 = 2048;
      v47 = v5;
      v48 = 1024;
      v49 = v26;
      v34 = "%25s:%-5d AAAudioAnalyzer::CompleteAnalysis (%p), AudioFileReadPacketData failed (err = %d)";
LABEL_39:
      _os_log_impl(&dword_18EE07000, v27, OS_LOG_TYPE_ERROR, v34, buf, 0x22u);
    }
LABEL_40:
    v35 = (OpaqueAudioFileID *)v5[11];
    if (v35)
    {
      AudioFileClose(v35);
      v5[11] = 0;
    }
    if (v25)
      dispatch_release(v25);
    result = 0;
    *((_BYTE *)v5 + 256) = 0;
    return result;
  }
  v25 = 0;
LABEL_24:
  v28 = v5[33];
  if (v5[34] == v28)
  {
LABEL_28:
    result = AAAnalyzer::CallProgressCallback((AAAnalyzer *)v5, 100.0);
    if ((_DWORD)result)
      return result;
    goto LABEL_40;
  }
  v29 = 0;
  v30 = 0.0;
  v31 = 1;
  v32 = 100.0 / (float)v6;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD, float, float))(**(_QWORD **)(v28 + 8 * v29) + 32))(*(_QWORD *)(v28 + 8 * v29), v30, v32);
    if ((_DWORD)result)
      return result;
    v30 = v30 + v32;
    v32 = (float)(100.0 / (float)v6) + v32;
    v29 = v31;
    v28 = v5[33];
    ++v31;
    if (v29 >= (v5[34] - v28) >> 3)
      goto LABEL_28;
  }
}

uint64_t AAAnalyzer::GetCallbackClientData(AAAnalyzer *this)
{
  return *((_QWORD *)this + 26);
}

uint64_t AAAudioAnalyzer::PrepareAnalyzers(AAAudioAnalyzer *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int64x2_t *v6;
  Float64 v7;
  UInt32 v8;
  const __CFArray *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  int v13;
  const __CFArray *v14;
  int v15;
  const __CFArray *v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  int64x2_t v33;
  uint64_t v34;
  const __CFArray *v35;
  uint64_t v36;
  const AudioChannelLayout *v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  int64x2_t v51;
  uint64_t v52;
  _QWORD *i;
  uint64_t v54;
  NSObject *v56;
  AudioStreamBasicDescription v57;
  _BYTE buf[40];
  uint64_t v59;
  CFRange v60;
  CFRange v61;
  CFRange v62;
  CFRange v63;
  CFRange v64;
  CFRange v65;
  CFRange v66;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*((_QWORD *)this + 33);
  v3 = (_QWORD *)*((_QWORD *)this + 34);
  while (v3 != v2)
  {
    v5 = *--v3;
    v4 = v5;
    *v3 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v6 = (int64x2_t *)((char *)this + 264);
  *((_QWORD *)this + 34) = v2;
  v7 = *((double *)this + 2);
  v8 = *((_DWORD *)this + 11);
  v57.mSampleRate = v7;
  *(_OWORD *)&v57.mFormatID = xmmword_18F116FC0;
  v57.mBytesPerFrame = 4;
  v57.mChannelsPerFrame = v8;
  *(_QWORD *)&v57.mBitsPerChannel = 32;
  v9 = (const __CFArray *)*((_QWORD *)this + 31);
  v60.length = CFArrayGetCount(v9);
  v60.location = 0;
  if (CFArrayContainsValue(v9, v60, CFSTR("sound check info"))
    || (v10 = (const __CFArray *)*((_QWORD *)this + 31),
        v61.length = CFArrayGetCount(v10),
        v61.location = 0,
        CFArrayContainsValue(v10, v61, CFSTR("main loudness parameters")))
    || (v11 = (const __CFArray *)*((_QWORD *)this + 31),
        v62.length = CFArrayGetCount(v11),
        v62.location = 0,
        CFArrayContainsValue(v11, v62, CFSTR("additional loudness parameters"))))
  {
    v12 = (const __CFArray *)*((_QWORD *)this + 31);
    v63.length = CFArrayGetCount(v12);
    v63.location = 0;
    v13 = CFArrayContainsValue(v12, v63, CFSTR("sound check info"));
    v14 = (const __CFArray *)*((_QWORD *)this + 31);
    v64.length = CFArrayGetCount(v14);
    v64.location = 0;
    v15 = CFArrayContainsValue(v14, v64, CFSTR("main loudness parameters"));
    v16 = (const __CFArray *)*((_QWORD *)this + 31);
    v65.length = CFArrayGetCount(v16);
    v65.location = 0;
    v17 = CFArrayContainsValue(v16, v65, CFSTR("additional loudness parameters"));
    v18 = operator new();
    AAAnalysisBase::AAAnalysisBase((AAAnalysisBase *)v18, &v57, (const AudioChannelLayout *)(*((_QWORD *)this + 7) + 16), *((_QWORD *)this + 24), this);
    v19 = v13 != 0;
    if (v15)
      v19 |= 2u;
    if (v17)
      v19 |= 4u;
    *(_QWORD *)v18 = &off_1E29087F8;
    *(_QWORD *)(v18 + 88) = 0;
    *(_QWORD *)(v18 + 96) = 0;
    *(_DWORD *)(v18 + 104) = v19;
    v21 = (uint64_t *)*((_QWORD *)this + 34);
    v20 = *((_QWORD *)this + 35);
    if ((unint64_t)v21 >= v20)
    {
      v23 = ((uint64_t)v21 - v6->i64[0]) >> 3;
      if ((unint64_t)(v23 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v24 = v20 - v6->i64[0];
      v25 = v24 >> 2;
      if (v24 >> 2 <= (unint64_t)(v23 + 1))
        v25 = v23 + 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      *(_QWORD *)&buf[32] = (char *)this + 280;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v26);
      else
        v27 = 0;
      v28 = (uint64_t *)(v26 + 8 * v23);
      v29 = v26 + 8 * v27;
      *(_QWORD *)&buf[24] = v29;
      *v28 = v18;
      v22 = v28 + 1;
      *(_QWORD *)&buf[16] = v28 + 1;
      v31 = (_QWORD *)*((_QWORD *)this + 33);
      v30 = (_QWORD *)*((_QWORD *)this + 34);
      if (v30 == v31)
      {
        v33 = vdupq_n_s64((unint64_t)v30);
      }
      else
      {
        do
        {
          v32 = *--v30;
          *v30 = 0;
          *--v28 = v32;
        }
        while (v30 != v31);
        v33 = *v6;
        v22 = *(_QWORD **)&buf[16];
        v29 = *(_QWORD *)&buf[24];
      }
      *((_QWORD *)this + 33) = v28;
      *((_QWORD *)this + 34) = v22;
      *(int64x2_t *)&buf[8] = v33;
      v34 = *((_QWORD *)this + 35);
      *((_QWORD *)this + 35) = v29;
      *(_QWORD *)&buf[24] = v34;
      *(_QWORD *)buf = v33.i64[0];
      std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v21 = v18;
      v22 = v21 + 1;
    }
    *((_QWORD *)this + 34) = v22;
  }
  v35 = (const __CFArray *)*((_QWORD *)this + 31);
  v66.length = CFArrayGetCount(v35);
  v66.location = 0;
  if (CFArrayContainsValue(v35, v66, CFSTR("dialogue anchor parameters")))
  {
    v36 = operator new();
    v37 = (const AudioChannelLayout *)(*((_QWORD *)this + 7) + 16);
    AAAnalysisBase::AAAnalysisBase((AAAnalysisBase *)v36, &v57, v37, *((_QWORD *)this + 24), this);
    *(_QWORD *)v36 = &off_1E2909E18;
    *(_OWORD *)(v36 + 88) = 0u;
    *(_OWORD *)(v36 + 104) = 0u;
    *(_OWORD *)(v36 + 120) = 0u;
    *(_OWORD *)(v36 + 136) = 0u;
    *(_OWORD *)(v36 + 152) = 0u;
    *(_OWORD *)(v36 + 168) = 0u;
    *(_OWORD *)(v36 + 184) = 0u;
    *(_OWORD *)(v36 + 200) = 0u;
    *(_DWORD *)(v36 + 216) = 0;
    *(_QWORD *)(v36 + 232) = 0;
    *(_QWORD *)(v36 + 240) = 0;
    *(_QWORD *)(v36 + 224) = 0;
    *(_DWORD *)(v36 + 248) = 0;
    *(_DWORD *)(v36 + 252) = v8;
    *(Float64 *)(v36 + 256) = v7;
    *(_DWORD *)(v36 + 264) = v37->mChannelLayoutTag;
    *(_OWORD *)(v36 + 409) = 0u;
    *(_OWORD *)(v36 + 384) = 0u;
    *(_OWORD *)(v36 + 400) = 0u;
    *(_OWORD *)(v36 + 352) = 0u;
    *(_OWORD *)(v36 + 368) = 0u;
    *(_OWORD *)(v36 + 320) = 0u;
    *(_OWORD *)(v36 + 336) = 0u;
    *(_OWORD *)(v36 + 288) = 0u;
    *(_OWORD *)(v36 + 304) = 0u;
    *(_OWORD *)(v36 + 272) = 0u;
    *(_QWORD *)(v36 + 432) = 0;
    *(_QWORD *)(v36 + 440) = 0;
    v39 = (uint64_t *)*((_QWORD *)this + 34);
    v38 = *((_QWORD *)this + 35);
    if ((unint64_t)v39 >= v38)
    {
      v41 = ((uint64_t)v39 - v6->i64[0]) >> 3;
      if ((unint64_t)(v41 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v42 = v38 - v6->i64[0];
      v43 = v42 >> 2;
      if (v42 >> 2 <= (unint64_t)(v41 + 1))
        v43 = v41 + 1;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v44 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v44 = v43;
      *(_QWORD *)&buf[32] = (char *)this + 280;
      if (v44)
        v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v44);
      else
        v45 = 0;
      v46 = (uint64_t *)(v44 + 8 * v41);
      v47 = v44 + 8 * v45;
      *(_QWORD *)&buf[24] = v47;
      *v46 = v36;
      v40 = v46 + 1;
      *(_QWORD *)&buf[16] = v46 + 1;
      v49 = (_QWORD *)*((_QWORD *)this + 33);
      v48 = (_QWORD *)*((_QWORD *)this + 34);
      if (v48 == v49)
      {
        v51 = vdupq_n_s64((unint64_t)v48);
      }
      else
      {
        do
        {
          v50 = *--v48;
          *v48 = 0;
          *--v46 = v50;
        }
        while (v48 != v49);
        v51 = *v6;
        v40 = *(_QWORD **)&buf[16];
        v47 = *(_QWORD *)&buf[24];
      }
      *((_QWORD *)this + 33) = v46;
      *((_QWORD *)this + 34) = v40;
      *(int64x2_t *)&buf[8] = v51;
      v52 = *((_QWORD *)this + 35);
      *((_QWORD *)this + 35) = v47;
      *(_QWORD *)&buf[24] = v52;
      *(_QWORD *)buf = v51.i64[0];
      std::__split_buffer<std::unique_ptr<acv2::AudioConverterBase>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v39 = v36;
      v40 = v39 + 1;
    }
    *((_QWORD *)this + 34) = v40;
  }
  else
  {
    v40 = (_QWORD *)*((_QWORD *)this + 34);
  }
  for (i = (_QWORD *)v6->i64[0]; ; ++i)
  {
    if (i == v40)
      return 0;
    v54 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*i + 16))(*i);
    if ((_DWORD)v54)
      break;
  }
  if (kAASubsystem)
  {
    v56 = *(NSObject **)kAASubsystem;
    if (!*(_QWORD *)kAASubsystem)
      return v54;
  }
  else
  {
    v56 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AAAudioAnalyzer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 77;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = this;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v54;
    _os_log_impl(&dword_18EE07000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d AAAudioAnalyzer::PrepareAnalyzers (%p), Prepare analyzer failed (err = %d)", buf, 0x22u);
  }
  return v54;
}

void sub_18EF3F5C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *AAAudioAnalyzer::Cleanup(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = this;
  v2 = (_QWORD *)this[33];
  v3 = (_QWORD *)this[34];
  while (v3 != v2)
  {
    v4 = (_QWORD *)*--v3;
    this = v4;
    *v3 = 0;
    if (v4)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  v1[34] = v2;
  v1[29] = 0;
  v1[30] = 0;
  v1[28] = 0;
  return this;
}

uint64_t ___ZN15AAAudioAnalyzer16CompleteAnalysisEPFiP19OpaqueAudioAnalyzerfPvES2_U13block_pointerFiS1_fE_block_invoke(uint64_t a1)
{
  return AAAnalyzer::CallProgressCallback(*(AAAnalyzer **)(a1 + 32), *(float *)(a1 + 40));
}

uint64_t AAAudioAnalyzer::AAAudioAnalyzer(uint64_t a1, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  void *v12;

  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)a1);
  *(_QWORD *)v10 = &off_1E2900E00;
  *(_BYTE *)(v10 + 12) = 0;
  CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)(v10 + 56));
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a3;
  *(_QWORD *)(a1 + 208) = a4;
  *(_QWORD *)(a1 + 216) = a5;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  if (AAAnalyzer::AAAnalyzer(__CFArray const*,void (*)(OpaqueAudioAnalyzer *,__CFString const*,AudioAnalysisFrameList const*,void *,AudioAnalyzerResultsFlags *),void *,void({block_pointer})(OpaqueAudioAnalyzer *,__CFString const*,AudioAnalysisFrameList const*,AudioAnalyzerResultsFlags *))::once != -1)
    dispatch_once(&AAAnalyzer::AAAnalyzer(__CFArray const*,void (*)(OpaqueAudioAnalyzer *,__CFString const*,AudioAnalysisFrameList const*,void *,AudioAnalyzerResultsFlags *),void *,void({block_pointer})(OpaqueAudioAnalyzer *,__CFString const*,AudioAnalysisFrameList const*,AudioAnalyzerResultsFlags *))::once, &__block_literal_global_8404);
  *(_QWORD *)(a1 + 248) = CFArrayCreateMutableCopy(0, 0, a2);
  v11 = *(void **)(a1 + 168);
  if (v11)
  {
    free(v11);
    *(_QWORD *)(a1 + 168) = 0;
  }
  v12 = *(void **)(a1 + 152);
  if (v12)
  {
    free(v12);
    *(_QWORD *)(a1 + 152) = 0;
  }
  *(_BYTE *)(a1 + 256) = 0;
  *(_QWORD *)a1 = &off_1E2904A70;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  return a1;
}

void sub_18EF3F848(_Unwind_Exception *a1)
{
  BaseOpaqueObject *v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = (void *)*((_QWORD *)v1 + 21);
  if (v5)
  {
    free(v5);
    *((_QWORD *)v1 + 21) = 0;
  }
  v6 = (void *)*((_QWORD *)v1 + 19);
  if (v6)
  {
    free(v6);
    *((_QWORD *)v1 + 19) = 0;
  }
  v7 = (void *)*((_QWORD *)v1 + 16);
  if (v7)
  {
    *((_QWORD *)v1 + 17) = v7;
    operator delete(v7);
  }
  v8 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 9) = v8;
    operator delete(v8);
  }
  MEMORY[0x193FFDAD0](v2);
  BaseOpaqueObject::~BaseOpaqueObject(v1);
  _Unwind_Resume(a1);
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 2;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 2;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_DWORD *)v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      v17 = &v13[4 * (a2 - v14)];
      v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    v8 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<float>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[4 * a2];
    v12 = 4 * a2;
    do
    {
      *(_DWORD *)v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

uint64_t HOA::orderFromNumChannels(HOA *this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  BOOL v6;

  v1 = 0x40000000;
  do
  {
    v2 = v1;
    v1 >>= 2;
  }
  while (v2 > this);
  if (!v2)
    return 0xFFFFFFFFLL;
  v3 = 0;
  do
  {
    v4 = v3 + v2;
    v5 = 2 * v2;
    if (this < v3 + v2)
    {
      v4 = 0;
      v5 = 0;
    }
    LODWORD(this) = (_DWORD)this - v4;
    v3 = (v5 + v3) >> 1;
    v6 = v2 > 3;
    v2 >>= 2;
  }
  while (v6);
  return v3 - 1;
}

uint64_t HOA::normalizationFromTag(HOA *this)
{
  unsigned int v1;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = this & 0xFFFF0000;
  if ((this & 0xFFFF0000) == 0x6B0000)
    return 2;
  if (v1 == 12517376)
    return 0;
  if (v1 == 12451840)
    return 1;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v3 = 136315906;
    v4 = "HOA.cpp";
    v5 = 1024;
    v6 = 632;
    v7 = 2080;
    v8 = "normalizationFromTag";
    v9 = 1024;
    v10 = 632;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; This is not SN3D/N3D/FuMa: unsupported",
      (uint8_t *)&v3,
      0x22u);
  }
  return 0xFFFFFFFFLL;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_18EF3FB68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[4 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    v19 = &v4[4 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 1;
  if (v8 >> 1 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[4 * v5];
  v16 = &v11[4 * v15];
  bzero(v14, 4 * v6);
  v17 = &v14[4 * v6];
  while (v13 != v12)
  {
    v18 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

uint64_t HOA::getSphericalGrid(uint64_t result, HOA *this, _DWORD *__dst, float *a4, float *__C)
{
  const void *v7;
  __int128 *v8;
  int v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  const void *v14;
  const void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  switch((_DWORD)result)
  {
    case 0:
      return HOA::getTDesign(this, __dst, a4, __C, __C);
    case 2:
      switch((int)this)
      {
        case 0:
          result = 1;
          if (__dst && a4 && __C)
          {
LABEL_13:
            *__dst = 0;
            *a4 = 0.0;
            *__C = 1.0;
          }
          break;
        case 1:
          result = 4;
          if (__dst && a4 && __C)
          {
            *(_OWORD *)__dst = xmmword_18F117650;
            *(_OWORD *)a4 = xmmword_18F117660;
            v8 = &xmmword_18F117670;
LABEL_63:
            *(_OWORD *)__C = *v8;
          }
          break;
        case 2:
          result = 9;
          if (__dst && a4 && __C)
          {
            __dst[8] = 1116271638;
            *(_OWORD *)__dst = xmmword_18F10A81C;
            *((_OWORD *)__dst + 1) = unk_18F10A82C;
            a4[8] = -48.587;
            *(_OWORD *)a4 = xmmword_18F10A840;
            *((_OWORD *)a4 + 1) = unk_18F10A850;
            v9 = 1068792731;
            v10 = &xmmword_18F10A864;
LABEL_68:
            *((_DWORD *)__C + 8) = v9;
            v16 = *v10;
            v17 = v10[1];
            goto LABEL_78;
          }
          break;
        case 3:
          result = 16;
          if (__dst && a4 && __C)
          {
            *(_OWORD *)__dst = xmmword_18F10A888;
            *((_OWORD *)__dst + 1) = unk_18F10A898;
            *((_OWORD *)__dst + 2) = xmmword_18F10A8A8;
            *((_OWORD *)__dst + 3) = unk_18F10A8B8;
            *(_OWORD *)a4 = xmmword_18F10A8C8;
            *((_OWORD *)a4 + 1) = unk_18F10A8D8;
            *((_OWORD *)a4 + 2) = xmmword_18F10A8E8;
            *((_OWORD *)a4 + 3) = unk_18F10A8F8;
            v11 = &xmmword_18F10A908;
            goto LABEL_94;
          }
          break;
        case 4:
          result = 25;
          if (__dst && a4 && __C)
          {
            __dst[24] = 1058111518;
            *(_OWORD *)__dst = xmmword_18F10A948;
            *((_OWORD *)__dst + 1) = unk_18F10A958;
            *((_OWORD *)__dst + 4) = xmmword_18F10A988;
            *((_OWORD *)__dst + 5) = unk_18F10A998;
            *((_OWORD *)__dst + 2) = xmmword_18F10A968;
            *((_OWORD *)__dst + 3) = unk_18F10A978;
            *(_OWORD *)a4 = xmmword_18F10A9AC;
            *((_OWORD *)a4 + 1) = unk_18F10A9BC;
            *((_OWORD *)a4 + 4) = xmmword_18F10A9EC;
            *((_OWORD *)a4 + 5) = unk_18F10A9FC;
            *((_OWORD *)a4 + 2) = xmmword_18F10A9CC;
            *((_OWORD *)a4 + 3) = unk_18F10A9DC;
            a4[24] = 43.688;
            __C[24] = 0.50824;
            v12 = &xmmword_18F10AA10;
LABEL_77:
            v18 = v12[5];
            *((_OWORD *)__C + 4) = v12[4];
            *((_OWORD *)__C + 5) = v18;
            v19 = v12[3];
            *((_OWORD *)__C + 2) = v12[2];
            *((_OWORD *)__C + 3) = v19;
            v16 = *v12;
            v17 = v12[1];
LABEL_78:
            *(_OWORD *)__C = v16;
            *((_OWORD *)__C + 1) = v17;
          }
          break;
        case 5:
          result = 36;
          if (__dst && a4 && __C)
          {
            *((_OWORD *)__dst + 2) = xmmword_18F10AA94;
            *((_OWORD *)__dst + 3) = unk_18F10AAA4;
            *((_OWORD *)__dst + 8) = xmmword_18F10AAF4;
            *((_OWORD *)__dst + 6) = xmmword_18F10AAD4;
            *((_OWORD *)__dst + 7) = unk_18F10AAE4;
            *((_OWORD *)__dst + 4) = xmmword_18F10AAB4;
            *((_OWORD *)__dst + 5) = unk_18F10AAC4;
            *(_OWORD *)__dst = xmmword_18F10AA74;
            *((_OWORD *)__dst + 1) = unk_18F10AA84;
            *((_OWORD *)a4 + 2) = xmmword_18F10AB24;
            *((_OWORD *)a4 + 3) = unk_18F10AB34;
            *(_OWORD *)a4 = xmmword_18F10AB04;
            *((_OWORD *)a4 + 1) = unk_18F10AB14;
            *((_OWORD *)a4 + 8) = xmmword_18F10AB84;
            *((_OWORD *)a4 + 6) = xmmword_18F10AB64;
            *((_OWORD *)a4 + 7) = unk_18F10AB74;
            *((_OWORD *)a4 + 4) = xmmword_18F10AB44;
            *((_OWORD *)a4 + 5) = unk_18F10AB54;
            v13 = &xmmword_18F10AB94;
LABEL_83:
            v20 = v13[7];
            *((_OWORD *)__C + 6) = v13[6];
            *((_OWORD *)__C + 7) = v20;
            *((_OWORD *)__C + 8) = v13[8];
            v21 = v13[3];
            *((_OWORD *)__C + 2) = v13[2];
            *((_OWORD *)__C + 3) = v21;
            v22 = v13[5];
            *((_OWORD *)__C + 4) = v13[4];
            *((_OWORD *)__C + 5) = v22;
            v23 = v13[1];
            *(_OWORD *)__C = *v13;
            *((_OWORD *)__C + 1) = v23;
          }
          break;
        case 6:
          result = 49;
          if (__dst && a4 && __C)
          {
            __dst[48] = 1127431944;
            *((_OWORD *)__dst + 8) = xmmword_18F10ACA4;
            *((_OWORD *)__dst + 9) = unk_18F10ACB4;
            *((_OWORD *)__dst + 10) = xmmword_18F10ACC4;
            *((_OWORD *)__dst + 11) = unk_18F10ACD4;
            *((_OWORD *)__dst + 4) = xmmword_18F10AC64;
            *((_OWORD *)__dst + 5) = unk_18F10AC74;
            *((_OWORD *)__dst + 6) = xmmword_18F10AC84;
            *((_OWORD *)__dst + 7) = unk_18F10AC94;
            *(_OWORD *)__dst = xmmword_18F10AC24;
            *((_OWORD *)__dst + 1) = unk_18F10AC34;
            *((_OWORD *)__dst + 2) = xmmword_18F10AC44;
            *((_OWORD *)__dst + 3) = unk_18F10AC54;
            a4[48] = -71.28;
            *((_OWORD *)a4 + 8) = xmmword_18F10AD68;
            *((_OWORD *)a4 + 9) = unk_18F10AD78;
            *((_OWORD *)a4 + 10) = xmmword_18F10AD88;
            *((_OWORD *)a4 + 11) = unk_18F10AD98;
            *((_OWORD *)a4 + 4) = xmmword_18F10AD28;
            *((_OWORD *)a4 + 5) = unk_18F10AD38;
            *((_OWORD *)a4 + 6) = xmmword_18F10AD48;
            *((_OWORD *)a4 + 7) = unk_18F10AD58;
            *(_OWORD *)a4 = xmmword_18F10ACE8;
            *((_OWORD *)a4 + 1) = unk_18F10ACF8;
            *((_OWORD *)a4 + 2) = xmmword_18F10AD08;
            *((_OWORD *)a4 + 3) = unk_18F10AD18;
            __C[48] = 0.25534;
            v11 = &xmmword_18F10ADAC;
            goto LABEL_93;
          }
          break;
        case 7:
          result = 64;
          if (__dst && a4 && __C)
          {
            *((_OWORD *)__dst + 12) = xmmword_18F10AF30;
            *((_OWORD *)__dst + 13) = unk_18F10AF40;
            *((_OWORD *)__dst + 14) = xmmword_18F10AF50;
            *((_OWORD *)__dst + 15) = unk_18F10AF60;
            *((_OWORD *)__dst + 8) = xmmword_18F10AEF0;
            *((_OWORD *)__dst + 9) = unk_18F10AF00;
            *((_OWORD *)__dst + 10) = xmmword_18F10AF10;
            *((_OWORD *)__dst + 11) = unk_18F10AF20;
            *((_OWORD *)__dst + 4) = xmmword_18F10AEB0;
            *((_OWORD *)__dst + 5) = unk_18F10AEC0;
            *((_OWORD *)__dst + 6) = xmmword_18F10AED0;
            *((_OWORD *)__dst + 7) = unk_18F10AEE0;
            *(_OWORD *)__dst = xmmword_18F10AE70;
            *((_OWORD *)__dst + 1) = unk_18F10AE80;
            *((_OWORD *)__dst + 2) = xmmword_18F10AE90;
            *((_OWORD *)__dst + 3) = unk_18F10AEA0;
            *((_OWORD *)a4 + 12) = xmmword_18F10B030;
            *((_OWORD *)a4 + 13) = unk_18F10B040;
            *((_OWORD *)a4 + 14) = xmmword_18F10B050;
            *((_OWORD *)a4 + 15) = unk_18F10B060;
            *((_OWORD *)a4 + 8) = xmmword_18F10AFF0;
            *((_OWORD *)a4 + 9) = unk_18F10B000;
            *((_OWORD *)a4 + 10) = xmmword_18F10B010;
            *((_OWORD *)a4 + 11) = unk_18F10B020;
            *((_OWORD *)a4 + 4) = xmmword_18F10AFB0;
            *((_OWORD *)a4 + 5) = unk_18F10AFC0;
            *((_OWORD *)a4 + 6) = xmmword_18F10AFD0;
            *((_OWORD *)a4 + 7) = unk_18F10AFE0;
            *(_OWORD *)a4 = xmmword_18F10AF70;
            *((_OWORD *)a4 + 1) = unk_18F10AF80;
            *((_OWORD *)a4 + 2) = xmmword_18F10AF90;
            *((_OWORD *)a4 + 3) = unk_18F10AFA0;
            v11 = &xmmword_18F10B070;
LABEL_92:
            v24 = v11[13];
            *((_OWORD *)__C + 12) = v11[12];
            *((_OWORD *)__C + 13) = v24;
            v25 = v11[15];
            *((_OWORD *)__C + 14) = v11[14];
            *((_OWORD *)__C + 15) = v25;
LABEL_93:
            v26 = v11[9];
            *((_OWORD *)__C + 8) = v11[8];
            *((_OWORD *)__C + 9) = v26;
            v27 = v11[11];
            *((_OWORD *)__C + 10) = v11[10];
            *((_OWORD *)__C + 11) = v27;
            v28 = v11[5];
            *((_OWORD *)__C + 4) = v11[4];
            *((_OWORD *)__C + 5) = v28;
            v29 = v11[7];
            *((_OWORD *)__C + 6) = v11[6];
            *((_OWORD *)__C + 7) = v29;
LABEL_94:
            v30 = v11[1];
            *(_OWORD *)__C = *v11;
            *((_OWORD *)__C + 1) = v30;
            v31 = v11[3];
            *((_OWORD *)__C + 2) = v11[2];
            *((_OWORD *)__C + 3) = v31;
          }
          break;
        case 8:
          result = 81;
          if (__dst && a4 && __C)
          {
            memcpy(__dst, &unk_18F10B170, 0x144uLL);
            memcpy(a4, &unk_18F10B2B4, 0x144uLL);
            v14 = &unk_18F10B3F8;
LABEL_99:
            memcpy(__C, v14, 0x144uLL);
            result = 81;
          }
          break;
        case 9:
          result = 100;
          if (__dst && a4 && __C)
          {
            memcpy(__dst, &unk_18F10B53C, 0x190uLL);
            memcpy(a4, &unk_18F10B6CC, 0x190uLL);
            v15 = &unk_18F10B85C;
LABEL_104:
            memcpy(__C, v15, 0x190uLL);
            result = 100;
          }
          break;
        default:
          result = 121;
          if (__dst && a4 && __C)
          {
            memcpy(__dst, &unk_18F10B9EC, 0x1E4uLL);
            memcpy(a4, &unk_18F10BBD0, 0x1E4uLL);
            v7 = &unk_18F10BDB4;
LABEL_58:
            memcpy(__C, v7, 0x1E4uLL);
            result = 121;
          }
          break;
      }
      break;
    case 1:
      switch((int)this)
      {
        case 0:
          result = 1;
          if (__dst && a4)
            goto LABEL_13;
          break;
        case 1:
          result = 4;
          if (__dst && a4 && __C)
          {
            *(_OWORD *)__dst = xmmword_18F117650;
            *(_OWORD *)a4 = xmmword_18F117630;
            v8 = &xmmword_18F117640;
            goto LABEL_63;
          }
          break;
        case 2:
          result = 9;
          if (__dst && a4 && __C)
          {
            __dst[8] = 1123963561;
            *(_OWORD *)__dst = xmmword_18F1090A0;
            *((_OWORD *)__dst + 1) = unk_18F1090B0;
            a4[8] = -34.134;
            *(_OWORD *)a4 = xmmword_18F1090C4;
            *((_OWORD *)a4 + 1) = unk_18F1090D4;
            v9 = 1069089495;
            v10 = &xmmword_18F1090E8;
            goto LABEL_68;
          }
          break;
        case 3:
          result = 16;
          if (__dst && a4 && __C)
          {
            *(_OWORD *)__dst = xmmword_18F10910C;
            *((_OWORD *)__dst + 1) = unk_18F10911C;
            *((_OWORD *)__dst + 2) = xmmword_18F10912C;
            *((_OWORD *)__dst + 3) = unk_18F10913C;
            *(_OWORD *)a4 = xmmword_18F10914C;
            *((_OWORD *)a4 + 1) = unk_18F10915C;
            *((_OWORD *)a4 + 2) = xmmword_18F10916C;
            *((_OWORD *)a4 + 3) = unk_18F10917C;
            v11 = &xmmword_18F10918C;
            goto LABEL_94;
          }
          break;
        case 4:
          result = 25;
          if (__dst && a4 && __C)
          {
            __dst[24] = -1038292098;
            *(_OWORD *)__dst = xmmword_18F1091CC;
            *((_OWORD *)__dst + 1) = unk_18F1091DC;
            *((_OWORD *)__dst + 4) = xmmword_18F10920C;
            *((_OWORD *)__dst + 5) = unk_18F10921C;
            *((_OWORD *)__dst + 2) = xmmword_18F1091EC;
            *((_OWORD *)__dst + 3) = unk_18F1091FC;
            *(_OWORD *)a4 = xmmword_18F109230;
            *((_OWORD *)a4 + 1) = unk_18F109240;
            *((_OWORD *)a4 + 4) = xmmword_18F109270;
            *((_OWORD *)a4 + 5) = unk_18F109280;
            *((_OWORD *)a4 + 2) = xmmword_18F109250;
            *((_OWORD *)a4 + 3) = unk_18F109260;
            a4[24] = -31.512;
            __C[24] = 0.52404;
            v12 = &xmmword_18F109294;
            goto LABEL_77;
          }
          break;
        case 5:
          result = 36;
          if (__dst && a4 && __C)
          {
            *((_OWORD *)__dst + 2) = xmmword_18F109318;
            *((_OWORD *)__dst + 3) = unk_18F109328;
            *((_OWORD *)__dst + 8) = xmmword_18F109378;
            *((_OWORD *)__dst + 6) = xmmword_18F109358;
            *((_OWORD *)__dst + 7) = unk_18F109368;
            *((_OWORD *)__dst + 4) = xmmword_18F109338;
            *((_OWORD *)__dst + 5) = unk_18F109348;
            *(_OWORD *)__dst = xmmword_18F1092F8;
            *((_OWORD *)__dst + 1) = unk_18F109308;
            *((_OWORD *)a4 + 2) = xmmword_18F1093A8;
            *((_OWORD *)a4 + 3) = unk_18F1093B8;
            *(_OWORD *)a4 = xmmword_18F109388;
            *((_OWORD *)a4 + 1) = unk_18F109398;
            *((_OWORD *)a4 + 8) = xmmword_18F109408;
            *((_OWORD *)a4 + 6) = xmmword_18F1093E8;
            *((_OWORD *)a4 + 7) = unk_18F1093F8;
            *((_OWORD *)a4 + 4) = xmmword_18F1093C8;
            *((_OWORD *)a4 + 5) = unk_18F1093D8;
            v13 = &xmmword_18F109418;
            goto LABEL_83;
          }
          break;
        case 6:
          result = 49;
          if (__dst && a4 && __C)
          {
            __dst[48] = -1022566698;
            *((_OWORD *)__dst + 8) = xmmword_18F109528;
            *((_OWORD *)__dst + 9) = unk_18F109538;
            *((_OWORD *)__dst + 10) = xmmword_18F109548;
            *((_OWORD *)__dst + 11) = unk_18F109558;
            *((_OWORD *)__dst + 4) = xmmword_18F1094E8;
            *((_OWORD *)__dst + 5) = unk_18F1094F8;
            *((_OWORD *)__dst + 6) = xmmword_18F109508;
            *((_OWORD *)__dst + 7) = unk_18F109518;
            *(_OWORD *)__dst = xmmword_18F1094A8;
            *((_OWORD *)__dst + 1) = unk_18F1094B8;
            *((_OWORD *)__dst + 2) = xmmword_18F1094C8;
            *((_OWORD *)__dst + 3) = unk_18F1094D8;
            a4[48] = 22.162;
            *((_OWORD *)a4 + 8) = xmmword_18F1095EC;
            *((_OWORD *)a4 + 9) = unk_18F1095FC;
            *((_OWORD *)a4 + 10) = xmmword_18F10960C;
            *((_OWORD *)a4 + 11) = unk_18F10961C;
            *((_OWORD *)a4 + 4) = xmmword_18F1095AC;
            *((_OWORD *)a4 + 5) = unk_18F1095BC;
            *((_OWORD *)a4 + 6) = xmmword_18F1095CC;
            *((_OWORD *)a4 + 7) = unk_18F1095DC;
            *(_OWORD *)a4 = xmmword_18F10956C;
            *((_OWORD *)a4 + 1) = unk_18F10957C;
            *((_OWORD *)a4 + 2) = xmmword_18F10958C;
            *((_OWORD *)a4 + 3) = unk_18F10959C;
            __C[48] = 0.25211;
            v11 = &xmmword_18F109630;
            goto LABEL_93;
          }
          break;
        case 7:
          result = 64;
          if (__dst && a4 && __C)
          {
            *((_OWORD *)__dst + 12) = xmmword_18F1097B4;
            *((_OWORD *)__dst + 13) = unk_18F1097C4;
            *((_OWORD *)__dst + 14) = xmmword_18F1097D4;
            *((_OWORD *)__dst + 15) = unk_18F1097E4;
            *((_OWORD *)__dst + 8) = xmmword_18F109774;
            *((_OWORD *)__dst + 9) = unk_18F109784;
            *((_OWORD *)__dst + 10) = xmmword_18F109794;
            *((_OWORD *)__dst + 11) = unk_18F1097A4;
            *((_OWORD *)__dst + 4) = xmmword_18F109734;
            *((_OWORD *)__dst + 5) = unk_18F109744;
            *((_OWORD *)__dst + 6) = xmmword_18F109754;
            *((_OWORD *)__dst + 7) = unk_18F109764;
            *(_OWORD *)__dst = xmmword_18F1096F4;
            *((_OWORD *)__dst + 1) = unk_18F109704;
            *((_OWORD *)__dst + 2) = xmmword_18F109714;
            *((_OWORD *)__dst + 3) = unk_18F109724;
            *((_OWORD *)a4 + 12) = xmmword_18F1098B4;
            *((_OWORD *)a4 + 13) = unk_18F1098C4;
            *((_OWORD *)a4 + 14) = xmmword_18F1098D4;
            *((_OWORD *)a4 + 15) = unk_18F1098E4;
            *((_OWORD *)a4 + 8) = xmmword_18F109874;
            *((_OWORD *)a4 + 9) = unk_18F109884;
            *((_OWORD *)a4 + 10) = xmmword_18F109894;
            *((_OWORD *)a4 + 11) = unk_18F1098A4;
            *((_OWORD *)a4 + 4) = xmmword_18F109834;
            *((_OWORD *)a4 + 5) = unk_18F109844;
            *((_OWORD *)a4 + 6) = xmmword_18F109854;
            *((_OWORD *)a4 + 7) = unk_18F109864;
            *(_OWORD *)a4 = xmmword_18F1097F4;
            *((_OWORD *)a4 + 1) = unk_18F109804;
            *((_OWORD *)a4 + 2) = xmmword_18F109814;
            *((_OWORD *)a4 + 3) = unk_18F109824;
            v11 = &xmmword_18F1098F4;
            goto LABEL_92;
          }
          break;
        case 8:
          result = 81;
          if (__dst && a4 && __C)
          {
            memcpy(__dst, &unk_18F1099F4, 0x144uLL);
            memcpy(a4, &unk_18F109B38, 0x144uLL);
            v14 = &unk_18F109C7C;
            goto LABEL_99;
          }
          break;
        case 9:
          result = 100;
          if (__dst && a4 && __C)
          {
            memcpy(__dst, &unk_18F109DC0, 0x190uLL);
            memcpy(a4, &unk_18F109F50, 0x190uLL);
            v15 = &unk_18F10A0E0;
            goto LABEL_104;
          }
          break;
        default:
          result = 121;
          if (__dst && a4 && __C)
          {
            memcpy(__dst, &unk_18F10A270, 0x1E4uLL);
            memcpy(a4, &unk_18F10A454, 0x1E4uLL);
            v7 = &unk_18F10A638;
            goto LABEL_58;
          }
          break;
      }
      break;
  }
  return result;
}

unsigned int *HOA::HOA(unsigned int *a1, HOA *a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  char *v31;
  char *v32;
  unint64_t *v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  float v45;
  int v46;
  float v47;
  unsigned int SphericalGrid;
  uint64_t v50;
  char *v51;
  char *v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  __float2 v57;
  __float2 v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  int *v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  int v69;
  int v70;
  char **v71;
  char **v72;
  char **v73;
  uint8_t buf[4];
  const char *v75;
  __int16 v76;
  int v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  int v81;
  __int16 v82;
  unsigned int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)a1 + 28) = 0;
  *(_OWORD *)(a1 + 50) = 0u;
  *(_OWORD *)(a1 + 54) = 0u;
  *(_OWORD *)(a1 + 62) = 0u;
  *((_QWORD *)a1 + 37) = 0;
  *(_OWORD *)(a1 + 46) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  *(_OWORD *)(a1 + 70) = 0u;
  *(_OWORD *)(a1 + 58) = 0u;
  v71 = (char **)(a1 + 58);
  v4 = (unsigned __int16)a2;
  v5 = HOA::orderFromNumChannels((HOA *)(unsigned __int16)a2);
  v6 = v5;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  if (v5 == -1)
    v7 = 0;
  else
    v7 = v5;
  *((_OWORD *)a1 + 6) = 0uLL;
  *((_OWORD *)a1 + 7) = 0uLL;
  *((_OWORD *)a1 + 8) = 0uLL;
  *((_OWORD *)a1 + 9) = 0uLL;
  *((_OWORD *)a1 + 10) = 0uLL;
  a1[44] = 0;
  v8 = HOA::normalizationFromTag(a2);
  *(_OWORD *)(a1 + 78) = 0u;
  *(_OWORD *)(a1 + 82) = 0u;
  *(_OWORD *)(a1 + 86) = 0u;
  a1[90] = v8;
  *((_BYTE *)a1 + 364) = 1;
  if (v7 >= 4 && v8 == 2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      v75 = "HOA.cpp";
      v76 = 1024;
      v78 = 2080;
      v77 = 29;
      v79 = "RotationMatrix";
      v80 = 1024;
      v81 = 29;
      v82 = 1024;
      v83 = v7;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Trying to create a HOA rotation matrix of order = %d > 3 with FuMa norm"
        "alization, capping to order 3",
        buf,
        0x28u);
    }
    v7 = 3;
  }
  v72 = (char **)(a1 + 70);
  v73 = (char **)(a1 + 52);
  v9 = v7 + 1;
  *(_DWORD *)buf = 0;
  std::vector<float>::assign((char **)a1 + 39, (8 * v9 * (unint64_t)v9 - 2) * v9 / 6, buf);
  v70 = v6;
  v10 = *((_QWORD *)a1 + 42);
  if (v9 > (*((_QWORD *)a1 + 44) - v10) >> 4)
  {
    v11 = *((_QWORD *)a1 + 43);
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v7 + 1);
    v13 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF0];
    v15 = &v12[16 * v14];
    v17 = (char *)*((_QWORD *)a1 + 42);
    v16 = (char *)*((_QWORD *)a1 + 43);
    v18 = v13;
    if (v16 != v17)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v16 - 1);
        v18 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*((_QWORD *)a1 + 42);
    }
    *((_QWORD *)a1 + 42) = v18;
    *((_QWORD *)a1 + 43) = v13;
    *((_QWORD *)a1 + 44) = v15;
    if (v16)
      operator delete(v16);
  }
  v69 = v4;
  v19 = 0;
  v20 = (unint64_t *)*((_QWORD *)a1 + 43);
  do
  {
    v21 = ((2 * v19) | 1) * ((2 * v19) | 1);
    v22 = *((_QWORD *)a1 + 39) + 4 * ((8 * v19 * v19 - 2) * v19 / 6uLL);
    v23 = *((_QWORD *)a1 + 44);
    if ((unint64_t)v20 >= v23)
    {
      v24 = *((_QWORD *)a1 + 42);
      v25 = ((uint64_t)v20 - v24) >> 4;
      if ((unint64_t)(v25 + 1) >> 60)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v26 = v23 - v24;
      v27 = v26 >> 3;
      if (v26 >> 3 <= (unint64_t)(v25 + 1))
        v27 = v25 + 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
        v28 = 0xFFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v28);
      else
        v29 = 0;
      v30 = (unint64_t *)(v28 + 16 * v25);
      *v30 = v22;
      v30[1] = v21;
      v32 = (char *)*((_QWORD *)a1 + 42);
      v31 = (char *)*((_QWORD *)a1 + 43);
      v33 = v30;
      if (v31 != v32)
      {
        do
        {
          *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
          v33 -= 2;
          v31 -= 16;
        }
        while (v31 != v32);
        v31 = (char *)*((_QWORD *)a1 + 42);
      }
      v20 = v30 + 2;
      *((_QWORD *)a1 + 42) = v33;
      *((_QWORD *)a1 + 43) = v30 + 2;
      *((_QWORD *)a1 + 44) = v28 + 16 * v29;
      if (v31)
        operator delete(v31);
    }
    else
    {
      *v20 = v22;
      v20[1] = v21;
      v20 += 2;
    }
    *((_QWORD *)a1 + 43) = v20;
    ++v19;
  }
  while (v19 <= v7);
  *((_QWORD *)a1 + 46) = 0;
  *((_QWORD *)a1 + 47) = 0;
  *((_QWORD *)a1 + 48) = 0;
  v34 = v70;
  a1[1] = v70;
  if (v70 == -1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v75 = "HOA.cpp";
      v76 = 1024;
      v77 = 662;
      v78 = 2080;
      v79 = "HOA";
      v80 = 1024;
      v81 = 662;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Incorrect order",
        buf,
        0x22u);
      v34 = a1[1];
    }
    else
    {
      v34 = -1;
    }
  }
  if ((v34 + 1) * (v34 + 1) != v69 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    v75 = "HOA.cpp";
    v76 = 1024;
    v77 = 666;
    v78 = 2080;
    v79 = "HOA";
    v80 = 1024;
    v81 = 666;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Incorrect channel count (i.e. not consistent with HOA order definition Ch"
      "annels = (order+1)^2)",
      buf,
      0x22u);
  }
  v35 = HOA::normalizationFromTag((HOA *)a2);
  a1[76] = v35;
  v36 = a1[1];
  v37 = (v36 + 1) * (v36 + 1);
  a1[3] = v37;
  *a1 = v36;
  if (v35 == 2 && v36 >= 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      v75 = "HOA.cpp";
      v76 = 1024;
      v78 = 2080;
      v77 = 684;
      v79 = "initialize";
      v80 = 1024;
      v81 = 684;
      v82 = 1024;
      v83 = v36;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; initializing a HOA instance with order = %d > 3 with FuMa normalization",
        buf,
        0x28u);
    }
    v38 = 3;
LABEL_49:
    *a1 = v38;
    v37 = (v38 + 1) * (v38 + 1);
    goto LABEL_50;
  }
  if (v36 >= 0xB)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      v75 = "HOA.cpp";
      v76 = 1024;
      v78 = 2080;
      v77 = 687;
      v79 = "initialize";
      v80 = 1024;
      v81 = 687;
      v82 = 1024;
      v83 = v36;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Warning; initializing a HOA instance with order = %d > 10",
        buf,
        0x28u);
    }
    v38 = 10;
    goto LABEL_49;
  }
LABEL_50:
  a1[2] = v37;
  std::vector<float>::resize((char **)a1 + 10, v37);
  v39 = 0;
  LODWORD(v40) = 0;
  v41 = *a1;
  v42 = a1[76];
  v43 = 1;
  v44 = *((_QWORD *)a1 + 10);
  do
  {
    v45 = sqrtf((float)((float)v39 * 2.0) + 1.0);
    v40 = (int)v40;
    v46 = v43;
    do
    {
      if (v42)
      {
        if (v42 == 2)
          v47 = 1.0 / (float)(v45 * flt_18F0F8CE4[v40]);
        else
          v47 = 1.0 / v45;
      }
      else
      {
        v47 = 1.0;
      }
      *(float *)(v44 + 4 * v40++) = v47;
      --v46;
    }
    while (v46);
    v43 += 2;
  }
  while (v39++ != v41);
  if (a1[2] != (_DWORD)v40)
    __assert_rtn("initialize", "HOA.cpp", 711, "k == mNumChannels");
  *(_DWORD *)buf = 0;
  std::vector<float>::assign((char **)a1 + 13, (v40 * v40), buf);
  SphericalGrid = HOA::getSphericalGrid(a1[44], (HOA *)*a1, 0, 0, 0);
  a1[6] = SphericalGrid;
  std::vector<float>::resize(v73, SphericalGrid);
  std::vector<float>::resize(v71, a1[6]);
  std::vector<float>::resize((char **)a1 + 32, a1[6]);
  HOA::getSphericalGrid(a1[44], (HOA *)*a1, *((_DWORD **)a1 + 26), *((float **)a1 + 29), *((float **)a1 + 32));
  vDSP_vsmul(*((const float **)a1 + 26), 1, &kDeg2Radf, *((float **)a1 + 26), 1, a1[6]);
  vDSP_vsmul(*((const float **)a1 + 29), 1, &kDeg2Radf, *((float **)a1 + 29), 1, a1[6]);
  std::vector<float>::resize(v72, 3 * a1[6]);
  v50 = a1[6];
  if ((_DWORD)v50)
  {
    v51 = *v73;
    v52 = *v71;
    v53 = (float *)(*v72 + 8);
    do
    {
      v54 = *(float *)v51;
      v51 += 4;
      v55 = v54;
      v56 = *(float *)v52;
      v52 += 4;
      v57 = __sincosf_stret(v56);
      v58 = __sincosf_stret(v55);
      *(v53 - 2) = v58.__cosval * v57.__cosval;
      *(v53 - 1) = v58.__sinval * v57.__cosval;
      *v53 = v57.__sinval;
      v53 += 3;
      --v50;
    }
    while (v50);
  }
  if (a1[76] == 2)
  {
    std::vector<float>::resize((char **)a1 + 46, a1[2] * a1[2]);
    v59 = a1[2];
    if ((_DWORD)v59)
    {
      v60 = 0;
      v61 = 0;
      v62 = *((_QWORD *)a1 + 46);
      v63 = &dword_18F0F8D24;
      do
      {
        v64 = v63;
        v65 = v60;
        v66 = v59;
        do
        {
          v67 = *v64++;
          *(_DWORD *)(v62 + 4 * v65++) = v67;
          --v66;
        }
        while (v66);
        ++v61;
        v60 += v59;
        v63 += 16;
      }
      while (v61 != v59);
    }
  }
  *((_QWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 28) = 1;
  return a1;
}

void sub_18EF40EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20)
{
  _QWORD *v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  v22 = (void *)v20[42];
  if (v22)
  {
    v20[43] = v22;
    operator delete(v22);
  }
  v23 = *a10;
  if (*a10)
  {
    v20[40] = v23;
    operator delete(v23);
  }
  v24 = *a19;
  if (*a19)
  {
    v20[36] = v24;
    operator delete(v24);
  }
  v25 = *a18;
  if (*a18)
  {
    v20[33] = v25;
    operator delete(v25);
  }
  v26 = *a16;
  if (*a16)
  {
    v20[30] = v26;
    operator delete(v26);
  }
  v27 = *a20;
  if (*a20)
  {
    v20[27] = v27;
    operator delete(v27);
  }
  v28 = *a11;
  if (*a11)
  {
    v20[24] = v28;
    operator delete(v28);
  }
  v29 = (void *)v20[19];
  if (v29)
  {
    v20[20] = v29;
    operator delete(v29);
  }
  v30 = (void *)v20[16];
  if (v30)
  {
    v20[17] = v30;
    operator delete(v30);
  }
  v31 = *a15;
  if (*a15)
  {
    v20[14] = v31;
    operator delete(v31);
  }
  v32 = *a17;
  if (*a17)
  {
    v20[11] = v32;
    operator delete(v32);
  }
  v33 = (void *)v20[7];
  if (v33)
  {
    v20[8] = v33;
    operator delete(v33);
  }
  v34 = *a12;
  if (*a12)
  {
    v20[5] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

void HOA::~HOA(HOA *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v2 = (void *)*((_QWORD *)this + 46);
  if (v2)
  {
    *((_QWORD *)this + 47) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 42);
  if (v3)
  {
    *((_QWORD *)this + 43) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 39);
  if (v4)
  {
    *((_QWORD *)this + 40) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 35);
  if (v5)
  {
    *((_QWORD *)this + 36) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 32);
  if (v6)
  {
    *((_QWORD *)this + 33) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 29);
  if (v7)
  {
    *((_QWORD *)this + 30) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 26);
  if (v8)
  {
    *((_QWORD *)this + 27) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 23);
  if (v9)
  {
    *((_QWORD *)this + 24) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 19);
  if (v10)
  {
    *((_QWORD *)this + 20) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 16);
  if (v11)
  {
    *((_QWORD *)this + 17) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 13);
  if (v12)
  {
    *((_QWORD *)this + 14) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 10);
  if (v13)
  {
    *((_QWORD *)this + 11) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 7);
  if (v14)
  {
    *((_QWORD *)this + 8) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 4);
  if (v15)
  {
    *((_QWORD *)this + 5) = v15;
    operator delete(v15);
  }
}

void HOA::sphericalHarmonics(HOA *this, float *a2, const float *a3, uint64_t a4, float *a5)
{
  uint64_t v8;
  uint64_t v9;
  float *v10;
  unsigned int v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float *v23;
  float v24;
  int v25;
  float *v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  double v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  BOOL v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  float v162;
  int v163;
  float *v164;
  float *v165;
  uint64_t v166;
  float v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  HOA *v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  float *v177;
  int v178;
  uint64_t v179;
  float *v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  int v185;
  HOA *v186;
  float *v187;
  uint64_t v188;
  const float *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  float *v194;
  uint64_t v195;
  uint64_t v196;

  v186 = this;
  v196 = *MEMORY[0x1E0C80C00];
  v181 = ((_DWORD)a5 + 1);
  v8 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v10 = (float *)((char *)&v179 - v9);
  v190 = v11;
  MEMORY[0x1E0C80A78](v8);
  v187 = (float *)((char *)&v179 - ((v12 + 15) & 0x7FFFFFFF0));
  if ((int)a3 >= 1)
  {
    v13 = v187;
    v14 = v190;
    do
    {
      v15 = *a2++;
      *v13++ = sinf(v15);
      --v14;
    }
    while (v14);
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  *(float *)&v184 = -945.0;
  v20 = v190;
  v180 = v10;
  v188 = a4;
  v189 = a3;
  v193 = 4 * (int)a3;
  do
  {
    v191 = v17;
    v192 = v19;
    v21 = 0;
    v194 = v10;
    v195 = v16;
    do
    {
      if ((int)a3 >= 1)
      {
        v22 = powf(-1.0, (float)(int)v21);
        v23 = v194;
        v16 = v195;
        v24 = v22;
        if ((int)v21 >= (int)v195)
          v25 = v195;
        else
          v25 = v21;
        v26 = v187;
        v27 = v20;
        while (2)
        {
          v28 = *v26;
          v29 = 1.0;
          switch((int)v16)
          {
            case 0:
              goto LABEL_150;
            case 1:
              if (v25)
              {
                v30 = 1.0 - (float)(v28 * v28);
                v31 = -fabsf(sqrtf(v30));
                if (v30 == -INFINITY)
                  v29 = -INFINITY;
                else
                  v29 = v31;
              }
              else
              {
                v29 = *v26;
              }
              goto LABEL_150;
            case 2:
              if (v25 == 2)
              {
                v29 = (float)(1.0 - (float)(v28 * v28)) * 3.0;
                goto LABEL_150;
              }
              if (v25 == 1)
              {
                v33 = v28 * -3.0;
                v54 = v28 * v28;
LABEL_66:
                v72 = 1.0 - v54;
                v73 = fabsf(sqrtf(v72));
                v58 = v72 == -INFINITY;
                v34 = INFINITY;
                if (!v58)
                  v34 = v73;
              }
              else
              {
                v29 = 0.0;
                if (v25)
                  goto LABEL_150;
                v33 = (float)((float)(v28 * v28) * 3.0) + -1.0;
                v34 = 0.5;
              }
              goto LABEL_68;
            case 3:
              if (v25 == 2)
              {
                v33 = v28 * 15.0;
                v34 = 1.0 - (float)(v28 * v28);
LABEL_68:
                v29 = v33 * v34;
              }
              else if (v25 == 1)
              {
                v55 = (float)((float)((float)(v28 * v28) * -5.0) + 1.0) * 1.5;
                v56 = 1.0 - (float)(v28 * v28);
                v57 = fabsf(sqrtf(v56));
                v58 = v56 == -INFINITY;
                v59 = INFINITY;
                if (!v58)
                  v59 = v57;
LABEL_82:
                v29 = v55 * v59;
              }
              else
              {
                if (v25)
                {
                  v39 = powf(1.0 - (float)(v28 * v28), 1.5);
                  v40 = -15.0;
                }
                else
                {
                  v39 = (float)(v28 * -3.0) + (float)(powf(*v26, 3.0) * 5.0);
                  v40 = 0.5;
                }
LABEL_48:
                v29 = v39 * v40;
LABEL_149:
                v16 = v195;
              }
LABEL_150:
              *v23++ = v24 * v29;
              ++v26;
              if (!--v27)
                break;
              continue;
            case 4:
              switch(v25)
              {
                case 0:
                  v32 = powf(*v26, 4.0);
                  v16 = v195;
                  v33 = (float)((float)((float)(v28 * v28) * -30.0) + (float)(v32 * 35.0)) + 3.0;
                  v34 = 0.125;
                  goto LABEL_68;
                case 1:
                  v54 = v28 * v28;
                  v33 = (float)(v28 * 2.5) * (float)((float)((float)(v28 * v28) * -7.0) + 3.0);
                  goto LABEL_66;
                case 2:
                  v34 = (float)((float)((float)(v28 * v28) * 7.0) + -1.0) * 7.5;
                  v33 = 1.0 - (float)(v28 * v28);
                  goto LABEL_68;
                case 3:
                  v43 = v28 * -105.0;
                  v60 = 1.0 - (float)(v28 * v28);
                  v61 = 1.5;
                  goto LABEL_84;
                default:
                  v33 = (float)(1.0 - (float)(v28 * v28)) * (float)(1.0 - (float)(v28 * v28));
                  *(float *)&v48 = 105.0;
                  goto LABEL_53;
              }
            case 5:
              switch(v25)
              {
                case 0:
                  v43 = v28 * 0.125;
                  v44 = powf(*v26, 4.0);
                  v16 = v195;
                  v45 = (float)((float)((float)(v28 * v28) * -70.0) + (float)(v44 * 63.0)) + 15.0;
                  goto LABEL_85;
                case 1:
                  v62 = 1.0 - (float)(v28 * v28);
                  v63 = fabsf(sqrtf(v62)) * -1.875;
                  if (v62 == -INFINITY)
                    v64 = -INFINITY;
                  else
                    v64 = v63;
                  v65 = powf(*v26, 4.0);
                  v16 = v195;
                  v29 = (float)((float)((float)((float)(v28 * v28) * -14.0) + (float)(v65 * 21.0)) + 1.0) * v64;
                  break;
                case 2:
                  v59 = (float)(v28 * 52.5) * (float)(1.0 - (float)(v28 * v28));
                  v55 = (float)((float)(v28 * v28) * 3.0) + -1.0;
                  goto LABEL_82;
                case 3:
                  v66 = v28 * v28;
                  v67 = powf(1.0 - v66, 1.5);
                  v16 = v195;
                  v59 = v67 * -52.5;
                  v68 = 9.0;
                  goto LABEL_81;
                case 4:
                  v33 = v28 * 945.0;
                  v34 = (float)(1.0 - (float)(v28 * v28)) * (float)(1.0 - (float)(v28 * v28));
                  goto LABEL_68;
                default:
                  v33 = powf(1.0 - (float)(v28 * v28), 2.5);
                  v16 = v195;
                  v34 = *(float *)&v184;
                  goto LABEL_68;
              }
              goto LABEL_150;
            case 6:
              switch(v25)
              {
                case 0:
                  v46 = powf(*v26, 6.0);
                  v47 = powf(v28, 4.0);
                  v16 = v195;
                  v33 = (float)((float)((float)(v47 * -315.0) + (float)(v46 * 231.0))
                              + (float)((float)(v28 * v28) * 105.0))
                      + -5.0;
                  *(float *)&v48 = 0.0625;
LABEL_53:
                  v34 = *(float *)&v48;
                  goto LABEL_68;
                case 1:
                  v71 = powf(*v26, 4.0);
                  v16 = v195;
                  v54 = v28 * v28;
                  v33 = (float)(v28 * -2.625)
                      * (float)((float)((float)((float)(v28 * v28) * -30.0) + (float)(v71 * 33.0)) + 5.0);
                  goto LABEL_66;
                case 2:
                  v69 = powf(*v26, 4.0);
                  v16 = v195;
                  v29 = (float)((float)(1.0 - (float)(v28 * v28)) * 13.125)
                      * (float)((float)((float)((float)(v28 * v28) * -18.0) + (float)(v69 * 33.0)) + 1.0);
                  break;
                case 3:
                  v70 = powf(1.0 - (float)(v28 * v28), 1.5);
                  v16 = v195;
                  v29 = v70 * (float)((float)((float)((float)((float)(v28 * v28) * 11.0) + -3.0) * -157.5) * v28);
                  break;
                case 4:
                  v34 = (float)((float)(1.0 - (float)(v28 * v28)) * (float)(1.0 - (float)(v28 * v28))) * 472.5;
                  v33 = (float)((float)(v28 * v28) * 11.0) + -1.0;
                  goto LABEL_68;
                case 5:
                  v43 = v28 * -10395.0;
                  v60 = 1.0 - (float)(v28 * v28);
                  v61 = 2.5;
                  goto LABEL_84;
                default:
                  v33 = powf(1.0 - (float)(v28 * v28), 3.0);
                  v16 = v195;
                  v34 = 10395.0;
                  goto LABEL_68;
              }
              goto LABEL_150;
            case 7:
              switch(v25)
              {
                case 0:
                  v41 = (float)(powf(*v26, 6.0) * 429.0);
                  v42 = powf(v28, 4.0);
                  v16 = v195;
                  v29 = (v41 + v42 * -693.0 + (float)((float)(v28 * v28) * 315.0) + -35.0) * (float)(v28 * 0.0625);
                  goto LABEL_150;
                case 1:
                  v78 = 1.0 - (float)(v28 * v28);
                  v79 = fabsf(sqrtf(v78)) * -0.4375;
                  if (v78 == -INFINITY)
                    v80 = -INFINITY;
                  else
                    v80 = v79;
                  v81 = powf(*v26, 6.0);
                  v82 = powf(v28, 4.0);
                  v16 = v195;
                  v29 = (float)((float)((float)((float)(v82 * -495.0) + (float)(v81 * 429.0))
                                      + (float)((float)(v28 * v28) * 135.0))
                              + -5.0)
                      * v80;
                  goto LABEL_150;
                case 2:
                  v74 = (float)(v28 * 7.875) * (float)(1.0 - (float)(v28 * v28));
                  v75 = powf(*v26, 4.0);
                  v16 = v195;
                  v76 = (float)((float)((float)(v28 * v28) * -110.0) + (float)(v75 * 143.0)) + 15.0;
                  goto LABEL_75;
                case 3:
                  v74 = powf(1.0 - (float)(v28 * v28), 1.5) * -39.375;
                  v77 = powf(v28, 4.0);
                  v16 = v195;
                  v76 = (float)((float)((float)(v28 * v28) * -66.0) + (float)(v77 * 143.0)) + 3.0;
LABEL_75:
                  v29 = v74 * v76;
                  break;
                case 4:
                  v59 = (float)(v28 * 1732.5)
                      * (float)((float)(1.0 - (float)(v28 * v28)) * (float)(1.0 - (float)(v28 * v28)));
                  v55 = (float)((float)(v28 * v28) * 13.0) + -3.0;
                  goto LABEL_82;
                case 5:
                  v66 = v28 * v28;
                  v83 = powf(1.0 - v66, 2.5);
                  v16 = v195;
                  v59 = v83 * -5197.5;
                  v68 = 13.0;
LABEL_81:
                  v55 = (float)(v66 * v68) + -1.0;
                  goto LABEL_82;
                case 6:
                  v43 = v28 * 135140.0;
                  v60 = 1.0 - (float)(v28 * v28);
                  v61 = 3.0;
LABEL_84:
                  v45 = powf(v60, v61);
                  v16 = v195;
LABEL_85:
                  v29 = v43 * v45;
                  break;
                default:
                  v33 = powf(1.0 - (float)(v28 * v28), 3.5);
                  v16 = v195;
                  v34 = -135140.0;
                  goto LABEL_68;
              }
              goto LABEL_150;
            case 8:
              switch(v25)
              {
                case 0:
                  v49 = powf(*v26, 8.0);
                  v50 = (float)(powf(v28, 6.0) * -12012.0) + (float)(v49 * 6435.0);
                  v38 = (float)((float)(v50 + (float)(powf(v28, 4.0) * 6930.0)) + (float)((float)(v28 * v28) * -1260.0))
                      + 35.0;
                  goto LABEL_36;
                case 1:
                  v91 = 1.0 - (float)(v28 * v28);
                  v92 = fabsf(sqrtf(v91));
                  v58 = v91 == -INFINITY;
                  v93 = INFINITY;
                  if (!v58)
                    v93 = v92;
                  v94 = (float)(v28 * -0.5625) * v93;
                  v95 = powf(*v26, 6.0);
                  v96 = (float)((float)((float)(powf(v28, 4.0) * -1001.0) + (float)(v95 * 715.0))
                              + (float)((float)(v28 * v28) * 385.0))
                      + -35.0;
                  goto LABEL_101;
                case 2:
                  v86 = v28 * v28;
                  v87 = (float)(1.0 - (float)(v28 * v28)) * 19.688;
                  v88 = powf(*v26, 6.0);
                  v89 = (float)(powf(v28, 4.0) * -143.0) + (float)(v88 * 143.0);
                  v90 = 33.0;
                  goto LABEL_118;
                case 3:
                  v97 = (float)(v28 * -433.12) * powf(1.0 - (float)(v28 * v28), 1.5);
                  v98 = (float)((float)((float)(v28 * v28) * -26.0) + (float)(powf(v28, 4.0) * 39.0)) + 3.0;
                  goto LABEL_124;
                case 4:
                  v84 = (float)((float)(1.0 - (float)(v28 * v28)) * (float)(1.0 - (float)(v28 * v28))) * 1299.4;
                  v85 = (float)((float)((float)(v28 * v28) * -26.0) + (float)(powf(*v26, 4.0) * 65.0)) + 1.0;
                  goto LABEL_146;
                case 5:
                  v101 = v28 * -67568.0;
                  v102 = v28 * v28;
                  v103 = v101 * powf(1.0 - v102, 2.5);
                  v104 = 5.0;
                  goto LABEL_148;
                case 6:
                  v102 = v28 * v28;
                  v103 = powf(1.0 - v102, 3.0) * 67568.0;
                  v104 = 15.0;
                  goto LABEL_148;
                case 7:
                  v97 = v28 * -2027000.0;
                  v99 = 1.0 - (float)(v28 * v28);
                  v100 = 3.5;
                  goto LABEL_123;
                default:
                  v33 = powf(1.0 - (float)(v28 * v28), 4.0);
                  v16 = v195;
                  v34 = 2027000.0;
                  goto LABEL_68;
              }
            case 9:
              switch(v25)
              {
                case 0:
                  v35 = powf(*v26, 9.0);
                  v36 = (float)(powf(v28, 7.0) * -25740.0) + (float)(v35 * 12155.0);
                  v37 = v36 + (float)(powf(v28, 5.0) * 18018.0);
                  v38 = (float)(v37 + (float)(powf(v28, 3.0) * -4620.0)) + (float)(v28 * 315.0);
LABEL_36:
                  v29 = v38 * 0.0078125;
                  goto LABEL_149;
                case 1:
                  v115 = v28 * v28;
                  v116 = 1.0 - (float)(v28 * v28);
                  v117 = fabsf(sqrtf(v116)) * -0.35156;
                  if (v116 == -INFINITY)
                    v87 = -INFINITY;
                  else
                    v87 = v117;
                  v118 = powf(*v26, 8.0);
                  v119 = (float)(powf(v28, 6.0) * -4004.0) + (float)(v118 * 2431.0);
                  v120 = v119 + (float)(powf(v28, 4.0) * 2002.0);
                  v121 = -308.0;
                  goto LABEL_120;
                case 2:
                  v84 = (float)((float)(v28 * v28) + -1.0) * -30.938;
                  v106 = powf(*v26, 7.0);
                  v107 = (float)(powf(v28, 5.0) * -273.0) + (float)(v106 * 221.0);
                  v108 = v107 + (float)(powf(v28, 3.0) * 91.0);
                  v109 = -7.0;
                  goto LABEL_129;
                case 3:
                  v110 = v28 * v28;
                  v111 = 1.0 - (float)(v28 * v28);
                  v112 = fabsf(sqrtf(v111)) * 216.56;
                  v58 = v111 == -INFINITY;
                  v113 = INFINITY;
                  if (!v58)
                    v113 = v112;
                  v94 = (float)(v110 + -1.0) * v113;
                  v114 = powf(*v26, 6.0);
                  v96 = (float)((float)((float)(powf(v28, 4.0) * -195.0) + (float)(v114 * 221.0)) + (float)(v110 * 39.0))
                      + -1.0;
LABEL_101:
                  v29 = v96 * v94;
                  goto LABEL_149;
                case 4:
                  v84 = (float)((float)((float)(v28 * v28) + -1.0) * (float)((float)(v28 * v28) + -1.0)) * 16892.0;
                  v105 = powf(*v26, 5.0);
                  v85 = (float)((float)(powf(v28, 3.0) * -10.0) + (float)(v105 * 17.0)) + v28;
                  goto LABEL_146;
                case 5:
                  v124 = v28 * v28;
                  v125 = 1.0 - (float)(v28 * v28);
                  v126 = fabsf(sqrtf(v125)) * -16892.0;
                  if (v125 == -INFINITY)
                    v127 = -INFINITY;
                  else
                    v127 = v126;
                  v128 = (float)((float)(v124 + -1.0) * (float)(v124 + -1.0)) * v127;
                  v129 = (float)((float)(v124 * -30.0) + (float)(powf(*v26, 4.0) * 85.0)) + 1.0;
                  goto LABEL_144;
                case 6:
                  v130 = powf((float)(v28 * v28) + -1.0, 3.0) * -337840.0;
                  v131 = powf(v28, 3.0);
                  v132 = v28 * -3.0;
                  v133 = 17.0;
                  goto LABEL_137;
                case 7:
                  v102 = v28 * v28;
                  v122 = fabsf(sqrtf(1.0 - v102)) * 1013500.0;
                  if ((float)(1.0 - v102) == -INFINITY)
                    v123 = INFINITY;
                  else
                    v123 = v122;
                  v103 = powf(v102 + -1.0, 3.0) * v123;
                  v104 = 17.0;
                  goto LABEL_148;
                case 8:
                  v97 = v28 * 34459000.0;
                  v99 = (float)(v28 * v28) + -1.0;
                  v100 = 4.0;
                  goto LABEL_123;
                default:
                  v33 = powf(1.0 - (float)(v28 * v28), 4.5);
                  v16 = v195;
                  v34 = -34459000.0;
                  goto LABEL_68;
              }
            case 10:
              switch(v25)
              {
                case 0:
                  v51 = powf(*v26, 10.0);
                  v52 = (float)(powf(v28, 8.0) * -109400.0) + (float)(v51 * 46189.0);
                  v53 = v52 + (float)(powf(v28, 6.0) * 90090.0);
                  v39 = (float)((float)(v53 + (float)(powf(v28, 4.0) * -30030.0)) + (float)((float)(v28 * v28) * 3465.0))
                      + -63.0;
                  v40 = 0.0039062;
                  goto LABEL_48;
                case 1:
                  v138 = 1.0 - (float)(v28 * v28);
                  v139 = fabsf(sqrtf(v138)) * -0.42969;
                  if (v138 == -INFINITY)
                    v84 = -INFINITY;
                  else
                    v84 = v139;
                  v140 = powf(*v26, 9.0);
                  v141 = (float)(powf(v28, 7.0) * -7956.0) + (float)(v140 * 4199.0);
                  v142 = v141 + (float)(powf(v28, 5.0) * 4914.0);
                  v108 = v142 + (float)(powf(v28, 3.0) * -1092.0);
                  v109 = 63.0;
LABEL_129:
                  v85 = v108 + (float)(v28 * v109);
                  goto LABEL_146;
                case 2:
                  v115 = v28 * v28;
                  v87 = (float)((float)(v28 * v28) + -1.0) * -3.8672;
                  v136 = powf(*v26, 8.0);
                  v137 = (float)(powf(v28, 6.0) * -6188.0) + (float)(v136 * 4199.0);
                  v120 = v137 + (float)(powf(v28, 4.0) * 2730.0);
                  v121 = -364.0;
LABEL_120:
                  v135 = (float)(v120 + (float)(v115 * v121)) + 7.0;
                  goto LABEL_121;
                case 3:
                  v143 = 1.0 - (float)(v28 * v28);
                  v144 = fabsf(sqrtf(v143)) * 402.19;
                  v58 = v143 == -INFINITY;
                  v145 = INFINITY;
                  if (!v58)
                    v145 = v144;
                  v128 = (float)((float)(v28 * v28) + -1.0) * v145;
                  v146 = powf(*v26, 7.0);
                  v147 = (float)(powf(v28, 5.0) * -357.0) + (float)(v146 * 323.0);
                  v148 = v147 + (float)(powf(v28, 3.0) * 105.0);
                  v149 = -7.0;
                  goto LABEL_143;
                case 4:
                  v86 = v28 * v28;
                  v87 = (float)((float)((float)(v28 * v28) + -1.0) * (float)((float)(v28 * v28) + -1.0)) * 2815.3;
                  v134 = powf(*v26, 6.0);
                  v89 = (float)(powf(v28, 4.0) * -255.0) + (float)(v134 * 323.0);
                  v90 = 45.0;
LABEL_118:
                  v135 = (float)(v89 + (float)(v86 * v90)) + -1.0;
LABEL_121:
                  v29 = v87 * v135;
                  break;
                case 5:
                  v153 = 1.0 - (float)(v28 * v28);
                  v154 = fabsf(sqrtf(v153)) * -16892.0;
                  if (v153 == -INFINITY)
                    v155 = -INFINITY;
                  else
                    v155 = v154;
                  v128 = (float)((float)((float)(v28 * v28) + -1.0) * (float)((float)(v28 * v28) + -1.0)) * v155;
                  v156 = powf(*v26, 5.0);
                  v148 = (float)(powf(v28, 3.0) * -170.0) + (float)(v156 * 323.0);
                  v149 = 15.0;
LABEL_143:
                  v129 = v148 + (float)(v28 * v149);
LABEL_144:
                  v29 = v129 * v128;
                  break;
                case 6:
                  v84 = powf((float)(v28 * v28) + -1.0, 3.0) * -84459.0;
                  v85 = (float)((float)((float)(v28 * v28) * -102.0) + (float)(powf(v28, 4.0) * 323.0)) + 3.0;
LABEL_146:
                  v29 = v84 * v85;
                  break;
                case 7:
                  v150 = 1.0 - (float)(v28 * v28);
                  v151 = fabsf(sqrtf(v150)) * 5743200.0;
                  if (v150 == -INFINITY)
                    v152 = INFINITY;
                  else
                    v152 = v151;
                  v130 = powf((float)(v28 * v28) + -1.0, 3.0) * v152;
                  v131 = powf(v28, 3.0);
                  v132 = v28 * -3.0;
                  v133 = 19.0;
LABEL_137:
                  v29 = (float)(v132 + (float)(v131 * v133)) * v130;
                  goto LABEL_149;
                case 8:
                  v102 = v28 * v28;
                  v103 = powf(v102 + -1.0, 4.0) * 17230000.0;
                  v104 = 19.0;
LABEL_148:
                  v29 = (float)((float)(v102 * v104) + -1.0) * v103;
                  goto LABEL_149;
                case 9:
                  v97 = v28 * -654730000.0;
                  v99 = 1.0 - (float)(v28 * v28);
                  v100 = 4.5;
LABEL_123:
                  v98 = powf(v99, v100);
LABEL_124:
                  v29 = v97 * v98;
                  goto LABEL_149;
                default:
                  v33 = powf((float)(v28 * v28) + -1.0, 5.0);
                  v16 = v195;
                  v34 = -654730000.0;
                  goto LABEL_68;
              }
              goto LABEL_149;
            default:
              v29 = 0.0;
              goto LABEL_150;
          }
          break;
        }
      }
      v157 = v193;
      v194 = (float *)((char *)v194 + v193);
      v158 = v192;
      ++v21;
    }
    while (v21 != v192);
    v159 = v191;
    v160 = v191;
    do
    {
      while (1)
      {
        v161 = (int)v160 >= 0 ? v160 : -(int)v160;
        if ((int)a3 >= 1)
          break;
        if (v158 == ++v160)
        {
          v168 = v16 + 1;
          goto LABEL_168;
        }
      }
      v162 = sqrtf((float)((float)((float)((float)(int)v16 * 2.0) + 1.0) * flt_18F0F9124[v16 - v161])* flt_18F0F9178[(v161 + v16)]);
      v163 = v161 * (_DWORD)a3;
      v164 = (float *)(a4 + 4 * (v18 + (int)v16 + (int)v160) * (int)a3);
      v165 = &v10[v163];
      v166 = v20;
      do
      {
        v167 = *v165++;
        *v164++ = v162 * v167;
        --v166;
      }
      while (v166);
      ++v160;
    }
    while (v158 != v160);
    v169 = 0;
    v182 = v16 + 1;
    v194 = (float *)(a4 + v157 * (v16 + 1 + v18));
    v183 = v18;
    v185 = (_DWORD)a3 * v18;
    do
    {
      v170 = v191;
      v172 = v188;
      v171 = (int)v189;
      v173 = v186;
      v174 = v193;
      if (v16)
      {
        v175 = 0;
        v176 = v185;
        v177 = v194;
        v178 = v195;
        do
        {
          *v177 = *v177 * (float)(cosf(*((float *)v173 + v169) * (float)(int)++v175) * 1.4142);
          *(float *)(v172 + 4 * (v169 + v176)) = *(float *)(v172 + 4 * (v169 + v176))
                                               * (float)(sinf(-(float)(*((float *)v173 + v169) * (float)v178--)) * 1.4142);
          v177 = (float *)((char *)v177 + v174);
          v176 += v171;
        }
        while (v170 + v175);
      }
      ++v169;
      v16 = v195;
      ++v194;
    }
    while (v169 != v190);
    v10 = v180;
    v20 = v190;
    v159 = v191;
    a4 = v188;
    LODWORD(a3) = (_DWORD)v189;
    v18 = v183;
    v158 = v192;
    v168 = v182;
LABEL_168:
    v18 += 2 * v16 + 1;
    v19 = v158 + 1;
    v17 = v159 - 1;
    v16 = v168;
  }
  while (v168 != v181);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18EF42670(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HOA::createDecoder(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  char **v8;
  unint64_t v9;
  unint64_t v10;
  float *v11;
  float *v12;
  uint64_t v13;
  char *v14;
  float *v15;
  float *v16;
  float v17;
  __float2 v18;
  __float2 v19;
  void *v20;
  uint64_t i;
  float *v22;
  char *v23;
  uint64_t v24;
  float32x2_t *v25;
  float *v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  unint64_t v32;
  float v33;
  float v34;
  unsigned int subtriangle_containment;
  float *v36;
  char **v37;
  uint64_t v38;
  uint64_t k;
  int v40;
  int v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t j;
  int v48;
  int *v49;
  float64x2_t v50;
  unint64_t v51;
  float64x2_t v52;
  unint64_t v53;
  float64x2_t v54;
  unint64_t v55;
  double v56;
  float64_t v57;
  float64_t v58;
  double v59;
  double v60;
  double v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  __int128 v67;
  double v68;
  double v69;
  float64x2_t v70;
  double v71;
  float64x2_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  float64x2_t v77;
  double v78;
  int8x16_t v79;
  __int128 v80;
  double v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  float *v86;
  uint64_t v87;
  __int128 v88;
  double v89;
  float v90;
  int v91;
  float v92;
  int v93;
  float *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int v98;
  float *v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  float *v116;
  uint64_t v117;
  unsigned int v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  NSObject *v126;
  const char *v127;
  unsigned int v129;
  float v130;
  char *v131;
  NSObject *v132;
  const char *v133;
  uint64_t v134;
  unint64_t v135;
  NSObject *v136;
  const char *v137;
  char *v138;
  unint64_t v139;
  float64_t v140;
  float64x2_t v141;
  _OWORD v142[2];
  float64x2_t v143;
  float64x2_t v144;
  _OWORD v145[2];
  float64x2_t v146;
  float64x2_t v147;
  _OWORD v148[2];
  _OWORD v149[2];
  float *v150[3];
  float __A;
  void *v152[3];
  float *__C[3];
  void *__dst[3];
  float *__B[3];
  void *__p;
  void *v157;
  uint64_t v158;
  void *v159;
  void *v160;
  uint64_t v161;
  float *v162[3];
  float v163;
  double v164;
  double v165;
  uint8_t buf[4];
  const char *v167;
  __int16 v168;
  int v169;
  __int16 v170;
  const char *v171;
  __int16 v172;
  _BYTE v173[10];
  uint64_t v174;
  uint64_t v175;
  float *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  unsigned int v184;
  vDSP_Length v185;
  char v186;
  char v187;
  float64x2_t v188;
  double v189;
  _DWORD v190[7];
  __int16 v191;
  int v192;
  uint64_t v193;

  v193 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a1 + 28))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294967246;
    *(_DWORD *)buf = 136315906;
    v167 = "HOA.cpp";
    v168 = 1024;
    v169 = 948;
    v170 = 2080;
    v171 = "createDecoder";
    v172 = 1024;
    *(_DWORD *)v173 = 948;
    v126 = MEMORY[0x1E0C81028];
    v127 = "%25s:%-5d CADSPUtility:%s:%d: HOA Error; HOA object was not initialized";
LABEL_107:
    _os_log_impl(&dword_18EE07000, v126, OS_LOG_TYPE_ERROR, v127, buf, 0x22u);
    return 4294967246;
  }
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (!v4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294967246;
    *(_DWORD *)buf = 136315906;
    v167 = "HOA.cpp";
    v168 = 1024;
    v169 = 953;
    v170 = 2080;
    v171 = "createDecoder";
    v172 = 1024;
    *(_DWORD *)v173 = 953;
    v126 = MEMORY[0x1E0C81028];
    v127 = "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Empty azimuth/elevation";
    goto LABEL_107;
  }
  v6 = v4 >> 2;
  if (v6 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v167 = "HOA.cpp";
      v168 = 1024;
      v169 = 958;
      v170 = 2080;
      v171 = "createDecoder";
      v172 = 1024;
      *(_DWORD *)v173 = 958;
      v126 = MEMORY[0x1E0C81028];
      v127 = "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Inconsistent azimuth/elevation size";
      goto LABEL_107;
    }
    return 4294967246;
  }
  a1[5] = v6;
  std::vector<float>::resize((char **)a1 + 16, v6);
  std::vector<float>::resize((char **)a1 + 19, a1[5]);
  vDSP_vsmul(*(const float **)a2, 1, &kDeg2Radf, *((float **)a1 + 16), 1, a1[5]);
  vDSP_vsmul(*(const float **)a3, 1, &kDeg2Radf, *((float **)a1 + 19), 1, a1[5]);
  v8 = (char **)(a1 + 14);
  v9 = a1[2] * a1[5];
  *(_DWORD *)buf = 0;
  std::vector<float>::assign((char **)a1 + 7, v9, buf);
  if (!*a1)
  {
    v129 = a1[5];
    if (v129)
    {
      v130 = 1.0 / sqrtf((float)v129);
      v131 = *v8;
      do
      {
        *(float *)v131 = v130;
        v131 += 4;
        --v129;
      }
      while (v129);
    }
    v134 = 0;
    goto LABEL_143;
  }
  v160 = 0;
  v161 = 0;
  v159 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v159, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  __p = 0;
  v157 = 0;
  v158 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  memset(v190, 0, 24);
  v188 = 0uLL;
  v189 = 0.0;
  VBAP::VBAP((size_t)buf, (uint64_t *)&v159, (uint64_t *)&__p, (uint64_t)v190, (uint64_t **)&v188);
  v162[0] = (float *)&v188;
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v162);
  if (*(_QWORD *)v190)
  {
    *(_QWORD *)&v190[2] = *(_QWORD *)v190;
    operator delete(*(void **)v190);
  }
  if (__p)
  {
    v157 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (!v187)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v190[0] = 136315906;
      *(_QWORD *)&v190[1] = "HOA.cpp";
      LOWORD(v190[3]) = 1024;
      *(_DWORD *)((char *)&v190[3] + 2) = 982;
      HIWORD(v190[4]) = 2080;
      *(_QWORD *)&v190[5] = "createDecoder";
      v191 = 1024;
      v192 = 982;
      _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; VBAP object was not initialized",
        (uint8_t *)v190,
        0x22u);
    }
    VBAP::~VBAP((VBAP *)buf);
    return 4294967246;
  }
  v10 = 216 * a1[2];
  v190[0] = 0;
  std::vector<float>::vector(__B, v10, v190);
  v190[0] = 0;
  std::vector<float>::vector(__dst, 0xD8uLL, v190);
  v190[0] = 0;
  std::vector<float>::vector(__C, 0xD8uLL, v190);
  v190[0] = 0;
  std::vector<float>::vector(v152, 0x288uLL, v190);
  v11 = (float *)__dst[0];
  if (__dst[0])
  {
    v12 = __C[0];
    if (__C[0])
    {
      memcpy(__dst[0], &unk_18F0FA7A0, 0x360uLL);
      memcpy(v12, &unk_18F0FAB00, 0x360uLL);
    }
  }
  vDSP_vsmul(v11, 1, &kDeg2Radf, v11, 1, 0xD8uLL);
  vDSP_vsmul(__C[0], 1, &kDeg2Radf, __C[0], 1, 0xD8uLL);
  HOA::sphericalHarmonics((HOA *)__dst[0], __C[0], (const float *)0xD8, (uint64_t)__B[0], (float *)*a1);
  v13 = 0;
  v14 = (char *)__dst[0];
  v15 = __C[0];
  v16 = (float *)((char *)v152[0] + 8);
  do
  {
    v17 = *(float *)&v14[v13 * 4];
    v18 = __sincosf_stret(v15[v13]);
    v19 = __sincosf_stret(v17);
    *(v16 - 2) = v19.__cosval * v18.__cosval;
    *(v16 - 1) = v19.__sinval * v18.__cosval;
    *v16 = v18.__sinval;
    v16 += 3;
    ++v13;
  }
  while (v13 != 216);
  if (a1[76] == 2)
  {
    std::vector<float>::vector(v190, 216 * a1[2]);
    vDSP_mmul(*((const float **)a1 + 46), 1, __B[0], 1, *(float **)v190, 1, a1[2], 0xD8uLL, a1[2]);
    v20 = *(void **)v190;
    if (*(_QWORD *)&v190[2] != *(_QWORD *)v190)
    {
      memmove(__B[0], *(const void **)v190, *(_QWORD *)&v190[2] - *(_QWORD *)v190);
      v20 = *(void **)v190;
    }
    if (v20)
    {
      *(_QWORD *)&v190[2] = v20;
      operator delete(v20);
    }
  }
  __A = 0.0046296;
  std::vector<float>::vector(v150, (uint64_t)(*((_QWORD *)a1 + 11) - *((_QWORD *)a1 + 10)) >> 2);
  vDSP_svdiv(&__A, *((const float **)a1 + 10), 1, v150[0], 1, a1[2]);
  for (i = 0; i != 216; ++i)
    vDSP_vmul(v150[0], 1, &__B[0][i], 216, &__B[0][i], 216, a1[2]);
  v22 = __B[0];
  v23 = (char *)v152[0];
  vDSP_vclr(*((float **)a1 + 7), 1, a1[2] * a1[5]);
  std::vector<float>::vector(v162, a1[5]);
  v24 = 0;
  while (1)
  {
    if (!v187)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v190[0] = 136315906;
        *(_QWORD *)&v190[1] = "VBAP.cpp";
        LOWORD(v190[3]) = 1024;
        *(_DWORD *)((char *)&v190[3] + 2) = 579;
        HIWORD(v190[4]) = 2080;
        *(_QWORD *)&v190[5] = "calculateVBAPGains";
        v191 = 1024;
        v192 = 579;
        v132 = MEMORY[0x1E0C81028];
        v133 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Can not calculate gain if the VBAP object is not initialized";
LABEL_126:
        _os_log_impl(&dword_18EE07000, v132, OS_LOG_TYPE_ERROR, v133, (uint8_t *)v190, 0x22u);
        v134 = 4294967246;
        goto LABEL_128;
      }
      goto LABEL_127;
    }
    v25 = (float32x2_t *)&v23[12 * v24];
    v26 = v162[0];
    if (v25->f32[0] == 0.0 && v25->f32[1] == 0.0 && v25[1].f32[0] == 0.0)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v190[0] = 136315906;
        *(_QWORD *)&v190[1] = "VBAP.cpp";
        LOWORD(v190[3]) = 1024;
        *(_DWORD *)((char *)&v190[3] + 2) = 585;
        HIWORD(v190[4]) = 2080;
        *(_QWORD *)&v190[5] = "calculateVBAPGains";
        v191 = 1024;
        v192 = 585;
        v132 = MEMORY[0x1E0C81028];
        v133 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Can not calculate gain for a source location [0, 0, 0]";
        goto LABEL_126;
      }
LABEL_127:
      v134 = 4294967246;
      goto LABEL_128;
    }
    vDSP_vclr(v162[0], 1, v184);
    vDSP_vclr(v176, 1, (v177 - (uint64_t)v176) >> 2);
    v27 = vcvtq_f64_f32(*v25);
    v28.f64[0] = v25[1].f32[0];
    v29 = vmulq_f64(v28, v28);
    v29.f64[0] = 1.0 / sqrt(v29.f64[0] + vaddvq_f64(vmulq_f64(v27, v27)));
    v30 = vmulq_f64(v28, v29);
    v31 = vmulq_n_f64(v27, v29.f64[0]);
    v32 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
    if (!v186)
      break;
    v27.f64[0] = *(float *)(v174 + 8);
    v29.f64[0] = *(float *)(v174 + 20);
    *(_QWORD *)&v31.f64[1] = v32;
    v33 = sqrt((vmulq_f64(v30, v27).f64[0] + vaddvq_f64(vmulq_f64(v31, vcvtq_f64_f32(*(float32x2_t *)v174))) + 1.0) * 0.5);
    v34 = sqrt((vmulq_f64(v30, v29).f64[0] + vaddvq_f64(vmulq_f64(v31, vcvtq_f64_f32(*(float32x2_t *)(v174 + 12)))) + 1.0)* 0.5);
    *v26 = v33;
    v26[1] = v34;
LABEL_42:
    v45 = a1[5];
    if ((_DWORD)v45)
    {
      v46 = 0;
      for (j = 0; j < v45; ++j)
      {
        vDSP_vsma(&v22[v24], 216, &v162[0][v46], (const float *)(*((_QWORD *)a1 + 7) + v46 * 4), v45, (float *)(*((_QWORD *)a1 + 7) + v46 * 4), v45, a1[2]);
        v45 = a1[5];
        ++v46;
      }
    }
    if (++v24 == 216)
    {
      v134 = 0;
      goto LABEL_130;
    }
  }
  if (v184 < 2)
  {
    *v26 = 1.0;
    goto LABEL_42;
  }
  if (v187)
  {
    v139 = v32;
    v140 = v31.f64[0];
    v141 = v30;
    subtriangle_containment = CDelaunayTriangles3D::find_subtriangle_containment(v183, COERCE_FLOAT(*v25), COERCE_FLOAT(HIDWORD(*(unint64_t *)v25)), v28.f64[0]);
    if ((subtriangle_containment & 0x80000000) == 0
      && 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 3) > subtriangle_containment)
    {
      v138 = v23;
      v36 = v22;
      v37 = v8;
      v188 = vcvtq_f64_f32(*v25);
      v189 = v25[1].f32[0];
      v38 = v181 + 24 * subtriangle_containment;
      for (k = *(_QWORD *)(v38 + 8); k != v38; k = *(_QWORD *)(k + 8))
      {
        v40 = *(_DWORD *)(k + 16);
        *(_QWORD *)v190 = 0;
        v41 = 9 * v40;
        vDSP_dotprD((const double *)(v180 + 72 * v40), 1, v188.f64, 1, (double *)v190, 3uLL);
        if (*(double *)v190 > -0.00000011920929)
        {
          v165 = 0.0;
          vDSP_dotprD((const double *)(v180 + 8 * (v41 + 3)), 1, v188.f64, 1, &v165, 3uLL);
          if (v165 > -0.00000011920929)
          {
            v164 = 0.0;
            vDSP_dotprD((const double *)(v180 + 8 * (v41 + 6)), 1, v188.f64, 1, &v164, 3uLL);
            if (v164 > -0.00000011920929)
            {
              v48 = 0;
              v49 = (int *)(v179 + 12 * v40);
              v50 = vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v173[2] + 12 * *v49));
              v42.f64[0] = *(float *)(*(_QWORD *)&v173[2] + 4 * (3 * *v49 + 2));
              v51 = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
              v52 = vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v173[2] + 12 * v49[1]));
              v43.f64[0] = *(float *)(*(_QWORD *)&v173[2] + 4 * (3 * v49[1] + 2));
              v53 = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
              v54 = vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v173[2] + 12 * v49[2]));
              v44.f64[0] = *(float *)(*(_QWORD *)&v173[2] + 4 * (3 * v49[2] + 2));
              v55 = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
              v56 = vmulq_f64(v42, v43).f64[0] + vaddvq_f64(vmulq_f64(v50, v52));
              v57 = vmulq_f64(v43, v44).f64[0] + vaddvq_f64(vmulq_f64(v52, v54));
              v58 = vmulq_f64(v42, v44).f64[0] + vaddvq_f64(vmulq_f64(v50, v54));
              v59 = 1.0 - v56 * v56;
              v60 = -(v58 - v56 * v57) / v59;
              v61 = -(v57 - v56 * v58) / v59;
              v62 = 0uLL;
              v63 = 0uLL;
              v64 = 0uLL;
              v65 = 0uLL;
              do
              {
                v66 = v65;
                *(float64_t *)&v67 = v52.f64[0];
                *((_QWORD *)&v67 + 1) = v53;
                v149[0] = v67;
                v149[1] = v43;
                v68 = *((double *)v149 + (v48 & 3));
                *(float64_t *)&v67 = v50.f64[0];
                *((_QWORD *)&v67 + 1) = v51;
                v148[0] = v67;
                v148[1] = v42;
                v69 = *((double *)v148 + (v48 & 3));
                v146 = v64;
                v147 = v66;
                v146.f64[v48 & 3] = v68 - v69 * v56;
                v64 = v146;
                v65.f64[0] = v147.f64[0];
                v65.f64[1] = v66.f64[1];
                v66.f64[0] = v54.f64[0];
                *(_QWORD *)&v66.f64[1] = v55;
                v145[0] = v66;
                v145[1] = v44;
                v66.f64[0] = *((float64_t *)v145 + (v48 & 3));
                v143 = v62;
                v144 = v63;
                v143.f64[v48 & 3] = v66.f64[0] + v61 * v68 + v60 * v69;
                v62 = v143;
                v63.f64[0] = v144.f64[0];
                ++v48;
              }
              while (v48 != 3);
              v70.f64[0] = v140;
              *(_QWORD *)&v70.f64[1] = v139;
              v72 = vmulq_f64(v65, v65);
              v71 = v72.f64[0] + vaddvq_f64(vmulq_f64(v64, v64));
              v72.f64[0] = 0.0;
              v73 = 0.0;
              v8 = v37;
              if (v71 >= 0.00000999999975)
                v73 = (vmulq_f64(v141, v65).f64[0] + vaddvq_f64(vmulq_f64(v70, v64))) / v71;
              v74 = vmulq_f64(v63, v63).f64[0] + vaddvq_f64(vmulq_f64(v143, v143));
              v22 = v36;
              if (v74 >= 0.00000999999975)
              {
                v72 = vmulq_f64(v141, v63);
                v72.f64[0] = (v72.f64[0] + vaddvq_f64(vmulq_f64(v70, v143))) / v74;
              }
              v75 = vmulq_f64(v141, v42).f64[0] + vaddvq_f64(vmulq_f64(v70, v50)) - v73 * v56 + v72.f64[0] * v60;
              v76 = v73 + v72.f64[0] * v61;
              v77.f64[0] = v75;
              v77.f64[1] = v76;
              v78 = vmulq_f64(v72, v72).f64[0] + vaddvq_f64(vmulq_f64(v77, v77));
              v79 = 0uLL;
              v80 = 0uLL;
              v23 = v138;
              if (v78 > 0.00000999999975)
              {
                v81 = 1.0 / sqrt(v78);
                *(double *)v79.i64 = v75 * v81;
                v82 = v76 * v81;
                *(double *)&v80 = v72.f64[0] * v81;
                *(double *)&v79.i64[1] = v82;
              }
              v83 = 0;
              v84 = v184;
              v85 = vextq_s8(v79, v79, 8uLL).u64[0];
              v86 = v176;
              do
              {
                v87 = v49[v83];
                *(_QWORD *)&v88 = v79.i64[0];
                *((_QWORD *)&v88 + 1) = v85;
                v142[0] = v88;
                v142[1] = v80;
                v89 = *((double *)v142 + (v83 & 3));
                if (v87 >= v84)
                {
                  v91 = v87 - v84;
                  v92 = v89 + v86[v91];
                  v86[v91] = v92;
                }
                else
                {
                  v90 = v89;
                  v26[v87] = v90;
                }
                ++v83;
              }
              while (v83 != 3);
              v190[2] = 0;
              *(_QWORD *)v190 = 0;
              v93 = 0;
              if ((_DWORD)v84)
              {
                v94 = v26;
                v95 = v84;
                do
                {
                  if (*v94 >= 0.00001)
                    v190[v93++] = *(_DWORD *)v94;
                  else
                    *v94 = 0.0;
                  ++v94;
                  --v95;
                }
                while (v95);
              }
              LODWORD(v188.f64[1]) = 0;
              v188.f64[0] = 0.0;
              v96 = v185;
              if (v185)
              {
                v97 = 0;
                v98 = 0;
                v99 = v176;
                do
                {
                  v100 = v99[v97];
                  if (v100 >= 0.00001)
                    *((float *)v188.f64 + v98++) = v100;
                  else
                    v99[v97] = 0.0;
                  ++v97;
                }
                while (v96 > v97);
                v165 = 0.0;
                if (!v93 && v98 == 1)
                {
                  *(float32x2_t *)v79.i8 = vcvt_f32_f64(vdivq_f64((float64x2_t)xmmword_18F116FD0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt((double)v84) * *(float *)v188.f64), 0)));
                  goto LABEL_79;
                }
                if (v93 || v98 != 2)
                {
                  if (v93 == 1 && v98 == 1)
                  {
                    v101 = sqrtf((float)((float)v84+ (float)((float)-(float)(*(float *)v190 * (float)v84) * *(float *)v190))+ (float)(*(float *)v190 * *(float *)v190));
                    v102 = *(float *)v188.f64 * (float)v84;
                    v103 = (float)-(float)(*(float *)v190 + v101) / v102;
                    *(float *)&v165 = (float)-(float)(*(float *)v190 - v101) / v102;
                  }
                  else if (v93 == 1 && v98 == 2)
                  {
                    v104 = *(float *)v190;
                    v105 = *(float *)v188.f64 * (float)v84;
                    v106 = *((float *)v188.f64 + 1) * (float)v84;
                    v107 = sqrtf((float)((float)((float)((float)((float)((float)(*(float *)v188.f64 * v105)+ (float)((float)(*(float *)v188.f64+ *(float *)v188.f64)* *((float *)v188.f64 + 1)))+ (float)(v106 * *((float *)v188.f64 + 1)))+ (float)((float)((float)(v104 * v104) * *(float *)v188.f64)* *(float *)v188.f64))+ (float)((float)((float)(v104 * v104) * *((float *)v188.f64 + 1))* *((float *)v188.f64 + 1)))+ (float)((float)(*(float *)v188.f64* (float)(v104 * (float)-(float)(v104 * (float)v84)))* *(float *)v188.f64))+ (float)((float)(*((float *)v188.f64 + 1)* (float)(v104 * (float)-(float)(v104 * (float)v84)))* *((float *)v188.f64 + 1)));
                    v108 = (float)((float)((float)(*(float *)v188.f64 + *(float *)v188.f64) * *((float *)v188.f64 + 1))
                                 + (float)(v105 * *(float *)v188.f64))
                         + (float)(v106 * *((float *)v188.f64 + 1));
                    v109 = (float)-(float)((float)(v107 + (float)(v104 * *(float *)v188.f64))
                                         + (float)(v104 * *((float *)v188.f64 + 1)))
                         / v108;
                    v103 = (float)-(float)((float)(*(float *)v190 * *((float *)v188.f64 + 1))
                                         - (float)(v107 - (float)(*(float *)v190 * *(float *)v188.f64)))
                         / v108;
                    *(float *)&v165 = v109;
                  }
                  else
                  {
                    if (v93 != 2 || v98 != 1)
                      goto LABEL_90;
                    v110 = sqrtf((float)((float)((float)((float)((float)v84+ (float)((float)(*(float *)v190 + *(float *)v190)* *(float *)&v190[1]))+ (float)((float)-(float)(*(float *)v190 * (float)v84)* *(float *)v190))+ (float)((float)-(float)(*(float *)&v190[1] * (float)v84)* *(float *)&v190[1]))+ (float)(*(float *)v190 * *(float *)v190))+ (float)(*(float *)&v190[1] * *(float *)&v190[1]));
                    v111 = *(float *)v188.f64 * (float)v84;
                    v112 = (float)-(float)((float)(*(float *)v190 + *(float *)&v190[1]) - v110) / v111;
                    v103 = (float)-(float)((float)(*(float *)v190 + *(float *)&v190[1]) + v110) / v111;
                    *(float *)&v165 = v112;
                  }
                  *((float *)&v165 + 1) = v103;
                }
                else
                {
                  *(float *)v79.i32 = sqrtf((float)((float)((float)((float)(*(float *)v188.f64* (float)(*(float *)v188.f64* (float)v84))+ (float)((float)(*(float *)v188.f64 + *(float *)v188.f64)* *((float *)v188.f64 + 1)))+ (float)((float)(*((float *)v188.f64 + 1)* (float)v84)* *((float *)v188.f64 + 1)))+ (float)(*(float *)v188.f64 * *(float *)v188.f64))+ (float)(*((float *)v188.f64 + 1) * *((float *)v188.f64 + 1)));
                  *(float32x2_t *)v79.i8 = vdiv_f32((float32x2_t)0xBF8000003F800000, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v79.i8, 0));
LABEL_79:
                  v165 = *(double *)v79.i64;
                }
              }
              else
              {
                v165 = 0.0;
              }
LABEL_90:
              LODWORD(v164) = 0;
              vDSP_maxv((const float *)&v165, 1, (float *)&v164, 2uLL);
              if (*(_DWORD *)buf)
              {
                v113 = 0;
                v114 = v184;
                v115 = v178;
                v116 = v176;
                v117 = v175;
                do
                {
                  v118 = v49[v113];
                  v119 = v118 >= v114;
                  v120 = v118 - v114;
                  if (v119)
                  {
                    v121 = *(_QWORD *)(v115 + 24 * v120);
                    v122 = *(_QWORD *)(v115 + 24 * v120 + 8);
                    v123 = v122 - v121;
                    if (v122 != v121)
                    {
                      v124 = 0;
                      v125 = v123 >> 2;
                      do
                      {
                        v26[*(unsigned int *)(v121 + 4 * v124)] = v26[*(unsigned int *)(v121 + 4 * v124)]
                                                                + (float)((float)(v116[v120] / (float)v125)
                                                                        / *(float *)(v117 + 4 * v120));
                        ++v124;
                      }
                      while (v125 > v124);
                    }
                  }
                  ++v113;
                }
                while (v113 != 3);
              }
              else
              {
                v163 = 0.0;
                vDSP_sve(v176, 1, &v163, v185);
                v163 = *(float *)&v164 * v163;
                vDSP_vsadd(v26, 1, &v163, v26, 1, v184);
                v114 = v184;
              }
              v163 = 0.0;
              vDSP_svesq(v26, 1, &v163, v114);
              v163 = 1.0 / sqrtf(v163);
              vDSP_vsmul(v26, 1, &v163, v26, 1, v184);
              goto LABEL_42;
            }
          }
        }
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v190[0] = 136315906;
        *(_QWORD *)&v190[1] = "VBAP.cpp";
        LOWORD(v190[3]) = 1024;
        *(_DWORD *)((char *)&v190[3] + 2) = 349;
        HIWORD(v190[4]) = 2080;
        *(_QWORD *)&v190[5] = "triangleLookup";
        v191 = 1024;
        v192 = 349;
        _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Triangle lookup error",
          (uint8_t *)v190,
          0x22u);
      }
      v134 = 4294964151;
      v8 = v37;
      goto LABEL_117;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v190[0] = 136315906;
      *(_QWORD *)&v190[1] = "VBAP.cpp";
      LOWORD(v190[3]) = 1024;
      *(_DWORD *)((char *)&v190[3] + 2) = 322;
      HIWORD(v190[4]) = 2080;
      *(_QWORD *)&v190[5] = "triangleLookup";
      v191 = 1024;
      v192 = 322;
      v136 = MEMORY[0x1E0C81028];
      v137 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Triangle lookup error";
      goto LABEL_149;
    }
LABEL_150:
    v134 = 4294967246;
  }
  else
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_150;
    v190[0] = 136315906;
    *(_QWORD *)&v190[1] = "VBAP.cpp";
    LOWORD(v190[3]) = 1024;
    *(_DWORD *)((char *)&v190[3] + 2) = 316;
    HIWORD(v190[4]) = 2080;
    *(_QWORD *)&v190[5] = "triangleLookup";
    v191 = 1024;
    v192 = 316;
    v136 = MEMORY[0x1E0C81028];
    v137 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; VBAP object not initialized";
LABEL_149:
    _os_log_impl(&dword_18EE07000, v136, OS_LOG_TYPE_ERROR, v137, (uint8_t *)v190, 0x22u);
    v134 = 4294967246;
  }
LABEL_117:
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v190[0] = 136315906;
    *(_QWORD *)&v190[1] = "VBAP.cpp";
    LOWORD(v190[3]) = 1024;
    *(_DWORD *)((char *)&v190[3] + 2) = 619;
    HIWORD(v190[4]) = 2080;
    *(_QWORD *)&v190[5] = "calculateVBAPGains";
    v191 = 1024;
    v192 = 619;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Triangle lookup failed",
      (uint8_t *)v190,
      0x22u);
  }
LABEL_128:
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v190[0] = 136315906;
    *(_QWORD *)&v190[1] = "HOA.cpp";
    LOWORD(v190[3]) = 1024;
    *(_DWORD *)((char *)&v190[3] + 2) = 863;
    HIWORD(v190[4]) = 2080;
    *(_QWORD *)&v190[5] = "createALLRAD";
    v191 = 1024;
    v192 = 863;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; VBAP calculation error",
      (uint8_t *)v190,
      0x22u);
  }
LABEL_130:
  if (v162[0])
  {
    v162[1] = v162[0];
    operator delete(v162[0]);
  }
  if (v150[0])
  {
    v150[1] = v150[0];
    operator delete(v150[0]);
  }
  if (v152[0])
  {
    v152[1] = v152[0];
    operator delete(v152[0]);
  }
  if (__C[0])
  {
    __C[1] = __C[0];
    operator delete(__C[0]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  if (__B[0])
  {
    __B[1] = __B[0];
    operator delete(__B[0]);
  }
  VBAP::~VBAP((VBAP *)buf);
  v129 = *a1;
LABEL_143:
  if (a1[1] != v129)
  {
    v135 = a1[5] * a1[3];
    *(_DWORD *)buf = 0;
    std::vector<float>::resize(v8, v135, buf);
  }
  return v134;
}

void sub_18EF43A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a69;
  uint64_t v69;
  void *v71;

  v71 = *(void **)(v69 - 176);
  if (v71)
  {
    *(_QWORD *)(v69 - 168) = v71;
    operator delete(v71);
  }
  if (__p)
    operator delete(__p);
  if (a48)
    operator delete(a48);
  if (a51)
    operator delete(a51);
  if (a54)
    operator delete(a54);
  VBAP::~VBAP((VBAP *)&a69);
  _Unwind_Resume(a1);
}

void std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        std::__list_imp<ID3FrameInfo>::clear(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<float>::resize(char **a1, unint64_t a2, _DWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *i;
  int v22;
  char *v23;
  uint64_t v24;

  v6 = *a1;
  v5 = a1[1];
  v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[4 * a2];
  }
  else
  {
    v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 2)
    {
      v23 = &v5[4 * (a2 - v7)];
      v24 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)v5 = *a3;
        v5 += 4;
        v24 -= 4;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v10 = v9 - v6;
      v11 = (v9 - v6) >> 1;
      if (v11 <= a2)
        v11 = a2;
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v12);
      v15 = &v13[4 * v7];
      v16 = &v13[4 * a2];
      v17 = 4 * a2 - 4 * v7;
      v18 = v15;
      do
      {
        *(_DWORD *)v18 = *a3;
        v18 += 4;
        v17 -= 4;
      }
      while (v17);
      v19 = &v13[4 * v14];
      v20 = *a1;
      for (i = a1[1]; i != v20; i -= 4)
      {
        v22 = *((_DWORD *)i - 1);
        *((_DWORD *)v15 - 1) = v22;
        v15 -= 4;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

void *audioipc::current_render_context(audioipc *this)
{
  uint64_t v1;
  uint64_t v2;
  int base_priority;
  void *v4;
  void *v5;
  caulk::mach::thread *v7;
  _opaque_pthread_t *v8;

  v1 = audioipc::tlsRenderThreadState();
  v2 = mach_absolute_time();
  if (v2 > *(_QWORD *)(v1 + 8) || (base_priority = *(_DWORD *)v1) == 0)
  {
    v7 = (caulk::mach::thread *)pthread_self();
    base_priority = caulk::mach::thread::get_base_priority(v7, v8);
    *(_DWORD *)v1 = base_priority;
    *(_QWORD *)(v1 + 8) = v2 + 480000;
  }
  if (base_priority < 96)
    return (void *)base_priority;
  v4 = (void *)os_workgroup_interval_copy_current_4AudioToolbox();
  if (!v4)
    return (void *)base_priority;
  v5 = v4;
  os_release(v4);
  return v5;
}

void gsl::narrowing_error::~narrowing_error(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x193FFE460);
}

uint64_t audioipc::SharedAudioBuffers::Element::Element(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  std::vector<char>::value_type __x;
  std::vector<char>::value_type v10;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  if ((*((_DWORD *)a2 + 3) & 0x20) != 0)
    v6 = *((unsigned int *)a2 + 7);
  else
    v6 = 1;
  __x = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 48), (16 * v6) | 8, &__x);
  **(_DWORD **)(a1 + 48) = v6;
  if ((*((_DWORD *)a2 + 3) & 0x20) != 0)
    v7 = *((unsigned int *)a2 + 7);
  else
    v7 = 1;
  v10 = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 72), (16 * v7) | 8, &v10);
  **(_DWORD **)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return a1;
}

void sub_18EF43E48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<audioipc::SharedAudioBuffers::Element>>(unint64_t a1)
{
  if (a1 >> 57)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a1 << 7);
}

uint64_t *std::vector<audioipc::SharedAudioBuffers::Element>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_OWORD *)(v2 + v5 - 128);
      v9 = *(_OWORD *)(v2 + v5 - 96);
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(_OWORD *)(v6 - 96) = v9;
      *(_OWORD *)(v6 - 128) = v8;
      *(_QWORD *)(v6 - 72) = 0;
      *(_QWORD *)(v6 - 64) = 0;
      *(_QWORD *)(v6 - 80) = 0;
      *(_OWORD *)(v6 - 80) = *(_OWORD *)(v2 + v5 - 80);
      *(_QWORD *)(v6 - 64) = *(_QWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v7 - 80) = 0;
      *(_QWORD *)(v7 - 72) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v6 - 56) = 0;
      *(_QWORD *)(v6 - 48) = 0;
      *(_QWORD *)(v6 - 40) = 0;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      v10 = *(_OWORD *)(v2 + v5 - 16);
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 16) = v10;
      v5 -= 128;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v11 = *result;
  *result = v4;
  a2[1] = v11;
  v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<audioipc::SharedAudioBuffers::Element>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 128;
    std::__destroy_at[abi:ne180100]<audioipc::SharedAudioBuffers::Element,0>((_QWORD *)(i - 128));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t audioipc::eventlink_primitive::timed_wait_or_error(audioipc::eventlink_primitive *this, double a2)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned int v6;

  os_retain(this);
  v3 = os_eventlink_wait_until();
  if (v3)
  {
    if (v3 == 60)
      v4 = 0x100000000;
    else
      v4 = 0;
    if (v3 == 60)
      v5 = 0;
    else
      v5 = v3;
    if (v3 == 60)
      v6 = 0;
    else
      v6 = v3 & 0xFFFFFF00;
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v4 = 0x100000000;
  }
  os_release(this);
  return v4 | v6 | v5;
}

void sub_18EF4403C(_Unwind_Exception *a1)
{
  void *v1;

  os_release(v1);
  _Unwind_Resume(a1);
}

uint64_t audioipc::eventlink_primitive::timed_wait_signal_or_error(audioipc::eventlink_primitive *this, double a2)
{
  int v3;
  unsigned __int8 v4;
  unsigned int v5;
  uint64_t v6;

  os_retain(this);
  v3 = os_eventlink_signal_and_wait_until();
  v4 = v3;
  if (v3)
  {
    if (v3 != 60)
    {
      v6 = 0;
      v5 = v3 & 0xFFFFFF00;
      goto LABEL_7;
    }
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = 0x100000000;
LABEL_7:
  os_release(this);
  return v6 | v5 | v4;
}

void sub_18EF44108(_Unwind_Exception *a1)
{
  void *v1;

  os_release(v1);
  _Unwind_Resume(a1);
}

unint64_t audioipc::eventlink_primitive::wait_signal_or_error(audioipc::eventlink_primitive *this)
{
  unsigned int v2;

  os_retain(this);
  v2 = os_eventlink_signal_and_wait();
  os_release(this);
  return v2 | ((unint64_t)(v2 == 0) << 32);
}

void sub_18EF44178(_Unwind_Exception *a1)
{
  void *v1;

  os_release(v1);
  _Unwind_Resume(a1);
}

unint64_t audioipc::eventlink_primitive::wait_or_error(audioipc::eventlink_primitive *this)
{
  unsigned int v2;

  os_retain(this);
  v2 = os_eventlink_wait();
  os_release(this);
  return v2 | ((unint64_t)(v2 == 0) << 32);
}

void sub_18EF441E8(_Unwind_Exception *a1)
{
  void *v1;

  os_release(v1);
  _Unwind_Resume(a1);
}

void AMRAudioFile::~AMRAudioFile(AMRAudioFile *this)
{
  AudioFileObject::~AudioFileObject(this);
  JUMPOUT(0x193FFE460);
}

uint64_t AMRAudioFile::Create(AMRAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t result;
  AudioFormatID mFormatID;
  UInt32 mFramesPerPacket;
  unsigned int v9;

  result = 1718449215;
  mFormatID = a3->mFormatID;
  if (mFormatID == 1935767394 || mFormatID == 1935764850)
  {
    result = AudioFileObject::Create(this, a2, a3);
    if (!(_DWORD)result)
    {
      if (a3->mFormatID == 1935767394)
        *((_BYTE *)this + 152) = 1;
      mFramesPerPacket = a3->mFramesPerPacket;
      if (!mFramesPerPacket
        || (*((_BYTE *)this + 152) ? (v9 = 320) : (v9 = 160),
            *((_DWORD *)this + 36) = mFramesPerPacket / v9,
            result = 1718449215,
            v9 <= mFramesPerPacket))
      {
        (*(void (**)(AMRAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, a3->mBytesPerFrame);
        AMRAudioFile::WriteHeader(this);
        return 0;
      }
    }
  }
  return result;
}

uint64_t AMRAudioFile::OpenFromDataSource(AMRAudioFile *this)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  int v7;
  _BYTE *v8;
  __int16 v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v14;
  UInt32 ioPropertyDataSize;
  uint64_t outPropertyData;
  __int128 v17;
  __int128 v18;
  _BYTE inSpecifier[14];
  _BYTE v20[7];
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  __int16 v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 100) & 2) != 0)
    return 1886547263;
  LODWORD(outPropertyData) = 9;
  (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, _BYTE *, uint64_t *))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13), 0, 0, 9, inSpecifier, &outPropertyData);
  if (*(_DWORD *)inSpecifier != 1296113955 || *(unsigned __int16 *)&inSpecifier[4] != 2642)
  {
    if (*(_QWORD *)inSpecifier != 0x42572D524D412123 || inSpecifier[8] != 10)
    {
      v4 = 1718449215;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)inSpecifier = 136315394;
        *(_QWORD *)&inSpecifier[4] = "AMRAudioFile.cpp";
        *(_WORD *)&inSpecifier[12] = 1024;
        *(_DWORD *)v20 = 293;
        v5 = MEMORY[0x1E0C81028];
        v6 = "%25s:%-5d  AMRAudioFile::OpenFromDataSource - ReadHeader Failed";
LABEL_30:
        _os_log_impl(&dword_18EE07000, v5, OS_LOG_TYPE_ERROR, v6, inSpecifier, 0x12u);
        return v4;
      }
      return v4;
    }
    *((_BYTE *)this + 152) = 1;
    v8 = (char *)this + 152;
    v17 = 0u;
    v18 = 0u;
    *((_QWORD *)this + 9) = 9;
    LODWORD(v17) = 1935767394;
    outPropertyData = 0x40CF400000000000;
    goto LABEL_16;
  }
  v8 = (char *)this + 152;
  v7 = *((unsigned __int8 *)this + 152);
  v17 = 0u;
  v18 = 0u;
  if (v7)
  {
    *((_QWORD *)this + 9) = 9;
    outPropertyData = 0x40CF400000000000;
    LODWORD(v17) = 1935767394;
LABEL_16:
    DWORD1(v18) = 1;
    ioPropertyDataSize = 40;
    *(_QWORD *)inSpecifier = 0x616D72660C000000;
    strcpy(&inSpecifier[8], "sawb");
    inSpecifier[13] = 0;
    *(_WORD *)v20 = 2560;
    strcpy(&v20[2], "enda");
    v21 = 0;
    v22 = 0x726D616411000000;
    v23 = 1819308129;
    v9 = -125;
    v24 = 1;
    goto LABEL_18;
  }
  *((_QWORD *)this + 9) = 6;
  outPropertyData = 0x40BF400000000000;
  LODWORD(v17) = 1935764850;
  DWORD1(v18) = 1;
  ioPropertyDataSize = 40;
  *(_QWORD *)inSpecifier = 0x616D72660C000000;
  strcpy(&inSpecifier[8], "samr");
  inSpecifier[13] = 0;
  *(_WORD *)v20 = 2560;
  strcpy(&v20[2], "enda");
  v21 = 0;
  v22 = 0x726D616411000000;
  v23 = 1819308129;
  v24 = 1;
  v9 = -127;
LABEL_18:
  v25 = v9;
  v26 = 3840;
  v27 = 0x8000000;
  AudioFormatGetProperty(0x666D7469u, 0x2Fu, inSpecifier, &ioPropertyDataSize, &outPropertyData);
  if (HIDWORD(v17))
  {
    if (*v8)
      v10 = 320;
    else
      v10 = 160;
    v11 = HIDWORD(v17) / v10;
  }
  else
  {
    if (*v8)
      v12 = 4800;
    else
      v12 = 2400;
    HIDWORD(v17) = v12;
    v11 = 15;
  }
  *((_DWORD *)this + 36) = v11;
  v4 = (*(uint64_t (**)(AMRAudioFile *, uint64_t *))(*(_QWORD *)this + 176))(this, &outPropertyData);
  if (!(_DWORD)v4)
  {
    v14 = 0;
    (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v14);
    (*(void (**)(AMRAudioFile *, uint64_t))(*(_QWORD *)this + 232))(this, v14 - *((_QWORD *)this + 9));
    (*(void (**)(AMRAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, 1, 0, 1);
    return v4;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)inSpecifier = 136315394;
    *(_QWORD *)&inSpecifier[4] = "AMRAudioFile.cpp";
    *(_WORD *)&inSpecifier[12] = 1024;
    *(_DWORD *)v20 = 296;
    v5 = MEMORY[0x1E0C81028];
    v6 = "%25s:%-5d  AMRAudioFile::OpenFromDataSource - ParseHeader Failed";
    goto LABEL_30;
  }
  return v4;
}

uint64_t AMRAudioFile::InitializeDataSource(AMRAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v4;
  AudioFormatID mFormatID;
  UInt32 mFramesPerPacket;
  unsigned int v7;

  v4 = 1718449215;
  mFormatID = a2->mFormatID;
  if (mFormatID != 1935764850)
  {
    if (mFormatID != 1935767394)
      return v4;
    *((_BYTE *)this + 152) = 1;
  }
  AMRAudioFile::WriteHeader(this);
  mFramesPerPacket = a2->mFramesPerPacket;
  if (!mFramesPerPacket)
    return 0;
  v7 = *((_BYTE *)this + 152) ? 320 : 160;
  *((_DWORD *)this + 36) = mFramesPerPacket / v7;
  if (v7 <= mFramesPerPacket)
    return 0;
  return v4;
}

uint64_t AMRAudioFile::ReadPackets(AMRAudioFile *this, unsigned int a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  BOOL v7;
  char v8;
  uint64_t v10;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  UInt32 *p_mVariableFramesInPacket;
  UInt32 v28;
  unsigned int v29;
  unint64_t v30;
  UInt32 *v31;
  UInt32 v32;
  uint64_t v33;
  unsigned int *v35;
  _BOOL4 v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  _BYTE buf[12];
  _DWORD v41[3];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (a4)
    v7 = a7 == 0;
  else
    v7 = 0;
  v8 = v7;
  if (a6)
  {
    v10 = *a6;
    if ((_DWORD)v10)
    {
      if (a5 < 0)
      {
        v18 = 2003334207;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          return v18;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AMRAudioFile.cpp";
        LOWORD(v41[0]) = 1024;
        *(_DWORD *)((char *)v41 + 2) = 744;
        v19 = MEMORY[0x1E0C81028];
        v20 = "%25s:%-5d  invalid starting packet parameter";
        goto LABEL_15;
      }
      v17 = (*(uint64_t (**)(AMRAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, v10 + a5, 0, 1);
      if ((_DWORD)v17)
      {
        v18 = v17;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AMRAudioFile.cpp";
          LOWORD(v41[0]) = 1024;
          *(_DWORD *)((char *)v41 + 2) = 748;
          v19 = MEMORY[0x1E0C81028];
          v20 = "%25s:%-5d  ScanForPackets (AMR) failed";
LABEL_15:
          _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
          return v18;
        }
        return v18;
      }
      v22 = (uint64_t *)*((_QWORD *)this + 15);
      if (!v22)
        return 1685348671;
      v39 = 0;
      v23 = v22[3];
      if (a3)
        *a3 = 0;
      v24 = *a6;
      if (v24 + a5 > v23)
      {
        LODWORD(v24) = v23 - a5;
        *a6 = v23 - a5;
      }
      if (!(_DWORD)v24)
      {
        if (a3)
          *a3 = 0;
        return 4294967257;
      }
      v37 = a3;
      CompressedPacketTable::operator[]((uint64_t)buf, v22, a5);
      v38 = *(_QWORD *)buf;
      v25 = *a6;
      if ((v8 & 1) != 0)
      {
        if (v25)
        {
          v26 = 0;
          p_mVariableFramesInPacket = &a4->mVariableFramesInPacket;
          do
          {
            CompressedPacketTable::operator[]((uint64_t)buf, v22, a5 + v26);
            v28 = v41[0];
            *((_QWORD *)p_mVariableFramesInPacket - 1) = *(_QWORD *)buf - v38;
            *p_mVariableFramesInPacket = 0;
            p_mVariableFramesInPacket[1] = v28;
            p_mVariableFramesInPacket += 4;
            ++v26;
          }
          while (v26 < *a6);
        }
        v18 = 0;
        v39 = 0;
      }
      else
      {
        if (v25)
        {
          v29 = 0;
          v30 = 0;
          v31 = &a4->mVariableFramesInPacket;
          do
          {
            CompressedPacketTable::operator[]((uint64_t)buf, v22, a5 + v30);
            v32 = v41[0];
            v29 += v41[0];
            v39 = v29;
            if (a4)
            {
              *((_QWORD *)v31 - 1) = *(_QWORD *)buf - v38;
              *v31 = 0;
              v31[1] = v32;
            }
            ++v30;
            v31 += 4;
          }
          while (v30 < *a6);
        }
        CompressedPacketTable::operator[]((uint64_t)buf, v22, a5);
        v33 = (*(uint64_t (**)(AMRAudioFile *, _QWORD, _QWORD, unsigned int *, void *))(*(_QWORD *)this + 72))(this, a2, *(_QWORD *)buf, &v39, a7);
        v18 = v33;
        if ((_DWORD)v33 != -39 && (_DWORD)v33 != 0)
        {
          v36 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
          v35 = v37;
          if (v36)
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AMRAudioFile.cpp";
            LOWORD(v41[0]) = 1024;
            *(_DWORD *)((char *)v41 + 2) = 827;
            _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes failed", buf, 0x12u);
          }
          if ((_DWORD)v18 != -39)
            return v18;
LABEL_45:
          if (v35)
            *v35 = v39;
          return v18;
        }
      }
      v35 = v37;
      goto LABEL_45;
    }
  }
  v18 = 2003334207;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AMRAudioFile.cpp";
    LOWORD(v41[0]) = 1024;
    *(_DWORD *)((char *)v41 + 2) = 743;
    v19 = MEMORY[0x1E0C81028];
    v20 = "%25s:%-5d  invalid num packets parameter";
    goto LABEL_15;
  }
  return v18;
}

uint64_t AMRAudioFile::WritePackets(AMRAudioFile *this, uint64_t a2, uint64_t a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  uint64_t mDataByteSize;
  unsigned __int8 *v26;
  __int16 *v27;
  unsigned __int8 *v28;
  int v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  unint64_t v33;
  UInt32 *p_mDataByteSize;
  SInt64 v35;
  UInt32 v36;
  _DWORD v37[6];
  AudioStreamPacketDescription v38;
  int v39;
  _BYTE buf[12];
  _DWORD v41[3];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 10))
    return AudioFileObject::WritePackets(this, a2, a3, a4, a5, a6, a7);
  if (!*((_DWORD *)this + 36))
  {
    v14 = 2003334207;
    v15 = *((_DWORD *)this + 11);
    if (!v15)
    {
      mDataByteSize = a4->mDataByteSize;
      if ((_DWORD)mDataByteSize)
      {
        v17 = 0;
        v26 = (unsigned __int8 *)&a7[mDataByteSize];
        if (*((_BYTE *)this + 152))
          v27 = (__int16 *)&_AMR_WB_FRAMESIZE;
        else
          v27 = (__int16 *)&_AMR_NB_FRAMESIZE;
        v28 = (unsigned __int8 *)a7;
        while (v27[((unint64_t)*v28 >> 3) & 0xF])
        {
          ++v17;
          v28 += v27[((unint64_t)*v28 >> 3) & 0xF];
          if (v28 >= v26)
            goto LABEL_9;
        }
      }
      *((_DWORD *)this + 36) = 0;
      return v14;
    }
    v16 = *((_BYTE *)this + 152) ? 320 : 160;
    v17 = v15 / v16;
LABEL_9:
    *((_DWORD *)this + 36) = v17;
    if (!v17)
      return v14;
  }
  if (!a6)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AMRAudioFile.cpp";
    LOWORD(v41[0]) = 1024;
    *(_DWORD *)((char *)v41 + 2) = 874;
    v23 = MEMORY[0x1E0C81028];
    v24 = "%25s:%-5d  WritePackets Failed - ioNumPackets == NULL";
LABEL_22:
    _os_log_impl(&dword_18EE07000, v23, OS_LOG_TYPE_ERROR, v24, buf, 0x12u);
    return 0;
  }
  if (!*a6)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AMRAudioFile.cpp";
    LOWORD(v41[0]) = 1024;
    *(_DWORD *)((char *)v41 + 2) = 875;
    v23 = MEMORY[0x1E0C81028];
    v24 = "%25s:%-5d  WritePackets Failed - *ioNumPackets == 0";
    goto LABEL_22;
  }
  v39 = 0;
  v38.mStartOffset = 0;
  *(_QWORD *)&v38.mVariableFramesInPacket = 0;
  (*(void (**)(AMRAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1);
  v18 = *((_QWORD *)this + 15);
  if (!v18)
  {
    if (!a5)
    {
      v18 = operator new();
      v29 = *((_DWORD *)this + 11);
      *(_OWORD *)v18 = 0u;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_DWORD *)(v18 + 32) = v29;
      *((_QWORD *)this + 15) = v18;
      if (a4)
        goto LABEL_15;
      goto LABEL_34;
    }
    return 1885563711;
  }
  if (*(_QWORD *)(v18 + 24) != a5)
    return 1885563711;
  if (a4)
  {
LABEL_15:
    v19 = *((_QWORD *)this + 9);
    v20 = *(_QWORD *)(v18 + 24);
    if (v20)
    {
      CompressedPacketTable::operator[]((uint64_t)buf, (uint64_t *)v18, v20 - 1);
      v21 = *((_QWORD *)this + 15);
      if (v21)
        v22 = *(_QWORD *)(v21 + 24) - 1;
      else
        v22 = -1;
      v32 = *(_QWORD *)buf;
      CompressedPacketTable::operator[]((uint64_t)v37, (uint64_t *)v18, v22);
      v20 = v32 + v37[3];
    }
    v14 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *, int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, v20 + v19, a3, a7, &v39);
    if ((_DWORD)v14)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AMRAudioFile.cpp";
        LOWORD(v41[0]) = 1024;
        *(_DWORD *)((char *)v41 + 2) = 896;
        v30 = MEMORY[0x1E0C81028];
        v31 = "%25s:%-5d  GetDataSource()->WriteBytes Failed";
        goto LABEL_43;
      }
      return v14;
    }
    if (*a6)
    {
      v33 = 0;
      p_mDataByteSize = &a4->mDataByteSize;
      do
      {
        v35 = *((_QWORD *)this + 15);
        if (v35)
        {
          v35 = *(_QWORD *)(v35 + 24);
          if (v35)
          {
            CompressedPacketTable::operator[]((uint64_t)buf, (uint64_t *)v18, v35 - 1);
            v35 = *(_QWORD *)buf + v41[0];
          }
        }
        v38.mStartOffset = v35;
        v36 = *p_mDataByteSize;
        v38.mVariableFramesInPacket = 0;
        v38.mDataByteSize = v36;
        AudioFileObject::AppendPacket(this, &v38);
        ++v33;
        p_mDataByteSize += 4;
      }
      while (v33 < *a6);
    }
    return 0;
  }
LABEL_34:
  v14 = 1885563711;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AMRAudioFile.cpp";
    LOWORD(v41[0]) = 1024;
    *(_DWORD *)((char *)v41 + 2) = 890;
    v30 = MEMORY[0x1E0C81028];
    v31 = "%25s:%-5d  Packet Descriptions were not provided";
LABEL_43:
    _os_log_impl(&dword_18EE07000, v30, OS_LOG_TYPE_ERROR, v31, buf, 0x12u);
  }
  return v14;
}

uint64_t AMRAudioFile::UpdateSize(AMRAudioFile *this)
{
  return 0;
}

uint64_t AMRAudioFile::GetNumBytes(AMRAudioFile *this)
{
  uint64_t v3;

  if ((*((_BYTE *)this + 100) & 2) != 0 && *((_DWORD *)this + 10))
    return *((_QWORD *)this + 1);
  v3 = 0;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v3);
  return v3 - *((_QWORD *)this + 9);
}

uint64_t AMRAudioFile::GetNumPackets(AMRAudioFile *this)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  int v5;

  if ((*((_BYTE *)this + 100) & 2) != 0 && *((_DWORD *)this + 10))
  {
    v2 = (char *)this + 16;
    return *(_QWORD *)v2;
  }
  if (*((_BYTE *)this + 140)
    || (v5 = (*(uint64_t (**)(AMRAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, -1, 0, 1), result = 0, !v5))
  {
    v3 = *((_QWORD *)this + 15);
    if (v3)
    {
      v2 = (char *)(v3 + 24);
      return *(_QWORD *)v2;
    }
    return 0;
  }
  return result;
}

uint64_t AMRAudioFile::GetMagicCookieDataSize(AMRAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3)
    *a3 = 1;
  if (a2)
    *a2 = 47;
  return 0;
}

double AMRAudioFile::GetMagicCookieData(AMRAudioFile *this, unsigned int *a2, char *a3)
{
  BOOL v3;
  int v4;
  __int16 v5;
  double result;

  if (*a2 >= 0x2F)
  {
    v3 = *((_BYTE *)this + 152) == 0;
    *(_QWORD *)a3 = 0x616D72660C000000;
    if (v3)
      v4 = 1919770995;
    else
      v4 = 1651990899;
    *((_DWORD *)a3 + 2) = v4;
    if (v3)
      v5 = -127;
    else
      v5 = -125;
    *(_QWORD *)(a3 + 12) = 0x61646E650A000000;
    *((_WORD *)a3 + 10) = 0;
    *(_QWORD *)(a3 + 22) = 0x726D616411000000;
    *(_DWORD *)(a3 + 30) = 1819308129;
    a3[34] = 1;
    *(_WORD *)(a3 + 35) = v5;
    *(_WORD *)(a3 + 37) = 3840;
    *(_QWORD *)&result = 0x8000000;
    *(_QWORD *)(a3 + 39) = 0x8000000;
    *a2 = 47;
  }
  return result;
}

uint64_t AMRAudioFile::SetMagicCookieData(AMRAudioFile *this, UInt32 a2, const void *a3)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  UInt32 ioPropertyDataSize;
  __int128 outPropertyData;
  __int128 v13;
  uint64_t v14;

  v4 = 1718449215;
  v5 = *(_OWORD *)((char *)this + 40);
  outPropertyData = *(_OWORD *)((char *)this + 24);
  v13 = v5;
  v14 = *((_QWORD *)this + 7);
  ioPropertyDataSize = 40;
  AudioFormatGetProperty(0x666D7469u, a2, a3, &ioPropertyDataSize, &outPropertyData);
  v6 = *((_DWORD *)this + 36);
  v7 = DWORD1(v13);
  if (!v6 || (*((_BYTE *)this + 152) ? (v8 = 320) : (v8 = 160), v6 == DWORD1(v13) / v8))
  {
    if (*((_BYTE *)this + 152))
      v9 = 320;
    else
      v9 = 160;
    *((_DWORD *)this + 36) = DWORD1(v13) / v9;
    if (v9 <= v7)
      return 0;
    else
      return 1718449215;
  }
  return v4;
}

uint64_t AMRAudioFile::GetInfoDictionary(AMRAudioFile *this, CACFDictionary *a2)
{
  AudioFileObject *v3;
  double v5;

  v5 = 0.0;
  v3 = (AudioFileObject *)(*(uint64_t (**)(AMRAudioFile *, double *))(*(_QWORD *)this + 544))(this, &v5);
  if ((_DWORD)v3)
    return 1886681407;
  AudioFileObject::AddDurationToInfoDictionary(v3, a2, &v5);
  return 0;
}

uint64_t AudioFileObject::GetLoudnessInfo(AudioFileObject *this, CACFDictionary *a2)
{
  return 1886681407;
}

uint64_t AMRAudioFile::GetEstimatedDuration(AMRAudioFile *this, double *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[12];
  unsigned int v15;
  _QWORD v16[3];
  uint64_t v17;

  v4 = *((double *)this + 3);
  v5 = *((unsigned int *)this + 11);
  if (*((_BYTE *)this + 140))
  {
    v6 = 0;
    v7 = (double)(*((unsigned int *)this + 37)
                + ((*(uint64_t (**)(AMRAudioFile *))(*(_QWORD *)this + 240))(this) - 1) * v5);
LABEL_3:
    *a2 = v7 / v4;
    return v6;
  }
  *a2 = 0.0;
  if ((*(unsigned int (**)(AMRAudioFile *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 688))(this, 1, 0, 1))
  {
    return 0;
  }
  v8 = *((_QWORD *)this + 15);
  if (!v8)
  {
    v8 = operator new();
    v9 = *((_DWORD *)this + 11);
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_DWORD *)(v8 + 32) = v9;
    *((_QWORD *)this + 15) = v8;
  }
  v17 = 0;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), &v17);
  if (!(_DWORD)v6)
  {
    v17 -= *((_QWORD *)this + 9);
    v11 = *((_QWORD *)this + 15);
    if (v11)
      v12 = *(_QWORD *)(v11 + 24);
    else
      v12 = 0;
    CompressedPacketTable::operator[]((uint64_t)v16, (uint64_t *)v8, v12 - 1);
    v13 = v16[0];
    CompressedPacketTable::operator[]((uint64_t)v14, (uint64_t *)v8, v12 - 1);
    v7 = (double)v17 / (double)(v13 + v15) * (double)(unint64_t)(v12 * v5);
    goto LABEL_3;
  }
  return v6;
}

BOOL AMRAudioFile::IsDataFormatSupported(AMRAudioFile *this, const AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID;

  mFormatID = a2->mFormatID;
  return mFormatID == 1935764850 || mFormatID == 1935767394;
}

uint64_t AMRAudioFile::ScanForPackets(AMRAudioFile *this, uint64_t a2, DataSource *a3, char a4)
{
  DataSource *v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  __int16 *v21;
  unsigned int v22;
  int v23;
  _BYTE v25[12];
  unsigned int v26;
  int v27;
  AudioStreamPacketDescription v28;
  uint64_t v29;
  _BYTE buf[12];
  __int16 v31;
  int v32;
  uint64_t v33;

  v4 = a3;
  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v28.mVariableFramesInPacket = 0;
  v29 = 0;
  v27 = 0;
  if (!a3)
    v4 = (DataSource *)*((_QWORD *)this + 13);
  if (*((_BYTE *)this + 140))
    return 0;
  v7 = *((_QWORD *)this + 15);
  if (!v7)
  {
    v7 = operator new();
    v8 = *((_DWORD *)this + 11);
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_DWORD *)(v7 + 32) = v8;
    *((_QWORD *)this + 15) = v7;
  }
  v9 = *(_QWORD *)(v7 + 24);
  if (a2 == -1)
  {
    v10 = -1;
  }
  else
  {
    v10 = a2 - v9;
    if (a2 <= v9)
      return 0;
  }
  if (*((_BYTE *)this + 140))
    return 0;
  v12 = (*(uint64_t (**)(DataSource *, uint64_t *))(*(_QWORD *)v4 + 24))(v4, &v29);
  if (!v12)
  {
    if (v9)
    {
      v13 = *((_QWORD *)this + 9);
      v14 = v9 - 1;
      CompressedPacketTable::operator[]((uint64_t)buf, (uint64_t *)v7, v9 - 1);
      v15 = *(_QWORD *)buf;
      CompressedPacketTable::operator[]((uint64_t)v25, (uint64_t *)v7, v14);
      v16 = v15 + v13 + v26;
    }
    else
    {
      (*(void (**)(AMRAudioFile *, _QWORD))(*(_QWORD *)this + 648))(this, 0);
      v16 = *((_QWORD *)this + 9);
    }
    v12 = 0;
    v17 = a4;
    while (1)
    {
      v28.mStartOffset = v16 - *((_QWORD *)this + 9);
      v28.mDataByteSize = 0;
      if (*((_DWORD *)this + 36))
      {
        v18 = 0;
        v19 = 0;
        while (1)
        {
          buf[0] = 0;
          v12 = (*(uint64_t (**)(DataSource *, _QWORD, uint64_t, uint64_t, _BYTE *, int *))(*(_QWORD *)v4 + 48))(v4, 0, v16, 1, buf, &v27);
          if (v12)
            v20 = 0;
          else
            v20 = v27 == 1;
          if (!v20)
            goto LABEL_40;
          v21 = (__int16 *)(*((_BYTE *)this + 152) ? &_AMR_WB_FRAMESIZE : &_AMR_NB_FRAMESIZE);
          v22 = v21[((unint64_t)buf[0] >> 3) & 0xF];
          if (!v22)
            break;
          v16 += v22;
          if (v16 > v29)
            break;
          v18 = v18 + v22;
          ++v19;
          if (v16 == v29)
          {
            v12 = 0;
            v28.mDataByteSize = v18;
            *((_DWORD *)this + 37) = 160 * v19;
            goto LABEL_42;
          }
          if (v19 >= *((_DWORD *)this + 36))
          {
            v12 = 0;
            v23 = 0;
            v28.mDataByteSize = v18;
            v17 = a4;
            if ((a4 & 1) == 0)
              goto LABEL_35;
            goto LABEL_43;
          }
        }
        v12 = 0;
LABEL_40:
        v28.mDataByteSize = v18;
LABEL_42:
        v17 = a4;
        *((_BYTE *)this + 140) = a4;
        v23 = 1;
        if ((a4 & 1) == 0)
        {
LABEL_35:
          if (v19 == *((_DWORD *)this + 36))
            goto LABEL_44;
          goto LABEL_50;
        }
LABEL_43:
        if (!v19)
          goto LABEL_50;
      }
      else
      {
        v18 = 0;
        v23 = 0;
        if ((v17 & 1) != 0)
        {
          v23 = 0;
          goto LABEL_50;
        }
      }
LABEL_44:
      if (v18 > (*(unsigned int (**)(AMRAudioFile *))(*(_QWORD *)this + 632))(this))
        (*(void (**)(AMRAudioFile *, uint64_t))(*(_QWORD *)this + 648))(this, v18);
      AudioFileObject::AppendPacket(this, &v28);
      if (v10 == -1)
        v10 = -1;
      else
        --v10;
      v17 = a4;
      if (!v10)
        goto LABEL_51;
LABEL_50:
      if (v23)
        goto LABEL_51;
    }
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AMRAudioFile.cpp";
    v31 = 1024;
    v32 = 568;
    _os_log_impl(&dword_18EE07000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetSize failed", buf, 0x12u);
  }
LABEL_51:
  if ((v12 & 0xFFFFFFFE) == 0xFFFFFFD8)
    return 0;
  else
    return v12;
}

void AMRAudioFile::WriteHeader(AMRAudioFile *this)
{
  NSObject *v2;
  unsigned int v3;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (*((_BYTE *)this + 152))
  {
    v9 = 10;
    v8 = *(_QWORD *)"#!AMR-WB\n";
    if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t *, unsigned int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, 0, 9, &v8, &v3))
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return;
      *(_DWORD *)buf = 136315394;
      v5 = "AMRAudioFile.cpp";
      v6 = 1024;
      v7 = 368;
      v2 = MEMORY[0x1E0C81028];
LABEL_8:
      _os_log_impl(&dword_18EE07000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d  WriteBytes Failed", buf, 0x12u);
      return;
    }
  }
  else
  {
    qmemcpy(&v8, "#!AMR\n", 6);
    if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t *, unsigned int *))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13), 0, 0, 6, &v8, &v3))
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return;
      *(_DWORD *)buf = 136315394;
      v5 = "AMRAudioFile.cpp";
      v6 = 1024;
      v7 = 374;
      v2 = MEMORY[0x1E0C81028];
      goto LABEL_8;
    }
  }
  *((_QWORD *)this + 9) = v3;
}

void AMRAudioFormat::~AMRAudioFormat(AMRAudioFormat *this)
{
  JUMPOUT(0x193FFE460);
}

BOOL AMRAudioFormat::FileDataIsThisFormat(AMRAudioFormat *this, unsigned int a2, char *__s1)
{
  if (a2 < 9)
    return 0;
  if (!strncmp(__s1, "#!AMR\n", 6uLL))
    return 1;
  return strncmp(__s1, "#!AMR-WB\n", 9uLL) == 0;
}

const __CFArray *AMRAudioFormat::GetExtensions(AMRAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("amr");
  values[1] = CFSTR("awb");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *AMRAudioFormat::GetUTIs(AMRAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  const void *v4[2];

  v4[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("org.3gpp.adaptive-multi-rate-audio");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 1, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

const __CFArray *AMRAudioFormat::GetMIMETypes(AMRAudioFormat *this, const __CFArray **a2)
{
  const __CFArray *result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = CFSTR("audio/AMR");
  values[1] = CFSTR("audio/AMR-WB");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void AMRAudioFormat::GetFileTypeName(AMRAudioFormat *this, const __CFString **a2)
{
  __CFBundle *v3;
  const __CFString *v4;
  char v5;

  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle)
      goto LABEL_3;
LABEL_5:
    v4 = (const __CFString *)CFRetain(CFSTR("AMR"));
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle)
    goto LABEL_5;
LABEL_3:
  v4 = CFBundleCopyLocalizedString(v3, CFSTR("AMR"), CFSTR("AMR"), CFSTR("FileTypeNames"));
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_18EF45C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  CABundleLocker::~CABundleLocker((CABundleLocker *)&a13);
  _Unwind_Resume(a1);
}

uint64_t AMRAudioFormat::GetAvailableFormatIDs(AMRAudioFormat *this, unsigned int *a2, void *__dst)
{
  unsigned int v3;
  size_t v4;
  uint64_t __src;

  __src = 0x7361776273616D72;
  v3 = *a2 >> 2;
  if (v3 >= 2)
    v3 = 2;
  v4 = 4 * v3;
  *a2 = v4;
  if (__dst)
    memcpy(__dst, &__src, v4);
  return 0;
}

uint64_t AMRAudioFormat::GetAvailableStreamDescriptions(AMRAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  size_t v5;
  _OWORD v7[2];
  uint64_t v8;

  if (a2 == 1935764850 || a2 == 1935767394)
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    DWORD2(v7[0]) = a2;
    if (*a3 >= 0x28)
      v5 = 40;
    else
      v5 = 0;
    *a3 = v5;
    if (__dst)
      memcpy(__dst, v7, v5);
    return 0;
  }
  else
  {
    *a3 = 0;
    return 1718449215;
  }
}

uint64_t AMRAudioFormat::GetHFSCodes(AMRAudioFormat *this, unsigned int *a2, void *__dst)
{
  unsigned int v3;
  size_t v4;
  __int128 v6;

  v6 = xmmword_18F116FE0;
  v3 = *a2 >> 2;
  if (v3 >= 4)
    v3 = 4;
  v4 = 4 * v3;
  *a2 = v4;
  if (__dst)
    memcpy(__dst, &v6, v4);
  return 0;
}

double AMRAudioFormat::New(AMRAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 80) = 0x616D726600000001;
  *(_QWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 96) = -1;
  *(_WORD *)(v1 + 100) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0x100000000;
  *(_DWORD *)(v1 + 136) = 65792;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)v1 = &off_1E2901AF0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 140) = 0;
  *(_QWORD *)&result = 0xF00000000;
  *(_QWORD *)(v1 + 144) = 0xF00000000;
  *(_BYTE *)(v1 + 152) = 0;
  return result;
}

double AMRAudioFormat::NewStream(AMRAudioFormat *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = -1;
  *(_QWORD *)(v1 + 96) = -1;
  *(_QWORD *)(v1 + 104) = -1;
  *(_QWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_DWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 208) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 224) = 0;
  *(_QWORD *)&result = 112;
  *(_OWORD *)(v1 + 240) = xmmword_18F116F80;
  *(_DWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 300) = 0;
  *(_QWORD *)(v1 + 284) = 0;
  *(_QWORD *)(v1 + 292) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)(v1 + 328) = 0;
  *(_QWORD *)v1 = &off_1E2904040;
  *(_BYTE *)(v1 + 340) = 0;
  *(_DWORD *)(v1 + 344) = 0;
  *(_BYTE *)(v1 + 404) = 0;
  return result;
}

BOOL KeyIsValid(const __CFString *a1)
{
  __CFArray *Mutable;
  __CFArray *v3;
  CFIndex v4;
  CFIndex v5;
  CFIndex Count;
  const void *ValueAtIndex;
  int v8;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, CFSTR("main loudness parameters"));
    CFArrayAppendValue(v3, CFSTR("sound check info"));
    CFArrayAppendValue(v3, CFSTR("additional loudness parameters"));
    CFArrayAppendValue(v3, CFSTR("dialogue anchor parameters"));
  }
  v4 = 0;
  do
  {
    v5 = v4;
    Count = CFArrayGetCount(v3);
    if (v5 >= Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(v3, v5);
    v8 = CFEqual(a1, ValueAtIndex);
    v4 = v5 + 1;
  }
  while (!v8);
  if (v3)
    CFRelease(v3);
  return v5 < Count;
}

uint64_t RemoveKeyFromList(CFArrayRef theArray, const __CFString *a2)
{
  uint64_t result;
  CFRange v5;

  while (1)
  {
    v5.length = CFArrayGetCount(theArray);
    v5.location = 0;
    result = CFArrayGetFirstIndexOfValue(theArray, v5, a2);
    if (result == -1)
      break;
    CFArrayRemoveValueAtIndex(theArray, result);
  }
  return result;
}

uint64_t ___ZN11APComponent11newInstanceEjbU13block_pointerFvP28OpaqueAudioComponentInstanceiE_block_invoke(_QWORD *a1, uint64_t a2, int a3)
{
  const AudioClassDescription *v5;
  os_log_t v6;
  _QWORD *v8;
  NSObject *v9;
  std::string *v10;
  uint64_t v11;
  std::string __p;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(a1[4] + 16))(a1[4], a2, 0);
  v5 = (const AudioClassDescription *)a1[5];
  if (gAudioComponentLogCategory)
  {
    v6 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v8 = (_QWORD *)operator new();
    v8[1] = 0;
    v6 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v8 = v6;
    gAudioComponentLogCategory = (uint64_t)v8;
  }
  v9 = objc_retainAutorelease(v6);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    to_string(v5 + 3, &__p);
    v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    v14 = "APComponent.mm";
    v15 = 1024;
    v16 = 355;
    v17 = 1024;
    v18 = a3;
    v19 = 2080;
    v20 = v10;
    _os_log_impl(&dword_18EE07000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d returned from OpenAsync for %s", buf, 0x22u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }

  v11 = a1[6];
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

void sub_18EF461F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *AudioComponentLogCategory(void)
{
  _QWORD *v0;

  v0 = (_QWORD *)gAudioComponentLogCategory;
  if (!gAudioComponentLogCategory)
  {
    v0 = (_QWORD *)operator new();
    v0[1] = 0;
    *v0 = os_log_create("com.apple.coreaudio", "audiocomp");
    gAudioComponentLogCategory = (uint64_t)v0;
  }
  return v0;
}

RenderContextChangeGenerator *std::optional<RenderContextChangeGenerator>::emplace[abi:ne180100]<void({block_pointer} {__strong}&)(AudioUnitRenderContext const*),void>(RenderContextChangeGenerator *this, void **a2)
{
  void *v4;

  if (LOBYTE(this[1].mLastWorkgroup))
  {
    RenderContextChangeGenerator::~RenderContextChangeGenerator(this);
    LOBYTE(this[1].mLastWorkgroup) = 0;
  }
  v4 = *a2;
  this->mLastWorkgroup = 0;
  if (v4)
    v4 = _Block_copy(v4);
  this->mObserver = v4;
  LOBYTE(this[1].mLastWorkgroup) = 1;
  return this;
}

void APComponent_FromBundle_Loadable::~APComponent_FromBundle_Loadable(APComponent *this)
{
  const void *v2;

  *(_QWORD *)this = off_1E2909810;
  v2 = (const void *)*((_QWORD *)this + 24);
  if (v2)
    CFRelease(v2);
  APComponent_FromBundle_Base::~APComponent_FromBundle_Base(this);
}

{
  const void *v2;

  *(_QWORD *)this = off_1E2909810;
  v2 = (const void *)*((_QWORD *)this + 24);
  if (v2)
    CFRelease(v2);
  APComponent_FromBundle_Base::~APComponent_FromBundle_Base(this);
  JUMPOUT(0x193FFE460);
}

id APComponent_FromBundle_Loadable::getV3Class(APComponent_FromBundle_Loadable *this)
{
  if (!*((_QWORD *)this + 13))
    (*(void (**)(APComponent_FromBundle_Loadable *))(*(_QWORD *)this + 96))(this);
  return *((id *)this + 25);
}

uint64_t APComponent_FromBundle_Loadable::ResolveFactoryFunction(APComponent_FromBundle_Loadable *this)
{
  __CFBundle *v2;
  const __CFString *v3;
  void *FunctionPointerForName;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  const __CFString *v8;
  const __CFURL *v9;
  CFBundleRef v10;
  const void *v11;
  __CFError *v12;
  CFStringRef v13;
  void *v14;
  NSString *v15;
  void *v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  os_log_t v20;
  _QWORD *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  const void *Value;
  os_log_t v28;
  _QWORD *v29;
  NSObject *v30;
  uint64_t v31;
  os_log_t v33;
  _QWORD *v34;
  NSObject *v35;
  uint64_t v36;
  const void *v37;
  void *v38;
  CFErrorRef error;
  _BYTE buf[18];
  __int16 v41;
  _BYTE v42[18];
  __int16 v43;
  const void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  error = 0;
  v2 = (__CFBundle *)*((_QWORD *)this + 24);
  if (!v2)
  {
    v8 = (const __CFString *)*((_QWORD *)this + 20);
    if (!v8)
      return 0xFFFFFFFFLL;
    v9 = CFURLCreateWithFileSystemPath(0, v8, kCFURLPOSIXPathStyle, 1u);
    *(_QWORD *)buf = v9;
    v10 = CFBundleCreate(0, v9);
    v11 = (const void *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = v10;
    if (v11)
      CFRelease(v11);
    if (v9)
      CFRelease(v9);
    v2 = (__CFBundle *)*((_QWORD *)this + 24);
    if (!v2)
      return 0xFFFFFFFFLL;
  }
  if (!CFBundleLoadExecutableAndReturnError(v2, &error))
  {
    v12 = error;
    if (error)
    {
      v13 = CFErrorCopyDescription(error);
      v12 = error;
    }
    else
    {
      v13 = 0;
    }
    v25 = CFErrorCopyUserInfo(v12);
    v26 = v25;
    if (v25)
      Value = CFDictionaryGetValue(v25, CFSTR("NSDebugDescription"));
    else
      Value = 0;
    if (gAudioComponentLogCategory)
    {
      v28 = *(os_log_t *)gAudioComponentLogCategory;
    }
    else
    {
      v29 = (_QWORD *)operator new();
      v29[1] = 0;
      v28 = os_log_create("com.apple.coreaudio", "audiocomp");
      *v29 = v28;
      gAudioComponentLogCategory = (uint64_t)v29;
    }
    v30 = objc_retainAutorelease(v28);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = *((_QWORD *)this + 24);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "APComponent.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 891;
      v41 = 2112;
      *(_QWORD *)v42 = v31;
      *(_WORD *)&v42[8] = 2112;
      *(_QWORD *)&v42[10] = v13;
      v43 = 2112;
      v44 = Value;
      _os_log_impl(&dword_18EE07000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d %@: cannot load bundle: %@ (%@)", buf, 0x30u);
    }
    if (v13)
      CFRelease(v13);
    if (v26)
      CFRelease(v26);
    if (error)
      CFRelease(error);
    return 0xFFFFFFFFLL;
  }
  v3 = (const __CFString *)*((_QWORD *)this + 22);
  if (v3)
  {
    FunctionPointerForName = CFBundleGetFunctionPointerForName(*((CFBundleRef *)this + 24), v3);
    v5 = FunctionPointerForName;
    *(_QWORD *)&v42[4] = 0;
    if (FunctionPointerForName)
    {
      *(_QWORD *)buf = &off_1E29135A8;
      *(_QWORD *)&buf[8] = FunctionPointerForName;
      *(_QWORD *)&v42[4] = buf;
    }
    std::__function::__value_func<AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::swap[abi:ne180100](buf, (_QWORD *)this + 10);
    v6 = *(_QWORD **)&v42[4];
    if (*(_BYTE **)&v42[4] == buf)
    {
      v7 = 4;
      v6 = buf;
    }
    else
    {
      if (!*(_QWORD *)&v42[4])
      {
LABEL_25:
        if (gAudioComponentLogCategory)
        {
          v20 = *(os_log_t *)gAudioComponentLogCategory;
        }
        else
        {
          v21 = (_QWORD *)operator new();
          v21[1] = 0;
          v20 = os_log_create("com.apple.coreaudio", "audiocomp");
          *v21 = v20;
          gAudioComponentLogCategory = (uint64_t)v21;
        }
        v22 = objc_retainAutorelease(v20);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          v23 = *((_QWORD *)this + 24);
          v24 = *((_QWORD *)this + 22);
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "APComponent.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 916;
          v41 = 2112;
          *(_QWORD *)v42 = v23;
          *(_WORD *)&v42[8] = 2112;
          *(_QWORD *)&v42[10] = v24;
          v43 = 2048;
          v44 = v5;
          _os_log_impl(&dword_18EE07000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d %@ %@ -> %p", buf, 0x30u);
        }
        goto LABEL_56;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_25;
  }
  v14 = (void *)*((_QWORD *)this + 23);
  if (v14)
  {
    v15 = v14;
    NSClassFromString(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v16)
    {
      if (gAudioComponentLogCategory)
      {
        v33 = *(os_log_t *)gAudioComponentLogCategory;
      }
      else
      {
        v34 = (_QWORD *)operator new();
        v34[1] = 0;
        v33 = os_log_create("com.apple.coreaudio", "audiocomp");
        *v34 = v33;
        gAudioComponentLogCategory = (uint64_t)v34;
      }
      v35 = objc_retainAutorelease(v33);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        v36 = *((_QWORD *)this + 24);
        CAFormatter::CAFormatter((CAFormatter *)&v38, (const AudioComponentDescription *)((char *)this + 36));
        v37 = (const void *)*((_QWORD *)this + 23);
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "APComponent.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 921;
        v41 = 2112;
        *(_QWORD *)v42 = v36;
        *(_WORD *)&v42[8] = 2080;
        *(_QWORD *)&v42[10] = v38;
        v43 = 2112;
        v44 = v37;
        _os_log_impl(&dword_18EE07000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d %@: %s: AUAudioUnit subclass %@ not found", buf, 0x30u);
        if (v38)
          free(v38);
      }

      goto LABEL_55;
    }
    *((_QWORD *)this + 25) = v16;
    v17 = v16;
    *(_QWORD *)buf = &off_1E2915E70;
    *(_QWORD *)&buf[8] = v17;
    *(_QWORD *)&v42[4] = buf;
    std::__function::__value_func<AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::swap[abi:ne180100](buf, (_QWORD *)this + 10);
    v18 = *(_QWORD **)&v42[4];
    if (*(_BYTE **)&v42[4] == buf)
    {
      v19 = 4;
      v18 = buf;
    }
    else
    {
      if (!*(_QWORD *)&v42[4])
      {
LABEL_55:

        goto LABEL_56;
      }
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
    goto LABEL_55;
  }
LABEL_56:
  if (*((_QWORD *)this + 13))
    return 0;
  else
    return 0xFFFFFFFFLL;
}

void sub_18EF468C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<__CFURL const*>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *std::__function::__value_func<AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18EF46AA4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__func<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0,std::allocator<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0,std::allocator<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__func(uint64_t a1)
{

  JUMPOUT(0x193FFE460);
}

_QWORD *std::__function::__func<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0,std::allocator<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1E2915E70;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id std::__function::__func<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0,std::allocator<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E2915E70;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void std::__function::__func<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0,std::allocator<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::destroy(uint64_t a1)
{

}

void std::__function::__func<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0,std::allocator<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

_QWORD *std::__function::__func<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0,std::allocator<APComponent_FromBundle_Loadable::ResolveFactoryFunction(void)::$_0>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::operator()(uint64_t a1, const AudioComponentDescription **a2)
{
  const AudioComponentDescription *v3;
  AUv3InstanceBase *v4;
  uint64_t v5;

  v3 = *a2;
  v4 = (AUv3InstanceBase *)operator new();
  v5 = *(_QWORD *)(a1 + 8);
  AUv3InstanceBase::AUv3InstanceBase(v4, v3);
  *(_QWORD *)v4 = &off_1E29092F0;
  *((_QWORD *)v4 + 50) = v5;
  return (_QWORD *)((char *)v4 + 8);
}

void sub_18EF46C1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x193FFE460](v1, 0x10A1C406BDEE126);
  _Unwind_Resume(a1);
}

__SecTask *shouldLoadV2OutOfProcess(const AudioComponentDescription *a1, char a2, id *a3)
{
  char *v6;
  id v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  os_log_t v14;
  __SecTask *result;
  __SecTask *v16;
  CFTypeRef v17;
  const void *v18;
  CFTypeID v19;
  int Value;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  _QWORD *v28;
  NSObject *v29;
  char *v30;
  uint64_t v31;
  int v32;
  void *v33;
  _BYTE *v34;
  unsigned __int16 *v35;
  int v36;
  int v37;
  int v39;
  uint64_t v40;
  _BYTE *v41;
  _WORD *v42;
  int AppBooleanValue;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t v49[128];
  _BYTE buf[18];
  unsigned __int8 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if ((a2 & 2) != 0)
    return 0;
  if ((a2 & 1) == 0)
    goto LABEL_3;
  result = SecTaskCreateFromSelf(0);
  if (!result)
    return result;
  v16 = result;
  v17 = SecTaskCopyValueForEntitlement(result, CFSTR("com.apple.coreaudio.allow-oop-v2-au"), 0);
  if (!v17)
  {
LABEL_40:
    CFRelease(v16);
    return 0;
  }
  v18 = v17;
  v19 = CFGetTypeID(v17);
  if (v19 != CFBooleanGetTypeID())
  {
    CFRelease(v18);
    goto LABEL_40;
  }
  Value = CFBooleanGetValue((CFBooleanRef)v18);
  CFRelease(v18);
  CFRelease(v16);
  if (!Value)
    return 0;
LABEL_3:
  v6 = getenv("CoreAudio_AUHostingService_mismatchMode");
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v7 = *a3;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
  if (!v8)
  {

    v10 = 0;
    v9 = 0;
    goto LABEL_22;
  }
  v44 = v6;
  v9 = 0;
  v10 = 0;
  v11 = *(_QWORD *)v46;
  do
  {
    for (i = 0; i != v8; ++i)
    {
      if (*(_QWORD *)v46 != v11)
        objc_enumerationMutation(v7);
      v13 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * i);
      if (objc_msgSend(v13, "intValue") == 16777228)
        v10 = 1;
      else
        v9 |= objc_msgSend(v13, "intValue") == 16777223;
    }
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
  }
  while (v8);

  v6 = v44;
  if (v10 & 1 | ((v9 & 1) == 0))
  {
LABEL_22:
    if ((a1->componentFlags & 4) == 0)
    {
      v21 = 0;
      v22 = a2 & 1;
      do
      {
        v23 = *(_DWORD *)&aUoua[v21];
        if (v23)
          v24 = v23 == a1->componentType;
        else
          v24 = 1;
        if (v24)
        {
          v25 = *(_DWORD *)&aUoua[v21 + 4];
          v26 = v25 == a1->componentSubType || v25 == 0;
          if (v26 && a1->componentManufacturer == 1634758764)
            return 0;
        }
        v21 += 20;
      }
      while (v21 != 140);
      if (((v6 != 0) & (v10 & v9)) != 0)
      {
        v22 = 1;
        return (__SecTask *)(v22 != 0);
      }
      v30 = getenv("CoreAudio_loadV2AudioUnitsOutOfProcess");
      if (v30)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, v30);
        v31 = v51;
        v32 = (char)v51;
        if ((v51 & 0x80u) != 0)
          v31 = *(_QWORD *)&buf[8];
        if (v31 == 3)
        {
          v33 = *(void **)buf;
          v35 = (unsigned __int16 *)buf;
          if ((v51 & 0x80u) != 0)
            v35 = *(unsigned __int16 **)buf;
          v36 = *v35;
          v37 = *((unsigned __int8 *)v35 + 2);
          if (v36 == 17753 && v37 == 83)
            goto LABEL_54;
        }
        else if (v31 == 1)
        {
          v33 = *(void **)buf;
          v34 = buf;
          if ((v51 & 0x80u) != 0)
            v34 = *(_BYTE **)buf;
          if (*v34 == 49)
          {
LABEL_54:
            v22 = 1;
            goto LABEL_70;
          }
        }
        v39 = isInternalBuild();
        v40 = v51;
        v32 = (char)v51;
        if (v39)
        {
          if ((v51 & 0x80u) != 0)
            v40 = *(_QWORD *)&buf[8];
          if (v40 == 2)
          {
            v33 = *(void **)buf;
            v42 = buf;
            if ((v51 & 0x80u) != 0)
              v42 = *(_WORD **)buf;
            if (*v42 == 20302)
              goto LABEL_69;
          }
          else if (v40 == 1)
          {
            v33 = *(void **)buf;
            v41 = buf;
            if ((v51 & 0x80u) != 0)
              v41 = *(_BYTE **)buf;
            if (*v41 == 48)
            {
LABEL_69:
              v22 = 0;
LABEL_70:
              if (v32 < 0)
                operator delete(v33);
              return (__SecTask *)(v22 != 0);
            }
          }
        }
        if ((char)v51 < 0)
          operator delete(*(void **)buf);
      }
      if (isInternalBuild())
      {
        buf[0] = 0;
        AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("loadV2AudioUnitsOutOfProcess"), CFSTR("com.apple.coreaudio"), buf);
        if (buf[0])
          v22 = AppBooleanValue;
      }
      return (__SecTask *)(v22 != 0);
    }
    return 0;
  }
  if (gAudioComponentLogCategory)
  {
    v14 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v28 = (_QWORD *)operator new();
    v28[1] = 0;
    v14 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v28 = v14;
    gAudioComponentLogCategory = (uint64_t)v28;
  }
  v29 = objc_retainAutorelease(v14);
  result = (__SecTask *)os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "APComponent.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 285;
    _os_log_impl(&dword_18EE07000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d Requested AU does not contain native architecture and translation is not available!", buf, 0x12u);
    return 0;
  }
  return result;
}

void sub_18EF470A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t isInternalBuild(void)
{
  unsigned __int8 v0;

  {
    isInternalBuild(void)::sIsInternalBuild = os_variant_has_internal_diagnostics();
  }
  return isInternalBuild(void)::sIsInternalBuild;
}

void sub_18EF47140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getConfigurationInfo(const AudioComponentDescription *a1, uint64_t a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD, _QWORD);
  BOOL v7;
  BOOL v9;
  uint64_t v10;
  __CFString *v11;
  const __CFDictionary *v12;
  __CFDictionary *MutableCopy;
  os_log_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void *);
  void *v24;
  __CFString *v25;
  void (**v26)(_QWORD, _QWORD);
  const AudioComponentDescription *v27;
  int v28;
  __int128 v29;
  UInt32 componentFlagsMask;
  __int128 v31;
  UInt32 v32;
  _BYTE buf[24];
  void *v34;
  uint64_t *v35;
  __int128 v36;
  UInt32 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = (void (**)(_QWORD, _QWORD))v5;
  if (a1->componentType)
    v7 = a1->componentSubType == 0;
  else
    v7 = 1;
  v9 = !v7 && a1->componentManufacturer != 0 && HIWORD(a1->componentType) == 24949;
  v10 = v9;
  if (v9)
  {
    createConfgurationInfoCacheKey(a1, a2);
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v12 = (const __CFDictionary *)copyConfigurationInfoFromCache(v11);
    if (v12)
    {
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v12);
      addValidationStatusIfExists(a1, a2, MutableCopy);
      if (gAudioComponentLogCategory)
      {
        v14 = *(os_log_t *)gAudioComponentLogCategory;
      }
      else
      {
        v17 = (_QWORD *)operator new();
        v17[1] = 0;
        v14 = os_log_create("com.apple.coreaudio", "audiocomp");
        *v17 = v14;
        gAudioComponentLogCategory = (uint64_t)v17;
      }
      v18 = v14;
      v19 = v18;
      if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioComponentConfigurationInfo.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 249;
        _os_log_impl(&dword_18EE07000, v19, OS_LOG_TYPE_INFO, "%25s:%-5d returning cached info", buf, 0x12u);
      }

      ((void (**)(_QWORD, __CFDictionary *))v6)[2](v6, MutableCopy);
    }
    else
    {
      v29 = *(_OWORD *)&a1->componentType;
      componentFlagsMask = a1->componentFlagsMask;
      v15 = MEMORY[0x1E0C809B0];
      v21 = MEMORY[0x1E0C809B0];
      v22 = 3221225472;
      v23 = ___Z20getConfigurationInfoRK25AudioComponentDescriptionjU13block_pointerFvPK14__CFDictionaryE_block_invoke;
      v24 = &unk_1E291A038;
      v26 = v6;
      v25 = v11;
      v27 = a1;
      v28 = a2;
      v16 = &v21;
      v31 = v29;
      v32 = componentFlagsMask;
      *(_QWORD *)buf = v15;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZL38instantiateAndCatalogConfigurationInfo25AudioComponentDescriptionU13block_pointerFvP14__CFDictionaryE_block_invoke;
      v34 = &unk_1E291A060;
      v35 = v16;
      v36 = v29;
      v37 = componentFlagsMask;
      +[AUAudioUnit instantiateWithComponentDescription:options:completionHandler:](AUAudioUnit, "instantiateWithComponentDescription:options:completionHandler:", &v31, 1, buf, v21, v22, v23, v24);

    }
  }
  else
  {
    (*((void (**)(id, _QWORD))v5 + 2))(v5, 0);
  }

  return v10;
}

void sub_18EF47400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void addValidationStatusIfExists(const AudioComponentDescription *a1, uint64_t a2, __CFDictionary *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int *v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  __CFDictionary *v18;
  void *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v18 = a3;
  v19 = (void *)objc_opt_new();
  v20[0] = 0xC01000007;
  getValidationCapsuleVersion();
  v6 = v5;
  v7 = 0;
  v8 = 1;
  v9 = (int *)v20;
  do
  {
    v10 = v7;
    getValidationResultFromCache(a1, *v9, a2, v6, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v11)
    {
      objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("Result"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "intValue");

      if (v14)
      {
        objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("Result"));
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = CFSTR("arm64");
        if (*v9 == 16777223)
          v16 = CFSTR("x86_64");
        v17 = v16;
        objc_msgSend(v19, "setObject:forKeyedSubscript:", v15, v17);

      }
    }

    v9 = (int *)v20 + v8;
    v7 = 1;
    v8 = 2;
  }
  while ((v10 & 1) == 0);
  if (objc_msgSend(v19, "count"))
    -[__CFDictionary setObject:forKeyedSubscript:](v18, "setObject:forKeyedSubscript:", v19, CFSTR("ValidationResult"));

}

void sub_18EF475EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___Z20getConfigurationInfoRK25AudioComponentDescriptionjU13block_pointerFvPK14__CFDictionaryE_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  os_log_t v9;
  _QWORD *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0);
  v3 = a2;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("ChannelConfigurations"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
    goto LABEL_7;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("ChannelConfigurations"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (!v6)
    goto LABEL_7;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("InitialInputs"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7
    && (objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("InitialOutputs")),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v8,
        v7,
        v8))
  {

    writeConfigurationInfoToCache(*(const __CFString **)(a1 + 32), (const __CFDictionary *)v3);
  }
  else
  {
LABEL_7:

  }
  addValidationStatusIfExists(*(const AudioComponentDescription **)(a1 + 48), *(unsigned int *)(a1 + 56), (__CFDictionary *)v3);
  if (gAudioComponentLogCategory)
  {
    v9 = *(os_log_t *)gAudioComponentLogCategory;
  }
  else
  {
    v11 = (_QWORD *)operator new();
    v11[1] = 0;
    v9 = os_log_create("com.apple.coreaudio", "audiocomp");
    *v11 = v9;
    gAudioComponentLogCategory = (uint64_t)v11;
  }
  v12 = v9;
  v13 = v12;
  if (v12)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = 136315906;
      v16 = "AudioComponentConfigurationInfo.mm";
      v17 = 1024;
      v18 = 265;
      v19 = 2112;
      v20 = v14;
      v21 = 2112;
      v22 = v3;
      _os_log_impl(&dword_18EE07000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d %@ -> %@", (uint8_t *)&v15, 0x26u);
    }
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18EF47870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL38instantiateAndCatalogConfigurationInfo25AudioComponentDescriptionU13block_pointerFvP14__CFDictionaryE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  AUAudioUnitBusArray *v18;
  void *v19;
  AUAudioUnitBusArray *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  BOOL v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  BOOL v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id v43;
  int v44;
  uint64_t v45;
  id v46;
  void *v47;
  _QWORD v48[3];
  _QWORD v49[3];

  v49[2] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v46 = a3;
  v47 = v5;
  if (v5)
  {
    v45 = a1;
    v6 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v5, "providesUserInterface"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, CFSTR("HasCustomView"));

    v8 = v5;
    objc_msgSend(v8, "channelCapabilities");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      v10 = (void *)objc_opt_new();
      v11 = objc_msgSend(v9, "count");
      if ((int)(v11 & 0xFFFFFFFE) >= 1)
      {
        v12 = 0;
        v13 = v11 & 0xFFFFFFFE;
        do
        {
          objc_msgSend(v9, "objectAtIndexedSubscript:", v12);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v49[0] = v14;
          v15 = v12 + 1;
          objc_msgSend(v9, "objectAtIndexedSubscript:", v12 + 1);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v49[1] = v16;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v49, 2);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "addObject:", v17);

          v12 = v15 + 1;
        }
        while (v15 + 1 < v13);
      }
    }
    else
    {
      v44 = *(_DWORD *)(v45 + 40);
      v10 = &unk_1E2932DD8;
      if (v44 != 1635083896 && v44 != 1635085670 && v44 != 1635086188)
        v10 = (void *)MEMORY[0x1E0C9AA60];
    }

    objc_msgSend(v6, "setObject:forKeyedSubscript:", v10, CFSTR("ChannelConfigurations"));
    objc_msgSend(v8, "inputBusses");
    v18 = (AUAudioUnitBusArray *)objc_claimAutoreleasedReturnValue();
    busArrayChannelCounts(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v19, CFSTR("InitialInputs"));

    objc_msgSend(v8, "outputBusses");
    v20 = (AUAudioUnitBusArray *)objc_claimAutoreleasedReturnValue();
    busArrayChannelCounts(v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21)
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v21, CFSTR("InitialOutputs"));

    v48[0] = MEMORY[0x1E0C9AAA0];
    v22 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v8, "inputBusses");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "numberWithBool:", objc_msgSend(v23, "isCountChangeable"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v48[1] = v24;
    v25 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v8, "outputBusses");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "numberWithBool:", objc_msgSend(v26, "isCountChangeable"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v48[2] = v27;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v48, 3);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v28, CFSTR("BusCountWritable"));

    v29 = (void *)objc_opt_new();
    objc_msgSend(v8, "inputBusses");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v30, "count") == 0;

    if (!v31)
    {
      objc_msgSend(v8, "inputBusses");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "objectAtIndexedSubscript:", 0);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "supportedChannelLayoutTags");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "setObject:forKeyedSubscript:", v34, CFSTR("Input"));

    }
    objc_msgSend(v8, "outputBusses");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = objc_msgSend(v35, "count") == 0;

    if (!v36)
    {
      objc_msgSend(v8, "outputBusses");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "objectAtIndexedSubscript:", 0);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "supportedChannelLayoutTags");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "setObject:forKeyedSubscript:", v39, CFSTR("Output"));

    }
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v29, CFSTR("SupportedChannelLayoutTags"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v8, "AudioUnitMIDIProtocol"));
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v40, CFSTR("MIDIProtocol"));

    objc_msgSend(v8, "migrateFromPlugin");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v41, CFSTR("MigrateFromPlugin"));

    v42 = *(_QWORD *)(v45 + 32);
    v43 = v6;
    (*(void (**)(uint64_t, id))(v42 + 16))(v42, v43);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_18EF47D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

id busArrayChannelCounts(AUAudioUnitBusArray *a1)
{
  AUAudioUnitBusArray *v1;
  AUAudioUnitBusArray *v2;
  void *v3;
  AUAudioUnitBusArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1 && -[AUAudioUnitBusArray count](v1, "count"))
  {
    v3 = (void *)objc_opt_new();
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v4 = v2;
    v5 = -[AUAudioUnitBusArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v12;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v4);
          objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v7), "format", (_QWORD)v11);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(v8, "channelCount"));
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v9);

          ++v7;
        }
        while (v5 != v7);
        v5 = -[AUAudioUnitBusArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_18EF48080(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void MP4USACSpecificConfig::~MP4USACSpecificConfig(MP4USACSpecificConfig *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1E2908698;
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 17);
  if (v4)
  {
    *((_QWORD *)this + 18) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 14);
  if (v5)
  {
    *((_QWORD *)this + 15) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 7) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 4) = v7;
    operator delete(v7);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1E2908698;
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 17);
  if (v4)
  {
    *((_QWORD *)this + 18) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 14);
  if (v5)
  {
    *((_QWORD *)this + 15) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 7) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 4) = v7;
    operator delete(v7);
  }
  JUMPOUT(0x193FFE460);
}

uint64_t MP4USACSpecificConfig::Deserialize(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  NSObject *v10;
  const char *v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t i;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unint64_t v38;
  char *v39;
  _BYTE *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;
  char *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int16x8_t v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  int v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  int v111;
  int v112;
  unsigned int v113;
  int v114;
  int Bit;
  int v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  int v136;
  unsigned int v137;
  int v138;
  uint64_t v141;
  uint8_t buf[4];
  const char *v143;
  __int16 v144;
  int v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 216) = 0;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = v4 >> 27;
  v6 = *(_DWORD *)(a2 + 20) - 5;
  *(_DWORD *)(a2 + 20) = v6;
  if (v6 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v8 = *(_DWORD *)(a2 + 16);
    v9 = *(_DWORD *)(a2 + 20);
    v5 |= v8 >> v9;
    v6 = v9 + 32;
    *(_DWORD *)(a2 + 20) = v9 + 32;
    if (v9 == -32)
      v7 = 0;
    else
      v7 = v8 << -(char)v9;
  }
  else
  {
    v7 = 32 * v4;
  }
  *(_DWORD *)(a2 + 16) = v7;
  if (v5 > 0x1F)
    goto LABEL_15;
  if (((1 << v5) & 0x70006000) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v143 = "MP4USACSpecificConfig.cpp";
      v144 = 1024;
      v145 = 176;
      v10 = MEMORY[0x1E0C81028];
      v11 = "%25s:%-5d  MP4USACSpecificConfig::Deserialize: reserved sample rate index";
      goto LABEL_10;
    }
    return 4294967090;
  }
  if (v5 == 31)
  {
    v13 = v7 >> 8;
    v6 -= 24;
    *(_DWORD *)(a2 + 20) = v6;
    if (v6 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v14 = *(_DWORD *)(a2 + 16);
      v15 = *(_DWORD *)(a2 + 20);
      v13 |= v14 >> v15;
      v6 = v15 + 32;
      if (v15 == -32)
        v7 = 0;
      else
        v7 = v14 << -(char)v15;
    }
    else
    {
      v7 <<= 24;
    }
    *(_DWORD *)(a2 + 16) = v7;
  }
  else
  {
LABEL_15:
    v13 = kUSACSampleRateTable[v5];
  }
  *(_DWORD *)(a1 + 8) = v13;
  v16 = v7 >> 29;
  v17 = v6 - 3;
  *(_DWORD *)(a2 + 20) = v17;
  if (v17 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v19 = *(_DWORD *)(a2 + 16);
    v20 = *(_DWORD *)(a2 + 20);
    v16 |= v19 >> v20;
    v17 = v20 + 32;
    *(_DWORD *)(a2 + 20) = v20 + 32;
    if (v20 == -32)
      v18 = 0;
    else
      v18 = v19 << -(char)v20;
  }
  else
  {
    v18 = 8 * v7;
  }
  *(_DWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a1 + 12) = v16;
  if (v16 >= 5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v143 = "MP4USACSpecificConfig.cpp";
      v144 = 1024;
      v145 = 186;
      v10 = MEMORY[0x1E0C81028];
      v11 = "%25s:%-5d  MP4USACSpecificConfig::Deserialize: reserved coreSbrFrameLengthIndex";
      goto LABEL_10;
    }
    return 4294967090;
  }
  v21 = v18 >> 27;
  v22 = v17 - 5;
  *(_DWORD *)(a2 + 20) = v22;
  if (v22 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v24 = *(_DWORD *)(a2 + 16);
    v25 = *(_DWORD *)(a2 + 20);
    v21 |= v24 >> v25;
    *(_DWORD *)(a2 + 20) = v25 + 32;
    if (v25 == -32)
      v23 = 0;
    else
      v23 = v24 << -(char)v25;
  }
  else
  {
    v23 = 32 * v18;
  }
  *(_DWORD *)(a2 + 16) = v23;
  *(_DWORD *)(a1 + 16) = v21;
  if (!v21)
  {
    v26 = escapedValue(a2, 5, 8, 16);
    v27 = *(_QWORD *)(a1 + 24);
    v28 = v26;
    v29 = *(_QWORD *)(a1 + 32) - v27;
    if (v26 <= v29)
    {
      if (v26 < v29)
        *(_QWORD *)(a1 + 32) = v27 + v26;
    }
    else
    {
      std::vector<unsigned char>::__append((std::vector<char> *)(a1 + 24), v26 - v29);
    }
    if ((_DWORD)v28)
    {
      for (i = 0; i != v28; ++i)
      {
        v31 = *(_DWORD *)(a2 + 16);
        v32 = v31 >> 27;
        v33 = *(_DWORD *)(a2 + 20) - 5;
        *(_DWORD *)(a2 + 20) = v33;
        if (v33 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(_QWORD *)a2 += 4;
          v35 = *(_DWORD *)(a2 + 16);
          v36 = *(_DWORD *)(a2 + 20);
          v32 |= v35 >> v36;
          *(_DWORD *)(a2 + 20) = v36 + 32;
          if (v36 == -32)
            v34 = 0;
          else
            v34 = v35 << -(char)v36;
        }
        else
        {
          v34 = 32 * v31;
        }
        *(_DWORD *)(a2 + 16) = v34;
        *(_BYTE *)(*(_QWORD *)(a1 + 24) + i) = v32;
      }
    }
  }
  v37 = escapedValue(a2, 4, 8, 16);
  v38 = (v37 + 1);
  v39 = *(char **)(a1 + 48);
  v40 = *(_BYTE **)(a1 + 56);
  v41 = (v40 - v39) >> 2;
  if (v38 <= v41)
  {
    if (v38 >= v41)
      goto LABEL_63;
    v52 = &v39[4 * v38];
    goto LABEL_60;
  }
  v42 = v38 - v41;
  v43 = *(_QWORD *)(a1 + 64);
  if (v38 - v41 <= (v43 - (uint64_t)v40) >> 2)
  {
    bzero(*(void **)(a1 + 56), 4 * v42);
    v52 = &v40[4 * v42];
LABEL_60:
    *(_QWORD *)(a1 + 56) = v52;
    goto LABEL_63;
  }
  v44 = v43 - (_QWORD)v39;
  v45 = v44 >> 1;
  if (v44 >> 1 <= v38)
    v45 = (v37 + 1);
  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
    v46 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v46 = v45;
  if (v46 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v47 = (char *)operator new(4 * v46);
  v48 = &v47[4 * v41];
  v49 = &v47[4 * v46];
  bzero(v48, 4 * v42);
  v50 = &v48[4 * v42];
  while (v40 != v39)
  {
    v51 = *((_DWORD *)v40 - 1);
    v40 -= 4;
    *((_DWORD *)v48 - 1) = v51;
    v48 -= 4;
  }
  *(_QWORD *)(a1 + 48) = v48;
  *(_QWORD *)(a1 + 56) = v50;
  *(_QWORD *)(a1 + 64) = v49;
  if (v39)
    operator delete(v39);
LABEL_63:
  if (!(_DWORD)v38)
  {
LABEL_152:
    Bit = TBitstreamReader<unsigned int>::GetBit(a2);
    *(_BYTE *)(a1 + 185) = Bit != 0;
    if (Bit)
    {
      v116 = escapedValue(a2, 2, 4, 8);
      if (v116 != -1)
      {
        v117 = v116;
        v118 = 0;
        do
        {
          v119 = escapedValue(a2, 4, 8, 16);
          v120 = escapedValue(a2, 4, 8, 16);
          v121 = v120;
          if (v119 == 2)
          {
            v129 = v120;
            v130 = *(_QWORD *)(a1 + 192);
            v131 = *(_QWORD *)(a1 + 200) - v130;
            if (v120 <= v131)
            {
              if (v120 < v131)
                *(_QWORD *)(a1 + 200) = v130 + v120;
            }
            else
            {
              std::vector<unsigned char>::__append((std::vector<char> *)(a1 + 192), v120 - v131);
            }
            if (v121)
            {
              v132 = 0;
              do
              {
                v133 = *(_DWORD *)(a2 + 16);
                v134 = HIBYTE(v133);
                v135 = *(_DWORD *)(a2 + 20) - 8;
                *(_DWORD *)(a2 + 20) = v135;
                if (v135 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                  *(_QWORD *)a2 += 4;
                  v137 = *(_DWORD *)(a2 + 16);
                  v138 = *(_DWORD *)(a2 + 20);
                  v134 |= v137 >> v138;
                  *(_DWORD *)(a2 + 20) = v138 + 32;
                  if (v138 == -32)
                    v136 = 0;
                  else
                    v136 = v137 << -(char)v138;
                }
                else
                {
                  v136 = v133 << 8;
                }
                *(_DWORD *)(a2 + 16) = v136;
                *(_BYTE *)(*(_QWORD *)(a1 + 192) + v132++) = v134;
              }
              while (v129 != v132);
            }
          }
          else if (v119)
          {
            TBitstreamReader<unsigned int>::SkipBits(a2, 8 * v120);
          }
          else
          {
            v122 = v120 + 1;
            while (--v122)
            {
              v123 = *(_DWORD *)(a2 + 16);
              v124 = HIBYTE(v123);
              v125 = *(_DWORD *)(a2 + 20) - 8;
              *(_DWORD *)(a2 + 20) = v125;
              if (v125 < 0)
              {
                TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                *(_QWORD *)a2 += 4;
                v127 = *(_DWORD *)(a2 + 16);
                v128 = *(_DWORD *)(a2 + 20);
                v124 |= v127 >> v128;
                *(_DWORD *)(a2 + 20) = v128 + 32;
                if (v128 == -32)
                  v126 = 0;
                else
                  v126 = v127 << -(char)v128;
              }
              else
              {
                v126 = v123 << 8;
              }
              *(_DWORD *)(a2 + 16) = v126;
              if (v124 != 165)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  v143 = "MP4USACSpecificConfig.cpp";
                  v144 = 1024;
                  v145 = 309;
                  v10 = MEMORY[0x1E0C81028];
                  v11 = "%25s:%-5d  MP4USACSpecificConfig::Deserialize: invalid fill pattern for ID_CONFIG_EXT_FILL";
                  goto LABEL_10;
                }
                return 4294967090;
              }
            }
          }
        }
        while (v118++ != v117);
      }
    }
    result = 0;
    *(_BYTE *)(a1 + 216) = 1;
    return result;
  }
  v53 = 0;
  v141 = a1 + 77;
  while (2)
  {
    v54 = *(_DWORD *)(a2 + 16);
    v55 = v54 >> 30;
    v56 = *(_DWORD *)(a2 + 20) - 2;
    *(_DWORD *)(a2 + 20) = v56;
    if (v56 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v58 = *(_DWORD *)(a2 + 16);
      v59 = *(_DWORD *)(a2 + 20);
      v55 |= v58 >> v59;
      *(_DWORD *)(a2 + 20) = v59 + 32;
      if (v59 == -32)
        v57 = 0;
      else
        v57 = v58 << -(char)v59;
    }
    else
    {
      v57 = 4 * v54;
    }
    *(_DWORD *)(a2 + 16) = v57;
    *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v53) = v55;
    v60 = kUSACSbrFrameLengthInfoTable[4 * *(unsigned int *)(a1 + 12) + 1];
    switch(v55)
    {
      case 0u:
        *(_BYTE *)(a1 + 72) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
        *(_BYTE *)(a1 + 73) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
        if (v60)
        {
          *(_BYTE *)(a1 + 74) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
          *(_BYTE *)(a1 + 75) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
          *(_BYTE *)(a1 + 76) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
          USACSBRHeader::Deserialize(v141, a2);
        }
        goto LABEL_151;
      case 1u:
        *(_BYTE *)(a1 + 72) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
        *(_BYTE *)(a1 + 73) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
        if (v60)
        {
          *(_BYTE *)(a1 + 74) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
          *(_BYTE *)(a1 + 75) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
          *(_BYTE *)(a1 + 76) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
          USACSBRHeader::Deserialize(v141, a2);
          v62 = *(_DWORD *)(a2 + 16);
          v63 = v62 >> 30;
          v64 = *(_DWORD *)(a2 + 20) - 2;
          *(_DWORD *)(a2 + 20) = v64;
          if (v64 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
            *(_QWORD *)a2 += 4;
            v73 = *(_DWORD *)(a2 + 16);
            v74 = *(_DWORD *)(a2 + 20);
            v63 |= v73 >> v74;
            v64 = v74 + 32;
            *(_DWORD *)(a2 + 20) = v74 + 32;
            v65 = v74 == -32 ? 0 : v73 << -(char)v74;
          }
          else
          {
            v65 = 4 * v62;
          }
          *(_DWORD *)(a2 + 16) = v65;
          if (v63)
          {
            v81 = v65 >> 19;
            v82 = v64 - 13;
            *(_DWORD *)(a2 + 20) = v82;
            if (v82 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(_QWORD *)a2 += 4;
              v84 = *(_DWORD *)(a2 + 16);
              v85 = *(_DWORD *)(a2 + 20);
              v81 |= v84 >> v85;
              v82 = v85 + 32;
              *(_DWORD *)(a2 + 20) = v85 + 32;
              if (v85 == -32)
                v83 = 0;
              else
                v83 = v84 << -(char)v85;
            }
            else
            {
              v83 = v65 << 13;
            }
            *(_DWORD *)(a2 + 16) = v83;
            *(_BYTE *)(a1 + 88) = (v81 >> 10) & 7;
            *(_BYTE *)(a1 + 89) = (v81 >> 7) & 7;
            *(int8x8_t *)v61.i8 = vand_s8((int8x8_t)vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v81) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFFFFFEFFFDFFFBLL), (int8x8_t)0x1000100030003);
            *(_DWORD *)(a1 + 90) = vmovn_s16(v61).u32[0];
            *(_BYTE *)(a1 + 94) = v81 & 1;
            if ((v81 & 1) != 0)
            {
              v107 = v83 >> 27;
              v82 -= 5;
              *(_DWORD *)(a2 + 20) = v82;
              if (v82 < 0)
              {
                TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                *(_QWORD *)a2 += 4;
                v108 = *(_DWORD *)(a2 + 16);
                v109 = *(_DWORD *)(a2 + 20);
                v107 |= v108 >> v109;
                v82 = v109 + 32;
                *(_DWORD *)(a2 + 20) = v109 + 32;
                if (v109 == -32)
                  v83 = 0;
                else
                  v83 = v108 << -(char)v109;
              }
              else
              {
                v83 *= 32;
              }
              *(_DWORD *)(a2 + 16) = v83;
              *(_BYTE *)(a1 + 95) = v107;
            }
            if ((v63 & 0xFFFFFFFE) == 2)
            {
              v110 = v83 >> 27;
              v111 = v82 - 5;
              *(_DWORD *)(a2 + 20) = v111;
              if (v111 < 0)
              {
                TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                *(_QWORD *)a2 += 4;
                v113 = *(_DWORD *)(a2 + 16);
                v114 = *(_DWORD *)(a2 + 20);
                v110 |= v113 >> v114;
                *(_DWORD *)(a2 + 20) = v114 + 32;
                if (v114 == -32)
                  v112 = 0;
                else
                  v112 = v113 << -(char)v114;
              }
              else
              {
                v112 = 32 * v83;
              }
              *(_DWORD *)(a2 + 16) = v112;
              *(_BYTE *)(a1 + 96) = v110;
              if (*(unsigned __int8 *)(a1 + 95) < v110)
                *(_BYTE *)(a1 + 95) = v110;
              *(_BYTE *)(a1 + 97) = TBitstreamReader<unsigned int>::GetBit(a2);
            }
            if (*(_BYTE *)(a1 + 90) == 2)
              *(_BYTE *)(a1 + 98) = TBitstreamReader<unsigned int>::GetBit(a2);
            *(_BYTE *)(a1 + 99) = 1;
          }
        }
        goto LABEL_151;
      case 2u:
        *(_WORD *)(a1 + 72) = 0;
        goto LABEL_151;
      case 3u:
        v66 = escapedValue(a2, 4, 8, 16);
        v67 = escapedValue(a2, 4, 8, 16);
        v68 = TBitstreamReader<unsigned int>::GetBit(a2);
        *(_BYTE *)(a1 + 100) = v68 != 0;
        if (v68)
          v69 = escapedValue(a2, 8, 16, 0) + 1;
        else
          v69 = 0;
        break;
      default:
        goto LABEL_151;
    }
    *(_DWORD *)(a1 + 104) = v69;
    *(_BYTE *)(a1 + 108) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
    switch(v66)
    {
      case 0:
        goto LABEL_151;
      case 1:
        v70 = v67;
        v71 = *(_QWORD *)(a1 + 112);
        v72 = *(_QWORD *)(a1 + 120) - v71;
        if (v67 <= v72)
        {
          if (v67 < v72)
            *(_QWORD *)(a1 + 120) = v71 + v67;
        }
        else
        {
          std::vector<unsigned char>::__append((std::vector<char> *)(a1 + 112), v67 - v72);
        }
        if (v67)
        {
          v86 = 0;
          do
          {
            v87 = *(_DWORD *)(a2 + 16);
            v88 = HIBYTE(v87);
            v89 = *(_DWORD *)(a2 + 20) - 8;
            *(_DWORD *)(a2 + 20) = v89;
            if (v89 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(_QWORD *)a2 += 4;
              v91 = *(_DWORD *)(a2 + 16);
              v92 = *(_DWORD *)(a2 + 20);
              v88 |= v91 >> v92;
              *(_DWORD *)(a2 + 20) = v92 + 32;
              if (v92 == -32)
                v90 = 0;
              else
                v90 = v91 << -(char)v92;
            }
            else
            {
              v90 = v87 << 8;
            }
            *(_DWORD *)(a2 + 16) = v90;
            *(_BYTE *)(*(_QWORD *)(a1 + 112) + v86++) = v88;
          }
          while (v70 != v86);
        }
        goto LABEL_151;
      case 2:
        v75 = v67;
        v76 = *(_QWORD *)(a1 + 136);
        v77 = *(_QWORD *)(a1 + 144) - v76;
        if (v67 <= v77)
        {
          if (v67 < v77)
            *(_QWORD *)(a1 + 144) = v76 + v67;
        }
        else
        {
          std::vector<unsigned char>::__append((std::vector<char> *)(a1 + 136), v67 - v77);
        }
        if (v67)
        {
          v93 = 0;
          do
          {
            v94 = *(_DWORD *)(a2 + 16);
            v95 = HIBYTE(v94);
            v96 = *(_DWORD *)(a2 + 20) - 8;
            *(_DWORD *)(a2 + 20) = v96;
            if (v96 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(_QWORD *)a2 += 4;
              v98 = *(_DWORD *)(a2 + 16);
              v99 = *(_DWORD *)(a2 + 20);
              v95 |= v98 >> v99;
              *(_DWORD *)(a2 + 20) = v99 + 32;
              if (v99 == -32)
                v97 = 0;
              else
                v97 = v98 << -(char)v99;
            }
            else
            {
              v97 = v94 << 8;
            }
            *(_DWORD *)(a2 + 16) = v97;
            *(_BYTE *)(*(_QWORD *)(a1 + 136) + v93++) = v95;
          }
          while (v75 != v93);
        }
        goto LABEL_151;
      case 3:
        *(_BYTE *)(a1 + 184) = v53 == 0;
        goto LABEL_151;
      case 4:
        v78 = v67;
        v79 = *(_QWORD *)(a1 + 160);
        v80 = *(_QWORD *)(a1 + 168) - v79;
        if (v67 <= v80)
        {
          if (v67 < v80)
            *(_QWORD *)(a1 + 168) = v79 + v67;
        }
        else
        {
          std::vector<unsigned char>::__append((std::vector<char> *)(a1 + 160), v67 - v80);
        }
        if (v67)
        {
          v100 = 0;
          do
          {
            v101 = *(_DWORD *)(a2 + 16);
            v102 = HIBYTE(v101);
            v103 = *(_DWORD *)(a2 + 20) - 8;
            *(_DWORD *)(a2 + 20) = v103;
            if (v103 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(_QWORD *)a2 += 4;
              v105 = *(_DWORD *)(a2 + 16);
              v106 = *(_DWORD *)(a2 + 20);
              v102 |= v105 >> v106;
              *(_DWORD *)(a2 + 20) = v106 + 32;
              if (v106 == -32)
                v104 = 0;
              else
                v104 = v105 << -(char)v106;
            }
            else
            {
              v104 = v101 << 8;
            }
            *(_DWORD *)(a2 + 16) = v104;
            *(_BYTE *)(*(_QWORD *)(a1 + 160) + v100++) = v102;
          }
          while (v78 != v100);
        }
        goto LABEL_151;
      default:
        if (8 * v67 <= *(_DWORD *)(a2 + 20) + 8 * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2))
        {
          TBitstreamReader<unsigned int>::SkipBits(a2, 8 * v67);
LABEL_151:
          if (++v53 == v38)
            goto LABEL_152;
          continue;
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v143 = "MP4USACSpecificConfig.cpp";
          v144 = 1024;
          v145 = 290;
          v10 = MEMORY[0x1E0C81028];
          v11 = "%25s:%-5d  MP4USACSpecificConfig::Deserialize: insufficient bits";
LABEL_10:
          _os_log_impl(&dword_18EE07000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
        }
        return 4294967090;
    }
  }
}

uint64_t MP4AOTSpecificBase::SerializeCount(MP4AOTSpecificBase *this)
{
  return 0;
}

uint64_t MP4AOTSpecificBase::Serialize()
{
  return 4294967292;
}

uint64_t escapedValue(uint64_t a1, int a2, int a3, int a4)
{
  char v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;

  v6 = a2;
  v8 = *(_DWORD *)(a1 + 16);
  v9 = v8 >> -(char)a2;
  v10 = *(_DWORD *)(a1 + 20) - a2;
  *(_DWORD *)(a1 + 20) = v10;
  if (v10 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
    *(_QWORD *)a1 += 4;
    v12 = *(_DWORD *)(a1 + 16);
    v13 = *(_DWORD *)(a1 + 20);
    v9 = (v12 >> v13) | v9;
    v10 = v13 + 32;
    *(_DWORD *)(a1 + 20) = v13 + 32;
    if (v13 == -32)
      v11 = 0;
    else
      v11 = v12 << -(char)v13;
  }
  else
  {
    v11 = v8 << a2;
  }
  *(_DWORD *)(a1 + 16) = v11;
  if ((_DWORD)v9 == ~(-1 << v6))
  {
    v14 = v11 >> -(char)a3;
    v15 = v10 - a3;
    *(_DWORD *)(a1 + 20) = v15;
    if (v15 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
      *(_QWORD *)a1 += 4;
      v17 = *(_DWORD *)(a1 + 16);
      v18 = *(_DWORD *)(a1 + 20);
      v14 |= v17 >> v18;
      v15 = v18 + 32;
      *(_DWORD *)(a1 + 20) = v18 + 32;
      v16 = v18 == -32 ? 0 : v17 << -(char)v18;
    }
    else
    {
      v16 = v11 << a3;
    }
    *(_DWORD *)(a1 + 16) = v16;
    v9 = v14 + v9;
    if (v14 == ~(-1 << a3))
    {
      if (a4)
      {
        v19 = v16 >> -(char)a4;
        v20 = v15 - a4;
        *(_DWORD *)(a1 + 20) = v20;
        if (v20 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
          *(_QWORD *)a1 += 4;
          v22 = *(_DWORD *)(a1 + 16);
          v23 = *(_DWORD *)(a1 + 20);
          v19 |= v22 >> v23;
          *(_DWORD *)(a1 + 20) = v23 + 32;
          if (v23 == -32)
            v21 = 0;
          else
            v21 = v22 << -(char)v23;
        }
        else
        {
          v21 = v16 << a4;
        }
        *(_DWORD *)(a1 + 16) = v21;
      }
      else
      {
        v19 = 0;
      }
      return v19 + v9;
    }
  }
  return v9;
}

uint64_t USACSBRHeader::Deserialize(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  char v18;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = v4 >> 22;
  v6 = *(_DWORD *)(a2 + 20) - 10;
  *(_DWORD *)(a2 + 20) = v6;
  if (v6 < 0)
  {
    result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v8 = *(_DWORD *)(a2 + 16);
    v9 = *(_DWORD *)(a2 + 20);
    v5 |= v8 >> v9;
    v6 = v9 + 32;
    *(_DWORD *)(a2 + 20) = v9 + 32;
    if (v9 == -32)
      v7 = 0;
    else
      v7 = v8 << -(char)v9;
  }
  else
  {
    v7 = v4 << 10;
  }
  *(_DWORD *)(a2 + 16) = v7;
  *(_BYTE *)v3 = (v5 >> 6) & 0xF;
  *(_BYTE *)(v3 + 1) = (v5 >> 2) & 0xF;
  *(_BYTE *)(v3 + 2) = (v5 & 2) != 0;
  *(_BYTE *)(v3 + 6) = v5 & 1;
  if (((v5 >> 1) & 1) != 0)
  {
    v13 = v7 >> 27;
    v6 -= 5;
    *(_DWORD *)(a2 + 20) = v6;
    if (v6 < 0)
    {
      result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(_QWORD *)a2 += 4;
      v16 = *(_DWORD *)(a2 + 16);
      v17 = *(_DWORD *)(a2 + 20);
      v13 |= v16 >> v17;
      v6 = v17 + 32;
      *(_DWORD *)(a2 + 20) = v17 + 32;
      if (v17 == -32)
        v7 = 0;
      else
        v7 = v16 << -(char)v17;
    }
    else
    {
      v7 *= 32;
    }
    *(_DWORD *)(a2 + 16) = v7;
    *(_BYTE *)(v3 + 3) = (v13 >> 3) & 3;
    *(_BYTE *)(v3 + 4) = (v13 & 4) != 0;
    *(_BYTE *)(v3 + 5) = v13 & 3;
    if (*(_BYTE *)(v3 + 6))
      goto LABEL_8;
LABEL_20:
    *(_WORD *)(v3 + 7) = 514;
    v18 = 1;
    *(_BYTE *)(v3 + 9) = 1;
    goto LABEL_21;
  }
  *(_WORD *)(v3 + 3) = 258;
  *(_BYTE *)(v3 + 5) = 2;
  if ((v5 & 1) == 0)
    goto LABEL_20;
LABEL_8:
  v10 = v7 >> 26;
  v11 = v6 - 6;
  *(_DWORD *)(a2 + 20) = v11;
  if (v11 < 0)
  {
    result = TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(_QWORD *)a2 += 4;
    v14 = *(_DWORD *)(a2 + 16);
    v15 = *(_DWORD *)(a2 + 20);
    v10 |= v14 >> v15;
    *(_DWORD *)(a2 + 20) = v15 + 32;
    if (v15 == -32)
      v12 = 0;
    else
      v12 = v14 << -(char)v15;
  }
  else
  {
    v12 = v7 << 6;
  }
  *(_DWORD *)(a2 + 16) = v12;
  *(_BYTE *)(v3 + 7) = (v10 >> 4) & 3;
  *(_BYTE *)(v3 + 8) = (v10 >> 2) & 3;
  *(_BYTE *)(v3 + 9) = (v10 & 2) != 0;
  v18 = v10 & 1;
LABEL_21:
  *(_BYTE *)(v3 + 10) = v18;
  return result;
}

void ID3FileStream::~ID3FileStream(ID3FileStream *this)
{
  ID3FileStream::~ID3FileStream(this);
  JUMPOUT(0x193FFE460);
}

{
  uint64_t v2;
  const void *v3;
  CACFDictionary *v4;
  CACFDictionary *v5;
  CACFDictionary *v6;
  CACFDictionary *v7;
  void *v8;
  const void *v9;
  const void *v10;
  void *v11;
  void *v12;

  *(_QWORD *)this = &off_1E2903148;
  v2 = *((_QWORD *)this + 42);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)*((_QWORD *)this + 44);
  if (v3)
    CFRelease(v3);
  v4 = (CACFDictionary *)*((_QWORD *)this + 45);
  if (v4)
  {
    CACFDictionary::~CACFDictionary(v4);
    MEMORY[0x193FFE460]();
  }
  v5 = (CACFDictionary *)*((_QWORD *)this + 46);
  if (v5)
  {
    CACFDictionary::~CACFDictionary(v5);
    MEMORY[0x193FFE460]();
  }
  v6 = (CACFDictionary *)*((_QWORD *)this + 47);
  if (v6)
  {
    CACFDictionary::~CACFDictionary(v6);
    MEMORY[0x193FFE460]();
  }
  v7 = (CACFDictionary *)*((_QWORD *)this + 48);
  if (v7)
  {
    CACFDictionary::~CACFDictionary(v7);
    MEMORY[0x193FFE460]();
  }
  v8 = (void *)*((_QWORD *)this + 55);
  if (v8)
    free(v8);
  v9 = (const void *)*((_QWORD *)this + 60);
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 61);
  if (v10)
    CFRelease(v10);
  v11 = (void *)*((_QWORD *)this + 62);
  if (v11)
    free(v11);
  if (*((_BYTE *)this + 616))
    AudioFileAllowListFilter::~AudioFileAllowListFilter((ID3FileStream *)((char *)this + 544));
  if (*((_BYTE *)this + 536))
  {
    v12 = (void *)*((_QWORD *)this + 64);
    if (v12)
    {
      *((_QWORD *)this + 65) = v12;
      operator delete(v12);
    }
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

uint64_t ID3FileStream::GetPropertyInfo(ID3FileStream *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  unsigned int v4;

  if (a2 > 1768842862)
  {
    if (a2 != 1768842863 && a2 != 1819243876 && a2 != 1935893603)
      return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
  }
  else if (a2 != 1280922179 && a2 != 1768174433)
  {
    if (a2 == 1768174437)
    {
      if (a3)
      {
        v4 = 4;
LABEL_12:
        *a3 = v4;
        goto LABEL_13;
      }
      goto LABEL_13;
    }
    return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
  }
  if (a3)
  {
    v4 = 8;
    goto LABEL_12;
  }
LABEL_13:
  if (a4)
    *a4 = 0;
  return 0;
}

uint64_t ID3FileStream::GetProperty(ID3FileStream *this, int a2, unsigned int *a3, _DWORD *__dst)
{
  uint64_t result;
  CFTypeRef *v7;
  const __CFDictionary *v8;
  CFTypeRef v9;
  CFTypeRef *v10;
  CFTypeRef v11;
  CFTypeRef cf;
  __int16 v13;

  if (a2 <= 1768842862)
  {
    if (a2 != 1280922179)
    {
      if (a2 != 1768174433)
      {
        if (a2 == 1768174437)
        {
          if (*a3 == 4)
          {
            result = 0;
            *__dst = *((_DWORD *)this + 112);
            return result;
          }
          return 561211770;
        }
        return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
      }
      if (*a3 == 8)
      {
        result = 0;
        v9 = (CFTypeRef)*((_QWORD *)this + 57);
LABEL_32:
        *(_QWORD *)__dst = v9;
        return result;
      }
      return 561211770;
    }
    if (*a3 != 8)
      return 561211770;
    v8 = (const __CFDictionary *)*((_QWORD *)this + 44);
    if (v8)
    {
      result = (uint64_t)CFDictionaryGetValue(v8, CFSTR("text"));
      *(_QWORD *)__dst = result;
      if (!result)
        return result;
      CFRetain((CFTypeRef)result);
      return 0;
    }
    return 1836020325;
  }
  if (a2 != 1768842863)
  {
    if (a2 == 1819243876)
    {
      if (*a3 != 8)
        return 561211770;
      v10 = (CFTypeRef *)*((_QWORD *)this + 47);
      if (!v10)
      {
        if (*((_QWORD *)this + 45))
        {
          cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v13 = 257;
          AudioFileGetLoudnessInfoFromSoundCheckDictionary(*((CFDictionaryRef **)this + 45), (CACFDictionary *)&cf);
          if (cf)
          {
            CFRetain(cf);
            v11 = cf;
          }
          else
          {
            v11 = 0;
          }
          *(_QWORD *)__dst = v11;
          CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
          return 0;
        }
        return 1836020325;
      }
      if (*v10)
      {
        CFRetain(*v10);
        v9 = *v10;
        goto LABEL_31;
      }
LABEL_30:
      v9 = 0;
      goto LABEL_31;
    }
    if (a2 != 1935893603)
      return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
    if (*a3 != 8)
      return 561211770;
    v7 = (CFTypeRef *)*((_QWORD *)this + 45);
    if (!v7)
      return 1836020325;
LABEL_22:
    if (*v7)
    {
      CFRetain(*v7);
      v9 = *v7;
LABEL_31:
      result = 0;
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  if (*a3 != 8)
    return 561211770;
  result = 1836020325;
  if (*((_BYTE *)this + 508))
  {
    v7 = (CFTypeRef *)*((_QWORD *)this + 46);
    if (v7)
      goto LABEL_22;
  }
  return result;
}

void sub_18EF49624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ID3FileStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  void (*v21)(_QWORD, _QWORD, uint64_t, char *);
  _BOOL4 v23;
  unsigned int v24;
  size_t v25;
  char *v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t result;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v37;
  size_t v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  size_t v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  const unsigned __int8 *v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  int v62;
  unint64_t v64;
  unsigned int v65;
  int v66;
  unint64_t v68;
  unsigned int v69;
  int v70;
  unint64_t v72;
  unsigned int v73;
  int v74;
  unint64_t v76;
  unsigned int v77;
  int v78;
  unint64_t v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  int v85;
  char *v86;
  char *v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  int v91;
  int v92;
  unsigned int FrameDataSize;
  _DWORD *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  void *v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  unsigned int *v103;
  uint64_t v104;
  unsigned int v105;
  ID3TagBase *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  void *v113;
  uint64_t v114;
  __n128 v115;
  int v116;
  int v117;
  int v118;
  unsigned int *v119;
  ID3TagBase *v120;
  unsigned int v121;
  int v122;
  char *v123;
  CFDictionaryRef *v124;
  const void *Value;
  const __CFString *v126;
  CACFDictionary *v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  unsigned int *v147;
  unsigned int v148;
  ID3TagBase *v149;
  int v150;
  _BOOL4 IsValidFrameID;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  size_t v156;
  int v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  size_t v162;
  void *v163;
  int v164;
  BOOL v165;
  uint64_t v166;
  CACFDictionary *v167;
  uint64_t v168;
  void (*v169)(_QWORD, _QWORD, uint64_t, char *);
  CACFDictionary *v170;
  int v171;
  CACFDictionary *v172;
  uint64_t v173;
  void (*v174)(_QWORD, _QWORD, uint64_t, char *);
  CACFDictionary *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  BOOL v186;
  int v187;
  int v188;
  int v189;
  std::bad_alloc *exception;
  std::bad_alloc *v191;
  std::bad_alloc *v192;
  std::bad_alloc *v193;
  int v194;
  char __little[40];
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 236);
  if (v4 > 129)
  {
    if (v4 <= 170)
    {
      if (v4 == 130)
      {
        LODWORD(v42) = *(_DWORD *)(a1 + 256);
        v43 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_141;
      }
      if (v4 != 157)
        goto LABEL_61;
      v29 = *(_DWORD *)(a1 + 256);
      v30 = *(unsigned __int8 **)(a1 + 264);
LABEL_150:
      *(_DWORD *)__little = v29;
      StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)__little, v30);
      v100 = *(_DWORD *)__little;
      v101 = *(_DWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 264) += *(unsigned int *)__little;
      v102 = v101 - v100;
      *(_DWORD *)(a1 + 256) = v102;
      if (v102)
      {
        result = 0;
        v39 = 157;
        goto LABEL_110;
      }
      v103 = *(unsigned int **)(a1 + 336);
      v104 = *(_QWORD *)(a1 + 440);
      if (v104)
      {
        v105 = bswap32(*(_DWORD *)(v104 + *(unsigned int *)(a1 + 416) + v103[14]));
        v106 = (ID3TagBase *)v103[16];
        if ((_DWORD)v106 == 2)
          v107 = v105 >> 8;
        else
          v107 = v105;
      }
      else
      {
        v107 = 0;
        v106 = (ID3TagBase *)v103[16];
      }
      if (ID3TagBase::IsValidFrameID(v106, v107))
      {
        v129 = *(unsigned int *)(a1 + 416);
        *(_DWORD *)(a1 + 420) = v129;
        memcpy((void *)(a1 + 424), (const void *)(v104 + v129 + v103[14]), v103[14]);
        v130 = v129;
        goto LABEL_189;
      }
      v131 = *(unsigned int *)(a1 + 416);
      v132 = v103[14];
      v40 = *(_DWORD *)(a1 + 420) - v131 - v132;
      *(_DWORD *)(a1 + 256) = v40;
      v41 = (unsigned __int8 *)(v104 + v131 + v132 + v132);
      *(_QWORD *)(a1 + 264) = v41;
    }
    else
    {
      if (v4 != 171)
      {
        if (v4 == 200)
        {
          v44 = *(_DWORD *)(a1 + 256);
          v45 = *(_QWORD *)(a1 + 8);
          v46 = *(unsigned __int8 **)(a1 + 264);
          goto LABEL_215;
        }
        if (v4 == 235)
        {
          v5 = *(_DWORD *)(a1 + 256);
          v6 = *(unsigned __int8 **)(a1 + 264);
LABEL_164:
          *(_DWORD *)__little = v5;
          StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)__little, v6);
          v116 = *(_DWORD *)__little;
          v117 = *(_DWORD *)(a1 + 256);
          *(_QWORD *)(a1 + 264) += *(unsigned int *)__little;
          v118 = v117 - v116;
          *(_DWORD *)(a1 + 256) = v118;
          if (!v118)
          {
            v119 = *(unsigned int **)(a1 + 336);
            v120 = (ID3TagBase *)*(unsigned int *)(a1 + 464);
            v121 = v119[16];
            if (v121 == 2)
              v122 = 5527640;
            else
              v122 = 1415075928;
            if (v122 == (_DWORD)v120)
            {
              v123 = *(char **)(a1 + 440);
              if (v123)
              {
                v124 = (CFDictionaryRef *)(a1 + 352);
                if (!ID3TagBase::CopyFrameData((ID3TagBase *)v119, v123, *(_DWORD *)(a1 + 412), *(_DWORD *)(a1 + 472), (const void **)(a1 + 352)))
                {
                  if (*v124)
                  {
                    *(_QWORD *)(a1 + 480) = CFDictionaryGetValue(*v124, CFSTR("identifier"));
                    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 352), CFSTR("text"));
                    *(_QWORD *)(a1 + 488) = Value;
                    v126 = *(const __CFString **)(a1 + 480);
                    if (v126)
                    {
                      if (Value)
                      {
                        v127 = *(CACFDictionary **)(a1 + 384);
                        if (!v127)
                        {
                          if ((unint64_t)CFStringFind(v126, CFSTR("REPLAYGAIN"), 1uLL).location)
                          {
                            v127 = *(CACFDictionary **)(a1 + 384);
                          }
                          else
                          {
                            v127 = (CACFDictionary *)operator new();
                            *(_QWORD *)v127 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                            *((_WORD *)v127 + 4) = 257;
                            *(_QWORD *)(a1 + 384) = v127;
                          }
                        }
                        AddTextToReplayGainDict(*(_QWORD *)(a1 + 480), *(const __CFString **)(a1 + 488), v127);
                      }
                    }
                  }
                }
              }
              goto LABEL_222;
            }
            if (v121 == 2)
            {
              v128 = 4411213;
              if ((v120 & 0xFFFF0000) != 0x540000)
                goto LABEL_181;
            }
            else
            {
              v128 = 1129270605;
              if (v120 >> 24 != 84)
              {
LABEL_181:
                if (v128 == (_DWORD)v120)
                {
LABEL_182:
                  ID3FileStream::ProcessCommentFrame(a1);
                }
                else
                {
                  if (v121 == 2)
                    v143 = 5590100;
                  else
                    v143 = 1431522388;
                  if (v143 == (_DWORD)v120)
                  {
LABEL_208:
                    ID3FileStream::ProcessLyricFrame(a1);
                  }
                  else if ((_DWORD)v120 == 1347570006)
                  {
                    v154 = *(_QWORD *)(a1 + 440);
                    if (v154)
                    {
                      strcpy(__little, "com.apple.streaming.audioDescription");
                      v155 = v119[14];
                      v156 = (*(_DWORD *)(a1 + 412) - v155);
                      v157 = v154 + v155;
                      v158 = strnstr((const char *)(v154 + v155), __little, v156);
                      if (v158)
                      {
                        v159 = ((_DWORD)v158 - v157 + 37);
                        if (v159 + 8 <= v156)
                        {
                          v160 = *(_QWORD *)(a1 + 8);
                          v161 = *(_QWORD *)(a1 + 440);
                          v162 = (v156 - v159);
                          v163 = malloc_type_calloc(1uLL, v162, 0xEC50E5E2uLL);
                          *(_QWORD *)(v160 + 136) = v163;
                          memcpy(v163, (const void *)(v161 + v155 + v159), v162);
                          *(_DWORD *)(v160 + 144) = v162;
                          *(_BYTE *)(a1 + 505) = 1;
                        }
                      }
                    }
                  }
                  else
                  {
                    if (v121 == 2)
                      v164 = 5065804;
                    else
                      v164 = 1296845908;
                    if (v164 == (_DWORD)v120)
                      ID3FileStream::ProcessMLLTFrame((ID3FileStream *)a1, v115);
                  }
                }
                goto LABEL_222;
              }
            }
LABEL_201:
            ID3FileStream::ProcessTextFrame((ID3FileStream *)a1, v120);
LABEL_222:
            while (1)
            {
              ID3FileStream::EndOfFrame((ID3FileStream *)a1);
              v53 = *(_QWORD *)(a1 + 336);
LABEL_129:
              if (*(_BYTE *)(v53 + 48)
                || *(_BYTE *)(a1 + 504)
                && *(_BYTE *)(a1 + 505)
                && *(_BYTE *)(a1 + 506)
                && *(_BYTE *)(a1 + 507)
                && *(_BYTE *)(a1 + 508)
                && *(_BYTE *)(a1 + 509)
                && *(_BYTE *)(a1 + 510))
              {
                goto LABEL_241;
              }
              v88 = *(_DWORD *)(a1 + 344);
              v89 = *(_DWORD *)(v53 + 52);
              v42 = *(unsigned int *)(v53 + 56);
              if (v88 >= v89 - v42)
              {
                v165 = v89 >= v88;
                v166 = v89 - v88;
                if ((_DWORD)v166 != 0 && v165)
                  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) += v166;
                goto LABEL_241;
              }
              *(_DWORD *)(a1 + 412) = 0;
              if (*(_BYTE *)(a1 + 424))
              {
                memcpy((void *)(a1 + 402), (const void *)(a1 + 424), v42);
                *(_QWORD *)(a1 + 424) = 0;
                *(_WORD *)(a1 + 432) = 0;
              }
              else
              {
                *(_DWORD *)(a1 + 256) = v42;
                v43 = (unsigned __int8 *)(a1 + 402);
                *(_QWORD *)(a1 + 264) = a1 + 402;
LABEL_141:
                *(_DWORD *)__little = v42;
                StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)__little, v43);
                v90 = *(_DWORD *)__little;
                v91 = *(_DWORD *)(a1 + 256);
                *(_QWORD *)(a1 + 264) += *(unsigned int *)__little;
                v92 = v91 - v90;
                *(_DWORD *)(a1 + 256) = v92;
                if (v92)
                {
                  result = 0;
                  v39 = 130;
                  goto LABEL_110;
                }
                v53 = *(_QWORD *)(a1 + 336);
              }
              *(_DWORD *)(a1 + 420) = 0;
              FrameDataSize = ID3TagBase::GetFrameDataSize((ID3TagBase *)v53, (unsigned __int8 *)(a1 + 402), 0xAu, (unsigned int *)(a1 + 420));
              *(_DWORD *)(a1 + 416) = FrameDataSize;
              v94 = *(_DWORD **)(a1 + 336);
              if (v94[16] != 4
                || (v95 = FrameDataSize, v96 = *(_DWORD *)(a1 + 420), v96 <= FrameDataSize)
                || *(_DWORD *)(a1 + 344) + v96 >= v94[13])
              {
                if (!ID3TagBase::ProvideFrameData(*(ID3TagBase **)(a1 + 336), (unsigned __int8 *)(a1 + 402), v94[14], *(_DWORD *)(a1 + 344), (unsigned int *)(a1 + 412), 0))
                {
                  v108 = *(_QWORD *)(a1 + 336);
                  v109 = v108 + 24;
                  while (1)
                  {
                    v109 = *(_QWORD *)(v109 + 8);
                    if (v109 == v108 + 24)
                      break;
                    if (*(_DWORD *)(v109 + 24) == *(_DWORD *)(a1 + 344))
                    {
                      v110 = *(_QWORD *)(v109 + 16);
                      *(_DWORD *)(a1 + 472) = *(_DWORD *)(v109 + 24);
                      *(_QWORD *)(a1 + 464) = v110;
                      v111 = *(_DWORD *)(v108 + 56);
                      if (*(_DWORD *)(a1 + 468) > v111
                        && ID3FileStream::IsCurFrameRequired((ID3FileStream *)a1))
                      {
                        v112 = *(_DWORD *)(a1 + 412);
                        v113 = malloc_type_malloc(v112, 0x7C51E058uLL);
                        if (v112 && !v113)
                        {
                          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                          v191 = std::bad_alloc::bad_alloc(exception);
                        }
                        *(_QWORD *)(a1 + 440) = v113;
                        memcpy(v113, (const void *)(a1 + 402), *(unsigned int *)(*(_QWORD *)(a1 + 336) + 56));
                        v114 = *(unsigned int *)(*(_QWORD *)(a1 + 336) + 56);
                        v5 = *(_DWORD *)(a1 + 412) - v114;
                        *(_DWORD *)(a1 + 256) = v5;
                        v6 = (unsigned __int8 *)(*(_QWORD *)(a1 + 440) + v114);
                        *(_QWORD *)(a1 + 264) = v6;
                        goto LABEL_164;
                      }
                      if (*(_BYTE *)(v108 + 48))
                        goto LABEL_241;
                      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) += *(_DWORD *)(a1 + 412) - v111;
                      goto LABEL_222;
                    }
                  }
                }
                goto LABEL_241;
              }
              if (ID3FileStream::IsCurFrameRequired((ID3FileStream *)a1))
              {
                v97 = v94[14] + v96;
                v98 = malloc_type_malloc(v97, 0x7C51E058uLL);
                if (v97 && !v98)
                {
                  v192 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                  v193 = std::bad_alloc::bad_alloc(v192);
                }
                *(_QWORD *)(a1 + 440) = v98;
                memcpy(v98, (const void *)(a1 + 402), *(unsigned int *)(*(_QWORD *)(a1 + 336) + 56));
                v99 = *(unsigned int *)(*(_QWORD *)(a1 + 336) + 56);
                v29 = v99 + *(_DWORD *)(a1 + 416);
                *(_DWORD *)(a1 + 256) = v29;
                v30 = (unsigned __int8 *)(*(_QWORD *)(a1 + 440) + v99);
                *(_QWORD *)(a1 + 264) = v30;
                goto LABEL_150;
              }
              v45 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(v45 + 96) += v95;
              v44 = v94[14];
              *(_DWORD *)(a1 + 256) = v44;
              v46 = (unsigned __int8 *)(a1 + 424);
              *(_QWORD *)(a1 + 264) = a1 + 424;
LABEL_215:
              *(_DWORD *)__little = v44;
              StreamBuffer::Copy((_QWORD *)(v45 + 72), (unsigned int *)__little, v46);
              v144 = *(_DWORD *)__little;
              v145 = *(_DWORD *)(a1 + 256);
              *(_QWORD *)(a1 + 264) += *(unsigned int *)__little;
              v146 = v145 - v144;
              *(_DWORD *)(a1 + 256) = v146;
              if (v146)
              {
                result = 0;
                v39 = 200;
                goto LABEL_110;
              }
              v147 = *(unsigned int **)(a1 + 336);
              v148 = bswap32(*(_DWORD *)(a1 + 424));
              v149 = (ID3TagBase *)v147[16];
              if ((_DWORD)v149 == 2)
                v150 = v148 >> 8;
              else
                v150 = v148;
              IsValidFrameID = ID3TagBase::IsValidFrameID(v149, v150);
              v152 = IsValidFrameID;
              ID3TagBase::ProvideFrameData((ID3TagBase *)v147, (unsigned __int8 *)(a1 + 402), v147[14], *(_DWORD *)(a1 + 344), (unsigned int *)(a1 + 412), !IsValidFrameID);
              v153 = *(_QWORD *)(a1 + 336);
              if (*(_BYTE *)(v153 + 48))
                goto LABEL_241;
              if (!v152)
              {
                *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96) += (*(_DWORD *)(a1 + 420)
                                                                        - *(_DWORD *)(a1 + 416)
                                                                        - *(_DWORD *)(v153 + 56));
                *(_WORD *)(a1 + 432) = 0;
                *(_QWORD *)(a1 + 424) = 0;
              }
            }
          }
          result = 0;
          v39 = 235;
LABEL_110:
          *(_DWORD *)(a1 + 236) = v39;
          return result;
        }
LABEL_61:
        result = 0;
        v39 = -1;
        goto LABEL_110;
      }
      v40 = *(_DWORD *)(a1 + 256);
      v41 = *(unsigned __int8 **)(a1 + 264);
    }
    *(_DWORD *)__little = v40;
    StreamBuffer::Copy((_QWORD *)(*(_QWORD *)(a1 + 8) + 72), (unsigned int *)__little, v41);
    v133 = *(_DWORD *)__little;
    v134 = *(_DWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 264) += *(unsigned int *)__little;
    v135 = v134 - v133;
    *(_DWORD *)(a1 + 256) = v135;
    if (v135)
    {
      result = 0;
      v39 = 171;
      goto LABEL_110;
    }
    v130 = *(_DWORD *)(a1 + 420);
    LODWORD(v129) = *(_DWORD *)(a1 + 416);
    v103 = *(unsigned int **)(a1 + 336);
LABEL_189:
    if (!ID3TagBase::ProvideFrameData((ID3TagBase *)v103, (unsigned __int8 *)(a1 + 402), v103[14], *(_DWORD *)(a1 + 344), (unsigned int *)(a1 + 412), v130 != v129))
    {
      v136 = *(_QWORD *)(a1 + 336);
      v137 = v136 + 24;
      while (1)
      {
        v137 = *(_QWORD *)(v137 + 8);
        if (v137 == v136 + 24)
          break;
        if (*(_DWORD *)(v137 + 24) == *(_DWORD *)(a1 + 344))
        {
          v138 = *(_QWORD *)(v137 + 16);
          *(_DWORD *)(a1 + 472) = *(_DWORD *)(v137 + 24);
          *(_QWORD *)(a1 + 464) = v138;
          v139 = bswap32(*(_DWORD *)(a1 + 402));
          v140 = *(_DWORD *)(v136 + 64);
          if (v140 == 2)
            v120 = (ID3TagBase *)(v139 >> 8);
          else
            v120 = (ID3TagBase *)v139;
          if (v140 == 2)
          {
            v141 = 4411213;
            if ((v120 & 0xFFFF0000) == 0x540000)
              goto LABEL_201;
          }
          else
          {
            v141 = 1129270605;
            if (v120 >> 24 == 84)
              goto LABEL_201;
          }
          if (v141 == (_DWORD)v120)
            goto LABEL_182;
          if (v140 == 2)
            v142 = 5590100;
          else
            v142 = 1431522388;
          if (v142 != (_DWORD)v120)
            goto LABEL_222;
          goto LABEL_208;
        }
      }
    }
LABEL_241:
    v167 = *(CACFDictionary **)(a1 + 368);
    if (v167)
    {
      *(_BYTE *)(a1 + 508) = 1;
      if (CACFDictionary::Size(v167))
      {
        v168 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)__little = 0;
        v169 = *(void (**)(_QWORD, _QWORD, uint64_t, char *))(v168 + 24);
        if (v169)
          v169(*(_QWORD *)(v168 + 40), *(unsigned int *)(v168 + 8), 1768842863, __little);
      }
    }
    if (*(_QWORD *)(a1 + 376))
      goto LABEL_246;
    v175 = *(CACFDictionary **)(a1 + 384);
    if (v175 && CACFDictionary::Size(v175))
    {
      if (!*(_QWORD *)(a1 + 376))
      {
        v176 = operator new();
        *(_QWORD *)v176 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *(_WORD *)(v176 + 8) = 257;
        *(_QWORD *)(a1 + 376) = v176;
      }
LABEL_246:
      v170 = *(CACFDictionary **)(a1 + 384);
      if (!v170)
        goto LABEL_250;
      v171 = CACFDictionary::Size(v170);
      v172 = *(CACFDictionary **)(a1 + 376);
      if (v171)
      {
        CACFDictionary::AddDictionary(v172, CFSTR("REPLAYGAIN"), **(const __CFDictionary ***)(a1 + 384));
        v172 = *(CACFDictionary **)(a1 + 376);
      }
      if (v172)
      {
LABEL_250:
        *(_BYTE *)(a1 + 509) = 1;
        v173 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)__little = 0;
        if (!*(_BYTE *)(v173 + 110))
        {
          *(_BYTE *)(v173 + 110) = 1;
          v174 = *(void (**)(_QWORD, _QWORD, uint64_t, char *))(v173 + 24);
          if (v174)
            v174(*(_QWORD *)(v173 + 40), *(unsigned int *)(v173 + 8), 1819243876, __little);
        }
      }
    }
LABEL_257:
    v177 = *(_QWORD *)(a1 + 336);
    if (v177)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
      *(_QWORD *)(a1 + 336) = 0;
    }
    ID3FileStream::EndOfFrame((ID3FileStream *)a1);
    v49 = *(_DWORD *)(a1 + 332);
    v7 = *(_QWORD *)(a1 + 8);
    goto LABEL_260;
  }
  if (v4 > 92)
  {
    if (v4 != 93)
    {
      if (v4 != 103)
        goto LABEL_61;
      v27 = *(_DWORD *)(a1 + 256);
      v28 = *(unsigned __int8 **)(a1 + 264);
      v7 = *(_QWORD *)(a1 + 8);
LABEL_70:
      *(_DWORD *)__little = v27;
      StreamBuffer::Copy((_QWORD *)(v7 + 72), (unsigned int *)__little, v28);
      v50 = *(_DWORD *)__little;
      v51 = *(_DWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 264) += *(unsigned int *)__little;
      v52 = v51 - v50;
      *(_DWORD *)(a1 + 256) = v52;
      if (v52)
      {
        result = 0;
        v39 = 103;
        goto LABEL_110;
      }
      *(_DWORD *)(a1 + 344) = 10;
      v53 = operator new();
      *(_QWORD *)v53 = &off_1E2900F48;
      *(_BYTE *)(v53 + 8) = 0;
      *(_QWORD *)(v53 + 24) = v53 + 24;
      *(_QWORD *)(v53 + 32) = v53 + 24;
      *(_QWORD *)(v53 + 40) = 0;
      *(_BYTE *)(v53 + 48) = 0;
      *(_QWORD *)(v53 + 60) = 0;
      *(_QWORD *)(v53 + 52) = 0;
      *(_WORD *)(v53 + 68) = 0;
      *(_QWORD *)(v53 + 9) = *(_QWORD *)(a1 + 392);
      *(_WORD *)(v53 + 17) = *(_WORD *)(a1 + 400);
      *(_QWORD *)(a1 + 336) = v53;
      v54 = ID3TagBase::Init((ID3TagBase *)v53);
      v55 = *(_QWORD *)(a1 + 8);
      if (!v54)
      {
        *(_QWORD *)(v55 + 96) += (*(_DWORD *)(a1 + 332) - *(_DWORD *)(a1 + 344));
        goto LABEL_257;
      }
      v58 = v55 + 48;
      v56 = *(_QWORD *)(v55 + 48);
      v57 = *(_QWORD *)(v58 + 8);
      if (v57 == v56)
      {
        *(_BYTE *)(a1 + 504) = 1;
      }
      else
      {
        v59 = 0;
        v60 = (v57 - v56) >> 2;
        v61 = 1;
        do
        {
          v62 = *(_DWORD *)(v56 + 4 * v59);
          v59 = v61++;
        }
        while (v62 != 1280922179 && v60 > v59);
        *(_BYTE *)(a1 + 504) = v62 != 1280922179;
        if (v57 != v56)
        {
          v64 = 0;
          v65 = 1;
          do
          {
            v66 = *(_DWORD *)(v56 + 4 * v64);
            v64 = v65++;
          }
          while (v66 != 1347570006 && v60 > v64);
          *(_BYTE *)(a1 + 505) = v66 != 1347570006;
          if (v57 != v56)
          {
            v68 = 0;
            v69 = 1;
            do
            {
              v70 = *(_DWORD *)(v56 + 4 * v68);
              v68 = v69++;
            }
            while (v70 != 1886283375 && v60 > v68);
            *(_BYTE *)(a1 + 507) = v70 != 1886283375;
            if (v57 != v56)
            {
              v72 = 0;
              v73 = 1;
              do
              {
                v74 = *(_DWORD *)(v56 + 4 * v72);
                v72 = v73++;
              }
              while (v74 != 1935893603 && v60 > v72);
              *(_BYTE *)(a1 + 506) = v74 != 1935893603;
              if (v57 != v56)
              {
                v76 = 0;
                v77 = 1;
                do
                {
                  v78 = *(_DWORD *)(v56 + 4 * v76);
                  v76 = v77++;
                }
                while (v78 != 1768842863 && v60 > v76);
                *(_BYTE *)(a1 + 508) = v78 != 1768842863;
                if (v57 == v56)
                {
                  v83 = 0;
                }
                else
                {
                  v80 = 0;
                  v81 = 1;
                  do
                  {
                    v82 = *(_DWORD *)(v56 + 4 * v80) == 1819243876;
                    v83 = v82;
                    v80 = v81++;
                  }
                  while (!v82 && v60 > v80);
                }
                goto LABEL_127;
              }
LABEL_126:
              v83 = 0;
              *(_BYTE *)(a1 + 508) = 1;
LABEL_127:
              *(_BYTE *)(a1 + 509) = !v83;
              *(_BYTE *)(a1 + 510) = 0;
              goto LABEL_129;
            }
LABEL_125:
            *(_BYTE *)(a1 + 506) = 1;
            goto LABEL_126;
          }
LABEL_124:
          *(_BYTE *)(a1 + 507) = 1;
          goto LABEL_125;
        }
      }
      *(_BYTE *)(a1 + 505) = 1;
      goto LABEL_124;
    }
    v7 = *(_QWORD *)(a1 + 8);
    LODWORD(v25) = *(_DWORD *)(v7 + 116);
    goto LABEL_46;
  }
  if (v4 == -1)
    return 0;
  if (v4)
    goto LABEL_61;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(v7 + 80);
  v10 = *(_QWORD *)(v7 + 88);
  v9 = *(_QWORD *)(v7 + 96);
  v11 = v10 + v8;
  if (v9 < v10 + v8 && v9 >= v10)
    LODWORD(v8) = v9 - v10;
  *(_DWORD *)(a1 + 448) = v8;
  *(_QWORD *)(a1 + 456) = v9;
  v13 = *(_QWORD *)(v7 + 48);
  v14 = *(_QWORD *)(v7 + 56);
  v15 = v14 - v13;
  if (v14 != v13)
  {
    v16 = 0;
    v17 = v15 >> 2;
    v18 = 1;
    do
    {
      v19 = *(_DWORD *)(v13 + 4 * v16);
      v16 = v18++;
    }
    while (v19 != 1768174437 && v17 > v16);
    if (v19 == 1768174437)
    {
      *(_DWORD *)__little = 0;
      v21 = *(void (**)(_QWORD, _QWORD, uint64_t, char *))(v7 + 24);
      if (v21)
      {
        v21(*(_QWORD *)(v7 + 40), *(unsigned int *)(v7 + 8), 1768174437, __little);
        v7 = *(_QWORD *)(a1 + 8);
        v10 = *(_QWORD *)(v7 + 88);
        v9 = *(_QWORD *)(v7 + 96);
        v11 = v10 + *(unsigned int *)(v7 + 80);
      }
    }
  }
  *(_DWORD *)(a1 + 256) = 10;
  v23 = v9 < v10 || v11 <= v9;
  v24 = v11 - v9;
  if (v23)
    v25 = 0;
  else
    v25 = v24;
  if (v25 <= 9)
  {
    *(_QWORD *)(a1 + 272) = v9;
    v26 = *(char **)(v7 + 72);
    if (v26 == *(char **)(v7 + 128))
    {
      if (v24)
        v85 = v23;
      else
        v85 = 1;
      v86 = &v26[(v9 - v10)];
      if (v85)
        v87 = 0;
      else
        v87 = v86;
      memmove(v26, v87, v25);
      v7 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v7 + 120) <= 9u)
      {
        *(_DWORD *)(v7 + 120) = 10;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v7 + 128), 0xAuLL);
        v7 = *(_QWORD *)(a1 + 8);
      }
      *(_DWORD *)(v7 + 116) = v25;
      *(_QWORD *)(v7 + 96) = *(_QWORD *)(v7 + 88) + *(unsigned int *)(v7 + 80);
    }
    else
    {
      if (*(_DWORD *)(v7 + 120) <= 9u)
      {
        *(_DWORD *)(v7 + 120) = 10;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v7 + 128), 0xAuLL);
        v7 = *(_QWORD *)(a1 + 8);
      }
      LODWORD(v25) = 0;
      *(_DWORD *)(v7 + 116) = 0;
    }
LABEL_46:
    v32 = *(_DWORD *)(a1 + 256) - v25;
    v33 = *(_QWORD *)(v7 + 88);
    v34 = *(_QWORD *)(v7 + 96);
    v35 = v33 + *(unsigned int *)(v7 + 80);
    if (v35 <= v34 || v34 < v33)
      v37 = 0;
    else
      v37 = v35 - v34;
    if (v32 <= v37)
      v32 = v37;
    *(_DWORD *)__little = v32;
    v38 = v32 + v25;
    if (*(_DWORD *)(v7 + 120) < v38)
    {
      *(_DWORD *)(v7 + 120) = v38;
      CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v7 + 128), v38);
      v7 = *(_QWORD *)(a1 + 8);
    }
    StreamBuffer::Copy((_QWORD *)(v7 + 72), (unsigned int *)__little, (unsigned __int8 *)(*(_QWORD *)(v7 + 128) + *(unsigned int *)(v7 + 116)));
    v7 = *(_QWORD *)(a1 + 8);
    v24 = *(_DWORD *)(v7 + 116) + *(_DWORD *)__little;
    *(_DWORD *)(v7 + 116) = v24;
    if (v24 < *(_DWORD *)(a1 + 256))
    {
      result = 0;
      v39 = 93;
      goto LABEL_110;
    }
    v9 = *(_QWORD *)(a1 + 272);
    v47 = *(_QWORD *)(v7 + 128);
    *(_QWORD *)(v7 + 88) = v9;
    *(_QWORD *)(v7 + 96) = v9;
    *(_QWORD *)(v7 + 72) = v47;
    *(_DWORD *)(v7 + 80) = v24;
    v11 = v9 + v24;
    v10 = v9;
  }
  v48 = 0;
  v194 = 0;
  if (v9 >= v10 && v9 < v11 && v24)
    v48 = (const unsigned __int8 *)(*(_QWORD *)(v7 + 72) + (v9 - v10));
  v49 = ID3Size(0xAu, v48, &v194);
  *(_DWORD *)(a1 + 332) = v49;
  if (!v49)
    return 1685348671;
  if (v194 == 2)
  {
    *(_DWORD *)(a1 + 344) = 0;
    v27 = 10;
    *(_DWORD *)(a1 + 256) = 10;
    v28 = (unsigned __int8 *)(a1 + 392);
    *(_QWORD *)(a1 + 264) = a1 + 392;
    goto LABEL_70;
  }
LABEL_260:
  *(_QWORD *)(v7 + 96) = *(_QWORD *)(a1 + 456) + v49;
  if (*(_BYTE *)(a1 + 536))
  {
    v178 = operator new();
    AudioFileStreamRestrictedRecognizer::AudioFileStreamRestrictedRecognizer(v178, (*(_QWORD *)(a1 + 520) - *(_QWORD *)(a1 + 512)) >> 4, *(const void **)(a1 + 512));
    if (*(_BYTE *)(a1 + 616))
      std::optional<AudioFileAllowListFilter>::operator=[abi:ne180100]<AudioFileAllowListFilter const&,void>(v178 + 360, a1 + 544);
    v179 = 0;
    *(_QWORD *)a2 = v178;
    v180 = xmmword_18F116F80;
  }
  else
  {
    v181 = operator new();
    v179 = 0;
    *(_DWORD *)(v181 + 16) = 0;
    *(_QWORD *)(v181 + 64) = 0;
    *(_QWORD *)(v181 + 72) = 0;
    *(_QWORD *)(v181 + 80) = 0;
    *(_QWORD *)(v181 + 88) = -1;
    *(_QWORD *)(v181 + 96) = -1;
    *(_QWORD *)(v181 + 104) = -1;
    *(_QWORD *)(v181 + 136) = 0;
    *(_DWORD *)(v181 + 144) = 0;
    *(_QWORD *)(v181 + 152) = 0;
    *(_WORD *)(v181 + 176) = 0;
    *(_DWORD *)(v181 + 236) = 0;
    *(_QWORD *)(v181 + 112) = 0;
    *(_QWORD *)(v181 + 120) = 0;
    *(_DWORD *)(v181 + 128) = 0;
    *(_QWORD *)(v181 + 184) = 0;
    *(_QWORD *)(v181 + 192) = 0;
    *(_DWORD *)(v181 + 200) = 0;
    *(_QWORD *)(v181 + 208) = 0;
    *(_QWORD *)(v181 + 216) = 0;
    *(_BYTE *)(v181 + 232) = 0;
    *(_QWORD *)(v181 + 224) = 0;
    v180 = xmmword_18F116F80;
    *(_OWORD *)(v181 + 240) = xmmword_18F116F80;
    *(_DWORD *)(v181 + 256) = 0;
    *(_QWORD *)(v181 + 264) = 0;
    *(_QWORD *)(v181 + 300) = 0;
    *(_QWORD *)(v181 + 284) = 0;
    *(_QWORD *)(v181 + 292) = 0;
    *(_DWORD *)(v181 + 328) = 0;
    *(_QWORD *)(v181 + 312) = 0;
    *(_QWORD *)(v181 + 320) = 0;
    *(_QWORD *)v181 = &off_1E2908F28;
    *(_QWORD *)a2 = v181;
  }
  *(_OWORD *)(a2 + 8) = v180;
  v182 = *(_QWORD *)(a1 + 8);
  v183 = *(_QWORD *)(v182 + 88);
  v184 = *(_QWORD *)(v182 + 96);
  v185 = v183 + *(unsigned int *)(v182 + 80);
  v186 = v184 < v183 || v185 <= v184;
  v187 = v186;
  v188 = v185 - v184;
  if (!v186 && v188)
    v179 = *(_QWORD *)(v182 + 72) + (v184 - v183);
  result = 0;
  *(_QWORD *)(a2 + 32) = v179;
  if (v187)
    v189 = 0;
  else
    v189 = v188;
  *(_DWORD *)(a2 + 24) = v189;
  return result;
}

